This is Ultimate 0.1.24-f1553f5-m
[2020-11-24 21:25:35,622 INFO  L170        SettingsManager]: Resetting all preferences to default values...
[2020-11-24 21:25:35,624 INFO  L174        SettingsManager]: Resetting UltimateCore preferences to default values
[2020-11-24 21:25:35,636 INFO  L177        SettingsManager]: Ultimate Commandline Interface provides no preferences, ignoring...
[2020-11-24 21:25:35,636 INFO  L174        SettingsManager]: Resetting Boogie Preprocessor preferences to default values
[2020-11-24 21:25:35,637 INFO  L174        SettingsManager]: Resetting Boogie Procedure Inliner preferences to default values
[2020-11-24 21:25:35,638 INFO  L174        SettingsManager]: Resetting Abstract Interpretation preferences to default values
[2020-11-24 21:25:35,640 INFO  L174        SettingsManager]: Resetting LassoRanker preferences to default values
[2020-11-24 21:25:35,641 INFO  L174        SettingsManager]: Resetting Reaching Definitions preferences to default values
[2020-11-24 21:25:35,642 INFO  L174        SettingsManager]: Resetting SyntaxChecker preferences to default values
[2020-11-24 21:25:35,643 INFO  L177        SettingsManager]: BÃ¼chi Program Product provides no preferences, ignoring...
[2020-11-24 21:25:35,643 INFO  L174        SettingsManager]: Resetting LTL2Aut preferences to default values
[2020-11-24 21:25:35,644 INFO  L174        SettingsManager]: Resetting PEA to Boogie preferences to default values
[2020-11-24 21:25:35,644 INFO  L174        SettingsManager]: Resetting BlockEncodingV2 preferences to default values
[2020-11-24 21:25:35,646 INFO  L174        SettingsManager]: Resetting ChcToBoogie preferences to default values
[2020-11-24 21:25:35,646 INFO  L174        SettingsManager]: Resetting AutomataScriptInterpreter preferences to default values
[2020-11-24 21:25:35,647 INFO  L174        SettingsManager]: Resetting BuchiAutomizer preferences to default values
[2020-11-24 21:25:35,648 INFO  L174        SettingsManager]: Resetting CACSL2BoogieTranslator preferences to default values
[2020-11-24 21:25:35,649 INFO  L174        SettingsManager]: Resetting CodeCheck preferences to default values
[2020-11-24 21:25:35,650 INFO  L174        SettingsManager]: Resetting InvariantSynthesis preferences to default values
[2020-11-24 21:25:35,651 INFO  L174        SettingsManager]: Resetting RCFGBuilder preferences to default values
[2020-11-24 21:25:35,652 INFO  L174        SettingsManager]: Resetting TraceAbstraction preferences to default values
[2020-11-24 21:25:35,654 INFO  L177        SettingsManager]: TraceAbstractionConcurrent provides no preferences, ignoring...
[2020-11-24 21:25:35,654 INFO  L177        SettingsManager]: TraceAbstractionWithAFAs provides no preferences, ignoring...
[2020-11-24 21:25:35,654 INFO  L174        SettingsManager]: Resetting TreeAutomizer preferences to default values
[2020-11-24 21:25:35,655 INFO  L174        SettingsManager]: Resetting IcfgToChc preferences to default values
[2020-11-24 21:25:35,655 INFO  L174        SettingsManager]: Resetting IcfgTransformer preferences to default values
[2020-11-24 21:25:35,656 INFO  L177        SettingsManager]: ReqToTest provides no preferences, ignoring...
[2020-11-24 21:25:35,656 INFO  L174        SettingsManager]: Resetting UtopiaLTL2Aut preferences to default values
[2020-11-24 21:25:35,656 INFO  L174        SettingsManager]: Resetting UtopiaSpecLang preferences to default values
[2020-11-24 21:25:35,657 INFO  L174        SettingsManager]: Resetting Boogie Printer preferences to default values
[2020-11-24 21:25:35,657 INFO  L174        SettingsManager]: Resetting ChcSmtPrinter preferences to default values
[2020-11-24 21:25:35,658 INFO  L174        SettingsManager]: Resetting ReqPrinter preferences to default values
[2020-11-24 21:25:35,658 INFO  L174        SettingsManager]: Resetting Witness Printer preferences to default values
[2020-11-24 21:25:35,659 INFO  L177        SettingsManager]: Boogie PL CUP Parser provides no preferences, ignoring...
[2020-11-24 21:25:35,659 INFO  L174        SettingsManager]: Resetting CDTParser preferences to default values
[2020-11-24 21:25:35,660 INFO  L177        SettingsManager]: AutomataScriptParser provides no preferences, ignoring...
[2020-11-24 21:25:35,660 INFO  L177        SettingsManager]: ReqParser provides no preferences, ignoring...
[2020-11-24 21:25:35,660 INFO  L174        SettingsManager]: Resetting SmtParser preferences to default values
[2020-11-24 21:25:35,661 INFO  L174        SettingsManager]: Resetting Witness Parser preferences to default values
[2020-11-24 21:25:35,661 INFO  L181        SettingsManager]: Finished resetting all preferences to default values...
[2020-11-24 21:25:35,661 INFO  L98         SettingsManager]: Beginning loading settings from /mnt/data0/jon/SmartPulseTool/SmartPulse/settings.epf
[2020-11-24 21:25:35,669 INFO  L110        SettingsManager]: Loading preferences was successful
[2020-11-24 21:25:35,669 INFO  L112        SettingsManager]: Preferences different from defaults after loading the file:
[2020-11-24 21:25:35,670 INFO  L131        SettingsManager]: Preferences of LTL2Aut differ from their defaults:
[2020-11-24 21:25:35,670 INFO  L133        SettingsManager]:  * Read property from file=true
[2020-11-24 21:25:35,670 INFO  L133        SettingsManager]:  * Path to LTL*BA executable (LTL2BA, LTL3BA)=/mnt/data0/jon/SmartPulseTool/ltl2ba
[2020-11-24 21:25:35,671 INFO  L131        SettingsManager]: Preferences of BlockEncodingV2 differ from their defaults:
[2020-11-24 21:25:35,671 INFO  L133        SettingsManager]:  * Maximize final states=false
[2020-11-24 21:25:35,671 INFO  L133        SettingsManager]:  * Minimize states even if more edges are added than removed.=true
[2020-11-24 21:25:35,671 INFO  L133        SettingsManager]:  * Minimize states using LBE with the strategy=NONE
[2020-11-24 21:25:35,671 INFO  L131        SettingsManager]: Preferences of BuchiAutomizer differ from their defaults:
[2020-11-24 21:25:35,671 INFO  L133        SettingsManager]:  * Compute Interpolants along a Counterexample=Craig_TreeInterpolation
[2020-11-24 21:25:35,671 INFO  L133        SettingsManager]:  * Use old map elimination=false
[2020-11-24 21:25:35,671 INFO  L133        SettingsManager]:  * Try twofold refinement=false
[2020-11-24 21:25:35,672 INFO  L131        SettingsManager]: Preferences of CACSL2BoogieTranslator differ from their defaults:
[2020-11-24 21:25:35,672 INFO  L133        SettingsManager]:  * Check unreachability of error function in SV-COMP mode=false
[2020-11-24 21:25:35,672 INFO  L133        SettingsManager]:  * Overapproximate operations on floating types=true
[2020-11-24 21:25:35,672 INFO  L133        SettingsManager]:  * Check division by zero=IGNORE
[2020-11-24 21:25:35,672 INFO  L133        SettingsManager]:  * Pointer to allocated memory at dereference=ASSUME
[2020-11-24 21:25:35,672 INFO  L133        SettingsManager]:  * If two pointers are subtracted or compared they have the same base address=ASSUME
[2020-11-24 21:25:35,672 INFO  L133        SettingsManager]:  * Check array bounds for arrays that are off heap=ASSUME
[2020-11-24 21:25:35,672 INFO  L133        SettingsManager]:  * Check if freed pointer was valid=false
[2020-11-24 21:25:35,672 INFO  L133        SettingsManager]:  * Use constant arrays=true
[2020-11-24 21:25:35,672 INFO  L133        SettingsManager]:  * Pointer base address is valid at dereference=ASSUME
[2020-11-24 21:25:35,673 INFO  L131        SettingsManager]: Preferences of RCFGBuilder differ from their defaults:
[2020-11-24 21:25:35,673 INFO  L133        SettingsManager]:  * Size of a code block=SingleStatement
[2020-11-24 21:25:35,673 INFO  L133        SettingsManager]:  * SMT solver=Internal_SMTInterpol
[2020-11-24 21:25:35,694 INFO  L81    nceAwareModelManager]: Repository-Root is: /tmp
[2020-11-24 21:25:35,706 INFO  L259   ainManager$Toolchain]: [Toolchain 1]: Applicable parser(s) successfully (re)initialized
[2020-11-24 21:25:35,709 INFO  L215   ainManager$Toolchain]: [Toolchain 1]: Toolchain selected.
[2020-11-24 21:25:35,711 INFO  L271        PluginConnector]: Initializing Boogie PL CUP Parser...
[2020-11-24 21:25:35,711 INFO  L276        PluginConnector]: Boogie PL CUP Parser initialized
[2020-11-24 21:25:35,712 INFO  L430   ainManager$Toolchain]: [Toolchain 1]: Parsing single file: /mnt/data0/jon/SmartPulseTool/MainToken_0x1d37986f252d0e349522ea6c3b98cb935495e63e_balanceof.bpl
[2020-11-24 21:25:35,712 INFO  L111           BoogieParser]: Parsing: '/mnt/data0/jon/SmartPulseTool/MainToken_0x1d37986f252d0e349522ea6c3b98cb935495e63e_balanceof.bpl'
[2020-11-24 21:25:35,857 INFO  L297   ainManager$Toolchain]: ####################### [Toolchain 1] #######################
[2020-11-24 21:25:35,858 INFO  L131        ToolchainWalker]: Walking toolchain with 8 elements.
[2020-11-24 21:25:35,858 INFO  L113        PluginConnector]: ------------------------Boogie Preprocessor----------------------------
[2020-11-24 21:25:35,859 INFO  L271        PluginConnector]: Initializing Boogie Preprocessor...
[2020-11-24 21:25:35,859 INFO  L276        PluginConnector]: Boogie Preprocessor initialized
[2020-11-24 21:25:35,876 INFO  L185        PluginConnector]: Executing the observer EnsureBoogieModelObserver from plugin Boogie Preprocessor for "MainToken_0x1d37986f252d0e349522ea6c3b98cb935495e63e_balanceof.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 24.11 09:25:35" (1/1) ...
[2020-11-24 21:25:35,878 INFO  L185        PluginConnector]: Executing the observer TypeChecker from plugin Boogie Preprocessor for "MainToken_0x1d37986f252d0e349522ea6c3b98cb935495e63e_balanceof.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 24.11 09:25:35" (1/1) ...
[2020-11-24 21:25:35,926 INFO  L185        PluginConnector]: Executing the observer ConstExpander from plugin Boogie Preprocessor for "MainToken_0x1d37986f252d0e349522ea6c3b98cb935495e63e_balanceof.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 24.11 09:25:35" (1/1) ...
[2020-11-24 21:25:35,927 INFO  L185        PluginConnector]: Executing the observer StructExpander from plugin Boogie Preprocessor for "MainToken_0x1d37986f252d0e349522ea6c3b98cb935495e63e_balanceof.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 24.11 09:25:35" (1/1) ...
[2020-11-24 21:25:35,977 INFO  L185        PluginConnector]: Executing the observer UnstructureCode from plugin Boogie Preprocessor for "MainToken_0x1d37986f252d0e349522ea6c3b98cb935495e63e_balanceof.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 24.11 09:25:35" (1/1) ...
[2020-11-24 21:25:36,010 INFO  L185        PluginConnector]: Executing the observer FunctionInliner from plugin Boogie Preprocessor for "MainToken_0x1d37986f252d0e349522ea6c3b98cb935495e63e_balanceof.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 24.11 09:25:35" (1/1) ...
[2020-11-24 21:25:36,030 INFO  L185        PluginConnector]: Executing the observer BoogieSymbolTableConstructor from plugin Boogie Preprocessor for "MainToken_0x1d37986f252d0e349522ea6c3b98cb935495e63e_balanceof.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 24.11 09:25:35" (1/1) ...
[2020-11-24 21:25:36,057 INFO  L132        PluginConnector]: ------------------------ END Boogie Preprocessor----------------------------
[2020-11-24 21:25:36,058 INFO  L113        PluginConnector]: ------------------------UtopiaSpecLang----------------------------
[2020-11-24 21:25:36,058 INFO  L271        PluginConnector]: Initializing UtopiaSpecLang...
[2020-11-24 21:25:36,060 INFO  L276        PluginConnector]: UtopiaSpecLang initialized
[2020-11-24 21:25:36,064 INFO  L185        PluginConnector]: Executing the observer UtopiaSpecLangObserver from plugin UtopiaSpecLang for "MainToken_0x1d37986f252d0e349522ea6c3b98cb935495e63e_balanceof.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 24.11 09:25:35" (1/1) ...
[2020-11-24 21:25:36,094 INFO  L1012  opiaSpecLangObserver]: Parsing LTLPlus Formula to AstNode: [](started(FreezableToken.balanceOf(owner), balances_BasicToken[this][owner] >= 0 && balances_BasicToken[this][owner] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(finished(FreezableToken.balanceOf(owner), return == balances_BasicToken[this][owner] && totalSupply__BasicToken[this] == old(totalSupply__BasicToken[this]) && balances_BasicToken[this] == old(balances_BasicToken[this]) && allowed_StandardToken[this] == old(allowed_StandardToken[this]) && initialized_MainToken[this] == old(initialized_MainToken[this]) && paused_Pausable[this] == old(paused_Pausable[this]) && mintingFinished_MintableToken[this] == old(mintingFinished_MintableToken[this]) && owner_Ownable[this] == old(owner_Ownable[this]) && chains_FreezableToken[this] == old(chains_FreezableToken[this]) && freezings_FreezableToken[this] == old(freezings_FreezableToken[this]) && freezingBalance_FreezableToken[this] == old(freezingBalance_FreezableToken[this]))))
[2020-11-24 21:25:36,100 INFO  L1016  opiaSpecLangObserver]: Successfully lexed: [](started(FreezableToken.balanceOf(owner), balances_BasicToken[this][owner] >= 0 && balances_BasicToken[this][owner] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(finished(FreezableToken.balanceOf(owner), return == balances_BasicToken[this][owner] && totalSupply__BasicToken[this] == old(totalSupply__BasicToken[this]) && balances_BasicToken[this] == old(balances_BasicToken[this]) && allowed_StandardToken[this] == old(allowed_StandardToken[this]) && initialized_MainToken[this] == old(initialized_MainToken[this]) && paused_Pausable[this] == old(paused_Pausable[this]) && mintingFinished_MintableToken[this] == old(mintingFinished_MintableToken[this]) && owner_Ownable[this] == old(owner_Ownable[this]) && chains_FreezableToken[this] == old(chains_FreezableToken[this]) && freezings_FreezableToken[this] == old(freezings_FreezableToken[this]) && freezingBalance_FreezableToken[this] == old(freezingBalance_FreezableToken[this]))))
[2020-11-24 21:25:36,108 INFO  L1018  opiaSpecLangObserver]: Successfully parsed: [](started(FreezableToken.balanceOf(owner), balances_BasicToken[this][owner] >= 0 && balances_BasicToken[this][owner] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(finished(FreezableToken.balanceOf(owner), return == balances_BasicToken[this][owner] && totalSupply__BasicToken[this] == old(totalSupply__BasicToken[this]) && balances_BasicToken[this] == old(balances_BasicToken[this]) && allowed_StandardToken[this] == old(allowed_StandardToken[this]) && initialized_MainToken[this] == old(initialized_MainToken[this]) && paused_Pausable[this] == old(paused_Pausable[this]) && mintingFinished_MintableToken[this] == old(mintingFinished_MintableToken[this]) && owner_Ownable[this] == old(owner_Ownable[this]) && chains_FreezableToken[this] == old(chains_FreezableToken[this]) && freezings_FreezableToken[this] == old(freezings_FreezableToken[this]) && freezingBalance_FreezableToken[this] == old(freezingBalance_FreezableToken[this]))))
[2020-11-24 21:25:36,116 INFO  L636   opiaSpecLangObserver]: Parsed ( balances_BasicToken[this][_owner_s729]>=0 && balances_BasicToken[this][_owner_s729]<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) to BinaryExpression[LOGICAND,BinaryExpression[COMPGEQ,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balances_BasicToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,balanceOf~address_FreezableToken>]]],[IdentifierExpression[_owner_s729,<IMPLEMENTATION_INPARAM,balanceOf~address_FreezableToken>]]],IntegerLiteral[0]],BinaryExpression[COMPLT,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balances_BasicToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,balanceOf~address_FreezableToken>]]],[IdentifierExpression[_owner_s729,<IMPLEMENTATION_INPARAM,balanceOf~address_FreezableToken>]]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]]
[2020-11-24 21:25:36,120 INFO  L636   opiaSpecLangObserver]: Parsed ( ( ( ( ( ( ( ( ( ( balance_s729==balances_BasicToken[this][_owner_s729] && totalSupply__BasicToken[this]==( old(totalSupply__BasicToken[this]) ) ) && balances_BasicToken[this]==( old(balances_BasicToken[this]) ) ) && allowed_StandardToken[this]==( old(allowed_StandardToken[this]) ) ) && initialized_MainToken[this]==( old(initialized_MainToken[this]) ) ) && paused_Pausable[this]==( old(paused_Pausable[this]) ) ) && mintingFinished_MintableToken[this]==( old(mintingFinished_MintableToken[this]) ) ) && owner_Ownable[this]==( old(owner_Ownable[this]) ) ) && chains_FreezableToken[this]==( old(chains_FreezableToken[this]) ) ) && freezings_FreezableToken[this]==( old(freezings_FreezableToken[this]) ) ) && freezingBalance_FreezableToken[this]==( old(freezingBalance_FreezableToken[this]) ) ) to BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[COMPEQ,IdentifierExpression[balance_s729,<IMPLEMENTATION_OUTPARAM,balanceOf~address_FreezableToken>],ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balances_BasicToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,balanceOf~address_FreezableToken>]]],[IdentifierExpression[_owner_s729,<IMPLEMENTATION_INPARAM,balanceOf~address_FreezableToken>]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[totalSupply__BasicToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,balanceOf~address_FreezableToken>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[totalSupply__BasicToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,balanceOf~address_FreezableToken>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[balances_BasicToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,balanceOf~address_FreezableToken>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[balances_BasicToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,balanceOf~address_FreezableToken>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[allowed_StandardToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,balanceOf~address_FreezableToken>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[allowed_StandardToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,balanceOf~address_FreezableToken>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[initialized_MainToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,balanceOf~address_FreezableToken>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[initialized_MainToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,balanceOf~address_FreezableToken>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[paused_Pausable,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,balanceOf~address_FreezableToken>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[paused_Pausable,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,balanceOf~address_FreezableToken>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[mintingFinished_MintableToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,balanceOf~address_FreezableToken>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[mintingFinished_MintableToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,balanceOf~address_FreezableToken>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[owner_Ownable,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,balanceOf~address_FreezableToken>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[owner_Ownable,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,balanceOf~address_FreezableToken>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[chains_FreezableToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,balanceOf~address_FreezableToken>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[chains_FreezableToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,balanceOf~address_FreezableToken>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[freezings_FreezableToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,balanceOf~address_FreezableToken>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[freezings_FreezableToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,balanceOf~address_FreezableToken>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[freezingBalance_FreezableToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,balanceOf~address_FreezableToken>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[freezingBalance_FreezableToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,balanceOf~address_FreezableToken>]]]]]]
[2020-11-24 21:25:36,128 INFO  L1005  opiaSpecLangObserver]: Compiling: [](started(FreezableToken.balanceOf(owner), balances_BasicToken[this][owner] >= 0 && balances_BasicToken[this][owner] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(finished(FreezableToken.balanceOf(owner), return == balances_BasicToken[this][owner] && totalSupply__BasicToken[this] == old(totalSupply__BasicToken[this]) && balances_BasicToken[this] == old(balances_BasicToken[this]) && allowed_StandardToken[this] == old(allowed_StandardToken[this]) && initialized_MainToken[this] == old(initialized_MainToken[this]) && paused_Pausable[this] == old(paused_Pausable[this]) && mintingFinished_MintableToken[this] == old(mintingFinished_MintableToken[this]) && owner_Ownable[this] == old(owner_Ownable[this]) && chains_FreezableToken[this] == old(chains_FreezableToken[this]) && freezings_FreezableToken[this] == old(freezings_FreezableToken[this]) && freezingBalance_FreezableToken[this] == old(freezingBalance_FreezableToken[this]))))
[2020-11-24 21:25:36,128 INFO  L1007  opiaSpecLangObserver]: Compiled to ( []( AP(call_balanceOf_FreezableToken0) ==> ( <>AP(success_balanceOf_FreezableToken0) ) ) )
Executed UtopiaSpecLang
[2020-11-24 21:25:36,152 INFO  L202        PluginConnector]: Adding new model Hardcoded edu.utexas.cs.utopia.specLang AST 24.11 09:25:36 PropertyContainer
[2020-11-24 21:25:36,152 INFO  L132        PluginConnector]: ------------------------ END UtopiaSpecLang----------------------------
[2020-11-24 21:25:36,152 INFO  L113        PluginConnector]: ------------------------Boogie Printer----------------------------
[2020-11-24 21:25:36,153 INFO  L271        PluginConnector]: Initializing Boogie Printer...
[2020-11-24 21:25:36,153 INFO  L276        PluginConnector]: Boogie Printer initialized
[2020-11-24 21:25:36,154 INFO  L185        PluginConnector]: Executing the observer BoogiePrinterObserver from plugin Boogie Printer for "MainToken_0x1d37986f252d0e349522ea6c3b98cb935495e63e_balanceof.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 24.11 09:25:35" (1/2) ...
[2020-11-24 21:25:36,154 INFO  L116   oogiePrinterObserver]: File already exists and will be overwritten: /tmp/boogiePrinter.bpl
[2020-11-24 21:25:36,154 INFO  L120   oogiePrinterObserver]: Writing to file /tmp/boogiePrinter.bpl
[2020-11-24 21:25:36,187 INFO  L185        PluginConnector]: Executing the observer BoogiePrinterObserver from plugin Boogie Printer for "Hardcoded edu.utexas.cs.utopia.specLang AST 24.11 09:25:36" (2/2) ...
[2020-11-24 21:25:36,187 INFO  L132        PluginConnector]: ------------------------ END Boogie Printer----------------------------
[2020-11-24 21:25:36,188 INFO  L113        PluginConnector]: ------------------------RCFGBuilder----------------------------
[2020-11-24 21:25:36,188 INFO  L271        PluginConnector]: Initializing RCFGBuilder...
[2020-11-24 21:25:36,188 INFO  L276        PluginConnector]: RCFGBuilder initialized
[2020-11-24 21:25:36,189 INFO  L185        PluginConnector]: Executing the observer RCFGBuilderObserver from plugin RCFGBuilder for "MainToken_0x1d37986f252d0e349522ea6c3b98cb935495e63e_balanceof.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 24.11 09:25:35" (1/2) ...
[2020-11-24 21:25:36,245 INFO  L130     BoogieDeclarations]: Found specification of procedure FreshRefGenerator__success
[2020-11-24 21:25:36,246 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Basic_ERC20Basic_NoBaseCtor__success
[2020-11-24 21:25:36,246 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Basic_ERC20Basic
[2020-11-24 21:25:36,246 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Basic_ERC20Basic
[2020-11-24 21:25:36,246 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_ERC20Basic
[2020-11-24 21:25:36,246 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_ERC20Basic
[2020-11-24 21:25:36,246 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_ERC20Basic
[2020-11-24 21:25:36,246 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath_NoBaseCtor__success
[2020-11-24 21:25:36,247 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath
[2020-11-24 21:25:36,247 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath
[2020-11-24 21:25:36,247 INFO  L130     BoogieDeclarations]: Found specification of procedure mul~uint256~uint256_SafeMath__success
[2020-11-24 21:25:36,247 INFO  L130     BoogieDeclarations]: Found specification of procedure div~uint256~uint256_SafeMath__success
[2020-11-24 21:25:36,247 INFO  L130     BoogieDeclarations]: Found specification of procedure sub~uint256~uint256_SafeMath__success
[2020-11-24 21:25:36,247 INFO  L130     BoogieDeclarations]: Found specification of procedure add~uint256~uint256_SafeMath__success
[2020-11-24 21:25:36,247 INFO  L130     BoogieDeclarations]: Found specification of procedure BasicToken_BasicToken_NoBaseCtor__success
[2020-11-24 21:25:36,247 INFO  L130     BoogieDeclarations]: Found specification of procedure BasicToken_BasicToken
[2020-11-24 21:25:36,250 INFO  L138     BoogieDeclarations]: Found implementation of procedure BasicToken_BasicToken
[2020-11-24 21:25:36,250 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_BasicToken
[2020-11-24 21:25:36,250 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_BasicToken
[2020-11-24 21:25:36,250 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_BasicToken
[2020-11-24 21:25:36,250 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_BasicToken
[2020-11-24 21:25:36,251 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_BasicToken
[2020-11-24 21:25:36,251 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_BasicToken
[2020-11-24 21:25:36,251 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20_NoBaseCtor__success
[2020-11-24 21:25:36,251 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20
[2020-11-24 21:25:36,251 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20
[2020-11-24 21:25:36,251 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_ERC20
[2020-11-24 21:25:36,251 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_ERC20
[2020-11-24 21:25:36,252 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_ERC20
[2020-11-24 21:25:36,252 INFO  L130     BoogieDeclarations]: Found specification of procedure StandardToken_StandardToken_NoBaseCtor__success
[2020-11-24 21:25:36,252 INFO  L130     BoogieDeclarations]: Found specification of procedure StandardToken_StandardToken
[2020-11-24 21:25:36,252 INFO  L138     BoogieDeclarations]: Found implementation of procedure StandardToken_StandardToken
[2020-11-24 21:25:36,252 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_StandardToken
[2020-11-24 21:25:36,252 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_StandardToken
[2020-11-24 21:25:36,253 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_StandardToken
[2020-11-24 21:25:36,253 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_StandardToken
[2020-11-24 21:25:36,253 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_StandardToken
[2020-11-24 21:25:36,253 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_StandardToken
[2020-11-24 21:25:36,253 INFO  L130     BoogieDeclarations]: Found specification of procedure increaseApproval~address~uint256_StandardToken
[2020-11-24 21:25:36,253 INFO  L138     BoogieDeclarations]: Found implementation of procedure increaseApproval~address~uint256_StandardToken
[2020-11-24 21:25:36,253 INFO  L130     BoogieDeclarations]: Found specification of procedure decreaseApproval~address~uint256_StandardToken
[2020-11-24 21:25:36,254 INFO  L138     BoogieDeclarations]: Found implementation of procedure decreaseApproval~address~uint256_StandardToken
[2020-11-24 21:25:36,254 INFO  L130     BoogieDeclarations]: Found specification of procedure Ownable_Ownable_NoBaseCtor__success
[2020-11-24 21:25:36,254 INFO  L130     BoogieDeclarations]: Found specification of procedure Ownable_Ownable
[2020-11-24 21:25:36,254 INFO  L138     BoogieDeclarations]: Found implementation of procedure Ownable_Ownable
[2020-11-24 21:25:36,254 INFO  L130     BoogieDeclarations]: Found specification of procedure renounceOwnership_Ownable
[2020-11-24 21:25:36,254 INFO  L138     BoogieDeclarations]: Found implementation of procedure renounceOwnership_Ownable
[2020-11-24 21:25:36,255 INFO  L130     BoogieDeclarations]: Found specification of procedure transferOwnership~address_Ownable
[2020-11-24 21:25:36,255 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferOwnership~address_Ownable
[2020-11-24 21:25:36,255 INFO  L130     BoogieDeclarations]: Found specification of procedure _transferOwnership~address_Ownable__success
[2020-11-24 21:25:36,255 INFO  L130     BoogieDeclarations]: Found specification of procedure owner_Ownable
[2020-11-24 21:25:36,255 INFO  L138     BoogieDeclarations]: Found implementation of procedure owner_Ownable
[2020-11-24 21:25:36,255 INFO  L130     BoogieDeclarations]: Found specification of procedure MintableToken_MintableToken_NoBaseCtor__success
[2020-11-24 21:25:36,255 INFO  L130     BoogieDeclarations]: Found specification of procedure MintableToken_MintableToken
[2020-11-24 21:25:36,256 INFO  L138     BoogieDeclarations]: Found implementation of procedure MintableToken_MintableToken
[2020-11-24 21:25:36,256 INFO  L130     BoogieDeclarations]: Found specification of procedure mint~address~uint256_MintableToken
[2020-11-24 21:25:36,256 INFO  L138     BoogieDeclarations]: Found implementation of procedure mint~address~uint256_MintableToken
[2020-11-24 21:25:36,256 INFO  L130     BoogieDeclarations]: Found specification of procedure finishMinting_MintableToken
[2020-11-24 21:25:36,256 INFO  L138     BoogieDeclarations]: Found implementation of procedure finishMinting_MintableToken
[2020-11-24 21:25:36,256 INFO  L130     BoogieDeclarations]: Found specification of procedure mintingFinished_MintableToken
[2020-11-24 21:25:36,256 INFO  L138     BoogieDeclarations]: Found implementation of procedure mintingFinished_MintableToken
[2020-11-24 21:25:36,257 INFO  L130     BoogieDeclarations]: Found specification of procedure FreezableToken_FreezableToken_NoBaseCtor__success
[2020-11-24 21:25:36,257 INFO  L130     BoogieDeclarations]: Found specification of procedure FreezableToken_FreezableToken
[2020-11-24 21:25:36,257 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreezableToken_FreezableToken
[2020-11-24 21:25:36,257 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_FreezableToken
[2020-11-24 21:25:36,257 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_FreezableToken
[2020-11-24 21:25:36,257 INFO  L130     BoogieDeclarations]: Found specification of procedure actualBalanceOf~address_FreezableToken
[2020-11-24 21:25:36,257 INFO  L138     BoogieDeclarations]: Found implementation of procedure actualBalanceOf~address_FreezableToken
[2020-11-24 21:25:36,258 INFO  L130     BoogieDeclarations]: Found specification of procedure freezingBalanceOf~address_FreezableToken
[2020-11-24 21:25:36,258 INFO  L138     BoogieDeclarations]: Found implementation of procedure freezingBalanceOf~address_FreezableToken
[2020-11-24 21:25:36,258 INFO  L130     BoogieDeclarations]: Found specification of procedure freezingCount~address_FreezableToken
[2020-11-24 21:25:36,258 INFO  L138     BoogieDeclarations]: Found implementation of procedure freezingCount~address_FreezableToken
[2020-11-24 21:25:36,258 INFO  L130     BoogieDeclarations]: Found specification of procedure getFreezing~address~uint256_FreezableToken
[2020-11-24 21:25:36,258 INFO  L138     BoogieDeclarations]: Found implementation of procedure getFreezing~address~uint256_FreezableToken
[2020-11-24 21:25:36,258 INFO  L130     BoogieDeclarations]: Found specification of procedure freezeTo~address~uint256~uint64_FreezableToken
[2020-11-24 21:25:36,259 INFO  L138     BoogieDeclarations]: Found implementation of procedure freezeTo~address~uint256~uint64_FreezableToken
[2020-11-24 21:25:36,259 INFO  L130     BoogieDeclarations]: Found specification of procedure releaseOnce_FreezableToken
[2020-11-24 21:25:36,259 INFO  L138     BoogieDeclarations]: Found implementation of procedure releaseOnce_FreezableToken
[2020-11-24 21:25:36,259 INFO  L130     BoogieDeclarations]: Found specification of procedure releaseAll_FreezableToken
[2020-11-24 21:25:36,259 INFO  L138     BoogieDeclarations]: Found implementation of procedure releaseAll_FreezableToken
[2020-11-24 21:25:36,259 INFO  L130     BoogieDeclarations]: Found specification of procedure toKey~address~uint256_FreezableToken__success
[2020-11-24 21:25:36,260 INFO  L130     BoogieDeclarations]: Found specification of procedure freeze~address~uint64_FreezableToken__success
[2020-11-24 21:25:36,260 INFO  L130     BoogieDeclarations]: Found specification of procedure BurnableToken_BurnableToken_NoBaseCtor__success
[2020-11-24 21:25:36,260 INFO  L130     BoogieDeclarations]: Found specification of procedure BurnableToken_BurnableToken
[2020-11-24 21:25:36,260 INFO  L138     BoogieDeclarations]: Found implementation of procedure BurnableToken_BurnableToken
[2020-11-24 21:25:36,260 INFO  L130     BoogieDeclarations]: Found specification of procedure burn~uint256_BurnableToken
[2020-11-24 21:25:36,260 INFO  L138     BoogieDeclarations]: Found implementation of procedure burn~uint256_BurnableToken
[2020-11-24 21:25:36,260 INFO  L130     BoogieDeclarations]: Found specification of procedure _burn~address~uint256_BurnableToken__success
[2020-11-24 21:25:36,261 INFO  L130     BoogieDeclarations]: Found specification of procedure Pausable_Pausable_NoBaseCtor__success
[2020-11-24 21:25:36,261 INFO  L130     BoogieDeclarations]: Found specification of procedure Pausable_Pausable
[2020-11-24 21:25:36,261 INFO  L138     BoogieDeclarations]: Found implementation of procedure Pausable_Pausable
[2020-11-24 21:25:36,261 INFO  L130     BoogieDeclarations]: Found specification of procedure pause_Pausable
[2020-11-24 21:25:36,261 INFO  L138     BoogieDeclarations]: Found implementation of procedure pause_Pausable
[2020-11-24 21:25:36,261 INFO  L130     BoogieDeclarations]: Found specification of procedure unpause_Pausable
[2020-11-24 21:25:36,261 INFO  L138     BoogieDeclarations]: Found implementation of procedure unpause_Pausable
[2020-11-24 21:25:36,261 INFO  L130     BoogieDeclarations]: Found specification of procedure paused_Pausable
[2020-11-24 21:25:36,262 INFO  L138     BoogieDeclarations]: Found implementation of procedure paused_Pausable
[2020-11-24 21:25:36,262 INFO  L130     BoogieDeclarations]: Found specification of procedure FreezableMintableToken_FreezableMintableToken_NoBaseCtor__success
[2020-11-24 21:25:36,262 INFO  L130     BoogieDeclarations]: Found specification of procedure FreezableMintableToken_FreezableMintableToken
[2020-11-24 21:25:36,262 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreezableMintableToken_FreezableMintableToken
[2020-11-24 21:25:36,262 INFO  L130     BoogieDeclarations]: Found specification of procedure mintAndFreeze~address~uint256~uint64_FreezableMintableToken
[2020-11-24 21:25:36,262 INFO  L138     BoogieDeclarations]: Found implementation of procedure mintAndFreeze~address~uint256~uint64_FreezableMintableToken
[2020-11-24 21:25:36,262 INFO  L130     BoogieDeclarations]: Found specification of procedure Consts_Consts_NoBaseCtor__success
[2020-11-24 21:25:36,263 INFO  L130     BoogieDeclarations]: Found specification of procedure Consts_Consts
[2020-11-24 21:25:36,263 INFO  L138     BoogieDeclarations]: Found implementation of procedure Consts_Consts
[2020-11-24 21:25:36,263 INFO  L130     BoogieDeclarations]: Found specification of procedure TOKEN_DECIMALS_Consts
[2020-11-24 21:25:36,263 INFO  L138     BoogieDeclarations]: Found implementation of procedure TOKEN_DECIMALS_Consts
[2020-11-24 21:25:36,263 INFO  L130     BoogieDeclarations]: Found specification of procedure TOKEN_DECIMALS_UINT8_Consts
[2020-11-24 21:25:36,263 INFO  L138     BoogieDeclarations]: Found implementation of procedure TOKEN_DECIMALS_UINT8_Consts
[2020-11-24 21:25:36,264 INFO  L130     BoogieDeclarations]: Found specification of procedure TOKEN_DECIMAL_MULTIPLIER_Consts
[2020-11-24 21:25:36,264 INFO  L138     BoogieDeclarations]: Found implementation of procedure TOKEN_DECIMAL_MULTIPLIER_Consts
[2020-11-24 21:25:36,264 INFO  L130     BoogieDeclarations]: Found specification of procedure TOKEN_NAME_Consts
[2020-11-24 21:25:36,264 INFO  L138     BoogieDeclarations]: Found implementation of procedure TOKEN_NAME_Consts
[2020-11-24 21:25:36,264 INFO  L130     BoogieDeclarations]: Found specification of procedure TOKEN_SYMBOL_Consts
[2020-11-24 21:25:36,264 INFO  L138     BoogieDeclarations]: Found implementation of procedure TOKEN_SYMBOL_Consts
[2020-11-24 21:25:36,264 INFO  L130     BoogieDeclarations]: Found specification of procedure PAUSED_Consts
[2020-11-24 21:25:36,265 INFO  L138     BoogieDeclarations]: Found implementation of procedure PAUSED_Consts
[2020-11-24 21:25:36,265 INFO  L130     BoogieDeclarations]: Found specification of procedure TARGET_USER_Consts
[2020-11-24 21:25:36,265 INFO  L138     BoogieDeclarations]: Found implementation of procedure TARGET_USER_Consts
[2020-11-24 21:25:36,265 INFO  L130     BoogieDeclarations]: Found specification of procedure CONTINUE_MINTING_Consts
[2020-11-24 21:25:36,265 INFO  L138     BoogieDeclarations]: Found implementation of procedure CONTINUE_MINTING_Consts
[2020-11-24 21:25:36,265 INFO  L130     BoogieDeclarations]: Found specification of procedure MainToken_MainToken_NoBaseCtor__success
[2020-11-24 21:25:36,265 INFO  L130     BoogieDeclarations]: Found specification of procedure MainToken_MainToken
[2020-11-24 21:25:36,266 INFO  L138     BoogieDeclarations]: Found implementation of procedure MainToken_MainToken
[2020-11-24 21:25:36,266 INFO  L130     BoogieDeclarations]: Found specification of procedure name_MainToken
[2020-11-24 21:25:36,266 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_MainToken
[2020-11-24 21:25:36,266 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_MainToken
[2020-11-24 21:25:36,266 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_MainToken
[2020-11-24 21:25:36,266 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_MainToken
[2020-11-24 21:25:36,266 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_MainToken
[2020-11-24 21:25:36,266 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_MainToken
[2020-11-24 21:25:36,266 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_MainToken
[2020-11-24 21:25:36,267 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_MainToken
[2020-11-24 21:25:36,267 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_MainToken
[2020-11-24 21:25:36,267 INFO  L130     BoogieDeclarations]: Found specification of procedure init_MainToken__success
[2020-11-24 21:25:36,267 INFO  L130     BoogieDeclarations]: Found specification of procedure initialized_MainToken
[2020-11-24 21:25:36,267 INFO  L138     BoogieDeclarations]: Found implementation of procedure initialized_MainToken
[2020-11-24 21:25:36,267 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackDispatch__success
[2020-11-24 21:25:36,267 INFO  L130     BoogieDeclarations]: Found specification of procedure Fallback_UnknownType__success
[2020-11-24 21:25:36,267 INFO  L130     BoogieDeclarations]: Found specification of procedure send__success
[2020-11-24 21:25:36,268 INFO  L130     BoogieDeclarations]: Found specification of procedure onlyOwner_pre__success
[2020-11-24 21:25:36,268 INFO  L130     BoogieDeclarations]: Found specification of procedure canMint_pre__success
[2020-11-24 21:25:36,268 INFO  L130     BoogieDeclarations]: Found specification of procedure hasMintPermission_pre__success
[2020-11-24 21:25:36,268 INFO  L130     BoogieDeclarations]: Found specification of procedure whenNotPaused_pre__success
[2020-11-24 21:25:36,268 INFO  L130     BoogieDeclarations]: Found specification of procedure whenPaused_pre__success
[2020-11-24 21:25:36,268 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_ERC20Basic
[2020-11-24 21:25:36,268 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_ERC20Basic
[2020-11-24 21:25:36,268 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_SafeMath
[2020-11-24 21:25:36,268 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_SafeMath
[2020-11-24 21:25:36,269 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_BasicToken
[2020-11-24 21:25:36,269 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_BasicToken
[2020-11-24 21:25:36,269 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_ERC20
[2020-11-24 21:25:36,269 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_ERC20
[2020-11-24 21:25:36,269 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_StandardToken
[2020-11-24 21:25:36,269 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_StandardToken
[2020-11-24 21:25:36,269 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_Ownable
[2020-11-24 21:25:36,269 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_Ownable
[2020-11-24 21:25:36,269 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_MintableToken
[2020-11-24 21:25:36,269 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_MintableToken
[2020-11-24 21:25:36,270 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_FreezableToken
[2020-11-24 21:25:36,270 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_FreezableToken
[2020-11-24 21:25:36,270 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_BurnableToken
[2020-11-24 21:25:36,270 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_BurnableToken
[2020-11-24 21:25:36,270 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_Pausable
[2020-11-24 21:25:36,270 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_Pausable
[2020-11-24 21:25:36,270 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_FreezableMintableToken
[2020-11-24 21:25:36,270 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_FreezableMintableToken
[2020-11-24 21:25:36,270 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_Consts
[2020-11-24 21:25:36,270 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_Consts
[2020-11-24 21:25:36,270 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_MainToken
[2020-11-24 21:25:36,271 INFO  L130     BoogieDeclarations]: Found specification of procedure main
[2020-11-24 21:25:36,271 INFO  L130     BoogieDeclarations]: Found specification of procedure FreshRefGenerator__fail
[2020-11-24 21:25:36,271 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Basic_ERC20Basic_NoBaseCtor__fail
[2020-11-24 21:25:36,271 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Basic_ERC20Basic__success
[2020-11-24 21:25:36,271 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Basic_ERC20Basic__fail
[2020-11-24 21:25:36,271 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath_NoBaseCtor__fail
[2020-11-24 21:25:36,271 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath__success
[2020-11-24 21:25:36,271 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath__fail
[2020-11-24 21:25:36,271 INFO  L130     BoogieDeclarations]: Found specification of procedure mul~uint256~uint256_SafeMath__fail
[2020-11-24 21:25:36,271 INFO  L130     BoogieDeclarations]: Found specification of procedure div~uint256~uint256_SafeMath__fail
[2020-11-24 21:25:36,272 INFO  L130     BoogieDeclarations]: Found specification of procedure sub~uint256~uint256_SafeMath__fail
[2020-11-24 21:25:36,272 INFO  L130     BoogieDeclarations]: Found specification of procedure add~uint256~uint256_SafeMath__fail
[2020-11-24 21:25:36,272 INFO  L130     BoogieDeclarations]: Found specification of procedure BasicToken_BasicToken_NoBaseCtor__fail
[2020-11-24 21:25:36,272 INFO  L130     BoogieDeclarations]: Found specification of procedure BasicToken_BasicToken__success
[2020-11-24 21:25:36,272 INFO  L130     BoogieDeclarations]: Found specification of procedure BasicToken_BasicToken__fail
[2020-11-24 21:25:36,272 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_BasicToken__success
[2020-11-24 21:25:36,272 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_BasicToken__fail
[2020-11-24 21:25:36,272 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_BasicToken__success
[2020-11-24 21:25:36,272 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_BasicToken__fail
[2020-11-24 21:25:36,272 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_BasicToken__success
[2020-11-24 21:25:36,272 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_BasicToken__fail
[2020-11-24 21:25:36,273 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20_NoBaseCtor__fail
[2020-11-24 21:25:36,273 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20__success
[2020-11-24 21:25:36,273 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20__fail
[2020-11-24 21:25:36,273 INFO  L130     BoogieDeclarations]: Found specification of procedure StandardToken_StandardToken_NoBaseCtor__fail
[2020-11-24 21:25:36,273 INFO  L130     BoogieDeclarations]: Found specification of procedure StandardToken_StandardToken__success
[2020-11-24 21:25:36,273 INFO  L130     BoogieDeclarations]: Found specification of procedure StandardToken_StandardToken__fail
[2020-11-24 21:25:36,273 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_StandardToken__success
[2020-11-24 21:25:36,273 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_StandardToken__fail
[2020-11-24 21:25:36,273 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_StandardToken__success
[2020-11-24 21:25:36,273 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_StandardToken__fail
[2020-11-24 21:25:36,273 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_StandardToken__success
[2020-11-24 21:25:36,273 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_StandardToken__fail
[2020-11-24 21:25:36,274 INFO  L130     BoogieDeclarations]: Found specification of procedure increaseApproval~address~uint256_StandardToken__success
[2020-11-24 21:25:36,274 INFO  L130     BoogieDeclarations]: Found specification of procedure increaseApproval~address~uint256_StandardToken__fail
[2020-11-24 21:25:36,274 INFO  L130     BoogieDeclarations]: Found specification of procedure decreaseApproval~address~uint256_StandardToken__success
[2020-11-24 21:25:36,274 INFO  L130     BoogieDeclarations]: Found specification of procedure decreaseApproval~address~uint256_StandardToken__fail
[2020-11-24 21:25:36,274 INFO  L130     BoogieDeclarations]: Found specification of procedure Ownable_Ownable_NoBaseCtor__fail
[2020-11-24 21:25:36,274 INFO  L130     BoogieDeclarations]: Found specification of procedure Ownable_Ownable__success
[2020-11-24 21:25:36,274 INFO  L130     BoogieDeclarations]: Found specification of procedure Ownable_Ownable__fail
[2020-11-24 21:25:36,274 INFO  L130     BoogieDeclarations]: Found specification of procedure renounceOwnership_Ownable__success
[2020-11-24 21:25:36,274 INFO  L130     BoogieDeclarations]: Found specification of procedure renounceOwnership_Ownable__fail
[2020-11-24 21:25:36,274 INFO  L130     BoogieDeclarations]: Found specification of procedure transferOwnership~address_Ownable__success
[2020-11-24 21:25:36,274 INFO  L130     BoogieDeclarations]: Found specification of procedure transferOwnership~address_Ownable__fail
[2020-11-24 21:25:36,274 INFO  L130     BoogieDeclarations]: Found specification of procedure _transferOwnership~address_Ownable__fail
[2020-11-24 21:25:36,275 INFO  L130     BoogieDeclarations]: Found specification of procedure owner_Ownable__success
[2020-11-24 21:25:36,275 INFO  L130     BoogieDeclarations]: Found specification of procedure owner_Ownable__fail
[2020-11-24 21:25:36,275 INFO  L130     BoogieDeclarations]: Found specification of procedure MintableToken_MintableToken_NoBaseCtor__fail
[2020-11-24 21:25:36,275 INFO  L130     BoogieDeclarations]: Found specification of procedure MintableToken_MintableToken__success
[2020-11-24 21:25:36,275 INFO  L130     BoogieDeclarations]: Found specification of procedure MintableToken_MintableToken__fail
[2020-11-24 21:25:36,275 INFO  L130     BoogieDeclarations]: Found specification of procedure mint~address~uint256_MintableToken__success
[2020-11-24 21:25:36,275 INFO  L130     BoogieDeclarations]: Found specification of procedure mint~address~uint256_MintableToken__fail
[2020-11-24 21:25:36,275 INFO  L130     BoogieDeclarations]: Found specification of procedure finishMinting_MintableToken__success
[2020-11-24 21:25:36,275 INFO  L130     BoogieDeclarations]: Found specification of procedure finishMinting_MintableToken__fail
[2020-11-24 21:25:36,275 INFO  L130     BoogieDeclarations]: Found specification of procedure mintingFinished_MintableToken__success
[2020-11-24 21:25:36,275 INFO  L130     BoogieDeclarations]: Found specification of procedure mintingFinished_MintableToken__fail
[2020-11-24 21:25:36,275 INFO  L130     BoogieDeclarations]: Found specification of procedure FreezableToken_FreezableToken_NoBaseCtor__fail
[2020-11-24 21:25:36,276 INFO  L130     BoogieDeclarations]: Found specification of procedure FreezableToken_FreezableToken__success
[2020-11-24 21:25:36,276 INFO  L130     BoogieDeclarations]: Found specification of procedure FreezableToken_FreezableToken__fail
[2020-11-24 21:25:36,276 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_FreezableToken__success
[2020-11-24 21:25:36,276 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_FreezableToken__fail
[2020-11-24 21:25:36,276 INFO  L130     BoogieDeclarations]: Found specification of procedure actualBalanceOf~address_FreezableToken__success
[2020-11-24 21:25:36,276 INFO  L130     BoogieDeclarations]: Found specification of procedure actualBalanceOf~address_FreezableToken__fail
[2020-11-24 21:25:36,276 INFO  L130     BoogieDeclarations]: Found specification of procedure freezingBalanceOf~address_FreezableToken__success
[2020-11-24 21:25:36,276 INFO  L130     BoogieDeclarations]: Found specification of procedure freezingBalanceOf~address_FreezableToken__fail
[2020-11-24 21:25:36,276 INFO  L130     BoogieDeclarations]: Found specification of procedure freezingCount~address_FreezableToken__success
[2020-11-24 21:25:36,276 INFO  L130     BoogieDeclarations]: Found specification of procedure freezingCount~address_FreezableToken__fail
[2020-11-24 21:25:36,276 INFO  L130     BoogieDeclarations]: Found specification of procedure getFreezing~address~uint256_FreezableToken__success
[2020-11-24 21:25:36,276 INFO  L130     BoogieDeclarations]: Found specification of procedure getFreezing~address~uint256_FreezableToken__fail
[2020-11-24 21:25:36,277 INFO  L130     BoogieDeclarations]: Found specification of procedure freezeTo~address~uint256~uint64_FreezableToken__success
[2020-11-24 21:25:36,277 INFO  L130     BoogieDeclarations]: Found specification of procedure freezeTo~address~uint256~uint64_FreezableToken__fail
[2020-11-24 21:25:36,277 INFO  L130     BoogieDeclarations]: Found specification of procedure releaseOnce_FreezableToken__success
[2020-11-24 21:25:36,277 INFO  L130     BoogieDeclarations]: Found specification of procedure releaseOnce_FreezableToken__fail
[2020-11-24 21:25:36,277 INFO  L130     BoogieDeclarations]: Found specification of procedure releaseAll_FreezableToken__success
[2020-11-24 21:25:36,277 INFO  L130     BoogieDeclarations]: Found specification of procedure releaseAll_FreezableToken__fail
[2020-11-24 21:25:36,277 INFO  L130     BoogieDeclarations]: Found specification of procedure toKey~address~uint256_FreezableToken__fail
[2020-11-24 21:25:36,277 INFO  L130     BoogieDeclarations]: Found specification of procedure freeze~address~uint64_FreezableToken__fail
[2020-11-24 21:25:36,277 INFO  L130     BoogieDeclarations]: Found specification of procedure BurnableToken_BurnableToken_NoBaseCtor__fail
[2020-11-24 21:25:36,277 INFO  L130     BoogieDeclarations]: Found specification of procedure BurnableToken_BurnableToken__success
[2020-11-24 21:25:36,277 INFO  L130     BoogieDeclarations]: Found specification of procedure BurnableToken_BurnableToken__fail
[2020-11-24 21:25:36,277 INFO  L130     BoogieDeclarations]: Found specification of procedure burn~uint256_BurnableToken__success
[2020-11-24 21:25:36,278 INFO  L130     BoogieDeclarations]: Found specification of procedure burn~uint256_BurnableToken__fail
[2020-11-24 21:25:36,278 INFO  L130     BoogieDeclarations]: Found specification of procedure _burn~address~uint256_BurnableToken__fail
[2020-11-24 21:25:36,278 INFO  L130     BoogieDeclarations]: Found specification of procedure Pausable_Pausable_NoBaseCtor__fail
[2020-11-24 21:25:36,278 INFO  L130     BoogieDeclarations]: Found specification of procedure Pausable_Pausable__success
[2020-11-24 21:25:36,278 INFO  L130     BoogieDeclarations]: Found specification of procedure Pausable_Pausable__fail
[2020-11-24 21:25:36,278 INFO  L130     BoogieDeclarations]: Found specification of procedure pause_Pausable__success
[2020-11-24 21:25:36,278 INFO  L130     BoogieDeclarations]: Found specification of procedure pause_Pausable__fail
[2020-11-24 21:25:36,278 INFO  L130     BoogieDeclarations]: Found specification of procedure unpause_Pausable__success
[2020-11-24 21:25:36,278 INFO  L130     BoogieDeclarations]: Found specification of procedure unpause_Pausable__fail
[2020-11-24 21:25:36,278 INFO  L130     BoogieDeclarations]: Found specification of procedure paused_Pausable__success
[2020-11-24 21:25:36,278 INFO  L130     BoogieDeclarations]: Found specification of procedure paused_Pausable__fail
[2020-11-24 21:25:36,278 INFO  L130     BoogieDeclarations]: Found specification of procedure FreezableMintableToken_FreezableMintableToken_NoBaseCtor__fail
[2020-11-24 21:25:36,279 INFO  L130     BoogieDeclarations]: Found specification of procedure FreezableMintableToken_FreezableMintableToken__success
[2020-11-24 21:25:36,279 INFO  L130     BoogieDeclarations]: Found specification of procedure FreezableMintableToken_FreezableMintableToken__fail
[2020-11-24 21:25:36,279 INFO  L130     BoogieDeclarations]: Found specification of procedure mintAndFreeze~address~uint256~uint64_FreezableMintableToken__success
[2020-11-24 21:25:36,279 INFO  L130     BoogieDeclarations]: Found specification of procedure mintAndFreeze~address~uint256~uint64_FreezableMintableToken__fail
[2020-11-24 21:25:36,279 INFO  L130     BoogieDeclarations]: Found specification of procedure Consts_Consts_NoBaseCtor__fail
[2020-11-24 21:25:36,279 INFO  L130     BoogieDeclarations]: Found specification of procedure Consts_Consts__success
[2020-11-24 21:25:36,279 INFO  L130     BoogieDeclarations]: Found specification of procedure Consts_Consts__fail
[2020-11-24 21:25:36,279 INFO  L130     BoogieDeclarations]: Found specification of procedure TOKEN_DECIMALS_Consts__success
[2020-11-24 21:25:36,279 INFO  L130     BoogieDeclarations]: Found specification of procedure TOKEN_DECIMALS_Consts__fail
[2020-11-24 21:25:36,280 INFO  L130     BoogieDeclarations]: Found specification of procedure TOKEN_DECIMALS_UINT8_Consts__success
[2020-11-24 21:25:36,280 INFO  L130     BoogieDeclarations]: Found specification of procedure TOKEN_DECIMALS_UINT8_Consts__fail
[2020-11-24 21:25:36,280 INFO  L130     BoogieDeclarations]: Found specification of procedure TOKEN_DECIMAL_MULTIPLIER_Consts__success
[2020-11-24 21:25:36,280 INFO  L130     BoogieDeclarations]: Found specification of procedure TOKEN_DECIMAL_MULTIPLIER_Consts__fail
[2020-11-24 21:25:36,280 INFO  L130     BoogieDeclarations]: Found specification of procedure TOKEN_NAME_Consts__success
[2020-11-24 21:25:36,280 INFO  L130     BoogieDeclarations]: Found specification of procedure TOKEN_NAME_Consts__fail
[2020-11-24 21:25:36,281 INFO  L130     BoogieDeclarations]: Found specification of procedure TOKEN_SYMBOL_Consts__success
[2020-11-24 21:25:36,281 INFO  L130     BoogieDeclarations]: Found specification of procedure TOKEN_SYMBOL_Consts__fail
[2020-11-24 21:25:36,281 INFO  L130     BoogieDeclarations]: Found specification of procedure PAUSED_Consts__success
[2020-11-24 21:25:36,281 INFO  L130     BoogieDeclarations]: Found specification of procedure PAUSED_Consts__fail
[2020-11-24 21:25:36,281 INFO  L130     BoogieDeclarations]: Found specification of procedure TARGET_USER_Consts__success
[2020-11-24 21:25:36,281 INFO  L130     BoogieDeclarations]: Found specification of procedure TARGET_USER_Consts__fail
[2020-11-24 21:25:36,281 INFO  L130     BoogieDeclarations]: Found specification of procedure CONTINUE_MINTING_Consts__success
[2020-11-24 21:25:36,281 INFO  L130     BoogieDeclarations]: Found specification of procedure CONTINUE_MINTING_Consts__fail
[2020-11-24 21:25:36,281 INFO  L130     BoogieDeclarations]: Found specification of procedure MainToken_MainToken_NoBaseCtor__fail
[2020-11-24 21:25:36,281 INFO  L130     BoogieDeclarations]: Found specification of procedure MainToken_MainToken__success
[2020-11-24 21:25:36,281 INFO  L130     BoogieDeclarations]: Found specification of procedure MainToken_MainToken__fail
[2020-11-24 21:25:36,282 INFO  L130     BoogieDeclarations]: Found specification of procedure name_MainToken__success
[2020-11-24 21:25:36,282 INFO  L130     BoogieDeclarations]: Found specification of procedure name_MainToken__fail
[2020-11-24 21:25:36,282 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_MainToken__success
[2020-11-24 21:25:36,282 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_MainToken__fail
[2020-11-24 21:25:36,282 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_MainToken__success
[2020-11-24 21:25:36,282 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_MainToken__fail
[2020-11-24 21:25:36,282 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_MainToken__success
[2020-11-24 21:25:36,282 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_MainToken__fail
[2020-11-24 21:25:36,282 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_MainToken__success
[2020-11-24 21:25:36,282 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_MainToken__fail
[2020-11-24 21:25:36,282 INFO  L130     BoogieDeclarations]: Found specification of procedure init_MainToken__fail
[2020-11-24 21:25:36,282 INFO  L130     BoogieDeclarations]: Found specification of procedure initialized_MainToken__success
[2020-11-24 21:25:36,283 INFO  L130     BoogieDeclarations]: Found specification of procedure initialized_MainToken__fail
[2020-11-24 21:25:36,283 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackDispatch__fail
[2020-11-24 21:25:36,283 INFO  L130     BoogieDeclarations]: Found specification of procedure Fallback_UnknownType__fail
[2020-11-24 21:25:36,283 INFO  L130     BoogieDeclarations]: Found specification of procedure send__fail
[2020-11-24 21:25:36,283 INFO  L130     BoogieDeclarations]: Found specification of procedure onlyOwner_pre__fail
[2020-11-24 21:25:36,283 INFO  L130     BoogieDeclarations]: Found specification of procedure canMint_pre__fail
[2020-11-24 21:25:36,283 INFO  L130     BoogieDeclarations]: Found specification of procedure hasMintPermission_pre__fail
[2020-11-24 21:25:36,283 INFO  L130     BoogieDeclarations]: Found specification of procedure whenNotPaused_pre__fail
[2020-11-24 21:25:36,283 INFO  L130     BoogieDeclarations]: Found specification of procedure whenPaused_pre__fail
[2020-11-24 21:25:36,283 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreshRefGenerator__fail
[2020-11-24 21:25:36,283 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreshRefGenerator__success
[2020-11-24 21:25:36,283 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Basic_ERC20Basic_NoBaseCtor__fail
[2020-11-24 21:25:36,284 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Basic_ERC20Basic_NoBaseCtor__success
[2020-11-24 21:25:36,284 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Basic_ERC20Basic__fail
[2020-11-24 21:25:36,284 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Basic_ERC20Basic__success
[2020-11-24 21:25:36,284 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath_NoBaseCtor__fail
[2020-11-24 21:25:36,284 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath_NoBaseCtor__success
[2020-11-24 21:25:36,284 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath__fail
[2020-11-24 21:25:36,284 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath__success
[2020-11-24 21:25:36,284 INFO  L138     BoogieDeclarations]: Found implementation of procedure mul~uint256~uint256_SafeMath__fail
[2020-11-24 21:25:36,284 INFO  L138     BoogieDeclarations]: Found implementation of procedure mul~uint256~uint256_SafeMath__success
[2020-11-24 21:25:36,284 INFO  L138     BoogieDeclarations]: Found implementation of procedure div~uint256~uint256_SafeMath__fail
[2020-11-24 21:25:36,284 INFO  L138     BoogieDeclarations]: Found implementation of procedure div~uint256~uint256_SafeMath__success
[2020-11-24 21:25:36,284 INFO  L138     BoogieDeclarations]: Found implementation of procedure sub~uint256~uint256_SafeMath__fail
[2020-11-24 21:25:36,285 INFO  L138     BoogieDeclarations]: Found implementation of procedure sub~uint256~uint256_SafeMath__success
[2020-11-24 21:25:36,285 INFO  L138     BoogieDeclarations]: Found implementation of procedure add~uint256~uint256_SafeMath__fail
[2020-11-24 21:25:36,285 INFO  L138     BoogieDeclarations]: Found implementation of procedure add~uint256~uint256_SafeMath__success
[2020-11-24 21:25:36,285 INFO  L138     BoogieDeclarations]: Found implementation of procedure BasicToken_BasicToken_NoBaseCtor__fail
[2020-11-24 21:25:36,285 INFO  L138     BoogieDeclarations]: Found implementation of procedure BasicToken_BasicToken_NoBaseCtor__success
[2020-11-24 21:25:36,285 INFO  L138     BoogieDeclarations]: Found implementation of procedure BasicToken_BasicToken__fail
[2020-11-24 21:25:36,285 INFO  L138     BoogieDeclarations]: Found implementation of procedure BasicToken_BasicToken__success
[2020-11-24 21:25:36,285 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_BasicToken__fail
[2020-11-24 21:25:36,285 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_BasicToken__success
[2020-11-24 21:25:36,285 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_BasicToken__fail
[2020-11-24 21:25:36,285 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_BasicToken__success
[2020-11-24 21:25:36,285 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_BasicToken__fail
[2020-11-24 21:25:36,285 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_BasicToken__success
[2020-11-24 21:25:36,286 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20_NoBaseCtor__fail
[2020-11-24 21:25:36,286 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20_NoBaseCtor__success
[2020-11-24 21:25:36,286 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20__fail
[2020-11-24 21:25:36,286 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20__success
[2020-11-24 21:25:36,286 INFO  L138     BoogieDeclarations]: Found implementation of procedure StandardToken_StandardToken_NoBaseCtor__fail
[2020-11-24 21:25:36,286 INFO  L138     BoogieDeclarations]: Found implementation of procedure StandardToken_StandardToken_NoBaseCtor__success
[2020-11-24 21:25:36,286 INFO  L138     BoogieDeclarations]: Found implementation of procedure StandardToken_StandardToken__fail
[2020-11-24 21:25:36,286 INFO  L138     BoogieDeclarations]: Found implementation of procedure StandardToken_StandardToken__success
[2020-11-24 21:25:36,286 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_StandardToken__fail
[2020-11-24 21:25:36,286 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_StandardToken__success
[2020-11-24 21:25:36,286 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_StandardToken__fail
[2020-11-24 21:25:36,286 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_StandardToken__success
[2020-11-24 21:25:36,287 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_StandardToken__fail
[2020-11-24 21:25:36,287 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_StandardToken__success
[2020-11-24 21:25:36,287 INFO  L138     BoogieDeclarations]: Found implementation of procedure increaseApproval~address~uint256_StandardToken__fail
[2020-11-24 21:25:36,287 INFO  L138     BoogieDeclarations]: Found implementation of procedure increaseApproval~address~uint256_StandardToken__success
[2020-11-24 21:25:36,287 INFO  L138     BoogieDeclarations]: Found implementation of procedure decreaseApproval~address~uint256_StandardToken__fail
[2020-11-24 21:25:36,287 INFO  L138     BoogieDeclarations]: Found implementation of procedure decreaseApproval~address~uint256_StandardToken__success
[2020-11-24 21:25:36,287 INFO  L138     BoogieDeclarations]: Found implementation of procedure Ownable_Ownable_NoBaseCtor__fail
[2020-11-24 21:25:36,287 INFO  L138     BoogieDeclarations]: Found implementation of procedure Ownable_Ownable_NoBaseCtor__success
[2020-11-24 21:25:36,287 INFO  L138     BoogieDeclarations]: Found implementation of procedure Ownable_Ownable__fail
[2020-11-24 21:25:36,287 INFO  L138     BoogieDeclarations]: Found implementation of procedure Ownable_Ownable__success
[2020-11-24 21:25:36,287 INFO  L138     BoogieDeclarations]: Found implementation of procedure renounceOwnership_Ownable__fail
[2020-11-24 21:25:36,287 INFO  L138     BoogieDeclarations]: Found implementation of procedure renounceOwnership_Ownable__success
[2020-11-24 21:25:36,288 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferOwnership~address_Ownable__fail
[2020-11-24 21:25:36,288 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferOwnership~address_Ownable__success
[2020-11-24 21:25:36,288 INFO  L138     BoogieDeclarations]: Found implementation of procedure _transferOwnership~address_Ownable__fail
[2020-11-24 21:25:36,288 INFO  L138     BoogieDeclarations]: Found implementation of procedure _transferOwnership~address_Ownable__success
[2020-11-24 21:25:36,288 INFO  L138     BoogieDeclarations]: Found implementation of procedure owner_Ownable__fail
[2020-11-24 21:25:36,288 INFO  L138     BoogieDeclarations]: Found implementation of procedure owner_Ownable__success
[2020-11-24 21:25:36,288 INFO  L138     BoogieDeclarations]: Found implementation of procedure MintableToken_MintableToken_NoBaseCtor__fail
[2020-11-24 21:25:36,288 INFO  L138     BoogieDeclarations]: Found implementation of procedure MintableToken_MintableToken_NoBaseCtor__success
[2020-11-24 21:25:36,288 INFO  L138     BoogieDeclarations]: Found implementation of procedure MintableToken_MintableToken__fail
[2020-11-24 21:25:36,288 INFO  L138     BoogieDeclarations]: Found implementation of procedure MintableToken_MintableToken__success
[2020-11-24 21:25:36,288 INFO  L138     BoogieDeclarations]: Found implementation of procedure mint~address~uint256_MintableToken__fail
[2020-11-24 21:25:36,288 INFO  L138     BoogieDeclarations]: Found implementation of procedure mint~address~uint256_MintableToken__success
[2020-11-24 21:25:36,288 INFO  L138     BoogieDeclarations]: Found implementation of procedure finishMinting_MintableToken__fail
[2020-11-24 21:25:36,289 INFO  L138     BoogieDeclarations]: Found implementation of procedure finishMinting_MintableToken__success
[2020-11-24 21:25:36,289 INFO  L138     BoogieDeclarations]: Found implementation of procedure mintingFinished_MintableToken__fail
[2020-11-24 21:25:36,289 INFO  L138     BoogieDeclarations]: Found implementation of procedure mintingFinished_MintableToken__success
[2020-11-24 21:25:36,289 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreezableToken_FreezableToken_NoBaseCtor__fail
[2020-11-24 21:25:36,289 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreezableToken_FreezableToken_NoBaseCtor__success
[2020-11-24 21:25:36,289 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreezableToken_FreezableToken__fail
[2020-11-24 21:25:36,289 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreezableToken_FreezableToken__success
[2020-11-24 21:25:36,289 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_FreezableToken__fail
[2020-11-24 21:25:36,289 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_FreezableToken__success
[2020-11-24 21:25:36,289 INFO  L138     BoogieDeclarations]: Found implementation of procedure actualBalanceOf~address_FreezableToken__fail
[2020-11-24 21:25:36,289 INFO  L138     BoogieDeclarations]: Found implementation of procedure actualBalanceOf~address_FreezableToken__success
[2020-11-24 21:25:36,289 INFO  L138     BoogieDeclarations]: Found implementation of procedure freezingBalanceOf~address_FreezableToken__fail
[2020-11-24 21:25:36,290 INFO  L138     BoogieDeclarations]: Found implementation of procedure freezingBalanceOf~address_FreezableToken__success
[2020-11-24 21:25:36,290 INFO  L138     BoogieDeclarations]: Found implementation of procedure freezingCount~address_FreezableToken__fail
[2020-11-24 21:25:36,290 INFO  L138     BoogieDeclarations]: Found implementation of procedure freezingCount~address_FreezableToken__success
[2020-11-24 21:25:36,290 INFO  L138     BoogieDeclarations]: Found implementation of procedure getFreezing~address~uint256_FreezableToken__fail
[2020-11-24 21:25:36,290 INFO  L138     BoogieDeclarations]: Found implementation of procedure getFreezing~address~uint256_FreezableToken__success
[2020-11-24 21:25:36,290 INFO  L138     BoogieDeclarations]: Found implementation of procedure freezeTo~address~uint256~uint64_FreezableToken__fail
[2020-11-24 21:25:36,290 INFO  L138     BoogieDeclarations]: Found implementation of procedure freezeTo~address~uint256~uint64_FreezableToken__success
[2020-11-24 21:25:36,290 INFO  L138     BoogieDeclarations]: Found implementation of procedure releaseOnce_FreezableToken__fail
[2020-11-24 21:25:36,290 INFO  L138     BoogieDeclarations]: Found implementation of procedure releaseOnce_FreezableToken__success
[2020-11-24 21:25:36,290 INFO  L138     BoogieDeclarations]: Found implementation of procedure releaseAll_FreezableToken__fail
[2020-11-24 21:25:36,290 INFO  L138     BoogieDeclarations]: Found implementation of procedure releaseAll_FreezableToken__success
[2020-11-24 21:25:36,290 INFO  L138     BoogieDeclarations]: Found implementation of procedure toKey~address~uint256_FreezableToken__fail
[2020-11-24 21:25:36,290 INFO  L138     BoogieDeclarations]: Found implementation of procedure toKey~address~uint256_FreezableToken__success
[2020-11-24 21:25:36,291 INFO  L138     BoogieDeclarations]: Found implementation of procedure freeze~address~uint64_FreezableToken__fail
[2020-11-24 21:25:36,291 INFO  L138     BoogieDeclarations]: Found implementation of procedure freeze~address~uint64_FreezableToken__success
[2020-11-24 21:25:36,291 INFO  L138     BoogieDeclarations]: Found implementation of procedure BurnableToken_BurnableToken_NoBaseCtor__fail
[2020-11-24 21:25:36,291 INFO  L138     BoogieDeclarations]: Found implementation of procedure BurnableToken_BurnableToken_NoBaseCtor__success
[2020-11-24 21:25:36,291 INFO  L138     BoogieDeclarations]: Found implementation of procedure BurnableToken_BurnableToken__fail
[2020-11-24 21:25:36,291 INFO  L138     BoogieDeclarations]: Found implementation of procedure BurnableToken_BurnableToken__success
[2020-11-24 21:25:36,291 INFO  L138     BoogieDeclarations]: Found implementation of procedure burn~uint256_BurnableToken__fail
[2020-11-24 21:25:36,291 INFO  L138     BoogieDeclarations]: Found implementation of procedure burn~uint256_BurnableToken__success
[2020-11-24 21:25:36,291 INFO  L138     BoogieDeclarations]: Found implementation of procedure _burn~address~uint256_BurnableToken__fail
[2020-11-24 21:25:36,291 INFO  L138     BoogieDeclarations]: Found implementation of procedure _burn~address~uint256_BurnableToken__success
[2020-11-24 21:25:36,291 INFO  L138     BoogieDeclarations]: Found implementation of procedure Pausable_Pausable_NoBaseCtor__fail
[2020-11-24 21:25:36,292 INFO  L138     BoogieDeclarations]: Found implementation of procedure Pausable_Pausable_NoBaseCtor__success
[2020-11-24 21:25:36,292 INFO  L138     BoogieDeclarations]: Found implementation of procedure Pausable_Pausable__fail
[2020-11-24 21:25:36,292 INFO  L138     BoogieDeclarations]: Found implementation of procedure Pausable_Pausable__success
[2020-11-24 21:25:36,292 INFO  L138     BoogieDeclarations]: Found implementation of procedure pause_Pausable__fail
[2020-11-24 21:25:36,292 INFO  L138     BoogieDeclarations]: Found implementation of procedure pause_Pausable__success
[2020-11-24 21:25:36,292 INFO  L138     BoogieDeclarations]: Found implementation of procedure unpause_Pausable__fail
[2020-11-24 21:25:36,292 INFO  L138     BoogieDeclarations]: Found implementation of procedure unpause_Pausable__success
[2020-11-24 21:25:36,292 INFO  L138     BoogieDeclarations]: Found implementation of procedure paused_Pausable__fail
[2020-11-24 21:25:36,292 INFO  L138     BoogieDeclarations]: Found implementation of procedure paused_Pausable__success
[2020-11-24 21:25:36,292 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreezableMintableToken_FreezableMintableToken_NoBaseCtor__fail
[2020-11-24 21:25:36,292 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreezableMintableToken_FreezableMintableToken_NoBaseCtor__success
[2020-11-24 21:25:36,292 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreezableMintableToken_FreezableMintableToken__fail
[2020-11-24 21:25:36,293 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreezableMintableToken_FreezableMintableToken__success
[2020-11-24 21:25:36,293 INFO  L138     BoogieDeclarations]: Found implementation of procedure mintAndFreeze~address~uint256~uint64_FreezableMintableToken__fail
[2020-11-24 21:25:36,293 INFO  L138     BoogieDeclarations]: Found implementation of procedure mintAndFreeze~address~uint256~uint64_FreezableMintableToken__success
[2020-11-24 21:25:36,293 INFO  L138     BoogieDeclarations]: Found implementation of procedure Consts_Consts_NoBaseCtor__fail
[2020-11-24 21:25:36,293 INFO  L138     BoogieDeclarations]: Found implementation of procedure Consts_Consts_NoBaseCtor__success
[2020-11-24 21:25:36,293 INFO  L138     BoogieDeclarations]: Found implementation of procedure Consts_Consts__fail
[2020-11-24 21:25:36,293 INFO  L138     BoogieDeclarations]: Found implementation of procedure Consts_Consts__success
[2020-11-24 21:25:36,293 INFO  L138     BoogieDeclarations]: Found implementation of procedure TOKEN_DECIMALS_Consts__fail
[2020-11-24 21:25:36,293 INFO  L138     BoogieDeclarations]: Found implementation of procedure TOKEN_DECIMALS_Consts__success
[2020-11-24 21:25:36,293 INFO  L138     BoogieDeclarations]: Found implementation of procedure TOKEN_DECIMALS_UINT8_Consts__fail
[2020-11-24 21:25:36,293 INFO  L138     BoogieDeclarations]: Found implementation of procedure TOKEN_DECIMALS_UINT8_Consts__success
[2020-11-24 21:25:36,293 INFO  L138     BoogieDeclarations]: Found implementation of procedure TOKEN_DECIMAL_MULTIPLIER_Consts__fail
[2020-11-24 21:25:36,294 INFO  L138     BoogieDeclarations]: Found implementation of procedure TOKEN_DECIMAL_MULTIPLIER_Consts__success
[2020-11-24 21:25:36,294 INFO  L138     BoogieDeclarations]: Found implementation of procedure TOKEN_NAME_Consts__fail
[2020-11-24 21:25:36,294 INFO  L138     BoogieDeclarations]: Found implementation of procedure TOKEN_NAME_Consts__success
[2020-11-24 21:25:36,294 INFO  L138     BoogieDeclarations]: Found implementation of procedure TOKEN_SYMBOL_Consts__fail
[2020-11-24 21:25:36,294 INFO  L138     BoogieDeclarations]: Found implementation of procedure TOKEN_SYMBOL_Consts__success
[2020-11-24 21:25:36,294 INFO  L138     BoogieDeclarations]: Found implementation of procedure PAUSED_Consts__fail
[2020-11-24 21:25:36,294 INFO  L138     BoogieDeclarations]: Found implementation of procedure PAUSED_Consts__success
[2020-11-24 21:25:36,294 INFO  L138     BoogieDeclarations]: Found implementation of procedure TARGET_USER_Consts__fail
[2020-11-24 21:25:36,294 INFO  L138     BoogieDeclarations]: Found implementation of procedure TARGET_USER_Consts__success
[2020-11-24 21:25:36,294 INFO  L138     BoogieDeclarations]: Found implementation of procedure CONTINUE_MINTING_Consts__fail
[2020-11-24 21:25:36,294 INFO  L138     BoogieDeclarations]: Found implementation of procedure CONTINUE_MINTING_Consts__success
[2020-11-24 21:25:36,294 INFO  L138     BoogieDeclarations]: Found implementation of procedure MainToken_MainToken_NoBaseCtor__fail
[2020-11-24 21:25:36,294 INFO  L138     BoogieDeclarations]: Found implementation of procedure MainToken_MainToken_NoBaseCtor__success
[2020-11-24 21:25:36,294 INFO  L138     BoogieDeclarations]: Found implementation of procedure MainToken_MainToken__fail
[2020-11-24 21:25:36,295 INFO  L138     BoogieDeclarations]: Found implementation of procedure MainToken_MainToken__success
[2020-11-24 21:25:36,295 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_MainToken__fail
[2020-11-24 21:25:36,295 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_MainToken__success
[2020-11-24 21:25:36,295 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_MainToken__fail
[2020-11-24 21:25:36,295 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_MainToken__success
[2020-11-24 21:25:36,295 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_MainToken__fail
[2020-11-24 21:25:36,295 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_MainToken__success
[2020-11-24 21:25:36,295 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_MainToken__fail
[2020-11-24 21:25:36,295 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_MainToken__success
[2020-11-24 21:25:36,295 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_MainToken__fail
[2020-11-24 21:25:36,295 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_MainToken__success
[2020-11-24 21:25:36,295 INFO  L138     BoogieDeclarations]: Found implementation of procedure init_MainToken__fail
[2020-11-24 21:25:36,295 INFO  L138     BoogieDeclarations]: Found implementation of procedure init_MainToken__success
[2020-11-24 21:25:36,296 INFO  L138     BoogieDeclarations]: Found implementation of procedure initialized_MainToken__fail
[2020-11-24 21:25:36,296 INFO  L138     BoogieDeclarations]: Found implementation of procedure initialized_MainToken__success
[2020-11-24 21:25:36,296 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackDispatch__fail
[2020-11-24 21:25:36,296 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackDispatch__success
[2020-11-24 21:25:36,296 INFO  L138     BoogieDeclarations]: Found implementation of procedure Fallback_UnknownType__fail
[2020-11-24 21:25:36,296 INFO  L138     BoogieDeclarations]: Found implementation of procedure Fallback_UnknownType__success
[2020-11-24 21:25:36,296 INFO  L138     BoogieDeclarations]: Found implementation of procedure send__fail
[2020-11-24 21:25:36,296 INFO  L138     BoogieDeclarations]: Found implementation of procedure send__success
[2020-11-24 21:25:36,296 INFO  L138     BoogieDeclarations]: Found implementation of procedure onlyOwner_pre__fail
[2020-11-24 21:25:36,296 INFO  L138     BoogieDeclarations]: Found implementation of procedure onlyOwner_pre__success
[2020-11-24 21:25:36,296 INFO  L138     BoogieDeclarations]: Found implementation of procedure canMint_pre__fail
[2020-11-24 21:25:36,296 INFO  L138     BoogieDeclarations]: Found implementation of procedure canMint_pre__success
[2020-11-24 21:25:36,296 INFO  L138     BoogieDeclarations]: Found implementation of procedure hasMintPermission_pre__fail
[2020-11-24 21:25:36,297 INFO  L138     BoogieDeclarations]: Found implementation of procedure hasMintPermission_pre__success
[2020-11-24 21:25:36,297 INFO  L138     BoogieDeclarations]: Found implementation of procedure whenNotPaused_pre__fail
[2020-11-24 21:25:36,297 INFO  L138     BoogieDeclarations]: Found implementation of procedure whenNotPaused_pre__success
[2020-11-24 21:25:36,297 INFO  L138     BoogieDeclarations]: Found implementation of procedure whenPaused_pre__fail
[2020-11-24 21:25:36,297 INFO  L138     BoogieDeclarations]: Found implementation of procedure whenPaused_pre__success
[2020-11-24 21:25:36,297 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_ERC20Basic
[2020-11-24 21:25:36,297 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_ERC20Basic
[2020-11-24 21:25:36,297 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_SafeMath
[2020-11-24 21:25:36,297 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_SafeMath
[2020-11-24 21:25:36,297 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_BasicToken
[2020-11-24 21:25:36,297 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_BasicToken
[2020-11-24 21:25:36,297 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_ERC20
[2020-11-24 21:25:36,297 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_ERC20
[2020-11-24 21:25:36,298 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_StandardToken
[2020-11-24 21:25:36,298 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_StandardToken
[2020-11-24 21:25:36,298 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_Ownable
[2020-11-24 21:25:36,298 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_Ownable
[2020-11-24 21:25:36,298 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_MintableToken
[2020-11-24 21:25:36,298 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_MintableToken
[2020-11-24 21:25:36,298 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_FreezableToken
[2020-11-24 21:25:36,298 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_FreezableToken
[2020-11-24 21:25:36,298 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_BurnableToken
[2020-11-24 21:25:36,298 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_BurnableToken
[2020-11-24 21:25:36,298 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_Pausable
[2020-11-24 21:25:36,298 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_Pausable
[2020-11-24 21:25:36,298 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_FreezableMintableToken
[2020-11-24 21:25:36,298 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_FreezableMintableToken
[2020-11-24 21:25:36,299 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_Consts
[2020-11-24 21:25:36,299 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_Consts
[2020-11-24 21:25:36,299 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_MainToken
[2020-11-24 21:25:36,299 INFO  L138     BoogieDeclarations]: Found implementation of procedure main
[2020-11-24 21:25:36,299 INFO  L130     BoogieDeclarations]: Found specification of procedure ULTIMATE.start
[2020-11-24 21:25:36,299 INFO  L138     BoogieDeclarations]: Found implementation of procedure ULTIMATE.start
[2020-11-24 21:25:36,665 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-24 21:25:36,665 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-24 21:25:36,665 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-24 21:25:37,790 INFO  L281             CfgBuilder]: Using the 1 location(s) as analysis (start of procedure ULTIMATE.start)
[2020-11-24 21:25:37,790 INFO  L286             CfgBuilder]: Removed 13 assue(true) statements.
[2020-11-24 21:25:37,793 INFO  L202        PluginConnector]: Adding new model MainToken_0x1d37986f252d0e349522ea6c3b98cb935495e63e_balanceof.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 24.11 09:25:37 BoogieIcfgContainer
[2020-11-24 21:25:37,793 INFO  L185        PluginConnector]: Executing the observer RCFGBuilderObserver from plugin RCFGBuilder for "Hardcoded edu.utexas.cs.utopia.specLang AST 24.11 09:25:36" (2/2) ...
[2020-11-24 21:25:37,793 INFO  L85     RCFGBuilderObserver]: No WrapperNode. Let Ultimate process with next node
[2020-11-24 21:25:37,793 INFO  L205        PluginConnector]: Invalid model from RCFGBuilder for observer de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder.RCFGBuilderObserver@363dbaff and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 24.11 09:25:37, skipping insertion in model container
[2020-11-24 21:25:37,793 INFO  L132        PluginConnector]: ------------------------ END RCFGBuilder----------------------------
[2020-11-24 21:25:37,793 INFO  L113        PluginConnector]: ------------------------UtopiaLTL2Aut----------------------------
[2020-11-24 21:25:37,793 INFO  L271        PluginConnector]: Initializing UtopiaLTL2Aut...
[2020-11-24 21:25:37,794 INFO  L276        PluginConnector]: UtopiaLTL2Aut initialized
[2020-11-24 21:25:37,794 INFO  L185        PluginConnector]: Executing the observer UtopiaLTL2AutObserver from plugin UtopiaLTL2Aut for "MainToken_0x1d37986f252d0e349522ea6c3b98cb935495e63e_balanceof.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 24.11 09:25:35" (1/3) ...
[2020-11-24 21:25:37,795 INFO  L205        PluginConnector]: Invalid model from UtopiaLTL2Aut for observer edu.utexas.cs.utopia.ltl2aut.UtopiaLTL2AutObserver@5075b09f and model type Hardcoded edu.utexas.cs.utopia.ltl2aut AST 24.11 09:25:37, skipping insertion in model container
[2020-11-24 21:25:37,795 INFO  L185        PluginConnector]: Executing the observer UtopiaLTL2AutObserver from plugin UtopiaLTL2Aut for "Hardcoded edu.utexas.cs.utopia.specLang AST 24.11 09:25:36" (2/3) ...
No working directory specified, using /mnt/data0/jon/SmartPulseTool/ltl2ba
Starting monitored process 1 with /mnt/data0/jon/SmartPulseTool/ltl2ba -f ! ( ( [] ( a -> ( <>b ) ) ) )  (exit command is null, workingDir is null)
[2020-11-24 21:25:37,827 INFO  L202        PluginConnector]: Adding new model Hardcoded edu.utexas.cs.utopia.ltl2aut AST 24.11 09:25:37 NWAContainer
[2020-11-24 21:25:37,828 INFO  L132        PluginConnector]: ------------------------ END UtopiaLTL2Aut----------------------------
[2020-11-24 21:25:37,828 INFO  L113        PluginConnector]: ------------------------BÃ¼chi Program Product----------------------------
[2020-11-24 21:25:37,828 INFO  L271        PluginConnector]: Initializing BÃ¼chi Program Product...
[2020-11-24 21:25:37,828 INFO  L276        PluginConnector]: BÃ¼chi Program Product initialized
[2020-11-24 21:25:37,829 INFO  L185        PluginConnector]: Executing the observer BuchiProductObserver from plugin BÃ¼chi Program Product for "MainToken_0x1d37986f252d0e349522ea6c3b98cb935495e63e_balanceof.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 24.11 09:25:37" (3/4) ...
[2020-11-24 21:25:37,829 INFO  L205        PluginConnector]: Invalid model from BÃ¼chi Program Product for observer de.uni_freiburg.informatik.ultimate.buchiprogramproduct.BuchiProductObserver@67bbd358 and model type LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 24.11 09:25:37, skipping insertion in model container
[2020-11-24 21:25:37,830 INFO  L185        PluginConnector]: Executing the observer BuchiProductObserver from plugin BÃ¼chi Program Product for "Hardcoded edu.utexas.cs.utopia.ltl2aut AST 24.11 09:25:37" (4/4) ...
[2020-11-24 21:25:37,832 INFO  L104   BuchiProductObserver]: Initial property automaton 2 locations, 3 edges
[2020-11-24 21:25:37,839 INFO  L110   BuchiProductObserver]: Initial RCFG 5258 locations, 7412 edges
[2020-11-24 21:25:37,840 INFO  L93    BuchiProductObserver]: Beginning generation of product automaton
[2020-11-24 21:25:37,854 INFO  L136       ProductGenerator]: The program has no step specification, so we assume maximum atomicity
[2020-11-24 21:25:42,115 INFO  L97    BuchiProductObserver]: Finished generation of product automaton successfully
[2020-11-24 21:25:42,132 INFO  L110   BuchiProductObserver]: BuchiProgram size 13180 locations, 24265 edges
[2020-11-24 21:25:42,132 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 24.11 09:25:42 BoogieIcfgContainer
[2020-11-24 21:25:42,132 INFO  L132        PluginConnector]: ------------------------ END BÃ¼chi Program Product----------------------------
[2020-11-24 21:25:42,132 INFO  L113        PluginConnector]: ------------------------BlockEncodingV2----------------------------
[2020-11-24 21:25:42,132 INFO  L271        PluginConnector]: Initializing BlockEncodingV2...
[2020-11-24 21:25:42,134 INFO  L276        PluginConnector]: BlockEncodingV2 initialized
[2020-11-24 21:25:42,134 INFO  L185        PluginConnector]: Executing the observer BlockEncodingObserver from plugin BlockEncodingV2 for "LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 24.11 09:25:42" (1/1) ...
[2020-11-24 21:25:42,354 INFO  L313           BlockEncoder]: Initial Icfg 13180 locations, 24265 edges
[2020-11-24 21:25:42,354 INFO  L258           BlockEncoder]: Using Remove infeasible edges
[2020-11-24 21:25:42,355 INFO  L270           BlockEncoder]: Using Minimize states even if more edges are added than removed.=true
[2020-11-24 21:25:42,355 INFO  L296           BlockEncoder]: Using Remove sink states
[2020-11-24 21:25:42,355 INFO  L171           BlockEncoder]: Using Apply optimizations until nothing changes=true
[2020-11-24 21:25:42,379 INFO  L70    emoveInfeasibleEdges]: Removed 303 edges and 29 locations because of local infeasibility
[2020-11-24 21:25:42,398 INFO  L70        RemoveSinkStates]: Removed 158 edges and 105 locations by removing sink states
[2020-11-24 21:25:42,422 INFO  L70    emoveInfeasibleEdges]: Removed 0 edges and 0 locations because of local infeasibility
[2020-11-24 21:25:42,429 INFO  L70        RemoveSinkStates]: Removed 0 edges and 0 locations by removing sink states
[2020-11-24 21:25:42,437 INFO  L237           BlockEncoder]: Using Create parallel compositions if possible
[2020-11-24 21:25:42,437 INFO  L66        ParallelComposer]: Creating parallel compositions
[2020-11-24 21:25:42,444 INFO  L313           BlockEncoder]: Encoded RCFG 12978 locations, 23703 edges
[2020-11-24 21:25:42,445 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.blockencoding CFG 24.11 09:25:42 BasicIcfg
[2020-11-24 21:25:42,445 INFO  L132        PluginConnector]: ------------------------ END BlockEncodingV2----------------------------
[2020-11-24 21:25:42,445 INFO  L113        PluginConnector]: ------------------------BuchiAutomizer----------------------------
[2020-11-24 21:25:42,445 INFO  L271        PluginConnector]: Initializing BuchiAutomizer...
[2020-11-24 21:25:42,446 INFO  L276        PluginConnector]: BuchiAutomizer initialized
[2020-11-24 21:25:42,447 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-24 21:25:42,447 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "MainToken_0x1d37986f252d0e349522ea6c3b98cb935495e63e_balanceof.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 24.11 09:25:35" (1/6) ...
[2020-11-24 21:25:42,448 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@2a430938 and model type MainToken_0x1d37986f252d0e349522ea6c3b98cb935495e63e_balanceof.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 24.11 09:25:42, skipping insertion in model container
[2020-11-24 21:25:42,448 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-24 21:25:42,449 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Hardcoded edu.utexas.cs.utopia.specLang AST 24.11 09:25:36" (2/6) ...
[2020-11-24 21:25:42,449 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@2a430938 and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 24.11 09:25:42, skipping insertion in model container
[2020-11-24 21:25:42,449 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-24 21:25:42,449 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "MainToken_0x1d37986f252d0e349522ea6c3b98cb935495e63e_balanceof.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 24.11 09:25:37" (3/6) ...
[2020-11-24 21:25:42,449 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@2a430938 and model type MainToken_0x1d37986f252d0e349522ea6c3b98cb935495e63e_balanceof.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer CFG 24.11 09:25:42, skipping insertion in model container
[2020-11-24 21:25:42,450 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-24 21:25:42,450 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Hardcoded edu.utexas.cs.utopia.ltl2aut AST 24.11 09:25:37" (4/6) ...
[2020-11-24 21:25:42,450 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@2a430938 and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 24.11 09:25:42, skipping insertion in model container
[2020-11-24 21:25:42,450 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-24 21:25:42,450 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 24.11 09:25:42" (5/6) ...
[2020-11-24 21:25:42,450 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@2a430938 and model type LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer OTHER 24.11 09:25:42, skipping insertion in model container
[2020-11-24 21:25:42,450 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-24 21:25:42,450 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.blockencoding CFG 24.11 09:25:42" (6/6) ...
[2020-11-24 21:25:42,451 INFO  L404   chiAutomizerObserver]: Analyzing ICFG MainToken_0x1d37986f252d0e349522ea6c3b98cb935495e63e_balanceof.bpl_BEv2
[2020-11-24 21:25:42,478 INFO  L133   ementStrategyFactory]: Using default assertion order modulation
[2020-11-24 21:25:42,478 INFO  L377         BuchiCegarLoop]: Interprodecural is true
[2020-11-24 21:25:42,478 INFO  L378         BuchiCegarLoop]: Hoare is false
[2020-11-24 21:25:42,478 INFO  L379         BuchiCegarLoop]: Compute interpolants for Craig_TreeInterpolation
[2020-11-24 21:25:42,478 INFO  L380         BuchiCegarLoop]: Backedges is STRAIGHT_LINE
[2020-11-24 21:25:42,478 INFO  L381         BuchiCegarLoop]: Determinization is PREDICATE_ABSTRACTION
[2020-11-24 21:25:42,478 INFO  L382         BuchiCegarLoop]: Difference is false
[2020-11-24 21:25:42,478 INFO  L383         BuchiCegarLoop]: Minimize is MINIMIZE_SEVPA
[2020-11-24 21:25:42,478 INFO  L386         BuchiCegarLoop]: ======== Iteration 0==of CEGAR loop == BuchiCegarLoop========
[2020-11-24 21:25:42,555 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 12978 states.
[2020-11-24 21:25:42,637 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-24 21:25:42,637 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-24 21:25:42,637 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-24 21:25:42,645 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-24 21:25:42,645 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-24 21:25:42,645 INFO  L445         BuchiCegarLoop]: ======== Iteration 1============
[2020-11-24 21:25:42,645 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 12978 states.
[2020-11-24 21:25:42,699 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-24 21:25:42,699 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-24 21:25:42,699 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-24 21:25:42,701 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-24 21:25:42,701 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  success_balanceOf_FreezableToken0 := false;
[L2]                  call_balanceOf_FreezableToken0 := false;
[L2]      CALL        call main();
[L14378]              assume null == 0;
[L14379]  CALL        call this := FreshRefGenerator__success();
[L6396]               havoc newRef;
[L6397]               assume Alloc[newRef] == false;
[L6398]               Alloc[newRef] := true;
[L6399]               assume newRef != null;
[L14379]  RET         call this := FreshRefGenerator__success();
[L14380]              assume now >= 0;
[L14381]              assume DType[this] == MainToken;
[L14382]              assume msgvalue_MSG == 0;
[L14383]              gas := gas - 53000;
[L14384]  CALL        call MainToken_MainToken(this, msgsender_MSG, msgvalue_MSG);
[L4183]               havoc __exception;
[L4184]               revert := false;
[L4185]   COND FALSE  !(__exception)
[L4222]   CALL        call MainToken_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9205]   CALL        call Consts_Consts__success(this, msgsender_MSG, msgvalue_MSG);
[L9007]   CALL        call Consts_Consts_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8983]               assume msgsender_MSG != null;
[L8984]               Balance[this] := 0;
[L8985]               TOKEN_DECIMALS_Consts[this] := 18;
[L8986]               TOKEN_DECIMALS_UINT8_Consts[this] := 18;
[L8987]               TOKEN_DECIMAL_MULTIPLIER_Consts[this] := nonlinearPow(10, TOKEN_DECIMALS_Consts[this]) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8988]               TOKEN_NAME_Consts[this] := -1051245219;
[L8989]               TOKEN_SYMBOL_Consts[this] := -1804535220;
[L8990]               PAUSED_Consts[this] := false;
[L8991]               __var_52 := ConstantToRef(-210822415442009814958929812751043848690848471787);
[L8992]               TARGET_USER_Consts[this] := ConstantToRef(-210822415442009814958929812751043848690848471787);
[L8993]               CONTINUE_MINTING_Consts[this] := true;
[L9007]   RET         call Consts_Consts_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9008]   COND TRUE   revert
[L9205]   RET         call Consts_Consts__success(this, msgsender_MSG, msgvalue_MSG);
[L9206]   COND TRUE   revert
[L4222]   RET         call MainToken_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4223]               assume !revert && gas >= 0;
[L14384]  RET         call MainToken_MainToken(this, msgsender_MSG, msgvalue_MSG);
[L14385]              assume !revert && gas >= 0;

Loop:
[L14388]  CALL        call CorralChoice_MainToken(this);
[L14045]              havoc msgsender_MSG;
[L14046]              havoc msgvalue_MSG;
[L14047]              havoc choice;
[L14048]              havoc __ret_0_totalSupply;
[L14049]              havoc _owner_s729;
[L14050]              havoc balance_s729;
[L14051]              havoc _to_s1572;
[L14052]              havoc _value_s1572;
[L14053]              havoc _success_s1572;
[L14054]              havoc _owner_s395;
[L14055]              havoc _spender_s395;
[L14056]              havoc __ret_0_allowance;
[L14057]              havoc _from_s1551;
[L14058]              havoc _to_s1551;
[L14059]              havoc _value_s1551;
[L14060]              havoc _success_s1551;
[L14061]              havoc _spender_s379;
[L14062]              havoc _value_s379;
[L14063]              havoc __ret_0_approve;
[L14064]              havoc _spender_s437;
[L14065]              havoc _addedValue_s437;
[L14066]              havoc __ret_0_increaseApproval;
[L14067]              havoc _spender_s497;
[L14068]              havoc _subtractedValue_s497;
[L14069]              havoc __ret_0_decreaseApproval;
[L14070]              havoc __ret_0_owner;
[L14071]              havoc _newOwner_s558;
[L14072]              havoc __ret_0_mintingFinished;
[L14073]              havoc _to_s664;
[L14074]              havoc _amount_s664;
[L14075]              havoc __ret_0_mint;
[L14076]              havoc __ret_0_finishMinting;
[L14077]              havoc _owner_s742;
[L14078]              havoc balance_s742;
[L14079]              havoc _owner_s754;
[L14080]              havoc balance_s754;
[L14081]              havoc _addr_s792;
[L14082]              havoc count_s792;
[L14083]              havoc _addr_s849;
[L14084]              havoc _index_s849;
[L14085]              havoc _release_s849;
[L14086]              havoc _balance_s849;
[L14087]              havoc _to_s938;
[L14088]              havoc _amount_s938;
[L14089]              havoc _until_s938;
[L14090]              havoc tokens_s1107;
[L14091]              havoc _value_s1261;
[L14092]              havoc __ret_0_paused;
[L14093]              havoc _to_s1449;
[L14094]              havoc _amount_s1449;
[L14095]              havoc _until_s1449;
[L14096]              havoc __ret_0_mintAndFreeze;
[L14097]              havoc __ret_0_TOKEN_DECIMALS;
[L14098]              havoc __ret_0_TOKEN_DECIMALS_UINT8;
[L14099]              havoc __ret_0_TOKEN_DECIMAL_MULTIPLIER;
[L14100]              havoc __ret_0_TOKEN_NAME;
[L14101]              havoc __ret_0_TOKEN_SYMBOL;
[L14102]              havoc __ret_0_PAUSED;
[L14103]              havoc __ret_0_TARGET_USER;
[L14104]              havoc __ret_0_CONTINUE_MINTING;
[L14105]              havoc __ret_0_initialized;
[L14106]              havoc _name_s1511;
[L14107]              havoc _symbol_s1519;
[L14108]              havoc _decimals_s1527;
[L14109]              havoc tmpNow;
[L14110]              havoc gas;
[L14111]              assume gas > 4000000 && gas <= 8000000;
[L14112]              tmpNow := now;
[L14113]              havoc now;
[L14114]              assume now > tmpNow;
[L14115]              assume msgsender_MSG != null;
[L14116]              assume DType[msgsender_MSG] != ERC20Basic;
[L14117]              assume DType[msgsender_MSG] != SafeMath;
[L14118]              assume DType[msgsender_MSG] != BasicToken;
[L14119]              assume DType[msgsender_MSG] != ERC20;
[L14120]              assume DType[msgsender_MSG] != StandardToken;
[L14121]              assume DType[msgsender_MSG] != Ownable;
[L14122]              assume DType[msgsender_MSG] != MintableToken;
[L14123]              assume DType[msgsender_MSG] != FreezableToken;
[L14124]              assume DType[msgsender_MSG] != BurnableToken;
[L14125]              assume DType[msgsender_MSG] != Pausable;
[L14126]              assume DType[msgsender_MSG] != FreezableMintableToken;
[L14127]              assume DType[msgsender_MSG] != Consts;
[L14128]              assume DType[msgsender_MSG] != MainToken;
[L14129]              Alloc[msgsender_MSG] := true;
[L14130]  COND TRUE   choice == 38
[L14131]              gas := gas - 21000;
[L14132]  COND FALSE  !(gas >= 0)
[L14388]  RET         call CorralChoice_MainToken(this);

[2020-11-24 21:25:42,716 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-24 21:25:42,716 INFO  L82        PathProgramCache]: Analyzing trace with hash -87762351, now seen corresponding path program 1 times
[2020-11-24 21:25:42,720 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-24 21:25:42,739 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-24 21:25:42,774 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-24 21:25:42,776 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-24 21:25:42,776 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [4] imperfect sequences [] total 4
[2020-11-24 21:25:43,199 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-24 21:25:43,208 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-11-24 21:25:43,208 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=5, Invalid=7, Unknown=0, NotChecked=0, Total=12
[2020-11-24 21:25:43,209 INFO  L87              Difference]: Start difference. First operand 12978 states. Second operand 4 states.
[2020-11-24 21:25:44,453 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-24 21:25:44,453 INFO  L93              Difference]: Finished difference Result 8080 states and 9481 transitions.
[2020-11-24 21:25:44,453 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 4 states. 
[2020-11-24 21:25:44,455 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 8080 states and 9481 transitions.
[2020-11-24 21:25:44,486 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-24 21:25:44,529 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 8080 states to 8076 states and 9473 transitions.
[2020-11-24 21:25:44,529 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 4
[2020-11-24 21:25:44,532 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1815
[2020-11-24 21:25:44,533 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 8076 states and 9473 transitions.
[2020-11-24 21:25:44,552 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-24 21:25:44,552 INFO  L728         BuchiCegarLoop]: Abstraction has 8076 states and 9473 transitions.
[2020-11-24 21:25:44,574 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 8076 states and 9473 transitions.
[2020-11-24 21:25:44,688 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 8076 to 8076.
[2020-11-24 21:25:44,688 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 8076 states.
[2020-11-24 21:25:44,702 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 8076 states to 8076 states and 9473 transitions.
[2020-11-24 21:25:44,703 INFO  L751         BuchiCegarLoop]: Abstraction has 8076 states and 9473 transitions.
[2020-11-24 21:25:44,703 INFO  L631         BuchiCegarLoop]: Abstraction has 8076 states and 9473 transitions.
[2020-11-24 21:25:44,703 INFO  L445         BuchiCegarLoop]: ======== Iteration 2============
[2020-11-24 21:25:44,703 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 8076 states and 9473 transitions.
[2020-11-24 21:25:44,715 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-24 21:25:44,716 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-24 21:25:44,716 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-24 21:25:44,718 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-24 21:25:44,718 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  success_balanceOf_FreezableToken0 := false;
[L2]                  call_balanceOf_FreezableToken0 := false;
[L2]      CALL        call main();
[L14378]              assume null == 0;
[L14379]  CALL        call this := FreshRefGenerator__success();
[L6396]               havoc newRef;
[L6397]               assume Alloc[newRef] == false;
[L6398]               Alloc[newRef] := true;
[L6399]               assume newRef != null;
[L14379]  RET         call this := FreshRefGenerator__success();
[L14380]              assume now >= 0;
[L14381]              assume DType[this] == MainToken;
[L14382]              assume msgvalue_MSG == 0;
[L14383]              gas := gas - 53000;
[L14384]  CALL        call MainToken_MainToken(this, msgsender_MSG, msgvalue_MSG);
[L4183]               havoc __exception;
[L4184]               revert := false;
[L4185]   COND FALSE  !(__exception)
[L4222]   CALL        call MainToken_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9205]   CALL        call Consts_Consts__success(this, msgsender_MSG, msgvalue_MSG);
[L9007]   CALL        call Consts_Consts_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8983]               assume msgsender_MSG != null;
[L8984]               Balance[this] := 0;
[L8985]               TOKEN_DECIMALS_Consts[this] := 18;
[L8986]               TOKEN_DECIMALS_UINT8_Consts[this] := 18;
[L8987]               TOKEN_DECIMAL_MULTIPLIER_Consts[this] := nonlinearPow(10, TOKEN_DECIMALS_Consts[this]) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8988]               TOKEN_NAME_Consts[this] := -1051245219;
[L8989]               TOKEN_SYMBOL_Consts[this] := -1804535220;
[L8990]               PAUSED_Consts[this] := false;
[L8991]               __var_52 := ConstantToRef(-210822415442009814958929812751043848690848471787);
[L8992]               TARGET_USER_Consts[this] := ConstantToRef(-210822415442009814958929812751043848690848471787);
[L8993]               CONTINUE_MINTING_Consts[this] := true;
[L9007]   RET         call Consts_Consts_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9008]   COND FALSE  !(revert)
[L9205]   RET         call Consts_Consts__success(this, msgsender_MSG, msgvalue_MSG);
[L9206]   COND TRUE   revert
[L4222]   RET         call MainToken_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4223]               assume !revert && gas >= 0;
[L14384]  RET         call MainToken_MainToken(this, msgsender_MSG, msgvalue_MSG);
[L14385]              assume !revert && gas >= 0;
[L14388]  CALL        call CorralChoice_MainToken(this);
[L14045]              havoc msgsender_MSG;
[L14046]              havoc msgvalue_MSG;
[L14047]              havoc choice;
[L14048]              havoc __ret_0_totalSupply;
[L14049]              havoc _owner_s729;
[L14050]              havoc balance_s729;
[L14051]              havoc _to_s1572;
[L14052]              havoc _value_s1572;
[L14053]              havoc _success_s1572;
[L14054]              havoc _owner_s395;
[L14055]              havoc _spender_s395;
[L14056]              havoc __ret_0_allowance;
[L14057]              havoc _from_s1551;
[L14058]              havoc _to_s1551;
[L14059]              havoc _value_s1551;
[L14060]              havoc _success_s1551;
[L14061]              havoc _spender_s379;
[L14062]              havoc _value_s379;
[L14063]              havoc __ret_0_approve;
[L14064]              havoc _spender_s437;
[L14065]              havoc _addedValue_s437;
[L14066]              havoc __ret_0_increaseApproval;
[L14067]              havoc _spender_s497;
[L14068]              havoc _subtractedValue_s497;
[L14069]              havoc __ret_0_decreaseApproval;
[L14070]              havoc __ret_0_owner;
[L14071]              havoc _newOwner_s558;
[L14072]              havoc __ret_0_mintingFinished;
[L14073]              havoc _to_s664;
[L14074]              havoc _amount_s664;
[L14075]              havoc __ret_0_mint;
[L14076]              havoc __ret_0_finishMinting;
[L14077]              havoc _owner_s742;
[L14078]              havoc balance_s742;
[L14079]              havoc _owner_s754;
[L14080]              havoc balance_s754;
[L14081]              havoc _addr_s792;
[L14082]              havoc count_s792;
[L14083]              havoc _addr_s849;
[L14084]              havoc _index_s849;
[L14085]              havoc _release_s849;
[L14086]              havoc _balance_s849;
[L14087]              havoc _to_s938;
[L14088]              havoc _amount_s938;
[L14089]              havoc _until_s938;
[L14090]              havoc tokens_s1107;
[L14091]              havoc _value_s1261;
[L14092]              havoc __ret_0_paused;
[L14093]              havoc _to_s1449;
[L14094]              havoc _amount_s1449;
[L14095]              havoc _until_s1449;
[L14096]              havoc __ret_0_mintAndFreeze;
[L14097]              havoc __ret_0_TOKEN_DECIMALS;
[L14098]              havoc __ret_0_TOKEN_DECIMALS_UINT8;
[L14099]              havoc __ret_0_TOKEN_DECIMAL_MULTIPLIER;
[L14100]              havoc __ret_0_TOKEN_NAME;
[L14101]              havoc __ret_0_TOKEN_SYMBOL;
[L14102]              havoc __ret_0_PAUSED;
[L14103]              havoc __ret_0_TARGET_USER;
[L14104]              havoc __ret_0_CONTINUE_MINTING;
[L14105]              havoc __ret_0_initialized;
[L14106]              havoc _name_s1511;
[L14107]              havoc _symbol_s1519;
[L14108]              havoc _decimals_s1527;
[L14109]              havoc tmpNow;
[L14110]              havoc gas;
[L14111]              assume gas > 4000000 && gas <= 8000000;
[L14112]              tmpNow := now;
[L14113]              havoc now;
[L14114]              assume now > tmpNow;
[L14115]              assume msgsender_MSG != null;
[L14116]              assume DType[msgsender_MSG] != ERC20Basic;
[L14117]              assume DType[msgsender_MSG] != SafeMath;
[L14118]              assume DType[msgsender_MSG] != BasicToken;
[L14119]              assume DType[msgsender_MSG] != ERC20;
[L14120]              assume DType[msgsender_MSG] != StandardToken;
[L14121]              assume DType[msgsender_MSG] != Ownable;
[L14122]              assume DType[msgsender_MSG] != MintableToken;
[L14123]              assume DType[msgsender_MSG] != FreezableToken;
[L14124]              assume DType[msgsender_MSG] != BurnableToken;
[L14125]              assume DType[msgsender_MSG] != Pausable;
[L14126]              assume DType[msgsender_MSG] != FreezableMintableToken;
[L14127]              assume DType[msgsender_MSG] != Consts;
[L14128]              assume DType[msgsender_MSG] != MainToken;
[L14129]              Alloc[msgsender_MSG] := true;
[L14130]  COND FALSE  !(choice == 38)
[L14136]  COND TRUE   choice == 37
[L14137]              gas := gas - 21000;
[L14138]  COND TRUE   gas >= 0
[L14139]              assume msgvalue_MSG == 0;
[L14140]  CALL        call balance_s729 := balanceOf~address_FreezableToken(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume balances_BasicToken[this][_owner_s729] >= 0 && balances_BasicToken[this][_owner_s729] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_balanceOf_FreezableToken0 := true;
[L2]                  call_balanceOf_FreezableToken0 := false;
[L2]                  revert := revert_hold;
[L1999]               havoc __exception;
[L2000]               revert := false;
[L2001]   COND FALSE  !(__exception)
[L2038]   CALL        call balance_s729 := balanceOf~address_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L7405]   COND TRUE   DType[this] == MainToken
[L7406]   CALL        call __var_14 := balanceOf~address_BasicToken__success(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L6660]               __ret_0_ := balances_BasicToken[this][_owner_s214];
[L7406]   RET         call __var_14 := balanceOf~address_BasicToken__success(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L7407]   COND TRUE   revert
[L2038]   RET         call balance_s729 := balanceOf~address_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L2039]               assume !revert && gas >= 0;
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume !((((((((((balance_s729 == balances_BasicToken[this][_owner_s729] && totalSupply__BasicToken[this] == old(totalSupply__BasicToken[this])) && balances_BasicToken[this] == old(balances_BasicToken[this])) && allowed_StandardToken[this] == old(allowed_StandardToken[this])) && initialized_MainToken[this] == old(initialized_MainToken[this])) && paused_Pausable[this] == old(paused_Pausable[this])) && mintingFinished_MintableToken[this] == old(mintingFinished_MintableToken[this])) && owner_Ownable[this] == old(owner_Ownable[this])) && chains_FreezableToken[this] == old(chains_FreezableToken[this])) && freezings_FreezableToken[this] == old(freezings_FreezableToken[this])) && freezingBalance_FreezableToken[this] == old(freezingBalance_FreezableToken[this]));
[L2]                  revert := revert_hold;
[L14140]  RET         call balance_s729 := balanceOf~address_FreezableToken(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L14388]  RET         call CorralChoice_MainToken(this);

Loop:
[L14388]  CALL        call CorralChoice_MainToken(this);
[L14045]              havoc msgsender_MSG;
[L14046]              havoc msgvalue_MSG;
[L14047]              havoc choice;
[L14048]              havoc __ret_0_totalSupply;
[L14049]              havoc _owner_s729;
[L14050]              havoc balance_s729;
[L14051]              havoc _to_s1572;
[L14052]              havoc _value_s1572;
[L14053]              havoc _success_s1572;
[L14054]              havoc _owner_s395;
[L14055]              havoc _spender_s395;
[L14056]              havoc __ret_0_allowance;
[L14057]              havoc _from_s1551;
[L14058]              havoc _to_s1551;
[L14059]              havoc _value_s1551;
[L14060]              havoc _success_s1551;
[L14061]              havoc _spender_s379;
[L14062]              havoc _value_s379;
[L14063]              havoc __ret_0_approve;
[L14064]              havoc _spender_s437;
[L14065]              havoc _addedValue_s437;
[L14066]              havoc __ret_0_increaseApproval;
[L14067]              havoc _spender_s497;
[L14068]              havoc _subtractedValue_s497;
[L14069]              havoc __ret_0_decreaseApproval;
[L14070]              havoc __ret_0_owner;
[L14071]              havoc _newOwner_s558;
[L14072]              havoc __ret_0_mintingFinished;
[L14073]              havoc _to_s664;
[L14074]              havoc _amount_s664;
[L14075]              havoc __ret_0_mint;
[L14076]              havoc __ret_0_finishMinting;
[L14077]              havoc _owner_s742;
[L14078]              havoc balance_s742;
[L14079]              havoc _owner_s754;
[L14080]              havoc balance_s754;
[L14081]              havoc _addr_s792;
[L14082]              havoc count_s792;
[L14083]              havoc _addr_s849;
[L14084]              havoc _index_s849;
[L14085]              havoc _release_s849;
[L14086]              havoc _balance_s849;
[L14087]              havoc _to_s938;
[L14088]              havoc _amount_s938;
[L14089]              havoc _until_s938;
[L14090]              havoc tokens_s1107;
[L14091]              havoc _value_s1261;
[L14092]              havoc __ret_0_paused;
[L14093]              havoc _to_s1449;
[L14094]              havoc _amount_s1449;
[L14095]              havoc _until_s1449;
[L14096]              havoc __ret_0_mintAndFreeze;
[L14097]              havoc __ret_0_TOKEN_DECIMALS;
[L14098]              havoc __ret_0_TOKEN_DECIMALS_UINT8;
[L14099]              havoc __ret_0_TOKEN_DECIMAL_MULTIPLIER;
[L14100]              havoc __ret_0_TOKEN_NAME;
[L14101]              havoc __ret_0_TOKEN_SYMBOL;
[L14102]              havoc __ret_0_PAUSED;
[L14103]              havoc __ret_0_TARGET_USER;
[L14104]              havoc __ret_0_CONTINUE_MINTING;
[L14105]              havoc __ret_0_initialized;
[L14106]              havoc _name_s1511;
[L14107]              havoc _symbol_s1519;
[L14108]              havoc _decimals_s1527;
[L14109]              havoc tmpNow;
[L14110]              havoc gas;
[L14111]              assume gas > 4000000 && gas <= 8000000;
[L14112]              tmpNow := now;
[L14113]              havoc now;
[L14114]              assume now > tmpNow;
[L14115]              assume msgsender_MSG != null;
[L14116]              assume DType[msgsender_MSG] != ERC20Basic;
[L14117]              assume DType[msgsender_MSG] != SafeMath;
[L14118]              assume DType[msgsender_MSG] != BasicToken;
[L14119]              assume DType[msgsender_MSG] != ERC20;
[L14120]              assume DType[msgsender_MSG] != StandardToken;
[L14121]              assume DType[msgsender_MSG] != Ownable;
[L14122]              assume DType[msgsender_MSG] != MintableToken;
[L14123]              assume DType[msgsender_MSG] != FreezableToken;
[L14124]              assume DType[msgsender_MSG] != BurnableToken;
[L14125]              assume DType[msgsender_MSG] != Pausable;
[L14126]              assume DType[msgsender_MSG] != FreezableMintableToken;
[L14127]              assume DType[msgsender_MSG] != Consts;
[L14128]              assume DType[msgsender_MSG] != MainToken;
[L14129]              Alloc[msgsender_MSG] := true;
[L14130]  COND FALSE  !(choice == 38)
[L14136]  COND TRUE   choice == 37
[L14137]              gas := gas - 21000;
[L14138]  COND TRUE   gas >= 0
[L14139]              assume msgvalue_MSG == 0;
[L14140]  CALL        call balance_s729 := balanceOf~address_FreezableToken(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume balances_BasicToken[this][_owner_s729] >= 0 && balances_BasicToken[this][_owner_s729] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_balanceOf_FreezableToken0 := true;
[L2]                  call_balanceOf_FreezableToken0 := false;
[L2]                  revert := revert_hold;
[L1999]               havoc __exception;
[L2000]               revert := false;
[L2001]   COND FALSE  !(__exception)
[L2038]   CALL        call balance_s729 := balanceOf~address_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L7405]   COND TRUE   DType[this] == MainToken
[L7406]   CALL        call __var_14 := balanceOf~address_BasicToken__success(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L6660]               __ret_0_ := balances_BasicToken[this][_owner_s214];
[L7406]   RET         call __var_14 := balanceOf~address_BasicToken__success(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L7407]   COND TRUE   revert
[L2038]   RET         call balance_s729 := balanceOf~address_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L2039]               assume !revert && gas >= 0;
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume !((((((((((balance_s729 == balances_BasicToken[this][_owner_s729] && totalSupply__BasicToken[this] == old(totalSupply__BasicToken[this])) && balances_BasicToken[this] == old(balances_BasicToken[this])) && allowed_StandardToken[this] == old(allowed_StandardToken[this])) && initialized_MainToken[this] == old(initialized_MainToken[this])) && paused_Pausable[this] == old(paused_Pausable[this])) && mintingFinished_MintableToken[this] == old(mintingFinished_MintableToken[this])) && owner_Ownable[this] == old(owner_Ownable[this])) && chains_FreezableToken[this] == old(chains_FreezableToken[this])) && freezings_FreezableToken[this] == old(freezings_FreezableToken[this])) && freezingBalance_FreezableToken[this] == old(freezingBalance_FreezableToken[this]));
[L2]                  revert := revert_hold;
[L14140]  RET         call balance_s729 := balanceOf~address_FreezableToken(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L14388]  RET         call CorralChoice_MainToken(this);

[2020-11-24 21:25:44,722 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-24 21:25:44,722 INFO  L82        PathProgramCache]: Analyzing trace with hash -1071088525, now seen corresponding path program 1 times
[2020-11-24 21:25:44,723 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-24 21:25:44,733 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-24 21:25:44,766 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-24 21:25:44,766 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-24 21:25:44,766 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [3] imperfect sequences [] total 3
[2020-11-24 21:25:44,767 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-24 21:25:44,767 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-11-24 21:25:44,767 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-11-24 21:25:44,768 INFO  L87              Difference]: Start difference. First operand 8076 states and 9473 transitions. cyclomatic complexity: 1415 Second operand 3 states.
[2020-11-24 21:25:44,954 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-24 21:25:44,955 INFO  L93              Difference]: Finished difference Result 9532 states and 10921 transitions.
[2020-11-24 21:25:44,955 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-11-24 21:25:44,955 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 9532 states and 10921 transitions.
[2020-11-24 21:25:44,985 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-24 21:25:45,031 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 9532 states to 9532 states and 10921 transitions.
[2020-11-24 21:25:45,031 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 2233
[2020-11-24 21:25:45,033 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 2233
[2020-11-24 21:25:45,033 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 9532 states and 10921 transitions.
[2020-11-24 21:25:45,044 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-24 21:25:45,044 INFO  L728         BuchiCegarLoop]: Abstraction has 9532 states and 10921 transitions.
[2020-11-24 21:25:45,056 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 9532 states and 10921 transitions.
[2020-11-24 21:25:45,144 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 9532 to 8436.
[2020-11-24 21:25:45,144 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 8436 states.
[2020-11-24 21:25:45,154 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 8436 states to 8436 states and 9559 transitions.
[2020-11-24 21:25:45,154 INFO  L751         BuchiCegarLoop]: Abstraction has 8436 states and 9559 transitions.
[2020-11-24 21:25:45,154 INFO  L631         BuchiCegarLoop]: Abstraction has 8436 states and 9559 transitions.
[2020-11-24 21:25:45,154 INFO  L445         BuchiCegarLoop]: ======== Iteration 3============
[2020-11-24 21:25:45,154 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 8436 states and 9559 transitions.
[2020-11-24 21:25:45,166 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-24 21:25:45,166 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-24 21:25:45,166 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-24 21:25:45,173 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [38, 38, 38, 38, 38, 38, 38, 38, 38, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-24 21:25:45,173 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  success_balanceOf_FreezableToken0 := false;
[L2]                  call_balanceOf_FreezableToken0 := false;
[L2]      CALL        call main();
[L14378]              assume null == 0;
[L14379]  CALL        call this := FreshRefGenerator__success();
[L6396]               havoc newRef;
[L6397]               assume Alloc[newRef] == false;
[L6398]               Alloc[newRef] := true;
[L6399]               assume newRef != null;
[L14379]  RET         call this := FreshRefGenerator__success();
[L14380]              assume now >= 0;
[L14381]              assume DType[this] == MainToken;
[L14382]              assume msgvalue_MSG == 0;
[L14383]              gas := gas - 53000;
[L14384]  CALL        call MainToken_MainToken(this, msgsender_MSG, msgvalue_MSG);
[L4183]               havoc __exception;
[L4184]               revert := false;
[L4185]   COND FALSE  !(__exception)
[L4222]   CALL        call MainToken_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9205]   CALL        call Consts_Consts__success(this, msgsender_MSG, msgvalue_MSG);
[L9007]   CALL        call Consts_Consts_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8983]               assume msgsender_MSG != null;
[L8984]               Balance[this] := 0;
[L8985]               TOKEN_DECIMALS_Consts[this] := 18;
[L8986]               TOKEN_DECIMALS_UINT8_Consts[this] := 18;
[L8987]               TOKEN_DECIMAL_MULTIPLIER_Consts[this] := nonlinearPow(10, TOKEN_DECIMALS_Consts[this]) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8988]               TOKEN_NAME_Consts[this] := -1051245219;
[L8989]               TOKEN_SYMBOL_Consts[this] := -1804535220;
[L8990]               PAUSED_Consts[this] := false;
[L8991]               __var_52 := ConstantToRef(-210822415442009814958929812751043848690848471787);
[L8992]               TARGET_USER_Consts[this] := ConstantToRef(-210822415442009814958929812751043848690848471787);
[L8993]               CONTINUE_MINTING_Consts[this] := true;
[L9007]   RET         call Consts_Consts_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9008]   COND FALSE  !(revert)
[L9205]   RET         call Consts_Consts__success(this, msgsender_MSG, msgvalue_MSG);
[L9206]   COND FALSE  !(revert)
[L9209]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L9209]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L9210]   COND FALSE  !(revert)
[L9213]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6694]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6694]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6695]   COND FALSE  !(revert)
[L6698]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6675]               assume msgsender_MSG != null;
[L6676]               Balance[this] := 0;
[L6698]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6699]   COND FALSE  !(revert)
[L9213]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L9214]   COND FALSE  !(revert)
[L9217]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6565]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   COND FALSE  !(revert)
[L6569]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]               assume msgsender_MSG != null;
[L6544]               Balance[this] := 0;
[L6545]               balances_BasicToken[this] := zeroRefintArr();
[L6546]               sum_balances0[this] := 0;
[L6547]               totalSupply__BasicToken[this] := 0;
[L6569]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6570]   COND FALSE  !(revert)
[L9217]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9218]   COND FALSE  !(revert)
[L9221]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6746]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6746]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6747]   COND FALSE  !(revert)
[L6750]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6694]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6694]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6695]   COND FALSE  !(revert)
[L6698]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6675]               assume msgsender_MSG != null;
[L6676]               Balance[this] := 0;
[L6698]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6699]   COND FALSE  !(revert)
[L6750]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6751]   COND FALSE  !(revert)
[L6754]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6565]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   COND FALSE  !(revert)
[L6569]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]               assume msgsender_MSG != null;
[L6544]               Balance[this] := 0;
[L6545]               balances_BasicToken[this] := zeroRefintArr();
[L6546]               sum_balances0[this] := 0;
[L6547]               totalSupply__BasicToken[this] := 0;
[L6569]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6570]   COND FALSE  !(revert)
[L6754]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6755]   COND FALSE  !(revert)
[L6758]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6717]               assume msgsender_MSG != null;
[L6718]               Balance[this] := 0;
[L6719]               allowed_StandardToken[this] := zeroRefRefintArr();
[L6720]               sum_allowed1[this] := 0;
[L6758]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6759]   COND FALSE  !(revert)
[L9221]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9222]   COND FALSE  !(revert)
[L9225]   CALL        call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7353]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L7353]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7354]   COND FALSE  !(revert)
[L7357]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6694]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6694]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6695]   COND FALSE  !(revert)
[L6698]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6675]               assume msgsender_MSG != null;
[L6676]               Balance[this] := 0;
[L6698]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6699]   COND FALSE  !(revert)
[L7357]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7358]   COND FALSE  !(revert)
[L7361]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6565]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   COND FALSE  !(revert)
[L6569]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]               assume msgsender_MSG != null;
[L6544]               Balance[this] := 0;
[L6545]               balances_BasicToken[this] := zeroRefintArr();
[L6546]               sum_balances0[this] := 0;
[L6547]               totalSupply__BasicToken[this] := 0;
[L6569]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6570]   COND FALSE  !(revert)
[L7361]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7362]   COND FALSE  !(revert)
[L7365]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6746]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6746]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6747]   COND FALSE  !(revert)
[L6750]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6694]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6694]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6695]   COND FALSE  !(revert)
[L6698]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6675]               assume msgsender_MSG != null;
[L6676]               Balance[this] := 0;
[L6698]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6699]   COND FALSE  !(revert)
[L6750]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6751]   COND FALSE  !(revert)
[L6754]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6565]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   COND FALSE  !(revert)
[L6569]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]               assume msgsender_MSG != null;
[L6544]               Balance[this] := 0;
[L6545]               balances_BasicToken[this] := zeroRefintArr();
[L6546]               sum_balances0[this] := 0;
[L6547]               totalSupply__BasicToken[this] := 0;
[L6569]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6570]   COND FALSE  !(revert)
[L6754]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6755]   COND FALSE  !(revert)
[L6758]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6717]               assume msgsender_MSG != null;
[L6718]               Balance[this] := 0;
[L6719]               allowed_StandardToken[this] := zeroRefRefintArr();
[L6720]               sum_allowed1[this] := 0;
[L6758]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6759]   COND FALSE  !(revert)
[L7365]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7366]   COND FALSE  !(revert)
[L7369]   CALL        call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7316]               assume msgsender_MSG != null;
[L7317]               Balance[this] := 0;
[L7318]               chains_FreezableToken[this] := zerointintArr();
[L7319]               sum_chains2[this] := 0;
[L7320]               freezings_FreezableToken[this] := zerointintArr();
[L7321]               sum_freezings3[this] := 0;
[L7322]               freezingBalance_FreezableToken[this] := zeroRefintArr();
[L7323]               sum_freezingBalance4[this] := 0;
[L7369]   RET         call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7370]   COND FALSE  !(revert)
[L9225]   RET         call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9226]   COND FALSE  !(revert)
[L9229]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6988]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6971]               assume msgsender_MSG != null;
[L6972]               Balance[this] := 0;
[L6973]               owner_Ownable[this] := null;
[L6975]               owner_Ownable[this] := msgsender_MSG;
[L6988]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6989]   COND FALSE  !(revert)
[L9229]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L9230]   COND FALSE  !(revert)
[L9233]   CALL        call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7172]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L7172]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7173]   COND FALSE  !(revert)
[L7176]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6694]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6694]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6695]   COND FALSE  !(revert)
[L6698]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6675]               assume msgsender_MSG != null;
[L6676]               Balance[this] := 0;
[L6698]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6699]   COND FALSE  !(revert)
[L7176]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7177]   COND FALSE  !(revert)
[L7180]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6565]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   COND FALSE  !(revert)
[L6569]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]               assume msgsender_MSG != null;
[L6544]               Balance[this] := 0;
[L6545]               balances_BasicToken[this] := zeroRefintArr();
[L6546]               sum_balances0[this] := 0;
[L6547]               totalSupply__BasicToken[this] := 0;
[L6569]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6570]   COND FALSE  !(revert)
[L7180]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7181]   COND FALSE  !(revert)
[L7184]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6746]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6746]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6747]   COND FALSE  !(revert)
[L6750]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6694]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6694]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6695]   COND FALSE  !(revert)
[L6698]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6675]               assume msgsender_MSG != null;
[L6676]               Balance[this] := 0;
[L6698]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6699]   COND FALSE  !(revert)
[L6750]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6751]   COND FALSE  !(revert)
[L6754]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6565]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   COND FALSE  !(revert)
[L6569]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]               assume msgsender_MSG != null;
[L6544]               Balance[this] := 0;
[L6545]               balances_BasicToken[this] := zeroRefintArr();
[L6546]               sum_balances0[this] := 0;
[L6547]               totalSupply__BasicToken[this] := 0;
[L6569]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6570]   COND FALSE  !(revert)
[L6754]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6755]   COND FALSE  !(revert)
[L6758]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6717]               assume msgsender_MSG != null;
[L6718]               Balance[this] := 0;
[L6719]               allowed_StandardToken[this] := zeroRefRefintArr();
[L6720]               sum_allowed1[this] := 0;
[L6758]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6759]   COND FALSE  !(revert)
[L7184]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7185]   COND FALSE  !(revert)
[L7188]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6988]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6971]               assume msgsender_MSG != null;
[L6972]               Balance[this] := 0;
[L6973]               owner_Ownable[this] := null;
[L6975]               owner_Ownable[this] := msgsender_MSG;
[L6988]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6989]   COND FALSE  !(revert)
[L7188]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7189]   COND FALSE  !(revert)
[L7192]   CALL        call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7136]               assume msgsender_MSG != null;
[L7137]               Balance[this] := 0;
[L7138]               mintingFinished_MintableToken[this] := false;
[L7192]   RET         call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7193]   COND FALSE  !(revert)
[L9233]   RET         call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9234]   COND FALSE  !(revert)
[L9237]   CALL        call FreezableMintableToken_FreezableMintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L8792]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L8792]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L8793]   COND FALSE  !(revert)
[L8796]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6694]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6694]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6695]   COND FALSE  !(revert)
[L6698]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6675]               assume msgsender_MSG != null;
[L6676]               Balance[this] := 0;
[L6698]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6699]   COND FALSE  !(revert)
[L8796]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L8797]   COND FALSE  !(revert)
[L8800]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6565]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   COND FALSE  !(revert)
[L6569]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]               assume msgsender_MSG != null;
[L6544]               Balance[this] := 0;
[L6545]               balances_BasicToken[this] := zeroRefintArr();
[L6546]               sum_balances0[this] := 0;
[L6547]               totalSupply__BasicToken[this] := 0;
[L6569]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6570]   COND FALSE  !(revert)
[L8800]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L8801]   COND FALSE  !(revert)
[L8804]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6746]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6746]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6747]   COND FALSE  !(revert)
[L6750]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6694]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6694]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6695]   COND FALSE  !(revert)
[L6698]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6675]               assume msgsender_MSG != null;
[L6676]               Balance[this] := 0;
[L6698]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6699]   COND FALSE  !(revert)
[L6750]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6751]   COND FALSE  !(revert)
[L6754]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6565]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   COND FALSE  !(revert)
[L6569]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]               assume msgsender_MSG != null;
[L6544]               Balance[this] := 0;
[L6545]               balances_BasicToken[this] := zeroRefintArr();
[L6546]               sum_balances0[this] := 0;
[L6547]               totalSupply__BasicToken[this] := 0;
[L6569]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6570]   COND FALSE  !(revert)
[L6754]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6755]   COND FALSE  !(revert)
[L6758]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6717]               assume msgsender_MSG != null;
[L6718]               Balance[this] := 0;
[L6719]               allowed_StandardToken[this] := zeroRefRefintArr();
[L6720]               sum_allowed1[this] := 0;
[L6758]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6759]   COND FALSE  !(revert)
[L8804]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L8805]   COND FALSE  !(revert)
[L8808]   CALL        call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7353]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L7353]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7354]   COND FALSE  !(revert)
[L7357]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6694]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6694]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6695]   COND FALSE  !(revert)
[L6698]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6675]               assume msgsender_MSG != null;
[L6676]               Balance[this] := 0;
[L6698]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6699]   COND FALSE  !(revert)
[L7357]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7358]   COND FALSE  !(revert)
[L7361]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6565]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   COND FALSE  !(revert)
[L6569]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]               assume msgsender_MSG != null;
[L6544]               Balance[this] := 0;
[L6545]               balances_BasicToken[this] := zeroRefintArr();
[L6546]               sum_balances0[this] := 0;
[L6547]               totalSupply__BasicToken[this] := 0;
[L6569]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6570]   COND FALSE  !(revert)
[L7361]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7362]   COND FALSE  !(revert)
[L7365]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6746]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6746]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6747]   COND FALSE  !(revert)
[L6750]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6694]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6694]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6695]   COND FALSE  !(revert)
[L6698]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6675]               assume msgsender_MSG != null;
[L6676]               Balance[this] := 0;
[L6698]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6699]   COND FALSE  !(revert)
[L6750]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6751]   COND FALSE  !(revert)
[L6754]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6565]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   COND FALSE  !(revert)
[L6569]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]               assume msgsender_MSG != null;
[L6544]               Balance[this] := 0;
[L6545]               balances_BasicToken[this] := zeroRefintArr();
[L6546]               sum_balances0[this] := 0;
[L6547]               totalSupply__BasicToken[this] := 0;
[L6569]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6570]   COND FALSE  !(revert)
[L6754]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6755]   COND FALSE  !(revert)
[L6758]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6717]               assume msgsender_MSG != null;
[L6718]               Balance[this] := 0;
[L6719]               allowed_StandardToken[this] := zeroRefRefintArr();
[L6720]               sum_allowed1[this] := 0;
[L6758]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6759]   COND FALSE  !(revert)
[L7365]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7366]   COND FALSE  !(revert)
[L7369]   CALL        call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7316]               assume msgsender_MSG != null;
[L7317]               Balance[this] := 0;
[L7318]               chains_FreezableToken[this] := zerointintArr();
[L7319]               sum_chains2[this] := 0;
[L7320]               freezings_FreezableToken[this] := zerointintArr();
[L7321]               sum_freezings3[this] := 0;
[L7322]               freezingBalance_FreezableToken[this] := zeroRefintArr();
[L7323]               sum_freezingBalance4[this] := 0;
[L7369]   RET         call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7370]   COND FALSE  !(revert)
[L8808]   RET         call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L8809]   COND FALSE  !(revert)
[L8812]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6988]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6971]               assume msgsender_MSG != null;
[L6972]               Balance[this] := 0;
[L6973]               owner_Ownable[this] := null;
[L6975]               owner_Ownable[this] := msgsender_MSG;
[L6988]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6989]   COND FALSE  !(revert)
[L8812]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L8813]   COND FALSE  !(revert)
[L8816]   CALL        call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7172]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L7172]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7173]   COND FALSE  !(revert)
[L7176]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6694]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6694]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6695]   COND FALSE  !(revert)
[L6698]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6675]               assume msgsender_MSG != null;
[L6676]               Balance[this] := 0;
[L6698]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6699]   COND FALSE  !(revert)
[L7176]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7177]   COND FALSE  !(revert)
[L7180]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6565]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   COND FALSE  !(revert)
[L6569]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]               assume msgsender_MSG != null;
[L6544]               Balance[this] := 0;
[L6545]               balances_BasicToken[this] := zeroRefintArr();
[L6546]               sum_balances0[this] := 0;
[L6547]               totalSupply__BasicToken[this] := 0;
[L6569]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6570]   COND FALSE  !(revert)
[L7180]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7181]   COND FALSE  !(revert)
[L7184]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6746]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6746]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6747]   COND FALSE  !(revert)
[L6750]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6694]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6694]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6695]   COND FALSE  !(revert)
[L6698]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6675]               assume msgsender_MSG != null;
[L6676]               Balance[this] := 0;
[L6698]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6699]   COND FALSE  !(revert)
[L6750]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6751]   COND FALSE  !(revert)
[L6754]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6565]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   COND FALSE  !(revert)
[L6569]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]               assume msgsender_MSG != null;
[L6544]               Balance[this] := 0;
[L6545]               balances_BasicToken[this] := zeroRefintArr();
[L6546]               sum_balances0[this] := 0;
[L6547]               totalSupply__BasicToken[this] := 0;
[L6569]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6570]   COND FALSE  !(revert)
[L6754]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6755]   COND FALSE  !(revert)
[L6758]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6717]               assume msgsender_MSG != null;
[L6718]               Balance[this] := 0;
[L6719]               allowed_StandardToken[this] := zeroRefRefintArr();
[L6720]               sum_allowed1[this] := 0;
[L6758]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6759]   COND FALSE  !(revert)
[L7184]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7185]   COND FALSE  !(revert)
[L7188]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6988]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6971]               assume msgsender_MSG != null;
[L6972]               Balance[this] := 0;
[L6973]               owner_Ownable[this] := null;
[L6975]               owner_Ownable[this] := msgsender_MSG;
[L6988]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6989]   COND FALSE  !(revert)
[L7188]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7189]   COND FALSE  !(revert)
[L7192]   CALL        call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7136]               assume msgsender_MSG != null;
[L7137]               Balance[this] := 0;
[L7138]               mintingFinished_MintableToken[this] := false;
[L7192]   RET         call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7193]   COND FALSE  !(revert)
[L8816]   RET         call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L8817]   COND FALSE  !(revert)
[L8820]   CALL        call FreezableMintableToken_FreezableMintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8749]               assume msgsender_MSG != null;
[L8750]               Balance[this] := 0;
[L8820]   RET         call FreezableMintableToken_FreezableMintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8821]   COND FALSE  !(revert)
[L9237]   RET         call FreezableMintableToken_FreezableMintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9238]   COND FALSE  !(revert)
[L9241]   CALL        call BurnableToken_BurnableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L8536]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L8536]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L8537]   COND FALSE  !(revert)
[L8540]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6565]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   COND FALSE  !(revert)
[L6569]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]               assume msgsender_MSG != null;
[L6544]               Balance[this] := 0;
[L6545]               balances_BasicToken[this] := zeroRefintArr();
[L6546]               sum_balances0[this] := 0;
[L6547]               totalSupply__BasicToken[this] := 0;
[L6569]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6570]   COND FALSE  !(revert)
[L8540]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L8541]   COND FALSE  !(revert)
[L8544]   CALL        call BurnableToken_BurnableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8513]               assume msgsender_MSG != null;
[L8514]               Balance[this] := 0;
[L8544]   RET         call BurnableToken_BurnableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8545]   COND FALSE  !(revert)
[L9241]   RET         call BurnableToken_BurnableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9242]   COND FALSE  !(revert)
[L9245]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L8662]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6988]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6971]               assume msgsender_MSG != null;
[L6972]               Balance[this] := 0;
[L6973]               owner_Ownable[this] := null;
[L6975]               owner_Ownable[this] := msgsender_MSG;
[L6988]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6989]   COND FALSE  !(revert)
[L8662]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L8663]   COND FALSE  !(revert)
[L8666]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8642]               assume msgsender_MSG != null;
[L8643]               Balance[this] := 0;
[L8644]               paused_Pausable[this] := false;
[L8666]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8667]   COND FALSE  !(revert)
[L9245]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L9246]   COND FALSE  !(revert)
[L9249]   CALL        call MainToken_MainToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9133]               assume msgsender_MSG != null;
[L9134]               Balance[this] := 0;
[L9135]               initialized_MainToken[this] := false;
[L9137]   CALL        call init_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9404]   COND TRUE   !!initialized_MainToken[this]
[L9405]               revert := true;
[L9137]   RET         call init_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9138]   COND TRUE   revert
[L9249]   RET         call MainToken_MainToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9250]   COND FALSE  !(revert)
[L4222]   RET         call MainToken_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4223]               assume !revert && gas >= 0;
[L14384]  RET         call MainToken_MainToken(this, msgsender_MSG, msgvalue_MSG);
[L14385]              assume !revert && gas >= 0;
[L14388]  CALL        call CorralChoice_MainToken(this);
[L14045]              havoc msgsender_MSG;
[L14046]              havoc msgvalue_MSG;
[L14047]              havoc choice;
[L14048]              havoc __ret_0_totalSupply;
[L14049]              havoc _owner_s729;
[L14050]              havoc balance_s729;
[L14051]              havoc _to_s1572;
[L14052]              havoc _value_s1572;
[L14053]              havoc _success_s1572;
[L14054]              havoc _owner_s395;
[L14055]              havoc _spender_s395;
[L14056]              havoc __ret_0_allowance;
[L14057]              havoc _from_s1551;
[L14058]              havoc _to_s1551;
[L14059]              havoc _value_s1551;
[L14060]              havoc _success_s1551;
[L14061]              havoc _spender_s379;
[L14062]              havoc _value_s379;
[L14063]              havoc __ret_0_approve;
[L14064]              havoc _spender_s437;
[L14065]              havoc _addedValue_s437;
[L14066]              havoc __ret_0_increaseApproval;
[L14067]              havoc _spender_s497;
[L14068]              havoc _subtractedValue_s497;
[L14069]              havoc __ret_0_decreaseApproval;
[L14070]              havoc __ret_0_owner;
[L14071]              havoc _newOwner_s558;
[L14072]              havoc __ret_0_mintingFinished;
[L14073]              havoc _to_s664;
[L14074]              havoc _amount_s664;
[L14075]              havoc __ret_0_mint;
[L14076]              havoc __ret_0_finishMinting;
[L14077]              havoc _owner_s742;
[L14078]              havoc balance_s742;
[L14079]              havoc _owner_s754;
[L14080]              havoc balance_s754;
[L14081]              havoc _addr_s792;
[L14082]              havoc count_s792;
[L14083]              havoc _addr_s849;
[L14084]              havoc _index_s849;
[L14085]              havoc _release_s849;
[L14086]              havoc _balance_s849;
[L14087]              havoc _to_s938;
[L14088]              havoc _amount_s938;
[L14089]              havoc _until_s938;
[L14090]              havoc tokens_s1107;
[L14091]              havoc _value_s1261;
[L14092]              havoc __ret_0_paused;
[L14093]              havoc _to_s1449;
[L14094]              havoc _amount_s1449;
[L14095]              havoc _until_s1449;
[L14096]              havoc __ret_0_mintAndFreeze;
[L14097]              havoc __ret_0_TOKEN_DECIMALS;
[L14098]              havoc __ret_0_TOKEN_DECIMALS_UINT8;
[L14099]              havoc __ret_0_TOKEN_DECIMAL_MULTIPLIER;
[L14100]              havoc __ret_0_TOKEN_NAME;
[L14101]              havoc __ret_0_TOKEN_SYMBOL;
[L14102]              havoc __ret_0_PAUSED;
[L14103]              havoc __ret_0_TARGET_USER;
[L14104]              havoc __ret_0_CONTINUE_MINTING;
[L14105]              havoc __ret_0_initialized;
[L14106]              havoc _name_s1511;
[L14107]              havoc _symbol_s1519;
[L14108]              havoc _decimals_s1527;
[L14109]              havoc tmpNow;
[L14110]              havoc gas;
[L14111]              assume gas > 4000000 && gas <= 8000000;
[L14112]              tmpNow := now;
[L14113]              havoc now;
[L14114]              assume now > tmpNow;
[L14115]              assume msgsender_MSG != null;
[L14116]              assume DType[msgsender_MSG] != ERC20Basic;
[L14117]              assume DType[msgsender_MSG] != SafeMath;
[L14118]              assume DType[msgsender_MSG] != BasicToken;
[L14119]              assume DType[msgsender_MSG] != ERC20;
[L14120]              assume DType[msgsender_MSG] != StandardToken;
[L14121]              assume DType[msgsender_MSG] != Ownable;
[L14122]              assume DType[msgsender_MSG] != MintableToken;
[L14123]              assume DType[msgsender_MSG] != FreezableToken;
[L14124]              assume DType[msgsender_MSG] != BurnableToken;
[L14125]              assume DType[msgsender_MSG] != Pausable;
[L14126]              assume DType[msgsender_MSG] != FreezableMintableToken;
[L14127]              assume DType[msgsender_MSG] != Consts;
[L14128]              assume DType[msgsender_MSG] != MainToken;
[L14129]              Alloc[msgsender_MSG] := true;
[L14130]  COND FALSE  !(choice == 38)
[L14136]  COND TRUE   choice == 37
[L14137]              gas := gas - 21000;
[L14138]  COND TRUE   gas >= 0
[L14139]              assume msgvalue_MSG == 0;
[L14140]  CALL        call balance_s729 := balanceOf~address_FreezableToken(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume balances_BasicToken[this][_owner_s729] >= 0 && balances_BasicToken[this][_owner_s729] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_balanceOf_FreezableToken0 := true;
[L2]                  call_balanceOf_FreezableToken0 := false;
[L2]                  revert := revert_hold;
[L1999]               havoc __exception;
[L2000]               revert := false;
[L2001]   COND FALSE  !(__exception)
[L2038]   CALL        call balance_s729 := balanceOf~address_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L7405]   COND TRUE   DType[this] == MainToken
[L7406]   CALL        call __var_14 := balanceOf~address_BasicToken__success(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L6660]               __ret_0_ := balances_BasicToken[this][_owner_s214];
[L7406]   RET         call __var_14 := balanceOf~address_BasicToken__success(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L7407]   COND FALSE  !(revert)
[L7423]               balance_s729 := (__var_14 + freezingBalance_FreezableToken[this][_owner_s729]) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2038]   RET         call balance_s729 := balanceOf~address_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L2039]               assume !revert && gas >= 0;
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume !((((((((((balance_s729 == balances_BasicToken[this][_owner_s729] && totalSupply__BasicToken[this] == old(totalSupply__BasicToken[this])) && balances_BasicToken[this] == old(balances_BasicToken[this])) && allowed_StandardToken[this] == old(allowed_StandardToken[this])) && initialized_MainToken[this] == old(initialized_MainToken[this])) && paused_Pausable[this] == old(paused_Pausable[this])) && mintingFinished_MintableToken[this] == old(mintingFinished_MintableToken[this])) && owner_Ownable[this] == old(owner_Ownable[this])) && chains_FreezableToken[this] == old(chains_FreezableToken[this])) && freezings_FreezableToken[this] == old(freezings_FreezableToken[this])) && freezingBalance_FreezableToken[this] == old(freezingBalance_FreezableToken[this]));
[L2]                  revert := revert_hold;
[L14140]  RET         call balance_s729 := balanceOf~address_FreezableToken(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L14388]  RET         call CorralChoice_MainToken(this);

Loop:
[L14388]  CALL        call CorralChoice_MainToken(this);
[L14045]              havoc msgsender_MSG;
[L14046]              havoc msgvalue_MSG;
[L14047]              havoc choice;
[L14048]              havoc __ret_0_totalSupply;
[L14049]              havoc _owner_s729;
[L14050]              havoc balance_s729;
[L14051]              havoc _to_s1572;
[L14052]              havoc _value_s1572;
[L14053]              havoc _success_s1572;
[L14054]              havoc _owner_s395;
[L14055]              havoc _spender_s395;
[L14056]              havoc __ret_0_allowance;
[L14057]              havoc _from_s1551;
[L14058]              havoc _to_s1551;
[L14059]              havoc _value_s1551;
[L14060]              havoc _success_s1551;
[L14061]              havoc _spender_s379;
[L14062]              havoc _value_s379;
[L14063]              havoc __ret_0_approve;
[L14064]              havoc _spender_s437;
[L14065]              havoc _addedValue_s437;
[L14066]              havoc __ret_0_increaseApproval;
[L14067]              havoc _spender_s497;
[L14068]              havoc _subtractedValue_s497;
[L14069]              havoc __ret_0_decreaseApproval;
[L14070]              havoc __ret_0_owner;
[L14071]              havoc _newOwner_s558;
[L14072]              havoc __ret_0_mintingFinished;
[L14073]              havoc _to_s664;
[L14074]              havoc _amount_s664;
[L14075]              havoc __ret_0_mint;
[L14076]              havoc __ret_0_finishMinting;
[L14077]              havoc _owner_s742;
[L14078]              havoc balance_s742;
[L14079]              havoc _owner_s754;
[L14080]              havoc balance_s754;
[L14081]              havoc _addr_s792;
[L14082]              havoc count_s792;
[L14083]              havoc _addr_s849;
[L14084]              havoc _index_s849;
[L14085]              havoc _release_s849;
[L14086]              havoc _balance_s849;
[L14087]              havoc _to_s938;
[L14088]              havoc _amount_s938;
[L14089]              havoc _until_s938;
[L14090]              havoc tokens_s1107;
[L14091]              havoc _value_s1261;
[L14092]              havoc __ret_0_paused;
[L14093]              havoc _to_s1449;
[L14094]              havoc _amount_s1449;
[L14095]              havoc _until_s1449;
[L14096]              havoc __ret_0_mintAndFreeze;
[L14097]              havoc __ret_0_TOKEN_DECIMALS;
[L14098]              havoc __ret_0_TOKEN_DECIMALS_UINT8;
[L14099]              havoc __ret_0_TOKEN_DECIMAL_MULTIPLIER;
[L14100]              havoc __ret_0_TOKEN_NAME;
[L14101]              havoc __ret_0_TOKEN_SYMBOL;
[L14102]              havoc __ret_0_PAUSED;
[L14103]              havoc __ret_0_TARGET_USER;
[L14104]              havoc __ret_0_CONTINUE_MINTING;
[L14105]              havoc __ret_0_initialized;
[L14106]              havoc _name_s1511;
[L14107]              havoc _symbol_s1519;
[L14108]              havoc _decimals_s1527;
[L14109]              havoc tmpNow;
[L14110]              havoc gas;
[L14111]              assume gas > 4000000 && gas <= 8000000;
[L14112]              tmpNow := now;
[L14113]              havoc now;
[L14114]              assume now > tmpNow;
[L14115]              assume msgsender_MSG != null;
[L14116]              assume DType[msgsender_MSG] != ERC20Basic;
[L14117]              assume DType[msgsender_MSG] != SafeMath;
[L14118]              assume DType[msgsender_MSG] != BasicToken;
[L14119]              assume DType[msgsender_MSG] != ERC20;
[L14120]              assume DType[msgsender_MSG] != StandardToken;
[L14121]              assume DType[msgsender_MSG] != Ownable;
[L14122]              assume DType[msgsender_MSG] != MintableToken;
[L14123]              assume DType[msgsender_MSG] != FreezableToken;
[L14124]              assume DType[msgsender_MSG] != BurnableToken;
[L14125]              assume DType[msgsender_MSG] != Pausable;
[L14126]              assume DType[msgsender_MSG] != FreezableMintableToken;
[L14127]              assume DType[msgsender_MSG] != Consts;
[L14128]              assume DType[msgsender_MSG] != MainToken;
[L14129]              Alloc[msgsender_MSG] := true;
[L14130]  COND FALSE  !(choice == 38)
[L14136]  COND TRUE   choice == 37
[L14137]              gas := gas - 21000;
[L14138]  COND TRUE   gas >= 0
[L14139]              assume msgvalue_MSG == 0;
[L14140]  CALL        call balance_s729 := balanceOf~address_FreezableToken(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume balances_BasicToken[this][_owner_s729] >= 0 && balances_BasicToken[this][_owner_s729] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_balanceOf_FreezableToken0 := true;
[L2]                  call_balanceOf_FreezableToken0 := false;
[L2]                  revert := revert_hold;
[L1999]               havoc __exception;
[L2000]               revert := false;
[L2001]   COND FALSE  !(__exception)
[L2038]   CALL        call balance_s729 := balanceOf~address_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L7405]   COND TRUE   DType[this] == MainToken
[L7406]   CALL        call __var_14 := balanceOf~address_BasicToken__success(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L6660]               __ret_0_ := balances_BasicToken[this][_owner_s214];
[L7406]   RET         call __var_14 := balanceOf~address_BasicToken__success(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L7407]   COND FALSE  !(revert)
[L7423]               balance_s729 := (__var_14 + freezingBalance_FreezableToken[this][_owner_s729]) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2038]   RET         call balance_s729 := balanceOf~address_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L2039]               assume !revert && gas >= 0;
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume !((((((((((balance_s729 == balances_BasicToken[this][_owner_s729] && totalSupply__BasicToken[this] == old(totalSupply__BasicToken[this])) && balances_BasicToken[this] == old(balances_BasicToken[this])) && allowed_StandardToken[this] == old(allowed_StandardToken[this])) && initialized_MainToken[this] == old(initialized_MainToken[this])) && paused_Pausable[this] == old(paused_Pausable[this])) && mintingFinished_MintableToken[this] == old(mintingFinished_MintableToken[this])) && owner_Ownable[this] == old(owner_Ownable[this])) && chains_FreezableToken[this] == old(chains_FreezableToken[this])) && freezings_FreezableToken[this] == old(freezings_FreezableToken[this])) && freezingBalance_FreezableToken[this] == old(freezingBalance_FreezableToken[this]));
[L2]                  revert := revert_hold;
[L14140]  RET         call balance_s729 := balanceOf~address_FreezableToken(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L14388]  RET         call CorralChoice_MainToken(this);

[2020-11-24 21:25:45,183 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-24 21:25:45,184 INFO  L82        PathProgramCache]: Analyzing trace with hash -1220667460, now seen corresponding path program 1 times
[2020-11-24 21:25:45,185 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-24 21:25:45,220 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-24 21:25:45,762 INFO  L134       CoverageAnalysis]: Checked inductivity of 9823 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 9823 trivial. 0 not checked.
[2020-11-24 21:25:45,762 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-24 21:25:45,762 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [3] imperfect sequences [] total 3
[2020-11-24 21:25:45,763 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-24 21:25:45,764 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-11-24 21:25:45,764 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-11-24 21:25:45,764 INFO  L87              Difference]: Start difference. First operand 8436 states and 9559 transitions. cyclomatic complexity: 1141 Second operand 3 states.
[2020-11-24 21:25:45,892 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-24 21:25:45,892 INFO  L93              Difference]: Finished difference Result 9526 states and 10755 transitions.
[2020-11-24 21:25:45,892 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-11-24 21:25:45,892 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 9526 states and 10755 transitions.
[2020-11-24 21:25:45,914 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-24 21:25:45,941 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 9526 states to 9186 states and 10359 transitions.
[2020-11-24 21:25:45,941 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 2110
[2020-11-24 21:25:45,943 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 2139
[2020-11-24 21:25:45,943 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 9186 states and 10359 transitions.
[2020-11-24 21:25:45,950 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-24 21:25:45,950 INFO  L728         BuchiCegarLoop]: Abstraction has 9186 states and 10359 transitions.
[2020-11-24 21:25:45,958 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 9186 states and 10359 transitions.
[2020-11-24 21:25:46,020 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 9186 to 8495.
[2020-11-24 21:25:46,020 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 8495 states.
[2020-11-24 21:25:46,030 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 8495 states to 8495 states and 9486 transitions.
[2020-11-24 21:25:46,030 INFO  L751         BuchiCegarLoop]: Abstraction has 8495 states and 9486 transitions.
[2020-11-24 21:25:46,030 INFO  L631         BuchiCegarLoop]: Abstraction has 8495 states and 9486 transitions.
[2020-11-24 21:25:46,030 INFO  L445         BuchiCegarLoop]: ======== Iteration 4============
[2020-11-24 21:25:46,030 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 8495 states and 9486 transitions.
[2020-11-24 21:25:46,039 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-24 21:25:46,039 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-24 21:25:46,039 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-24 21:25:46,043 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [38, 38, 38, 38, 38, 38, 38, 38, 38, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-24 21:25:46,043 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  success_balanceOf_FreezableToken0 := false;
[L2]                  call_balanceOf_FreezableToken0 := false;
[L2]      CALL        call main();
[L14378]              assume null == 0;
[L14379]  CALL        call this := FreshRefGenerator__success();
[L6396]               havoc newRef;
[L6397]               assume Alloc[newRef] == false;
[L6398]               Alloc[newRef] := true;
[L6399]               assume newRef != null;
[L14379]  RET         call this := FreshRefGenerator__success();
[L14380]              assume now >= 0;
[L14381]              assume DType[this] == MainToken;
[L14382]              assume msgvalue_MSG == 0;
[L14383]              gas := gas - 53000;
[L14384]  CALL        call MainToken_MainToken(this, msgsender_MSG, msgvalue_MSG);
[L4183]               havoc __exception;
[L4184]               revert := false;
[L4185]   COND FALSE  !(__exception)
[L4222]   CALL        call MainToken_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9205]   CALL        call Consts_Consts__success(this, msgsender_MSG, msgvalue_MSG);
[L9007]   CALL        call Consts_Consts_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8983]               assume msgsender_MSG != null;
[L8984]               Balance[this] := 0;
[L8985]               TOKEN_DECIMALS_Consts[this] := 18;
[L8986]               TOKEN_DECIMALS_UINT8_Consts[this] := 18;
[L8987]               TOKEN_DECIMAL_MULTIPLIER_Consts[this] := nonlinearPow(10, TOKEN_DECIMALS_Consts[this]) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8988]               TOKEN_NAME_Consts[this] := -1051245219;
[L8989]               TOKEN_SYMBOL_Consts[this] := -1804535220;
[L8990]               PAUSED_Consts[this] := false;
[L8991]               __var_52 := ConstantToRef(-210822415442009814958929812751043848690848471787);
[L8992]               TARGET_USER_Consts[this] := ConstantToRef(-210822415442009814958929812751043848690848471787);
[L8993]               CONTINUE_MINTING_Consts[this] := true;
[L9007]   RET         call Consts_Consts_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9008]   COND FALSE  !(revert)
[L9205]   RET         call Consts_Consts__success(this, msgsender_MSG, msgvalue_MSG);
[L9206]   COND FALSE  !(revert)
[L9209]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L9209]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L9210]   COND FALSE  !(revert)
[L9213]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6694]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6694]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6695]   COND FALSE  !(revert)
[L6698]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6675]               assume msgsender_MSG != null;
[L6676]               Balance[this] := 0;
[L6698]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6699]   COND FALSE  !(revert)
[L9213]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L9214]   COND FALSE  !(revert)
[L9217]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6565]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   COND FALSE  !(revert)
[L6569]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]               assume msgsender_MSG != null;
[L6544]               Balance[this] := 0;
[L6545]               balances_BasicToken[this] := zeroRefintArr();
[L6546]               sum_balances0[this] := 0;
[L6547]               totalSupply__BasicToken[this] := 0;
[L6569]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6570]   COND FALSE  !(revert)
[L9217]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9218]   COND FALSE  !(revert)
[L9221]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6746]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6746]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6747]   COND FALSE  !(revert)
[L6750]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6694]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6694]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6695]   COND FALSE  !(revert)
[L6698]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6675]               assume msgsender_MSG != null;
[L6676]               Balance[this] := 0;
[L6698]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6699]   COND FALSE  !(revert)
[L6750]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6751]   COND FALSE  !(revert)
[L6754]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6565]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   COND FALSE  !(revert)
[L6569]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]               assume msgsender_MSG != null;
[L6544]               Balance[this] := 0;
[L6545]               balances_BasicToken[this] := zeroRefintArr();
[L6546]               sum_balances0[this] := 0;
[L6547]               totalSupply__BasicToken[this] := 0;
[L6569]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6570]   COND FALSE  !(revert)
[L6754]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6755]   COND FALSE  !(revert)
[L6758]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6717]               assume msgsender_MSG != null;
[L6718]               Balance[this] := 0;
[L6719]               allowed_StandardToken[this] := zeroRefRefintArr();
[L6720]               sum_allowed1[this] := 0;
[L6758]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6759]   COND FALSE  !(revert)
[L9221]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9222]   COND FALSE  !(revert)
[L9225]   CALL        call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7353]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L7353]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7354]   COND FALSE  !(revert)
[L7357]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6694]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6694]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6695]   COND FALSE  !(revert)
[L6698]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6675]               assume msgsender_MSG != null;
[L6676]               Balance[this] := 0;
[L6698]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6699]   COND FALSE  !(revert)
[L7357]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7358]   COND FALSE  !(revert)
[L7361]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6565]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   COND FALSE  !(revert)
[L6569]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]               assume msgsender_MSG != null;
[L6544]               Balance[this] := 0;
[L6545]               balances_BasicToken[this] := zeroRefintArr();
[L6546]               sum_balances0[this] := 0;
[L6547]               totalSupply__BasicToken[this] := 0;
[L6569]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6570]   COND FALSE  !(revert)
[L7361]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7362]   COND FALSE  !(revert)
[L7365]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6746]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6746]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6747]   COND FALSE  !(revert)
[L6750]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6694]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6694]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6695]   COND FALSE  !(revert)
[L6698]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6675]               assume msgsender_MSG != null;
[L6676]               Balance[this] := 0;
[L6698]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6699]   COND FALSE  !(revert)
[L6750]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6751]   COND FALSE  !(revert)
[L6754]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6565]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   COND FALSE  !(revert)
[L6569]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]               assume msgsender_MSG != null;
[L6544]               Balance[this] := 0;
[L6545]               balances_BasicToken[this] := zeroRefintArr();
[L6546]               sum_balances0[this] := 0;
[L6547]               totalSupply__BasicToken[this] := 0;
[L6569]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6570]   COND FALSE  !(revert)
[L6754]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6755]   COND FALSE  !(revert)
[L6758]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6717]               assume msgsender_MSG != null;
[L6718]               Balance[this] := 0;
[L6719]               allowed_StandardToken[this] := zeroRefRefintArr();
[L6720]               sum_allowed1[this] := 0;
[L6758]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6759]   COND FALSE  !(revert)
[L7365]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7366]   COND FALSE  !(revert)
[L7369]   CALL        call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7316]               assume msgsender_MSG != null;
[L7317]               Balance[this] := 0;
[L7318]               chains_FreezableToken[this] := zerointintArr();
[L7319]               sum_chains2[this] := 0;
[L7320]               freezings_FreezableToken[this] := zerointintArr();
[L7321]               sum_freezings3[this] := 0;
[L7322]               freezingBalance_FreezableToken[this] := zeroRefintArr();
[L7323]               sum_freezingBalance4[this] := 0;
[L7369]   RET         call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7370]   COND FALSE  !(revert)
[L9225]   RET         call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9226]   COND FALSE  !(revert)
[L9229]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6988]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6971]               assume msgsender_MSG != null;
[L6972]               Balance[this] := 0;
[L6973]               owner_Ownable[this] := null;
[L6975]               owner_Ownable[this] := msgsender_MSG;
[L6988]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6989]   COND FALSE  !(revert)
[L9229]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L9230]   COND FALSE  !(revert)
[L9233]   CALL        call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7172]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L7172]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7173]   COND FALSE  !(revert)
[L7176]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6694]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6694]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6695]   COND FALSE  !(revert)
[L6698]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6675]               assume msgsender_MSG != null;
[L6676]               Balance[this] := 0;
[L6698]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6699]   COND FALSE  !(revert)
[L7176]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7177]   COND FALSE  !(revert)
[L7180]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6565]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   COND FALSE  !(revert)
[L6569]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]               assume msgsender_MSG != null;
[L6544]               Balance[this] := 0;
[L6545]               balances_BasicToken[this] := zeroRefintArr();
[L6546]               sum_balances0[this] := 0;
[L6547]               totalSupply__BasicToken[this] := 0;
[L6569]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6570]   COND FALSE  !(revert)
[L7180]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7181]   COND FALSE  !(revert)
[L7184]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6746]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6746]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6747]   COND FALSE  !(revert)
[L6750]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6694]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6694]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6695]   COND FALSE  !(revert)
[L6698]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6675]               assume msgsender_MSG != null;
[L6676]               Balance[this] := 0;
[L6698]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6699]   COND FALSE  !(revert)
[L6750]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6751]   COND FALSE  !(revert)
[L6754]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6565]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   COND FALSE  !(revert)
[L6569]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]               assume msgsender_MSG != null;
[L6544]               Balance[this] := 0;
[L6545]               balances_BasicToken[this] := zeroRefintArr();
[L6546]               sum_balances0[this] := 0;
[L6547]               totalSupply__BasicToken[this] := 0;
[L6569]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6570]   COND FALSE  !(revert)
[L6754]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6755]   COND FALSE  !(revert)
[L6758]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6717]               assume msgsender_MSG != null;
[L6718]               Balance[this] := 0;
[L6719]               allowed_StandardToken[this] := zeroRefRefintArr();
[L6720]               sum_allowed1[this] := 0;
[L6758]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6759]   COND FALSE  !(revert)
[L7184]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7185]   COND FALSE  !(revert)
[L7188]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6988]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6971]               assume msgsender_MSG != null;
[L6972]               Balance[this] := 0;
[L6973]               owner_Ownable[this] := null;
[L6975]               owner_Ownable[this] := msgsender_MSG;
[L6988]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6989]   COND FALSE  !(revert)
[L7188]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7189]   COND FALSE  !(revert)
[L7192]   CALL        call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7136]               assume msgsender_MSG != null;
[L7137]               Balance[this] := 0;
[L7138]               mintingFinished_MintableToken[this] := false;
[L7192]   RET         call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7193]   COND FALSE  !(revert)
[L9233]   RET         call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9234]   COND FALSE  !(revert)
[L9237]   CALL        call FreezableMintableToken_FreezableMintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L8792]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L8792]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L8793]   COND FALSE  !(revert)
[L8796]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6694]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6694]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6695]   COND FALSE  !(revert)
[L6698]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6675]               assume msgsender_MSG != null;
[L6676]               Balance[this] := 0;
[L6698]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6699]   COND FALSE  !(revert)
[L8796]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L8797]   COND FALSE  !(revert)
[L8800]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6565]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   COND FALSE  !(revert)
[L6569]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]               assume msgsender_MSG != null;
[L6544]               Balance[this] := 0;
[L6545]               balances_BasicToken[this] := zeroRefintArr();
[L6546]               sum_balances0[this] := 0;
[L6547]               totalSupply__BasicToken[this] := 0;
[L6569]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6570]   COND FALSE  !(revert)
[L8800]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L8801]   COND FALSE  !(revert)
[L8804]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6746]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6746]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6747]   COND FALSE  !(revert)
[L6750]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6694]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6694]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6695]   COND FALSE  !(revert)
[L6698]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6675]               assume msgsender_MSG != null;
[L6676]               Balance[this] := 0;
[L6698]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6699]   COND FALSE  !(revert)
[L6750]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6751]   COND FALSE  !(revert)
[L6754]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6565]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   COND FALSE  !(revert)
[L6569]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]               assume msgsender_MSG != null;
[L6544]               Balance[this] := 0;
[L6545]               balances_BasicToken[this] := zeroRefintArr();
[L6546]               sum_balances0[this] := 0;
[L6547]               totalSupply__BasicToken[this] := 0;
[L6569]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6570]   COND FALSE  !(revert)
[L6754]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6755]   COND FALSE  !(revert)
[L6758]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6717]               assume msgsender_MSG != null;
[L6718]               Balance[this] := 0;
[L6719]               allowed_StandardToken[this] := zeroRefRefintArr();
[L6720]               sum_allowed1[this] := 0;
[L6758]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6759]   COND FALSE  !(revert)
[L8804]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L8805]   COND FALSE  !(revert)
[L8808]   CALL        call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7353]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L7353]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7354]   COND FALSE  !(revert)
[L7357]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6694]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6694]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6695]   COND FALSE  !(revert)
[L6698]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6675]               assume msgsender_MSG != null;
[L6676]               Balance[this] := 0;
[L6698]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6699]   COND FALSE  !(revert)
[L7357]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7358]   COND FALSE  !(revert)
[L7361]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6565]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   COND FALSE  !(revert)
[L6569]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]               assume msgsender_MSG != null;
[L6544]               Balance[this] := 0;
[L6545]               balances_BasicToken[this] := zeroRefintArr();
[L6546]               sum_balances0[this] := 0;
[L6547]               totalSupply__BasicToken[this] := 0;
[L6569]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6570]   COND FALSE  !(revert)
[L7361]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7362]   COND FALSE  !(revert)
[L7365]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6746]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6746]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6747]   COND FALSE  !(revert)
[L6750]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6694]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6694]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6695]   COND FALSE  !(revert)
[L6698]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6675]               assume msgsender_MSG != null;
[L6676]               Balance[this] := 0;
[L6698]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6699]   COND FALSE  !(revert)
[L6750]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6751]   COND FALSE  !(revert)
[L6754]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6565]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   COND FALSE  !(revert)
[L6569]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]               assume msgsender_MSG != null;
[L6544]               Balance[this] := 0;
[L6545]               balances_BasicToken[this] := zeroRefintArr();
[L6546]               sum_balances0[this] := 0;
[L6547]               totalSupply__BasicToken[this] := 0;
[L6569]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6570]   COND FALSE  !(revert)
[L6754]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6755]   COND FALSE  !(revert)
[L6758]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6717]               assume msgsender_MSG != null;
[L6718]               Balance[this] := 0;
[L6719]               allowed_StandardToken[this] := zeroRefRefintArr();
[L6720]               sum_allowed1[this] := 0;
[L6758]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6759]   COND FALSE  !(revert)
[L7365]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7366]   COND FALSE  !(revert)
[L7369]   CALL        call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7316]               assume msgsender_MSG != null;
[L7317]               Balance[this] := 0;
[L7318]               chains_FreezableToken[this] := zerointintArr();
[L7319]               sum_chains2[this] := 0;
[L7320]               freezings_FreezableToken[this] := zerointintArr();
[L7321]               sum_freezings3[this] := 0;
[L7322]               freezingBalance_FreezableToken[this] := zeroRefintArr();
[L7323]               sum_freezingBalance4[this] := 0;
[L7369]   RET         call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7370]   COND FALSE  !(revert)
[L8808]   RET         call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L8809]   COND FALSE  !(revert)
[L8812]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6988]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6971]               assume msgsender_MSG != null;
[L6972]               Balance[this] := 0;
[L6973]               owner_Ownable[this] := null;
[L6975]               owner_Ownable[this] := msgsender_MSG;
[L6988]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6989]   COND FALSE  !(revert)
[L8812]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L8813]   COND FALSE  !(revert)
[L8816]   CALL        call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7172]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L7172]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7173]   COND FALSE  !(revert)
[L7176]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6694]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6694]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6695]   COND FALSE  !(revert)
[L6698]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6675]               assume msgsender_MSG != null;
[L6676]               Balance[this] := 0;
[L6698]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6699]   COND FALSE  !(revert)
[L7176]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7177]   COND FALSE  !(revert)
[L7180]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6565]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   COND FALSE  !(revert)
[L6569]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]               assume msgsender_MSG != null;
[L6544]               Balance[this] := 0;
[L6545]               balances_BasicToken[this] := zeroRefintArr();
[L6546]               sum_balances0[this] := 0;
[L6547]               totalSupply__BasicToken[this] := 0;
[L6569]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6570]   COND FALSE  !(revert)
[L7180]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7181]   COND FALSE  !(revert)
[L7184]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6746]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6746]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6747]   COND FALSE  !(revert)
[L6750]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6694]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6694]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6695]   COND FALSE  !(revert)
[L6698]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6675]               assume msgsender_MSG != null;
[L6676]               Balance[this] := 0;
[L6698]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6699]   COND FALSE  !(revert)
[L6750]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6751]   COND FALSE  !(revert)
[L6754]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6565]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   COND FALSE  !(revert)
[L6569]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]               assume msgsender_MSG != null;
[L6544]               Balance[this] := 0;
[L6545]               balances_BasicToken[this] := zeroRefintArr();
[L6546]               sum_balances0[this] := 0;
[L6547]               totalSupply__BasicToken[this] := 0;
[L6569]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6570]   COND FALSE  !(revert)
[L6754]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6755]   COND FALSE  !(revert)
[L6758]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6717]               assume msgsender_MSG != null;
[L6718]               Balance[this] := 0;
[L6719]               allowed_StandardToken[this] := zeroRefRefintArr();
[L6720]               sum_allowed1[this] := 0;
[L6758]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6759]   COND FALSE  !(revert)
[L7184]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7185]   COND FALSE  !(revert)
[L7188]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6988]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6971]               assume msgsender_MSG != null;
[L6972]               Balance[this] := 0;
[L6973]               owner_Ownable[this] := null;
[L6975]               owner_Ownable[this] := msgsender_MSG;
[L6988]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6989]   COND FALSE  !(revert)
[L7188]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7189]   COND FALSE  !(revert)
[L7192]   CALL        call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7136]               assume msgsender_MSG != null;
[L7137]               Balance[this] := 0;
[L7138]               mintingFinished_MintableToken[this] := false;
[L7192]   RET         call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7193]   COND FALSE  !(revert)
[L8816]   RET         call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L8817]   COND FALSE  !(revert)
[L8820]   CALL        call FreezableMintableToken_FreezableMintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8749]               assume msgsender_MSG != null;
[L8750]               Balance[this] := 0;
[L8820]   RET         call FreezableMintableToken_FreezableMintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8821]   COND FALSE  !(revert)
[L9237]   RET         call FreezableMintableToken_FreezableMintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9238]   COND FALSE  !(revert)
[L9241]   CALL        call BurnableToken_BurnableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L8536]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L8536]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L8537]   COND FALSE  !(revert)
[L8540]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6565]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   COND FALSE  !(revert)
[L6569]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]               assume msgsender_MSG != null;
[L6544]               Balance[this] := 0;
[L6545]               balances_BasicToken[this] := zeroRefintArr();
[L6546]               sum_balances0[this] := 0;
[L6547]               totalSupply__BasicToken[this] := 0;
[L6569]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6570]   COND FALSE  !(revert)
[L8540]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L8541]   COND FALSE  !(revert)
[L8544]   CALL        call BurnableToken_BurnableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8513]               assume msgsender_MSG != null;
[L8514]               Balance[this] := 0;
[L8544]   RET         call BurnableToken_BurnableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8545]   COND FALSE  !(revert)
[L9241]   RET         call BurnableToken_BurnableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9242]   COND FALSE  !(revert)
[L9245]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L8662]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6988]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6971]               assume msgsender_MSG != null;
[L6972]               Balance[this] := 0;
[L6973]               owner_Ownable[this] := null;
[L6975]               owner_Ownable[this] := msgsender_MSG;
[L6988]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6989]   COND FALSE  !(revert)
[L8662]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L8663]   COND FALSE  !(revert)
[L8666]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8642]               assume msgsender_MSG != null;
[L8643]               Balance[this] := 0;
[L8644]               paused_Pausable[this] := false;
[L8666]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8667]   COND FALSE  !(revert)
[L9245]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L9246]   COND FALSE  !(revert)
[L9249]   CALL        call MainToken_MainToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9133]               assume msgsender_MSG != null;
[L9134]               Balance[this] := 0;
[L9135]               initialized_MainToken[this] := false;
[L9137]   CALL        call init_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9404]   COND FALSE  !(!!initialized_MainToken[this])
[L9408]               initialized_MainToken[this] := true;
[L9409]   COND FALSE  !(PAUSED_Consts[this])
[L9419]   COND FALSE  !(!CONTINUE_MINTING_Consts[this])
[L9429]               assert { :EventEmitted "Initialized_MainToken" } true;
[L9137]   RET         call init_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9138]   COND FALSE  !(revert)
[L9141]   COND TRUE   DType[this] == MainToken
[L9142]   CALL        call transferOwnership~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, TARGET_USER_Consts[this]);
[L7055]   CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L12332]  COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L7055]   RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7056]   COND FALSE  !(revert)
[L7059]   COND TRUE   DType[this] == MainToken
[L7060]   CALL        call _transferOwnership~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, _newOwner_s558);
[L7103]               __var_11 := null;
[L7104]   COND FALSE  !(!(_newOwner_s581 != null))
[L7108]               assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L7109]               owner_Ownable[this] := _newOwner_s581;
[L7060]   RET         call _transferOwnership~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, _newOwner_s558);
[L7061]   COND FALSE  !(revert)
[L9142]   RET         call transferOwnership~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, TARGET_USER_Consts[this]);
[L9143]   COND FALSE  !(revert)
[L9249]   RET         call MainToken_MainToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9250]   COND FALSE  !(revert)
[L4222]   RET         call MainToken_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4223]               assume !revert && gas >= 0;
[L14384]  RET         call MainToken_MainToken(this, msgsender_MSG, msgvalue_MSG);
[L14385]              assume !revert && gas >= 0;
[L14388]  CALL        call CorralChoice_MainToken(this);
[L14045]              havoc msgsender_MSG;
[L14046]              havoc msgvalue_MSG;
[L14047]              havoc choice;
[L14048]              havoc __ret_0_totalSupply;
[L14049]              havoc _owner_s729;
[L14050]              havoc balance_s729;
[L14051]              havoc _to_s1572;
[L14052]              havoc _value_s1572;
[L14053]              havoc _success_s1572;
[L14054]              havoc _owner_s395;
[L14055]              havoc _spender_s395;
[L14056]              havoc __ret_0_allowance;
[L14057]              havoc _from_s1551;
[L14058]              havoc _to_s1551;
[L14059]              havoc _value_s1551;
[L14060]              havoc _success_s1551;
[L14061]              havoc _spender_s379;
[L14062]              havoc _value_s379;
[L14063]              havoc __ret_0_approve;
[L14064]              havoc _spender_s437;
[L14065]              havoc _addedValue_s437;
[L14066]              havoc __ret_0_increaseApproval;
[L14067]              havoc _spender_s497;
[L14068]              havoc _subtractedValue_s497;
[L14069]              havoc __ret_0_decreaseApproval;
[L14070]              havoc __ret_0_owner;
[L14071]              havoc _newOwner_s558;
[L14072]              havoc __ret_0_mintingFinished;
[L14073]              havoc _to_s664;
[L14074]              havoc _amount_s664;
[L14075]              havoc __ret_0_mint;
[L14076]              havoc __ret_0_finishMinting;
[L14077]              havoc _owner_s742;
[L14078]              havoc balance_s742;
[L14079]              havoc _owner_s754;
[L14080]              havoc balance_s754;
[L14081]              havoc _addr_s792;
[L14082]              havoc count_s792;
[L14083]              havoc _addr_s849;
[L14084]              havoc _index_s849;
[L14085]              havoc _release_s849;
[L14086]              havoc _balance_s849;
[L14087]              havoc _to_s938;
[L14088]              havoc _amount_s938;
[L14089]              havoc _until_s938;
[L14090]              havoc tokens_s1107;
[L14091]              havoc _value_s1261;
[L14092]              havoc __ret_0_paused;
[L14093]              havoc _to_s1449;
[L14094]              havoc _amount_s1449;
[L14095]              havoc _until_s1449;
[L14096]              havoc __ret_0_mintAndFreeze;
[L14097]              havoc __ret_0_TOKEN_DECIMALS;
[L14098]              havoc __ret_0_TOKEN_DECIMALS_UINT8;
[L14099]              havoc __ret_0_TOKEN_DECIMAL_MULTIPLIER;
[L14100]              havoc __ret_0_TOKEN_NAME;
[L14101]              havoc __ret_0_TOKEN_SYMBOL;
[L14102]              havoc __ret_0_PAUSED;
[L14103]              havoc __ret_0_TARGET_USER;
[L14104]              havoc __ret_0_CONTINUE_MINTING;
[L14105]              havoc __ret_0_initialized;
[L14106]              havoc _name_s1511;
[L14107]              havoc _symbol_s1519;
[L14108]              havoc _decimals_s1527;
[L14109]              havoc tmpNow;
[L14110]              havoc gas;
[L14111]              assume gas > 4000000 && gas <= 8000000;
[L14112]              tmpNow := now;
[L14113]              havoc now;
[L14114]              assume now > tmpNow;
[L14115]              assume msgsender_MSG != null;
[L14116]              assume DType[msgsender_MSG] != ERC20Basic;
[L14117]              assume DType[msgsender_MSG] != SafeMath;
[L14118]              assume DType[msgsender_MSG] != BasicToken;
[L14119]              assume DType[msgsender_MSG] != ERC20;
[L14120]              assume DType[msgsender_MSG] != StandardToken;
[L14121]              assume DType[msgsender_MSG] != Ownable;
[L14122]              assume DType[msgsender_MSG] != MintableToken;
[L14123]              assume DType[msgsender_MSG] != FreezableToken;
[L14124]              assume DType[msgsender_MSG] != BurnableToken;
[L14125]              assume DType[msgsender_MSG] != Pausable;
[L14126]              assume DType[msgsender_MSG] != FreezableMintableToken;
[L14127]              assume DType[msgsender_MSG] != Consts;
[L14128]              assume DType[msgsender_MSG] != MainToken;
[L14129]              Alloc[msgsender_MSG] := true;
[L14130]  COND FALSE  !(choice == 38)
[L14136]  COND TRUE   choice == 37
[L14137]              gas := gas - 21000;
[L14138]  COND TRUE   gas >= 0
[L14139]              assume msgvalue_MSG == 0;
[L14140]  CALL        call balance_s729 := balanceOf~address_FreezableToken(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume balances_BasicToken[this][_owner_s729] >= 0 && balances_BasicToken[this][_owner_s729] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_balanceOf_FreezableToken0 := true;
[L2]                  call_balanceOf_FreezableToken0 := false;
[L2]                  revert := revert_hold;
[L1999]               havoc __exception;
[L2000]               revert := false;
[L2001]   COND FALSE  !(__exception)
[L2038]   CALL        call balance_s729 := balanceOf~address_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L7405]   COND TRUE   DType[this] == MainToken
[L7406]   CALL        call __var_14 := balanceOf~address_BasicToken__success(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L6660]               __ret_0_ := balances_BasicToken[this][_owner_s214];
[L7406]   RET         call __var_14 := balanceOf~address_BasicToken__success(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L7407]   COND FALSE  !(revert)
[L7423]               balance_s729 := (__var_14 + freezingBalance_FreezableToken[this][_owner_s729]) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2038]   RET         call balance_s729 := balanceOf~address_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L2039]               assume !revert && gas >= 0;
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume !((((((((((balance_s729 == balances_BasicToken[this][_owner_s729] && totalSupply__BasicToken[this] == old(totalSupply__BasicToken[this])) && balances_BasicToken[this] == old(balances_BasicToken[this])) && allowed_StandardToken[this] == old(allowed_StandardToken[this])) && initialized_MainToken[this] == old(initialized_MainToken[this])) && paused_Pausable[this] == old(paused_Pausable[this])) && mintingFinished_MintableToken[this] == old(mintingFinished_MintableToken[this])) && owner_Ownable[this] == old(owner_Ownable[this])) && chains_FreezableToken[this] == old(chains_FreezableToken[this])) && freezings_FreezableToken[this] == old(freezings_FreezableToken[this])) && freezingBalance_FreezableToken[this] == old(freezingBalance_FreezableToken[this]));
[L2]                  revert := revert_hold;
[L14140]  RET         call balance_s729 := balanceOf~address_FreezableToken(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L14388]  RET         call CorralChoice_MainToken(this);

Loop:
[L14388]  CALL        call CorralChoice_MainToken(this);
[L14045]              havoc msgsender_MSG;
[L14046]              havoc msgvalue_MSG;
[L14047]              havoc choice;
[L14048]              havoc __ret_0_totalSupply;
[L14049]              havoc _owner_s729;
[L14050]              havoc balance_s729;
[L14051]              havoc _to_s1572;
[L14052]              havoc _value_s1572;
[L14053]              havoc _success_s1572;
[L14054]              havoc _owner_s395;
[L14055]              havoc _spender_s395;
[L14056]              havoc __ret_0_allowance;
[L14057]              havoc _from_s1551;
[L14058]              havoc _to_s1551;
[L14059]              havoc _value_s1551;
[L14060]              havoc _success_s1551;
[L14061]              havoc _spender_s379;
[L14062]              havoc _value_s379;
[L14063]              havoc __ret_0_approve;
[L14064]              havoc _spender_s437;
[L14065]              havoc _addedValue_s437;
[L14066]              havoc __ret_0_increaseApproval;
[L14067]              havoc _spender_s497;
[L14068]              havoc _subtractedValue_s497;
[L14069]              havoc __ret_0_decreaseApproval;
[L14070]              havoc __ret_0_owner;
[L14071]              havoc _newOwner_s558;
[L14072]              havoc __ret_0_mintingFinished;
[L14073]              havoc _to_s664;
[L14074]              havoc _amount_s664;
[L14075]              havoc __ret_0_mint;
[L14076]              havoc __ret_0_finishMinting;
[L14077]              havoc _owner_s742;
[L14078]              havoc balance_s742;
[L14079]              havoc _owner_s754;
[L14080]              havoc balance_s754;
[L14081]              havoc _addr_s792;
[L14082]              havoc count_s792;
[L14083]              havoc _addr_s849;
[L14084]              havoc _index_s849;
[L14085]              havoc _release_s849;
[L14086]              havoc _balance_s849;
[L14087]              havoc _to_s938;
[L14088]              havoc _amount_s938;
[L14089]              havoc _until_s938;
[L14090]              havoc tokens_s1107;
[L14091]              havoc _value_s1261;
[L14092]              havoc __ret_0_paused;
[L14093]              havoc _to_s1449;
[L14094]              havoc _amount_s1449;
[L14095]              havoc _until_s1449;
[L14096]              havoc __ret_0_mintAndFreeze;
[L14097]              havoc __ret_0_TOKEN_DECIMALS;
[L14098]              havoc __ret_0_TOKEN_DECIMALS_UINT8;
[L14099]              havoc __ret_0_TOKEN_DECIMAL_MULTIPLIER;
[L14100]              havoc __ret_0_TOKEN_NAME;
[L14101]              havoc __ret_0_TOKEN_SYMBOL;
[L14102]              havoc __ret_0_PAUSED;
[L14103]              havoc __ret_0_TARGET_USER;
[L14104]              havoc __ret_0_CONTINUE_MINTING;
[L14105]              havoc __ret_0_initialized;
[L14106]              havoc _name_s1511;
[L14107]              havoc _symbol_s1519;
[L14108]              havoc _decimals_s1527;
[L14109]              havoc tmpNow;
[L14110]              havoc gas;
[L14111]              assume gas > 4000000 && gas <= 8000000;
[L14112]              tmpNow := now;
[L14113]              havoc now;
[L14114]              assume now > tmpNow;
[L14115]              assume msgsender_MSG != null;
[L14116]              assume DType[msgsender_MSG] != ERC20Basic;
[L14117]              assume DType[msgsender_MSG] != SafeMath;
[L14118]              assume DType[msgsender_MSG] != BasicToken;
[L14119]              assume DType[msgsender_MSG] != ERC20;
[L14120]              assume DType[msgsender_MSG] != StandardToken;
[L14121]              assume DType[msgsender_MSG] != Ownable;
[L14122]              assume DType[msgsender_MSG] != MintableToken;
[L14123]              assume DType[msgsender_MSG] != FreezableToken;
[L14124]              assume DType[msgsender_MSG] != BurnableToken;
[L14125]              assume DType[msgsender_MSG] != Pausable;
[L14126]              assume DType[msgsender_MSG] != FreezableMintableToken;
[L14127]              assume DType[msgsender_MSG] != Consts;
[L14128]              assume DType[msgsender_MSG] != MainToken;
[L14129]              Alloc[msgsender_MSG] := true;
[L14130]  COND FALSE  !(choice == 38)
[L14136]  COND TRUE   choice == 37
[L14137]              gas := gas - 21000;
[L14138]  COND TRUE   gas >= 0
[L14139]              assume msgvalue_MSG == 0;
[L14140]  CALL        call balance_s729 := balanceOf~address_FreezableToken(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume balances_BasicToken[this][_owner_s729] >= 0 && balances_BasicToken[this][_owner_s729] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_balanceOf_FreezableToken0 := true;
[L2]                  call_balanceOf_FreezableToken0 := false;
[L2]                  revert := revert_hold;
[L1999]               havoc __exception;
[L2000]               revert := false;
[L2001]   COND FALSE  !(__exception)
[L2038]   CALL        call balance_s729 := balanceOf~address_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L7405]   COND TRUE   DType[this] == MainToken
[L7406]   CALL        call __var_14 := balanceOf~address_BasicToken__success(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L6660]               __ret_0_ := balances_BasicToken[this][_owner_s214];
[L7406]   RET         call __var_14 := balanceOf~address_BasicToken__success(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L7407]   COND FALSE  !(revert)
[L7423]               balance_s729 := (__var_14 + freezingBalance_FreezableToken[this][_owner_s729]) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2038]   RET         call balance_s729 := balanceOf~address_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L2039]               assume !revert && gas >= 0;
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume !((((((((((balance_s729 == balances_BasicToken[this][_owner_s729] && totalSupply__BasicToken[this] == old(totalSupply__BasicToken[this])) && balances_BasicToken[this] == old(balances_BasicToken[this])) && allowed_StandardToken[this] == old(allowed_StandardToken[this])) && initialized_MainToken[this] == old(initialized_MainToken[this])) && paused_Pausable[this] == old(paused_Pausable[this])) && mintingFinished_MintableToken[this] == old(mintingFinished_MintableToken[this])) && owner_Ownable[this] == old(owner_Ownable[this])) && chains_FreezableToken[this] == old(chains_FreezableToken[this])) && freezings_FreezableToken[this] == old(freezings_FreezableToken[this])) && freezingBalance_FreezableToken[this] == old(freezingBalance_FreezableToken[this]));
[L2]                  revert := revert_hold;
[L14140]  RET         call balance_s729 := balanceOf~address_FreezableToken(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L14388]  RET         call CorralChoice_MainToken(this);

[2020-11-24 21:25:46,052 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-24 21:25:46,053 INFO  L82        PathProgramCache]: Analyzing trace with hash -1035443248, now seen corresponding path program 1 times
[2020-11-24 21:25:46,053 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-24 21:25:46,100 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-24 21:25:46,978 INFO  L134       CoverageAnalysis]: Checked inductivity of 9823 backedges. 103 proven. 0 refuted. 0 times theorem prover too weak. 9720 trivial. 0 not checked.
[2020-11-24 21:25:46,979 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-24 21:25:46,979 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [18] imperfect sequences [] total 18
[2020-11-24 21:25:46,980 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-24 21:25:46,980 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 19 interpolants.
[2020-11-24 21:25:46,980 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=37, Invalid=305, Unknown=0, NotChecked=0, Total=342
[2020-11-24 21:25:46,980 INFO  L87              Difference]: Start difference. First operand 8495 states and 9486 transitions. cyclomatic complexity: 1009 Second operand 19 states.
[2020-11-24 21:25:56,220 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-24 21:25:56,220 INFO  L93              Difference]: Finished difference Result 8716 states and 9756 transitions.
[2020-11-24 21:25:56,221 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 22 states. 
[2020-11-24 21:25:56,221 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 8716 states and 9756 transitions.
[2020-11-24 21:25:56,236 INFO  L131   ngComponentsAnalysis]: Automaton has 3 accepting balls. 12
[2020-11-24 21:25:56,260 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 8716 states to 8716 states and 9756 transitions.
[2020-11-24 21:25:56,260 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 2122
[2020-11-24 21:25:56,262 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 2122
[2020-11-24 21:25:56,263 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 8716 states and 9756 transitions.
[2020-11-24 21:25:56,269 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-24 21:25:56,269 INFO  L728         BuchiCegarLoop]: Abstraction has 8716 states and 9756 transitions.
[2020-11-24 21:25:56,276 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 8716 states and 9756 transitions.
[2020-11-24 21:25:56,334 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 8716 to 8666.
[2020-11-24 21:25:56,334 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 8666 states.
[2020-11-24 21:25:56,343 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 8666 states to 8666 states and 9678 transitions.
[2020-11-24 21:25:56,344 INFO  L751         BuchiCegarLoop]: Abstraction has 8666 states and 9678 transitions.
[2020-11-24 21:25:56,344 INFO  L631         BuchiCegarLoop]: Abstraction has 8666 states and 9678 transitions.
[2020-11-24 21:25:56,344 INFO  L445         BuchiCegarLoop]: ======== Iteration 5============
[2020-11-24 21:25:56,344 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 8666 states and 9678 transitions.
[2020-11-24 21:25:56,352 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 8
[2020-11-24 21:25:56,353 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-24 21:25:56,353 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-24 21:25:56,355 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [38, 38, 38, 38, 38, 38, 38, 38, 38, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-24 21:25:56,355 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  success_balanceOf_FreezableToken0 := false;
[L2]                  call_balanceOf_FreezableToken0 := false;
[L2]      CALL        call main();
[L14378]              assume null == 0;
[L14379]  CALL        call this := FreshRefGenerator__success();
[L6396]               havoc newRef;
[L6397]               assume Alloc[newRef] == false;
[L6398]               Alloc[newRef] := true;
[L6399]               assume newRef != null;
[L14379]  RET         call this := FreshRefGenerator__success();
[L14380]              assume now >= 0;
[L14381]              assume DType[this] == MainToken;
[L14382]              assume msgvalue_MSG == 0;
[L14383]              gas := gas - 53000;
[L14384]  CALL        call MainToken_MainToken(this, msgsender_MSG, msgvalue_MSG);
[L4183]               havoc __exception;
[L4184]               revert := false;
[L4185]   COND FALSE  !(__exception)
[L4222]   CALL        call MainToken_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9205]   CALL        call Consts_Consts__success(this, msgsender_MSG, msgvalue_MSG);
[L9007]   CALL        call Consts_Consts_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8983]               assume msgsender_MSG != null;
[L8984]               Balance[this] := 0;
[L8985]               TOKEN_DECIMALS_Consts[this] := 18;
[L8986]               TOKEN_DECIMALS_UINT8_Consts[this] := 18;
[L8987]               TOKEN_DECIMAL_MULTIPLIER_Consts[this] := nonlinearPow(10, TOKEN_DECIMALS_Consts[this]) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8988]               TOKEN_NAME_Consts[this] := -1051245219;
[L8989]               TOKEN_SYMBOL_Consts[this] := -1804535220;
[L8990]               PAUSED_Consts[this] := false;
[L8991]               __var_52 := ConstantToRef(-210822415442009814958929812751043848690848471787);
[L8992]               TARGET_USER_Consts[this] := ConstantToRef(-210822415442009814958929812751043848690848471787);
[L8993]               CONTINUE_MINTING_Consts[this] := true;
[L9007]   RET         call Consts_Consts_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9008]   COND FALSE  !(revert)
[L9205]   RET         call Consts_Consts__success(this, msgsender_MSG, msgvalue_MSG);
[L9206]   COND FALSE  !(revert)
[L9209]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L9209]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L9210]   COND FALSE  !(revert)
[L9213]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6694]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6694]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6695]   COND FALSE  !(revert)
[L6698]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6675]               assume msgsender_MSG != null;
[L6676]               Balance[this] := 0;
[L6698]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6699]   COND FALSE  !(revert)
[L9213]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L9214]   COND FALSE  !(revert)
[L9217]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6565]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   COND FALSE  !(revert)
[L6569]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]               assume msgsender_MSG != null;
[L6544]               Balance[this] := 0;
[L6545]               balances_BasicToken[this] := zeroRefintArr();
[L6546]               sum_balances0[this] := 0;
[L6547]               totalSupply__BasicToken[this] := 0;
[L6569]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6570]   COND FALSE  !(revert)
[L9217]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9218]   COND FALSE  !(revert)
[L9221]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6746]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6746]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6747]   COND FALSE  !(revert)
[L6750]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6694]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6694]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6695]   COND FALSE  !(revert)
[L6698]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6675]               assume msgsender_MSG != null;
[L6676]               Balance[this] := 0;
[L6698]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6699]   COND FALSE  !(revert)
[L6750]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6751]   COND FALSE  !(revert)
[L6754]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6565]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   COND FALSE  !(revert)
[L6569]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]               assume msgsender_MSG != null;
[L6544]               Balance[this] := 0;
[L6545]               balances_BasicToken[this] := zeroRefintArr();
[L6546]               sum_balances0[this] := 0;
[L6547]               totalSupply__BasicToken[this] := 0;
[L6569]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6570]   COND FALSE  !(revert)
[L6754]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6755]   COND FALSE  !(revert)
[L6758]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6717]               assume msgsender_MSG != null;
[L6718]               Balance[this] := 0;
[L6719]               allowed_StandardToken[this] := zeroRefRefintArr();
[L6720]               sum_allowed1[this] := 0;
[L6758]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6759]   COND FALSE  !(revert)
[L9221]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9222]   COND FALSE  !(revert)
[L9225]   CALL        call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7353]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L7353]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7354]   COND FALSE  !(revert)
[L7357]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6694]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6694]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6695]   COND FALSE  !(revert)
[L6698]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6675]               assume msgsender_MSG != null;
[L6676]               Balance[this] := 0;
[L6698]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6699]   COND FALSE  !(revert)
[L7357]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7358]   COND FALSE  !(revert)
[L7361]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6565]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   COND FALSE  !(revert)
[L6569]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]               assume msgsender_MSG != null;
[L6544]               Balance[this] := 0;
[L6545]               balances_BasicToken[this] := zeroRefintArr();
[L6546]               sum_balances0[this] := 0;
[L6547]               totalSupply__BasicToken[this] := 0;
[L6569]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6570]   COND FALSE  !(revert)
[L7361]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7362]   COND FALSE  !(revert)
[L7365]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6746]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6746]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6747]   COND FALSE  !(revert)
[L6750]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6694]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6694]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6695]   COND FALSE  !(revert)
[L6698]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6675]               assume msgsender_MSG != null;
[L6676]               Balance[this] := 0;
[L6698]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6699]   COND FALSE  !(revert)
[L6750]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6751]   COND FALSE  !(revert)
[L6754]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6565]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   COND FALSE  !(revert)
[L6569]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]               assume msgsender_MSG != null;
[L6544]               Balance[this] := 0;
[L6545]               balances_BasicToken[this] := zeroRefintArr();
[L6546]               sum_balances0[this] := 0;
[L6547]               totalSupply__BasicToken[this] := 0;
[L6569]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6570]   COND FALSE  !(revert)
[L6754]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6755]   COND FALSE  !(revert)
[L6758]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6717]               assume msgsender_MSG != null;
[L6718]               Balance[this] := 0;
[L6719]               allowed_StandardToken[this] := zeroRefRefintArr();
[L6720]               sum_allowed1[this] := 0;
[L6758]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6759]   COND FALSE  !(revert)
[L7365]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7366]   COND FALSE  !(revert)
[L7369]   CALL        call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7316]               assume msgsender_MSG != null;
[L7317]               Balance[this] := 0;
[L7318]               chains_FreezableToken[this] := zerointintArr();
[L7319]               sum_chains2[this] := 0;
[L7320]               freezings_FreezableToken[this] := zerointintArr();
[L7321]               sum_freezings3[this] := 0;
[L7322]               freezingBalance_FreezableToken[this] := zeroRefintArr();
[L7323]               sum_freezingBalance4[this] := 0;
[L7369]   RET         call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7370]   COND FALSE  !(revert)
[L9225]   RET         call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9226]   COND FALSE  !(revert)
[L9229]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6988]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6971]               assume msgsender_MSG != null;
[L6972]               Balance[this] := 0;
[L6973]               owner_Ownable[this] := null;
[L6975]               owner_Ownable[this] := msgsender_MSG;
[L6988]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6989]   COND FALSE  !(revert)
[L9229]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L9230]   COND FALSE  !(revert)
[L9233]   CALL        call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7172]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L7172]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7173]   COND FALSE  !(revert)
[L7176]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6694]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6694]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6695]   COND FALSE  !(revert)
[L6698]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6675]               assume msgsender_MSG != null;
[L6676]               Balance[this] := 0;
[L6698]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6699]   COND FALSE  !(revert)
[L7176]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7177]   COND FALSE  !(revert)
[L7180]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6565]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   COND FALSE  !(revert)
[L6569]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]               assume msgsender_MSG != null;
[L6544]               Balance[this] := 0;
[L6545]               balances_BasicToken[this] := zeroRefintArr();
[L6546]               sum_balances0[this] := 0;
[L6547]               totalSupply__BasicToken[this] := 0;
[L6569]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6570]   COND FALSE  !(revert)
[L7180]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7181]   COND FALSE  !(revert)
[L7184]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6746]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6746]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6747]   COND FALSE  !(revert)
[L6750]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6694]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6694]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6695]   COND FALSE  !(revert)
[L6698]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6675]               assume msgsender_MSG != null;
[L6676]               Balance[this] := 0;
[L6698]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6699]   COND FALSE  !(revert)
[L6750]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6751]   COND FALSE  !(revert)
[L6754]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6565]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   COND FALSE  !(revert)
[L6569]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]               assume msgsender_MSG != null;
[L6544]               Balance[this] := 0;
[L6545]               balances_BasicToken[this] := zeroRefintArr();
[L6546]               sum_balances0[this] := 0;
[L6547]               totalSupply__BasicToken[this] := 0;
[L6569]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6570]   COND FALSE  !(revert)
[L6754]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6755]   COND FALSE  !(revert)
[L6758]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6717]               assume msgsender_MSG != null;
[L6718]               Balance[this] := 0;
[L6719]               allowed_StandardToken[this] := zeroRefRefintArr();
[L6720]               sum_allowed1[this] := 0;
[L6758]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6759]   COND FALSE  !(revert)
[L7184]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7185]   COND FALSE  !(revert)
[L7188]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6988]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6971]               assume msgsender_MSG != null;
[L6972]               Balance[this] := 0;
[L6973]               owner_Ownable[this] := null;
[L6975]               owner_Ownable[this] := msgsender_MSG;
[L6988]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6989]   COND FALSE  !(revert)
[L7188]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7189]   COND FALSE  !(revert)
[L7192]   CALL        call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7136]               assume msgsender_MSG != null;
[L7137]               Balance[this] := 0;
[L7138]               mintingFinished_MintableToken[this] := false;
[L7192]   RET         call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7193]   COND FALSE  !(revert)
[L9233]   RET         call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9234]   COND FALSE  !(revert)
[L9237]   CALL        call FreezableMintableToken_FreezableMintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L8792]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L8792]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L8793]   COND FALSE  !(revert)
[L8796]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6694]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6694]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6695]   COND FALSE  !(revert)
[L6698]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6675]               assume msgsender_MSG != null;
[L6676]               Balance[this] := 0;
[L6698]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6699]   COND FALSE  !(revert)
[L8796]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L8797]   COND FALSE  !(revert)
[L8800]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6565]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   COND FALSE  !(revert)
[L6569]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]               assume msgsender_MSG != null;
[L6544]               Balance[this] := 0;
[L6545]               balances_BasicToken[this] := zeroRefintArr();
[L6546]               sum_balances0[this] := 0;
[L6547]               totalSupply__BasicToken[this] := 0;
[L6569]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6570]   COND FALSE  !(revert)
[L8800]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L8801]   COND FALSE  !(revert)
[L8804]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6746]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6746]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6747]   COND FALSE  !(revert)
[L6750]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6694]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6694]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6695]   COND FALSE  !(revert)
[L6698]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6675]               assume msgsender_MSG != null;
[L6676]               Balance[this] := 0;
[L6698]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6699]   COND FALSE  !(revert)
[L6750]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6751]   COND FALSE  !(revert)
[L6754]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6565]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   COND FALSE  !(revert)
[L6569]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]               assume msgsender_MSG != null;
[L6544]               Balance[this] := 0;
[L6545]               balances_BasicToken[this] := zeroRefintArr();
[L6546]               sum_balances0[this] := 0;
[L6547]               totalSupply__BasicToken[this] := 0;
[L6569]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6570]   COND FALSE  !(revert)
[L6754]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6755]   COND FALSE  !(revert)
[L6758]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6717]               assume msgsender_MSG != null;
[L6718]               Balance[this] := 0;
[L6719]               allowed_StandardToken[this] := zeroRefRefintArr();
[L6720]               sum_allowed1[this] := 0;
[L6758]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6759]   COND FALSE  !(revert)
[L8804]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L8805]   COND FALSE  !(revert)
[L8808]   CALL        call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7353]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L7353]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7354]   COND FALSE  !(revert)
[L7357]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6694]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6694]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6695]   COND FALSE  !(revert)
[L6698]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6675]               assume msgsender_MSG != null;
[L6676]               Balance[this] := 0;
[L6698]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6699]   COND FALSE  !(revert)
[L7357]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7358]   COND FALSE  !(revert)
[L7361]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6565]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   COND FALSE  !(revert)
[L6569]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]               assume msgsender_MSG != null;
[L6544]               Balance[this] := 0;
[L6545]               balances_BasicToken[this] := zeroRefintArr();
[L6546]               sum_balances0[this] := 0;
[L6547]               totalSupply__BasicToken[this] := 0;
[L6569]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6570]   COND FALSE  !(revert)
[L7361]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7362]   COND FALSE  !(revert)
[L7365]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6746]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6746]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6747]   COND FALSE  !(revert)
[L6750]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6694]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6694]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6695]   COND FALSE  !(revert)
[L6698]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6675]               assume msgsender_MSG != null;
[L6676]               Balance[this] := 0;
[L6698]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6699]   COND FALSE  !(revert)
[L6750]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6751]   COND FALSE  !(revert)
[L6754]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6565]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   COND FALSE  !(revert)
[L6569]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]               assume msgsender_MSG != null;
[L6544]               Balance[this] := 0;
[L6545]               balances_BasicToken[this] := zeroRefintArr();
[L6546]               sum_balances0[this] := 0;
[L6547]               totalSupply__BasicToken[this] := 0;
[L6569]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6570]   COND FALSE  !(revert)
[L6754]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6755]   COND FALSE  !(revert)
[L6758]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6717]               assume msgsender_MSG != null;
[L6718]               Balance[this] := 0;
[L6719]               allowed_StandardToken[this] := zeroRefRefintArr();
[L6720]               sum_allowed1[this] := 0;
[L6758]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6759]   COND FALSE  !(revert)
[L7365]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7366]   COND FALSE  !(revert)
[L7369]   CALL        call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7316]               assume msgsender_MSG != null;
[L7317]               Balance[this] := 0;
[L7318]               chains_FreezableToken[this] := zerointintArr();
[L7319]               sum_chains2[this] := 0;
[L7320]               freezings_FreezableToken[this] := zerointintArr();
[L7321]               sum_freezings3[this] := 0;
[L7322]               freezingBalance_FreezableToken[this] := zeroRefintArr();
[L7323]               sum_freezingBalance4[this] := 0;
[L7369]   RET         call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7370]   COND FALSE  !(revert)
[L8808]   RET         call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L8809]   COND FALSE  !(revert)
[L8812]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6988]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6971]               assume msgsender_MSG != null;
[L6972]               Balance[this] := 0;
[L6973]               owner_Ownable[this] := null;
[L6975]               owner_Ownable[this] := msgsender_MSG;
[L6988]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6989]   COND FALSE  !(revert)
[L8812]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L8813]   COND FALSE  !(revert)
[L8816]   CALL        call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7172]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L7172]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7173]   COND FALSE  !(revert)
[L7176]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6694]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6694]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6695]   COND FALSE  !(revert)
[L6698]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6675]               assume msgsender_MSG != null;
[L6676]               Balance[this] := 0;
[L6698]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6699]   COND FALSE  !(revert)
[L7176]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7177]   COND FALSE  !(revert)
[L7180]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6565]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   COND FALSE  !(revert)
[L6569]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]               assume msgsender_MSG != null;
[L6544]               Balance[this] := 0;
[L6545]               balances_BasicToken[this] := zeroRefintArr();
[L6546]               sum_balances0[this] := 0;
[L6547]               totalSupply__BasicToken[this] := 0;
[L6569]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6570]   COND FALSE  !(revert)
[L7180]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7181]   COND FALSE  !(revert)
[L7184]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6746]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6746]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6747]   COND FALSE  !(revert)
[L6750]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6694]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6694]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6695]   COND FALSE  !(revert)
[L6698]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6675]               assume msgsender_MSG != null;
[L6676]               Balance[this] := 0;
[L6698]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6699]   COND FALSE  !(revert)
[L6750]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6751]   COND FALSE  !(revert)
[L6754]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6565]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   COND FALSE  !(revert)
[L6569]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]               assume msgsender_MSG != null;
[L6544]               Balance[this] := 0;
[L6545]               balances_BasicToken[this] := zeroRefintArr();
[L6546]               sum_balances0[this] := 0;
[L6547]               totalSupply__BasicToken[this] := 0;
[L6569]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6570]   COND FALSE  !(revert)
[L6754]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6755]   COND FALSE  !(revert)
[L6758]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6717]               assume msgsender_MSG != null;
[L6718]               Balance[this] := 0;
[L6719]               allowed_StandardToken[this] := zeroRefRefintArr();
[L6720]               sum_allowed1[this] := 0;
[L6758]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6759]   COND FALSE  !(revert)
[L7184]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7185]   COND FALSE  !(revert)
[L7188]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6988]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6971]               assume msgsender_MSG != null;
[L6972]               Balance[this] := 0;
[L6973]               owner_Ownable[this] := null;
[L6975]               owner_Ownable[this] := msgsender_MSG;
[L6988]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6989]   COND FALSE  !(revert)
[L7188]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7189]   COND FALSE  !(revert)
[L7192]   CALL        call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7136]               assume msgsender_MSG != null;
[L7137]               Balance[this] := 0;
[L7138]               mintingFinished_MintableToken[this] := false;
[L7192]   RET         call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7193]   COND FALSE  !(revert)
[L8816]   RET         call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L8817]   COND FALSE  !(revert)
[L8820]   CALL        call FreezableMintableToken_FreezableMintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8749]               assume msgsender_MSG != null;
[L8750]               Balance[this] := 0;
[L8820]   RET         call FreezableMintableToken_FreezableMintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8821]   COND FALSE  !(revert)
[L9237]   RET         call FreezableMintableToken_FreezableMintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9238]   COND FALSE  !(revert)
[L9241]   CALL        call BurnableToken_BurnableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L8536]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L8536]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L8537]   COND FALSE  !(revert)
[L8540]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6565]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   COND FALSE  !(revert)
[L6569]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]               assume msgsender_MSG != null;
[L6544]               Balance[this] := 0;
[L6545]               balances_BasicToken[this] := zeroRefintArr();
[L6546]               sum_balances0[this] := 0;
[L6547]               totalSupply__BasicToken[this] := 0;
[L6569]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6570]   COND FALSE  !(revert)
[L8540]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L8541]   COND FALSE  !(revert)
[L8544]   CALL        call BurnableToken_BurnableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8513]               assume msgsender_MSG != null;
[L8514]               Balance[this] := 0;
[L8544]   RET         call BurnableToken_BurnableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8545]   COND FALSE  !(revert)
[L9241]   RET         call BurnableToken_BurnableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9242]   COND FALSE  !(revert)
[L9245]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L8662]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6988]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6971]               assume msgsender_MSG != null;
[L6972]               Balance[this] := 0;
[L6973]               owner_Ownable[this] := null;
[L6975]               owner_Ownable[this] := msgsender_MSG;
[L6988]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6989]   COND FALSE  !(revert)
[L8662]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L8663]   COND FALSE  !(revert)
[L8666]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8642]               assume msgsender_MSG != null;
[L8643]               Balance[this] := 0;
[L8644]               paused_Pausable[this] := false;
[L8666]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8667]   COND FALSE  !(revert)
[L9245]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L9246]   COND FALSE  !(revert)
[L9249]   CALL        call MainToken_MainToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9133]               assume msgsender_MSG != null;
[L9134]               Balance[this] := 0;
[L9135]               initialized_MainToken[this] := false;
[L9137]   CALL        call init_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9404]   COND FALSE  !(!!initialized_MainToken[this])
[L9408]               initialized_MainToken[this] := true;
[L9409]   COND FALSE  !(PAUSED_Consts[this])
[L9419]   COND FALSE  !(!CONTINUE_MINTING_Consts[this])
[L9429]               assert { :EventEmitted "Initialized_MainToken" } true;
[L9137]   RET         call init_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9138]   COND FALSE  !(revert)
[L9141]   COND TRUE   DType[this] == MainToken
[L9142]   CALL        call transferOwnership~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, TARGET_USER_Consts[this]);
[L7055]   CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L12332]  COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L7055]   RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7056]   COND FALSE  !(revert)
[L7059]   COND TRUE   DType[this] == MainToken
[L7060]   CALL        call _transferOwnership~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, _newOwner_s558);
[L7103]               __var_11 := null;
[L7104]   COND FALSE  !(!(_newOwner_s581 != null))
[L7108]               assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L7109]               owner_Ownable[this] := _newOwner_s581;
[L7060]   RET         call _transferOwnership~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, _newOwner_s558);
[L7061]   COND FALSE  !(revert)
[L9142]   RET         call transferOwnership~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, TARGET_USER_Consts[this]);
[L9143]   COND FALSE  !(revert)
[L9249]   RET         call MainToken_MainToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9250]   COND FALSE  !(revert)
[L4222]   RET         call MainToken_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4223]               assume !revert && gas >= 0;
[L14384]  RET         call MainToken_MainToken(this, msgsender_MSG, msgvalue_MSG);
[L14385]              assume !revert && gas >= 0;
[L14388]  CALL        call CorralChoice_MainToken(this);
[L14045]              havoc msgsender_MSG;
[L14046]              havoc msgvalue_MSG;
[L14047]              havoc choice;
[L14048]              havoc __ret_0_totalSupply;
[L14049]              havoc _owner_s729;
[L14050]              havoc balance_s729;
[L14051]              havoc _to_s1572;
[L14052]              havoc _value_s1572;
[L14053]              havoc _success_s1572;
[L14054]              havoc _owner_s395;
[L14055]              havoc _spender_s395;
[L14056]              havoc __ret_0_allowance;
[L14057]              havoc _from_s1551;
[L14058]              havoc _to_s1551;
[L14059]              havoc _value_s1551;
[L14060]              havoc _success_s1551;
[L14061]              havoc _spender_s379;
[L14062]              havoc _value_s379;
[L14063]              havoc __ret_0_approve;
[L14064]              havoc _spender_s437;
[L14065]              havoc _addedValue_s437;
[L14066]              havoc __ret_0_increaseApproval;
[L14067]              havoc _spender_s497;
[L14068]              havoc _subtractedValue_s497;
[L14069]              havoc __ret_0_decreaseApproval;
[L14070]              havoc __ret_0_owner;
[L14071]              havoc _newOwner_s558;
[L14072]              havoc __ret_0_mintingFinished;
[L14073]              havoc _to_s664;
[L14074]              havoc _amount_s664;
[L14075]              havoc __ret_0_mint;
[L14076]              havoc __ret_0_finishMinting;
[L14077]              havoc _owner_s742;
[L14078]              havoc balance_s742;
[L14079]              havoc _owner_s754;
[L14080]              havoc balance_s754;
[L14081]              havoc _addr_s792;
[L14082]              havoc count_s792;
[L14083]              havoc _addr_s849;
[L14084]              havoc _index_s849;
[L14085]              havoc _release_s849;
[L14086]              havoc _balance_s849;
[L14087]              havoc _to_s938;
[L14088]              havoc _amount_s938;
[L14089]              havoc _until_s938;
[L14090]              havoc tokens_s1107;
[L14091]              havoc _value_s1261;
[L14092]              havoc __ret_0_paused;
[L14093]              havoc _to_s1449;
[L14094]              havoc _amount_s1449;
[L14095]              havoc _until_s1449;
[L14096]              havoc __ret_0_mintAndFreeze;
[L14097]              havoc __ret_0_TOKEN_DECIMALS;
[L14098]              havoc __ret_0_TOKEN_DECIMALS_UINT8;
[L14099]              havoc __ret_0_TOKEN_DECIMAL_MULTIPLIER;
[L14100]              havoc __ret_0_TOKEN_NAME;
[L14101]              havoc __ret_0_TOKEN_SYMBOL;
[L14102]              havoc __ret_0_PAUSED;
[L14103]              havoc __ret_0_TARGET_USER;
[L14104]              havoc __ret_0_CONTINUE_MINTING;
[L14105]              havoc __ret_0_initialized;
[L14106]              havoc _name_s1511;
[L14107]              havoc _symbol_s1519;
[L14108]              havoc _decimals_s1527;
[L14109]              havoc tmpNow;
[L14110]              havoc gas;
[L14111]              assume gas > 4000000 && gas <= 8000000;
[L14112]              tmpNow := now;
[L14113]              havoc now;
[L14114]              assume now > tmpNow;
[L14115]              assume msgsender_MSG != null;
[L14116]              assume DType[msgsender_MSG] != ERC20Basic;
[L14117]              assume DType[msgsender_MSG] != SafeMath;
[L14118]              assume DType[msgsender_MSG] != BasicToken;
[L14119]              assume DType[msgsender_MSG] != ERC20;
[L14120]              assume DType[msgsender_MSG] != StandardToken;
[L14121]              assume DType[msgsender_MSG] != Ownable;
[L14122]              assume DType[msgsender_MSG] != MintableToken;
[L14123]              assume DType[msgsender_MSG] != FreezableToken;
[L14124]              assume DType[msgsender_MSG] != BurnableToken;
[L14125]              assume DType[msgsender_MSG] != Pausable;
[L14126]              assume DType[msgsender_MSG] != FreezableMintableToken;
[L14127]              assume DType[msgsender_MSG] != Consts;
[L14128]              assume DType[msgsender_MSG] != MainToken;
[L14129]              Alloc[msgsender_MSG] := true;
[L14130]  COND FALSE  !(choice == 38)
[L14136]  COND TRUE   choice == 37
[L14137]              gas := gas - 21000;
[L14138]  COND TRUE   gas >= 0
[L14139]              assume msgvalue_MSG == 0;
[L14140]  CALL        call balance_s729 := balanceOf~address_FreezableToken(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume balances_BasicToken[this][_owner_s729] >= 0 && balances_BasicToken[this][_owner_s729] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_balanceOf_FreezableToken0 := true;
[L2]                  call_balanceOf_FreezableToken0 := false;
[L2]                  revert := revert_hold;
[L1999]               havoc __exception;
[L2000]               revert := false;
[L2001]   COND TRUE   __exception
[L2002]               __tmp__Balance := Balance;
[L2003]               __tmp__DType := DType;
[L2004]               __tmp__Alloc := Alloc;
[L2005]               __tmp__balance_ADDR := balance_ADDR;
[L2006]               __tmp__M_Ref_int := M_Ref_int;
[L2007]               __tmp__sum_balances0 := sum_balances0;
[L2008]               __tmp__alloc_allowed_StandardToken_lvl0 := alloc_allowed_StandardToken_lvl0;
[L2009]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L2010]               __tmp__sum_allowed1 := sum_allowed1;
[L2011]               __tmp__M_int_int := M_int_int;
[L2012]               __tmp__sum_chains2 := sum_chains2;
[L2013]               __tmp__sum_freezings3 := sum_freezings3;
[L2014]               __tmp__sum_freezingBalance4 := sum_freezingBalance4;
[L2015]               __tmp__Length := Length;
[L2016]               __tmp__now := now;
[L2017]               __tmp__balances_BasicToken := balances_BasicToken;
[L2018]               __tmp__totalSupply__BasicToken := totalSupply__BasicToken;
[L2019]               __tmp__allowed_StandardToken := allowed_StandardToken;
[L2020]               __tmp__owner_Ownable := owner_Ownable;
[L2021]               __tmp__mintingFinished_MintableToken := mintingFinished_MintableToken;
[L2022]               __tmp__chains_FreezableToken := chains_FreezableToken;
[L2023]               __tmp__freezings_FreezableToken := freezings_FreezableToken;
[L2024]               __tmp__freezingBalance_FreezableToken := freezingBalance_FreezableToken;
[L2025]               __tmp__paused_Pausable := paused_Pausable;
[L2026]               __tmp__TOKEN_DECIMALS_Consts := TOKEN_DECIMALS_Consts;
[L2027]               __tmp__TOKEN_DECIMALS_UINT8_Consts := TOKEN_DECIMALS_UINT8_Consts;
[L2028]               __tmp__TOKEN_DECIMAL_MULTIPLIER_Consts := TOKEN_DECIMAL_MULTIPLIER_Consts;
[L2029]               __tmp__TOKEN_NAME_Consts := TOKEN_NAME_Consts;
[L2030]               __tmp__TOKEN_SYMBOL_Consts := TOKEN_SYMBOL_Consts;
[L2031]               __tmp__PAUSED_Consts := PAUSED_Consts;
[L2032]               __tmp__TARGET_USER_Consts := TARGET_USER_Consts;
[L2033]               __tmp__CONTINUE_MINTING_Consts := CONTINUE_MINTING_Consts;
[L2034]               __tmp__initialized_MainToken := initialized_MainToken;
[L2035]   CALL        call balance_s729 := balanceOf~address_FreezableToken__fail(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L7379]   COND TRUE   __tmp__DType[this] == MainToken
[L7380]   CALL        call __var_14 := balanceOf~address_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L6654]               __ret_0_ := __tmp__balances_BasicToken[this][_owner_s214];
[L7380]   RET         call __var_14 := balanceOf~address_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L7381]   COND FALSE  !(revert)
[L7397]               balance_s729 := (__var_14 + __tmp__freezingBalance_FreezableToken[this][_owner_s729]) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2035]   RET         call balance_s729 := balanceOf~address_FreezableToken__fail(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L2036]               assume revert || gas < 0;
[L14140]  RET         call balance_s729 := balanceOf~address_FreezableToken(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L14388]  RET         call CorralChoice_MainToken(this);

Loop:
[L14388]  CALL        call CorralChoice_MainToken(this);
[L14045]              havoc msgsender_MSG;
[L14046]              havoc msgvalue_MSG;
[L14047]              havoc choice;
[L14048]              havoc __ret_0_totalSupply;
[L14049]              havoc _owner_s729;
[L14050]              havoc balance_s729;
[L14051]              havoc _to_s1572;
[L14052]              havoc _value_s1572;
[L14053]              havoc _success_s1572;
[L14054]              havoc _owner_s395;
[L14055]              havoc _spender_s395;
[L14056]              havoc __ret_0_allowance;
[L14057]              havoc _from_s1551;
[L14058]              havoc _to_s1551;
[L14059]              havoc _value_s1551;
[L14060]              havoc _success_s1551;
[L14061]              havoc _spender_s379;
[L14062]              havoc _value_s379;
[L14063]              havoc __ret_0_approve;
[L14064]              havoc _spender_s437;
[L14065]              havoc _addedValue_s437;
[L14066]              havoc __ret_0_increaseApproval;
[L14067]              havoc _spender_s497;
[L14068]              havoc _subtractedValue_s497;
[L14069]              havoc __ret_0_decreaseApproval;
[L14070]              havoc __ret_0_owner;
[L14071]              havoc _newOwner_s558;
[L14072]              havoc __ret_0_mintingFinished;
[L14073]              havoc _to_s664;
[L14074]              havoc _amount_s664;
[L14075]              havoc __ret_0_mint;
[L14076]              havoc __ret_0_finishMinting;
[L14077]              havoc _owner_s742;
[L14078]              havoc balance_s742;
[L14079]              havoc _owner_s754;
[L14080]              havoc balance_s754;
[L14081]              havoc _addr_s792;
[L14082]              havoc count_s792;
[L14083]              havoc _addr_s849;
[L14084]              havoc _index_s849;
[L14085]              havoc _release_s849;
[L14086]              havoc _balance_s849;
[L14087]              havoc _to_s938;
[L14088]              havoc _amount_s938;
[L14089]              havoc _until_s938;
[L14090]              havoc tokens_s1107;
[L14091]              havoc _value_s1261;
[L14092]              havoc __ret_0_paused;
[L14093]              havoc _to_s1449;
[L14094]              havoc _amount_s1449;
[L14095]              havoc _until_s1449;
[L14096]              havoc __ret_0_mintAndFreeze;
[L14097]              havoc __ret_0_TOKEN_DECIMALS;
[L14098]              havoc __ret_0_TOKEN_DECIMALS_UINT8;
[L14099]              havoc __ret_0_TOKEN_DECIMAL_MULTIPLIER;
[L14100]              havoc __ret_0_TOKEN_NAME;
[L14101]              havoc __ret_0_TOKEN_SYMBOL;
[L14102]              havoc __ret_0_PAUSED;
[L14103]              havoc __ret_0_TARGET_USER;
[L14104]              havoc __ret_0_CONTINUE_MINTING;
[L14105]              havoc __ret_0_initialized;
[L14106]              havoc _name_s1511;
[L14107]              havoc _symbol_s1519;
[L14108]              havoc _decimals_s1527;
[L14109]              havoc tmpNow;
[L14110]              havoc gas;
[L14111]              assume gas > 4000000 && gas <= 8000000;
[L14112]              tmpNow := now;
[L14113]              havoc now;
[L14114]              assume now > tmpNow;
[L14115]              assume msgsender_MSG != null;
[L14116]              assume DType[msgsender_MSG] != ERC20Basic;
[L14117]              assume DType[msgsender_MSG] != SafeMath;
[L14118]              assume DType[msgsender_MSG] != BasicToken;
[L14119]              assume DType[msgsender_MSG] != ERC20;
[L14120]              assume DType[msgsender_MSG] != StandardToken;
[L14121]              assume DType[msgsender_MSG] != Ownable;
[L14122]              assume DType[msgsender_MSG] != MintableToken;
[L14123]              assume DType[msgsender_MSG] != FreezableToken;
[L14124]              assume DType[msgsender_MSG] != BurnableToken;
[L14125]              assume DType[msgsender_MSG] != Pausable;
[L14126]              assume DType[msgsender_MSG] != FreezableMintableToken;
[L14127]              assume DType[msgsender_MSG] != Consts;
[L14128]              assume DType[msgsender_MSG] != MainToken;
[L14129]              Alloc[msgsender_MSG] := true;
[L14130]  COND FALSE  !(choice == 38)
[L14136]  COND TRUE   choice == 37
[L14137]              gas := gas - 21000;
[L14138]  COND TRUE   gas >= 0
[L14139]              assume msgvalue_MSG == 0;
[L14140]  CALL        call balance_s729 := balanceOf~address_FreezableToken(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume balances_BasicToken[this][_owner_s729] >= 0 && balances_BasicToken[this][_owner_s729] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_balanceOf_FreezableToken0 := true;
[L2]                  call_balanceOf_FreezableToken0 := false;
[L2]                  revert := revert_hold;
[L1999]               havoc __exception;
[L2000]               revert := false;
[L2001]   COND TRUE   __exception
[L2002]               __tmp__Balance := Balance;
[L2003]               __tmp__DType := DType;
[L2004]               __tmp__Alloc := Alloc;
[L2005]               __tmp__balance_ADDR := balance_ADDR;
[L2006]               __tmp__M_Ref_int := M_Ref_int;
[L2007]               __tmp__sum_balances0 := sum_balances0;
[L2008]               __tmp__alloc_allowed_StandardToken_lvl0 := alloc_allowed_StandardToken_lvl0;
[L2009]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L2010]               __tmp__sum_allowed1 := sum_allowed1;
[L2011]               __tmp__M_int_int := M_int_int;
[L2012]               __tmp__sum_chains2 := sum_chains2;
[L2013]               __tmp__sum_freezings3 := sum_freezings3;
[L2014]               __tmp__sum_freezingBalance4 := sum_freezingBalance4;
[L2015]               __tmp__Length := Length;
[L2016]               __tmp__now := now;
[L2017]               __tmp__balances_BasicToken := balances_BasicToken;
[L2018]               __tmp__totalSupply__BasicToken := totalSupply__BasicToken;
[L2019]               __tmp__allowed_StandardToken := allowed_StandardToken;
[L2020]               __tmp__owner_Ownable := owner_Ownable;
[L2021]               __tmp__mintingFinished_MintableToken := mintingFinished_MintableToken;
[L2022]               __tmp__chains_FreezableToken := chains_FreezableToken;
[L2023]               __tmp__freezings_FreezableToken := freezings_FreezableToken;
[L2024]               __tmp__freezingBalance_FreezableToken := freezingBalance_FreezableToken;
[L2025]               __tmp__paused_Pausable := paused_Pausable;
[L2026]               __tmp__TOKEN_DECIMALS_Consts := TOKEN_DECIMALS_Consts;
[L2027]               __tmp__TOKEN_DECIMALS_UINT8_Consts := TOKEN_DECIMALS_UINT8_Consts;
[L2028]               __tmp__TOKEN_DECIMAL_MULTIPLIER_Consts := TOKEN_DECIMAL_MULTIPLIER_Consts;
[L2029]               __tmp__TOKEN_NAME_Consts := TOKEN_NAME_Consts;
[L2030]               __tmp__TOKEN_SYMBOL_Consts := TOKEN_SYMBOL_Consts;
[L2031]               __tmp__PAUSED_Consts := PAUSED_Consts;
[L2032]               __tmp__TARGET_USER_Consts := TARGET_USER_Consts;
[L2033]               __tmp__CONTINUE_MINTING_Consts := CONTINUE_MINTING_Consts;
[L2034]               __tmp__initialized_MainToken := initialized_MainToken;
[L2035]   CALL        call balance_s729 := balanceOf~address_FreezableToken__fail(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L7379]   COND TRUE   __tmp__DType[this] == MainToken
[L7380]   CALL        call __var_14 := balanceOf~address_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L6654]               __ret_0_ := __tmp__balances_BasicToken[this][_owner_s214];
[L7380]   RET         call __var_14 := balanceOf~address_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L7381]   COND FALSE  !(revert)
[L7397]               balance_s729 := (__var_14 + __tmp__freezingBalance_FreezableToken[this][_owner_s729]) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2035]   RET         call balance_s729 := balanceOf~address_FreezableToken__fail(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L2036]               assume revert || gas < 0;
[L14140]  RET         call balance_s729 := balanceOf~address_FreezableToken(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L14388]  RET         call CorralChoice_MainToken(this);

[2020-11-24 21:25:56,364 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-24 21:25:56,364 INFO  L82        PathProgramCache]: Analyzing trace with hash -667367533, now seen corresponding path program 1 times
[2020-11-24 21:25:56,365 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-24 21:25:56,400 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-24 21:25:56,890 INFO  L134       CoverageAnalysis]: Checked inductivity of 9823 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 9823 trivial. 0 not checked.
[2020-11-24 21:25:56,890 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-24 21:25:56,890 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [5] imperfect sequences [] total 5
[2020-11-24 21:25:56,891 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-24 21:25:56,891 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 5 interpolants.
[2020-11-24 21:25:56,891 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=7, Invalid=13, Unknown=0, NotChecked=0, Total=20
[2020-11-24 21:25:56,891 INFO  L87              Difference]: Start difference. First operand 8666 states and 9678 transitions. cyclomatic complexity: 1032 Second operand 5 states.
[2020-11-24 21:25:58,197 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-24 21:25:58,198 INFO  L93              Difference]: Finished difference Result 10050 states and 11288 transitions.
[2020-11-24 21:25:58,198 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 7 states. 
[2020-11-24 21:25:58,198 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 10050 states and 11288 transitions.
[2020-11-24 21:25:58,219 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 12
[2020-11-24 21:25:58,238 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 10050 states to 6823 states and 7886 transitions.
[2020-11-24 21:25:58,238 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1177
[2020-11-24 21:25:58,239 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1330
[2020-11-24 21:25:58,239 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 6823 states and 7886 transitions.
[2020-11-24 21:25:58,243 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-24 21:25:58,243 INFO  L728         BuchiCegarLoop]: Abstraction has 6823 states and 7886 transitions.
[2020-11-24 21:25:58,248 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 6823 states and 7886 transitions.
[2020-11-24 21:25:58,275 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 6823 to 5375.
[2020-11-24 21:25:58,276 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 5375 states.
[2020-11-24 21:25:58,281 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 5375 states to 5375 states and 6048 transitions.
[2020-11-24 21:25:58,281 INFO  L751         BuchiCegarLoop]: Abstraction has 5375 states and 6048 transitions.
[2020-11-24 21:25:58,281 INFO  L631         BuchiCegarLoop]: Abstraction has 5375 states and 6048 transitions.
[2020-11-24 21:25:58,281 INFO  L445         BuchiCegarLoop]: ======== Iteration 6============
[2020-11-24 21:25:58,281 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 5375 states and 6048 transitions.
[2020-11-24 21:25:58,286 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-24 21:25:58,286 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-24 21:25:58,286 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-24 21:25:58,289 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [38, 38, 38, 38, 38, 38, 38, 38, 38, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-24 21:25:58,289 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  success_balanceOf_FreezableToken0 := false;
[L2]                  call_balanceOf_FreezableToken0 := false;
[L2]      CALL        call main();
[L14378]              assume null == 0;
[L14379]  CALL        call this := FreshRefGenerator__success();
[L6396]               havoc newRef;
[L6397]               assume Alloc[newRef] == false;
[L6398]               Alloc[newRef] := true;
[L6399]               assume newRef != null;
[L14379]  RET         call this := FreshRefGenerator__success();
[L14380]              assume now >= 0;
[L14381]              assume DType[this] == MainToken;
[L14382]              assume msgvalue_MSG == 0;
[L14383]              gas := gas - 53000;
[L14384]  CALL        call MainToken_MainToken(this, msgsender_MSG, msgvalue_MSG);
[L4183]               havoc __exception;
[L4184]               revert := false;
[L4185]   COND FALSE  !(__exception)
[L4222]   CALL        call MainToken_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9205]   CALL        call Consts_Consts__success(this, msgsender_MSG, msgvalue_MSG);
[L9007]   CALL        call Consts_Consts_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8983]               assume msgsender_MSG != null;
[L8984]               Balance[this] := 0;
[L8985]               TOKEN_DECIMALS_Consts[this] := 18;
[L8986]               TOKEN_DECIMALS_UINT8_Consts[this] := 18;
[L8987]               TOKEN_DECIMAL_MULTIPLIER_Consts[this] := nonlinearPow(10, TOKEN_DECIMALS_Consts[this]) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8988]               TOKEN_NAME_Consts[this] := -1051245219;
[L8989]               TOKEN_SYMBOL_Consts[this] := -1804535220;
[L8990]               PAUSED_Consts[this] := false;
[L8991]               __var_52 := ConstantToRef(-210822415442009814958929812751043848690848471787);
[L8992]               TARGET_USER_Consts[this] := ConstantToRef(-210822415442009814958929812751043848690848471787);
[L8993]               CONTINUE_MINTING_Consts[this] := true;
[L9007]   RET         call Consts_Consts_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9008]   COND FALSE  !(revert)
[L9205]   RET         call Consts_Consts__success(this, msgsender_MSG, msgvalue_MSG);
[L9206]   COND FALSE  !(revert)
[L9209]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L9209]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L9210]   COND FALSE  !(revert)
[L9213]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6694]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6694]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6695]   COND FALSE  !(revert)
[L6698]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6675]               assume msgsender_MSG != null;
[L6676]               Balance[this] := 0;
[L6698]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6699]   COND FALSE  !(revert)
[L9213]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L9214]   COND FALSE  !(revert)
[L9217]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6565]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   COND FALSE  !(revert)
[L6569]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]               assume msgsender_MSG != null;
[L6544]               Balance[this] := 0;
[L6545]               balances_BasicToken[this] := zeroRefintArr();
[L6546]               sum_balances0[this] := 0;
[L6547]               totalSupply__BasicToken[this] := 0;
[L6569]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6570]   COND FALSE  !(revert)
[L9217]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9218]   COND FALSE  !(revert)
[L9221]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6746]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6746]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6747]   COND FALSE  !(revert)
[L6750]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6694]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6694]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6695]   COND FALSE  !(revert)
[L6698]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6675]               assume msgsender_MSG != null;
[L6676]               Balance[this] := 0;
[L6698]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6699]   COND FALSE  !(revert)
[L6750]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6751]   COND FALSE  !(revert)
[L6754]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6565]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   COND FALSE  !(revert)
[L6569]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]               assume msgsender_MSG != null;
[L6544]               Balance[this] := 0;
[L6545]               balances_BasicToken[this] := zeroRefintArr();
[L6546]               sum_balances0[this] := 0;
[L6547]               totalSupply__BasicToken[this] := 0;
[L6569]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6570]   COND FALSE  !(revert)
[L6754]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6755]   COND FALSE  !(revert)
[L6758]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6717]               assume msgsender_MSG != null;
[L6718]               Balance[this] := 0;
[L6719]               allowed_StandardToken[this] := zeroRefRefintArr();
[L6720]               sum_allowed1[this] := 0;
[L6758]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6759]   COND FALSE  !(revert)
[L9221]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9222]   COND FALSE  !(revert)
[L9225]   CALL        call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7353]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L7353]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7354]   COND FALSE  !(revert)
[L7357]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6694]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6694]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6695]   COND FALSE  !(revert)
[L6698]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6675]               assume msgsender_MSG != null;
[L6676]               Balance[this] := 0;
[L6698]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6699]   COND FALSE  !(revert)
[L7357]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7358]   COND FALSE  !(revert)
[L7361]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6565]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   COND FALSE  !(revert)
[L6569]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]               assume msgsender_MSG != null;
[L6544]               Balance[this] := 0;
[L6545]               balances_BasicToken[this] := zeroRefintArr();
[L6546]               sum_balances0[this] := 0;
[L6547]               totalSupply__BasicToken[this] := 0;
[L6569]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6570]   COND FALSE  !(revert)
[L7361]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7362]   COND FALSE  !(revert)
[L7365]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6746]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6746]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6747]   COND FALSE  !(revert)
[L6750]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6694]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6694]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6695]   COND FALSE  !(revert)
[L6698]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6675]               assume msgsender_MSG != null;
[L6676]               Balance[this] := 0;
[L6698]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6699]   COND FALSE  !(revert)
[L6750]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6751]   COND FALSE  !(revert)
[L6754]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6565]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   COND FALSE  !(revert)
[L6569]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]               assume msgsender_MSG != null;
[L6544]               Balance[this] := 0;
[L6545]               balances_BasicToken[this] := zeroRefintArr();
[L6546]               sum_balances0[this] := 0;
[L6547]               totalSupply__BasicToken[this] := 0;
[L6569]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6570]   COND FALSE  !(revert)
[L6754]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6755]   COND FALSE  !(revert)
[L6758]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6717]               assume msgsender_MSG != null;
[L6718]               Balance[this] := 0;
[L6719]               allowed_StandardToken[this] := zeroRefRefintArr();
[L6720]               sum_allowed1[this] := 0;
[L6758]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6759]   COND FALSE  !(revert)
[L7365]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7366]   COND FALSE  !(revert)
[L7369]   CALL        call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7316]               assume msgsender_MSG != null;
[L7317]               Balance[this] := 0;
[L7318]               chains_FreezableToken[this] := zerointintArr();
[L7319]               sum_chains2[this] := 0;
[L7320]               freezings_FreezableToken[this] := zerointintArr();
[L7321]               sum_freezings3[this] := 0;
[L7322]               freezingBalance_FreezableToken[this] := zeroRefintArr();
[L7323]               sum_freezingBalance4[this] := 0;
[L7369]   RET         call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7370]   COND FALSE  !(revert)
[L9225]   RET         call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9226]   COND FALSE  !(revert)
[L9229]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6988]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6971]               assume msgsender_MSG != null;
[L6972]               Balance[this] := 0;
[L6973]               owner_Ownable[this] := null;
[L6975]               owner_Ownable[this] := msgsender_MSG;
[L6988]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6989]   COND FALSE  !(revert)
[L9229]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L9230]   COND FALSE  !(revert)
[L9233]   CALL        call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7172]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L7172]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7173]   COND FALSE  !(revert)
[L7176]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6694]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6694]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6695]   COND FALSE  !(revert)
[L6698]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6675]               assume msgsender_MSG != null;
[L6676]               Balance[this] := 0;
[L6698]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6699]   COND FALSE  !(revert)
[L7176]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7177]   COND FALSE  !(revert)
[L7180]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6565]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   COND FALSE  !(revert)
[L6569]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]               assume msgsender_MSG != null;
[L6544]               Balance[this] := 0;
[L6545]               balances_BasicToken[this] := zeroRefintArr();
[L6546]               sum_balances0[this] := 0;
[L6547]               totalSupply__BasicToken[this] := 0;
[L6569]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6570]   COND FALSE  !(revert)
[L7180]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7181]   COND FALSE  !(revert)
[L7184]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6746]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6746]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6747]   COND FALSE  !(revert)
[L6750]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6694]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6694]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6695]   COND FALSE  !(revert)
[L6698]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6675]               assume msgsender_MSG != null;
[L6676]               Balance[this] := 0;
[L6698]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6699]   COND FALSE  !(revert)
[L6750]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6751]   COND FALSE  !(revert)
[L6754]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6565]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   COND FALSE  !(revert)
[L6569]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]               assume msgsender_MSG != null;
[L6544]               Balance[this] := 0;
[L6545]               balances_BasicToken[this] := zeroRefintArr();
[L6546]               sum_balances0[this] := 0;
[L6547]               totalSupply__BasicToken[this] := 0;
[L6569]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6570]   COND FALSE  !(revert)
[L6754]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6755]   COND FALSE  !(revert)
[L6758]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6717]               assume msgsender_MSG != null;
[L6718]               Balance[this] := 0;
[L6719]               allowed_StandardToken[this] := zeroRefRefintArr();
[L6720]               sum_allowed1[this] := 0;
[L6758]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6759]   COND FALSE  !(revert)
[L7184]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7185]   COND FALSE  !(revert)
[L7188]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6988]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6971]               assume msgsender_MSG != null;
[L6972]               Balance[this] := 0;
[L6973]               owner_Ownable[this] := null;
[L6975]               owner_Ownable[this] := msgsender_MSG;
[L6988]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6989]   COND FALSE  !(revert)
[L7188]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7189]   COND FALSE  !(revert)
[L7192]   CALL        call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7136]               assume msgsender_MSG != null;
[L7137]               Balance[this] := 0;
[L7138]               mintingFinished_MintableToken[this] := false;
[L7192]   RET         call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7193]   COND FALSE  !(revert)
[L9233]   RET         call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9234]   COND FALSE  !(revert)
[L9237]   CALL        call FreezableMintableToken_FreezableMintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L8792]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L8792]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L8793]   COND FALSE  !(revert)
[L8796]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6694]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6694]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6695]   COND FALSE  !(revert)
[L6698]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6675]               assume msgsender_MSG != null;
[L6676]               Balance[this] := 0;
[L6698]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6699]   COND FALSE  !(revert)
[L8796]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L8797]   COND FALSE  !(revert)
[L8800]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6565]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   COND FALSE  !(revert)
[L6569]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]               assume msgsender_MSG != null;
[L6544]               Balance[this] := 0;
[L6545]               balances_BasicToken[this] := zeroRefintArr();
[L6546]               sum_balances0[this] := 0;
[L6547]               totalSupply__BasicToken[this] := 0;
[L6569]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6570]   COND FALSE  !(revert)
[L8800]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L8801]   COND FALSE  !(revert)
[L8804]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6746]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6746]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6747]   COND FALSE  !(revert)
[L6750]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6694]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6694]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6695]   COND FALSE  !(revert)
[L6698]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6675]               assume msgsender_MSG != null;
[L6676]               Balance[this] := 0;
[L6698]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6699]   COND FALSE  !(revert)
[L6750]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6751]   COND FALSE  !(revert)
[L6754]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6565]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   COND FALSE  !(revert)
[L6569]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]               assume msgsender_MSG != null;
[L6544]               Balance[this] := 0;
[L6545]               balances_BasicToken[this] := zeroRefintArr();
[L6546]               sum_balances0[this] := 0;
[L6547]               totalSupply__BasicToken[this] := 0;
[L6569]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6570]   COND FALSE  !(revert)
[L6754]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6755]   COND FALSE  !(revert)
[L6758]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6717]               assume msgsender_MSG != null;
[L6718]               Balance[this] := 0;
[L6719]               allowed_StandardToken[this] := zeroRefRefintArr();
[L6720]               sum_allowed1[this] := 0;
[L6758]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6759]   COND FALSE  !(revert)
[L8804]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L8805]   COND FALSE  !(revert)
[L8808]   CALL        call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7353]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L7353]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7354]   COND FALSE  !(revert)
[L7357]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6694]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6694]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6695]   COND FALSE  !(revert)
[L6698]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6675]               assume msgsender_MSG != null;
[L6676]               Balance[this] := 0;
[L6698]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6699]   COND FALSE  !(revert)
[L7357]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7358]   COND FALSE  !(revert)
[L7361]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6565]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   COND FALSE  !(revert)
[L6569]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]               assume msgsender_MSG != null;
[L6544]               Balance[this] := 0;
[L6545]               balances_BasicToken[this] := zeroRefintArr();
[L6546]               sum_balances0[this] := 0;
[L6547]               totalSupply__BasicToken[this] := 0;
[L6569]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6570]   COND FALSE  !(revert)
[L7361]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7362]   COND FALSE  !(revert)
[L7365]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6746]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6746]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6747]   COND FALSE  !(revert)
[L6750]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6694]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6694]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6695]   COND FALSE  !(revert)
[L6698]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6675]               assume msgsender_MSG != null;
[L6676]               Balance[this] := 0;
[L6698]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6699]   COND FALSE  !(revert)
[L6750]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6751]   COND FALSE  !(revert)
[L6754]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6565]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   COND FALSE  !(revert)
[L6569]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]               assume msgsender_MSG != null;
[L6544]               Balance[this] := 0;
[L6545]               balances_BasicToken[this] := zeroRefintArr();
[L6546]               sum_balances0[this] := 0;
[L6547]               totalSupply__BasicToken[this] := 0;
[L6569]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6570]   COND FALSE  !(revert)
[L6754]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6755]   COND FALSE  !(revert)
[L6758]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6717]               assume msgsender_MSG != null;
[L6718]               Balance[this] := 0;
[L6719]               allowed_StandardToken[this] := zeroRefRefintArr();
[L6720]               sum_allowed1[this] := 0;
[L6758]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6759]   COND FALSE  !(revert)
[L7365]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7366]   COND FALSE  !(revert)
[L7369]   CALL        call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7316]               assume msgsender_MSG != null;
[L7317]               Balance[this] := 0;
[L7318]               chains_FreezableToken[this] := zerointintArr();
[L7319]               sum_chains2[this] := 0;
[L7320]               freezings_FreezableToken[this] := zerointintArr();
[L7321]               sum_freezings3[this] := 0;
[L7322]               freezingBalance_FreezableToken[this] := zeroRefintArr();
[L7323]               sum_freezingBalance4[this] := 0;
[L7369]   RET         call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7370]   COND FALSE  !(revert)
[L8808]   RET         call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L8809]   COND FALSE  !(revert)
[L8812]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6988]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6971]               assume msgsender_MSG != null;
[L6972]               Balance[this] := 0;
[L6973]               owner_Ownable[this] := null;
[L6975]               owner_Ownable[this] := msgsender_MSG;
[L6988]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6989]   COND FALSE  !(revert)
[L8812]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L8813]   COND FALSE  !(revert)
[L8816]   CALL        call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7172]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L7172]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7173]   COND FALSE  !(revert)
[L7176]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6694]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6694]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6695]   COND FALSE  !(revert)
[L6698]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6675]               assume msgsender_MSG != null;
[L6676]               Balance[this] := 0;
[L6698]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6699]   COND FALSE  !(revert)
[L7176]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7177]   COND FALSE  !(revert)
[L7180]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6565]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   COND FALSE  !(revert)
[L6569]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]               assume msgsender_MSG != null;
[L6544]               Balance[this] := 0;
[L6545]               balances_BasicToken[this] := zeroRefintArr();
[L6546]               sum_balances0[this] := 0;
[L6547]               totalSupply__BasicToken[this] := 0;
[L6569]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6570]   COND FALSE  !(revert)
[L7180]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7181]   COND FALSE  !(revert)
[L7184]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6746]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6746]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6747]   COND FALSE  !(revert)
[L6750]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6694]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6694]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6695]   COND FALSE  !(revert)
[L6698]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6675]               assume msgsender_MSG != null;
[L6676]               Balance[this] := 0;
[L6698]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6699]   COND FALSE  !(revert)
[L6750]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6751]   COND FALSE  !(revert)
[L6754]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6565]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   COND FALSE  !(revert)
[L6569]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]               assume msgsender_MSG != null;
[L6544]               Balance[this] := 0;
[L6545]               balances_BasicToken[this] := zeroRefintArr();
[L6546]               sum_balances0[this] := 0;
[L6547]               totalSupply__BasicToken[this] := 0;
[L6569]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6570]   COND FALSE  !(revert)
[L6754]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6755]   COND FALSE  !(revert)
[L6758]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6717]               assume msgsender_MSG != null;
[L6718]               Balance[this] := 0;
[L6719]               allowed_StandardToken[this] := zeroRefRefintArr();
[L6720]               sum_allowed1[this] := 0;
[L6758]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6759]   COND FALSE  !(revert)
[L7184]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7185]   COND FALSE  !(revert)
[L7188]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6988]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6971]               assume msgsender_MSG != null;
[L6972]               Balance[this] := 0;
[L6973]               owner_Ownable[this] := null;
[L6975]               owner_Ownable[this] := msgsender_MSG;
[L6988]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6989]   COND FALSE  !(revert)
[L7188]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7189]   COND FALSE  !(revert)
[L7192]   CALL        call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7136]               assume msgsender_MSG != null;
[L7137]               Balance[this] := 0;
[L7138]               mintingFinished_MintableToken[this] := false;
[L7192]   RET         call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7193]   COND FALSE  !(revert)
[L8816]   RET         call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L8817]   COND FALSE  !(revert)
[L8820]   CALL        call FreezableMintableToken_FreezableMintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8749]               assume msgsender_MSG != null;
[L8750]               Balance[this] := 0;
[L8820]   RET         call FreezableMintableToken_FreezableMintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8821]   COND FALSE  !(revert)
[L9237]   RET         call FreezableMintableToken_FreezableMintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9238]   COND FALSE  !(revert)
[L9241]   CALL        call BurnableToken_BurnableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L8536]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L8536]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L8537]   COND FALSE  !(revert)
[L8540]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6565]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   COND FALSE  !(revert)
[L6569]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]               assume msgsender_MSG != null;
[L6544]               Balance[this] := 0;
[L6545]               balances_BasicToken[this] := zeroRefintArr();
[L6546]               sum_balances0[this] := 0;
[L6547]               totalSupply__BasicToken[this] := 0;
[L6569]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6570]   COND FALSE  !(revert)
[L8540]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L8541]   COND FALSE  !(revert)
[L8544]   CALL        call BurnableToken_BurnableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8513]               assume msgsender_MSG != null;
[L8514]               Balance[this] := 0;
[L8544]   RET         call BurnableToken_BurnableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8545]   COND FALSE  !(revert)
[L9241]   RET         call BurnableToken_BurnableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9242]   COND FALSE  !(revert)
[L9245]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L8662]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6988]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6971]               assume msgsender_MSG != null;
[L6972]               Balance[this] := 0;
[L6973]               owner_Ownable[this] := null;
[L6975]               owner_Ownable[this] := msgsender_MSG;
[L6988]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6989]   COND FALSE  !(revert)
[L8662]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L8663]   COND FALSE  !(revert)
[L8666]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8642]               assume msgsender_MSG != null;
[L8643]               Balance[this] := 0;
[L8644]               paused_Pausable[this] := false;
[L8666]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8667]   COND FALSE  !(revert)
[L9245]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L9246]   COND FALSE  !(revert)
[L9249]   CALL        call MainToken_MainToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9133]               assume msgsender_MSG != null;
[L9134]               Balance[this] := 0;
[L9135]               initialized_MainToken[this] := false;
[L9137]   CALL        call init_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9404]   COND FALSE  !(!!initialized_MainToken[this])
[L9408]               initialized_MainToken[this] := true;
[L9409]   COND FALSE  !(PAUSED_Consts[this])
[L9419]   COND FALSE  !(!CONTINUE_MINTING_Consts[this])
[L9429]               assert { :EventEmitted "Initialized_MainToken" } true;
[L9137]   RET         call init_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9138]   COND FALSE  !(revert)
[L9141]   COND TRUE   DType[this] == MainToken
[L9142]   CALL        call transferOwnership~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, TARGET_USER_Consts[this]);
[L7055]   CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L12332]  COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L7055]   RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7056]   COND FALSE  !(revert)
[L7059]   COND FALSE  !(DType[this] == MainToken)
[L7064]   COND TRUE   DType[this] == FreezableMintableToken
[L7065]   CALL        call _transferOwnership~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, _newOwner_s558);
[L7103]               __var_11 := null;
[L7104]   COND FALSE  !(!(_newOwner_s581 != null))
[L7108]               assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L7109]               owner_Ownable[this] := _newOwner_s581;
[L7065]   RET         call _transferOwnership~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, _newOwner_s558);
[L7066]   COND FALSE  !(revert)
[L9142]   RET         call transferOwnership~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, TARGET_USER_Consts[this]);
[L9143]   COND FALSE  !(revert)
[L9249]   RET         call MainToken_MainToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9250]   COND FALSE  !(revert)
[L4222]   RET         call MainToken_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4223]               assume !revert && gas >= 0;
[L14384]  RET         call MainToken_MainToken(this, msgsender_MSG, msgvalue_MSG);
[L14385]              assume !revert && gas >= 0;
[L14388]  CALL        call CorralChoice_MainToken(this);
[L14045]              havoc msgsender_MSG;
[L14046]              havoc msgvalue_MSG;
[L14047]              havoc choice;
[L14048]              havoc __ret_0_totalSupply;
[L14049]              havoc _owner_s729;
[L14050]              havoc balance_s729;
[L14051]              havoc _to_s1572;
[L14052]              havoc _value_s1572;
[L14053]              havoc _success_s1572;
[L14054]              havoc _owner_s395;
[L14055]              havoc _spender_s395;
[L14056]              havoc __ret_0_allowance;
[L14057]              havoc _from_s1551;
[L14058]              havoc _to_s1551;
[L14059]              havoc _value_s1551;
[L14060]              havoc _success_s1551;
[L14061]              havoc _spender_s379;
[L14062]              havoc _value_s379;
[L14063]              havoc __ret_0_approve;
[L14064]              havoc _spender_s437;
[L14065]              havoc _addedValue_s437;
[L14066]              havoc __ret_0_increaseApproval;
[L14067]              havoc _spender_s497;
[L14068]              havoc _subtractedValue_s497;
[L14069]              havoc __ret_0_decreaseApproval;
[L14070]              havoc __ret_0_owner;
[L14071]              havoc _newOwner_s558;
[L14072]              havoc __ret_0_mintingFinished;
[L14073]              havoc _to_s664;
[L14074]              havoc _amount_s664;
[L14075]              havoc __ret_0_mint;
[L14076]              havoc __ret_0_finishMinting;
[L14077]              havoc _owner_s742;
[L14078]              havoc balance_s742;
[L14079]              havoc _owner_s754;
[L14080]              havoc balance_s754;
[L14081]              havoc _addr_s792;
[L14082]              havoc count_s792;
[L14083]              havoc _addr_s849;
[L14084]              havoc _index_s849;
[L14085]              havoc _release_s849;
[L14086]              havoc _balance_s849;
[L14087]              havoc _to_s938;
[L14088]              havoc _amount_s938;
[L14089]              havoc _until_s938;
[L14090]              havoc tokens_s1107;
[L14091]              havoc _value_s1261;
[L14092]              havoc __ret_0_paused;
[L14093]              havoc _to_s1449;
[L14094]              havoc _amount_s1449;
[L14095]              havoc _until_s1449;
[L14096]              havoc __ret_0_mintAndFreeze;
[L14097]              havoc __ret_0_TOKEN_DECIMALS;
[L14098]              havoc __ret_0_TOKEN_DECIMALS_UINT8;
[L14099]              havoc __ret_0_TOKEN_DECIMAL_MULTIPLIER;
[L14100]              havoc __ret_0_TOKEN_NAME;
[L14101]              havoc __ret_0_TOKEN_SYMBOL;
[L14102]              havoc __ret_0_PAUSED;
[L14103]              havoc __ret_0_TARGET_USER;
[L14104]              havoc __ret_0_CONTINUE_MINTING;
[L14105]              havoc __ret_0_initialized;
[L14106]              havoc _name_s1511;
[L14107]              havoc _symbol_s1519;
[L14108]              havoc _decimals_s1527;
[L14109]              havoc tmpNow;
[L14110]              havoc gas;
[L14111]              assume gas > 4000000 && gas <= 8000000;
[L14112]              tmpNow := now;
[L14113]              havoc now;
[L14114]              assume now > tmpNow;
[L14115]              assume msgsender_MSG != null;
[L14116]              assume DType[msgsender_MSG] != ERC20Basic;
[L14117]              assume DType[msgsender_MSG] != SafeMath;
[L14118]              assume DType[msgsender_MSG] != BasicToken;
[L14119]              assume DType[msgsender_MSG] != ERC20;
[L14120]              assume DType[msgsender_MSG] != StandardToken;
[L14121]              assume DType[msgsender_MSG] != Ownable;
[L14122]              assume DType[msgsender_MSG] != MintableToken;
[L14123]              assume DType[msgsender_MSG] != FreezableToken;
[L14124]              assume DType[msgsender_MSG] != BurnableToken;
[L14125]              assume DType[msgsender_MSG] != Pausable;
[L14126]              assume DType[msgsender_MSG] != FreezableMintableToken;
[L14127]              assume DType[msgsender_MSG] != Consts;
[L14128]              assume DType[msgsender_MSG] != MainToken;
[L14129]              Alloc[msgsender_MSG] := true;
[L14130]  COND FALSE  !(choice == 38)
[L14136]  COND FALSE  !(choice == 37)
[L14142]  COND TRUE   choice == 36
[L14143]              gas := gas - 21000;
[L14144]  COND TRUE   gas >= 0
[L14145]              assume _value_s1572 >= 0 && _value_s1572 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L14146]              assume msgvalue_MSG == 0;
[L14147]  CALL        call _success_s1572 := transfer~address~uint256_MainToken(this, msgsender_MSG, msgvalue_MSG, _to_s1572, _value_s1572);
[L4599]               havoc __exception;
[L4600]               revert := false;
[L4601]   COND FALSE  !(__exception)
[L4638]   CALL        call _success_s1572 := transfer~address~uint256_MainToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s1572, _value_s1572);
[L9355]   COND FALSE  !(!!paused_Pausable[this])
[L9359]   COND TRUE   DType[this] == MainToken
[L9360]   CALL        call __var_55 := transfer~address~uint256_BasicToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s1572, _value_s1572);
[L6624]               __var_1 := null;
[L6625]   COND FALSE  !(!(_to_s202 != null))
[L6629]   COND FALSE  !(!(_value_s202 <= balances_BasicToken[this][msgsender_MSG]))
[L6633]   CALL        call __var_2 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][msgsender_MSG], _value_s202);
[L6509]               assert b_s98 <= a_s98;
[L6510]               __ret_0_ := (a_s98 - b_s98) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6633]   RET         call __var_2 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][msgsender_MSG], _value_s202);
[L6634]   COND FALSE  !(revert)
[L6637]               sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][msgsender_MSG];
[L6638]               balances_BasicToken[this][msgsender_MSG] := __var_2;
[L6639]               sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][msgsender_MSG];
[L6640]   CALL        call __var_3 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_to_s202], _value_s202);
[L6523]               c_s122 := (a_s122 + b_s122) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6524]               assert c_s122 >= a_s122;
[L6525]               c_s122 := c_s122;
[L6640]   RET         call __var_3 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_to_s202], _value_s202);
[L6641]   COND FALSE  !(revert)
[L6644]               sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][_to_s202];
[L6645]               balances_BasicToken[this][_to_s202] := __var_3;
[L6646]               sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][_to_s202];
[L6647]               assert { :EventEmitted "Transfer_BasicToken" } true;
[L6648]               __ret_0_ := true;
[L9360]   RET         call __var_55 := transfer~address~uint256_BasicToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s1572, _value_s1572);
[L9361]   COND FALSE  !(revert)
[L9367]               _success_s1572 := __var_55;
[L4638]   RET         call _success_s1572 := transfer~address~uint256_MainToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s1572, _value_s1572);
[L4639]               assume !revert && gas >= 0;
[L14147]  RET         call _success_s1572 := transfer~address~uint256_MainToken(this, msgsender_MSG, msgvalue_MSG, _to_s1572, _value_s1572);
[L14388]  RET         call CorralChoice_MainToken(this);
[L14388]  CALL        call CorralChoice_MainToken(this);
[L14045]              havoc msgsender_MSG;
[L14046]              havoc msgvalue_MSG;
[L14047]              havoc choice;
[L14048]              havoc __ret_0_totalSupply;
[L14049]              havoc _owner_s729;
[L14050]              havoc balance_s729;
[L14051]              havoc _to_s1572;
[L14052]              havoc _value_s1572;
[L14053]              havoc _success_s1572;
[L14054]              havoc _owner_s395;
[L14055]              havoc _spender_s395;
[L14056]              havoc __ret_0_allowance;
[L14057]              havoc _from_s1551;
[L14058]              havoc _to_s1551;
[L14059]              havoc _value_s1551;
[L14060]              havoc _success_s1551;
[L14061]              havoc _spender_s379;
[L14062]              havoc _value_s379;
[L14063]              havoc __ret_0_approve;
[L14064]              havoc _spender_s437;
[L14065]              havoc _addedValue_s437;
[L14066]              havoc __ret_0_increaseApproval;
[L14067]              havoc _spender_s497;
[L14068]              havoc _subtractedValue_s497;
[L14069]              havoc __ret_0_decreaseApproval;
[L14070]              havoc __ret_0_owner;
[L14071]              havoc _newOwner_s558;
[L14072]              havoc __ret_0_mintingFinished;
[L14073]              havoc _to_s664;
[L14074]              havoc _amount_s664;
[L14075]              havoc __ret_0_mint;
[L14076]              havoc __ret_0_finishMinting;
[L14077]              havoc _owner_s742;
[L14078]              havoc balance_s742;
[L14079]              havoc _owner_s754;
[L14080]              havoc balance_s754;
[L14081]              havoc _addr_s792;
[L14082]              havoc count_s792;
[L14083]              havoc _addr_s849;
[L14084]              havoc _index_s849;
[L14085]              havoc _release_s849;
[L14086]              havoc _balance_s849;
[L14087]              havoc _to_s938;
[L14088]              havoc _amount_s938;
[L14089]              havoc _until_s938;
[L14090]              havoc tokens_s1107;
[L14091]              havoc _value_s1261;
[L14092]              havoc __ret_0_paused;
[L14093]              havoc _to_s1449;
[L14094]              havoc _amount_s1449;
[L14095]              havoc _until_s1449;
[L14096]              havoc __ret_0_mintAndFreeze;
[L14097]              havoc __ret_0_TOKEN_DECIMALS;
[L14098]              havoc __ret_0_TOKEN_DECIMALS_UINT8;
[L14099]              havoc __ret_0_TOKEN_DECIMAL_MULTIPLIER;
[L14100]              havoc __ret_0_TOKEN_NAME;
[L14101]              havoc __ret_0_TOKEN_SYMBOL;
[L14102]              havoc __ret_0_PAUSED;
[L14103]              havoc __ret_0_TARGET_USER;
[L14104]              havoc __ret_0_CONTINUE_MINTING;
[L14105]              havoc __ret_0_initialized;
[L14106]              havoc _name_s1511;
[L14107]              havoc _symbol_s1519;
[L14108]              havoc _decimals_s1527;
[L14109]              havoc tmpNow;
[L14110]              havoc gas;
[L14111]              assume gas > 4000000 && gas <= 8000000;
[L14112]              tmpNow := now;
[L14113]              havoc now;
[L14114]              assume now > tmpNow;
[L14115]              assume msgsender_MSG != null;
[L14116]              assume DType[msgsender_MSG] != ERC20Basic;
[L14117]              assume DType[msgsender_MSG] != SafeMath;
[L14118]              assume DType[msgsender_MSG] != BasicToken;
[L14119]              assume DType[msgsender_MSG] != ERC20;
[L14120]              assume DType[msgsender_MSG] != StandardToken;
[L14121]              assume DType[msgsender_MSG] != Ownable;
[L14122]              assume DType[msgsender_MSG] != MintableToken;
[L14123]              assume DType[msgsender_MSG] != FreezableToken;
[L14124]              assume DType[msgsender_MSG] != BurnableToken;
[L14125]              assume DType[msgsender_MSG] != Pausable;
[L14126]              assume DType[msgsender_MSG] != FreezableMintableToken;
[L14127]              assume DType[msgsender_MSG] != Consts;
[L14128]              assume DType[msgsender_MSG] != MainToken;
[L14129]              Alloc[msgsender_MSG] := true;
[L14130]  COND FALSE  !(choice == 38)
[L14136]  COND TRUE   choice == 37
[L14137]              gas := gas - 21000;
[L14138]  COND TRUE   gas >= 0
[L14139]              assume msgvalue_MSG == 0;
[L14140]  CALL        call balance_s729 := balanceOf~address_FreezableToken(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume balances_BasicToken[this][_owner_s729] >= 0 && balances_BasicToken[this][_owner_s729] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_balanceOf_FreezableToken0 := true;
[L2]                  call_balanceOf_FreezableToken0 := false;
[L2]                  revert := revert_hold;
[L1999]               havoc __exception;
[L2000]               revert := false;
[L2001]   COND FALSE  !(__exception)
[L2038]   CALL        call balance_s729 := balanceOf~address_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L7405]   COND TRUE   DType[this] == MainToken
[L7406]   CALL        call __var_14 := balanceOf~address_BasicToken__success(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L6660]               __ret_0_ := balances_BasicToken[this][_owner_s214];
[L7406]   RET         call __var_14 := balanceOf~address_BasicToken__success(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L7407]   COND FALSE  !(revert)
[L7423]               balance_s729 := (__var_14 + freezingBalance_FreezableToken[this][_owner_s729]) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2038]   RET         call balance_s729 := balanceOf~address_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L2039]               assume !revert && gas >= 0;
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume !((((((((((balance_s729 == balances_BasicToken[this][_owner_s729] && totalSupply__BasicToken[this] == old(totalSupply__BasicToken[this])) && balances_BasicToken[this] == old(balances_BasicToken[this])) && allowed_StandardToken[this] == old(allowed_StandardToken[this])) && initialized_MainToken[this] == old(initialized_MainToken[this])) && paused_Pausable[this] == old(paused_Pausable[this])) && mintingFinished_MintableToken[this] == old(mintingFinished_MintableToken[this])) && owner_Ownable[this] == old(owner_Ownable[this])) && chains_FreezableToken[this] == old(chains_FreezableToken[this])) && freezings_FreezableToken[this] == old(freezings_FreezableToken[this])) && freezingBalance_FreezableToken[this] == old(freezingBalance_FreezableToken[this]));
[L2]                  revert := revert_hold;
[L14140]  RET         call balance_s729 := balanceOf~address_FreezableToken(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L14388]  RET         call CorralChoice_MainToken(this);

Loop:
[L14388]  CALL        call CorralChoice_MainToken(this);
[L14045]              havoc msgsender_MSG;
[L14046]              havoc msgvalue_MSG;
[L14047]              havoc choice;
[L14048]              havoc __ret_0_totalSupply;
[L14049]              havoc _owner_s729;
[L14050]              havoc balance_s729;
[L14051]              havoc _to_s1572;
[L14052]              havoc _value_s1572;
[L14053]              havoc _success_s1572;
[L14054]              havoc _owner_s395;
[L14055]              havoc _spender_s395;
[L14056]              havoc __ret_0_allowance;
[L14057]              havoc _from_s1551;
[L14058]              havoc _to_s1551;
[L14059]              havoc _value_s1551;
[L14060]              havoc _success_s1551;
[L14061]              havoc _spender_s379;
[L14062]              havoc _value_s379;
[L14063]              havoc __ret_0_approve;
[L14064]              havoc _spender_s437;
[L14065]              havoc _addedValue_s437;
[L14066]              havoc __ret_0_increaseApproval;
[L14067]              havoc _spender_s497;
[L14068]              havoc _subtractedValue_s497;
[L14069]              havoc __ret_0_decreaseApproval;
[L14070]              havoc __ret_0_owner;
[L14071]              havoc _newOwner_s558;
[L14072]              havoc __ret_0_mintingFinished;
[L14073]              havoc _to_s664;
[L14074]              havoc _amount_s664;
[L14075]              havoc __ret_0_mint;
[L14076]              havoc __ret_0_finishMinting;
[L14077]              havoc _owner_s742;
[L14078]              havoc balance_s742;
[L14079]              havoc _owner_s754;
[L14080]              havoc balance_s754;
[L14081]              havoc _addr_s792;
[L14082]              havoc count_s792;
[L14083]              havoc _addr_s849;
[L14084]              havoc _index_s849;
[L14085]              havoc _release_s849;
[L14086]              havoc _balance_s849;
[L14087]              havoc _to_s938;
[L14088]              havoc _amount_s938;
[L14089]              havoc _until_s938;
[L14090]              havoc tokens_s1107;
[L14091]              havoc _value_s1261;
[L14092]              havoc __ret_0_paused;
[L14093]              havoc _to_s1449;
[L14094]              havoc _amount_s1449;
[L14095]              havoc _until_s1449;
[L14096]              havoc __ret_0_mintAndFreeze;
[L14097]              havoc __ret_0_TOKEN_DECIMALS;
[L14098]              havoc __ret_0_TOKEN_DECIMALS_UINT8;
[L14099]              havoc __ret_0_TOKEN_DECIMAL_MULTIPLIER;
[L14100]              havoc __ret_0_TOKEN_NAME;
[L14101]              havoc __ret_0_TOKEN_SYMBOL;
[L14102]              havoc __ret_0_PAUSED;
[L14103]              havoc __ret_0_TARGET_USER;
[L14104]              havoc __ret_0_CONTINUE_MINTING;
[L14105]              havoc __ret_0_initialized;
[L14106]              havoc _name_s1511;
[L14107]              havoc _symbol_s1519;
[L14108]              havoc _decimals_s1527;
[L14109]              havoc tmpNow;
[L14110]              havoc gas;
[L14111]              assume gas > 4000000 && gas <= 8000000;
[L14112]              tmpNow := now;
[L14113]              havoc now;
[L14114]              assume now > tmpNow;
[L14115]              assume msgsender_MSG != null;
[L14116]              assume DType[msgsender_MSG] != ERC20Basic;
[L14117]              assume DType[msgsender_MSG] != SafeMath;
[L14118]              assume DType[msgsender_MSG] != BasicToken;
[L14119]              assume DType[msgsender_MSG] != ERC20;
[L14120]              assume DType[msgsender_MSG] != StandardToken;
[L14121]              assume DType[msgsender_MSG] != Ownable;
[L14122]              assume DType[msgsender_MSG] != MintableToken;
[L14123]              assume DType[msgsender_MSG] != FreezableToken;
[L14124]              assume DType[msgsender_MSG] != BurnableToken;
[L14125]              assume DType[msgsender_MSG] != Pausable;
[L14126]              assume DType[msgsender_MSG] != FreezableMintableToken;
[L14127]              assume DType[msgsender_MSG] != Consts;
[L14128]              assume DType[msgsender_MSG] != MainToken;
[L14129]              Alloc[msgsender_MSG] := true;
[L14130]  COND FALSE  !(choice == 38)
[L14136]  COND TRUE   choice == 37
[L14137]              gas := gas - 21000;
[L14138]  COND TRUE   gas >= 0
[L14139]              assume msgvalue_MSG == 0;
[L14140]  CALL        call balance_s729 := balanceOf~address_FreezableToken(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume balances_BasicToken[this][_owner_s729] >= 0 && balances_BasicToken[this][_owner_s729] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_balanceOf_FreezableToken0 := true;
[L2]                  call_balanceOf_FreezableToken0 := false;
[L2]                  revert := revert_hold;
[L1999]               havoc __exception;
[L2000]               revert := false;
[L2001]   COND FALSE  !(__exception)
[L2038]   CALL        call balance_s729 := balanceOf~address_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L7405]   COND TRUE   DType[this] == MainToken
[L7406]   CALL        call __var_14 := balanceOf~address_BasicToken__success(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L6660]               __ret_0_ := balances_BasicToken[this][_owner_s214];
[L7406]   RET         call __var_14 := balanceOf~address_BasicToken__success(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L7407]   COND FALSE  !(revert)
[L7423]               balance_s729 := (__var_14 + freezingBalance_FreezableToken[this][_owner_s729]) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2038]   RET         call balance_s729 := balanceOf~address_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L2039]               assume !revert && gas >= 0;
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume !((((((((((balance_s729 == balances_BasicToken[this][_owner_s729] && totalSupply__BasicToken[this] == old(totalSupply__BasicToken[this])) && balances_BasicToken[this] == old(balances_BasicToken[this])) && allowed_StandardToken[this] == old(allowed_StandardToken[this])) && initialized_MainToken[this] == old(initialized_MainToken[this])) && paused_Pausable[this] == old(paused_Pausable[this])) && mintingFinished_MintableToken[this] == old(mintingFinished_MintableToken[this])) && owner_Ownable[this] == old(owner_Ownable[this])) && chains_FreezableToken[this] == old(chains_FreezableToken[this])) && freezings_FreezableToken[this] == old(freezings_FreezableToken[this])) && freezingBalance_FreezableToken[this] == old(freezingBalance_FreezableToken[this]));
[L2]                  revert := revert_hold;
[L14140]  RET         call balance_s729 := balanceOf~address_FreezableToken(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L14388]  RET         call CorralChoice_MainToken(this);

[2020-11-24 21:25:58,298 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-24 21:25:58,298 INFO  L82        PathProgramCache]: Analyzing trace with hash 770171129, now seen corresponding path program 1 times
[2020-11-24 21:25:58,299 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-24 21:25:58,331 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-24 21:25:58,974 INFO  L134       CoverageAnalysis]: Checked inductivity of 9912 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 9912 trivial. 0 not checked.
[2020-11-24 21:25:58,974 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-24 21:25:58,974 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [7] imperfect sequences [] total 7
[2020-11-24 21:25:58,975 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-24 21:25:58,975 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 7 interpolants.
[2020-11-24 21:25:58,975 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=11, Invalid=31, Unknown=0, NotChecked=0, Total=42
[2020-11-24 21:25:58,975 INFO  L87              Difference]: Start difference. First operand 5375 states and 6048 transitions. cyclomatic complexity: 688 Second operand 7 states.
[2020-11-24 21:25:59,102 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-24 21:25:59,102 INFO  L93              Difference]: Finished difference Result 5393 states and 6065 transitions.
[2020-11-24 21:25:59,102 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 7 states. 
[2020-11-24 21:25:59,102 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 5393 states and 6065 transitions.
[2020-11-24 21:25:59,111 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-24 21:25:59,121 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 5393 states to 5375 states and 6046 transitions.
[2020-11-24 21:25:59,121 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1046
[2020-11-24 21:25:59,122 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1046
[2020-11-24 21:25:59,122 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 5375 states and 6046 transitions.
[2020-11-24 21:25:59,124 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-24 21:25:59,124 INFO  L728         BuchiCegarLoop]: Abstraction has 5375 states and 6046 transitions.
[2020-11-24 21:25:59,128 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 5375 states and 6046 transitions.
[2020-11-24 21:25:59,152 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 5375 to 5371.
[2020-11-24 21:25:59,152 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 5371 states.
[2020-11-24 21:25:59,157 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 5371 states to 5371 states and 6042 transitions.
[2020-11-24 21:25:59,157 INFO  L751         BuchiCegarLoop]: Abstraction has 5371 states and 6042 transitions.
[2020-11-24 21:25:59,157 INFO  L631         BuchiCegarLoop]: Abstraction has 5371 states and 6042 transitions.
[2020-11-24 21:25:59,157 INFO  L445         BuchiCegarLoop]: ======== Iteration 7============
[2020-11-24 21:25:59,157 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 5371 states and 6042 transitions.
[2020-11-24 21:25:59,162 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-24 21:25:59,162 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-24 21:25:59,162 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-24 21:25:59,164 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [38, 38, 38, 38, 38, 38, 38, 38, 38, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-24 21:25:59,164 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  success_balanceOf_FreezableToken0 := false;
[L2]                  call_balanceOf_FreezableToken0 := false;
[L2]      CALL        call main();
[L14378]              assume null == 0;
[L14379]  CALL        call this := FreshRefGenerator__success();
[L6396]               havoc newRef;
[L6397]               assume Alloc[newRef] == false;
[L6398]               Alloc[newRef] := true;
[L6399]               assume newRef != null;
[L14379]  RET         call this := FreshRefGenerator__success();
[L14380]              assume now >= 0;
[L14381]              assume DType[this] == MainToken;
[L14382]              assume msgvalue_MSG == 0;
[L14383]              gas := gas - 53000;
[L14384]  CALL        call MainToken_MainToken(this, msgsender_MSG, msgvalue_MSG);
[L4183]               havoc __exception;
[L4184]               revert := false;
[L4185]   COND FALSE  !(__exception)
[L4222]   CALL        call MainToken_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9205]   CALL        call Consts_Consts__success(this, msgsender_MSG, msgvalue_MSG);
[L9007]   CALL        call Consts_Consts_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8983]               assume msgsender_MSG != null;
[L8984]               Balance[this] := 0;
[L8985]               TOKEN_DECIMALS_Consts[this] := 18;
[L8986]               TOKEN_DECIMALS_UINT8_Consts[this] := 18;
[L8987]               TOKEN_DECIMAL_MULTIPLIER_Consts[this] := nonlinearPow(10, TOKEN_DECIMALS_Consts[this]) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8988]               TOKEN_NAME_Consts[this] := -1051245219;
[L8989]               TOKEN_SYMBOL_Consts[this] := -1804535220;
[L8990]               PAUSED_Consts[this] := false;
[L8991]               __var_52 := ConstantToRef(-210822415442009814958929812751043848690848471787);
[L8992]               TARGET_USER_Consts[this] := ConstantToRef(-210822415442009814958929812751043848690848471787);
[L8993]               CONTINUE_MINTING_Consts[this] := true;
[L9007]   RET         call Consts_Consts_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9008]   COND FALSE  !(revert)
[L9205]   RET         call Consts_Consts__success(this, msgsender_MSG, msgvalue_MSG);
[L9206]   COND FALSE  !(revert)
[L9209]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L9209]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L9210]   COND FALSE  !(revert)
[L9213]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6694]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6694]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6695]   COND FALSE  !(revert)
[L6698]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6675]               assume msgsender_MSG != null;
[L6676]               Balance[this] := 0;
[L6698]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6699]   COND FALSE  !(revert)
[L9213]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L9214]   COND FALSE  !(revert)
[L9217]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6565]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   COND FALSE  !(revert)
[L6569]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]               assume msgsender_MSG != null;
[L6544]               Balance[this] := 0;
[L6545]               balances_BasicToken[this] := zeroRefintArr();
[L6546]               sum_balances0[this] := 0;
[L6547]               totalSupply__BasicToken[this] := 0;
[L6569]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6570]   COND FALSE  !(revert)
[L9217]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9218]   COND FALSE  !(revert)
[L9221]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6746]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6746]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6747]   COND FALSE  !(revert)
[L6750]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6694]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6694]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6695]   COND FALSE  !(revert)
[L6698]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6675]               assume msgsender_MSG != null;
[L6676]               Balance[this] := 0;
[L6698]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6699]   COND FALSE  !(revert)
[L6750]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6751]   COND FALSE  !(revert)
[L6754]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6565]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   COND FALSE  !(revert)
[L6569]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]               assume msgsender_MSG != null;
[L6544]               Balance[this] := 0;
[L6545]               balances_BasicToken[this] := zeroRefintArr();
[L6546]               sum_balances0[this] := 0;
[L6547]               totalSupply__BasicToken[this] := 0;
[L6569]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6570]   COND FALSE  !(revert)
[L6754]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6755]   COND FALSE  !(revert)
[L6758]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6717]               assume msgsender_MSG != null;
[L6718]               Balance[this] := 0;
[L6719]               allowed_StandardToken[this] := zeroRefRefintArr();
[L6720]               sum_allowed1[this] := 0;
[L6758]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6759]   COND FALSE  !(revert)
[L9221]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9222]   COND FALSE  !(revert)
[L9225]   CALL        call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7353]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L7353]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7354]   COND FALSE  !(revert)
[L7357]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6694]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6694]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6695]   COND FALSE  !(revert)
[L6698]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6675]               assume msgsender_MSG != null;
[L6676]               Balance[this] := 0;
[L6698]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6699]   COND FALSE  !(revert)
[L7357]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7358]   COND FALSE  !(revert)
[L7361]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6565]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   COND FALSE  !(revert)
[L6569]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]               assume msgsender_MSG != null;
[L6544]               Balance[this] := 0;
[L6545]               balances_BasicToken[this] := zeroRefintArr();
[L6546]               sum_balances0[this] := 0;
[L6547]               totalSupply__BasicToken[this] := 0;
[L6569]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6570]   COND FALSE  !(revert)
[L7361]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7362]   COND FALSE  !(revert)
[L7365]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6746]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6746]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6747]   COND FALSE  !(revert)
[L6750]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6694]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6694]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6695]   COND FALSE  !(revert)
[L6698]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6675]               assume msgsender_MSG != null;
[L6676]               Balance[this] := 0;
[L6698]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6699]   COND FALSE  !(revert)
[L6750]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6751]   COND FALSE  !(revert)
[L6754]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6565]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   COND FALSE  !(revert)
[L6569]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]               assume msgsender_MSG != null;
[L6544]               Balance[this] := 0;
[L6545]               balances_BasicToken[this] := zeroRefintArr();
[L6546]               sum_balances0[this] := 0;
[L6547]               totalSupply__BasicToken[this] := 0;
[L6569]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6570]   COND FALSE  !(revert)
[L6754]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6755]   COND FALSE  !(revert)
[L6758]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6717]               assume msgsender_MSG != null;
[L6718]               Balance[this] := 0;
[L6719]               allowed_StandardToken[this] := zeroRefRefintArr();
[L6720]               sum_allowed1[this] := 0;
[L6758]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6759]   COND FALSE  !(revert)
[L7365]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7366]   COND FALSE  !(revert)
[L7369]   CALL        call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7316]               assume msgsender_MSG != null;
[L7317]               Balance[this] := 0;
[L7318]               chains_FreezableToken[this] := zerointintArr();
[L7319]               sum_chains2[this] := 0;
[L7320]               freezings_FreezableToken[this] := zerointintArr();
[L7321]               sum_freezings3[this] := 0;
[L7322]               freezingBalance_FreezableToken[this] := zeroRefintArr();
[L7323]               sum_freezingBalance4[this] := 0;
[L7369]   RET         call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7370]   COND FALSE  !(revert)
[L9225]   RET         call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9226]   COND FALSE  !(revert)
[L9229]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6988]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6971]               assume msgsender_MSG != null;
[L6972]               Balance[this] := 0;
[L6973]               owner_Ownable[this] := null;
[L6975]               owner_Ownable[this] := msgsender_MSG;
[L6988]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6989]   COND FALSE  !(revert)
[L9229]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L9230]   COND FALSE  !(revert)
[L9233]   CALL        call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7172]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L7172]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7173]   COND FALSE  !(revert)
[L7176]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6694]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6694]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6695]   COND FALSE  !(revert)
[L6698]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6675]               assume msgsender_MSG != null;
[L6676]               Balance[this] := 0;
[L6698]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6699]   COND FALSE  !(revert)
[L7176]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7177]   COND FALSE  !(revert)
[L7180]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6565]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   COND FALSE  !(revert)
[L6569]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]               assume msgsender_MSG != null;
[L6544]               Balance[this] := 0;
[L6545]               balances_BasicToken[this] := zeroRefintArr();
[L6546]               sum_balances0[this] := 0;
[L6547]               totalSupply__BasicToken[this] := 0;
[L6569]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6570]   COND FALSE  !(revert)
[L7180]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7181]   COND FALSE  !(revert)
[L7184]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6746]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6746]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6747]   COND FALSE  !(revert)
[L6750]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6694]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6694]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6695]   COND FALSE  !(revert)
[L6698]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6675]               assume msgsender_MSG != null;
[L6676]               Balance[this] := 0;
[L6698]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6699]   COND FALSE  !(revert)
[L6750]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6751]   COND FALSE  !(revert)
[L6754]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6565]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   COND FALSE  !(revert)
[L6569]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]               assume msgsender_MSG != null;
[L6544]               Balance[this] := 0;
[L6545]               balances_BasicToken[this] := zeroRefintArr();
[L6546]               sum_balances0[this] := 0;
[L6547]               totalSupply__BasicToken[this] := 0;
[L6569]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6570]   COND FALSE  !(revert)
[L6754]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6755]   COND FALSE  !(revert)
[L6758]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6717]               assume msgsender_MSG != null;
[L6718]               Balance[this] := 0;
[L6719]               allowed_StandardToken[this] := zeroRefRefintArr();
[L6720]               sum_allowed1[this] := 0;
[L6758]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6759]   COND FALSE  !(revert)
[L7184]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7185]   COND FALSE  !(revert)
[L7188]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6988]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6971]               assume msgsender_MSG != null;
[L6972]               Balance[this] := 0;
[L6973]               owner_Ownable[this] := null;
[L6975]               owner_Ownable[this] := msgsender_MSG;
[L6988]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6989]   COND FALSE  !(revert)
[L7188]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7189]   COND FALSE  !(revert)
[L7192]   CALL        call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7136]               assume msgsender_MSG != null;
[L7137]               Balance[this] := 0;
[L7138]               mintingFinished_MintableToken[this] := false;
[L7192]   RET         call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7193]   COND FALSE  !(revert)
[L9233]   RET         call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9234]   COND FALSE  !(revert)
[L9237]   CALL        call FreezableMintableToken_FreezableMintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L8792]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L8792]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L8793]   COND FALSE  !(revert)
[L8796]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6694]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6694]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6695]   COND FALSE  !(revert)
[L6698]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6675]               assume msgsender_MSG != null;
[L6676]               Balance[this] := 0;
[L6698]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6699]   COND FALSE  !(revert)
[L8796]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L8797]   COND FALSE  !(revert)
[L8800]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6565]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   COND FALSE  !(revert)
[L6569]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]               assume msgsender_MSG != null;
[L6544]               Balance[this] := 0;
[L6545]               balances_BasicToken[this] := zeroRefintArr();
[L6546]               sum_balances0[this] := 0;
[L6547]               totalSupply__BasicToken[this] := 0;
[L6569]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6570]   COND FALSE  !(revert)
[L8800]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L8801]   COND FALSE  !(revert)
[L8804]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6746]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6746]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6747]   COND FALSE  !(revert)
[L6750]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6694]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6694]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6695]   COND FALSE  !(revert)
[L6698]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6675]               assume msgsender_MSG != null;
[L6676]               Balance[this] := 0;
[L6698]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6699]   COND FALSE  !(revert)
[L6750]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6751]   COND FALSE  !(revert)
[L6754]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6565]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   COND FALSE  !(revert)
[L6569]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]               assume msgsender_MSG != null;
[L6544]               Balance[this] := 0;
[L6545]               balances_BasicToken[this] := zeroRefintArr();
[L6546]               sum_balances0[this] := 0;
[L6547]               totalSupply__BasicToken[this] := 0;
[L6569]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6570]   COND FALSE  !(revert)
[L6754]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6755]   COND FALSE  !(revert)
[L6758]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6717]               assume msgsender_MSG != null;
[L6718]               Balance[this] := 0;
[L6719]               allowed_StandardToken[this] := zeroRefRefintArr();
[L6720]               sum_allowed1[this] := 0;
[L6758]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6759]   COND FALSE  !(revert)
[L8804]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L8805]   COND FALSE  !(revert)
[L8808]   CALL        call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7353]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L7353]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7354]   COND FALSE  !(revert)
[L7357]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6694]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6694]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6695]   COND FALSE  !(revert)
[L6698]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6675]               assume msgsender_MSG != null;
[L6676]               Balance[this] := 0;
[L6698]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6699]   COND FALSE  !(revert)
[L7357]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7358]   COND FALSE  !(revert)
[L7361]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6565]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   COND FALSE  !(revert)
[L6569]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]               assume msgsender_MSG != null;
[L6544]               Balance[this] := 0;
[L6545]               balances_BasicToken[this] := zeroRefintArr();
[L6546]               sum_balances0[this] := 0;
[L6547]               totalSupply__BasicToken[this] := 0;
[L6569]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6570]   COND FALSE  !(revert)
[L7361]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7362]   COND FALSE  !(revert)
[L7365]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6746]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6746]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6747]   COND FALSE  !(revert)
[L6750]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6694]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6694]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6695]   COND FALSE  !(revert)
[L6698]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6675]               assume msgsender_MSG != null;
[L6676]               Balance[this] := 0;
[L6698]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6699]   COND FALSE  !(revert)
[L6750]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6751]   COND FALSE  !(revert)
[L6754]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6565]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   COND FALSE  !(revert)
[L6569]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]               assume msgsender_MSG != null;
[L6544]               Balance[this] := 0;
[L6545]               balances_BasicToken[this] := zeroRefintArr();
[L6546]               sum_balances0[this] := 0;
[L6547]               totalSupply__BasicToken[this] := 0;
[L6569]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6570]   COND FALSE  !(revert)
[L6754]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6755]   COND FALSE  !(revert)
[L6758]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6717]               assume msgsender_MSG != null;
[L6718]               Balance[this] := 0;
[L6719]               allowed_StandardToken[this] := zeroRefRefintArr();
[L6720]               sum_allowed1[this] := 0;
[L6758]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6759]   COND FALSE  !(revert)
[L7365]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7366]   COND FALSE  !(revert)
[L7369]   CALL        call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7316]               assume msgsender_MSG != null;
[L7317]               Balance[this] := 0;
[L7318]               chains_FreezableToken[this] := zerointintArr();
[L7319]               sum_chains2[this] := 0;
[L7320]               freezings_FreezableToken[this] := zerointintArr();
[L7321]               sum_freezings3[this] := 0;
[L7322]               freezingBalance_FreezableToken[this] := zeroRefintArr();
[L7323]               sum_freezingBalance4[this] := 0;
[L7369]   RET         call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7370]   COND FALSE  !(revert)
[L8808]   RET         call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L8809]   COND FALSE  !(revert)
[L8812]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6988]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6971]               assume msgsender_MSG != null;
[L6972]               Balance[this] := 0;
[L6973]               owner_Ownable[this] := null;
[L6975]               owner_Ownable[this] := msgsender_MSG;
[L6988]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6989]   COND FALSE  !(revert)
[L8812]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L8813]   COND FALSE  !(revert)
[L8816]   CALL        call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7172]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L7172]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7173]   COND FALSE  !(revert)
[L7176]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6694]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6694]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6695]   COND FALSE  !(revert)
[L6698]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6675]               assume msgsender_MSG != null;
[L6676]               Balance[this] := 0;
[L6698]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6699]   COND FALSE  !(revert)
[L7176]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7177]   COND FALSE  !(revert)
[L7180]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6565]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   COND FALSE  !(revert)
[L6569]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]               assume msgsender_MSG != null;
[L6544]               Balance[this] := 0;
[L6545]               balances_BasicToken[this] := zeroRefintArr();
[L6546]               sum_balances0[this] := 0;
[L6547]               totalSupply__BasicToken[this] := 0;
[L6569]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6570]   COND FALSE  !(revert)
[L7180]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7181]   COND FALSE  !(revert)
[L7184]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6746]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6746]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6747]   COND FALSE  !(revert)
[L6750]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6694]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6694]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6695]   COND FALSE  !(revert)
[L6698]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6675]               assume msgsender_MSG != null;
[L6676]               Balance[this] := 0;
[L6698]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6699]   COND FALSE  !(revert)
[L6750]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6751]   COND FALSE  !(revert)
[L6754]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6565]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   COND FALSE  !(revert)
[L6569]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]               assume msgsender_MSG != null;
[L6544]               Balance[this] := 0;
[L6545]               balances_BasicToken[this] := zeroRefintArr();
[L6546]               sum_balances0[this] := 0;
[L6547]               totalSupply__BasicToken[this] := 0;
[L6569]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6570]   COND FALSE  !(revert)
[L6754]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6755]   COND FALSE  !(revert)
[L6758]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6717]               assume msgsender_MSG != null;
[L6718]               Balance[this] := 0;
[L6719]               allowed_StandardToken[this] := zeroRefRefintArr();
[L6720]               sum_allowed1[this] := 0;
[L6758]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6759]   COND FALSE  !(revert)
[L7184]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7185]   COND FALSE  !(revert)
[L7188]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6988]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6971]               assume msgsender_MSG != null;
[L6972]               Balance[this] := 0;
[L6973]               owner_Ownable[this] := null;
[L6975]               owner_Ownable[this] := msgsender_MSG;
[L6988]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6989]   COND FALSE  !(revert)
[L7188]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7189]   COND FALSE  !(revert)
[L7192]   CALL        call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7136]               assume msgsender_MSG != null;
[L7137]               Balance[this] := 0;
[L7138]               mintingFinished_MintableToken[this] := false;
[L7192]   RET         call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7193]   COND FALSE  !(revert)
[L8816]   RET         call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L8817]   COND FALSE  !(revert)
[L8820]   CALL        call FreezableMintableToken_FreezableMintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8749]               assume msgsender_MSG != null;
[L8750]               Balance[this] := 0;
[L8820]   RET         call FreezableMintableToken_FreezableMintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8821]   COND FALSE  !(revert)
[L9237]   RET         call FreezableMintableToken_FreezableMintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9238]   COND FALSE  !(revert)
[L9241]   CALL        call BurnableToken_BurnableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L8536]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L8536]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L8537]   COND FALSE  !(revert)
[L8540]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6565]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   COND FALSE  !(revert)
[L6569]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]               assume msgsender_MSG != null;
[L6544]               Balance[this] := 0;
[L6545]               balances_BasicToken[this] := zeroRefintArr();
[L6546]               sum_balances0[this] := 0;
[L6547]               totalSupply__BasicToken[this] := 0;
[L6569]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6570]   COND FALSE  !(revert)
[L8540]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L8541]   COND FALSE  !(revert)
[L8544]   CALL        call BurnableToken_BurnableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8513]               assume msgsender_MSG != null;
[L8514]               Balance[this] := 0;
[L8544]   RET         call BurnableToken_BurnableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8545]   COND FALSE  !(revert)
[L9241]   RET         call BurnableToken_BurnableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9242]   COND FALSE  !(revert)
[L9245]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L8662]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6988]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6971]               assume msgsender_MSG != null;
[L6972]               Balance[this] := 0;
[L6973]               owner_Ownable[this] := null;
[L6975]               owner_Ownable[this] := msgsender_MSG;
[L6988]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6989]   COND FALSE  !(revert)
[L8662]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L8663]   COND FALSE  !(revert)
[L8666]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8642]               assume msgsender_MSG != null;
[L8643]               Balance[this] := 0;
[L8644]               paused_Pausable[this] := false;
[L8666]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8667]   COND FALSE  !(revert)
[L9245]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L9246]   COND FALSE  !(revert)
[L9249]   CALL        call MainToken_MainToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9133]               assume msgsender_MSG != null;
[L9134]               Balance[this] := 0;
[L9135]               initialized_MainToken[this] := false;
[L9137]   CALL        call init_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9404]   COND FALSE  !(!!initialized_MainToken[this])
[L9408]               initialized_MainToken[this] := true;
[L9409]   COND FALSE  !(PAUSED_Consts[this])
[L9419]   COND FALSE  !(!CONTINUE_MINTING_Consts[this])
[L9429]               assert { :EventEmitted "Initialized_MainToken" } true;
[L9137]   RET         call init_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9138]   COND FALSE  !(revert)
[L9141]   COND TRUE   DType[this] == MainToken
[L9142]   CALL        call transferOwnership~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, TARGET_USER_Consts[this]);
[L7055]   CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L12332]  COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L7055]   RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7056]   COND FALSE  !(revert)
[L7059]   COND TRUE   DType[this] == MainToken
[L7060]   CALL        call _transferOwnership~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, _newOwner_s558);
[L7103]               __var_11 := null;
[L7104]   COND FALSE  !(!(_newOwner_s581 != null))
[L7108]               assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L7109]               owner_Ownable[this] := _newOwner_s581;
[L7060]   RET         call _transferOwnership~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, _newOwner_s558);
[L7061]   COND FALSE  !(revert)
[L9142]   RET         call transferOwnership~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, TARGET_USER_Consts[this]);
[L9143]   COND FALSE  !(revert)
[L9249]   RET         call MainToken_MainToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9250]   COND FALSE  !(revert)
[L4222]   RET         call MainToken_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4223]               assume !revert && gas >= 0;
[L14384]  RET         call MainToken_MainToken(this, msgsender_MSG, msgvalue_MSG);
[L14385]              assume !revert && gas >= 0;
[L14388]  CALL        call CorralChoice_MainToken(this);
[L14045]              havoc msgsender_MSG;
[L14046]              havoc msgvalue_MSG;
[L14047]              havoc choice;
[L14048]              havoc __ret_0_totalSupply;
[L14049]              havoc _owner_s729;
[L14050]              havoc balance_s729;
[L14051]              havoc _to_s1572;
[L14052]              havoc _value_s1572;
[L14053]              havoc _success_s1572;
[L14054]              havoc _owner_s395;
[L14055]              havoc _spender_s395;
[L14056]              havoc __ret_0_allowance;
[L14057]              havoc _from_s1551;
[L14058]              havoc _to_s1551;
[L14059]              havoc _value_s1551;
[L14060]              havoc _success_s1551;
[L14061]              havoc _spender_s379;
[L14062]              havoc _value_s379;
[L14063]              havoc __ret_0_approve;
[L14064]              havoc _spender_s437;
[L14065]              havoc _addedValue_s437;
[L14066]              havoc __ret_0_increaseApproval;
[L14067]              havoc _spender_s497;
[L14068]              havoc _subtractedValue_s497;
[L14069]              havoc __ret_0_decreaseApproval;
[L14070]              havoc __ret_0_owner;
[L14071]              havoc _newOwner_s558;
[L14072]              havoc __ret_0_mintingFinished;
[L14073]              havoc _to_s664;
[L14074]              havoc _amount_s664;
[L14075]              havoc __ret_0_mint;
[L14076]              havoc __ret_0_finishMinting;
[L14077]              havoc _owner_s742;
[L14078]              havoc balance_s742;
[L14079]              havoc _owner_s754;
[L14080]              havoc balance_s754;
[L14081]              havoc _addr_s792;
[L14082]              havoc count_s792;
[L14083]              havoc _addr_s849;
[L14084]              havoc _index_s849;
[L14085]              havoc _release_s849;
[L14086]              havoc _balance_s849;
[L14087]              havoc _to_s938;
[L14088]              havoc _amount_s938;
[L14089]              havoc _until_s938;
[L14090]              havoc tokens_s1107;
[L14091]              havoc _value_s1261;
[L14092]              havoc __ret_0_paused;
[L14093]              havoc _to_s1449;
[L14094]              havoc _amount_s1449;
[L14095]              havoc _until_s1449;
[L14096]              havoc __ret_0_mintAndFreeze;
[L14097]              havoc __ret_0_TOKEN_DECIMALS;
[L14098]              havoc __ret_0_TOKEN_DECIMALS_UINT8;
[L14099]              havoc __ret_0_TOKEN_DECIMAL_MULTIPLIER;
[L14100]              havoc __ret_0_TOKEN_NAME;
[L14101]              havoc __ret_0_TOKEN_SYMBOL;
[L14102]              havoc __ret_0_PAUSED;
[L14103]              havoc __ret_0_TARGET_USER;
[L14104]              havoc __ret_0_CONTINUE_MINTING;
[L14105]              havoc __ret_0_initialized;
[L14106]              havoc _name_s1511;
[L14107]              havoc _symbol_s1519;
[L14108]              havoc _decimals_s1527;
[L14109]              havoc tmpNow;
[L14110]              havoc gas;
[L14111]              assume gas > 4000000 && gas <= 8000000;
[L14112]              tmpNow := now;
[L14113]              havoc now;
[L14114]              assume now > tmpNow;
[L14115]              assume msgsender_MSG != null;
[L14116]              assume DType[msgsender_MSG] != ERC20Basic;
[L14117]              assume DType[msgsender_MSG] != SafeMath;
[L14118]              assume DType[msgsender_MSG] != BasicToken;
[L14119]              assume DType[msgsender_MSG] != ERC20;
[L14120]              assume DType[msgsender_MSG] != StandardToken;
[L14121]              assume DType[msgsender_MSG] != Ownable;
[L14122]              assume DType[msgsender_MSG] != MintableToken;
[L14123]              assume DType[msgsender_MSG] != FreezableToken;
[L14124]              assume DType[msgsender_MSG] != BurnableToken;
[L14125]              assume DType[msgsender_MSG] != Pausable;
[L14126]              assume DType[msgsender_MSG] != FreezableMintableToken;
[L14127]              assume DType[msgsender_MSG] != Consts;
[L14128]              assume DType[msgsender_MSG] != MainToken;
[L14129]              Alloc[msgsender_MSG] := true;
[L14130]  COND FALSE  !(choice == 38)
[L14136]  COND FALSE  !(choice == 37)
[L14142]  COND TRUE   choice == 36
[L14143]              gas := gas - 21000;
[L14144]  COND TRUE   gas >= 0
[L14145]              assume _value_s1572 >= 0 && _value_s1572 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L14146]              assume msgvalue_MSG == 0;
[L14147]  CALL        call _success_s1572 := transfer~address~uint256_MainToken(this, msgsender_MSG, msgvalue_MSG, _to_s1572, _value_s1572);
[L4599]               havoc __exception;
[L4600]               revert := false;
[L4601]   COND FALSE  !(__exception)
[L4638]   CALL        call _success_s1572 := transfer~address~uint256_MainToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s1572, _value_s1572);
[L9355]   COND FALSE  !(!!paused_Pausable[this])
[L9359]   COND TRUE   DType[this] == MainToken
[L9360]   CALL        call __var_55 := transfer~address~uint256_BasicToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s1572, _value_s1572);
[L6624]               __var_1 := null;
[L6625]   COND FALSE  !(!(_to_s202 != null))
[L6629]   COND FALSE  !(!(_value_s202 <= balances_BasicToken[this][msgsender_MSG]))
[L6633]   CALL        call __var_2 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][msgsender_MSG], _value_s202);
[L6509]               assert b_s98 <= a_s98;
[L6510]               __ret_0_ := (a_s98 - b_s98) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6633]   RET         call __var_2 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][msgsender_MSG], _value_s202);
[L6634]   COND FALSE  !(revert)
[L6637]               sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][msgsender_MSG];
[L6638]               balances_BasicToken[this][msgsender_MSG] := __var_2;
[L6639]               sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][msgsender_MSG];
[L6640]   CALL        call __var_3 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_to_s202], _value_s202);
[L6523]               c_s122 := (a_s122 + b_s122) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6524]               assert c_s122 >= a_s122;
[L6525]               c_s122 := c_s122;
[L6640]   RET         call __var_3 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_to_s202], _value_s202);
[L6641]   COND FALSE  !(revert)
[L6644]               sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][_to_s202];
[L6645]               balances_BasicToken[this][_to_s202] := __var_3;
[L6646]               sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][_to_s202];
[L6647]               assert { :EventEmitted "Transfer_BasicToken" } true;
[L6648]               __ret_0_ := true;
[L9360]   RET         call __var_55 := transfer~address~uint256_BasicToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s1572, _value_s1572);
[L9361]   COND FALSE  !(revert)
[L9367]               _success_s1572 := __var_55;
[L4638]   RET         call _success_s1572 := transfer~address~uint256_MainToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s1572, _value_s1572);
[L4639]               assume !revert && gas >= 0;
[L14147]  RET         call _success_s1572 := transfer~address~uint256_MainToken(this, msgsender_MSG, msgvalue_MSG, _to_s1572, _value_s1572);
[L14388]  RET         call CorralChoice_MainToken(this);
[L14388]  CALL        call CorralChoice_MainToken(this);
[L14045]              havoc msgsender_MSG;
[L14046]              havoc msgvalue_MSG;
[L14047]              havoc choice;
[L14048]              havoc __ret_0_totalSupply;
[L14049]              havoc _owner_s729;
[L14050]              havoc balance_s729;
[L14051]              havoc _to_s1572;
[L14052]              havoc _value_s1572;
[L14053]              havoc _success_s1572;
[L14054]              havoc _owner_s395;
[L14055]              havoc _spender_s395;
[L14056]              havoc __ret_0_allowance;
[L14057]              havoc _from_s1551;
[L14058]              havoc _to_s1551;
[L14059]              havoc _value_s1551;
[L14060]              havoc _success_s1551;
[L14061]              havoc _spender_s379;
[L14062]              havoc _value_s379;
[L14063]              havoc __ret_0_approve;
[L14064]              havoc _spender_s437;
[L14065]              havoc _addedValue_s437;
[L14066]              havoc __ret_0_increaseApproval;
[L14067]              havoc _spender_s497;
[L14068]              havoc _subtractedValue_s497;
[L14069]              havoc __ret_0_decreaseApproval;
[L14070]              havoc __ret_0_owner;
[L14071]              havoc _newOwner_s558;
[L14072]              havoc __ret_0_mintingFinished;
[L14073]              havoc _to_s664;
[L14074]              havoc _amount_s664;
[L14075]              havoc __ret_0_mint;
[L14076]              havoc __ret_0_finishMinting;
[L14077]              havoc _owner_s742;
[L14078]              havoc balance_s742;
[L14079]              havoc _owner_s754;
[L14080]              havoc balance_s754;
[L14081]              havoc _addr_s792;
[L14082]              havoc count_s792;
[L14083]              havoc _addr_s849;
[L14084]              havoc _index_s849;
[L14085]              havoc _release_s849;
[L14086]              havoc _balance_s849;
[L14087]              havoc _to_s938;
[L14088]              havoc _amount_s938;
[L14089]              havoc _until_s938;
[L14090]              havoc tokens_s1107;
[L14091]              havoc _value_s1261;
[L14092]              havoc __ret_0_paused;
[L14093]              havoc _to_s1449;
[L14094]              havoc _amount_s1449;
[L14095]              havoc _until_s1449;
[L14096]              havoc __ret_0_mintAndFreeze;
[L14097]              havoc __ret_0_TOKEN_DECIMALS;
[L14098]              havoc __ret_0_TOKEN_DECIMALS_UINT8;
[L14099]              havoc __ret_0_TOKEN_DECIMAL_MULTIPLIER;
[L14100]              havoc __ret_0_TOKEN_NAME;
[L14101]              havoc __ret_0_TOKEN_SYMBOL;
[L14102]              havoc __ret_0_PAUSED;
[L14103]              havoc __ret_0_TARGET_USER;
[L14104]              havoc __ret_0_CONTINUE_MINTING;
[L14105]              havoc __ret_0_initialized;
[L14106]              havoc _name_s1511;
[L14107]              havoc _symbol_s1519;
[L14108]              havoc _decimals_s1527;
[L14109]              havoc tmpNow;
[L14110]              havoc gas;
[L14111]              assume gas > 4000000 && gas <= 8000000;
[L14112]              tmpNow := now;
[L14113]              havoc now;
[L14114]              assume now > tmpNow;
[L14115]              assume msgsender_MSG != null;
[L14116]              assume DType[msgsender_MSG] != ERC20Basic;
[L14117]              assume DType[msgsender_MSG] != SafeMath;
[L14118]              assume DType[msgsender_MSG] != BasicToken;
[L14119]              assume DType[msgsender_MSG] != ERC20;
[L14120]              assume DType[msgsender_MSG] != StandardToken;
[L14121]              assume DType[msgsender_MSG] != Ownable;
[L14122]              assume DType[msgsender_MSG] != MintableToken;
[L14123]              assume DType[msgsender_MSG] != FreezableToken;
[L14124]              assume DType[msgsender_MSG] != BurnableToken;
[L14125]              assume DType[msgsender_MSG] != Pausable;
[L14126]              assume DType[msgsender_MSG] != FreezableMintableToken;
[L14127]              assume DType[msgsender_MSG] != Consts;
[L14128]              assume DType[msgsender_MSG] != MainToken;
[L14129]              Alloc[msgsender_MSG] := true;
[L14130]  COND FALSE  !(choice == 38)
[L14136]  COND TRUE   choice == 37
[L14137]              gas := gas - 21000;
[L14138]  COND TRUE   gas >= 0
[L14139]              assume msgvalue_MSG == 0;
[L14140]  CALL        call balance_s729 := balanceOf~address_FreezableToken(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume balances_BasicToken[this][_owner_s729] >= 0 && balances_BasicToken[this][_owner_s729] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_balanceOf_FreezableToken0 := true;
[L2]                  call_balanceOf_FreezableToken0 := false;
[L2]                  revert := revert_hold;
[L1999]               havoc __exception;
[L2000]               revert := false;
[L2001]   COND FALSE  !(__exception)
[L2038]   CALL        call balance_s729 := balanceOf~address_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L7405]   COND TRUE   DType[this] == MainToken
[L7406]   CALL        call __var_14 := balanceOf~address_BasicToken__success(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L6660]               __ret_0_ := balances_BasicToken[this][_owner_s214];
[L7406]   RET         call __var_14 := balanceOf~address_BasicToken__success(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L7407]   COND FALSE  !(revert)
[L7423]               balance_s729 := (__var_14 + freezingBalance_FreezableToken[this][_owner_s729]) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2038]   RET         call balance_s729 := balanceOf~address_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L2039]               assume !revert && gas >= 0;
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume !((((((((((balance_s729 == balances_BasicToken[this][_owner_s729] && totalSupply__BasicToken[this] == old(totalSupply__BasicToken[this])) && balances_BasicToken[this] == old(balances_BasicToken[this])) && allowed_StandardToken[this] == old(allowed_StandardToken[this])) && initialized_MainToken[this] == old(initialized_MainToken[this])) && paused_Pausable[this] == old(paused_Pausable[this])) && mintingFinished_MintableToken[this] == old(mintingFinished_MintableToken[this])) && owner_Ownable[this] == old(owner_Ownable[this])) && chains_FreezableToken[this] == old(chains_FreezableToken[this])) && freezings_FreezableToken[this] == old(freezings_FreezableToken[this])) && freezingBalance_FreezableToken[this] == old(freezingBalance_FreezableToken[this]));
[L2]                  revert := revert_hold;
[L14140]  RET         call balance_s729 := balanceOf~address_FreezableToken(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L14388]  RET         call CorralChoice_MainToken(this);

Loop:
[L14388]  CALL        call CorralChoice_MainToken(this);
[L14045]              havoc msgsender_MSG;
[L14046]              havoc msgvalue_MSG;
[L14047]              havoc choice;
[L14048]              havoc __ret_0_totalSupply;
[L14049]              havoc _owner_s729;
[L14050]              havoc balance_s729;
[L14051]              havoc _to_s1572;
[L14052]              havoc _value_s1572;
[L14053]              havoc _success_s1572;
[L14054]              havoc _owner_s395;
[L14055]              havoc _spender_s395;
[L14056]              havoc __ret_0_allowance;
[L14057]              havoc _from_s1551;
[L14058]              havoc _to_s1551;
[L14059]              havoc _value_s1551;
[L14060]              havoc _success_s1551;
[L14061]              havoc _spender_s379;
[L14062]              havoc _value_s379;
[L14063]              havoc __ret_0_approve;
[L14064]              havoc _spender_s437;
[L14065]              havoc _addedValue_s437;
[L14066]              havoc __ret_0_increaseApproval;
[L14067]              havoc _spender_s497;
[L14068]              havoc _subtractedValue_s497;
[L14069]              havoc __ret_0_decreaseApproval;
[L14070]              havoc __ret_0_owner;
[L14071]              havoc _newOwner_s558;
[L14072]              havoc __ret_0_mintingFinished;
[L14073]              havoc _to_s664;
[L14074]              havoc _amount_s664;
[L14075]              havoc __ret_0_mint;
[L14076]              havoc __ret_0_finishMinting;
[L14077]              havoc _owner_s742;
[L14078]              havoc balance_s742;
[L14079]              havoc _owner_s754;
[L14080]              havoc balance_s754;
[L14081]              havoc _addr_s792;
[L14082]              havoc count_s792;
[L14083]              havoc _addr_s849;
[L14084]              havoc _index_s849;
[L14085]              havoc _release_s849;
[L14086]              havoc _balance_s849;
[L14087]              havoc _to_s938;
[L14088]              havoc _amount_s938;
[L14089]              havoc _until_s938;
[L14090]              havoc tokens_s1107;
[L14091]              havoc _value_s1261;
[L14092]              havoc __ret_0_paused;
[L14093]              havoc _to_s1449;
[L14094]              havoc _amount_s1449;
[L14095]              havoc _until_s1449;
[L14096]              havoc __ret_0_mintAndFreeze;
[L14097]              havoc __ret_0_TOKEN_DECIMALS;
[L14098]              havoc __ret_0_TOKEN_DECIMALS_UINT8;
[L14099]              havoc __ret_0_TOKEN_DECIMAL_MULTIPLIER;
[L14100]              havoc __ret_0_TOKEN_NAME;
[L14101]              havoc __ret_0_TOKEN_SYMBOL;
[L14102]              havoc __ret_0_PAUSED;
[L14103]              havoc __ret_0_TARGET_USER;
[L14104]              havoc __ret_0_CONTINUE_MINTING;
[L14105]              havoc __ret_0_initialized;
[L14106]              havoc _name_s1511;
[L14107]              havoc _symbol_s1519;
[L14108]              havoc _decimals_s1527;
[L14109]              havoc tmpNow;
[L14110]              havoc gas;
[L14111]              assume gas > 4000000 && gas <= 8000000;
[L14112]              tmpNow := now;
[L14113]              havoc now;
[L14114]              assume now > tmpNow;
[L14115]              assume msgsender_MSG != null;
[L14116]              assume DType[msgsender_MSG] != ERC20Basic;
[L14117]              assume DType[msgsender_MSG] != SafeMath;
[L14118]              assume DType[msgsender_MSG] != BasicToken;
[L14119]              assume DType[msgsender_MSG] != ERC20;
[L14120]              assume DType[msgsender_MSG] != StandardToken;
[L14121]              assume DType[msgsender_MSG] != Ownable;
[L14122]              assume DType[msgsender_MSG] != MintableToken;
[L14123]              assume DType[msgsender_MSG] != FreezableToken;
[L14124]              assume DType[msgsender_MSG] != BurnableToken;
[L14125]              assume DType[msgsender_MSG] != Pausable;
[L14126]              assume DType[msgsender_MSG] != FreezableMintableToken;
[L14127]              assume DType[msgsender_MSG] != Consts;
[L14128]              assume DType[msgsender_MSG] != MainToken;
[L14129]              Alloc[msgsender_MSG] := true;
[L14130]  COND FALSE  !(choice == 38)
[L14136]  COND TRUE   choice == 37
[L14137]              gas := gas - 21000;
[L14138]  COND TRUE   gas >= 0
[L14139]              assume msgvalue_MSG == 0;
[L14140]  CALL        call balance_s729 := balanceOf~address_FreezableToken(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume balances_BasicToken[this][_owner_s729] >= 0 && balances_BasicToken[this][_owner_s729] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_balanceOf_FreezableToken0 := true;
[L2]                  call_balanceOf_FreezableToken0 := false;
[L2]                  revert := revert_hold;
[L1999]               havoc __exception;
[L2000]               revert := false;
[L2001]   COND FALSE  !(__exception)
[L2038]   CALL        call balance_s729 := balanceOf~address_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L7405]   COND TRUE   DType[this] == MainToken
[L7406]   CALL        call __var_14 := balanceOf~address_BasicToken__success(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L6660]               __ret_0_ := balances_BasicToken[this][_owner_s214];
[L7406]   RET         call __var_14 := balanceOf~address_BasicToken__success(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L7407]   COND FALSE  !(revert)
[L7423]               balance_s729 := (__var_14 + freezingBalance_FreezableToken[this][_owner_s729]) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2038]   RET         call balance_s729 := balanceOf~address_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L2039]               assume !revert && gas >= 0;
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume !((((((((((balance_s729 == balances_BasicToken[this][_owner_s729] && totalSupply__BasicToken[this] == old(totalSupply__BasicToken[this])) && balances_BasicToken[this] == old(balances_BasicToken[this])) && allowed_StandardToken[this] == old(allowed_StandardToken[this])) && initialized_MainToken[this] == old(initialized_MainToken[this])) && paused_Pausable[this] == old(paused_Pausable[this])) && mintingFinished_MintableToken[this] == old(mintingFinished_MintableToken[this])) && owner_Ownable[this] == old(owner_Ownable[this])) && chains_FreezableToken[this] == old(chains_FreezableToken[this])) && freezings_FreezableToken[this] == old(freezings_FreezableToken[this])) && freezingBalance_FreezableToken[this] == old(freezingBalance_FreezableToken[this]));
[L2]                  revert := revert_hold;
[L14140]  RET         call balance_s729 := balanceOf~address_FreezableToken(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L14388]  RET         call CorralChoice_MainToken(this);

[2020-11-24 21:25:59,172 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-24 21:25:59,172 INFO  L82        PathProgramCache]: Analyzing trace with hash -535818161, now seen corresponding path program 1 times
[2020-11-24 21:25:59,173 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-24 21:25:59,216 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-24 21:26:00,063 INFO  L134       CoverageAnalysis]: Checked inductivity of 9912 backedges. 7 proven. 0 refuted. 0 times theorem prover too weak. 9905 trivial. 0 not checked.
[2020-11-24 21:26:00,064 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-24 21:26:00,064 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [15] imperfect sequences [] total 15
[2020-11-24 21:26:00,064 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-24 21:26:00,065 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 16 interpolants.
[2020-11-24 21:26:00,065 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=30, Invalid=210, Unknown=0, NotChecked=0, Total=240
[2020-11-24 21:26:00,065 INFO  L87              Difference]: Start difference. First operand 5371 states and 6042 transitions. cyclomatic complexity: 686 Second operand 16 states.
[2020-11-24 21:26:04,847 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-24 21:26:04,847 INFO  L93              Difference]: Finished difference Result 5459 states and 6150 transitions.
[2020-11-24 21:26:04,847 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 19 states. 
[2020-11-24 21:26:04,847 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 5459 states and 6150 transitions.
[2020-11-24 21:26:04,857 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-24 21:26:04,868 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 5459 states to 5459 states and 6150 transitions.
[2020-11-24 21:26:04,869 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1078
[2020-11-24 21:26:04,869 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1078
[2020-11-24 21:26:04,869 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 5459 states and 6150 transitions.
[2020-11-24 21:26:04,872 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-24 21:26:04,872 INFO  L728         BuchiCegarLoop]: Abstraction has 5459 states and 6150 transitions.
[2020-11-24 21:26:04,876 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 5459 states and 6150 transitions.
[2020-11-24 21:26:04,901 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 5459 to 5423.
[2020-11-24 21:26:04,901 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 5423 states.
[2020-11-24 21:26:04,907 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 5423 states to 5423 states and 6103 transitions.
[2020-11-24 21:26:04,907 INFO  L751         BuchiCegarLoop]: Abstraction has 5423 states and 6103 transitions.
[2020-11-24 21:26:04,907 INFO  L631         BuchiCegarLoop]: Abstraction has 5423 states and 6103 transitions.
[2020-11-24 21:26:04,907 INFO  L445         BuchiCegarLoop]: ======== Iteration 8============
[2020-11-24 21:26:04,907 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 5423 states and 6103 transitions.
[2020-11-24 21:26:04,912 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-24 21:26:04,912 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-24 21:26:04,912 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-24 21:26:04,915 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [38, 38, 38, 38, 38, 38, 38, 38, 38, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-24 21:26:04,915 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  success_balanceOf_FreezableToken0 := false;
[L2]                  call_balanceOf_FreezableToken0 := false;
[L2]      CALL        call main();
[L14378]              assume null == 0;
[L14379]  CALL        call this := FreshRefGenerator__success();
[L6396]               havoc newRef;
[L6397]               assume Alloc[newRef] == false;
[L6398]               Alloc[newRef] := true;
[L6399]               assume newRef != null;
[L14379]  RET         call this := FreshRefGenerator__success();
[L14380]              assume now >= 0;
[L14381]              assume DType[this] == MainToken;
[L14382]              assume msgvalue_MSG == 0;
[L14383]              gas := gas - 53000;
[L14384]  CALL        call MainToken_MainToken(this, msgsender_MSG, msgvalue_MSG);
[L4183]               havoc __exception;
[L4184]               revert := false;
[L4185]   COND FALSE  !(__exception)
[L4222]   CALL        call MainToken_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9205]   CALL        call Consts_Consts__success(this, msgsender_MSG, msgvalue_MSG);
[L9007]   CALL        call Consts_Consts_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8983]               assume msgsender_MSG != null;
[L8984]               Balance[this] := 0;
[L8985]               TOKEN_DECIMALS_Consts[this] := 18;
[L8986]               TOKEN_DECIMALS_UINT8_Consts[this] := 18;
[L8987]               TOKEN_DECIMAL_MULTIPLIER_Consts[this] := nonlinearPow(10, TOKEN_DECIMALS_Consts[this]) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8988]               TOKEN_NAME_Consts[this] := -1051245219;
[L8989]               TOKEN_SYMBOL_Consts[this] := -1804535220;
[L8990]               PAUSED_Consts[this] := false;
[L8991]               __var_52 := ConstantToRef(-210822415442009814958929812751043848690848471787);
[L8992]               TARGET_USER_Consts[this] := ConstantToRef(-210822415442009814958929812751043848690848471787);
[L8993]               CONTINUE_MINTING_Consts[this] := true;
[L9007]   RET         call Consts_Consts_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9008]   COND FALSE  !(revert)
[L9205]   RET         call Consts_Consts__success(this, msgsender_MSG, msgvalue_MSG);
[L9206]   COND FALSE  !(revert)
[L9209]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L9209]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L9210]   COND FALSE  !(revert)
[L9213]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6694]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6694]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6695]   COND FALSE  !(revert)
[L6698]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6675]               assume msgsender_MSG != null;
[L6676]               Balance[this] := 0;
[L6698]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6699]   COND FALSE  !(revert)
[L9213]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L9214]   COND FALSE  !(revert)
[L9217]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6565]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   COND FALSE  !(revert)
[L6569]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]               assume msgsender_MSG != null;
[L6544]               Balance[this] := 0;
[L6545]               balances_BasicToken[this] := zeroRefintArr();
[L6546]               sum_balances0[this] := 0;
[L6547]               totalSupply__BasicToken[this] := 0;
[L6569]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6570]   COND FALSE  !(revert)
[L9217]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9218]   COND FALSE  !(revert)
[L9221]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6746]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6746]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6747]   COND FALSE  !(revert)
[L6750]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6694]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6694]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6695]   COND FALSE  !(revert)
[L6698]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6675]               assume msgsender_MSG != null;
[L6676]               Balance[this] := 0;
[L6698]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6699]   COND FALSE  !(revert)
[L6750]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6751]   COND FALSE  !(revert)
[L6754]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6565]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   COND FALSE  !(revert)
[L6569]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]               assume msgsender_MSG != null;
[L6544]               Balance[this] := 0;
[L6545]               balances_BasicToken[this] := zeroRefintArr();
[L6546]               sum_balances0[this] := 0;
[L6547]               totalSupply__BasicToken[this] := 0;
[L6569]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6570]   COND FALSE  !(revert)
[L6754]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6755]   COND FALSE  !(revert)
[L6758]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6717]               assume msgsender_MSG != null;
[L6718]               Balance[this] := 0;
[L6719]               allowed_StandardToken[this] := zeroRefRefintArr();
[L6720]               sum_allowed1[this] := 0;
[L6758]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6759]   COND FALSE  !(revert)
[L9221]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9222]   COND FALSE  !(revert)
[L9225]   CALL        call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7353]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L7353]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7354]   COND FALSE  !(revert)
[L7357]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6694]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6694]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6695]   COND FALSE  !(revert)
[L6698]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6675]               assume msgsender_MSG != null;
[L6676]               Balance[this] := 0;
[L6698]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6699]   COND FALSE  !(revert)
[L7357]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7358]   COND FALSE  !(revert)
[L7361]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6565]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   COND FALSE  !(revert)
[L6569]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]               assume msgsender_MSG != null;
[L6544]               Balance[this] := 0;
[L6545]               balances_BasicToken[this] := zeroRefintArr();
[L6546]               sum_balances0[this] := 0;
[L6547]               totalSupply__BasicToken[this] := 0;
[L6569]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6570]   COND FALSE  !(revert)
[L7361]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7362]   COND FALSE  !(revert)
[L7365]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6746]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6746]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6747]   COND FALSE  !(revert)
[L6750]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6694]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6694]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6695]   COND FALSE  !(revert)
[L6698]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6675]               assume msgsender_MSG != null;
[L6676]               Balance[this] := 0;
[L6698]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6699]   COND FALSE  !(revert)
[L6750]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6751]   COND FALSE  !(revert)
[L6754]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6565]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   COND FALSE  !(revert)
[L6569]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]               assume msgsender_MSG != null;
[L6544]               Balance[this] := 0;
[L6545]               balances_BasicToken[this] := zeroRefintArr();
[L6546]               sum_balances0[this] := 0;
[L6547]               totalSupply__BasicToken[this] := 0;
[L6569]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6570]   COND FALSE  !(revert)
[L6754]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6755]   COND FALSE  !(revert)
[L6758]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6717]               assume msgsender_MSG != null;
[L6718]               Balance[this] := 0;
[L6719]               allowed_StandardToken[this] := zeroRefRefintArr();
[L6720]               sum_allowed1[this] := 0;
[L6758]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6759]   COND FALSE  !(revert)
[L7365]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7366]   COND FALSE  !(revert)
[L7369]   CALL        call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7316]               assume msgsender_MSG != null;
[L7317]               Balance[this] := 0;
[L7318]               chains_FreezableToken[this] := zerointintArr();
[L7319]               sum_chains2[this] := 0;
[L7320]               freezings_FreezableToken[this] := zerointintArr();
[L7321]               sum_freezings3[this] := 0;
[L7322]               freezingBalance_FreezableToken[this] := zeroRefintArr();
[L7323]               sum_freezingBalance4[this] := 0;
[L7369]   RET         call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7370]   COND FALSE  !(revert)
[L9225]   RET         call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9226]   COND FALSE  !(revert)
[L9229]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6988]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6971]               assume msgsender_MSG != null;
[L6972]               Balance[this] := 0;
[L6973]               owner_Ownable[this] := null;
[L6975]               owner_Ownable[this] := msgsender_MSG;
[L6988]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6989]   COND FALSE  !(revert)
[L9229]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L9230]   COND FALSE  !(revert)
[L9233]   CALL        call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7172]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L7172]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7173]   COND FALSE  !(revert)
[L7176]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6694]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6694]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6695]   COND FALSE  !(revert)
[L6698]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6675]               assume msgsender_MSG != null;
[L6676]               Balance[this] := 0;
[L6698]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6699]   COND FALSE  !(revert)
[L7176]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7177]   COND FALSE  !(revert)
[L7180]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6565]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   COND FALSE  !(revert)
[L6569]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]               assume msgsender_MSG != null;
[L6544]               Balance[this] := 0;
[L6545]               balances_BasicToken[this] := zeroRefintArr();
[L6546]               sum_balances0[this] := 0;
[L6547]               totalSupply__BasicToken[this] := 0;
[L6569]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6570]   COND FALSE  !(revert)
[L7180]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7181]   COND FALSE  !(revert)
[L7184]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6746]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6746]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6747]   COND FALSE  !(revert)
[L6750]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6694]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6694]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6695]   COND FALSE  !(revert)
[L6698]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6675]               assume msgsender_MSG != null;
[L6676]               Balance[this] := 0;
[L6698]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6699]   COND FALSE  !(revert)
[L6750]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6751]   COND FALSE  !(revert)
[L6754]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6565]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   COND FALSE  !(revert)
[L6569]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]               assume msgsender_MSG != null;
[L6544]               Balance[this] := 0;
[L6545]               balances_BasicToken[this] := zeroRefintArr();
[L6546]               sum_balances0[this] := 0;
[L6547]               totalSupply__BasicToken[this] := 0;
[L6569]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6570]   COND FALSE  !(revert)
[L6754]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6755]   COND FALSE  !(revert)
[L6758]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6717]               assume msgsender_MSG != null;
[L6718]               Balance[this] := 0;
[L6719]               allowed_StandardToken[this] := zeroRefRefintArr();
[L6720]               sum_allowed1[this] := 0;
[L6758]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6759]   COND FALSE  !(revert)
[L7184]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7185]   COND FALSE  !(revert)
[L7188]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6988]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6971]               assume msgsender_MSG != null;
[L6972]               Balance[this] := 0;
[L6973]               owner_Ownable[this] := null;
[L6975]               owner_Ownable[this] := msgsender_MSG;
[L6988]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6989]   COND FALSE  !(revert)
[L7188]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7189]   COND FALSE  !(revert)
[L7192]   CALL        call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7136]               assume msgsender_MSG != null;
[L7137]               Balance[this] := 0;
[L7138]               mintingFinished_MintableToken[this] := false;
[L7192]   RET         call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7193]   COND FALSE  !(revert)
[L9233]   RET         call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9234]   COND FALSE  !(revert)
[L9237]   CALL        call FreezableMintableToken_FreezableMintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L8792]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L8792]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L8793]   COND FALSE  !(revert)
[L8796]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6694]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6694]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6695]   COND FALSE  !(revert)
[L6698]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6675]               assume msgsender_MSG != null;
[L6676]               Balance[this] := 0;
[L6698]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6699]   COND FALSE  !(revert)
[L8796]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L8797]   COND FALSE  !(revert)
[L8800]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6565]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   COND FALSE  !(revert)
[L6569]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]               assume msgsender_MSG != null;
[L6544]               Balance[this] := 0;
[L6545]               balances_BasicToken[this] := zeroRefintArr();
[L6546]               sum_balances0[this] := 0;
[L6547]               totalSupply__BasicToken[this] := 0;
[L6569]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6570]   COND FALSE  !(revert)
[L8800]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L8801]   COND FALSE  !(revert)
[L8804]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6746]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6746]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6747]   COND FALSE  !(revert)
[L6750]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6694]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6694]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6695]   COND FALSE  !(revert)
[L6698]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6675]               assume msgsender_MSG != null;
[L6676]               Balance[this] := 0;
[L6698]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6699]   COND FALSE  !(revert)
[L6750]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6751]   COND FALSE  !(revert)
[L6754]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6565]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   COND FALSE  !(revert)
[L6569]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]               assume msgsender_MSG != null;
[L6544]               Balance[this] := 0;
[L6545]               balances_BasicToken[this] := zeroRefintArr();
[L6546]               sum_balances0[this] := 0;
[L6547]               totalSupply__BasicToken[this] := 0;
[L6569]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6570]   COND FALSE  !(revert)
[L6754]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6755]   COND FALSE  !(revert)
[L6758]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6717]               assume msgsender_MSG != null;
[L6718]               Balance[this] := 0;
[L6719]               allowed_StandardToken[this] := zeroRefRefintArr();
[L6720]               sum_allowed1[this] := 0;
[L6758]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6759]   COND FALSE  !(revert)
[L8804]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L8805]   COND FALSE  !(revert)
[L8808]   CALL        call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7353]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L7353]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7354]   COND FALSE  !(revert)
[L7357]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6694]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6694]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6695]   COND FALSE  !(revert)
[L6698]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6675]               assume msgsender_MSG != null;
[L6676]               Balance[this] := 0;
[L6698]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6699]   COND FALSE  !(revert)
[L7357]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7358]   COND FALSE  !(revert)
[L7361]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6565]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   COND FALSE  !(revert)
[L6569]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]               assume msgsender_MSG != null;
[L6544]               Balance[this] := 0;
[L6545]               balances_BasicToken[this] := zeroRefintArr();
[L6546]               sum_balances0[this] := 0;
[L6547]               totalSupply__BasicToken[this] := 0;
[L6569]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6570]   COND FALSE  !(revert)
[L7361]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7362]   COND FALSE  !(revert)
[L7365]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6746]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6746]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6747]   COND FALSE  !(revert)
[L6750]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6694]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6694]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6695]   COND FALSE  !(revert)
[L6698]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6675]               assume msgsender_MSG != null;
[L6676]               Balance[this] := 0;
[L6698]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6699]   COND FALSE  !(revert)
[L6750]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6751]   COND FALSE  !(revert)
[L6754]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6565]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   COND FALSE  !(revert)
[L6569]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]               assume msgsender_MSG != null;
[L6544]               Balance[this] := 0;
[L6545]               balances_BasicToken[this] := zeroRefintArr();
[L6546]               sum_balances0[this] := 0;
[L6547]               totalSupply__BasicToken[this] := 0;
[L6569]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6570]   COND FALSE  !(revert)
[L6754]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6755]   COND FALSE  !(revert)
[L6758]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6717]               assume msgsender_MSG != null;
[L6718]               Balance[this] := 0;
[L6719]               allowed_StandardToken[this] := zeroRefRefintArr();
[L6720]               sum_allowed1[this] := 0;
[L6758]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6759]   COND FALSE  !(revert)
[L7365]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7366]   COND FALSE  !(revert)
[L7369]   CALL        call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7316]               assume msgsender_MSG != null;
[L7317]               Balance[this] := 0;
[L7318]               chains_FreezableToken[this] := zerointintArr();
[L7319]               sum_chains2[this] := 0;
[L7320]               freezings_FreezableToken[this] := zerointintArr();
[L7321]               sum_freezings3[this] := 0;
[L7322]               freezingBalance_FreezableToken[this] := zeroRefintArr();
[L7323]               sum_freezingBalance4[this] := 0;
[L7369]   RET         call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7370]   COND FALSE  !(revert)
[L8808]   RET         call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L8809]   COND FALSE  !(revert)
[L8812]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6988]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6971]               assume msgsender_MSG != null;
[L6972]               Balance[this] := 0;
[L6973]               owner_Ownable[this] := null;
[L6975]               owner_Ownable[this] := msgsender_MSG;
[L6988]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6989]   COND FALSE  !(revert)
[L8812]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L8813]   COND FALSE  !(revert)
[L8816]   CALL        call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7172]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L7172]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7173]   COND FALSE  !(revert)
[L7176]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6694]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6694]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6695]   COND FALSE  !(revert)
[L6698]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6675]               assume msgsender_MSG != null;
[L6676]               Balance[this] := 0;
[L6698]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6699]   COND FALSE  !(revert)
[L7176]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7177]   COND FALSE  !(revert)
[L7180]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6565]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   COND FALSE  !(revert)
[L6569]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]               assume msgsender_MSG != null;
[L6544]               Balance[this] := 0;
[L6545]               balances_BasicToken[this] := zeroRefintArr();
[L6546]               sum_balances0[this] := 0;
[L6547]               totalSupply__BasicToken[this] := 0;
[L6569]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6570]   COND FALSE  !(revert)
[L7180]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7181]   COND FALSE  !(revert)
[L7184]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6746]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6746]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6747]   COND FALSE  !(revert)
[L6750]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6694]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6694]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6695]   COND FALSE  !(revert)
[L6698]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6675]               assume msgsender_MSG != null;
[L6676]               Balance[this] := 0;
[L6698]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6699]   COND FALSE  !(revert)
[L6750]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6751]   COND FALSE  !(revert)
[L6754]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6565]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   COND FALSE  !(revert)
[L6569]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]               assume msgsender_MSG != null;
[L6544]               Balance[this] := 0;
[L6545]               balances_BasicToken[this] := zeroRefintArr();
[L6546]               sum_balances0[this] := 0;
[L6547]               totalSupply__BasicToken[this] := 0;
[L6569]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6570]   COND FALSE  !(revert)
[L6754]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6755]   COND FALSE  !(revert)
[L6758]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6717]               assume msgsender_MSG != null;
[L6718]               Balance[this] := 0;
[L6719]               allowed_StandardToken[this] := zeroRefRefintArr();
[L6720]               sum_allowed1[this] := 0;
[L6758]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6759]   COND FALSE  !(revert)
[L7184]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7185]   COND FALSE  !(revert)
[L7188]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6988]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6971]               assume msgsender_MSG != null;
[L6972]               Balance[this] := 0;
[L6973]               owner_Ownable[this] := null;
[L6975]               owner_Ownable[this] := msgsender_MSG;
[L6988]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6989]   COND FALSE  !(revert)
[L7188]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7189]   COND FALSE  !(revert)
[L7192]   CALL        call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7136]               assume msgsender_MSG != null;
[L7137]               Balance[this] := 0;
[L7138]               mintingFinished_MintableToken[this] := false;
[L7192]   RET         call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7193]   COND FALSE  !(revert)
[L8816]   RET         call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L8817]   COND FALSE  !(revert)
[L8820]   CALL        call FreezableMintableToken_FreezableMintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8749]               assume msgsender_MSG != null;
[L8750]               Balance[this] := 0;
[L8820]   RET         call FreezableMintableToken_FreezableMintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8821]   COND FALSE  !(revert)
[L9237]   RET         call FreezableMintableToken_FreezableMintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9238]   COND FALSE  !(revert)
[L9241]   CALL        call BurnableToken_BurnableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L8536]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L8536]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L8537]   COND FALSE  !(revert)
[L8540]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6565]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   COND FALSE  !(revert)
[L6569]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]               assume msgsender_MSG != null;
[L6544]               Balance[this] := 0;
[L6545]               balances_BasicToken[this] := zeroRefintArr();
[L6546]               sum_balances0[this] := 0;
[L6547]               totalSupply__BasicToken[this] := 0;
[L6569]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6570]   COND FALSE  !(revert)
[L8540]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L8541]   COND FALSE  !(revert)
[L8544]   CALL        call BurnableToken_BurnableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8513]               assume msgsender_MSG != null;
[L8514]               Balance[this] := 0;
[L8544]   RET         call BurnableToken_BurnableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8545]   COND FALSE  !(revert)
[L9241]   RET         call BurnableToken_BurnableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9242]   COND FALSE  !(revert)
[L9245]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L8662]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6988]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6971]               assume msgsender_MSG != null;
[L6972]               Balance[this] := 0;
[L6973]               owner_Ownable[this] := null;
[L6975]               owner_Ownable[this] := msgsender_MSG;
[L6988]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6989]   COND FALSE  !(revert)
[L8662]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L8663]   COND FALSE  !(revert)
[L8666]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8642]               assume msgsender_MSG != null;
[L8643]               Balance[this] := 0;
[L8644]               paused_Pausable[this] := false;
[L8666]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8667]   COND FALSE  !(revert)
[L9245]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L9246]   COND FALSE  !(revert)
[L9249]   CALL        call MainToken_MainToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9133]               assume msgsender_MSG != null;
[L9134]               Balance[this] := 0;
[L9135]               initialized_MainToken[this] := false;
[L9137]   CALL        call init_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9404]   COND FALSE  !(!!initialized_MainToken[this])
[L9408]               initialized_MainToken[this] := true;
[L9409]   COND FALSE  !(PAUSED_Consts[this])
[L9419]   COND FALSE  !(!CONTINUE_MINTING_Consts[this])
[L9429]               assert { :EventEmitted "Initialized_MainToken" } true;
[L9137]   RET         call init_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9138]   COND FALSE  !(revert)
[L9141]   COND TRUE   DType[this] == MainToken
[L9142]   CALL        call transferOwnership~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, TARGET_USER_Consts[this]);
[L7055]   CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L12332]  COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L7055]   RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7056]   COND FALSE  !(revert)
[L7059]   COND TRUE   DType[this] == MainToken
[L7060]   CALL        call _transferOwnership~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, _newOwner_s558);
[L7103]               __var_11 := null;
[L7104]   COND FALSE  !(!(_newOwner_s581 != null))
[L7108]               assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L7109]               owner_Ownable[this] := _newOwner_s581;
[L7060]   RET         call _transferOwnership~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, _newOwner_s558);
[L7061]   COND FALSE  !(revert)
[L9142]   RET         call transferOwnership~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, TARGET_USER_Consts[this]);
[L9143]   COND FALSE  !(revert)
[L9249]   RET         call MainToken_MainToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9250]   COND FALSE  !(revert)
[L4222]   RET         call MainToken_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4223]               assume !revert && gas >= 0;
[L14384]  RET         call MainToken_MainToken(this, msgsender_MSG, msgvalue_MSG);
[L14385]              assume !revert && gas >= 0;
[L14388]  CALL        call CorralChoice_MainToken(this);
[L14045]              havoc msgsender_MSG;
[L14046]              havoc msgvalue_MSG;
[L14047]              havoc choice;
[L14048]              havoc __ret_0_totalSupply;
[L14049]              havoc _owner_s729;
[L14050]              havoc balance_s729;
[L14051]              havoc _to_s1572;
[L14052]              havoc _value_s1572;
[L14053]              havoc _success_s1572;
[L14054]              havoc _owner_s395;
[L14055]              havoc _spender_s395;
[L14056]              havoc __ret_0_allowance;
[L14057]              havoc _from_s1551;
[L14058]              havoc _to_s1551;
[L14059]              havoc _value_s1551;
[L14060]              havoc _success_s1551;
[L14061]              havoc _spender_s379;
[L14062]              havoc _value_s379;
[L14063]              havoc __ret_0_approve;
[L14064]              havoc _spender_s437;
[L14065]              havoc _addedValue_s437;
[L14066]              havoc __ret_0_increaseApproval;
[L14067]              havoc _spender_s497;
[L14068]              havoc _subtractedValue_s497;
[L14069]              havoc __ret_0_decreaseApproval;
[L14070]              havoc __ret_0_owner;
[L14071]              havoc _newOwner_s558;
[L14072]              havoc __ret_0_mintingFinished;
[L14073]              havoc _to_s664;
[L14074]              havoc _amount_s664;
[L14075]              havoc __ret_0_mint;
[L14076]              havoc __ret_0_finishMinting;
[L14077]              havoc _owner_s742;
[L14078]              havoc balance_s742;
[L14079]              havoc _owner_s754;
[L14080]              havoc balance_s754;
[L14081]              havoc _addr_s792;
[L14082]              havoc count_s792;
[L14083]              havoc _addr_s849;
[L14084]              havoc _index_s849;
[L14085]              havoc _release_s849;
[L14086]              havoc _balance_s849;
[L14087]              havoc _to_s938;
[L14088]              havoc _amount_s938;
[L14089]              havoc _until_s938;
[L14090]              havoc tokens_s1107;
[L14091]              havoc _value_s1261;
[L14092]              havoc __ret_0_paused;
[L14093]              havoc _to_s1449;
[L14094]              havoc _amount_s1449;
[L14095]              havoc _until_s1449;
[L14096]              havoc __ret_0_mintAndFreeze;
[L14097]              havoc __ret_0_TOKEN_DECIMALS;
[L14098]              havoc __ret_0_TOKEN_DECIMALS_UINT8;
[L14099]              havoc __ret_0_TOKEN_DECIMAL_MULTIPLIER;
[L14100]              havoc __ret_0_TOKEN_NAME;
[L14101]              havoc __ret_0_TOKEN_SYMBOL;
[L14102]              havoc __ret_0_PAUSED;
[L14103]              havoc __ret_0_TARGET_USER;
[L14104]              havoc __ret_0_CONTINUE_MINTING;
[L14105]              havoc __ret_0_initialized;
[L14106]              havoc _name_s1511;
[L14107]              havoc _symbol_s1519;
[L14108]              havoc _decimals_s1527;
[L14109]              havoc tmpNow;
[L14110]              havoc gas;
[L14111]              assume gas > 4000000 && gas <= 8000000;
[L14112]              tmpNow := now;
[L14113]              havoc now;
[L14114]              assume now > tmpNow;
[L14115]              assume msgsender_MSG != null;
[L14116]              assume DType[msgsender_MSG] != ERC20Basic;
[L14117]              assume DType[msgsender_MSG] != SafeMath;
[L14118]              assume DType[msgsender_MSG] != BasicToken;
[L14119]              assume DType[msgsender_MSG] != ERC20;
[L14120]              assume DType[msgsender_MSG] != StandardToken;
[L14121]              assume DType[msgsender_MSG] != Ownable;
[L14122]              assume DType[msgsender_MSG] != MintableToken;
[L14123]              assume DType[msgsender_MSG] != FreezableToken;
[L14124]              assume DType[msgsender_MSG] != BurnableToken;
[L14125]              assume DType[msgsender_MSG] != Pausable;
[L14126]              assume DType[msgsender_MSG] != FreezableMintableToken;
[L14127]              assume DType[msgsender_MSG] != Consts;
[L14128]              assume DType[msgsender_MSG] != MainToken;
[L14129]              Alloc[msgsender_MSG] := true;
[L14130]  COND FALSE  !(choice == 38)
[L14136]  COND FALSE  !(choice == 37)
[L14142]  COND FALSE  !(choice == 36)
[L14149]  COND FALSE  !(choice == 35)
[L14155]  COND FALSE  !(choice == 34)
[L14162]  COND FALSE  !(choice == 33)
[L14169]  COND FALSE  !(choice == 32)
[L14176]  COND FALSE  !(choice == 31)
[L14183]  COND FALSE  !(choice == 30)
[L14189]  COND FALSE  !(choice == 29)
[L14195]  COND FALSE  !(choice == 28)
[L14201]  COND FALSE  !(choice == 27)
[L14207]  COND FALSE  !(choice == 26)
[L14214]  COND FALSE  !(choice == 25)
[L14220]  COND FALSE  !(choice == 24)
[L14226]  COND FALSE  !(choice == 23)
[L14232]  COND FALSE  !(choice == 22)
[L14238]  COND FALSE  !(choice == 21)
[L14245]  COND FALSE  !(choice == 20)
[L14253]  COND TRUE   choice == 19
[L14254]              gas := gas - 21000;
[L14255]  COND TRUE   gas >= 0
[L14256]              assume msgvalue_MSG == 0;
[L14257]  CALL        call releaseOnce_FreezableToken(this, msgsender_MSG, msgvalue_MSG);
[L2507]               havoc __exception;
[L2508]               revert := false;
[L2509]   COND FALSE  !(__exception)
[L2546]   CALL        call releaseOnce_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7989]               __var_31 := 0 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7990]   COND TRUE   DType[this] == MainToken
[L7991]   CALL        call headKey_s1054 := toKey~address~uint256_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 0 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L8244]               result_s1122 := 39480772448535941496179204954862169494691089619604794184232587696854102179840;
[L8246]               havoc result_s1122;
[L8247]               havoc result_s1122;
[L8248]               havoc result_s1122;
[L8249]               havoc result_s1122;
[L7991]   RET         call headKey_s1054 := toKey~address~uint256_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 0 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L7992]   COND FALSE  !(revert)
[L8008]               headKey_s1054 := headKey_s1054;
[L8009]               head_s1054 := chains_FreezableToken[this][headKey_s1054];
[L8010]   COND FALSE  !(!(head_s1054 != 0))
[L8014]               __var_32 := now % 18446744073709551616;
[L8015]   COND FALSE  !(!(now % 18446744073709551616 > head_s1054))
[L8019]               __var_33 := head_s1054 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8020]   COND FALSE  !(DType[this] == MainToken)
[L8025]   COND FALSE  !(DType[this] == FreezableMintableToken)
[L8030]   COND TRUE   DType[this] == FreezableToken
[L8031]   CALL        call currentKey_s1054 := toKey~address~uint256_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, head_s1054 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L8244]               result_s1122 := 39480772448535941496179204954862169494691089619604794184232587696854102179840;
[L8246]               havoc result_s1122;
[L8247]               havoc result_s1122;
[L8248]               havoc result_s1122;
[L8249]               havoc result_s1122;
[L8031]   RET         call currentKey_s1054 := toKey~address~uint256_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, head_s1054 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L8032]   COND FALSE  !(revert)
[L8038]               currentKey_s1054 := currentKey_s1054;
[L8039]               next_s1054 := chains_FreezableToken[this][currentKey_s1054];
[L8040]               amount_s1054 := freezings_FreezableToken[this][currentKey_s1054];
[L8041]               sum_freezings3[this] := sum_freezings3[this] - freezings_FreezableToken[this][currentKey_s1054];
[L8042]               freezings_FreezableToken[this][currentKey_s1054] := 0;
[L8043]   CALL        call __var_34 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][msgsender_MSG], amount_s1054);
[L6523]               c_s122 := (a_s122 + b_s122) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6524]               assert c_s122 >= a_s122;
[L6525]               c_s122 := c_s122;
[L8043]   RET         call __var_34 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][msgsender_MSG], amount_s1054);
[L8044]   COND FALSE  !(revert)
[L8047]               sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][msgsender_MSG];
[L8048]               balances_BasicToken[this][msgsender_MSG] := __var_34;
[L8049]               sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][msgsender_MSG];
[L8050]   CALL        call __var_35 := sub~uint256~uint256_SafeMath__success(this, this, 0, freezingBalance_FreezableToken[this][msgsender_MSG], amount_s1054);
[L6509]               assert b_s98 <= a_s98;
[L6510]               __ret_0_ := (a_s98 - b_s98) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8050]   RET         call __var_35 := sub~uint256~uint256_SafeMath__success(this, this, 0, freezingBalance_FreezableToken[this][msgsender_MSG], amount_s1054);
[L8051]   COND FALSE  !(revert)
[L8054]               sum_freezingBalance4[this] := sum_freezingBalance4[this] - freezingBalance_FreezableToken[this][msgsender_MSG];
[L8055]               freezingBalance_FreezableToken[this][msgsender_MSG] := __var_35;
[L8056]               sum_freezingBalance4[this] := sum_freezingBalance4[this] + freezingBalance_FreezableToken[this][msgsender_MSG];
[L8057]   COND TRUE   next_s1054 == 0
[L8058]               sum_chains2[this] := sum_chains2[this] - chains_FreezableToken[this][headKey_s1054];
[L8059]               chains_FreezableToken[this][headKey_s1054] := 0;
[L8067]               assert { :EventEmitted "Released_FreezableToken" } true;
[L2546]   RET         call releaseOnce_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L2547]               assume !revert && gas >= 0;
[L14257]  RET         call releaseOnce_FreezableToken(this, msgsender_MSG, msgvalue_MSG);
[L14388]  RET         call CorralChoice_MainToken(this);
[L14388]  CALL        call CorralChoice_MainToken(this);
[L14045]              havoc msgsender_MSG;
[L14046]              havoc msgvalue_MSG;
[L14047]              havoc choice;
[L14048]              havoc __ret_0_totalSupply;
[L14049]              havoc _owner_s729;
[L14050]              havoc balance_s729;
[L14051]              havoc _to_s1572;
[L14052]              havoc _value_s1572;
[L14053]              havoc _success_s1572;
[L14054]              havoc _owner_s395;
[L14055]              havoc _spender_s395;
[L14056]              havoc __ret_0_allowance;
[L14057]              havoc _from_s1551;
[L14058]              havoc _to_s1551;
[L14059]              havoc _value_s1551;
[L14060]              havoc _success_s1551;
[L14061]              havoc _spender_s379;
[L14062]              havoc _value_s379;
[L14063]              havoc __ret_0_approve;
[L14064]              havoc _spender_s437;
[L14065]              havoc _addedValue_s437;
[L14066]              havoc __ret_0_increaseApproval;
[L14067]              havoc _spender_s497;
[L14068]              havoc _subtractedValue_s497;
[L14069]              havoc __ret_0_decreaseApproval;
[L14070]              havoc __ret_0_owner;
[L14071]              havoc _newOwner_s558;
[L14072]              havoc __ret_0_mintingFinished;
[L14073]              havoc _to_s664;
[L14074]              havoc _amount_s664;
[L14075]              havoc __ret_0_mint;
[L14076]              havoc __ret_0_finishMinting;
[L14077]              havoc _owner_s742;
[L14078]              havoc balance_s742;
[L14079]              havoc _owner_s754;
[L14080]              havoc balance_s754;
[L14081]              havoc _addr_s792;
[L14082]              havoc count_s792;
[L14083]              havoc _addr_s849;
[L14084]              havoc _index_s849;
[L14085]              havoc _release_s849;
[L14086]              havoc _balance_s849;
[L14087]              havoc _to_s938;
[L14088]              havoc _amount_s938;
[L14089]              havoc _until_s938;
[L14090]              havoc tokens_s1107;
[L14091]              havoc _value_s1261;
[L14092]              havoc __ret_0_paused;
[L14093]              havoc _to_s1449;
[L14094]              havoc _amount_s1449;
[L14095]              havoc _until_s1449;
[L14096]              havoc __ret_0_mintAndFreeze;
[L14097]              havoc __ret_0_TOKEN_DECIMALS;
[L14098]              havoc __ret_0_TOKEN_DECIMALS_UINT8;
[L14099]              havoc __ret_0_TOKEN_DECIMAL_MULTIPLIER;
[L14100]              havoc __ret_0_TOKEN_NAME;
[L14101]              havoc __ret_0_TOKEN_SYMBOL;
[L14102]              havoc __ret_0_PAUSED;
[L14103]              havoc __ret_0_TARGET_USER;
[L14104]              havoc __ret_0_CONTINUE_MINTING;
[L14105]              havoc __ret_0_initialized;
[L14106]              havoc _name_s1511;
[L14107]              havoc _symbol_s1519;
[L14108]              havoc _decimals_s1527;
[L14109]              havoc tmpNow;
[L14110]              havoc gas;
[L14111]              assume gas > 4000000 && gas <= 8000000;
[L14112]              tmpNow := now;
[L14113]              havoc now;
[L14114]              assume now > tmpNow;
[L14115]              assume msgsender_MSG != null;
[L14116]              assume DType[msgsender_MSG] != ERC20Basic;
[L14117]              assume DType[msgsender_MSG] != SafeMath;
[L14118]              assume DType[msgsender_MSG] != BasicToken;
[L14119]              assume DType[msgsender_MSG] != ERC20;
[L14120]              assume DType[msgsender_MSG] != StandardToken;
[L14121]              assume DType[msgsender_MSG] != Ownable;
[L14122]              assume DType[msgsender_MSG] != MintableToken;
[L14123]              assume DType[msgsender_MSG] != FreezableToken;
[L14124]              assume DType[msgsender_MSG] != BurnableToken;
[L14125]              assume DType[msgsender_MSG] != Pausable;
[L14126]              assume DType[msgsender_MSG] != FreezableMintableToken;
[L14127]              assume DType[msgsender_MSG] != Consts;
[L14128]              assume DType[msgsender_MSG] != MainToken;
[L14129]              Alloc[msgsender_MSG] := true;
[L14130]  COND FALSE  !(choice == 38)
[L14136]  COND TRUE   choice == 37
[L14137]              gas := gas - 21000;
[L14138]  COND TRUE   gas >= 0
[L14139]              assume msgvalue_MSG == 0;
[L14140]  CALL        call balance_s729 := balanceOf~address_FreezableToken(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume balances_BasicToken[this][_owner_s729] >= 0 && balances_BasicToken[this][_owner_s729] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_balanceOf_FreezableToken0 := true;
[L2]                  call_balanceOf_FreezableToken0 := false;
[L2]                  revert := revert_hold;
[L1999]               havoc __exception;
[L2000]               revert := false;
[L2001]   COND FALSE  !(__exception)
[L2038]   CALL        call balance_s729 := balanceOf~address_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L7405]   COND TRUE   DType[this] == MainToken
[L7406]   CALL        call __var_14 := balanceOf~address_BasicToken__success(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L6660]               __ret_0_ := balances_BasicToken[this][_owner_s214];
[L7406]   RET         call __var_14 := balanceOf~address_BasicToken__success(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L7407]   COND FALSE  !(revert)
[L7423]               balance_s729 := (__var_14 + freezingBalance_FreezableToken[this][_owner_s729]) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2038]   RET         call balance_s729 := balanceOf~address_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L2039]               assume !revert && gas >= 0;
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume !((((((((((balance_s729 == balances_BasicToken[this][_owner_s729] && totalSupply__BasicToken[this] == old(totalSupply__BasicToken[this])) && balances_BasicToken[this] == old(balances_BasicToken[this])) && allowed_StandardToken[this] == old(allowed_StandardToken[this])) && initialized_MainToken[this] == old(initialized_MainToken[this])) && paused_Pausable[this] == old(paused_Pausable[this])) && mintingFinished_MintableToken[this] == old(mintingFinished_MintableToken[this])) && owner_Ownable[this] == old(owner_Ownable[this])) && chains_FreezableToken[this] == old(chains_FreezableToken[this])) && freezings_FreezableToken[this] == old(freezings_FreezableToken[this])) && freezingBalance_FreezableToken[this] == old(freezingBalance_FreezableToken[this]));
[L2]                  revert := revert_hold;
[L14140]  RET         call balance_s729 := balanceOf~address_FreezableToken(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L14388]  RET         call CorralChoice_MainToken(this);

Loop:
[L14388]  CALL        call CorralChoice_MainToken(this);
[L14045]              havoc msgsender_MSG;
[L14046]              havoc msgvalue_MSG;
[L14047]              havoc choice;
[L14048]              havoc __ret_0_totalSupply;
[L14049]              havoc _owner_s729;
[L14050]              havoc balance_s729;
[L14051]              havoc _to_s1572;
[L14052]              havoc _value_s1572;
[L14053]              havoc _success_s1572;
[L14054]              havoc _owner_s395;
[L14055]              havoc _spender_s395;
[L14056]              havoc __ret_0_allowance;
[L14057]              havoc _from_s1551;
[L14058]              havoc _to_s1551;
[L14059]              havoc _value_s1551;
[L14060]              havoc _success_s1551;
[L14061]              havoc _spender_s379;
[L14062]              havoc _value_s379;
[L14063]              havoc __ret_0_approve;
[L14064]              havoc _spender_s437;
[L14065]              havoc _addedValue_s437;
[L14066]              havoc __ret_0_increaseApproval;
[L14067]              havoc _spender_s497;
[L14068]              havoc _subtractedValue_s497;
[L14069]              havoc __ret_0_decreaseApproval;
[L14070]              havoc __ret_0_owner;
[L14071]              havoc _newOwner_s558;
[L14072]              havoc __ret_0_mintingFinished;
[L14073]              havoc _to_s664;
[L14074]              havoc _amount_s664;
[L14075]              havoc __ret_0_mint;
[L14076]              havoc __ret_0_finishMinting;
[L14077]              havoc _owner_s742;
[L14078]              havoc balance_s742;
[L14079]              havoc _owner_s754;
[L14080]              havoc balance_s754;
[L14081]              havoc _addr_s792;
[L14082]              havoc count_s792;
[L14083]              havoc _addr_s849;
[L14084]              havoc _index_s849;
[L14085]              havoc _release_s849;
[L14086]              havoc _balance_s849;
[L14087]              havoc _to_s938;
[L14088]              havoc _amount_s938;
[L14089]              havoc _until_s938;
[L14090]              havoc tokens_s1107;
[L14091]              havoc _value_s1261;
[L14092]              havoc __ret_0_paused;
[L14093]              havoc _to_s1449;
[L14094]              havoc _amount_s1449;
[L14095]              havoc _until_s1449;
[L14096]              havoc __ret_0_mintAndFreeze;
[L14097]              havoc __ret_0_TOKEN_DECIMALS;
[L14098]              havoc __ret_0_TOKEN_DECIMALS_UINT8;
[L14099]              havoc __ret_0_TOKEN_DECIMAL_MULTIPLIER;
[L14100]              havoc __ret_0_TOKEN_NAME;
[L14101]              havoc __ret_0_TOKEN_SYMBOL;
[L14102]              havoc __ret_0_PAUSED;
[L14103]              havoc __ret_0_TARGET_USER;
[L14104]              havoc __ret_0_CONTINUE_MINTING;
[L14105]              havoc __ret_0_initialized;
[L14106]              havoc _name_s1511;
[L14107]              havoc _symbol_s1519;
[L14108]              havoc _decimals_s1527;
[L14109]              havoc tmpNow;
[L14110]              havoc gas;
[L14111]              assume gas > 4000000 && gas <= 8000000;
[L14112]              tmpNow := now;
[L14113]              havoc now;
[L14114]              assume now > tmpNow;
[L14115]              assume msgsender_MSG != null;
[L14116]              assume DType[msgsender_MSG] != ERC20Basic;
[L14117]              assume DType[msgsender_MSG] != SafeMath;
[L14118]              assume DType[msgsender_MSG] != BasicToken;
[L14119]              assume DType[msgsender_MSG] != ERC20;
[L14120]              assume DType[msgsender_MSG] != StandardToken;
[L14121]              assume DType[msgsender_MSG] != Ownable;
[L14122]              assume DType[msgsender_MSG] != MintableToken;
[L14123]              assume DType[msgsender_MSG] != FreezableToken;
[L14124]              assume DType[msgsender_MSG] != BurnableToken;
[L14125]              assume DType[msgsender_MSG] != Pausable;
[L14126]              assume DType[msgsender_MSG] != FreezableMintableToken;
[L14127]              assume DType[msgsender_MSG] != Consts;
[L14128]              assume DType[msgsender_MSG] != MainToken;
[L14129]              Alloc[msgsender_MSG] := true;
[L14130]  COND TRUE   choice == 38
[L14131]              gas := gas - 21000;
[L14132]  COND FALSE  !(gas >= 0)
[L14388]  RET         call CorralChoice_MainToken(this);

[2020-11-24 21:26:04,922 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-24 21:26:04,922 INFO  L82        PathProgramCache]: Analyzing trace with hash 1415832634, now seen corresponding path program 1 times
[2020-11-24 21:26:04,923 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-24 21:26:04,957 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-24 21:26:05,516 INFO  L134       CoverageAnalysis]: Checked inductivity of 9919 backedges. 1 proven. 0 refuted. 0 times theorem prover too weak. 9918 trivial. 0 not checked.
[2020-11-24 21:26:05,516 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-24 21:26:05,516 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [3] imperfect sequences [] total 3
[2020-11-24 21:26:05,517 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-24 21:26:05,517 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-11-24 21:26:05,517 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-11-24 21:26:05,517 INFO  L87              Difference]: Start difference. First operand 5423 states and 6103 transitions. cyclomatic complexity: 696 Second operand 3 states.
[2020-11-24 21:26:05,576 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-24 21:26:05,576 INFO  L93              Difference]: Finished difference Result 5493 states and 6185 transitions.
[2020-11-24 21:26:05,576 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-11-24 21:26:05,576 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 5493 states and 6185 transitions.
[2020-11-24 21:26:05,584 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-24 21:26:05,594 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 5493 states to 5493 states and 6185 transitions.
[2020-11-24 21:26:05,594 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1058
[2020-11-24 21:26:05,595 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1058
[2020-11-24 21:26:05,595 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 5493 states and 6185 transitions.
[2020-11-24 21:26:05,597 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-24 21:26:05,597 INFO  L728         BuchiCegarLoop]: Abstraction has 5493 states and 6185 transitions.
[2020-11-24 21:26:05,601 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 5493 states and 6185 transitions.
[2020-11-24 21:26:05,625 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 5493 to 5437.
[2020-11-24 21:26:05,625 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 5437 states.
[2020-11-24 21:26:05,631 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 5437 states to 5437 states and 6117 transitions.
[2020-11-24 21:26:05,631 INFO  L751         BuchiCegarLoop]: Abstraction has 5437 states and 6117 transitions.
[2020-11-24 21:26:05,631 INFO  L631         BuchiCegarLoop]: Abstraction has 5437 states and 6117 transitions.
[2020-11-24 21:26:05,631 INFO  L445         BuchiCegarLoop]: ======== Iteration 9============
[2020-11-24 21:26:05,631 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 5437 states and 6117 transitions.
[2020-11-24 21:26:05,636 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-24 21:26:05,636 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-24 21:26:05,636 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-24 21:26:05,638 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [38, 38, 38, 38, 38, 38, 38, 38, 38, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-24 21:26:05,638 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  success_balanceOf_FreezableToken0 := false;
[L2]                  call_balanceOf_FreezableToken0 := false;
[L2]      CALL        call main();
[L14378]              assume null == 0;
[L14379]  CALL        call this := FreshRefGenerator__success();
[L6396]               havoc newRef;
[L6397]               assume Alloc[newRef] == false;
[L6398]               Alloc[newRef] := true;
[L6399]               assume newRef != null;
[L14379]  RET         call this := FreshRefGenerator__success();
[L14380]              assume now >= 0;
[L14381]              assume DType[this] == MainToken;
[L14382]              assume msgvalue_MSG == 0;
[L14383]              gas := gas - 53000;
[L14384]  CALL        call MainToken_MainToken(this, msgsender_MSG, msgvalue_MSG);
[L4183]               havoc __exception;
[L4184]               revert := false;
[L4185]   COND FALSE  !(__exception)
[L4222]   CALL        call MainToken_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9205]   CALL        call Consts_Consts__success(this, msgsender_MSG, msgvalue_MSG);
[L9007]   CALL        call Consts_Consts_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8983]               assume msgsender_MSG != null;
[L8984]               Balance[this] := 0;
[L8985]               TOKEN_DECIMALS_Consts[this] := 18;
[L8986]               TOKEN_DECIMALS_UINT8_Consts[this] := 18;
[L8987]               TOKEN_DECIMAL_MULTIPLIER_Consts[this] := nonlinearPow(10, TOKEN_DECIMALS_Consts[this]) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8988]               TOKEN_NAME_Consts[this] := -1051245219;
[L8989]               TOKEN_SYMBOL_Consts[this] := -1804535220;
[L8990]               PAUSED_Consts[this] := false;
[L8991]               __var_52 := ConstantToRef(-210822415442009814958929812751043848690848471787);
[L8992]               TARGET_USER_Consts[this] := ConstantToRef(-210822415442009814958929812751043848690848471787);
[L8993]               CONTINUE_MINTING_Consts[this] := true;
[L9007]   RET         call Consts_Consts_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9008]   COND FALSE  !(revert)
[L9205]   RET         call Consts_Consts__success(this, msgsender_MSG, msgvalue_MSG);
[L9206]   COND FALSE  !(revert)
[L9209]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L9209]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L9210]   COND FALSE  !(revert)
[L9213]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6694]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6694]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6695]   COND FALSE  !(revert)
[L6698]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6675]               assume msgsender_MSG != null;
[L6676]               Balance[this] := 0;
[L6698]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6699]   COND FALSE  !(revert)
[L9213]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L9214]   COND FALSE  !(revert)
[L9217]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6565]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   COND FALSE  !(revert)
[L6569]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]               assume msgsender_MSG != null;
[L6544]               Balance[this] := 0;
[L6545]               balances_BasicToken[this] := zeroRefintArr();
[L6546]               sum_balances0[this] := 0;
[L6547]               totalSupply__BasicToken[this] := 0;
[L6569]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6570]   COND FALSE  !(revert)
[L9217]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9218]   COND FALSE  !(revert)
[L9221]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6746]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6746]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6747]   COND FALSE  !(revert)
[L6750]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6694]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6694]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6695]   COND FALSE  !(revert)
[L6698]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6675]               assume msgsender_MSG != null;
[L6676]               Balance[this] := 0;
[L6698]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6699]   COND FALSE  !(revert)
[L6750]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6751]   COND FALSE  !(revert)
[L6754]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6565]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   COND FALSE  !(revert)
[L6569]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]               assume msgsender_MSG != null;
[L6544]               Balance[this] := 0;
[L6545]               balances_BasicToken[this] := zeroRefintArr();
[L6546]               sum_balances0[this] := 0;
[L6547]               totalSupply__BasicToken[this] := 0;
[L6569]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6570]   COND FALSE  !(revert)
[L6754]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6755]   COND FALSE  !(revert)
[L6758]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6717]               assume msgsender_MSG != null;
[L6718]               Balance[this] := 0;
[L6719]               allowed_StandardToken[this] := zeroRefRefintArr();
[L6720]               sum_allowed1[this] := 0;
[L6758]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6759]   COND FALSE  !(revert)
[L9221]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9222]   COND FALSE  !(revert)
[L9225]   CALL        call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7353]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L7353]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7354]   COND FALSE  !(revert)
[L7357]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6694]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6694]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6695]   COND FALSE  !(revert)
[L6698]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6675]               assume msgsender_MSG != null;
[L6676]               Balance[this] := 0;
[L6698]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6699]   COND FALSE  !(revert)
[L7357]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7358]   COND FALSE  !(revert)
[L7361]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6565]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   COND FALSE  !(revert)
[L6569]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]               assume msgsender_MSG != null;
[L6544]               Balance[this] := 0;
[L6545]               balances_BasicToken[this] := zeroRefintArr();
[L6546]               sum_balances0[this] := 0;
[L6547]               totalSupply__BasicToken[this] := 0;
[L6569]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6570]   COND FALSE  !(revert)
[L7361]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7362]   COND FALSE  !(revert)
[L7365]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6746]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6746]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6747]   COND FALSE  !(revert)
[L6750]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6694]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6694]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6695]   COND FALSE  !(revert)
[L6698]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6675]               assume msgsender_MSG != null;
[L6676]               Balance[this] := 0;
[L6698]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6699]   COND FALSE  !(revert)
[L6750]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6751]   COND FALSE  !(revert)
[L6754]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6565]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   COND FALSE  !(revert)
[L6569]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]               assume msgsender_MSG != null;
[L6544]               Balance[this] := 0;
[L6545]               balances_BasicToken[this] := zeroRefintArr();
[L6546]               sum_balances0[this] := 0;
[L6547]               totalSupply__BasicToken[this] := 0;
[L6569]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6570]   COND FALSE  !(revert)
[L6754]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6755]   COND FALSE  !(revert)
[L6758]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6717]               assume msgsender_MSG != null;
[L6718]               Balance[this] := 0;
[L6719]               allowed_StandardToken[this] := zeroRefRefintArr();
[L6720]               sum_allowed1[this] := 0;
[L6758]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6759]   COND FALSE  !(revert)
[L7365]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7366]   COND FALSE  !(revert)
[L7369]   CALL        call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7316]               assume msgsender_MSG != null;
[L7317]               Balance[this] := 0;
[L7318]               chains_FreezableToken[this] := zerointintArr();
[L7319]               sum_chains2[this] := 0;
[L7320]               freezings_FreezableToken[this] := zerointintArr();
[L7321]               sum_freezings3[this] := 0;
[L7322]               freezingBalance_FreezableToken[this] := zeroRefintArr();
[L7323]               sum_freezingBalance4[this] := 0;
[L7369]   RET         call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7370]   COND FALSE  !(revert)
[L9225]   RET         call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9226]   COND FALSE  !(revert)
[L9229]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6988]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6971]               assume msgsender_MSG != null;
[L6972]               Balance[this] := 0;
[L6973]               owner_Ownable[this] := null;
[L6975]               owner_Ownable[this] := msgsender_MSG;
[L6988]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6989]   COND FALSE  !(revert)
[L9229]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L9230]   COND FALSE  !(revert)
[L9233]   CALL        call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7172]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L7172]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7173]   COND FALSE  !(revert)
[L7176]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6694]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6694]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6695]   COND FALSE  !(revert)
[L6698]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6675]               assume msgsender_MSG != null;
[L6676]               Balance[this] := 0;
[L6698]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6699]   COND FALSE  !(revert)
[L7176]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7177]   COND FALSE  !(revert)
[L7180]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6565]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   COND FALSE  !(revert)
[L6569]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]               assume msgsender_MSG != null;
[L6544]               Balance[this] := 0;
[L6545]               balances_BasicToken[this] := zeroRefintArr();
[L6546]               sum_balances0[this] := 0;
[L6547]               totalSupply__BasicToken[this] := 0;
[L6569]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6570]   COND FALSE  !(revert)
[L7180]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7181]   COND FALSE  !(revert)
[L7184]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6746]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6746]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6747]   COND FALSE  !(revert)
[L6750]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6694]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6694]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6695]   COND FALSE  !(revert)
[L6698]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6675]               assume msgsender_MSG != null;
[L6676]               Balance[this] := 0;
[L6698]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6699]   COND FALSE  !(revert)
[L6750]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6751]   COND FALSE  !(revert)
[L6754]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6565]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   COND FALSE  !(revert)
[L6569]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]               assume msgsender_MSG != null;
[L6544]               Balance[this] := 0;
[L6545]               balances_BasicToken[this] := zeroRefintArr();
[L6546]               sum_balances0[this] := 0;
[L6547]               totalSupply__BasicToken[this] := 0;
[L6569]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6570]   COND FALSE  !(revert)
[L6754]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6755]   COND FALSE  !(revert)
[L6758]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6717]               assume msgsender_MSG != null;
[L6718]               Balance[this] := 0;
[L6719]               allowed_StandardToken[this] := zeroRefRefintArr();
[L6720]               sum_allowed1[this] := 0;
[L6758]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6759]   COND FALSE  !(revert)
[L7184]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7185]   COND FALSE  !(revert)
[L7188]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6988]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6971]               assume msgsender_MSG != null;
[L6972]               Balance[this] := 0;
[L6973]               owner_Ownable[this] := null;
[L6975]               owner_Ownable[this] := msgsender_MSG;
[L6988]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6989]   COND FALSE  !(revert)
[L7188]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7189]   COND FALSE  !(revert)
[L7192]   CALL        call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7136]               assume msgsender_MSG != null;
[L7137]               Balance[this] := 0;
[L7138]               mintingFinished_MintableToken[this] := false;
[L7192]   RET         call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7193]   COND FALSE  !(revert)
[L9233]   RET         call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9234]   COND FALSE  !(revert)
[L9237]   CALL        call FreezableMintableToken_FreezableMintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L8792]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L8792]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L8793]   COND FALSE  !(revert)
[L8796]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6694]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6694]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6695]   COND FALSE  !(revert)
[L6698]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6675]               assume msgsender_MSG != null;
[L6676]               Balance[this] := 0;
[L6698]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6699]   COND FALSE  !(revert)
[L8796]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L8797]   COND FALSE  !(revert)
[L8800]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6565]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   COND FALSE  !(revert)
[L6569]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]               assume msgsender_MSG != null;
[L6544]               Balance[this] := 0;
[L6545]               balances_BasicToken[this] := zeroRefintArr();
[L6546]               sum_balances0[this] := 0;
[L6547]               totalSupply__BasicToken[this] := 0;
[L6569]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6570]   COND FALSE  !(revert)
[L8800]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L8801]   COND FALSE  !(revert)
[L8804]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6746]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6746]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6747]   COND FALSE  !(revert)
[L6750]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6694]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6694]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6695]   COND FALSE  !(revert)
[L6698]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6675]               assume msgsender_MSG != null;
[L6676]               Balance[this] := 0;
[L6698]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6699]   COND FALSE  !(revert)
[L6750]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6751]   COND FALSE  !(revert)
[L6754]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6565]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   COND FALSE  !(revert)
[L6569]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]               assume msgsender_MSG != null;
[L6544]               Balance[this] := 0;
[L6545]               balances_BasicToken[this] := zeroRefintArr();
[L6546]               sum_balances0[this] := 0;
[L6547]               totalSupply__BasicToken[this] := 0;
[L6569]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6570]   COND FALSE  !(revert)
[L6754]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6755]   COND FALSE  !(revert)
[L6758]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6717]               assume msgsender_MSG != null;
[L6718]               Balance[this] := 0;
[L6719]               allowed_StandardToken[this] := zeroRefRefintArr();
[L6720]               sum_allowed1[this] := 0;
[L6758]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6759]   COND FALSE  !(revert)
[L8804]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L8805]   COND FALSE  !(revert)
[L8808]   CALL        call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7353]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L7353]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7354]   COND FALSE  !(revert)
[L7357]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6694]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6694]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6695]   COND FALSE  !(revert)
[L6698]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6675]               assume msgsender_MSG != null;
[L6676]               Balance[this] := 0;
[L6698]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6699]   COND FALSE  !(revert)
[L7357]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7358]   COND FALSE  !(revert)
[L7361]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6565]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   COND FALSE  !(revert)
[L6569]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]               assume msgsender_MSG != null;
[L6544]               Balance[this] := 0;
[L6545]               balances_BasicToken[this] := zeroRefintArr();
[L6546]               sum_balances0[this] := 0;
[L6547]               totalSupply__BasicToken[this] := 0;
[L6569]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6570]   COND FALSE  !(revert)
[L7361]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7362]   COND FALSE  !(revert)
[L7365]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6746]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6746]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6747]   COND FALSE  !(revert)
[L6750]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6694]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6694]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6695]   COND FALSE  !(revert)
[L6698]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6675]               assume msgsender_MSG != null;
[L6676]               Balance[this] := 0;
[L6698]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6699]   COND FALSE  !(revert)
[L6750]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6751]   COND FALSE  !(revert)
[L6754]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6565]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   COND FALSE  !(revert)
[L6569]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]               assume msgsender_MSG != null;
[L6544]               Balance[this] := 0;
[L6545]               balances_BasicToken[this] := zeroRefintArr();
[L6546]               sum_balances0[this] := 0;
[L6547]               totalSupply__BasicToken[this] := 0;
[L6569]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6570]   COND FALSE  !(revert)
[L6754]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6755]   COND FALSE  !(revert)
[L6758]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6717]               assume msgsender_MSG != null;
[L6718]               Balance[this] := 0;
[L6719]               allowed_StandardToken[this] := zeroRefRefintArr();
[L6720]               sum_allowed1[this] := 0;
[L6758]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6759]   COND FALSE  !(revert)
[L7365]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7366]   COND FALSE  !(revert)
[L7369]   CALL        call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7316]               assume msgsender_MSG != null;
[L7317]               Balance[this] := 0;
[L7318]               chains_FreezableToken[this] := zerointintArr();
[L7319]               sum_chains2[this] := 0;
[L7320]               freezings_FreezableToken[this] := zerointintArr();
[L7321]               sum_freezings3[this] := 0;
[L7322]               freezingBalance_FreezableToken[this] := zeroRefintArr();
[L7323]               sum_freezingBalance4[this] := 0;
[L7369]   RET         call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7370]   COND FALSE  !(revert)
[L8808]   RET         call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L8809]   COND FALSE  !(revert)
[L8812]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6988]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6971]               assume msgsender_MSG != null;
[L6972]               Balance[this] := 0;
[L6973]               owner_Ownable[this] := null;
[L6975]               owner_Ownable[this] := msgsender_MSG;
[L6988]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6989]   COND FALSE  !(revert)
[L8812]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L8813]   COND FALSE  !(revert)
[L8816]   CALL        call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7172]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L7172]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7173]   COND FALSE  !(revert)
[L7176]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6694]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6694]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6695]   COND FALSE  !(revert)
[L6698]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6675]               assume msgsender_MSG != null;
[L6676]               Balance[this] := 0;
[L6698]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6699]   COND FALSE  !(revert)
[L7176]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7177]   COND FALSE  !(revert)
[L7180]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6565]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   COND FALSE  !(revert)
[L6569]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]               assume msgsender_MSG != null;
[L6544]               Balance[this] := 0;
[L6545]               balances_BasicToken[this] := zeroRefintArr();
[L6546]               sum_balances0[this] := 0;
[L6547]               totalSupply__BasicToken[this] := 0;
[L6569]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6570]   COND FALSE  !(revert)
[L7180]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7181]   COND FALSE  !(revert)
[L7184]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6746]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6746]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6747]   COND FALSE  !(revert)
[L6750]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6694]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6694]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6695]   COND FALSE  !(revert)
[L6698]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6675]               assume msgsender_MSG != null;
[L6676]               Balance[this] := 0;
[L6698]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6699]   COND FALSE  !(revert)
[L6750]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6751]   COND FALSE  !(revert)
[L6754]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6565]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   COND FALSE  !(revert)
[L6569]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]               assume msgsender_MSG != null;
[L6544]               Balance[this] := 0;
[L6545]               balances_BasicToken[this] := zeroRefintArr();
[L6546]               sum_balances0[this] := 0;
[L6547]               totalSupply__BasicToken[this] := 0;
[L6569]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6570]   COND FALSE  !(revert)
[L6754]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6755]   COND FALSE  !(revert)
[L6758]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6717]               assume msgsender_MSG != null;
[L6718]               Balance[this] := 0;
[L6719]               allowed_StandardToken[this] := zeroRefRefintArr();
[L6720]               sum_allowed1[this] := 0;
[L6758]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6759]   COND FALSE  !(revert)
[L7184]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7185]   COND FALSE  !(revert)
[L7188]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6988]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6971]               assume msgsender_MSG != null;
[L6972]               Balance[this] := 0;
[L6973]               owner_Ownable[this] := null;
[L6975]               owner_Ownable[this] := msgsender_MSG;
[L6988]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6989]   COND FALSE  !(revert)
[L7188]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7189]   COND FALSE  !(revert)
[L7192]   CALL        call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7136]               assume msgsender_MSG != null;
[L7137]               Balance[this] := 0;
[L7138]               mintingFinished_MintableToken[this] := false;
[L7192]   RET         call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7193]   COND FALSE  !(revert)
[L8816]   RET         call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L8817]   COND FALSE  !(revert)
[L8820]   CALL        call FreezableMintableToken_FreezableMintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8749]               assume msgsender_MSG != null;
[L8750]               Balance[this] := 0;
[L8820]   RET         call FreezableMintableToken_FreezableMintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8821]   COND FALSE  !(revert)
[L9237]   RET         call FreezableMintableToken_FreezableMintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9238]   COND FALSE  !(revert)
[L9241]   CALL        call BurnableToken_BurnableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L8536]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L8536]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L8537]   COND FALSE  !(revert)
[L8540]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6565]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   COND FALSE  !(revert)
[L6569]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]               assume msgsender_MSG != null;
[L6544]               Balance[this] := 0;
[L6545]               balances_BasicToken[this] := zeroRefintArr();
[L6546]               sum_balances0[this] := 0;
[L6547]               totalSupply__BasicToken[this] := 0;
[L6569]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6570]   COND FALSE  !(revert)
[L8540]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L8541]   COND FALSE  !(revert)
[L8544]   CALL        call BurnableToken_BurnableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8513]               assume msgsender_MSG != null;
[L8514]               Balance[this] := 0;
[L8544]   RET         call BurnableToken_BurnableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8545]   COND FALSE  !(revert)
[L9241]   RET         call BurnableToken_BurnableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9242]   COND FALSE  !(revert)
[L9245]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L8662]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6988]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6971]               assume msgsender_MSG != null;
[L6972]               Balance[this] := 0;
[L6973]               owner_Ownable[this] := null;
[L6975]               owner_Ownable[this] := msgsender_MSG;
[L6988]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6989]   COND FALSE  !(revert)
[L8662]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L8663]   COND FALSE  !(revert)
[L8666]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8642]               assume msgsender_MSG != null;
[L8643]               Balance[this] := 0;
[L8644]               paused_Pausable[this] := false;
[L8666]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8667]   COND FALSE  !(revert)
[L9245]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L9246]   COND FALSE  !(revert)
[L9249]   CALL        call MainToken_MainToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9133]               assume msgsender_MSG != null;
[L9134]               Balance[this] := 0;
[L9135]               initialized_MainToken[this] := false;
[L9137]   CALL        call init_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9404]   COND FALSE  !(!!initialized_MainToken[this])
[L9408]               initialized_MainToken[this] := true;
[L9409]   COND FALSE  !(PAUSED_Consts[this])
[L9419]   COND FALSE  !(!CONTINUE_MINTING_Consts[this])
[L9429]               assert { :EventEmitted "Initialized_MainToken" } true;
[L9137]   RET         call init_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9138]   COND FALSE  !(revert)
[L9141]   COND TRUE   DType[this] == MainToken
[L9142]   CALL        call transferOwnership~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, TARGET_USER_Consts[this]);
[L7055]   CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L12332]  COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L7055]   RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7056]   COND FALSE  !(revert)
[L7059]   COND TRUE   DType[this] == MainToken
[L7060]   CALL        call _transferOwnership~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, _newOwner_s558);
[L7103]               __var_11 := null;
[L7104]   COND FALSE  !(!(_newOwner_s581 != null))
[L7108]               assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L7109]               owner_Ownable[this] := _newOwner_s581;
[L7060]   RET         call _transferOwnership~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, _newOwner_s558);
[L7061]   COND FALSE  !(revert)
[L9142]   RET         call transferOwnership~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, TARGET_USER_Consts[this]);
[L9143]   COND FALSE  !(revert)
[L9249]   RET         call MainToken_MainToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9250]   COND FALSE  !(revert)
[L4222]   RET         call MainToken_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4223]               assume !revert && gas >= 0;
[L14384]  RET         call MainToken_MainToken(this, msgsender_MSG, msgvalue_MSG);
[L14385]              assume !revert && gas >= 0;
[L14388]  CALL        call CorralChoice_MainToken(this);
[L14045]              havoc msgsender_MSG;
[L14046]              havoc msgvalue_MSG;
[L14047]              havoc choice;
[L14048]              havoc __ret_0_totalSupply;
[L14049]              havoc _owner_s729;
[L14050]              havoc balance_s729;
[L14051]              havoc _to_s1572;
[L14052]              havoc _value_s1572;
[L14053]              havoc _success_s1572;
[L14054]              havoc _owner_s395;
[L14055]              havoc _spender_s395;
[L14056]              havoc __ret_0_allowance;
[L14057]              havoc _from_s1551;
[L14058]              havoc _to_s1551;
[L14059]              havoc _value_s1551;
[L14060]              havoc _success_s1551;
[L14061]              havoc _spender_s379;
[L14062]              havoc _value_s379;
[L14063]              havoc __ret_0_approve;
[L14064]              havoc _spender_s437;
[L14065]              havoc _addedValue_s437;
[L14066]              havoc __ret_0_increaseApproval;
[L14067]              havoc _spender_s497;
[L14068]              havoc _subtractedValue_s497;
[L14069]              havoc __ret_0_decreaseApproval;
[L14070]              havoc __ret_0_owner;
[L14071]              havoc _newOwner_s558;
[L14072]              havoc __ret_0_mintingFinished;
[L14073]              havoc _to_s664;
[L14074]              havoc _amount_s664;
[L14075]              havoc __ret_0_mint;
[L14076]              havoc __ret_0_finishMinting;
[L14077]              havoc _owner_s742;
[L14078]              havoc balance_s742;
[L14079]              havoc _owner_s754;
[L14080]              havoc balance_s754;
[L14081]              havoc _addr_s792;
[L14082]              havoc count_s792;
[L14083]              havoc _addr_s849;
[L14084]              havoc _index_s849;
[L14085]              havoc _release_s849;
[L14086]              havoc _balance_s849;
[L14087]              havoc _to_s938;
[L14088]              havoc _amount_s938;
[L14089]              havoc _until_s938;
[L14090]              havoc tokens_s1107;
[L14091]              havoc _value_s1261;
[L14092]              havoc __ret_0_paused;
[L14093]              havoc _to_s1449;
[L14094]              havoc _amount_s1449;
[L14095]              havoc _until_s1449;
[L14096]              havoc __ret_0_mintAndFreeze;
[L14097]              havoc __ret_0_TOKEN_DECIMALS;
[L14098]              havoc __ret_0_TOKEN_DECIMALS_UINT8;
[L14099]              havoc __ret_0_TOKEN_DECIMAL_MULTIPLIER;
[L14100]              havoc __ret_0_TOKEN_NAME;
[L14101]              havoc __ret_0_TOKEN_SYMBOL;
[L14102]              havoc __ret_0_PAUSED;
[L14103]              havoc __ret_0_TARGET_USER;
[L14104]              havoc __ret_0_CONTINUE_MINTING;
[L14105]              havoc __ret_0_initialized;
[L14106]              havoc _name_s1511;
[L14107]              havoc _symbol_s1519;
[L14108]              havoc _decimals_s1527;
[L14109]              havoc tmpNow;
[L14110]              havoc gas;
[L14111]              assume gas > 4000000 && gas <= 8000000;
[L14112]              tmpNow := now;
[L14113]              havoc now;
[L14114]              assume now > tmpNow;
[L14115]              assume msgsender_MSG != null;
[L14116]              assume DType[msgsender_MSG] != ERC20Basic;
[L14117]              assume DType[msgsender_MSG] != SafeMath;
[L14118]              assume DType[msgsender_MSG] != BasicToken;
[L14119]              assume DType[msgsender_MSG] != ERC20;
[L14120]              assume DType[msgsender_MSG] != StandardToken;
[L14121]              assume DType[msgsender_MSG] != Ownable;
[L14122]              assume DType[msgsender_MSG] != MintableToken;
[L14123]              assume DType[msgsender_MSG] != FreezableToken;
[L14124]              assume DType[msgsender_MSG] != BurnableToken;
[L14125]              assume DType[msgsender_MSG] != Pausable;
[L14126]              assume DType[msgsender_MSG] != FreezableMintableToken;
[L14127]              assume DType[msgsender_MSG] != Consts;
[L14128]              assume DType[msgsender_MSG] != MainToken;
[L14129]              Alloc[msgsender_MSG] := true;
[L14130]  COND FALSE  !(choice == 38)
[L14136]  COND FALSE  !(choice == 37)
[L14142]  COND FALSE  !(choice == 36)
[L14149]  COND FALSE  !(choice == 35)
[L14155]  COND FALSE  !(choice == 34)
[L14162]  COND FALSE  !(choice == 33)
[L14169]  COND FALSE  !(choice == 32)
[L14176]  COND FALSE  !(choice == 31)
[L14183]  COND FALSE  !(choice == 30)
[L14189]  COND FALSE  !(choice == 29)
[L14195]  COND FALSE  !(choice == 28)
[L14201]  COND FALSE  !(choice == 27)
[L14207]  COND FALSE  !(choice == 26)
[L14214]  COND FALSE  !(choice == 25)
[L14220]  COND FALSE  !(choice == 24)
[L14226]  COND FALSE  !(choice == 23)
[L14232]  COND FALSE  !(choice == 22)
[L14238]  COND FALSE  !(choice == 21)
[L14245]  COND FALSE  !(choice == 20)
[L14253]  COND TRUE   choice == 19
[L14254]              gas := gas - 21000;
[L14255]  COND TRUE   gas >= 0
[L14256]              assume msgvalue_MSG == 0;
[L14257]  CALL        call releaseOnce_FreezableToken(this, msgsender_MSG, msgvalue_MSG);
[L2507]               havoc __exception;
[L2508]               revert := false;
[L2509]   COND FALSE  !(__exception)
[L2546]   CALL        call releaseOnce_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7989]               __var_31 := 0 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7990]   COND TRUE   DType[this] == MainToken
[L7991]   CALL        call headKey_s1054 := toKey~address~uint256_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 0 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L8244]               result_s1122 := 39480772448535941496179204954862169494691089619604794184232587696854102179840;
[L8246]               havoc result_s1122;
[L8247]               havoc result_s1122;
[L8248]               havoc result_s1122;
[L8249]               havoc result_s1122;
[L7991]   RET         call headKey_s1054 := toKey~address~uint256_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 0 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L7992]   COND FALSE  !(revert)
[L8008]               headKey_s1054 := headKey_s1054;
[L8009]               head_s1054 := chains_FreezableToken[this][headKey_s1054];
[L8010]   COND FALSE  !(!(head_s1054 != 0))
[L8014]               __var_32 := now % 18446744073709551616;
[L8015]   COND FALSE  !(!(now % 18446744073709551616 > head_s1054))
[L8019]               __var_33 := head_s1054 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8020]   COND TRUE   DType[this] == MainToken
[L8021]   CALL        call currentKey_s1054 := toKey~address~uint256_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, head_s1054 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L8244]               result_s1122 := 39480772448535941496179204954862169494691089619604794184232587696854102179840;
[L8246]               havoc result_s1122;
[L8247]               havoc result_s1122;
[L8248]               havoc result_s1122;
[L8249]               havoc result_s1122;
[L8021]   RET         call currentKey_s1054 := toKey~address~uint256_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, head_s1054 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L8022]   COND FALSE  !(revert)
[L8038]               currentKey_s1054 := currentKey_s1054;
[L8039]               next_s1054 := chains_FreezableToken[this][currentKey_s1054];
[L8040]               amount_s1054 := freezings_FreezableToken[this][currentKey_s1054];
[L8041]               sum_freezings3[this] := sum_freezings3[this] - freezings_FreezableToken[this][currentKey_s1054];
[L8042]               freezings_FreezableToken[this][currentKey_s1054] := 0;
[L8043]   CALL        call __var_34 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][msgsender_MSG], amount_s1054);
[L6523]               c_s122 := (a_s122 + b_s122) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6524]               assert c_s122 >= a_s122;
[L6525]               c_s122 := c_s122;
[L8043]   RET         call __var_34 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][msgsender_MSG], amount_s1054);
[L8044]   COND FALSE  !(revert)
[L8047]               sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][msgsender_MSG];
[L8048]               balances_BasicToken[this][msgsender_MSG] := __var_34;
[L8049]               sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][msgsender_MSG];
[L8050]   CALL        call __var_35 := sub~uint256~uint256_SafeMath__success(this, this, 0, freezingBalance_FreezableToken[this][msgsender_MSG], amount_s1054);
[L6509]               assert b_s98 <= a_s98;
[L6510]               __ret_0_ := (a_s98 - b_s98) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8050]   RET         call __var_35 := sub~uint256~uint256_SafeMath__success(this, this, 0, freezingBalance_FreezableToken[this][msgsender_MSG], amount_s1054);
[L8051]   COND FALSE  !(revert)
[L8054]               sum_freezingBalance4[this] := sum_freezingBalance4[this] - freezingBalance_FreezableToken[this][msgsender_MSG];
[L8055]               freezingBalance_FreezableToken[this][msgsender_MSG] := __var_35;
[L8056]               sum_freezingBalance4[this] := sum_freezingBalance4[this] + freezingBalance_FreezableToken[this][msgsender_MSG];
[L8057]   COND TRUE   next_s1054 == 0
[L8058]               sum_chains2[this] := sum_chains2[this] - chains_FreezableToken[this][headKey_s1054];
[L8059]               chains_FreezableToken[this][headKey_s1054] := 0;
[L8067]               assert { :EventEmitted "Released_FreezableToken" } true;
[L2546]   RET         call releaseOnce_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L2547]               assume !revert && gas >= 0;
[L14257]  RET         call releaseOnce_FreezableToken(this, msgsender_MSG, msgvalue_MSG);
[L14388]  RET         call CorralChoice_MainToken(this);
[L14388]  CALL        call CorralChoice_MainToken(this);
[L14045]              havoc msgsender_MSG;
[L14046]              havoc msgvalue_MSG;
[L14047]              havoc choice;
[L14048]              havoc __ret_0_totalSupply;
[L14049]              havoc _owner_s729;
[L14050]              havoc balance_s729;
[L14051]              havoc _to_s1572;
[L14052]              havoc _value_s1572;
[L14053]              havoc _success_s1572;
[L14054]              havoc _owner_s395;
[L14055]              havoc _spender_s395;
[L14056]              havoc __ret_0_allowance;
[L14057]              havoc _from_s1551;
[L14058]              havoc _to_s1551;
[L14059]              havoc _value_s1551;
[L14060]              havoc _success_s1551;
[L14061]              havoc _spender_s379;
[L14062]              havoc _value_s379;
[L14063]              havoc __ret_0_approve;
[L14064]              havoc _spender_s437;
[L14065]              havoc _addedValue_s437;
[L14066]              havoc __ret_0_increaseApproval;
[L14067]              havoc _spender_s497;
[L14068]              havoc _subtractedValue_s497;
[L14069]              havoc __ret_0_decreaseApproval;
[L14070]              havoc __ret_0_owner;
[L14071]              havoc _newOwner_s558;
[L14072]              havoc __ret_0_mintingFinished;
[L14073]              havoc _to_s664;
[L14074]              havoc _amount_s664;
[L14075]              havoc __ret_0_mint;
[L14076]              havoc __ret_0_finishMinting;
[L14077]              havoc _owner_s742;
[L14078]              havoc balance_s742;
[L14079]              havoc _owner_s754;
[L14080]              havoc balance_s754;
[L14081]              havoc _addr_s792;
[L14082]              havoc count_s792;
[L14083]              havoc _addr_s849;
[L14084]              havoc _index_s849;
[L14085]              havoc _release_s849;
[L14086]              havoc _balance_s849;
[L14087]              havoc _to_s938;
[L14088]              havoc _amount_s938;
[L14089]              havoc _until_s938;
[L14090]              havoc tokens_s1107;
[L14091]              havoc _value_s1261;
[L14092]              havoc __ret_0_paused;
[L14093]              havoc _to_s1449;
[L14094]              havoc _amount_s1449;
[L14095]              havoc _until_s1449;
[L14096]              havoc __ret_0_mintAndFreeze;
[L14097]              havoc __ret_0_TOKEN_DECIMALS;
[L14098]              havoc __ret_0_TOKEN_DECIMALS_UINT8;
[L14099]              havoc __ret_0_TOKEN_DECIMAL_MULTIPLIER;
[L14100]              havoc __ret_0_TOKEN_NAME;
[L14101]              havoc __ret_0_TOKEN_SYMBOL;
[L14102]              havoc __ret_0_PAUSED;
[L14103]              havoc __ret_0_TARGET_USER;
[L14104]              havoc __ret_0_CONTINUE_MINTING;
[L14105]              havoc __ret_0_initialized;
[L14106]              havoc _name_s1511;
[L14107]              havoc _symbol_s1519;
[L14108]              havoc _decimals_s1527;
[L14109]              havoc tmpNow;
[L14110]              havoc gas;
[L14111]              assume gas > 4000000 && gas <= 8000000;
[L14112]              tmpNow := now;
[L14113]              havoc now;
[L14114]              assume now > tmpNow;
[L14115]              assume msgsender_MSG != null;
[L14116]              assume DType[msgsender_MSG] != ERC20Basic;
[L14117]              assume DType[msgsender_MSG] != SafeMath;
[L14118]              assume DType[msgsender_MSG] != BasicToken;
[L14119]              assume DType[msgsender_MSG] != ERC20;
[L14120]              assume DType[msgsender_MSG] != StandardToken;
[L14121]              assume DType[msgsender_MSG] != Ownable;
[L14122]              assume DType[msgsender_MSG] != MintableToken;
[L14123]              assume DType[msgsender_MSG] != FreezableToken;
[L14124]              assume DType[msgsender_MSG] != BurnableToken;
[L14125]              assume DType[msgsender_MSG] != Pausable;
[L14126]              assume DType[msgsender_MSG] != FreezableMintableToken;
[L14127]              assume DType[msgsender_MSG] != Consts;
[L14128]              assume DType[msgsender_MSG] != MainToken;
[L14129]              Alloc[msgsender_MSG] := true;
[L14130]  COND FALSE  !(choice == 38)
[L14136]  COND TRUE   choice == 37
[L14137]              gas := gas - 21000;
[L14138]  COND TRUE   gas >= 0
[L14139]              assume msgvalue_MSG == 0;
[L14140]  CALL        call balance_s729 := balanceOf~address_FreezableToken(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume balances_BasicToken[this][_owner_s729] >= 0 && balances_BasicToken[this][_owner_s729] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_balanceOf_FreezableToken0 := true;
[L2]                  call_balanceOf_FreezableToken0 := false;
[L2]                  revert := revert_hold;
[L1999]               havoc __exception;
[L2000]               revert := false;
[L2001]   COND FALSE  !(__exception)
[L2038]   CALL        call balance_s729 := balanceOf~address_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L7405]   COND TRUE   DType[this] == MainToken
[L7406]   CALL        call __var_14 := balanceOf~address_BasicToken__success(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L6660]               __ret_0_ := balances_BasicToken[this][_owner_s214];
[L7406]   RET         call __var_14 := balanceOf~address_BasicToken__success(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L7407]   COND FALSE  !(revert)
[L7423]               balance_s729 := (__var_14 + freezingBalance_FreezableToken[this][_owner_s729]) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2038]   RET         call balance_s729 := balanceOf~address_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L2039]               assume !revert && gas >= 0;
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume !((((((((((balance_s729 == balances_BasicToken[this][_owner_s729] && totalSupply__BasicToken[this] == old(totalSupply__BasicToken[this])) && balances_BasicToken[this] == old(balances_BasicToken[this])) && allowed_StandardToken[this] == old(allowed_StandardToken[this])) && initialized_MainToken[this] == old(initialized_MainToken[this])) && paused_Pausable[this] == old(paused_Pausable[this])) && mintingFinished_MintableToken[this] == old(mintingFinished_MintableToken[this])) && owner_Ownable[this] == old(owner_Ownable[this])) && chains_FreezableToken[this] == old(chains_FreezableToken[this])) && freezings_FreezableToken[this] == old(freezings_FreezableToken[this])) && freezingBalance_FreezableToken[this] == old(freezingBalance_FreezableToken[this]));
[L2]                  revert := revert_hold;
[L14140]  RET         call balance_s729 := balanceOf~address_FreezableToken(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L14388]  RET         call CorralChoice_MainToken(this);

Loop:
[L14388]  CALL        call CorralChoice_MainToken(this);
[L14045]              havoc msgsender_MSG;
[L14046]              havoc msgvalue_MSG;
[L14047]              havoc choice;
[L14048]              havoc __ret_0_totalSupply;
[L14049]              havoc _owner_s729;
[L14050]              havoc balance_s729;
[L14051]              havoc _to_s1572;
[L14052]              havoc _value_s1572;
[L14053]              havoc _success_s1572;
[L14054]              havoc _owner_s395;
[L14055]              havoc _spender_s395;
[L14056]              havoc __ret_0_allowance;
[L14057]              havoc _from_s1551;
[L14058]              havoc _to_s1551;
[L14059]              havoc _value_s1551;
[L14060]              havoc _success_s1551;
[L14061]              havoc _spender_s379;
[L14062]              havoc _value_s379;
[L14063]              havoc __ret_0_approve;
[L14064]              havoc _spender_s437;
[L14065]              havoc _addedValue_s437;
[L14066]              havoc __ret_0_increaseApproval;
[L14067]              havoc _spender_s497;
[L14068]              havoc _subtractedValue_s497;
[L14069]              havoc __ret_0_decreaseApproval;
[L14070]              havoc __ret_0_owner;
[L14071]              havoc _newOwner_s558;
[L14072]              havoc __ret_0_mintingFinished;
[L14073]              havoc _to_s664;
[L14074]              havoc _amount_s664;
[L14075]              havoc __ret_0_mint;
[L14076]              havoc __ret_0_finishMinting;
[L14077]              havoc _owner_s742;
[L14078]              havoc balance_s742;
[L14079]              havoc _owner_s754;
[L14080]              havoc balance_s754;
[L14081]              havoc _addr_s792;
[L14082]              havoc count_s792;
[L14083]              havoc _addr_s849;
[L14084]              havoc _index_s849;
[L14085]              havoc _release_s849;
[L14086]              havoc _balance_s849;
[L14087]              havoc _to_s938;
[L14088]              havoc _amount_s938;
[L14089]              havoc _until_s938;
[L14090]              havoc tokens_s1107;
[L14091]              havoc _value_s1261;
[L14092]              havoc __ret_0_paused;
[L14093]              havoc _to_s1449;
[L14094]              havoc _amount_s1449;
[L14095]              havoc _until_s1449;
[L14096]              havoc __ret_0_mintAndFreeze;
[L14097]              havoc __ret_0_TOKEN_DECIMALS;
[L14098]              havoc __ret_0_TOKEN_DECIMALS_UINT8;
[L14099]              havoc __ret_0_TOKEN_DECIMAL_MULTIPLIER;
[L14100]              havoc __ret_0_TOKEN_NAME;
[L14101]              havoc __ret_0_TOKEN_SYMBOL;
[L14102]              havoc __ret_0_PAUSED;
[L14103]              havoc __ret_0_TARGET_USER;
[L14104]              havoc __ret_0_CONTINUE_MINTING;
[L14105]              havoc __ret_0_initialized;
[L14106]              havoc _name_s1511;
[L14107]              havoc _symbol_s1519;
[L14108]              havoc _decimals_s1527;
[L14109]              havoc tmpNow;
[L14110]              havoc gas;
[L14111]              assume gas > 4000000 && gas <= 8000000;
[L14112]              tmpNow := now;
[L14113]              havoc now;
[L14114]              assume now > tmpNow;
[L14115]              assume msgsender_MSG != null;
[L14116]              assume DType[msgsender_MSG] != ERC20Basic;
[L14117]              assume DType[msgsender_MSG] != SafeMath;
[L14118]              assume DType[msgsender_MSG] != BasicToken;
[L14119]              assume DType[msgsender_MSG] != ERC20;
[L14120]              assume DType[msgsender_MSG] != StandardToken;
[L14121]              assume DType[msgsender_MSG] != Ownable;
[L14122]              assume DType[msgsender_MSG] != MintableToken;
[L14123]              assume DType[msgsender_MSG] != FreezableToken;
[L14124]              assume DType[msgsender_MSG] != BurnableToken;
[L14125]              assume DType[msgsender_MSG] != Pausable;
[L14126]              assume DType[msgsender_MSG] != FreezableMintableToken;
[L14127]              assume DType[msgsender_MSG] != Consts;
[L14128]              assume DType[msgsender_MSG] != MainToken;
[L14129]              Alloc[msgsender_MSG] := true;
[L14130]  COND TRUE   choice == 38
[L14131]              gas := gas - 21000;
[L14132]  COND FALSE  !(gas >= 0)
[L14388]  RET         call CorralChoice_MainToken(this);

[2020-11-24 21:26:05,645 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-24 21:26:05,645 INFO  L82        PathProgramCache]: Analyzing trace with hash 82124619, now seen corresponding path program 1 times
[2020-11-24 21:26:05,647 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-24 21:26:05,683 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-24 21:26:06,405 INFO  L134       CoverageAnalysis]: Checked inductivity of 9919 backedges. 12 proven. 88 refuted. 0 times theorem prover too weak. 9819 trivial. 0 not checked.
[2020-11-24 21:26:06,405 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-24 21:26:06,405 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [15] total 15
[2020-11-24 21:26:06,406 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-24 21:26:06,406 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 15 interpolants.
[2020-11-24 21:26:06,406 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=33, Invalid=177, Unknown=0, NotChecked=0, Total=210
[2020-11-24 21:26:06,406 INFO  L87              Difference]: Start difference. First operand 5437 states and 6117 transitions. cyclomatic complexity: 696 Second operand 15 states.
[2020-11-24 21:26:09,847 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-24 21:26:09,847 INFO  L93              Difference]: Finished difference Result 5546 states and 6269 transitions.
[2020-11-24 21:26:09,847 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 17 states. 
[2020-11-24 21:26:09,847 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 5546 states and 6269 transitions.
[2020-11-24 21:26:09,857 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-24 21:26:09,867 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 5546 states to 5546 states and 6269 transitions.
[2020-11-24 21:26:09,867 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1108
[2020-11-24 21:26:09,868 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1108
[2020-11-24 21:26:09,868 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 5546 states and 6269 transitions.
[2020-11-24 21:26:09,871 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-24 21:26:09,871 INFO  L728         BuchiCegarLoop]: Abstraction has 5546 states and 6269 transitions.
[2020-11-24 21:26:09,875 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 5546 states and 6269 transitions.
[2020-11-24 21:26:09,898 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 5546 to 5524.
[2020-11-24 21:26:09,898 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 5524 states.
[2020-11-24 21:26:09,904 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 5524 states to 5524 states and 6225 transitions.
[2020-11-24 21:26:09,904 INFO  L751         BuchiCegarLoop]: Abstraction has 5524 states and 6225 transitions.
[2020-11-24 21:26:09,904 INFO  L631         BuchiCegarLoop]: Abstraction has 5524 states and 6225 transitions.
[2020-11-24 21:26:09,904 INFO  L445         BuchiCegarLoop]: ======== Iteration 10============
[2020-11-24 21:26:09,904 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 5524 states and 6225 transitions.
[2020-11-24 21:26:09,909 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-24 21:26:09,909 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-24 21:26:09,909 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-24 21:26:09,911 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [38, 38, 38, 38, 38, 38, 38, 38, 38, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-24 21:26:09,911 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  success_balanceOf_FreezableToken0 := false;
[L2]                  call_balanceOf_FreezableToken0 := false;
[L2]      CALL        call main();
[L14378]              assume null == 0;
[L14379]  CALL        call this := FreshRefGenerator__success();
[L6396]               havoc newRef;
[L6397]               assume Alloc[newRef] == false;
[L6398]               Alloc[newRef] := true;
[L6399]               assume newRef != null;
[L14379]  RET         call this := FreshRefGenerator__success();
[L14380]              assume now >= 0;
[L14381]              assume DType[this] == MainToken;
[L14382]              assume msgvalue_MSG == 0;
[L14383]              gas := gas - 53000;
[L14384]  CALL        call MainToken_MainToken(this, msgsender_MSG, msgvalue_MSG);
[L4183]               havoc __exception;
[L4184]               revert := false;
[L4185]   COND FALSE  !(__exception)
[L4222]   CALL        call MainToken_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9205]   CALL        call Consts_Consts__success(this, msgsender_MSG, msgvalue_MSG);
[L9007]   CALL        call Consts_Consts_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8983]               assume msgsender_MSG != null;
[L8984]               Balance[this] := 0;
[L8985]               TOKEN_DECIMALS_Consts[this] := 18;
[L8986]               TOKEN_DECIMALS_UINT8_Consts[this] := 18;
[L8987]               TOKEN_DECIMAL_MULTIPLIER_Consts[this] := nonlinearPow(10, TOKEN_DECIMALS_Consts[this]) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8988]               TOKEN_NAME_Consts[this] := -1051245219;
[L8989]               TOKEN_SYMBOL_Consts[this] := -1804535220;
[L8990]               PAUSED_Consts[this] := false;
[L8991]               __var_52 := ConstantToRef(-210822415442009814958929812751043848690848471787);
[L8992]               TARGET_USER_Consts[this] := ConstantToRef(-210822415442009814958929812751043848690848471787);
[L8993]               CONTINUE_MINTING_Consts[this] := true;
[L9007]   RET         call Consts_Consts_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9008]   COND FALSE  !(revert)
[L9205]   RET         call Consts_Consts__success(this, msgsender_MSG, msgvalue_MSG);
[L9206]   COND FALSE  !(revert)
[L9209]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L9209]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L9210]   COND FALSE  !(revert)
[L9213]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6694]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6694]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6695]   COND FALSE  !(revert)
[L6698]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6675]               assume msgsender_MSG != null;
[L6676]               Balance[this] := 0;
[L6698]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6699]   COND FALSE  !(revert)
[L9213]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L9214]   COND FALSE  !(revert)
[L9217]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6565]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   COND FALSE  !(revert)
[L6569]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]               assume msgsender_MSG != null;
[L6544]               Balance[this] := 0;
[L6545]               balances_BasicToken[this] := zeroRefintArr();
[L6546]               sum_balances0[this] := 0;
[L6547]               totalSupply__BasicToken[this] := 0;
[L6569]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6570]   COND FALSE  !(revert)
[L9217]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9218]   COND FALSE  !(revert)
[L9221]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6746]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6746]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6747]   COND FALSE  !(revert)
[L6750]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6694]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6694]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6695]   COND FALSE  !(revert)
[L6698]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6675]               assume msgsender_MSG != null;
[L6676]               Balance[this] := 0;
[L6698]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6699]   COND FALSE  !(revert)
[L6750]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6751]   COND FALSE  !(revert)
[L6754]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6565]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   COND FALSE  !(revert)
[L6569]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]               assume msgsender_MSG != null;
[L6544]               Balance[this] := 0;
[L6545]               balances_BasicToken[this] := zeroRefintArr();
[L6546]               sum_balances0[this] := 0;
[L6547]               totalSupply__BasicToken[this] := 0;
[L6569]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6570]   COND FALSE  !(revert)
[L6754]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6755]   COND FALSE  !(revert)
[L6758]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6717]               assume msgsender_MSG != null;
[L6718]               Balance[this] := 0;
[L6719]               allowed_StandardToken[this] := zeroRefRefintArr();
[L6720]               sum_allowed1[this] := 0;
[L6758]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6759]   COND FALSE  !(revert)
[L9221]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9222]   COND FALSE  !(revert)
[L9225]   CALL        call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7353]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L7353]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7354]   COND FALSE  !(revert)
[L7357]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6694]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6694]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6695]   COND FALSE  !(revert)
[L6698]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6675]               assume msgsender_MSG != null;
[L6676]               Balance[this] := 0;
[L6698]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6699]   COND FALSE  !(revert)
[L7357]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7358]   COND FALSE  !(revert)
[L7361]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6565]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   COND FALSE  !(revert)
[L6569]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]               assume msgsender_MSG != null;
[L6544]               Balance[this] := 0;
[L6545]               balances_BasicToken[this] := zeroRefintArr();
[L6546]               sum_balances0[this] := 0;
[L6547]               totalSupply__BasicToken[this] := 0;
[L6569]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6570]   COND FALSE  !(revert)
[L7361]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7362]   COND FALSE  !(revert)
[L7365]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6746]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6746]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6747]   COND FALSE  !(revert)
[L6750]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6694]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6694]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6695]   COND FALSE  !(revert)
[L6698]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6675]               assume msgsender_MSG != null;
[L6676]               Balance[this] := 0;
[L6698]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6699]   COND FALSE  !(revert)
[L6750]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6751]   COND FALSE  !(revert)
[L6754]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6565]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   COND FALSE  !(revert)
[L6569]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]               assume msgsender_MSG != null;
[L6544]               Balance[this] := 0;
[L6545]               balances_BasicToken[this] := zeroRefintArr();
[L6546]               sum_balances0[this] := 0;
[L6547]               totalSupply__BasicToken[this] := 0;
[L6569]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6570]   COND FALSE  !(revert)
[L6754]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6755]   COND FALSE  !(revert)
[L6758]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6717]               assume msgsender_MSG != null;
[L6718]               Balance[this] := 0;
[L6719]               allowed_StandardToken[this] := zeroRefRefintArr();
[L6720]               sum_allowed1[this] := 0;
[L6758]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6759]   COND FALSE  !(revert)
[L7365]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7366]   COND FALSE  !(revert)
[L7369]   CALL        call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7316]               assume msgsender_MSG != null;
[L7317]               Balance[this] := 0;
[L7318]               chains_FreezableToken[this] := zerointintArr();
[L7319]               sum_chains2[this] := 0;
[L7320]               freezings_FreezableToken[this] := zerointintArr();
[L7321]               sum_freezings3[this] := 0;
[L7322]               freezingBalance_FreezableToken[this] := zeroRefintArr();
[L7323]               sum_freezingBalance4[this] := 0;
[L7369]   RET         call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7370]   COND FALSE  !(revert)
[L9225]   RET         call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9226]   COND FALSE  !(revert)
[L9229]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6988]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6971]               assume msgsender_MSG != null;
[L6972]               Balance[this] := 0;
[L6973]               owner_Ownable[this] := null;
[L6975]               owner_Ownable[this] := msgsender_MSG;
[L6988]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6989]   COND FALSE  !(revert)
[L9229]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L9230]   COND FALSE  !(revert)
[L9233]   CALL        call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7172]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L7172]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7173]   COND FALSE  !(revert)
[L7176]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6694]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6694]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6695]   COND FALSE  !(revert)
[L6698]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6675]               assume msgsender_MSG != null;
[L6676]               Balance[this] := 0;
[L6698]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6699]   COND FALSE  !(revert)
[L7176]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7177]   COND FALSE  !(revert)
[L7180]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6565]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   COND FALSE  !(revert)
[L6569]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]               assume msgsender_MSG != null;
[L6544]               Balance[this] := 0;
[L6545]               balances_BasicToken[this] := zeroRefintArr();
[L6546]               sum_balances0[this] := 0;
[L6547]               totalSupply__BasicToken[this] := 0;
[L6569]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6570]   COND FALSE  !(revert)
[L7180]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7181]   COND FALSE  !(revert)
[L7184]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6746]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6746]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6747]   COND FALSE  !(revert)
[L6750]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6694]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6694]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6695]   COND FALSE  !(revert)
[L6698]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6675]               assume msgsender_MSG != null;
[L6676]               Balance[this] := 0;
[L6698]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6699]   COND FALSE  !(revert)
[L6750]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6751]   COND FALSE  !(revert)
[L6754]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6565]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   COND FALSE  !(revert)
[L6569]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]               assume msgsender_MSG != null;
[L6544]               Balance[this] := 0;
[L6545]               balances_BasicToken[this] := zeroRefintArr();
[L6546]               sum_balances0[this] := 0;
[L6547]               totalSupply__BasicToken[this] := 0;
[L6569]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6570]   COND FALSE  !(revert)
[L6754]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6755]   COND FALSE  !(revert)
[L6758]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6717]               assume msgsender_MSG != null;
[L6718]               Balance[this] := 0;
[L6719]               allowed_StandardToken[this] := zeroRefRefintArr();
[L6720]               sum_allowed1[this] := 0;
[L6758]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6759]   COND FALSE  !(revert)
[L7184]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7185]   COND FALSE  !(revert)
[L7188]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6988]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6971]               assume msgsender_MSG != null;
[L6972]               Balance[this] := 0;
[L6973]               owner_Ownable[this] := null;
[L6975]               owner_Ownable[this] := msgsender_MSG;
[L6988]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6989]   COND FALSE  !(revert)
[L7188]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7189]   COND FALSE  !(revert)
[L7192]   CALL        call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7136]               assume msgsender_MSG != null;
[L7137]               Balance[this] := 0;
[L7138]               mintingFinished_MintableToken[this] := false;
[L7192]   RET         call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7193]   COND FALSE  !(revert)
[L9233]   RET         call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9234]   COND FALSE  !(revert)
[L9237]   CALL        call FreezableMintableToken_FreezableMintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L8792]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L8792]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L8793]   COND FALSE  !(revert)
[L8796]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6694]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6694]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6695]   COND FALSE  !(revert)
[L6698]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6675]               assume msgsender_MSG != null;
[L6676]               Balance[this] := 0;
[L6698]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6699]   COND FALSE  !(revert)
[L8796]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L8797]   COND FALSE  !(revert)
[L8800]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6565]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   COND FALSE  !(revert)
[L6569]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]               assume msgsender_MSG != null;
[L6544]               Balance[this] := 0;
[L6545]               balances_BasicToken[this] := zeroRefintArr();
[L6546]               sum_balances0[this] := 0;
[L6547]               totalSupply__BasicToken[this] := 0;
[L6569]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6570]   COND FALSE  !(revert)
[L8800]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L8801]   COND FALSE  !(revert)
[L8804]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6746]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6746]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6747]   COND FALSE  !(revert)
[L6750]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6694]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6694]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6695]   COND FALSE  !(revert)
[L6698]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6675]               assume msgsender_MSG != null;
[L6676]               Balance[this] := 0;
[L6698]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6699]   COND FALSE  !(revert)
[L6750]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6751]   COND FALSE  !(revert)
[L6754]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6565]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   COND FALSE  !(revert)
[L6569]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]               assume msgsender_MSG != null;
[L6544]               Balance[this] := 0;
[L6545]               balances_BasicToken[this] := zeroRefintArr();
[L6546]               sum_balances0[this] := 0;
[L6547]               totalSupply__BasicToken[this] := 0;
[L6569]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6570]   COND FALSE  !(revert)
[L6754]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6755]   COND FALSE  !(revert)
[L6758]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6717]               assume msgsender_MSG != null;
[L6718]               Balance[this] := 0;
[L6719]               allowed_StandardToken[this] := zeroRefRefintArr();
[L6720]               sum_allowed1[this] := 0;
[L6758]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6759]   COND FALSE  !(revert)
[L8804]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L8805]   COND FALSE  !(revert)
[L8808]   CALL        call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7353]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L7353]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7354]   COND FALSE  !(revert)
[L7357]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6694]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6694]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6695]   COND FALSE  !(revert)
[L6698]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6675]               assume msgsender_MSG != null;
[L6676]               Balance[this] := 0;
[L6698]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6699]   COND FALSE  !(revert)
[L7357]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7358]   COND FALSE  !(revert)
[L7361]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6565]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   COND FALSE  !(revert)
[L6569]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]               assume msgsender_MSG != null;
[L6544]               Balance[this] := 0;
[L6545]               balances_BasicToken[this] := zeroRefintArr();
[L6546]               sum_balances0[this] := 0;
[L6547]               totalSupply__BasicToken[this] := 0;
[L6569]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6570]   COND FALSE  !(revert)
[L7361]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7362]   COND FALSE  !(revert)
[L7365]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6746]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6746]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6747]   COND FALSE  !(revert)
[L6750]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6694]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6694]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6695]   COND FALSE  !(revert)
[L6698]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6675]               assume msgsender_MSG != null;
[L6676]               Balance[this] := 0;
[L6698]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6699]   COND FALSE  !(revert)
[L6750]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6751]   COND FALSE  !(revert)
[L6754]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6565]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   COND FALSE  !(revert)
[L6569]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]               assume msgsender_MSG != null;
[L6544]               Balance[this] := 0;
[L6545]               balances_BasicToken[this] := zeroRefintArr();
[L6546]               sum_balances0[this] := 0;
[L6547]               totalSupply__BasicToken[this] := 0;
[L6569]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6570]   COND FALSE  !(revert)
[L6754]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6755]   COND FALSE  !(revert)
[L6758]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6717]               assume msgsender_MSG != null;
[L6718]               Balance[this] := 0;
[L6719]               allowed_StandardToken[this] := zeroRefRefintArr();
[L6720]               sum_allowed1[this] := 0;
[L6758]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6759]   COND FALSE  !(revert)
[L7365]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7366]   COND FALSE  !(revert)
[L7369]   CALL        call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7316]               assume msgsender_MSG != null;
[L7317]               Balance[this] := 0;
[L7318]               chains_FreezableToken[this] := zerointintArr();
[L7319]               sum_chains2[this] := 0;
[L7320]               freezings_FreezableToken[this] := zerointintArr();
[L7321]               sum_freezings3[this] := 0;
[L7322]               freezingBalance_FreezableToken[this] := zeroRefintArr();
[L7323]               sum_freezingBalance4[this] := 0;
[L7369]   RET         call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7370]   COND FALSE  !(revert)
[L8808]   RET         call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L8809]   COND FALSE  !(revert)
[L8812]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6988]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6971]               assume msgsender_MSG != null;
[L6972]               Balance[this] := 0;
[L6973]               owner_Ownable[this] := null;
[L6975]               owner_Ownable[this] := msgsender_MSG;
[L6988]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6989]   COND FALSE  !(revert)
[L8812]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L8813]   COND FALSE  !(revert)
[L8816]   CALL        call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7172]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L7172]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7173]   COND FALSE  !(revert)
[L7176]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6694]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6694]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6695]   COND FALSE  !(revert)
[L6698]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6675]               assume msgsender_MSG != null;
[L6676]               Balance[this] := 0;
[L6698]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6699]   COND FALSE  !(revert)
[L7176]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7177]   COND FALSE  !(revert)
[L7180]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6565]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   COND FALSE  !(revert)
[L6569]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]               assume msgsender_MSG != null;
[L6544]               Balance[this] := 0;
[L6545]               balances_BasicToken[this] := zeroRefintArr();
[L6546]               sum_balances0[this] := 0;
[L6547]               totalSupply__BasicToken[this] := 0;
[L6569]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6570]   COND FALSE  !(revert)
[L7180]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7181]   COND FALSE  !(revert)
[L7184]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6746]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6746]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6747]   COND FALSE  !(revert)
[L6750]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6694]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6694]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6695]   COND FALSE  !(revert)
[L6698]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6675]               assume msgsender_MSG != null;
[L6676]               Balance[this] := 0;
[L6698]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6699]   COND FALSE  !(revert)
[L6750]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6751]   COND FALSE  !(revert)
[L6754]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6565]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   COND FALSE  !(revert)
[L6569]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]               assume msgsender_MSG != null;
[L6544]               Balance[this] := 0;
[L6545]               balances_BasicToken[this] := zeroRefintArr();
[L6546]               sum_balances0[this] := 0;
[L6547]               totalSupply__BasicToken[this] := 0;
[L6569]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6570]   COND FALSE  !(revert)
[L6754]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6755]   COND FALSE  !(revert)
[L6758]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6717]               assume msgsender_MSG != null;
[L6718]               Balance[this] := 0;
[L6719]               allowed_StandardToken[this] := zeroRefRefintArr();
[L6720]               sum_allowed1[this] := 0;
[L6758]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6759]   COND FALSE  !(revert)
[L7184]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7185]   COND FALSE  !(revert)
[L7188]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6988]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6971]               assume msgsender_MSG != null;
[L6972]               Balance[this] := 0;
[L6973]               owner_Ownable[this] := null;
[L6975]               owner_Ownable[this] := msgsender_MSG;
[L6988]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6989]   COND FALSE  !(revert)
[L7188]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7189]   COND FALSE  !(revert)
[L7192]   CALL        call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7136]               assume msgsender_MSG != null;
[L7137]               Balance[this] := 0;
[L7138]               mintingFinished_MintableToken[this] := false;
[L7192]   RET         call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7193]   COND FALSE  !(revert)
[L8816]   RET         call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L8817]   COND FALSE  !(revert)
[L8820]   CALL        call FreezableMintableToken_FreezableMintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8749]               assume msgsender_MSG != null;
[L8750]               Balance[this] := 0;
[L8820]   RET         call FreezableMintableToken_FreezableMintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8821]   COND FALSE  !(revert)
[L9237]   RET         call FreezableMintableToken_FreezableMintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9238]   COND FALSE  !(revert)
[L9241]   CALL        call BurnableToken_BurnableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L8536]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L8536]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L8537]   COND FALSE  !(revert)
[L8540]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6565]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   COND FALSE  !(revert)
[L6569]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]               assume msgsender_MSG != null;
[L6544]               Balance[this] := 0;
[L6545]               balances_BasicToken[this] := zeroRefintArr();
[L6546]               sum_balances0[this] := 0;
[L6547]               totalSupply__BasicToken[this] := 0;
[L6569]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6570]   COND FALSE  !(revert)
[L8540]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L8541]   COND FALSE  !(revert)
[L8544]   CALL        call BurnableToken_BurnableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8513]               assume msgsender_MSG != null;
[L8514]               Balance[this] := 0;
[L8544]   RET         call BurnableToken_BurnableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8545]   COND FALSE  !(revert)
[L9241]   RET         call BurnableToken_BurnableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9242]   COND FALSE  !(revert)
[L9245]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L8662]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6988]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6971]               assume msgsender_MSG != null;
[L6972]               Balance[this] := 0;
[L6973]               owner_Ownable[this] := null;
[L6975]               owner_Ownable[this] := msgsender_MSG;
[L6988]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6989]   COND FALSE  !(revert)
[L8662]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L8663]   COND FALSE  !(revert)
[L8666]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8642]               assume msgsender_MSG != null;
[L8643]               Balance[this] := 0;
[L8644]               paused_Pausable[this] := false;
[L8666]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8667]   COND FALSE  !(revert)
[L9245]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L9246]   COND FALSE  !(revert)
[L9249]   CALL        call MainToken_MainToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9133]               assume msgsender_MSG != null;
[L9134]               Balance[this] := 0;
[L9135]               initialized_MainToken[this] := false;
[L9137]   CALL        call init_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9404]   COND FALSE  !(!!initialized_MainToken[this])
[L9408]               initialized_MainToken[this] := true;
[L9409]   COND FALSE  !(PAUSED_Consts[this])
[L9419]   COND FALSE  !(!CONTINUE_MINTING_Consts[this])
[L9429]               assert { :EventEmitted "Initialized_MainToken" } true;
[L9137]   RET         call init_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9138]   COND FALSE  !(revert)
[L9141]   COND TRUE   DType[this] == MainToken
[L9142]   CALL        call transferOwnership~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, TARGET_USER_Consts[this]);
[L7055]   CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L12332]  COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L7055]   RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7056]   COND FALSE  !(revert)
[L7059]   COND TRUE   DType[this] == MainToken
[L7060]   CALL        call _transferOwnership~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, _newOwner_s558);
[L7103]               __var_11 := null;
[L7104]   COND FALSE  !(!(_newOwner_s581 != null))
[L7108]               assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L7109]               owner_Ownable[this] := _newOwner_s581;
[L7060]   RET         call _transferOwnership~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, _newOwner_s558);
[L7061]   COND FALSE  !(revert)
[L9142]   RET         call transferOwnership~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, TARGET_USER_Consts[this]);
[L9143]   COND FALSE  !(revert)
[L9249]   RET         call MainToken_MainToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9250]   COND FALSE  !(revert)
[L4222]   RET         call MainToken_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4223]               assume !revert && gas >= 0;
[L14384]  RET         call MainToken_MainToken(this, msgsender_MSG, msgvalue_MSG);
[L14385]              assume !revert && gas >= 0;
[L14388]  CALL        call CorralChoice_MainToken(this);
[L14045]              havoc msgsender_MSG;
[L14046]              havoc msgvalue_MSG;
[L14047]              havoc choice;
[L14048]              havoc __ret_0_totalSupply;
[L14049]              havoc _owner_s729;
[L14050]              havoc balance_s729;
[L14051]              havoc _to_s1572;
[L14052]              havoc _value_s1572;
[L14053]              havoc _success_s1572;
[L14054]              havoc _owner_s395;
[L14055]              havoc _spender_s395;
[L14056]              havoc __ret_0_allowance;
[L14057]              havoc _from_s1551;
[L14058]              havoc _to_s1551;
[L14059]              havoc _value_s1551;
[L14060]              havoc _success_s1551;
[L14061]              havoc _spender_s379;
[L14062]              havoc _value_s379;
[L14063]              havoc __ret_0_approve;
[L14064]              havoc _spender_s437;
[L14065]              havoc _addedValue_s437;
[L14066]              havoc __ret_0_increaseApproval;
[L14067]              havoc _spender_s497;
[L14068]              havoc _subtractedValue_s497;
[L14069]              havoc __ret_0_decreaseApproval;
[L14070]              havoc __ret_0_owner;
[L14071]              havoc _newOwner_s558;
[L14072]              havoc __ret_0_mintingFinished;
[L14073]              havoc _to_s664;
[L14074]              havoc _amount_s664;
[L14075]              havoc __ret_0_mint;
[L14076]              havoc __ret_0_finishMinting;
[L14077]              havoc _owner_s742;
[L14078]              havoc balance_s742;
[L14079]              havoc _owner_s754;
[L14080]              havoc balance_s754;
[L14081]              havoc _addr_s792;
[L14082]              havoc count_s792;
[L14083]              havoc _addr_s849;
[L14084]              havoc _index_s849;
[L14085]              havoc _release_s849;
[L14086]              havoc _balance_s849;
[L14087]              havoc _to_s938;
[L14088]              havoc _amount_s938;
[L14089]              havoc _until_s938;
[L14090]              havoc tokens_s1107;
[L14091]              havoc _value_s1261;
[L14092]              havoc __ret_0_paused;
[L14093]              havoc _to_s1449;
[L14094]              havoc _amount_s1449;
[L14095]              havoc _until_s1449;
[L14096]              havoc __ret_0_mintAndFreeze;
[L14097]              havoc __ret_0_TOKEN_DECIMALS;
[L14098]              havoc __ret_0_TOKEN_DECIMALS_UINT8;
[L14099]              havoc __ret_0_TOKEN_DECIMAL_MULTIPLIER;
[L14100]              havoc __ret_0_TOKEN_NAME;
[L14101]              havoc __ret_0_TOKEN_SYMBOL;
[L14102]              havoc __ret_0_PAUSED;
[L14103]              havoc __ret_0_TARGET_USER;
[L14104]              havoc __ret_0_CONTINUE_MINTING;
[L14105]              havoc __ret_0_initialized;
[L14106]              havoc _name_s1511;
[L14107]              havoc _symbol_s1519;
[L14108]              havoc _decimals_s1527;
[L14109]              havoc tmpNow;
[L14110]              havoc gas;
[L14111]              assume gas > 4000000 && gas <= 8000000;
[L14112]              tmpNow := now;
[L14113]              havoc now;
[L14114]              assume now > tmpNow;
[L14115]              assume msgsender_MSG != null;
[L14116]              assume DType[msgsender_MSG] != ERC20Basic;
[L14117]              assume DType[msgsender_MSG] != SafeMath;
[L14118]              assume DType[msgsender_MSG] != BasicToken;
[L14119]              assume DType[msgsender_MSG] != ERC20;
[L14120]              assume DType[msgsender_MSG] != StandardToken;
[L14121]              assume DType[msgsender_MSG] != Ownable;
[L14122]              assume DType[msgsender_MSG] != MintableToken;
[L14123]              assume DType[msgsender_MSG] != FreezableToken;
[L14124]              assume DType[msgsender_MSG] != BurnableToken;
[L14125]              assume DType[msgsender_MSG] != Pausable;
[L14126]              assume DType[msgsender_MSG] != FreezableMintableToken;
[L14127]              assume DType[msgsender_MSG] != Consts;
[L14128]              assume DType[msgsender_MSG] != MainToken;
[L14129]              Alloc[msgsender_MSG] := true;
[L14130]  COND FALSE  !(choice == 38)
[L14136]  COND FALSE  !(choice == 37)
[L14142]  COND FALSE  !(choice == 36)
[L14149]  COND FALSE  !(choice == 35)
[L14155]  COND FALSE  !(choice == 34)
[L14162]  COND FALSE  !(choice == 33)
[L14169]  COND FALSE  !(choice == 32)
[L14176]  COND FALSE  !(choice == 31)
[L14183]  COND FALSE  !(choice == 30)
[L14189]  COND FALSE  !(choice == 29)
[L14195]  COND FALSE  !(choice == 28)
[L14201]  COND FALSE  !(choice == 27)
[L14207]  COND FALSE  !(choice == 26)
[L14214]  COND FALSE  !(choice == 25)
[L14220]  COND FALSE  !(choice == 24)
[L14226]  COND FALSE  !(choice == 23)
[L14232]  COND FALSE  !(choice == 22)
[L14238]  COND FALSE  !(choice == 21)
[L14245]  COND TRUE   choice == 20
[L14246]              gas := gas - 21000;
[L14247]  COND TRUE   gas >= 0
[L14248]              assume _amount_s938 >= 0 && _amount_s938 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L14249]              assume _until_s938 >= 0 && _until_s938 < 18446744073709551616;
[L14250]              assume msgvalue_MSG == 0;
[L14251]  CALL        call freezeTo~address~uint256~uint64_FreezableToken(this, msgsender_MSG, msgvalue_MSG, _to_s938, _amount_s938, _until_s938);
[L2417]               havoc __exception;
[L2418]               revert := false;
[L2419]   COND FALSE  !(__exception)
[L2456]   CALL        call freezeTo~address~uint256~uint64_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s938, _amount_s938, _until_s938);
[L7813]               __var_26 := null;
[L7814]   COND FALSE  !(!(_to_s938 != null))
[L7818]   COND FALSE  !(!(_amount_s938 <= balances_BasicToken[this][msgsender_MSG]))
[L7822]   CALL        call __var_27 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][msgsender_MSG], _amount_s938);
[L6509]               assert b_s98 <= a_s98;
[L6510]               __ret_0_ := (a_s98 - b_s98) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7822]   RET         call __var_27 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][msgsender_MSG], _amount_s938);
[L7823]   COND FALSE  !(revert)
[L7826]               sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][msgsender_MSG];
[L7827]               balances_BasicToken[this][msgsender_MSG] := __var_27;
[L7828]               sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][msgsender_MSG];
[L7829]               __var_28 := _until_s938 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7830]   COND TRUE   DType[this] == MainToken
[L7831]   CALL        call currentKey_s938 := toKey~address~uint256_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s938, _until_s938 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L8244]               result_s1122 := 39480772448535941496179204954862169494691089619604794184232587696854102179840;
[L8246]               havoc result_s1122;
[L8247]               havoc result_s1122;
[L8248]               havoc result_s1122;
[L8249]               havoc result_s1122;
[L7831]   RET         call currentKey_s938 := toKey~address~uint256_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s938, _until_s938 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L7832]   COND FALSE  !(revert)
[L7848]               currentKey_s938 := currentKey_s938;
[L7849]   CALL        call __var_29 := add~uint256~uint256_SafeMath__success(this, this, 0, freezings_FreezableToken[this][currentKey_s938], _amount_s938);
[L6523]               c_s122 := (a_s122 + b_s122) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6524]               assert c_s122 >= a_s122;
[L6525]               c_s122 := c_s122;
[L7849]   RET         call __var_29 := add~uint256~uint256_SafeMath__success(this, this, 0, freezings_FreezableToken[this][currentKey_s938], _amount_s938);
[L7850]   COND FALSE  !(revert)
[L7853]               sum_freezings3[this] := sum_freezings3[this] - freezings_FreezableToken[this][currentKey_s938];
[L7854]               freezings_FreezableToken[this][currentKey_s938] := __var_29;
[L7855]               sum_freezings3[this] := sum_freezings3[this] + freezings_FreezableToken[this][currentKey_s938];
[L7856]   CALL        call __var_30 := add~uint256~uint256_SafeMath__success(this, this, 0, freezingBalance_FreezableToken[this][_to_s938], _amount_s938);
[L6523]               c_s122 := (a_s122 + b_s122) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6524]               assert c_s122 >= a_s122;
[L6525]               c_s122 := c_s122;
[L7856]   RET         call __var_30 := add~uint256~uint256_SafeMath__success(this, this, 0, freezingBalance_FreezableToken[this][_to_s938], _amount_s938);
[L7857]   COND FALSE  !(revert)
[L7860]               sum_freezingBalance4[this] := sum_freezingBalance4[this] - freezingBalance_FreezableToken[this][_to_s938];
[L7861]               freezingBalance_FreezableToken[this][_to_s938] := __var_30;
[L7862]               sum_freezingBalance4[this] := sum_freezingBalance4[this] + freezingBalance_FreezableToken[this][_to_s938];
[L7863]   COND FALSE  !(DType[this] == MainToken)
[L7868]   COND TRUE   DType[this] == FreezableMintableToken
[L7869]   CALL        call freeze~address~uint64_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s938, _until_s938);
[L8388]   COND FALSE  !(!(_until_s1240 > now))
[L8392]               __var_42 := _until_s1240 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8393]   COND FALSE  !(DType[this] == MainToken)
[L8398]   COND TRUE   DType[this] == FreezableMintableToken
[L8399]   CALL        call key_s1240 := toKey~address~uint256_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s1240, _until_s1240 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L8244]               result_s1122 := 39480772448535941496179204954862169494691089619604794184232587696854102179840;
[L8246]               havoc result_s1122;
[L8247]               havoc result_s1122;
[L8248]               havoc result_s1122;
[L8249]               havoc result_s1122;
[L8399]   RET         call key_s1240 := toKey~address~uint256_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s1240, _until_s1240 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L8400]   COND FALSE  !(revert)
[L8411]               key_s1240 := key_s1240;
[L8412]               __var_43 := 0 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8413]   COND FALSE  !(DType[this] == MainToken)
[L8418]   COND TRUE   DType[this] == FreezableMintableToken
[L8419]   CALL        call parentKey_s1240 := toKey~address~uint256_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s1240, 0 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L8244]               result_s1122 := 39480772448535941496179204954862169494691089619604794184232587696854102179840;
[L8246]               havoc result_s1122;
[L8247]               havoc result_s1122;
[L8248]               havoc result_s1122;
[L8249]               havoc result_s1122;
[L8419]   RET         call parentKey_s1240 := toKey~address~uint256_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s1240, 0 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L8420]   COND FALSE  !(revert)
[L8431]               parentKey_s1240 := parentKey_s1240;
[L8432]               next_s1240 := chains_FreezableToken[this][parentKey_s1240];
[L8433]   COND TRUE   next_s1240 == 0
[L8434]               sum_chains2[this] := sum_chains2[this] - chains_FreezableToken[this][parentKey_s1240];
[L8435]               chains_FreezableToken[this][parentKey_s1240] := _until_s1240;
[L8436]               sum_chains2[this] := sum_chains2[this] + chains_FreezableToken[this][parentKey_s1240];
[L7869]   RET         call freeze~address~uint64_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s938, _until_s938);
[L7870]   COND FALSE  !(revert)
[L7881]               assert { :EventEmitted "Transfer_FreezableToken" } true;
[L7882]               assert { :EventEmitted "Freezed_FreezableToken" } true;
[L2456]   RET         call freezeTo~address~uint256~uint64_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s938, _amount_s938, _until_s938);
[L2457]               assume !revert && gas >= 0;
[L14251]  RET         call freezeTo~address~uint256~uint64_FreezableToken(this, msgsender_MSG, msgvalue_MSG, _to_s938, _amount_s938, _until_s938);
[L14388]  RET         call CorralChoice_MainToken(this);
[L14388]  CALL        call CorralChoice_MainToken(this);
[L14045]              havoc msgsender_MSG;
[L14046]              havoc msgvalue_MSG;
[L14047]              havoc choice;
[L14048]              havoc __ret_0_totalSupply;
[L14049]              havoc _owner_s729;
[L14050]              havoc balance_s729;
[L14051]              havoc _to_s1572;
[L14052]              havoc _value_s1572;
[L14053]              havoc _success_s1572;
[L14054]              havoc _owner_s395;
[L14055]              havoc _spender_s395;
[L14056]              havoc __ret_0_allowance;
[L14057]              havoc _from_s1551;
[L14058]              havoc _to_s1551;
[L14059]              havoc _value_s1551;
[L14060]              havoc _success_s1551;
[L14061]              havoc _spender_s379;
[L14062]              havoc _value_s379;
[L14063]              havoc __ret_0_approve;
[L14064]              havoc _spender_s437;
[L14065]              havoc _addedValue_s437;
[L14066]              havoc __ret_0_increaseApproval;
[L14067]              havoc _spender_s497;
[L14068]              havoc _subtractedValue_s497;
[L14069]              havoc __ret_0_decreaseApproval;
[L14070]              havoc __ret_0_owner;
[L14071]              havoc _newOwner_s558;
[L14072]              havoc __ret_0_mintingFinished;
[L14073]              havoc _to_s664;
[L14074]              havoc _amount_s664;
[L14075]              havoc __ret_0_mint;
[L14076]              havoc __ret_0_finishMinting;
[L14077]              havoc _owner_s742;
[L14078]              havoc balance_s742;
[L14079]              havoc _owner_s754;
[L14080]              havoc balance_s754;
[L14081]              havoc _addr_s792;
[L14082]              havoc count_s792;
[L14083]              havoc _addr_s849;
[L14084]              havoc _index_s849;
[L14085]              havoc _release_s849;
[L14086]              havoc _balance_s849;
[L14087]              havoc _to_s938;
[L14088]              havoc _amount_s938;
[L14089]              havoc _until_s938;
[L14090]              havoc tokens_s1107;
[L14091]              havoc _value_s1261;
[L14092]              havoc __ret_0_paused;
[L14093]              havoc _to_s1449;
[L14094]              havoc _amount_s1449;
[L14095]              havoc _until_s1449;
[L14096]              havoc __ret_0_mintAndFreeze;
[L14097]              havoc __ret_0_TOKEN_DECIMALS;
[L14098]              havoc __ret_0_TOKEN_DECIMALS_UINT8;
[L14099]              havoc __ret_0_TOKEN_DECIMAL_MULTIPLIER;
[L14100]              havoc __ret_0_TOKEN_NAME;
[L14101]              havoc __ret_0_TOKEN_SYMBOL;
[L14102]              havoc __ret_0_PAUSED;
[L14103]              havoc __ret_0_TARGET_USER;
[L14104]              havoc __ret_0_CONTINUE_MINTING;
[L14105]              havoc __ret_0_initialized;
[L14106]              havoc _name_s1511;
[L14107]              havoc _symbol_s1519;
[L14108]              havoc _decimals_s1527;
[L14109]              havoc tmpNow;
[L14110]              havoc gas;
[L14111]              assume gas > 4000000 && gas <= 8000000;
[L14112]              tmpNow := now;
[L14113]              havoc now;
[L14114]              assume now > tmpNow;
[L14115]              assume msgsender_MSG != null;
[L14116]              assume DType[msgsender_MSG] != ERC20Basic;
[L14117]              assume DType[msgsender_MSG] != SafeMath;
[L14118]              assume DType[msgsender_MSG] != BasicToken;
[L14119]              assume DType[msgsender_MSG] != ERC20;
[L14120]              assume DType[msgsender_MSG] != StandardToken;
[L14121]              assume DType[msgsender_MSG] != Ownable;
[L14122]              assume DType[msgsender_MSG] != MintableToken;
[L14123]              assume DType[msgsender_MSG] != FreezableToken;
[L14124]              assume DType[msgsender_MSG] != BurnableToken;
[L14125]              assume DType[msgsender_MSG] != Pausable;
[L14126]              assume DType[msgsender_MSG] != FreezableMintableToken;
[L14127]              assume DType[msgsender_MSG] != Consts;
[L14128]              assume DType[msgsender_MSG] != MainToken;
[L14129]              Alloc[msgsender_MSG] := true;
[L14130]  COND FALSE  !(choice == 38)
[L14136]  COND TRUE   choice == 37
[L14137]              gas := gas - 21000;
[L14138]  COND TRUE   gas >= 0
[L14139]              assume msgvalue_MSG == 0;
[L14140]  CALL        call balance_s729 := balanceOf~address_FreezableToken(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume balances_BasicToken[this][_owner_s729] >= 0 && balances_BasicToken[this][_owner_s729] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_balanceOf_FreezableToken0 := true;
[L2]                  call_balanceOf_FreezableToken0 := false;
[L2]                  revert := revert_hold;
[L1999]               havoc __exception;
[L2000]               revert := false;
[L2001]   COND FALSE  !(__exception)
[L2038]   CALL        call balance_s729 := balanceOf~address_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L7405]   COND TRUE   DType[this] == MainToken
[L7406]   CALL        call __var_14 := balanceOf~address_BasicToken__success(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L6660]               __ret_0_ := balances_BasicToken[this][_owner_s214];
[L7406]   RET         call __var_14 := balanceOf~address_BasicToken__success(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L7407]   COND FALSE  !(revert)
[L7423]               balance_s729 := (__var_14 + freezingBalance_FreezableToken[this][_owner_s729]) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2038]   RET         call balance_s729 := balanceOf~address_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L2039]               assume !revert && gas >= 0;
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume !((((((((((balance_s729 == balances_BasicToken[this][_owner_s729] && totalSupply__BasicToken[this] == old(totalSupply__BasicToken[this])) && balances_BasicToken[this] == old(balances_BasicToken[this])) && allowed_StandardToken[this] == old(allowed_StandardToken[this])) && initialized_MainToken[this] == old(initialized_MainToken[this])) && paused_Pausable[this] == old(paused_Pausable[this])) && mintingFinished_MintableToken[this] == old(mintingFinished_MintableToken[this])) && owner_Ownable[this] == old(owner_Ownable[this])) && chains_FreezableToken[this] == old(chains_FreezableToken[this])) && freezings_FreezableToken[this] == old(freezings_FreezableToken[this])) && freezingBalance_FreezableToken[this] == old(freezingBalance_FreezableToken[this]));
[L2]                  revert := revert_hold;
[L14140]  RET         call balance_s729 := balanceOf~address_FreezableToken(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L14388]  RET         call CorralChoice_MainToken(this);

Loop:
[L14388]  CALL        call CorralChoice_MainToken(this);
[L14045]              havoc msgsender_MSG;
[L14046]              havoc msgvalue_MSG;
[L14047]              havoc choice;
[L14048]              havoc __ret_0_totalSupply;
[L14049]              havoc _owner_s729;
[L14050]              havoc balance_s729;
[L14051]              havoc _to_s1572;
[L14052]              havoc _value_s1572;
[L14053]              havoc _success_s1572;
[L14054]              havoc _owner_s395;
[L14055]              havoc _spender_s395;
[L14056]              havoc __ret_0_allowance;
[L14057]              havoc _from_s1551;
[L14058]              havoc _to_s1551;
[L14059]              havoc _value_s1551;
[L14060]              havoc _success_s1551;
[L14061]              havoc _spender_s379;
[L14062]              havoc _value_s379;
[L14063]              havoc __ret_0_approve;
[L14064]              havoc _spender_s437;
[L14065]              havoc _addedValue_s437;
[L14066]              havoc __ret_0_increaseApproval;
[L14067]              havoc _spender_s497;
[L14068]              havoc _subtractedValue_s497;
[L14069]              havoc __ret_0_decreaseApproval;
[L14070]              havoc __ret_0_owner;
[L14071]              havoc _newOwner_s558;
[L14072]              havoc __ret_0_mintingFinished;
[L14073]              havoc _to_s664;
[L14074]              havoc _amount_s664;
[L14075]              havoc __ret_0_mint;
[L14076]              havoc __ret_0_finishMinting;
[L14077]              havoc _owner_s742;
[L14078]              havoc balance_s742;
[L14079]              havoc _owner_s754;
[L14080]              havoc balance_s754;
[L14081]              havoc _addr_s792;
[L14082]              havoc count_s792;
[L14083]              havoc _addr_s849;
[L14084]              havoc _index_s849;
[L14085]              havoc _release_s849;
[L14086]              havoc _balance_s849;
[L14087]              havoc _to_s938;
[L14088]              havoc _amount_s938;
[L14089]              havoc _until_s938;
[L14090]              havoc tokens_s1107;
[L14091]              havoc _value_s1261;
[L14092]              havoc __ret_0_paused;
[L14093]              havoc _to_s1449;
[L14094]              havoc _amount_s1449;
[L14095]              havoc _until_s1449;
[L14096]              havoc __ret_0_mintAndFreeze;
[L14097]              havoc __ret_0_TOKEN_DECIMALS;
[L14098]              havoc __ret_0_TOKEN_DECIMALS_UINT8;
[L14099]              havoc __ret_0_TOKEN_DECIMAL_MULTIPLIER;
[L14100]              havoc __ret_0_TOKEN_NAME;
[L14101]              havoc __ret_0_TOKEN_SYMBOL;
[L14102]              havoc __ret_0_PAUSED;
[L14103]              havoc __ret_0_TARGET_USER;
[L14104]              havoc __ret_0_CONTINUE_MINTING;
[L14105]              havoc __ret_0_initialized;
[L14106]              havoc _name_s1511;
[L14107]              havoc _symbol_s1519;
[L14108]              havoc _decimals_s1527;
[L14109]              havoc tmpNow;
[L14110]              havoc gas;
[L14111]              assume gas > 4000000 && gas <= 8000000;
[L14112]              tmpNow := now;
[L14113]              havoc now;
[L14114]              assume now > tmpNow;
[L14115]              assume msgsender_MSG != null;
[L14116]              assume DType[msgsender_MSG] != ERC20Basic;
[L14117]              assume DType[msgsender_MSG] != SafeMath;
[L14118]              assume DType[msgsender_MSG] != BasicToken;
[L14119]              assume DType[msgsender_MSG] != ERC20;
[L14120]              assume DType[msgsender_MSG] != StandardToken;
[L14121]              assume DType[msgsender_MSG] != Ownable;
[L14122]              assume DType[msgsender_MSG] != MintableToken;
[L14123]              assume DType[msgsender_MSG] != FreezableToken;
[L14124]              assume DType[msgsender_MSG] != BurnableToken;
[L14125]              assume DType[msgsender_MSG] != Pausable;
[L14126]              assume DType[msgsender_MSG] != FreezableMintableToken;
[L14127]              assume DType[msgsender_MSG] != Consts;
[L14128]              assume DType[msgsender_MSG] != MainToken;
[L14129]              Alloc[msgsender_MSG] := true;
[L14130]  COND TRUE   choice == 38
[L14131]              gas := gas - 21000;
[L14132]  COND FALSE  !(gas >= 0)
[L14388]  RET         call CorralChoice_MainToken(this);

[2020-11-24 21:26:09,918 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-24 21:26:09,918 INFO  L82        PathProgramCache]: Analyzing trace with hash 654979156, now seen corresponding path program 1 times
[2020-11-24 21:26:09,919 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-24 21:26:09,950 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-24 21:26:10,620 INFO  L134       CoverageAnalysis]: Checked inductivity of 9938 backedges. 1 proven. 0 refuted. 0 times theorem prover too weak. 9937 trivial. 0 not checked.
[2020-11-24 21:26:10,620 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-24 21:26:10,620 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [3] imperfect sequences [] total 3
[2020-11-24 21:26:10,621 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-24 21:26:10,622 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-11-24 21:26:10,622 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-11-24 21:26:10,622 INFO  L87              Difference]: Start difference. First operand 5524 states and 6225 transitions. cyclomatic complexity: 719 Second operand 3 states.
[2020-11-24 21:26:10,691 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-24 21:26:10,691 INFO  L93              Difference]: Finished difference Result 5568 states and 6273 transitions.
[2020-11-24 21:26:10,691 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-11-24 21:26:10,691 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 5568 states and 6273 transitions.
[2020-11-24 21:26:10,701 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-24 21:26:10,710 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 5568 states to 5568 states and 6273 transitions.
[2020-11-24 21:26:10,710 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1114
[2020-11-24 21:26:10,711 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1114
[2020-11-24 21:26:10,711 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 5568 states and 6273 transitions.
[2020-11-24 21:26:10,714 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-24 21:26:10,714 INFO  L728         BuchiCegarLoop]: Abstraction has 5568 states and 6273 transitions.
[2020-11-24 21:26:10,718 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 5568 states and 6273 transitions.
[2020-11-24 21:26:10,742 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 5568 to 5552.
[2020-11-24 21:26:10,742 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 5552 states.
[2020-11-24 21:26:10,748 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 5552 states to 5552 states and 6257 transitions.
[2020-11-24 21:26:10,748 INFO  L751         BuchiCegarLoop]: Abstraction has 5552 states and 6257 transitions.
[2020-11-24 21:26:10,748 INFO  L631         BuchiCegarLoop]: Abstraction has 5552 states and 6257 transitions.
[2020-11-24 21:26:10,748 INFO  L445         BuchiCegarLoop]: ======== Iteration 11============
[2020-11-24 21:26:10,748 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 5552 states and 6257 transitions.
[2020-11-24 21:26:10,753 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-24 21:26:10,753 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-24 21:26:10,753 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-24 21:26:10,756 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [38, 38, 38, 38, 38, 38, 38, 38, 38, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-24 21:26:10,756 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  success_balanceOf_FreezableToken0 := false;
[L2]                  call_balanceOf_FreezableToken0 := false;
[L2]      CALL        call main();
[L14378]              assume null == 0;
[L14379]  CALL        call this := FreshRefGenerator__success();
[L6396]               havoc newRef;
[L6397]               assume Alloc[newRef] == false;
[L6398]               Alloc[newRef] := true;
[L6399]               assume newRef != null;
[L14379]  RET         call this := FreshRefGenerator__success();
[L14380]              assume now >= 0;
[L14381]              assume DType[this] == MainToken;
[L14382]              assume msgvalue_MSG == 0;
[L14383]              gas := gas - 53000;
[L14384]  CALL        call MainToken_MainToken(this, msgsender_MSG, msgvalue_MSG);
[L4183]               havoc __exception;
[L4184]               revert := false;
[L4185]   COND FALSE  !(__exception)
[L4222]   CALL        call MainToken_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9205]   CALL        call Consts_Consts__success(this, msgsender_MSG, msgvalue_MSG);
[L9007]   CALL        call Consts_Consts_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8983]               assume msgsender_MSG != null;
[L8984]               Balance[this] := 0;
[L8985]               TOKEN_DECIMALS_Consts[this] := 18;
[L8986]               TOKEN_DECIMALS_UINT8_Consts[this] := 18;
[L8987]               TOKEN_DECIMAL_MULTIPLIER_Consts[this] := nonlinearPow(10, TOKEN_DECIMALS_Consts[this]) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8988]               TOKEN_NAME_Consts[this] := -1051245219;
[L8989]               TOKEN_SYMBOL_Consts[this] := -1804535220;
[L8990]               PAUSED_Consts[this] := false;
[L8991]               __var_52 := ConstantToRef(-210822415442009814958929812751043848690848471787);
[L8992]               TARGET_USER_Consts[this] := ConstantToRef(-210822415442009814958929812751043848690848471787);
[L8993]               CONTINUE_MINTING_Consts[this] := true;
[L9007]   RET         call Consts_Consts_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9008]   COND FALSE  !(revert)
[L9205]   RET         call Consts_Consts__success(this, msgsender_MSG, msgvalue_MSG);
[L9206]   COND FALSE  !(revert)
[L9209]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L9209]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L9210]   COND FALSE  !(revert)
[L9213]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6694]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6694]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6695]   COND FALSE  !(revert)
[L6698]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6675]               assume msgsender_MSG != null;
[L6676]               Balance[this] := 0;
[L6698]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6699]   COND FALSE  !(revert)
[L9213]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L9214]   COND FALSE  !(revert)
[L9217]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6565]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   COND FALSE  !(revert)
[L6569]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]               assume msgsender_MSG != null;
[L6544]               Balance[this] := 0;
[L6545]               balances_BasicToken[this] := zeroRefintArr();
[L6546]               sum_balances0[this] := 0;
[L6547]               totalSupply__BasicToken[this] := 0;
[L6569]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6570]   COND FALSE  !(revert)
[L9217]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9218]   COND FALSE  !(revert)
[L9221]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6746]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6746]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6747]   COND FALSE  !(revert)
[L6750]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6694]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6694]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6695]   COND FALSE  !(revert)
[L6698]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6675]               assume msgsender_MSG != null;
[L6676]               Balance[this] := 0;
[L6698]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6699]   COND FALSE  !(revert)
[L6750]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6751]   COND FALSE  !(revert)
[L6754]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6565]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   COND FALSE  !(revert)
[L6569]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]               assume msgsender_MSG != null;
[L6544]               Balance[this] := 0;
[L6545]               balances_BasicToken[this] := zeroRefintArr();
[L6546]               sum_balances0[this] := 0;
[L6547]               totalSupply__BasicToken[this] := 0;
[L6569]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6570]   COND FALSE  !(revert)
[L6754]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6755]   COND FALSE  !(revert)
[L6758]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6717]               assume msgsender_MSG != null;
[L6718]               Balance[this] := 0;
[L6719]               allowed_StandardToken[this] := zeroRefRefintArr();
[L6720]               sum_allowed1[this] := 0;
[L6758]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6759]   COND FALSE  !(revert)
[L9221]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9222]   COND FALSE  !(revert)
[L9225]   CALL        call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7353]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L7353]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7354]   COND FALSE  !(revert)
[L7357]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6694]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6694]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6695]   COND FALSE  !(revert)
[L6698]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6675]               assume msgsender_MSG != null;
[L6676]               Balance[this] := 0;
[L6698]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6699]   COND FALSE  !(revert)
[L7357]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7358]   COND FALSE  !(revert)
[L7361]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6565]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   COND FALSE  !(revert)
[L6569]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]               assume msgsender_MSG != null;
[L6544]               Balance[this] := 0;
[L6545]               balances_BasicToken[this] := zeroRefintArr();
[L6546]               sum_balances0[this] := 0;
[L6547]               totalSupply__BasicToken[this] := 0;
[L6569]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6570]   COND FALSE  !(revert)
[L7361]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7362]   COND FALSE  !(revert)
[L7365]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6746]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6746]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6747]   COND FALSE  !(revert)
[L6750]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6694]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6694]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6695]   COND FALSE  !(revert)
[L6698]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6675]               assume msgsender_MSG != null;
[L6676]               Balance[this] := 0;
[L6698]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6699]   COND FALSE  !(revert)
[L6750]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6751]   COND FALSE  !(revert)
[L6754]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6565]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   COND FALSE  !(revert)
[L6569]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]               assume msgsender_MSG != null;
[L6544]               Balance[this] := 0;
[L6545]               balances_BasicToken[this] := zeroRefintArr();
[L6546]               sum_balances0[this] := 0;
[L6547]               totalSupply__BasicToken[this] := 0;
[L6569]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6570]   COND FALSE  !(revert)
[L6754]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6755]   COND FALSE  !(revert)
[L6758]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6717]               assume msgsender_MSG != null;
[L6718]               Balance[this] := 0;
[L6719]               allowed_StandardToken[this] := zeroRefRefintArr();
[L6720]               sum_allowed1[this] := 0;
[L6758]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6759]   COND FALSE  !(revert)
[L7365]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7366]   COND FALSE  !(revert)
[L7369]   CALL        call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7316]               assume msgsender_MSG != null;
[L7317]               Balance[this] := 0;
[L7318]               chains_FreezableToken[this] := zerointintArr();
[L7319]               sum_chains2[this] := 0;
[L7320]               freezings_FreezableToken[this] := zerointintArr();
[L7321]               sum_freezings3[this] := 0;
[L7322]               freezingBalance_FreezableToken[this] := zeroRefintArr();
[L7323]               sum_freezingBalance4[this] := 0;
[L7369]   RET         call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7370]   COND FALSE  !(revert)
[L9225]   RET         call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9226]   COND FALSE  !(revert)
[L9229]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6988]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6971]               assume msgsender_MSG != null;
[L6972]               Balance[this] := 0;
[L6973]               owner_Ownable[this] := null;
[L6975]               owner_Ownable[this] := msgsender_MSG;
[L6988]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6989]   COND FALSE  !(revert)
[L9229]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L9230]   COND FALSE  !(revert)
[L9233]   CALL        call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7172]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L7172]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7173]   COND FALSE  !(revert)
[L7176]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6694]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6694]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6695]   COND FALSE  !(revert)
[L6698]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6675]               assume msgsender_MSG != null;
[L6676]               Balance[this] := 0;
[L6698]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6699]   COND FALSE  !(revert)
[L7176]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7177]   COND FALSE  !(revert)
[L7180]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6565]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   COND FALSE  !(revert)
[L6569]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]               assume msgsender_MSG != null;
[L6544]               Balance[this] := 0;
[L6545]               balances_BasicToken[this] := zeroRefintArr();
[L6546]               sum_balances0[this] := 0;
[L6547]               totalSupply__BasicToken[this] := 0;
[L6569]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6570]   COND FALSE  !(revert)
[L7180]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7181]   COND FALSE  !(revert)
[L7184]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6746]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6746]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6747]   COND FALSE  !(revert)
[L6750]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6694]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6694]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6695]   COND FALSE  !(revert)
[L6698]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6675]               assume msgsender_MSG != null;
[L6676]               Balance[this] := 0;
[L6698]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6699]   COND FALSE  !(revert)
[L6750]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6751]   COND FALSE  !(revert)
[L6754]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6565]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   COND FALSE  !(revert)
[L6569]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]               assume msgsender_MSG != null;
[L6544]               Balance[this] := 0;
[L6545]               balances_BasicToken[this] := zeroRefintArr();
[L6546]               sum_balances0[this] := 0;
[L6547]               totalSupply__BasicToken[this] := 0;
[L6569]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6570]   COND FALSE  !(revert)
[L6754]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6755]   COND FALSE  !(revert)
[L6758]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6717]               assume msgsender_MSG != null;
[L6718]               Balance[this] := 0;
[L6719]               allowed_StandardToken[this] := zeroRefRefintArr();
[L6720]               sum_allowed1[this] := 0;
[L6758]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6759]   COND FALSE  !(revert)
[L7184]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7185]   COND FALSE  !(revert)
[L7188]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6988]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6971]               assume msgsender_MSG != null;
[L6972]               Balance[this] := 0;
[L6973]               owner_Ownable[this] := null;
[L6975]               owner_Ownable[this] := msgsender_MSG;
[L6988]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6989]   COND FALSE  !(revert)
[L7188]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7189]   COND FALSE  !(revert)
[L7192]   CALL        call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7136]               assume msgsender_MSG != null;
[L7137]               Balance[this] := 0;
[L7138]               mintingFinished_MintableToken[this] := false;
[L7192]   RET         call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7193]   COND FALSE  !(revert)
[L9233]   RET         call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9234]   COND FALSE  !(revert)
[L9237]   CALL        call FreezableMintableToken_FreezableMintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L8792]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L8792]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L8793]   COND FALSE  !(revert)
[L8796]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6694]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6694]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6695]   COND FALSE  !(revert)
[L6698]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6675]               assume msgsender_MSG != null;
[L6676]               Balance[this] := 0;
[L6698]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6699]   COND FALSE  !(revert)
[L8796]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L8797]   COND FALSE  !(revert)
[L8800]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6565]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   COND FALSE  !(revert)
[L6569]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]               assume msgsender_MSG != null;
[L6544]               Balance[this] := 0;
[L6545]               balances_BasicToken[this] := zeroRefintArr();
[L6546]               sum_balances0[this] := 0;
[L6547]               totalSupply__BasicToken[this] := 0;
[L6569]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6570]   COND FALSE  !(revert)
[L8800]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L8801]   COND FALSE  !(revert)
[L8804]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6746]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6746]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6747]   COND FALSE  !(revert)
[L6750]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6694]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6694]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6695]   COND FALSE  !(revert)
[L6698]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6675]               assume msgsender_MSG != null;
[L6676]               Balance[this] := 0;
[L6698]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6699]   COND FALSE  !(revert)
[L6750]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6751]   COND FALSE  !(revert)
[L6754]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6565]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   COND FALSE  !(revert)
[L6569]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]               assume msgsender_MSG != null;
[L6544]               Balance[this] := 0;
[L6545]               balances_BasicToken[this] := zeroRefintArr();
[L6546]               sum_balances0[this] := 0;
[L6547]               totalSupply__BasicToken[this] := 0;
[L6569]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6570]   COND FALSE  !(revert)
[L6754]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6755]   COND FALSE  !(revert)
[L6758]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6717]               assume msgsender_MSG != null;
[L6718]               Balance[this] := 0;
[L6719]               allowed_StandardToken[this] := zeroRefRefintArr();
[L6720]               sum_allowed1[this] := 0;
[L6758]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6759]   COND FALSE  !(revert)
[L8804]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L8805]   COND FALSE  !(revert)
[L8808]   CALL        call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7353]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L7353]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7354]   COND FALSE  !(revert)
[L7357]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6694]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6694]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6695]   COND FALSE  !(revert)
[L6698]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6675]               assume msgsender_MSG != null;
[L6676]               Balance[this] := 0;
[L6698]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6699]   COND FALSE  !(revert)
[L7357]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7358]   COND FALSE  !(revert)
[L7361]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6565]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   COND FALSE  !(revert)
[L6569]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]               assume msgsender_MSG != null;
[L6544]               Balance[this] := 0;
[L6545]               balances_BasicToken[this] := zeroRefintArr();
[L6546]               sum_balances0[this] := 0;
[L6547]               totalSupply__BasicToken[this] := 0;
[L6569]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6570]   COND FALSE  !(revert)
[L7361]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7362]   COND FALSE  !(revert)
[L7365]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6746]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6746]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6747]   COND FALSE  !(revert)
[L6750]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6694]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6694]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6695]   COND FALSE  !(revert)
[L6698]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6675]               assume msgsender_MSG != null;
[L6676]               Balance[this] := 0;
[L6698]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6699]   COND FALSE  !(revert)
[L6750]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6751]   COND FALSE  !(revert)
[L6754]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6565]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   COND FALSE  !(revert)
[L6569]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]               assume msgsender_MSG != null;
[L6544]               Balance[this] := 0;
[L6545]               balances_BasicToken[this] := zeroRefintArr();
[L6546]               sum_balances0[this] := 0;
[L6547]               totalSupply__BasicToken[this] := 0;
[L6569]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6570]   COND FALSE  !(revert)
[L6754]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6755]   COND FALSE  !(revert)
[L6758]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6717]               assume msgsender_MSG != null;
[L6718]               Balance[this] := 0;
[L6719]               allowed_StandardToken[this] := zeroRefRefintArr();
[L6720]               sum_allowed1[this] := 0;
[L6758]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6759]   COND FALSE  !(revert)
[L7365]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7366]   COND FALSE  !(revert)
[L7369]   CALL        call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7316]               assume msgsender_MSG != null;
[L7317]               Balance[this] := 0;
[L7318]               chains_FreezableToken[this] := zerointintArr();
[L7319]               sum_chains2[this] := 0;
[L7320]               freezings_FreezableToken[this] := zerointintArr();
[L7321]               sum_freezings3[this] := 0;
[L7322]               freezingBalance_FreezableToken[this] := zeroRefintArr();
[L7323]               sum_freezingBalance4[this] := 0;
[L7369]   RET         call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7370]   COND FALSE  !(revert)
[L8808]   RET         call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L8809]   COND FALSE  !(revert)
[L8812]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6988]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6971]               assume msgsender_MSG != null;
[L6972]               Balance[this] := 0;
[L6973]               owner_Ownable[this] := null;
[L6975]               owner_Ownable[this] := msgsender_MSG;
[L6988]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6989]   COND FALSE  !(revert)
[L8812]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L8813]   COND FALSE  !(revert)
[L8816]   CALL        call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7172]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L7172]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7173]   COND FALSE  !(revert)
[L7176]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6694]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6694]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6695]   COND FALSE  !(revert)
[L6698]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6675]               assume msgsender_MSG != null;
[L6676]               Balance[this] := 0;
[L6698]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6699]   COND FALSE  !(revert)
[L7176]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7177]   COND FALSE  !(revert)
[L7180]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6565]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   COND FALSE  !(revert)
[L6569]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]               assume msgsender_MSG != null;
[L6544]               Balance[this] := 0;
[L6545]               balances_BasicToken[this] := zeroRefintArr();
[L6546]               sum_balances0[this] := 0;
[L6547]               totalSupply__BasicToken[this] := 0;
[L6569]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6570]   COND FALSE  !(revert)
[L7180]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7181]   COND FALSE  !(revert)
[L7184]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6746]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6746]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6747]   COND FALSE  !(revert)
[L6750]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6694]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6694]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6695]   COND FALSE  !(revert)
[L6698]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6675]               assume msgsender_MSG != null;
[L6676]               Balance[this] := 0;
[L6698]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6699]   COND FALSE  !(revert)
[L6750]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6751]   COND FALSE  !(revert)
[L6754]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6565]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   COND FALSE  !(revert)
[L6569]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]               assume msgsender_MSG != null;
[L6544]               Balance[this] := 0;
[L6545]               balances_BasicToken[this] := zeroRefintArr();
[L6546]               sum_balances0[this] := 0;
[L6547]               totalSupply__BasicToken[this] := 0;
[L6569]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6570]   COND FALSE  !(revert)
[L6754]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6755]   COND FALSE  !(revert)
[L6758]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6717]               assume msgsender_MSG != null;
[L6718]               Balance[this] := 0;
[L6719]               allowed_StandardToken[this] := zeroRefRefintArr();
[L6720]               sum_allowed1[this] := 0;
[L6758]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6759]   COND FALSE  !(revert)
[L7184]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7185]   COND FALSE  !(revert)
[L7188]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6988]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6971]               assume msgsender_MSG != null;
[L6972]               Balance[this] := 0;
[L6973]               owner_Ownable[this] := null;
[L6975]               owner_Ownable[this] := msgsender_MSG;
[L6988]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6989]   COND FALSE  !(revert)
[L7188]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7189]   COND FALSE  !(revert)
[L7192]   CALL        call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7136]               assume msgsender_MSG != null;
[L7137]               Balance[this] := 0;
[L7138]               mintingFinished_MintableToken[this] := false;
[L7192]   RET         call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7193]   COND FALSE  !(revert)
[L8816]   RET         call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L8817]   COND FALSE  !(revert)
[L8820]   CALL        call FreezableMintableToken_FreezableMintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8749]               assume msgsender_MSG != null;
[L8750]               Balance[this] := 0;
[L8820]   RET         call FreezableMintableToken_FreezableMintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8821]   COND FALSE  !(revert)
[L9237]   RET         call FreezableMintableToken_FreezableMintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9238]   COND FALSE  !(revert)
[L9241]   CALL        call BurnableToken_BurnableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L8536]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L8536]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L8537]   COND FALSE  !(revert)
[L8540]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6565]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   COND FALSE  !(revert)
[L6569]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]               assume msgsender_MSG != null;
[L6544]               Balance[this] := 0;
[L6545]               balances_BasicToken[this] := zeroRefintArr();
[L6546]               sum_balances0[this] := 0;
[L6547]               totalSupply__BasicToken[this] := 0;
[L6569]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6570]   COND FALSE  !(revert)
[L8540]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L8541]   COND FALSE  !(revert)
[L8544]   CALL        call BurnableToken_BurnableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8513]               assume msgsender_MSG != null;
[L8514]               Balance[this] := 0;
[L8544]   RET         call BurnableToken_BurnableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8545]   COND FALSE  !(revert)
[L9241]   RET         call BurnableToken_BurnableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9242]   COND FALSE  !(revert)
[L9245]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L8662]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6988]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6971]               assume msgsender_MSG != null;
[L6972]               Balance[this] := 0;
[L6973]               owner_Ownable[this] := null;
[L6975]               owner_Ownable[this] := msgsender_MSG;
[L6988]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6989]   COND FALSE  !(revert)
[L8662]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L8663]   COND FALSE  !(revert)
[L8666]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8642]               assume msgsender_MSG != null;
[L8643]               Balance[this] := 0;
[L8644]               paused_Pausable[this] := false;
[L8666]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8667]   COND FALSE  !(revert)
[L9245]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L9246]   COND FALSE  !(revert)
[L9249]   CALL        call MainToken_MainToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9133]               assume msgsender_MSG != null;
[L9134]               Balance[this] := 0;
[L9135]               initialized_MainToken[this] := false;
[L9137]   CALL        call init_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9404]   COND FALSE  !(!!initialized_MainToken[this])
[L9408]               initialized_MainToken[this] := true;
[L9409]   COND FALSE  !(PAUSED_Consts[this])
[L9419]   COND FALSE  !(!CONTINUE_MINTING_Consts[this])
[L9429]               assert { :EventEmitted "Initialized_MainToken" } true;
[L9137]   RET         call init_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9138]   COND FALSE  !(revert)
[L9141]   COND TRUE   DType[this] == MainToken
[L9142]   CALL        call transferOwnership~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, TARGET_USER_Consts[this]);
[L7055]   CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L12332]  COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L7055]   RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7056]   COND FALSE  !(revert)
[L7059]   COND TRUE   DType[this] == MainToken
[L7060]   CALL        call _transferOwnership~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, _newOwner_s558);
[L7103]               __var_11 := null;
[L7104]   COND FALSE  !(!(_newOwner_s581 != null))
[L7108]               assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L7109]               owner_Ownable[this] := _newOwner_s581;
[L7060]   RET         call _transferOwnership~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, _newOwner_s558);
[L7061]   COND FALSE  !(revert)
[L9142]   RET         call transferOwnership~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, TARGET_USER_Consts[this]);
[L9143]   COND FALSE  !(revert)
[L9249]   RET         call MainToken_MainToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9250]   COND FALSE  !(revert)
[L4222]   RET         call MainToken_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4223]               assume !revert && gas >= 0;
[L14384]  RET         call MainToken_MainToken(this, msgsender_MSG, msgvalue_MSG);
[L14385]              assume !revert && gas >= 0;
[L14388]  CALL        call CorralChoice_MainToken(this);
[L14045]              havoc msgsender_MSG;
[L14046]              havoc msgvalue_MSG;
[L14047]              havoc choice;
[L14048]              havoc __ret_0_totalSupply;
[L14049]              havoc _owner_s729;
[L14050]              havoc balance_s729;
[L14051]              havoc _to_s1572;
[L14052]              havoc _value_s1572;
[L14053]              havoc _success_s1572;
[L14054]              havoc _owner_s395;
[L14055]              havoc _spender_s395;
[L14056]              havoc __ret_0_allowance;
[L14057]              havoc _from_s1551;
[L14058]              havoc _to_s1551;
[L14059]              havoc _value_s1551;
[L14060]              havoc _success_s1551;
[L14061]              havoc _spender_s379;
[L14062]              havoc _value_s379;
[L14063]              havoc __ret_0_approve;
[L14064]              havoc _spender_s437;
[L14065]              havoc _addedValue_s437;
[L14066]              havoc __ret_0_increaseApproval;
[L14067]              havoc _spender_s497;
[L14068]              havoc _subtractedValue_s497;
[L14069]              havoc __ret_0_decreaseApproval;
[L14070]              havoc __ret_0_owner;
[L14071]              havoc _newOwner_s558;
[L14072]              havoc __ret_0_mintingFinished;
[L14073]              havoc _to_s664;
[L14074]              havoc _amount_s664;
[L14075]              havoc __ret_0_mint;
[L14076]              havoc __ret_0_finishMinting;
[L14077]              havoc _owner_s742;
[L14078]              havoc balance_s742;
[L14079]              havoc _owner_s754;
[L14080]              havoc balance_s754;
[L14081]              havoc _addr_s792;
[L14082]              havoc count_s792;
[L14083]              havoc _addr_s849;
[L14084]              havoc _index_s849;
[L14085]              havoc _release_s849;
[L14086]              havoc _balance_s849;
[L14087]              havoc _to_s938;
[L14088]              havoc _amount_s938;
[L14089]              havoc _until_s938;
[L14090]              havoc tokens_s1107;
[L14091]              havoc _value_s1261;
[L14092]              havoc __ret_0_paused;
[L14093]              havoc _to_s1449;
[L14094]              havoc _amount_s1449;
[L14095]              havoc _until_s1449;
[L14096]              havoc __ret_0_mintAndFreeze;
[L14097]              havoc __ret_0_TOKEN_DECIMALS;
[L14098]              havoc __ret_0_TOKEN_DECIMALS_UINT8;
[L14099]              havoc __ret_0_TOKEN_DECIMAL_MULTIPLIER;
[L14100]              havoc __ret_0_TOKEN_NAME;
[L14101]              havoc __ret_0_TOKEN_SYMBOL;
[L14102]              havoc __ret_0_PAUSED;
[L14103]              havoc __ret_0_TARGET_USER;
[L14104]              havoc __ret_0_CONTINUE_MINTING;
[L14105]              havoc __ret_0_initialized;
[L14106]              havoc _name_s1511;
[L14107]              havoc _symbol_s1519;
[L14108]              havoc _decimals_s1527;
[L14109]              havoc tmpNow;
[L14110]              havoc gas;
[L14111]              assume gas > 4000000 && gas <= 8000000;
[L14112]              tmpNow := now;
[L14113]              havoc now;
[L14114]              assume now > tmpNow;
[L14115]              assume msgsender_MSG != null;
[L14116]              assume DType[msgsender_MSG] != ERC20Basic;
[L14117]              assume DType[msgsender_MSG] != SafeMath;
[L14118]              assume DType[msgsender_MSG] != BasicToken;
[L14119]              assume DType[msgsender_MSG] != ERC20;
[L14120]              assume DType[msgsender_MSG] != StandardToken;
[L14121]              assume DType[msgsender_MSG] != Ownable;
[L14122]              assume DType[msgsender_MSG] != MintableToken;
[L14123]              assume DType[msgsender_MSG] != FreezableToken;
[L14124]              assume DType[msgsender_MSG] != BurnableToken;
[L14125]              assume DType[msgsender_MSG] != Pausable;
[L14126]              assume DType[msgsender_MSG] != FreezableMintableToken;
[L14127]              assume DType[msgsender_MSG] != Consts;
[L14128]              assume DType[msgsender_MSG] != MainToken;
[L14129]              Alloc[msgsender_MSG] := true;
[L14130]  COND FALSE  !(choice == 38)
[L14136]  COND FALSE  !(choice == 37)
[L14142]  COND FALSE  !(choice == 36)
[L14149]  COND FALSE  !(choice == 35)
[L14155]  COND FALSE  !(choice == 34)
[L14162]  COND FALSE  !(choice == 33)
[L14169]  COND FALSE  !(choice == 32)
[L14176]  COND FALSE  !(choice == 31)
[L14183]  COND FALSE  !(choice == 30)
[L14189]  COND FALSE  !(choice == 29)
[L14195]  COND FALSE  !(choice == 28)
[L14201]  COND FALSE  !(choice == 27)
[L14207]  COND FALSE  !(choice == 26)
[L14214]  COND FALSE  !(choice == 25)
[L14220]  COND FALSE  !(choice == 24)
[L14226]  COND FALSE  !(choice == 23)
[L14232]  COND FALSE  !(choice == 22)
[L14238]  COND FALSE  !(choice == 21)
[L14245]  COND TRUE   choice == 20
[L14246]              gas := gas - 21000;
[L14247]  COND TRUE   gas >= 0
[L14248]              assume _amount_s938 >= 0 && _amount_s938 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L14249]              assume _until_s938 >= 0 && _until_s938 < 18446744073709551616;
[L14250]              assume msgvalue_MSG == 0;
[L14251]  CALL        call freezeTo~address~uint256~uint64_FreezableToken(this, msgsender_MSG, msgvalue_MSG, _to_s938, _amount_s938, _until_s938);
[L2417]               havoc __exception;
[L2418]               revert := false;
[L2419]   COND FALSE  !(__exception)
[L2456]   CALL        call freezeTo~address~uint256~uint64_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s938, _amount_s938, _until_s938);
[L7813]               __var_26 := null;
[L7814]   COND FALSE  !(!(_to_s938 != null))
[L7818]   COND FALSE  !(!(_amount_s938 <= balances_BasicToken[this][msgsender_MSG]))
[L7822]   CALL        call __var_27 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][msgsender_MSG], _amount_s938);
[L6509]               assert b_s98 <= a_s98;
[L6510]               __ret_0_ := (a_s98 - b_s98) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7822]   RET         call __var_27 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][msgsender_MSG], _amount_s938);
[L7823]   COND FALSE  !(revert)
[L7826]               sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][msgsender_MSG];
[L7827]               balances_BasicToken[this][msgsender_MSG] := __var_27;
[L7828]               sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][msgsender_MSG];
[L7829]               __var_28 := _until_s938 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7830]   COND TRUE   DType[this] == MainToken
[L7831]   CALL        call currentKey_s938 := toKey~address~uint256_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s938, _until_s938 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L8244]               result_s1122 := 39480772448535941496179204954862169494691089619604794184232587696854102179840;
[L8246]               havoc result_s1122;
[L8247]               havoc result_s1122;
[L8248]               havoc result_s1122;
[L8249]               havoc result_s1122;
[L7831]   RET         call currentKey_s938 := toKey~address~uint256_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s938, _until_s938 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L7832]   COND FALSE  !(revert)
[L7848]               currentKey_s938 := currentKey_s938;
[L7849]   CALL        call __var_29 := add~uint256~uint256_SafeMath__success(this, this, 0, freezings_FreezableToken[this][currentKey_s938], _amount_s938);
[L6523]               c_s122 := (a_s122 + b_s122) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6524]               assert c_s122 >= a_s122;
[L6525]               c_s122 := c_s122;
[L7849]   RET         call __var_29 := add~uint256~uint256_SafeMath__success(this, this, 0, freezings_FreezableToken[this][currentKey_s938], _amount_s938);
[L7850]   COND FALSE  !(revert)
[L7853]               sum_freezings3[this] := sum_freezings3[this] - freezings_FreezableToken[this][currentKey_s938];
[L7854]               freezings_FreezableToken[this][currentKey_s938] := __var_29;
[L7855]               sum_freezings3[this] := sum_freezings3[this] + freezings_FreezableToken[this][currentKey_s938];
[L7856]   CALL        call __var_30 := add~uint256~uint256_SafeMath__success(this, this, 0, freezingBalance_FreezableToken[this][_to_s938], _amount_s938);
[L6523]               c_s122 := (a_s122 + b_s122) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6524]               assert c_s122 >= a_s122;
[L6525]               c_s122 := c_s122;
[L7856]   RET         call __var_30 := add~uint256~uint256_SafeMath__success(this, this, 0, freezingBalance_FreezableToken[this][_to_s938], _amount_s938);
[L7857]   COND FALSE  !(revert)
[L7860]               sum_freezingBalance4[this] := sum_freezingBalance4[this] - freezingBalance_FreezableToken[this][_to_s938];
[L7861]               freezingBalance_FreezableToken[this][_to_s938] := __var_30;
[L7862]               sum_freezingBalance4[this] := sum_freezingBalance4[this] + freezingBalance_FreezableToken[this][_to_s938];
[L7863]   COND TRUE   DType[this] == MainToken
[L7864]   CALL        call freeze~address~uint64_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s938, _until_s938);
[L8388]   COND FALSE  !(!(_until_s1240 > now))
[L8392]               __var_42 := _until_s1240 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8393]   COND TRUE   DType[this] == MainToken
[L8394]   CALL        call key_s1240 := toKey~address~uint256_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s1240, _until_s1240 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L8244]               result_s1122 := 39480772448535941496179204954862169494691089619604794184232587696854102179840;
[L8246]               havoc result_s1122;
[L8247]               havoc result_s1122;
[L8248]               havoc result_s1122;
[L8249]               havoc result_s1122;
[L8394]   RET         call key_s1240 := toKey~address~uint256_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s1240, _until_s1240 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L8395]   COND FALSE  !(revert)
[L8411]               key_s1240 := key_s1240;
[L8412]               __var_43 := 0 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8413]   COND FALSE  !(DType[this] == MainToken)
[L8418]   COND FALSE  !(DType[this] == FreezableMintableToken)
[L8423]   COND TRUE   DType[this] == FreezableToken
[L8424]   CALL        call parentKey_s1240 := toKey~address~uint256_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s1240, 0 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L8244]               result_s1122 := 39480772448535941496179204954862169494691089619604794184232587696854102179840;
[L8246]               havoc result_s1122;
[L8247]               havoc result_s1122;
[L8248]               havoc result_s1122;
[L8249]               havoc result_s1122;
[L8424]   RET         call parentKey_s1240 := toKey~address~uint256_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s1240, 0 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L8425]   COND FALSE  !(revert)
[L8431]               parentKey_s1240 := parentKey_s1240;
[L8432]               next_s1240 := chains_FreezableToken[this][parentKey_s1240];
[L8433]   COND TRUE   next_s1240 == 0
[L8434]               sum_chains2[this] := sum_chains2[this] - chains_FreezableToken[this][parentKey_s1240];
[L8435]               chains_FreezableToken[this][parentKey_s1240] := _until_s1240;
[L8436]               sum_chains2[this] := sum_chains2[this] + chains_FreezableToken[this][parentKey_s1240];
[L7864]   RET         call freeze~address~uint64_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s938, _until_s938);
[L7865]   COND FALSE  !(revert)
[L7881]               assert { :EventEmitted "Transfer_FreezableToken" } true;
[L7882]               assert { :EventEmitted "Freezed_FreezableToken" } true;
[L2456]   RET         call freezeTo~address~uint256~uint64_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s938, _amount_s938, _until_s938);
[L2457]               assume !revert && gas >= 0;
[L14251]  RET         call freezeTo~address~uint256~uint64_FreezableToken(this, msgsender_MSG, msgvalue_MSG, _to_s938, _amount_s938, _until_s938);
[L14388]  RET         call CorralChoice_MainToken(this);
[L14388]  CALL        call CorralChoice_MainToken(this);
[L14045]              havoc msgsender_MSG;
[L14046]              havoc msgvalue_MSG;
[L14047]              havoc choice;
[L14048]              havoc __ret_0_totalSupply;
[L14049]              havoc _owner_s729;
[L14050]              havoc balance_s729;
[L14051]              havoc _to_s1572;
[L14052]              havoc _value_s1572;
[L14053]              havoc _success_s1572;
[L14054]              havoc _owner_s395;
[L14055]              havoc _spender_s395;
[L14056]              havoc __ret_0_allowance;
[L14057]              havoc _from_s1551;
[L14058]              havoc _to_s1551;
[L14059]              havoc _value_s1551;
[L14060]              havoc _success_s1551;
[L14061]              havoc _spender_s379;
[L14062]              havoc _value_s379;
[L14063]              havoc __ret_0_approve;
[L14064]              havoc _spender_s437;
[L14065]              havoc _addedValue_s437;
[L14066]              havoc __ret_0_increaseApproval;
[L14067]              havoc _spender_s497;
[L14068]              havoc _subtractedValue_s497;
[L14069]              havoc __ret_0_decreaseApproval;
[L14070]              havoc __ret_0_owner;
[L14071]              havoc _newOwner_s558;
[L14072]              havoc __ret_0_mintingFinished;
[L14073]              havoc _to_s664;
[L14074]              havoc _amount_s664;
[L14075]              havoc __ret_0_mint;
[L14076]              havoc __ret_0_finishMinting;
[L14077]              havoc _owner_s742;
[L14078]              havoc balance_s742;
[L14079]              havoc _owner_s754;
[L14080]              havoc balance_s754;
[L14081]              havoc _addr_s792;
[L14082]              havoc count_s792;
[L14083]              havoc _addr_s849;
[L14084]              havoc _index_s849;
[L14085]              havoc _release_s849;
[L14086]              havoc _balance_s849;
[L14087]              havoc _to_s938;
[L14088]              havoc _amount_s938;
[L14089]              havoc _until_s938;
[L14090]              havoc tokens_s1107;
[L14091]              havoc _value_s1261;
[L14092]              havoc __ret_0_paused;
[L14093]              havoc _to_s1449;
[L14094]              havoc _amount_s1449;
[L14095]              havoc _until_s1449;
[L14096]              havoc __ret_0_mintAndFreeze;
[L14097]              havoc __ret_0_TOKEN_DECIMALS;
[L14098]              havoc __ret_0_TOKEN_DECIMALS_UINT8;
[L14099]              havoc __ret_0_TOKEN_DECIMAL_MULTIPLIER;
[L14100]              havoc __ret_0_TOKEN_NAME;
[L14101]              havoc __ret_0_TOKEN_SYMBOL;
[L14102]              havoc __ret_0_PAUSED;
[L14103]              havoc __ret_0_TARGET_USER;
[L14104]              havoc __ret_0_CONTINUE_MINTING;
[L14105]              havoc __ret_0_initialized;
[L14106]              havoc _name_s1511;
[L14107]              havoc _symbol_s1519;
[L14108]              havoc _decimals_s1527;
[L14109]              havoc tmpNow;
[L14110]              havoc gas;
[L14111]              assume gas > 4000000 && gas <= 8000000;
[L14112]              tmpNow := now;
[L14113]              havoc now;
[L14114]              assume now > tmpNow;
[L14115]              assume msgsender_MSG != null;
[L14116]              assume DType[msgsender_MSG] != ERC20Basic;
[L14117]              assume DType[msgsender_MSG] != SafeMath;
[L14118]              assume DType[msgsender_MSG] != BasicToken;
[L14119]              assume DType[msgsender_MSG] != ERC20;
[L14120]              assume DType[msgsender_MSG] != StandardToken;
[L14121]              assume DType[msgsender_MSG] != Ownable;
[L14122]              assume DType[msgsender_MSG] != MintableToken;
[L14123]              assume DType[msgsender_MSG] != FreezableToken;
[L14124]              assume DType[msgsender_MSG] != BurnableToken;
[L14125]              assume DType[msgsender_MSG] != Pausable;
[L14126]              assume DType[msgsender_MSG] != FreezableMintableToken;
[L14127]              assume DType[msgsender_MSG] != Consts;
[L14128]              assume DType[msgsender_MSG] != MainToken;
[L14129]              Alloc[msgsender_MSG] := true;
[L14130]  COND FALSE  !(choice == 38)
[L14136]  COND TRUE   choice == 37
[L14137]              gas := gas - 21000;
[L14138]  COND TRUE   gas >= 0
[L14139]              assume msgvalue_MSG == 0;
[L14140]  CALL        call balance_s729 := balanceOf~address_FreezableToken(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume balances_BasicToken[this][_owner_s729] >= 0 && balances_BasicToken[this][_owner_s729] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_balanceOf_FreezableToken0 := true;
[L2]                  call_balanceOf_FreezableToken0 := false;
[L2]                  revert := revert_hold;
[L1999]               havoc __exception;
[L2000]               revert := false;
[L2001]   COND FALSE  !(__exception)
[L2038]   CALL        call balance_s729 := balanceOf~address_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L7405]   COND TRUE   DType[this] == MainToken
[L7406]   CALL        call __var_14 := balanceOf~address_BasicToken__success(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L6660]               __ret_0_ := balances_BasicToken[this][_owner_s214];
[L7406]   RET         call __var_14 := balanceOf~address_BasicToken__success(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L7407]   COND FALSE  !(revert)
[L7423]               balance_s729 := (__var_14 + freezingBalance_FreezableToken[this][_owner_s729]) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2038]   RET         call balance_s729 := balanceOf~address_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L2039]               assume !revert && gas >= 0;
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume !((((((((((balance_s729 == balances_BasicToken[this][_owner_s729] && totalSupply__BasicToken[this] == old(totalSupply__BasicToken[this])) && balances_BasicToken[this] == old(balances_BasicToken[this])) && allowed_StandardToken[this] == old(allowed_StandardToken[this])) && initialized_MainToken[this] == old(initialized_MainToken[this])) && paused_Pausable[this] == old(paused_Pausable[this])) && mintingFinished_MintableToken[this] == old(mintingFinished_MintableToken[this])) && owner_Ownable[this] == old(owner_Ownable[this])) && chains_FreezableToken[this] == old(chains_FreezableToken[this])) && freezings_FreezableToken[this] == old(freezings_FreezableToken[this])) && freezingBalance_FreezableToken[this] == old(freezingBalance_FreezableToken[this]));
[L2]                  revert := revert_hold;
[L14140]  RET         call balance_s729 := balanceOf~address_FreezableToken(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L14388]  RET         call CorralChoice_MainToken(this);

Loop:
[L14388]  CALL        call CorralChoice_MainToken(this);
[L14045]              havoc msgsender_MSG;
[L14046]              havoc msgvalue_MSG;
[L14047]              havoc choice;
[L14048]              havoc __ret_0_totalSupply;
[L14049]              havoc _owner_s729;
[L14050]              havoc balance_s729;
[L14051]              havoc _to_s1572;
[L14052]              havoc _value_s1572;
[L14053]              havoc _success_s1572;
[L14054]              havoc _owner_s395;
[L14055]              havoc _spender_s395;
[L14056]              havoc __ret_0_allowance;
[L14057]              havoc _from_s1551;
[L14058]              havoc _to_s1551;
[L14059]              havoc _value_s1551;
[L14060]              havoc _success_s1551;
[L14061]              havoc _spender_s379;
[L14062]              havoc _value_s379;
[L14063]              havoc __ret_0_approve;
[L14064]              havoc _spender_s437;
[L14065]              havoc _addedValue_s437;
[L14066]              havoc __ret_0_increaseApproval;
[L14067]              havoc _spender_s497;
[L14068]              havoc _subtractedValue_s497;
[L14069]              havoc __ret_0_decreaseApproval;
[L14070]              havoc __ret_0_owner;
[L14071]              havoc _newOwner_s558;
[L14072]              havoc __ret_0_mintingFinished;
[L14073]              havoc _to_s664;
[L14074]              havoc _amount_s664;
[L14075]              havoc __ret_0_mint;
[L14076]              havoc __ret_0_finishMinting;
[L14077]              havoc _owner_s742;
[L14078]              havoc balance_s742;
[L14079]              havoc _owner_s754;
[L14080]              havoc balance_s754;
[L14081]              havoc _addr_s792;
[L14082]              havoc count_s792;
[L14083]              havoc _addr_s849;
[L14084]              havoc _index_s849;
[L14085]              havoc _release_s849;
[L14086]              havoc _balance_s849;
[L14087]              havoc _to_s938;
[L14088]              havoc _amount_s938;
[L14089]              havoc _until_s938;
[L14090]              havoc tokens_s1107;
[L14091]              havoc _value_s1261;
[L14092]              havoc __ret_0_paused;
[L14093]              havoc _to_s1449;
[L14094]              havoc _amount_s1449;
[L14095]              havoc _until_s1449;
[L14096]              havoc __ret_0_mintAndFreeze;
[L14097]              havoc __ret_0_TOKEN_DECIMALS;
[L14098]              havoc __ret_0_TOKEN_DECIMALS_UINT8;
[L14099]              havoc __ret_0_TOKEN_DECIMAL_MULTIPLIER;
[L14100]              havoc __ret_0_TOKEN_NAME;
[L14101]              havoc __ret_0_TOKEN_SYMBOL;
[L14102]              havoc __ret_0_PAUSED;
[L14103]              havoc __ret_0_TARGET_USER;
[L14104]              havoc __ret_0_CONTINUE_MINTING;
[L14105]              havoc __ret_0_initialized;
[L14106]              havoc _name_s1511;
[L14107]              havoc _symbol_s1519;
[L14108]              havoc _decimals_s1527;
[L14109]              havoc tmpNow;
[L14110]              havoc gas;
[L14111]              assume gas > 4000000 && gas <= 8000000;
[L14112]              tmpNow := now;
[L14113]              havoc now;
[L14114]              assume now > tmpNow;
[L14115]              assume msgsender_MSG != null;
[L14116]              assume DType[msgsender_MSG] != ERC20Basic;
[L14117]              assume DType[msgsender_MSG] != SafeMath;
[L14118]              assume DType[msgsender_MSG] != BasicToken;
[L14119]              assume DType[msgsender_MSG] != ERC20;
[L14120]              assume DType[msgsender_MSG] != StandardToken;
[L14121]              assume DType[msgsender_MSG] != Ownable;
[L14122]              assume DType[msgsender_MSG] != MintableToken;
[L14123]              assume DType[msgsender_MSG] != FreezableToken;
[L14124]              assume DType[msgsender_MSG] != BurnableToken;
[L14125]              assume DType[msgsender_MSG] != Pausable;
[L14126]              assume DType[msgsender_MSG] != FreezableMintableToken;
[L14127]              assume DType[msgsender_MSG] != Consts;
[L14128]              assume DType[msgsender_MSG] != MainToken;
[L14129]              Alloc[msgsender_MSG] := true;
[L14130]  COND FALSE  !(choice == 38)
[L14136]  COND TRUE   choice == 37
[L14137]              gas := gas - 21000;
[L14138]  COND TRUE   gas >= 0
[L14139]              assume msgvalue_MSG == 0;
[L14140]  CALL        call balance_s729 := balanceOf~address_FreezableToken(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume balances_BasicToken[this][_owner_s729] >= 0 && balances_BasicToken[this][_owner_s729] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_balanceOf_FreezableToken0 := true;
[L2]                  call_balanceOf_FreezableToken0 := false;
[L2]                  revert := revert_hold;
[L1999]               havoc __exception;
[L2000]               revert := false;
[L2001]   COND FALSE  !(__exception)
[L2038]   CALL        call balance_s729 := balanceOf~address_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L7405]   COND TRUE   DType[this] == MainToken
[L7406]   CALL        call __var_14 := balanceOf~address_BasicToken__success(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L6660]               __ret_0_ := balances_BasicToken[this][_owner_s214];
[L7406]   RET         call __var_14 := balanceOf~address_BasicToken__success(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L7407]   COND FALSE  !(revert)
[L7423]               balance_s729 := (__var_14 + freezingBalance_FreezableToken[this][_owner_s729]) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2038]   RET         call balance_s729 := balanceOf~address_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L2039]               assume !revert && gas >= 0;
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume !((((((((((balance_s729 == balances_BasicToken[this][_owner_s729] && totalSupply__BasicToken[this] == old(totalSupply__BasicToken[this])) && balances_BasicToken[this] == old(balances_BasicToken[this])) && allowed_StandardToken[this] == old(allowed_StandardToken[this])) && initialized_MainToken[this] == old(initialized_MainToken[this])) && paused_Pausable[this] == old(paused_Pausable[this])) && mintingFinished_MintableToken[this] == old(mintingFinished_MintableToken[this])) && owner_Ownable[this] == old(owner_Ownable[this])) && chains_FreezableToken[this] == old(chains_FreezableToken[this])) && freezings_FreezableToken[this] == old(freezings_FreezableToken[this])) && freezingBalance_FreezableToken[this] == old(freezingBalance_FreezableToken[this]));
[L2]                  revert := revert_hold;
[L14140]  RET         call balance_s729 := balanceOf~address_FreezableToken(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L14388]  RET         call CorralChoice_MainToken(this);

[2020-11-24 21:26:10,763 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-24 21:26:10,763 INFO  L82        PathProgramCache]: Analyzing trace with hash -9401039, now seen corresponding path program 1 times
[2020-11-24 21:26:10,764 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-24 21:26:10,795 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-24 21:26:11,370 INFO  L134       CoverageAnalysis]: Checked inductivity of 9938 backedges. 1 proven. 0 refuted. 0 times theorem prover too weak. 9937 trivial. 0 not checked.
[2020-11-24 21:26:11,370 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-24 21:26:11,371 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [3] imperfect sequences [] total 3
[2020-11-24 21:26:11,371 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-24 21:26:11,371 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-11-24 21:26:11,371 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-11-24 21:26:11,372 INFO  L87              Difference]: Start difference. First operand 5552 states and 6257 transitions. cyclomatic complexity: 723 Second operand 3 states.
[2020-11-24 21:26:11,418 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-24 21:26:11,418 INFO  L93              Difference]: Finished difference Result 5618 states and 6347 transitions.
[2020-11-24 21:26:11,418 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-11-24 21:26:11,418 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 5618 states and 6347 transitions.
[2020-11-24 21:26:11,427 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-24 21:26:11,437 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 5618 states to 5618 states and 6347 transitions.
[2020-11-24 21:26:11,437 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1121
[2020-11-24 21:26:11,437 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1121
[2020-11-24 21:26:11,437 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 5618 states and 6347 transitions.
[2020-11-24 21:26:11,440 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-24 21:26:11,440 INFO  L728         BuchiCegarLoop]: Abstraction has 5618 states and 6347 transitions.
[2020-11-24 21:26:11,444 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 5618 states and 6347 transitions.
[2020-11-24 21:26:11,465 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 5618 to 5588.
[2020-11-24 21:26:11,465 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 5588 states.
[2020-11-24 21:26:11,471 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 5588 states to 5588 states and 6297 transitions.
[2020-11-24 21:26:11,471 INFO  L751         BuchiCegarLoop]: Abstraction has 5588 states and 6297 transitions.
[2020-11-24 21:26:11,471 INFO  L631         BuchiCegarLoop]: Abstraction has 5588 states and 6297 transitions.
[2020-11-24 21:26:11,471 INFO  L445         BuchiCegarLoop]: ======== Iteration 12============
[2020-11-24 21:26:11,471 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 5588 states and 6297 transitions.
[2020-11-24 21:26:11,476 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-24 21:26:11,476 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-24 21:26:11,476 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-24 21:26:11,478 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [38, 38, 38, 38, 38, 38, 38, 38, 38, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-24 21:26:11,478 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  success_balanceOf_FreezableToken0 := false;
[L2]                  call_balanceOf_FreezableToken0 := false;
[L2]      CALL        call main();
[L14378]              assume null == 0;
[L14379]  CALL        call this := FreshRefGenerator__success();
[L6396]               havoc newRef;
[L6397]               assume Alloc[newRef] == false;
[L6398]               Alloc[newRef] := true;
[L6399]               assume newRef != null;
[L14379]  RET         call this := FreshRefGenerator__success();
[L14380]              assume now >= 0;
[L14381]              assume DType[this] == MainToken;
[L14382]              assume msgvalue_MSG == 0;
[L14383]              gas := gas - 53000;
[L14384]  CALL        call MainToken_MainToken(this, msgsender_MSG, msgvalue_MSG);
[L4183]               havoc __exception;
[L4184]               revert := false;
[L4185]   COND FALSE  !(__exception)
[L4222]   CALL        call MainToken_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9205]   CALL        call Consts_Consts__success(this, msgsender_MSG, msgvalue_MSG);
[L9007]   CALL        call Consts_Consts_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8983]               assume msgsender_MSG != null;
[L8984]               Balance[this] := 0;
[L8985]               TOKEN_DECIMALS_Consts[this] := 18;
[L8986]               TOKEN_DECIMALS_UINT8_Consts[this] := 18;
[L8987]               TOKEN_DECIMAL_MULTIPLIER_Consts[this] := nonlinearPow(10, TOKEN_DECIMALS_Consts[this]) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8988]               TOKEN_NAME_Consts[this] := -1051245219;
[L8989]               TOKEN_SYMBOL_Consts[this] := -1804535220;
[L8990]               PAUSED_Consts[this] := false;
[L8991]               __var_52 := ConstantToRef(-210822415442009814958929812751043848690848471787);
[L8992]               TARGET_USER_Consts[this] := ConstantToRef(-210822415442009814958929812751043848690848471787);
[L8993]               CONTINUE_MINTING_Consts[this] := true;
[L9007]   RET         call Consts_Consts_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9008]   COND FALSE  !(revert)
[L9205]   RET         call Consts_Consts__success(this, msgsender_MSG, msgvalue_MSG);
[L9206]   COND FALSE  !(revert)
[L9209]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L9209]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L9210]   COND FALSE  !(revert)
[L9213]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6694]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6694]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6695]   COND FALSE  !(revert)
[L6698]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6675]               assume msgsender_MSG != null;
[L6676]               Balance[this] := 0;
[L6698]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6699]   COND FALSE  !(revert)
[L9213]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L9214]   COND FALSE  !(revert)
[L9217]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6565]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   COND FALSE  !(revert)
[L6569]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]               assume msgsender_MSG != null;
[L6544]               Balance[this] := 0;
[L6545]               balances_BasicToken[this] := zeroRefintArr();
[L6546]               sum_balances0[this] := 0;
[L6547]               totalSupply__BasicToken[this] := 0;
[L6569]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6570]   COND FALSE  !(revert)
[L9217]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9218]   COND FALSE  !(revert)
[L9221]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6746]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6746]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6747]   COND FALSE  !(revert)
[L6750]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6694]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6694]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6695]   COND FALSE  !(revert)
[L6698]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6675]               assume msgsender_MSG != null;
[L6676]               Balance[this] := 0;
[L6698]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6699]   COND FALSE  !(revert)
[L6750]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6751]   COND FALSE  !(revert)
[L6754]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6565]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   COND FALSE  !(revert)
[L6569]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]               assume msgsender_MSG != null;
[L6544]               Balance[this] := 0;
[L6545]               balances_BasicToken[this] := zeroRefintArr();
[L6546]               sum_balances0[this] := 0;
[L6547]               totalSupply__BasicToken[this] := 0;
[L6569]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6570]   COND FALSE  !(revert)
[L6754]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6755]   COND FALSE  !(revert)
[L6758]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6717]               assume msgsender_MSG != null;
[L6718]               Balance[this] := 0;
[L6719]               allowed_StandardToken[this] := zeroRefRefintArr();
[L6720]               sum_allowed1[this] := 0;
[L6758]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6759]   COND FALSE  !(revert)
[L9221]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9222]   COND FALSE  !(revert)
[L9225]   CALL        call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7353]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L7353]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7354]   COND FALSE  !(revert)
[L7357]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6694]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6694]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6695]   COND FALSE  !(revert)
[L6698]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6675]               assume msgsender_MSG != null;
[L6676]               Balance[this] := 0;
[L6698]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6699]   COND FALSE  !(revert)
[L7357]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7358]   COND FALSE  !(revert)
[L7361]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6565]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   COND FALSE  !(revert)
[L6569]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]               assume msgsender_MSG != null;
[L6544]               Balance[this] := 0;
[L6545]               balances_BasicToken[this] := zeroRefintArr();
[L6546]               sum_balances0[this] := 0;
[L6547]               totalSupply__BasicToken[this] := 0;
[L6569]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6570]   COND FALSE  !(revert)
[L7361]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7362]   COND FALSE  !(revert)
[L7365]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6746]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6746]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6747]   COND FALSE  !(revert)
[L6750]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6694]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6694]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6695]   COND FALSE  !(revert)
[L6698]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6675]               assume msgsender_MSG != null;
[L6676]               Balance[this] := 0;
[L6698]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6699]   COND FALSE  !(revert)
[L6750]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6751]   COND FALSE  !(revert)
[L6754]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6565]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   COND FALSE  !(revert)
[L6569]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]               assume msgsender_MSG != null;
[L6544]               Balance[this] := 0;
[L6545]               balances_BasicToken[this] := zeroRefintArr();
[L6546]               sum_balances0[this] := 0;
[L6547]               totalSupply__BasicToken[this] := 0;
[L6569]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6570]   COND FALSE  !(revert)
[L6754]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6755]   COND FALSE  !(revert)
[L6758]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6717]               assume msgsender_MSG != null;
[L6718]               Balance[this] := 0;
[L6719]               allowed_StandardToken[this] := zeroRefRefintArr();
[L6720]               sum_allowed1[this] := 0;
[L6758]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6759]   COND FALSE  !(revert)
[L7365]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7366]   COND FALSE  !(revert)
[L7369]   CALL        call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7316]               assume msgsender_MSG != null;
[L7317]               Balance[this] := 0;
[L7318]               chains_FreezableToken[this] := zerointintArr();
[L7319]               sum_chains2[this] := 0;
[L7320]               freezings_FreezableToken[this] := zerointintArr();
[L7321]               sum_freezings3[this] := 0;
[L7322]               freezingBalance_FreezableToken[this] := zeroRefintArr();
[L7323]               sum_freezingBalance4[this] := 0;
[L7369]   RET         call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7370]   COND FALSE  !(revert)
[L9225]   RET         call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9226]   COND FALSE  !(revert)
[L9229]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6988]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6971]               assume msgsender_MSG != null;
[L6972]               Balance[this] := 0;
[L6973]               owner_Ownable[this] := null;
[L6975]               owner_Ownable[this] := msgsender_MSG;
[L6988]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6989]   COND FALSE  !(revert)
[L9229]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L9230]   COND FALSE  !(revert)
[L9233]   CALL        call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7172]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L7172]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7173]   COND FALSE  !(revert)
[L7176]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6694]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6694]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6695]   COND FALSE  !(revert)
[L6698]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6675]               assume msgsender_MSG != null;
[L6676]               Balance[this] := 0;
[L6698]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6699]   COND FALSE  !(revert)
[L7176]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7177]   COND FALSE  !(revert)
[L7180]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6565]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   COND FALSE  !(revert)
[L6569]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]               assume msgsender_MSG != null;
[L6544]               Balance[this] := 0;
[L6545]               balances_BasicToken[this] := zeroRefintArr();
[L6546]               sum_balances0[this] := 0;
[L6547]               totalSupply__BasicToken[this] := 0;
[L6569]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6570]   COND FALSE  !(revert)
[L7180]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7181]   COND FALSE  !(revert)
[L7184]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6746]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6746]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6747]   COND FALSE  !(revert)
[L6750]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6694]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6694]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6695]   COND FALSE  !(revert)
[L6698]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6675]               assume msgsender_MSG != null;
[L6676]               Balance[this] := 0;
[L6698]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6699]   COND FALSE  !(revert)
[L6750]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6751]   COND FALSE  !(revert)
[L6754]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6565]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   COND FALSE  !(revert)
[L6569]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]               assume msgsender_MSG != null;
[L6544]               Balance[this] := 0;
[L6545]               balances_BasicToken[this] := zeroRefintArr();
[L6546]               sum_balances0[this] := 0;
[L6547]               totalSupply__BasicToken[this] := 0;
[L6569]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6570]   COND FALSE  !(revert)
[L6754]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6755]   COND FALSE  !(revert)
[L6758]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6717]               assume msgsender_MSG != null;
[L6718]               Balance[this] := 0;
[L6719]               allowed_StandardToken[this] := zeroRefRefintArr();
[L6720]               sum_allowed1[this] := 0;
[L6758]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6759]   COND FALSE  !(revert)
[L7184]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7185]   COND FALSE  !(revert)
[L7188]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6988]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6971]               assume msgsender_MSG != null;
[L6972]               Balance[this] := 0;
[L6973]               owner_Ownable[this] := null;
[L6975]               owner_Ownable[this] := msgsender_MSG;
[L6988]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6989]   COND FALSE  !(revert)
[L7188]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7189]   COND FALSE  !(revert)
[L7192]   CALL        call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7136]               assume msgsender_MSG != null;
[L7137]               Balance[this] := 0;
[L7138]               mintingFinished_MintableToken[this] := false;
[L7192]   RET         call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7193]   COND FALSE  !(revert)
[L9233]   RET         call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9234]   COND FALSE  !(revert)
[L9237]   CALL        call FreezableMintableToken_FreezableMintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L8792]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L8792]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L8793]   COND FALSE  !(revert)
[L8796]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6694]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6694]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6695]   COND FALSE  !(revert)
[L6698]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6675]               assume msgsender_MSG != null;
[L6676]               Balance[this] := 0;
[L6698]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6699]   COND FALSE  !(revert)
[L8796]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L8797]   COND FALSE  !(revert)
[L8800]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6565]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   COND FALSE  !(revert)
[L6569]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]               assume msgsender_MSG != null;
[L6544]               Balance[this] := 0;
[L6545]               balances_BasicToken[this] := zeroRefintArr();
[L6546]               sum_balances0[this] := 0;
[L6547]               totalSupply__BasicToken[this] := 0;
[L6569]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6570]   COND FALSE  !(revert)
[L8800]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L8801]   COND FALSE  !(revert)
[L8804]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6746]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6746]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6747]   COND FALSE  !(revert)
[L6750]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6694]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6694]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6695]   COND FALSE  !(revert)
[L6698]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6675]               assume msgsender_MSG != null;
[L6676]               Balance[this] := 0;
[L6698]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6699]   COND FALSE  !(revert)
[L6750]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6751]   COND FALSE  !(revert)
[L6754]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6565]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   COND FALSE  !(revert)
[L6569]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]               assume msgsender_MSG != null;
[L6544]               Balance[this] := 0;
[L6545]               balances_BasicToken[this] := zeroRefintArr();
[L6546]               sum_balances0[this] := 0;
[L6547]               totalSupply__BasicToken[this] := 0;
[L6569]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6570]   COND FALSE  !(revert)
[L6754]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6755]   COND FALSE  !(revert)
[L6758]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6717]               assume msgsender_MSG != null;
[L6718]               Balance[this] := 0;
[L6719]               allowed_StandardToken[this] := zeroRefRefintArr();
[L6720]               sum_allowed1[this] := 0;
[L6758]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6759]   COND FALSE  !(revert)
[L8804]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L8805]   COND FALSE  !(revert)
[L8808]   CALL        call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7353]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L7353]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7354]   COND FALSE  !(revert)
[L7357]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6694]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6694]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6695]   COND FALSE  !(revert)
[L6698]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6675]               assume msgsender_MSG != null;
[L6676]               Balance[this] := 0;
[L6698]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6699]   COND FALSE  !(revert)
[L7357]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7358]   COND FALSE  !(revert)
[L7361]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6565]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   COND FALSE  !(revert)
[L6569]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]               assume msgsender_MSG != null;
[L6544]               Balance[this] := 0;
[L6545]               balances_BasicToken[this] := zeroRefintArr();
[L6546]               sum_balances0[this] := 0;
[L6547]               totalSupply__BasicToken[this] := 0;
[L6569]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6570]   COND FALSE  !(revert)
[L7361]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7362]   COND FALSE  !(revert)
[L7365]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6746]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6746]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6747]   COND FALSE  !(revert)
[L6750]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6694]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6694]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6695]   COND FALSE  !(revert)
[L6698]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6675]               assume msgsender_MSG != null;
[L6676]               Balance[this] := 0;
[L6698]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6699]   COND FALSE  !(revert)
[L6750]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6751]   COND FALSE  !(revert)
[L6754]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6565]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   COND FALSE  !(revert)
[L6569]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]               assume msgsender_MSG != null;
[L6544]               Balance[this] := 0;
[L6545]               balances_BasicToken[this] := zeroRefintArr();
[L6546]               sum_balances0[this] := 0;
[L6547]               totalSupply__BasicToken[this] := 0;
[L6569]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6570]   COND FALSE  !(revert)
[L6754]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6755]   COND FALSE  !(revert)
[L6758]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6717]               assume msgsender_MSG != null;
[L6718]               Balance[this] := 0;
[L6719]               allowed_StandardToken[this] := zeroRefRefintArr();
[L6720]               sum_allowed1[this] := 0;
[L6758]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6759]   COND FALSE  !(revert)
[L7365]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7366]   COND FALSE  !(revert)
[L7369]   CALL        call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7316]               assume msgsender_MSG != null;
[L7317]               Balance[this] := 0;
[L7318]               chains_FreezableToken[this] := zerointintArr();
[L7319]               sum_chains2[this] := 0;
[L7320]               freezings_FreezableToken[this] := zerointintArr();
[L7321]               sum_freezings3[this] := 0;
[L7322]               freezingBalance_FreezableToken[this] := zeroRefintArr();
[L7323]               sum_freezingBalance4[this] := 0;
[L7369]   RET         call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7370]   COND FALSE  !(revert)
[L8808]   RET         call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L8809]   COND FALSE  !(revert)
[L8812]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6988]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6971]               assume msgsender_MSG != null;
[L6972]               Balance[this] := 0;
[L6973]               owner_Ownable[this] := null;
[L6975]               owner_Ownable[this] := msgsender_MSG;
[L6988]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6989]   COND FALSE  !(revert)
[L8812]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L8813]   COND FALSE  !(revert)
[L8816]   CALL        call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7172]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L7172]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7173]   COND FALSE  !(revert)
[L7176]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6694]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6694]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6695]   COND FALSE  !(revert)
[L6698]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6675]               assume msgsender_MSG != null;
[L6676]               Balance[this] := 0;
[L6698]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6699]   COND FALSE  !(revert)
[L7176]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7177]   COND FALSE  !(revert)
[L7180]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6565]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   COND FALSE  !(revert)
[L6569]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]               assume msgsender_MSG != null;
[L6544]               Balance[this] := 0;
[L6545]               balances_BasicToken[this] := zeroRefintArr();
[L6546]               sum_balances0[this] := 0;
[L6547]               totalSupply__BasicToken[this] := 0;
[L6569]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6570]   COND FALSE  !(revert)
[L7180]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7181]   COND FALSE  !(revert)
[L7184]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6746]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6746]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6747]   COND FALSE  !(revert)
[L6750]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6694]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6694]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6695]   COND FALSE  !(revert)
[L6698]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6675]               assume msgsender_MSG != null;
[L6676]               Balance[this] := 0;
[L6698]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6699]   COND FALSE  !(revert)
[L6750]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6751]   COND FALSE  !(revert)
[L6754]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6565]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   COND FALSE  !(revert)
[L6569]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]               assume msgsender_MSG != null;
[L6544]               Balance[this] := 0;
[L6545]               balances_BasicToken[this] := zeroRefintArr();
[L6546]               sum_balances0[this] := 0;
[L6547]               totalSupply__BasicToken[this] := 0;
[L6569]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6570]   COND FALSE  !(revert)
[L6754]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6755]   COND FALSE  !(revert)
[L6758]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6717]               assume msgsender_MSG != null;
[L6718]               Balance[this] := 0;
[L6719]               allowed_StandardToken[this] := zeroRefRefintArr();
[L6720]               sum_allowed1[this] := 0;
[L6758]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6759]   COND FALSE  !(revert)
[L7184]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7185]   COND FALSE  !(revert)
[L7188]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6988]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6971]               assume msgsender_MSG != null;
[L6972]               Balance[this] := 0;
[L6973]               owner_Ownable[this] := null;
[L6975]               owner_Ownable[this] := msgsender_MSG;
[L6988]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6989]   COND FALSE  !(revert)
[L7188]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7189]   COND FALSE  !(revert)
[L7192]   CALL        call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7136]               assume msgsender_MSG != null;
[L7137]               Balance[this] := 0;
[L7138]               mintingFinished_MintableToken[this] := false;
[L7192]   RET         call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7193]   COND FALSE  !(revert)
[L8816]   RET         call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L8817]   COND FALSE  !(revert)
[L8820]   CALL        call FreezableMintableToken_FreezableMintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8749]               assume msgsender_MSG != null;
[L8750]               Balance[this] := 0;
[L8820]   RET         call FreezableMintableToken_FreezableMintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8821]   COND FALSE  !(revert)
[L9237]   RET         call FreezableMintableToken_FreezableMintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9238]   COND FALSE  !(revert)
[L9241]   CALL        call BurnableToken_BurnableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L8536]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L8536]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L8537]   COND FALSE  !(revert)
[L8540]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6565]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   COND FALSE  !(revert)
[L6569]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]               assume msgsender_MSG != null;
[L6544]               Balance[this] := 0;
[L6545]               balances_BasicToken[this] := zeroRefintArr();
[L6546]               sum_balances0[this] := 0;
[L6547]               totalSupply__BasicToken[this] := 0;
[L6569]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6570]   COND FALSE  !(revert)
[L8540]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L8541]   COND FALSE  !(revert)
[L8544]   CALL        call BurnableToken_BurnableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8513]               assume msgsender_MSG != null;
[L8514]               Balance[this] := 0;
[L8544]   RET         call BurnableToken_BurnableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8545]   COND FALSE  !(revert)
[L9241]   RET         call BurnableToken_BurnableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9242]   COND FALSE  !(revert)
[L9245]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L8662]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6988]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6971]               assume msgsender_MSG != null;
[L6972]               Balance[this] := 0;
[L6973]               owner_Ownable[this] := null;
[L6975]               owner_Ownable[this] := msgsender_MSG;
[L6988]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6989]   COND FALSE  !(revert)
[L8662]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L8663]   COND FALSE  !(revert)
[L8666]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8642]               assume msgsender_MSG != null;
[L8643]               Balance[this] := 0;
[L8644]               paused_Pausable[this] := false;
[L8666]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8667]   COND FALSE  !(revert)
[L9245]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L9246]   COND FALSE  !(revert)
[L9249]   CALL        call MainToken_MainToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9133]               assume msgsender_MSG != null;
[L9134]               Balance[this] := 0;
[L9135]               initialized_MainToken[this] := false;
[L9137]   CALL        call init_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9404]   COND FALSE  !(!!initialized_MainToken[this])
[L9408]               initialized_MainToken[this] := true;
[L9409]   COND FALSE  !(PAUSED_Consts[this])
[L9419]   COND FALSE  !(!CONTINUE_MINTING_Consts[this])
[L9429]               assert { :EventEmitted "Initialized_MainToken" } true;
[L9137]   RET         call init_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9138]   COND FALSE  !(revert)
[L9141]   COND TRUE   DType[this] == MainToken
[L9142]   CALL        call transferOwnership~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, TARGET_USER_Consts[this]);
[L7055]   CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L12332]  COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L7055]   RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7056]   COND FALSE  !(revert)
[L7059]   COND TRUE   DType[this] == MainToken
[L7060]   CALL        call _transferOwnership~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, _newOwner_s558);
[L7103]               __var_11 := null;
[L7104]   COND FALSE  !(!(_newOwner_s581 != null))
[L7108]               assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L7109]               owner_Ownable[this] := _newOwner_s581;
[L7060]   RET         call _transferOwnership~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, _newOwner_s558);
[L7061]   COND FALSE  !(revert)
[L9142]   RET         call transferOwnership~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, TARGET_USER_Consts[this]);
[L9143]   COND FALSE  !(revert)
[L9249]   RET         call MainToken_MainToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9250]   COND FALSE  !(revert)
[L4222]   RET         call MainToken_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4223]               assume !revert && gas >= 0;
[L14384]  RET         call MainToken_MainToken(this, msgsender_MSG, msgvalue_MSG);
[L14385]              assume !revert && gas >= 0;
[L14388]  CALL        call CorralChoice_MainToken(this);
[L14045]              havoc msgsender_MSG;
[L14046]              havoc msgvalue_MSG;
[L14047]              havoc choice;
[L14048]              havoc __ret_0_totalSupply;
[L14049]              havoc _owner_s729;
[L14050]              havoc balance_s729;
[L14051]              havoc _to_s1572;
[L14052]              havoc _value_s1572;
[L14053]              havoc _success_s1572;
[L14054]              havoc _owner_s395;
[L14055]              havoc _spender_s395;
[L14056]              havoc __ret_0_allowance;
[L14057]              havoc _from_s1551;
[L14058]              havoc _to_s1551;
[L14059]              havoc _value_s1551;
[L14060]              havoc _success_s1551;
[L14061]              havoc _spender_s379;
[L14062]              havoc _value_s379;
[L14063]              havoc __ret_0_approve;
[L14064]              havoc _spender_s437;
[L14065]              havoc _addedValue_s437;
[L14066]              havoc __ret_0_increaseApproval;
[L14067]              havoc _spender_s497;
[L14068]              havoc _subtractedValue_s497;
[L14069]              havoc __ret_0_decreaseApproval;
[L14070]              havoc __ret_0_owner;
[L14071]              havoc _newOwner_s558;
[L14072]              havoc __ret_0_mintingFinished;
[L14073]              havoc _to_s664;
[L14074]              havoc _amount_s664;
[L14075]              havoc __ret_0_mint;
[L14076]              havoc __ret_0_finishMinting;
[L14077]              havoc _owner_s742;
[L14078]              havoc balance_s742;
[L14079]              havoc _owner_s754;
[L14080]              havoc balance_s754;
[L14081]              havoc _addr_s792;
[L14082]              havoc count_s792;
[L14083]              havoc _addr_s849;
[L14084]              havoc _index_s849;
[L14085]              havoc _release_s849;
[L14086]              havoc _balance_s849;
[L14087]              havoc _to_s938;
[L14088]              havoc _amount_s938;
[L14089]              havoc _until_s938;
[L14090]              havoc tokens_s1107;
[L14091]              havoc _value_s1261;
[L14092]              havoc __ret_0_paused;
[L14093]              havoc _to_s1449;
[L14094]              havoc _amount_s1449;
[L14095]              havoc _until_s1449;
[L14096]              havoc __ret_0_mintAndFreeze;
[L14097]              havoc __ret_0_TOKEN_DECIMALS;
[L14098]              havoc __ret_0_TOKEN_DECIMALS_UINT8;
[L14099]              havoc __ret_0_TOKEN_DECIMAL_MULTIPLIER;
[L14100]              havoc __ret_0_TOKEN_NAME;
[L14101]              havoc __ret_0_TOKEN_SYMBOL;
[L14102]              havoc __ret_0_PAUSED;
[L14103]              havoc __ret_0_TARGET_USER;
[L14104]              havoc __ret_0_CONTINUE_MINTING;
[L14105]              havoc __ret_0_initialized;
[L14106]              havoc _name_s1511;
[L14107]              havoc _symbol_s1519;
[L14108]              havoc _decimals_s1527;
[L14109]              havoc tmpNow;
[L14110]              havoc gas;
[L14111]              assume gas > 4000000 && gas <= 8000000;
[L14112]              tmpNow := now;
[L14113]              havoc now;
[L14114]              assume now > tmpNow;
[L14115]              assume msgsender_MSG != null;
[L14116]              assume DType[msgsender_MSG] != ERC20Basic;
[L14117]              assume DType[msgsender_MSG] != SafeMath;
[L14118]              assume DType[msgsender_MSG] != BasicToken;
[L14119]              assume DType[msgsender_MSG] != ERC20;
[L14120]              assume DType[msgsender_MSG] != StandardToken;
[L14121]              assume DType[msgsender_MSG] != Ownable;
[L14122]              assume DType[msgsender_MSG] != MintableToken;
[L14123]              assume DType[msgsender_MSG] != FreezableToken;
[L14124]              assume DType[msgsender_MSG] != BurnableToken;
[L14125]              assume DType[msgsender_MSG] != Pausable;
[L14126]              assume DType[msgsender_MSG] != FreezableMintableToken;
[L14127]              assume DType[msgsender_MSG] != Consts;
[L14128]              assume DType[msgsender_MSG] != MainToken;
[L14129]              Alloc[msgsender_MSG] := true;
[L14130]  COND FALSE  !(choice == 38)
[L14136]  COND FALSE  !(choice == 37)
[L14142]  COND FALSE  !(choice == 36)
[L14149]  COND FALSE  !(choice == 35)
[L14155]  COND FALSE  !(choice == 34)
[L14162]  COND FALSE  !(choice == 33)
[L14169]  COND FALSE  !(choice == 32)
[L14176]  COND FALSE  !(choice == 31)
[L14183]  COND FALSE  !(choice == 30)
[L14189]  COND FALSE  !(choice == 29)
[L14195]  COND FALSE  !(choice == 28)
[L14201]  COND FALSE  !(choice == 27)
[L14207]  COND FALSE  !(choice == 26)
[L14214]  COND FALSE  !(choice == 25)
[L14220]  COND FALSE  !(choice == 24)
[L14226]  COND FALSE  !(choice == 23)
[L14232]  COND FALSE  !(choice == 22)
[L14238]  COND FALSE  !(choice == 21)
[L14245]  COND TRUE   choice == 20
[L14246]              gas := gas - 21000;
[L14247]  COND TRUE   gas >= 0
[L14248]              assume _amount_s938 >= 0 && _amount_s938 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L14249]              assume _until_s938 >= 0 && _until_s938 < 18446744073709551616;
[L14250]              assume msgvalue_MSG == 0;
[L14251]  CALL        call freezeTo~address~uint256~uint64_FreezableToken(this, msgsender_MSG, msgvalue_MSG, _to_s938, _amount_s938, _until_s938);
[L2417]               havoc __exception;
[L2418]               revert := false;
[L2419]   COND FALSE  !(__exception)
[L2456]   CALL        call freezeTo~address~uint256~uint64_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s938, _amount_s938, _until_s938);
[L7813]               __var_26 := null;
[L7814]   COND FALSE  !(!(_to_s938 != null))
[L7818]   COND FALSE  !(!(_amount_s938 <= balances_BasicToken[this][msgsender_MSG]))
[L7822]   CALL        call __var_27 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][msgsender_MSG], _amount_s938);
[L6509]               assert b_s98 <= a_s98;
[L6510]               __ret_0_ := (a_s98 - b_s98) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7822]   RET         call __var_27 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][msgsender_MSG], _amount_s938);
[L7823]   COND FALSE  !(revert)
[L7826]               sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][msgsender_MSG];
[L7827]               balances_BasicToken[this][msgsender_MSG] := __var_27;
[L7828]               sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][msgsender_MSG];
[L7829]               __var_28 := _until_s938 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7830]   COND FALSE  !(DType[this] == MainToken)
[L7835]   COND TRUE   DType[this] == FreezableMintableToken
[L7836]   CALL        call currentKey_s938 := toKey~address~uint256_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s938, _until_s938 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L8244]               result_s1122 := 39480772448535941496179204954862169494691089619604794184232587696854102179840;
[L8246]               havoc result_s1122;
[L8247]               havoc result_s1122;
[L8248]               havoc result_s1122;
[L8249]               havoc result_s1122;
[L7836]   RET         call currentKey_s938 := toKey~address~uint256_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s938, _until_s938 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L7837]   COND FALSE  !(revert)
[L7848]               currentKey_s938 := currentKey_s938;
[L7849]   CALL        call __var_29 := add~uint256~uint256_SafeMath__success(this, this, 0, freezings_FreezableToken[this][currentKey_s938], _amount_s938);
[L6523]               c_s122 := (a_s122 + b_s122) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6524]               assert c_s122 >= a_s122;
[L6525]               c_s122 := c_s122;
[L7849]   RET         call __var_29 := add~uint256~uint256_SafeMath__success(this, this, 0, freezings_FreezableToken[this][currentKey_s938], _amount_s938);
[L7850]   COND FALSE  !(revert)
[L7853]               sum_freezings3[this] := sum_freezings3[this] - freezings_FreezableToken[this][currentKey_s938];
[L7854]               freezings_FreezableToken[this][currentKey_s938] := __var_29;
[L7855]               sum_freezings3[this] := sum_freezings3[this] + freezings_FreezableToken[this][currentKey_s938];
[L7856]   CALL        call __var_30 := add~uint256~uint256_SafeMath__success(this, this, 0, freezingBalance_FreezableToken[this][_to_s938], _amount_s938);
[L6523]               c_s122 := (a_s122 + b_s122) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6524]               assert c_s122 >= a_s122;
[L6525]               c_s122 := c_s122;
[L7856]   RET         call __var_30 := add~uint256~uint256_SafeMath__success(this, this, 0, freezingBalance_FreezableToken[this][_to_s938], _amount_s938);
[L7857]   COND FALSE  !(revert)
[L7860]               sum_freezingBalance4[this] := sum_freezingBalance4[this] - freezingBalance_FreezableToken[this][_to_s938];
[L7861]               freezingBalance_FreezableToken[this][_to_s938] := __var_30;
[L7862]               sum_freezingBalance4[this] := sum_freezingBalance4[this] + freezingBalance_FreezableToken[this][_to_s938];
[L7863]   COND FALSE  !(DType[this] == MainToken)
[L7868]   COND FALSE  !(DType[this] == FreezableMintableToken)
[L7873]   COND TRUE   DType[this] == FreezableToken
[L7874]   CALL        call freeze~address~uint64_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s938, _until_s938);
[L8388]   COND FALSE  !(!(_until_s1240 > now))
[L8392]               __var_42 := _until_s1240 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8393]   COND FALSE  !(DType[this] == MainToken)
[L8398]   COND FALSE  !(DType[this] == FreezableMintableToken)
[L8403]   COND TRUE   DType[this] == FreezableToken
[L8404]   CALL        call key_s1240 := toKey~address~uint256_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s1240, _until_s1240 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L8244]               result_s1122 := 39480772448535941496179204954862169494691089619604794184232587696854102179840;
[L8246]               havoc result_s1122;
[L8247]               havoc result_s1122;
[L8248]               havoc result_s1122;
[L8249]               havoc result_s1122;
[L8404]   RET         call key_s1240 := toKey~address~uint256_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s1240, _until_s1240 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L8405]   COND FALSE  !(revert)
[L8411]               key_s1240 := key_s1240;
[L8412]               __var_43 := 0 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8413]   COND FALSE  !(DType[this] == MainToken)
[L8418]   COND FALSE  !(DType[this] == FreezableMintableToken)
[L8423]   COND TRUE   DType[this] == FreezableToken
[L8424]   CALL        call parentKey_s1240 := toKey~address~uint256_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s1240, 0 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L8244]               result_s1122 := 39480772448535941496179204954862169494691089619604794184232587696854102179840;
[L8246]               havoc result_s1122;
[L8247]               havoc result_s1122;
[L8248]               havoc result_s1122;
[L8249]               havoc result_s1122;
[L8424]   RET         call parentKey_s1240 := toKey~address~uint256_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s1240, 0 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L8425]   COND FALSE  !(revert)
[L8431]               parentKey_s1240 := parentKey_s1240;
[L8432]               next_s1240 := chains_FreezableToken[this][parentKey_s1240];
[L8433]   COND TRUE   next_s1240 == 0
[L8434]               sum_chains2[this] := sum_chains2[this] - chains_FreezableToken[this][parentKey_s1240];
[L8435]               chains_FreezableToken[this][parentKey_s1240] := _until_s1240;
[L8436]               sum_chains2[this] := sum_chains2[this] + chains_FreezableToken[this][parentKey_s1240];
[L7874]   RET         call freeze~address~uint64_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s938, _until_s938);
[L7875]   COND FALSE  !(revert)
[L7881]               assert { :EventEmitted "Transfer_FreezableToken" } true;
[L7882]               assert { :EventEmitted "Freezed_FreezableToken" } true;
[L2456]   RET         call freezeTo~address~uint256~uint64_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s938, _amount_s938, _until_s938);
[L2457]               assume !revert && gas >= 0;
[L14251]  RET         call freezeTo~address~uint256~uint64_FreezableToken(this, msgsender_MSG, msgvalue_MSG, _to_s938, _amount_s938, _until_s938);
[L14388]  RET         call CorralChoice_MainToken(this);
[L14388]  CALL        call CorralChoice_MainToken(this);
[L14045]              havoc msgsender_MSG;
[L14046]              havoc msgvalue_MSG;
[L14047]              havoc choice;
[L14048]              havoc __ret_0_totalSupply;
[L14049]              havoc _owner_s729;
[L14050]              havoc balance_s729;
[L14051]              havoc _to_s1572;
[L14052]              havoc _value_s1572;
[L14053]              havoc _success_s1572;
[L14054]              havoc _owner_s395;
[L14055]              havoc _spender_s395;
[L14056]              havoc __ret_0_allowance;
[L14057]              havoc _from_s1551;
[L14058]              havoc _to_s1551;
[L14059]              havoc _value_s1551;
[L14060]              havoc _success_s1551;
[L14061]              havoc _spender_s379;
[L14062]              havoc _value_s379;
[L14063]              havoc __ret_0_approve;
[L14064]              havoc _spender_s437;
[L14065]              havoc _addedValue_s437;
[L14066]              havoc __ret_0_increaseApproval;
[L14067]              havoc _spender_s497;
[L14068]              havoc _subtractedValue_s497;
[L14069]              havoc __ret_0_decreaseApproval;
[L14070]              havoc __ret_0_owner;
[L14071]              havoc _newOwner_s558;
[L14072]              havoc __ret_0_mintingFinished;
[L14073]              havoc _to_s664;
[L14074]              havoc _amount_s664;
[L14075]              havoc __ret_0_mint;
[L14076]              havoc __ret_0_finishMinting;
[L14077]              havoc _owner_s742;
[L14078]              havoc balance_s742;
[L14079]              havoc _owner_s754;
[L14080]              havoc balance_s754;
[L14081]              havoc _addr_s792;
[L14082]              havoc count_s792;
[L14083]              havoc _addr_s849;
[L14084]              havoc _index_s849;
[L14085]              havoc _release_s849;
[L14086]              havoc _balance_s849;
[L14087]              havoc _to_s938;
[L14088]              havoc _amount_s938;
[L14089]              havoc _until_s938;
[L14090]              havoc tokens_s1107;
[L14091]              havoc _value_s1261;
[L14092]              havoc __ret_0_paused;
[L14093]              havoc _to_s1449;
[L14094]              havoc _amount_s1449;
[L14095]              havoc _until_s1449;
[L14096]              havoc __ret_0_mintAndFreeze;
[L14097]              havoc __ret_0_TOKEN_DECIMALS;
[L14098]              havoc __ret_0_TOKEN_DECIMALS_UINT8;
[L14099]              havoc __ret_0_TOKEN_DECIMAL_MULTIPLIER;
[L14100]              havoc __ret_0_TOKEN_NAME;
[L14101]              havoc __ret_0_TOKEN_SYMBOL;
[L14102]              havoc __ret_0_PAUSED;
[L14103]              havoc __ret_0_TARGET_USER;
[L14104]              havoc __ret_0_CONTINUE_MINTING;
[L14105]              havoc __ret_0_initialized;
[L14106]              havoc _name_s1511;
[L14107]              havoc _symbol_s1519;
[L14108]              havoc _decimals_s1527;
[L14109]              havoc tmpNow;
[L14110]              havoc gas;
[L14111]              assume gas > 4000000 && gas <= 8000000;
[L14112]              tmpNow := now;
[L14113]              havoc now;
[L14114]              assume now > tmpNow;
[L14115]              assume msgsender_MSG != null;
[L14116]              assume DType[msgsender_MSG] != ERC20Basic;
[L14117]              assume DType[msgsender_MSG] != SafeMath;
[L14118]              assume DType[msgsender_MSG] != BasicToken;
[L14119]              assume DType[msgsender_MSG] != ERC20;
[L14120]              assume DType[msgsender_MSG] != StandardToken;
[L14121]              assume DType[msgsender_MSG] != Ownable;
[L14122]              assume DType[msgsender_MSG] != MintableToken;
[L14123]              assume DType[msgsender_MSG] != FreezableToken;
[L14124]              assume DType[msgsender_MSG] != BurnableToken;
[L14125]              assume DType[msgsender_MSG] != Pausable;
[L14126]              assume DType[msgsender_MSG] != FreezableMintableToken;
[L14127]              assume DType[msgsender_MSG] != Consts;
[L14128]              assume DType[msgsender_MSG] != MainToken;
[L14129]              Alloc[msgsender_MSG] := true;
[L14130]  COND FALSE  !(choice == 38)
[L14136]  COND TRUE   choice == 37
[L14137]              gas := gas - 21000;
[L14138]  COND TRUE   gas >= 0
[L14139]              assume msgvalue_MSG == 0;
[L14140]  CALL        call balance_s729 := balanceOf~address_FreezableToken(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume balances_BasicToken[this][_owner_s729] >= 0 && balances_BasicToken[this][_owner_s729] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_balanceOf_FreezableToken0 := true;
[L2]                  call_balanceOf_FreezableToken0 := false;
[L2]                  revert := revert_hold;
[L1999]               havoc __exception;
[L2000]               revert := false;
[L2001]   COND FALSE  !(__exception)
[L2038]   CALL        call balance_s729 := balanceOf~address_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L7405]   COND TRUE   DType[this] == MainToken
[L7406]   CALL        call __var_14 := balanceOf~address_BasicToken__success(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L6660]               __ret_0_ := balances_BasicToken[this][_owner_s214];
[L7406]   RET         call __var_14 := balanceOf~address_BasicToken__success(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L7407]   COND FALSE  !(revert)
[L7423]               balance_s729 := (__var_14 + freezingBalance_FreezableToken[this][_owner_s729]) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2038]   RET         call balance_s729 := balanceOf~address_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L2039]               assume !revert && gas >= 0;
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume !((((((((((balance_s729 == balances_BasicToken[this][_owner_s729] && totalSupply__BasicToken[this] == old(totalSupply__BasicToken[this])) && balances_BasicToken[this] == old(balances_BasicToken[this])) && allowed_StandardToken[this] == old(allowed_StandardToken[this])) && initialized_MainToken[this] == old(initialized_MainToken[this])) && paused_Pausable[this] == old(paused_Pausable[this])) && mintingFinished_MintableToken[this] == old(mintingFinished_MintableToken[this])) && owner_Ownable[this] == old(owner_Ownable[this])) && chains_FreezableToken[this] == old(chains_FreezableToken[this])) && freezings_FreezableToken[this] == old(freezings_FreezableToken[this])) && freezingBalance_FreezableToken[this] == old(freezingBalance_FreezableToken[this]));
[L2]                  revert := revert_hold;
[L14140]  RET         call balance_s729 := balanceOf~address_FreezableToken(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L14388]  RET         call CorralChoice_MainToken(this);

Loop:
[L14388]  CALL        call CorralChoice_MainToken(this);
[L14045]              havoc msgsender_MSG;
[L14046]              havoc msgvalue_MSG;
[L14047]              havoc choice;
[L14048]              havoc __ret_0_totalSupply;
[L14049]              havoc _owner_s729;
[L14050]              havoc balance_s729;
[L14051]              havoc _to_s1572;
[L14052]              havoc _value_s1572;
[L14053]              havoc _success_s1572;
[L14054]              havoc _owner_s395;
[L14055]              havoc _spender_s395;
[L14056]              havoc __ret_0_allowance;
[L14057]              havoc _from_s1551;
[L14058]              havoc _to_s1551;
[L14059]              havoc _value_s1551;
[L14060]              havoc _success_s1551;
[L14061]              havoc _spender_s379;
[L14062]              havoc _value_s379;
[L14063]              havoc __ret_0_approve;
[L14064]              havoc _spender_s437;
[L14065]              havoc _addedValue_s437;
[L14066]              havoc __ret_0_increaseApproval;
[L14067]              havoc _spender_s497;
[L14068]              havoc _subtractedValue_s497;
[L14069]              havoc __ret_0_decreaseApproval;
[L14070]              havoc __ret_0_owner;
[L14071]              havoc _newOwner_s558;
[L14072]              havoc __ret_0_mintingFinished;
[L14073]              havoc _to_s664;
[L14074]              havoc _amount_s664;
[L14075]              havoc __ret_0_mint;
[L14076]              havoc __ret_0_finishMinting;
[L14077]              havoc _owner_s742;
[L14078]              havoc balance_s742;
[L14079]              havoc _owner_s754;
[L14080]              havoc balance_s754;
[L14081]              havoc _addr_s792;
[L14082]              havoc count_s792;
[L14083]              havoc _addr_s849;
[L14084]              havoc _index_s849;
[L14085]              havoc _release_s849;
[L14086]              havoc _balance_s849;
[L14087]              havoc _to_s938;
[L14088]              havoc _amount_s938;
[L14089]              havoc _until_s938;
[L14090]              havoc tokens_s1107;
[L14091]              havoc _value_s1261;
[L14092]              havoc __ret_0_paused;
[L14093]              havoc _to_s1449;
[L14094]              havoc _amount_s1449;
[L14095]              havoc _until_s1449;
[L14096]              havoc __ret_0_mintAndFreeze;
[L14097]              havoc __ret_0_TOKEN_DECIMALS;
[L14098]              havoc __ret_0_TOKEN_DECIMALS_UINT8;
[L14099]              havoc __ret_0_TOKEN_DECIMAL_MULTIPLIER;
[L14100]              havoc __ret_0_TOKEN_NAME;
[L14101]              havoc __ret_0_TOKEN_SYMBOL;
[L14102]              havoc __ret_0_PAUSED;
[L14103]              havoc __ret_0_TARGET_USER;
[L14104]              havoc __ret_0_CONTINUE_MINTING;
[L14105]              havoc __ret_0_initialized;
[L14106]              havoc _name_s1511;
[L14107]              havoc _symbol_s1519;
[L14108]              havoc _decimals_s1527;
[L14109]              havoc tmpNow;
[L14110]              havoc gas;
[L14111]              assume gas > 4000000 && gas <= 8000000;
[L14112]              tmpNow := now;
[L14113]              havoc now;
[L14114]              assume now > tmpNow;
[L14115]              assume msgsender_MSG != null;
[L14116]              assume DType[msgsender_MSG] != ERC20Basic;
[L14117]              assume DType[msgsender_MSG] != SafeMath;
[L14118]              assume DType[msgsender_MSG] != BasicToken;
[L14119]              assume DType[msgsender_MSG] != ERC20;
[L14120]              assume DType[msgsender_MSG] != StandardToken;
[L14121]              assume DType[msgsender_MSG] != Ownable;
[L14122]              assume DType[msgsender_MSG] != MintableToken;
[L14123]              assume DType[msgsender_MSG] != FreezableToken;
[L14124]              assume DType[msgsender_MSG] != BurnableToken;
[L14125]              assume DType[msgsender_MSG] != Pausable;
[L14126]              assume DType[msgsender_MSG] != FreezableMintableToken;
[L14127]              assume DType[msgsender_MSG] != Consts;
[L14128]              assume DType[msgsender_MSG] != MainToken;
[L14129]              Alloc[msgsender_MSG] := true;
[L14130]  COND FALSE  !(choice == 38)
[L14136]  COND TRUE   choice == 37
[L14137]              gas := gas - 21000;
[L14138]  COND TRUE   gas >= 0
[L14139]              assume msgvalue_MSG == 0;
[L14140]  CALL        call balance_s729 := balanceOf~address_FreezableToken(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume balances_BasicToken[this][_owner_s729] >= 0 && balances_BasicToken[this][_owner_s729] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_balanceOf_FreezableToken0 := true;
[L2]                  call_balanceOf_FreezableToken0 := false;
[L2]                  revert := revert_hold;
[L1999]               havoc __exception;
[L2000]               revert := false;
[L2001]   COND FALSE  !(__exception)
[L2038]   CALL        call balance_s729 := balanceOf~address_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L7405]   COND TRUE   DType[this] == MainToken
[L7406]   CALL        call __var_14 := balanceOf~address_BasicToken__success(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L6660]               __ret_0_ := balances_BasicToken[this][_owner_s214];
[L7406]   RET         call __var_14 := balanceOf~address_BasicToken__success(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L7407]   COND FALSE  !(revert)
[L7423]               balance_s729 := (__var_14 + freezingBalance_FreezableToken[this][_owner_s729]) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2038]   RET         call balance_s729 := balanceOf~address_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L2039]               assume !revert && gas >= 0;
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume !((((((((((balance_s729 == balances_BasicToken[this][_owner_s729] && totalSupply__BasicToken[this] == old(totalSupply__BasicToken[this])) && balances_BasicToken[this] == old(balances_BasicToken[this])) && allowed_StandardToken[this] == old(allowed_StandardToken[this])) && initialized_MainToken[this] == old(initialized_MainToken[this])) && paused_Pausable[this] == old(paused_Pausable[this])) && mintingFinished_MintableToken[this] == old(mintingFinished_MintableToken[this])) && owner_Ownable[this] == old(owner_Ownable[this])) && chains_FreezableToken[this] == old(chains_FreezableToken[this])) && freezings_FreezableToken[this] == old(freezings_FreezableToken[this])) && freezingBalance_FreezableToken[this] == old(freezingBalance_FreezableToken[this]));
[L2]                  revert := revert_hold;
[L14140]  RET         call balance_s729 := balanceOf~address_FreezableToken(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L14388]  RET         call CorralChoice_MainToken(this);

[2020-11-24 21:26:11,485 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-24 21:26:11,486 INFO  L82        PathProgramCache]: Analyzing trace with hash 702028223, now seen corresponding path program 1 times
[2020-11-24 21:26:11,486 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-24 21:26:11,517 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-24 21:26:12,150 INFO  L134       CoverageAnalysis]: Checked inductivity of 9938 backedges. 1 proven. 0 refuted. 0 times theorem prover too weak. 9937 trivial. 0 not checked.
[2020-11-24 21:26:12,150 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-24 21:26:12,151 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [3] imperfect sequences [] total 3
[2020-11-24 21:26:12,151 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-24 21:26:12,152 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-11-24 21:26:12,152 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-11-24 21:26:12,152 INFO  L87              Difference]: Start difference. First operand 5588 states and 6297 transitions. cyclomatic complexity: 729 Second operand 3 states.
[2020-11-24 21:26:12,200 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-24 21:26:12,200 INFO  L93              Difference]: Finished difference Result 5634 states and 6347 transitions.
[2020-11-24 21:26:12,201 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-11-24 21:26:12,201 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 5634 states and 6347 transitions.
[2020-11-24 21:26:12,209 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-24 21:26:12,218 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 5634 states to 5634 states and 6347 transitions.
[2020-11-24 21:26:12,218 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1114
[2020-11-24 21:26:12,218 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1114
[2020-11-24 21:26:12,218 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 5634 states and 6347 transitions.
[2020-11-24 21:26:12,221 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-24 21:26:12,221 INFO  L728         BuchiCegarLoop]: Abstraction has 5634 states and 6347 transitions.
[2020-11-24 21:26:12,225 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 5634 states and 6347 transitions.
[2020-11-24 21:26:12,249 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 5634 to 5618.
[2020-11-24 21:26:12,249 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 5618 states.
[2020-11-24 21:26:12,255 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 5618 states to 5618 states and 6331 transitions.
[2020-11-24 21:26:12,255 INFO  L751         BuchiCegarLoop]: Abstraction has 5618 states and 6331 transitions.
[2020-11-24 21:26:12,255 INFO  L631         BuchiCegarLoop]: Abstraction has 5618 states and 6331 transitions.
[2020-11-24 21:26:12,255 INFO  L445         BuchiCegarLoop]: ======== Iteration 13============
[2020-11-24 21:26:12,255 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 5618 states and 6331 transitions.
[2020-11-24 21:26:12,261 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-24 21:26:12,261 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-24 21:26:12,261 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-24 21:26:12,264 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [38, 38, 38, 38, 38, 38, 38, 38, 38, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-24 21:26:12,264 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  success_balanceOf_FreezableToken0 := false;
[L2]                  call_balanceOf_FreezableToken0 := false;
[L2]      CALL        call main();
[L14378]              assume null == 0;
[L14379]  CALL        call this := FreshRefGenerator__success();
[L6396]               havoc newRef;
[L6397]               assume Alloc[newRef] == false;
[L6398]               Alloc[newRef] := true;
[L6399]               assume newRef != null;
[L14379]  RET         call this := FreshRefGenerator__success();
[L14380]              assume now >= 0;
[L14381]              assume DType[this] == MainToken;
[L14382]              assume msgvalue_MSG == 0;
[L14383]              gas := gas - 53000;
[L14384]  CALL        call MainToken_MainToken(this, msgsender_MSG, msgvalue_MSG);
[L4183]               havoc __exception;
[L4184]               revert := false;
[L4185]   COND FALSE  !(__exception)
[L4222]   CALL        call MainToken_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9205]   CALL        call Consts_Consts__success(this, msgsender_MSG, msgvalue_MSG);
[L9007]   CALL        call Consts_Consts_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8983]               assume msgsender_MSG != null;
[L8984]               Balance[this] := 0;
[L8985]               TOKEN_DECIMALS_Consts[this] := 18;
[L8986]               TOKEN_DECIMALS_UINT8_Consts[this] := 18;
[L8987]               TOKEN_DECIMAL_MULTIPLIER_Consts[this] := nonlinearPow(10, TOKEN_DECIMALS_Consts[this]) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8988]               TOKEN_NAME_Consts[this] := -1051245219;
[L8989]               TOKEN_SYMBOL_Consts[this] := -1804535220;
[L8990]               PAUSED_Consts[this] := false;
[L8991]               __var_52 := ConstantToRef(-210822415442009814958929812751043848690848471787);
[L8992]               TARGET_USER_Consts[this] := ConstantToRef(-210822415442009814958929812751043848690848471787);
[L8993]               CONTINUE_MINTING_Consts[this] := true;
[L9007]   RET         call Consts_Consts_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9008]   COND FALSE  !(revert)
[L9205]   RET         call Consts_Consts__success(this, msgsender_MSG, msgvalue_MSG);
[L9206]   COND FALSE  !(revert)
[L9209]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L9209]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L9210]   COND FALSE  !(revert)
[L9213]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6694]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6694]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6695]   COND FALSE  !(revert)
[L6698]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6675]               assume msgsender_MSG != null;
[L6676]               Balance[this] := 0;
[L6698]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6699]   COND FALSE  !(revert)
[L9213]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L9214]   COND FALSE  !(revert)
[L9217]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6565]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   COND FALSE  !(revert)
[L6569]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]               assume msgsender_MSG != null;
[L6544]               Balance[this] := 0;
[L6545]               balances_BasicToken[this] := zeroRefintArr();
[L6546]               sum_balances0[this] := 0;
[L6547]               totalSupply__BasicToken[this] := 0;
[L6569]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6570]   COND FALSE  !(revert)
[L9217]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9218]   COND FALSE  !(revert)
[L9221]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6746]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6746]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6747]   COND FALSE  !(revert)
[L6750]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6694]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6694]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6695]   COND FALSE  !(revert)
[L6698]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6675]               assume msgsender_MSG != null;
[L6676]               Balance[this] := 0;
[L6698]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6699]   COND FALSE  !(revert)
[L6750]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6751]   COND FALSE  !(revert)
[L6754]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6565]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   COND FALSE  !(revert)
[L6569]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]               assume msgsender_MSG != null;
[L6544]               Balance[this] := 0;
[L6545]               balances_BasicToken[this] := zeroRefintArr();
[L6546]               sum_balances0[this] := 0;
[L6547]               totalSupply__BasicToken[this] := 0;
[L6569]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6570]   COND FALSE  !(revert)
[L6754]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6755]   COND FALSE  !(revert)
[L6758]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6717]               assume msgsender_MSG != null;
[L6718]               Balance[this] := 0;
[L6719]               allowed_StandardToken[this] := zeroRefRefintArr();
[L6720]               sum_allowed1[this] := 0;
[L6758]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6759]   COND FALSE  !(revert)
[L9221]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9222]   COND FALSE  !(revert)
[L9225]   CALL        call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7353]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L7353]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7354]   COND FALSE  !(revert)
[L7357]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6694]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6694]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6695]   COND FALSE  !(revert)
[L6698]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6675]               assume msgsender_MSG != null;
[L6676]               Balance[this] := 0;
[L6698]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6699]   COND FALSE  !(revert)
[L7357]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7358]   COND FALSE  !(revert)
[L7361]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6565]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   COND FALSE  !(revert)
[L6569]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]               assume msgsender_MSG != null;
[L6544]               Balance[this] := 0;
[L6545]               balances_BasicToken[this] := zeroRefintArr();
[L6546]               sum_balances0[this] := 0;
[L6547]               totalSupply__BasicToken[this] := 0;
[L6569]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6570]   COND FALSE  !(revert)
[L7361]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7362]   COND FALSE  !(revert)
[L7365]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6746]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6746]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6747]   COND FALSE  !(revert)
[L6750]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6694]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6694]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6695]   COND FALSE  !(revert)
[L6698]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6675]               assume msgsender_MSG != null;
[L6676]               Balance[this] := 0;
[L6698]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6699]   COND FALSE  !(revert)
[L6750]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6751]   COND FALSE  !(revert)
[L6754]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6565]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   COND FALSE  !(revert)
[L6569]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]               assume msgsender_MSG != null;
[L6544]               Balance[this] := 0;
[L6545]               balances_BasicToken[this] := zeroRefintArr();
[L6546]               sum_balances0[this] := 0;
[L6547]               totalSupply__BasicToken[this] := 0;
[L6569]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6570]   COND FALSE  !(revert)
[L6754]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6755]   COND FALSE  !(revert)
[L6758]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6717]               assume msgsender_MSG != null;
[L6718]               Balance[this] := 0;
[L6719]               allowed_StandardToken[this] := zeroRefRefintArr();
[L6720]               sum_allowed1[this] := 0;
[L6758]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6759]   COND FALSE  !(revert)
[L7365]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7366]   COND FALSE  !(revert)
[L7369]   CALL        call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7316]               assume msgsender_MSG != null;
[L7317]               Balance[this] := 0;
[L7318]               chains_FreezableToken[this] := zerointintArr();
[L7319]               sum_chains2[this] := 0;
[L7320]               freezings_FreezableToken[this] := zerointintArr();
[L7321]               sum_freezings3[this] := 0;
[L7322]               freezingBalance_FreezableToken[this] := zeroRefintArr();
[L7323]               sum_freezingBalance4[this] := 0;
[L7369]   RET         call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7370]   COND FALSE  !(revert)
[L9225]   RET         call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9226]   COND FALSE  !(revert)
[L9229]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6988]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6971]               assume msgsender_MSG != null;
[L6972]               Balance[this] := 0;
[L6973]               owner_Ownable[this] := null;
[L6975]               owner_Ownable[this] := msgsender_MSG;
[L6988]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6989]   COND FALSE  !(revert)
[L9229]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L9230]   COND FALSE  !(revert)
[L9233]   CALL        call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7172]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L7172]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7173]   COND FALSE  !(revert)
[L7176]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6694]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6694]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6695]   COND FALSE  !(revert)
[L6698]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6675]               assume msgsender_MSG != null;
[L6676]               Balance[this] := 0;
[L6698]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6699]   COND FALSE  !(revert)
[L7176]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7177]   COND FALSE  !(revert)
[L7180]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6565]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   COND FALSE  !(revert)
[L6569]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]               assume msgsender_MSG != null;
[L6544]               Balance[this] := 0;
[L6545]               balances_BasicToken[this] := zeroRefintArr();
[L6546]               sum_balances0[this] := 0;
[L6547]               totalSupply__BasicToken[this] := 0;
[L6569]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6570]   COND FALSE  !(revert)
[L7180]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7181]   COND FALSE  !(revert)
[L7184]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6746]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6746]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6747]   COND FALSE  !(revert)
[L6750]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6694]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6694]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6695]   COND FALSE  !(revert)
[L6698]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6675]               assume msgsender_MSG != null;
[L6676]               Balance[this] := 0;
[L6698]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6699]   COND FALSE  !(revert)
[L6750]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6751]   COND FALSE  !(revert)
[L6754]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6565]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   COND FALSE  !(revert)
[L6569]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]               assume msgsender_MSG != null;
[L6544]               Balance[this] := 0;
[L6545]               balances_BasicToken[this] := zeroRefintArr();
[L6546]               sum_balances0[this] := 0;
[L6547]               totalSupply__BasicToken[this] := 0;
[L6569]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6570]   COND FALSE  !(revert)
[L6754]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6755]   COND FALSE  !(revert)
[L6758]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6717]               assume msgsender_MSG != null;
[L6718]               Balance[this] := 0;
[L6719]               allowed_StandardToken[this] := zeroRefRefintArr();
[L6720]               sum_allowed1[this] := 0;
[L6758]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6759]   COND FALSE  !(revert)
[L7184]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7185]   COND FALSE  !(revert)
[L7188]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6988]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6971]               assume msgsender_MSG != null;
[L6972]               Balance[this] := 0;
[L6973]               owner_Ownable[this] := null;
[L6975]               owner_Ownable[this] := msgsender_MSG;
[L6988]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6989]   COND FALSE  !(revert)
[L7188]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7189]   COND FALSE  !(revert)
[L7192]   CALL        call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7136]               assume msgsender_MSG != null;
[L7137]               Balance[this] := 0;
[L7138]               mintingFinished_MintableToken[this] := false;
[L7192]   RET         call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7193]   COND FALSE  !(revert)
[L9233]   RET         call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9234]   COND FALSE  !(revert)
[L9237]   CALL        call FreezableMintableToken_FreezableMintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L8792]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L8792]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L8793]   COND FALSE  !(revert)
[L8796]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6694]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6694]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6695]   COND FALSE  !(revert)
[L6698]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6675]               assume msgsender_MSG != null;
[L6676]               Balance[this] := 0;
[L6698]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6699]   COND FALSE  !(revert)
[L8796]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L8797]   COND FALSE  !(revert)
[L8800]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6565]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   COND FALSE  !(revert)
[L6569]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]               assume msgsender_MSG != null;
[L6544]               Balance[this] := 0;
[L6545]               balances_BasicToken[this] := zeroRefintArr();
[L6546]               sum_balances0[this] := 0;
[L6547]               totalSupply__BasicToken[this] := 0;
[L6569]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6570]   COND FALSE  !(revert)
[L8800]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L8801]   COND FALSE  !(revert)
[L8804]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6746]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6746]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6747]   COND FALSE  !(revert)
[L6750]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6694]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6694]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6695]   COND FALSE  !(revert)
[L6698]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6675]               assume msgsender_MSG != null;
[L6676]               Balance[this] := 0;
[L6698]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6699]   COND FALSE  !(revert)
[L6750]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6751]   COND FALSE  !(revert)
[L6754]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6565]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   COND FALSE  !(revert)
[L6569]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]               assume msgsender_MSG != null;
[L6544]               Balance[this] := 0;
[L6545]               balances_BasicToken[this] := zeroRefintArr();
[L6546]               sum_balances0[this] := 0;
[L6547]               totalSupply__BasicToken[this] := 0;
[L6569]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6570]   COND FALSE  !(revert)
[L6754]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6755]   COND FALSE  !(revert)
[L6758]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6717]               assume msgsender_MSG != null;
[L6718]               Balance[this] := 0;
[L6719]               allowed_StandardToken[this] := zeroRefRefintArr();
[L6720]               sum_allowed1[this] := 0;
[L6758]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6759]   COND FALSE  !(revert)
[L8804]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L8805]   COND FALSE  !(revert)
[L8808]   CALL        call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7353]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L7353]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7354]   COND FALSE  !(revert)
[L7357]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6694]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6694]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6695]   COND FALSE  !(revert)
[L6698]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6675]               assume msgsender_MSG != null;
[L6676]               Balance[this] := 0;
[L6698]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6699]   COND FALSE  !(revert)
[L7357]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7358]   COND FALSE  !(revert)
[L7361]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6565]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   COND FALSE  !(revert)
[L6569]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]               assume msgsender_MSG != null;
[L6544]               Balance[this] := 0;
[L6545]               balances_BasicToken[this] := zeroRefintArr();
[L6546]               sum_balances0[this] := 0;
[L6547]               totalSupply__BasicToken[this] := 0;
[L6569]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6570]   COND FALSE  !(revert)
[L7361]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7362]   COND FALSE  !(revert)
[L7365]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6746]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6746]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6747]   COND FALSE  !(revert)
[L6750]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6694]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6694]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6695]   COND FALSE  !(revert)
[L6698]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6675]               assume msgsender_MSG != null;
[L6676]               Balance[this] := 0;
[L6698]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6699]   COND FALSE  !(revert)
[L6750]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6751]   COND FALSE  !(revert)
[L6754]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6565]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   COND FALSE  !(revert)
[L6569]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]               assume msgsender_MSG != null;
[L6544]               Balance[this] := 0;
[L6545]               balances_BasicToken[this] := zeroRefintArr();
[L6546]               sum_balances0[this] := 0;
[L6547]               totalSupply__BasicToken[this] := 0;
[L6569]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6570]   COND FALSE  !(revert)
[L6754]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6755]   COND FALSE  !(revert)
[L6758]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6717]               assume msgsender_MSG != null;
[L6718]               Balance[this] := 0;
[L6719]               allowed_StandardToken[this] := zeroRefRefintArr();
[L6720]               sum_allowed1[this] := 0;
[L6758]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6759]   COND FALSE  !(revert)
[L7365]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7366]   COND FALSE  !(revert)
[L7369]   CALL        call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7316]               assume msgsender_MSG != null;
[L7317]               Balance[this] := 0;
[L7318]               chains_FreezableToken[this] := zerointintArr();
[L7319]               sum_chains2[this] := 0;
[L7320]               freezings_FreezableToken[this] := zerointintArr();
[L7321]               sum_freezings3[this] := 0;
[L7322]               freezingBalance_FreezableToken[this] := zeroRefintArr();
[L7323]               sum_freezingBalance4[this] := 0;
[L7369]   RET         call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7370]   COND FALSE  !(revert)
[L8808]   RET         call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L8809]   COND FALSE  !(revert)
[L8812]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6988]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6971]               assume msgsender_MSG != null;
[L6972]               Balance[this] := 0;
[L6973]               owner_Ownable[this] := null;
[L6975]               owner_Ownable[this] := msgsender_MSG;
[L6988]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6989]   COND FALSE  !(revert)
[L8812]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L8813]   COND FALSE  !(revert)
[L8816]   CALL        call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7172]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L7172]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7173]   COND FALSE  !(revert)
[L7176]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6694]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6694]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6695]   COND FALSE  !(revert)
[L6698]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6675]               assume msgsender_MSG != null;
[L6676]               Balance[this] := 0;
[L6698]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6699]   COND FALSE  !(revert)
[L7176]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7177]   COND FALSE  !(revert)
[L7180]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6565]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   COND FALSE  !(revert)
[L6569]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]               assume msgsender_MSG != null;
[L6544]               Balance[this] := 0;
[L6545]               balances_BasicToken[this] := zeroRefintArr();
[L6546]               sum_balances0[this] := 0;
[L6547]               totalSupply__BasicToken[this] := 0;
[L6569]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6570]   COND FALSE  !(revert)
[L7180]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7181]   COND FALSE  !(revert)
[L7184]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6746]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6746]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6747]   COND FALSE  !(revert)
[L6750]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6694]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6694]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6695]   COND FALSE  !(revert)
[L6698]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6675]               assume msgsender_MSG != null;
[L6676]               Balance[this] := 0;
[L6698]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6699]   COND FALSE  !(revert)
[L6750]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6751]   COND FALSE  !(revert)
[L6754]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6565]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   COND FALSE  !(revert)
[L6569]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]               assume msgsender_MSG != null;
[L6544]               Balance[this] := 0;
[L6545]               balances_BasicToken[this] := zeroRefintArr();
[L6546]               sum_balances0[this] := 0;
[L6547]               totalSupply__BasicToken[this] := 0;
[L6569]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6570]   COND FALSE  !(revert)
[L6754]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6755]   COND FALSE  !(revert)
[L6758]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6717]               assume msgsender_MSG != null;
[L6718]               Balance[this] := 0;
[L6719]               allowed_StandardToken[this] := zeroRefRefintArr();
[L6720]               sum_allowed1[this] := 0;
[L6758]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6759]   COND FALSE  !(revert)
[L7184]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7185]   COND FALSE  !(revert)
[L7188]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6988]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6971]               assume msgsender_MSG != null;
[L6972]               Balance[this] := 0;
[L6973]               owner_Ownable[this] := null;
[L6975]               owner_Ownable[this] := msgsender_MSG;
[L6988]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6989]   COND FALSE  !(revert)
[L7188]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7189]   COND FALSE  !(revert)
[L7192]   CALL        call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7136]               assume msgsender_MSG != null;
[L7137]               Balance[this] := 0;
[L7138]               mintingFinished_MintableToken[this] := false;
[L7192]   RET         call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7193]   COND FALSE  !(revert)
[L8816]   RET         call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L8817]   COND FALSE  !(revert)
[L8820]   CALL        call FreezableMintableToken_FreezableMintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8749]               assume msgsender_MSG != null;
[L8750]               Balance[this] := 0;
[L8820]   RET         call FreezableMintableToken_FreezableMintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8821]   COND FALSE  !(revert)
[L9237]   RET         call FreezableMintableToken_FreezableMintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9238]   COND FALSE  !(revert)
[L9241]   CALL        call BurnableToken_BurnableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L8536]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L8536]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L8537]   COND FALSE  !(revert)
[L8540]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6565]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   COND FALSE  !(revert)
[L6569]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]               assume msgsender_MSG != null;
[L6544]               Balance[this] := 0;
[L6545]               balances_BasicToken[this] := zeroRefintArr();
[L6546]               sum_balances0[this] := 0;
[L6547]               totalSupply__BasicToken[this] := 0;
[L6569]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6570]   COND FALSE  !(revert)
[L8540]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L8541]   COND FALSE  !(revert)
[L8544]   CALL        call BurnableToken_BurnableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8513]               assume msgsender_MSG != null;
[L8514]               Balance[this] := 0;
[L8544]   RET         call BurnableToken_BurnableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8545]   COND FALSE  !(revert)
[L9241]   RET         call BurnableToken_BurnableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9242]   COND FALSE  !(revert)
[L9245]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L8662]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6988]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6971]               assume msgsender_MSG != null;
[L6972]               Balance[this] := 0;
[L6973]               owner_Ownable[this] := null;
[L6975]               owner_Ownable[this] := msgsender_MSG;
[L6988]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6989]   COND FALSE  !(revert)
[L8662]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L8663]   COND FALSE  !(revert)
[L8666]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8642]               assume msgsender_MSG != null;
[L8643]               Balance[this] := 0;
[L8644]               paused_Pausable[this] := false;
[L8666]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8667]   COND FALSE  !(revert)
[L9245]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L9246]   COND FALSE  !(revert)
[L9249]   CALL        call MainToken_MainToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9133]               assume msgsender_MSG != null;
[L9134]               Balance[this] := 0;
[L9135]               initialized_MainToken[this] := false;
[L9137]   CALL        call init_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9404]   COND FALSE  !(!!initialized_MainToken[this])
[L9408]               initialized_MainToken[this] := true;
[L9409]   COND FALSE  !(PAUSED_Consts[this])
[L9419]   COND FALSE  !(!CONTINUE_MINTING_Consts[this])
[L9429]               assert { :EventEmitted "Initialized_MainToken" } true;
[L9137]   RET         call init_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9138]   COND FALSE  !(revert)
[L9141]   COND TRUE   DType[this] == MainToken
[L9142]   CALL        call transferOwnership~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, TARGET_USER_Consts[this]);
[L7055]   CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L12332]  COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L7055]   RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7056]   COND FALSE  !(revert)
[L7059]   COND TRUE   DType[this] == MainToken
[L7060]   CALL        call _transferOwnership~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, _newOwner_s558);
[L7103]               __var_11 := null;
[L7104]   COND FALSE  !(!(_newOwner_s581 != null))
[L7108]               assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L7109]               owner_Ownable[this] := _newOwner_s581;
[L7060]   RET         call _transferOwnership~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, _newOwner_s558);
[L7061]   COND FALSE  !(revert)
[L9142]   RET         call transferOwnership~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, TARGET_USER_Consts[this]);
[L9143]   COND FALSE  !(revert)
[L9249]   RET         call MainToken_MainToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9250]   COND FALSE  !(revert)
[L4222]   RET         call MainToken_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4223]               assume !revert && gas >= 0;
[L14384]  RET         call MainToken_MainToken(this, msgsender_MSG, msgvalue_MSG);
[L14385]              assume !revert && gas >= 0;
[L14388]  CALL        call CorralChoice_MainToken(this);
[L14045]              havoc msgsender_MSG;
[L14046]              havoc msgvalue_MSG;
[L14047]              havoc choice;
[L14048]              havoc __ret_0_totalSupply;
[L14049]              havoc _owner_s729;
[L14050]              havoc balance_s729;
[L14051]              havoc _to_s1572;
[L14052]              havoc _value_s1572;
[L14053]              havoc _success_s1572;
[L14054]              havoc _owner_s395;
[L14055]              havoc _spender_s395;
[L14056]              havoc __ret_0_allowance;
[L14057]              havoc _from_s1551;
[L14058]              havoc _to_s1551;
[L14059]              havoc _value_s1551;
[L14060]              havoc _success_s1551;
[L14061]              havoc _spender_s379;
[L14062]              havoc _value_s379;
[L14063]              havoc __ret_0_approve;
[L14064]              havoc _spender_s437;
[L14065]              havoc _addedValue_s437;
[L14066]              havoc __ret_0_increaseApproval;
[L14067]              havoc _spender_s497;
[L14068]              havoc _subtractedValue_s497;
[L14069]              havoc __ret_0_decreaseApproval;
[L14070]              havoc __ret_0_owner;
[L14071]              havoc _newOwner_s558;
[L14072]              havoc __ret_0_mintingFinished;
[L14073]              havoc _to_s664;
[L14074]              havoc _amount_s664;
[L14075]              havoc __ret_0_mint;
[L14076]              havoc __ret_0_finishMinting;
[L14077]              havoc _owner_s742;
[L14078]              havoc balance_s742;
[L14079]              havoc _owner_s754;
[L14080]              havoc balance_s754;
[L14081]              havoc _addr_s792;
[L14082]              havoc count_s792;
[L14083]              havoc _addr_s849;
[L14084]              havoc _index_s849;
[L14085]              havoc _release_s849;
[L14086]              havoc _balance_s849;
[L14087]              havoc _to_s938;
[L14088]              havoc _amount_s938;
[L14089]              havoc _until_s938;
[L14090]              havoc tokens_s1107;
[L14091]              havoc _value_s1261;
[L14092]              havoc __ret_0_paused;
[L14093]              havoc _to_s1449;
[L14094]              havoc _amount_s1449;
[L14095]              havoc _until_s1449;
[L14096]              havoc __ret_0_mintAndFreeze;
[L14097]              havoc __ret_0_TOKEN_DECIMALS;
[L14098]              havoc __ret_0_TOKEN_DECIMALS_UINT8;
[L14099]              havoc __ret_0_TOKEN_DECIMAL_MULTIPLIER;
[L14100]              havoc __ret_0_TOKEN_NAME;
[L14101]              havoc __ret_0_TOKEN_SYMBOL;
[L14102]              havoc __ret_0_PAUSED;
[L14103]              havoc __ret_0_TARGET_USER;
[L14104]              havoc __ret_0_CONTINUE_MINTING;
[L14105]              havoc __ret_0_initialized;
[L14106]              havoc _name_s1511;
[L14107]              havoc _symbol_s1519;
[L14108]              havoc _decimals_s1527;
[L14109]              havoc tmpNow;
[L14110]              havoc gas;
[L14111]              assume gas > 4000000 && gas <= 8000000;
[L14112]              tmpNow := now;
[L14113]              havoc now;
[L14114]              assume now > tmpNow;
[L14115]              assume msgsender_MSG != null;
[L14116]              assume DType[msgsender_MSG] != ERC20Basic;
[L14117]              assume DType[msgsender_MSG] != SafeMath;
[L14118]              assume DType[msgsender_MSG] != BasicToken;
[L14119]              assume DType[msgsender_MSG] != ERC20;
[L14120]              assume DType[msgsender_MSG] != StandardToken;
[L14121]              assume DType[msgsender_MSG] != Ownable;
[L14122]              assume DType[msgsender_MSG] != MintableToken;
[L14123]              assume DType[msgsender_MSG] != FreezableToken;
[L14124]              assume DType[msgsender_MSG] != BurnableToken;
[L14125]              assume DType[msgsender_MSG] != Pausable;
[L14126]              assume DType[msgsender_MSG] != FreezableMintableToken;
[L14127]              assume DType[msgsender_MSG] != Consts;
[L14128]              assume DType[msgsender_MSG] != MainToken;
[L14129]              Alloc[msgsender_MSG] := true;
[L14130]  COND FALSE  !(choice == 38)
[L14136]  COND FALSE  !(choice == 37)
[L14142]  COND FALSE  !(choice == 36)
[L14149]  COND FALSE  !(choice == 35)
[L14155]  COND FALSE  !(choice == 34)
[L14162]  COND FALSE  !(choice == 33)
[L14169]  COND FALSE  !(choice == 32)
[L14176]  COND FALSE  !(choice == 31)
[L14183]  COND FALSE  !(choice == 30)
[L14189]  COND FALSE  !(choice == 29)
[L14195]  COND FALSE  !(choice == 28)
[L14201]  COND FALSE  !(choice == 27)
[L14207]  COND FALSE  !(choice == 26)
[L14214]  COND FALSE  !(choice == 25)
[L14220]  COND FALSE  !(choice == 24)
[L14226]  COND FALSE  !(choice == 23)
[L14232]  COND FALSE  !(choice == 22)
[L14238]  COND FALSE  !(choice == 21)
[L14245]  COND TRUE   choice == 20
[L14246]              gas := gas - 21000;
[L14247]  COND TRUE   gas >= 0
[L14248]              assume _amount_s938 >= 0 && _amount_s938 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L14249]              assume _until_s938 >= 0 && _until_s938 < 18446744073709551616;
[L14250]              assume msgvalue_MSG == 0;
[L14251]  CALL        call freezeTo~address~uint256~uint64_FreezableToken(this, msgsender_MSG, msgvalue_MSG, _to_s938, _amount_s938, _until_s938);
[L2417]               havoc __exception;
[L2418]               revert := false;
[L2419]   COND FALSE  !(__exception)
[L2456]   CALL        call freezeTo~address~uint256~uint64_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s938, _amount_s938, _until_s938);
[L7813]               __var_26 := null;
[L7814]   COND FALSE  !(!(_to_s938 != null))
[L7818]   COND FALSE  !(!(_amount_s938 <= balances_BasicToken[this][msgsender_MSG]))
[L7822]   CALL        call __var_27 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][msgsender_MSG], _amount_s938);
[L6509]               assert b_s98 <= a_s98;
[L6510]               __ret_0_ := (a_s98 - b_s98) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7822]   RET         call __var_27 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][msgsender_MSG], _amount_s938);
[L7823]   COND FALSE  !(revert)
[L7826]               sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][msgsender_MSG];
[L7827]               balances_BasicToken[this][msgsender_MSG] := __var_27;
[L7828]               sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][msgsender_MSG];
[L7829]               __var_28 := _until_s938 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7830]   COND FALSE  !(DType[this] == MainToken)
[L7835]   COND FALSE  !(DType[this] == FreezableMintableToken)
[L7840]   COND TRUE   DType[this] == FreezableToken
[L7841]   CALL        call currentKey_s938 := toKey~address~uint256_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s938, _until_s938 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L8244]               result_s1122 := 39480772448535941496179204954862169494691089619604794184232587696854102179840;
[L8246]               havoc result_s1122;
[L8247]               havoc result_s1122;
[L8248]               havoc result_s1122;
[L8249]               havoc result_s1122;
[L7841]   RET         call currentKey_s938 := toKey~address~uint256_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s938, _until_s938 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L7842]   COND FALSE  !(revert)
[L7848]               currentKey_s938 := currentKey_s938;
[L7849]   CALL        call __var_29 := add~uint256~uint256_SafeMath__success(this, this, 0, freezings_FreezableToken[this][currentKey_s938], _amount_s938);
[L6523]               c_s122 := (a_s122 + b_s122) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6524]               assert c_s122 >= a_s122;
[L6525]               c_s122 := c_s122;
[L7849]   RET         call __var_29 := add~uint256~uint256_SafeMath__success(this, this, 0, freezings_FreezableToken[this][currentKey_s938], _amount_s938);
[L7850]   COND FALSE  !(revert)
[L7853]               sum_freezings3[this] := sum_freezings3[this] - freezings_FreezableToken[this][currentKey_s938];
[L7854]               freezings_FreezableToken[this][currentKey_s938] := __var_29;
[L7855]               sum_freezings3[this] := sum_freezings3[this] + freezings_FreezableToken[this][currentKey_s938];
[L7856]   CALL        call __var_30 := add~uint256~uint256_SafeMath__success(this, this, 0, freezingBalance_FreezableToken[this][_to_s938], _amount_s938);
[L6523]               c_s122 := (a_s122 + b_s122) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6524]               assert c_s122 >= a_s122;
[L6525]               c_s122 := c_s122;
[L7856]   RET         call __var_30 := add~uint256~uint256_SafeMath__success(this, this, 0, freezingBalance_FreezableToken[this][_to_s938], _amount_s938);
[L7857]   COND FALSE  !(revert)
[L7860]               sum_freezingBalance4[this] := sum_freezingBalance4[this] - freezingBalance_FreezableToken[this][_to_s938];
[L7861]               freezingBalance_FreezableToken[this][_to_s938] := __var_30;
[L7862]               sum_freezingBalance4[this] := sum_freezingBalance4[this] + freezingBalance_FreezableToken[this][_to_s938];
[L7863]   COND FALSE  !(DType[this] == MainToken)
[L7868]   COND FALSE  !(DType[this] == FreezableMintableToken)
[L7873]   COND TRUE   DType[this] == FreezableToken
[L7874]   CALL        call freeze~address~uint64_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s938, _until_s938);
[L8388]   COND FALSE  !(!(_until_s1240 > now))
[L8392]               __var_42 := _until_s1240 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8393]   COND FALSE  !(DType[this] == MainToken)
[L8398]   COND FALSE  !(DType[this] == FreezableMintableToken)
[L8403]   COND TRUE   DType[this] == FreezableToken
[L8404]   CALL        call key_s1240 := toKey~address~uint256_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s1240, _until_s1240 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L8244]               result_s1122 := 39480772448535941496179204954862169494691089619604794184232587696854102179840;
[L8246]               havoc result_s1122;
[L8247]               havoc result_s1122;
[L8248]               havoc result_s1122;
[L8249]               havoc result_s1122;
[L8404]   RET         call key_s1240 := toKey~address~uint256_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s1240, _until_s1240 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L8405]   COND FALSE  !(revert)
[L8411]               key_s1240 := key_s1240;
[L8412]               __var_43 := 0 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8413]   COND FALSE  !(DType[this] == MainToken)
[L8418]   COND FALSE  !(DType[this] == FreezableMintableToken)
[L8423]   COND TRUE   DType[this] == FreezableToken
[L8424]   CALL        call parentKey_s1240 := toKey~address~uint256_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s1240, 0 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L8244]               result_s1122 := 39480772448535941496179204954862169494691089619604794184232587696854102179840;
[L8246]               havoc result_s1122;
[L8247]               havoc result_s1122;
[L8248]               havoc result_s1122;
[L8249]               havoc result_s1122;
[L8424]   RET         call parentKey_s1240 := toKey~address~uint256_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s1240, 0 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L8425]   COND FALSE  !(revert)
[L8431]               parentKey_s1240 := parentKey_s1240;
[L8432]               next_s1240 := chains_FreezableToken[this][parentKey_s1240];
[L8433]   COND TRUE   next_s1240 == 0
[L8434]               sum_chains2[this] := sum_chains2[this] - chains_FreezableToken[this][parentKey_s1240];
[L8435]               chains_FreezableToken[this][parentKey_s1240] := _until_s1240;
[L8436]               sum_chains2[this] := sum_chains2[this] + chains_FreezableToken[this][parentKey_s1240];
[L7874]   RET         call freeze~address~uint64_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s938, _until_s938);
[L7875]   COND FALSE  !(revert)
[L7881]               assert { :EventEmitted "Transfer_FreezableToken" } true;
[L7882]               assert { :EventEmitted "Freezed_FreezableToken" } true;
[L2456]   RET         call freezeTo~address~uint256~uint64_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s938, _amount_s938, _until_s938);
[L2457]               assume !revert && gas >= 0;
[L14251]  RET         call freezeTo~address~uint256~uint64_FreezableToken(this, msgsender_MSG, msgvalue_MSG, _to_s938, _amount_s938, _until_s938);
[L14388]  RET         call CorralChoice_MainToken(this);
[L14388]  CALL        call CorralChoice_MainToken(this);
[L14045]              havoc msgsender_MSG;
[L14046]              havoc msgvalue_MSG;
[L14047]              havoc choice;
[L14048]              havoc __ret_0_totalSupply;
[L14049]              havoc _owner_s729;
[L14050]              havoc balance_s729;
[L14051]              havoc _to_s1572;
[L14052]              havoc _value_s1572;
[L14053]              havoc _success_s1572;
[L14054]              havoc _owner_s395;
[L14055]              havoc _spender_s395;
[L14056]              havoc __ret_0_allowance;
[L14057]              havoc _from_s1551;
[L14058]              havoc _to_s1551;
[L14059]              havoc _value_s1551;
[L14060]              havoc _success_s1551;
[L14061]              havoc _spender_s379;
[L14062]              havoc _value_s379;
[L14063]              havoc __ret_0_approve;
[L14064]              havoc _spender_s437;
[L14065]              havoc _addedValue_s437;
[L14066]              havoc __ret_0_increaseApproval;
[L14067]              havoc _spender_s497;
[L14068]              havoc _subtractedValue_s497;
[L14069]              havoc __ret_0_decreaseApproval;
[L14070]              havoc __ret_0_owner;
[L14071]              havoc _newOwner_s558;
[L14072]              havoc __ret_0_mintingFinished;
[L14073]              havoc _to_s664;
[L14074]              havoc _amount_s664;
[L14075]              havoc __ret_0_mint;
[L14076]              havoc __ret_0_finishMinting;
[L14077]              havoc _owner_s742;
[L14078]              havoc balance_s742;
[L14079]              havoc _owner_s754;
[L14080]              havoc balance_s754;
[L14081]              havoc _addr_s792;
[L14082]              havoc count_s792;
[L14083]              havoc _addr_s849;
[L14084]              havoc _index_s849;
[L14085]              havoc _release_s849;
[L14086]              havoc _balance_s849;
[L14087]              havoc _to_s938;
[L14088]              havoc _amount_s938;
[L14089]              havoc _until_s938;
[L14090]              havoc tokens_s1107;
[L14091]              havoc _value_s1261;
[L14092]              havoc __ret_0_paused;
[L14093]              havoc _to_s1449;
[L14094]              havoc _amount_s1449;
[L14095]              havoc _until_s1449;
[L14096]              havoc __ret_0_mintAndFreeze;
[L14097]              havoc __ret_0_TOKEN_DECIMALS;
[L14098]              havoc __ret_0_TOKEN_DECIMALS_UINT8;
[L14099]              havoc __ret_0_TOKEN_DECIMAL_MULTIPLIER;
[L14100]              havoc __ret_0_TOKEN_NAME;
[L14101]              havoc __ret_0_TOKEN_SYMBOL;
[L14102]              havoc __ret_0_PAUSED;
[L14103]              havoc __ret_0_TARGET_USER;
[L14104]              havoc __ret_0_CONTINUE_MINTING;
[L14105]              havoc __ret_0_initialized;
[L14106]              havoc _name_s1511;
[L14107]              havoc _symbol_s1519;
[L14108]              havoc _decimals_s1527;
[L14109]              havoc tmpNow;
[L14110]              havoc gas;
[L14111]              assume gas > 4000000 && gas <= 8000000;
[L14112]              tmpNow := now;
[L14113]              havoc now;
[L14114]              assume now > tmpNow;
[L14115]              assume msgsender_MSG != null;
[L14116]              assume DType[msgsender_MSG] != ERC20Basic;
[L14117]              assume DType[msgsender_MSG] != SafeMath;
[L14118]              assume DType[msgsender_MSG] != BasicToken;
[L14119]              assume DType[msgsender_MSG] != ERC20;
[L14120]              assume DType[msgsender_MSG] != StandardToken;
[L14121]              assume DType[msgsender_MSG] != Ownable;
[L14122]              assume DType[msgsender_MSG] != MintableToken;
[L14123]              assume DType[msgsender_MSG] != FreezableToken;
[L14124]              assume DType[msgsender_MSG] != BurnableToken;
[L14125]              assume DType[msgsender_MSG] != Pausable;
[L14126]              assume DType[msgsender_MSG] != FreezableMintableToken;
[L14127]              assume DType[msgsender_MSG] != Consts;
[L14128]              assume DType[msgsender_MSG] != MainToken;
[L14129]              Alloc[msgsender_MSG] := true;
[L14130]  COND FALSE  !(choice == 38)
[L14136]  COND TRUE   choice == 37
[L14137]              gas := gas - 21000;
[L14138]  COND TRUE   gas >= 0
[L14139]              assume msgvalue_MSG == 0;
[L14140]  CALL        call balance_s729 := balanceOf~address_FreezableToken(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume balances_BasicToken[this][_owner_s729] >= 0 && balances_BasicToken[this][_owner_s729] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_balanceOf_FreezableToken0 := true;
[L2]                  call_balanceOf_FreezableToken0 := false;
[L2]                  revert := revert_hold;
[L1999]               havoc __exception;
[L2000]               revert := false;
[L2001]   COND FALSE  !(__exception)
[L2038]   CALL        call balance_s729 := balanceOf~address_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L7405]   COND TRUE   DType[this] == MainToken
[L7406]   CALL        call __var_14 := balanceOf~address_BasicToken__success(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L6660]               __ret_0_ := balances_BasicToken[this][_owner_s214];
[L7406]   RET         call __var_14 := balanceOf~address_BasicToken__success(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L7407]   COND FALSE  !(revert)
[L7423]               balance_s729 := (__var_14 + freezingBalance_FreezableToken[this][_owner_s729]) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2038]   RET         call balance_s729 := balanceOf~address_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L2039]               assume !revert && gas >= 0;
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume !((((((((((balance_s729 == balances_BasicToken[this][_owner_s729] && totalSupply__BasicToken[this] == old(totalSupply__BasicToken[this])) && balances_BasicToken[this] == old(balances_BasicToken[this])) && allowed_StandardToken[this] == old(allowed_StandardToken[this])) && initialized_MainToken[this] == old(initialized_MainToken[this])) && paused_Pausable[this] == old(paused_Pausable[this])) && mintingFinished_MintableToken[this] == old(mintingFinished_MintableToken[this])) && owner_Ownable[this] == old(owner_Ownable[this])) && chains_FreezableToken[this] == old(chains_FreezableToken[this])) && freezings_FreezableToken[this] == old(freezings_FreezableToken[this])) && freezingBalance_FreezableToken[this] == old(freezingBalance_FreezableToken[this]));
[L2]                  revert := revert_hold;
[L14140]  RET         call balance_s729 := balanceOf~address_FreezableToken(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L14388]  RET         call CorralChoice_MainToken(this);

Loop:
[L14388]  CALL        call CorralChoice_MainToken(this);
[L14045]              havoc msgsender_MSG;
[L14046]              havoc msgvalue_MSG;
[L14047]              havoc choice;
[L14048]              havoc __ret_0_totalSupply;
[L14049]              havoc _owner_s729;
[L14050]              havoc balance_s729;
[L14051]              havoc _to_s1572;
[L14052]              havoc _value_s1572;
[L14053]              havoc _success_s1572;
[L14054]              havoc _owner_s395;
[L14055]              havoc _spender_s395;
[L14056]              havoc __ret_0_allowance;
[L14057]              havoc _from_s1551;
[L14058]              havoc _to_s1551;
[L14059]              havoc _value_s1551;
[L14060]              havoc _success_s1551;
[L14061]              havoc _spender_s379;
[L14062]              havoc _value_s379;
[L14063]              havoc __ret_0_approve;
[L14064]              havoc _spender_s437;
[L14065]              havoc _addedValue_s437;
[L14066]              havoc __ret_0_increaseApproval;
[L14067]              havoc _spender_s497;
[L14068]              havoc _subtractedValue_s497;
[L14069]              havoc __ret_0_decreaseApproval;
[L14070]              havoc __ret_0_owner;
[L14071]              havoc _newOwner_s558;
[L14072]              havoc __ret_0_mintingFinished;
[L14073]              havoc _to_s664;
[L14074]              havoc _amount_s664;
[L14075]              havoc __ret_0_mint;
[L14076]              havoc __ret_0_finishMinting;
[L14077]              havoc _owner_s742;
[L14078]              havoc balance_s742;
[L14079]              havoc _owner_s754;
[L14080]              havoc balance_s754;
[L14081]              havoc _addr_s792;
[L14082]              havoc count_s792;
[L14083]              havoc _addr_s849;
[L14084]              havoc _index_s849;
[L14085]              havoc _release_s849;
[L14086]              havoc _balance_s849;
[L14087]              havoc _to_s938;
[L14088]              havoc _amount_s938;
[L14089]              havoc _until_s938;
[L14090]              havoc tokens_s1107;
[L14091]              havoc _value_s1261;
[L14092]              havoc __ret_0_paused;
[L14093]              havoc _to_s1449;
[L14094]              havoc _amount_s1449;
[L14095]              havoc _until_s1449;
[L14096]              havoc __ret_0_mintAndFreeze;
[L14097]              havoc __ret_0_TOKEN_DECIMALS;
[L14098]              havoc __ret_0_TOKEN_DECIMALS_UINT8;
[L14099]              havoc __ret_0_TOKEN_DECIMAL_MULTIPLIER;
[L14100]              havoc __ret_0_TOKEN_NAME;
[L14101]              havoc __ret_0_TOKEN_SYMBOL;
[L14102]              havoc __ret_0_PAUSED;
[L14103]              havoc __ret_0_TARGET_USER;
[L14104]              havoc __ret_0_CONTINUE_MINTING;
[L14105]              havoc __ret_0_initialized;
[L14106]              havoc _name_s1511;
[L14107]              havoc _symbol_s1519;
[L14108]              havoc _decimals_s1527;
[L14109]              havoc tmpNow;
[L14110]              havoc gas;
[L14111]              assume gas > 4000000 && gas <= 8000000;
[L14112]              tmpNow := now;
[L14113]              havoc now;
[L14114]              assume now > tmpNow;
[L14115]              assume msgsender_MSG != null;
[L14116]              assume DType[msgsender_MSG] != ERC20Basic;
[L14117]              assume DType[msgsender_MSG] != SafeMath;
[L14118]              assume DType[msgsender_MSG] != BasicToken;
[L14119]              assume DType[msgsender_MSG] != ERC20;
[L14120]              assume DType[msgsender_MSG] != StandardToken;
[L14121]              assume DType[msgsender_MSG] != Ownable;
[L14122]              assume DType[msgsender_MSG] != MintableToken;
[L14123]              assume DType[msgsender_MSG] != FreezableToken;
[L14124]              assume DType[msgsender_MSG] != BurnableToken;
[L14125]              assume DType[msgsender_MSG] != Pausable;
[L14126]              assume DType[msgsender_MSG] != FreezableMintableToken;
[L14127]              assume DType[msgsender_MSG] != Consts;
[L14128]              assume DType[msgsender_MSG] != MainToken;
[L14129]              Alloc[msgsender_MSG] := true;
[L14130]  COND TRUE   choice == 38
[L14131]              gas := gas - 21000;
[L14132]  COND FALSE  !(gas >= 0)
[L14388]  RET         call CorralChoice_MainToken(this);

[2020-11-24 21:26:12,272 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-24 21:26:12,272 INFO  L82        PathProgramCache]: Analyzing trace with hash -796963386, now seen corresponding path program 1 times
[2020-11-24 21:26:12,273 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-24 21:26:12,308 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-24 21:26:12,911 INFO  L134       CoverageAnalysis]: Checked inductivity of 9938 backedges. 1 proven. 0 refuted. 0 times theorem prover too weak. 9937 trivial. 0 not checked.
[2020-11-24 21:26:12,912 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-24 21:26:12,912 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [6] imperfect sequences [] total 6
[2020-11-24 21:26:12,913 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-24 21:26:12,913 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 6 interpolants.
[2020-11-24 21:26:12,913 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=9, Invalid=21, Unknown=0, NotChecked=0, Total=30
[2020-11-24 21:26:12,913 INFO  L87              Difference]: Start difference. First operand 5618 states and 6331 transitions. cyclomatic complexity: 733 Second operand 6 states.
[2020-11-24 21:26:13,028 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-24 21:26:13,028 INFO  L93              Difference]: Finished difference Result 5662 states and 6367 transitions.
[2020-11-24 21:26:13,028 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 6 states. 
[2020-11-24 21:26:13,028 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 5662 states and 6367 transitions.
[2020-11-24 21:26:13,037 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-24 21:26:13,046 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 5662 states to 5564 states and 6261 transitions.
[2020-11-24 21:26:13,046 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1102
[2020-11-24 21:26:13,047 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1102
[2020-11-24 21:26:13,047 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 5564 states and 6261 transitions.
[2020-11-24 21:26:13,049 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-24 21:26:13,050 INFO  L728         BuchiCegarLoop]: Abstraction has 5564 states and 6261 transitions.
[2020-11-24 21:26:13,053 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 5564 states and 6261 transitions.
[2020-11-24 21:26:13,073 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 5564 to 5564.
[2020-11-24 21:26:13,073 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 5564 states.
[2020-11-24 21:26:13,078 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 5564 states to 5564 states and 6261 transitions.
[2020-11-24 21:26:13,078 INFO  L751         BuchiCegarLoop]: Abstraction has 5564 states and 6261 transitions.
[2020-11-24 21:26:13,078 INFO  L631         BuchiCegarLoop]: Abstraction has 5564 states and 6261 transitions.
[2020-11-24 21:26:13,078 INFO  L445         BuchiCegarLoop]: ======== Iteration 14============
[2020-11-24 21:26:13,079 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 5564 states and 6261 transitions.
[2020-11-24 21:26:13,083 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-24 21:26:13,083 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-24 21:26:13,083 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-24 21:26:13,085 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [38, 38, 38, 38, 38, 38, 38, 38, 38, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-24 21:26:13,086 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  success_balanceOf_FreezableToken0 := false;
[L2]                  call_balanceOf_FreezableToken0 := false;
[L2]      CALL        call main();
[L14378]              assume null == 0;
[L14379]  CALL        call this := FreshRefGenerator__success();
[L6396]               havoc newRef;
[L6397]               assume Alloc[newRef] == false;
[L6398]               Alloc[newRef] := true;
[L6399]               assume newRef != null;
[L14379]  RET         call this := FreshRefGenerator__success();
[L14380]              assume now >= 0;
[L14381]              assume DType[this] == MainToken;
[L14382]              assume msgvalue_MSG == 0;
[L14383]              gas := gas - 53000;
[L14384]  CALL        call MainToken_MainToken(this, msgsender_MSG, msgvalue_MSG);
[L4183]               havoc __exception;
[L4184]               revert := false;
[L4185]   COND FALSE  !(__exception)
[L4222]   CALL        call MainToken_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9205]   CALL        call Consts_Consts__success(this, msgsender_MSG, msgvalue_MSG);
[L9007]   CALL        call Consts_Consts_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8983]               assume msgsender_MSG != null;
[L8984]               Balance[this] := 0;
[L8985]               TOKEN_DECIMALS_Consts[this] := 18;
[L8986]               TOKEN_DECIMALS_UINT8_Consts[this] := 18;
[L8987]               TOKEN_DECIMAL_MULTIPLIER_Consts[this] := nonlinearPow(10, TOKEN_DECIMALS_Consts[this]) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8988]               TOKEN_NAME_Consts[this] := -1051245219;
[L8989]               TOKEN_SYMBOL_Consts[this] := -1804535220;
[L8990]               PAUSED_Consts[this] := false;
[L8991]               __var_52 := ConstantToRef(-210822415442009814958929812751043848690848471787);
[L8992]               TARGET_USER_Consts[this] := ConstantToRef(-210822415442009814958929812751043848690848471787);
[L8993]               CONTINUE_MINTING_Consts[this] := true;
[L9007]   RET         call Consts_Consts_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9008]   COND FALSE  !(revert)
[L9205]   RET         call Consts_Consts__success(this, msgsender_MSG, msgvalue_MSG);
[L9206]   COND FALSE  !(revert)
[L9209]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L9209]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L9210]   COND FALSE  !(revert)
[L9213]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6694]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6694]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6695]   COND FALSE  !(revert)
[L6698]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6675]               assume msgsender_MSG != null;
[L6676]               Balance[this] := 0;
[L6698]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6699]   COND FALSE  !(revert)
[L9213]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L9214]   COND FALSE  !(revert)
[L9217]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6565]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   COND FALSE  !(revert)
[L6569]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]               assume msgsender_MSG != null;
[L6544]               Balance[this] := 0;
[L6545]               balances_BasicToken[this] := zeroRefintArr();
[L6546]               sum_balances0[this] := 0;
[L6547]               totalSupply__BasicToken[this] := 0;
[L6569]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6570]   COND FALSE  !(revert)
[L9217]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9218]   COND FALSE  !(revert)
[L9221]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6746]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6746]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6747]   COND FALSE  !(revert)
[L6750]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6694]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6694]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6695]   COND FALSE  !(revert)
[L6698]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6675]               assume msgsender_MSG != null;
[L6676]               Balance[this] := 0;
[L6698]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6699]   COND FALSE  !(revert)
[L6750]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6751]   COND FALSE  !(revert)
[L6754]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6565]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   COND FALSE  !(revert)
[L6569]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]               assume msgsender_MSG != null;
[L6544]               Balance[this] := 0;
[L6545]               balances_BasicToken[this] := zeroRefintArr();
[L6546]               sum_balances0[this] := 0;
[L6547]               totalSupply__BasicToken[this] := 0;
[L6569]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6570]   COND FALSE  !(revert)
[L6754]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6755]   COND FALSE  !(revert)
[L6758]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6717]               assume msgsender_MSG != null;
[L6718]               Balance[this] := 0;
[L6719]               allowed_StandardToken[this] := zeroRefRefintArr();
[L6720]               sum_allowed1[this] := 0;
[L6758]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6759]   COND FALSE  !(revert)
[L9221]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9222]   COND FALSE  !(revert)
[L9225]   CALL        call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7353]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L7353]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7354]   COND FALSE  !(revert)
[L7357]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6694]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6694]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6695]   COND FALSE  !(revert)
[L6698]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6675]               assume msgsender_MSG != null;
[L6676]               Balance[this] := 0;
[L6698]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6699]   COND FALSE  !(revert)
[L7357]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7358]   COND FALSE  !(revert)
[L7361]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6565]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   COND FALSE  !(revert)
[L6569]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]               assume msgsender_MSG != null;
[L6544]               Balance[this] := 0;
[L6545]               balances_BasicToken[this] := zeroRefintArr();
[L6546]               sum_balances0[this] := 0;
[L6547]               totalSupply__BasicToken[this] := 0;
[L6569]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6570]   COND FALSE  !(revert)
[L7361]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7362]   COND FALSE  !(revert)
[L7365]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6746]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6746]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6747]   COND FALSE  !(revert)
[L6750]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6694]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6694]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6695]   COND FALSE  !(revert)
[L6698]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6675]               assume msgsender_MSG != null;
[L6676]               Balance[this] := 0;
[L6698]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6699]   COND FALSE  !(revert)
[L6750]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6751]   COND FALSE  !(revert)
[L6754]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6565]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   COND FALSE  !(revert)
[L6569]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]               assume msgsender_MSG != null;
[L6544]               Balance[this] := 0;
[L6545]               balances_BasicToken[this] := zeroRefintArr();
[L6546]               sum_balances0[this] := 0;
[L6547]               totalSupply__BasicToken[this] := 0;
[L6569]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6570]   COND FALSE  !(revert)
[L6754]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6755]   COND FALSE  !(revert)
[L6758]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6717]               assume msgsender_MSG != null;
[L6718]               Balance[this] := 0;
[L6719]               allowed_StandardToken[this] := zeroRefRefintArr();
[L6720]               sum_allowed1[this] := 0;
[L6758]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6759]   COND FALSE  !(revert)
[L7365]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7366]   COND FALSE  !(revert)
[L7369]   CALL        call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7316]               assume msgsender_MSG != null;
[L7317]               Balance[this] := 0;
[L7318]               chains_FreezableToken[this] := zerointintArr();
[L7319]               sum_chains2[this] := 0;
[L7320]               freezings_FreezableToken[this] := zerointintArr();
[L7321]               sum_freezings3[this] := 0;
[L7322]               freezingBalance_FreezableToken[this] := zeroRefintArr();
[L7323]               sum_freezingBalance4[this] := 0;
[L7369]   RET         call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7370]   COND FALSE  !(revert)
[L9225]   RET         call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9226]   COND FALSE  !(revert)
[L9229]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6988]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6971]               assume msgsender_MSG != null;
[L6972]               Balance[this] := 0;
[L6973]               owner_Ownable[this] := null;
[L6975]               owner_Ownable[this] := msgsender_MSG;
[L6988]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6989]   COND FALSE  !(revert)
[L9229]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L9230]   COND FALSE  !(revert)
[L9233]   CALL        call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7172]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L7172]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7173]   COND FALSE  !(revert)
[L7176]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6694]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6694]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6695]   COND FALSE  !(revert)
[L6698]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6675]               assume msgsender_MSG != null;
[L6676]               Balance[this] := 0;
[L6698]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6699]   COND FALSE  !(revert)
[L7176]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7177]   COND FALSE  !(revert)
[L7180]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6565]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   COND FALSE  !(revert)
[L6569]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]               assume msgsender_MSG != null;
[L6544]               Balance[this] := 0;
[L6545]               balances_BasicToken[this] := zeroRefintArr();
[L6546]               sum_balances0[this] := 0;
[L6547]               totalSupply__BasicToken[this] := 0;
[L6569]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6570]   COND FALSE  !(revert)
[L7180]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7181]   COND FALSE  !(revert)
[L7184]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6746]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6746]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6747]   COND FALSE  !(revert)
[L6750]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6694]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6694]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6695]   COND FALSE  !(revert)
[L6698]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6675]               assume msgsender_MSG != null;
[L6676]               Balance[this] := 0;
[L6698]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6699]   COND FALSE  !(revert)
[L6750]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6751]   COND FALSE  !(revert)
[L6754]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6565]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   COND FALSE  !(revert)
[L6569]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]               assume msgsender_MSG != null;
[L6544]               Balance[this] := 0;
[L6545]               balances_BasicToken[this] := zeroRefintArr();
[L6546]               sum_balances0[this] := 0;
[L6547]               totalSupply__BasicToken[this] := 0;
[L6569]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6570]   COND FALSE  !(revert)
[L6754]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6755]   COND FALSE  !(revert)
[L6758]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6717]               assume msgsender_MSG != null;
[L6718]               Balance[this] := 0;
[L6719]               allowed_StandardToken[this] := zeroRefRefintArr();
[L6720]               sum_allowed1[this] := 0;
[L6758]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6759]   COND FALSE  !(revert)
[L7184]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7185]   COND FALSE  !(revert)
[L7188]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6988]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6971]               assume msgsender_MSG != null;
[L6972]               Balance[this] := 0;
[L6973]               owner_Ownable[this] := null;
[L6975]               owner_Ownable[this] := msgsender_MSG;
[L6988]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6989]   COND FALSE  !(revert)
[L7188]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7189]   COND FALSE  !(revert)
[L7192]   CALL        call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7136]               assume msgsender_MSG != null;
[L7137]               Balance[this] := 0;
[L7138]               mintingFinished_MintableToken[this] := false;
[L7192]   RET         call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7193]   COND FALSE  !(revert)
[L9233]   RET         call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9234]   COND FALSE  !(revert)
[L9237]   CALL        call FreezableMintableToken_FreezableMintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L8792]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L8792]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L8793]   COND FALSE  !(revert)
[L8796]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6694]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6694]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6695]   COND FALSE  !(revert)
[L6698]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6675]               assume msgsender_MSG != null;
[L6676]               Balance[this] := 0;
[L6698]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6699]   COND FALSE  !(revert)
[L8796]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L8797]   COND FALSE  !(revert)
[L8800]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6565]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   COND FALSE  !(revert)
[L6569]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]               assume msgsender_MSG != null;
[L6544]               Balance[this] := 0;
[L6545]               balances_BasicToken[this] := zeroRefintArr();
[L6546]               sum_balances0[this] := 0;
[L6547]               totalSupply__BasicToken[this] := 0;
[L6569]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6570]   COND FALSE  !(revert)
[L8800]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L8801]   COND FALSE  !(revert)
[L8804]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6746]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6746]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6747]   COND FALSE  !(revert)
[L6750]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6694]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6694]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6695]   COND FALSE  !(revert)
[L6698]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6675]               assume msgsender_MSG != null;
[L6676]               Balance[this] := 0;
[L6698]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6699]   COND FALSE  !(revert)
[L6750]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6751]   COND FALSE  !(revert)
[L6754]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6565]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   COND FALSE  !(revert)
[L6569]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]               assume msgsender_MSG != null;
[L6544]               Balance[this] := 0;
[L6545]               balances_BasicToken[this] := zeroRefintArr();
[L6546]               sum_balances0[this] := 0;
[L6547]               totalSupply__BasicToken[this] := 0;
[L6569]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6570]   COND FALSE  !(revert)
[L6754]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6755]   COND FALSE  !(revert)
[L6758]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6717]               assume msgsender_MSG != null;
[L6718]               Balance[this] := 0;
[L6719]               allowed_StandardToken[this] := zeroRefRefintArr();
[L6720]               sum_allowed1[this] := 0;
[L6758]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6759]   COND FALSE  !(revert)
[L8804]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L8805]   COND FALSE  !(revert)
[L8808]   CALL        call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7353]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L7353]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7354]   COND FALSE  !(revert)
[L7357]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6694]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6694]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6695]   COND FALSE  !(revert)
[L6698]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6675]               assume msgsender_MSG != null;
[L6676]               Balance[this] := 0;
[L6698]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6699]   COND FALSE  !(revert)
[L7357]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7358]   COND FALSE  !(revert)
[L7361]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6565]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   COND FALSE  !(revert)
[L6569]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]               assume msgsender_MSG != null;
[L6544]               Balance[this] := 0;
[L6545]               balances_BasicToken[this] := zeroRefintArr();
[L6546]               sum_balances0[this] := 0;
[L6547]               totalSupply__BasicToken[this] := 0;
[L6569]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6570]   COND FALSE  !(revert)
[L7361]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7362]   COND FALSE  !(revert)
[L7365]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6746]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6746]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6747]   COND FALSE  !(revert)
[L6750]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6694]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6694]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6695]   COND FALSE  !(revert)
[L6698]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6675]               assume msgsender_MSG != null;
[L6676]               Balance[this] := 0;
[L6698]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6699]   COND FALSE  !(revert)
[L6750]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6751]   COND FALSE  !(revert)
[L6754]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6565]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   COND FALSE  !(revert)
[L6569]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]               assume msgsender_MSG != null;
[L6544]               Balance[this] := 0;
[L6545]               balances_BasicToken[this] := zeroRefintArr();
[L6546]               sum_balances0[this] := 0;
[L6547]               totalSupply__BasicToken[this] := 0;
[L6569]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6570]   COND FALSE  !(revert)
[L6754]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6755]   COND FALSE  !(revert)
[L6758]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6717]               assume msgsender_MSG != null;
[L6718]               Balance[this] := 0;
[L6719]               allowed_StandardToken[this] := zeroRefRefintArr();
[L6720]               sum_allowed1[this] := 0;
[L6758]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6759]   COND FALSE  !(revert)
[L7365]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7366]   COND FALSE  !(revert)
[L7369]   CALL        call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7316]               assume msgsender_MSG != null;
[L7317]               Balance[this] := 0;
[L7318]               chains_FreezableToken[this] := zerointintArr();
[L7319]               sum_chains2[this] := 0;
[L7320]               freezings_FreezableToken[this] := zerointintArr();
[L7321]               sum_freezings3[this] := 0;
[L7322]               freezingBalance_FreezableToken[this] := zeroRefintArr();
[L7323]               sum_freezingBalance4[this] := 0;
[L7369]   RET         call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7370]   COND FALSE  !(revert)
[L8808]   RET         call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L8809]   COND FALSE  !(revert)
[L8812]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6988]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6971]               assume msgsender_MSG != null;
[L6972]               Balance[this] := 0;
[L6973]               owner_Ownable[this] := null;
[L6975]               owner_Ownable[this] := msgsender_MSG;
[L6988]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6989]   COND FALSE  !(revert)
[L8812]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L8813]   COND FALSE  !(revert)
[L8816]   CALL        call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7172]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L7172]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7173]   COND FALSE  !(revert)
[L7176]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6694]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6694]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6695]   COND FALSE  !(revert)
[L6698]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6675]               assume msgsender_MSG != null;
[L6676]               Balance[this] := 0;
[L6698]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6699]   COND FALSE  !(revert)
[L7176]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7177]   COND FALSE  !(revert)
[L7180]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6565]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   COND FALSE  !(revert)
[L6569]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]               assume msgsender_MSG != null;
[L6544]               Balance[this] := 0;
[L6545]               balances_BasicToken[this] := zeroRefintArr();
[L6546]               sum_balances0[this] := 0;
[L6547]               totalSupply__BasicToken[this] := 0;
[L6569]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6570]   COND FALSE  !(revert)
[L7180]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7181]   COND FALSE  !(revert)
[L7184]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6746]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6746]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6747]   COND FALSE  !(revert)
[L6750]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6694]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6694]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6695]   COND FALSE  !(revert)
[L6698]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6675]               assume msgsender_MSG != null;
[L6676]               Balance[this] := 0;
[L6698]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6699]   COND FALSE  !(revert)
[L6750]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6751]   COND FALSE  !(revert)
[L6754]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6565]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   COND FALSE  !(revert)
[L6569]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]               assume msgsender_MSG != null;
[L6544]               Balance[this] := 0;
[L6545]               balances_BasicToken[this] := zeroRefintArr();
[L6546]               sum_balances0[this] := 0;
[L6547]               totalSupply__BasicToken[this] := 0;
[L6569]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6570]   COND FALSE  !(revert)
[L6754]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6755]   COND FALSE  !(revert)
[L6758]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6717]               assume msgsender_MSG != null;
[L6718]               Balance[this] := 0;
[L6719]               allowed_StandardToken[this] := zeroRefRefintArr();
[L6720]               sum_allowed1[this] := 0;
[L6758]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6759]   COND FALSE  !(revert)
[L7184]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7185]   COND FALSE  !(revert)
[L7188]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6988]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6971]               assume msgsender_MSG != null;
[L6972]               Balance[this] := 0;
[L6973]               owner_Ownable[this] := null;
[L6975]               owner_Ownable[this] := msgsender_MSG;
[L6988]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6989]   COND FALSE  !(revert)
[L7188]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7189]   COND FALSE  !(revert)
[L7192]   CALL        call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7136]               assume msgsender_MSG != null;
[L7137]               Balance[this] := 0;
[L7138]               mintingFinished_MintableToken[this] := false;
[L7192]   RET         call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7193]   COND FALSE  !(revert)
[L8816]   RET         call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L8817]   COND FALSE  !(revert)
[L8820]   CALL        call FreezableMintableToken_FreezableMintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8749]               assume msgsender_MSG != null;
[L8750]               Balance[this] := 0;
[L8820]   RET         call FreezableMintableToken_FreezableMintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8821]   COND FALSE  !(revert)
[L9237]   RET         call FreezableMintableToken_FreezableMintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9238]   COND FALSE  !(revert)
[L9241]   CALL        call BurnableToken_BurnableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L8536]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L8536]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L8537]   COND FALSE  !(revert)
[L8540]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6565]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   COND FALSE  !(revert)
[L6569]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]               assume msgsender_MSG != null;
[L6544]               Balance[this] := 0;
[L6545]               balances_BasicToken[this] := zeroRefintArr();
[L6546]               sum_balances0[this] := 0;
[L6547]               totalSupply__BasicToken[this] := 0;
[L6569]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6570]   COND FALSE  !(revert)
[L8540]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L8541]   COND FALSE  !(revert)
[L8544]   CALL        call BurnableToken_BurnableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8513]               assume msgsender_MSG != null;
[L8514]               Balance[this] := 0;
[L8544]   RET         call BurnableToken_BurnableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8545]   COND FALSE  !(revert)
[L9241]   RET         call BurnableToken_BurnableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9242]   COND FALSE  !(revert)
[L9245]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L8662]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6988]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6971]               assume msgsender_MSG != null;
[L6972]               Balance[this] := 0;
[L6973]               owner_Ownable[this] := null;
[L6975]               owner_Ownable[this] := msgsender_MSG;
[L6988]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6989]   COND FALSE  !(revert)
[L8662]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L8663]   COND FALSE  !(revert)
[L8666]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8642]               assume msgsender_MSG != null;
[L8643]               Balance[this] := 0;
[L8644]               paused_Pausable[this] := false;
[L8666]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8667]   COND FALSE  !(revert)
[L9245]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L9246]   COND FALSE  !(revert)
[L9249]   CALL        call MainToken_MainToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9133]               assume msgsender_MSG != null;
[L9134]               Balance[this] := 0;
[L9135]               initialized_MainToken[this] := false;
[L9137]   CALL        call init_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9404]   COND FALSE  !(!!initialized_MainToken[this])
[L9408]               initialized_MainToken[this] := true;
[L9409]   COND FALSE  !(PAUSED_Consts[this])
[L9419]   COND FALSE  !(!CONTINUE_MINTING_Consts[this])
[L9429]               assert { :EventEmitted "Initialized_MainToken" } true;
[L9137]   RET         call init_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9138]   COND FALSE  !(revert)
[L9141]   COND TRUE   DType[this] == MainToken
[L9142]   CALL        call transferOwnership~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, TARGET_USER_Consts[this]);
[L7055]   CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L12332]  COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L7055]   RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7056]   COND FALSE  !(revert)
[L7059]   COND TRUE   DType[this] == MainToken
[L7060]   CALL        call _transferOwnership~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, _newOwner_s558);
[L7103]               __var_11 := null;
[L7104]   COND FALSE  !(!(_newOwner_s581 != null))
[L7108]               assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L7109]               owner_Ownable[this] := _newOwner_s581;
[L7060]   RET         call _transferOwnership~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, _newOwner_s558);
[L7061]   COND FALSE  !(revert)
[L9142]   RET         call transferOwnership~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, TARGET_USER_Consts[this]);
[L9143]   COND FALSE  !(revert)
[L9249]   RET         call MainToken_MainToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9250]   COND FALSE  !(revert)
[L4222]   RET         call MainToken_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4223]               assume !revert && gas >= 0;
[L14384]  RET         call MainToken_MainToken(this, msgsender_MSG, msgvalue_MSG);
[L14385]              assume !revert && gas >= 0;
[L14388]  CALL        call CorralChoice_MainToken(this);
[L14045]              havoc msgsender_MSG;
[L14046]              havoc msgvalue_MSG;
[L14047]              havoc choice;
[L14048]              havoc __ret_0_totalSupply;
[L14049]              havoc _owner_s729;
[L14050]              havoc balance_s729;
[L14051]              havoc _to_s1572;
[L14052]              havoc _value_s1572;
[L14053]              havoc _success_s1572;
[L14054]              havoc _owner_s395;
[L14055]              havoc _spender_s395;
[L14056]              havoc __ret_0_allowance;
[L14057]              havoc _from_s1551;
[L14058]              havoc _to_s1551;
[L14059]              havoc _value_s1551;
[L14060]              havoc _success_s1551;
[L14061]              havoc _spender_s379;
[L14062]              havoc _value_s379;
[L14063]              havoc __ret_0_approve;
[L14064]              havoc _spender_s437;
[L14065]              havoc _addedValue_s437;
[L14066]              havoc __ret_0_increaseApproval;
[L14067]              havoc _spender_s497;
[L14068]              havoc _subtractedValue_s497;
[L14069]              havoc __ret_0_decreaseApproval;
[L14070]              havoc __ret_0_owner;
[L14071]              havoc _newOwner_s558;
[L14072]              havoc __ret_0_mintingFinished;
[L14073]              havoc _to_s664;
[L14074]              havoc _amount_s664;
[L14075]              havoc __ret_0_mint;
[L14076]              havoc __ret_0_finishMinting;
[L14077]              havoc _owner_s742;
[L14078]              havoc balance_s742;
[L14079]              havoc _owner_s754;
[L14080]              havoc balance_s754;
[L14081]              havoc _addr_s792;
[L14082]              havoc count_s792;
[L14083]              havoc _addr_s849;
[L14084]              havoc _index_s849;
[L14085]              havoc _release_s849;
[L14086]              havoc _balance_s849;
[L14087]              havoc _to_s938;
[L14088]              havoc _amount_s938;
[L14089]              havoc _until_s938;
[L14090]              havoc tokens_s1107;
[L14091]              havoc _value_s1261;
[L14092]              havoc __ret_0_paused;
[L14093]              havoc _to_s1449;
[L14094]              havoc _amount_s1449;
[L14095]              havoc _until_s1449;
[L14096]              havoc __ret_0_mintAndFreeze;
[L14097]              havoc __ret_0_TOKEN_DECIMALS;
[L14098]              havoc __ret_0_TOKEN_DECIMALS_UINT8;
[L14099]              havoc __ret_0_TOKEN_DECIMAL_MULTIPLIER;
[L14100]              havoc __ret_0_TOKEN_NAME;
[L14101]              havoc __ret_0_TOKEN_SYMBOL;
[L14102]              havoc __ret_0_PAUSED;
[L14103]              havoc __ret_0_TARGET_USER;
[L14104]              havoc __ret_0_CONTINUE_MINTING;
[L14105]              havoc __ret_0_initialized;
[L14106]              havoc _name_s1511;
[L14107]              havoc _symbol_s1519;
[L14108]              havoc _decimals_s1527;
[L14109]              havoc tmpNow;
[L14110]              havoc gas;
[L14111]              assume gas > 4000000 && gas <= 8000000;
[L14112]              tmpNow := now;
[L14113]              havoc now;
[L14114]              assume now > tmpNow;
[L14115]              assume msgsender_MSG != null;
[L14116]              assume DType[msgsender_MSG] != ERC20Basic;
[L14117]              assume DType[msgsender_MSG] != SafeMath;
[L14118]              assume DType[msgsender_MSG] != BasicToken;
[L14119]              assume DType[msgsender_MSG] != ERC20;
[L14120]              assume DType[msgsender_MSG] != StandardToken;
[L14121]              assume DType[msgsender_MSG] != Ownable;
[L14122]              assume DType[msgsender_MSG] != MintableToken;
[L14123]              assume DType[msgsender_MSG] != FreezableToken;
[L14124]              assume DType[msgsender_MSG] != BurnableToken;
[L14125]              assume DType[msgsender_MSG] != Pausable;
[L14126]              assume DType[msgsender_MSG] != FreezableMintableToken;
[L14127]              assume DType[msgsender_MSG] != Consts;
[L14128]              assume DType[msgsender_MSG] != MainToken;
[L14129]              Alloc[msgsender_MSG] := true;
[L14130]  COND FALSE  !(choice == 38)
[L14136]  COND FALSE  !(choice == 37)
[L14142]  COND FALSE  !(choice == 36)
[L14149]  COND FALSE  !(choice == 35)
[L14155]  COND FALSE  !(choice == 34)
[L14162]  COND FALSE  !(choice == 33)
[L14169]  COND FALSE  !(choice == 32)
[L14176]  COND FALSE  !(choice == 31)
[L14183]  COND FALSE  !(choice == 30)
[L14189]  COND FALSE  !(choice == 29)
[L14195]  COND FALSE  !(choice == 28)
[L14201]  COND FALSE  !(choice == 27)
[L14207]  COND FALSE  !(choice == 26)
[L14214]  COND FALSE  !(choice == 25)
[L14220]  COND FALSE  !(choice == 24)
[L14226]  COND FALSE  !(choice == 23)
[L14232]  COND FALSE  !(choice == 22)
[L14238]  COND FALSE  !(choice == 21)
[L14245]  COND TRUE   choice == 20
[L14246]              gas := gas - 21000;
[L14247]  COND TRUE   gas >= 0
[L14248]              assume _amount_s938 >= 0 && _amount_s938 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L14249]              assume _until_s938 >= 0 && _until_s938 < 18446744073709551616;
[L14250]              assume msgvalue_MSG == 0;
[L14251]  CALL        call freezeTo~address~uint256~uint64_FreezableToken(this, msgsender_MSG, msgvalue_MSG, _to_s938, _amount_s938, _until_s938);
[L2417]               havoc __exception;
[L2418]               revert := false;
[L2419]   COND FALSE  !(__exception)
[L2456]   CALL        call freezeTo~address~uint256~uint64_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s938, _amount_s938, _until_s938);
[L7813]               __var_26 := null;
[L7814]   COND FALSE  !(!(_to_s938 != null))
[L7818]   COND FALSE  !(!(_amount_s938 <= balances_BasicToken[this][msgsender_MSG]))
[L7822]   CALL        call __var_27 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][msgsender_MSG], _amount_s938);
[L6509]               assert b_s98 <= a_s98;
[L6510]               __ret_0_ := (a_s98 - b_s98) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7822]   RET         call __var_27 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][msgsender_MSG], _amount_s938);
[L7823]   COND FALSE  !(revert)
[L7826]               sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][msgsender_MSG];
[L7827]               balances_BasicToken[this][msgsender_MSG] := __var_27;
[L7828]               sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][msgsender_MSG];
[L7829]               __var_28 := _until_s938 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7830]   COND FALSE  !(DType[this] == MainToken)
[L7835]   COND TRUE   DType[this] == FreezableMintableToken
[L7836]   CALL        call currentKey_s938 := toKey~address~uint256_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s938, _until_s938 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L8244]               result_s1122 := 39480772448535941496179204954862169494691089619604794184232587696854102179840;
[L8246]               havoc result_s1122;
[L8247]               havoc result_s1122;
[L8248]               havoc result_s1122;
[L8249]               havoc result_s1122;
[L7836]   RET         call currentKey_s938 := toKey~address~uint256_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s938, _until_s938 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L7837]   COND FALSE  !(revert)
[L7848]               currentKey_s938 := currentKey_s938;
[L7849]   CALL        call __var_29 := add~uint256~uint256_SafeMath__success(this, this, 0, freezings_FreezableToken[this][currentKey_s938], _amount_s938);
[L6523]               c_s122 := (a_s122 + b_s122) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6524]               assert c_s122 >= a_s122;
[L6525]               c_s122 := c_s122;
[L7849]   RET         call __var_29 := add~uint256~uint256_SafeMath__success(this, this, 0, freezings_FreezableToken[this][currentKey_s938], _amount_s938);
[L7850]   COND FALSE  !(revert)
[L7853]               sum_freezings3[this] := sum_freezings3[this] - freezings_FreezableToken[this][currentKey_s938];
[L7854]               freezings_FreezableToken[this][currentKey_s938] := __var_29;
[L7855]               sum_freezings3[this] := sum_freezings3[this] + freezings_FreezableToken[this][currentKey_s938];
[L7856]   CALL        call __var_30 := add~uint256~uint256_SafeMath__success(this, this, 0, freezingBalance_FreezableToken[this][_to_s938], _amount_s938);
[L6523]               c_s122 := (a_s122 + b_s122) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6524]               assert c_s122 >= a_s122;
[L6525]               c_s122 := c_s122;
[L7856]   RET         call __var_30 := add~uint256~uint256_SafeMath__success(this, this, 0, freezingBalance_FreezableToken[this][_to_s938], _amount_s938);
[L7857]   COND FALSE  !(revert)
[L7860]               sum_freezingBalance4[this] := sum_freezingBalance4[this] - freezingBalance_FreezableToken[this][_to_s938];
[L7861]               freezingBalance_FreezableToken[this][_to_s938] := __var_30;
[L7862]               sum_freezingBalance4[this] := sum_freezingBalance4[this] + freezingBalance_FreezableToken[this][_to_s938];
[L7863]   COND FALSE  !(DType[this] == MainToken)
[L7868]   COND TRUE   DType[this] == FreezableMintableToken
[L7869]   CALL        call freeze~address~uint64_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s938, _until_s938);
[L8388]   COND FALSE  !(!(_until_s1240 > now))
[L8392]               __var_42 := _until_s1240 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8393]   COND FALSE  !(DType[this] == MainToken)
[L8398]   COND TRUE   DType[this] == FreezableMintableToken
[L8399]   CALL        call key_s1240 := toKey~address~uint256_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s1240, _until_s1240 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L8244]               result_s1122 := 39480772448535941496179204954862169494691089619604794184232587696854102179840;
[L8246]               havoc result_s1122;
[L8247]               havoc result_s1122;
[L8248]               havoc result_s1122;
[L8249]               havoc result_s1122;
[L8399]   RET         call key_s1240 := toKey~address~uint256_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s1240, _until_s1240 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L8400]   COND FALSE  !(revert)
[L8411]               key_s1240 := key_s1240;
[L8412]               __var_43 := 0 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8413]   COND FALSE  !(DType[this] == MainToken)
[L8418]   COND FALSE  !(DType[this] == FreezableMintableToken)
[L8423]   COND TRUE   DType[this] == FreezableToken
[L8424]   CALL        call parentKey_s1240 := toKey~address~uint256_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s1240, 0 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L8244]               result_s1122 := 39480772448535941496179204954862169494691089619604794184232587696854102179840;
[L8246]               havoc result_s1122;
[L8247]               havoc result_s1122;
[L8248]               havoc result_s1122;
[L8249]               havoc result_s1122;
[L8424]   RET         call parentKey_s1240 := toKey~address~uint256_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s1240, 0 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L8425]   COND FALSE  !(revert)
[L8431]               parentKey_s1240 := parentKey_s1240;
[L8432]               next_s1240 := chains_FreezableToken[this][parentKey_s1240];
[L8433]   COND TRUE   next_s1240 == 0
[L8434]               sum_chains2[this] := sum_chains2[this] - chains_FreezableToken[this][parentKey_s1240];
[L8435]               chains_FreezableToken[this][parentKey_s1240] := _until_s1240;
[L8436]               sum_chains2[this] := sum_chains2[this] + chains_FreezableToken[this][parentKey_s1240];
[L7869]   RET         call freeze~address~uint64_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s938, _until_s938);
[L7870]   COND FALSE  !(revert)
[L7881]               assert { :EventEmitted "Transfer_FreezableToken" } true;
[L7882]               assert { :EventEmitted "Freezed_FreezableToken" } true;
[L2456]   RET         call freezeTo~address~uint256~uint64_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s938, _amount_s938, _until_s938);
[L2457]               assume !revert && gas >= 0;
[L14251]  RET         call freezeTo~address~uint256~uint64_FreezableToken(this, msgsender_MSG, msgvalue_MSG, _to_s938, _amount_s938, _until_s938);
[L14388]  RET         call CorralChoice_MainToken(this);
[L14388]  CALL        call CorralChoice_MainToken(this);
[L14045]              havoc msgsender_MSG;
[L14046]              havoc msgvalue_MSG;
[L14047]              havoc choice;
[L14048]              havoc __ret_0_totalSupply;
[L14049]              havoc _owner_s729;
[L14050]              havoc balance_s729;
[L14051]              havoc _to_s1572;
[L14052]              havoc _value_s1572;
[L14053]              havoc _success_s1572;
[L14054]              havoc _owner_s395;
[L14055]              havoc _spender_s395;
[L14056]              havoc __ret_0_allowance;
[L14057]              havoc _from_s1551;
[L14058]              havoc _to_s1551;
[L14059]              havoc _value_s1551;
[L14060]              havoc _success_s1551;
[L14061]              havoc _spender_s379;
[L14062]              havoc _value_s379;
[L14063]              havoc __ret_0_approve;
[L14064]              havoc _spender_s437;
[L14065]              havoc _addedValue_s437;
[L14066]              havoc __ret_0_increaseApproval;
[L14067]              havoc _spender_s497;
[L14068]              havoc _subtractedValue_s497;
[L14069]              havoc __ret_0_decreaseApproval;
[L14070]              havoc __ret_0_owner;
[L14071]              havoc _newOwner_s558;
[L14072]              havoc __ret_0_mintingFinished;
[L14073]              havoc _to_s664;
[L14074]              havoc _amount_s664;
[L14075]              havoc __ret_0_mint;
[L14076]              havoc __ret_0_finishMinting;
[L14077]              havoc _owner_s742;
[L14078]              havoc balance_s742;
[L14079]              havoc _owner_s754;
[L14080]              havoc balance_s754;
[L14081]              havoc _addr_s792;
[L14082]              havoc count_s792;
[L14083]              havoc _addr_s849;
[L14084]              havoc _index_s849;
[L14085]              havoc _release_s849;
[L14086]              havoc _balance_s849;
[L14087]              havoc _to_s938;
[L14088]              havoc _amount_s938;
[L14089]              havoc _until_s938;
[L14090]              havoc tokens_s1107;
[L14091]              havoc _value_s1261;
[L14092]              havoc __ret_0_paused;
[L14093]              havoc _to_s1449;
[L14094]              havoc _amount_s1449;
[L14095]              havoc _until_s1449;
[L14096]              havoc __ret_0_mintAndFreeze;
[L14097]              havoc __ret_0_TOKEN_DECIMALS;
[L14098]              havoc __ret_0_TOKEN_DECIMALS_UINT8;
[L14099]              havoc __ret_0_TOKEN_DECIMAL_MULTIPLIER;
[L14100]              havoc __ret_0_TOKEN_NAME;
[L14101]              havoc __ret_0_TOKEN_SYMBOL;
[L14102]              havoc __ret_0_PAUSED;
[L14103]              havoc __ret_0_TARGET_USER;
[L14104]              havoc __ret_0_CONTINUE_MINTING;
[L14105]              havoc __ret_0_initialized;
[L14106]              havoc _name_s1511;
[L14107]              havoc _symbol_s1519;
[L14108]              havoc _decimals_s1527;
[L14109]              havoc tmpNow;
[L14110]              havoc gas;
[L14111]              assume gas > 4000000 && gas <= 8000000;
[L14112]              tmpNow := now;
[L14113]              havoc now;
[L14114]              assume now > tmpNow;
[L14115]              assume msgsender_MSG != null;
[L14116]              assume DType[msgsender_MSG] != ERC20Basic;
[L14117]              assume DType[msgsender_MSG] != SafeMath;
[L14118]              assume DType[msgsender_MSG] != BasicToken;
[L14119]              assume DType[msgsender_MSG] != ERC20;
[L14120]              assume DType[msgsender_MSG] != StandardToken;
[L14121]              assume DType[msgsender_MSG] != Ownable;
[L14122]              assume DType[msgsender_MSG] != MintableToken;
[L14123]              assume DType[msgsender_MSG] != FreezableToken;
[L14124]              assume DType[msgsender_MSG] != BurnableToken;
[L14125]              assume DType[msgsender_MSG] != Pausable;
[L14126]              assume DType[msgsender_MSG] != FreezableMintableToken;
[L14127]              assume DType[msgsender_MSG] != Consts;
[L14128]              assume DType[msgsender_MSG] != MainToken;
[L14129]              Alloc[msgsender_MSG] := true;
[L14130]  COND FALSE  !(choice == 38)
[L14136]  COND TRUE   choice == 37
[L14137]              gas := gas - 21000;
[L14138]  COND TRUE   gas >= 0
[L14139]              assume msgvalue_MSG == 0;
[L14140]  CALL        call balance_s729 := balanceOf~address_FreezableToken(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume balances_BasicToken[this][_owner_s729] >= 0 && balances_BasicToken[this][_owner_s729] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_balanceOf_FreezableToken0 := true;
[L2]                  call_balanceOf_FreezableToken0 := false;
[L2]                  revert := revert_hold;
[L1999]               havoc __exception;
[L2000]               revert := false;
[L2001]   COND FALSE  !(__exception)
[L2038]   CALL        call balance_s729 := balanceOf~address_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L7405]   COND TRUE   DType[this] == MainToken
[L7406]   CALL        call __var_14 := balanceOf~address_BasicToken__success(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L6660]               __ret_0_ := balances_BasicToken[this][_owner_s214];
[L7406]   RET         call __var_14 := balanceOf~address_BasicToken__success(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L7407]   COND FALSE  !(revert)
[L7423]               balance_s729 := (__var_14 + freezingBalance_FreezableToken[this][_owner_s729]) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2038]   RET         call balance_s729 := balanceOf~address_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L2039]               assume !revert && gas >= 0;
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume !((((((((((balance_s729 == balances_BasicToken[this][_owner_s729] && totalSupply__BasicToken[this] == old(totalSupply__BasicToken[this])) && balances_BasicToken[this] == old(balances_BasicToken[this])) && allowed_StandardToken[this] == old(allowed_StandardToken[this])) && initialized_MainToken[this] == old(initialized_MainToken[this])) && paused_Pausable[this] == old(paused_Pausable[this])) && mintingFinished_MintableToken[this] == old(mintingFinished_MintableToken[this])) && owner_Ownable[this] == old(owner_Ownable[this])) && chains_FreezableToken[this] == old(chains_FreezableToken[this])) && freezings_FreezableToken[this] == old(freezings_FreezableToken[this])) && freezingBalance_FreezableToken[this] == old(freezingBalance_FreezableToken[this]));
[L2]                  revert := revert_hold;
[L14140]  RET         call balance_s729 := balanceOf~address_FreezableToken(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L14388]  RET         call CorralChoice_MainToken(this);

Loop:
[L14388]  CALL        call CorralChoice_MainToken(this);
[L14045]              havoc msgsender_MSG;
[L14046]              havoc msgvalue_MSG;
[L14047]              havoc choice;
[L14048]              havoc __ret_0_totalSupply;
[L14049]              havoc _owner_s729;
[L14050]              havoc balance_s729;
[L14051]              havoc _to_s1572;
[L14052]              havoc _value_s1572;
[L14053]              havoc _success_s1572;
[L14054]              havoc _owner_s395;
[L14055]              havoc _spender_s395;
[L14056]              havoc __ret_0_allowance;
[L14057]              havoc _from_s1551;
[L14058]              havoc _to_s1551;
[L14059]              havoc _value_s1551;
[L14060]              havoc _success_s1551;
[L14061]              havoc _spender_s379;
[L14062]              havoc _value_s379;
[L14063]              havoc __ret_0_approve;
[L14064]              havoc _spender_s437;
[L14065]              havoc _addedValue_s437;
[L14066]              havoc __ret_0_increaseApproval;
[L14067]              havoc _spender_s497;
[L14068]              havoc _subtractedValue_s497;
[L14069]              havoc __ret_0_decreaseApproval;
[L14070]              havoc __ret_0_owner;
[L14071]              havoc _newOwner_s558;
[L14072]              havoc __ret_0_mintingFinished;
[L14073]              havoc _to_s664;
[L14074]              havoc _amount_s664;
[L14075]              havoc __ret_0_mint;
[L14076]              havoc __ret_0_finishMinting;
[L14077]              havoc _owner_s742;
[L14078]              havoc balance_s742;
[L14079]              havoc _owner_s754;
[L14080]              havoc balance_s754;
[L14081]              havoc _addr_s792;
[L14082]              havoc count_s792;
[L14083]              havoc _addr_s849;
[L14084]              havoc _index_s849;
[L14085]              havoc _release_s849;
[L14086]              havoc _balance_s849;
[L14087]              havoc _to_s938;
[L14088]              havoc _amount_s938;
[L14089]              havoc _until_s938;
[L14090]              havoc tokens_s1107;
[L14091]              havoc _value_s1261;
[L14092]              havoc __ret_0_paused;
[L14093]              havoc _to_s1449;
[L14094]              havoc _amount_s1449;
[L14095]              havoc _until_s1449;
[L14096]              havoc __ret_0_mintAndFreeze;
[L14097]              havoc __ret_0_TOKEN_DECIMALS;
[L14098]              havoc __ret_0_TOKEN_DECIMALS_UINT8;
[L14099]              havoc __ret_0_TOKEN_DECIMAL_MULTIPLIER;
[L14100]              havoc __ret_0_TOKEN_NAME;
[L14101]              havoc __ret_0_TOKEN_SYMBOL;
[L14102]              havoc __ret_0_PAUSED;
[L14103]              havoc __ret_0_TARGET_USER;
[L14104]              havoc __ret_0_CONTINUE_MINTING;
[L14105]              havoc __ret_0_initialized;
[L14106]              havoc _name_s1511;
[L14107]              havoc _symbol_s1519;
[L14108]              havoc _decimals_s1527;
[L14109]              havoc tmpNow;
[L14110]              havoc gas;
[L14111]              assume gas > 4000000 && gas <= 8000000;
[L14112]              tmpNow := now;
[L14113]              havoc now;
[L14114]              assume now > tmpNow;
[L14115]              assume msgsender_MSG != null;
[L14116]              assume DType[msgsender_MSG] != ERC20Basic;
[L14117]              assume DType[msgsender_MSG] != SafeMath;
[L14118]              assume DType[msgsender_MSG] != BasicToken;
[L14119]              assume DType[msgsender_MSG] != ERC20;
[L14120]              assume DType[msgsender_MSG] != StandardToken;
[L14121]              assume DType[msgsender_MSG] != Ownable;
[L14122]              assume DType[msgsender_MSG] != MintableToken;
[L14123]              assume DType[msgsender_MSG] != FreezableToken;
[L14124]              assume DType[msgsender_MSG] != BurnableToken;
[L14125]              assume DType[msgsender_MSG] != Pausable;
[L14126]              assume DType[msgsender_MSG] != FreezableMintableToken;
[L14127]              assume DType[msgsender_MSG] != Consts;
[L14128]              assume DType[msgsender_MSG] != MainToken;
[L14129]              Alloc[msgsender_MSG] := true;
[L14130]  COND FALSE  !(choice == 38)
[L14136]  COND TRUE   choice == 37
[L14137]              gas := gas - 21000;
[L14138]  COND TRUE   gas >= 0
[L14139]              assume msgvalue_MSG == 0;
[L14140]  CALL        call balance_s729 := balanceOf~address_FreezableToken(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume balances_BasicToken[this][_owner_s729] >= 0 && balances_BasicToken[this][_owner_s729] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_balanceOf_FreezableToken0 := true;
[L2]                  call_balanceOf_FreezableToken0 := false;
[L2]                  revert := revert_hold;
[L1999]               havoc __exception;
[L2000]               revert := false;
[L2001]   COND FALSE  !(__exception)
[L2038]   CALL        call balance_s729 := balanceOf~address_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L7405]   COND TRUE   DType[this] == MainToken
[L7406]   CALL        call __var_14 := balanceOf~address_BasicToken__success(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L6660]               __ret_0_ := balances_BasicToken[this][_owner_s214];
[L7406]   RET         call __var_14 := balanceOf~address_BasicToken__success(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L7407]   COND FALSE  !(revert)
[L7423]               balance_s729 := (__var_14 + freezingBalance_FreezableToken[this][_owner_s729]) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2038]   RET         call balance_s729 := balanceOf~address_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L2039]               assume !revert && gas >= 0;
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume !((((((((((balance_s729 == balances_BasicToken[this][_owner_s729] && totalSupply__BasicToken[this] == old(totalSupply__BasicToken[this])) && balances_BasicToken[this] == old(balances_BasicToken[this])) && allowed_StandardToken[this] == old(allowed_StandardToken[this])) && initialized_MainToken[this] == old(initialized_MainToken[this])) && paused_Pausable[this] == old(paused_Pausable[this])) && mintingFinished_MintableToken[this] == old(mintingFinished_MintableToken[this])) && owner_Ownable[this] == old(owner_Ownable[this])) && chains_FreezableToken[this] == old(chains_FreezableToken[this])) && freezings_FreezableToken[this] == old(freezings_FreezableToken[this])) && freezingBalance_FreezableToken[this] == old(freezingBalance_FreezableToken[this]));
[L2]                  revert := revert_hold;
[L14140]  RET         call balance_s729 := balanceOf~address_FreezableToken(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L14388]  RET         call CorralChoice_MainToken(this);

[2020-11-24 21:26:13,093 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-24 21:26:13,093 INFO  L82        PathProgramCache]: Analyzing trace with hash -294980157, now seen corresponding path program 1 times
[2020-11-24 21:26:13,094 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-24 21:26:13,124 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-24 21:26:13,696 INFO  L134       CoverageAnalysis]: Checked inductivity of 9938 backedges. 1 proven. 0 refuted. 0 times theorem prover too weak. 9937 trivial. 0 not checked.
[2020-11-24 21:26:13,696 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-24 21:26:13,697 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [3] imperfect sequences [] total 3
[2020-11-24 21:26:13,699 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-24 21:26:13,699 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-11-24 21:26:13,699 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-11-24 21:26:13,700 INFO  L87              Difference]: Start difference. First operand 5564 states and 6261 transitions. cyclomatic complexity: 717 Second operand 3 states.
[2020-11-24 21:26:13,781 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-24 21:26:13,781 INFO  L93              Difference]: Finished difference Result 5636 states and 6353 transitions.
[2020-11-24 21:26:13,781 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-11-24 21:26:13,781 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 5636 states and 6353 transitions.
[2020-11-24 21:26:13,795 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-24 21:26:13,809 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 5636 states to 5636 states and 6353 transitions.
[2020-11-24 21:26:13,809 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1117
[2020-11-24 21:26:13,810 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1117
[2020-11-24 21:26:13,810 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 5636 states and 6353 transitions.
[2020-11-24 21:26:13,814 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-24 21:26:13,814 INFO  L728         BuchiCegarLoop]: Abstraction has 5636 states and 6353 transitions.
[2020-11-24 21:26:13,819 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 5636 states and 6353 transitions.
[2020-11-24 21:26:13,851 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 5636 to 5606.
[2020-11-24 21:26:13,852 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 5606 states.
[2020-11-24 21:26:13,860 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 5606 states to 5606 states and 6307 transitions.
[2020-11-24 21:26:13,860 INFO  L751         BuchiCegarLoop]: Abstraction has 5606 states and 6307 transitions.
[2020-11-24 21:26:13,860 INFO  L631         BuchiCegarLoop]: Abstraction has 5606 states and 6307 transitions.
[2020-11-24 21:26:13,860 INFO  L445         BuchiCegarLoop]: ======== Iteration 15============
[2020-11-24 21:26:13,861 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 5606 states and 6307 transitions.
[2020-11-24 21:26:13,869 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-24 21:26:13,869 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-24 21:26:13,869 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-24 21:26:13,872 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [38, 38, 38, 38, 38, 38, 38, 38, 38, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-24 21:26:13,873 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  success_balanceOf_FreezableToken0 := false;
[L2]                  call_balanceOf_FreezableToken0 := false;
[L2]      CALL        call main();
[L14378]              assume null == 0;
[L14379]  CALL        call this := FreshRefGenerator__success();
[L6396]               havoc newRef;
[L6397]               assume Alloc[newRef] == false;
[L6398]               Alloc[newRef] := true;
[L6399]               assume newRef != null;
[L14379]  RET         call this := FreshRefGenerator__success();
[L14380]              assume now >= 0;
[L14381]              assume DType[this] == MainToken;
[L14382]              assume msgvalue_MSG == 0;
[L14383]              gas := gas - 53000;
[L14384]  CALL        call MainToken_MainToken(this, msgsender_MSG, msgvalue_MSG);
[L4183]               havoc __exception;
[L4184]               revert := false;
[L4185]   COND FALSE  !(__exception)
[L4222]   CALL        call MainToken_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9205]   CALL        call Consts_Consts__success(this, msgsender_MSG, msgvalue_MSG);
[L9007]   CALL        call Consts_Consts_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8983]               assume msgsender_MSG != null;
[L8984]               Balance[this] := 0;
[L8985]               TOKEN_DECIMALS_Consts[this] := 18;
[L8986]               TOKEN_DECIMALS_UINT8_Consts[this] := 18;
[L8987]               TOKEN_DECIMAL_MULTIPLIER_Consts[this] := nonlinearPow(10, TOKEN_DECIMALS_Consts[this]) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8988]               TOKEN_NAME_Consts[this] := -1051245219;
[L8989]               TOKEN_SYMBOL_Consts[this] := -1804535220;
[L8990]               PAUSED_Consts[this] := false;
[L8991]               __var_52 := ConstantToRef(-210822415442009814958929812751043848690848471787);
[L8992]               TARGET_USER_Consts[this] := ConstantToRef(-210822415442009814958929812751043848690848471787);
[L8993]               CONTINUE_MINTING_Consts[this] := true;
[L9007]   RET         call Consts_Consts_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9008]   COND FALSE  !(revert)
[L9205]   RET         call Consts_Consts__success(this, msgsender_MSG, msgvalue_MSG);
[L9206]   COND FALSE  !(revert)
[L9209]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L9209]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L9210]   COND FALSE  !(revert)
[L9213]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6694]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6694]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6695]   COND FALSE  !(revert)
[L6698]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6675]               assume msgsender_MSG != null;
[L6676]               Balance[this] := 0;
[L6698]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6699]   COND FALSE  !(revert)
[L9213]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L9214]   COND FALSE  !(revert)
[L9217]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6565]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   COND FALSE  !(revert)
[L6569]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]               assume msgsender_MSG != null;
[L6544]               Balance[this] := 0;
[L6545]               balances_BasicToken[this] := zeroRefintArr();
[L6546]               sum_balances0[this] := 0;
[L6547]               totalSupply__BasicToken[this] := 0;
[L6569]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6570]   COND FALSE  !(revert)
[L9217]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9218]   COND FALSE  !(revert)
[L9221]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6746]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6746]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6747]   COND FALSE  !(revert)
[L6750]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6694]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6694]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6695]   COND FALSE  !(revert)
[L6698]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6675]               assume msgsender_MSG != null;
[L6676]               Balance[this] := 0;
[L6698]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6699]   COND FALSE  !(revert)
[L6750]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6751]   COND FALSE  !(revert)
[L6754]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6565]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   COND FALSE  !(revert)
[L6569]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]               assume msgsender_MSG != null;
[L6544]               Balance[this] := 0;
[L6545]               balances_BasicToken[this] := zeroRefintArr();
[L6546]               sum_balances0[this] := 0;
[L6547]               totalSupply__BasicToken[this] := 0;
[L6569]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6570]   COND FALSE  !(revert)
[L6754]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6755]   COND FALSE  !(revert)
[L6758]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6717]               assume msgsender_MSG != null;
[L6718]               Balance[this] := 0;
[L6719]               allowed_StandardToken[this] := zeroRefRefintArr();
[L6720]               sum_allowed1[this] := 0;
[L6758]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6759]   COND FALSE  !(revert)
[L9221]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9222]   COND FALSE  !(revert)
[L9225]   CALL        call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7353]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L7353]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7354]   COND FALSE  !(revert)
[L7357]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6694]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6694]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6695]   COND FALSE  !(revert)
[L6698]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6675]               assume msgsender_MSG != null;
[L6676]               Balance[this] := 0;
[L6698]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6699]   COND FALSE  !(revert)
[L7357]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7358]   COND FALSE  !(revert)
[L7361]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6565]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   COND FALSE  !(revert)
[L6569]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]               assume msgsender_MSG != null;
[L6544]               Balance[this] := 0;
[L6545]               balances_BasicToken[this] := zeroRefintArr();
[L6546]               sum_balances0[this] := 0;
[L6547]               totalSupply__BasicToken[this] := 0;
[L6569]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6570]   COND FALSE  !(revert)
[L7361]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7362]   COND FALSE  !(revert)
[L7365]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6746]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6746]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6747]   COND FALSE  !(revert)
[L6750]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6694]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6694]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6695]   COND FALSE  !(revert)
[L6698]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6675]               assume msgsender_MSG != null;
[L6676]               Balance[this] := 0;
[L6698]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6699]   COND FALSE  !(revert)
[L6750]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6751]   COND FALSE  !(revert)
[L6754]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6565]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   COND FALSE  !(revert)
[L6569]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]               assume msgsender_MSG != null;
[L6544]               Balance[this] := 0;
[L6545]               balances_BasicToken[this] := zeroRefintArr();
[L6546]               sum_balances0[this] := 0;
[L6547]               totalSupply__BasicToken[this] := 0;
[L6569]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6570]   COND FALSE  !(revert)
[L6754]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6755]   COND FALSE  !(revert)
[L6758]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6717]               assume msgsender_MSG != null;
[L6718]               Balance[this] := 0;
[L6719]               allowed_StandardToken[this] := zeroRefRefintArr();
[L6720]               sum_allowed1[this] := 0;
[L6758]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6759]   COND FALSE  !(revert)
[L7365]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7366]   COND FALSE  !(revert)
[L7369]   CALL        call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7316]               assume msgsender_MSG != null;
[L7317]               Balance[this] := 0;
[L7318]               chains_FreezableToken[this] := zerointintArr();
[L7319]               sum_chains2[this] := 0;
[L7320]               freezings_FreezableToken[this] := zerointintArr();
[L7321]               sum_freezings3[this] := 0;
[L7322]               freezingBalance_FreezableToken[this] := zeroRefintArr();
[L7323]               sum_freezingBalance4[this] := 0;
[L7369]   RET         call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7370]   COND FALSE  !(revert)
[L9225]   RET         call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9226]   COND FALSE  !(revert)
[L9229]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6988]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6971]               assume msgsender_MSG != null;
[L6972]               Balance[this] := 0;
[L6973]               owner_Ownable[this] := null;
[L6975]               owner_Ownable[this] := msgsender_MSG;
[L6988]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6989]   COND FALSE  !(revert)
[L9229]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L9230]   COND FALSE  !(revert)
[L9233]   CALL        call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7172]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L7172]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7173]   COND FALSE  !(revert)
[L7176]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6694]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6694]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6695]   COND FALSE  !(revert)
[L6698]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6675]               assume msgsender_MSG != null;
[L6676]               Balance[this] := 0;
[L6698]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6699]   COND FALSE  !(revert)
[L7176]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7177]   COND FALSE  !(revert)
[L7180]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6565]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   COND FALSE  !(revert)
[L6569]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]               assume msgsender_MSG != null;
[L6544]               Balance[this] := 0;
[L6545]               balances_BasicToken[this] := zeroRefintArr();
[L6546]               sum_balances0[this] := 0;
[L6547]               totalSupply__BasicToken[this] := 0;
[L6569]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6570]   COND FALSE  !(revert)
[L7180]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7181]   COND FALSE  !(revert)
[L7184]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6746]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6746]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6747]   COND FALSE  !(revert)
[L6750]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6694]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6694]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6695]   COND FALSE  !(revert)
[L6698]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6675]               assume msgsender_MSG != null;
[L6676]               Balance[this] := 0;
[L6698]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6699]   COND FALSE  !(revert)
[L6750]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6751]   COND FALSE  !(revert)
[L6754]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6565]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   COND FALSE  !(revert)
[L6569]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]               assume msgsender_MSG != null;
[L6544]               Balance[this] := 0;
[L6545]               balances_BasicToken[this] := zeroRefintArr();
[L6546]               sum_balances0[this] := 0;
[L6547]               totalSupply__BasicToken[this] := 0;
[L6569]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6570]   COND FALSE  !(revert)
[L6754]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6755]   COND FALSE  !(revert)
[L6758]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6717]               assume msgsender_MSG != null;
[L6718]               Balance[this] := 0;
[L6719]               allowed_StandardToken[this] := zeroRefRefintArr();
[L6720]               sum_allowed1[this] := 0;
[L6758]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6759]   COND FALSE  !(revert)
[L7184]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7185]   COND FALSE  !(revert)
[L7188]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6988]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6971]               assume msgsender_MSG != null;
[L6972]               Balance[this] := 0;
[L6973]               owner_Ownable[this] := null;
[L6975]               owner_Ownable[this] := msgsender_MSG;
[L6988]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6989]   COND FALSE  !(revert)
[L7188]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7189]   COND FALSE  !(revert)
[L7192]   CALL        call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7136]               assume msgsender_MSG != null;
[L7137]               Balance[this] := 0;
[L7138]               mintingFinished_MintableToken[this] := false;
[L7192]   RET         call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7193]   COND FALSE  !(revert)
[L9233]   RET         call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9234]   COND FALSE  !(revert)
[L9237]   CALL        call FreezableMintableToken_FreezableMintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L8792]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L8792]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L8793]   COND FALSE  !(revert)
[L8796]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6694]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6694]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6695]   COND FALSE  !(revert)
[L6698]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6675]               assume msgsender_MSG != null;
[L6676]               Balance[this] := 0;
[L6698]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6699]   COND FALSE  !(revert)
[L8796]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L8797]   COND FALSE  !(revert)
[L8800]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6565]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   COND FALSE  !(revert)
[L6569]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]               assume msgsender_MSG != null;
[L6544]               Balance[this] := 0;
[L6545]               balances_BasicToken[this] := zeroRefintArr();
[L6546]               sum_balances0[this] := 0;
[L6547]               totalSupply__BasicToken[this] := 0;
[L6569]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6570]   COND FALSE  !(revert)
[L8800]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L8801]   COND FALSE  !(revert)
[L8804]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6746]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6746]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6747]   COND FALSE  !(revert)
[L6750]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6694]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6694]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6695]   COND FALSE  !(revert)
[L6698]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6675]               assume msgsender_MSG != null;
[L6676]               Balance[this] := 0;
[L6698]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6699]   COND FALSE  !(revert)
[L6750]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6751]   COND FALSE  !(revert)
[L6754]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6565]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   COND FALSE  !(revert)
[L6569]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]               assume msgsender_MSG != null;
[L6544]               Balance[this] := 0;
[L6545]               balances_BasicToken[this] := zeroRefintArr();
[L6546]               sum_balances0[this] := 0;
[L6547]               totalSupply__BasicToken[this] := 0;
[L6569]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6570]   COND FALSE  !(revert)
[L6754]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6755]   COND FALSE  !(revert)
[L6758]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6717]               assume msgsender_MSG != null;
[L6718]               Balance[this] := 0;
[L6719]               allowed_StandardToken[this] := zeroRefRefintArr();
[L6720]               sum_allowed1[this] := 0;
[L6758]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6759]   COND FALSE  !(revert)
[L8804]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L8805]   COND FALSE  !(revert)
[L8808]   CALL        call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7353]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L7353]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7354]   COND FALSE  !(revert)
[L7357]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6694]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6694]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6695]   COND FALSE  !(revert)
[L6698]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6675]               assume msgsender_MSG != null;
[L6676]               Balance[this] := 0;
[L6698]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6699]   COND FALSE  !(revert)
[L7357]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7358]   COND FALSE  !(revert)
[L7361]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6565]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   COND FALSE  !(revert)
[L6569]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]               assume msgsender_MSG != null;
[L6544]               Balance[this] := 0;
[L6545]               balances_BasicToken[this] := zeroRefintArr();
[L6546]               sum_balances0[this] := 0;
[L6547]               totalSupply__BasicToken[this] := 0;
[L6569]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6570]   COND FALSE  !(revert)
[L7361]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7362]   COND FALSE  !(revert)
[L7365]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6746]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6746]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6747]   COND FALSE  !(revert)
[L6750]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6694]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6694]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6695]   COND FALSE  !(revert)
[L6698]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6675]               assume msgsender_MSG != null;
[L6676]               Balance[this] := 0;
[L6698]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6699]   COND FALSE  !(revert)
[L6750]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6751]   COND FALSE  !(revert)
[L6754]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6565]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   COND FALSE  !(revert)
[L6569]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]               assume msgsender_MSG != null;
[L6544]               Balance[this] := 0;
[L6545]               balances_BasicToken[this] := zeroRefintArr();
[L6546]               sum_balances0[this] := 0;
[L6547]               totalSupply__BasicToken[this] := 0;
[L6569]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6570]   COND FALSE  !(revert)
[L6754]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6755]   COND FALSE  !(revert)
[L6758]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6717]               assume msgsender_MSG != null;
[L6718]               Balance[this] := 0;
[L6719]               allowed_StandardToken[this] := zeroRefRefintArr();
[L6720]               sum_allowed1[this] := 0;
[L6758]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6759]   COND FALSE  !(revert)
[L7365]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7366]   COND FALSE  !(revert)
[L7369]   CALL        call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7316]               assume msgsender_MSG != null;
[L7317]               Balance[this] := 0;
[L7318]               chains_FreezableToken[this] := zerointintArr();
[L7319]               sum_chains2[this] := 0;
[L7320]               freezings_FreezableToken[this] := zerointintArr();
[L7321]               sum_freezings3[this] := 0;
[L7322]               freezingBalance_FreezableToken[this] := zeroRefintArr();
[L7323]               sum_freezingBalance4[this] := 0;
[L7369]   RET         call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7370]   COND FALSE  !(revert)
[L8808]   RET         call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L8809]   COND FALSE  !(revert)
[L8812]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6988]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6971]               assume msgsender_MSG != null;
[L6972]               Balance[this] := 0;
[L6973]               owner_Ownable[this] := null;
[L6975]               owner_Ownable[this] := msgsender_MSG;
[L6988]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6989]   COND FALSE  !(revert)
[L8812]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L8813]   COND FALSE  !(revert)
[L8816]   CALL        call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7172]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L7172]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7173]   COND FALSE  !(revert)
[L7176]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6694]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6694]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6695]   COND FALSE  !(revert)
[L6698]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6675]               assume msgsender_MSG != null;
[L6676]               Balance[this] := 0;
[L6698]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6699]   COND FALSE  !(revert)
[L7176]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7177]   COND FALSE  !(revert)
[L7180]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6565]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   COND FALSE  !(revert)
[L6569]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]               assume msgsender_MSG != null;
[L6544]               Balance[this] := 0;
[L6545]               balances_BasicToken[this] := zeroRefintArr();
[L6546]               sum_balances0[this] := 0;
[L6547]               totalSupply__BasicToken[this] := 0;
[L6569]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6570]   COND FALSE  !(revert)
[L7180]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7181]   COND FALSE  !(revert)
[L7184]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6746]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6746]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6747]   COND FALSE  !(revert)
[L6750]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6694]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6694]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6695]   COND FALSE  !(revert)
[L6698]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6675]               assume msgsender_MSG != null;
[L6676]               Balance[this] := 0;
[L6698]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6699]   COND FALSE  !(revert)
[L6750]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6751]   COND FALSE  !(revert)
[L6754]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6565]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   COND FALSE  !(revert)
[L6569]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]               assume msgsender_MSG != null;
[L6544]               Balance[this] := 0;
[L6545]               balances_BasicToken[this] := zeroRefintArr();
[L6546]               sum_balances0[this] := 0;
[L6547]               totalSupply__BasicToken[this] := 0;
[L6569]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6570]   COND FALSE  !(revert)
[L6754]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6755]   COND FALSE  !(revert)
[L6758]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6717]               assume msgsender_MSG != null;
[L6718]               Balance[this] := 0;
[L6719]               allowed_StandardToken[this] := zeroRefRefintArr();
[L6720]               sum_allowed1[this] := 0;
[L6758]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6759]   COND FALSE  !(revert)
[L7184]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7185]   COND FALSE  !(revert)
[L7188]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6988]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6971]               assume msgsender_MSG != null;
[L6972]               Balance[this] := 0;
[L6973]               owner_Ownable[this] := null;
[L6975]               owner_Ownable[this] := msgsender_MSG;
[L6988]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6989]   COND FALSE  !(revert)
[L7188]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7189]   COND FALSE  !(revert)
[L7192]   CALL        call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7136]               assume msgsender_MSG != null;
[L7137]               Balance[this] := 0;
[L7138]               mintingFinished_MintableToken[this] := false;
[L7192]   RET         call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7193]   COND FALSE  !(revert)
[L8816]   RET         call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L8817]   COND FALSE  !(revert)
[L8820]   CALL        call FreezableMintableToken_FreezableMintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8749]               assume msgsender_MSG != null;
[L8750]               Balance[this] := 0;
[L8820]   RET         call FreezableMintableToken_FreezableMintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8821]   COND FALSE  !(revert)
[L9237]   RET         call FreezableMintableToken_FreezableMintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9238]   COND FALSE  !(revert)
[L9241]   CALL        call BurnableToken_BurnableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L8536]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L8536]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L8537]   COND FALSE  !(revert)
[L8540]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6565]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   COND FALSE  !(revert)
[L6569]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]               assume msgsender_MSG != null;
[L6544]               Balance[this] := 0;
[L6545]               balances_BasicToken[this] := zeroRefintArr();
[L6546]               sum_balances0[this] := 0;
[L6547]               totalSupply__BasicToken[this] := 0;
[L6569]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6570]   COND FALSE  !(revert)
[L8540]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L8541]   COND FALSE  !(revert)
[L8544]   CALL        call BurnableToken_BurnableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8513]               assume msgsender_MSG != null;
[L8514]               Balance[this] := 0;
[L8544]   RET         call BurnableToken_BurnableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8545]   COND FALSE  !(revert)
[L9241]   RET         call BurnableToken_BurnableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9242]   COND FALSE  !(revert)
[L9245]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L8662]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6988]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6971]               assume msgsender_MSG != null;
[L6972]               Balance[this] := 0;
[L6973]               owner_Ownable[this] := null;
[L6975]               owner_Ownable[this] := msgsender_MSG;
[L6988]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6989]   COND FALSE  !(revert)
[L8662]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L8663]   COND FALSE  !(revert)
[L8666]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8642]               assume msgsender_MSG != null;
[L8643]               Balance[this] := 0;
[L8644]               paused_Pausable[this] := false;
[L8666]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8667]   COND FALSE  !(revert)
[L9245]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L9246]   COND FALSE  !(revert)
[L9249]   CALL        call MainToken_MainToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9133]               assume msgsender_MSG != null;
[L9134]               Balance[this] := 0;
[L9135]               initialized_MainToken[this] := false;
[L9137]   CALL        call init_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9404]   COND FALSE  !(!!initialized_MainToken[this])
[L9408]               initialized_MainToken[this] := true;
[L9409]   COND FALSE  !(PAUSED_Consts[this])
[L9419]   COND FALSE  !(!CONTINUE_MINTING_Consts[this])
[L9429]               assert { :EventEmitted "Initialized_MainToken" } true;
[L9137]   RET         call init_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9138]   COND FALSE  !(revert)
[L9141]   COND TRUE   DType[this] == MainToken
[L9142]   CALL        call transferOwnership~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, TARGET_USER_Consts[this]);
[L7055]   CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L12332]  COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L7055]   RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7056]   COND FALSE  !(revert)
[L7059]   COND TRUE   DType[this] == MainToken
[L7060]   CALL        call _transferOwnership~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, _newOwner_s558);
[L7103]               __var_11 := null;
[L7104]   COND FALSE  !(!(_newOwner_s581 != null))
[L7108]               assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L7109]               owner_Ownable[this] := _newOwner_s581;
[L7060]   RET         call _transferOwnership~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, _newOwner_s558);
[L7061]   COND FALSE  !(revert)
[L9142]   RET         call transferOwnership~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, TARGET_USER_Consts[this]);
[L9143]   COND FALSE  !(revert)
[L9249]   RET         call MainToken_MainToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9250]   COND FALSE  !(revert)
[L4222]   RET         call MainToken_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4223]               assume !revert && gas >= 0;
[L14384]  RET         call MainToken_MainToken(this, msgsender_MSG, msgvalue_MSG);
[L14385]              assume !revert && gas >= 0;
[L14388]  CALL        call CorralChoice_MainToken(this);
[L14045]              havoc msgsender_MSG;
[L14046]              havoc msgvalue_MSG;
[L14047]              havoc choice;
[L14048]              havoc __ret_0_totalSupply;
[L14049]              havoc _owner_s729;
[L14050]              havoc balance_s729;
[L14051]              havoc _to_s1572;
[L14052]              havoc _value_s1572;
[L14053]              havoc _success_s1572;
[L14054]              havoc _owner_s395;
[L14055]              havoc _spender_s395;
[L14056]              havoc __ret_0_allowance;
[L14057]              havoc _from_s1551;
[L14058]              havoc _to_s1551;
[L14059]              havoc _value_s1551;
[L14060]              havoc _success_s1551;
[L14061]              havoc _spender_s379;
[L14062]              havoc _value_s379;
[L14063]              havoc __ret_0_approve;
[L14064]              havoc _spender_s437;
[L14065]              havoc _addedValue_s437;
[L14066]              havoc __ret_0_increaseApproval;
[L14067]              havoc _spender_s497;
[L14068]              havoc _subtractedValue_s497;
[L14069]              havoc __ret_0_decreaseApproval;
[L14070]              havoc __ret_0_owner;
[L14071]              havoc _newOwner_s558;
[L14072]              havoc __ret_0_mintingFinished;
[L14073]              havoc _to_s664;
[L14074]              havoc _amount_s664;
[L14075]              havoc __ret_0_mint;
[L14076]              havoc __ret_0_finishMinting;
[L14077]              havoc _owner_s742;
[L14078]              havoc balance_s742;
[L14079]              havoc _owner_s754;
[L14080]              havoc balance_s754;
[L14081]              havoc _addr_s792;
[L14082]              havoc count_s792;
[L14083]              havoc _addr_s849;
[L14084]              havoc _index_s849;
[L14085]              havoc _release_s849;
[L14086]              havoc _balance_s849;
[L14087]              havoc _to_s938;
[L14088]              havoc _amount_s938;
[L14089]              havoc _until_s938;
[L14090]              havoc tokens_s1107;
[L14091]              havoc _value_s1261;
[L14092]              havoc __ret_0_paused;
[L14093]              havoc _to_s1449;
[L14094]              havoc _amount_s1449;
[L14095]              havoc _until_s1449;
[L14096]              havoc __ret_0_mintAndFreeze;
[L14097]              havoc __ret_0_TOKEN_DECIMALS;
[L14098]              havoc __ret_0_TOKEN_DECIMALS_UINT8;
[L14099]              havoc __ret_0_TOKEN_DECIMAL_MULTIPLIER;
[L14100]              havoc __ret_0_TOKEN_NAME;
[L14101]              havoc __ret_0_TOKEN_SYMBOL;
[L14102]              havoc __ret_0_PAUSED;
[L14103]              havoc __ret_0_TARGET_USER;
[L14104]              havoc __ret_0_CONTINUE_MINTING;
[L14105]              havoc __ret_0_initialized;
[L14106]              havoc _name_s1511;
[L14107]              havoc _symbol_s1519;
[L14108]              havoc _decimals_s1527;
[L14109]              havoc tmpNow;
[L14110]              havoc gas;
[L14111]              assume gas > 4000000 && gas <= 8000000;
[L14112]              tmpNow := now;
[L14113]              havoc now;
[L14114]              assume now > tmpNow;
[L14115]              assume msgsender_MSG != null;
[L14116]              assume DType[msgsender_MSG] != ERC20Basic;
[L14117]              assume DType[msgsender_MSG] != SafeMath;
[L14118]              assume DType[msgsender_MSG] != BasicToken;
[L14119]              assume DType[msgsender_MSG] != ERC20;
[L14120]              assume DType[msgsender_MSG] != StandardToken;
[L14121]              assume DType[msgsender_MSG] != Ownable;
[L14122]              assume DType[msgsender_MSG] != MintableToken;
[L14123]              assume DType[msgsender_MSG] != FreezableToken;
[L14124]              assume DType[msgsender_MSG] != BurnableToken;
[L14125]              assume DType[msgsender_MSG] != Pausable;
[L14126]              assume DType[msgsender_MSG] != FreezableMintableToken;
[L14127]              assume DType[msgsender_MSG] != Consts;
[L14128]              assume DType[msgsender_MSG] != MainToken;
[L14129]              Alloc[msgsender_MSG] := true;
[L14130]  COND FALSE  !(choice == 38)
[L14136]  COND FALSE  !(choice == 37)
[L14142]  COND FALSE  !(choice == 36)
[L14149]  COND FALSE  !(choice == 35)
[L14155]  COND FALSE  !(choice == 34)
[L14162]  COND FALSE  !(choice == 33)
[L14169]  COND FALSE  !(choice == 32)
[L14176]  COND FALSE  !(choice == 31)
[L14183]  COND FALSE  !(choice == 30)
[L14189]  COND FALSE  !(choice == 29)
[L14195]  COND FALSE  !(choice == 28)
[L14201]  COND FALSE  !(choice == 27)
[L14207]  COND FALSE  !(choice == 26)
[L14214]  COND FALSE  !(choice == 25)
[L14220]  COND FALSE  !(choice == 24)
[L14226]  COND FALSE  !(choice == 23)
[L14232]  COND FALSE  !(choice == 22)
[L14238]  COND FALSE  !(choice == 21)
[L14245]  COND TRUE   choice == 20
[L14246]              gas := gas - 21000;
[L14247]  COND TRUE   gas >= 0
[L14248]              assume _amount_s938 >= 0 && _amount_s938 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L14249]              assume _until_s938 >= 0 && _until_s938 < 18446744073709551616;
[L14250]              assume msgvalue_MSG == 0;
[L14251]  CALL        call freezeTo~address~uint256~uint64_FreezableToken(this, msgsender_MSG, msgvalue_MSG, _to_s938, _amount_s938, _until_s938);
[L2417]               havoc __exception;
[L2418]               revert := false;
[L2419]   COND FALSE  !(__exception)
[L2456]   CALL        call freezeTo~address~uint256~uint64_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s938, _amount_s938, _until_s938);
[L7813]               __var_26 := null;
[L7814]   COND FALSE  !(!(_to_s938 != null))
[L7818]   COND FALSE  !(!(_amount_s938 <= balances_BasicToken[this][msgsender_MSG]))
[L7822]   CALL        call __var_27 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][msgsender_MSG], _amount_s938);
[L6509]               assert b_s98 <= a_s98;
[L6510]               __ret_0_ := (a_s98 - b_s98) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7822]   RET         call __var_27 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][msgsender_MSG], _amount_s938);
[L7823]   COND FALSE  !(revert)
[L7826]               sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][msgsender_MSG];
[L7827]               balances_BasicToken[this][msgsender_MSG] := __var_27;
[L7828]               sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][msgsender_MSG];
[L7829]               __var_28 := _until_s938 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7830]   COND TRUE   DType[this] == MainToken
[L7831]   CALL        call currentKey_s938 := toKey~address~uint256_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s938, _until_s938 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L8244]               result_s1122 := 39480772448535941496179204954862169494691089619604794184232587696854102179840;
[L8246]               havoc result_s1122;
[L8247]               havoc result_s1122;
[L8248]               havoc result_s1122;
[L8249]               havoc result_s1122;
[L7831]   RET         call currentKey_s938 := toKey~address~uint256_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s938, _until_s938 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L7832]   COND FALSE  !(revert)
[L7848]               currentKey_s938 := currentKey_s938;
[L7849]   CALL        call __var_29 := add~uint256~uint256_SafeMath__success(this, this, 0, freezings_FreezableToken[this][currentKey_s938], _amount_s938);
[L6523]               c_s122 := (a_s122 + b_s122) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6524]               assert c_s122 >= a_s122;
[L6525]               c_s122 := c_s122;
[L7849]   RET         call __var_29 := add~uint256~uint256_SafeMath__success(this, this, 0, freezings_FreezableToken[this][currentKey_s938], _amount_s938);
[L7850]   COND FALSE  !(revert)
[L7853]               sum_freezings3[this] := sum_freezings3[this] - freezings_FreezableToken[this][currentKey_s938];
[L7854]               freezings_FreezableToken[this][currentKey_s938] := __var_29;
[L7855]               sum_freezings3[this] := sum_freezings3[this] + freezings_FreezableToken[this][currentKey_s938];
[L7856]   CALL        call __var_30 := add~uint256~uint256_SafeMath__success(this, this, 0, freezingBalance_FreezableToken[this][_to_s938], _amount_s938);
[L6523]               c_s122 := (a_s122 + b_s122) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6524]               assert c_s122 >= a_s122;
[L6525]               c_s122 := c_s122;
[L7856]   RET         call __var_30 := add~uint256~uint256_SafeMath__success(this, this, 0, freezingBalance_FreezableToken[this][_to_s938], _amount_s938);
[L7857]   COND FALSE  !(revert)
[L7860]               sum_freezingBalance4[this] := sum_freezingBalance4[this] - freezingBalance_FreezableToken[this][_to_s938];
[L7861]               freezingBalance_FreezableToken[this][_to_s938] := __var_30;
[L7862]               sum_freezingBalance4[this] := sum_freezingBalance4[this] + freezingBalance_FreezableToken[this][_to_s938];
[L7863]   COND TRUE   DType[this] == MainToken
[L7864]   CALL        call freeze~address~uint64_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s938, _until_s938);
[L8388]   COND FALSE  !(!(_until_s1240 > now))
[L8392]               __var_42 := _until_s1240 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8393]   COND FALSE  !(DType[this] == MainToken)
[L8398]   COND FALSE  !(DType[this] == FreezableMintableToken)
[L8403]   COND TRUE   DType[this] == FreezableToken
[L8404]   CALL        call key_s1240 := toKey~address~uint256_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s1240, _until_s1240 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L8244]               result_s1122 := 39480772448535941496179204954862169494691089619604794184232587696854102179840;
[L8246]               havoc result_s1122;
[L8247]               havoc result_s1122;
[L8248]               havoc result_s1122;
[L8249]               havoc result_s1122;
[L8404]   RET         call key_s1240 := toKey~address~uint256_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s1240, _until_s1240 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L8405]   COND FALSE  !(revert)
[L8411]               key_s1240 := key_s1240;
[L8412]               __var_43 := 0 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8413]   COND FALSE  !(DType[this] == MainToken)
[L8418]   COND FALSE  !(DType[this] == FreezableMintableToken)
[L8423]   COND TRUE   DType[this] == FreezableToken
[L8424]   CALL        call parentKey_s1240 := toKey~address~uint256_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s1240, 0 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L8244]               result_s1122 := 39480772448535941496179204954862169494691089619604794184232587696854102179840;
[L8246]               havoc result_s1122;
[L8247]               havoc result_s1122;
[L8248]               havoc result_s1122;
[L8249]               havoc result_s1122;
[L8424]   RET         call parentKey_s1240 := toKey~address~uint256_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s1240, 0 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L8425]   COND FALSE  !(revert)
[L8431]               parentKey_s1240 := parentKey_s1240;
[L8432]               next_s1240 := chains_FreezableToken[this][parentKey_s1240];
[L8433]   COND TRUE   next_s1240 == 0
[L8434]               sum_chains2[this] := sum_chains2[this] - chains_FreezableToken[this][parentKey_s1240];
[L8435]               chains_FreezableToken[this][parentKey_s1240] := _until_s1240;
[L8436]               sum_chains2[this] := sum_chains2[this] + chains_FreezableToken[this][parentKey_s1240];
[L7864]   RET         call freeze~address~uint64_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s938, _until_s938);
[L7865]   COND FALSE  !(revert)
[L7881]               assert { :EventEmitted "Transfer_FreezableToken" } true;
[L7882]               assert { :EventEmitted "Freezed_FreezableToken" } true;
[L2456]   RET         call freezeTo~address~uint256~uint64_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s938, _amount_s938, _until_s938);
[L2457]               assume !revert && gas >= 0;
[L14251]  RET         call freezeTo~address~uint256~uint64_FreezableToken(this, msgsender_MSG, msgvalue_MSG, _to_s938, _amount_s938, _until_s938);
[L14388]  RET         call CorralChoice_MainToken(this);
[L14388]  CALL        call CorralChoice_MainToken(this);
[L14045]              havoc msgsender_MSG;
[L14046]              havoc msgvalue_MSG;
[L14047]              havoc choice;
[L14048]              havoc __ret_0_totalSupply;
[L14049]              havoc _owner_s729;
[L14050]              havoc balance_s729;
[L14051]              havoc _to_s1572;
[L14052]              havoc _value_s1572;
[L14053]              havoc _success_s1572;
[L14054]              havoc _owner_s395;
[L14055]              havoc _spender_s395;
[L14056]              havoc __ret_0_allowance;
[L14057]              havoc _from_s1551;
[L14058]              havoc _to_s1551;
[L14059]              havoc _value_s1551;
[L14060]              havoc _success_s1551;
[L14061]              havoc _spender_s379;
[L14062]              havoc _value_s379;
[L14063]              havoc __ret_0_approve;
[L14064]              havoc _spender_s437;
[L14065]              havoc _addedValue_s437;
[L14066]              havoc __ret_0_increaseApproval;
[L14067]              havoc _spender_s497;
[L14068]              havoc _subtractedValue_s497;
[L14069]              havoc __ret_0_decreaseApproval;
[L14070]              havoc __ret_0_owner;
[L14071]              havoc _newOwner_s558;
[L14072]              havoc __ret_0_mintingFinished;
[L14073]              havoc _to_s664;
[L14074]              havoc _amount_s664;
[L14075]              havoc __ret_0_mint;
[L14076]              havoc __ret_0_finishMinting;
[L14077]              havoc _owner_s742;
[L14078]              havoc balance_s742;
[L14079]              havoc _owner_s754;
[L14080]              havoc balance_s754;
[L14081]              havoc _addr_s792;
[L14082]              havoc count_s792;
[L14083]              havoc _addr_s849;
[L14084]              havoc _index_s849;
[L14085]              havoc _release_s849;
[L14086]              havoc _balance_s849;
[L14087]              havoc _to_s938;
[L14088]              havoc _amount_s938;
[L14089]              havoc _until_s938;
[L14090]              havoc tokens_s1107;
[L14091]              havoc _value_s1261;
[L14092]              havoc __ret_0_paused;
[L14093]              havoc _to_s1449;
[L14094]              havoc _amount_s1449;
[L14095]              havoc _until_s1449;
[L14096]              havoc __ret_0_mintAndFreeze;
[L14097]              havoc __ret_0_TOKEN_DECIMALS;
[L14098]              havoc __ret_0_TOKEN_DECIMALS_UINT8;
[L14099]              havoc __ret_0_TOKEN_DECIMAL_MULTIPLIER;
[L14100]              havoc __ret_0_TOKEN_NAME;
[L14101]              havoc __ret_0_TOKEN_SYMBOL;
[L14102]              havoc __ret_0_PAUSED;
[L14103]              havoc __ret_0_TARGET_USER;
[L14104]              havoc __ret_0_CONTINUE_MINTING;
[L14105]              havoc __ret_0_initialized;
[L14106]              havoc _name_s1511;
[L14107]              havoc _symbol_s1519;
[L14108]              havoc _decimals_s1527;
[L14109]              havoc tmpNow;
[L14110]              havoc gas;
[L14111]              assume gas > 4000000 && gas <= 8000000;
[L14112]              tmpNow := now;
[L14113]              havoc now;
[L14114]              assume now > tmpNow;
[L14115]              assume msgsender_MSG != null;
[L14116]              assume DType[msgsender_MSG] != ERC20Basic;
[L14117]              assume DType[msgsender_MSG] != SafeMath;
[L14118]              assume DType[msgsender_MSG] != BasicToken;
[L14119]              assume DType[msgsender_MSG] != ERC20;
[L14120]              assume DType[msgsender_MSG] != StandardToken;
[L14121]              assume DType[msgsender_MSG] != Ownable;
[L14122]              assume DType[msgsender_MSG] != MintableToken;
[L14123]              assume DType[msgsender_MSG] != FreezableToken;
[L14124]              assume DType[msgsender_MSG] != BurnableToken;
[L14125]              assume DType[msgsender_MSG] != Pausable;
[L14126]              assume DType[msgsender_MSG] != FreezableMintableToken;
[L14127]              assume DType[msgsender_MSG] != Consts;
[L14128]              assume DType[msgsender_MSG] != MainToken;
[L14129]              Alloc[msgsender_MSG] := true;
[L14130]  COND FALSE  !(choice == 38)
[L14136]  COND TRUE   choice == 37
[L14137]              gas := gas - 21000;
[L14138]  COND TRUE   gas >= 0
[L14139]              assume msgvalue_MSG == 0;
[L14140]  CALL        call balance_s729 := balanceOf~address_FreezableToken(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume balances_BasicToken[this][_owner_s729] >= 0 && balances_BasicToken[this][_owner_s729] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_balanceOf_FreezableToken0 := true;
[L2]                  call_balanceOf_FreezableToken0 := false;
[L2]                  revert := revert_hold;
[L1999]               havoc __exception;
[L2000]               revert := false;
[L2001]   COND FALSE  !(__exception)
[L2038]   CALL        call balance_s729 := balanceOf~address_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L7405]   COND TRUE   DType[this] == MainToken
[L7406]   CALL        call __var_14 := balanceOf~address_BasicToken__success(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L6660]               __ret_0_ := balances_BasicToken[this][_owner_s214];
[L7406]   RET         call __var_14 := balanceOf~address_BasicToken__success(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L7407]   COND FALSE  !(revert)
[L7423]               balance_s729 := (__var_14 + freezingBalance_FreezableToken[this][_owner_s729]) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2038]   RET         call balance_s729 := balanceOf~address_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L2039]               assume !revert && gas >= 0;
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume !((((((((((balance_s729 == balances_BasicToken[this][_owner_s729] && totalSupply__BasicToken[this] == old(totalSupply__BasicToken[this])) && balances_BasicToken[this] == old(balances_BasicToken[this])) && allowed_StandardToken[this] == old(allowed_StandardToken[this])) && initialized_MainToken[this] == old(initialized_MainToken[this])) && paused_Pausable[this] == old(paused_Pausable[this])) && mintingFinished_MintableToken[this] == old(mintingFinished_MintableToken[this])) && owner_Ownable[this] == old(owner_Ownable[this])) && chains_FreezableToken[this] == old(chains_FreezableToken[this])) && freezings_FreezableToken[this] == old(freezings_FreezableToken[this])) && freezingBalance_FreezableToken[this] == old(freezingBalance_FreezableToken[this]));
[L2]                  revert := revert_hold;
[L14140]  RET         call balance_s729 := balanceOf~address_FreezableToken(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L14388]  RET         call CorralChoice_MainToken(this);

Loop:
[L14388]  CALL        call CorralChoice_MainToken(this);
[L14045]              havoc msgsender_MSG;
[L14046]              havoc msgvalue_MSG;
[L14047]              havoc choice;
[L14048]              havoc __ret_0_totalSupply;
[L14049]              havoc _owner_s729;
[L14050]              havoc balance_s729;
[L14051]              havoc _to_s1572;
[L14052]              havoc _value_s1572;
[L14053]              havoc _success_s1572;
[L14054]              havoc _owner_s395;
[L14055]              havoc _spender_s395;
[L14056]              havoc __ret_0_allowance;
[L14057]              havoc _from_s1551;
[L14058]              havoc _to_s1551;
[L14059]              havoc _value_s1551;
[L14060]              havoc _success_s1551;
[L14061]              havoc _spender_s379;
[L14062]              havoc _value_s379;
[L14063]              havoc __ret_0_approve;
[L14064]              havoc _spender_s437;
[L14065]              havoc _addedValue_s437;
[L14066]              havoc __ret_0_increaseApproval;
[L14067]              havoc _spender_s497;
[L14068]              havoc _subtractedValue_s497;
[L14069]              havoc __ret_0_decreaseApproval;
[L14070]              havoc __ret_0_owner;
[L14071]              havoc _newOwner_s558;
[L14072]              havoc __ret_0_mintingFinished;
[L14073]              havoc _to_s664;
[L14074]              havoc _amount_s664;
[L14075]              havoc __ret_0_mint;
[L14076]              havoc __ret_0_finishMinting;
[L14077]              havoc _owner_s742;
[L14078]              havoc balance_s742;
[L14079]              havoc _owner_s754;
[L14080]              havoc balance_s754;
[L14081]              havoc _addr_s792;
[L14082]              havoc count_s792;
[L14083]              havoc _addr_s849;
[L14084]              havoc _index_s849;
[L14085]              havoc _release_s849;
[L14086]              havoc _balance_s849;
[L14087]              havoc _to_s938;
[L14088]              havoc _amount_s938;
[L14089]              havoc _until_s938;
[L14090]              havoc tokens_s1107;
[L14091]              havoc _value_s1261;
[L14092]              havoc __ret_0_paused;
[L14093]              havoc _to_s1449;
[L14094]              havoc _amount_s1449;
[L14095]              havoc _until_s1449;
[L14096]              havoc __ret_0_mintAndFreeze;
[L14097]              havoc __ret_0_TOKEN_DECIMALS;
[L14098]              havoc __ret_0_TOKEN_DECIMALS_UINT8;
[L14099]              havoc __ret_0_TOKEN_DECIMAL_MULTIPLIER;
[L14100]              havoc __ret_0_TOKEN_NAME;
[L14101]              havoc __ret_0_TOKEN_SYMBOL;
[L14102]              havoc __ret_0_PAUSED;
[L14103]              havoc __ret_0_TARGET_USER;
[L14104]              havoc __ret_0_CONTINUE_MINTING;
[L14105]              havoc __ret_0_initialized;
[L14106]              havoc _name_s1511;
[L14107]              havoc _symbol_s1519;
[L14108]              havoc _decimals_s1527;
[L14109]              havoc tmpNow;
[L14110]              havoc gas;
[L14111]              assume gas > 4000000 && gas <= 8000000;
[L14112]              tmpNow := now;
[L14113]              havoc now;
[L14114]              assume now > tmpNow;
[L14115]              assume msgsender_MSG != null;
[L14116]              assume DType[msgsender_MSG] != ERC20Basic;
[L14117]              assume DType[msgsender_MSG] != SafeMath;
[L14118]              assume DType[msgsender_MSG] != BasicToken;
[L14119]              assume DType[msgsender_MSG] != ERC20;
[L14120]              assume DType[msgsender_MSG] != StandardToken;
[L14121]              assume DType[msgsender_MSG] != Ownable;
[L14122]              assume DType[msgsender_MSG] != MintableToken;
[L14123]              assume DType[msgsender_MSG] != FreezableToken;
[L14124]              assume DType[msgsender_MSG] != BurnableToken;
[L14125]              assume DType[msgsender_MSG] != Pausable;
[L14126]              assume DType[msgsender_MSG] != FreezableMintableToken;
[L14127]              assume DType[msgsender_MSG] != Consts;
[L14128]              assume DType[msgsender_MSG] != MainToken;
[L14129]              Alloc[msgsender_MSG] := true;
[L14130]  COND FALSE  !(choice == 38)
[L14136]  COND FALSE  !(choice == 37)
[L14142]  COND FALSE  !(choice == 36)
[L14149]  COND FALSE  !(choice == 35)
[L14155]  COND FALSE  !(choice == 34)
[L14162]  COND FALSE  !(choice == 33)
[L14169]  COND FALSE  !(choice == 32)
[L14176]  COND FALSE  !(choice == 31)
[L14183]  COND FALSE  !(choice == 30)
[L14189]  COND FALSE  !(choice == 29)
[L14195]  COND FALSE  !(choice == 28)
[L14201]  COND FALSE  !(choice == 27)
[L14207]  COND FALSE  !(choice == 26)
[L14214]  COND FALSE  !(choice == 25)
[L14220]  COND FALSE  !(choice == 24)
[L14226]  COND FALSE  !(choice == 23)
[L14232]  COND FALSE  !(choice == 22)
[L14238]  COND FALSE  !(choice == 21)
[L14245]  COND TRUE   choice == 20
[L14246]              gas := gas - 21000;
[L14247]  COND TRUE   gas >= 0
[L14248]              assume _amount_s938 >= 0 && _amount_s938 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L14249]              assume _until_s938 >= 0 && _until_s938 < 18446744073709551616;
[L14250]              assume msgvalue_MSG == 0;
[L14251]  CALL        call freezeTo~address~uint256~uint64_FreezableToken(this, msgsender_MSG, msgvalue_MSG, _to_s938, _amount_s938, _until_s938);
[L2417]               havoc __exception;
[L2418]               revert := false;
[L2419]   COND FALSE  !(__exception)
[L2456]   CALL        call freezeTo~address~uint256~uint64_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s938, _amount_s938, _until_s938);
[L7813]               __var_26 := null;
[L7814]   COND FALSE  !(!(_to_s938 != null))
[L7818]   COND FALSE  !(!(_amount_s938 <= balances_BasicToken[this][msgsender_MSG]))
[L7822]   CALL        call __var_27 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][msgsender_MSG], _amount_s938);
[L6509]               assert b_s98 <= a_s98;
[L6510]               __ret_0_ := (a_s98 - b_s98) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7822]   RET         call __var_27 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][msgsender_MSG], _amount_s938);
[L7823]   COND FALSE  !(revert)
[L7826]               sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][msgsender_MSG];
[L7827]               balances_BasicToken[this][msgsender_MSG] := __var_27;
[L7828]               sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][msgsender_MSG];
[L7829]               __var_28 := _until_s938 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7830]   COND FALSE  !(DType[this] == MainToken)
[L7835]   COND TRUE   DType[this] == FreezableMintableToken
[L7836]   CALL        call currentKey_s938 := toKey~address~uint256_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s938, _until_s938 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L8244]               result_s1122 := 39480772448535941496179204954862169494691089619604794184232587696854102179840;
[L8246]               havoc result_s1122;
[L8247]               havoc result_s1122;
[L8248]               havoc result_s1122;
[L8249]               havoc result_s1122;
[L7836]   RET         call currentKey_s938 := toKey~address~uint256_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s938, _until_s938 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L7837]   COND FALSE  !(revert)
[L7848]               currentKey_s938 := currentKey_s938;
[L7849]   CALL        call __var_29 := add~uint256~uint256_SafeMath__success(this, this, 0, freezings_FreezableToken[this][currentKey_s938], _amount_s938);
[L6523]               c_s122 := (a_s122 + b_s122) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6524]               assert c_s122 >= a_s122;
[L6525]               c_s122 := c_s122;
[L7849]   RET         call __var_29 := add~uint256~uint256_SafeMath__success(this, this, 0, freezings_FreezableToken[this][currentKey_s938], _amount_s938);
[L7850]   COND FALSE  !(revert)
[L7853]               sum_freezings3[this] := sum_freezings3[this] - freezings_FreezableToken[this][currentKey_s938];
[L7854]               freezings_FreezableToken[this][currentKey_s938] := __var_29;
[L7855]               sum_freezings3[this] := sum_freezings3[this] + freezings_FreezableToken[this][currentKey_s938];
[L7856]   CALL        call __var_30 := add~uint256~uint256_SafeMath__success(this, this, 0, freezingBalance_FreezableToken[this][_to_s938], _amount_s938);
[L6523]               c_s122 := (a_s122 + b_s122) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6524]               assert c_s122 >= a_s122;
[L6525]               c_s122 := c_s122;
[L7856]   RET         call __var_30 := add~uint256~uint256_SafeMath__success(this, this, 0, freezingBalance_FreezableToken[this][_to_s938], _amount_s938);
[L7857]   COND FALSE  !(revert)
[L7860]               sum_freezingBalance4[this] := sum_freezingBalance4[this] - freezingBalance_FreezableToken[this][_to_s938];
[L7861]               freezingBalance_FreezableToken[this][_to_s938] := __var_30;
[L7862]               sum_freezingBalance4[this] := sum_freezingBalance4[this] + freezingBalance_FreezableToken[this][_to_s938];
[L7863]   COND FALSE  !(DType[this] == MainToken)
[L7868]   COND TRUE   DType[this] == FreezableMintableToken
[L7869]   CALL        call freeze~address~uint64_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s938, _until_s938);
[L8388]   COND FALSE  !(!(_until_s1240 > now))
[L8392]               __var_42 := _until_s1240 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8393]   COND FALSE  !(DType[this] == MainToken)
[L8398]   COND TRUE   DType[this] == FreezableMintableToken
[L8399]   CALL        call key_s1240 := toKey~address~uint256_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s1240, _until_s1240 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L8244]               result_s1122 := 39480772448535941496179204954862169494691089619604794184232587696854102179840;
[L8246]               havoc result_s1122;
[L8247]               havoc result_s1122;
[L8248]               havoc result_s1122;
[L8249]               havoc result_s1122;
[L8399]   RET         call key_s1240 := toKey~address~uint256_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s1240, _until_s1240 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L8400]   COND FALSE  !(revert)
[L8411]               key_s1240 := key_s1240;
[L8412]               __var_43 := 0 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8413]   COND FALSE  !(DType[this] == MainToken)
[L8418]   COND TRUE   DType[this] == FreezableMintableToken
[L8419]   CALL        call parentKey_s1240 := toKey~address~uint256_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s1240, 0 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L8244]               result_s1122 := 39480772448535941496179204954862169494691089619604794184232587696854102179840;
[L8246]               havoc result_s1122;
[L8247]               havoc result_s1122;
[L8248]               havoc result_s1122;
[L8249]               havoc result_s1122;
[L8419]   RET         call parentKey_s1240 := toKey~address~uint256_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s1240, 0 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L8420]   COND FALSE  !(revert)
[L8431]               parentKey_s1240 := parentKey_s1240;
[L8432]               next_s1240 := chains_FreezableToken[this][parentKey_s1240];
[L8433]   COND TRUE   next_s1240 == 0
[L8434]               sum_chains2[this] := sum_chains2[this] - chains_FreezableToken[this][parentKey_s1240];
[L8435]               chains_FreezableToken[this][parentKey_s1240] := _until_s1240;
[L8436]               sum_chains2[this] := sum_chains2[this] + chains_FreezableToken[this][parentKey_s1240];
[L7869]   RET         call freeze~address~uint64_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s938, _until_s938);
[L7870]   COND FALSE  !(revert)
[L7881]               assert { :EventEmitted "Transfer_FreezableToken" } true;
[L7882]               assert { :EventEmitted "Freezed_FreezableToken" } true;
[L2456]   RET         call freezeTo~address~uint256~uint64_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s938, _amount_s938, _until_s938);
[L2457]               assume !revert && gas >= 0;
[L14251]  RET         call freezeTo~address~uint256~uint64_FreezableToken(this, msgsender_MSG, msgvalue_MSG, _to_s938, _amount_s938, _until_s938);
[L14388]  RET         call CorralChoice_MainToken(this);

[2020-11-24 21:26:13,881 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-24 21:26:13,881 INFO  L82        PathProgramCache]: Analyzing trace with hash 404093522, now seen corresponding path program 1 times
[2020-11-24 21:26:13,882 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-24 21:26:13,914 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-24 21:26:14,543 INFO  L134       CoverageAnalysis]: Checked inductivity of 9938 backedges. 1 proven. 0 refuted. 0 times theorem prover too weak. 9937 trivial. 0 not checked.
[2020-11-24 21:26:14,543 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-24 21:26:14,543 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [7] imperfect sequences [] total 7
[2020-11-24 21:26:14,544 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-24 21:26:14,544 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 7 interpolants.
[2020-11-24 21:26:14,544 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=11, Invalid=31, Unknown=0, NotChecked=0, Total=42
[2020-11-24 21:26:14,544 INFO  L87              Difference]: Start difference. First operand 5606 states and 6307 transitions. cyclomatic complexity: 723 Second operand 7 states.
[2020-11-24 21:26:14,691 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-24 21:26:14,691 INFO  L93              Difference]: Finished difference Result 5694 states and 6397 transitions.
[2020-11-24 21:26:14,691 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 7 states. 
[2020-11-24 21:26:14,691 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 5694 states and 6397 transitions.
[2020-11-24 21:26:14,700 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-24 21:26:14,710 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 5694 states to 5584 states and 6275 transitions.
[2020-11-24 21:26:14,710 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1113
[2020-11-24 21:26:14,710 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1113
[2020-11-24 21:26:14,710 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 5584 states and 6275 transitions.
[2020-11-24 21:26:14,713 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-24 21:26:14,713 INFO  L728         BuchiCegarLoop]: Abstraction has 5584 states and 6275 transitions.
[2020-11-24 21:26:14,717 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 5584 states and 6275 transitions.
[2020-11-24 21:26:14,737 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 5584 to 5584.
[2020-11-24 21:26:14,737 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 5584 states.
[2020-11-24 21:26:14,743 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 5584 states to 5584 states and 6275 transitions.
[2020-11-24 21:26:14,743 INFO  L751         BuchiCegarLoop]: Abstraction has 5584 states and 6275 transitions.
[2020-11-24 21:26:14,743 INFO  L631         BuchiCegarLoop]: Abstraction has 5584 states and 6275 transitions.
[2020-11-24 21:26:14,743 INFO  L445         BuchiCegarLoop]: ======== Iteration 16============
[2020-11-24 21:26:14,743 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 5584 states and 6275 transitions.
[2020-11-24 21:26:14,748 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-24 21:26:14,748 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-24 21:26:14,748 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-24 21:26:14,750 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [38, 38, 38, 38, 38, 38, 38, 38, 38, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-24 21:26:14,750 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  success_balanceOf_FreezableToken0 := false;
[L2]                  call_balanceOf_FreezableToken0 := false;
[L2]      CALL        call main();
[L14378]              assume null == 0;
[L14379]  CALL        call this := FreshRefGenerator__success();
[L6396]               havoc newRef;
[L6397]               assume Alloc[newRef] == false;
[L6398]               Alloc[newRef] := true;
[L6399]               assume newRef != null;
[L14379]  RET         call this := FreshRefGenerator__success();
[L14380]              assume now >= 0;
[L14381]              assume DType[this] == MainToken;
[L14382]              assume msgvalue_MSG == 0;
[L14383]              gas := gas - 53000;
[L14384]  CALL        call MainToken_MainToken(this, msgsender_MSG, msgvalue_MSG);
[L4183]               havoc __exception;
[L4184]               revert := false;
[L4185]   COND FALSE  !(__exception)
[L4222]   CALL        call MainToken_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9205]   CALL        call Consts_Consts__success(this, msgsender_MSG, msgvalue_MSG);
[L9007]   CALL        call Consts_Consts_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8983]               assume msgsender_MSG != null;
[L8984]               Balance[this] := 0;
[L8985]               TOKEN_DECIMALS_Consts[this] := 18;
[L8986]               TOKEN_DECIMALS_UINT8_Consts[this] := 18;
[L8987]               TOKEN_DECIMAL_MULTIPLIER_Consts[this] := nonlinearPow(10, TOKEN_DECIMALS_Consts[this]) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8988]               TOKEN_NAME_Consts[this] := -1051245219;
[L8989]               TOKEN_SYMBOL_Consts[this] := -1804535220;
[L8990]               PAUSED_Consts[this] := false;
[L8991]               __var_52 := ConstantToRef(-210822415442009814958929812751043848690848471787);
[L8992]               TARGET_USER_Consts[this] := ConstantToRef(-210822415442009814958929812751043848690848471787);
[L8993]               CONTINUE_MINTING_Consts[this] := true;
[L9007]   RET         call Consts_Consts_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9008]   COND FALSE  !(revert)
[L9205]   RET         call Consts_Consts__success(this, msgsender_MSG, msgvalue_MSG);
[L9206]   COND FALSE  !(revert)
[L9209]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L9209]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L9210]   COND FALSE  !(revert)
[L9213]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6694]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6694]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6695]   COND FALSE  !(revert)
[L6698]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6675]               assume msgsender_MSG != null;
[L6676]               Balance[this] := 0;
[L6698]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6699]   COND FALSE  !(revert)
[L9213]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L9214]   COND FALSE  !(revert)
[L9217]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6565]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   COND FALSE  !(revert)
[L6569]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]               assume msgsender_MSG != null;
[L6544]               Balance[this] := 0;
[L6545]               balances_BasicToken[this] := zeroRefintArr();
[L6546]               sum_balances0[this] := 0;
[L6547]               totalSupply__BasicToken[this] := 0;
[L6569]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6570]   COND FALSE  !(revert)
[L9217]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9218]   COND FALSE  !(revert)
[L9221]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6746]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6746]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6747]   COND FALSE  !(revert)
[L6750]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6694]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6694]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6695]   COND FALSE  !(revert)
[L6698]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6675]               assume msgsender_MSG != null;
[L6676]               Balance[this] := 0;
[L6698]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6699]   COND FALSE  !(revert)
[L6750]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6751]   COND FALSE  !(revert)
[L6754]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6565]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   COND FALSE  !(revert)
[L6569]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]               assume msgsender_MSG != null;
[L6544]               Balance[this] := 0;
[L6545]               balances_BasicToken[this] := zeroRefintArr();
[L6546]               sum_balances0[this] := 0;
[L6547]               totalSupply__BasicToken[this] := 0;
[L6569]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6570]   COND FALSE  !(revert)
[L6754]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6755]   COND FALSE  !(revert)
[L6758]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6717]               assume msgsender_MSG != null;
[L6718]               Balance[this] := 0;
[L6719]               allowed_StandardToken[this] := zeroRefRefintArr();
[L6720]               sum_allowed1[this] := 0;
[L6758]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6759]   COND FALSE  !(revert)
[L9221]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9222]   COND FALSE  !(revert)
[L9225]   CALL        call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7353]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L7353]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7354]   COND FALSE  !(revert)
[L7357]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6694]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6694]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6695]   COND FALSE  !(revert)
[L6698]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6675]               assume msgsender_MSG != null;
[L6676]               Balance[this] := 0;
[L6698]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6699]   COND FALSE  !(revert)
[L7357]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7358]   COND FALSE  !(revert)
[L7361]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6565]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   COND FALSE  !(revert)
[L6569]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]               assume msgsender_MSG != null;
[L6544]               Balance[this] := 0;
[L6545]               balances_BasicToken[this] := zeroRefintArr();
[L6546]               sum_balances0[this] := 0;
[L6547]               totalSupply__BasicToken[this] := 0;
[L6569]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6570]   COND FALSE  !(revert)
[L7361]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7362]   COND FALSE  !(revert)
[L7365]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6746]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6746]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6747]   COND FALSE  !(revert)
[L6750]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6694]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6694]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6695]   COND FALSE  !(revert)
[L6698]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6675]               assume msgsender_MSG != null;
[L6676]               Balance[this] := 0;
[L6698]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6699]   COND FALSE  !(revert)
[L6750]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6751]   COND FALSE  !(revert)
[L6754]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6565]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   COND FALSE  !(revert)
[L6569]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]               assume msgsender_MSG != null;
[L6544]               Balance[this] := 0;
[L6545]               balances_BasicToken[this] := zeroRefintArr();
[L6546]               sum_balances0[this] := 0;
[L6547]               totalSupply__BasicToken[this] := 0;
[L6569]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6570]   COND FALSE  !(revert)
[L6754]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6755]   COND FALSE  !(revert)
[L6758]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6717]               assume msgsender_MSG != null;
[L6718]               Balance[this] := 0;
[L6719]               allowed_StandardToken[this] := zeroRefRefintArr();
[L6720]               sum_allowed1[this] := 0;
[L6758]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6759]   COND FALSE  !(revert)
[L7365]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7366]   COND FALSE  !(revert)
[L7369]   CALL        call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7316]               assume msgsender_MSG != null;
[L7317]               Balance[this] := 0;
[L7318]               chains_FreezableToken[this] := zerointintArr();
[L7319]               sum_chains2[this] := 0;
[L7320]               freezings_FreezableToken[this] := zerointintArr();
[L7321]               sum_freezings3[this] := 0;
[L7322]               freezingBalance_FreezableToken[this] := zeroRefintArr();
[L7323]               sum_freezingBalance4[this] := 0;
[L7369]   RET         call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7370]   COND FALSE  !(revert)
[L9225]   RET         call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9226]   COND FALSE  !(revert)
[L9229]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6988]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6971]               assume msgsender_MSG != null;
[L6972]               Balance[this] := 0;
[L6973]               owner_Ownable[this] := null;
[L6975]               owner_Ownable[this] := msgsender_MSG;
[L6988]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6989]   COND FALSE  !(revert)
[L9229]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L9230]   COND FALSE  !(revert)
[L9233]   CALL        call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7172]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L7172]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7173]   COND FALSE  !(revert)
[L7176]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6694]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6694]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6695]   COND FALSE  !(revert)
[L6698]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6675]               assume msgsender_MSG != null;
[L6676]               Balance[this] := 0;
[L6698]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6699]   COND FALSE  !(revert)
[L7176]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7177]   COND FALSE  !(revert)
[L7180]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6565]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   COND FALSE  !(revert)
[L6569]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]               assume msgsender_MSG != null;
[L6544]               Balance[this] := 0;
[L6545]               balances_BasicToken[this] := zeroRefintArr();
[L6546]               sum_balances0[this] := 0;
[L6547]               totalSupply__BasicToken[this] := 0;
[L6569]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6570]   COND FALSE  !(revert)
[L7180]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7181]   COND FALSE  !(revert)
[L7184]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6746]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6746]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6747]   COND FALSE  !(revert)
[L6750]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6694]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6694]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6695]   COND FALSE  !(revert)
[L6698]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6675]               assume msgsender_MSG != null;
[L6676]               Balance[this] := 0;
[L6698]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6699]   COND FALSE  !(revert)
[L6750]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6751]   COND FALSE  !(revert)
[L6754]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6565]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   COND FALSE  !(revert)
[L6569]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]               assume msgsender_MSG != null;
[L6544]               Balance[this] := 0;
[L6545]               balances_BasicToken[this] := zeroRefintArr();
[L6546]               sum_balances0[this] := 0;
[L6547]               totalSupply__BasicToken[this] := 0;
[L6569]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6570]   COND FALSE  !(revert)
[L6754]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6755]   COND FALSE  !(revert)
[L6758]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6717]               assume msgsender_MSG != null;
[L6718]               Balance[this] := 0;
[L6719]               allowed_StandardToken[this] := zeroRefRefintArr();
[L6720]               sum_allowed1[this] := 0;
[L6758]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6759]   COND FALSE  !(revert)
[L7184]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7185]   COND FALSE  !(revert)
[L7188]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6988]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6971]               assume msgsender_MSG != null;
[L6972]               Balance[this] := 0;
[L6973]               owner_Ownable[this] := null;
[L6975]               owner_Ownable[this] := msgsender_MSG;
[L6988]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6989]   COND FALSE  !(revert)
[L7188]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7189]   COND FALSE  !(revert)
[L7192]   CALL        call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7136]               assume msgsender_MSG != null;
[L7137]               Balance[this] := 0;
[L7138]               mintingFinished_MintableToken[this] := false;
[L7192]   RET         call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7193]   COND FALSE  !(revert)
[L9233]   RET         call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9234]   COND FALSE  !(revert)
[L9237]   CALL        call FreezableMintableToken_FreezableMintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L8792]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L8792]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L8793]   COND FALSE  !(revert)
[L8796]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6694]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6694]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6695]   COND FALSE  !(revert)
[L6698]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6675]               assume msgsender_MSG != null;
[L6676]               Balance[this] := 0;
[L6698]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6699]   COND FALSE  !(revert)
[L8796]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L8797]   COND FALSE  !(revert)
[L8800]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6565]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   COND FALSE  !(revert)
[L6569]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]               assume msgsender_MSG != null;
[L6544]               Balance[this] := 0;
[L6545]               balances_BasicToken[this] := zeroRefintArr();
[L6546]               sum_balances0[this] := 0;
[L6547]               totalSupply__BasicToken[this] := 0;
[L6569]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6570]   COND FALSE  !(revert)
[L8800]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L8801]   COND FALSE  !(revert)
[L8804]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6746]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6746]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6747]   COND FALSE  !(revert)
[L6750]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6694]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6694]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6695]   COND FALSE  !(revert)
[L6698]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6675]               assume msgsender_MSG != null;
[L6676]               Balance[this] := 0;
[L6698]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6699]   COND FALSE  !(revert)
[L6750]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6751]   COND FALSE  !(revert)
[L6754]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6565]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   COND FALSE  !(revert)
[L6569]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]               assume msgsender_MSG != null;
[L6544]               Balance[this] := 0;
[L6545]               balances_BasicToken[this] := zeroRefintArr();
[L6546]               sum_balances0[this] := 0;
[L6547]               totalSupply__BasicToken[this] := 0;
[L6569]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6570]   COND FALSE  !(revert)
[L6754]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6755]   COND FALSE  !(revert)
[L6758]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6717]               assume msgsender_MSG != null;
[L6718]               Balance[this] := 0;
[L6719]               allowed_StandardToken[this] := zeroRefRefintArr();
[L6720]               sum_allowed1[this] := 0;
[L6758]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6759]   COND FALSE  !(revert)
[L8804]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L8805]   COND FALSE  !(revert)
[L8808]   CALL        call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7353]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L7353]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7354]   COND FALSE  !(revert)
[L7357]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6694]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6694]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6695]   COND FALSE  !(revert)
[L6698]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6675]               assume msgsender_MSG != null;
[L6676]               Balance[this] := 0;
[L6698]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6699]   COND FALSE  !(revert)
[L7357]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7358]   COND FALSE  !(revert)
[L7361]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6565]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   COND FALSE  !(revert)
[L6569]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]               assume msgsender_MSG != null;
[L6544]               Balance[this] := 0;
[L6545]               balances_BasicToken[this] := zeroRefintArr();
[L6546]               sum_balances0[this] := 0;
[L6547]               totalSupply__BasicToken[this] := 0;
[L6569]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6570]   COND FALSE  !(revert)
[L7361]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7362]   COND FALSE  !(revert)
[L7365]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6746]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6746]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6747]   COND FALSE  !(revert)
[L6750]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6694]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6694]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6695]   COND FALSE  !(revert)
[L6698]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6675]               assume msgsender_MSG != null;
[L6676]               Balance[this] := 0;
[L6698]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6699]   COND FALSE  !(revert)
[L6750]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6751]   COND FALSE  !(revert)
[L6754]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6565]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   COND FALSE  !(revert)
[L6569]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]               assume msgsender_MSG != null;
[L6544]               Balance[this] := 0;
[L6545]               balances_BasicToken[this] := zeroRefintArr();
[L6546]               sum_balances0[this] := 0;
[L6547]               totalSupply__BasicToken[this] := 0;
[L6569]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6570]   COND FALSE  !(revert)
[L6754]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6755]   COND FALSE  !(revert)
[L6758]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6717]               assume msgsender_MSG != null;
[L6718]               Balance[this] := 0;
[L6719]               allowed_StandardToken[this] := zeroRefRefintArr();
[L6720]               sum_allowed1[this] := 0;
[L6758]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6759]   COND FALSE  !(revert)
[L7365]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7366]   COND FALSE  !(revert)
[L7369]   CALL        call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7316]               assume msgsender_MSG != null;
[L7317]               Balance[this] := 0;
[L7318]               chains_FreezableToken[this] := zerointintArr();
[L7319]               sum_chains2[this] := 0;
[L7320]               freezings_FreezableToken[this] := zerointintArr();
[L7321]               sum_freezings3[this] := 0;
[L7322]               freezingBalance_FreezableToken[this] := zeroRefintArr();
[L7323]               sum_freezingBalance4[this] := 0;
[L7369]   RET         call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7370]   COND FALSE  !(revert)
[L8808]   RET         call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L8809]   COND FALSE  !(revert)
[L8812]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6988]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6971]               assume msgsender_MSG != null;
[L6972]               Balance[this] := 0;
[L6973]               owner_Ownable[this] := null;
[L6975]               owner_Ownable[this] := msgsender_MSG;
[L6988]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6989]   COND FALSE  !(revert)
[L8812]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L8813]   COND FALSE  !(revert)
[L8816]   CALL        call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7172]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L7172]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7173]   COND FALSE  !(revert)
[L7176]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6694]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6694]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6695]   COND FALSE  !(revert)
[L6698]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6675]               assume msgsender_MSG != null;
[L6676]               Balance[this] := 0;
[L6698]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6699]   COND FALSE  !(revert)
[L7176]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7177]   COND FALSE  !(revert)
[L7180]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6565]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   COND FALSE  !(revert)
[L6569]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]               assume msgsender_MSG != null;
[L6544]               Balance[this] := 0;
[L6545]               balances_BasicToken[this] := zeroRefintArr();
[L6546]               sum_balances0[this] := 0;
[L6547]               totalSupply__BasicToken[this] := 0;
[L6569]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6570]   COND FALSE  !(revert)
[L7180]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7181]   COND FALSE  !(revert)
[L7184]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6746]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6746]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6747]   COND FALSE  !(revert)
[L6750]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6694]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6694]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6695]   COND FALSE  !(revert)
[L6698]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6675]               assume msgsender_MSG != null;
[L6676]               Balance[this] := 0;
[L6698]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6699]   COND FALSE  !(revert)
[L6750]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6751]   COND FALSE  !(revert)
[L6754]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6565]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   COND FALSE  !(revert)
[L6569]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]               assume msgsender_MSG != null;
[L6544]               Balance[this] := 0;
[L6545]               balances_BasicToken[this] := zeroRefintArr();
[L6546]               sum_balances0[this] := 0;
[L6547]               totalSupply__BasicToken[this] := 0;
[L6569]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6570]   COND FALSE  !(revert)
[L6754]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6755]   COND FALSE  !(revert)
[L6758]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6717]               assume msgsender_MSG != null;
[L6718]               Balance[this] := 0;
[L6719]               allowed_StandardToken[this] := zeroRefRefintArr();
[L6720]               sum_allowed1[this] := 0;
[L6758]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6759]   COND FALSE  !(revert)
[L7184]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7185]   COND FALSE  !(revert)
[L7188]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6988]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6971]               assume msgsender_MSG != null;
[L6972]               Balance[this] := 0;
[L6973]               owner_Ownable[this] := null;
[L6975]               owner_Ownable[this] := msgsender_MSG;
[L6988]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6989]   COND FALSE  !(revert)
[L7188]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7189]   COND FALSE  !(revert)
[L7192]   CALL        call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7136]               assume msgsender_MSG != null;
[L7137]               Balance[this] := 0;
[L7138]               mintingFinished_MintableToken[this] := false;
[L7192]   RET         call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7193]   COND FALSE  !(revert)
[L8816]   RET         call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L8817]   COND FALSE  !(revert)
[L8820]   CALL        call FreezableMintableToken_FreezableMintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8749]               assume msgsender_MSG != null;
[L8750]               Balance[this] := 0;
[L8820]   RET         call FreezableMintableToken_FreezableMintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8821]   COND FALSE  !(revert)
[L9237]   RET         call FreezableMintableToken_FreezableMintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9238]   COND FALSE  !(revert)
[L9241]   CALL        call BurnableToken_BurnableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L8536]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L8536]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L8537]   COND FALSE  !(revert)
[L8540]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6565]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   COND FALSE  !(revert)
[L6569]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]               assume msgsender_MSG != null;
[L6544]               Balance[this] := 0;
[L6545]               balances_BasicToken[this] := zeroRefintArr();
[L6546]               sum_balances0[this] := 0;
[L6547]               totalSupply__BasicToken[this] := 0;
[L6569]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6570]   COND FALSE  !(revert)
[L8540]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L8541]   COND FALSE  !(revert)
[L8544]   CALL        call BurnableToken_BurnableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8513]               assume msgsender_MSG != null;
[L8514]               Balance[this] := 0;
[L8544]   RET         call BurnableToken_BurnableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8545]   COND FALSE  !(revert)
[L9241]   RET         call BurnableToken_BurnableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9242]   COND FALSE  !(revert)
[L9245]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L8662]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6988]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6971]               assume msgsender_MSG != null;
[L6972]               Balance[this] := 0;
[L6973]               owner_Ownable[this] := null;
[L6975]               owner_Ownable[this] := msgsender_MSG;
[L6988]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6989]   COND FALSE  !(revert)
[L8662]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L8663]   COND FALSE  !(revert)
[L8666]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8642]               assume msgsender_MSG != null;
[L8643]               Balance[this] := 0;
[L8644]               paused_Pausable[this] := false;
[L8666]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8667]   COND FALSE  !(revert)
[L9245]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L9246]   COND FALSE  !(revert)
[L9249]   CALL        call MainToken_MainToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9133]               assume msgsender_MSG != null;
[L9134]               Balance[this] := 0;
[L9135]               initialized_MainToken[this] := false;
[L9137]   CALL        call init_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9404]   COND FALSE  !(!!initialized_MainToken[this])
[L9408]               initialized_MainToken[this] := true;
[L9409]   COND FALSE  !(PAUSED_Consts[this])
[L9419]   COND FALSE  !(!CONTINUE_MINTING_Consts[this])
[L9429]               assert { :EventEmitted "Initialized_MainToken" } true;
[L9137]   RET         call init_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9138]   COND FALSE  !(revert)
[L9141]   COND TRUE   DType[this] == MainToken
[L9142]   CALL        call transferOwnership~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, TARGET_USER_Consts[this]);
[L7055]   CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L12332]  COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L7055]   RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7056]   COND FALSE  !(revert)
[L7059]   COND TRUE   DType[this] == MainToken
[L7060]   CALL        call _transferOwnership~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, _newOwner_s558);
[L7103]               __var_11 := null;
[L7104]   COND FALSE  !(!(_newOwner_s581 != null))
[L7108]               assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L7109]               owner_Ownable[this] := _newOwner_s581;
[L7060]   RET         call _transferOwnership~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, _newOwner_s558);
[L7061]   COND FALSE  !(revert)
[L9142]   RET         call transferOwnership~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, TARGET_USER_Consts[this]);
[L9143]   COND FALSE  !(revert)
[L9249]   RET         call MainToken_MainToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9250]   COND FALSE  !(revert)
[L4222]   RET         call MainToken_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4223]               assume !revert && gas >= 0;
[L14384]  RET         call MainToken_MainToken(this, msgsender_MSG, msgvalue_MSG);
[L14385]              assume !revert && gas >= 0;
[L14388]  CALL        call CorralChoice_MainToken(this);
[L14045]              havoc msgsender_MSG;
[L14046]              havoc msgvalue_MSG;
[L14047]              havoc choice;
[L14048]              havoc __ret_0_totalSupply;
[L14049]              havoc _owner_s729;
[L14050]              havoc balance_s729;
[L14051]              havoc _to_s1572;
[L14052]              havoc _value_s1572;
[L14053]              havoc _success_s1572;
[L14054]              havoc _owner_s395;
[L14055]              havoc _spender_s395;
[L14056]              havoc __ret_0_allowance;
[L14057]              havoc _from_s1551;
[L14058]              havoc _to_s1551;
[L14059]              havoc _value_s1551;
[L14060]              havoc _success_s1551;
[L14061]              havoc _spender_s379;
[L14062]              havoc _value_s379;
[L14063]              havoc __ret_0_approve;
[L14064]              havoc _spender_s437;
[L14065]              havoc _addedValue_s437;
[L14066]              havoc __ret_0_increaseApproval;
[L14067]              havoc _spender_s497;
[L14068]              havoc _subtractedValue_s497;
[L14069]              havoc __ret_0_decreaseApproval;
[L14070]              havoc __ret_0_owner;
[L14071]              havoc _newOwner_s558;
[L14072]              havoc __ret_0_mintingFinished;
[L14073]              havoc _to_s664;
[L14074]              havoc _amount_s664;
[L14075]              havoc __ret_0_mint;
[L14076]              havoc __ret_0_finishMinting;
[L14077]              havoc _owner_s742;
[L14078]              havoc balance_s742;
[L14079]              havoc _owner_s754;
[L14080]              havoc balance_s754;
[L14081]              havoc _addr_s792;
[L14082]              havoc count_s792;
[L14083]              havoc _addr_s849;
[L14084]              havoc _index_s849;
[L14085]              havoc _release_s849;
[L14086]              havoc _balance_s849;
[L14087]              havoc _to_s938;
[L14088]              havoc _amount_s938;
[L14089]              havoc _until_s938;
[L14090]              havoc tokens_s1107;
[L14091]              havoc _value_s1261;
[L14092]              havoc __ret_0_paused;
[L14093]              havoc _to_s1449;
[L14094]              havoc _amount_s1449;
[L14095]              havoc _until_s1449;
[L14096]              havoc __ret_0_mintAndFreeze;
[L14097]              havoc __ret_0_TOKEN_DECIMALS;
[L14098]              havoc __ret_0_TOKEN_DECIMALS_UINT8;
[L14099]              havoc __ret_0_TOKEN_DECIMAL_MULTIPLIER;
[L14100]              havoc __ret_0_TOKEN_NAME;
[L14101]              havoc __ret_0_TOKEN_SYMBOL;
[L14102]              havoc __ret_0_PAUSED;
[L14103]              havoc __ret_0_TARGET_USER;
[L14104]              havoc __ret_0_CONTINUE_MINTING;
[L14105]              havoc __ret_0_initialized;
[L14106]              havoc _name_s1511;
[L14107]              havoc _symbol_s1519;
[L14108]              havoc _decimals_s1527;
[L14109]              havoc tmpNow;
[L14110]              havoc gas;
[L14111]              assume gas > 4000000 && gas <= 8000000;
[L14112]              tmpNow := now;
[L14113]              havoc now;
[L14114]              assume now > tmpNow;
[L14115]              assume msgsender_MSG != null;
[L14116]              assume DType[msgsender_MSG] != ERC20Basic;
[L14117]              assume DType[msgsender_MSG] != SafeMath;
[L14118]              assume DType[msgsender_MSG] != BasicToken;
[L14119]              assume DType[msgsender_MSG] != ERC20;
[L14120]              assume DType[msgsender_MSG] != StandardToken;
[L14121]              assume DType[msgsender_MSG] != Ownable;
[L14122]              assume DType[msgsender_MSG] != MintableToken;
[L14123]              assume DType[msgsender_MSG] != FreezableToken;
[L14124]              assume DType[msgsender_MSG] != BurnableToken;
[L14125]              assume DType[msgsender_MSG] != Pausable;
[L14126]              assume DType[msgsender_MSG] != FreezableMintableToken;
[L14127]              assume DType[msgsender_MSG] != Consts;
[L14128]              assume DType[msgsender_MSG] != MainToken;
[L14129]              Alloc[msgsender_MSG] := true;
[L14130]  COND FALSE  !(choice == 38)
[L14136]  COND FALSE  !(choice == 37)
[L14142]  COND FALSE  !(choice == 36)
[L14149]  COND FALSE  !(choice == 35)
[L14155]  COND FALSE  !(choice == 34)
[L14162]  COND FALSE  !(choice == 33)
[L14169]  COND FALSE  !(choice == 32)
[L14176]  COND FALSE  !(choice == 31)
[L14183]  COND FALSE  !(choice == 30)
[L14189]  COND FALSE  !(choice == 29)
[L14195]  COND FALSE  !(choice == 28)
[L14201]  COND FALSE  !(choice == 27)
[L14207]  COND FALSE  !(choice == 26)
[L14214]  COND FALSE  !(choice == 25)
[L14220]  COND FALSE  !(choice == 24)
[L14226]  COND FALSE  !(choice == 23)
[L14232]  COND FALSE  !(choice == 22)
[L14238]  COND FALSE  !(choice == 21)
[L14245]  COND TRUE   choice == 20
[L14246]              gas := gas - 21000;
[L14247]  COND TRUE   gas >= 0
[L14248]              assume _amount_s938 >= 0 && _amount_s938 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L14249]              assume _until_s938 >= 0 && _until_s938 < 18446744073709551616;
[L14250]              assume msgvalue_MSG == 0;
[L14251]  CALL        call freezeTo~address~uint256~uint64_FreezableToken(this, msgsender_MSG, msgvalue_MSG, _to_s938, _amount_s938, _until_s938);
[L2417]               havoc __exception;
[L2418]               revert := false;
[L2419]   COND FALSE  !(__exception)
[L2456]   CALL        call freezeTo~address~uint256~uint64_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s938, _amount_s938, _until_s938);
[L7813]               __var_26 := null;
[L7814]   COND FALSE  !(!(_to_s938 != null))
[L7818]   COND FALSE  !(!(_amount_s938 <= balances_BasicToken[this][msgsender_MSG]))
[L7822]   CALL        call __var_27 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][msgsender_MSG], _amount_s938);
[L6509]               assert b_s98 <= a_s98;
[L6510]               __ret_0_ := (a_s98 - b_s98) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7822]   RET         call __var_27 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][msgsender_MSG], _amount_s938);
[L7823]   COND FALSE  !(revert)
[L7826]               sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][msgsender_MSG];
[L7827]               balances_BasicToken[this][msgsender_MSG] := __var_27;
[L7828]               sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][msgsender_MSG];
[L7829]               __var_28 := _until_s938 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7830]   COND TRUE   DType[this] == MainToken
[L7831]   CALL        call currentKey_s938 := toKey~address~uint256_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s938, _until_s938 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L8244]               result_s1122 := 39480772448535941496179204954862169494691089619604794184232587696854102179840;
[L8246]               havoc result_s1122;
[L8247]               havoc result_s1122;
[L8248]               havoc result_s1122;
[L8249]               havoc result_s1122;
[L7831]   RET         call currentKey_s938 := toKey~address~uint256_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s938, _until_s938 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L7832]   COND FALSE  !(revert)
[L7848]               currentKey_s938 := currentKey_s938;
[L7849]   CALL        call __var_29 := add~uint256~uint256_SafeMath__success(this, this, 0, freezings_FreezableToken[this][currentKey_s938], _amount_s938);
[L6523]               c_s122 := (a_s122 + b_s122) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6524]               assert c_s122 >= a_s122;
[L6525]               c_s122 := c_s122;
[L7849]   RET         call __var_29 := add~uint256~uint256_SafeMath__success(this, this, 0, freezings_FreezableToken[this][currentKey_s938], _amount_s938);
[L7850]   COND FALSE  !(revert)
[L7853]               sum_freezings3[this] := sum_freezings3[this] - freezings_FreezableToken[this][currentKey_s938];
[L7854]               freezings_FreezableToken[this][currentKey_s938] := __var_29;
[L7855]               sum_freezings3[this] := sum_freezings3[this] + freezings_FreezableToken[this][currentKey_s938];
[L7856]   CALL        call __var_30 := add~uint256~uint256_SafeMath__success(this, this, 0, freezingBalance_FreezableToken[this][_to_s938], _amount_s938);
[L6523]               c_s122 := (a_s122 + b_s122) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6524]               assert c_s122 >= a_s122;
[L6525]               c_s122 := c_s122;
[L7856]   RET         call __var_30 := add~uint256~uint256_SafeMath__success(this, this, 0, freezingBalance_FreezableToken[this][_to_s938], _amount_s938);
[L7857]   COND FALSE  !(revert)
[L7860]               sum_freezingBalance4[this] := sum_freezingBalance4[this] - freezingBalance_FreezableToken[this][_to_s938];
[L7861]               freezingBalance_FreezableToken[this][_to_s938] := __var_30;
[L7862]               sum_freezingBalance4[this] := sum_freezingBalance4[this] + freezingBalance_FreezableToken[this][_to_s938];
[L7863]   COND TRUE   DType[this] == MainToken
[L7864]   CALL        call freeze~address~uint64_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s938, _until_s938);
[L8388]   COND FALSE  !(!(_until_s1240 > now))
[L8392]               __var_42 := _until_s1240 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8393]   COND TRUE   DType[this] == MainToken
[L8394]   CALL        call key_s1240 := toKey~address~uint256_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s1240, _until_s1240 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L8244]               result_s1122 := 39480772448535941496179204954862169494691089619604794184232587696854102179840;
[L8246]               havoc result_s1122;
[L8247]               havoc result_s1122;
[L8248]               havoc result_s1122;
[L8249]               havoc result_s1122;
[L8394]   RET         call key_s1240 := toKey~address~uint256_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s1240, _until_s1240 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L8395]   COND FALSE  !(revert)
[L8411]               key_s1240 := key_s1240;
[L8412]               __var_43 := 0 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8413]   COND TRUE   DType[this] == MainToken
[L8414]   CALL        call parentKey_s1240 := toKey~address~uint256_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s1240, 0 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L8244]               result_s1122 := 39480772448535941496179204954862169494691089619604794184232587696854102179840;
[L8246]               havoc result_s1122;
[L8247]               havoc result_s1122;
[L8248]               havoc result_s1122;
[L8249]               havoc result_s1122;
[L8414]   RET         call parentKey_s1240 := toKey~address~uint256_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s1240, 0 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L8415]   COND FALSE  !(revert)
[L8431]               parentKey_s1240 := parentKey_s1240;
[L8432]               next_s1240 := chains_FreezableToken[this][parentKey_s1240];
[L8433]   COND TRUE   next_s1240 == 0
[L8434]               sum_chains2[this] := sum_chains2[this] - chains_FreezableToken[this][parentKey_s1240];
[L8435]               chains_FreezableToken[this][parentKey_s1240] := _until_s1240;
[L8436]               sum_chains2[this] := sum_chains2[this] + chains_FreezableToken[this][parentKey_s1240];
[L7864]   RET         call freeze~address~uint64_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s938, _until_s938);
[L7865]   COND FALSE  !(revert)
[L7881]               assert { :EventEmitted "Transfer_FreezableToken" } true;
[L7882]               assert { :EventEmitted "Freezed_FreezableToken" } true;
[L2456]   RET         call freezeTo~address~uint256~uint64_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s938, _amount_s938, _until_s938);
[L2457]               assume !revert && gas >= 0;
[L14251]  RET         call freezeTo~address~uint256~uint64_FreezableToken(this, msgsender_MSG, msgvalue_MSG, _to_s938, _amount_s938, _until_s938);
[L14388]  RET         call CorralChoice_MainToken(this);
[L14388]  CALL        call CorralChoice_MainToken(this);
[L14045]              havoc msgsender_MSG;
[L14046]              havoc msgvalue_MSG;
[L14047]              havoc choice;
[L14048]              havoc __ret_0_totalSupply;
[L14049]              havoc _owner_s729;
[L14050]              havoc balance_s729;
[L14051]              havoc _to_s1572;
[L14052]              havoc _value_s1572;
[L14053]              havoc _success_s1572;
[L14054]              havoc _owner_s395;
[L14055]              havoc _spender_s395;
[L14056]              havoc __ret_0_allowance;
[L14057]              havoc _from_s1551;
[L14058]              havoc _to_s1551;
[L14059]              havoc _value_s1551;
[L14060]              havoc _success_s1551;
[L14061]              havoc _spender_s379;
[L14062]              havoc _value_s379;
[L14063]              havoc __ret_0_approve;
[L14064]              havoc _spender_s437;
[L14065]              havoc _addedValue_s437;
[L14066]              havoc __ret_0_increaseApproval;
[L14067]              havoc _spender_s497;
[L14068]              havoc _subtractedValue_s497;
[L14069]              havoc __ret_0_decreaseApproval;
[L14070]              havoc __ret_0_owner;
[L14071]              havoc _newOwner_s558;
[L14072]              havoc __ret_0_mintingFinished;
[L14073]              havoc _to_s664;
[L14074]              havoc _amount_s664;
[L14075]              havoc __ret_0_mint;
[L14076]              havoc __ret_0_finishMinting;
[L14077]              havoc _owner_s742;
[L14078]              havoc balance_s742;
[L14079]              havoc _owner_s754;
[L14080]              havoc balance_s754;
[L14081]              havoc _addr_s792;
[L14082]              havoc count_s792;
[L14083]              havoc _addr_s849;
[L14084]              havoc _index_s849;
[L14085]              havoc _release_s849;
[L14086]              havoc _balance_s849;
[L14087]              havoc _to_s938;
[L14088]              havoc _amount_s938;
[L14089]              havoc _until_s938;
[L14090]              havoc tokens_s1107;
[L14091]              havoc _value_s1261;
[L14092]              havoc __ret_0_paused;
[L14093]              havoc _to_s1449;
[L14094]              havoc _amount_s1449;
[L14095]              havoc _until_s1449;
[L14096]              havoc __ret_0_mintAndFreeze;
[L14097]              havoc __ret_0_TOKEN_DECIMALS;
[L14098]              havoc __ret_0_TOKEN_DECIMALS_UINT8;
[L14099]              havoc __ret_0_TOKEN_DECIMAL_MULTIPLIER;
[L14100]              havoc __ret_0_TOKEN_NAME;
[L14101]              havoc __ret_0_TOKEN_SYMBOL;
[L14102]              havoc __ret_0_PAUSED;
[L14103]              havoc __ret_0_TARGET_USER;
[L14104]              havoc __ret_0_CONTINUE_MINTING;
[L14105]              havoc __ret_0_initialized;
[L14106]              havoc _name_s1511;
[L14107]              havoc _symbol_s1519;
[L14108]              havoc _decimals_s1527;
[L14109]              havoc tmpNow;
[L14110]              havoc gas;
[L14111]              assume gas > 4000000 && gas <= 8000000;
[L14112]              tmpNow := now;
[L14113]              havoc now;
[L14114]              assume now > tmpNow;
[L14115]              assume msgsender_MSG != null;
[L14116]              assume DType[msgsender_MSG] != ERC20Basic;
[L14117]              assume DType[msgsender_MSG] != SafeMath;
[L14118]              assume DType[msgsender_MSG] != BasicToken;
[L14119]              assume DType[msgsender_MSG] != ERC20;
[L14120]              assume DType[msgsender_MSG] != StandardToken;
[L14121]              assume DType[msgsender_MSG] != Ownable;
[L14122]              assume DType[msgsender_MSG] != MintableToken;
[L14123]              assume DType[msgsender_MSG] != FreezableToken;
[L14124]              assume DType[msgsender_MSG] != BurnableToken;
[L14125]              assume DType[msgsender_MSG] != Pausable;
[L14126]              assume DType[msgsender_MSG] != FreezableMintableToken;
[L14127]              assume DType[msgsender_MSG] != Consts;
[L14128]              assume DType[msgsender_MSG] != MainToken;
[L14129]              Alloc[msgsender_MSG] := true;
[L14130]  COND FALSE  !(choice == 38)
[L14136]  COND TRUE   choice == 37
[L14137]              gas := gas - 21000;
[L14138]  COND TRUE   gas >= 0
[L14139]              assume msgvalue_MSG == 0;
[L14140]  CALL        call balance_s729 := balanceOf~address_FreezableToken(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume balances_BasicToken[this][_owner_s729] >= 0 && balances_BasicToken[this][_owner_s729] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_balanceOf_FreezableToken0 := true;
[L2]                  call_balanceOf_FreezableToken0 := false;
[L2]                  revert := revert_hold;
[L1999]               havoc __exception;
[L2000]               revert := false;
[L2001]   COND FALSE  !(__exception)
[L2038]   CALL        call balance_s729 := balanceOf~address_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L7405]   COND TRUE   DType[this] == MainToken
[L7406]   CALL        call __var_14 := balanceOf~address_BasicToken__success(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L6660]               __ret_0_ := balances_BasicToken[this][_owner_s214];
[L7406]   RET         call __var_14 := balanceOf~address_BasicToken__success(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L7407]   COND FALSE  !(revert)
[L7423]               balance_s729 := (__var_14 + freezingBalance_FreezableToken[this][_owner_s729]) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2038]   RET         call balance_s729 := balanceOf~address_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L2039]               assume !revert && gas >= 0;
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume !((((((((((balance_s729 == balances_BasicToken[this][_owner_s729] && totalSupply__BasicToken[this] == old(totalSupply__BasicToken[this])) && balances_BasicToken[this] == old(balances_BasicToken[this])) && allowed_StandardToken[this] == old(allowed_StandardToken[this])) && initialized_MainToken[this] == old(initialized_MainToken[this])) && paused_Pausable[this] == old(paused_Pausable[this])) && mintingFinished_MintableToken[this] == old(mintingFinished_MintableToken[this])) && owner_Ownable[this] == old(owner_Ownable[this])) && chains_FreezableToken[this] == old(chains_FreezableToken[this])) && freezings_FreezableToken[this] == old(freezings_FreezableToken[this])) && freezingBalance_FreezableToken[this] == old(freezingBalance_FreezableToken[this]));
[L2]                  revert := revert_hold;
[L14140]  RET         call balance_s729 := balanceOf~address_FreezableToken(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L14388]  RET         call CorralChoice_MainToken(this);

Loop:
[L14388]  CALL        call CorralChoice_MainToken(this);
[L14045]              havoc msgsender_MSG;
[L14046]              havoc msgvalue_MSG;
[L14047]              havoc choice;
[L14048]              havoc __ret_0_totalSupply;
[L14049]              havoc _owner_s729;
[L14050]              havoc balance_s729;
[L14051]              havoc _to_s1572;
[L14052]              havoc _value_s1572;
[L14053]              havoc _success_s1572;
[L14054]              havoc _owner_s395;
[L14055]              havoc _spender_s395;
[L14056]              havoc __ret_0_allowance;
[L14057]              havoc _from_s1551;
[L14058]              havoc _to_s1551;
[L14059]              havoc _value_s1551;
[L14060]              havoc _success_s1551;
[L14061]              havoc _spender_s379;
[L14062]              havoc _value_s379;
[L14063]              havoc __ret_0_approve;
[L14064]              havoc _spender_s437;
[L14065]              havoc _addedValue_s437;
[L14066]              havoc __ret_0_increaseApproval;
[L14067]              havoc _spender_s497;
[L14068]              havoc _subtractedValue_s497;
[L14069]              havoc __ret_0_decreaseApproval;
[L14070]              havoc __ret_0_owner;
[L14071]              havoc _newOwner_s558;
[L14072]              havoc __ret_0_mintingFinished;
[L14073]              havoc _to_s664;
[L14074]              havoc _amount_s664;
[L14075]              havoc __ret_0_mint;
[L14076]              havoc __ret_0_finishMinting;
[L14077]              havoc _owner_s742;
[L14078]              havoc balance_s742;
[L14079]              havoc _owner_s754;
[L14080]              havoc balance_s754;
[L14081]              havoc _addr_s792;
[L14082]              havoc count_s792;
[L14083]              havoc _addr_s849;
[L14084]              havoc _index_s849;
[L14085]              havoc _release_s849;
[L14086]              havoc _balance_s849;
[L14087]              havoc _to_s938;
[L14088]              havoc _amount_s938;
[L14089]              havoc _until_s938;
[L14090]              havoc tokens_s1107;
[L14091]              havoc _value_s1261;
[L14092]              havoc __ret_0_paused;
[L14093]              havoc _to_s1449;
[L14094]              havoc _amount_s1449;
[L14095]              havoc _until_s1449;
[L14096]              havoc __ret_0_mintAndFreeze;
[L14097]              havoc __ret_0_TOKEN_DECIMALS;
[L14098]              havoc __ret_0_TOKEN_DECIMALS_UINT8;
[L14099]              havoc __ret_0_TOKEN_DECIMAL_MULTIPLIER;
[L14100]              havoc __ret_0_TOKEN_NAME;
[L14101]              havoc __ret_0_TOKEN_SYMBOL;
[L14102]              havoc __ret_0_PAUSED;
[L14103]              havoc __ret_0_TARGET_USER;
[L14104]              havoc __ret_0_CONTINUE_MINTING;
[L14105]              havoc __ret_0_initialized;
[L14106]              havoc _name_s1511;
[L14107]              havoc _symbol_s1519;
[L14108]              havoc _decimals_s1527;
[L14109]              havoc tmpNow;
[L14110]              havoc gas;
[L14111]              assume gas > 4000000 && gas <= 8000000;
[L14112]              tmpNow := now;
[L14113]              havoc now;
[L14114]              assume now > tmpNow;
[L14115]              assume msgsender_MSG != null;
[L14116]              assume DType[msgsender_MSG] != ERC20Basic;
[L14117]              assume DType[msgsender_MSG] != SafeMath;
[L14118]              assume DType[msgsender_MSG] != BasicToken;
[L14119]              assume DType[msgsender_MSG] != ERC20;
[L14120]              assume DType[msgsender_MSG] != StandardToken;
[L14121]              assume DType[msgsender_MSG] != Ownable;
[L14122]              assume DType[msgsender_MSG] != MintableToken;
[L14123]              assume DType[msgsender_MSG] != FreezableToken;
[L14124]              assume DType[msgsender_MSG] != BurnableToken;
[L14125]              assume DType[msgsender_MSG] != Pausable;
[L14126]              assume DType[msgsender_MSG] != FreezableMintableToken;
[L14127]              assume DType[msgsender_MSG] != Consts;
[L14128]              assume DType[msgsender_MSG] != MainToken;
[L14129]              Alloc[msgsender_MSG] := true;
[L14130]  COND TRUE   choice == 38
[L14131]              gas := gas - 21000;
[L14132]  COND FALSE  !(gas >= 0)
[L14388]  RET         call CorralChoice_MainToken(this);

[2020-11-24 21:26:14,757 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-24 21:26:14,757 INFO  L82        PathProgramCache]: Analyzing trace with hash 1099249791, now seen corresponding path program 1 times
[2020-11-24 21:26:14,758 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-24 21:26:14,809 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-24 21:26:16,393 INFO  L134       CoverageAnalysis]: Checked inductivity of 9938 backedges. 107 proven. 89 refuted. 0 times theorem prover too weak. 9742 trivial. 0 not checked.
[2020-11-24 21:26:16,394 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-24 21:26:16,394 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [29] total 29
[2020-11-24 21:26:16,394 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-24 21:26:16,395 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 30 interpolants.
[2020-11-24 21:26:16,395 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=71, Invalid=799, Unknown=0, NotChecked=0, Total=870
[2020-11-24 21:26:16,395 INFO  L87              Difference]: Start difference. First operand 5584 states and 6275 transitions. cyclomatic complexity: 713 Second operand 30 states.
[2020-11-24 21:26:34,725 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-24 21:26:34,725 INFO  L93              Difference]: Finished difference Result 5637 states and 6369 transitions.
[2020-11-24 21:26:34,726 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 35 states. 
[2020-11-24 21:26:34,726 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 5637 states and 6369 transitions.
[2020-11-24 21:26:34,736 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-24 21:26:34,746 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 5637 states to 5637 states and 6369 transitions.
[2020-11-24 21:26:34,747 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1141
[2020-11-24 21:26:34,747 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1141
[2020-11-24 21:26:34,747 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 5637 states and 6369 transitions.
[2020-11-24 21:26:34,750 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-24 21:26:34,750 INFO  L728         BuchiCegarLoop]: Abstraction has 5637 states and 6369 transitions.
[2020-11-24 21:26:34,754 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 5637 states and 6369 transitions.
[2020-11-24 21:26:34,774 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 5637 to 5590.
[2020-11-24 21:26:34,774 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 5590 states.
[2020-11-24 21:26:34,779 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 5590 states to 5590 states and 6295 transitions.
[2020-11-24 21:26:34,779 INFO  L751         BuchiCegarLoop]: Abstraction has 5590 states and 6295 transitions.
[2020-11-24 21:26:34,779 INFO  L631         BuchiCegarLoop]: Abstraction has 5590 states and 6295 transitions.
[2020-11-24 21:26:34,779 INFO  L445         BuchiCegarLoop]: ======== Iteration 17============
[2020-11-24 21:26:34,780 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 5590 states and 6295 transitions.
[2020-11-24 21:26:34,784 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-24 21:26:34,784 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-24 21:26:34,784 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-24 21:26:34,786 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [38, 38, 38, 38, 38, 38, 38, 38, 38, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-24 21:26:34,787 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  success_balanceOf_FreezableToken0 := false;
[L2]                  call_balanceOf_FreezableToken0 := false;
[L2]      CALL        call main();
[L14378]              assume null == 0;
[L14379]  CALL        call this := FreshRefGenerator__success();
[L6396]               havoc newRef;
[L6397]               assume Alloc[newRef] == false;
[L6398]               Alloc[newRef] := true;
[L6399]               assume newRef != null;
[L14379]  RET         call this := FreshRefGenerator__success();
[L14380]              assume now >= 0;
[L14381]              assume DType[this] == MainToken;
[L14382]              assume msgvalue_MSG == 0;
[L14383]              gas := gas - 53000;
[L14384]  CALL        call MainToken_MainToken(this, msgsender_MSG, msgvalue_MSG);
[L4183]               havoc __exception;
[L4184]               revert := false;
[L4185]   COND FALSE  !(__exception)
[L4222]   CALL        call MainToken_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9205]   CALL        call Consts_Consts__success(this, msgsender_MSG, msgvalue_MSG);
[L9007]   CALL        call Consts_Consts_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8983]               assume msgsender_MSG != null;
[L8984]               Balance[this] := 0;
[L8985]               TOKEN_DECIMALS_Consts[this] := 18;
[L8986]               TOKEN_DECIMALS_UINT8_Consts[this] := 18;
[L8987]               TOKEN_DECIMAL_MULTIPLIER_Consts[this] := nonlinearPow(10, TOKEN_DECIMALS_Consts[this]) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8988]               TOKEN_NAME_Consts[this] := -1051245219;
[L8989]               TOKEN_SYMBOL_Consts[this] := -1804535220;
[L8990]               PAUSED_Consts[this] := false;
[L8991]               __var_52 := ConstantToRef(-210822415442009814958929812751043848690848471787);
[L8992]               TARGET_USER_Consts[this] := ConstantToRef(-210822415442009814958929812751043848690848471787);
[L8993]               CONTINUE_MINTING_Consts[this] := true;
[L9007]   RET         call Consts_Consts_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9008]   COND FALSE  !(revert)
[L9205]   RET         call Consts_Consts__success(this, msgsender_MSG, msgvalue_MSG);
[L9206]   COND FALSE  !(revert)
[L9209]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L9209]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L9210]   COND FALSE  !(revert)
[L9213]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6694]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6694]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6695]   COND FALSE  !(revert)
[L6698]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6675]               assume msgsender_MSG != null;
[L6676]               Balance[this] := 0;
[L6698]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6699]   COND FALSE  !(revert)
[L9213]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L9214]   COND FALSE  !(revert)
[L9217]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6565]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   COND FALSE  !(revert)
[L6569]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]               assume msgsender_MSG != null;
[L6544]               Balance[this] := 0;
[L6545]               balances_BasicToken[this] := zeroRefintArr();
[L6546]               sum_balances0[this] := 0;
[L6547]               totalSupply__BasicToken[this] := 0;
[L6569]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6570]   COND FALSE  !(revert)
[L9217]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9218]   COND FALSE  !(revert)
[L9221]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6746]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6746]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6747]   COND FALSE  !(revert)
[L6750]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6694]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6694]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6695]   COND FALSE  !(revert)
[L6698]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6675]               assume msgsender_MSG != null;
[L6676]               Balance[this] := 0;
[L6698]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6699]   COND FALSE  !(revert)
[L6750]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6751]   COND FALSE  !(revert)
[L6754]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6565]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   COND FALSE  !(revert)
[L6569]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]               assume msgsender_MSG != null;
[L6544]               Balance[this] := 0;
[L6545]               balances_BasicToken[this] := zeroRefintArr();
[L6546]               sum_balances0[this] := 0;
[L6547]               totalSupply__BasicToken[this] := 0;
[L6569]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6570]   COND FALSE  !(revert)
[L6754]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6755]   COND FALSE  !(revert)
[L6758]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6717]               assume msgsender_MSG != null;
[L6718]               Balance[this] := 0;
[L6719]               allowed_StandardToken[this] := zeroRefRefintArr();
[L6720]               sum_allowed1[this] := 0;
[L6758]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6759]   COND FALSE  !(revert)
[L9221]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9222]   COND FALSE  !(revert)
[L9225]   CALL        call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7353]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L7353]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7354]   COND FALSE  !(revert)
[L7357]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6694]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6694]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6695]   COND FALSE  !(revert)
[L6698]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6675]               assume msgsender_MSG != null;
[L6676]               Balance[this] := 0;
[L6698]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6699]   COND FALSE  !(revert)
[L7357]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7358]   COND FALSE  !(revert)
[L7361]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6565]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   COND FALSE  !(revert)
[L6569]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]               assume msgsender_MSG != null;
[L6544]               Balance[this] := 0;
[L6545]               balances_BasicToken[this] := zeroRefintArr();
[L6546]               sum_balances0[this] := 0;
[L6547]               totalSupply__BasicToken[this] := 0;
[L6569]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6570]   COND FALSE  !(revert)
[L7361]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7362]   COND FALSE  !(revert)
[L7365]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6746]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6746]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6747]   COND FALSE  !(revert)
[L6750]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6694]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6694]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6695]   COND FALSE  !(revert)
[L6698]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6675]               assume msgsender_MSG != null;
[L6676]               Balance[this] := 0;
[L6698]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6699]   COND FALSE  !(revert)
[L6750]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6751]   COND FALSE  !(revert)
[L6754]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6565]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   COND FALSE  !(revert)
[L6569]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]               assume msgsender_MSG != null;
[L6544]               Balance[this] := 0;
[L6545]               balances_BasicToken[this] := zeroRefintArr();
[L6546]               sum_balances0[this] := 0;
[L6547]               totalSupply__BasicToken[this] := 0;
[L6569]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6570]   COND FALSE  !(revert)
[L6754]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6755]   COND FALSE  !(revert)
[L6758]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6717]               assume msgsender_MSG != null;
[L6718]               Balance[this] := 0;
[L6719]               allowed_StandardToken[this] := zeroRefRefintArr();
[L6720]               sum_allowed1[this] := 0;
[L6758]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6759]   COND FALSE  !(revert)
[L7365]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7366]   COND FALSE  !(revert)
[L7369]   CALL        call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7316]               assume msgsender_MSG != null;
[L7317]               Balance[this] := 0;
[L7318]               chains_FreezableToken[this] := zerointintArr();
[L7319]               sum_chains2[this] := 0;
[L7320]               freezings_FreezableToken[this] := zerointintArr();
[L7321]               sum_freezings3[this] := 0;
[L7322]               freezingBalance_FreezableToken[this] := zeroRefintArr();
[L7323]               sum_freezingBalance4[this] := 0;
[L7369]   RET         call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7370]   COND FALSE  !(revert)
[L9225]   RET         call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9226]   COND FALSE  !(revert)
[L9229]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6988]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6971]               assume msgsender_MSG != null;
[L6972]               Balance[this] := 0;
[L6973]               owner_Ownable[this] := null;
[L6975]               owner_Ownable[this] := msgsender_MSG;
[L6988]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6989]   COND FALSE  !(revert)
[L9229]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L9230]   COND FALSE  !(revert)
[L9233]   CALL        call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7172]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L7172]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7173]   COND FALSE  !(revert)
[L7176]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6694]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6694]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6695]   COND FALSE  !(revert)
[L6698]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6675]               assume msgsender_MSG != null;
[L6676]               Balance[this] := 0;
[L6698]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6699]   COND FALSE  !(revert)
[L7176]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7177]   COND FALSE  !(revert)
[L7180]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6565]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   COND FALSE  !(revert)
[L6569]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]               assume msgsender_MSG != null;
[L6544]               Balance[this] := 0;
[L6545]               balances_BasicToken[this] := zeroRefintArr();
[L6546]               sum_balances0[this] := 0;
[L6547]               totalSupply__BasicToken[this] := 0;
[L6569]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6570]   COND FALSE  !(revert)
[L7180]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7181]   COND FALSE  !(revert)
[L7184]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6746]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6746]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6747]   COND FALSE  !(revert)
[L6750]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6694]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6694]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6695]   COND FALSE  !(revert)
[L6698]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6675]               assume msgsender_MSG != null;
[L6676]               Balance[this] := 0;
[L6698]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6699]   COND FALSE  !(revert)
[L6750]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6751]   COND FALSE  !(revert)
[L6754]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6565]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   COND FALSE  !(revert)
[L6569]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]               assume msgsender_MSG != null;
[L6544]               Balance[this] := 0;
[L6545]               balances_BasicToken[this] := zeroRefintArr();
[L6546]               sum_balances0[this] := 0;
[L6547]               totalSupply__BasicToken[this] := 0;
[L6569]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6570]   COND FALSE  !(revert)
[L6754]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6755]   COND FALSE  !(revert)
[L6758]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6717]               assume msgsender_MSG != null;
[L6718]               Balance[this] := 0;
[L6719]               allowed_StandardToken[this] := zeroRefRefintArr();
[L6720]               sum_allowed1[this] := 0;
[L6758]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6759]   COND FALSE  !(revert)
[L7184]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7185]   COND FALSE  !(revert)
[L7188]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6988]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6971]               assume msgsender_MSG != null;
[L6972]               Balance[this] := 0;
[L6973]               owner_Ownable[this] := null;
[L6975]               owner_Ownable[this] := msgsender_MSG;
[L6988]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6989]   COND FALSE  !(revert)
[L7188]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7189]   COND FALSE  !(revert)
[L7192]   CALL        call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7136]               assume msgsender_MSG != null;
[L7137]               Balance[this] := 0;
[L7138]               mintingFinished_MintableToken[this] := false;
[L7192]   RET         call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7193]   COND FALSE  !(revert)
[L9233]   RET         call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9234]   COND FALSE  !(revert)
[L9237]   CALL        call FreezableMintableToken_FreezableMintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L8792]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L8792]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L8793]   COND FALSE  !(revert)
[L8796]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6694]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6694]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6695]   COND FALSE  !(revert)
[L6698]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6675]               assume msgsender_MSG != null;
[L6676]               Balance[this] := 0;
[L6698]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6699]   COND FALSE  !(revert)
[L8796]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L8797]   COND FALSE  !(revert)
[L8800]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6565]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   COND FALSE  !(revert)
[L6569]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]               assume msgsender_MSG != null;
[L6544]               Balance[this] := 0;
[L6545]               balances_BasicToken[this] := zeroRefintArr();
[L6546]               sum_balances0[this] := 0;
[L6547]               totalSupply__BasicToken[this] := 0;
[L6569]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6570]   COND FALSE  !(revert)
[L8800]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L8801]   COND FALSE  !(revert)
[L8804]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6746]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6746]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6747]   COND FALSE  !(revert)
[L6750]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6694]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6694]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6695]   COND FALSE  !(revert)
[L6698]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6675]               assume msgsender_MSG != null;
[L6676]               Balance[this] := 0;
[L6698]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6699]   COND FALSE  !(revert)
[L6750]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6751]   COND FALSE  !(revert)
[L6754]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6565]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   COND FALSE  !(revert)
[L6569]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]               assume msgsender_MSG != null;
[L6544]               Balance[this] := 0;
[L6545]               balances_BasicToken[this] := zeroRefintArr();
[L6546]               sum_balances0[this] := 0;
[L6547]               totalSupply__BasicToken[this] := 0;
[L6569]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6570]   COND FALSE  !(revert)
[L6754]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6755]   COND FALSE  !(revert)
[L6758]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6717]               assume msgsender_MSG != null;
[L6718]               Balance[this] := 0;
[L6719]               allowed_StandardToken[this] := zeroRefRefintArr();
[L6720]               sum_allowed1[this] := 0;
[L6758]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6759]   COND FALSE  !(revert)
[L8804]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L8805]   COND FALSE  !(revert)
[L8808]   CALL        call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7353]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L7353]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7354]   COND FALSE  !(revert)
[L7357]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6694]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6694]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6695]   COND FALSE  !(revert)
[L6698]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6675]               assume msgsender_MSG != null;
[L6676]               Balance[this] := 0;
[L6698]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6699]   COND FALSE  !(revert)
[L7357]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7358]   COND FALSE  !(revert)
[L7361]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6565]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   COND FALSE  !(revert)
[L6569]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]               assume msgsender_MSG != null;
[L6544]               Balance[this] := 0;
[L6545]               balances_BasicToken[this] := zeroRefintArr();
[L6546]               sum_balances0[this] := 0;
[L6547]               totalSupply__BasicToken[this] := 0;
[L6569]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6570]   COND FALSE  !(revert)
[L7361]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7362]   COND FALSE  !(revert)
[L7365]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6746]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6746]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6747]   COND FALSE  !(revert)
[L6750]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6694]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6694]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6695]   COND FALSE  !(revert)
[L6698]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6675]               assume msgsender_MSG != null;
[L6676]               Balance[this] := 0;
[L6698]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6699]   COND FALSE  !(revert)
[L6750]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6751]   COND FALSE  !(revert)
[L6754]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6565]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   COND FALSE  !(revert)
[L6569]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]               assume msgsender_MSG != null;
[L6544]               Balance[this] := 0;
[L6545]               balances_BasicToken[this] := zeroRefintArr();
[L6546]               sum_balances0[this] := 0;
[L6547]               totalSupply__BasicToken[this] := 0;
[L6569]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6570]   COND FALSE  !(revert)
[L6754]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6755]   COND FALSE  !(revert)
[L6758]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6717]               assume msgsender_MSG != null;
[L6718]               Balance[this] := 0;
[L6719]               allowed_StandardToken[this] := zeroRefRefintArr();
[L6720]               sum_allowed1[this] := 0;
[L6758]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6759]   COND FALSE  !(revert)
[L7365]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7366]   COND FALSE  !(revert)
[L7369]   CALL        call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7316]               assume msgsender_MSG != null;
[L7317]               Balance[this] := 0;
[L7318]               chains_FreezableToken[this] := zerointintArr();
[L7319]               sum_chains2[this] := 0;
[L7320]               freezings_FreezableToken[this] := zerointintArr();
[L7321]               sum_freezings3[this] := 0;
[L7322]               freezingBalance_FreezableToken[this] := zeroRefintArr();
[L7323]               sum_freezingBalance4[this] := 0;
[L7369]   RET         call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7370]   COND FALSE  !(revert)
[L8808]   RET         call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L8809]   COND FALSE  !(revert)
[L8812]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6988]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6971]               assume msgsender_MSG != null;
[L6972]               Balance[this] := 0;
[L6973]               owner_Ownable[this] := null;
[L6975]               owner_Ownable[this] := msgsender_MSG;
[L6988]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6989]   COND FALSE  !(revert)
[L8812]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L8813]   COND FALSE  !(revert)
[L8816]   CALL        call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7172]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L7172]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7173]   COND FALSE  !(revert)
[L7176]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6694]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6694]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6695]   COND FALSE  !(revert)
[L6698]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6675]               assume msgsender_MSG != null;
[L6676]               Balance[this] := 0;
[L6698]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6699]   COND FALSE  !(revert)
[L7176]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7177]   COND FALSE  !(revert)
[L7180]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6565]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   COND FALSE  !(revert)
[L6569]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]               assume msgsender_MSG != null;
[L6544]               Balance[this] := 0;
[L6545]               balances_BasicToken[this] := zeroRefintArr();
[L6546]               sum_balances0[this] := 0;
[L6547]               totalSupply__BasicToken[this] := 0;
[L6569]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6570]   COND FALSE  !(revert)
[L7180]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7181]   COND FALSE  !(revert)
[L7184]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6746]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6746]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6747]   COND FALSE  !(revert)
[L6750]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6694]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6694]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6695]   COND FALSE  !(revert)
[L6698]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6675]               assume msgsender_MSG != null;
[L6676]               Balance[this] := 0;
[L6698]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6699]   COND FALSE  !(revert)
[L6750]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6751]   COND FALSE  !(revert)
[L6754]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6565]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   COND FALSE  !(revert)
[L6569]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]               assume msgsender_MSG != null;
[L6544]               Balance[this] := 0;
[L6545]               balances_BasicToken[this] := zeroRefintArr();
[L6546]               sum_balances0[this] := 0;
[L6547]               totalSupply__BasicToken[this] := 0;
[L6569]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6570]   COND FALSE  !(revert)
[L6754]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6755]   COND FALSE  !(revert)
[L6758]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6717]               assume msgsender_MSG != null;
[L6718]               Balance[this] := 0;
[L6719]               allowed_StandardToken[this] := zeroRefRefintArr();
[L6720]               sum_allowed1[this] := 0;
[L6758]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6759]   COND FALSE  !(revert)
[L7184]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7185]   COND FALSE  !(revert)
[L7188]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6988]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6971]               assume msgsender_MSG != null;
[L6972]               Balance[this] := 0;
[L6973]               owner_Ownable[this] := null;
[L6975]               owner_Ownable[this] := msgsender_MSG;
[L6988]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6989]   COND FALSE  !(revert)
[L7188]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7189]   COND FALSE  !(revert)
[L7192]   CALL        call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7136]               assume msgsender_MSG != null;
[L7137]               Balance[this] := 0;
[L7138]               mintingFinished_MintableToken[this] := false;
[L7192]   RET         call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7193]   COND FALSE  !(revert)
[L8816]   RET         call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L8817]   COND FALSE  !(revert)
[L8820]   CALL        call FreezableMintableToken_FreezableMintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8749]               assume msgsender_MSG != null;
[L8750]               Balance[this] := 0;
[L8820]   RET         call FreezableMintableToken_FreezableMintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8821]   COND FALSE  !(revert)
[L9237]   RET         call FreezableMintableToken_FreezableMintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9238]   COND FALSE  !(revert)
[L9241]   CALL        call BurnableToken_BurnableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L8536]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L8536]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L8537]   COND FALSE  !(revert)
[L8540]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6565]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   COND FALSE  !(revert)
[L6569]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]               assume msgsender_MSG != null;
[L6544]               Balance[this] := 0;
[L6545]               balances_BasicToken[this] := zeroRefintArr();
[L6546]               sum_balances0[this] := 0;
[L6547]               totalSupply__BasicToken[this] := 0;
[L6569]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6570]   COND FALSE  !(revert)
[L8540]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L8541]   COND FALSE  !(revert)
[L8544]   CALL        call BurnableToken_BurnableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8513]               assume msgsender_MSG != null;
[L8514]               Balance[this] := 0;
[L8544]   RET         call BurnableToken_BurnableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8545]   COND FALSE  !(revert)
[L9241]   RET         call BurnableToken_BurnableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9242]   COND FALSE  !(revert)
[L9245]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L8662]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6988]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6971]               assume msgsender_MSG != null;
[L6972]               Balance[this] := 0;
[L6973]               owner_Ownable[this] := null;
[L6975]               owner_Ownable[this] := msgsender_MSG;
[L6988]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6989]   COND FALSE  !(revert)
[L8662]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L8663]   COND FALSE  !(revert)
[L8666]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8642]               assume msgsender_MSG != null;
[L8643]               Balance[this] := 0;
[L8644]               paused_Pausable[this] := false;
[L8666]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8667]   COND FALSE  !(revert)
[L9245]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L9246]   COND FALSE  !(revert)
[L9249]   CALL        call MainToken_MainToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9133]               assume msgsender_MSG != null;
[L9134]               Balance[this] := 0;
[L9135]               initialized_MainToken[this] := false;
[L9137]   CALL        call init_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9404]   COND FALSE  !(!!initialized_MainToken[this])
[L9408]               initialized_MainToken[this] := true;
[L9409]   COND FALSE  !(PAUSED_Consts[this])
[L9419]   COND FALSE  !(!CONTINUE_MINTING_Consts[this])
[L9429]               assert { :EventEmitted "Initialized_MainToken" } true;
[L9137]   RET         call init_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9138]   COND FALSE  !(revert)
[L9141]   COND TRUE   DType[this] == MainToken
[L9142]   CALL        call transferOwnership~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, TARGET_USER_Consts[this]);
[L7055]   CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L12332]  COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L7055]   RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7056]   COND FALSE  !(revert)
[L7059]   COND TRUE   DType[this] == MainToken
[L7060]   CALL        call _transferOwnership~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, _newOwner_s558);
[L7103]               __var_11 := null;
[L7104]   COND FALSE  !(!(_newOwner_s581 != null))
[L7108]               assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L7109]               owner_Ownable[this] := _newOwner_s581;
[L7060]   RET         call _transferOwnership~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, _newOwner_s558);
[L7061]   COND FALSE  !(revert)
[L9142]   RET         call transferOwnership~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, TARGET_USER_Consts[this]);
[L9143]   COND FALSE  !(revert)
[L9249]   RET         call MainToken_MainToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9250]   COND FALSE  !(revert)
[L4222]   RET         call MainToken_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4223]               assume !revert && gas >= 0;
[L14384]  RET         call MainToken_MainToken(this, msgsender_MSG, msgvalue_MSG);
[L14385]              assume !revert && gas >= 0;
[L14388]  CALL        call CorralChoice_MainToken(this);
[L14045]              havoc msgsender_MSG;
[L14046]              havoc msgvalue_MSG;
[L14047]              havoc choice;
[L14048]              havoc __ret_0_totalSupply;
[L14049]              havoc _owner_s729;
[L14050]              havoc balance_s729;
[L14051]              havoc _to_s1572;
[L14052]              havoc _value_s1572;
[L14053]              havoc _success_s1572;
[L14054]              havoc _owner_s395;
[L14055]              havoc _spender_s395;
[L14056]              havoc __ret_0_allowance;
[L14057]              havoc _from_s1551;
[L14058]              havoc _to_s1551;
[L14059]              havoc _value_s1551;
[L14060]              havoc _success_s1551;
[L14061]              havoc _spender_s379;
[L14062]              havoc _value_s379;
[L14063]              havoc __ret_0_approve;
[L14064]              havoc _spender_s437;
[L14065]              havoc _addedValue_s437;
[L14066]              havoc __ret_0_increaseApproval;
[L14067]              havoc _spender_s497;
[L14068]              havoc _subtractedValue_s497;
[L14069]              havoc __ret_0_decreaseApproval;
[L14070]              havoc __ret_0_owner;
[L14071]              havoc _newOwner_s558;
[L14072]              havoc __ret_0_mintingFinished;
[L14073]              havoc _to_s664;
[L14074]              havoc _amount_s664;
[L14075]              havoc __ret_0_mint;
[L14076]              havoc __ret_0_finishMinting;
[L14077]              havoc _owner_s742;
[L14078]              havoc balance_s742;
[L14079]              havoc _owner_s754;
[L14080]              havoc balance_s754;
[L14081]              havoc _addr_s792;
[L14082]              havoc count_s792;
[L14083]              havoc _addr_s849;
[L14084]              havoc _index_s849;
[L14085]              havoc _release_s849;
[L14086]              havoc _balance_s849;
[L14087]              havoc _to_s938;
[L14088]              havoc _amount_s938;
[L14089]              havoc _until_s938;
[L14090]              havoc tokens_s1107;
[L14091]              havoc _value_s1261;
[L14092]              havoc __ret_0_paused;
[L14093]              havoc _to_s1449;
[L14094]              havoc _amount_s1449;
[L14095]              havoc _until_s1449;
[L14096]              havoc __ret_0_mintAndFreeze;
[L14097]              havoc __ret_0_TOKEN_DECIMALS;
[L14098]              havoc __ret_0_TOKEN_DECIMALS_UINT8;
[L14099]              havoc __ret_0_TOKEN_DECIMAL_MULTIPLIER;
[L14100]              havoc __ret_0_TOKEN_NAME;
[L14101]              havoc __ret_0_TOKEN_SYMBOL;
[L14102]              havoc __ret_0_PAUSED;
[L14103]              havoc __ret_0_TARGET_USER;
[L14104]              havoc __ret_0_CONTINUE_MINTING;
[L14105]              havoc __ret_0_initialized;
[L14106]              havoc _name_s1511;
[L14107]              havoc _symbol_s1519;
[L14108]              havoc _decimals_s1527;
[L14109]              havoc tmpNow;
[L14110]              havoc gas;
[L14111]              assume gas > 4000000 && gas <= 8000000;
[L14112]              tmpNow := now;
[L14113]              havoc now;
[L14114]              assume now > tmpNow;
[L14115]              assume msgsender_MSG != null;
[L14116]              assume DType[msgsender_MSG] != ERC20Basic;
[L14117]              assume DType[msgsender_MSG] != SafeMath;
[L14118]              assume DType[msgsender_MSG] != BasicToken;
[L14119]              assume DType[msgsender_MSG] != ERC20;
[L14120]              assume DType[msgsender_MSG] != StandardToken;
[L14121]              assume DType[msgsender_MSG] != Ownable;
[L14122]              assume DType[msgsender_MSG] != MintableToken;
[L14123]              assume DType[msgsender_MSG] != FreezableToken;
[L14124]              assume DType[msgsender_MSG] != BurnableToken;
[L14125]              assume DType[msgsender_MSG] != Pausable;
[L14126]              assume DType[msgsender_MSG] != FreezableMintableToken;
[L14127]              assume DType[msgsender_MSG] != Consts;
[L14128]              assume DType[msgsender_MSG] != MainToken;
[L14129]              Alloc[msgsender_MSG] := true;
[L14130]  COND FALSE  !(choice == 38)
[L14136]  COND FALSE  !(choice == 37)
[L14142]  COND FALSE  !(choice == 36)
[L14149]  COND FALSE  !(choice == 35)
[L14155]  COND FALSE  !(choice == 34)
[L14162]  COND FALSE  !(choice == 33)
[L14169]  COND FALSE  !(choice == 32)
[L14176]  COND FALSE  !(choice == 31)
[L14183]  COND FALSE  !(choice == 30)
[L14189]  COND FALSE  !(choice == 29)
[L14195]  COND FALSE  !(choice == 28)
[L14201]  COND FALSE  !(choice == 27)
[L14207]  COND FALSE  !(choice == 26)
[L14214]  COND FALSE  !(choice == 25)
[L14220]  COND FALSE  !(choice == 24)
[L14226]  COND FALSE  !(choice == 23)
[L14232]  COND FALSE  !(choice == 22)
[L14238]  COND FALSE  !(choice == 21)
[L14245]  COND FALSE  !(choice == 20)
[L14253]  COND FALSE  !(choice == 19)
[L14259]  COND FALSE  !(choice == 18)
[L14265]  COND FALSE  !(choice == 17)
[L14272]  COND FALSE  !(choice == 16)
[L14278]  COND FALSE  !(choice == 15)
[L14284]  COND FALSE  !(choice == 14)
[L14290]  COND TRUE   choice == 13
[L14291]              gas := gas - 21000;
[L14292]  COND TRUE   gas >= 0
[L14293]              assume _amount_s1449 >= 0 && _amount_s1449 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L14294]              assume _until_s1449 >= 0 && _until_s1449 < 18446744073709551616;
[L14295]              assume msgvalue_MSG == 0;
[L14296]  CALL        call __ret_0_mintAndFreeze := mintAndFreeze~address~uint256~uint64_FreezableMintableToken(this, msgsender_MSG, msgvalue_MSG, _to_s1449, _amount_s1449, _until_s1449);
[L3304]               havoc __exception;
[L3305]               revert := false;
[L3306]   COND FALSE  !(__exception)
[L3343]   CALL        call __ret_0_ := mintAndFreeze~address~uint256~uint64_FreezableMintableToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s1449, _amount_s1449, _until_s1449);
[L8899]   CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L12332]  COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L8899]   RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L8900]   COND FALSE  !(revert)
[L8903]   CALL        call canMint_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L12348]  COND FALSE  !(!!mintingFinished_MintableToken[this])
[L8903]   RET         call canMint_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L8904]   COND FALSE  !(revert)
[L8907]   CALL        call __var_48 := add~uint256~uint256_SafeMath__success(this, this, 0, totalSupply__BasicToken[this], _amount_s1449);
[L6523]               c_s122 := (a_s122 + b_s122) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6524]               assert c_s122 >= a_s122;
[L6525]               c_s122 := c_s122;
[L8907]   RET         call __var_48 := add~uint256~uint256_SafeMath__success(this, this, 0, totalSupply__BasicToken[this], _amount_s1449);
[L8908]   COND FALSE  !(revert)
[L8911]               totalSupply__BasicToken[this] := __var_48;
[L8912]               __var_49 := _until_s1449 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8913]   COND FALSE  !(DType[this] == MainToken)
[L8918]   COND TRUE   DType[this] == FreezableMintableToken
[L8919]   CALL        call currentKey_s1449 := toKey~address~uint256_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s1449, _until_s1449 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L8244]               result_s1122 := 39480772448535941496179204954862169494691089619604794184232587696854102179840;
[L8246]               havoc result_s1122;
[L8247]               havoc result_s1122;
[L8248]               havoc result_s1122;
[L8249]               havoc result_s1122;
[L8919]   RET         call currentKey_s1449 := toKey~address~uint256_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s1449, _until_s1449 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L8920]   COND FALSE  !(revert)
[L8926]               currentKey_s1449 := currentKey_s1449;
[L8927]   CALL        call __var_50 := add~uint256~uint256_SafeMath__success(this, this, 0, freezings_FreezableToken[this][currentKey_s1449], _amount_s1449);
[L6523]               c_s122 := (a_s122 + b_s122) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6524]               assert c_s122 >= a_s122;
[L6525]               c_s122 := c_s122;
[L8927]   RET         call __var_50 := add~uint256~uint256_SafeMath__success(this, this, 0, freezings_FreezableToken[this][currentKey_s1449], _amount_s1449);
[L8928]   COND FALSE  !(revert)
[L8931]               sum_freezings3[this] := sum_freezings3[this] - freezings_FreezableToken[this][currentKey_s1449];
[L8932]               freezings_FreezableToken[this][currentKey_s1449] := __var_50;
[L8933]               sum_freezings3[this] := sum_freezings3[this] + freezings_FreezableToken[this][currentKey_s1449];
[L8934]   CALL        call __var_51 := add~uint256~uint256_SafeMath__success(this, this, 0, freezingBalance_FreezableToken[this][_to_s1449], _amount_s1449);
[L6523]               c_s122 := (a_s122 + b_s122) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6524]               assert c_s122 >= a_s122;
[L6525]               c_s122 := c_s122;
[L8934]   RET         call __var_51 := add~uint256~uint256_SafeMath__success(this, this, 0, freezingBalance_FreezableToken[this][_to_s1449], _amount_s1449);
[L8935]   COND FALSE  !(revert)
[L8938]               sum_freezingBalance4[this] := sum_freezingBalance4[this] - freezingBalance_FreezableToken[this][_to_s1449];
[L8939]               freezingBalance_FreezableToken[this][_to_s1449] := __var_51;
[L8940]               sum_freezingBalance4[this] := sum_freezingBalance4[this] + freezingBalance_FreezableToken[this][_to_s1449];
[L8941]   COND FALSE  !(DType[this] == MainToken)
[L8946]   COND TRUE   DType[this] == FreezableMintableToken
[L8947]   CALL        call freeze~address~uint64_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s1449, _until_s1449);
[L8388]   COND FALSE  !(!(_until_s1240 > now))
[L8392]               __var_42 := _until_s1240 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8393]   COND FALSE  !(DType[this] == MainToken)
[L8398]   COND FALSE  !(DType[this] == FreezableMintableToken)
[L8403]   COND TRUE   DType[this] == FreezableToken
[L8404]   CALL        call key_s1240 := toKey~address~uint256_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s1240, _until_s1240 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L8244]               result_s1122 := 39480772448535941496179204954862169494691089619604794184232587696854102179840;
[L8246]               havoc result_s1122;
[L8247]               havoc result_s1122;
[L8248]               havoc result_s1122;
[L8249]               havoc result_s1122;
[L8404]   RET         call key_s1240 := toKey~address~uint256_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s1240, _until_s1240 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L8405]   COND FALSE  !(revert)
[L8411]               key_s1240 := key_s1240;
[L8412]               __var_43 := 0 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8413]   COND FALSE  !(DType[this] == MainToken)
[L8418]   COND FALSE  !(DType[this] == FreezableMintableToken)
[L8423]   COND TRUE   DType[this] == FreezableToken
[L8424]   CALL        call parentKey_s1240 := toKey~address~uint256_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s1240, 0 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L8244]               result_s1122 := 39480772448535941496179204954862169494691089619604794184232587696854102179840;
[L8246]               havoc result_s1122;
[L8247]               havoc result_s1122;
[L8248]               havoc result_s1122;
[L8249]               havoc result_s1122;
[L8424]   RET         call parentKey_s1240 := toKey~address~uint256_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s1240, 0 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L8425]   COND FALSE  !(revert)
[L8431]               parentKey_s1240 := parentKey_s1240;
[L8432]               next_s1240 := chains_FreezableToken[this][parentKey_s1240];
[L8433]   COND TRUE   next_s1240 == 0
[L8434]               sum_chains2[this] := sum_chains2[this] - chains_FreezableToken[this][parentKey_s1240];
[L8435]               chains_FreezableToken[this][parentKey_s1240] := _until_s1240;
[L8436]               sum_chains2[this] := sum_chains2[this] + chains_FreezableToken[this][parentKey_s1240];
[L8947]   RET         call freeze~address~uint64_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s1449, _until_s1449);
[L8948]   COND FALSE  !(revert)
[L8954]               assert { :EventEmitted "Mint_FreezableMintableToken" } true;
[L8955]               assert { :EventEmitted "Freezed_FreezableMintableToken" } true;
[L8956]               assert { :EventEmitted "Transfer_FreezableMintableToken" } true;
[L8957]               __ret_0_ := true;
[L3343]   RET         call __ret_0_ := mintAndFreeze~address~uint256~uint64_FreezableMintableToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s1449, _amount_s1449, _until_s1449);
[L3344]               assume !revert && gas >= 0;
[L14296]  RET         call __ret_0_mintAndFreeze := mintAndFreeze~address~uint256~uint64_FreezableMintableToken(this, msgsender_MSG, msgvalue_MSG, _to_s1449, _amount_s1449, _until_s1449);
[L14388]  RET         call CorralChoice_MainToken(this);
[L14388]  CALL        call CorralChoice_MainToken(this);
[L14045]              havoc msgsender_MSG;
[L14046]              havoc msgvalue_MSG;
[L14047]              havoc choice;
[L14048]              havoc __ret_0_totalSupply;
[L14049]              havoc _owner_s729;
[L14050]              havoc balance_s729;
[L14051]              havoc _to_s1572;
[L14052]              havoc _value_s1572;
[L14053]              havoc _success_s1572;
[L14054]              havoc _owner_s395;
[L14055]              havoc _spender_s395;
[L14056]              havoc __ret_0_allowance;
[L14057]              havoc _from_s1551;
[L14058]              havoc _to_s1551;
[L14059]              havoc _value_s1551;
[L14060]              havoc _success_s1551;
[L14061]              havoc _spender_s379;
[L14062]              havoc _value_s379;
[L14063]              havoc __ret_0_approve;
[L14064]              havoc _spender_s437;
[L14065]              havoc _addedValue_s437;
[L14066]              havoc __ret_0_increaseApproval;
[L14067]              havoc _spender_s497;
[L14068]              havoc _subtractedValue_s497;
[L14069]              havoc __ret_0_decreaseApproval;
[L14070]              havoc __ret_0_owner;
[L14071]              havoc _newOwner_s558;
[L14072]              havoc __ret_0_mintingFinished;
[L14073]              havoc _to_s664;
[L14074]              havoc _amount_s664;
[L14075]              havoc __ret_0_mint;
[L14076]              havoc __ret_0_finishMinting;
[L14077]              havoc _owner_s742;
[L14078]              havoc balance_s742;
[L14079]              havoc _owner_s754;
[L14080]              havoc balance_s754;
[L14081]              havoc _addr_s792;
[L14082]              havoc count_s792;
[L14083]              havoc _addr_s849;
[L14084]              havoc _index_s849;
[L14085]              havoc _release_s849;
[L14086]              havoc _balance_s849;
[L14087]              havoc _to_s938;
[L14088]              havoc _amount_s938;
[L14089]              havoc _until_s938;
[L14090]              havoc tokens_s1107;
[L14091]              havoc _value_s1261;
[L14092]              havoc __ret_0_paused;
[L14093]              havoc _to_s1449;
[L14094]              havoc _amount_s1449;
[L14095]              havoc _until_s1449;
[L14096]              havoc __ret_0_mintAndFreeze;
[L14097]              havoc __ret_0_TOKEN_DECIMALS;
[L14098]              havoc __ret_0_TOKEN_DECIMALS_UINT8;
[L14099]              havoc __ret_0_TOKEN_DECIMAL_MULTIPLIER;
[L14100]              havoc __ret_0_TOKEN_NAME;
[L14101]              havoc __ret_0_TOKEN_SYMBOL;
[L14102]              havoc __ret_0_PAUSED;
[L14103]              havoc __ret_0_TARGET_USER;
[L14104]              havoc __ret_0_CONTINUE_MINTING;
[L14105]              havoc __ret_0_initialized;
[L14106]              havoc _name_s1511;
[L14107]              havoc _symbol_s1519;
[L14108]              havoc _decimals_s1527;
[L14109]              havoc tmpNow;
[L14110]              havoc gas;
[L14111]              assume gas > 4000000 && gas <= 8000000;
[L14112]              tmpNow := now;
[L14113]              havoc now;
[L14114]              assume now > tmpNow;
[L14115]              assume msgsender_MSG != null;
[L14116]              assume DType[msgsender_MSG] != ERC20Basic;
[L14117]              assume DType[msgsender_MSG] != SafeMath;
[L14118]              assume DType[msgsender_MSG] != BasicToken;
[L14119]              assume DType[msgsender_MSG] != ERC20;
[L14120]              assume DType[msgsender_MSG] != StandardToken;
[L14121]              assume DType[msgsender_MSG] != Ownable;
[L14122]              assume DType[msgsender_MSG] != MintableToken;
[L14123]              assume DType[msgsender_MSG] != FreezableToken;
[L14124]              assume DType[msgsender_MSG] != BurnableToken;
[L14125]              assume DType[msgsender_MSG] != Pausable;
[L14126]              assume DType[msgsender_MSG] != FreezableMintableToken;
[L14127]              assume DType[msgsender_MSG] != Consts;
[L14128]              assume DType[msgsender_MSG] != MainToken;
[L14129]              Alloc[msgsender_MSG] := true;
[L14130]  COND FALSE  !(choice == 38)
[L14136]  COND TRUE   choice == 37
[L14137]              gas := gas - 21000;
[L14138]  COND TRUE   gas >= 0
[L14139]              assume msgvalue_MSG == 0;
[L14140]  CALL        call balance_s729 := balanceOf~address_FreezableToken(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume balances_BasicToken[this][_owner_s729] >= 0 && balances_BasicToken[this][_owner_s729] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_balanceOf_FreezableToken0 := true;
[L2]                  call_balanceOf_FreezableToken0 := false;
[L2]                  revert := revert_hold;
[L1999]               havoc __exception;
[L2000]               revert := false;
[L2001]   COND FALSE  !(__exception)
[L2038]   CALL        call balance_s729 := balanceOf~address_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L7405]   COND TRUE   DType[this] == MainToken
[L7406]   CALL        call __var_14 := balanceOf~address_BasicToken__success(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L6660]               __ret_0_ := balances_BasicToken[this][_owner_s214];
[L7406]   RET         call __var_14 := balanceOf~address_BasicToken__success(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L7407]   COND FALSE  !(revert)
[L7423]               balance_s729 := (__var_14 + freezingBalance_FreezableToken[this][_owner_s729]) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2038]   RET         call balance_s729 := balanceOf~address_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L2039]               assume !revert && gas >= 0;
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume !((((((((((balance_s729 == balances_BasicToken[this][_owner_s729] && totalSupply__BasicToken[this] == old(totalSupply__BasicToken[this])) && balances_BasicToken[this] == old(balances_BasicToken[this])) && allowed_StandardToken[this] == old(allowed_StandardToken[this])) && initialized_MainToken[this] == old(initialized_MainToken[this])) && paused_Pausable[this] == old(paused_Pausable[this])) && mintingFinished_MintableToken[this] == old(mintingFinished_MintableToken[this])) && owner_Ownable[this] == old(owner_Ownable[this])) && chains_FreezableToken[this] == old(chains_FreezableToken[this])) && freezings_FreezableToken[this] == old(freezings_FreezableToken[this])) && freezingBalance_FreezableToken[this] == old(freezingBalance_FreezableToken[this]));
[L2]                  revert := revert_hold;
[L14140]  RET         call balance_s729 := balanceOf~address_FreezableToken(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L14388]  RET         call CorralChoice_MainToken(this);

Loop:
[L14388]  CALL        call CorralChoice_MainToken(this);
[L14045]              havoc msgsender_MSG;
[L14046]              havoc msgvalue_MSG;
[L14047]              havoc choice;
[L14048]              havoc __ret_0_totalSupply;
[L14049]              havoc _owner_s729;
[L14050]              havoc balance_s729;
[L14051]              havoc _to_s1572;
[L14052]              havoc _value_s1572;
[L14053]              havoc _success_s1572;
[L14054]              havoc _owner_s395;
[L14055]              havoc _spender_s395;
[L14056]              havoc __ret_0_allowance;
[L14057]              havoc _from_s1551;
[L14058]              havoc _to_s1551;
[L14059]              havoc _value_s1551;
[L14060]              havoc _success_s1551;
[L14061]              havoc _spender_s379;
[L14062]              havoc _value_s379;
[L14063]              havoc __ret_0_approve;
[L14064]              havoc _spender_s437;
[L14065]              havoc _addedValue_s437;
[L14066]              havoc __ret_0_increaseApproval;
[L14067]              havoc _spender_s497;
[L14068]              havoc _subtractedValue_s497;
[L14069]              havoc __ret_0_decreaseApproval;
[L14070]              havoc __ret_0_owner;
[L14071]              havoc _newOwner_s558;
[L14072]              havoc __ret_0_mintingFinished;
[L14073]              havoc _to_s664;
[L14074]              havoc _amount_s664;
[L14075]              havoc __ret_0_mint;
[L14076]              havoc __ret_0_finishMinting;
[L14077]              havoc _owner_s742;
[L14078]              havoc balance_s742;
[L14079]              havoc _owner_s754;
[L14080]              havoc balance_s754;
[L14081]              havoc _addr_s792;
[L14082]              havoc count_s792;
[L14083]              havoc _addr_s849;
[L14084]              havoc _index_s849;
[L14085]              havoc _release_s849;
[L14086]              havoc _balance_s849;
[L14087]              havoc _to_s938;
[L14088]              havoc _amount_s938;
[L14089]              havoc _until_s938;
[L14090]              havoc tokens_s1107;
[L14091]              havoc _value_s1261;
[L14092]              havoc __ret_0_paused;
[L14093]              havoc _to_s1449;
[L14094]              havoc _amount_s1449;
[L14095]              havoc _until_s1449;
[L14096]              havoc __ret_0_mintAndFreeze;
[L14097]              havoc __ret_0_TOKEN_DECIMALS;
[L14098]              havoc __ret_0_TOKEN_DECIMALS_UINT8;
[L14099]              havoc __ret_0_TOKEN_DECIMAL_MULTIPLIER;
[L14100]              havoc __ret_0_TOKEN_NAME;
[L14101]              havoc __ret_0_TOKEN_SYMBOL;
[L14102]              havoc __ret_0_PAUSED;
[L14103]              havoc __ret_0_TARGET_USER;
[L14104]              havoc __ret_0_CONTINUE_MINTING;
[L14105]              havoc __ret_0_initialized;
[L14106]              havoc _name_s1511;
[L14107]              havoc _symbol_s1519;
[L14108]              havoc _decimals_s1527;
[L14109]              havoc tmpNow;
[L14110]              havoc gas;
[L14111]              assume gas > 4000000 && gas <= 8000000;
[L14112]              tmpNow := now;
[L14113]              havoc now;
[L14114]              assume now > tmpNow;
[L14115]              assume msgsender_MSG != null;
[L14116]              assume DType[msgsender_MSG] != ERC20Basic;
[L14117]              assume DType[msgsender_MSG] != SafeMath;
[L14118]              assume DType[msgsender_MSG] != BasicToken;
[L14119]              assume DType[msgsender_MSG] != ERC20;
[L14120]              assume DType[msgsender_MSG] != StandardToken;
[L14121]              assume DType[msgsender_MSG] != Ownable;
[L14122]              assume DType[msgsender_MSG] != MintableToken;
[L14123]              assume DType[msgsender_MSG] != FreezableToken;
[L14124]              assume DType[msgsender_MSG] != BurnableToken;
[L14125]              assume DType[msgsender_MSG] != Pausable;
[L14126]              assume DType[msgsender_MSG] != FreezableMintableToken;
[L14127]              assume DType[msgsender_MSG] != Consts;
[L14128]              assume DType[msgsender_MSG] != MainToken;
[L14129]              Alloc[msgsender_MSG] := true;
[L14130]  COND FALSE  !(choice == 38)
[L14136]  COND FALSE  !(choice == 37)
[L14142]  COND FALSE  !(choice == 36)
[L14149]  COND FALSE  !(choice == 35)
[L14155]  COND FALSE  !(choice == 34)
[L14162]  COND FALSE  !(choice == 33)
[L14169]  COND FALSE  !(choice == 32)
[L14176]  COND FALSE  !(choice == 31)
[L14183]  COND FALSE  !(choice == 30)
[L14189]  COND FALSE  !(choice == 29)
[L14195]  COND FALSE  !(choice == 28)
[L14201]  COND FALSE  !(choice == 27)
[L14207]  COND FALSE  !(choice == 26)
[L14214]  COND FALSE  !(choice == 25)
[L14220]  COND FALSE  !(choice == 24)
[L14226]  COND FALSE  !(choice == 23)
[L14232]  COND FALSE  !(choice == 22)
[L14238]  COND FALSE  !(choice == 21)
[L14245]  COND FALSE  !(choice == 20)
[L14253]  COND TRUE   choice == 19
[L14254]              gas := gas - 21000;
[L14255]  COND TRUE   gas >= 0
[L14256]              assume msgvalue_MSG == 0;
[L14257]  CALL        call releaseOnce_FreezableToken(this, msgsender_MSG, msgvalue_MSG);
[L2507]               havoc __exception;
[L2508]               revert := false;
[L2509]   COND FALSE  !(__exception)
[L2546]   CALL        call releaseOnce_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7989]               __var_31 := 0 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7990]   COND FALSE  !(DType[this] == MainToken)
[L7995]   COND TRUE   DType[this] == FreezableMintableToken
[L7996]   CALL        call headKey_s1054 := toKey~address~uint256_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 0 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L8244]               result_s1122 := 39480772448535941496179204954862169494691089619604794184232587696854102179840;
[L8246]               havoc result_s1122;
[L8247]               havoc result_s1122;
[L8248]               havoc result_s1122;
[L8249]               havoc result_s1122;
[L7996]   RET         call headKey_s1054 := toKey~address~uint256_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 0 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L7997]   COND FALSE  !(revert)
[L8008]               headKey_s1054 := headKey_s1054;
[L8009]               head_s1054 := chains_FreezableToken[this][headKey_s1054];
[L8010]   COND FALSE  !(!(head_s1054 != 0))
[L8014]               __var_32 := now % 18446744073709551616;
[L8015]   COND FALSE  !(!(now % 18446744073709551616 > head_s1054))
[L8019]               __var_33 := head_s1054 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8020]   COND FALSE  !(DType[this] == MainToken)
[L8025]   COND FALSE  !(DType[this] == FreezableMintableToken)
[L8030]   COND TRUE   DType[this] == FreezableToken
[L8031]   CALL        call currentKey_s1054 := toKey~address~uint256_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, head_s1054 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L8244]               result_s1122 := 39480772448535941496179204954862169494691089619604794184232587696854102179840;
[L8246]               havoc result_s1122;
[L8247]               havoc result_s1122;
[L8248]               havoc result_s1122;
[L8249]               havoc result_s1122;
[L8031]   RET         call currentKey_s1054 := toKey~address~uint256_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, head_s1054 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L8032]   COND FALSE  !(revert)
[L8038]               currentKey_s1054 := currentKey_s1054;
[L8039]               next_s1054 := chains_FreezableToken[this][currentKey_s1054];
[L8040]               amount_s1054 := freezings_FreezableToken[this][currentKey_s1054];
[L8041]               sum_freezings3[this] := sum_freezings3[this] - freezings_FreezableToken[this][currentKey_s1054];
[L8042]               freezings_FreezableToken[this][currentKey_s1054] := 0;
[L8043]   CALL        call __var_34 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][msgsender_MSG], amount_s1054);
[L6523]               c_s122 := (a_s122 + b_s122) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6524]               assert c_s122 >= a_s122;
[L6525]               c_s122 := c_s122;
[L8043]   RET         call __var_34 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][msgsender_MSG], amount_s1054);
[L8044]   COND FALSE  !(revert)
[L8047]               sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][msgsender_MSG];
[L8048]               balances_BasicToken[this][msgsender_MSG] := __var_34;
[L8049]               sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][msgsender_MSG];
[L8050]   CALL        call __var_35 := sub~uint256~uint256_SafeMath__success(this, this, 0, freezingBalance_FreezableToken[this][msgsender_MSG], amount_s1054);
[L6509]               assert b_s98 <= a_s98;
[L6510]               __ret_0_ := (a_s98 - b_s98) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8050]   RET         call __var_35 := sub~uint256~uint256_SafeMath__success(this, this, 0, freezingBalance_FreezableToken[this][msgsender_MSG], amount_s1054);
[L8051]   COND FALSE  !(revert)
[L8054]               sum_freezingBalance4[this] := sum_freezingBalance4[this] - freezingBalance_FreezableToken[this][msgsender_MSG];
[L8055]               freezingBalance_FreezableToken[this][msgsender_MSG] := __var_35;
[L8056]               sum_freezingBalance4[this] := sum_freezingBalance4[this] + freezingBalance_FreezableToken[this][msgsender_MSG];
[L8057]   COND TRUE   next_s1054 == 0
[L8058]               sum_chains2[this] := sum_chains2[this] - chains_FreezableToken[this][headKey_s1054];
[L8059]               chains_FreezableToken[this][headKey_s1054] := 0;
[L8067]               assert { :EventEmitted "Released_FreezableToken" } true;
[L2546]   RET         call releaseOnce_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L2547]               assume !revert && gas >= 0;
[L14257]  RET         call releaseOnce_FreezableToken(this, msgsender_MSG, msgvalue_MSG);
[L14388]  RET         call CorralChoice_MainToken(this);

[2020-11-24 21:26:34,793 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-24 21:26:34,794 INFO  L82        PathProgramCache]: Analyzing trace with hash -1570451891, now seen corresponding path program 1 times
[2020-11-24 21:26:34,794 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-24 21:26:34,824 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-24 21:26:35,485 INFO  L134       CoverageAnalysis]: Checked inductivity of 9951 backedges. 1 proven. 0 refuted. 0 times theorem prover too weak. 9950 trivial. 0 not checked.
[2020-11-24 21:26:35,486 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-24 21:26:35,486 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [6] imperfect sequences [] total 6
[2020-11-24 21:26:35,486 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-24 21:26:35,486 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 6 interpolants.
[2020-11-24 21:26:35,486 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=9, Invalid=21, Unknown=0, NotChecked=0, Total=30
[2020-11-24 21:26:35,487 INFO  L87              Difference]: Start difference. First operand 5590 states and 6295 transitions. cyclomatic complexity: 728 Second operand 6 states.
[2020-11-24 21:26:35,605 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-24 21:26:35,605 INFO  L93              Difference]: Finished difference Result 5670 states and 6375 transitions.
[2020-11-24 21:26:35,605 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 6 states. 
[2020-11-24 21:26:35,605 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 5670 states and 6375 transitions.
[2020-11-24 21:26:35,615 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-24 21:26:35,624 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 5670 states to 5566 states and 6257 transitions.
[2020-11-24 21:26:35,624 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1109
[2020-11-24 21:26:35,624 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1109
[2020-11-24 21:26:35,624 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 5566 states and 6257 transitions.
[2020-11-24 21:26:35,627 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-24 21:26:35,627 INFO  L728         BuchiCegarLoop]: Abstraction has 5566 states and 6257 transitions.
[2020-11-24 21:26:35,631 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 5566 states and 6257 transitions.
[2020-11-24 21:26:35,651 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 5566 to 5566.
[2020-11-24 21:26:35,651 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 5566 states.
[2020-11-24 21:26:35,657 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 5566 states to 5566 states and 6257 transitions.
[2020-11-24 21:26:35,657 INFO  L751         BuchiCegarLoop]: Abstraction has 5566 states and 6257 transitions.
[2020-11-24 21:26:35,657 INFO  L631         BuchiCegarLoop]: Abstraction has 5566 states and 6257 transitions.
[2020-11-24 21:26:35,657 INFO  L445         BuchiCegarLoop]: ======== Iteration 18============
[2020-11-24 21:26:35,657 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 5566 states and 6257 transitions.
[2020-11-24 21:26:35,662 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-24 21:26:35,662 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-24 21:26:35,662 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-24 21:26:35,664 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [38, 38, 38, 38, 38, 38, 38, 38, 38, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-24 21:26:35,664 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  success_balanceOf_FreezableToken0 := false;
[L2]                  call_balanceOf_FreezableToken0 := false;
[L2]      CALL        call main();
[L14378]              assume null == 0;
[L14379]  CALL        call this := FreshRefGenerator__success();
[L6396]               havoc newRef;
[L6397]               assume Alloc[newRef] == false;
[L6398]               Alloc[newRef] := true;
[L6399]               assume newRef != null;
[L14379]  RET         call this := FreshRefGenerator__success();
[L14380]              assume now >= 0;
[L14381]              assume DType[this] == MainToken;
[L14382]              assume msgvalue_MSG == 0;
[L14383]              gas := gas - 53000;
[L14384]  CALL        call MainToken_MainToken(this, msgsender_MSG, msgvalue_MSG);
[L4183]               havoc __exception;
[L4184]               revert := false;
[L4185]   COND FALSE  !(__exception)
[L4222]   CALL        call MainToken_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9205]   CALL        call Consts_Consts__success(this, msgsender_MSG, msgvalue_MSG);
[L9007]   CALL        call Consts_Consts_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8983]               assume msgsender_MSG != null;
[L8984]               Balance[this] := 0;
[L8985]               TOKEN_DECIMALS_Consts[this] := 18;
[L8986]               TOKEN_DECIMALS_UINT8_Consts[this] := 18;
[L8987]               TOKEN_DECIMAL_MULTIPLIER_Consts[this] := nonlinearPow(10, TOKEN_DECIMALS_Consts[this]) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8988]               TOKEN_NAME_Consts[this] := -1051245219;
[L8989]               TOKEN_SYMBOL_Consts[this] := -1804535220;
[L8990]               PAUSED_Consts[this] := false;
[L8991]               __var_52 := ConstantToRef(-210822415442009814958929812751043848690848471787);
[L8992]               TARGET_USER_Consts[this] := ConstantToRef(-210822415442009814958929812751043848690848471787);
[L8993]               CONTINUE_MINTING_Consts[this] := true;
[L9007]   RET         call Consts_Consts_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9008]   COND FALSE  !(revert)
[L9205]   RET         call Consts_Consts__success(this, msgsender_MSG, msgvalue_MSG);
[L9206]   COND FALSE  !(revert)
[L9209]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L9209]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L9210]   COND FALSE  !(revert)
[L9213]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6694]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6694]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6695]   COND FALSE  !(revert)
[L6698]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6675]               assume msgsender_MSG != null;
[L6676]               Balance[this] := 0;
[L6698]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6699]   COND FALSE  !(revert)
[L9213]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L9214]   COND FALSE  !(revert)
[L9217]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6565]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   COND FALSE  !(revert)
[L6569]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]               assume msgsender_MSG != null;
[L6544]               Balance[this] := 0;
[L6545]               balances_BasicToken[this] := zeroRefintArr();
[L6546]               sum_balances0[this] := 0;
[L6547]               totalSupply__BasicToken[this] := 0;
[L6569]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6570]   COND FALSE  !(revert)
[L9217]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9218]   COND FALSE  !(revert)
[L9221]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6746]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6746]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6747]   COND FALSE  !(revert)
[L6750]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6694]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6694]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6695]   COND FALSE  !(revert)
[L6698]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6675]               assume msgsender_MSG != null;
[L6676]               Balance[this] := 0;
[L6698]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6699]   COND FALSE  !(revert)
[L6750]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6751]   COND FALSE  !(revert)
[L6754]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6565]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   COND FALSE  !(revert)
[L6569]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]               assume msgsender_MSG != null;
[L6544]               Balance[this] := 0;
[L6545]               balances_BasicToken[this] := zeroRefintArr();
[L6546]               sum_balances0[this] := 0;
[L6547]               totalSupply__BasicToken[this] := 0;
[L6569]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6570]   COND FALSE  !(revert)
[L6754]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6755]   COND FALSE  !(revert)
[L6758]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6717]               assume msgsender_MSG != null;
[L6718]               Balance[this] := 0;
[L6719]               allowed_StandardToken[this] := zeroRefRefintArr();
[L6720]               sum_allowed1[this] := 0;
[L6758]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6759]   COND FALSE  !(revert)
[L9221]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9222]   COND FALSE  !(revert)
[L9225]   CALL        call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7353]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L7353]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7354]   COND FALSE  !(revert)
[L7357]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6694]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6694]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6695]   COND FALSE  !(revert)
[L6698]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6675]               assume msgsender_MSG != null;
[L6676]               Balance[this] := 0;
[L6698]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6699]   COND FALSE  !(revert)
[L7357]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7358]   COND FALSE  !(revert)
[L7361]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6565]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   COND FALSE  !(revert)
[L6569]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]               assume msgsender_MSG != null;
[L6544]               Balance[this] := 0;
[L6545]               balances_BasicToken[this] := zeroRefintArr();
[L6546]               sum_balances0[this] := 0;
[L6547]               totalSupply__BasicToken[this] := 0;
[L6569]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6570]   COND FALSE  !(revert)
[L7361]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7362]   COND FALSE  !(revert)
[L7365]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6746]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6746]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6747]   COND FALSE  !(revert)
[L6750]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6694]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6694]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6695]   COND FALSE  !(revert)
[L6698]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6675]               assume msgsender_MSG != null;
[L6676]               Balance[this] := 0;
[L6698]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6699]   COND FALSE  !(revert)
[L6750]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6751]   COND FALSE  !(revert)
[L6754]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6565]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   COND FALSE  !(revert)
[L6569]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]               assume msgsender_MSG != null;
[L6544]               Balance[this] := 0;
[L6545]               balances_BasicToken[this] := zeroRefintArr();
[L6546]               sum_balances0[this] := 0;
[L6547]               totalSupply__BasicToken[this] := 0;
[L6569]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6570]   COND FALSE  !(revert)
[L6754]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6755]   COND FALSE  !(revert)
[L6758]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6717]               assume msgsender_MSG != null;
[L6718]               Balance[this] := 0;
[L6719]               allowed_StandardToken[this] := zeroRefRefintArr();
[L6720]               sum_allowed1[this] := 0;
[L6758]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6759]   COND FALSE  !(revert)
[L7365]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7366]   COND FALSE  !(revert)
[L7369]   CALL        call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7316]               assume msgsender_MSG != null;
[L7317]               Balance[this] := 0;
[L7318]               chains_FreezableToken[this] := zerointintArr();
[L7319]               sum_chains2[this] := 0;
[L7320]               freezings_FreezableToken[this] := zerointintArr();
[L7321]               sum_freezings3[this] := 0;
[L7322]               freezingBalance_FreezableToken[this] := zeroRefintArr();
[L7323]               sum_freezingBalance4[this] := 0;
[L7369]   RET         call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7370]   COND FALSE  !(revert)
[L9225]   RET         call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9226]   COND FALSE  !(revert)
[L9229]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6988]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6971]               assume msgsender_MSG != null;
[L6972]               Balance[this] := 0;
[L6973]               owner_Ownable[this] := null;
[L6975]               owner_Ownable[this] := msgsender_MSG;
[L6988]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6989]   COND FALSE  !(revert)
[L9229]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L9230]   COND FALSE  !(revert)
[L9233]   CALL        call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7172]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L7172]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7173]   COND FALSE  !(revert)
[L7176]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6694]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6694]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6695]   COND FALSE  !(revert)
[L6698]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6675]               assume msgsender_MSG != null;
[L6676]               Balance[this] := 0;
[L6698]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6699]   COND FALSE  !(revert)
[L7176]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7177]   COND FALSE  !(revert)
[L7180]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6565]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   COND FALSE  !(revert)
[L6569]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]               assume msgsender_MSG != null;
[L6544]               Balance[this] := 0;
[L6545]               balances_BasicToken[this] := zeroRefintArr();
[L6546]               sum_balances0[this] := 0;
[L6547]               totalSupply__BasicToken[this] := 0;
[L6569]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6570]   COND FALSE  !(revert)
[L7180]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7181]   COND FALSE  !(revert)
[L7184]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6746]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6746]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6747]   COND FALSE  !(revert)
[L6750]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6694]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6694]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6695]   COND FALSE  !(revert)
[L6698]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6675]               assume msgsender_MSG != null;
[L6676]               Balance[this] := 0;
[L6698]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6699]   COND FALSE  !(revert)
[L6750]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6751]   COND FALSE  !(revert)
[L6754]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6565]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   COND FALSE  !(revert)
[L6569]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]               assume msgsender_MSG != null;
[L6544]               Balance[this] := 0;
[L6545]               balances_BasicToken[this] := zeroRefintArr();
[L6546]               sum_balances0[this] := 0;
[L6547]               totalSupply__BasicToken[this] := 0;
[L6569]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6570]   COND FALSE  !(revert)
[L6754]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6755]   COND FALSE  !(revert)
[L6758]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6717]               assume msgsender_MSG != null;
[L6718]               Balance[this] := 0;
[L6719]               allowed_StandardToken[this] := zeroRefRefintArr();
[L6720]               sum_allowed1[this] := 0;
[L6758]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6759]   COND FALSE  !(revert)
[L7184]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7185]   COND FALSE  !(revert)
[L7188]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6988]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6971]               assume msgsender_MSG != null;
[L6972]               Balance[this] := 0;
[L6973]               owner_Ownable[this] := null;
[L6975]               owner_Ownable[this] := msgsender_MSG;
[L6988]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6989]   COND FALSE  !(revert)
[L7188]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7189]   COND FALSE  !(revert)
[L7192]   CALL        call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7136]               assume msgsender_MSG != null;
[L7137]               Balance[this] := 0;
[L7138]               mintingFinished_MintableToken[this] := false;
[L7192]   RET         call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7193]   COND FALSE  !(revert)
[L9233]   RET         call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9234]   COND FALSE  !(revert)
[L9237]   CALL        call FreezableMintableToken_FreezableMintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L8792]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L8792]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L8793]   COND FALSE  !(revert)
[L8796]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6694]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6694]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6695]   COND FALSE  !(revert)
[L6698]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6675]               assume msgsender_MSG != null;
[L6676]               Balance[this] := 0;
[L6698]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6699]   COND FALSE  !(revert)
[L8796]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L8797]   COND FALSE  !(revert)
[L8800]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6565]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   COND FALSE  !(revert)
[L6569]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]               assume msgsender_MSG != null;
[L6544]               Balance[this] := 0;
[L6545]               balances_BasicToken[this] := zeroRefintArr();
[L6546]               sum_balances0[this] := 0;
[L6547]               totalSupply__BasicToken[this] := 0;
[L6569]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6570]   COND FALSE  !(revert)
[L8800]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L8801]   COND FALSE  !(revert)
[L8804]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6746]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6746]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6747]   COND FALSE  !(revert)
[L6750]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6694]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6694]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6695]   COND FALSE  !(revert)
[L6698]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6675]               assume msgsender_MSG != null;
[L6676]               Balance[this] := 0;
[L6698]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6699]   COND FALSE  !(revert)
[L6750]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6751]   COND FALSE  !(revert)
[L6754]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6565]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   COND FALSE  !(revert)
[L6569]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]               assume msgsender_MSG != null;
[L6544]               Balance[this] := 0;
[L6545]               balances_BasicToken[this] := zeroRefintArr();
[L6546]               sum_balances0[this] := 0;
[L6547]               totalSupply__BasicToken[this] := 0;
[L6569]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6570]   COND FALSE  !(revert)
[L6754]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6755]   COND FALSE  !(revert)
[L6758]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6717]               assume msgsender_MSG != null;
[L6718]               Balance[this] := 0;
[L6719]               allowed_StandardToken[this] := zeroRefRefintArr();
[L6720]               sum_allowed1[this] := 0;
[L6758]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6759]   COND FALSE  !(revert)
[L8804]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L8805]   COND FALSE  !(revert)
[L8808]   CALL        call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7353]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L7353]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7354]   COND FALSE  !(revert)
[L7357]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6694]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6694]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6695]   COND FALSE  !(revert)
[L6698]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6675]               assume msgsender_MSG != null;
[L6676]               Balance[this] := 0;
[L6698]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6699]   COND FALSE  !(revert)
[L7357]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7358]   COND FALSE  !(revert)
[L7361]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6565]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   COND FALSE  !(revert)
[L6569]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]               assume msgsender_MSG != null;
[L6544]               Balance[this] := 0;
[L6545]               balances_BasicToken[this] := zeroRefintArr();
[L6546]               sum_balances0[this] := 0;
[L6547]               totalSupply__BasicToken[this] := 0;
[L6569]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6570]   COND FALSE  !(revert)
[L7361]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7362]   COND FALSE  !(revert)
[L7365]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6746]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6746]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6747]   COND FALSE  !(revert)
[L6750]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6694]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6694]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6695]   COND FALSE  !(revert)
[L6698]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6675]               assume msgsender_MSG != null;
[L6676]               Balance[this] := 0;
[L6698]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6699]   COND FALSE  !(revert)
[L6750]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6751]   COND FALSE  !(revert)
[L6754]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6565]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   COND FALSE  !(revert)
[L6569]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]               assume msgsender_MSG != null;
[L6544]               Balance[this] := 0;
[L6545]               balances_BasicToken[this] := zeroRefintArr();
[L6546]               sum_balances0[this] := 0;
[L6547]               totalSupply__BasicToken[this] := 0;
[L6569]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6570]   COND FALSE  !(revert)
[L6754]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6755]   COND FALSE  !(revert)
[L6758]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6717]               assume msgsender_MSG != null;
[L6718]               Balance[this] := 0;
[L6719]               allowed_StandardToken[this] := zeroRefRefintArr();
[L6720]               sum_allowed1[this] := 0;
[L6758]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6759]   COND FALSE  !(revert)
[L7365]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7366]   COND FALSE  !(revert)
[L7369]   CALL        call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7316]               assume msgsender_MSG != null;
[L7317]               Balance[this] := 0;
[L7318]               chains_FreezableToken[this] := zerointintArr();
[L7319]               sum_chains2[this] := 0;
[L7320]               freezings_FreezableToken[this] := zerointintArr();
[L7321]               sum_freezings3[this] := 0;
[L7322]               freezingBalance_FreezableToken[this] := zeroRefintArr();
[L7323]               sum_freezingBalance4[this] := 0;
[L7369]   RET         call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7370]   COND FALSE  !(revert)
[L8808]   RET         call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L8809]   COND FALSE  !(revert)
[L8812]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6988]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6971]               assume msgsender_MSG != null;
[L6972]               Balance[this] := 0;
[L6973]               owner_Ownable[this] := null;
[L6975]               owner_Ownable[this] := msgsender_MSG;
[L6988]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6989]   COND FALSE  !(revert)
[L8812]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L8813]   COND FALSE  !(revert)
[L8816]   CALL        call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7172]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L7172]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7173]   COND FALSE  !(revert)
[L7176]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6694]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6694]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6695]   COND FALSE  !(revert)
[L6698]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6675]               assume msgsender_MSG != null;
[L6676]               Balance[this] := 0;
[L6698]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6699]   COND FALSE  !(revert)
[L7176]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7177]   COND FALSE  !(revert)
[L7180]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6565]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   COND FALSE  !(revert)
[L6569]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]               assume msgsender_MSG != null;
[L6544]               Balance[this] := 0;
[L6545]               balances_BasicToken[this] := zeroRefintArr();
[L6546]               sum_balances0[this] := 0;
[L6547]               totalSupply__BasicToken[this] := 0;
[L6569]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6570]   COND FALSE  !(revert)
[L7180]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7181]   COND FALSE  !(revert)
[L7184]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6746]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6746]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6747]   COND FALSE  !(revert)
[L6750]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6694]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6694]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6695]   COND FALSE  !(revert)
[L6698]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6675]               assume msgsender_MSG != null;
[L6676]               Balance[this] := 0;
[L6698]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6699]   COND FALSE  !(revert)
[L6750]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6751]   COND FALSE  !(revert)
[L6754]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6565]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   COND FALSE  !(revert)
[L6569]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]               assume msgsender_MSG != null;
[L6544]               Balance[this] := 0;
[L6545]               balances_BasicToken[this] := zeroRefintArr();
[L6546]               sum_balances0[this] := 0;
[L6547]               totalSupply__BasicToken[this] := 0;
[L6569]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6570]   COND FALSE  !(revert)
[L6754]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6755]   COND FALSE  !(revert)
[L6758]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6717]               assume msgsender_MSG != null;
[L6718]               Balance[this] := 0;
[L6719]               allowed_StandardToken[this] := zeroRefRefintArr();
[L6720]               sum_allowed1[this] := 0;
[L6758]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6759]   COND FALSE  !(revert)
[L7184]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7185]   COND FALSE  !(revert)
[L7188]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6988]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6971]               assume msgsender_MSG != null;
[L6972]               Balance[this] := 0;
[L6973]               owner_Ownable[this] := null;
[L6975]               owner_Ownable[this] := msgsender_MSG;
[L6988]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6989]   COND FALSE  !(revert)
[L7188]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7189]   COND FALSE  !(revert)
[L7192]   CALL        call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7136]               assume msgsender_MSG != null;
[L7137]               Balance[this] := 0;
[L7138]               mintingFinished_MintableToken[this] := false;
[L7192]   RET         call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7193]   COND FALSE  !(revert)
[L8816]   RET         call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L8817]   COND FALSE  !(revert)
[L8820]   CALL        call FreezableMintableToken_FreezableMintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8749]               assume msgsender_MSG != null;
[L8750]               Balance[this] := 0;
[L8820]   RET         call FreezableMintableToken_FreezableMintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8821]   COND FALSE  !(revert)
[L9237]   RET         call FreezableMintableToken_FreezableMintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9238]   COND FALSE  !(revert)
[L9241]   CALL        call BurnableToken_BurnableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L8536]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L8536]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L8537]   COND FALSE  !(revert)
[L8540]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6428]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6428]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]   COND FALSE  !(revert)
[L6565]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]   COND FALSE  !(revert)
[L6569]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]               assume msgsender_MSG != null;
[L6544]               Balance[this] := 0;
[L6545]               balances_BasicToken[this] := zeroRefintArr();
[L6546]               sum_balances0[this] := 0;
[L6547]               totalSupply__BasicToken[this] := 0;
[L6569]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6570]   COND FALSE  !(revert)
[L8540]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L8541]   COND FALSE  !(revert)
[L8544]   CALL        call BurnableToken_BurnableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8513]               assume msgsender_MSG != null;
[L8514]               Balance[this] := 0;
[L8544]   RET         call BurnableToken_BurnableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8545]   COND FALSE  !(revert)
[L9241]   RET         call BurnableToken_BurnableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9242]   COND FALSE  !(revert)
[L9245]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L8662]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6988]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6971]               assume msgsender_MSG != null;
[L6972]               Balance[this] := 0;
[L6973]               owner_Ownable[this] := null;
[L6975]               owner_Ownable[this] := msgsender_MSG;
[L6988]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6989]   COND FALSE  !(revert)
[L8662]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L8663]   COND FALSE  !(revert)
[L8666]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8642]               assume msgsender_MSG != null;
[L8643]               Balance[this] := 0;
[L8644]               paused_Pausable[this] := false;
[L8666]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8667]   COND FALSE  !(revert)
[L9245]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L9246]   COND FALSE  !(revert)
[L9249]   CALL        call MainToken_MainToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9133]               assume msgsender_MSG != null;
[L9134]               Balance[this] := 0;
[L9135]               initialized_MainToken[this] := false;
[L9137]   CALL        call init_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9404]   COND FALSE  !(!!initialized_MainToken[this])
[L9408]               initialized_MainToken[this] := true;
[L9409]   COND FALSE  !(PAUSED_Consts[this])
[L9419]   COND FALSE  !(!CONTINUE_MINTING_Consts[this])
[L9429]               assert { :EventEmitted "Initialized_MainToken" } true;
[L9137]   RET         call init_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9138]   COND FALSE  !(revert)
[L9141]   COND TRUE   DType[this] == MainToken
[L9142]   CALL        call transferOwnership~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, TARGET_USER_Consts[this]);
[L7055]   CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L12332]  COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L7055]   RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7056]   COND FALSE  !(revert)
[L7059]   COND TRUE   DType[this] == MainToken
[L7060]   CALL        call _transferOwnership~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, _newOwner_s558);
[L7103]               __var_11 := null;
[L7104]   COND FALSE  !(!(_newOwner_s581 != null))
[L7108]               assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L7109]               owner_Ownable[this] := _newOwner_s581;
[L7060]   RET         call _transferOwnership~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, _newOwner_s558);
[L7061]   COND FALSE  !(revert)
[L9142]   RET         call transferOwnership~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, TARGET_USER_Consts[this]);
[L9143]   COND FALSE  !(revert)
[L9249]   RET         call MainToken_MainToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9250]   COND FALSE  !(revert)
[L4222]   RET         call MainToken_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4223]               assume !revert && gas >= 0;
[L14384]  RET         call MainToken_MainToken(this, msgsender_MSG, msgvalue_MSG);
[L14385]              assume !revert && gas >= 0;
[L14388]  CALL        call CorralChoice_MainToken(this);
[L14045]              havoc msgsender_MSG;
[L14046]              havoc msgvalue_MSG;
[L14047]              havoc choice;
[L14048]              havoc __ret_0_totalSupply;
[L14049]              havoc _owner_s729;
[L14050]              havoc balance_s729;
[L14051]              havoc _to_s1572;
[L14052]              havoc _value_s1572;
[L14053]              havoc _success_s1572;
[L14054]              havoc _owner_s395;
[L14055]              havoc _spender_s395;
[L14056]              havoc __ret_0_allowance;
[L14057]              havoc _from_s1551;
[L14058]              havoc _to_s1551;
[L14059]              havoc _value_s1551;
[L14060]              havoc _success_s1551;
[L14061]              havoc _spender_s379;
[L14062]              havoc _value_s379;
[L14063]              havoc __ret_0_approve;
[L14064]              havoc _spender_s437;
[L14065]              havoc _addedValue_s437;
[L14066]              havoc __ret_0_increaseApproval;
[L14067]              havoc _spender_s497;
[L14068]              havoc _subtractedValue_s497;
[L14069]              havoc __ret_0_decreaseApproval;
[L14070]              havoc __ret_0_owner;
[L14071]              havoc _newOwner_s558;
[L14072]              havoc __ret_0_mintingFinished;
[L14073]              havoc _to_s664;
[L14074]              havoc _amount_s664;
[L14075]              havoc __ret_0_mint;
[L14076]              havoc __ret_0_finishMinting;
[L14077]              havoc _owner_s742;
[L14078]              havoc balance_s742;
[L14079]              havoc _owner_s754;
[L14080]              havoc balance_s754;
[L14081]              havoc _addr_s792;
[L14082]              havoc count_s792;
[L14083]              havoc _addr_s849;
[L14084]              havoc _index_s849;
[L14085]              havoc _release_s849;
[L14086]              havoc _balance_s849;
[L14087]              havoc _to_s938;
[L14088]              havoc _amount_s938;
[L14089]              havoc _until_s938;
[L14090]              havoc tokens_s1107;
[L14091]              havoc _value_s1261;
[L14092]              havoc __ret_0_paused;
[L14093]              havoc _to_s1449;
[L14094]              havoc _amount_s1449;
[L14095]              havoc _until_s1449;
[L14096]              havoc __ret_0_mintAndFreeze;
[L14097]              havoc __ret_0_TOKEN_DECIMALS;
[L14098]              havoc __ret_0_TOKEN_DECIMALS_UINT8;
[L14099]              havoc __ret_0_TOKEN_DECIMAL_MULTIPLIER;
[L14100]              havoc __ret_0_TOKEN_NAME;
[L14101]              havoc __ret_0_TOKEN_SYMBOL;
[L14102]              havoc __ret_0_PAUSED;
[L14103]              havoc __ret_0_TARGET_USER;
[L14104]              havoc __ret_0_CONTINUE_MINTING;
[L14105]              havoc __ret_0_initialized;
[L14106]              havoc _name_s1511;
[L14107]              havoc _symbol_s1519;
[L14108]              havoc _decimals_s1527;
[L14109]              havoc tmpNow;
[L14110]              havoc gas;
[L14111]              assume gas > 4000000 && gas <= 8000000;
[L14112]              tmpNow := now;
[L14113]              havoc now;
[L14114]              assume now > tmpNow;
[L14115]              assume msgsender_MSG != null;
[L14116]              assume DType[msgsender_MSG] != ERC20Basic;
[L14117]              assume DType[msgsender_MSG] != SafeMath;
[L14118]              assume DType[msgsender_MSG] != BasicToken;
[L14119]              assume DType[msgsender_MSG] != ERC20;
[L14120]              assume DType[msgsender_MSG] != StandardToken;
[L14121]              assume DType[msgsender_MSG] != Ownable;
[L14122]              assume DType[msgsender_MSG] != MintableToken;
[L14123]              assume DType[msgsender_MSG] != FreezableToken;
[L14124]              assume DType[msgsender_MSG] != BurnableToken;
[L14125]              assume DType[msgsender_MSG] != Pausable;
[L14126]              assume DType[msgsender_MSG] != FreezableMintableToken;
[L14127]              assume DType[msgsender_MSG] != Consts;
[L14128]              assume DType[msgsender_MSG] != MainToken;
[L14129]              Alloc[msgsender_MSG] := true;
[L14130]  COND FALSE  !(choice == 38)
[L14136]  COND FALSE  !(choice == 37)
[L14142]  COND FALSE  !(choice == 36)
[L14149]  COND FALSE  !(choice == 35)
[L14155]  COND FALSE  !(choice == 34)
[L14162]  COND FALSE  !(choice == 33)
[L14169]  COND FALSE  !(choice == 32)
[L14176]  COND FALSE  !(choice == 31)
[L14183]  COND FALSE  !(choice == 30)
[L14189]  COND FALSE  !(choice == 29)
[L14195]  COND FALSE  !(choice == 28)
[L14201]  COND FALSE  !(choice == 27)
[L14207]  COND FALSE  !(choice == 26)
[L14214]  COND FALSE  !(choice == 25)
[L14220]  COND FALSE  !(choice == 24)
[L14226]  COND FALSE  !(choice == 23)
[L14232]  COND FALSE  !(choice == 22)
[L14238]  COND FALSE  !(choice == 21)
[L14245]  COND FALSE  !(choice == 20)
[L14253]  COND FALSE  !(choice == 19)
[L14259]  COND FALSE  !(choice == 18)
[L14265]  COND FALSE  !(choice == 17)
[L14272]  COND FALSE  !(choice == 16)
[L14278]  COND FALSE  !(choice == 15)
[L14284]  COND FALSE  !(choice == 14)
[L14290]  COND TRUE   choice == 13
[L14291]              gas := gas - 21000;
[L14292]  COND TRUE   gas >= 0
[L14293]              assume _amount_s1449 >= 0 && _amount_s1449 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L14294]              assume _until_s1449 >= 0 && _until_s1449 < 18446744073709551616;
[L14295]              assume msgvalue_MSG == 0;
[L14296]  CALL        call __ret_0_mintAndFreeze := mintAndFreeze~address~uint256~uint64_FreezableMintableToken(this, msgsender_MSG, msgvalue_MSG, _to_s1449, _amount_s1449, _until_s1449);
[L3304]               havoc __exception;
[L3305]               revert := false;
[L3306]   COND FALSE  !(__exception)
[L3343]   CALL        call __ret_0_ := mintAndFreeze~address~uint256~uint64_FreezableMintableToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s1449, _amount_s1449, _until_s1449);
[L8899]   CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L12332]  COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L8899]   RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L8900]   COND FALSE  !(revert)
[L8903]   CALL        call canMint_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L12348]  COND FALSE  !(!!mintingFinished_MintableToken[this])
[L8903]   RET         call canMint_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L8904]   COND FALSE  !(revert)
[L8907]   CALL        call __var_48 := add~uint256~uint256_SafeMath__success(this, this, 0, totalSupply__BasicToken[this], _amount_s1449);
[L6523]               c_s122 := (a_s122 + b_s122) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6524]               assert c_s122 >= a_s122;
[L6525]               c_s122 := c_s122;
[L8907]   RET         call __var_48 := add~uint256~uint256_SafeMath__success(this, this, 0, totalSupply__BasicToken[this], _amount_s1449);
[L8908]   COND FALSE  !(revert)
[L8911]               totalSupply__BasicToken[this] := __var_48;
[L8912]               __var_49 := _until_s1449 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8913]   COND TRUE   DType[this] == MainToken
[L8914]   CALL        call currentKey_s1449 := toKey~address~uint256_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s1449, _until_s1449 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L8244]               result_s1122 := 39480772448535941496179204954862169494691089619604794184232587696854102179840;
[L8246]               havoc result_s1122;
[L8247]               havoc result_s1122;
[L8248]               havoc result_s1122;
[L8249]               havoc result_s1122;
[L8914]   RET         call currentKey_s1449 := toKey~address~uint256_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s1449, _until_s1449 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L8915]   COND FALSE  !(revert)
[L8926]               currentKey_s1449 := currentKey_s1449;
[L8927]   CALL        call __var_50 := add~uint256~uint256_SafeMath__success(this, this, 0, freezings_FreezableToken[this][currentKey_s1449], _amount_s1449);
[L6523]               c_s122 := (a_s122 + b_s122) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6524]               assert c_s122 >= a_s122;
[L6525]               c_s122 := c_s122;
[L8927]   RET         call __var_50 := add~uint256~uint256_SafeMath__success(this, this, 0, freezings_FreezableToken[this][currentKey_s1449], _amount_s1449);
[L8928]   COND FALSE  !(revert)
[L8931]               sum_freezings3[this] := sum_freezings3[this] - freezings_FreezableToken[this][currentKey_s1449];
[L8932]               freezings_FreezableToken[this][currentKey_s1449] := __var_50;
[L8933]               sum_freezings3[this] := sum_freezings3[this] + freezings_FreezableToken[this][currentKey_s1449];
[L8934]   CALL        call __var_51 := add~uint256~uint256_SafeMath__success(this, this, 0, freezingBalance_FreezableToken[this][_to_s1449], _amount_s1449);
[L6523]               c_s122 := (a_s122 + b_s122) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6524]               assert c_s122 >= a_s122;
[L6525]               c_s122 := c_s122;
[L8934]   RET         call __var_51 := add~uint256~uint256_SafeMath__success(this, this, 0, freezingBalance_FreezableToken[this][_to_s1449], _amount_s1449);
[L8935]   COND FALSE  !(revert)
[L8938]               sum_freezingBalance4[this] := sum_freezingBalance4[this] - freezingBalance_FreezableToken[this][_to_s1449];
[L8939]               freezingBalance_FreezableToken[this][_to_s1449] := __var_51;
[L8940]               sum_freezingBalance4[this] := sum_freezingBalance4[this] + freezingBalance_FreezableToken[this][_to_s1449];
[L8941]   COND TRUE   DType[this] == MainToken
[L8942]   CALL        call freeze~address~uint64_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s1449, _until_s1449);
[L8388]   COND FALSE  !(!(_until_s1240 > now))
[L8392]               __var_42 := _until_s1240 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8393]   COND TRUE   DType[this] == MainToken
[L8394]   CALL        call key_s1240 := toKey~address~uint256_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s1240, _until_s1240 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L8244]               result_s1122 := 39480772448535941496179204954862169494691089619604794184232587696854102179840;
[L8246]               havoc result_s1122;
[L8247]               havoc result_s1122;
[L8248]               havoc result_s1122;
[L8249]               havoc result_s1122;
[L8394]   RET         call key_s1240 := toKey~address~uint256_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s1240, _until_s1240 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L8395]   COND FALSE  !(revert)
[L8411]               key_s1240 := key_s1240;
[L8412]               __var_43 := 0 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8413]   COND TRUE   DType[this] == MainToken
[L8414]   CALL        call parentKey_s1240 := toKey~address~uint256_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s1240, 0 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L8244]               result_s1122 := 39480772448535941496179204954862169494691089619604794184232587696854102179840;
[L8246]               havoc result_s1122;
[L8247]               havoc result_s1122;
[L8248]               havoc result_s1122;
[L8249]               havoc result_s1122;
[L8414]   RET         call parentKey_s1240 := toKey~address~uint256_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s1240, 0 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L8415]   COND FALSE  !(revert)
[L8431]               parentKey_s1240 := parentKey_s1240;
[L8432]               next_s1240 := chains_FreezableToken[this][parentKey_s1240];
[L8433]   COND TRUE   next_s1240 == 0
[L8434]               sum_chains2[this] := sum_chains2[this] - chains_FreezableToken[this][parentKey_s1240];
[L8435]               chains_FreezableToken[this][parentKey_s1240] := _until_s1240;
[L8436]               sum_chains2[this] := sum_chains2[this] + chains_FreezableToken[this][parentKey_s1240];
[L8942]   RET         call freeze~address~uint64_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s1449, _until_s1449);
[L8943]   COND FALSE  !(revert)
[L8954]               assert { :EventEmitted "Mint_FreezableMintableToken" } true;
[L8955]               assert { :EventEmitted "Freezed_FreezableMintableToken" } true;
[L8956]               assert { :EventEmitted "Transfer_FreezableMintableToken" } true;
[L8957]               __ret_0_ := true;
[L3343]   RET         call __ret_0_ := mintAndFreeze~address~uint256~uint64_FreezableMintableToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s1449, _amount_s1449, _until_s1449);
[L3344]               assume !revert && gas >= 0;
[L14296]  RET         call __ret_0_mintAndFreeze := mintAndFreeze~address~uint256~uint64_FreezableMintableToken(this, msgsender_MSG, msgvalue_MSG, _to_s1449, _amount_s1449, _until_s1449);
[L14388]  RET         call CorralChoice_MainToken(this);
[L14388]  CALL        call CorralChoice_MainToken(this);
[L14045]              havoc msgsender_MSG;
[L14046]              havoc msgvalue_MSG;
[L14047]              havoc choice;
[L14048]              havoc __ret_0_totalSupply;
[L14049]              havoc _owner_s729;
[L14050]              havoc balance_s729;
[L14051]              havoc _to_s1572;
[L14052]              havoc _value_s1572;
[L14053]              havoc _success_s1572;
[L14054]              havoc _owner_s395;
[L14055]              havoc _spender_s395;
[L14056]              havoc __ret_0_allowance;
[L14057]              havoc _from_s1551;
[L14058]              havoc _to_s1551;
[L14059]              havoc _value_s1551;
[L14060]              havoc _success_s1551;
[L14061]              havoc _spender_s379;
[L14062]              havoc _value_s379;
[L14063]              havoc __ret_0_approve;
[L14064]              havoc _spender_s437;
[L14065]              havoc _addedValue_s437;
[L14066]              havoc __ret_0_increaseApproval;
[L14067]              havoc _spender_s497;
[L14068]              havoc _subtractedValue_s497;
[L14069]              havoc __ret_0_decreaseApproval;
[L14070]              havoc __ret_0_owner;
[L14071]              havoc _newOwner_s558;
[L14072]              havoc __ret_0_mintingFinished;
[L14073]              havoc _to_s664;
[L14074]              havoc _amount_s664;
[L14075]              havoc __ret_0_mint;
[L14076]              havoc __ret_0_finishMinting;
[L14077]              havoc _owner_s742;
[L14078]              havoc balance_s742;
[L14079]              havoc _owner_s754;
[L14080]              havoc balance_s754;
[L14081]              havoc _addr_s792;
[L14082]              havoc count_s792;
[L14083]              havoc _addr_s849;
[L14084]              havoc _index_s849;
[L14085]              havoc _release_s849;
[L14086]              havoc _balance_s849;
[L14087]              havoc _to_s938;
[L14088]              havoc _amount_s938;
[L14089]              havoc _until_s938;
[L14090]              havoc tokens_s1107;
[L14091]              havoc _value_s1261;
[L14092]              havoc __ret_0_paused;
[L14093]              havoc _to_s1449;
[L14094]              havoc _amount_s1449;
[L14095]              havoc _until_s1449;
[L14096]              havoc __ret_0_mintAndFreeze;
[L14097]              havoc __ret_0_TOKEN_DECIMALS;
[L14098]              havoc __ret_0_TOKEN_DECIMALS_UINT8;
[L14099]              havoc __ret_0_TOKEN_DECIMAL_MULTIPLIER;
[L14100]              havoc __ret_0_TOKEN_NAME;
[L14101]              havoc __ret_0_TOKEN_SYMBOL;
[L14102]              havoc __ret_0_PAUSED;
[L14103]              havoc __ret_0_TARGET_USER;
[L14104]              havoc __ret_0_CONTINUE_MINTING;
[L14105]              havoc __ret_0_initialized;
[L14106]              havoc _name_s1511;
[L14107]              havoc _symbol_s1519;
[L14108]              havoc _decimals_s1527;
[L14109]              havoc tmpNow;
[L14110]              havoc gas;
[L14111]              assume gas > 4000000 && gas <= 8000000;
[L14112]              tmpNow := now;
[L14113]              havoc now;
[L14114]              assume now > tmpNow;
[L14115]              assume msgsender_MSG != null;
[L14116]              assume DType[msgsender_MSG] != ERC20Basic;
[L14117]              assume DType[msgsender_MSG] != SafeMath;
[L14118]              assume DType[msgsender_MSG] != BasicToken;
[L14119]              assume DType[msgsender_MSG] != ERC20;
[L14120]              assume DType[msgsender_MSG] != StandardToken;
[L14121]              assume DType[msgsender_MSG] != Ownable;
[L14122]              assume DType[msgsender_MSG] != MintableToken;
[L14123]              assume DType[msgsender_MSG] != FreezableToken;
[L14124]              assume DType[msgsender_MSG] != BurnableToken;
[L14125]              assume DType[msgsender_MSG] != Pausable;
[L14126]              assume DType[msgsender_MSG] != FreezableMintableToken;
[L14127]              assume DType[msgsender_MSG] != Consts;
[L14128]              assume DType[msgsender_MSG] != MainToken;
[L14129]              Alloc[msgsender_MSG] := true;
[L14130]  COND FALSE  !(choice == 38)
[L14136]  COND TRUE   choice == 37
[L14137]              gas := gas - 21000;
[L14138]  COND TRUE   gas >= 0
[L14139]              assume msgvalue_MSG == 0;
[L14140]  CALL        call balance_s729 := balanceOf~address_FreezableToken(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume balances_BasicToken[this][_owner_s729] >= 0 && balances_BasicToken[this][_owner_s729] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_balanceOf_FreezableToken0 := true;
[L2]                  call_balanceOf_FreezableToken0 := false;
[L2]                  revert := revert_hold;
[L1999]               havoc __exception;
[L2000]               revert := false;
[L2001]   COND FALSE  !(__exception)
[L2038]   CALL        call balance_s729 := balanceOf~address_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L7405]   COND TRUE   DType[this] == MainToken
[L7406]   CALL        call __var_14 := balanceOf~address_BasicToken__success(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L6660]               __ret_0_ := balances_BasicToken[this][_owner_s214];
[L7406]   RET         call __var_14 := balanceOf~address_BasicToken__success(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L7407]   COND FALSE  !(revert)
[L7423]               balance_s729 := (__var_14 + freezingBalance_FreezableToken[this][_owner_s729]) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2038]   RET         call balance_s729 := balanceOf~address_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L2039]               assume !revert && gas >= 0;
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume !((((((((((balance_s729 == balances_BasicToken[this][_owner_s729] && totalSupply__BasicToken[this] == old(totalSupply__BasicToken[this])) && balances_BasicToken[this] == old(balances_BasicToken[this])) && allowed_StandardToken[this] == old(allowed_StandardToken[this])) && initialized_MainToken[this] == old(initialized_MainToken[this])) && paused_Pausable[this] == old(paused_Pausable[this])) && mintingFinished_MintableToken[this] == old(mintingFinished_MintableToken[this])) && owner_Ownable[this] == old(owner_Ownable[this])) && chains_FreezableToken[this] == old(chains_FreezableToken[this])) && freezings_FreezableToken[this] == old(freezings_FreezableToken[this])) && freezingBalance_FreezableToken[this] == old(freezingBalance_FreezableToken[this]));
[L2]                  revert := revert_hold;
[L14140]  RET         call balance_s729 := balanceOf~address_FreezableToken(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L14388]  RET         call CorralChoice_MainToken(this);

Loop:
[L14388]  CALL        call CorralChoice_MainToken(this);
[L14045]              havoc msgsender_MSG;
[L14046]              havoc msgvalue_MSG;
[L14047]              havoc choice;
[L14048]              havoc __ret_0_totalSupply;
[L14049]              havoc _owner_s729;
[L14050]              havoc balance_s729;
[L14051]              havoc _to_s1572;
[L14052]              havoc _value_s1572;
[L14053]              havoc _success_s1572;
[L14054]              havoc _owner_s395;
[L14055]              havoc _spender_s395;
[L14056]              havoc __ret_0_allowance;
[L14057]              havoc _from_s1551;
[L14058]              havoc _to_s1551;
[L14059]              havoc _value_s1551;
[L14060]              havoc _success_s1551;
[L14061]              havoc _spender_s379;
[L14062]              havoc _value_s379;
[L14063]              havoc __ret_0_approve;
[L14064]              havoc _spender_s437;
[L14065]              havoc _addedValue_s437;
[L14066]              havoc __ret_0_increaseApproval;
[L14067]              havoc _spender_s497;
[L14068]              havoc _subtractedValue_s497;
[L14069]              havoc __ret_0_decreaseApproval;
[L14070]              havoc __ret_0_owner;
[L14071]              havoc _newOwner_s558;
[L14072]              havoc __ret_0_mintingFinished;
[L14073]              havoc _to_s664;
[L14074]              havoc _amount_s664;
[L14075]              havoc __ret_0_mint;
[L14076]              havoc __ret_0_finishMinting;
[L14077]              havoc _owner_s742;
[L14078]              havoc balance_s742;
[L14079]              havoc _owner_s754;
[L14080]              havoc balance_s754;
[L14081]              havoc _addr_s792;
[L14082]              havoc count_s792;
[L14083]              havoc _addr_s849;
[L14084]              havoc _index_s849;
[L14085]              havoc _release_s849;
[L14086]              havoc _balance_s849;
[L14087]              havoc _to_s938;
[L14088]              havoc _amount_s938;
[L14089]              havoc _until_s938;
[L14090]              havoc tokens_s1107;
[L14091]              havoc _value_s1261;
[L14092]              havoc __ret_0_paused;
[L14093]              havoc _to_s1449;
[L14094]              havoc _amount_s1449;
[L14095]              havoc _until_s1449;
[L14096]              havoc __ret_0_mintAndFreeze;
[L14097]              havoc __ret_0_TOKEN_DECIMALS;
[L14098]              havoc __ret_0_TOKEN_DECIMALS_UINT8;
[L14099]              havoc __ret_0_TOKEN_DECIMAL_MULTIPLIER;
[L14100]              havoc __ret_0_TOKEN_NAME;
[L14101]              havoc __ret_0_TOKEN_SYMBOL;
[L14102]              havoc __ret_0_PAUSED;
[L14103]              havoc __ret_0_TARGET_USER;
[L14104]              havoc __ret_0_CONTINUE_MINTING;
[L14105]              havoc __ret_0_initialized;
[L14106]              havoc _name_s1511;
[L14107]              havoc _symbol_s1519;
[L14108]              havoc _decimals_s1527;
[L14109]              havoc tmpNow;
[L14110]              havoc gas;
[L14111]              assume gas > 4000000 && gas <= 8000000;
[L14112]              tmpNow := now;
[L14113]              havoc now;
[L14114]              assume now > tmpNow;
[L14115]              assume msgsender_MSG != null;
[L14116]              assume DType[msgsender_MSG] != ERC20Basic;
[L14117]              assume DType[msgsender_MSG] != SafeMath;
[L14118]              assume DType[msgsender_MSG] != BasicToken;
[L14119]              assume DType[msgsender_MSG] != ERC20;
[L14120]              assume DType[msgsender_MSG] != StandardToken;
[L14121]              assume DType[msgsender_MSG] != Ownable;
[L14122]              assume DType[msgsender_MSG] != MintableToken;
[L14123]              assume DType[msgsender_MSG] != FreezableToken;
[L14124]              assume DType[msgsender_MSG] != BurnableToken;
[L14125]              assume DType[msgsender_MSG] != Pausable;
[L14126]              assume DType[msgsender_MSG] != FreezableMintableToken;
[L14127]              assume DType[msgsender_MSG] != Consts;
[L14128]              assume DType[msgsender_MSG] != MainToken;
[L14129]              Alloc[msgsender_MSG] := true;
[L14130]  COND FALSE  !(choice == 38)
[L14136]  COND FALSE  !(choice == 37)
[L14142]  COND FALSE  !(choice == 36)
[L14149]  COND FALSE  !(choice == 35)
[L14155]  COND FALSE  !(choice == 34)
[L14162]  COND FALSE  !(choice == 33)
[L14169]  COND FALSE  !(choice == 32)
[L14176]  COND FALSE  !(choice == 31)
[L14183]  COND FALSE  !(choice == 30)
[L14189]  COND FALSE  !(choice == 29)
[L14195]  COND FALSE  !(choice == 28)
[L14201]  COND FALSE  !(choice == 27)
[L14207]  COND FALSE  !(choice == 26)
[L14214]  COND FALSE  !(choice == 25)
[L14220]  COND FALSE  !(choice == 24)
[L14226]  COND FALSE  !(choice == 23)
[L14232]  COND FALSE  !(choice == 22)
[L14238]  COND FALSE  !(choice == 21)
[L14245]  COND FALSE  !(choice == 20)
[L14253]  COND TRUE   choice == 19
[L14254]              gas := gas - 21000;
[L14255]  COND TRUE   gas >= 0
[L14256]              assume msgvalue_MSG == 0;
[L14257]  CALL        call releaseOnce_FreezableToken(this, msgsender_MSG, msgvalue_MSG);
[L2507]               havoc __exception;
[L2508]               revert := false;
[L2509]   COND FALSE  !(__exception)
[L2546]   CALL        call releaseOnce_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7989]               __var_31 := 0 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7990]   COND TRUE   DType[this] == MainToken
[L7991]   CALL        call headKey_s1054 := toKey~address~uint256_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 0 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L8244]               result_s1122 := 39480772448535941496179204954862169494691089619604794184232587696854102179840;
[L8246]               havoc result_s1122;
[L8247]               havoc result_s1122;
[L8248]               havoc result_s1122;
[L8249]               havoc result_s1122;
[L7991]   RET         call headKey_s1054 := toKey~address~uint256_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 0 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L7992]   COND FALSE  !(revert)
[L8008]               headKey_s1054 := headKey_s1054;
[L8009]               head_s1054 := chains_FreezableToken[this][headKey_s1054];
[L8010]   COND FALSE  !(!(head_s1054 != 0))
[L8014]               __var_32 := now % 18446744073709551616;
[L8015]   COND FALSE  !(!(now % 18446744073709551616 > head_s1054))
[L8019]               __var_33 := head_s1054 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8020]   COND TRUE   DType[this] == MainToken
[L8021]   CALL        call currentKey_s1054 := toKey~address~uint256_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, head_s1054 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L8244]               result_s1122 := 39480772448535941496179204954862169494691089619604794184232587696854102179840;
[L8246]               havoc result_s1122;
[L8247]               havoc result_s1122;
[L8248]               havoc result_s1122;
[L8249]               havoc result_s1122;
[L8021]   RET         call currentKey_s1054 := toKey~address~uint256_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, head_s1054 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L8022]   COND FALSE  !(revert)
[L8038]               currentKey_s1054 := currentKey_s1054;
[L8039]               next_s1054 := chains_FreezableToken[this][currentKey_s1054];
[L8040]               amount_s1054 := freezings_FreezableToken[this][currentKey_s1054];
[L8041]               sum_freezings3[this] := sum_freezings3[this] - freezings_FreezableToken[this][currentKey_s1054];
[L8042]               freezings_FreezableToken[this][currentKey_s1054] := 0;
[L8043]   CALL        call __var_34 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][msgsender_MSG], amount_s1054);
[L6523]               c_s122 := (a_s122 + b_s122) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6524]               assert c_s122 >= a_s122;
[L6525]               c_s122 := c_s122;
[L8043]   RET         call __var_34 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][msgsender_MSG], amount_s1054);
[L8044]   COND FALSE  !(revert)
[L8047]               sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][msgsender_MSG];
[L8048]               balances_BasicToken[this][msgsender_MSG] := __var_34;
[L8049]               sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][msgsender_MSG];
[L8050]   CALL        call __var_35 := sub~uint256~uint256_SafeMath__success(this, this, 0, freezingBalance_FreezableToken[this][msgsender_MSG], amount_s1054);
[L6509]               assert b_s98 <= a_s98;
[L6510]               __ret_0_ := (a_s98 - b_s98) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8050]   RET         call __var_35 := sub~uint256~uint256_SafeMath__success(this, this, 0, freezingBalance_FreezableToken[this][msgsender_MSG], amount_s1054);
[L8051]   COND FALSE  !(revert)
[L8054]               sum_freezingBalance4[this] := sum_freezingBalance4[this] - freezingBalance_FreezableToken[this][msgsender_MSG];
[L8055]               freezingBalance_FreezableToken[this][msgsender_MSG] := __var_35;
[L8056]               sum_freezingBalance4[this] := sum_freezingBalance4[this] + freezingBalance_FreezableToken[this][msgsender_MSG];
[L8057]   COND TRUE   next_s1054 == 0
[L8058]               sum_chains2[this] := sum_chains2[this] - chains_FreezableToken[this][headKey_s1054];
[L8059]               chains_FreezableToken[this][headKey_s1054] := 0;
[L8067]               assert { :EventEmitted "Released_FreezableToken" } true;
[L2546]   RET         call releaseOnce_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L2547]               assume !revert && gas >= 0;
[L14257]  RET         call releaseOnce_FreezableToken(this, msgsender_MSG, msgvalue_MSG);
[L14388]  RET         call CorralChoice_MainToken(this);

[2020-11-24 21:26:35,671 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-24 21:26:35,671 INFO  L82        PathProgramCache]: Analyzing trace with hash 1446311971, now seen corresponding path program 1 times
[2020-11-24 21:26:35,672 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-24 21:26:35,732 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-24 21:26:35,790 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-24 21:26:36,158 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-24 21:26:36,158 INFO  L82        PathProgramCache]: Analyzing trace with hash 1961446636, now seen corresponding path program 1 times
[2020-11-24 21:26:36,159 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-24 21:26:36,165 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-24 21:26:36,172 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-24 21:26:36,187 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-24 21:26:36,187 INFO  L82        PathProgramCache]: Analyzing trace with hash -140528242, now seen corresponding path program 1 times
[2020-11-24 21:26:36,188 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-24 21:26:36,264 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-24 21:26:36,353 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
Garbage collection #1: 5 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 5 to 7
Garbage collection #1: 5 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 5 to 7
Garbage collection #1: 7 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 7 to 13
Garbage collection #2: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
[2020-11-24 21:26:36,763 WARN  L188               SmtUtils]: Spent 130.00 ms on a formula simplification that was a NOOP. DAG size: 172
Garbage collection #1: 59 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 59 to 113
Garbage collection #2: 113 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 113 to 223
Garbage collection #3: 223 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 223 to 443
Garbage collection #4: 443 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 443 to 883
Garbage collection #5: 883 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 883 to 1759
Garbage collection #1: 47 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 47 to 89
Garbage collection #2: 89 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 89 to 173
Garbage collection #3: 173 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 173 to 337
Garbage collection #4: 337 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 337 to 673
Garbage collection #5: 673 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 673 to 1327
[2020-11-24 21:26:37,133 WARN  L188               SmtUtils]: Spent 144.00 ms on a formula simplification. DAG size of input: 141 DAG size of output: 140
Garbage collection #1: 41 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 41 to 79
Garbage collection #2: 79 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 79 to 157
Garbage collection #3: 157 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 157 to 313
Garbage collection #4: 313 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 313 to 619
Garbage collection #5: 619 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 619 to 1237
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
[2020-11-24 21:26:37,429 WARN  L188               SmtUtils]: Spent 237.00 ms on a formula simplification that was a NOOP. DAG size: 305
Garbage collection #1: 107 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 107 to 211
Garbage collection #2: 211 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 211 to 421
Garbage collection #3: 421 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 421 to 839
Garbage collection #4: 839 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 839 to 1669
Garbage collection #5: 1669 nodes / 0 free / 0.001s / 0.002s total
Resizing node table from 1669 to 3331
Garbage collection #6: 3331 nodes / 0 free / 0.001s / 0.003s total
Resizing node table from 3331 to 6661
Garbage collection #1: 101 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 101 to 199
Garbage collection #2: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #3: 397 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 397 to 787
Garbage collection #4: 787 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 787 to 1571
Garbage collection #5: 1571 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1571 to 3137
Garbage collection #6: 3137 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 3137 to 6271
[2020-11-24 21:26:37,657 WARN  L188               SmtUtils]: Spent 216.00 ms on a formula simplification that was a NOOP. DAG size: 287
[2020-11-24 21:26:38,199 WARN  L188               SmtUtils]: Spent 533.00 ms on a formula simplification. DAG size of input: 407 DAG size of output: 349
Garbage collection #1: 127 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 127 to 251
Garbage collection #2: 251 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 251 to 499
Garbage collection #3: 499 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 499 to 997
Garbage collection #4: 997 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 997 to 1993
Garbage collection #5: 1993 nodes / 0 free / 0.001s / 0.002s total
Resizing node table from 1993 to 3967
Garbage collection #6: 3967 nodes / 0 free / 0.001s / 0.003s total
Resizing node table from 3967 to 7933
Garbage collection #1: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #2: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #3: 277 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 277 to 547
Garbage collection #4: 547 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 547 to 1093
Garbage collection #5: 1093 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1093 to 2179
Garbage collection #6: 2179 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 2179 to 4357
[2020-11-24 21:26:38,372 WARN  L188               SmtUtils]: Spent 159.00 ms on a formula simplification that was a NOOP. DAG size: 252
[2020-11-24 21:26:38,749 WARN  L188               SmtUtils]: Spent 375.00 ms on a formula simplification that was a NOOP. DAG size: 480
Garbage collection #1: 181 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 181 to 359
Garbage collection #2: 359 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 359 to 709
Garbage collection #3: 709 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 709 to 1409
Garbage collection #4: 1409 nodes / 0 free / 0.001s / 0.002s total
Resizing node table from 1409 to 2803
Garbage collection #5: 2803 nodes / 0 free / 0.0s / 0.002s total
Resizing node table from 2803 to 5591
Garbage collection #6: 5591 nodes / 0 free / 0.0s / 0.002s total
Resizing node table from 5591 to 11177
Garbage collection #7: 11177 nodes / 0 free / 0.001s / 0.003s total
Resizing node table from 11177 to 22349
Garbage collection #1: 137 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 137 to 271
Garbage collection #2: 271 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 271 to 541
Garbage collection #3: 541 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 541 to 1069
Garbage collection #4: 1069 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 1069 to 2137
Garbage collection #5: 2137 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 2137 to 4273
Garbage collection #6: 4273 nodes / 0 free / 0.001s / 0.002s total
Resizing node table from 4273 to 8543
Garbage collection #7: 8543 nodes / 0 free / 0.001s / 0.003s total
Resizing node table from 8543 to 17077
[2020-11-24 21:26:38,985 WARN  L188               SmtUtils]: Spent 221.00 ms on a formula simplification that was a NOOP. DAG size: 390
[2020-11-24 21:26:39,219 WARN  L188               SmtUtils]: Spent 231.00 ms on a formula simplification that was a NOOP. DAG size: 390
Garbage collection #1: 137 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 137 to 271
Garbage collection #2: 271 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 271 to 541
Garbage collection #3: 541 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 541 to 1069
Garbage collection #4: 1069 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 1069 to 2137
Garbage collection #5: 2137 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 2137 to 4273
Garbage collection #6: 4273 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 4273 to 8543
Garbage collection #7: 8543 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 8543 to 17077
Garbage collection #1: 79 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 79 to 157
Garbage collection #2: 157 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 157 to 313
Garbage collection #3: 313 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 313 to 619
Garbage collection #4: 619 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 619 to 1237
Garbage collection #5: 1237 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1237 to 2473
Garbage collection #6: 2473 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2473 to 4943
[2020-11-24 21:26:39,332 WARN  L188               SmtUtils]: Spent 105.00 ms on a formula simplification that was a NOOP. DAG size: 271
[2020-11-24 21:26:39,344 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #2: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #3: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #4: 277 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 277 to 547
Garbage collection #5: 547 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 547 to 1093
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #2: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #3: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #4: 277 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 277 to 547
Garbage collection #5: 547 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 547 to 1093
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #2: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #3: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #4: 277 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 277 to 547
Garbage collection #5: 547 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 547 to 1093
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #2: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #3: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #4: 277 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 277 to 547
Garbage collection #5: 547 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 547 to 1093
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 59 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 59 to 113
Garbage collection #2: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #3: 223 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 223 to 443
Garbage collection #4: 443 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 443 to 883
Garbage collection #5: 883 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 883 to 1759
Garbage collection #1: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #2: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #3: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #4: 317 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 317 to 631
Garbage collection #5: 631 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 631 to 1259
Garbage collection #1: 7 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 7 to 13
Garbage collection #2: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #1: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #2: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #3: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #2: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #3: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #2: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #3: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #4: 277 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 277 to 547
Garbage collection #5: 547 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 547 to 1093
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 7 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 7 to 13
Garbage collection #2: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #1: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #2: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #3: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #2: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #3: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #1: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #2: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #3: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #1: 59 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 59 to 113
Garbage collection #2: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #3: 223 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 223 to 443
Garbage collection #4: 443 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 443 to 883
Garbage collection #5: 883 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 883 to 1759
Garbage collection #1: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #2: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #3: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #4: 223 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 223 to 443
Garbage collection #5: 443 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 443 to 883
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #2: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #3: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #4: 277 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 277 to 547
Garbage collection #5: 547 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 547 to 1093
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #2: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #3: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #4: 277 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 277 to 547
Garbage collection #5: 547 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 547 to 1093
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 59 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 59 to 113
Garbage collection #2: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #3: 223 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 223 to 443
Garbage collection #4: 443 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 443 to 883
Garbage collection #5: 883 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 883 to 1759
Garbage collection #1: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #2: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #3: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #4: 317 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 317 to 631
Garbage collection #5: 631 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 631 to 1259
Garbage collection #1: 7 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 7 to 13
Garbage collection #2: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #1: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #2: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #3: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #2: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #3: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #2: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #3: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #4: 277 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 277 to 547
Garbage collection #5: 547 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 547 to 1093
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 7 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 7 to 13
Garbage collection #2: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #1: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #2: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #3: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #2: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #3: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #1: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #2: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #3: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #1: 59 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 59 to 113
Garbage collection #2: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #3: 223 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 223 to 443
Garbage collection #4: 443 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 443 to 883
Garbage collection #5: 883 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 883 to 1759
Garbage collection #1: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #2: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #3: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #4: 223 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 223 to 443
Garbage collection #5: 443 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 443 to 883
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
[2020-11-24 21:26:40,934 WARN  L188               SmtUtils]: Spent 279.00 ms on a formula simplification. DAG size of input: 264 DAG size of output: 250
Garbage collection #1: 101 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 101 to 199
Garbage collection #2: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #3: 397 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 397 to 787
Garbage collection #4: 787 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 787 to 1571
Garbage collection #5: 1571 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1571 to 3137
Garbage collection #6: 3137 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3137 to 6271
Garbage collection #1: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #2: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #3: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #4: 397 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 397 to 787
Garbage collection #5: 787 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 787 to 1571
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #1: 7 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 7 to 13
Garbage collection #2: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #1: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #2: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #3: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #2: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #3: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #1: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #2: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #3: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #2: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #3: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #2: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #3: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #4: 223 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 223 to 443
Garbage collection #1: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #2: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #3: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #4: 223 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 223 to 443
[2020-11-24 21:26:45,712 WARN  L188               SmtUtils]: Spent 4.60 s on a formula simplification. DAG size of input: 501 DAG size of output: 473
Garbage collection #1: 191 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 191 to 379
Garbage collection #2: 379 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 379 to 757
Garbage collection #3: 757 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 757 to 1511
Garbage collection #4: 1511 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1511 to 3019
Garbage collection #5: 3019 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3019 to 6037
Garbage collection #6: 6037 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 6037 to 12073
Garbage collection #7: 12073 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 12073 to 24137
Garbage collection #1: 89 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 89 to 173
Garbage collection #2: 173 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 173 to 337
Garbage collection #3: 337 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 337 to 673
Garbage collection #4: 673 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 673 to 1327
Garbage collection #5: 1327 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1327 to 2647
Garbage collection #6: 2647 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2647 to 5281
Garbage collection #1: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #2: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #3: 223 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 223 to 443
Garbage collection #4: 443 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 443 to 883
Garbage collection #5: 883 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 883 to 1759
Garbage collection #6: 1759 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1759 to 3517
Garbage collection #1: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #2: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #3: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #4: 277 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 277 to 547
Garbage collection #5: 547 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 547 to 1093
[2020-11-24 21:26:46,136 WARN  L188               SmtUtils]: Spent 172.00 ms on a formula simplification that was a NOOP. DAG size: 402
Garbage collection #1: 151 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 151 to 293
Garbage collection #2: 293 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 293 to 577
Garbage collection #3: 577 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 577 to 1153
Garbage collection #4: 1153 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1153 to 2297
Garbage collection #5: 2297 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2297 to 4591
Garbage collection #6: 4591 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 4591 to 9181
Garbage collection #7: 9181 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 9181 to 18353
[2020-11-24 21:26:46,267 WARN  L188               SmtUtils]: Spent 127.00 ms on a formula simplification that was a NOOP. DAG size: 352
Garbage collection #1: 5 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 5 to 7
Garbage collection #2: 7 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 7 to 13
Garbage collection #1: 3 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3 to 5
Garbage collection #1: 5 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 5 to 7
Garbage collection #2: 7 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 7 to 13
Garbage collection #1: 5 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 5 to 7
Garbage collection #2: 7 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 7 to 13
Garbage collection #1: 3 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3 to 5
Garbage collection #1: 3 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3 to 5
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
[2020-11-24 21:26:46,570 WARN  L188               SmtUtils]: Spent 247.00 ms on a formula simplification. DAG size of input: 208 DAG size of output: 204
Garbage collection #1: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #2: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #3: 277 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 277 to 547
Garbage collection #4: 547 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 547 to 1093
Garbage collection #5: 1093 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1093 to 2179
Garbage collection #6: 2179 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2179 to 4357
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
[2020-11-24 21:26:46,719 WARN  L188               SmtUtils]: Spent 118.00 ms on a formula simplification. DAG size of input: 151 DAG size of output: 146
Garbage collection #1: 47 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 47 to 89
Garbage collection #2: 89 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 89 to 173
Garbage collection #3: 173 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 173 to 337
Garbage collection #4: 337 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 337 to 673
Garbage collection #5: 673 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 673 to 1327
Garbage collection #1: 41 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 41 to 79
Garbage collection #2: 79 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 79 to 157
Garbage collection #3: 157 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 157 to 313
Garbage collection #4: 313 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 313 to 619
Garbage collection #5: 619 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 619 to 1237
[2020-11-24 21:26:46,887 WARN  L188               SmtUtils]: Spent 111.00 ms on a formula simplification. DAG size of input: 135 DAG size of output: 134
Garbage collection #1: 41 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 41 to 79
Garbage collection #2: 79 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 79 to 157
Garbage collection #3: 157 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 157 to 313
Garbage collection #4: 313 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 313 to 619
Garbage collection #5: 619 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 619 to 1237
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
[2020-11-24 21:26:46,999 WARN  L188               SmtUtils]: Spent 109.00 ms on a formula simplification that was a NOOP. DAG size: 93
[2020-11-24 21:26:47,315 WARN  L188               SmtUtils]: Spent 315.00 ms on a formula simplification. DAG size of input: 310 DAG size of output: 305
Garbage collection #1: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #2: 223 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 223 to 443
Garbage collection #3: 443 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 443 to 883
Garbage collection #4: 883 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 883 to 1759
Garbage collection #5: 1759 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1759 to 3517
Garbage collection #6: 3517 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3517 to 7027
Garbage collection #1: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #2: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #3: 397 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 397 to 787
Garbage collection #4: 787 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 787 to 1571
Garbage collection #5: 1571 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1571 to 3137
Garbage collection #6: 3137 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3137 to 6271
[2020-11-24 21:26:47,462 WARN  L188               SmtUtils]: Spent 143.00 ms on a formula simplification that was a NOOP. DAG size: 289
[2020-11-24 21:26:47,956 WARN  L188               SmtUtils]: Spent 489.00 ms on a formula simplification. DAG size of input: 432 DAG size of output: 356
Garbage collection #1: 127 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 127 to 251
Garbage collection #2: 251 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 251 to 499
Garbage collection #3: 499 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 499 to 997
Garbage collection #4: 997 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 997 to 1993
Garbage collection #5: 1993 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1993 to 3967
Garbage collection #6: 3967 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3967 to 7933
Garbage collection #7: 7933 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 7933 to 15859
Garbage collection #1: 79 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 79 to 157
Garbage collection #2: 157 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 157 to 313
Garbage collection #3: 313 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 313 to 619
Garbage collection #4: 619 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 619 to 1237
Garbage collection #5: 1237 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1237 to 2473
Garbage collection #6: 2473 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2473 to 4943
[2020-11-24 21:26:48,080 WARN  L188               SmtUtils]: Spent 118.00 ms on a formula simplification that was a NOOP. DAG size: 254
[2020-11-24 21:26:48,387 WARN  L188               SmtUtils]: Spent 306.00 ms on a formula simplification that was a NOOP. DAG size: 482
Garbage collection #1: 191 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 191 to 379
Garbage collection #2: 379 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 379 to 757
Garbage collection #3: 757 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 757 to 1511
Garbage collection #4: 1511 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1511 to 3019
Garbage collection #5: 3019 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3019 to 6037
Garbage collection #6: 6037 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 6037 to 12073
Garbage collection #7: 12073 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 12073 to 24137
Garbage collection #1: 149 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 149 to 293
Garbage collection #2: 293 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 293 to 577
Garbage collection #3: 577 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 577 to 1153
Garbage collection #4: 1153 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1153 to 2297
Garbage collection #5: 2297 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2297 to 4591
Garbage collection #6: 4591 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 4591 to 9181
Garbage collection #7: 9181 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 9181 to 18353
[2020-11-24 21:26:48,649 WARN  L188               SmtUtils]: Spent 255.00 ms on a formula simplification that was a NOOP. DAG size: 394
Garbage collection #1: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #2: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #3: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #5: 317 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 317 to 631
Garbage collection #1: 97 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 97 to 193
Garbage collection #2: 193 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 193 to 383
Garbage collection #3: 383 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 383 to 761
Garbage collection #4: 761 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 761 to 1511
Garbage collection #5: 1511 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1511 to 3019
Garbage collection #6: 3019 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3019 to 6037
[2020-11-24 21:26:48,910 WARN  L188               SmtUtils]: Spent 138.00 ms on a formula simplification. DAG size of input: 292 DAG size of output: 288
Garbage collection #1: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #2: 223 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 223 to 443
Garbage collection #3: 443 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 443 to 883
Garbage collection #4: 883 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 883 to 1759
Garbage collection #5: 1759 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1759 to 3517
Garbage collection #6: 3517 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3517 to 7027
Garbage collection #1: 67 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 67 to 131
Garbage collection #2: 131 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 131 to 257
Garbage collection #3: 257 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 257 to 509
Garbage collection #4: 509 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 509 to 1013
Garbage collection #5: 1013 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1013 to 2017
Garbage collection #6: 2017 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2017 to 4027
[2020-11-24 21:26:49,089 WARN  L188               SmtUtils]: Spent 147.00 ms on a formula simplification that was a NOOP. DAG size: 429
Garbage collection #1: 179 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 179 to 353
Garbage collection #2: 353 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 353 to 701
Garbage collection #3: 701 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 701 to 1399
Garbage collection #4: 1399 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1399 to 2797
Garbage collection #5: 2797 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2797 to 5591
Garbage collection #6: 5591 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 5591 to 11177
Garbage collection #7: 11177 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 11177 to 22349
[2020-11-24 21:27:09,228 WARN  L188               SmtUtils]: Spent 20.04 s on a formula simplification. DAG size of input: 982 DAG size of output: 962
Garbage collection #1: 397 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 397 to 787
Garbage collection #2: 787 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 787 to 1571
Garbage collection #3: 1571 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1571 to 3137
Garbage collection #4: 3137 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3137 to 6271
Garbage collection #5: 6271 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 6271 to 12541
Garbage collection #6: 12541 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 12541 to 25073
Garbage collection #7: 25073 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 25073 to 50131
Garbage collection #8: 50131 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 50131 to 100129
Garbage collection #1: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #2: 223 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 223 to 443
Garbage collection #3: 443 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 443 to 883
Garbage collection #4: 883 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 883 to 1759
Garbage collection #5: 1759 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1759 to 3517
Garbage collection #6: 3517 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3517 to 7027
[2020-11-24 21:27:09,697 WARN  L188               SmtUtils]: Spent 428.00 ms on a formula simplification that was a NOOP. DAG size: 382
[2020-11-24 21:27:10,523 WARN  L188               SmtUtils]: Spent 787.00 ms on a formula simplification that was a NOOP. DAG size: 513
Garbage collection #1: 173 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 173 to 337
Garbage collection #2: 337 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 337 to 673
Garbage collection #3: 673 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 673 to 1327
Garbage collection #4: 1327 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1327 to 2647
Garbage collection #5: 2647 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2647 to 5281
Garbage collection #6: 5281 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 5281 to 10559
Garbage collection #7: 10559 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 10559 to 21107
Garbage collection #1: 109 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 109 to 211
Garbage collection #2: 211 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 211 to 421
Garbage collection #3: 421 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 421 to 839
Garbage collection #4: 839 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 839 to 1669
Garbage collection #5: 1669 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1669 to 3331
Garbage collection #6: 3331 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3331 to 6661
[2020-11-24 21:27:11,152 WARN  L188               SmtUtils]: Spent 620.00 ms on a formula simplification that was a NOOP. DAG size: 382
[2020-11-24 21:27:12,371 WARN  L188               SmtUtils]: Spent 1.22 s on a formula simplification. DAG size of input: 515 DAG size of output: 514
Garbage collection #1: 173 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 173 to 337
Garbage collection #2: 337 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 337 to 673
Garbage collection #3: 673 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 673 to 1327
Garbage collection #4: 1327 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1327 to 2647
Garbage collection #5: 2647 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2647 to 5281
Garbage collection #6: 5281 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 5281 to 10559
Garbage collection #7: 10559 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 10559 to 21107
Garbage collection #1: 173 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 173 to 337
Garbage collection #2: 337 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 337 to 673
Garbage collection #3: 673 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 673 to 1327
Garbage collection #4: 1327 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1327 to 2647
Garbage collection #5: 2647 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 2647 to 5281
Garbage collection #6: 5281 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 5281 to 10559
Garbage collection #7: 10559 nodes / 0 free / 0.001s / 0.002s total
Resizing node table from 10559 to 21107
[2020-11-24 21:27:12,950 WARN  L188               SmtUtils]: Spent 570.00 ms on a formula simplification that was a NOOP. DAG size: 510
[2020-11-24 21:27:12,985 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-24 21:27:12,997 INFO  L216          LassoAnalysis]: Preferences:
[2020-11-24 21:27:12,998 INFO  L124   ssoRankerPreferences]: Compute integeral hull: false
[2020-11-24 21:27:12,998 INFO  L125   ssoRankerPreferences]: Enable LassoPartitioneer: true
[2020-11-24 21:27:12,998 INFO  L126   ssoRankerPreferences]: Term annotations enabled: false
[2020-11-24 21:27:12,998 INFO  L127   ssoRankerPreferences]: Use exernal solver: true
[2020-11-24 21:27:12,998 INFO  L128   ssoRankerPreferences]: SMT solver command: z3 SMTLIB2_COMPLIANT=true -memory:1024 -smt2 -in -t:12000
[2020-11-24 21:27:12,998 INFO  L129   ssoRankerPreferences]: Dump SMT script to file: false
[2020-11-24 21:27:12,998 INFO  L130   ssoRankerPreferences]: Path of dumped script: 
[2020-11-24 21:27:12,998 INFO  L131   ssoRankerPreferences]: Filename of dumped script: MainToken_0x1d37986f252d0e349522ea6c3b98cb935495e63e_balanceof.bpl_BEv2_Iteration18_Lasso
[2020-11-24 21:27:12,998 INFO  L132   ssoRankerPreferences]: MapElimAlgo: Frank
[2020-11-24 21:27:12,998 INFO  L282          LassoAnalysis]: Starting lasso preprocessing...
Garbage collection #1: 251 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 251 to 499
Garbage collection #2: 499 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 499 to 997
Garbage collection #3: 997 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 997 to 1993
Garbage collection #4: 1993 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 1993 to 3967
Garbage collection #5: 3967 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 3967 to 7933
Garbage collection #6: 7933 nodes / 0 free / 0.001s / 0.002s total
Resizing node table from 7933 to 15859
Garbage collection #7: 15859 nodes / 0 free / 0.0s / 0.002s total
Resizing node table from 15859 to 31699
Garbage collection #1: 157 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 157 to 313
Garbage collection #2: 313 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 313 to 619
Garbage collection #3: 619 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 619 to 1237
Garbage collection #4: 1237 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1237 to 2473
Garbage collection #5: 2473 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2473 to 4943
Garbage collection #6: 4943 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 4943 to 9883
Garbage collection #7: 9883 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 9883 to 19763
[2020-11-24 21:27:13,481 FATAL L292        ToolchainWalker]: The Plugin de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer has thrown an exception:
java.lang.UnsupportedOperationException: function symbols not yet supported
	at de.uni_freiburg.informatik.ultimate.lassoranker.variables.LassoPartitioneer.addInOuAuxVar(LassoPartitioneer.java:238)
	at de.uni_freiburg.informatik.ultimate.lassoranker.variables.LassoPartitioneer.constructTransFormulaLR(LassoPartitioneer.java:210)
	at de.uni_freiburg.informatik.ultimate.lassoranker.variables.LassoPartitioneer.doPartition(LassoPartitioneer.java:165)
	at de.uni_freiburg.informatik.ultimate.lassoranker.variables.LassoPartitioneer.<init>(LassoPartitioneer.java:95)
	at de.uni_freiburg.informatik.ultimate.lassoranker.preprocessors.LassoPartitioneerPreprocessor.process(LassoPartitioneerPreprocessor.java:65)
	at de.uni_freiburg.informatik.ultimate.lassoranker.variables.LassoBuilder.applyPreprocessor(LassoBuilder.java:154)
	at de.uni_freiburg.informatik.ultimate.lassoranker.variables.LassoBuilder.preprocess(LassoBuilder.java:262)
	at de.uni_freiburg.informatik.ultimate.lassoranker.LassoAnalysis.preprocess(LassoAnalysis.java:286)
	at de.uni_freiburg.informatik.ultimate.lassoranker.LassoAnalysis.<init>(LassoAnalysis.java:235)
	at de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.LassoCheck.synthesize(LassoCheck.java:788)
	at de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.LassoCheck.access$18(LassoCheck.java:715)
	at de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.LassoCheck$LassoCheckResult.checkLassoTermination(LassoCheck.java:1163)
	at de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.LassoCheck$LassoCheckResult.<init>(LassoCheck.java:1062)
	at de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.LassoCheck.<init>(LassoCheck.java:276)
	at de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiCegarLoop.iterate(BuchiCegarLoop.java:479)
	at de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver.doTerminationAnalysis(BuchiAutomizerObserver.java:153)
	at de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver.finish(BuchiAutomizerObserver.java:413)
	at de.uni_freiburg.informatik.ultimate.core.coreplugin.PluginConnector.runObserver(PluginConnector.java:168)
	at de.uni_freiburg.informatik.ultimate.core.coreplugin.PluginConnector.runTool(PluginConnector.java:151)
	at de.uni_freiburg.informatik.ultimate.core.coreplugin.PluginConnector.run(PluginConnector.java:128)
	at de.uni_freiburg.informatik.ultimate.core.coreplugin.ToolchainWalker.executePluginConnector(ToolchainWalker.java:232)
	at de.uni_freiburg.informatik.ultimate.core.coreplugin.ToolchainWalker.processPlugin(ToolchainWalker.java:226)
	at de.uni_freiburg.informatik.ultimate.core.coreplugin.ToolchainWalker.walkUnprotected(ToolchainWalker.java:142)
	at de.uni_freiburg.informatik.ultimate.core.coreplugin.ToolchainWalker.walk(ToolchainWalker.java:104)
	at de.uni_freiburg.informatik.ultimate.core.coreplugin.ToolchainManager$Toolchain.processToolchain(ToolchainManager.java:317)
	at de.uni_freiburg.informatik.ultimate.core.coreplugin.toolchain.DefaultToolchainJob.run(DefaultToolchainJob.java:145)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:55)
[2020-11-24 21:27:13,482 INFO  L168              Benchmark]: Toolchain (without parser) took 97625.36 ms. Allocated memory was 1.0 GB in the beginning and 6.1 GB in the end (delta: 5.1 GB). Free memory was 913.7 MB in the beginning and 3.8 GB in the end (delta: -2.9 GB). Peak memory consumption was 5.3 GB. Max. memory is 15.3 GB.
[2020-11-24 21:27:13,483 INFO  L168              Benchmark]: Boogie PL CUP Parser took 0.16 ms. Allocated memory is still 1.0 GB. Free memory is still 951.3 MB. There was no memory consumed. Max. memory is 15.3 GB.
[2020-11-24 21:27:13,483 INFO  L168              Benchmark]: Boogie Preprocessor took 198.90 ms. Allocated memory is still 1.0 GB. Free memory was 913.7 MB in the beginning and 886.9 MB in the end (delta: 26.8 MB). Peak memory consumption was 26.8 MB. Max. memory is 15.3 GB.
[2020-11-24 21:27:13,483 INFO  L168              Benchmark]: UtopiaSpecLang took 94.63 ms. Allocated memory is still 1.0 GB. Free memory was 886.9 MB in the beginning and 870.8 MB in the end (delta: 16.1 MB). Peak memory consumption was 16.1 MB. Max. memory is 15.3 GB.
[2020-11-24 21:27:13,484 INFO  L168              Benchmark]: Boogie Printer took 35.10 ms. Allocated memory is still 1.0 GB. Free memory was 870.8 MB in the beginning and 865.4 MB in the end (delta: 5.4 MB). Peak memory consumption was 5.4 MB. Max. memory is 15.3 GB.
[2020-11-24 21:27:13,484 INFO  L168              Benchmark]: RCFGBuilder took 1605.30 ms. Allocated memory was 1.0 GB in the beginning and 1.2 GB in the end (delta: 194.0 MB). Free memory was 865.4 MB in the beginning and 1.1 GB in the end (delta: -259.0 MB). Peak memory consumption was 257.6 MB. Max. memory is 15.3 GB.
[2020-11-24 21:27:13,485 INFO  L168              Benchmark]: UtopiaLTL2Aut took 34.29 ms. Allocated memory is still 1.2 GB. Free memory was 1.1 GB in the beginning and 1.1 GB in the end (delta: 8.3 MB). Peak memory consumption was 8.3 MB. Max. memory is 15.3 GB.
[2020-11-24 21:27:13,485 INFO  L168              Benchmark]: BÃ¼chi Program Product took 4304.30 ms. Allocated memory was 1.2 GB in the beginning and 1.6 GB in the end (delta: 341.3 MB). Free memory was 1.1 GB in the beginning and 1.0 GB in the end (delta: 82.6 MB). Peak memory consumption was 838.9 MB. Max. memory is 15.3 GB.
[2020-11-24 21:27:13,485 INFO  L168              Benchmark]: BlockEncodingV2 took 312.40 ms. Allocated memory is still 1.6 GB. Free memory was 1.0 GB in the beginning and 851.2 MB in the end (delta: 182.3 MB). Peak memory consumption was 182.3 MB. Max. memory is 15.3 GB.
[2020-11-24 21:27:13,486 INFO  L168              Benchmark]: BuchiAutomizer took 91037.39 ms. Allocated memory was 1.6 GB in the beginning and 6.1 GB in the end (delta: 4.5 GB). Free memory was 851.2 MB in the beginning and 3.8 GB in the end (delta: -2.9 GB). Peak memory consumption was 4.7 GB. Max. memory is 15.3 GB.
[2020-11-24 21:27:13,488 INFO  L337   ainManager$Toolchain]: #######################  End [Toolchain 1] #######################
 --- Results ---
 * Results from de.uni_freiburg.informatik.ultimate.plugins.blockencoding:
  - StatisticsResult: Initial Icfg
    13180 locations, 24265 edges
  - StatisticsResult: Encoded RCFG
    12978 locations, 23703 edges
 * Results from de.uni_freiburg.informatik.ultimate.core:
  - StatisticsResult: Toolchain Benchmarks
    Benchmark results are:
 * Boogie PL CUP Parser took 0.16 ms. Allocated memory is still 1.0 GB. Free memory is still 951.3 MB. There was no memory consumed. Max. memory is 15.3 GB.
 * Boogie Preprocessor took 198.90 ms. Allocated memory is still 1.0 GB. Free memory was 913.7 MB in the beginning and 886.9 MB in the end (delta: 26.8 MB). Peak memory consumption was 26.8 MB. Max. memory is 15.3 GB.
 * UtopiaSpecLang took 94.63 ms. Allocated memory is still 1.0 GB. Free memory was 886.9 MB in the beginning and 870.8 MB in the end (delta: 16.1 MB). Peak memory consumption was 16.1 MB. Max. memory is 15.3 GB.
 * Boogie Printer took 35.10 ms. Allocated memory is still 1.0 GB. Free memory was 870.8 MB in the beginning and 865.4 MB in the end (delta: 5.4 MB). Peak memory consumption was 5.4 MB. Max. memory is 15.3 GB.
 * RCFGBuilder took 1605.30 ms. Allocated memory was 1.0 GB in the beginning and 1.2 GB in the end (delta: 194.0 MB). Free memory was 865.4 MB in the beginning and 1.1 GB in the end (delta: -259.0 MB). Peak memory consumption was 257.6 MB. Max. memory is 15.3 GB.
 * UtopiaLTL2Aut took 34.29 ms. Allocated memory is still 1.2 GB. Free memory was 1.1 GB in the beginning and 1.1 GB in the end (delta: 8.3 MB). Peak memory consumption was 8.3 MB. Max. memory is 15.3 GB.
 * BÃ¼chi Program Product took 4304.30 ms. Allocated memory was 1.2 GB in the beginning and 1.6 GB in the end (delta: 341.3 MB). Free memory was 1.1 GB in the beginning and 1.0 GB in the end (delta: 82.6 MB). Peak memory consumption was 838.9 MB. Max. memory is 15.3 GB.
 * BlockEncodingV2 took 312.40 ms. Allocated memory is still 1.6 GB. Free memory was 1.0 GB in the beginning and 851.2 MB in the end (delta: 182.3 MB). Peak memory consumption was 182.3 MB. Max. memory is 15.3 GB.
 * BuchiAutomizer took 91037.39 ms. Allocated memory was 1.6 GB in the beginning and 6.1 GB in the end (delta: 4.5 GB). Free memory was 851.2 MB in the beginning and 3.8 GB in the end (delta: -2.9 GB). Peak memory consumption was 4.7 GB. Max. memory is 15.3 GB.
 * Results from de.uni_freiburg.informatik.ultimate.buchiprogramproduct:
  - StatisticsResult: Initial property automaton
    2 locations, 3 edges
  - StatisticsResult: Initial RCFG
    5258 locations, 7412 edges
  - StatisticsResult: BuchiProgram size
    13180 locations, 24265 edges
 * Results from de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer:
  - ExceptionOrErrorResult: UnsupportedOperationException: function symbols not yet supported
    de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer: UnsupportedOperationException: function symbols not yet supported: de.uni_freiburg.informatik.ultimate.lassoranker.variables.LassoPartitioneer.addInOuAuxVar(LassoPartitioneer.java:238)
RESULT: Ultimate could not prove your program: Toolchain returned no result.
Received shutdown request...
