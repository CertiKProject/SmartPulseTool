This is Ultimate 0.1.24-f1553f5-m
[2020-11-25 16:56:41,497 INFO  L170        SettingsManager]: Resetting all preferences to default values...
[2020-11-25 16:56:41,498 INFO  L174        SettingsManager]: Resetting UltimateCore preferences to default values
[2020-11-25 16:56:41,510 INFO  L177        SettingsManager]: Ultimate Commandline Interface provides no preferences, ignoring...
[2020-11-25 16:56:41,510 INFO  L174        SettingsManager]: Resetting Boogie Preprocessor preferences to default values
[2020-11-25 16:56:41,511 INFO  L174        SettingsManager]: Resetting Boogie Procedure Inliner preferences to default values
[2020-11-25 16:56:41,512 INFO  L174        SettingsManager]: Resetting Abstract Interpretation preferences to default values
[2020-11-25 16:56:41,513 INFO  L174        SettingsManager]: Resetting LassoRanker preferences to default values
[2020-11-25 16:56:41,514 INFO  L174        SettingsManager]: Resetting Reaching Definitions preferences to default values
[2020-11-25 16:56:41,515 INFO  L174        SettingsManager]: Resetting SyntaxChecker preferences to default values
[2020-11-25 16:56:41,516 INFO  L177        SettingsManager]: BÃ¼chi Program Product provides no preferences, ignoring...
[2020-11-25 16:56:41,516 INFO  L174        SettingsManager]: Resetting LTL2Aut preferences to default values
[2020-11-25 16:56:41,517 INFO  L174        SettingsManager]: Resetting PEA to Boogie preferences to default values
[2020-11-25 16:56:41,517 INFO  L174        SettingsManager]: Resetting BlockEncodingV2 preferences to default values
[2020-11-25 16:56:41,518 INFO  L174        SettingsManager]: Resetting ChcToBoogie preferences to default values
[2020-11-25 16:56:41,519 INFO  L174        SettingsManager]: Resetting AutomataScriptInterpreter preferences to default values
[2020-11-25 16:56:41,520 INFO  L174        SettingsManager]: Resetting BuchiAutomizer preferences to default values
[2020-11-25 16:56:41,521 INFO  L174        SettingsManager]: Resetting CACSL2BoogieTranslator preferences to default values
[2020-11-25 16:56:41,522 INFO  L174        SettingsManager]: Resetting CodeCheck preferences to default values
[2020-11-25 16:56:41,523 INFO  L174        SettingsManager]: Resetting InvariantSynthesis preferences to default values
[2020-11-25 16:56:41,524 INFO  L174        SettingsManager]: Resetting RCFGBuilder preferences to default values
[2020-11-25 16:56:41,525 INFO  L174        SettingsManager]: Resetting TraceAbstraction preferences to default values
[2020-11-25 16:56:41,527 INFO  L177        SettingsManager]: TraceAbstractionConcurrent provides no preferences, ignoring...
[2020-11-25 16:56:41,527 INFO  L177        SettingsManager]: TraceAbstractionWithAFAs provides no preferences, ignoring...
[2020-11-25 16:56:41,527 INFO  L174        SettingsManager]: Resetting TreeAutomizer preferences to default values
[2020-11-25 16:56:41,528 INFO  L174        SettingsManager]: Resetting IcfgToChc preferences to default values
[2020-11-25 16:56:41,528 INFO  L174        SettingsManager]: Resetting IcfgTransformer preferences to default values
[2020-11-25 16:56:41,528 INFO  L177        SettingsManager]: ReqToTest provides no preferences, ignoring...
[2020-11-25 16:56:41,529 INFO  L174        SettingsManager]: Resetting UtopiaLTL2Aut preferences to default values
[2020-11-25 16:56:41,529 INFO  L174        SettingsManager]: Resetting UtopiaSpecLang preferences to default values
[2020-11-25 16:56:41,529 INFO  L174        SettingsManager]: Resetting Boogie Printer preferences to default values
[2020-11-25 16:56:41,530 INFO  L174        SettingsManager]: Resetting ChcSmtPrinter preferences to default values
[2020-11-25 16:56:41,530 INFO  L174        SettingsManager]: Resetting ReqPrinter preferences to default values
[2020-11-25 16:56:41,531 INFO  L174        SettingsManager]: Resetting Witness Printer preferences to default values
[2020-11-25 16:56:41,532 INFO  L177        SettingsManager]: Boogie PL CUP Parser provides no preferences, ignoring...
[2020-11-25 16:56:41,532 INFO  L174        SettingsManager]: Resetting CDTParser preferences to default values
[2020-11-25 16:56:41,532 INFO  L177        SettingsManager]: AutomataScriptParser provides no preferences, ignoring...
[2020-11-25 16:56:41,532 INFO  L177        SettingsManager]: ReqParser provides no preferences, ignoring...
[2020-11-25 16:56:41,533 INFO  L174        SettingsManager]: Resetting SmtParser preferences to default values
[2020-11-25 16:56:41,533 INFO  L174        SettingsManager]: Resetting Witness Parser preferences to default values
[2020-11-25 16:56:41,534 INFO  L181        SettingsManager]: Finished resetting all preferences to default values...
[2020-11-25 16:56:41,534 INFO  L98         SettingsManager]: Beginning loading settings from /mnt/data0/jon/SmartPulseTool/SmartPulse/settings.epf
[2020-11-25 16:56:41,542 INFO  L110        SettingsManager]: Loading preferences was successful
[2020-11-25 16:56:41,542 INFO  L112        SettingsManager]: Preferences different from defaults after loading the file:
[2020-11-25 16:56:41,543 INFO  L131        SettingsManager]: Preferences of LTL2Aut differ from their defaults:
[2020-11-25 16:56:41,543 INFO  L133        SettingsManager]:  * Read property from file=true
[2020-11-25 16:56:41,543 INFO  L133        SettingsManager]:  * Path to LTL*BA executable (LTL2BA, LTL3BA)=/mnt/data0/jon/SmartPulseTool/ltl2ba
[2020-11-25 16:56:41,543 INFO  L131        SettingsManager]: Preferences of BlockEncodingV2 differ from their defaults:
[2020-11-25 16:56:41,543 INFO  L133        SettingsManager]:  * Maximize final states=false
[2020-11-25 16:56:41,544 INFO  L133        SettingsManager]:  * Minimize states even if more edges are added than removed.=true
[2020-11-25 16:56:41,544 INFO  L133        SettingsManager]:  * Minimize states using LBE with the strategy=NONE
[2020-11-25 16:56:41,544 INFO  L131        SettingsManager]: Preferences of BuchiAutomizer differ from their defaults:
[2020-11-25 16:56:41,544 INFO  L133        SettingsManager]:  * Compute Interpolants along a Counterexample=Craig_TreeInterpolation
[2020-11-25 16:56:41,544 INFO  L133        SettingsManager]:  * Use old map elimination=false
[2020-11-25 16:56:41,544 INFO  L133        SettingsManager]:  * Try twofold refinement=false
[2020-11-25 16:56:41,544 INFO  L131        SettingsManager]: Preferences of CACSL2BoogieTranslator differ from their defaults:
[2020-11-25 16:56:41,544 INFO  L133        SettingsManager]:  * Check unreachability of error function in SV-COMP mode=false
[2020-11-25 16:56:41,545 INFO  L133        SettingsManager]:  * Overapproximate operations on floating types=true
[2020-11-25 16:56:41,545 INFO  L133        SettingsManager]:  * Check division by zero=IGNORE
[2020-11-25 16:56:41,545 INFO  L133        SettingsManager]:  * Pointer to allocated memory at dereference=ASSUME
[2020-11-25 16:56:41,545 INFO  L133        SettingsManager]:  * If two pointers are subtracted or compared they have the same base address=ASSUME
[2020-11-25 16:56:41,545 INFO  L133        SettingsManager]:  * Check array bounds for arrays that are off heap=ASSUME
[2020-11-25 16:56:41,545 INFO  L133        SettingsManager]:  * Check if freed pointer was valid=false
[2020-11-25 16:56:41,545 INFO  L133        SettingsManager]:  * Use constant arrays=true
[2020-11-25 16:56:41,545 INFO  L133        SettingsManager]:  * Pointer base address is valid at dereference=ASSUME
[2020-11-25 16:56:41,545 INFO  L131        SettingsManager]: Preferences of RCFGBuilder differ from their defaults:
[2020-11-25 16:56:41,546 INFO  L133        SettingsManager]:  * Size of a code block=SingleStatement
[2020-11-25 16:56:41,546 INFO  L133        SettingsManager]:  * SMT solver=Internal_SMTInterpol
[2020-11-25 16:56:41,572 INFO  L81    nceAwareModelManager]: Repository-Root is: /tmp
[2020-11-25 16:56:41,585 INFO  L259   ainManager$Toolchain]: [Toolchain 1]: Applicable parser(s) successfully (re)initialized
[2020-11-25 16:56:41,588 INFO  L215   ainManager$Toolchain]: [Toolchain 1]: Toolchain selected.
[2020-11-25 16:56:41,589 INFO  L271        PluginConnector]: Initializing Boogie PL CUP Parser...
[2020-11-25 16:56:41,589 INFO  L276        PluginConnector]: Boogie PL CUP Parser initialized
[2020-11-25 16:56:41,590 INFO  L430   ainManager$Toolchain]: [Toolchain 1]: Parsing single file: /mnt/data0/jon/SmartPulseTool/GEEQToken_0x6b9f031d718dded0d681c20cb754f97b3bb81b78_transferfrom-self.bpl
[2020-11-25 16:56:41,590 INFO  L111           BoogieParser]: Parsing: '/mnt/data0/jon/SmartPulseTool/GEEQToken_0x6b9f031d718dded0d681c20cb754f97b3bb81b78_transferfrom-self.bpl'
[2020-11-25 16:56:41,680 INFO  L297   ainManager$Toolchain]: ####################### [Toolchain 1] #######################
[2020-11-25 16:56:41,681 INFO  L131        ToolchainWalker]: Walking toolchain with 8 elements.
[2020-11-25 16:56:41,681 INFO  L113        PluginConnector]: ------------------------Boogie Preprocessor----------------------------
[2020-11-25 16:56:41,681 INFO  L271        PluginConnector]: Initializing Boogie Preprocessor...
[2020-11-25 16:56:41,682 INFO  L276        PluginConnector]: Boogie Preprocessor initialized
[2020-11-25 16:56:41,698 INFO  L185        PluginConnector]: Executing the observer EnsureBoogieModelObserver from plugin Boogie Preprocessor for "GEEQToken_0x6b9f031d718dded0d681c20cb754f97b3bb81b78_transferfrom-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 04:56:41" (1/1) ...
[2020-11-25 16:56:41,700 INFO  L185        PluginConnector]: Executing the observer TypeChecker from plugin Boogie Preprocessor for "GEEQToken_0x6b9f031d718dded0d681c20cb754f97b3bb81b78_transferfrom-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 04:56:41" (1/1) ...
[2020-11-25 16:56:41,734 INFO  L185        PluginConnector]: Executing the observer ConstExpander from plugin Boogie Preprocessor for "GEEQToken_0x6b9f031d718dded0d681c20cb754f97b3bb81b78_transferfrom-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 04:56:41" (1/1) ...
[2020-11-25 16:56:41,735 INFO  L185        PluginConnector]: Executing the observer StructExpander from plugin Boogie Preprocessor for "GEEQToken_0x6b9f031d718dded0d681c20cb754f97b3bb81b78_transferfrom-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 04:56:41" (1/1) ...
[2020-11-25 16:56:41,762 INFO  L185        PluginConnector]: Executing the observer UnstructureCode from plugin Boogie Preprocessor for "GEEQToken_0x6b9f031d718dded0d681c20cb754f97b3bb81b78_transferfrom-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 04:56:41" (1/1) ...
[2020-11-25 16:56:41,775 INFO  L185        PluginConnector]: Executing the observer FunctionInliner from plugin Boogie Preprocessor for "GEEQToken_0x6b9f031d718dded0d681c20cb754f97b3bb81b78_transferfrom-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 04:56:41" (1/1) ...
[2020-11-25 16:56:41,784 INFO  L185        PluginConnector]: Executing the observer BoogieSymbolTableConstructor from plugin Boogie Preprocessor for "GEEQToken_0x6b9f031d718dded0d681c20cb754f97b3bb81b78_transferfrom-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 04:56:41" (1/1) ...
[2020-11-25 16:56:41,794 INFO  L132        PluginConnector]: ------------------------ END Boogie Preprocessor----------------------------
[2020-11-25 16:56:41,794 INFO  L113        PluginConnector]: ------------------------UtopiaSpecLang----------------------------
[2020-11-25 16:56:41,795 INFO  L271        PluginConnector]: Initializing UtopiaSpecLang...
[2020-11-25 16:56:41,797 INFO  L276        PluginConnector]: UtopiaSpecLang initialized
[2020-11-25 16:56:41,801 INFO  L185        PluginConnector]: Executing the observer UtopiaSpecLangObserver from plugin UtopiaSpecLang for "GEEQToken_0x6b9f031d718dded0d681c20cb754f97b3bb81b78_transferfrom-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 04:56:41" (1/1) ...
[2020-11-25 16:56:41,819 INFO  L1012  opiaSpecLangObserver]: Parsing LTLPlus Formula to AstNode: [](started(GEEQToken.transferFrom(from, to, value), (p1 != from || p2 != msg.sender) && from == to && value <= balances_GEEQToken[this][from] && value <= allowed_GEEQToken[this][from][msg.sender] && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_GEEQToken[this][to] >= 0 && balances_GEEQToken[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_GEEQToken[this][from] >= 0 &&  balances_GEEQToken[this][from] < 0x10000000000000000000000000000000000000000000000000000000000000000 && allowed_GEEQToken[this][from][msg.sender] >= 0 && allowed_GEEQToken[this][from][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(finished(GEEQToken.transferFrom(from, to, value), return == true && allowed_GEEQToken[this][from][msg.sender] == old(allowed_GEEQToken[this][from][msg.sender]) - value && _totalSupply_GEEQToken[this] == old(_totalSupply_GEEQToken[this]) && balances_GEEQToken[this] == old(balances_GEEQToken[this]) && allowed_GEEQToken[this][p1][p2] == old(allowed_GEEQToken[this][p1][p2]) && symbol_GEEQToken[this] == old(symbol_GEEQToken[this]) && name_GEEQToken[this] == old(name_GEEQToken[this]) && decimals_GEEQToken[this] == old(decimals_GEEQToken[this]) && _totalMinted_GEEQToken[this] == old(_totalMinted_GEEQToken[this]) && _maxMintable_GEEQToken[this] == old(_maxMintable_GEEQToken[this]) && pauseOn_GEEQToken[this] == old(pauseOn_GEEQToken[this]) && migrationOn_GEEQToken[this] == old(migrationOn_GEEQToken[this]) && geeqaddress_GEEQToken[this] == old(geeqaddress_GEEQToken[this]) && owner_Owned[this] == old(owner_Owned[this]) && newOwner_Owned[this] == old(newOwner_Owned[this]))))
[2020-11-25 16:56:41,825 INFO  L1016  opiaSpecLangObserver]: Successfully lexed: [](started(GEEQToken.transferFrom(from, to, value), (p1 != from || p2 != msg.sender) && from == to && value <= balances_GEEQToken[this][from] && value <= allowed_GEEQToken[this][from][msg.sender] && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_GEEQToken[this][to] >= 0 && balances_GEEQToken[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_GEEQToken[this][from] >= 0 &&  balances_GEEQToken[this][from] < 0x10000000000000000000000000000000000000000000000000000000000000000 && allowed_GEEQToken[this][from][msg.sender] >= 0 && allowed_GEEQToken[this][from][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(finished(GEEQToken.transferFrom(from, to, value), return == true && allowed_GEEQToken[this][from][msg.sender] == old(allowed_GEEQToken[this][from][msg.sender]) - value && _totalSupply_GEEQToken[this] == old(_totalSupply_GEEQToken[this]) && balances_GEEQToken[this] == old(balances_GEEQToken[this]) && allowed_GEEQToken[this][p1][p2] == old(allowed_GEEQToken[this][p1][p2]) && symbol_GEEQToken[this] == old(symbol_GEEQToken[this]) && name_GEEQToken[this] == old(name_GEEQToken[this]) && decimals_GEEQToken[this] == old(decimals_GEEQToken[this]) && _totalMinted_GEEQToken[this] == old(_totalMinted_GEEQToken[this]) && _maxMintable_GEEQToken[this] == old(_maxMintable_GEEQToken[this]) && pauseOn_GEEQToken[this] == old(pauseOn_GEEQToken[this]) && migrationOn_GEEQToken[this] == old(migrationOn_GEEQToken[this]) && geeqaddress_GEEQToken[this] == old(geeqaddress_GEEQToken[this]) && owner_Owned[this] == old(owner_Owned[this]) && newOwner_Owned[this] == old(newOwner_Owned[this]))))
[2020-11-25 16:56:41,834 INFO  L1018  opiaSpecLangObserver]: Successfully parsed: [](started(GEEQToken.transferFrom(from, to, value), (p1 != from || p2 != msg.sender) && from == to && value <= balances_GEEQToken[this][from] && value <= allowed_GEEQToken[this][from][msg.sender] && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_GEEQToken[this][to] >= 0 && balances_GEEQToken[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_GEEQToken[this][from] >= 0 &&  balances_GEEQToken[this][from] < 0x10000000000000000000000000000000000000000000000000000000000000000 && allowed_GEEQToken[this][from][msg.sender] >= 0 && allowed_GEEQToken[this][from][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(finished(GEEQToken.transferFrom(from, to, value), return == true && allowed_GEEQToken[this][from][msg.sender] == old(allowed_GEEQToken[this][from][msg.sender]) - value && _totalSupply_GEEQToken[this] == old(_totalSupply_GEEQToken[this]) && balances_GEEQToken[this] == old(balances_GEEQToken[this]) && allowed_GEEQToken[this][p1][p2] == old(allowed_GEEQToken[this][p1][p2]) && symbol_GEEQToken[this] == old(symbol_GEEQToken[this]) && name_GEEQToken[this] == old(name_GEEQToken[this]) && decimals_GEEQToken[this] == old(decimals_GEEQToken[this]) && _totalMinted_GEEQToken[this] == old(_totalMinted_GEEQToken[this]) && _maxMintable_GEEQToken[this] == old(_maxMintable_GEEQToken[this]) && pauseOn_GEEQToken[this] == old(pauseOn_GEEQToken[this]) && migrationOn_GEEQToken[this] == old(migrationOn_GEEQToken[this]) && geeqaddress_GEEQToken[this] == old(geeqaddress_GEEQToken[this]) && owner_Owned[this] == old(owner_Owned[this]) && newOwner_Owned[this] == old(newOwner_Owned[this]))))
[2020-11-25 16:56:41,843 INFO  L636   opiaSpecLangObserver]: Parsed ( ( ( ( ( ( ( ( ( ( ( ( p1!=from_s747 || p2!=msg.sender ) && from_s747==to_s747 ) && tokens_s747<=balances_GEEQToken[this][from_s747] ) && tokens_s747<=allowed_GEEQToken[this][from_s747][msg.sender] ) && tokens_s747>=0 ) && tokens_s747<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) && balances_GEEQToken[this][to_s747]>=0 ) && balances_GEEQToken[this][to_s747]<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) && balances_GEEQToken[this][from_s747]>=0 ) && balances_GEEQToken[this][from_s747]<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) && allowed_GEEQToken[this][from_s747][msg.sender]>=0 ) && allowed_GEEQToken[this][from_s747][msg.sender]<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) to BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICOR,BinaryExpression[COMPNEQ,IdentifierExpression[p1,GLOBAL],IdentifierExpression[from_s747,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_GEEQToken>]],BinaryExpression[COMPNEQ,IdentifierExpression[p2,GLOBAL],IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_GEEQToken>]]],BinaryExpression[COMPEQ,IdentifierExpression[from_s747,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_GEEQToken>],IdentifierExpression[to_s747,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_GEEQToken>]]],BinaryExpression[COMPLEQ,IdentifierExpression[tokens_s747,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_GEEQToken>],ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balances_GEEQToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_GEEQToken>]]],[IdentifierExpression[from_s747,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_GEEQToken>]]]]],BinaryExpression[COMPLEQ,IdentifierExpression[tokens_s747,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_GEEQToken>],ArrayAccessExpression[ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[allowed_GEEQToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_GEEQToken>]]],[IdentifierExpression[from_s747,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_GEEQToken>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_GEEQToken>]]]]],BinaryExpression[COMPGEQ,IdentifierExpression[tokens_s747,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_GEEQToken>],IntegerLiteral[0]]],BinaryExpression[COMPLT,IdentifierExpression[tokens_s747,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_GEEQToken>],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]],BinaryExpression[COMPGEQ,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balances_GEEQToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_GEEQToken>]]],[IdentifierExpression[to_s747,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_GEEQToken>]]],IntegerLiteral[0]]],BinaryExpression[COMPLT,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balances_GEEQToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_GEEQToken>]]],[IdentifierExpression[to_s747,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_GEEQToken>]]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]],BinaryExpression[COMPGEQ,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balances_GEEQToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_GEEQToken>]]],[IdentifierExpression[from_s747,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_GEEQToken>]]],IntegerLiteral[0]]],BinaryExpression[COMPLT,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balances_GEEQToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_GEEQToken>]]],[IdentifierExpression[from_s747,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_GEEQToken>]]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]],BinaryExpression[COMPGEQ,ArrayAccessExpression[ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[allowed_GEEQToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_GEEQToken>]]],[IdentifierExpression[from_s747,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_GEEQToken>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_GEEQToken>]]],IntegerLiteral[0]]],BinaryExpression[COMPLT,ArrayAccessExpression[ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[allowed_GEEQToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_GEEQToken>]]],[IdentifierExpression[from_s747,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_GEEQToken>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_GEEQToken>]]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]]
[2020-11-25 16:56:41,847 INFO  L636   opiaSpecLangObserver]: Parsed ( ( ( ( ( ( ( ( ( ( ( ( ( ( success_s747==true && allowed_GEEQToken[this][from_s747][msg.sender]==( ( old(allowed_GEEQToken[this][from_s747][msg.sender]) ) - tokens_s747 ) ) && _totalSupply_GEEQToken[this]==( old(_totalSupply_GEEQToken[this]) ) ) && balances_GEEQToken[this]==( old(balances_GEEQToken[this]) ) ) && allowed_GEEQToken[this][p1][p2]==( old(allowed_GEEQToken[this][p1][p2]) ) ) && symbol_GEEQToken[this]==( old(symbol_GEEQToken[this]) ) ) && name_GEEQToken[this]==( old(name_GEEQToken[this]) ) ) && decimals_GEEQToken[this]==( old(decimals_GEEQToken[this]) ) ) && _totalMinted_GEEQToken[this]==( old(_totalMinted_GEEQToken[this]) ) ) && _maxMintable_GEEQToken[this]==( old(_maxMintable_GEEQToken[this]) ) ) && pauseOn_GEEQToken[this]==( old(pauseOn_GEEQToken[this]) ) ) && migrationOn_GEEQToken[this]==( old(migrationOn_GEEQToken[this]) ) ) && geeqaddress_GEEQToken[this]==( old(geeqaddress_GEEQToken[this]) ) ) && owner_Owned[this]==( old(owner_Owned[this]) ) ) && newOwner_Owned[this]==( old(newOwner_Owned[this]) ) ) to BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[COMPEQ,IdentifierExpression[success_s747,<IMPLEMENTATION_OUTPARAM,transferFrom~address~address~uint256_GEEQToken>],BooleanLiteral[true]],BinaryExpression[COMPEQ,ArrayAccessExpression[ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[allowed_GEEQToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_GEEQToken>]]],[IdentifierExpression[from_s747,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_GEEQToken>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_GEEQToken>]]],BinaryExpression[ARITHMINUS,UnaryExpression[OLD,ArrayAccessExpression[ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[allowed_GEEQToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_GEEQToken>]]],[IdentifierExpression[from_s747,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_GEEQToken>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_GEEQToken>]]]],IdentifierExpression[tokens_s747,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_GEEQToken>]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[_totalSupply_GEEQToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_GEEQToken>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[_totalSupply_GEEQToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_GEEQToken>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[balances_GEEQToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_GEEQToken>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[balances_GEEQToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_GEEQToken>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[allowed_GEEQToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_GEEQToken>]]],[IdentifierExpression[p1,GLOBAL]]],[IdentifierExpression[p2,GLOBAL]]],UnaryExpression[OLD,ArrayAccessExpression[ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[allowed_GEEQToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_GEEQToken>]]],[IdentifierExpression[p1,GLOBAL]]],[IdentifierExpression[p2,GLOBAL]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[symbol_GEEQToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_GEEQToken>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[symbol_GEEQToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_GEEQToken>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[name_GEEQToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_GEEQToken>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[name_GEEQToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_GEEQToken>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[decimals_GEEQToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_GEEQToken>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[decimals_GEEQToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_GEEQToken>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[_totalMinted_GEEQToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_GEEQToken>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[_totalMinted_GEEQToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_GEEQToken>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[_maxMintable_GEEQToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_GEEQToken>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[_maxMintable_GEEQToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_GEEQToken>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[pauseOn_GEEQToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_GEEQToken>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[pauseOn_GEEQToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_GEEQToken>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[migrationOn_GEEQToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_GEEQToken>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[migrationOn_GEEQToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_GEEQToken>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[geeqaddress_GEEQToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_GEEQToken>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[geeqaddress_GEEQToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_GEEQToken>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[owner_Owned,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_GEEQToken>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[owner_Owned,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_GEEQToken>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[newOwner_Owned,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_GEEQToken>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[newOwner_Owned,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_GEEQToken>]]]]]]
[2020-11-25 16:56:41,853 INFO  L1005  opiaSpecLangObserver]: Compiling: [](started(GEEQToken.transferFrom(from, to, value), (p1 != from || p2 != msg.sender) && from == to && value <= balances_GEEQToken[this][from] && value <= allowed_GEEQToken[this][from][msg.sender] && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_GEEQToken[this][to] >= 0 && balances_GEEQToken[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_GEEQToken[this][from] >= 0 &&  balances_GEEQToken[this][from] < 0x10000000000000000000000000000000000000000000000000000000000000000 && allowed_GEEQToken[this][from][msg.sender] >= 0 && allowed_GEEQToken[this][from][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(finished(GEEQToken.transferFrom(from, to, value), return == true && allowed_GEEQToken[this][from][msg.sender] == old(allowed_GEEQToken[this][from][msg.sender]) - value && _totalSupply_GEEQToken[this] == old(_totalSupply_GEEQToken[this]) && balances_GEEQToken[this] == old(balances_GEEQToken[this]) && allowed_GEEQToken[this][p1][p2] == old(allowed_GEEQToken[this][p1][p2]) && symbol_GEEQToken[this] == old(symbol_GEEQToken[this]) && name_GEEQToken[this] == old(name_GEEQToken[this]) && decimals_GEEQToken[this] == old(decimals_GEEQToken[this]) && _totalMinted_GEEQToken[this] == old(_totalMinted_GEEQToken[this]) && _maxMintable_GEEQToken[this] == old(_maxMintable_GEEQToken[this]) && pauseOn_GEEQToken[this] == old(pauseOn_GEEQToken[this]) && migrationOn_GEEQToken[this] == old(migrationOn_GEEQToken[this]) && geeqaddress_GEEQToken[this] == old(geeqaddress_GEEQToken[this]) && owner_Owned[this] == old(owner_Owned[this]) && newOwner_Owned[this] == old(newOwner_Owned[this]))))
[2020-11-25 16:56:41,853 INFO  L1007  opiaSpecLangObserver]: Compiled to ( []( AP(call_transferFrom_GEEQToken0) ==> ( <>AP(success_transferFrom_GEEQToken0) ) ) )
Executed UtopiaSpecLang
[2020-11-25 16:56:41,865 INFO  L202        PluginConnector]: Adding new model Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 04:56:41 PropertyContainer
[2020-11-25 16:56:41,866 INFO  L132        PluginConnector]: ------------------------ END UtopiaSpecLang----------------------------
[2020-11-25 16:56:41,866 INFO  L113        PluginConnector]: ------------------------Boogie Printer----------------------------
[2020-11-25 16:56:41,866 INFO  L271        PluginConnector]: Initializing Boogie Printer...
[2020-11-25 16:56:41,866 INFO  L276        PluginConnector]: Boogie Printer initialized
[2020-11-25 16:56:41,867 INFO  L185        PluginConnector]: Executing the observer BoogiePrinterObserver from plugin Boogie Printer for "GEEQToken_0x6b9f031d718dded0d681c20cb754f97b3bb81b78_transferfrom-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 04:56:41" (1/2) ...
[2020-11-25 16:56:41,868 INFO  L116   oogiePrinterObserver]: File already exists and will be overwritten: /tmp/boogiePrinter.bpl
[2020-11-25 16:56:41,868 INFO  L120   oogiePrinterObserver]: Writing to file /tmp/boogiePrinter.bpl
[2020-11-25 16:56:41,885 INFO  L185        PluginConnector]: Executing the observer BoogiePrinterObserver from plugin Boogie Printer for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 04:56:41" (2/2) ...
[2020-11-25 16:56:41,885 INFO  L132        PluginConnector]: ------------------------ END Boogie Printer----------------------------
[2020-11-25 16:56:41,886 INFO  L113        PluginConnector]: ------------------------RCFGBuilder----------------------------
[2020-11-25 16:56:41,886 INFO  L271        PluginConnector]: Initializing RCFGBuilder...
[2020-11-25 16:56:41,886 INFO  L276        PluginConnector]: RCFGBuilder initialized
[2020-11-25 16:56:41,886 INFO  L185        PluginConnector]: Executing the observer RCFGBuilderObserver from plugin RCFGBuilder for "GEEQToken_0x6b9f031d718dded0d681c20cb754f97b3bb81b78_transferfrom-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 04:56:41" (1/2) ...
[2020-11-25 16:56:41,942 INFO  L130     BoogieDeclarations]: Found specification of procedure FreshRefGenerator__success
[2020-11-25 16:56:41,942 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath_NoBaseCtor__success
[2020-11-25 16:56:41,942 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath
[2020-11-25 16:56:41,942 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath
[2020-11-25 16:56:41,943 INFO  L130     BoogieDeclarations]: Found specification of procedure add~uint256~uint256_SafeMath__success
[2020-11-25 16:56:41,943 INFO  L130     BoogieDeclarations]: Found specification of procedure sub~uint256~uint256_SafeMath__success
[2020-11-25 16:56:41,943 INFO  L130     BoogieDeclarations]: Found specification of procedure mul~uint256~uint256_SafeMath__success
[2020-11-25 16:56:41,943 INFO  L130     BoogieDeclarations]: Found specification of procedure div~uint256~uint256_SafeMath__success
[2020-11-25 16:56:41,943 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Interface_ERC20Interface_NoBaseCtor__success
[2020-11-25 16:56:41,943 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Interface_ERC20Interface
[2020-11-25 16:56:41,943 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Interface_ERC20Interface
[2020-11-25 16:56:41,943 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_ERC20Interface
[2020-11-25 16:56:41,943 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_ERC20Interface
[2020-11-25 16:56:41,944 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_ERC20Interface
[2020-11-25 16:56:41,944 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_ERC20Interface
[2020-11-25 16:56:41,944 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_ERC20Interface
[2020-11-25 16:56:41,945 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_ERC20Interface
[2020-11-25 16:56:41,945 INFO  L130     BoogieDeclarations]: Found specification of procedure ApproveAndCallFallBack_ApproveAndCallFallBack_NoBaseCtor__success
[2020-11-25 16:56:41,945 INFO  L130     BoogieDeclarations]: Found specification of procedure ApproveAndCallFallBack_ApproveAndCallFallBack
[2020-11-25 16:56:41,945 INFO  L138     BoogieDeclarations]: Found implementation of procedure ApproveAndCallFallBack_ApproveAndCallFallBack
[2020-11-25 16:56:41,945 INFO  L130     BoogieDeclarations]: Found specification of procedure receiveApproval~address~uint256~address~bytes_ApproveAndCallFallBack
[2020-11-25 16:56:41,945 INFO  L130     BoogieDeclarations]: Found specification of procedure Owned_Owned_NoBaseCtor__success
[2020-11-25 16:56:41,945 INFO  L130     BoogieDeclarations]: Found specification of procedure Owned_Owned
[2020-11-25 16:56:41,946 INFO  L138     BoogieDeclarations]: Found implementation of procedure Owned_Owned
[2020-11-25 16:56:41,946 INFO  L130     BoogieDeclarations]: Found specification of procedure transferOwnership~address_Owned
[2020-11-25 16:56:41,946 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferOwnership~address_Owned
[2020-11-25 16:56:41,946 INFO  L130     BoogieDeclarations]: Found specification of procedure acceptOwnership_Owned
[2020-11-25 16:56:41,946 INFO  L138     BoogieDeclarations]: Found implementation of procedure acceptOwnership_Owned
[2020-11-25 16:56:41,946 INFO  L130     BoogieDeclarations]: Found specification of procedure owner_Owned
[2020-11-25 16:56:41,946 INFO  L138     BoogieDeclarations]: Found implementation of procedure owner_Owned
[2020-11-25 16:56:41,946 INFO  L130     BoogieDeclarations]: Found specification of procedure newOwner_Owned
[2020-11-25 16:56:41,946 INFO  L138     BoogieDeclarations]: Found implementation of procedure newOwner_Owned
[2020-11-25 16:56:41,946 INFO  L130     BoogieDeclarations]: Found specification of procedure GEEQToken_GEEQToken_NoBaseCtor__success
[2020-11-25 16:56:41,946 INFO  L130     BoogieDeclarations]: Found specification of procedure GEEQToken_GEEQToken
[2020-11-25 16:56:41,946 INFO  L138     BoogieDeclarations]: Found implementation of procedure GEEQToken_GEEQToken
[2020-11-25 16:56:41,947 INFO  L130     BoogieDeclarations]: Found specification of procedure migrateGEEQ~bytes32_GEEQToken
[2020-11-25 16:56:41,947 INFO  L138     BoogieDeclarations]: Found implementation of procedure migrateGEEQ~bytes32_GEEQToken
[2020-11-25 16:56:41,947 INFO  L130     BoogieDeclarations]: Found specification of procedure transferAnyERC20Token~address~uint256_GEEQToken
[2020-11-25 16:56:41,947 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferAnyERC20Token~address~uint256_GEEQToken
[2020-11-25 16:56:41,947 INFO  L130     BoogieDeclarations]: Found specification of procedure pauseEnable_GEEQToken
[2020-11-25 16:56:41,947 INFO  L138     BoogieDeclarations]: Found implementation of procedure pauseEnable_GEEQToken
[2020-11-25 16:56:41,947 INFO  L130     BoogieDeclarations]: Found specification of procedure pauseDisable_GEEQToken
[2020-11-25 16:56:41,947 INFO  L138     BoogieDeclarations]: Found implementation of procedure pauseDisable_GEEQToken
[2020-11-25 16:56:41,947 INFO  L130     BoogieDeclarations]: Found specification of procedure migrationEnable_GEEQToken
[2020-11-25 16:56:41,947 INFO  L138     BoogieDeclarations]: Found implementation of procedure migrationEnable_GEEQToken
[2020-11-25 16:56:41,947 INFO  L130     BoogieDeclarations]: Found specification of procedure migrationDisable_GEEQToken
[2020-11-25 16:56:41,947 INFO  L138     BoogieDeclarations]: Found implementation of procedure migrationDisable_GEEQToken
[2020-11-25 16:56:41,948 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_GEEQToken
[2020-11-25 16:56:41,948 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_GEEQToken
[2020-11-25 16:56:41,948 INFO  L130     BoogieDeclarations]: Found specification of procedure totalMinted_GEEQToken
[2020-11-25 16:56:41,948 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalMinted_GEEQToken
[2020-11-25 16:56:41,948 INFO  L130     BoogieDeclarations]: Found specification of procedure burn~uint256_GEEQToken__success
[2020-11-25 16:56:41,948 INFO  L130     BoogieDeclarations]: Found specification of procedure mint~address~uint256_GEEQToken
[2020-11-25 16:56:41,948 INFO  L138     BoogieDeclarations]: Found implementation of procedure mint~address~uint256_GEEQToken
[2020-11-25 16:56:41,948 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_GEEQToken
[2020-11-25 16:56:41,948 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_GEEQToken
[2020-11-25 16:56:41,948 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_GEEQToken
[2020-11-25 16:56:41,948 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_GEEQToken
[2020-11-25 16:56:41,948 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_GEEQToken
[2020-11-25 16:56:41,948 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_GEEQToken
[2020-11-25 16:56:41,949 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_GEEQToken
[2020-11-25 16:56:41,949 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_GEEQToken
[2020-11-25 16:56:41,949 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_GEEQToken
[2020-11-25 16:56:41,949 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_GEEQToken
[2020-11-25 16:56:41,949 INFO  L130     BoogieDeclarations]: Found specification of procedure approveAndCall~address~uint256~bytes_GEEQToken
[2020-11-25 16:56:41,949 INFO  L138     BoogieDeclarations]: Found implementation of procedure approveAndCall~address~uint256~bytes_GEEQToken
[2020-11-25 16:56:41,949 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackMethod_GEEQToken__success
[2020-11-25 16:56:41,949 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_GEEQToken
[2020-11-25 16:56:41,949 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_GEEQToken
[2020-11-25 16:56:41,949 INFO  L130     BoogieDeclarations]: Found specification of procedure name_GEEQToken
[2020-11-25 16:56:41,949 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_GEEQToken
[2020-11-25 16:56:41,949 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_GEEQToken
[2020-11-25 16:56:41,950 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_GEEQToken
[2020-11-25 16:56:41,950 INFO  L130     BoogieDeclarations]: Found specification of procedure pauseOn_GEEQToken
[2020-11-25 16:56:41,950 INFO  L138     BoogieDeclarations]: Found implementation of procedure pauseOn_GEEQToken
[2020-11-25 16:56:41,950 INFO  L130     BoogieDeclarations]: Found specification of procedure migrationOn_GEEQToken
[2020-11-25 16:56:41,950 INFO  L138     BoogieDeclarations]: Found implementation of procedure migrationOn_GEEQToken
[2020-11-25 16:56:41,950 INFO  L130     BoogieDeclarations]: Found specification of procedure balances~address_GEEQToken
[2020-11-25 16:56:41,950 INFO  L138     BoogieDeclarations]: Found implementation of procedure balances~address_GEEQToken
[2020-11-25 16:56:41,950 INFO  L130     BoogieDeclarations]: Found specification of procedure geeqaddress~address_GEEQToken
[2020-11-25 16:56:41,950 INFO  L138     BoogieDeclarations]: Found implementation of procedure geeqaddress~address_GEEQToken
[2020-11-25 16:56:41,950 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackDispatch__success
[2020-11-25 16:56:41,950 INFO  L130     BoogieDeclarations]: Found specification of procedure Fallback_UnknownType__success
[2020-11-25 16:56:41,951 INFO  L130     BoogieDeclarations]: Found specification of procedure send__success
[2020-11-25 16:56:41,951 INFO  L130     BoogieDeclarations]: Found specification of procedure onlyOwner_pre__success
[2020-11-25 16:56:41,951 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_SafeMath
[2020-11-25 16:56:41,951 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_SafeMath
[2020-11-25 16:56:41,951 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_ERC20Interface
[2020-11-25 16:56:41,951 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_ERC20Interface
[2020-11-25 16:56:41,951 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_ApproveAndCallFallBack
[2020-11-25 16:56:41,951 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_ApproveAndCallFallBack
[2020-11-25 16:56:41,951 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_Owned
[2020-11-25 16:56:41,952 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_Owned
[2020-11-25 16:56:41,952 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_GEEQToken
[2020-11-25 16:56:41,952 INFO  L130     BoogieDeclarations]: Found specification of procedure main
[2020-11-25 16:56:41,952 INFO  L130     BoogieDeclarations]: Found specification of procedure FreshRefGenerator__fail
[2020-11-25 16:56:41,952 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath_NoBaseCtor__fail
[2020-11-25 16:56:41,952 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath__success
[2020-11-25 16:56:41,952 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath__fail
[2020-11-25 16:56:41,952 INFO  L130     BoogieDeclarations]: Found specification of procedure add~uint256~uint256_SafeMath__fail
[2020-11-25 16:56:41,952 INFO  L130     BoogieDeclarations]: Found specification of procedure sub~uint256~uint256_SafeMath__fail
[2020-11-25 16:56:41,952 INFO  L130     BoogieDeclarations]: Found specification of procedure mul~uint256~uint256_SafeMath__fail
[2020-11-25 16:56:41,953 INFO  L130     BoogieDeclarations]: Found specification of procedure div~uint256~uint256_SafeMath__fail
[2020-11-25 16:56:41,953 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Interface_ERC20Interface_NoBaseCtor__fail
[2020-11-25 16:56:41,953 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Interface_ERC20Interface__success
[2020-11-25 16:56:41,953 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Interface_ERC20Interface__fail
[2020-11-25 16:56:41,953 INFO  L130     BoogieDeclarations]: Found specification of procedure ApproveAndCallFallBack_ApproveAndCallFallBack_NoBaseCtor__fail
[2020-11-25 16:56:41,953 INFO  L130     BoogieDeclarations]: Found specification of procedure ApproveAndCallFallBack_ApproveAndCallFallBack__success
[2020-11-25 16:56:41,953 INFO  L130     BoogieDeclarations]: Found specification of procedure ApproveAndCallFallBack_ApproveAndCallFallBack__fail
[2020-11-25 16:56:41,953 INFO  L130     BoogieDeclarations]: Found specification of procedure Owned_Owned_NoBaseCtor__fail
[2020-11-25 16:56:41,953 INFO  L130     BoogieDeclarations]: Found specification of procedure Owned_Owned__success
[2020-11-25 16:56:41,954 INFO  L130     BoogieDeclarations]: Found specification of procedure Owned_Owned__fail
[2020-11-25 16:56:41,954 INFO  L130     BoogieDeclarations]: Found specification of procedure transferOwnership~address_Owned__success
[2020-11-25 16:56:41,954 INFO  L130     BoogieDeclarations]: Found specification of procedure transferOwnership~address_Owned__fail
[2020-11-25 16:56:41,954 INFO  L130     BoogieDeclarations]: Found specification of procedure acceptOwnership_Owned__success
[2020-11-25 16:56:41,954 INFO  L130     BoogieDeclarations]: Found specification of procedure acceptOwnership_Owned__fail
[2020-11-25 16:56:41,954 INFO  L130     BoogieDeclarations]: Found specification of procedure owner_Owned__success
[2020-11-25 16:56:41,954 INFO  L130     BoogieDeclarations]: Found specification of procedure owner_Owned__fail
[2020-11-25 16:56:41,954 INFO  L130     BoogieDeclarations]: Found specification of procedure newOwner_Owned__success
[2020-11-25 16:56:41,954 INFO  L130     BoogieDeclarations]: Found specification of procedure newOwner_Owned__fail
[2020-11-25 16:56:41,955 INFO  L130     BoogieDeclarations]: Found specification of procedure GEEQToken_GEEQToken_NoBaseCtor__fail
[2020-11-25 16:56:41,955 INFO  L130     BoogieDeclarations]: Found specification of procedure GEEQToken_GEEQToken__success
[2020-11-25 16:56:41,955 INFO  L130     BoogieDeclarations]: Found specification of procedure GEEQToken_GEEQToken__fail
[2020-11-25 16:56:41,955 INFO  L130     BoogieDeclarations]: Found specification of procedure migrateGEEQ~bytes32_GEEQToken__success
[2020-11-25 16:56:41,955 INFO  L130     BoogieDeclarations]: Found specification of procedure migrateGEEQ~bytes32_GEEQToken__fail
[2020-11-25 16:56:41,955 INFO  L130     BoogieDeclarations]: Found specification of procedure transferAnyERC20Token~address~uint256_GEEQToken__success
[2020-11-25 16:56:41,955 INFO  L130     BoogieDeclarations]: Found specification of procedure transferAnyERC20Token~address~uint256_GEEQToken__fail
[2020-11-25 16:56:41,955 INFO  L130     BoogieDeclarations]: Found specification of procedure pauseEnable_GEEQToken__success
[2020-11-25 16:56:41,955 INFO  L130     BoogieDeclarations]: Found specification of procedure pauseEnable_GEEQToken__fail
[2020-11-25 16:56:41,955 INFO  L130     BoogieDeclarations]: Found specification of procedure pauseDisable_GEEQToken__success
[2020-11-25 16:56:41,956 INFO  L130     BoogieDeclarations]: Found specification of procedure pauseDisable_GEEQToken__fail
[2020-11-25 16:56:41,956 INFO  L130     BoogieDeclarations]: Found specification of procedure migrationEnable_GEEQToken__success
[2020-11-25 16:56:41,956 INFO  L130     BoogieDeclarations]: Found specification of procedure migrationEnable_GEEQToken__fail
[2020-11-25 16:56:41,956 INFO  L130     BoogieDeclarations]: Found specification of procedure migrationDisable_GEEQToken__success
[2020-11-25 16:56:41,956 INFO  L130     BoogieDeclarations]: Found specification of procedure migrationDisable_GEEQToken__fail
[2020-11-25 16:56:41,956 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_GEEQToken__success
[2020-11-25 16:56:41,956 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_GEEQToken__fail
[2020-11-25 16:56:41,956 INFO  L130     BoogieDeclarations]: Found specification of procedure totalMinted_GEEQToken__success
[2020-11-25 16:56:41,956 INFO  L130     BoogieDeclarations]: Found specification of procedure totalMinted_GEEQToken__fail
[2020-11-25 16:56:41,957 INFO  L130     BoogieDeclarations]: Found specification of procedure burn~uint256_GEEQToken__fail
[2020-11-25 16:56:41,957 INFO  L130     BoogieDeclarations]: Found specification of procedure mint~address~uint256_GEEQToken__success
[2020-11-25 16:56:41,957 INFO  L130     BoogieDeclarations]: Found specification of procedure mint~address~uint256_GEEQToken__fail
[2020-11-25 16:56:41,957 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_GEEQToken__success
[2020-11-25 16:56:41,957 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_GEEQToken__fail
[2020-11-25 16:56:41,957 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_GEEQToken__success
[2020-11-25 16:56:41,957 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_GEEQToken__fail
[2020-11-25 16:56:41,957 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_GEEQToken__success
[2020-11-25 16:56:41,958 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_GEEQToken__fail
[2020-11-25 16:56:41,958 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_GEEQToken__success
[2020-11-25 16:56:41,958 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_GEEQToken__fail
[2020-11-25 16:56:41,958 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_GEEQToken__success
[2020-11-25 16:56:41,958 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_GEEQToken__fail
[2020-11-25 16:56:41,958 INFO  L130     BoogieDeclarations]: Found specification of procedure approveAndCall~address~uint256~bytes_GEEQToken__success
[2020-11-25 16:56:41,958 INFO  L130     BoogieDeclarations]: Found specification of procedure approveAndCall~address~uint256~bytes_GEEQToken__fail
[2020-11-25 16:56:41,958 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackMethod_GEEQToken__fail
[2020-11-25 16:56:41,958 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_GEEQToken__success
[2020-11-25 16:56:41,959 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_GEEQToken__fail
[2020-11-25 16:56:41,959 INFO  L130     BoogieDeclarations]: Found specification of procedure name_GEEQToken__success
[2020-11-25 16:56:41,959 INFO  L130     BoogieDeclarations]: Found specification of procedure name_GEEQToken__fail
[2020-11-25 16:56:41,959 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_GEEQToken__success
[2020-11-25 16:56:41,959 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_GEEQToken__fail
[2020-11-25 16:56:41,959 INFO  L130     BoogieDeclarations]: Found specification of procedure pauseOn_GEEQToken__success
[2020-11-25 16:56:41,959 INFO  L130     BoogieDeclarations]: Found specification of procedure pauseOn_GEEQToken__fail
[2020-11-25 16:56:41,959 INFO  L130     BoogieDeclarations]: Found specification of procedure migrationOn_GEEQToken__success
[2020-11-25 16:56:41,959 INFO  L130     BoogieDeclarations]: Found specification of procedure migrationOn_GEEQToken__fail
[2020-11-25 16:56:41,959 INFO  L130     BoogieDeclarations]: Found specification of procedure balances~address_GEEQToken__success
[2020-11-25 16:56:41,959 INFO  L130     BoogieDeclarations]: Found specification of procedure balances~address_GEEQToken__fail
[2020-11-25 16:56:41,960 INFO  L130     BoogieDeclarations]: Found specification of procedure geeqaddress~address_GEEQToken__success
[2020-11-25 16:56:41,960 INFO  L130     BoogieDeclarations]: Found specification of procedure geeqaddress~address_GEEQToken__fail
[2020-11-25 16:56:41,960 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackDispatch__fail
[2020-11-25 16:56:41,960 INFO  L130     BoogieDeclarations]: Found specification of procedure Fallback_UnknownType__fail
[2020-11-25 16:56:41,960 INFO  L130     BoogieDeclarations]: Found specification of procedure send__fail
[2020-11-25 16:56:41,960 INFO  L130     BoogieDeclarations]: Found specification of procedure onlyOwner_pre__fail
[2020-11-25 16:56:41,960 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreshRefGenerator__fail
[2020-11-25 16:56:41,960 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreshRefGenerator__success
[2020-11-25 16:56:41,960 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath_NoBaseCtor__fail
[2020-11-25 16:56:41,960 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath_NoBaseCtor__success
[2020-11-25 16:56:41,961 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath__fail
[2020-11-25 16:56:41,961 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath__success
[2020-11-25 16:56:41,961 INFO  L138     BoogieDeclarations]: Found implementation of procedure add~uint256~uint256_SafeMath__fail
[2020-11-25 16:56:41,961 INFO  L138     BoogieDeclarations]: Found implementation of procedure add~uint256~uint256_SafeMath__success
[2020-11-25 16:56:41,961 INFO  L138     BoogieDeclarations]: Found implementation of procedure sub~uint256~uint256_SafeMath__fail
[2020-11-25 16:56:41,961 INFO  L138     BoogieDeclarations]: Found implementation of procedure sub~uint256~uint256_SafeMath__success
[2020-11-25 16:56:41,961 INFO  L138     BoogieDeclarations]: Found implementation of procedure mul~uint256~uint256_SafeMath__fail
[2020-11-25 16:56:41,961 INFO  L138     BoogieDeclarations]: Found implementation of procedure mul~uint256~uint256_SafeMath__success
[2020-11-25 16:56:41,961 INFO  L138     BoogieDeclarations]: Found implementation of procedure div~uint256~uint256_SafeMath__fail
[2020-11-25 16:56:41,961 INFO  L138     BoogieDeclarations]: Found implementation of procedure div~uint256~uint256_SafeMath__success
[2020-11-25 16:56:41,961 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Interface_ERC20Interface_NoBaseCtor__fail
[2020-11-25 16:56:41,961 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Interface_ERC20Interface_NoBaseCtor__success
[2020-11-25 16:56:41,962 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Interface_ERC20Interface__fail
[2020-11-25 16:56:41,962 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Interface_ERC20Interface__success
[2020-11-25 16:56:41,962 INFO  L138     BoogieDeclarations]: Found implementation of procedure ApproveAndCallFallBack_ApproveAndCallFallBack_NoBaseCtor__fail
[2020-11-25 16:56:41,962 INFO  L138     BoogieDeclarations]: Found implementation of procedure ApproveAndCallFallBack_ApproveAndCallFallBack_NoBaseCtor__success
[2020-11-25 16:56:41,962 INFO  L138     BoogieDeclarations]: Found implementation of procedure ApproveAndCallFallBack_ApproveAndCallFallBack__fail
[2020-11-25 16:56:41,962 INFO  L138     BoogieDeclarations]: Found implementation of procedure ApproveAndCallFallBack_ApproveAndCallFallBack__success
[2020-11-25 16:56:41,962 INFO  L138     BoogieDeclarations]: Found implementation of procedure Owned_Owned_NoBaseCtor__fail
[2020-11-25 16:56:41,962 INFO  L138     BoogieDeclarations]: Found implementation of procedure Owned_Owned_NoBaseCtor__success
[2020-11-25 16:56:41,962 INFO  L138     BoogieDeclarations]: Found implementation of procedure Owned_Owned__fail
[2020-11-25 16:56:41,962 INFO  L138     BoogieDeclarations]: Found implementation of procedure Owned_Owned__success
[2020-11-25 16:56:41,962 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferOwnership~address_Owned__fail
[2020-11-25 16:56:41,963 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferOwnership~address_Owned__success
[2020-11-25 16:56:41,963 INFO  L138     BoogieDeclarations]: Found implementation of procedure acceptOwnership_Owned__fail
[2020-11-25 16:56:41,963 INFO  L138     BoogieDeclarations]: Found implementation of procedure acceptOwnership_Owned__success
[2020-11-25 16:56:41,963 INFO  L138     BoogieDeclarations]: Found implementation of procedure owner_Owned__fail
[2020-11-25 16:56:41,963 INFO  L138     BoogieDeclarations]: Found implementation of procedure owner_Owned__success
[2020-11-25 16:56:41,963 INFO  L138     BoogieDeclarations]: Found implementation of procedure newOwner_Owned__fail
[2020-11-25 16:56:41,963 INFO  L138     BoogieDeclarations]: Found implementation of procedure newOwner_Owned__success
[2020-11-25 16:56:41,963 INFO  L138     BoogieDeclarations]: Found implementation of procedure GEEQToken_GEEQToken_NoBaseCtor__fail
[2020-11-25 16:56:41,963 INFO  L138     BoogieDeclarations]: Found implementation of procedure GEEQToken_GEEQToken_NoBaseCtor__success
[2020-11-25 16:56:41,963 INFO  L138     BoogieDeclarations]: Found implementation of procedure GEEQToken_GEEQToken__fail
[2020-11-25 16:56:41,963 INFO  L138     BoogieDeclarations]: Found implementation of procedure GEEQToken_GEEQToken__success
[2020-11-25 16:56:41,963 INFO  L138     BoogieDeclarations]: Found implementation of procedure migrateGEEQ~bytes32_GEEQToken__fail
[2020-11-25 16:56:41,964 INFO  L138     BoogieDeclarations]: Found implementation of procedure migrateGEEQ~bytes32_GEEQToken__success
[2020-11-25 16:56:41,964 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferAnyERC20Token~address~uint256_GEEQToken__fail
[2020-11-25 16:56:41,964 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferAnyERC20Token~address~uint256_GEEQToken__success
[2020-11-25 16:56:41,964 INFO  L138     BoogieDeclarations]: Found implementation of procedure pauseEnable_GEEQToken__fail
[2020-11-25 16:56:41,964 INFO  L138     BoogieDeclarations]: Found implementation of procedure pauseEnable_GEEQToken__success
[2020-11-25 16:56:41,964 INFO  L138     BoogieDeclarations]: Found implementation of procedure pauseDisable_GEEQToken__fail
[2020-11-25 16:56:41,964 INFO  L138     BoogieDeclarations]: Found implementation of procedure pauseDisable_GEEQToken__success
[2020-11-25 16:56:41,964 INFO  L138     BoogieDeclarations]: Found implementation of procedure migrationEnable_GEEQToken__fail
[2020-11-25 16:56:41,964 INFO  L138     BoogieDeclarations]: Found implementation of procedure migrationEnable_GEEQToken__success
[2020-11-25 16:56:41,964 INFO  L138     BoogieDeclarations]: Found implementation of procedure migrationDisable_GEEQToken__fail
[2020-11-25 16:56:41,964 INFO  L138     BoogieDeclarations]: Found implementation of procedure migrationDisable_GEEQToken__success
[2020-11-25 16:56:41,965 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_GEEQToken__fail
[2020-11-25 16:56:41,965 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_GEEQToken__success
[2020-11-25 16:56:41,965 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalMinted_GEEQToken__fail
[2020-11-25 16:56:41,965 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalMinted_GEEQToken__success
[2020-11-25 16:56:41,965 INFO  L138     BoogieDeclarations]: Found implementation of procedure burn~uint256_GEEQToken__fail
[2020-11-25 16:56:41,965 INFO  L138     BoogieDeclarations]: Found implementation of procedure burn~uint256_GEEQToken__success
[2020-11-25 16:56:41,965 INFO  L138     BoogieDeclarations]: Found implementation of procedure mint~address~uint256_GEEQToken__fail
[2020-11-25 16:56:41,965 INFO  L138     BoogieDeclarations]: Found implementation of procedure mint~address~uint256_GEEQToken__success
[2020-11-25 16:56:41,965 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_GEEQToken__fail
[2020-11-25 16:56:41,965 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_GEEQToken__success
[2020-11-25 16:56:41,965 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_GEEQToken__fail
[2020-11-25 16:56:41,965 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_GEEQToken__success
[2020-11-25 16:56:41,966 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_GEEQToken__fail
[2020-11-25 16:56:41,966 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_GEEQToken__success
[2020-11-25 16:56:41,966 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_GEEQToken__fail
[2020-11-25 16:56:41,966 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_GEEQToken__success
[2020-11-25 16:56:41,966 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_GEEQToken__fail
[2020-11-25 16:56:41,966 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_GEEQToken__success
[2020-11-25 16:56:41,966 INFO  L138     BoogieDeclarations]: Found implementation of procedure approveAndCall~address~uint256~bytes_GEEQToken__fail
[2020-11-25 16:56:41,966 INFO  L138     BoogieDeclarations]: Found implementation of procedure approveAndCall~address~uint256~bytes_GEEQToken__success
[2020-11-25 16:56:41,966 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackMethod_GEEQToken__fail
[2020-11-25 16:56:41,966 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackMethod_GEEQToken__success
[2020-11-25 16:56:41,966 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_GEEQToken__fail
[2020-11-25 16:56:41,966 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_GEEQToken__success
[2020-11-25 16:56:41,967 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_GEEQToken__fail
[2020-11-25 16:56:41,967 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_GEEQToken__success
[2020-11-25 16:56:41,967 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_GEEQToken__fail
[2020-11-25 16:56:41,967 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_GEEQToken__success
[2020-11-25 16:56:41,967 INFO  L138     BoogieDeclarations]: Found implementation of procedure pauseOn_GEEQToken__fail
[2020-11-25 16:56:41,967 INFO  L138     BoogieDeclarations]: Found implementation of procedure pauseOn_GEEQToken__success
[2020-11-25 16:56:41,967 INFO  L138     BoogieDeclarations]: Found implementation of procedure migrationOn_GEEQToken__fail
[2020-11-25 16:56:41,967 INFO  L138     BoogieDeclarations]: Found implementation of procedure migrationOn_GEEQToken__success
[2020-11-25 16:56:41,967 INFO  L138     BoogieDeclarations]: Found implementation of procedure balances~address_GEEQToken__fail
[2020-11-25 16:56:41,967 INFO  L138     BoogieDeclarations]: Found implementation of procedure balances~address_GEEQToken__success
[2020-11-25 16:56:41,967 INFO  L138     BoogieDeclarations]: Found implementation of procedure geeqaddress~address_GEEQToken__fail
[2020-11-25 16:56:41,967 INFO  L138     BoogieDeclarations]: Found implementation of procedure geeqaddress~address_GEEQToken__success
[2020-11-25 16:56:41,968 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackDispatch__fail
[2020-11-25 16:56:41,968 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackDispatch__success
[2020-11-25 16:56:41,968 INFO  L138     BoogieDeclarations]: Found implementation of procedure Fallback_UnknownType__fail
[2020-11-25 16:56:41,968 INFO  L138     BoogieDeclarations]: Found implementation of procedure Fallback_UnknownType__success
[2020-11-25 16:56:41,968 INFO  L138     BoogieDeclarations]: Found implementation of procedure send__fail
[2020-11-25 16:56:41,968 INFO  L138     BoogieDeclarations]: Found implementation of procedure send__success
[2020-11-25 16:56:41,968 INFO  L138     BoogieDeclarations]: Found implementation of procedure onlyOwner_pre__fail
[2020-11-25 16:56:41,968 INFO  L138     BoogieDeclarations]: Found implementation of procedure onlyOwner_pre__success
[2020-11-25 16:56:41,968 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_SafeMath
[2020-11-25 16:56:41,968 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_SafeMath
[2020-11-25 16:56:41,968 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_ERC20Interface
[2020-11-25 16:56:41,968 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_ERC20Interface
[2020-11-25 16:56:41,969 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_ApproveAndCallFallBack
[2020-11-25 16:56:41,969 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_ApproveAndCallFallBack
[2020-11-25 16:56:41,969 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_Owned
[2020-11-25 16:56:41,969 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_Owned
[2020-11-25 16:56:41,969 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_GEEQToken
[2020-11-25 16:56:41,969 INFO  L138     BoogieDeclarations]: Found implementation of procedure main
[2020-11-25 16:56:41,969 INFO  L130     BoogieDeclarations]: Found specification of procedure ULTIMATE.start
[2020-11-25 16:56:41,970 INFO  L138     BoogieDeclarations]: Found implementation of procedure ULTIMATE.start
[2020-11-25 16:56:42,327 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 16:56:42,327 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 16:56:42,328 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 16:56:42,461 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 16:56:42,677 INFO  L281             CfgBuilder]: Using the 1 location(s) as analysis (start of procedure ULTIMATE.start)
[2020-11-25 16:56:42,677 INFO  L286             CfgBuilder]: Removed 5 assue(true) statements.
[2020-11-25 16:56:42,683 INFO  L202        PluginConnector]: Adding new model GEEQToken_0x6b9f031d718dded0d681c20cb754f97b3bb81b78_transferfrom-self.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 04:56:42 BoogieIcfgContainer
[2020-11-25 16:56:42,683 INFO  L185        PluginConnector]: Executing the observer RCFGBuilderObserver from plugin RCFGBuilder for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 04:56:41" (2/2) ...
[2020-11-25 16:56:42,683 INFO  L85     RCFGBuilderObserver]: No WrapperNode. Let Ultimate process with next node
[2020-11-25 16:56:42,684 INFO  L205        PluginConnector]: Invalid model from RCFGBuilder for observer de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder.RCFGBuilderObserver@97eba66 and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 04:56:42, skipping insertion in model container
[2020-11-25 16:56:42,684 INFO  L132        PluginConnector]: ------------------------ END RCFGBuilder----------------------------
[2020-11-25 16:56:42,685 INFO  L113        PluginConnector]: ------------------------UtopiaLTL2Aut----------------------------
[2020-11-25 16:56:42,685 INFO  L271        PluginConnector]: Initializing UtopiaLTL2Aut...
[2020-11-25 16:56:42,688 INFO  L276        PluginConnector]: UtopiaLTL2Aut initialized
[2020-11-25 16:56:42,688 INFO  L185        PluginConnector]: Executing the observer UtopiaLTL2AutObserver from plugin UtopiaLTL2Aut for "GEEQToken_0x6b9f031d718dded0d681c20cb754f97b3bb81b78_transferfrom-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 04:56:41" (1/3) ...
[2020-11-25 16:56:42,689 INFO  L205        PluginConnector]: Invalid model from UtopiaLTL2Aut for observer edu.utexas.cs.utopia.ltl2aut.UtopiaLTL2AutObserver@2537bc85 and model type Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 04:56:42, skipping insertion in model container
[2020-11-25 16:56:42,689 INFO  L185        PluginConnector]: Executing the observer UtopiaLTL2AutObserver from plugin UtopiaLTL2Aut for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 04:56:41" (2/3) ...
No working directory specified, using /mnt/data0/jon/SmartPulseTool/ltl2ba
Starting monitored process 1 with /mnt/data0/jon/SmartPulseTool/ltl2ba -f ! ( ( [] ( a -> ( <>b ) ) ) )  (exit command is null, workingDir is null)
[2020-11-25 16:56:42,729 INFO  L202        PluginConnector]: Adding new model Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 04:56:42 NWAContainer
[2020-11-25 16:56:42,730 INFO  L132        PluginConnector]: ------------------------ END UtopiaLTL2Aut----------------------------
[2020-11-25 16:56:42,730 INFO  L113        PluginConnector]: ------------------------BÃ¼chi Program Product----------------------------
[2020-11-25 16:56:42,730 INFO  L271        PluginConnector]: Initializing BÃ¼chi Program Product...
[2020-11-25 16:56:42,731 INFO  L276        PluginConnector]: BÃ¼chi Program Product initialized
[2020-11-25 16:56:42,731 INFO  L185        PluginConnector]: Executing the observer BuchiProductObserver from plugin BÃ¼chi Program Product for "GEEQToken_0x6b9f031d718dded0d681c20cb754f97b3bb81b78_transferfrom-self.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 04:56:42" (3/4) ...
[2020-11-25 16:56:42,732 INFO  L205        PluginConnector]: Invalid model from BÃ¼chi Program Product for observer de.uni_freiburg.informatik.ultimate.buchiprogramproduct.BuchiProductObserver@279b6095 and model type LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 04:56:42, skipping insertion in model container
[2020-11-25 16:56:42,732 INFO  L185        PluginConnector]: Executing the observer BuchiProductObserver from plugin BÃ¼chi Program Product for "Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 04:56:42" (4/4) ...
[2020-11-25 16:56:42,736 INFO  L104   BuchiProductObserver]: Initial property automaton 2 locations, 3 edges
[2020-11-25 16:56:42,739 INFO  L110   BuchiProductObserver]: Initial RCFG 1990 locations, 2487 edges
[2020-11-25 16:56:42,740 INFO  L93    BuchiProductObserver]: Beginning generation of product automaton
[2020-11-25 16:56:42,751 INFO  L136       ProductGenerator]: The program has no step specification, so we assume maximum atomicity
[2020-11-25 16:56:44,225 INFO  L97    BuchiProductObserver]: Finished generation of product automaton successfully
[2020-11-25 16:56:44,231 INFO  L110   BuchiProductObserver]: BuchiProgram size 4722 locations, 8038 edges
[2020-11-25 16:56:44,231 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 04:56:44 BoogieIcfgContainer
[2020-11-25 16:56:44,231 INFO  L132        PluginConnector]: ------------------------ END BÃ¼chi Program Product----------------------------
[2020-11-25 16:56:44,231 INFO  L113        PluginConnector]: ------------------------BlockEncodingV2----------------------------
[2020-11-25 16:56:44,231 INFO  L271        PluginConnector]: Initializing BlockEncodingV2...
[2020-11-25 16:56:44,233 INFO  L276        PluginConnector]: BlockEncodingV2 initialized
[2020-11-25 16:56:44,233 INFO  L185        PluginConnector]: Executing the observer BlockEncodingObserver from plugin BlockEncodingV2 for "LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 04:56:44" (1/1) ...
[2020-11-25 16:56:44,360 INFO  L313           BlockEncoder]: Initial Icfg 4722 locations, 8038 edges
[2020-11-25 16:56:44,360 INFO  L258           BlockEncoder]: Using Remove infeasible edges
[2020-11-25 16:56:44,361 INFO  L270           BlockEncoder]: Using Minimize states even if more edges are added than removed.=true
[2020-11-25 16:56:44,361 INFO  L296           BlockEncoder]: Using Remove sink states
[2020-11-25 16:56:44,361 INFO  L171           BlockEncoder]: Using Apply optimizations until nothing changes=true
[2020-11-25 16:56:44,376 INFO  L70    emoveInfeasibleEdges]: Removed 75 edges and 13 locations because of local infeasibility
[2020-11-25 16:56:44,386 INFO  L70        RemoveSinkStates]: Removed 8 edges and 5 locations by removing sink states
[2020-11-25 16:56:44,400 INFO  L70    emoveInfeasibleEdges]: Removed 0 edges and 0 locations because of local infeasibility
[2020-11-25 16:56:44,405 INFO  L70        RemoveSinkStates]: Removed 0 edges and 0 locations by removing sink states
[2020-11-25 16:56:44,410 INFO  L237           BlockEncoder]: Using Create parallel compositions if possible
[2020-11-25 16:56:44,410 INFO  L66        ParallelComposer]: Creating parallel compositions
[2020-11-25 16:56:44,417 INFO  L313           BlockEncoder]: Encoded RCFG 4672 locations, 7908 edges
[2020-11-25 16:56:44,418 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.blockencoding CFG 25.11 04:56:44 BasicIcfg
[2020-11-25 16:56:44,418 INFO  L132        PluginConnector]: ------------------------ END BlockEncodingV2----------------------------
[2020-11-25 16:56:44,418 INFO  L113        PluginConnector]: ------------------------BuchiAutomizer----------------------------
[2020-11-25 16:56:44,418 INFO  L271        PluginConnector]: Initializing BuchiAutomizer...
[2020-11-25 16:56:44,421 INFO  L276        PluginConnector]: BuchiAutomizer initialized
[2020-11-25 16:56:44,421 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 16:56:44,421 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "GEEQToken_0x6b9f031d718dded0d681c20cb754f97b3bb81b78_transferfrom-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 04:56:41" (1/6) ...
[2020-11-25 16:56:44,423 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@7ab6dca1 and model type GEEQToken_0x6b9f031d718dded0d681c20cb754f97b3bb81b78_transferfrom-self.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 04:56:44, skipping insertion in model container
[2020-11-25 16:56:44,423 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 16:56:44,424 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 04:56:41" (2/6) ...
[2020-11-25 16:56:44,424 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@7ab6dca1 and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 04:56:44, skipping insertion in model container
[2020-11-25 16:56:44,424 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 16:56:44,424 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "GEEQToken_0x6b9f031d718dded0d681c20cb754f97b3bb81b78_transferfrom-self.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 04:56:42" (3/6) ...
[2020-11-25 16:56:44,424 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@7ab6dca1 and model type GEEQToken_0x6b9f031d718dded0d681c20cb754f97b3bb81b78_transferfrom-self.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer CFG 25.11 04:56:44, skipping insertion in model container
[2020-11-25 16:56:44,424 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 16:56:44,424 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 04:56:42" (4/6) ...
[2020-11-25 16:56:44,425 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@7ab6dca1 and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 04:56:44, skipping insertion in model container
[2020-11-25 16:56:44,425 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 16:56:44,425 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 04:56:44" (5/6) ...
[2020-11-25 16:56:44,425 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@7ab6dca1 and model type LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer OTHER 25.11 04:56:44, skipping insertion in model container
[2020-11-25 16:56:44,425 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 16:56:44,425 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.blockencoding CFG 25.11 04:56:44" (6/6) ...
[2020-11-25 16:56:44,426 INFO  L404   chiAutomizerObserver]: Analyzing ICFG GEEQToken_0x6b9f031d718dded0d681c20cb754f97b3bb81b78_transferfrom-self.bpl_BEv2
[2020-11-25 16:56:44,465 INFO  L133   ementStrategyFactory]: Using default assertion order modulation
[2020-11-25 16:56:44,466 INFO  L377         BuchiCegarLoop]: Interprodecural is true
[2020-11-25 16:56:44,466 INFO  L378         BuchiCegarLoop]: Hoare is false
[2020-11-25 16:56:44,466 INFO  L379         BuchiCegarLoop]: Compute interpolants for Craig_TreeInterpolation
[2020-11-25 16:56:44,466 INFO  L380         BuchiCegarLoop]: Backedges is STRAIGHT_LINE
[2020-11-25 16:56:44,467 INFO  L381         BuchiCegarLoop]: Determinization is PREDICATE_ABSTRACTION
[2020-11-25 16:56:44,467 INFO  L382         BuchiCegarLoop]: Difference is false
[2020-11-25 16:56:44,467 INFO  L383         BuchiCegarLoop]: Minimize is MINIMIZE_SEVPA
[2020-11-25 16:56:44,467 INFO  L386         BuchiCegarLoop]: ======== Iteration 0==of CEGAR loop == BuchiCegarLoop========
[2020-11-25 16:56:44,521 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 4672 states.
[2020-11-25 16:56:44,595 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 16:56:44,595 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 16:56:44,595 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 16:56:44,608 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 16:56:44,608 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 16:56:44,608 INFO  L445         BuchiCegarLoop]: ======== Iteration 1============
[2020-11-25 16:56:44,608 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 4672 states.
[2020-11-25 16:56:44,640 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 16:56:44,640 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 16:56:44,640 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 16:56:44,642 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 16:56:44,642 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_transferFrom_GEEQToken0 := false;
[L3]                 call_transferFrom_GEEQToken0 := false;
[L3]     CALL        call main();
[L3]                 havoc p2;
[L3]                 havoc p1;
[L5350]              assume null == 0;
[L5351]  CALL        call this := FreshRefGenerator__success();
[L2768]              havoc newRef;
[L2769]              assume Alloc[newRef] == false;
[L2770]              Alloc[newRef] := true;
[L2771]              assume newRef != null;
[L5351]  RET         call this := FreshRefGenerator__success();
[L5352]              assume now >= 0;
[L5353]              assume DType[this] == GEEQToken;
[L5354]              assume msgvalue_MSG == 0;
[L5355]              gas := gas - 53000;
[L5356]  CALL        call GEEQToken_GEEQToken(this, msgsender_MSG, msgvalue_MSG);
[L679]               havoc __exception;
[L680]               revert := false;
[L681]   COND FALSE  !(__exception)
[L710]   CALL        call GEEQToken_GEEQToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3141]  CALL        call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L2920]  CALL        call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2905]              assume msgsender_MSG != null;
[L2906]              Balance[this] := 0;
[L2920]  RET         call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2921]  COND FALSE  !(revert)
[L3141]  RET         call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L3142]  COND TRUE   revert
[L710]   RET         call GEEQToken_GEEQToken__success(this, msgsender_MSG, msgvalue_MSG);
[L711]               assume !revert && gas >= 0;
[L5356]  RET         call GEEQToken_GEEQToken(this, msgsender_MSG, msgvalue_MSG);
[L5357]              assume !revert && gas >= 0;

Loop:
[L5360]  CALL        call CorralChoice_GEEQToken(this);
[L5125]              havoc msgsender_MSG;
[L5126]              havoc msgvalue_MSG;
[L5127]              havoc choice;
[L5128]              havoc __ret_0_totalSupply;
[L5129]              havoc tokenOwner_s591;
[L5130]              havoc balance_s591;
[L5131]              havoc tokenOwner_s763;
[L5132]              havoc spender_s763;
[L5133]              havoc remaining_s763;
[L5134]              havoc to_s647;
[L5135]              havoc tokens_s647;
[L5136]              havoc success_s647;
[L5137]              havoc spender_s675;
[L5138]              havoc tokens_s675;
[L5139]              havoc success_s675;
[L5140]              havoc from_s747;
[L5141]              havoc to_s747;
[L5142]              havoc tokens_s747;
[L5143]              havoc success_s747;
[L5144]              havoc __ret_0_owner;
[L5145]              havoc __ret_0_newOwner;
[L5146]              havoc _newOwner_s220;
[L5147]              havoc __ret_0_symbol;
[L5148]              havoc __ret_0_name;
[L5149]              havoc __ret_0_decimals;
[L5150]              havoc __ret_0_pauseOn;
[L5151]              havoc __ret_0_migrationOn;
[L5152]              havoc arg813_s0;
[L5153]              havoc __ret_0_balances;
[L5154]              havoc arg814_s0;
[L5155]              havoc __ret_0_geeqaddress;
[L5156]              havoc registeraddress_s387;
[L5157]              havoc tokenAddress_s407;
[L5158]              havoc tokens_s407;
[L5159]              havoc success_s407;
[L5160]              havoc __ret_0_totalMinted;
[L5161]              havoc receiver_s579;
[L5162]              havoc token_amt_s579;
[L5163]              havoc spender_s806;
[L5164]              havoc tokens_s806;
[L5165]              havoc data_s806;
[L5166]              havoc success_s806;
[L5167]              havoc tmpNow;
[L5168]              havoc gas;
[L5169]              assume gas > 4000000 && gas <= 8000000;
[L5170]              tmpNow := now;
[L5171]              havoc now;
[L5172]              assume now > tmpNow;
[L5173]              assume msgsender_MSG != null;
[L5174]              assume DType[msgsender_MSG] != SafeMath;
[L5175]              assume DType[msgsender_MSG] != ERC20Interface;
[L5176]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L5177]              assume DType[msgsender_MSG] != Owned;
[L5178]              assume DType[msgsender_MSG] != GEEQToken;
[L5179]              Alloc[msgsender_MSG] := true;
[L5180]  COND TRUE   choice == 26
[L5181]              gas := gas - 21000;
[L5182]  COND FALSE  !(gas >= 0)
[L5360]  RET         call CorralChoice_GEEQToken(this);

[2020-11-25 16:56:44,660 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 16:56:44,660 INFO  L82        PathProgramCache]: Analyzing trace with hash -411109174, now seen corresponding path program 1 times
[2020-11-25 16:56:44,665 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 16:56:44,692 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 16:56:44,732 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 16:56:44,734 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 16:56:44,735 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [4] imperfect sequences [] total 4
[2020-11-25 16:56:45,010 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 16:56:45,022 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-11-25 16:56:45,022 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=5, Invalid=7, Unknown=0, NotChecked=0, Total=12
[2020-11-25 16:56:45,024 INFO  L87              Difference]: Start difference. First operand 4672 states. Second operand 4 states.
[2020-11-25 16:56:46,411 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 16:56:46,412 INFO  L93              Difference]: Finished difference Result 5366 states and 8675 transitions.
[2020-11-25 16:56:46,412 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 4 states. 
[2020-11-25 16:56:46,413 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 5366 states and 8675 transitions.
[2020-11-25 16:56:46,446 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 6
[2020-11-25 16:56:46,487 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 5366 states to 5158 states and 8353 transitions.
[2020-11-25 16:56:46,488 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 15
[2020-11-25 16:56:46,494 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1626
[2020-11-25 16:56:46,495 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 5158 states and 8353 transitions.
[2020-11-25 16:56:46,516 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 16:56:46,516 INFO  L728         BuchiCegarLoop]: Abstraction has 5158 states and 8353 transitions.
[2020-11-25 16:56:46,531 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 5158 states and 8353 transitions.
[2020-11-25 16:56:46,604 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 5158 to 3906.
[2020-11-25 16:56:46,604 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 3906 states.
[2020-11-25 16:56:46,610 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 3906 states to 3906 states and 5996 transitions.
[2020-11-25 16:56:46,611 INFO  L751         BuchiCegarLoop]: Abstraction has 3906 states and 5996 transitions.
[2020-11-25 16:56:46,611 INFO  L631         BuchiCegarLoop]: Abstraction has 3906 states and 5996 transitions.
[2020-11-25 16:56:46,611 INFO  L445         BuchiCegarLoop]: ======== Iteration 2============
[2020-11-25 16:56:46,611 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 3906 states and 5996 transitions.
[2020-11-25 16:56:46,621 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 16:56:46,621 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 16:56:46,621 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 16:56:46,622 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 16:56:46,622 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_transferFrom_GEEQToken0 := false;
[L3]                 call_transferFrom_GEEQToken0 := false;
[L3]     CALL        call main();
[L3]                 havoc p2;
[L3]                 havoc p1;
[L5350]              assume null == 0;
[L5351]  CALL        call this := FreshRefGenerator__success();
[L2768]              havoc newRef;
[L2769]              assume Alloc[newRef] == false;
[L2770]              Alloc[newRef] := true;
[L2771]              assume newRef != null;
[L5351]  RET         call this := FreshRefGenerator__success();
[L5352]              assume now >= 0;
[L5353]              assume DType[this] == GEEQToken;
[L5354]              assume msgvalue_MSG == 0;
[L5355]              gas := gas - 53000;
[L5356]  CALL        call GEEQToken_GEEQToken(this, msgsender_MSG, msgvalue_MSG);
[L679]               havoc __exception;
[L680]               revert := false;
[L681]   COND FALSE  !(__exception)
[L710]   CALL        call GEEQToken_GEEQToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3141]  CALL        call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L2920]  CALL        call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2905]              assume msgsender_MSG != null;
[L2906]              Balance[this] := 0;
[L2920]  RET         call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2921]  COND FALSE  !(revert)
[L3141]  RET         call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L3142]  COND FALSE  !(revert)
[L3145]  CALL        call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L2988]  CALL        call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2971]              assume msgsender_MSG != null;
[L2972]              Balance[this] := 0;
[L2973]              owner_Owned[this] := null;
[L2974]              newOwner_Owned[this] := null;
[L2988]  RET         call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2989]  COND FALSE  !(revert)
[L3145]  RET         call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L3146]  COND FALSE  !(revert)
[L3149]  CALL        call GEEQToken_GEEQToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3095]              assume msgsender_MSG != null;
[L3096]              Balance[this] := 0;
[L3097]              symbol_GEEQToken[this] := 1164884495;
[L3098]              name_GEEQToken[this] := 1164884495;
[L3099]              decimals_GEEQToken[this] := 0;
[L3100]              _totalSupply_GEEQToken[this] := 0;
[L3101]              _totalMinted_GEEQToken[this] := 0;
[L3102]              _maxMintable_GEEQToken[this] := 0;
[L3103]              pauseOn_GEEQToken[this] := false;
[L3104]              migrationOn_GEEQToken[this] := false;
[L3105]              balances_GEEQToken[this] := zeroRefintArr();
[L3106]              sum_balances0[this] := 0;
[L3107]              allowed_GEEQToken[this] := zeroRefRefintArr();
[L3108]              sum_allowed1[this] := 0;
[L3109]              geeqaddress_GEEQToken[this] := zeroRefintArr();
[L3111]              symbol_GEEQToken[this] := -15460934;
[L3112]              name_GEEQToken[this] := -1182004402;
[L3113]              decimals_GEEQToken[this] := 18;
[L3114]              _totalMinted_GEEQToken[this] := 0;
[L3115]              _totalSupply_GEEQToken[this] := 0;
[L3116]              __var_2 := decimals_GEEQToken[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3117]              _maxMintable_GEEQToken[this] := 100000000 * (nonlinearPow(10, decimals_GEEQToken[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3118]              owner_Owned[this] := msgsender_MSG;
[L3149]  RET         call GEEQToken_GEEQToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3150]  COND FALSE  !(revert)
[L710]   RET         call GEEQToken_GEEQToken__success(this, msgsender_MSG, msgvalue_MSG);
[L711]               assume !revert && gas >= 0;
[L5356]  RET         call GEEQToken_GEEQToken(this, msgsender_MSG, msgvalue_MSG);
[L5357]              assume !revert && gas >= 0;

Loop:
[L5360]  CALL        call CorralChoice_GEEQToken(this);
[L5125]              havoc msgsender_MSG;
[L5126]              havoc msgvalue_MSG;
[L5127]              havoc choice;
[L5128]              havoc __ret_0_totalSupply;
[L5129]              havoc tokenOwner_s591;
[L5130]              havoc balance_s591;
[L5131]              havoc tokenOwner_s763;
[L5132]              havoc spender_s763;
[L5133]              havoc remaining_s763;
[L5134]              havoc to_s647;
[L5135]              havoc tokens_s647;
[L5136]              havoc success_s647;
[L5137]              havoc spender_s675;
[L5138]              havoc tokens_s675;
[L5139]              havoc success_s675;
[L5140]              havoc from_s747;
[L5141]              havoc to_s747;
[L5142]              havoc tokens_s747;
[L5143]              havoc success_s747;
[L5144]              havoc __ret_0_owner;
[L5145]              havoc __ret_0_newOwner;
[L5146]              havoc _newOwner_s220;
[L5147]              havoc __ret_0_symbol;
[L5148]              havoc __ret_0_name;
[L5149]              havoc __ret_0_decimals;
[L5150]              havoc __ret_0_pauseOn;
[L5151]              havoc __ret_0_migrationOn;
[L5152]              havoc arg813_s0;
[L5153]              havoc __ret_0_balances;
[L5154]              havoc arg814_s0;
[L5155]              havoc __ret_0_geeqaddress;
[L5156]              havoc registeraddress_s387;
[L5157]              havoc tokenAddress_s407;
[L5158]              havoc tokens_s407;
[L5159]              havoc success_s407;
[L5160]              havoc __ret_0_totalMinted;
[L5161]              havoc receiver_s579;
[L5162]              havoc token_amt_s579;
[L5163]              havoc spender_s806;
[L5164]              havoc tokens_s806;
[L5165]              havoc data_s806;
[L5166]              havoc success_s806;
[L5167]              havoc tmpNow;
[L5168]              havoc gas;
[L5169]              assume gas > 4000000 && gas <= 8000000;
[L5170]              tmpNow := now;
[L5171]              havoc now;
[L5172]              assume now > tmpNow;
[L5173]              assume msgsender_MSG != null;
[L5174]              assume DType[msgsender_MSG] != SafeMath;
[L5175]              assume DType[msgsender_MSG] != ERC20Interface;
[L5176]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L5177]              assume DType[msgsender_MSG] != Owned;
[L5178]              assume DType[msgsender_MSG] != GEEQToken;
[L5179]              Alloc[msgsender_MSG] := true;
[L5180]  COND TRUE   choice == 26
[L5181]              gas := gas - 21000;
[L5182]  COND FALSE  !(gas >= 0)
[L5360]  RET         call CorralChoice_GEEQToken(this);

[2020-11-25 16:56:46,627 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 16:56:46,627 INFO  L82        PathProgramCache]: Analyzing trace with hash 296487269, now seen corresponding path program 1 times
[2020-11-25 16:56:46,628 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 16:56:46,639 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 16:56:46,657 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 16:56:46,657 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 16:56:46,657 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [4] imperfect sequences [] total 4
[2020-11-25 16:56:46,659 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 16:56:46,659 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-11-25 16:56:46,659 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=5, Invalid=7, Unknown=0, NotChecked=0, Total=12
[2020-11-25 16:56:46,659 INFO  L87              Difference]: Start difference. First operand 3906 states and 5996 transitions. cyclomatic complexity: 2092 Second operand 4 states.
[2020-11-25 16:56:47,550 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 16:56:47,550 INFO  L93              Difference]: Finished difference Result 3727 states and 4016 transitions.
[2020-11-25 16:56:47,550 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 4 states. 
[2020-11-25 16:56:47,550 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 3727 states and 4016 transitions.
[2020-11-25 16:56:47,563 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 16:56:47,573 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 3727 states to 3727 states and 4016 transitions.
[2020-11-25 16:56:47,573 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1115
[2020-11-25 16:56:47,574 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1115
[2020-11-25 16:56:47,574 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 3727 states and 4016 transitions.
[2020-11-25 16:56:47,576 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 16:56:47,576 INFO  L728         BuchiCegarLoop]: Abstraction has 3727 states and 4016 transitions.
[2020-11-25 16:56:47,580 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 3727 states and 4016 transitions.
[2020-11-25 16:56:47,624 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 3727 to 3727.
[2020-11-25 16:56:47,624 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 3727 states.
[2020-11-25 16:56:47,628 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 3727 states to 3727 states and 4016 transitions.
[2020-11-25 16:56:47,628 INFO  L751         BuchiCegarLoop]: Abstraction has 3727 states and 4016 transitions.
[2020-11-25 16:56:47,628 INFO  L631         BuchiCegarLoop]: Abstraction has 3727 states and 4016 transitions.
[2020-11-25 16:56:47,628 INFO  L445         BuchiCegarLoop]: ======== Iteration 3============
[2020-11-25 16:56:47,628 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 3727 states and 4016 transitions.
[2020-11-25 16:56:47,632 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 16:56:47,633 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 16:56:47,633 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 16:56:47,634 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 16:56:47,634 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_transferFrom_GEEQToken0 := false;
[L3]                 call_transferFrom_GEEQToken0 := false;
[L3]     CALL        call main();
[L3]                 havoc p2;
[L3]                 havoc p1;
[L5350]              assume null == 0;
[L5351]  CALL        call this := FreshRefGenerator__success();
[L2768]              havoc newRef;
[L2769]              assume Alloc[newRef] == false;
[L2770]              Alloc[newRef] := true;
[L2771]              assume newRef != null;
[L5351]  RET         call this := FreshRefGenerator__success();
[L5352]              assume now >= 0;
[L5353]              assume DType[this] == GEEQToken;
[L5354]              assume msgvalue_MSG == 0;
[L5355]              gas := gas - 53000;
[L5356]  CALL        call GEEQToken_GEEQToken(this, msgsender_MSG, msgvalue_MSG);
[L679]               havoc __exception;
[L680]               revert := false;
[L681]   COND FALSE  !(__exception)
[L710]   CALL        call GEEQToken_GEEQToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3141]  CALL        call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L2920]  CALL        call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2905]              assume msgsender_MSG != null;
[L2906]              Balance[this] := 0;
[L2920]  RET         call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2921]  COND FALSE  !(revert)
[L3141]  RET         call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L3142]  COND FALSE  !(revert)
[L3145]  CALL        call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L2988]  CALL        call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2971]              assume msgsender_MSG != null;
[L2972]              Balance[this] := 0;
[L2973]              owner_Owned[this] := null;
[L2974]              newOwner_Owned[this] := null;
[L2988]  RET         call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2989]  COND FALSE  !(revert)
[L3145]  RET         call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L3146]  COND FALSE  !(revert)
[L3149]  CALL        call GEEQToken_GEEQToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3095]              assume msgsender_MSG != null;
[L3096]              Balance[this] := 0;
[L3097]              symbol_GEEQToken[this] := 1164884495;
[L3098]              name_GEEQToken[this] := 1164884495;
[L3099]              decimals_GEEQToken[this] := 0;
[L3100]              _totalSupply_GEEQToken[this] := 0;
[L3101]              _totalMinted_GEEQToken[this] := 0;
[L3102]              _maxMintable_GEEQToken[this] := 0;
[L3103]              pauseOn_GEEQToken[this] := false;
[L3104]              migrationOn_GEEQToken[this] := false;
[L3105]              balances_GEEQToken[this] := zeroRefintArr();
[L3106]              sum_balances0[this] := 0;
[L3107]              allowed_GEEQToken[this] := zeroRefRefintArr();
[L3108]              sum_allowed1[this] := 0;
[L3109]              geeqaddress_GEEQToken[this] := zeroRefintArr();
[L3111]              symbol_GEEQToken[this] := -15460934;
[L3112]              name_GEEQToken[this] := -1182004402;
[L3113]              decimals_GEEQToken[this] := 18;
[L3114]              _totalMinted_GEEQToken[this] := 0;
[L3115]              _totalSupply_GEEQToken[this] := 0;
[L3116]              __var_2 := decimals_GEEQToken[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3117]              _maxMintable_GEEQToken[this] := 100000000 * (nonlinearPow(10, decimals_GEEQToken[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3118]              owner_Owned[this] := msgsender_MSG;
[L3149]  RET         call GEEQToken_GEEQToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3150]  COND FALSE  !(revert)
[L710]   RET         call GEEQToken_GEEQToken__success(this, msgsender_MSG, msgvalue_MSG);
[L711]               assume !revert && gas >= 0;
[L5356]  RET         call GEEQToken_GEEQToken(this, msgsender_MSG, msgvalue_MSG);
[L5357]              assume !revert && gas >= 0;
[L5360]  CALL        call CorralChoice_GEEQToken(this);
[L5125]              havoc msgsender_MSG;
[L5126]              havoc msgvalue_MSG;
[L5127]              havoc choice;
[L5128]              havoc __ret_0_totalSupply;
[L5129]              havoc tokenOwner_s591;
[L5130]              havoc balance_s591;
[L5131]              havoc tokenOwner_s763;
[L5132]              havoc spender_s763;
[L5133]              havoc remaining_s763;
[L5134]              havoc to_s647;
[L5135]              havoc tokens_s647;
[L5136]              havoc success_s647;
[L5137]              havoc spender_s675;
[L5138]              havoc tokens_s675;
[L5139]              havoc success_s675;
[L5140]              havoc from_s747;
[L5141]              havoc to_s747;
[L5142]              havoc tokens_s747;
[L5143]              havoc success_s747;
[L5144]              havoc __ret_0_owner;
[L5145]              havoc __ret_0_newOwner;
[L5146]              havoc _newOwner_s220;
[L5147]              havoc __ret_0_symbol;
[L5148]              havoc __ret_0_name;
[L5149]              havoc __ret_0_decimals;
[L5150]              havoc __ret_0_pauseOn;
[L5151]              havoc __ret_0_migrationOn;
[L5152]              havoc arg813_s0;
[L5153]              havoc __ret_0_balances;
[L5154]              havoc arg814_s0;
[L5155]              havoc __ret_0_geeqaddress;
[L5156]              havoc registeraddress_s387;
[L5157]              havoc tokenAddress_s407;
[L5158]              havoc tokens_s407;
[L5159]              havoc success_s407;
[L5160]              havoc __ret_0_totalMinted;
[L5161]              havoc receiver_s579;
[L5162]              havoc token_amt_s579;
[L5163]              havoc spender_s806;
[L5164]              havoc tokens_s806;
[L5165]              havoc data_s806;
[L5166]              havoc success_s806;
[L5167]              havoc tmpNow;
[L5168]              havoc gas;
[L5169]              assume gas > 4000000 && gas <= 8000000;
[L5170]              tmpNow := now;
[L5171]              havoc now;
[L5172]              assume now > tmpNow;
[L5173]              assume msgsender_MSG != null;
[L5174]              assume DType[msgsender_MSG] != SafeMath;
[L5175]              assume DType[msgsender_MSG] != ERC20Interface;
[L5176]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L5177]              assume DType[msgsender_MSG] != Owned;
[L5178]              assume DType[msgsender_MSG] != GEEQToken;
[L5179]              Alloc[msgsender_MSG] := true;
[L5180]  COND FALSE  !(choice == 26)
[L5186]  COND FALSE  !(choice == 25)
[L5192]  COND FALSE  !(choice == 24)
[L5198]  COND FALSE  !(choice == 23)
[L5205]  COND FALSE  !(choice == 22)
[L5212]  COND TRUE   choice == 21
[L5213]              gas := gas - 21000;
[L5214]  COND TRUE   gas >= 0
[L5215]              assume tokens_s747 >= 0 && tokens_s747 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5216]              assume msgvalue_MSG == 0;
[L5217]  CALL        call success_s747 := transferFrom~address~address~uint256_GEEQToken(this, msgsender_MSG, msgvalue_MSG, from_s747, to_s747, tokens_s747);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((p1 != from_s747 || p2 != msgsender_MSG) && from_s747 == to_s747) && tokens_s747 <= balances_GEEQToken[this][from_s747]) && tokens_s747 <= allowed_GEEQToken[this][from_s747][msgsender_MSG]) && tokens_s747 >= 0) && tokens_s747 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_GEEQToken[this][to_s747] >= 0) && balances_GEEQToken[this][to_s747] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_GEEQToken[this][from_s747] >= 0) && balances_GEEQToken[this][from_s747] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_GEEQToken[this][from_s747][msgsender_MSG] >= 0) && allowed_GEEQToken[this][from_s747][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_GEEQToken0 := true;
[L3]                 call_transferFrom_GEEQToken0 := false;
[L3]                 revert := revert_hold;
[L1565]              havoc __exception;
[L1566]              revert := false;
[L1567]  COND TRUE   __exception
[L1568]              __tmp__Balance := Balance;
[L1569]              __tmp__DType := DType;
[L1570]              __tmp__Alloc := Alloc;
[L1571]              __tmp__balance_ADDR := balance_ADDR;
[L1572]              __tmp__M_Ref_int := M_Ref_int;
[L1573]              __tmp__sum_balances0 := sum_balances0;
[L1574]              __tmp__alloc_allowed_GEEQToken_lvl0 := alloc_allowed_GEEQToken_lvl0;
[L1575]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L1576]              __tmp__sum_allowed1 := sum_allowed1;
[L1577]              __tmp__sum_geeqaddress2 := sum_geeqaddress2;
[L1578]              __tmp__Length := Length;
[L1579]              __tmp__now := now;
[L1580]              __tmp__owner_Owned := owner_Owned;
[L1581]              __tmp__newOwner_Owned := newOwner_Owned;
[L1582]              __tmp__symbol_GEEQToken := symbol_GEEQToken;
[L1583]              __tmp__name_GEEQToken := name_GEEQToken;
[L1584]              __tmp__decimals_GEEQToken := decimals_GEEQToken;
[L1585]              __tmp___totalSupply_GEEQToken := _totalSupply_GEEQToken;
[L1586]              __tmp___totalMinted_GEEQToken := _totalMinted_GEEQToken;
[L1587]              __tmp___maxMintable_GEEQToken := _maxMintable_GEEQToken;
[L1588]              __tmp__pauseOn_GEEQToken := pauseOn_GEEQToken;
[L1589]              __tmp__migrationOn_GEEQToken := migrationOn_GEEQToken;
[L1590]              __tmp__balances_GEEQToken := balances_GEEQToken;
[L1591]              __tmp__allowed_GEEQToken := allowed_GEEQToken;
[L1592]              __tmp__geeqaddress_GEEQToken := geeqaddress_GEEQToken;
[L1593]  CALL        call success_s747 := transferFrom~address~address~uint256_GEEQToken__fail(this, msgsender_MSG, msgvalue_MSG, from_s747, to_s747, tokens_s747);
[L3565]  COND TRUE   __tmp__pauseOn_GEEQToken[this]
[L3566]              revert := true;
[L1593]  RET         call success_s747 := transferFrom~address~address~uint256_GEEQToken__fail(this, msgsender_MSG, msgvalue_MSG, from_s747, to_s747, tokens_s747);
[L1594]              assume revert || gas < 0;
[L5217]  RET         call success_s747 := transferFrom~address~address~uint256_GEEQToken(this, msgsender_MSG, msgvalue_MSG, from_s747, to_s747, tokens_s747);
[L5360]  RET         call CorralChoice_GEEQToken(this);

Loop:
[L5360]  CALL        call CorralChoice_GEEQToken(this);
[L5125]              havoc msgsender_MSG;
[L5126]              havoc msgvalue_MSG;
[L5127]              havoc choice;
[L5128]              havoc __ret_0_totalSupply;
[L5129]              havoc tokenOwner_s591;
[L5130]              havoc balance_s591;
[L5131]              havoc tokenOwner_s763;
[L5132]              havoc spender_s763;
[L5133]              havoc remaining_s763;
[L5134]              havoc to_s647;
[L5135]              havoc tokens_s647;
[L5136]              havoc success_s647;
[L5137]              havoc spender_s675;
[L5138]              havoc tokens_s675;
[L5139]              havoc success_s675;
[L5140]              havoc from_s747;
[L5141]              havoc to_s747;
[L5142]              havoc tokens_s747;
[L5143]              havoc success_s747;
[L5144]              havoc __ret_0_owner;
[L5145]              havoc __ret_0_newOwner;
[L5146]              havoc _newOwner_s220;
[L5147]              havoc __ret_0_symbol;
[L5148]              havoc __ret_0_name;
[L5149]              havoc __ret_0_decimals;
[L5150]              havoc __ret_0_pauseOn;
[L5151]              havoc __ret_0_migrationOn;
[L5152]              havoc arg813_s0;
[L5153]              havoc __ret_0_balances;
[L5154]              havoc arg814_s0;
[L5155]              havoc __ret_0_geeqaddress;
[L5156]              havoc registeraddress_s387;
[L5157]              havoc tokenAddress_s407;
[L5158]              havoc tokens_s407;
[L5159]              havoc success_s407;
[L5160]              havoc __ret_0_totalMinted;
[L5161]              havoc receiver_s579;
[L5162]              havoc token_amt_s579;
[L5163]              havoc spender_s806;
[L5164]              havoc tokens_s806;
[L5165]              havoc data_s806;
[L5166]              havoc success_s806;
[L5167]              havoc tmpNow;
[L5168]              havoc gas;
[L5169]              assume gas > 4000000 && gas <= 8000000;
[L5170]              tmpNow := now;
[L5171]              havoc now;
[L5172]              assume now > tmpNow;
[L5173]              assume msgsender_MSG != null;
[L5174]              assume DType[msgsender_MSG] != SafeMath;
[L5175]              assume DType[msgsender_MSG] != ERC20Interface;
[L5176]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L5177]              assume DType[msgsender_MSG] != Owned;
[L5178]              assume DType[msgsender_MSG] != GEEQToken;
[L5179]              Alloc[msgsender_MSG] := true;
[L5180]  COND FALSE  !(choice == 26)
[L5186]  COND FALSE  !(choice == 25)
[L5192]  COND FALSE  !(choice == 24)
[L5198]  COND FALSE  !(choice == 23)
[L5205]  COND FALSE  !(choice == 22)
[L5212]  COND TRUE   choice == 21
[L5213]              gas := gas - 21000;
[L5214]  COND TRUE   gas >= 0
[L5215]              assume tokens_s747 >= 0 && tokens_s747 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5216]              assume msgvalue_MSG == 0;
[L5217]  CALL        call success_s747 := transferFrom~address~address~uint256_GEEQToken(this, msgsender_MSG, msgvalue_MSG, from_s747, to_s747, tokens_s747);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((p1 != from_s747 || p2 != msgsender_MSG) && from_s747 == to_s747) && tokens_s747 <= balances_GEEQToken[this][from_s747]) && tokens_s747 <= allowed_GEEQToken[this][from_s747][msgsender_MSG]) && tokens_s747 >= 0) && tokens_s747 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_GEEQToken[this][to_s747] >= 0) && balances_GEEQToken[this][to_s747] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_GEEQToken[this][from_s747] >= 0) && balances_GEEQToken[this][from_s747] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_GEEQToken[this][from_s747][msgsender_MSG] >= 0) && allowed_GEEQToken[this][from_s747][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_GEEQToken0 := true;
[L3]                 call_transferFrom_GEEQToken0 := false;
[L3]                 revert := revert_hold;
[L1565]              havoc __exception;
[L1566]              revert := false;
[L1567]  COND TRUE   __exception
[L1568]              __tmp__Balance := Balance;
[L1569]              __tmp__DType := DType;
[L1570]              __tmp__Alloc := Alloc;
[L1571]              __tmp__balance_ADDR := balance_ADDR;
[L1572]              __tmp__M_Ref_int := M_Ref_int;
[L1573]              __tmp__sum_balances0 := sum_balances0;
[L1574]              __tmp__alloc_allowed_GEEQToken_lvl0 := alloc_allowed_GEEQToken_lvl0;
[L1575]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L1576]              __tmp__sum_allowed1 := sum_allowed1;
[L1577]              __tmp__sum_geeqaddress2 := sum_geeqaddress2;
[L1578]              __tmp__Length := Length;
[L1579]              __tmp__now := now;
[L1580]              __tmp__owner_Owned := owner_Owned;
[L1581]              __tmp__newOwner_Owned := newOwner_Owned;
[L1582]              __tmp__symbol_GEEQToken := symbol_GEEQToken;
[L1583]              __tmp__name_GEEQToken := name_GEEQToken;
[L1584]              __tmp__decimals_GEEQToken := decimals_GEEQToken;
[L1585]              __tmp___totalSupply_GEEQToken := _totalSupply_GEEQToken;
[L1586]              __tmp___totalMinted_GEEQToken := _totalMinted_GEEQToken;
[L1587]              __tmp___maxMintable_GEEQToken := _maxMintable_GEEQToken;
[L1588]              __tmp__pauseOn_GEEQToken := pauseOn_GEEQToken;
[L1589]              __tmp__migrationOn_GEEQToken := migrationOn_GEEQToken;
[L1590]              __tmp__balances_GEEQToken := balances_GEEQToken;
[L1591]              __tmp__allowed_GEEQToken := allowed_GEEQToken;
[L1592]              __tmp__geeqaddress_GEEQToken := geeqaddress_GEEQToken;
[L1593]  CALL        call success_s747 := transferFrom~address~address~uint256_GEEQToken__fail(this, msgsender_MSG, msgvalue_MSG, from_s747, to_s747, tokens_s747);
[L3565]  COND TRUE   __tmp__pauseOn_GEEQToken[this]
[L3566]              revert := true;
[L1593]  RET         call success_s747 := transferFrom~address~address~uint256_GEEQToken__fail(this, msgsender_MSG, msgvalue_MSG, from_s747, to_s747, tokens_s747);
[L1594]              assume revert || gas < 0;
[L5217]  RET         call success_s747 := transferFrom~address~address~uint256_GEEQToken(this, msgsender_MSG, msgvalue_MSG, from_s747, to_s747, tokens_s747);
[L5360]  RET         call CorralChoice_GEEQToken(this);

[2020-11-25 16:56:47,666 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 16:56:47,666 INFO  L82        PathProgramCache]: Analyzing trace with hash -615013923, now seen corresponding path program 1 times
[2020-11-25 16:56:47,666 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 16:56:47,679 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 16:56:47,732 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 16:56:47,732 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 16:56:47,732 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [10] imperfect sequences [] total 10
[2020-11-25 16:56:47,733 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 16:56:47,733 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 11 interpolants.
[2020-11-25 16:56:47,733 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=19, Invalid=91, Unknown=0, NotChecked=0, Total=110
[2020-11-25 16:56:47,733 INFO  L87              Difference]: Start difference. First operand 3727 states and 4016 transitions. cyclomatic complexity: 291 Second operand 11 states.
[2020-11-25 16:56:49,760 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 16:56:49,760 INFO  L93              Difference]: Finished difference Result 6333 states and 6938 transitions.
[2020-11-25 16:56:49,760 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 13 states. 
[2020-11-25 16:56:49,760 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 6333 states and 6938 transitions.
[2020-11-25 16:56:49,772 INFO  L131   ngComponentsAnalysis]: Automaton has 3 accepting balls. 12
[2020-11-25 16:56:49,787 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 6333 states to 6333 states and 6938 transitions.
[2020-11-25 16:56:49,787 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1922
[2020-11-25 16:56:49,788 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1922
[2020-11-25 16:56:49,788 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 6333 states and 6938 transitions.
[2020-11-25 16:56:49,794 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 16:56:49,794 INFO  L728         BuchiCegarLoop]: Abstraction has 6333 states and 6938 transitions.
[2020-11-25 16:56:49,798 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 6333 states and 6938 transitions.
[2020-11-25 16:56:49,829 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 6333 to 3769.
[2020-11-25 16:56:49,830 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 3769 states.
[2020-11-25 16:56:49,833 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 3769 states to 3769 states and 4065 transitions.
[2020-11-25 16:56:49,833 INFO  L751         BuchiCegarLoop]: Abstraction has 3769 states and 4065 transitions.
[2020-11-25 16:56:49,833 INFO  L631         BuchiCegarLoop]: Abstraction has 3769 states and 4065 transitions.
[2020-11-25 16:56:49,833 INFO  L445         BuchiCegarLoop]: ======== Iteration 4============
[2020-11-25 16:56:49,833 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 3769 states and 4065 transitions.
[2020-11-25 16:56:49,837 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 16:56:49,837 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 16:56:49,837 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 16:56:49,839 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 16:56:49,839 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_transferFrom_GEEQToken0 := false;
[L3]                 call_transferFrom_GEEQToken0 := false;
[L3]     CALL        call main();
[L3]                 havoc p2;
[L3]                 havoc p1;
[L5350]              assume null == 0;
[L5351]  CALL        call this := FreshRefGenerator__success();
[L2768]              havoc newRef;
[L2769]              assume Alloc[newRef] == false;
[L2770]              Alloc[newRef] := true;
[L2771]              assume newRef != null;
[L5351]  RET         call this := FreshRefGenerator__success();
[L5352]              assume now >= 0;
[L5353]              assume DType[this] == GEEQToken;
[L5354]              assume msgvalue_MSG == 0;
[L5355]              gas := gas - 53000;
[L5356]  CALL        call GEEQToken_GEEQToken(this, msgsender_MSG, msgvalue_MSG);
[L679]               havoc __exception;
[L680]               revert := false;
[L681]   COND FALSE  !(__exception)
[L710]   CALL        call GEEQToken_GEEQToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3141]  CALL        call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L2920]  CALL        call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2905]              assume msgsender_MSG != null;
[L2906]              Balance[this] := 0;
[L2920]  RET         call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2921]  COND FALSE  !(revert)
[L3141]  RET         call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L3142]  COND FALSE  !(revert)
[L3145]  CALL        call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L2988]  CALL        call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2971]              assume msgsender_MSG != null;
[L2972]              Balance[this] := 0;
[L2973]              owner_Owned[this] := null;
[L2974]              newOwner_Owned[this] := null;
[L2988]  RET         call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2989]  COND FALSE  !(revert)
[L3145]  RET         call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L3146]  COND FALSE  !(revert)
[L3149]  CALL        call GEEQToken_GEEQToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3095]              assume msgsender_MSG != null;
[L3096]              Balance[this] := 0;
[L3097]              symbol_GEEQToken[this] := 1164884495;
[L3098]              name_GEEQToken[this] := 1164884495;
[L3099]              decimals_GEEQToken[this] := 0;
[L3100]              _totalSupply_GEEQToken[this] := 0;
[L3101]              _totalMinted_GEEQToken[this] := 0;
[L3102]              _maxMintable_GEEQToken[this] := 0;
[L3103]              pauseOn_GEEQToken[this] := false;
[L3104]              migrationOn_GEEQToken[this] := false;
[L3105]              balances_GEEQToken[this] := zeroRefintArr();
[L3106]              sum_balances0[this] := 0;
[L3107]              allowed_GEEQToken[this] := zeroRefRefintArr();
[L3108]              sum_allowed1[this] := 0;
[L3109]              geeqaddress_GEEQToken[this] := zeroRefintArr();
[L3111]              symbol_GEEQToken[this] := -15460934;
[L3112]              name_GEEQToken[this] := -1182004402;
[L3113]              decimals_GEEQToken[this] := 18;
[L3114]              _totalMinted_GEEQToken[this] := 0;
[L3115]              _totalSupply_GEEQToken[this] := 0;
[L3116]              __var_2 := decimals_GEEQToken[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3117]              _maxMintable_GEEQToken[this] := 100000000 * (nonlinearPow(10, decimals_GEEQToken[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3118]              owner_Owned[this] := msgsender_MSG;
[L3149]  RET         call GEEQToken_GEEQToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3150]  COND FALSE  !(revert)
[L710]   RET         call GEEQToken_GEEQToken__success(this, msgsender_MSG, msgvalue_MSG);
[L711]               assume !revert && gas >= 0;
[L5356]  RET         call GEEQToken_GEEQToken(this, msgsender_MSG, msgvalue_MSG);
[L5357]              assume !revert && gas >= 0;
[L5360]  CALL        call CorralChoice_GEEQToken(this);
[L5125]              havoc msgsender_MSG;
[L5126]              havoc msgvalue_MSG;
[L5127]              havoc choice;
[L5128]              havoc __ret_0_totalSupply;
[L5129]              havoc tokenOwner_s591;
[L5130]              havoc balance_s591;
[L5131]              havoc tokenOwner_s763;
[L5132]              havoc spender_s763;
[L5133]              havoc remaining_s763;
[L5134]              havoc to_s647;
[L5135]              havoc tokens_s647;
[L5136]              havoc success_s647;
[L5137]              havoc spender_s675;
[L5138]              havoc tokens_s675;
[L5139]              havoc success_s675;
[L5140]              havoc from_s747;
[L5141]              havoc to_s747;
[L5142]              havoc tokens_s747;
[L5143]              havoc success_s747;
[L5144]              havoc __ret_0_owner;
[L5145]              havoc __ret_0_newOwner;
[L5146]              havoc _newOwner_s220;
[L5147]              havoc __ret_0_symbol;
[L5148]              havoc __ret_0_name;
[L5149]              havoc __ret_0_decimals;
[L5150]              havoc __ret_0_pauseOn;
[L5151]              havoc __ret_0_migrationOn;
[L5152]              havoc arg813_s0;
[L5153]              havoc __ret_0_balances;
[L5154]              havoc arg814_s0;
[L5155]              havoc __ret_0_geeqaddress;
[L5156]              havoc registeraddress_s387;
[L5157]              havoc tokenAddress_s407;
[L5158]              havoc tokens_s407;
[L5159]              havoc success_s407;
[L5160]              havoc __ret_0_totalMinted;
[L5161]              havoc receiver_s579;
[L5162]              havoc token_amt_s579;
[L5163]              havoc spender_s806;
[L5164]              havoc tokens_s806;
[L5165]              havoc data_s806;
[L5166]              havoc success_s806;
[L5167]              havoc tmpNow;
[L5168]              havoc gas;
[L5169]              assume gas > 4000000 && gas <= 8000000;
[L5170]              tmpNow := now;
[L5171]              havoc now;
[L5172]              assume now > tmpNow;
[L5173]              assume msgsender_MSG != null;
[L5174]              assume DType[msgsender_MSG] != SafeMath;
[L5175]              assume DType[msgsender_MSG] != ERC20Interface;
[L5176]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L5177]              assume DType[msgsender_MSG] != Owned;
[L5178]              assume DType[msgsender_MSG] != GEEQToken;
[L5179]              Alloc[msgsender_MSG] := true;
[L5180]  COND FALSE  !(choice == 26)
[L5186]  COND FALSE  !(choice == 25)
[L5192]  COND FALSE  !(choice == 24)
[L5198]  COND FALSE  !(choice == 23)
[L5205]  COND FALSE  !(choice == 22)
[L5212]  COND TRUE   choice == 21
[L5213]              gas := gas - 21000;
[L5214]  COND TRUE   gas >= 0
[L5215]              assume tokens_s747 >= 0 && tokens_s747 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5216]              assume msgvalue_MSG == 0;
[L5217]  CALL        call success_s747 := transferFrom~address~address~uint256_GEEQToken(this, msgsender_MSG, msgvalue_MSG, from_s747, to_s747, tokens_s747);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((p1 != from_s747 || p2 != msgsender_MSG) && from_s747 == to_s747) && tokens_s747 <= balances_GEEQToken[this][from_s747]) && tokens_s747 <= allowed_GEEQToken[this][from_s747][msgsender_MSG]) && tokens_s747 >= 0) && tokens_s747 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_GEEQToken[this][to_s747] >= 0) && balances_GEEQToken[this][to_s747] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_GEEQToken[this][from_s747] >= 0) && balances_GEEQToken[this][from_s747] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_GEEQToken[this][from_s747][msgsender_MSG] >= 0) && allowed_GEEQToken[this][from_s747][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_GEEQToken0 := true;
[L3]                 call_transferFrom_GEEQToken0 := false;
[L3]                 revert := revert_hold;
[L1565]              havoc __exception;
[L1566]              revert := false;
[L1567]  COND TRUE   __exception
[L1568]              __tmp__Balance := Balance;
[L1569]              __tmp__DType := DType;
[L1570]              __tmp__Alloc := Alloc;
[L1571]              __tmp__balance_ADDR := balance_ADDR;
[L1572]              __tmp__M_Ref_int := M_Ref_int;
[L1573]              __tmp__sum_balances0 := sum_balances0;
[L1574]              __tmp__alloc_allowed_GEEQToken_lvl0 := alloc_allowed_GEEQToken_lvl0;
[L1575]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L1576]              __tmp__sum_allowed1 := sum_allowed1;
[L1577]              __tmp__sum_geeqaddress2 := sum_geeqaddress2;
[L1578]              __tmp__Length := Length;
[L1579]              __tmp__now := now;
[L1580]              __tmp__owner_Owned := owner_Owned;
[L1581]              __tmp__newOwner_Owned := newOwner_Owned;
[L1582]              __tmp__symbol_GEEQToken := symbol_GEEQToken;
[L1583]              __tmp__name_GEEQToken := name_GEEQToken;
[L1584]              __tmp__decimals_GEEQToken := decimals_GEEQToken;
[L1585]              __tmp___totalSupply_GEEQToken := _totalSupply_GEEQToken;
[L1586]              __tmp___totalMinted_GEEQToken := _totalMinted_GEEQToken;
[L1587]              __tmp___maxMintable_GEEQToken := _maxMintable_GEEQToken;
[L1588]              __tmp__pauseOn_GEEQToken := pauseOn_GEEQToken;
[L1589]              __tmp__migrationOn_GEEQToken := migrationOn_GEEQToken;
[L1590]              __tmp__balances_GEEQToken := balances_GEEQToken;
[L1591]              __tmp__allowed_GEEQToken := allowed_GEEQToken;
[L1592]              __tmp__geeqaddress_GEEQToken := geeqaddress_GEEQToken;
[L1593]  CALL        call success_s747 := transferFrom~address~address~uint256_GEEQToken__fail(this, msgsender_MSG, msgvalue_MSG, from_s747, to_s747, tokens_s747);
[L3565]  COND FALSE  !(__tmp__pauseOn_GEEQToken[this])
[L3569]  CALL        call __var_17 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__balances_GEEQToken[this][from_s747], tokens_s747);
[L2830]  COND TRUE   !(b_s51 <= a_s51)
[L2831]              revert := true;
[L3569]  RET         call __var_17 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__balances_GEEQToken[this][from_s747], tokens_s747);
[L3570]  COND TRUE   revert
[L1593]  RET         call success_s747 := transferFrom~address~address~uint256_GEEQToken__fail(this, msgsender_MSG, msgvalue_MSG, from_s747, to_s747, tokens_s747);
[L1594]              assume revert || gas < 0;
[L5217]  RET         call success_s747 := transferFrom~address~address~uint256_GEEQToken(this, msgsender_MSG, msgvalue_MSG, from_s747, to_s747, tokens_s747);
[L5360]  RET         call CorralChoice_GEEQToken(this);

Loop:
[L5360]  CALL        call CorralChoice_GEEQToken(this);
[L5125]              havoc msgsender_MSG;
[L5126]              havoc msgvalue_MSG;
[L5127]              havoc choice;
[L5128]              havoc __ret_0_totalSupply;
[L5129]              havoc tokenOwner_s591;
[L5130]              havoc balance_s591;
[L5131]              havoc tokenOwner_s763;
[L5132]              havoc spender_s763;
[L5133]              havoc remaining_s763;
[L5134]              havoc to_s647;
[L5135]              havoc tokens_s647;
[L5136]              havoc success_s647;
[L5137]              havoc spender_s675;
[L5138]              havoc tokens_s675;
[L5139]              havoc success_s675;
[L5140]              havoc from_s747;
[L5141]              havoc to_s747;
[L5142]              havoc tokens_s747;
[L5143]              havoc success_s747;
[L5144]              havoc __ret_0_owner;
[L5145]              havoc __ret_0_newOwner;
[L5146]              havoc _newOwner_s220;
[L5147]              havoc __ret_0_symbol;
[L5148]              havoc __ret_0_name;
[L5149]              havoc __ret_0_decimals;
[L5150]              havoc __ret_0_pauseOn;
[L5151]              havoc __ret_0_migrationOn;
[L5152]              havoc arg813_s0;
[L5153]              havoc __ret_0_balances;
[L5154]              havoc arg814_s0;
[L5155]              havoc __ret_0_geeqaddress;
[L5156]              havoc registeraddress_s387;
[L5157]              havoc tokenAddress_s407;
[L5158]              havoc tokens_s407;
[L5159]              havoc success_s407;
[L5160]              havoc __ret_0_totalMinted;
[L5161]              havoc receiver_s579;
[L5162]              havoc token_amt_s579;
[L5163]              havoc spender_s806;
[L5164]              havoc tokens_s806;
[L5165]              havoc data_s806;
[L5166]              havoc success_s806;
[L5167]              havoc tmpNow;
[L5168]              havoc gas;
[L5169]              assume gas > 4000000 && gas <= 8000000;
[L5170]              tmpNow := now;
[L5171]              havoc now;
[L5172]              assume now > tmpNow;
[L5173]              assume msgsender_MSG != null;
[L5174]              assume DType[msgsender_MSG] != SafeMath;
[L5175]              assume DType[msgsender_MSG] != ERC20Interface;
[L5176]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L5177]              assume DType[msgsender_MSG] != Owned;
[L5178]              assume DType[msgsender_MSG] != GEEQToken;
[L5179]              Alloc[msgsender_MSG] := true;
[L5180]  COND FALSE  !(choice == 26)
[L5186]  COND FALSE  !(choice == 25)
[L5192]  COND FALSE  !(choice == 24)
[L5198]  COND FALSE  !(choice == 23)
[L5205]  COND FALSE  !(choice == 22)
[L5212]  COND TRUE   choice == 21
[L5213]              gas := gas - 21000;
[L5214]  COND TRUE   gas >= 0
[L5215]              assume tokens_s747 >= 0 && tokens_s747 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5216]              assume msgvalue_MSG == 0;
[L5217]  CALL        call success_s747 := transferFrom~address~address~uint256_GEEQToken(this, msgsender_MSG, msgvalue_MSG, from_s747, to_s747, tokens_s747);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((p1 != from_s747 || p2 != msgsender_MSG) && from_s747 == to_s747) && tokens_s747 <= balances_GEEQToken[this][from_s747]) && tokens_s747 <= allowed_GEEQToken[this][from_s747][msgsender_MSG]) && tokens_s747 >= 0) && tokens_s747 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_GEEQToken[this][to_s747] >= 0) && balances_GEEQToken[this][to_s747] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_GEEQToken[this][from_s747] >= 0) && balances_GEEQToken[this][from_s747] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_GEEQToken[this][from_s747][msgsender_MSG] >= 0) && allowed_GEEQToken[this][from_s747][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_GEEQToken0 := true;
[L3]                 call_transferFrom_GEEQToken0 := false;
[L3]                 revert := revert_hold;
[L1565]              havoc __exception;
[L1566]              revert := false;
[L1567]  COND TRUE   __exception
[L1568]              __tmp__Balance := Balance;
[L1569]              __tmp__DType := DType;
[L1570]              __tmp__Alloc := Alloc;
[L1571]              __tmp__balance_ADDR := balance_ADDR;
[L1572]              __tmp__M_Ref_int := M_Ref_int;
[L1573]              __tmp__sum_balances0 := sum_balances0;
[L1574]              __tmp__alloc_allowed_GEEQToken_lvl0 := alloc_allowed_GEEQToken_lvl0;
[L1575]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L1576]              __tmp__sum_allowed1 := sum_allowed1;
[L1577]              __tmp__sum_geeqaddress2 := sum_geeqaddress2;
[L1578]              __tmp__Length := Length;
[L1579]              __tmp__now := now;
[L1580]              __tmp__owner_Owned := owner_Owned;
[L1581]              __tmp__newOwner_Owned := newOwner_Owned;
[L1582]              __tmp__symbol_GEEQToken := symbol_GEEQToken;
[L1583]              __tmp__name_GEEQToken := name_GEEQToken;
[L1584]              __tmp__decimals_GEEQToken := decimals_GEEQToken;
[L1585]              __tmp___totalSupply_GEEQToken := _totalSupply_GEEQToken;
[L1586]              __tmp___totalMinted_GEEQToken := _totalMinted_GEEQToken;
[L1587]              __tmp___maxMintable_GEEQToken := _maxMintable_GEEQToken;
[L1588]              __tmp__pauseOn_GEEQToken := pauseOn_GEEQToken;
[L1589]              __tmp__migrationOn_GEEQToken := migrationOn_GEEQToken;
[L1590]              __tmp__balances_GEEQToken := balances_GEEQToken;
[L1591]              __tmp__allowed_GEEQToken := allowed_GEEQToken;
[L1592]              __tmp__geeqaddress_GEEQToken := geeqaddress_GEEQToken;
[L1593]  CALL        call success_s747 := transferFrom~address~address~uint256_GEEQToken__fail(this, msgsender_MSG, msgvalue_MSG, from_s747, to_s747, tokens_s747);
[L3565]  COND FALSE  !(__tmp__pauseOn_GEEQToken[this])
[L3569]  CALL        call __var_17 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__balances_GEEQToken[this][from_s747], tokens_s747);
[L2830]  COND TRUE   !(b_s51 <= a_s51)
[L2831]              revert := true;
[L3569]  RET         call __var_17 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__balances_GEEQToken[this][from_s747], tokens_s747);
[L3570]  COND TRUE   revert
[L1593]  RET         call success_s747 := transferFrom~address~address~uint256_GEEQToken__fail(this, msgsender_MSG, msgvalue_MSG, from_s747, to_s747, tokens_s747);
[L1594]              assume revert || gas < 0;
[L5217]  RET         call success_s747 := transferFrom~address~address~uint256_GEEQToken(this, msgsender_MSG, msgvalue_MSG, from_s747, to_s747, tokens_s747);
[L5360]  RET         call CorralChoice_GEEQToken(this);

[2020-11-25 16:56:49,842 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 16:56:49,842 INFO  L82        PathProgramCache]: Analyzing trace with hash 1363072710, now seen corresponding path program 1 times
[2020-11-25 16:56:49,843 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 16:56:49,853 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 16:56:49,891 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 16:56:49,891 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 16:56:49,891 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [7] imperfect sequences [] total 7
[2020-11-25 16:56:49,892 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 16:56:49,892 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 7 interpolants.
[2020-11-25 16:56:49,892 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=11, Invalid=31, Unknown=0, NotChecked=0, Total=42
[2020-11-25 16:56:49,892 INFO  L87              Difference]: Start difference. First operand 3769 states and 4065 transitions. cyclomatic complexity: 300 Second operand 7 states.
[2020-11-25 16:56:50,845 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 16:56:50,845 INFO  L93              Difference]: Finished difference Result 4037 states and 4367 transitions.
[2020-11-25 16:56:50,845 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 8 states. 
[2020-11-25 16:56:50,845 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 4037 states and 4367 transitions.
[2020-11-25 16:56:50,865 INFO  L131   ngComponentsAnalysis]: Automaton has 4 accepting balls. 8
[2020-11-25 16:56:50,876 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 4037 states to 4037 states and 4367 transitions.
[2020-11-25 16:56:50,876 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1238
[2020-11-25 16:56:50,895 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1238
[2020-11-25 16:56:50,895 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 4037 states and 4367 transitions.
[2020-11-25 16:56:50,902 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 16:56:50,902 INFO  L728         BuchiCegarLoop]: Abstraction has 4037 states and 4367 transitions.
[2020-11-25 16:56:50,908 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 4037 states and 4367 transitions.
[2020-11-25 16:56:50,927 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 4037 to 3841.
[2020-11-25 16:56:50,927 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 3841 states.
[2020-11-25 16:56:50,930 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 3841 states to 3841 states and 4143 transitions.
[2020-11-25 16:56:50,930 INFO  L751         BuchiCegarLoop]: Abstraction has 3841 states and 4143 transitions.
[2020-11-25 16:56:50,930 INFO  L631         BuchiCegarLoop]: Abstraction has 3841 states and 4143 transitions.
[2020-11-25 16:56:50,930 INFO  L445         BuchiCegarLoop]: ======== Iteration 5============
[2020-11-25 16:56:50,930 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 3841 states and 4143 transitions.
[2020-11-25 16:56:50,934 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 16:56:50,934 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 16:56:50,934 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 16:56:50,935 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 16:56:50,935 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_transferFrom_GEEQToken0 := false;
[L3]                 call_transferFrom_GEEQToken0 := false;
[L3]     CALL        call main();
[L3]                 havoc p2;
[L3]                 havoc p1;
[L5350]              assume null == 0;
[L5351]  CALL        call this := FreshRefGenerator__success();
[L2768]              havoc newRef;
[L2769]              assume Alloc[newRef] == false;
[L2770]              Alloc[newRef] := true;
[L2771]              assume newRef != null;
[L5351]  RET         call this := FreshRefGenerator__success();
[L5352]              assume now >= 0;
[L5353]              assume DType[this] == GEEQToken;
[L5354]              assume msgvalue_MSG == 0;
[L5355]              gas := gas - 53000;
[L5356]  CALL        call GEEQToken_GEEQToken(this, msgsender_MSG, msgvalue_MSG);
[L679]               havoc __exception;
[L680]               revert := false;
[L681]   COND FALSE  !(__exception)
[L710]   CALL        call GEEQToken_GEEQToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3141]  CALL        call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L2920]  CALL        call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2905]              assume msgsender_MSG != null;
[L2906]              Balance[this] := 0;
[L2920]  RET         call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2921]  COND FALSE  !(revert)
[L3141]  RET         call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L3142]  COND FALSE  !(revert)
[L3145]  CALL        call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L2988]  CALL        call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2971]              assume msgsender_MSG != null;
[L2972]              Balance[this] := 0;
[L2973]              owner_Owned[this] := null;
[L2974]              newOwner_Owned[this] := null;
[L2988]  RET         call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2989]  COND FALSE  !(revert)
[L3145]  RET         call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L3146]  COND FALSE  !(revert)
[L3149]  CALL        call GEEQToken_GEEQToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3095]              assume msgsender_MSG != null;
[L3096]              Balance[this] := 0;
[L3097]              symbol_GEEQToken[this] := 1164884495;
[L3098]              name_GEEQToken[this] := 1164884495;
[L3099]              decimals_GEEQToken[this] := 0;
[L3100]              _totalSupply_GEEQToken[this] := 0;
[L3101]              _totalMinted_GEEQToken[this] := 0;
[L3102]              _maxMintable_GEEQToken[this] := 0;
[L3103]              pauseOn_GEEQToken[this] := false;
[L3104]              migrationOn_GEEQToken[this] := false;
[L3105]              balances_GEEQToken[this] := zeroRefintArr();
[L3106]              sum_balances0[this] := 0;
[L3107]              allowed_GEEQToken[this] := zeroRefRefintArr();
[L3108]              sum_allowed1[this] := 0;
[L3109]              geeqaddress_GEEQToken[this] := zeroRefintArr();
[L3111]              symbol_GEEQToken[this] := -15460934;
[L3112]              name_GEEQToken[this] := -1182004402;
[L3113]              decimals_GEEQToken[this] := 18;
[L3114]              _totalMinted_GEEQToken[this] := 0;
[L3115]              _totalSupply_GEEQToken[this] := 0;
[L3116]              __var_2 := decimals_GEEQToken[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3117]              _maxMintable_GEEQToken[this] := 100000000 * (nonlinearPow(10, decimals_GEEQToken[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3118]              owner_Owned[this] := msgsender_MSG;
[L3149]  RET         call GEEQToken_GEEQToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3150]  COND FALSE  !(revert)
[L710]   RET         call GEEQToken_GEEQToken__success(this, msgsender_MSG, msgvalue_MSG);
[L711]               assume !revert && gas >= 0;
[L5356]  RET         call GEEQToken_GEEQToken(this, msgsender_MSG, msgvalue_MSG);
[L5357]              assume !revert && gas >= 0;
[L5360]  CALL        call CorralChoice_GEEQToken(this);
[L5125]              havoc msgsender_MSG;
[L5126]              havoc msgvalue_MSG;
[L5127]              havoc choice;
[L5128]              havoc __ret_0_totalSupply;
[L5129]              havoc tokenOwner_s591;
[L5130]              havoc balance_s591;
[L5131]              havoc tokenOwner_s763;
[L5132]              havoc spender_s763;
[L5133]              havoc remaining_s763;
[L5134]              havoc to_s647;
[L5135]              havoc tokens_s647;
[L5136]              havoc success_s647;
[L5137]              havoc spender_s675;
[L5138]              havoc tokens_s675;
[L5139]              havoc success_s675;
[L5140]              havoc from_s747;
[L5141]              havoc to_s747;
[L5142]              havoc tokens_s747;
[L5143]              havoc success_s747;
[L5144]              havoc __ret_0_owner;
[L5145]              havoc __ret_0_newOwner;
[L5146]              havoc _newOwner_s220;
[L5147]              havoc __ret_0_symbol;
[L5148]              havoc __ret_0_name;
[L5149]              havoc __ret_0_decimals;
[L5150]              havoc __ret_0_pauseOn;
[L5151]              havoc __ret_0_migrationOn;
[L5152]              havoc arg813_s0;
[L5153]              havoc __ret_0_balances;
[L5154]              havoc arg814_s0;
[L5155]              havoc __ret_0_geeqaddress;
[L5156]              havoc registeraddress_s387;
[L5157]              havoc tokenAddress_s407;
[L5158]              havoc tokens_s407;
[L5159]              havoc success_s407;
[L5160]              havoc __ret_0_totalMinted;
[L5161]              havoc receiver_s579;
[L5162]              havoc token_amt_s579;
[L5163]              havoc spender_s806;
[L5164]              havoc tokens_s806;
[L5165]              havoc data_s806;
[L5166]              havoc success_s806;
[L5167]              havoc tmpNow;
[L5168]              havoc gas;
[L5169]              assume gas > 4000000 && gas <= 8000000;
[L5170]              tmpNow := now;
[L5171]              havoc now;
[L5172]              assume now > tmpNow;
[L5173]              assume msgsender_MSG != null;
[L5174]              assume DType[msgsender_MSG] != SafeMath;
[L5175]              assume DType[msgsender_MSG] != ERC20Interface;
[L5176]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L5177]              assume DType[msgsender_MSG] != Owned;
[L5178]              assume DType[msgsender_MSG] != GEEQToken;
[L5179]              Alloc[msgsender_MSG] := true;
[L5180]  COND FALSE  !(choice == 26)
[L5186]  COND FALSE  !(choice == 25)
[L5192]  COND FALSE  !(choice == 24)
[L5198]  COND FALSE  !(choice == 23)
[L5205]  COND FALSE  !(choice == 22)
[L5212]  COND TRUE   choice == 21
[L5213]              gas := gas - 21000;
[L5214]  COND TRUE   gas >= 0
[L5215]              assume tokens_s747 >= 0 && tokens_s747 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5216]              assume msgvalue_MSG == 0;
[L5217]  CALL        call success_s747 := transferFrom~address~address~uint256_GEEQToken(this, msgsender_MSG, msgvalue_MSG, from_s747, to_s747, tokens_s747);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((p1 != from_s747 || p2 != msgsender_MSG) && from_s747 == to_s747) && tokens_s747 <= balances_GEEQToken[this][from_s747]) && tokens_s747 <= allowed_GEEQToken[this][from_s747][msgsender_MSG]) && tokens_s747 >= 0) && tokens_s747 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_GEEQToken[this][to_s747] >= 0) && balances_GEEQToken[this][to_s747] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_GEEQToken[this][from_s747] >= 0) && balances_GEEQToken[this][from_s747] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_GEEQToken[this][from_s747][msgsender_MSG] >= 0) && allowed_GEEQToken[this][from_s747][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_GEEQToken0 := true;
[L3]                 call_transferFrom_GEEQToken0 := false;
[L3]                 revert := revert_hold;
[L1565]              havoc __exception;
[L1566]              revert := false;
[L1567]  COND TRUE   __exception
[L1568]              __tmp__Balance := Balance;
[L1569]              __tmp__DType := DType;
[L1570]              __tmp__Alloc := Alloc;
[L1571]              __tmp__balance_ADDR := balance_ADDR;
[L1572]              __tmp__M_Ref_int := M_Ref_int;
[L1573]              __tmp__sum_balances0 := sum_balances0;
[L1574]              __tmp__alloc_allowed_GEEQToken_lvl0 := alloc_allowed_GEEQToken_lvl0;
[L1575]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L1576]              __tmp__sum_allowed1 := sum_allowed1;
[L1577]              __tmp__sum_geeqaddress2 := sum_geeqaddress2;
[L1578]              __tmp__Length := Length;
[L1579]              __tmp__now := now;
[L1580]              __tmp__owner_Owned := owner_Owned;
[L1581]              __tmp__newOwner_Owned := newOwner_Owned;
[L1582]              __tmp__symbol_GEEQToken := symbol_GEEQToken;
[L1583]              __tmp__name_GEEQToken := name_GEEQToken;
[L1584]              __tmp__decimals_GEEQToken := decimals_GEEQToken;
[L1585]              __tmp___totalSupply_GEEQToken := _totalSupply_GEEQToken;
[L1586]              __tmp___totalMinted_GEEQToken := _totalMinted_GEEQToken;
[L1587]              __tmp___maxMintable_GEEQToken := _maxMintable_GEEQToken;
[L1588]              __tmp__pauseOn_GEEQToken := pauseOn_GEEQToken;
[L1589]              __tmp__migrationOn_GEEQToken := migrationOn_GEEQToken;
[L1590]              __tmp__balances_GEEQToken := balances_GEEQToken;
[L1591]              __tmp__allowed_GEEQToken := allowed_GEEQToken;
[L1592]              __tmp__geeqaddress_GEEQToken := geeqaddress_GEEQToken;
[L1593]  CALL        call success_s747 := transferFrom~address~address~uint256_GEEQToken__fail(this, msgsender_MSG, msgvalue_MSG, from_s747, to_s747, tokens_s747);
[L3565]  COND FALSE  !(__tmp__pauseOn_GEEQToken[this])
[L3569]  CALL        call __var_17 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__balances_GEEQToken[this][from_s747], tokens_s747);
[L2830]  COND FALSE  !(!(b_s51 <= a_s51))
[L2834]              c_s51 := (a_s51 - b_s51) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2835]              c_s51 := c_s51;
[L3569]  RET         call __var_17 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__balances_GEEQToken[this][from_s747], tokens_s747);
[L3570]  COND FALSE  !(revert)
[L3573]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] - __tmp__balances_GEEQToken[this][from_s747];
[L3574]              __tmp__balances_GEEQToken[this][from_s747] := __var_17;
[L3575]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] + __tmp__balances_GEEQToken[this][from_s747];
[L3576]  CALL        call __var_18 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__allowed_GEEQToken[this][from_s747][msgsender_MSG], tokens_s747);
[L2830]  COND TRUE   !(b_s51 <= a_s51)
[L2831]              revert := true;
[L3576]  RET         call __var_18 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__allowed_GEEQToken[this][from_s747][msgsender_MSG], tokens_s747);
[L3577]  COND TRUE   revert
[L1593]  RET         call success_s747 := transferFrom~address~address~uint256_GEEQToken__fail(this, msgsender_MSG, msgvalue_MSG, from_s747, to_s747, tokens_s747);
[L1594]              assume revert || gas < 0;
[L5217]  RET         call success_s747 := transferFrom~address~address~uint256_GEEQToken(this, msgsender_MSG, msgvalue_MSG, from_s747, to_s747, tokens_s747);
[L5360]  RET         call CorralChoice_GEEQToken(this);

Loop:
[L5360]  CALL        call CorralChoice_GEEQToken(this);
[L5125]              havoc msgsender_MSG;
[L5126]              havoc msgvalue_MSG;
[L5127]              havoc choice;
[L5128]              havoc __ret_0_totalSupply;
[L5129]              havoc tokenOwner_s591;
[L5130]              havoc balance_s591;
[L5131]              havoc tokenOwner_s763;
[L5132]              havoc spender_s763;
[L5133]              havoc remaining_s763;
[L5134]              havoc to_s647;
[L5135]              havoc tokens_s647;
[L5136]              havoc success_s647;
[L5137]              havoc spender_s675;
[L5138]              havoc tokens_s675;
[L5139]              havoc success_s675;
[L5140]              havoc from_s747;
[L5141]              havoc to_s747;
[L5142]              havoc tokens_s747;
[L5143]              havoc success_s747;
[L5144]              havoc __ret_0_owner;
[L5145]              havoc __ret_0_newOwner;
[L5146]              havoc _newOwner_s220;
[L5147]              havoc __ret_0_symbol;
[L5148]              havoc __ret_0_name;
[L5149]              havoc __ret_0_decimals;
[L5150]              havoc __ret_0_pauseOn;
[L5151]              havoc __ret_0_migrationOn;
[L5152]              havoc arg813_s0;
[L5153]              havoc __ret_0_balances;
[L5154]              havoc arg814_s0;
[L5155]              havoc __ret_0_geeqaddress;
[L5156]              havoc registeraddress_s387;
[L5157]              havoc tokenAddress_s407;
[L5158]              havoc tokens_s407;
[L5159]              havoc success_s407;
[L5160]              havoc __ret_0_totalMinted;
[L5161]              havoc receiver_s579;
[L5162]              havoc token_amt_s579;
[L5163]              havoc spender_s806;
[L5164]              havoc tokens_s806;
[L5165]              havoc data_s806;
[L5166]              havoc success_s806;
[L5167]              havoc tmpNow;
[L5168]              havoc gas;
[L5169]              assume gas > 4000000 && gas <= 8000000;
[L5170]              tmpNow := now;
[L5171]              havoc now;
[L5172]              assume now > tmpNow;
[L5173]              assume msgsender_MSG != null;
[L5174]              assume DType[msgsender_MSG] != SafeMath;
[L5175]              assume DType[msgsender_MSG] != ERC20Interface;
[L5176]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L5177]              assume DType[msgsender_MSG] != Owned;
[L5178]              assume DType[msgsender_MSG] != GEEQToken;
[L5179]              Alloc[msgsender_MSG] := true;
[L5180]  COND FALSE  !(choice == 26)
[L5186]  COND FALSE  !(choice == 25)
[L5192]  COND FALSE  !(choice == 24)
[L5198]  COND FALSE  !(choice == 23)
[L5205]  COND FALSE  !(choice == 22)
[L5212]  COND TRUE   choice == 21
[L5213]              gas := gas - 21000;
[L5214]  COND TRUE   gas >= 0
[L5215]              assume tokens_s747 >= 0 && tokens_s747 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5216]              assume msgvalue_MSG == 0;
[L5217]  CALL        call success_s747 := transferFrom~address~address~uint256_GEEQToken(this, msgsender_MSG, msgvalue_MSG, from_s747, to_s747, tokens_s747);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((p1 != from_s747 || p2 != msgsender_MSG) && from_s747 == to_s747) && tokens_s747 <= balances_GEEQToken[this][from_s747]) && tokens_s747 <= allowed_GEEQToken[this][from_s747][msgsender_MSG]) && tokens_s747 >= 0) && tokens_s747 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_GEEQToken[this][to_s747] >= 0) && balances_GEEQToken[this][to_s747] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_GEEQToken[this][from_s747] >= 0) && balances_GEEQToken[this][from_s747] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_GEEQToken[this][from_s747][msgsender_MSG] >= 0) && allowed_GEEQToken[this][from_s747][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_GEEQToken0 := true;
[L3]                 call_transferFrom_GEEQToken0 := false;
[L3]                 revert := revert_hold;
[L1565]              havoc __exception;
[L1566]              revert := false;
[L1567]  COND TRUE   __exception
[L1568]              __tmp__Balance := Balance;
[L1569]              __tmp__DType := DType;
[L1570]              __tmp__Alloc := Alloc;
[L1571]              __tmp__balance_ADDR := balance_ADDR;
[L1572]              __tmp__M_Ref_int := M_Ref_int;
[L1573]              __tmp__sum_balances0 := sum_balances0;
[L1574]              __tmp__alloc_allowed_GEEQToken_lvl0 := alloc_allowed_GEEQToken_lvl0;
[L1575]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L1576]              __tmp__sum_allowed1 := sum_allowed1;
[L1577]              __tmp__sum_geeqaddress2 := sum_geeqaddress2;
[L1578]              __tmp__Length := Length;
[L1579]              __tmp__now := now;
[L1580]              __tmp__owner_Owned := owner_Owned;
[L1581]              __tmp__newOwner_Owned := newOwner_Owned;
[L1582]              __tmp__symbol_GEEQToken := symbol_GEEQToken;
[L1583]              __tmp__name_GEEQToken := name_GEEQToken;
[L1584]              __tmp__decimals_GEEQToken := decimals_GEEQToken;
[L1585]              __tmp___totalSupply_GEEQToken := _totalSupply_GEEQToken;
[L1586]              __tmp___totalMinted_GEEQToken := _totalMinted_GEEQToken;
[L1587]              __tmp___maxMintable_GEEQToken := _maxMintable_GEEQToken;
[L1588]              __tmp__pauseOn_GEEQToken := pauseOn_GEEQToken;
[L1589]              __tmp__migrationOn_GEEQToken := migrationOn_GEEQToken;
[L1590]              __tmp__balances_GEEQToken := balances_GEEQToken;
[L1591]              __tmp__allowed_GEEQToken := allowed_GEEQToken;
[L1592]              __tmp__geeqaddress_GEEQToken := geeqaddress_GEEQToken;
[L1593]  CALL        call success_s747 := transferFrom~address~address~uint256_GEEQToken__fail(this, msgsender_MSG, msgvalue_MSG, from_s747, to_s747, tokens_s747);
[L3565]  COND FALSE  !(__tmp__pauseOn_GEEQToken[this])
[L3569]  CALL        call __var_17 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__balances_GEEQToken[this][from_s747], tokens_s747);
[L2830]  COND FALSE  !(!(b_s51 <= a_s51))
[L2834]              c_s51 := (a_s51 - b_s51) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2835]              c_s51 := c_s51;
[L3569]  RET         call __var_17 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__balances_GEEQToken[this][from_s747], tokens_s747);
[L3570]  COND FALSE  !(revert)
[L3573]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] - __tmp__balances_GEEQToken[this][from_s747];
[L3574]              __tmp__balances_GEEQToken[this][from_s747] := __var_17;
[L3575]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] + __tmp__balances_GEEQToken[this][from_s747];
[L3576]  CALL        call __var_18 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__allowed_GEEQToken[this][from_s747][msgsender_MSG], tokens_s747);
[L2830]  COND TRUE   !(b_s51 <= a_s51)
[L2831]              revert := true;
[L3576]  RET         call __var_18 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__allowed_GEEQToken[this][from_s747][msgsender_MSG], tokens_s747);
[L3577]  COND TRUE   revert
[L1593]  RET         call success_s747 := transferFrom~address~address~uint256_GEEQToken__fail(this, msgsender_MSG, msgvalue_MSG, from_s747, to_s747, tokens_s747);
[L1594]              assume revert || gas < 0;
[L5217]  RET         call success_s747 := transferFrom~address~address~uint256_GEEQToken(this, msgsender_MSG, msgvalue_MSG, from_s747, to_s747, tokens_s747);
[L5360]  RET         call CorralChoice_GEEQToken(this);

[2020-11-25 16:56:50,947 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 16:56:50,947 INFO  L82        PathProgramCache]: Analyzing trace with hash -257443876, now seen corresponding path program 1 times
[2020-11-25 16:56:50,947 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 16:56:50,956 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 16:56:51,101 INFO  L134       CoverageAnalysis]: Checked inductivity of 3 backedges. 2 proven. 0 refuted. 0 times theorem prover too weak. 1 trivial. 0 not checked.
[2020-11-25 16:56:51,101 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 16:56:51,101 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [15] imperfect sequences [] total 15
[2020-11-25 16:56:51,102 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 16:56:51,102 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 16 interpolants.
[2020-11-25 16:56:51,102 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=31, Invalid=209, Unknown=0, NotChecked=0, Total=240
[2020-11-25 16:56:51,102 INFO  L87              Difference]: Start difference. First operand 3841 states and 4143 transitions. cyclomatic complexity: 306 Second operand 16 states.
[2020-11-25 16:56:53,761 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 16:56:53,761 INFO  L93              Difference]: Finished difference Result 4075 states and 4475 transitions.
[2020-11-25 16:56:53,761 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 18 states. 
[2020-11-25 16:56:53,761 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 4075 states and 4475 transitions.
[2020-11-25 16:56:53,768 INFO  L131   ngComponentsAnalysis]: Automaton has 7 accepting balls. 14
[2020-11-25 16:56:53,778 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 4075 states to 4075 states and 4475 transitions.
[2020-11-25 16:56:53,778 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1255
[2020-11-25 16:56:53,779 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1255
[2020-11-25 16:56:53,779 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 4075 states and 4475 transitions.
[2020-11-25 16:56:53,783 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 16:56:53,783 INFO  L728         BuchiCegarLoop]: Abstraction has 4075 states and 4475 transitions.
[2020-11-25 16:56:53,787 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 4075 states and 4475 transitions.
[2020-11-25 16:56:53,812 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 4075 to 3990.
[2020-11-25 16:56:53,812 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 3990 states.
[2020-11-25 16:56:53,816 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 3990 states to 3990 states and 4326 transitions.
[2020-11-25 16:56:53,816 INFO  L751         BuchiCegarLoop]: Abstraction has 3990 states and 4326 transitions.
[2020-11-25 16:56:53,816 INFO  L631         BuchiCegarLoop]: Abstraction has 3990 states and 4326 transitions.
[2020-11-25 16:56:53,816 INFO  L445         BuchiCegarLoop]: ======== Iteration 6============
[2020-11-25 16:56:53,816 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 3990 states and 4326 transitions.
[2020-11-25 16:56:53,820 INFO  L131   ngComponentsAnalysis]: Automaton has 4 accepting balls. 8
[2020-11-25 16:56:53,820 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 16:56:53,820 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 16:56:53,821 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 16:56:53,821 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_transferFrom_GEEQToken0 := false;
[L3]                 call_transferFrom_GEEQToken0 := false;
[L3]     CALL        call main();
[L3]                 havoc p2;
[L3]                 havoc p1;
[L5350]              assume null == 0;
[L5351]  CALL        call this := FreshRefGenerator__success();
[L2768]              havoc newRef;
[L2769]              assume Alloc[newRef] == false;
[L2770]              Alloc[newRef] := true;
[L2771]              assume newRef != null;
[L5351]  RET         call this := FreshRefGenerator__success();
[L5352]              assume now >= 0;
[L5353]              assume DType[this] == GEEQToken;
[L5354]              assume msgvalue_MSG == 0;
[L5355]              gas := gas - 53000;
[L5356]  CALL        call GEEQToken_GEEQToken(this, msgsender_MSG, msgvalue_MSG);
[L679]               havoc __exception;
[L680]               revert := false;
[L681]   COND FALSE  !(__exception)
[L710]   CALL        call GEEQToken_GEEQToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3141]  CALL        call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L2920]  CALL        call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2905]              assume msgsender_MSG != null;
[L2906]              Balance[this] := 0;
[L2920]  RET         call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2921]  COND FALSE  !(revert)
[L3141]  RET         call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L3142]  COND FALSE  !(revert)
[L3145]  CALL        call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L2988]  CALL        call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2971]              assume msgsender_MSG != null;
[L2972]              Balance[this] := 0;
[L2973]              owner_Owned[this] := null;
[L2974]              newOwner_Owned[this] := null;
[L2988]  RET         call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2989]  COND FALSE  !(revert)
[L3145]  RET         call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L3146]  COND FALSE  !(revert)
[L3149]  CALL        call GEEQToken_GEEQToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3095]              assume msgsender_MSG != null;
[L3096]              Balance[this] := 0;
[L3097]              symbol_GEEQToken[this] := 1164884495;
[L3098]              name_GEEQToken[this] := 1164884495;
[L3099]              decimals_GEEQToken[this] := 0;
[L3100]              _totalSupply_GEEQToken[this] := 0;
[L3101]              _totalMinted_GEEQToken[this] := 0;
[L3102]              _maxMintable_GEEQToken[this] := 0;
[L3103]              pauseOn_GEEQToken[this] := false;
[L3104]              migrationOn_GEEQToken[this] := false;
[L3105]              balances_GEEQToken[this] := zeroRefintArr();
[L3106]              sum_balances0[this] := 0;
[L3107]              allowed_GEEQToken[this] := zeroRefRefintArr();
[L3108]              sum_allowed1[this] := 0;
[L3109]              geeqaddress_GEEQToken[this] := zeroRefintArr();
[L3111]              symbol_GEEQToken[this] := -15460934;
[L3112]              name_GEEQToken[this] := -1182004402;
[L3113]              decimals_GEEQToken[this] := 18;
[L3114]              _totalMinted_GEEQToken[this] := 0;
[L3115]              _totalSupply_GEEQToken[this] := 0;
[L3116]              __var_2 := decimals_GEEQToken[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3117]              _maxMintable_GEEQToken[this] := 100000000 * (nonlinearPow(10, decimals_GEEQToken[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3118]              owner_Owned[this] := msgsender_MSG;
[L3149]  RET         call GEEQToken_GEEQToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3150]  COND FALSE  !(revert)
[L710]   RET         call GEEQToken_GEEQToken__success(this, msgsender_MSG, msgvalue_MSG);
[L711]               assume !revert && gas >= 0;
[L5356]  RET         call GEEQToken_GEEQToken(this, msgsender_MSG, msgvalue_MSG);
[L5357]              assume !revert && gas >= 0;
[L5360]  CALL        call CorralChoice_GEEQToken(this);
[L5125]              havoc msgsender_MSG;
[L5126]              havoc msgvalue_MSG;
[L5127]              havoc choice;
[L5128]              havoc __ret_0_totalSupply;
[L5129]              havoc tokenOwner_s591;
[L5130]              havoc balance_s591;
[L5131]              havoc tokenOwner_s763;
[L5132]              havoc spender_s763;
[L5133]              havoc remaining_s763;
[L5134]              havoc to_s647;
[L5135]              havoc tokens_s647;
[L5136]              havoc success_s647;
[L5137]              havoc spender_s675;
[L5138]              havoc tokens_s675;
[L5139]              havoc success_s675;
[L5140]              havoc from_s747;
[L5141]              havoc to_s747;
[L5142]              havoc tokens_s747;
[L5143]              havoc success_s747;
[L5144]              havoc __ret_0_owner;
[L5145]              havoc __ret_0_newOwner;
[L5146]              havoc _newOwner_s220;
[L5147]              havoc __ret_0_symbol;
[L5148]              havoc __ret_0_name;
[L5149]              havoc __ret_0_decimals;
[L5150]              havoc __ret_0_pauseOn;
[L5151]              havoc __ret_0_migrationOn;
[L5152]              havoc arg813_s0;
[L5153]              havoc __ret_0_balances;
[L5154]              havoc arg814_s0;
[L5155]              havoc __ret_0_geeqaddress;
[L5156]              havoc registeraddress_s387;
[L5157]              havoc tokenAddress_s407;
[L5158]              havoc tokens_s407;
[L5159]              havoc success_s407;
[L5160]              havoc __ret_0_totalMinted;
[L5161]              havoc receiver_s579;
[L5162]              havoc token_amt_s579;
[L5163]              havoc spender_s806;
[L5164]              havoc tokens_s806;
[L5165]              havoc data_s806;
[L5166]              havoc success_s806;
[L5167]              havoc tmpNow;
[L5168]              havoc gas;
[L5169]              assume gas > 4000000 && gas <= 8000000;
[L5170]              tmpNow := now;
[L5171]              havoc now;
[L5172]              assume now > tmpNow;
[L5173]              assume msgsender_MSG != null;
[L5174]              assume DType[msgsender_MSG] != SafeMath;
[L5175]              assume DType[msgsender_MSG] != ERC20Interface;
[L5176]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L5177]              assume DType[msgsender_MSG] != Owned;
[L5178]              assume DType[msgsender_MSG] != GEEQToken;
[L5179]              Alloc[msgsender_MSG] := true;
[L5180]  COND FALSE  !(choice == 26)
[L5186]  COND FALSE  !(choice == 25)
[L5192]  COND FALSE  !(choice == 24)
[L5198]  COND FALSE  !(choice == 23)
[L5205]  COND FALSE  !(choice == 22)
[L5212]  COND TRUE   choice == 21
[L5213]              gas := gas - 21000;
[L5214]  COND TRUE   gas >= 0
[L5215]              assume tokens_s747 >= 0 && tokens_s747 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5216]              assume msgvalue_MSG == 0;
[L5217]  CALL        call success_s747 := transferFrom~address~address~uint256_GEEQToken(this, msgsender_MSG, msgvalue_MSG, from_s747, to_s747, tokens_s747);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((p1 != from_s747 || p2 != msgsender_MSG) && from_s747 == to_s747) && tokens_s747 <= balances_GEEQToken[this][from_s747]) && tokens_s747 <= allowed_GEEQToken[this][from_s747][msgsender_MSG]) && tokens_s747 >= 0) && tokens_s747 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_GEEQToken[this][to_s747] >= 0) && balances_GEEQToken[this][to_s747] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_GEEQToken[this][from_s747] >= 0) && balances_GEEQToken[this][from_s747] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_GEEQToken[this][from_s747][msgsender_MSG] >= 0) && allowed_GEEQToken[this][from_s747][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_GEEQToken0 := true;
[L3]                 call_transferFrom_GEEQToken0 := false;
[L3]                 revert := revert_hold;
[L1565]              havoc __exception;
[L1566]              revert := false;
[L1567]  COND FALSE  !(__exception)
[L1596]  CALL        call success_s747 := transferFrom~address~address~uint256_GEEQToken__success(this, msgsender_MSG, msgvalue_MSG, from_s747, to_s747, tokens_s747);
[L3600]  COND FALSE  !(pauseOn_GEEQToken[this])
[L3605]  CALL        call __var_17 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_GEEQToken[this][from_s747], tokens_s747);
[L2841]  COND FALSE  !(!(b_s51 <= a_s51))
[L2845]              c_s51 := (a_s51 - b_s51) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2846]              c_s51 := c_s51;
[L3605]  RET         call __var_17 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_GEEQToken[this][from_s747], tokens_s747);
[L3606]  COND FALSE  !(revert)
[L3609]              sum_balances0[this] := sum_balances0[this] - balances_GEEQToken[this][from_s747];
[L3610]              balances_GEEQToken[this][from_s747] := __var_17;
[L3611]              sum_balances0[this] := sum_balances0[this] + balances_GEEQToken[this][from_s747];
[L3612]  CALL        call __var_18 := sub~uint256~uint256_SafeMath__success(this, this, 0, allowed_GEEQToken[this][from_s747][msgsender_MSG], tokens_s747);
[L2841]  COND FALSE  !(!(b_s51 <= a_s51))
[L2845]              c_s51 := (a_s51 - b_s51) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2846]              c_s51 := c_s51;
[L3612]  RET         call __var_18 := sub~uint256~uint256_SafeMath__success(this, this, 0, allowed_GEEQToken[this][from_s747][msgsender_MSG], tokens_s747);
[L3613]  COND FALSE  !(revert)
[L3616]              sum_allowed1[from_s747] := sum_allowed1[from_s747] - allowed_GEEQToken[this][from_s747][msgsender_MSG];
[L3617]              allowed_GEEQToken[this][from_s747][msgsender_MSG] := __var_18;
[L3618]              sum_allowed1[from_s747] := sum_allowed1[from_s747] + allowed_GEEQToken[this][from_s747][msgsender_MSG];
[L3619]  CALL        call __var_19 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_GEEQToken[this][to_s747], tokens_s747);
[L2819]              c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2820]  COND FALSE  !(!(c_s26 >= a_s26))
[L2824]              c_s26 := c_s26;
[L3619]  RET         call __var_19 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_GEEQToken[this][to_s747], tokens_s747);
[L3620]  COND FALSE  !(revert)
[L3623]              sum_balances0[this] := sum_balances0[this] - balances_GEEQToken[this][to_s747];
[L3624]              balances_GEEQToken[this][to_s747] := __var_19;
[L3625]              sum_balances0[this] := sum_balances0[this] + balances_GEEQToken[this][to_s747];
[L3626]              assert { :EventEmitted "Transfer_GEEQToken" } true;
[L3627]              success_s747 := true;
[L1596]  RET         call success_s747 := transferFrom~address~address~uint256_GEEQToken__success(this, msgsender_MSG, msgvalue_MSG, from_s747, to_s747, tokens_s747);
[L1597]              assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !((((((((((((((success_s747 == true && allowed_GEEQToken[this][from_s747][msgsender_MSG] == old(allowed_GEEQToken[this][from_s747][msgsender_MSG]) - tokens_s747) && _totalSupply_GEEQToken[this] == old(_totalSupply_GEEQToken[this])) && balances_GEEQToken[this] == old(balances_GEEQToken[this])) && allowed_GEEQToken[this][p1][p2] == old(allowed_GEEQToken[this][p1][p2])) && symbol_GEEQToken[this] == old(symbol_GEEQToken[this])) && name_GEEQToken[this] == old(name_GEEQToken[this])) && decimals_GEEQToken[this] == old(decimals_GEEQToken[this])) && _totalMinted_GEEQToken[this] == old(_totalMinted_GEEQToken[this])) && _maxMintable_GEEQToken[this] == old(_maxMintable_GEEQToken[this])) && pauseOn_GEEQToken[this] == old(pauseOn_GEEQToken[this])) && migrationOn_GEEQToken[this] == old(migrationOn_GEEQToken[this])) && geeqaddress_GEEQToken[this] == old(geeqaddress_GEEQToken[this])) && owner_Owned[this] == old(owner_Owned[this])) && newOwner_Owned[this] == old(newOwner_Owned[this]));
[L3]                 revert := revert_hold;
[L5217]  RET         call success_s747 := transferFrom~address~address~uint256_GEEQToken(this, msgsender_MSG, msgvalue_MSG, from_s747, to_s747, tokens_s747);
[L5360]  RET         call CorralChoice_GEEQToken(this);

Loop:
[L5360]  CALL        call CorralChoice_GEEQToken(this);
[L5125]              havoc msgsender_MSG;
[L5126]              havoc msgvalue_MSG;
[L5127]              havoc choice;
[L5128]              havoc __ret_0_totalSupply;
[L5129]              havoc tokenOwner_s591;
[L5130]              havoc balance_s591;
[L5131]              havoc tokenOwner_s763;
[L5132]              havoc spender_s763;
[L5133]              havoc remaining_s763;
[L5134]              havoc to_s647;
[L5135]              havoc tokens_s647;
[L5136]              havoc success_s647;
[L5137]              havoc spender_s675;
[L5138]              havoc tokens_s675;
[L5139]              havoc success_s675;
[L5140]              havoc from_s747;
[L5141]              havoc to_s747;
[L5142]              havoc tokens_s747;
[L5143]              havoc success_s747;
[L5144]              havoc __ret_0_owner;
[L5145]              havoc __ret_0_newOwner;
[L5146]              havoc _newOwner_s220;
[L5147]              havoc __ret_0_symbol;
[L5148]              havoc __ret_0_name;
[L5149]              havoc __ret_0_decimals;
[L5150]              havoc __ret_0_pauseOn;
[L5151]              havoc __ret_0_migrationOn;
[L5152]              havoc arg813_s0;
[L5153]              havoc __ret_0_balances;
[L5154]              havoc arg814_s0;
[L5155]              havoc __ret_0_geeqaddress;
[L5156]              havoc registeraddress_s387;
[L5157]              havoc tokenAddress_s407;
[L5158]              havoc tokens_s407;
[L5159]              havoc success_s407;
[L5160]              havoc __ret_0_totalMinted;
[L5161]              havoc receiver_s579;
[L5162]              havoc token_amt_s579;
[L5163]              havoc spender_s806;
[L5164]              havoc tokens_s806;
[L5165]              havoc data_s806;
[L5166]              havoc success_s806;
[L5167]              havoc tmpNow;
[L5168]              havoc gas;
[L5169]              assume gas > 4000000 && gas <= 8000000;
[L5170]              tmpNow := now;
[L5171]              havoc now;
[L5172]              assume now > tmpNow;
[L5173]              assume msgsender_MSG != null;
[L5174]              assume DType[msgsender_MSG] != SafeMath;
[L5175]              assume DType[msgsender_MSG] != ERC20Interface;
[L5176]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L5177]              assume DType[msgsender_MSG] != Owned;
[L5178]              assume DType[msgsender_MSG] != GEEQToken;
[L5179]              Alloc[msgsender_MSG] := true;
[L5180]  COND TRUE   choice == 26
[L5181]              gas := gas - 21000;
[L5182]  COND FALSE  !(gas >= 0)
[L5360]  RET         call CorralChoice_GEEQToken(this);

[2020-11-25 16:56:53,824 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 16:56:53,824 INFO  L82        PathProgramCache]: Analyzing trace with hash -1551748194, now seen corresponding path program 1 times
[2020-11-25 16:56:53,824 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 16:56:53,854 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 16:56:54,549 INFO  L134       CoverageAnalysis]: Checked inductivity of 5 backedges. 1 proven. 3 refuted. 0 times theorem prover too weak. 1 trivial. 0 not checked.
[2020-11-25 16:56:54,549 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 16:56:54,550 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [25] total 25
[2020-11-25 16:56:54,550 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 16:56:54,550 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 26 interpolants.
[2020-11-25 16:56:54,550 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=55, Invalid=595, Unknown=0, NotChecked=0, Total=650
[2020-11-25 16:56:54,550 INFO  L87              Difference]: Start difference. First operand 3990 states and 4326 transitions. cyclomatic complexity: 344 Second operand 26 states.
[2020-11-25 16:57:02,899 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 16:57:02,900 INFO  L93              Difference]: Finished difference Result 4039 states and 4422 transitions.
[2020-11-25 16:57:02,900 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 26 states. 
[2020-11-25 16:57:02,900 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 4039 states and 4422 transitions.
[2020-11-25 16:57:02,907 INFO  L131   ngComponentsAnalysis]: Automaton has 6 accepting balls. 12
[2020-11-25 16:57:02,915 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 4039 states to 4039 states and 4422 transitions.
[2020-11-25 16:57:02,915 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1266
[2020-11-25 16:57:02,916 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1266
[2020-11-25 16:57:02,916 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 4039 states and 4422 transitions.
[2020-11-25 16:57:02,918 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 16:57:02,918 INFO  L728         BuchiCegarLoop]: Abstraction has 4039 states and 4422 transitions.
[2020-11-25 16:57:02,921 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 4039 states and 4422 transitions.
[2020-11-25 16:57:02,942 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 4039 to 3947.
[2020-11-25 16:57:02,942 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 3947 states.
[2020-11-25 16:57:02,945 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 3947 states to 3947 states and 4281 transitions.
[2020-11-25 16:57:02,946 INFO  L751         BuchiCegarLoop]: Abstraction has 3947 states and 4281 transitions.
[2020-11-25 16:57:02,946 INFO  L631         BuchiCegarLoop]: Abstraction has 3947 states and 4281 transitions.
[2020-11-25 16:57:02,946 INFO  L445         BuchiCegarLoop]: ======== Iteration 7============
[2020-11-25 16:57:02,946 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 3947 states and 4281 transitions.
[2020-11-25 16:57:02,950 INFO  L131   ngComponentsAnalysis]: Automaton has 4 accepting balls. 8
[2020-11-25 16:57:02,950 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 16:57:02,950 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 16:57:02,951 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 16:57:02,951 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_transferFrom_GEEQToken0 := false;
[L3]                 call_transferFrom_GEEQToken0 := false;
[L3]     CALL        call main();
[L3]                 havoc p2;
[L3]                 havoc p1;
[L5350]              assume null == 0;
[L5351]  CALL        call this := FreshRefGenerator__success();
[L2768]              havoc newRef;
[L2769]              assume Alloc[newRef] == false;
[L2770]              Alloc[newRef] := true;
[L2771]              assume newRef != null;
[L5351]  RET         call this := FreshRefGenerator__success();
[L5352]              assume now >= 0;
[L5353]              assume DType[this] == GEEQToken;
[L5354]              assume msgvalue_MSG == 0;
[L5355]              gas := gas - 53000;
[L5356]  CALL        call GEEQToken_GEEQToken(this, msgsender_MSG, msgvalue_MSG);
[L679]               havoc __exception;
[L680]               revert := false;
[L681]   COND FALSE  !(__exception)
[L710]   CALL        call GEEQToken_GEEQToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3141]  CALL        call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L2920]  CALL        call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2905]              assume msgsender_MSG != null;
[L2906]              Balance[this] := 0;
[L2920]  RET         call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2921]  COND FALSE  !(revert)
[L3141]  RET         call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L3142]  COND FALSE  !(revert)
[L3145]  CALL        call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L2988]  CALL        call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2971]              assume msgsender_MSG != null;
[L2972]              Balance[this] := 0;
[L2973]              owner_Owned[this] := null;
[L2974]              newOwner_Owned[this] := null;
[L2988]  RET         call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2989]  COND FALSE  !(revert)
[L3145]  RET         call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L3146]  COND FALSE  !(revert)
[L3149]  CALL        call GEEQToken_GEEQToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3095]              assume msgsender_MSG != null;
[L3096]              Balance[this] := 0;
[L3097]              symbol_GEEQToken[this] := 1164884495;
[L3098]              name_GEEQToken[this] := 1164884495;
[L3099]              decimals_GEEQToken[this] := 0;
[L3100]              _totalSupply_GEEQToken[this] := 0;
[L3101]              _totalMinted_GEEQToken[this] := 0;
[L3102]              _maxMintable_GEEQToken[this] := 0;
[L3103]              pauseOn_GEEQToken[this] := false;
[L3104]              migrationOn_GEEQToken[this] := false;
[L3105]              balances_GEEQToken[this] := zeroRefintArr();
[L3106]              sum_balances0[this] := 0;
[L3107]              allowed_GEEQToken[this] := zeroRefRefintArr();
[L3108]              sum_allowed1[this] := 0;
[L3109]              geeqaddress_GEEQToken[this] := zeroRefintArr();
[L3111]              symbol_GEEQToken[this] := -15460934;
[L3112]              name_GEEQToken[this] := -1182004402;
[L3113]              decimals_GEEQToken[this] := 18;
[L3114]              _totalMinted_GEEQToken[this] := 0;
[L3115]              _totalSupply_GEEQToken[this] := 0;
[L3116]              __var_2 := decimals_GEEQToken[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3117]              _maxMintable_GEEQToken[this] := 100000000 * (nonlinearPow(10, decimals_GEEQToken[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3118]              owner_Owned[this] := msgsender_MSG;
[L3149]  RET         call GEEQToken_GEEQToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3150]  COND FALSE  !(revert)
[L710]   RET         call GEEQToken_GEEQToken__success(this, msgsender_MSG, msgvalue_MSG);
[L711]               assume !revert && gas >= 0;
[L5356]  RET         call GEEQToken_GEEQToken(this, msgsender_MSG, msgvalue_MSG);
[L5357]              assume !revert && gas >= 0;
[L5360]  CALL        call CorralChoice_GEEQToken(this);
[L5125]              havoc msgsender_MSG;
[L5126]              havoc msgvalue_MSG;
[L5127]              havoc choice;
[L5128]              havoc __ret_0_totalSupply;
[L5129]              havoc tokenOwner_s591;
[L5130]              havoc balance_s591;
[L5131]              havoc tokenOwner_s763;
[L5132]              havoc spender_s763;
[L5133]              havoc remaining_s763;
[L5134]              havoc to_s647;
[L5135]              havoc tokens_s647;
[L5136]              havoc success_s647;
[L5137]              havoc spender_s675;
[L5138]              havoc tokens_s675;
[L5139]              havoc success_s675;
[L5140]              havoc from_s747;
[L5141]              havoc to_s747;
[L5142]              havoc tokens_s747;
[L5143]              havoc success_s747;
[L5144]              havoc __ret_0_owner;
[L5145]              havoc __ret_0_newOwner;
[L5146]              havoc _newOwner_s220;
[L5147]              havoc __ret_0_symbol;
[L5148]              havoc __ret_0_name;
[L5149]              havoc __ret_0_decimals;
[L5150]              havoc __ret_0_pauseOn;
[L5151]              havoc __ret_0_migrationOn;
[L5152]              havoc arg813_s0;
[L5153]              havoc __ret_0_balances;
[L5154]              havoc arg814_s0;
[L5155]              havoc __ret_0_geeqaddress;
[L5156]              havoc registeraddress_s387;
[L5157]              havoc tokenAddress_s407;
[L5158]              havoc tokens_s407;
[L5159]              havoc success_s407;
[L5160]              havoc __ret_0_totalMinted;
[L5161]              havoc receiver_s579;
[L5162]              havoc token_amt_s579;
[L5163]              havoc spender_s806;
[L5164]              havoc tokens_s806;
[L5165]              havoc data_s806;
[L5166]              havoc success_s806;
[L5167]              havoc tmpNow;
[L5168]              havoc gas;
[L5169]              assume gas > 4000000 && gas <= 8000000;
[L5170]              tmpNow := now;
[L5171]              havoc now;
[L5172]              assume now > tmpNow;
[L5173]              assume msgsender_MSG != null;
[L5174]              assume DType[msgsender_MSG] != SafeMath;
[L5175]              assume DType[msgsender_MSG] != ERC20Interface;
[L5176]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L5177]              assume DType[msgsender_MSG] != Owned;
[L5178]              assume DType[msgsender_MSG] != GEEQToken;
[L5179]              Alloc[msgsender_MSG] := true;
[L5180]  COND FALSE  !(choice == 26)
[L5186]  COND FALSE  !(choice == 25)
[L5192]  COND FALSE  !(choice == 24)
[L5198]  COND FALSE  !(choice == 23)
[L5205]  COND FALSE  !(choice == 22)
[L5212]  COND TRUE   choice == 21
[L5213]              gas := gas - 21000;
[L5214]  COND TRUE   gas >= 0
[L5215]              assume tokens_s747 >= 0 && tokens_s747 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5216]              assume msgvalue_MSG == 0;
[L5217]  CALL        call success_s747 := transferFrom~address~address~uint256_GEEQToken(this, msgsender_MSG, msgvalue_MSG, from_s747, to_s747, tokens_s747);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((p1 != from_s747 || p2 != msgsender_MSG) && from_s747 == to_s747) && tokens_s747 <= balances_GEEQToken[this][from_s747]) && tokens_s747 <= allowed_GEEQToken[this][from_s747][msgsender_MSG]) && tokens_s747 >= 0) && tokens_s747 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_GEEQToken[this][to_s747] >= 0) && balances_GEEQToken[this][to_s747] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_GEEQToken[this][from_s747] >= 0) && balances_GEEQToken[this][from_s747] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_GEEQToken[this][from_s747][msgsender_MSG] >= 0) && allowed_GEEQToken[this][from_s747][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_GEEQToken0 := true;
[L3]                 call_transferFrom_GEEQToken0 := false;
[L3]                 revert := revert_hold;
[L1565]              havoc __exception;
[L1566]              revert := false;
[L1567]  COND TRUE   __exception
[L1568]              __tmp__Balance := Balance;
[L1569]              __tmp__DType := DType;
[L1570]              __tmp__Alloc := Alloc;
[L1571]              __tmp__balance_ADDR := balance_ADDR;
[L1572]              __tmp__M_Ref_int := M_Ref_int;
[L1573]              __tmp__sum_balances0 := sum_balances0;
[L1574]              __tmp__alloc_allowed_GEEQToken_lvl0 := alloc_allowed_GEEQToken_lvl0;
[L1575]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L1576]              __tmp__sum_allowed1 := sum_allowed1;
[L1577]              __tmp__sum_geeqaddress2 := sum_geeqaddress2;
[L1578]              __tmp__Length := Length;
[L1579]              __tmp__now := now;
[L1580]              __tmp__owner_Owned := owner_Owned;
[L1581]              __tmp__newOwner_Owned := newOwner_Owned;
[L1582]              __tmp__symbol_GEEQToken := symbol_GEEQToken;
[L1583]              __tmp__name_GEEQToken := name_GEEQToken;
[L1584]              __tmp__decimals_GEEQToken := decimals_GEEQToken;
[L1585]              __tmp___totalSupply_GEEQToken := _totalSupply_GEEQToken;
[L1586]              __tmp___totalMinted_GEEQToken := _totalMinted_GEEQToken;
[L1587]              __tmp___maxMintable_GEEQToken := _maxMintable_GEEQToken;
[L1588]              __tmp__pauseOn_GEEQToken := pauseOn_GEEQToken;
[L1589]              __tmp__migrationOn_GEEQToken := migrationOn_GEEQToken;
[L1590]              __tmp__balances_GEEQToken := balances_GEEQToken;
[L1591]              __tmp__allowed_GEEQToken := allowed_GEEQToken;
[L1592]              __tmp__geeqaddress_GEEQToken := geeqaddress_GEEQToken;
[L1593]  CALL        call success_s747 := transferFrom~address~address~uint256_GEEQToken__fail(this, msgsender_MSG, msgvalue_MSG, from_s747, to_s747, tokens_s747);
[L3565]  COND FALSE  !(__tmp__pauseOn_GEEQToken[this])
[L3569]  CALL        call __var_17 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__balances_GEEQToken[this][from_s747], tokens_s747);
[L2830]  COND FALSE  !(!(b_s51 <= a_s51))
[L2834]              c_s51 := (a_s51 - b_s51) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2835]              c_s51 := c_s51;
[L3569]  RET         call __var_17 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__balances_GEEQToken[this][from_s747], tokens_s747);
[L3570]  COND FALSE  !(revert)
[L3573]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] - __tmp__balances_GEEQToken[this][from_s747];
[L3574]              __tmp__balances_GEEQToken[this][from_s747] := __var_17;
[L3575]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] + __tmp__balances_GEEQToken[this][from_s747];
[L3576]  CALL        call __var_18 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__allowed_GEEQToken[this][from_s747][msgsender_MSG], tokens_s747);
[L2830]  COND FALSE  !(!(b_s51 <= a_s51))
[L2834]              c_s51 := (a_s51 - b_s51) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2835]              c_s51 := c_s51;
[L3576]  RET         call __var_18 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__allowed_GEEQToken[this][from_s747][msgsender_MSG], tokens_s747);
[L3577]  COND FALSE  !(revert)
[L3580]              __tmp__sum_allowed1[from_s747] := __tmp__sum_allowed1[from_s747] - __tmp__allowed_GEEQToken[this][from_s747][msgsender_MSG];
[L3581]              __tmp__allowed_GEEQToken[this][from_s747][msgsender_MSG] := __var_18;
[L3582]              __tmp__sum_allowed1[from_s747] := __tmp__sum_allowed1[from_s747] + __tmp__allowed_GEEQToken[this][from_s747][msgsender_MSG];
[L3583]  CALL        call __var_19 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__balances_GEEQToken[this][to_s747], tokens_s747);
[L2808]              c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2809]  COND TRUE   !(c_s26 >= a_s26)
[L2810]              revert := true;
[L3583]  RET         call __var_19 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__balances_GEEQToken[this][to_s747], tokens_s747);
[L3584]  COND TRUE   revert
[L1593]  RET         call success_s747 := transferFrom~address~address~uint256_GEEQToken__fail(this, msgsender_MSG, msgvalue_MSG, from_s747, to_s747, tokens_s747);
[L1594]              assume revert || gas < 0;
[L5217]  RET         call success_s747 := transferFrom~address~address~uint256_GEEQToken(this, msgsender_MSG, msgvalue_MSG, from_s747, to_s747, tokens_s747);
[L5360]  RET         call CorralChoice_GEEQToken(this);

Loop:
[L5360]  CALL        call CorralChoice_GEEQToken(this);
[L5125]              havoc msgsender_MSG;
[L5126]              havoc msgvalue_MSG;
[L5127]              havoc choice;
[L5128]              havoc __ret_0_totalSupply;
[L5129]              havoc tokenOwner_s591;
[L5130]              havoc balance_s591;
[L5131]              havoc tokenOwner_s763;
[L5132]              havoc spender_s763;
[L5133]              havoc remaining_s763;
[L5134]              havoc to_s647;
[L5135]              havoc tokens_s647;
[L5136]              havoc success_s647;
[L5137]              havoc spender_s675;
[L5138]              havoc tokens_s675;
[L5139]              havoc success_s675;
[L5140]              havoc from_s747;
[L5141]              havoc to_s747;
[L5142]              havoc tokens_s747;
[L5143]              havoc success_s747;
[L5144]              havoc __ret_0_owner;
[L5145]              havoc __ret_0_newOwner;
[L5146]              havoc _newOwner_s220;
[L5147]              havoc __ret_0_symbol;
[L5148]              havoc __ret_0_name;
[L5149]              havoc __ret_0_decimals;
[L5150]              havoc __ret_0_pauseOn;
[L5151]              havoc __ret_0_migrationOn;
[L5152]              havoc arg813_s0;
[L5153]              havoc __ret_0_balances;
[L5154]              havoc arg814_s0;
[L5155]              havoc __ret_0_geeqaddress;
[L5156]              havoc registeraddress_s387;
[L5157]              havoc tokenAddress_s407;
[L5158]              havoc tokens_s407;
[L5159]              havoc success_s407;
[L5160]              havoc __ret_0_totalMinted;
[L5161]              havoc receiver_s579;
[L5162]              havoc token_amt_s579;
[L5163]              havoc spender_s806;
[L5164]              havoc tokens_s806;
[L5165]              havoc data_s806;
[L5166]              havoc success_s806;
[L5167]              havoc tmpNow;
[L5168]              havoc gas;
[L5169]              assume gas > 4000000 && gas <= 8000000;
[L5170]              tmpNow := now;
[L5171]              havoc now;
[L5172]              assume now > tmpNow;
[L5173]              assume msgsender_MSG != null;
[L5174]              assume DType[msgsender_MSG] != SafeMath;
[L5175]              assume DType[msgsender_MSG] != ERC20Interface;
[L5176]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L5177]              assume DType[msgsender_MSG] != Owned;
[L5178]              assume DType[msgsender_MSG] != GEEQToken;
[L5179]              Alloc[msgsender_MSG] := true;
[L5180]  COND FALSE  !(choice == 26)
[L5186]  COND FALSE  !(choice == 25)
[L5192]  COND FALSE  !(choice == 24)
[L5198]  COND FALSE  !(choice == 23)
[L5205]  COND FALSE  !(choice == 22)
[L5212]  COND TRUE   choice == 21
[L5213]              gas := gas - 21000;
[L5214]  COND TRUE   gas >= 0
[L5215]              assume tokens_s747 >= 0 && tokens_s747 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5216]              assume msgvalue_MSG == 0;
[L5217]  CALL        call success_s747 := transferFrom~address~address~uint256_GEEQToken(this, msgsender_MSG, msgvalue_MSG, from_s747, to_s747, tokens_s747);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((p1 != from_s747 || p2 != msgsender_MSG) && from_s747 == to_s747) && tokens_s747 <= balances_GEEQToken[this][from_s747]) && tokens_s747 <= allowed_GEEQToken[this][from_s747][msgsender_MSG]) && tokens_s747 >= 0) && tokens_s747 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_GEEQToken[this][to_s747] >= 0) && balances_GEEQToken[this][to_s747] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_GEEQToken[this][from_s747] >= 0) && balances_GEEQToken[this][from_s747] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_GEEQToken[this][from_s747][msgsender_MSG] >= 0) && allowed_GEEQToken[this][from_s747][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_GEEQToken0 := true;
[L3]                 call_transferFrom_GEEQToken0 := false;
[L3]                 revert := revert_hold;
[L1565]              havoc __exception;
[L1566]              revert := false;
[L1567]  COND TRUE   __exception
[L1568]              __tmp__Balance := Balance;
[L1569]              __tmp__DType := DType;
[L1570]              __tmp__Alloc := Alloc;
[L1571]              __tmp__balance_ADDR := balance_ADDR;
[L1572]              __tmp__M_Ref_int := M_Ref_int;
[L1573]              __tmp__sum_balances0 := sum_balances0;
[L1574]              __tmp__alloc_allowed_GEEQToken_lvl0 := alloc_allowed_GEEQToken_lvl0;
[L1575]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L1576]              __tmp__sum_allowed1 := sum_allowed1;
[L1577]              __tmp__sum_geeqaddress2 := sum_geeqaddress2;
[L1578]              __tmp__Length := Length;
[L1579]              __tmp__now := now;
[L1580]              __tmp__owner_Owned := owner_Owned;
[L1581]              __tmp__newOwner_Owned := newOwner_Owned;
[L1582]              __tmp__symbol_GEEQToken := symbol_GEEQToken;
[L1583]              __tmp__name_GEEQToken := name_GEEQToken;
[L1584]              __tmp__decimals_GEEQToken := decimals_GEEQToken;
[L1585]              __tmp___totalSupply_GEEQToken := _totalSupply_GEEQToken;
[L1586]              __tmp___totalMinted_GEEQToken := _totalMinted_GEEQToken;
[L1587]              __tmp___maxMintable_GEEQToken := _maxMintable_GEEQToken;
[L1588]              __tmp__pauseOn_GEEQToken := pauseOn_GEEQToken;
[L1589]              __tmp__migrationOn_GEEQToken := migrationOn_GEEQToken;
[L1590]              __tmp__balances_GEEQToken := balances_GEEQToken;
[L1591]              __tmp__allowed_GEEQToken := allowed_GEEQToken;
[L1592]              __tmp__geeqaddress_GEEQToken := geeqaddress_GEEQToken;
[L1593]  CALL        call success_s747 := transferFrom~address~address~uint256_GEEQToken__fail(this, msgsender_MSG, msgvalue_MSG, from_s747, to_s747, tokens_s747);
[L3565]  COND FALSE  !(__tmp__pauseOn_GEEQToken[this])
[L3569]  CALL        call __var_17 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__balances_GEEQToken[this][from_s747], tokens_s747);
[L2830]  COND FALSE  !(!(b_s51 <= a_s51))
[L2834]              c_s51 := (a_s51 - b_s51) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2835]              c_s51 := c_s51;
[L3569]  RET         call __var_17 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__balances_GEEQToken[this][from_s747], tokens_s747);
[L3570]  COND FALSE  !(revert)
[L3573]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] - __tmp__balances_GEEQToken[this][from_s747];
[L3574]              __tmp__balances_GEEQToken[this][from_s747] := __var_17;
[L3575]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] + __tmp__balances_GEEQToken[this][from_s747];
[L3576]  CALL        call __var_18 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__allowed_GEEQToken[this][from_s747][msgsender_MSG], tokens_s747);
[L2830]  COND FALSE  !(!(b_s51 <= a_s51))
[L2834]              c_s51 := (a_s51 - b_s51) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2835]              c_s51 := c_s51;
[L3576]  RET         call __var_18 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__allowed_GEEQToken[this][from_s747][msgsender_MSG], tokens_s747);
[L3577]  COND FALSE  !(revert)
[L3580]              __tmp__sum_allowed1[from_s747] := __tmp__sum_allowed1[from_s747] - __tmp__allowed_GEEQToken[this][from_s747][msgsender_MSG];
[L3581]              __tmp__allowed_GEEQToken[this][from_s747][msgsender_MSG] := __var_18;
[L3582]              __tmp__sum_allowed1[from_s747] := __tmp__sum_allowed1[from_s747] + __tmp__allowed_GEEQToken[this][from_s747][msgsender_MSG];
[L3583]  CALL        call __var_19 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__balances_GEEQToken[this][to_s747], tokens_s747);
[L2808]              c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2809]  COND TRUE   !(c_s26 >= a_s26)
[L2810]              revert := true;
[L3583]  RET         call __var_19 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__balances_GEEQToken[this][to_s747], tokens_s747);
[L3584]  COND TRUE   revert
[L1593]  RET         call success_s747 := transferFrom~address~address~uint256_GEEQToken__fail(this, msgsender_MSG, msgvalue_MSG, from_s747, to_s747, tokens_s747);
[L1594]              assume revert || gas < 0;
[L5217]  RET         call success_s747 := transferFrom~address~address~uint256_GEEQToken(this, msgsender_MSG, msgvalue_MSG, from_s747, to_s747, tokens_s747);
[L5360]  RET         call CorralChoice_GEEQToken(this);

[2020-11-25 16:57:02,954 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 16:57:02,954 INFO  L82        PathProgramCache]: Analyzing trace with hash 371463643, now seen corresponding path program 1 times
[2020-11-25 16:57:02,955 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 16:57:02,965 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 16:57:03,045 INFO  L134       CoverageAnalysis]: Checked inductivity of 5 backedges. 0 proven. 3 refuted. 0 times theorem prover too weak. 2 trivial. 0 not checked.
[2020-11-25 16:57:03,045 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 16:57:03,045 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [16] total 16
[2020-11-25 16:57:03,046 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 16:57:03,046 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 17 interpolants.
[2020-11-25 16:57:03,046 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=32, Invalid=240, Unknown=0, NotChecked=0, Total=272
[2020-11-25 16:57:03,046 INFO  L87              Difference]: Start difference. First operand 3947 states and 4281 transitions. cyclomatic complexity: 342 Second operand 17 states.
[2020-11-25 16:57:05,456 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 16:57:05,456 INFO  L93              Difference]: Finished difference Result 4004 states and 4413 transitions.
[2020-11-25 16:57:05,456 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 17 states. 
[2020-11-25 16:57:05,456 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 4004 states and 4413 transitions.
[2020-11-25 16:57:05,464 INFO  L131   ngComponentsAnalysis]: Automaton has 7 accepting balls. 14
[2020-11-25 16:57:05,474 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 4004 states to 4004 states and 4413 transitions.
[2020-11-25 16:57:05,474 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1220
[2020-11-25 16:57:05,474 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1220
[2020-11-25 16:57:05,474 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 4004 states and 4413 transitions.
[2020-11-25 16:57:05,477 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 16:57:05,477 INFO  L728         BuchiCegarLoop]: Abstraction has 4004 states and 4413 transitions.
[2020-11-25 16:57:05,480 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 4004 states and 4413 transitions.
[2020-11-25 16:57:05,501 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 4004 to 3987.
[2020-11-25 16:57:05,501 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 3987 states.
[2020-11-25 16:57:05,527 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 3987 states to 3987 states and 4374 transitions.
[2020-11-25 16:57:05,527 INFO  L751         BuchiCegarLoop]: Abstraction has 3987 states and 4374 transitions.
[2020-11-25 16:57:05,527 INFO  L631         BuchiCegarLoop]: Abstraction has 3987 states and 4374 transitions.
[2020-11-25 16:57:05,527 INFO  L445         BuchiCegarLoop]: ======== Iteration 8============
[2020-11-25 16:57:05,527 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 3987 states and 4374 transitions.
[2020-11-25 16:57:05,535 INFO  L131   ngComponentsAnalysis]: Automaton has 6 accepting balls. 12
[2020-11-25 16:57:05,535 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 16:57:05,535 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 16:57:05,537 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 16:57:05,537 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_transferFrom_GEEQToken0 := false;
[L3]                 call_transferFrom_GEEQToken0 := false;
[L3]     CALL        call main();
[L3]                 havoc p2;
[L3]                 havoc p1;
[L5350]              assume null == 0;
[L5351]  CALL        call this := FreshRefGenerator__success();
[L2768]              havoc newRef;
[L2769]              assume Alloc[newRef] == false;
[L2770]              Alloc[newRef] := true;
[L2771]              assume newRef != null;
[L5351]  RET         call this := FreshRefGenerator__success();
[L5352]              assume now >= 0;
[L5353]              assume DType[this] == GEEQToken;
[L5354]              assume msgvalue_MSG == 0;
[L5355]              gas := gas - 53000;
[L5356]  CALL        call GEEQToken_GEEQToken(this, msgsender_MSG, msgvalue_MSG);
[L679]               havoc __exception;
[L680]               revert := false;
[L681]   COND FALSE  !(__exception)
[L710]   CALL        call GEEQToken_GEEQToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3141]  CALL        call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L2920]  CALL        call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2905]              assume msgsender_MSG != null;
[L2906]              Balance[this] := 0;
[L2920]  RET         call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2921]  COND FALSE  !(revert)
[L3141]  RET         call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L3142]  COND FALSE  !(revert)
[L3145]  CALL        call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L2988]  CALL        call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2971]              assume msgsender_MSG != null;
[L2972]              Balance[this] := 0;
[L2973]              owner_Owned[this] := null;
[L2974]              newOwner_Owned[this] := null;
[L2988]  RET         call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2989]  COND FALSE  !(revert)
[L3145]  RET         call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L3146]  COND FALSE  !(revert)
[L3149]  CALL        call GEEQToken_GEEQToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3095]              assume msgsender_MSG != null;
[L3096]              Balance[this] := 0;
[L3097]              symbol_GEEQToken[this] := 1164884495;
[L3098]              name_GEEQToken[this] := 1164884495;
[L3099]              decimals_GEEQToken[this] := 0;
[L3100]              _totalSupply_GEEQToken[this] := 0;
[L3101]              _totalMinted_GEEQToken[this] := 0;
[L3102]              _maxMintable_GEEQToken[this] := 0;
[L3103]              pauseOn_GEEQToken[this] := false;
[L3104]              migrationOn_GEEQToken[this] := false;
[L3105]              balances_GEEQToken[this] := zeroRefintArr();
[L3106]              sum_balances0[this] := 0;
[L3107]              allowed_GEEQToken[this] := zeroRefRefintArr();
[L3108]              sum_allowed1[this] := 0;
[L3109]              geeqaddress_GEEQToken[this] := zeroRefintArr();
[L3111]              symbol_GEEQToken[this] := -15460934;
[L3112]              name_GEEQToken[this] := -1182004402;
[L3113]              decimals_GEEQToken[this] := 18;
[L3114]              _totalMinted_GEEQToken[this] := 0;
[L3115]              _totalSupply_GEEQToken[this] := 0;
[L3116]              __var_2 := decimals_GEEQToken[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3117]              _maxMintable_GEEQToken[this] := 100000000 * (nonlinearPow(10, decimals_GEEQToken[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3118]              owner_Owned[this] := msgsender_MSG;
[L3149]  RET         call GEEQToken_GEEQToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3150]  COND FALSE  !(revert)
[L710]   RET         call GEEQToken_GEEQToken__success(this, msgsender_MSG, msgvalue_MSG);
[L711]               assume !revert && gas >= 0;
[L5356]  RET         call GEEQToken_GEEQToken(this, msgsender_MSG, msgvalue_MSG);
[L5357]              assume !revert && gas >= 0;
[L5360]  CALL        call CorralChoice_GEEQToken(this);
[L5125]              havoc msgsender_MSG;
[L5126]              havoc msgvalue_MSG;
[L5127]              havoc choice;
[L5128]              havoc __ret_0_totalSupply;
[L5129]              havoc tokenOwner_s591;
[L5130]              havoc balance_s591;
[L5131]              havoc tokenOwner_s763;
[L5132]              havoc spender_s763;
[L5133]              havoc remaining_s763;
[L5134]              havoc to_s647;
[L5135]              havoc tokens_s647;
[L5136]              havoc success_s647;
[L5137]              havoc spender_s675;
[L5138]              havoc tokens_s675;
[L5139]              havoc success_s675;
[L5140]              havoc from_s747;
[L5141]              havoc to_s747;
[L5142]              havoc tokens_s747;
[L5143]              havoc success_s747;
[L5144]              havoc __ret_0_owner;
[L5145]              havoc __ret_0_newOwner;
[L5146]              havoc _newOwner_s220;
[L5147]              havoc __ret_0_symbol;
[L5148]              havoc __ret_0_name;
[L5149]              havoc __ret_0_decimals;
[L5150]              havoc __ret_0_pauseOn;
[L5151]              havoc __ret_0_migrationOn;
[L5152]              havoc arg813_s0;
[L5153]              havoc __ret_0_balances;
[L5154]              havoc arg814_s0;
[L5155]              havoc __ret_0_geeqaddress;
[L5156]              havoc registeraddress_s387;
[L5157]              havoc tokenAddress_s407;
[L5158]              havoc tokens_s407;
[L5159]              havoc success_s407;
[L5160]              havoc __ret_0_totalMinted;
[L5161]              havoc receiver_s579;
[L5162]              havoc token_amt_s579;
[L5163]              havoc spender_s806;
[L5164]              havoc tokens_s806;
[L5165]              havoc data_s806;
[L5166]              havoc success_s806;
[L5167]              havoc tmpNow;
[L5168]              havoc gas;
[L5169]              assume gas > 4000000 && gas <= 8000000;
[L5170]              tmpNow := now;
[L5171]              havoc now;
[L5172]              assume now > tmpNow;
[L5173]              assume msgsender_MSG != null;
[L5174]              assume DType[msgsender_MSG] != SafeMath;
[L5175]              assume DType[msgsender_MSG] != ERC20Interface;
[L5176]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L5177]              assume DType[msgsender_MSG] != Owned;
[L5178]              assume DType[msgsender_MSG] != GEEQToken;
[L5179]              Alloc[msgsender_MSG] := true;
[L5180]  COND FALSE  !(choice == 26)
[L5186]  COND FALSE  !(choice == 25)
[L5192]  COND FALSE  !(choice == 24)
[L5198]  COND FALSE  !(choice == 23)
[L5205]  COND FALSE  !(choice == 22)
[L5212]  COND TRUE   choice == 21
[L5213]              gas := gas - 21000;
[L5214]  COND TRUE   gas >= 0
[L5215]              assume tokens_s747 >= 0 && tokens_s747 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5216]              assume msgvalue_MSG == 0;
[L5217]  CALL        call success_s747 := transferFrom~address~address~uint256_GEEQToken(this, msgsender_MSG, msgvalue_MSG, from_s747, to_s747, tokens_s747);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((p1 != from_s747 || p2 != msgsender_MSG) && from_s747 == to_s747) && tokens_s747 <= balances_GEEQToken[this][from_s747]) && tokens_s747 <= allowed_GEEQToken[this][from_s747][msgsender_MSG]) && tokens_s747 >= 0) && tokens_s747 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_GEEQToken[this][to_s747] >= 0) && balances_GEEQToken[this][to_s747] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_GEEQToken[this][from_s747] >= 0) && balances_GEEQToken[this][from_s747] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_GEEQToken[this][from_s747][msgsender_MSG] >= 0) && allowed_GEEQToken[this][from_s747][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_GEEQToken0 := true;
[L3]                 call_transferFrom_GEEQToken0 := false;
[L3]                 revert := revert_hold;
[L1565]              havoc __exception;
[L1566]              revert := false;
[L1567]  COND TRUE   __exception
[L1568]              __tmp__Balance := Balance;
[L1569]              __tmp__DType := DType;
[L1570]              __tmp__Alloc := Alloc;
[L1571]              __tmp__balance_ADDR := balance_ADDR;
[L1572]              __tmp__M_Ref_int := M_Ref_int;
[L1573]              __tmp__sum_balances0 := sum_balances0;
[L1574]              __tmp__alloc_allowed_GEEQToken_lvl0 := alloc_allowed_GEEQToken_lvl0;
[L1575]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L1576]              __tmp__sum_allowed1 := sum_allowed1;
[L1577]              __tmp__sum_geeqaddress2 := sum_geeqaddress2;
[L1578]              __tmp__Length := Length;
[L1579]              __tmp__now := now;
[L1580]              __tmp__owner_Owned := owner_Owned;
[L1581]              __tmp__newOwner_Owned := newOwner_Owned;
[L1582]              __tmp__symbol_GEEQToken := symbol_GEEQToken;
[L1583]              __tmp__name_GEEQToken := name_GEEQToken;
[L1584]              __tmp__decimals_GEEQToken := decimals_GEEQToken;
[L1585]              __tmp___totalSupply_GEEQToken := _totalSupply_GEEQToken;
[L1586]              __tmp___totalMinted_GEEQToken := _totalMinted_GEEQToken;
[L1587]              __tmp___maxMintable_GEEQToken := _maxMintable_GEEQToken;
[L1588]              __tmp__pauseOn_GEEQToken := pauseOn_GEEQToken;
[L1589]              __tmp__migrationOn_GEEQToken := migrationOn_GEEQToken;
[L1590]              __tmp__balances_GEEQToken := balances_GEEQToken;
[L1591]              __tmp__allowed_GEEQToken := allowed_GEEQToken;
[L1592]              __tmp__geeqaddress_GEEQToken := geeqaddress_GEEQToken;
[L1593]  CALL        call success_s747 := transferFrom~address~address~uint256_GEEQToken__fail(this, msgsender_MSG, msgvalue_MSG, from_s747, to_s747, tokens_s747);
[L3565]  COND FALSE  !(__tmp__pauseOn_GEEQToken[this])
[L3569]  CALL        call __var_17 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__balances_GEEQToken[this][from_s747], tokens_s747);
[L2830]  COND FALSE  !(!(b_s51 <= a_s51))
[L2834]              c_s51 := (a_s51 - b_s51) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2835]              c_s51 := c_s51;
[L3569]  RET         call __var_17 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__balances_GEEQToken[this][from_s747], tokens_s747);
[L3570]  COND FALSE  !(revert)
[L3573]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] - __tmp__balances_GEEQToken[this][from_s747];
[L3574]              __tmp__balances_GEEQToken[this][from_s747] := __var_17;
[L3575]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] + __tmp__balances_GEEQToken[this][from_s747];
[L3576]  CALL        call __var_18 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__allowed_GEEQToken[this][from_s747][msgsender_MSG], tokens_s747);
[L2830]  COND FALSE  !(!(b_s51 <= a_s51))
[L2834]              c_s51 := (a_s51 - b_s51) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2835]              c_s51 := c_s51;
[L3576]  RET         call __var_18 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__allowed_GEEQToken[this][from_s747][msgsender_MSG], tokens_s747);
[L3577]  COND FALSE  !(revert)
[L3580]              __tmp__sum_allowed1[from_s747] := __tmp__sum_allowed1[from_s747] - __tmp__allowed_GEEQToken[this][from_s747][msgsender_MSG];
[L3581]              __tmp__allowed_GEEQToken[this][from_s747][msgsender_MSG] := __var_18;
[L3582]              __tmp__sum_allowed1[from_s747] := __tmp__sum_allowed1[from_s747] + __tmp__allowed_GEEQToken[this][from_s747][msgsender_MSG];
[L3583]  CALL        call __var_19 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__balances_GEEQToken[this][to_s747], tokens_s747);
[L2808]              c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2809]  COND FALSE  !(!(c_s26 >= a_s26))
[L2813]              c_s26 := c_s26;
[L3583]  RET         call __var_19 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__balances_GEEQToken[this][to_s747], tokens_s747);
[L3584]  COND FALSE  !(revert)
[L3587]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] - __tmp__balances_GEEQToken[this][to_s747];
[L3588]              __tmp__balances_GEEQToken[this][to_s747] := __var_19;
[L3589]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] + __tmp__balances_GEEQToken[this][to_s747];
[L3590]              success_s747 := true;
[L1593]  RET         call success_s747 := transferFrom~address~address~uint256_GEEQToken__fail(this, msgsender_MSG, msgvalue_MSG, from_s747, to_s747, tokens_s747);
[L1594]              assume revert || gas < 0;
[L5217]  RET         call success_s747 := transferFrom~address~address~uint256_GEEQToken(this, msgsender_MSG, msgvalue_MSG, from_s747, to_s747, tokens_s747);
[L5360]  RET         call CorralChoice_GEEQToken(this);

Loop:
[L5360]  CALL        call CorralChoice_GEEQToken(this);
[L5125]              havoc msgsender_MSG;
[L5126]              havoc msgvalue_MSG;
[L5127]              havoc choice;
[L5128]              havoc __ret_0_totalSupply;
[L5129]              havoc tokenOwner_s591;
[L5130]              havoc balance_s591;
[L5131]              havoc tokenOwner_s763;
[L5132]              havoc spender_s763;
[L5133]              havoc remaining_s763;
[L5134]              havoc to_s647;
[L5135]              havoc tokens_s647;
[L5136]              havoc success_s647;
[L5137]              havoc spender_s675;
[L5138]              havoc tokens_s675;
[L5139]              havoc success_s675;
[L5140]              havoc from_s747;
[L5141]              havoc to_s747;
[L5142]              havoc tokens_s747;
[L5143]              havoc success_s747;
[L5144]              havoc __ret_0_owner;
[L5145]              havoc __ret_0_newOwner;
[L5146]              havoc _newOwner_s220;
[L5147]              havoc __ret_0_symbol;
[L5148]              havoc __ret_0_name;
[L5149]              havoc __ret_0_decimals;
[L5150]              havoc __ret_0_pauseOn;
[L5151]              havoc __ret_0_migrationOn;
[L5152]              havoc arg813_s0;
[L5153]              havoc __ret_0_balances;
[L5154]              havoc arg814_s0;
[L5155]              havoc __ret_0_geeqaddress;
[L5156]              havoc registeraddress_s387;
[L5157]              havoc tokenAddress_s407;
[L5158]              havoc tokens_s407;
[L5159]              havoc success_s407;
[L5160]              havoc __ret_0_totalMinted;
[L5161]              havoc receiver_s579;
[L5162]              havoc token_amt_s579;
[L5163]              havoc spender_s806;
[L5164]              havoc tokens_s806;
[L5165]              havoc data_s806;
[L5166]              havoc success_s806;
[L5167]              havoc tmpNow;
[L5168]              havoc gas;
[L5169]              assume gas > 4000000 && gas <= 8000000;
[L5170]              tmpNow := now;
[L5171]              havoc now;
[L5172]              assume now > tmpNow;
[L5173]              assume msgsender_MSG != null;
[L5174]              assume DType[msgsender_MSG] != SafeMath;
[L5175]              assume DType[msgsender_MSG] != ERC20Interface;
[L5176]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L5177]              assume DType[msgsender_MSG] != Owned;
[L5178]              assume DType[msgsender_MSG] != GEEQToken;
[L5179]              Alloc[msgsender_MSG] := true;
[L5180]  COND TRUE   choice == 26
[L5181]              gas := gas - 21000;
[L5182]  COND FALSE  !(gas >= 0)
[L5360]  RET         call CorralChoice_GEEQToken(this);

[2020-11-25 16:57:05,547 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 16:57:05,548 INFO  L82        PathProgramCache]: Analyzing trace with hash -1435912182, now seen corresponding path program 1 times
[2020-11-25 16:57:05,548 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 16:57:05,556 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 16:57:05,579 INFO  L134       CoverageAnalysis]: Checked inductivity of 5 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 5 trivial. 0 not checked.
[2020-11-25 16:57:05,579 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 16:57:05,579 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [6] imperfect sequences [] total 6
[2020-11-25 16:57:05,579 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 16:57:05,579 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 6 interpolants.
[2020-11-25 16:57:05,579 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=10, Invalid=20, Unknown=0, NotChecked=0, Total=30
[2020-11-25 16:57:05,579 INFO  L87              Difference]: Start difference. First operand 3987 states and 4374 transitions. cyclomatic complexity: 399 Second operand 6 states.
[2020-11-25 16:57:06,018 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 16:57:06,018 INFO  L93              Difference]: Finished difference Result 4893 states and 5817 transitions.
[2020-11-25 16:57:06,018 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 10 states. 
[2020-11-25 16:57:06,018 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 4893 states and 5817 transitions.
[2020-11-25 16:57:06,031 INFO  L131   ngComponentsAnalysis]: Automaton has 5 accepting balls. 40
[2020-11-25 16:57:06,044 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 4893 states to 3635 states and 4554 transitions.
[2020-11-25 16:57:06,045 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 846
[2020-11-25 16:57:06,045 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 846
[2020-11-25 16:57:06,045 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 3635 states and 4554 transitions.
[2020-11-25 16:57:06,049 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 16:57:06,049 INFO  L728         BuchiCegarLoop]: Abstraction has 3635 states and 4554 transitions.
[2020-11-25 16:57:06,051 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 3635 states and 4554 transitions.
[2020-11-25 16:57:06,079 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 3635 to 2791.
[2020-11-25 16:57:06,079 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 2791 states.
[2020-11-25 16:57:06,082 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 2791 states to 2791 states and 3103 transitions.
[2020-11-25 16:57:06,082 INFO  L751         BuchiCegarLoop]: Abstraction has 2791 states and 3103 transitions.
[2020-11-25 16:57:06,082 INFO  L631         BuchiCegarLoop]: Abstraction has 2791 states and 3103 transitions.
[2020-11-25 16:57:06,082 INFO  L445         BuchiCegarLoop]: ======== Iteration 9============
[2020-11-25 16:57:06,082 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2791 states and 3103 transitions.
[2020-11-25 16:57:06,084 INFO  L131   ngComponentsAnalysis]: Automaton has 5 accepting balls. 10
[2020-11-25 16:57:06,085 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 16:57:06,085 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 16:57:06,086 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 16:57:06,086 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_transferFrom_GEEQToken0 := false;
[L3]                 call_transferFrom_GEEQToken0 := false;
[L3]     CALL        call main();
[L3]                 havoc p2;
[L3]                 havoc p1;
[L5350]              assume null == 0;
[L5351]  CALL        call this := FreshRefGenerator__success();
[L2768]              havoc newRef;
[L2769]              assume Alloc[newRef] == false;
[L2770]              Alloc[newRef] := true;
[L2771]              assume newRef != null;
[L5351]  RET         call this := FreshRefGenerator__success();
[L5352]              assume now >= 0;
[L5353]              assume DType[this] == GEEQToken;
[L5354]              assume msgvalue_MSG == 0;
[L5355]              gas := gas - 53000;
[L5356]  CALL        call GEEQToken_GEEQToken(this, msgsender_MSG, msgvalue_MSG);
[L679]               havoc __exception;
[L680]               revert := false;
[L681]   COND FALSE  !(__exception)
[L710]   CALL        call GEEQToken_GEEQToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3141]  CALL        call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L2920]  CALL        call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2905]              assume msgsender_MSG != null;
[L2906]              Balance[this] := 0;
[L2920]  RET         call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2921]  COND FALSE  !(revert)
[L3141]  RET         call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L3142]  COND FALSE  !(revert)
[L3145]  CALL        call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L2988]  CALL        call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2971]              assume msgsender_MSG != null;
[L2972]              Balance[this] := 0;
[L2973]              owner_Owned[this] := null;
[L2974]              newOwner_Owned[this] := null;
[L2988]  RET         call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2989]  COND FALSE  !(revert)
[L3145]  RET         call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L3146]  COND FALSE  !(revert)
[L3149]  CALL        call GEEQToken_GEEQToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3095]              assume msgsender_MSG != null;
[L3096]              Balance[this] := 0;
[L3097]              symbol_GEEQToken[this] := 1164884495;
[L3098]              name_GEEQToken[this] := 1164884495;
[L3099]              decimals_GEEQToken[this] := 0;
[L3100]              _totalSupply_GEEQToken[this] := 0;
[L3101]              _totalMinted_GEEQToken[this] := 0;
[L3102]              _maxMintable_GEEQToken[this] := 0;
[L3103]              pauseOn_GEEQToken[this] := false;
[L3104]              migrationOn_GEEQToken[this] := false;
[L3105]              balances_GEEQToken[this] := zeroRefintArr();
[L3106]              sum_balances0[this] := 0;
[L3107]              allowed_GEEQToken[this] := zeroRefRefintArr();
[L3108]              sum_allowed1[this] := 0;
[L3109]              geeqaddress_GEEQToken[this] := zeroRefintArr();
[L3111]              symbol_GEEQToken[this] := -15460934;
[L3112]              name_GEEQToken[this] := -1182004402;
[L3113]              decimals_GEEQToken[this] := 18;
[L3114]              _totalMinted_GEEQToken[this] := 0;
[L3115]              _totalSupply_GEEQToken[this] := 0;
[L3116]              __var_2 := decimals_GEEQToken[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3117]              _maxMintable_GEEQToken[this] := 100000000 * (nonlinearPow(10, decimals_GEEQToken[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3118]              owner_Owned[this] := msgsender_MSG;
[L3149]  RET         call GEEQToken_GEEQToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3150]  COND FALSE  !(revert)
[L710]   RET         call GEEQToken_GEEQToken__success(this, msgsender_MSG, msgvalue_MSG);
[L711]               assume !revert && gas >= 0;
[L5356]  RET         call GEEQToken_GEEQToken(this, msgsender_MSG, msgvalue_MSG);
[L5357]              assume !revert && gas >= 0;
[L5360]  CALL        call CorralChoice_GEEQToken(this);
[L5125]              havoc msgsender_MSG;
[L5126]              havoc msgvalue_MSG;
[L5127]              havoc choice;
[L5128]              havoc __ret_0_totalSupply;
[L5129]              havoc tokenOwner_s591;
[L5130]              havoc balance_s591;
[L5131]              havoc tokenOwner_s763;
[L5132]              havoc spender_s763;
[L5133]              havoc remaining_s763;
[L5134]              havoc to_s647;
[L5135]              havoc tokens_s647;
[L5136]              havoc success_s647;
[L5137]              havoc spender_s675;
[L5138]              havoc tokens_s675;
[L5139]              havoc success_s675;
[L5140]              havoc from_s747;
[L5141]              havoc to_s747;
[L5142]              havoc tokens_s747;
[L5143]              havoc success_s747;
[L5144]              havoc __ret_0_owner;
[L5145]              havoc __ret_0_newOwner;
[L5146]              havoc _newOwner_s220;
[L5147]              havoc __ret_0_symbol;
[L5148]              havoc __ret_0_name;
[L5149]              havoc __ret_0_decimals;
[L5150]              havoc __ret_0_pauseOn;
[L5151]              havoc __ret_0_migrationOn;
[L5152]              havoc arg813_s0;
[L5153]              havoc __ret_0_balances;
[L5154]              havoc arg814_s0;
[L5155]              havoc __ret_0_geeqaddress;
[L5156]              havoc registeraddress_s387;
[L5157]              havoc tokenAddress_s407;
[L5158]              havoc tokens_s407;
[L5159]              havoc success_s407;
[L5160]              havoc __ret_0_totalMinted;
[L5161]              havoc receiver_s579;
[L5162]              havoc token_amt_s579;
[L5163]              havoc spender_s806;
[L5164]              havoc tokens_s806;
[L5165]              havoc data_s806;
[L5166]              havoc success_s806;
[L5167]              havoc tmpNow;
[L5168]              havoc gas;
[L5169]              assume gas > 4000000 && gas <= 8000000;
[L5170]              tmpNow := now;
[L5171]              havoc now;
[L5172]              assume now > tmpNow;
[L5173]              assume msgsender_MSG != null;
[L5174]              assume DType[msgsender_MSG] != SafeMath;
[L5175]              assume DType[msgsender_MSG] != ERC20Interface;
[L5176]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L5177]              assume DType[msgsender_MSG] != Owned;
[L5178]              assume DType[msgsender_MSG] != GEEQToken;
[L5179]              Alloc[msgsender_MSG] := true;
[L5180]  COND FALSE  !(choice == 26)
[L5186]  COND FALSE  !(choice == 25)
[L5192]  COND FALSE  !(choice == 24)
[L5198]  COND FALSE  !(choice == 23)
[L5205]  COND TRUE   choice == 22
[L5206]              gas := gas - 21000;
[L5207]  COND TRUE   gas >= 0
[L5208]              assume tokens_s675 >= 0 && tokens_s675 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5209]              assume msgvalue_MSG == 0;
[L5210]  CALL        call success_s675 := approve~address~uint256_GEEQToken(this, msgsender_MSG, msgvalue_MSG, spender_s675, tokens_s675);
[L1495]              havoc __exception;
[L1496]              revert := false;
[L1497]  COND FALSE  !(__exception)
[L1526]  CALL        call success_s675 := approve~address~uint256_GEEQToken__success(this, msgsender_MSG, msgvalue_MSG, spender_s675, tokens_s675);
[L3552]              sum_allowed1[msgsender_MSG] := sum_allowed1[msgsender_MSG] - allowed_GEEQToken[this][msgsender_MSG][spender_s675];
[L3553]              allowed_GEEQToken[this][msgsender_MSG][spender_s675] := tokens_s675;
[L3554]              sum_allowed1[msgsender_MSG] := sum_allowed1[msgsender_MSG] + allowed_GEEQToken[this][msgsender_MSG][spender_s675];
[L3555]              assert { :EventEmitted "Approval_GEEQToken" } true;
[L3556]              success_s675 := true;
[L1526]  RET         call success_s675 := approve~address~uint256_GEEQToken__success(this, msgsender_MSG, msgvalue_MSG, spender_s675, tokens_s675);
[L1527]              assume !revert && gas >= 0;
[L5210]  RET         call success_s675 := approve~address~uint256_GEEQToken(this, msgsender_MSG, msgvalue_MSG, spender_s675, tokens_s675);
[L5360]  RET         call CorralChoice_GEEQToken(this);
[L5360]  CALL        call CorralChoice_GEEQToken(this);
[L5125]              havoc msgsender_MSG;
[L5126]              havoc msgvalue_MSG;
[L5127]              havoc choice;
[L5128]              havoc __ret_0_totalSupply;
[L5129]              havoc tokenOwner_s591;
[L5130]              havoc balance_s591;
[L5131]              havoc tokenOwner_s763;
[L5132]              havoc spender_s763;
[L5133]              havoc remaining_s763;
[L5134]              havoc to_s647;
[L5135]              havoc tokens_s647;
[L5136]              havoc success_s647;
[L5137]              havoc spender_s675;
[L5138]              havoc tokens_s675;
[L5139]              havoc success_s675;
[L5140]              havoc from_s747;
[L5141]              havoc to_s747;
[L5142]              havoc tokens_s747;
[L5143]              havoc success_s747;
[L5144]              havoc __ret_0_owner;
[L5145]              havoc __ret_0_newOwner;
[L5146]              havoc _newOwner_s220;
[L5147]              havoc __ret_0_symbol;
[L5148]              havoc __ret_0_name;
[L5149]              havoc __ret_0_decimals;
[L5150]              havoc __ret_0_pauseOn;
[L5151]              havoc __ret_0_migrationOn;
[L5152]              havoc arg813_s0;
[L5153]              havoc __ret_0_balances;
[L5154]              havoc arg814_s0;
[L5155]              havoc __ret_0_geeqaddress;
[L5156]              havoc registeraddress_s387;
[L5157]              havoc tokenAddress_s407;
[L5158]              havoc tokens_s407;
[L5159]              havoc success_s407;
[L5160]              havoc __ret_0_totalMinted;
[L5161]              havoc receiver_s579;
[L5162]              havoc token_amt_s579;
[L5163]              havoc spender_s806;
[L5164]              havoc tokens_s806;
[L5165]              havoc data_s806;
[L5166]              havoc success_s806;
[L5167]              havoc tmpNow;
[L5168]              havoc gas;
[L5169]              assume gas > 4000000 && gas <= 8000000;
[L5170]              tmpNow := now;
[L5171]              havoc now;
[L5172]              assume now > tmpNow;
[L5173]              assume msgsender_MSG != null;
[L5174]              assume DType[msgsender_MSG] != SafeMath;
[L5175]              assume DType[msgsender_MSG] != ERC20Interface;
[L5176]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L5177]              assume DType[msgsender_MSG] != Owned;
[L5178]              assume DType[msgsender_MSG] != GEEQToken;
[L5179]              Alloc[msgsender_MSG] := true;
[L5180]  COND FALSE  !(choice == 26)
[L5186]  COND FALSE  !(choice == 25)
[L5192]  COND FALSE  !(choice == 24)
[L5198]  COND FALSE  !(choice == 23)
[L5205]  COND FALSE  !(choice == 22)
[L5212]  COND TRUE   choice == 21
[L5213]              gas := gas - 21000;
[L5214]  COND TRUE   gas >= 0
[L5215]              assume tokens_s747 >= 0 && tokens_s747 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5216]              assume msgvalue_MSG == 0;
[L5217]  CALL        call success_s747 := transferFrom~address~address~uint256_GEEQToken(this, msgsender_MSG, msgvalue_MSG, from_s747, to_s747, tokens_s747);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((p1 != from_s747 || p2 != msgsender_MSG) && from_s747 == to_s747) && tokens_s747 <= balances_GEEQToken[this][from_s747]) && tokens_s747 <= allowed_GEEQToken[this][from_s747][msgsender_MSG]) && tokens_s747 >= 0) && tokens_s747 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_GEEQToken[this][to_s747] >= 0) && balances_GEEQToken[this][to_s747] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_GEEQToken[this][from_s747] >= 0) && balances_GEEQToken[this][from_s747] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_GEEQToken[this][from_s747][msgsender_MSG] >= 0) && allowed_GEEQToken[this][from_s747][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_GEEQToken0 := true;
[L3]                 call_transferFrom_GEEQToken0 := false;
[L3]                 revert := revert_hold;
[L1565]              havoc __exception;
[L1566]              revert := false;
[L1567]  COND FALSE  !(__exception)
[L1596]  CALL        call success_s747 := transferFrom~address~address~uint256_GEEQToken__success(this, msgsender_MSG, msgvalue_MSG, from_s747, to_s747, tokens_s747);
[L3600]  COND FALSE  !(pauseOn_GEEQToken[this])
[L3605]  CALL        call __var_17 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_GEEQToken[this][from_s747], tokens_s747);
[L2841]  COND FALSE  !(!(b_s51 <= a_s51))
[L2845]              c_s51 := (a_s51 - b_s51) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2846]              c_s51 := c_s51;
[L3605]  RET         call __var_17 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_GEEQToken[this][from_s747], tokens_s747);
[L3606]  COND FALSE  !(revert)
[L3609]              sum_balances0[this] := sum_balances0[this] - balances_GEEQToken[this][from_s747];
[L3610]              balances_GEEQToken[this][from_s747] := __var_17;
[L3611]              sum_balances0[this] := sum_balances0[this] + balances_GEEQToken[this][from_s747];
[L3612]  CALL        call __var_18 := sub~uint256~uint256_SafeMath__success(this, this, 0, allowed_GEEQToken[this][from_s747][msgsender_MSG], tokens_s747);
[L2841]  COND FALSE  !(!(b_s51 <= a_s51))
[L2845]              c_s51 := (a_s51 - b_s51) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2846]              c_s51 := c_s51;
[L3612]  RET         call __var_18 := sub~uint256~uint256_SafeMath__success(this, this, 0, allowed_GEEQToken[this][from_s747][msgsender_MSG], tokens_s747);
[L3613]  COND FALSE  !(revert)
[L3616]              sum_allowed1[from_s747] := sum_allowed1[from_s747] - allowed_GEEQToken[this][from_s747][msgsender_MSG];
[L3617]              allowed_GEEQToken[this][from_s747][msgsender_MSG] := __var_18;
[L3618]              sum_allowed1[from_s747] := sum_allowed1[from_s747] + allowed_GEEQToken[this][from_s747][msgsender_MSG];
[L3619]  CALL        call __var_19 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_GEEQToken[this][to_s747], tokens_s747);
[L2819]              c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2820]  COND FALSE  !(!(c_s26 >= a_s26))
[L2824]              c_s26 := c_s26;
[L3619]  RET         call __var_19 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_GEEQToken[this][to_s747], tokens_s747);
[L3620]  COND FALSE  !(revert)
[L3623]              sum_balances0[this] := sum_balances0[this] - balances_GEEQToken[this][to_s747];
[L3624]              balances_GEEQToken[this][to_s747] := __var_19;
[L3625]              sum_balances0[this] := sum_balances0[this] + balances_GEEQToken[this][to_s747];
[L3626]              assert { :EventEmitted "Transfer_GEEQToken" } true;
[L3627]              success_s747 := true;
[L1596]  RET         call success_s747 := transferFrom~address~address~uint256_GEEQToken__success(this, msgsender_MSG, msgvalue_MSG, from_s747, to_s747, tokens_s747);
[L1597]              assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !((((((((((((((success_s747 == true && allowed_GEEQToken[this][from_s747][msgsender_MSG] == old(allowed_GEEQToken[this][from_s747][msgsender_MSG]) - tokens_s747) && _totalSupply_GEEQToken[this] == old(_totalSupply_GEEQToken[this])) && balances_GEEQToken[this] == old(balances_GEEQToken[this])) && allowed_GEEQToken[this][p1][p2] == old(allowed_GEEQToken[this][p1][p2])) && symbol_GEEQToken[this] == old(symbol_GEEQToken[this])) && name_GEEQToken[this] == old(name_GEEQToken[this])) && decimals_GEEQToken[this] == old(decimals_GEEQToken[this])) && _totalMinted_GEEQToken[this] == old(_totalMinted_GEEQToken[this])) && _maxMintable_GEEQToken[this] == old(_maxMintable_GEEQToken[this])) && pauseOn_GEEQToken[this] == old(pauseOn_GEEQToken[this])) && migrationOn_GEEQToken[this] == old(migrationOn_GEEQToken[this])) && geeqaddress_GEEQToken[this] == old(geeqaddress_GEEQToken[this])) && owner_Owned[this] == old(owner_Owned[this])) && newOwner_Owned[this] == old(newOwner_Owned[this]));
[L3]                 revert := revert_hold;
[L5217]  RET         call success_s747 := transferFrom~address~address~uint256_GEEQToken(this, msgsender_MSG, msgvalue_MSG, from_s747, to_s747, tokens_s747);
[L5360]  RET         call CorralChoice_GEEQToken(this);

Loop:
[L5360]  CALL        call CorralChoice_GEEQToken(this);
[L5125]              havoc msgsender_MSG;
[L5126]              havoc msgvalue_MSG;
[L5127]              havoc choice;
[L5128]              havoc __ret_0_totalSupply;
[L5129]              havoc tokenOwner_s591;
[L5130]              havoc balance_s591;
[L5131]              havoc tokenOwner_s763;
[L5132]              havoc spender_s763;
[L5133]              havoc remaining_s763;
[L5134]              havoc to_s647;
[L5135]              havoc tokens_s647;
[L5136]              havoc success_s647;
[L5137]              havoc spender_s675;
[L5138]              havoc tokens_s675;
[L5139]              havoc success_s675;
[L5140]              havoc from_s747;
[L5141]              havoc to_s747;
[L5142]              havoc tokens_s747;
[L5143]              havoc success_s747;
[L5144]              havoc __ret_0_owner;
[L5145]              havoc __ret_0_newOwner;
[L5146]              havoc _newOwner_s220;
[L5147]              havoc __ret_0_symbol;
[L5148]              havoc __ret_0_name;
[L5149]              havoc __ret_0_decimals;
[L5150]              havoc __ret_0_pauseOn;
[L5151]              havoc __ret_0_migrationOn;
[L5152]              havoc arg813_s0;
[L5153]              havoc __ret_0_balances;
[L5154]              havoc arg814_s0;
[L5155]              havoc __ret_0_geeqaddress;
[L5156]              havoc registeraddress_s387;
[L5157]              havoc tokenAddress_s407;
[L5158]              havoc tokens_s407;
[L5159]              havoc success_s407;
[L5160]              havoc __ret_0_totalMinted;
[L5161]              havoc receiver_s579;
[L5162]              havoc token_amt_s579;
[L5163]              havoc spender_s806;
[L5164]              havoc tokens_s806;
[L5165]              havoc data_s806;
[L5166]              havoc success_s806;
[L5167]              havoc tmpNow;
[L5168]              havoc gas;
[L5169]              assume gas > 4000000 && gas <= 8000000;
[L5170]              tmpNow := now;
[L5171]              havoc now;
[L5172]              assume now > tmpNow;
[L5173]              assume msgsender_MSG != null;
[L5174]              assume DType[msgsender_MSG] != SafeMath;
[L5175]              assume DType[msgsender_MSG] != ERC20Interface;
[L5176]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L5177]              assume DType[msgsender_MSG] != Owned;
[L5178]              assume DType[msgsender_MSG] != GEEQToken;
[L5179]              Alloc[msgsender_MSG] := true;
[L5180]  COND TRUE   choice == 26
[L5181]              gas := gas - 21000;
[L5182]  COND FALSE  !(gas >= 0)
[L5360]  RET         call CorralChoice_GEEQToken(this);

[2020-11-25 16:57:06,088 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 16:57:06,088 INFO  L82        PathProgramCache]: Analyzing trace with hash -2135829293, now seen corresponding path program 1 times
[2020-11-25 16:57:06,089 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 16:57:06,116 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 16:57:06,603 INFO  L134       CoverageAnalysis]: Checked inductivity of 67 backedges. 0 proven. 3 refuted. 0 times theorem prover too weak. 64 trivial. 0 not checked.
[2020-11-25 16:57:06,603 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 16:57:06,604 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [24] total 24
[2020-11-25 16:57:06,604 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 16:57:06,604 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 25 interpolants.
[2020-11-25 16:57:06,604 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=72, Invalid=528, Unknown=0, NotChecked=0, Total=600
[2020-11-25 16:57:06,604 INFO  L87              Difference]: Start difference. First operand 2791 states and 3103 transitions. cyclomatic complexity: 323 Second operand 25 states.
[2020-11-25 16:57:11,156 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 16:57:11,156 INFO  L93              Difference]: Finished difference Result 2798 states and 3104 transitions.
[2020-11-25 16:57:11,156 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 24 states. 
[2020-11-25 16:57:11,156 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2798 states and 3104 transitions.
[2020-11-25 16:57:11,161 INFO  L131   ngComponentsAnalysis]: Automaton has 5 accepting balls. 10
[2020-11-25 16:57:11,167 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2798 states to 2798 states and 3104 transitions.
[2020-11-25 16:57:11,167 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 663
[2020-11-25 16:57:11,168 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 663
[2020-11-25 16:57:11,168 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 2798 states and 3104 transitions.
[2020-11-25 16:57:11,170 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 16:57:11,170 INFO  L728         BuchiCegarLoop]: Abstraction has 2798 states and 3104 transitions.
[2020-11-25 16:57:11,172 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 2798 states and 3104 transitions.
[2020-11-25 16:57:11,185 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 2798 to 2781.
[2020-11-25 16:57:11,185 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 2781 states.
[2020-11-25 16:57:11,188 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 2781 states to 2781 states and 3082 transitions.
[2020-11-25 16:57:11,188 INFO  L751         BuchiCegarLoop]: Abstraction has 2781 states and 3082 transitions.
[2020-11-25 16:57:11,188 INFO  L631         BuchiCegarLoop]: Abstraction has 2781 states and 3082 transitions.
[2020-11-25 16:57:11,188 INFO  L445         BuchiCegarLoop]: ======== Iteration 10============
[2020-11-25 16:57:11,188 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2781 states and 3082 transitions.
[2020-11-25 16:57:11,191 INFO  L131   ngComponentsAnalysis]: Automaton has 5 accepting balls. 10
[2020-11-25 16:57:11,191 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 16:57:11,191 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 16:57:11,192 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 16:57:11,192 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_transferFrom_GEEQToken0 := false;
[L3]                 call_transferFrom_GEEQToken0 := false;
[L3]     CALL        call main();
[L3]                 havoc p2;
[L3]                 havoc p1;
[L5350]              assume null == 0;
[L5351]  CALL        call this := FreshRefGenerator__success();
[L2768]              havoc newRef;
[L2769]              assume Alloc[newRef] == false;
[L2770]              Alloc[newRef] := true;
[L2771]              assume newRef != null;
[L5351]  RET         call this := FreshRefGenerator__success();
[L5352]              assume now >= 0;
[L5353]              assume DType[this] == GEEQToken;
[L5354]              assume msgvalue_MSG == 0;
[L5355]              gas := gas - 53000;
[L5356]  CALL        call GEEQToken_GEEQToken(this, msgsender_MSG, msgvalue_MSG);
[L679]               havoc __exception;
[L680]               revert := false;
[L681]   COND FALSE  !(__exception)
[L710]   CALL        call GEEQToken_GEEQToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3141]  CALL        call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L2920]  CALL        call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2905]              assume msgsender_MSG != null;
[L2906]              Balance[this] := 0;
[L2920]  RET         call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2921]  COND FALSE  !(revert)
[L3141]  RET         call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L3142]  COND FALSE  !(revert)
[L3145]  CALL        call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L2988]  CALL        call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2971]              assume msgsender_MSG != null;
[L2972]              Balance[this] := 0;
[L2973]              owner_Owned[this] := null;
[L2974]              newOwner_Owned[this] := null;
[L2988]  RET         call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2989]  COND FALSE  !(revert)
[L3145]  RET         call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L3146]  COND FALSE  !(revert)
[L3149]  CALL        call GEEQToken_GEEQToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3095]              assume msgsender_MSG != null;
[L3096]              Balance[this] := 0;
[L3097]              symbol_GEEQToken[this] := 1164884495;
[L3098]              name_GEEQToken[this] := 1164884495;
[L3099]              decimals_GEEQToken[this] := 0;
[L3100]              _totalSupply_GEEQToken[this] := 0;
[L3101]              _totalMinted_GEEQToken[this] := 0;
[L3102]              _maxMintable_GEEQToken[this] := 0;
[L3103]              pauseOn_GEEQToken[this] := false;
[L3104]              migrationOn_GEEQToken[this] := false;
[L3105]              balances_GEEQToken[this] := zeroRefintArr();
[L3106]              sum_balances0[this] := 0;
[L3107]              allowed_GEEQToken[this] := zeroRefRefintArr();
[L3108]              sum_allowed1[this] := 0;
[L3109]              geeqaddress_GEEQToken[this] := zeroRefintArr();
[L3111]              symbol_GEEQToken[this] := -15460934;
[L3112]              name_GEEQToken[this] := -1182004402;
[L3113]              decimals_GEEQToken[this] := 18;
[L3114]              _totalMinted_GEEQToken[this] := 0;
[L3115]              _totalSupply_GEEQToken[this] := 0;
[L3116]              __var_2 := decimals_GEEQToken[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3117]              _maxMintable_GEEQToken[this] := 100000000 * (nonlinearPow(10, decimals_GEEQToken[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3118]              owner_Owned[this] := msgsender_MSG;
[L3149]  RET         call GEEQToken_GEEQToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3150]  COND FALSE  !(revert)
[L710]   RET         call GEEQToken_GEEQToken__success(this, msgsender_MSG, msgvalue_MSG);
[L711]               assume !revert && gas >= 0;
[L5356]  RET         call GEEQToken_GEEQToken(this, msgsender_MSG, msgvalue_MSG);
[L5357]              assume !revert && gas >= 0;
[L5360]  CALL        call CorralChoice_GEEQToken(this);
[L5125]              havoc msgsender_MSG;
[L5126]              havoc msgvalue_MSG;
[L5127]              havoc choice;
[L5128]              havoc __ret_0_totalSupply;
[L5129]              havoc tokenOwner_s591;
[L5130]              havoc balance_s591;
[L5131]              havoc tokenOwner_s763;
[L5132]              havoc spender_s763;
[L5133]              havoc remaining_s763;
[L5134]              havoc to_s647;
[L5135]              havoc tokens_s647;
[L5136]              havoc success_s647;
[L5137]              havoc spender_s675;
[L5138]              havoc tokens_s675;
[L5139]              havoc success_s675;
[L5140]              havoc from_s747;
[L5141]              havoc to_s747;
[L5142]              havoc tokens_s747;
[L5143]              havoc success_s747;
[L5144]              havoc __ret_0_owner;
[L5145]              havoc __ret_0_newOwner;
[L5146]              havoc _newOwner_s220;
[L5147]              havoc __ret_0_symbol;
[L5148]              havoc __ret_0_name;
[L5149]              havoc __ret_0_decimals;
[L5150]              havoc __ret_0_pauseOn;
[L5151]              havoc __ret_0_migrationOn;
[L5152]              havoc arg813_s0;
[L5153]              havoc __ret_0_balances;
[L5154]              havoc arg814_s0;
[L5155]              havoc __ret_0_geeqaddress;
[L5156]              havoc registeraddress_s387;
[L5157]              havoc tokenAddress_s407;
[L5158]              havoc tokens_s407;
[L5159]              havoc success_s407;
[L5160]              havoc __ret_0_totalMinted;
[L5161]              havoc receiver_s579;
[L5162]              havoc token_amt_s579;
[L5163]              havoc spender_s806;
[L5164]              havoc tokens_s806;
[L5165]              havoc data_s806;
[L5166]              havoc success_s806;
[L5167]              havoc tmpNow;
[L5168]              havoc gas;
[L5169]              assume gas > 4000000 && gas <= 8000000;
[L5170]              tmpNow := now;
[L5171]              havoc now;
[L5172]              assume now > tmpNow;
[L5173]              assume msgsender_MSG != null;
[L5174]              assume DType[msgsender_MSG] != SafeMath;
[L5175]              assume DType[msgsender_MSG] != ERC20Interface;
[L5176]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L5177]              assume DType[msgsender_MSG] != Owned;
[L5178]              assume DType[msgsender_MSG] != GEEQToken;
[L5179]              Alloc[msgsender_MSG] := true;
[L5180]  COND FALSE  !(choice == 26)
[L5186]  COND FALSE  !(choice == 25)
[L5192]  COND FALSE  !(choice == 24)
[L5198]  COND FALSE  !(choice == 23)
[L5205]  COND TRUE   choice == 22
[L5206]              gas := gas - 21000;
[L5207]  COND TRUE   gas >= 0
[L5208]              assume tokens_s675 >= 0 && tokens_s675 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5209]              assume msgvalue_MSG == 0;
[L5210]  CALL        call success_s675 := approve~address~uint256_GEEQToken(this, msgsender_MSG, msgvalue_MSG, spender_s675, tokens_s675);
[L1495]              havoc __exception;
[L1496]              revert := false;
[L1497]  COND FALSE  !(__exception)
[L1526]  CALL        call success_s675 := approve~address~uint256_GEEQToken__success(this, msgsender_MSG, msgvalue_MSG, spender_s675, tokens_s675);
[L3552]              sum_allowed1[msgsender_MSG] := sum_allowed1[msgsender_MSG] - allowed_GEEQToken[this][msgsender_MSG][spender_s675];
[L3553]              allowed_GEEQToken[this][msgsender_MSG][spender_s675] := tokens_s675;
[L3554]              sum_allowed1[msgsender_MSG] := sum_allowed1[msgsender_MSG] + allowed_GEEQToken[this][msgsender_MSG][spender_s675];
[L3555]              assert { :EventEmitted "Approval_GEEQToken" } true;
[L3556]              success_s675 := true;
[L1526]  RET         call success_s675 := approve~address~uint256_GEEQToken__success(this, msgsender_MSG, msgvalue_MSG, spender_s675, tokens_s675);
[L1527]              assume !revert && gas >= 0;
[L5210]  RET         call success_s675 := approve~address~uint256_GEEQToken(this, msgsender_MSG, msgvalue_MSG, spender_s675, tokens_s675);
[L5360]  RET         call CorralChoice_GEEQToken(this);
[L5360]  CALL        call CorralChoice_GEEQToken(this);
[L5125]              havoc msgsender_MSG;
[L5126]              havoc msgvalue_MSG;
[L5127]              havoc choice;
[L5128]              havoc __ret_0_totalSupply;
[L5129]              havoc tokenOwner_s591;
[L5130]              havoc balance_s591;
[L5131]              havoc tokenOwner_s763;
[L5132]              havoc spender_s763;
[L5133]              havoc remaining_s763;
[L5134]              havoc to_s647;
[L5135]              havoc tokens_s647;
[L5136]              havoc success_s647;
[L5137]              havoc spender_s675;
[L5138]              havoc tokens_s675;
[L5139]              havoc success_s675;
[L5140]              havoc from_s747;
[L5141]              havoc to_s747;
[L5142]              havoc tokens_s747;
[L5143]              havoc success_s747;
[L5144]              havoc __ret_0_owner;
[L5145]              havoc __ret_0_newOwner;
[L5146]              havoc _newOwner_s220;
[L5147]              havoc __ret_0_symbol;
[L5148]              havoc __ret_0_name;
[L5149]              havoc __ret_0_decimals;
[L5150]              havoc __ret_0_pauseOn;
[L5151]              havoc __ret_0_migrationOn;
[L5152]              havoc arg813_s0;
[L5153]              havoc __ret_0_balances;
[L5154]              havoc arg814_s0;
[L5155]              havoc __ret_0_geeqaddress;
[L5156]              havoc registeraddress_s387;
[L5157]              havoc tokenAddress_s407;
[L5158]              havoc tokens_s407;
[L5159]              havoc success_s407;
[L5160]              havoc __ret_0_totalMinted;
[L5161]              havoc receiver_s579;
[L5162]              havoc token_amt_s579;
[L5163]              havoc spender_s806;
[L5164]              havoc tokens_s806;
[L5165]              havoc data_s806;
[L5166]              havoc success_s806;
[L5167]              havoc tmpNow;
[L5168]              havoc gas;
[L5169]              assume gas > 4000000 && gas <= 8000000;
[L5170]              tmpNow := now;
[L5171]              havoc now;
[L5172]              assume now > tmpNow;
[L5173]              assume msgsender_MSG != null;
[L5174]              assume DType[msgsender_MSG] != SafeMath;
[L5175]              assume DType[msgsender_MSG] != ERC20Interface;
[L5176]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L5177]              assume DType[msgsender_MSG] != Owned;
[L5178]              assume DType[msgsender_MSG] != GEEQToken;
[L5179]              Alloc[msgsender_MSG] := true;
[L5180]  COND FALSE  !(choice == 26)
[L5186]  COND FALSE  !(choice == 25)
[L5192]  COND FALSE  !(choice == 24)
[L5198]  COND FALSE  !(choice == 23)
[L5205]  COND FALSE  !(choice == 22)
[L5212]  COND TRUE   choice == 21
[L5213]              gas := gas - 21000;
[L5214]  COND TRUE   gas >= 0
[L5215]              assume tokens_s747 >= 0 && tokens_s747 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5216]              assume msgvalue_MSG == 0;
[L5217]  CALL        call success_s747 := transferFrom~address~address~uint256_GEEQToken(this, msgsender_MSG, msgvalue_MSG, from_s747, to_s747, tokens_s747);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((p1 != from_s747 || p2 != msgsender_MSG) && from_s747 == to_s747) && tokens_s747 <= balances_GEEQToken[this][from_s747]) && tokens_s747 <= allowed_GEEQToken[this][from_s747][msgsender_MSG]) && tokens_s747 >= 0) && tokens_s747 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_GEEQToken[this][to_s747] >= 0) && balances_GEEQToken[this][to_s747] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_GEEQToken[this][from_s747] >= 0) && balances_GEEQToken[this][from_s747] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_GEEQToken[this][from_s747][msgsender_MSG] >= 0) && allowed_GEEQToken[this][from_s747][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_GEEQToken0 := true;
[L3]                 call_transferFrom_GEEQToken0 := false;
[L3]                 revert := revert_hold;
[L1565]              havoc __exception;
[L1566]              revert := false;
[L1567]  COND TRUE   __exception
[L1568]              __tmp__Balance := Balance;
[L1569]              __tmp__DType := DType;
[L1570]              __tmp__Alloc := Alloc;
[L1571]              __tmp__balance_ADDR := balance_ADDR;
[L1572]              __tmp__M_Ref_int := M_Ref_int;
[L1573]              __tmp__sum_balances0 := sum_balances0;
[L1574]              __tmp__alloc_allowed_GEEQToken_lvl0 := alloc_allowed_GEEQToken_lvl0;
[L1575]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L1576]              __tmp__sum_allowed1 := sum_allowed1;
[L1577]              __tmp__sum_geeqaddress2 := sum_geeqaddress2;
[L1578]              __tmp__Length := Length;
[L1579]              __tmp__now := now;
[L1580]              __tmp__owner_Owned := owner_Owned;
[L1581]              __tmp__newOwner_Owned := newOwner_Owned;
[L1582]              __tmp__symbol_GEEQToken := symbol_GEEQToken;
[L1583]              __tmp__name_GEEQToken := name_GEEQToken;
[L1584]              __tmp__decimals_GEEQToken := decimals_GEEQToken;
[L1585]              __tmp___totalSupply_GEEQToken := _totalSupply_GEEQToken;
[L1586]              __tmp___totalMinted_GEEQToken := _totalMinted_GEEQToken;
[L1587]              __tmp___maxMintable_GEEQToken := _maxMintable_GEEQToken;
[L1588]              __tmp__pauseOn_GEEQToken := pauseOn_GEEQToken;
[L1589]              __tmp__migrationOn_GEEQToken := migrationOn_GEEQToken;
[L1590]              __tmp__balances_GEEQToken := balances_GEEQToken;
[L1591]              __tmp__allowed_GEEQToken := allowed_GEEQToken;
[L1592]              __tmp__geeqaddress_GEEQToken := geeqaddress_GEEQToken;
[L1593]  CALL        call success_s747 := transferFrom~address~address~uint256_GEEQToken__fail(this, msgsender_MSG, msgvalue_MSG, from_s747, to_s747, tokens_s747);
[L3565]  COND FALSE  !(__tmp__pauseOn_GEEQToken[this])
[L3569]  CALL        call __var_17 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__balances_GEEQToken[this][from_s747], tokens_s747);
[L2830]  COND FALSE  !(!(b_s51 <= a_s51))
[L2834]              c_s51 := (a_s51 - b_s51) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2835]              c_s51 := c_s51;
[L3569]  RET         call __var_17 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__balances_GEEQToken[this][from_s747], tokens_s747);
[L3570]  COND FALSE  !(revert)
[L3573]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] - __tmp__balances_GEEQToken[this][from_s747];
[L3574]              __tmp__balances_GEEQToken[this][from_s747] := __var_17;
[L3575]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] + __tmp__balances_GEEQToken[this][from_s747];
[L3576]  CALL        call __var_18 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__allowed_GEEQToken[this][from_s747][msgsender_MSG], tokens_s747);
[L2830]  COND TRUE   !(b_s51 <= a_s51)
[L2831]              revert := true;
[L3576]  RET         call __var_18 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__allowed_GEEQToken[this][from_s747][msgsender_MSG], tokens_s747);
[L3577]  COND TRUE   revert
[L1593]  RET         call success_s747 := transferFrom~address~address~uint256_GEEQToken__fail(this, msgsender_MSG, msgvalue_MSG, from_s747, to_s747, tokens_s747);
[L1594]              assume revert || gas < 0;
[L5217]  RET         call success_s747 := transferFrom~address~address~uint256_GEEQToken(this, msgsender_MSG, msgvalue_MSG, from_s747, to_s747, tokens_s747);
[L5360]  RET         call CorralChoice_GEEQToken(this);

Loop:
[L5360]  CALL        call CorralChoice_GEEQToken(this);
[L5125]              havoc msgsender_MSG;
[L5126]              havoc msgvalue_MSG;
[L5127]              havoc choice;
[L5128]              havoc __ret_0_totalSupply;
[L5129]              havoc tokenOwner_s591;
[L5130]              havoc balance_s591;
[L5131]              havoc tokenOwner_s763;
[L5132]              havoc spender_s763;
[L5133]              havoc remaining_s763;
[L5134]              havoc to_s647;
[L5135]              havoc tokens_s647;
[L5136]              havoc success_s647;
[L5137]              havoc spender_s675;
[L5138]              havoc tokens_s675;
[L5139]              havoc success_s675;
[L5140]              havoc from_s747;
[L5141]              havoc to_s747;
[L5142]              havoc tokens_s747;
[L5143]              havoc success_s747;
[L5144]              havoc __ret_0_owner;
[L5145]              havoc __ret_0_newOwner;
[L5146]              havoc _newOwner_s220;
[L5147]              havoc __ret_0_symbol;
[L5148]              havoc __ret_0_name;
[L5149]              havoc __ret_0_decimals;
[L5150]              havoc __ret_0_pauseOn;
[L5151]              havoc __ret_0_migrationOn;
[L5152]              havoc arg813_s0;
[L5153]              havoc __ret_0_balances;
[L5154]              havoc arg814_s0;
[L5155]              havoc __ret_0_geeqaddress;
[L5156]              havoc registeraddress_s387;
[L5157]              havoc tokenAddress_s407;
[L5158]              havoc tokens_s407;
[L5159]              havoc success_s407;
[L5160]              havoc __ret_0_totalMinted;
[L5161]              havoc receiver_s579;
[L5162]              havoc token_amt_s579;
[L5163]              havoc spender_s806;
[L5164]              havoc tokens_s806;
[L5165]              havoc data_s806;
[L5166]              havoc success_s806;
[L5167]              havoc tmpNow;
[L5168]              havoc gas;
[L5169]              assume gas > 4000000 && gas <= 8000000;
[L5170]              tmpNow := now;
[L5171]              havoc now;
[L5172]              assume now > tmpNow;
[L5173]              assume msgsender_MSG != null;
[L5174]              assume DType[msgsender_MSG] != SafeMath;
[L5175]              assume DType[msgsender_MSG] != ERC20Interface;
[L5176]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L5177]              assume DType[msgsender_MSG] != Owned;
[L5178]              assume DType[msgsender_MSG] != GEEQToken;
[L5179]              Alloc[msgsender_MSG] := true;
[L5180]  COND FALSE  !(choice == 26)
[L5186]  COND FALSE  !(choice == 25)
[L5192]  COND FALSE  !(choice == 24)
[L5198]  COND FALSE  !(choice == 23)
[L5205]  COND FALSE  !(choice == 22)
[L5212]  COND TRUE   choice == 21
[L5213]              gas := gas - 21000;
[L5214]  COND TRUE   gas >= 0
[L5215]              assume tokens_s747 >= 0 && tokens_s747 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5216]              assume msgvalue_MSG == 0;
[L5217]  CALL        call success_s747 := transferFrom~address~address~uint256_GEEQToken(this, msgsender_MSG, msgvalue_MSG, from_s747, to_s747, tokens_s747);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((p1 != from_s747 || p2 != msgsender_MSG) && from_s747 == to_s747) && tokens_s747 <= balances_GEEQToken[this][from_s747]) && tokens_s747 <= allowed_GEEQToken[this][from_s747][msgsender_MSG]) && tokens_s747 >= 0) && tokens_s747 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_GEEQToken[this][to_s747] >= 0) && balances_GEEQToken[this][to_s747] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_GEEQToken[this][from_s747] >= 0) && balances_GEEQToken[this][from_s747] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_GEEQToken[this][from_s747][msgsender_MSG] >= 0) && allowed_GEEQToken[this][from_s747][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_GEEQToken0 := true;
[L3]                 call_transferFrom_GEEQToken0 := false;
[L3]                 revert := revert_hold;
[L1565]              havoc __exception;
[L1566]              revert := false;
[L1567]  COND TRUE   __exception
[L1568]              __tmp__Balance := Balance;
[L1569]              __tmp__DType := DType;
[L1570]              __tmp__Alloc := Alloc;
[L1571]              __tmp__balance_ADDR := balance_ADDR;
[L1572]              __tmp__M_Ref_int := M_Ref_int;
[L1573]              __tmp__sum_balances0 := sum_balances0;
[L1574]              __tmp__alloc_allowed_GEEQToken_lvl0 := alloc_allowed_GEEQToken_lvl0;
[L1575]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L1576]              __tmp__sum_allowed1 := sum_allowed1;
[L1577]              __tmp__sum_geeqaddress2 := sum_geeqaddress2;
[L1578]              __tmp__Length := Length;
[L1579]              __tmp__now := now;
[L1580]              __tmp__owner_Owned := owner_Owned;
[L1581]              __tmp__newOwner_Owned := newOwner_Owned;
[L1582]              __tmp__symbol_GEEQToken := symbol_GEEQToken;
[L1583]              __tmp__name_GEEQToken := name_GEEQToken;
[L1584]              __tmp__decimals_GEEQToken := decimals_GEEQToken;
[L1585]              __tmp___totalSupply_GEEQToken := _totalSupply_GEEQToken;
[L1586]              __tmp___totalMinted_GEEQToken := _totalMinted_GEEQToken;
[L1587]              __tmp___maxMintable_GEEQToken := _maxMintable_GEEQToken;
[L1588]              __tmp__pauseOn_GEEQToken := pauseOn_GEEQToken;
[L1589]              __tmp__migrationOn_GEEQToken := migrationOn_GEEQToken;
[L1590]              __tmp__balances_GEEQToken := balances_GEEQToken;
[L1591]              __tmp__allowed_GEEQToken := allowed_GEEQToken;
[L1592]              __tmp__geeqaddress_GEEQToken := geeqaddress_GEEQToken;
[L1593]  CALL        call success_s747 := transferFrom~address~address~uint256_GEEQToken__fail(this, msgsender_MSG, msgvalue_MSG, from_s747, to_s747, tokens_s747);
[L3565]  COND FALSE  !(__tmp__pauseOn_GEEQToken[this])
[L3569]  CALL        call __var_17 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__balances_GEEQToken[this][from_s747], tokens_s747);
[L2830]  COND FALSE  !(!(b_s51 <= a_s51))
[L2834]              c_s51 := (a_s51 - b_s51) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2835]              c_s51 := c_s51;
[L3569]  RET         call __var_17 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__balances_GEEQToken[this][from_s747], tokens_s747);
[L3570]  COND FALSE  !(revert)
[L3573]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] - __tmp__balances_GEEQToken[this][from_s747];
[L3574]              __tmp__balances_GEEQToken[this][from_s747] := __var_17;
[L3575]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] + __tmp__balances_GEEQToken[this][from_s747];
[L3576]  CALL        call __var_18 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__allowed_GEEQToken[this][from_s747][msgsender_MSG], tokens_s747);
[L2830]  COND TRUE   !(b_s51 <= a_s51)
[L2831]              revert := true;
[L3576]  RET         call __var_18 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__allowed_GEEQToken[this][from_s747][msgsender_MSG], tokens_s747);
[L3577]  COND TRUE   revert
[L1593]  RET         call success_s747 := transferFrom~address~address~uint256_GEEQToken__fail(this, msgsender_MSG, msgvalue_MSG, from_s747, to_s747, tokens_s747);
[L1594]              assume revert || gas < 0;
[L5217]  RET         call success_s747 := transferFrom~address~address~uint256_GEEQToken(this, msgsender_MSG, msgvalue_MSG, from_s747, to_s747, tokens_s747);
[L5360]  RET         call CorralChoice_GEEQToken(this);

[2020-11-25 16:57:11,195 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 16:57:11,195 INFO  L82        PathProgramCache]: Analyzing trace with hash -1704948089, now seen corresponding path program 1 times
[2020-11-25 16:57:11,196 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 16:57:11,206 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 16:57:11,253 INFO  L134       CoverageAnalysis]: Checked inductivity of 65 backedges. 2 proven. 0 refuted. 0 times theorem prover too weak. 63 trivial. 0 not checked.
[2020-11-25 16:57:11,253 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 16:57:11,254 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [7] imperfect sequences [] total 7
[2020-11-25 16:57:11,254 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 16:57:11,254 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 7 interpolants.
[2020-11-25 16:57:11,254 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=11, Invalid=31, Unknown=0, NotChecked=0, Total=42
[2020-11-25 16:57:11,255 INFO  L87              Difference]: Start difference. First operand 2781 states and 3082 transitions. cyclomatic complexity: 312 Second operand 7 states.
[2020-11-25 16:57:11,744 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 16:57:11,744 INFO  L93              Difference]: Finished difference Result 2835 states and 3191 transitions.
[2020-11-25 16:57:11,744 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 8 states. 
[2020-11-25 16:57:11,744 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2835 states and 3191 transitions.
[2020-11-25 16:57:11,750 INFO  L131   ngComponentsAnalysis]: Automaton has 6 accepting balls. 12
[2020-11-25 16:57:11,756 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2835 states to 2835 states and 3191 transitions.
[2020-11-25 16:57:11,756 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 678
[2020-11-25 16:57:11,756 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 678
[2020-11-25 16:57:11,756 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 2835 states and 3191 transitions.
[2020-11-25 16:57:11,758 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 16:57:11,758 INFO  L728         BuchiCegarLoop]: Abstraction has 2835 states and 3191 transitions.
[2020-11-25 16:57:11,760 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 2835 states and 3191 transitions.
[2020-11-25 16:57:11,772 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 2835 to 2751.
[2020-11-25 16:57:11,772 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 2751 states.
[2020-11-25 16:57:11,775 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 2751 states to 2751 states and 3015 transitions.
[2020-11-25 16:57:11,775 INFO  L751         BuchiCegarLoop]: Abstraction has 2751 states and 3015 transitions.
[2020-11-25 16:57:11,775 INFO  L631         BuchiCegarLoop]: Abstraction has 2751 states and 3015 transitions.
[2020-11-25 16:57:11,775 INFO  L445         BuchiCegarLoop]: ======== Iteration 11============
[2020-11-25 16:57:11,775 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2751 states and 3015 transitions.
[2020-11-25 16:57:11,777 INFO  L131   ngComponentsAnalysis]: Automaton has 3 accepting balls. 6
[2020-11-25 16:57:11,778 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 16:57:11,778 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 16:57:11,778 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 16:57:11,779 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_transferFrom_GEEQToken0 := false;
[L3]                 call_transferFrom_GEEQToken0 := false;
[L3]     CALL        call main();
[L3]                 havoc p2;
[L3]                 havoc p1;
[L5350]              assume null == 0;
[L5351]  CALL        call this := FreshRefGenerator__success();
[L2768]              havoc newRef;
[L2769]              assume Alloc[newRef] == false;
[L2770]              Alloc[newRef] := true;
[L2771]              assume newRef != null;
[L5351]  RET         call this := FreshRefGenerator__success();
[L5352]              assume now >= 0;
[L5353]              assume DType[this] == GEEQToken;
[L5354]              assume msgvalue_MSG == 0;
[L5355]              gas := gas - 53000;
[L5356]  CALL        call GEEQToken_GEEQToken(this, msgsender_MSG, msgvalue_MSG);
[L679]               havoc __exception;
[L680]               revert := false;
[L681]   COND FALSE  !(__exception)
[L710]   CALL        call GEEQToken_GEEQToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3141]  CALL        call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L2920]  CALL        call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2905]              assume msgsender_MSG != null;
[L2906]              Balance[this] := 0;
[L2920]  RET         call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2921]  COND FALSE  !(revert)
[L3141]  RET         call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L3142]  COND FALSE  !(revert)
[L3145]  CALL        call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L2988]  CALL        call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2971]              assume msgsender_MSG != null;
[L2972]              Balance[this] := 0;
[L2973]              owner_Owned[this] := null;
[L2974]              newOwner_Owned[this] := null;
[L2988]  RET         call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2989]  COND FALSE  !(revert)
[L3145]  RET         call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L3146]  COND FALSE  !(revert)
[L3149]  CALL        call GEEQToken_GEEQToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3095]              assume msgsender_MSG != null;
[L3096]              Balance[this] := 0;
[L3097]              symbol_GEEQToken[this] := 1164884495;
[L3098]              name_GEEQToken[this] := 1164884495;
[L3099]              decimals_GEEQToken[this] := 0;
[L3100]              _totalSupply_GEEQToken[this] := 0;
[L3101]              _totalMinted_GEEQToken[this] := 0;
[L3102]              _maxMintable_GEEQToken[this] := 0;
[L3103]              pauseOn_GEEQToken[this] := false;
[L3104]              migrationOn_GEEQToken[this] := false;
[L3105]              balances_GEEQToken[this] := zeroRefintArr();
[L3106]              sum_balances0[this] := 0;
[L3107]              allowed_GEEQToken[this] := zeroRefRefintArr();
[L3108]              sum_allowed1[this] := 0;
[L3109]              geeqaddress_GEEQToken[this] := zeroRefintArr();
[L3111]              symbol_GEEQToken[this] := -15460934;
[L3112]              name_GEEQToken[this] := -1182004402;
[L3113]              decimals_GEEQToken[this] := 18;
[L3114]              _totalMinted_GEEQToken[this] := 0;
[L3115]              _totalSupply_GEEQToken[this] := 0;
[L3116]              __var_2 := decimals_GEEQToken[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3117]              _maxMintable_GEEQToken[this] := 100000000 * (nonlinearPow(10, decimals_GEEQToken[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3118]              owner_Owned[this] := msgsender_MSG;
[L3149]  RET         call GEEQToken_GEEQToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3150]  COND FALSE  !(revert)
[L710]   RET         call GEEQToken_GEEQToken__success(this, msgsender_MSG, msgvalue_MSG);
[L711]               assume !revert && gas >= 0;
[L5356]  RET         call GEEQToken_GEEQToken(this, msgsender_MSG, msgvalue_MSG);
[L5357]              assume !revert && gas >= 0;
[L5360]  CALL        call CorralChoice_GEEQToken(this);
[L5125]              havoc msgsender_MSG;
[L5126]              havoc msgvalue_MSG;
[L5127]              havoc choice;
[L5128]              havoc __ret_0_totalSupply;
[L5129]              havoc tokenOwner_s591;
[L5130]              havoc balance_s591;
[L5131]              havoc tokenOwner_s763;
[L5132]              havoc spender_s763;
[L5133]              havoc remaining_s763;
[L5134]              havoc to_s647;
[L5135]              havoc tokens_s647;
[L5136]              havoc success_s647;
[L5137]              havoc spender_s675;
[L5138]              havoc tokens_s675;
[L5139]              havoc success_s675;
[L5140]              havoc from_s747;
[L5141]              havoc to_s747;
[L5142]              havoc tokens_s747;
[L5143]              havoc success_s747;
[L5144]              havoc __ret_0_owner;
[L5145]              havoc __ret_0_newOwner;
[L5146]              havoc _newOwner_s220;
[L5147]              havoc __ret_0_symbol;
[L5148]              havoc __ret_0_name;
[L5149]              havoc __ret_0_decimals;
[L5150]              havoc __ret_0_pauseOn;
[L5151]              havoc __ret_0_migrationOn;
[L5152]              havoc arg813_s0;
[L5153]              havoc __ret_0_balances;
[L5154]              havoc arg814_s0;
[L5155]              havoc __ret_0_geeqaddress;
[L5156]              havoc registeraddress_s387;
[L5157]              havoc tokenAddress_s407;
[L5158]              havoc tokens_s407;
[L5159]              havoc success_s407;
[L5160]              havoc __ret_0_totalMinted;
[L5161]              havoc receiver_s579;
[L5162]              havoc token_amt_s579;
[L5163]              havoc spender_s806;
[L5164]              havoc tokens_s806;
[L5165]              havoc data_s806;
[L5166]              havoc success_s806;
[L5167]              havoc tmpNow;
[L5168]              havoc gas;
[L5169]              assume gas > 4000000 && gas <= 8000000;
[L5170]              tmpNow := now;
[L5171]              havoc now;
[L5172]              assume now > tmpNow;
[L5173]              assume msgsender_MSG != null;
[L5174]              assume DType[msgsender_MSG] != SafeMath;
[L5175]              assume DType[msgsender_MSG] != ERC20Interface;
[L5176]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L5177]              assume DType[msgsender_MSG] != Owned;
[L5178]              assume DType[msgsender_MSG] != GEEQToken;
[L5179]              Alloc[msgsender_MSG] := true;
[L5180]  COND FALSE  !(choice == 26)
[L5186]  COND FALSE  !(choice == 25)
[L5192]  COND FALSE  !(choice == 24)
[L5198]  COND TRUE   choice == 23
[L5199]              gas := gas - 21000;
[L5200]  COND TRUE   gas >= 0
[L5201]              assume tokens_s647 >= 0 && tokens_s647 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5202]              assume msgvalue_MSG == 0;
[L5203]  CALL        call success_s647 := transfer~address~uint256_GEEQToken(this, msgsender_MSG, msgvalue_MSG, to_s647, tokens_s647);
[L1427]              havoc __exception;
[L1428]              revert := false;
[L1429]  COND FALSE  !(__exception)
[L1458]  CALL        call success_s647 := transfer~address~uint256_GEEQToken__success(this, msgsender_MSG, msgvalue_MSG, to_s647, tokens_s647);
[L3516]  COND FALSE  !(pauseOn_GEEQToken[this])
[L3521]  CALL        call __var_15 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_GEEQToken[this][msgsender_MSG], tokens_s647);
[L2841]  COND FALSE  !(!(b_s51 <= a_s51))
[L2845]              c_s51 := (a_s51 - b_s51) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2846]              c_s51 := c_s51;
[L3521]  RET         call __var_15 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_GEEQToken[this][msgsender_MSG], tokens_s647);
[L3522]  COND FALSE  !(revert)
[L3525]              sum_balances0[this] := sum_balances0[this] - balances_GEEQToken[this][msgsender_MSG];
[L3526]              balances_GEEQToken[this][msgsender_MSG] := __var_15;
[L3527]              sum_balances0[this] := sum_balances0[this] + balances_GEEQToken[this][msgsender_MSG];
[L3528]  CALL        call __var_16 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_GEEQToken[this][to_s647], tokens_s647);
[L2819]              c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2820]  COND FALSE  !(!(c_s26 >= a_s26))
[L2824]              c_s26 := c_s26;
[L3528]  RET         call __var_16 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_GEEQToken[this][to_s647], tokens_s647);
[L3529]  COND FALSE  !(revert)
[L3532]              sum_balances0[this] := sum_balances0[this] - balances_GEEQToken[this][to_s647];
[L3533]              balances_GEEQToken[this][to_s647] := __var_16;
[L3534]              sum_balances0[this] := sum_balances0[this] + balances_GEEQToken[this][to_s647];
[L3535]              assert { :EventEmitted "Transfer_GEEQToken" } true;
[L3536]              success_s647 := true;
[L1458]  RET         call success_s647 := transfer~address~uint256_GEEQToken__success(this, msgsender_MSG, msgvalue_MSG, to_s647, tokens_s647);
[L1459]              assume !revert && gas >= 0;
[L5203]  RET         call success_s647 := transfer~address~uint256_GEEQToken(this, msgsender_MSG, msgvalue_MSG, to_s647, tokens_s647);
[L5360]  RET         call CorralChoice_GEEQToken(this);
[L5360]  CALL        call CorralChoice_GEEQToken(this);
[L5125]              havoc msgsender_MSG;
[L5126]              havoc msgvalue_MSG;
[L5127]              havoc choice;
[L5128]              havoc __ret_0_totalSupply;
[L5129]              havoc tokenOwner_s591;
[L5130]              havoc balance_s591;
[L5131]              havoc tokenOwner_s763;
[L5132]              havoc spender_s763;
[L5133]              havoc remaining_s763;
[L5134]              havoc to_s647;
[L5135]              havoc tokens_s647;
[L5136]              havoc success_s647;
[L5137]              havoc spender_s675;
[L5138]              havoc tokens_s675;
[L5139]              havoc success_s675;
[L5140]              havoc from_s747;
[L5141]              havoc to_s747;
[L5142]              havoc tokens_s747;
[L5143]              havoc success_s747;
[L5144]              havoc __ret_0_owner;
[L5145]              havoc __ret_0_newOwner;
[L5146]              havoc _newOwner_s220;
[L5147]              havoc __ret_0_symbol;
[L5148]              havoc __ret_0_name;
[L5149]              havoc __ret_0_decimals;
[L5150]              havoc __ret_0_pauseOn;
[L5151]              havoc __ret_0_migrationOn;
[L5152]              havoc arg813_s0;
[L5153]              havoc __ret_0_balances;
[L5154]              havoc arg814_s0;
[L5155]              havoc __ret_0_geeqaddress;
[L5156]              havoc registeraddress_s387;
[L5157]              havoc tokenAddress_s407;
[L5158]              havoc tokens_s407;
[L5159]              havoc success_s407;
[L5160]              havoc __ret_0_totalMinted;
[L5161]              havoc receiver_s579;
[L5162]              havoc token_amt_s579;
[L5163]              havoc spender_s806;
[L5164]              havoc tokens_s806;
[L5165]              havoc data_s806;
[L5166]              havoc success_s806;
[L5167]              havoc tmpNow;
[L5168]              havoc gas;
[L5169]              assume gas > 4000000 && gas <= 8000000;
[L5170]              tmpNow := now;
[L5171]              havoc now;
[L5172]              assume now > tmpNow;
[L5173]              assume msgsender_MSG != null;
[L5174]              assume DType[msgsender_MSG] != SafeMath;
[L5175]              assume DType[msgsender_MSG] != ERC20Interface;
[L5176]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L5177]              assume DType[msgsender_MSG] != Owned;
[L5178]              assume DType[msgsender_MSG] != GEEQToken;
[L5179]              Alloc[msgsender_MSG] := true;
[L5180]  COND FALSE  !(choice == 26)
[L5186]  COND FALSE  !(choice == 25)
[L5192]  COND FALSE  !(choice == 24)
[L5198]  COND FALSE  !(choice == 23)
[L5205]  COND FALSE  !(choice == 22)
[L5212]  COND TRUE   choice == 21
[L5213]              gas := gas - 21000;
[L5214]  COND TRUE   gas >= 0
[L5215]              assume tokens_s747 >= 0 && tokens_s747 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5216]              assume msgvalue_MSG == 0;
[L5217]  CALL        call success_s747 := transferFrom~address~address~uint256_GEEQToken(this, msgsender_MSG, msgvalue_MSG, from_s747, to_s747, tokens_s747);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((p1 != from_s747 || p2 != msgsender_MSG) && from_s747 == to_s747) && tokens_s747 <= balances_GEEQToken[this][from_s747]) && tokens_s747 <= allowed_GEEQToken[this][from_s747][msgsender_MSG]) && tokens_s747 >= 0) && tokens_s747 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_GEEQToken[this][to_s747] >= 0) && balances_GEEQToken[this][to_s747] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_GEEQToken[this][from_s747] >= 0) && balances_GEEQToken[this][from_s747] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_GEEQToken[this][from_s747][msgsender_MSG] >= 0) && allowed_GEEQToken[this][from_s747][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_GEEQToken0 := true;
[L3]                 call_transferFrom_GEEQToken0 := false;
[L3]                 revert := revert_hold;
[L1565]              havoc __exception;
[L1566]              revert := false;
[L1567]  COND FALSE  !(__exception)
[L1596]  CALL        call success_s747 := transferFrom~address~address~uint256_GEEQToken__success(this, msgsender_MSG, msgvalue_MSG, from_s747, to_s747, tokens_s747);
[L3600]  COND FALSE  !(pauseOn_GEEQToken[this])
[L3605]  CALL        call __var_17 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_GEEQToken[this][from_s747], tokens_s747);
[L2841]  COND FALSE  !(!(b_s51 <= a_s51))
[L2845]              c_s51 := (a_s51 - b_s51) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2846]              c_s51 := c_s51;
[L3605]  RET         call __var_17 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_GEEQToken[this][from_s747], tokens_s747);
[L3606]  COND FALSE  !(revert)
[L3609]              sum_balances0[this] := sum_balances0[this] - balances_GEEQToken[this][from_s747];
[L3610]              balances_GEEQToken[this][from_s747] := __var_17;
[L3611]              sum_balances0[this] := sum_balances0[this] + balances_GEEQToken[this][from_s747];
[L3612]  CALL        call __var_18 := sub~uint256~uint256_SafeMath__success(this, this, 0, allowed_GEEQToken[this][from_s747][msgsender_MSG], tokens_s747);
[L2841]  COND FALSE  !(!(b_s51 <= a_s51))
[L2845]              c_s51 := (a_s51 - b_s51) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2846]              c_s51 := c_s51;
[L3612]  RET         call __var_18 := sub~uint256~uint256_SafeMath__success(this, this, 0, allowed_GEEQToken[this][from_s747][msgsender_MSG], tokens_s747);
[L3613]  COND FALSE  !(revert)
[L3616]              sum_allowed1[from_s747] := sum_allowed1[from_s747] - allowed_GEEQToken[this][from_s747][msgsender_MSG];
[L3617]              allowed_GEEQToken[this][from_s747][msgsender_MSG] := __var_18;
[L3618]              sum_allowed1[from_s747] := sum_allowed1[from_s747] + allowed_GEEQToken[this][from_s747][msgsender_MSG];
[L3619]  CALL        call __var_19 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_GEEQToken[this][to_s747], tokens_s747);
[L2819]              c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2820]  COND FALSE  !(!(c_s26 >= a_s26))
[L2824]              c_s26 := c_s26;
[L3619]  RET         call __var_19 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_GEEQToken[this][to_s747], tokens_s747);
[L3620]  COND FALSE  !(revert)
[L3623]              sum_balances0[this] := sum_balances0[this] - balances_GEEQToken[this][to_s747];
[L3624]              balances_GEEQToken[this][to_s747] := __var_19;
[L3625]              sum_balances0[this] := sum_balances0[this] + balances_GEEQToken[this][to_s747];
[L3626]              assert { :EventEmitted "Transfer_GEEQToken" } true;
[L3627]              success_s747 := true;
[L1596]  RET         call success_s747 := transferFrom~address~address~uint256_GEEQToken__success(this, msgsender_MSG, msgvalue_MSG, from_s747, to_s747, tokens_s747);
[L1597]              assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !((((((((((((((success_s747 == true && allowed_GEEQToken[this][from_s747][msgsender_MSG] == old(allowed_GEEQToken[this][from_s747][msgsender_MSG]) - tokens_s747) && _totalSupply_GEEQToken[this] == old(_totalSupply_GEEQToken[this])) && balances_GEEQToken[this] == old(balances_GEEQToken[this])) && allowed_GEEQToken[this][p1][p2] == old(allowed_GEEQToken[this][p1][p2])) && symbol_GEEQToken[this] == old(symbol_GEEQToken[this])) && name_GEEQToken[this] == old(name_GEEQToken[this])) && decimals_GEEQToken[this] == old(decimals_GEEQToken[this])) && _totalMinted_GEEQToken[this] == old(_totalMinted_GEEQToken[this])) && _maxMintable_GEEQToken[this] == old(_maxMintable_GEEQToken[this])) && pauseOn_GEEQToken[this] == old(pauseOn_GEEQToken[this])) && migrationOn_GEEQToken[this] == old(migrationOn_GEEQToken[this])) && geeqaddress_GEEQToken[this] == old(geeqaddress_GEEQToken[this])) && owner_Owned[this] == old(owner_Owned[this])) && newOwner_Owned[this] == old(newOwner_Owned[this]));
[L3]                 revert := revert_hold;
[L5217]  RET         call success_s747 := transferFrom~address~address~uint256_GEEQToken(this, msgsender_MSG, msgvalue_MSG, from_s747, to_s747, tokens_s747);
[L5360]  RET         call CorralChoice_GEEQToken(this);

Loop:
[L5360]  CALL        call CorralChoice_GEEQToken(this);
[L5125]              havoc msgsender_MSG;
[L5126]              havoc msgvalue_MSG;
[L5127]              havoc choice;
[L5128]              havoc __ret_0_totalSupply;
[L5129]              havoc tokenOwner_s591;
[L5130]              havoc balance_s591;
[L5131]              havoc tokenOwner_s763;
[L5132]              havoc spender_s763;
[L5133]              havoc remaining_s763;
[L5134]              havoc to_s647;
[L5135]              havoc tokens_s647;
[L5136]              havoc success_s647;
[L5137]              havoc spender_s675;
[L5138]              havoc tokens_s675;
[L5139]              havoc success_s675;
[L5140]              havoc from_s747;
[L5141]              havoc to_s747;
[L5142]              havoc tokens_s747;
[L5143]              havoc success_s747;
[L5144]              havoc __ret_0_owner;
[L5145]              havoc __ret_0_newOwner;
[L5146]              havoc _newOwner_s220;
[L5147]              havoc __ret_0_symbol;
[L5148]              havoc __ret_0_name;
[L5149]              havoc __ret_0_decimals;
[L5150]              havoc __ret_0_pauseOn;
[L5151]              havoc __ret_0_migrationOn;
[L5152]              havoc arg813_s0;
[L5153]              havoc __ret_0_balances;
[L5154]              havoc arg814_s0;
[L5155]              havoc __ret_0_geeqaddress;
[L5156]              havoc registeraddress_s387;
[L5157]              havoc tokenAddress_s407;
[L5158]              havoc tokens_s407;
[L5159]              havoc success_s407;
[L5160]              havoc __ret_0_totalMinted;
[L5161]              havoc receiver_s579;
[L5162]              havoc token_amt_s579;
[L5163]              havoc spender_s806;
[L5164]              havoc tokens_s806;
[L5165]              havoc data_s806;
[L5166]              havoc success_s806;
[L5167]              havoc tmpNow;
[L5168]              havoc gas;
[L5169]              assume gas > 4000000 && gas <= 8000000;
[L5170]              tmpNow := now;
[L5171]              havoc now;
[L5172]              assume now > tmpNow;
[L5173]              assume msgsender_MSG != null;
[L5174]              assume DType[msgsender_MSG] != SafeMath;
[L5175]              assume DType[msgsender_MSG] != ERC20Interface;
[L5176]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L5177]              assume DType[msgsender_MSG] != Owned;
[L5178]              assume DType[msgsender_MSG] != GEEQToken;
[L5179]              Alloc[msgsender_MSG] := true;
[L5180]  COND FALSE  !(choice == 26)
[L5186]  COND FALSE  !(choice == 25)
[L5192]  COND FALSE  !(choice == 24)
[L5198]  COND TRUE   choice == 23
[L5199]              gas := gas - 21000;
[L5200]  COND TRUE   gas >= 0
[L5201]              assume tokens_s647 >= 0 && tokens_s647 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5202]              assume msgvalue_MSG == 0;
[L5203]  CALL        call success_s647 := transfer~address~uint256_GEEQToken(this, msgsender_MSG, msgvalue_MSG, to_s647, tokens_s647);
[L1427]              havoc __exception;
[L1428]              revert := false;
[L1429]  COND FALSE  !(__exception)
[L1458]  CALL        call success_s647 := transfer~address~uint256_GEEQToken__success(this, msgsender_MSG, msgvalue_MSG, to_s647, tokens_s647);
[L3516]  COND FALSE  !(pauseOn_GEEQToken[this])
[L3521]  CALL        call __var_15 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_GEEQToken[this][msgsender_MSG], tokens_s647);
[L2841]  COND FALSE  !(!(b_s51 <= a_s51))
[L2845]              c_s51 := (a_s51 - b_s51) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2846]              c_s51 := c_s51;
[L3521]  RET         call __var_15 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_GEEQToken[this][msgsender_MSG], tokens_s647);
[L3522]  COND FALSE  !(revert)
[L3525]              sum_balances0[this] := sum_balances0[this] - balances_GEEQToken[this][msgsender_MSG];
[L3526]              balances_GEEQToken[this][msgsender_MSG] := __var_15;
[L3527]              sum_balances0[this] := sum_balances0[this] + balances_GEEQToken[this][msgsender_MSG];
[L3528]  CALL        call __var_16 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_GEEQToken[this][to_s647], tokens_s647);
[L2819]              c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2820]  COND FALSE  !(!(c_s26 >= a_s26))
[L2824]              c_s26 := c_s26;
[L3528]  RET         call __var_16 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_GEEQToken[this][to_s647], tokens_s647);
[L3529]  COND FALSE  !(revert)
[L3532]              sum_balances0[this] := sum_balances0[this] - balances_GEEQToken[this][to_s647];
[L3533]              balances_GEEQToken[this][to_s647] := __var_16;
[L3534]              sum_balances0[this] := sum_balances0[this] + balances_GEEQToken[this][to_s647];
[L3535]              assert { :EventEmitted "Transfer_GEEQToken" } true;
[L3536]              success_s647 := true;
[L1458]  RET         call success_s647 := transfer~address~uint256_GEEQToken__success(this, msgsender_MSG, msgvalue_MSG, to_s647, tokens_s647);
[L1459]              assume !revert && gas >= 0;
[L5203]  RET         call success_s647 := transfer~address~uint256_GEEQToken(this, msgsender_MSG, msgvalue_MSG, to_s647, tokens_s647);
[L5360]  RET         call CorralChoice_GEEQToken(this);

[2020-11-25 16:57:11,783 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 16:57:11,783 INFO  L82        PathProgramCache]: Analyzing trace with hash 1621445150, now seen corresponding path program 1 times
[2020-11-25 16:57:11,783 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 16:57:11,822 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 16:57:12,719 INFO  L134       CoverageAnalysis]: Checked inductivity of 66 backedges. 1 proven. 64 refuted. 0 times theorem prover too weak. 1 trivial. 0 not checked.
[2020-11-25 16:57:12,719 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 16:57:12,719 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [42] total 42
[2020-11-25 16:57:12,720 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 16:57:12,720 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 43 interpolants.
[2020-11-25 16:57:12,721 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=148, Invalid=1658, Unknown=0, NotChecked=0, Total=1806
[2020-11-25 16:57:12,721 INFO  L87              Difference]: Start difference. First operand 2751 states and 3015 transitions. cyclomatic complexity: 271 Second operand 43 states.
[2020-11-25 16:57:19,490 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 16:57:19,491 INFO  L93              Difference]: Finished difference Result 2804 states and 3181 transitions.
[2020-11-25 16:57:19,491 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 39 states. 
[2020-11-25 16:57:19,491 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2804 states and 3181 transitions.
[2020-11-25 16:57:19,496 INFO  L131   ngComponentsAnalysis]: Automaton has 8 accepting balls. 16
[2020-11-25 16:57:19,503 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2804 states to 2804 states and 3181 transitions.
[2020-11-25 16:57:19,503 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 664
[2020-11-25 16:57:19,503 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 664
[2020-11-25 16:57:19,503 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 2804 states and 3181 transitions.
[2020-11-25 16:57:19,505 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 16:57:19,505 INFO  L728         BuchiCegarLoop]: Abstraction has 2804 states and 3181 transitions.
[2020-11-25 16:57:19,507 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 2804 states and 3181 transitions.
[2020-11-25 16:57:19,519 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 2804 to 2783.
[2020-11-25 16:57:19,519 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 2783 states.
[2020-11-25 16:57:19,523 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 2783 states to 2783 states and 3109 transitions.
[2020-11-25 16:57:19,523 INFO  L751         BuchiCegarLoop]: Abstraction has 2783 states and 3109 transitions.
[2020-11-25 16:57:19,523 INFO  L631         BuchiCegarLoop]: Abstraction has 2783 states and 3109 transitions.
[2020-11-25 16:57:19,523 INFO  L445         BuchiCegarLoop]: ======== Iteration 12============
[2020-11-25 16:57:19,523 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2783 states and 3109 transitions.
[2020-11-25 16:57:19,525 INFO  L131   ngComponentsAnalysis]: Automaton has 6 accepting balls. 12
[2020-11-25 16:57:19,526 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 16:57:19,526 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 16:57:19,526 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 16:57:19,527 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_transferFrom_GEEQToken0 := false;
[L3]                 call_transferFrom_GEEQToken0 := false;
[L3]     CALL        call main();
[L3]                 havoc p2;
[L3]                 havoc p1;
[L5350]              assume null == 0;
[L5351]  CALL        call this := FreshRefGenerator__success();
[L2768]              havoc newRef;
[L2769]              assume Alloc[newRef] == false;
[L2770]              Alloc[newRef] := true;
[L2771]              assume newRef != null;
[L5351]  RET         call this := FreshRefGenerator__success();
[L5352]              assume now >= 0;
[L5353]              assume DType[this] == GEEQToken;
[L5354]              assume msgvalue_MSG == 0;
[L5355]              gas := gas - 53000;
[L5356]  CALL        call GEEQToken_GEEQToken(this, msgsender_MSG, msgvalue_MSG);
[L679]               havoc __exception;
[L680]               revert := false;
[L681]   COND FALSE  !(__exception)
[L710]   CALL        call GEEQToken_GEEQToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3141]  CALL        call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L2920]  CALL        call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2905]              assume msgsender_MSG != null;
[L2906]              Balance[this] := 0;
[L2920]  RET         call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2921]  COND FALSE  !(revert)
[L3141]  RET         call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L3142]  COND FALSE  !(revert)
[L3145]  CALL        call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L2988]  CALL        call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2971]              assume msgsender_MSG != null;
[L2972]              Balance[this] := 0;
[L2973]              owner_Owned[this] := null;
[L2974]              newOwner_Owned[this] := null;
[L2988]  RET         call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2989]  COND FALSE  !(revert)
[L3145]  RET         call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L3146]  COND FALSE  !(revert)
[L3149]  CALL        call GEEQToken_GEEQToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3095]              assume msgsender_MSG != null;
[L3096]              Balance[this] := 0;
[L3097]              symbol_GEEQToken[this] := 1164884495;
[L3098]              name_GEEQToken[this] := 1164884495;
[L3099]              decimals_GEEQToken[this] := 0;
[L3100]              _totalSupply_GEEQToken[this] := 0;
[L3101]              _totalMinted_GEEQToken[this] := 0;
[L3102]              _maxMintable_GEEQToken[this] := 0;
[L3103]              pauseOn_GEEQToken[this] := false;
[L3104]              migrationOn_GEEQToken[this] := false;
[L3105]              balances_GEEQToken[this] := zeroRefintArr();
[L3106]              sum_balances0[this] := 0;
[L3107]              allowed_GEEQToken[this] := zeroRefRefintArr();
[L3108]              sum_allowed1[this] := 0;
[L3109]              geeqaddress_GEEQToken[this] := zeroRefintArr();
[L3111]              symbol_GEEQToken[this] := -15460934;
[L3112]              name_GEEQToken[this] := -1182004402;
[L3113]              decimals_GEEQToken[this] := 18;
[L3114]              _totalMinted_GEEQToken[this] := 0;
[L3115]              _totalSupply_GEEQToken[this] := 0;
[L3116]              __var_2 := decimals_GEEQToken[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3117]              _maxMintable_GEEQToken[this] := 100000000 * (nonlinearPow(10, decimals_GEEQToken[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3118]              owner_Owned[this] := msgsender_MSG;
[L3149]  RET         call GEEQToken_GEEQToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3150]  COND FALSE  !(revert)
[L710]   RET         call GEEQToken_GEEQToken__success(this, msgsender_MSG, msgvalue_MSG);
[L711]               assume !revert && gas >= 0;
[L5356]  RET         call GEEQToken_GEEQToken(this, msgsender_MSG, msgvalue_MSG);
[L5357]              assume !revert && gas >= 0;
[L5360]  CALL        call CorralChoice_GEEQToken(this);
[L5125]              havoc msgsender_MSG;
[L5126]              havoc msgvalue_MSG;
[L5127]              havoc choice;
[L5128]              havoc __ret_0_totalSupply;
[L5129]              havoc tokenOwner_s591;
[L5130]              havoc balance_s591;
[L5131]              havoc tokenOwner_s763;
[L5132]              havoc spender_s763;
[L5133]              havoc remaining_s763;
[L5134]              havoc to_s647;
[L5135]              havoc tokens_s647;
[L5136]              havoc success_s647;
[L5137]              havoc spender_s675;
[L5138]              havoc tokens_s675;
[L5139]              havoc success_s675;
[L5140]              havoc from_s747;
[L5141]              havoc to_s747;
[L5142]              havoc tokens_s747;
[L5143]              havoc success_s747;
[L5144]              havoc __ret_0_owner;
[L5145]              havoc __ret_0_newOwner;
[L5146]              havoc _newOwner_s220;
[L5147]              havoc __ret_0_symbol;
[L5148]              havoc __ret_0_name;
[L5149]              havoc __ret_0_decimals;
[L5150]              havoc __ret_0_pauseOn;
[L5151]              havoc __ret_0_migrationOn;
[L5152]              havoc arg813_s0;
[L5153]              havoc __ret_0_balances;
[L5154]              havoc arg814_s0;
[L5155]              havoc __ret_0_geeqaddress;
[L5156]              havoc registeraddress_s387;
[L5157]              havoc tokenAddress_s407;
[L5158]              havoc tokens_s407;
[L5159]              havoc success_s407;
[L5160]              havoc __ret_0_totalMinted;
[L5161]              havoc receiver_s579;
[L5162]              havoc token_amt_s579;
[L5163]              havoc spender_s806;
[L5164]              havoc tokens_s806;
[L5165]              havoc data_s806;
[L5166]              havoc success_s806;
[L5167]              havoc tmpNow;
[L5168]              havoc gas;
[L5169]              assume gas > 4000000 && gas <= 8000000;
[L5170]              tmpNow := now;
[L5171]              havoc now;
[L5172]              assume now > tmpNow;
[L5173]              assume msgsender_MSG != null;
[L5174]              assume DType[msgsender_MSG] != SafeMath;
[L5175]              assume DType[msgsender_MSG] != ERC20Interface;
[L5176]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L5177]              assume DType[msgsender_MSG] != Owned;
[L5178]              assume DType[msgsender_MSG] != GEEQToken;
[L5179]              Alloc[msgsender_MSG] := true;
[L5180]  COND FALSE  !(choice == 26)
[L5186]  COND FALSE  !(choice == 25)
[L5192]  COND FALSE  !(choice == 24)
[L5198]  COND TRUE   choice == 23
[L5199]              gas := gas - 21000;
[L5200]  COND TRUE   gas >= 0
[L5201]              assume tokens_s647 >= 0 && tokens_s647 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5202]              assume msgvalue_MSG == 0;
[L5203]  CALL        call success_s647 := transfer~address~uint256_GEEQToken(this, msgsender_MSG, msgvalue_MSG, to_s647, tokens_s647);
[L1427]              havoc __exception;
[L1428]              revert := false;
[L1429]  COND FALSE  !(__exception)
[L1458]  CALL        call success_s647 := transfer~address~uint256_GEEQToken__success(this, msgsender_MSG, msgvalue_MSG, to_s647, tokens_s647);
[L3516]  COND FALSE  !(pauseOn_GEEQToken[this])
[L3521]  CALL        call __var_15 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_GEEQToken[this][msgsender_MSG], tokens_s647);
[L2841]  COND FALSE  !(!(b_s51 <= a_s51))
[L2845]              c_s51 := (a_s51 - b_s51) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2846]              c_s51 := c_s51;
[L3521]  RET         call __var_15 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_GEEQToken[this][msgsender_MSG], tokens_s647);
[L3522]  COND FALSE  !(revert)
[L3525]              sum_balances0[this] := sum_balances0[this] - balances_GEEQToken[this][msgsender_MSG];
[L3526]              balances_GEEQToken[this][msgsender_MSG] := __var_15;
[L3527]              sum_balances0[this] := sum_balances0[this] + balances_GEEQToken[this][msgsender_MSG];
[L3528]  CALL        call __var_16 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_GEEQToken[this][to_s647], tokens_s647);
[L2819]              c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2820]  COND FALSE  !(!(c_s26 >= a_s26))
[L2824]              c_s26 := c_s26;
[L3528]  RET         call __var_16 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_GEEQToken[this][to_s647], tokens_s647);
[L3529]  COND FALSE  !(revert)
[L3532]              sum_balances0[this] := sum_balances0[this] - balances_GEEQToken[this][to_s647];
[L3533]              balances_GEEQToken[this][to_s647] := __var_16;
[L3534]              sum_balances0[this] := sum_balances0[this] + balances_GEEQToken[this][to_s647];
[L3535]              assert { :EventEmitted "Transfer_GEEQToken" } true;
[L3536]              success_s647 := true;
[L1458]  RET         call success_s647 := transfer~address~uint256_GEEQToken__success(this, msgsender_MSG, msgvalue_MSG, to_s647, tokens_s647);
[L1459]              assume !revert && gas >= 0;
[L5203]  RET         call success_s647 := transfer~address~uint256_GEEQToken(this, msgsender_MSG, msgvalue_MSG, to_s647, tokens_s647);
[L5360]  RET         call CorralChoice_GEEQToken(this);
[L5360]  CALL        call CorralChoice_GEEQToken(this);
[L5125]              havoc msgsender_MSG;
[L5126]              havoc msgvalue_MSG;
[L5127]              havoc choice;
[L5128]              havoc __ret_0_totalSupply;
[L5129]              havoc tokenOwner_s591;
[L5130]              havoc balance_s591;
[L5131]              havoc tokenOwner_s763;
[L5132]              havoc spender_s763;
[L5133]              havoc remaining_s763;
[L5134]              havoc to_s647;
[L5135]              havoc tokens_s647;
[L5136]              havoc success_s647;
[L5137]              havoc spender_s675;
[L5138]              havoc tokens_s675;
[L5139]              havoc success_s675;
[L5140]              havoc from_s747;
[L5141]              havoc to_s747;
[L5142]              havoc tokens_s747;
[L5143]              havoc success_s747;
[L5144]              havoc __ret_0_owner;
[L5145]              havoc __ret_0_newOwner;
[L5146]              havoc _newOwner_s220;
[L5147]              havoc __ret_0_symbol;
[L5148]              havoc __ret_0_name;
[L5149]              havoc __ret_0_decimals;
[L5150]              havoc __ret_0_pauseOn;
[L5151]              havoc __ret_0_migrationOn;
[L5152]              havoc arg813_s0;
[L5153]              havoc __ret_0_balances;
[L5154]              havoc arg814_s0;
[L5155]              havoc __ret_0_geeqaddress;
[L5156]              havoc registeraddress_s387;
[L5157]              havoc tokenAddress_s407;
[L5158]              havoc tokens_s407;
[L5159]              havoc success_s407;
[L5160]              havoc __ret_0_totalMinted;
[L5161]              havoc receiver_s579;
[L5162]              havoc token_amt_s579;
[L5163]              havoc spender_s806;
[L5164]              havoc tokens_s806;
[L5165]              havoc data_s806;
[L5166]              havoc success_s806;
[L5167]              havoc tmpNow;
[L5168]              havoc gas;
[L5169]              assume gas > 4000000 && gas <= 8000000;
[L5170]              tmpNow := now;
[L5171]              havoc now;
[L5172]              assume now > tmpNow;
[L5173]              assume msgsender_MSG != null;
[L5174]              assume DType[msgsender_MSG] != SafeMath;
[L5175]              assume DType[msgsender_MSG] != ERC20Interface;
[L5176]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L5177]              assume DType[msgsender_MSG] != Owned;
[L5178]              assume DType[msgsender_MSG] != GEEQToken;
[L5179]              Alloc[msgsender_MSG] := true;
[L5180]  COND FALSE  !(choice == 26)
[L5186]  COND FALSE  !(choice == 25)
[L5192]  COND FALSE  !(choice == 24)
[L5198]  COND FALSE  !(choice == 23)
[L5205]  COND FALSE  !(choice == 22)
[L5212]  COND TRUE   choice == 21
[L5213]              gas := gas - 21000;
[L5214]  COND TRUE   gas >= 0
[L5215]              assume tokens_s747 >= 0 && tokens_s747 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5216]              assume msgvalue_MSG == 0;
[L5217]  CALL        call success_s747 := transferFrom~address~address~uint256_GEEQToken(this, msgsender_MSG, msgvalue_MSG, from_s747, to_s747, tokens_s747);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((p1 != from_s747 || p2 != msgsender_MSG) && from_s747 == to_s747) && tokens_s747 <= balances_GEEQToken[this][from_s747]) && tokens_s747 <= allowed_GEEQToken[this][from_s747][msgsender_MSG]) && tokens_s747 >= 0) && tokens_s747 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_GEEQToken[this][to_s747] >= 0) && balances_GEEQToken[this][to_s747] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_GEEQToken[this][from_s747] >= 0) && balances_GEEQToken[this][from_s747] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_GEEQToken[this][from_s747][msgsender_MSG] >= 0) && allowed_GEEQToken[this][from_s747][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_GEEQToken0 := true;
[L3]                 call_transferFrom_GEEQToken0 := false;
[L3]                 revert := revert_hold;
[L1565]              havoc __exception;
[L1566]              revert := false;
[L1567]  COND TRUE   __exception
[L1568]              __tmp__Balance := Balance;
[L1569]              __tmp__DType := DType;
[L1570]              __tmp__Alloc := Alloc;
[L1571]              __tmp__balance_ADDR := balance_ADDR;
[L1572]              __tmp__M_Ref_int := M_Ref_int;
[L1573]              __tmp__sum_balances0 := sum_balances0;
[L1574]              __tmp__alloc_allowed_GEEQToken_lvl0 := alloc_allowed_GEEQToken_lvl0;
[L1575]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L1576]              __tmp__sum_allowed1 := sum_allowed1;
[L1577]              __tmp__sum_geeqaddress2 := sum_geeqaddress2;
[L1578]              __tmp__Length := Length;
[L1579]              __tmp__now := now;
[L1580]              __tmp__owner_Owned := owner_Owned;
[L1581]              __tmp__newOwner_Owned := newOwner_Owned;
[L1582]              __tmp__symbol_GEEQToken := symbol_GEEQToken;
[L1583]              __tmp__name_GEEQToken := name_GEEQToken;
[L1584]              __tmp__decimals_GEEQToken := decimals_GEEQToken;
[L1585]              __tmp___totalSupply_GEEQToken := _totalSupply_GEEQToken;
[L1586]              __tmp___totalMinted_GEEQToken := _totalMinted_GEEQToken;
[L1587]              __tmp___maxMintable_GEEQToken := _maxMintable_GEEQToken;
[L1588]              __tmp__pauseOn_GEEQToken := pauseOn_GEEQToken;
[L1589]              __tmp__migrationOn_GEEQToken := migrationOn_GEEQToken;
[L1590]              __tmp__balances_GEEQToken := balances_GEEQToken;
[L1591]              __tmp__allowed_GEEQToken := allowed_GEEQToken;
[L1592]              __tmp__geeqaddress_GEEQToken := geeqaddress_GEEQToken;
[L1593]  CALL        call success_s747 := transferFrom~address~address~uint256_GEEQToken__fail(this, msgsender_MSG, msgvalue_MSG, from_s747, to_s747, tokens_s747);
[L3565]  COND FALSE  !(__tmp__pauseOn_GEEQToken[this])
[L3569]  CALL        call __var_17 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__balances_GEEQToken[this][from_s747], tokens_s747);
[L2830]  COND FALSE  !(!(b_s51 <= a_s51))
[L2834]              c_s51 := (a_s51 - b_s51) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2835]              c_s51 := c_s51;
[L3569]  RET         call __var_17 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__balances_GEEQToken[this][from_s747], tokens_s747);
[L3570]  COND FALSE  !(revert)
[L3573]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] - __tmp__balances_GEEQToken[this][from_s747];
[L3574]              __tmp__balances_GEEQToken[this][from_s747] := __var_17;
[L3575]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] + __tmp__balances_GEEQToken[this][from_s747];
[L3576]  CALL        call __var_18 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__allowed_GEEQToken[this][from_s747][msgsender_MSG], tokens_s747);
[L2830]  COND FALSE  !(!(b_s51 <= a_s51))
[L2834]              c_s51 := (a_s51 - b_s51) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2835]              c_s51 := c_s51;
[L3576]  RET         call __var_18 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__allowed_GEEQToken[this][from_s747][msgsender_MSG], tokens_s747);
[L3577]  COND FALSE  !(revert)
[L3580]              __tmp__sum_allowed1[from_s747] := __tmp__sum_allowed1[from_s747] - __tmp__allowed_GEEQToken[this][from_s747][msgsender_MSG];
[L3581]              __tmp__allowed_GEEQToken[this][from_s747][msgsender_MSG] := __var_18;
[L3582]              __tmp__sum_allowed1[from_s747] := __tmp__sum_allowed1[from_s747] + __tmp__allowed_GEEQToken[this][from_s747][msgsender_MSG];
[L3583]  CALL        call __var_19 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__balances_GEEQToken[this][to_s747], tokens_s747);
[L2808]              c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2809]  COND TRUE   !(c_s26 >= a_s26)
[L2810]              revert := true;
[L3583]  RET         call __var_19 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__balances_GEEQToken[this][to_s747], tokens_s747);
[L3584]  COND TRUE   revert
[L1593]  RET         call success_s747 := transferFrom~address~address~uint256_GEEQToken__fail(this, msgsender_MSG, msgvalue_MSG, from_s747, to_s747, tokens_s747);
[L1594]              assume revert || gas < 0;
[L5217]  RET         call success_s747 := transferFrom~address~address~uint256_GEEQToken(this, msgsender_MSG, msgvalue_MSG, from_s747, to_s747, tokens_s747);
[L5360]  RET         call CorralChoice_GEEQToken(this);

Loop:
[L5360]  CALL        call CorralChoice_GEEQToken(this);
[L5125]              havoc msgsender_MSG;
[L5126]              havoc msgvalue_MSG;
[L5127]              havoc choice;
[L5128]              havoc __ret_0_totalSupply;
[L5129]              havoc tokenOwner_s591;
[L5130]              havoc balance_s591;
[L5131]              havoc tokenOwner_s763;
[L5132]              havoc spender_s763;
[L5133]              havoc remaining_s763;
[L5134]              havoc to_s647;
[L5135]              havoc tokens_s647;
[L5136]              havoc success_s647;
[L5137]              havoc spender_s675;
[L5138]              havoc tokens_s675;
[L5139]              havoc success_s675;
[L5140]              havoc from_s747;
[L5141]              havoc to_s747;
[L5142]              havoc tokens_s747;
[L5143]              havoc success_s747;
[L5144]              havoc __ret_0_owner;
[L5145]              havoc __ret_0_newOwner;
[L5146]              havoc _newOwner_s220;
[L5147]              havoc __ret_0_symbol;
[L5148]              havoc __ret_0_name;
[L5149]              havoc __ret_0_decimals;
[L5150]              havoc __ret_0_pauseOn;
[L5151]              havoc __ret_0_migrationOn;
[L5152]              havoc arg813_s0;
[L5153]              havoc __ret_0_balances;
[L5154]              havoc arg814_s0;
[L5155]              havoc __ret_0_geeqaddress;
[L5156]              havoc registeraddress_s387;
[L5157]              havoc tokenAddress_s407;
[L5158]              havoc tokens_s407;
[L5159]              havoc success_s407;
[L5160]              havoc __ret_0_totalMinted;
[L5161]              havoc receiver_s579;
[L5162]              havoc token_amt_s579;
[L5163]              havoc spender_s806;
[L5164]              havoc tokens_s806;
[L5165]              havoc data_s806;
[L5166]              havoc success_s806;
[L5167]              havoc tmpNow;
[L5168]              havoc gas;
[L5169]              assume gas > 4000000 && gas <= 8000000;
[L5170]              tmpNow := now;
[L5171]              havoc now;
[L5172]              assume now > tmpNow;
[L5173]              assume msgsender_MSG != null;
[L5174]              assume DType[msgsender_MSG] != SafeMath;
[L5175]              assume DType[msgsender_MSG] != ERC20Interface;
[L5176]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L5177]              assume DType[msgsender_MSG] != Owned;
[L5178]              assume DType[msgsender_MSG] != GEEQToken;
[L5179]              Alloc[msgsender_MSG] := true;
[L5180]  COND TRUE   choice == 26
[L5181]              gas := gas - 21000;
[L5182]  COND FALSE  !(gas >= 0)
[L5360]  RET         call CorralChoice_GEEQToken(this);

[2020-11-25 16:57:19,529 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 16:57:19,529 INFO  L82        PathProgramCache]: Analyzing trace with hash 457845851, now seen corresponding path program 1 times
[2020-11-25 16:57:19,530 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 16:57:19,541 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 16:57:19,653 INFO  L134       CoverageAnalysis]: Checked inductivity of 66 backedges. 0 proven. 3 refuted. 0 times theorem prover too weak. 63 trivial. 0 not checked.
[2020-11-25 16:57:19,653 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 16:57:19,653 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [16] total 16
[2020-11-25 16:57:19,653 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 16:57:19,653 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 17 interpolants.
[2020-11-25 16:57:19,654 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=32, Invalid=240, Unknown=0, NotChecked=0, Total=272
[2020-11-25 16:57:19,654 INFO  L87              Difference]: Start difference. First operand 2783 states and 3109 transitions. cyclomatic complexity: 340 Second operand 17 states.
[2020-11-25 16:57:21,449 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 16:57:21,449 INFO  L93              Difference]: Finished difference Result 2804 states and 3156 transitions.
[2020-11-25 16:57:21,449 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 17 states. 
[2020-11-25 16:57:21,449 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2804 states and 3156 transitions.
[2020-11-25 16:57:21,455 INFO  L131   ngComponentsAnalysis]: Automaton has 6 accepting balls. 12
[2020-11-25 16:57:21,461 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2804 states to 2804 states and 3156 transitions.
[2020-11-25 16:57:21,461 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 662
[2020-11-25 16:57:21,461 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 662
[2020-11-25 16:57:21,461 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 2804 states and 3156 transitions.
[2020-11-25 16:57:21,463 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 16:57:21,463 INFO  L728         BuchiCegarLoop]: Abstraction has 2804 states and 3156 transitions.
[2020-11-25 16:57:21,465 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 2804 states and 3156 transitions.
[2020-11-25 16:57:21,477 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 2804 to 2791.
[2020-11-25 16:57:21,477 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 2791 states.
[2020-11-25 16:57:21,480 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 2791 states to 2791 states and 3143 transitions.
[2020-11-25 16:57:21,480 INFO  L751         BuchiCegarLoop]: Abstraction has 2791 states and 3143 transitions.
[2020-11-25 16:57:21,480 INFO  L631         BuchiCegarLoop]: Abstraction has 2791 states and 3143 transitions.
[2020-11-25 16:57:21,480 INFO  L445         BuchiCegarLoop]: ======== Iteration 13============
[2020-11-25 16:57:21,480 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2791 states and 3143 transitions.
[2020-11-25 16:57:21,483 INFO  L131   ngComponentsAnalysis]: Automaton has 6 accepting balls. 12
[2020-11-25 16:57:21,483 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 16:57:21,483 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 16:57:21,484 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 16:57:21,484 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_transferFrom_GEEQToken0 := false;
[L3]                 call_transferFrom_GEEQToken0 := false;
[L3]     CALL        call main();
[L3]                 havoc p2;
[L3]                 havoc p1;
[L5350]              assume null == 0;
[L5351]  CALL        call this := FreshRefGenerator__success();
[L2768]              havoc newRef;
[L2769]              assume Alloc[newRef] == false;
[L2770]              Alloc[newRef] := true;
[L2771]              assume newRef != null;
[L5351]  RET         call this := FreshRefGenerator__success();
[L5352]              assume now >= 0;
[L5353]              assume DType[this] == GEEQToken;
[L5354]              assume msgvalue_MSG == 0;
[L5355]              gas := gas - 53000;
[L5356]  CALL        call GEEQToken_GEEQToken(this, msgsender_MSG, msgvalue_MSG);
[L679]               havoc __exception;
[L680]               revert := false;
[L681]   COND FALSE  !(__exception)
[L710]   CALL        call GEEQToken_GEEQToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3141]  CALL        call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L2920]  CALL        call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2905]              assume msgsender_MSG != null;
[L2906]              Balance[this] := 0;
[L2920]  RET         call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2921]  COND FALSE  !(revert)
[L3141]  RET         call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L3142]  COND FALSE  !(revert)
[L3145]  CALL        call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L2988]  CALL        call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2971]              assume msgsender_MSG != null;
[L2972]              Balance[this] := 0;
[L2973]              owner_Owned[this] := null;
[L2974]              newOwner_Owned[this] := null;
[L2988]  RET         call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2989]  COND FALSE  !(revert)
[L3145]  RET         call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L3146]  COND FALSE  !(revert)
[L3149]  CALL        call GEEQToken_GEEQToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3095]              assume msgsender_MSG != null;
[L3096]              Balance[this] := 0;
[L3097]              symbol_GEEQToken[this] := 1164884495;
[L3098]              name_GEEQToken[this] := 1164884495;
[L3099]              decimals_GEEQToken[this] := 0;
[L3100]              _totalSupply_GEEQToken[this] := 0;
[L3101]              _totalMinted_GEEQToken[this] := 0;
[L3102]              _maxMintable_GEEQToken[this] := 0;
[L3103]              pauseOn_GEEQToken[this] := false;
[L3104]              migrationOn_GEEQToken[this] := false;
[L3105]              balances_GEEQToken[this] := zeroRefintArr();
[L3106]              sum_balances0[this] := 0;
[L3107]              allowed_GEEQToken[this] := zeroRefRefintArr();
[L3108]              sum_allowed1[this] := 0;
[L3109]              geeqaddress_GEEQToken[this] := zeroRefintArr();
[L3111]              symbol_GEEQToken[this] := -15460934;
[L3112]              name_GEEQToken[this] := -1182004402;
[L3113]              decimals_GEEQToken[this] := 18;
[L3114]              _totalMinted_GEEQToken[this] := 0;
[L3115]              _totalSupply_GEEQToken[this] := 0;
[L3116]              __var_2 := decimals_GEEQToken[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3117]              _maxMintable_GEEQToken[this] := 100000000 * (nonlinearPow(10, decimals_GEEQToken[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3118]              owner_Owned[this] := msgsender_MSG;
[L3149]  RET         call GEEQToken_GEEQToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3150]  COND FALSE  !(revert)
[L710]   RET         call GEEQToken_GEEQToken__success(this, msgsender_MSG, msgvalue_MSG);
[L711]               assume !revert && gas >= 0;
[L5356]  RET         call GEEQToken_GEEQToken(this, msgsender_MSG, msgvalue_MSG);
[L5357]              assume !revert && gas >= 0;
[L5360]  CALL        call CorralChoice_GEEQToken(this);
[L5125]              havoc msgsender_MSG;
[L5126]              havoc msgvalue_MSG;
[L5127]              havoc choice;
[L5128]              havoc __ret_0_totalSupply;
[L5129]              havoc tokenOwner_s591;
[L5130]              havoc balance_s591;
[L5131]              havoc tokenOwner_s763;
[L5132]              havoc spender_s763;
[L5133]              havoc remaining_s763;
[L5134]              havoc to_s647;
[L5135]              havoc tokens_s647;
[L5136]              havoc success_s647;
[L5137]              havoc spender_s675;
[L5138]              havoc tokens_s675;
[L5139]              havoc success_s675;
[L5140]              havoc from_s747;
[L5141]              havoc to_s747;
[L5142]              havoc tokens_s747;
[L5143]              havoc success_s747;
[L5144]              havoc __ret_0_owner;
[L5145]              havoc __ret_0_newOwner;
[L5146]              havoc _newOwner_s220;
[L5147]              havoc __ret_0_symbol;
[L5148]              havoc __ret_0_name;
[L5149]              havoc __ret_0_decimals;
[L5150]              havoc __ret_0_pauseOn;
[L5151]              havoc __ret_0_migrationOn;
[L5152]              havoc arg813_s0;
[L5153]              havoc __ret_0_balances;
[L5154]              havoc arg814_s0;
[L5155]              havoc __ret_0_geeqaddress;
[L5156]              havoc registeraddress_s387;
[L5157]              havoc tokenAddress_s407;
[L5158]              havoc tokens_s407;
[L5159]              havoc success_s407;
[L5160]              havoc __ret_0_totalMinted;
[L5161]              havoc receiver_s579;
[L5162]              havoc token_amt_s579;
[L5163]              havoc spender_s806;
[L5164]              havoc tokens_s806;
[L5165]              havoc data_s806;
[L5166]              havoc success_s806;
[L5167]              havoc tmpNow;
[L5168]              havoc gas;
[L5169]              assume gas > 4000000 && gas <= 8000000;
[L5170]              tmpNow := now;
[L5171]              havoc now;
[L5172]              assume now > tmpNow;
[L5173]              assume msgsender_MSG != null;
[L5174]              assume DType[msgsender_MSG] != SafeMath;
[L5175]              assume DType[msgsender_MSG] != ERC20Interface;
[L5176]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L5177]              assume DType[msgsender_MSG] != Owned;
[L5178]              assume DType[msgsender_MSG] != GEEQToken;
[L5179]              Alloc[msgsender_MSG] := true;
[L5180]  COND FALSE  !(choice == 26)
[L5186]  COND FALSE  !(choice == 25)
[L5192]  COND FALSE  !(choice == 24)
[L5198]  COND FALSE  !(choice == 23)
[L5205]  COND FALSE  !(choice == 22)
[L5212]  COND FALSE  !(choice == 21)
[L5219]  COND FALSE  !(choice == 20)
[L5225]  COND FALSE  !(choice == 19)
[L5231]  COND FALSE  !(choice == 18)
[L5237]  COND FALSE  !(choice == 17)
[L5243]  COND FALSE  !(choice == 16)
[L5249]  COND FALSE  !(choice == 15)
[L5255]  COND FALSE  !(choice == 14)
[L5261]  COND FALSE  !(choice == 13)
[L5267]  COND FALSE  !(choice == 12)
[L5273]  COND FALSE  !(choice == 11)
[L5279]  COND FALSE  !(choice == 10)
[L5285]  COND FALSE  !(choice == 9)
[L5291]  COND FALSE  !(choice == 8)
[L5298]  COND FALSE  !(choice == 7)
[L5304]  COND TRUE   choice == 6
[L5305]              gas := gas - 21000;
[L5306]  COND TRUE   gas >= 0
[L5307]              assume msgvalue_MSG == 0;
[L5308]  CALL        call pauseDisable_GEEQToken(this, msgsender_MSG, msgvalue_MSG);
[L952]               havoc __exception;
[L953]               revert := false;
[L954]   COND FALSE  !(__exception)
[L983]   CALL        call pauseDisable_GEEQToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3260]  CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4783]  COND FALSE  !(!(msgsender_MSG == owner_Owned[this]))
[L3260]  RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3261]  COND FALSE  !(revert)
[L3264]              pauseOn_GEEQToken[this] := false;
[L983]   RET         call pauseDisable_GEEQToken__success(this, msgsender_MSG, msgvalue_MSG);
[L984]               assume !revert && gas >= 0;
[L5308]  RET         call pauseDisable_GEEQToken(this, msgsender_MSG, msgvalue_MSG);
[L5360]  RET         call CorralChoice_GEEQToken(this);
[L5360]  CALL        call CorralChoice_GEEQToken(this);
[L5125]              havoc msgsender_MSG;
[L5126]              havoc msgvalue_MSG;
[L5127]              havoc choice;
[L5128]              havoc __ret_0_totalSupply;
[L5129]              havoc tokenOwner_s591;
[L5130]              havoc balance_s591;
[L5131]              havoc tokenOwner_s763;
[L5132]              havoc spender_s763;
[L5133]              havoc remaining_s763;
[L5134]              havoc to_s647;
[L5135]              havoc tokens_s647;
[L5136]              havoc success_s647;
[L5137]              havoc spender_s675;
[L5138]              havoc tokens_s675;
[L5139]              havoc success_s675;
[L5140]              havoc from_s747;
[L5141]              havoc to_s747;
[L5142]              havoc tokens_s747;
[L5143]              havoc success_s747;
[L5144]              havoc __ret_0_owner;
[L5145]              havoc __ret_0_newOwner;
[L5146]              havoc _newOwner_s220;
[L5147]              havoc __ret_0_symbol;
[L5148]              havoc __ret_0_name;
[L5149]              havoc __ret_0_decimals;
[L5150]              havoc __ret_0_pauseOn;
[L5151]              havoc __ret_0_migrationOn;
[L5152]              havoc arg813_s0;
[L5153]              havoc __ret_0_balances;
[L5154]              havoc arg814_s0;
[L5155]              havoc __ret_0_geeqaddress;
[L5156]              havoc registeraddress_s387;
[L5157]              havoc tokenAddress_s407;
[L5158]              havoc tokens_s407;
[L5159]              havoc success_s407;
[L5160]              havoc __ret_0_totalMinted;
[L5161]              havoc receiver_s579;
[L5162]              havoc token_amt_s579;
[L5163]              havoc spender_s806;
[L5164]              havoc tokens_s806;
[L5165]              havoc data_s806;
[L5166]              havoc success_s806;
[L5167]              havoc tmpNow;
[L5168]              havoc gas;
[L5169]              assume gas > 4000000 && gas <= 8000000;
[L5170]              tmpNow := now;
[L5171]              havoc now;
[L5172]              assume now > tmpNow;
[L5173]              assume msgsender_MSG != null;
[L5174]              assume DType[msgsender_MSG] != SafeMath;
[L5175]              assume DType[msgsender_MSG] != ERC20Interface;
[L5176]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L5177]              assume DType[msgsender_MSG] != Owned;
[L5178]              assume DType[msgsender_MSG] != GEEQToken;
[L5179]              Alloc[msgsender_MSG] := true;
[L5180]  COND FALSE  !(choice == 26)
[L5186]  COND FALSE  !(choice == 25)
[L5192]  COND FALSE  !(choice == 24)
[L5198]  COND FALSE  !(choice == 23)
[L5205]  COND FALSE  !(choice == 22)
[L5212]  COND TRUE   choice == 21
[L5213]              gas := gas - 21000;
[L5214]  COND TRUE   gas >= 0
[L5215]              assume tokens_s747 >= 0 && tokens_s747 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5216]              assume msgvalue_MSG == 0;
[L5217]  CALL        call success_s747 := transferFrom~address~address~uint256_GEEQToken(this, msgsender_MSG, msgvalue_MSG, from_s747, to_s747, tokens_s747);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((p1 != from_s747 || p2 != msgsender_MSG) && from_s747 == to_s747) && tokens_s747 <= balances_GEEQToken[this][from_s747]) && tokens_s747 <= allowed_GEEQToken[this][from_s747][msgsender_MSG]) && tokens_s747 >= 0) && tokens_s747 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_GEEQToken[this][to_s747] >= 0) && balances_GEEQToken[this][to_s747] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_GEEQToken[this][from_s747] >= 0) && balances_GEEQToken[this][from_s747] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_GEEQToken[this][from_s747][msgsender_MSG] >= 0) && allowed_GEEQToken[this][from_s747][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_GEEQToken0 := true;
[L3]                 call_transferFrom_GEEQToken0 := false;
[L3]                 revert := revert_hold;
[L1565]              havoc __exception;
[L1566]              revert := false;
[L1567]  COND TRUE   __exception
[L1568]              __tmp__Balance := Balance;
[L1569]              __tmp__DType := DType;
[L1570]              __tmp__Alloc := Alloc;
[L1571]              __tmp__balance_ADDR := balance_ADDR;
[L1572]              __tmp__M_Ref_int := M_Ref_int;
[L1573]              __tmp__sum_balances0 := sum_balances0;
[L1574]              __tmp__alloc_allowed_GEEQToken_lvl0 := alloc_allowed_GEEQToken_lvl0;
[L1575]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L1576]              __tmp__sum_allowed1 := sum_allowed1;
[L1577]              __tmp__sum_geeqaddress2 := sum_geeqaddress2;
[L1578]              __tmp__Length := Length;
[L1579]              __tmp__now := now;
[L1580]              __tmp__owner_Owned := owner_Owned;
[L1581]              __tmp__newOwner_Owned := newOwner_Owned;
[L1582]              __tmp__symbol_GEEQToken := symbol_GEEQToken;
[L1583]              __tmp__name_GEEQToken := name_GEEQToken;
[L1584]              __tmp__decimals_GEEQToken := decimals_GEEQToken;
[L1585]              __tmp___totalSupply_GEEQToken := _totalSupply_GEEQToken;
[L1586]              __tmp___totalMinted_GEEQToken := _totalMinted_GEEQToken;
[L1587]              __tmp___maxMintable_GEEQToken := _maxMintable_GEEQToken;
[L1588]              __tmp__pauseOn_GEEQToken := pauseOn_GEEQToken;
[L1589]              __tmp__migrationOn_GEEQToken := migrationOn_GEEQToken;
[L1590]              __tmp__balances_GEEQToken := balances_GEEQToken;
[L1591]              __tmp__allowed_GEEQToken := allowed_GEEQToken;
[L1592]              __tmp__geeqaddress_GEEQToken := geeqaddress_GEEQToken;
[L1593]  CALL        call success_s747 := transferFrom~address~address~uint256_GEEQToken__fail(this, msgsender_MSG, msgvalue_MSG, from_s747, to_s747, tokens_s747);
[L3565]  COND TRUE   __tmp__pauseOn_GEEQToken[this]
[L3566]              revert := true;
[L1593]  RET         call success_s747 := transferFrom~address~address~uint256_GEEQToken__fail(this, msgsender_MSG, msgvalue_MSG, from_s747, to_s747, tokens_s747);
[L1594]              assume revert || gas < 0;
[L5217]  RET         call success_s747 := transferFrom~address~address~uint256_GEEQToken(this, msgsender_MSG, msgvalue_MSG, from_s747, to_s747, tokens_s747);
[L5360]  RET         call CorralChoice_GEEQToken(this);

Loop:
[L5360]  CALL        call CorralChoice_GEEQToken(this);
[L5125]              havoc msgsender_MSG;
[L5126]              havoc msgvalue_MSG;
[L5127]              havoc choice;
[L5128]              havoc __ret_0_totalSupply;
[L5129]              havoc tokenOwner_s591;
[L5130]              havoc balance_s591;
[L5131]              havoc tokenOwner_s763;
[L5132]              havoc spender_s763;
[L5133]              havoc remaining_s763;
[L5134]              havoc to_s647;
[L5135]              havoc tokens_s647;
[L5136]              havoc success_s647;
[L5137]              havoc spender_s675;
[L5138]              havoc tokens_s675;
[L5139]              havoc success_s675;
[L5140]              havoc from_s747;
[L5141]              havoc to_s747;
[L5142]              havoc tokens_s747;
[L5143]              havoc success_s747;
[L5144]              havoc __ret_0_owner;
[L5145]              havoc __ret_0_newOwner;
[L5146]              havoc _newOwner_s220;
[L5147]              havoc __ret_0_symbol;
[L5148]              havoc __ret_0_name;
[L5149]              havoc __ret_0_decimals;
[L5150]              havoc __ret_0_pauseOn;
[L5151]              havoc __ret_0_migrationOn;
[L5152]              havoc arg813_s0;
[L5153]              havoc __ret_0_balances;
[L5154]              havoc arg814_s0;
[L5155]              havoc __ret_0_geeqaddress;
[L5156]              havoc registeraddress_s387;
[L5157]              havoc tokenAddress_s407;
[L5158]              havoc tokens_s407;
[L5159]              havoc success_s407;
[L5160]              havoc __ret_0_totalMinted;
[L5161]              havoc receiver_s579;
[L5162]              havoc token_amt_s579;
[L5163]              havoc spender_s806;
[L5164]              havoc tokens_s806;
[L5165]              havoc data_s806;
[L5166]              havoc success_s806;
[L5167]              havoc tmpNow;
[L5168]              havoc gas;
[L5169]              assume gas > 4000000 && gas <= 8000000;
[L5170]              tmpNow := now;
[L5171]              havoc now;
[L5172]              assume now > tmpNow;
[L5173]              assume msgsender_MSG != null;
[L5174]              assume DType[msgsender_MSG] != SafeMath;
[L5175]              assume DType[msgsender_MSG] != ERC20Interface;
[L5176]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L5177]              assume DType[msgsender_MSG] != Owned;
[L5178]              assume DType[msgsender_MSG] != GEEQToken;
[L5179]              Alloc[msgsender_MSG] := true;
[L5180]  COND FALSE  !(choice == 26)
[L5186]  COND FALSE  !(choice == 25)
[L5192]  COND FALSE  !(choice == 24)
[L5198]  COND FALSE  !(choice == 23)
[L5205]  COND FALSE  !(choice == 22)
[L5212]  COND FALSE  !(choice == 21)
[L5219]  COND FALSE  !(choice == 20)
[L5225]  COND FALSE  !(choice == 19)
[L5231]  COND FALSE  !(choice == 18)
[L5237]  COND FALSE  !(choice == 17)
[L5243]  COND FALSE  !(choice == 16)
[L5249]  COND FALSE  !(choice == 15)
[L5255]  COND FALSE  !(choice == 14)
[L5261]  COND FALSE  !(choice == 13)
[L5267]  COND FALSE  !(choice == 12)
[L5273]  COND FALSE  !(choice == 11)
[L5279]  COND FALSE  !(choice == 10)
[L5285]  COND FALSE  !(choice == 9)
[L5291]  COND FALSE  !(choice == 8)
[L5298]  COND FALSE  !(choice == 7)
[L5304]  COND TRUE   choice == 6
[L5305]              gas := gas - 21000;
[L5306]  COND TRUE   gas >= 0
[L5307]              assume msgvalue_MSG == 0;
[L5308]  CALL        call pauseDisable_GEEQToken(this, msgsender_MSG, msgvalue_MSG);
[L952]               havoc __exception;
[L953]               revert := false;
[L954]   COND FALSE  !(__exception)
[L983]   CALL        call pauseDisable_GEEQToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3260]  CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4783]  COND FALSE  !(!(msgsender_MSG == owner_Owned[this]))
[L3260]  RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3261]  COND FALSE  !(revert)
[L3264]              pauseOn_GEEQToken[this] := false;
[L983]   RET         call pauseDisable_GEEQToken__success(this, msgsender_MSG, msgvalue_MSG);
[L984]               assume !revert && gas >= 0;
[L5308]  RET         call pauseDisable_GEEQToken(this, msgsender_MSG, msgvalue_MSG);
[L5360]  RET         call CorralChoice_GEEQToken(this);

[2020-11-25 16:57:21,487 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 16:57:21,487 INFO  L82        PathProgramCache]: Analyzing trace with hash -1587157759, now seen corresponding path program 1 times
[2020-11-25 16:57:21,488 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 16:57:21,497 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 16:57:21,536 INFO  L134       CoverageAnalysis]: Checked inductivity of 63 backedges. 63 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 16:57:21,536 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 16:57:21,536 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [10] imperfect sequences [] total 10
[2020-11-25 16:57:21,536 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 16:57:21,536 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 11 interpolants.
[2020-11-25 16:57:21,536 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=19, Invalid=91, Unknown=0, NotChecked=0, Total=110
[2020-11-25 16:57:21,537 INFO  L87              Difference]: Start difference. First operand 2791 states and 3143 transitions. cyclomatic complexity: 368 Second operand 11 states.
[2020-11-25 16:57:23,264 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 16:57:23,264 INFO  L93              Difference]: Finished difference Result 5995 states and 7226 transitions.
[2020-11-25 16:57:23,264 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 19 states. 
[2020-11-25 16:57:23,264 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 5995 states and 7226 transitions.
[2020-11-25 16:57:23,279 INFO  L131   ngComponentsAnalysis]: Automaton has 7 accepting balls. 44
[2020-11-25 16:57:23,295 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 5995 states to 5995 states and 7226 transitions.
[2020-11-25 16:57:23,295 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1438
[2020-11-25 16:57:23,296 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1438
[2020-11-25 16:57:23,296 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 5995 states and 7226 transitions.
[2020-11-25 16:57:23,301 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 16:57:23,301 INFO  L728         BuchiCegarLoop]: Abstraction has 5995 states and 7226 transitions.
[2020-11-25 16:57:23,303 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 5995 states and 7226 transitions.
[2020-11-25 16:57:23,327 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 5995 to 3381.
[2020-11-25 16:57:23,328 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 3381 states.
[2020-11-25 16:57:23,332 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 3381 states to 3381 states and 3980 transitions.
[2020-11-25 16:57:23,332 INFO  L751         BuchiCegarLoop]: Abstraction has 3381 states and 3980 transitions.
[2020-11-25 16:57:23,332 INFO  L631         BuchiCegarLoop]: Abstraction has 3381 states and 3980 transitions.
[2020-11-25 16:57:23,332 INFO  L445         BuchiCegarLoop]: ======== Iteration 14============
[2020-11-25 16:57:23,333 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 3381 states and 3980 transitions.
[2020-11-25 16:57:23,336 INFO  L131   ngComponentsAnalysis]: Automaton has 6 accepting balls. 22
[2020-11-25 16:57:23,336 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 16:57:23,336 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 16:57:23,337 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 16:57:23,337 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_transferFrom_GEEQToken0 := false;
[L3]                 call_transferFrom_GEEQToken0 := false;
[L3]     CALL        call main();
[L3]                 havoc p2;
[L3]                 havoc p1;
[L5350]              assume null == 0;
[L5351]  CALL        call this := FreshRefGenerator__success();
[L2768]              havoc newRef;
[L2769]              assume Alloc[newRef] == false;
[L2770]              Alloc[newRef] := true;
[L2771]              assume newRef != null;
[L5351]  RET         call this := FreshRefGenerator__success();
[L5352]              assume now >= 0;
[L5353]              assume DType[this] == GEEQToken;
[L5354]              assume msgvalue_MSG == 0;
[L5355]              gas := gas - 53000;
[L5356]  CALL        call GEEQToken_GEEQToken(this, msgsender_MSG, msgvalue_MSG);
[L679]               havoc __exception;
[L680]               revert := false;
[L681]   COND FALSE  !(__exception)
[L710]   CALL        call GEEQToken_GEEQToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3141]  CALL        call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L2920]  CALL        call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2905]              assume msgsender_MSG != null;
[L2906]              Balance[this] := 0;
[L2920]  RET         call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2921]  COND FALSE  !(revert)
[L3141]  RET         call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L3142]  COND FALSE  !(revert)
[L3145]  CALL        call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L2988]  CALL        call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2971]              assume msgsender_MSG != null;
[L2972]              Balance[this] := 0;
[L2973]              owner_Owned[this] := null;
[L2974]              newOwner_Owned[this] := null;
[L2988]  RET         call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2989]  COND FALSE  !(revert)
[L3145]  RET         call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L3146]  COND FALSE  !(revert)
[L3149]  CALL        call GEEQToken_GEEQToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3095]              assume msgsender_MSG != null;
[L3096]              Balance[this] := 0;
[L3097]              symbol_GEEQToken[this] := 1164884495;
[L3098]              name_GEEQToken[this] := 1164884495;
[L3099]              decimals_GEEQToken[this] := 0;
[L3100]              _totalSupply_GEEQToken[this] := 0;
[L3101]              _totalMinted_GEEQToken[this] := 0;
[L3102]              _maxMintable_GEEQToken[this] := 0;
[L3103]              pauseOn_GEEQToken[this] := false;
[L3104]              migrationOn_GEEQToken[this] := false;
[L3105]              balances_GEEQToken[this] := zeroRefintArr();
[L3106]              sum_balances0[this] := 0;
[L3107]              allowed_GEEQToken[this] := zeroRefRefintArr();
[L3108]              sum_allowed1[this] := 0;
[L3109]              geeqaddress_GEEQToken[this] := zeroRefintArr();
[L3111]              symbol_GEEQToken[this] := -15460934;
[L3112]              name_GEEQToken[this] := -1182004402;
[L3113]              decimals_GEEQToken[this] := 18;
[L3114]              _totalMinted_GEEQToken[this] := 0;
[L3115]              _totalSupply_GEEQToken[this] := 0;
[L3116]              __var_2 := decimals_GEEQToken[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3117]              _maxMintable_GEEQToken[this] := 100000000 * (nonlinearPow(10, decimals_GEEQToken[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3118]              owner_Owned[this] := msgsender_MSG;
[L3149]  RET         call GEEQToken_GEEQToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3150]  COND FALSE  !(revert)
[L710]   RET         call GEEQToken_GEEQToken__success(this, msgsender_MSG, msgvalue_MSG);
[L711]               assume !revert && gas >= 0;
[L5356]  RET         call GEEQToken_GEEQToken(this, msgsender_MSG, msgvalue_MSG);
[L5357]              assume !revert && gas >= 0;
[L5360]  CALL        call CorralChoice_GEEQToken(this);
[L5125]              havoc msgsender_MSG;
[L5126]              havoc msgvalue_MSG;
[L5127]              havoc choice;
[L5128]              havoc __ret_0_totalSupply;
[L5129]              havoc tokenOwner_s591;
[L5130]              havoc balance_s591;
[L5131]              havoc tokenOwner_s763;
[L5132]              havoc spender_s763;
[L5133]              havoc remaining_s763;
[L5134]              havoc to_s647;
[L5135]              havoc tokens_s647;
[L5136]              havoc success_s647;
[L5137]              havoc spender_s675;
[L5138]              havoc tokens_s675;
[L5139]              havoc success_s675;
[L5140]              havoc from_s747;
[L5141]              havoc to_s747;
[L5142]              havoc tokens_s747;
[L5143]              havoc success_s747;
[L5144]              havoc __ret_0_owner;
[L5145]              havoc __ret_0_newOwner;
[L5146]              havoc _newOwner_s220;
[L5147]              havoc __ret_0_symbol;
[L5148]              havoc __ret_0_name;
[L5149]              havoc __ret_0_decimals;
[L5150]              havoc __ret_0_pauseOn;
[L5151]              havoc __ret_0_migrationOn;
[L5152]              havoc arg813_s0;
[L5153]              havoc __ret_0_balances;
[L5154]              havoc arg814_s0;
[L5155]              havoc __ret_0_geeqaddress;
[L5156]              havoc registeraddress_s387;
[L5157]              havoc tokenAddress_s407;
[L5158]              havoc tokens_s407;
[L5159]              havoc success_s407;
[L5160]              havoc __ret_0_totalMinted;
[L5161]              havoc receiver_s579;
[L5162]              havoc token_amt_s579;
[L5163]              havoc spender_s806;
[L5164]              havoc tokens_s806;
[L5165]              havoc data_s806;
[L5166]              havoc success_s806;
[L5167]              havoc tmpNow;
[L5168]              havoc gas;
[L5169]              assume gas > 4000000 && gas <= 8000000;
[L5170]              tmpNow := now;
[L5171]              havoc now;
[L5172]              assume now > tmpNow;
[L5173]              assume msgsender_MSG != null;
[L5174]              assume DType[msgsender_MSG] != SafeMath;
[L5175]              assume DType[msgsender_MSG] != ERC20Interface;
[L5176]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L5177]              assume DType[msgsender_MSG] != Owned;
[L5178]              assume DType[msgsender_MSG] != GEEQToken;
[L5179]              Alloc[msgsender_MSG] := true;
[L5180]  COND FALSE  !(choice == 26)
[L5186]  COND FALSE  !(choice == 25)
[L5192]  COND FALSE  !(choice == 24)
[L5198]  COND FALSE  !(choice == 23)
[L5205]  COND FALSE  !(choice == 22)
[L5212]  COND FALSE  !(choice == 21)
[L5219]  COND FALSE  !(choice == 20)
[L5225]  COND FALSE  !(choice == 19)
[L5231]  COND FALSE  !(choice == 18)
[L5237]  COND FALSE  !(choice == 17)
[L5243]  COND FALSE  !(choice == 16)
[L5249]  COND FALSE  !(choice == 15)
[L5255]  COND FALSE  !(choice == 14)
[L5261]  COND FALSE  !(choice == 13)
[L5267]  COND FALSE  !(choice == 12)
[L5273]  COND FALSE  !(choice == 11)
[L5279]  COND FALSE  !(choice == 10)
[L5285]  COND FALSE  !(choice == 9)
[L5291]  COND FALSE  !(choice == 8)
[L5298]  COND TRUE   choice == 7
[L5299]              gas := gas - 21000;
[L5300]  COND TRUE   gas >= 0
[L5301]              assume msgvalue_MSG == 0;
[L5302]  CALL        call pauseEnable_GEEQToken(this, msgsender_MSG, msgvalue_MSG);
[L885]               havoc __exception;
[L886]               revert := false;
[L887]   COND FALSE  !(__exception)
[L916]   CALL        call pauseEnable_GEEQToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3242]  CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4783]  COND FALSE  !(!(msgsender_MSG == owner_Owned[this]))
[L3242]  RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3243]  COND FALSE  !(revert)
[L3246]              pauseOn_GEEQToken[this] := true;
[L916]   RET         call pauseEnable_GEEQToken__success(this, msgsender_MSG, msgvalue_MSG);
[L917]               assume !revert && gas >= 0;
[L5302]  RET         call pauseEnable_GEEQToken(this, msgsender_MSG, msgvalue_MSG);
[L5360]  RET         call CorralChoice_GEEQToken(this);
[L5360]  CALL        call CorralChoice_GEEQToken(this);
[L5125]              havoc msgsender_MSG;
[L5126]              havoc msgvalue_MSG;
[L5127]              havoc choice;
[L5128]              havoc __ret_0_totalSupply;
[L5129]              havoc tokenOwner_s591;
[L5130]              havoc balance_s591;
[L5131]              havoc tokenOwner_s763;
[L5132]              havoc spender_s763;
[L5133]              havoc remaining_s763;
[L5134]              havoc to_s647;
[L5135]              havoc tokens_s647;
[L5136]              havoc success_s647;
[L5137]              havoc spender_s675;
[L5138]              havoc tokens_s675;
[L5139]              havoc success_s675;
[L5140]              havoc from_s747;
[L5141]              havoc to_s747;
[L5142]              havoc tokens_s747;
[L5143]              havoc success_s747;
[L5144]              havoc __ret_0_owner;
[L5145]              havoc __ret_0_newOwner;
[L5146]              havoc _newOwner_s220;
[L5147]              havoc __ret_0_symbol;
[L5148]              havoc __ret_0_name;
[L5149]              havoc __ret_0_decimals;
[L5150]              havoc __ret_0_pauseOn;
[L5151]              havoc __ret_0_migrationOn;
[L5152]              havoc arg813_s0;
[L5153]              havoc __ret_0_balances;
[L5154]              havoc arg814_s0;
[L5155]              havoc __ret_0_geeqaddress;
[L5156]              havoc registeraddress_s387;
[L5157]              havoc tokenAddress_s407;
[L5158]              havoc tokens_s407;
[L5159]              havoc success_s407;
[L5160]              havoc __ret_0_totalMinted;
[L5161]              havoc receiver_s579;
[L5162]              havoc token_amt_s579;
[L5163]              havoc spender_s806;
[L5164]              havoc tokens_s806;
[L5165]              havoc data_s806;
[L5166]              havoc success_s806;
[L5167]              havoc tmpNow;
[L5168]              havoc gas;
[L5169]              assume gas > 4000000 && gas <= 8000000;
[L5170]              tmpNow := now;
[L5171]              havoc now;
[L5172]              assume now > tmpNow;
[L5173]              assume msgsender_MSG != null;
[L5174]              assume DType[msgsender_MSG] != SafeMath;
[L5175]              assume DType[msgsender_MSG] != ERC20Interface;
[L5176]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L5177]              assume DType[msgsender_MSG] != Owned;
[L5178]              assume DType[msgsender_MSG] != GEEQToken;
[L5179]              Alloc[msgsender_MSG] := true;
[L5180]  COND FALSE  !(choice == 26)
[L5186]  COND FALSE  !(choice == 25)
[L5192]  COND FALSE  !(choice == 24)
[L5198]  COND FALSE  !(choice == 23)
[L5205]  COND FALSE  !(choice == 22)
[L5212]  COND TRUE   choice == 21
[L5213]              gas := gas - 21000;
[L5214]  COND TRUE   gas >= 0
[L5215]              assume tokens_s747 >= 0 && tokens_s747 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5216]              assume msgvalue_MSG == 0;
[L5217]  CALL        call success_s747 := transferFrom~address~address~uint256_GEEQToken(this, msgsender_MSG, msgvalue_MSG, from_s747, to_s747, tokens_s747);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((p1 != from_s747 || p2 != msgsender_MSG) && from_s747 == to_s747) && tokens_s747 <= balances_GEEQToken[this][from_s747]) && tokens_s747 <= allowed_GEEQToken[this][from_s747][msgsender_MSG]) && tokens_s747 >= 0) && tokens_s747 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_GEEQToken[this][to_s747] >= 0) && balances_GEEQToken[this][to_s747] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_GEEQToken[this][from_s747] >= 0) && balances_GEEQToken[this][from_s747] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_GEEQToken[this][from_s747][msgsender_MSG] >= 0) && allowed_GEEQToken[this][from_s747][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_GEEQToken0 := true;
[L3]                 call_transferFrom_GEEQToken0 := false;
[L3]                 revert := revert_hold;
[L1565]              havoc __exception;
[L1566]              revert := false;
[L1567]  COND TRUE   __exception
[L1568]              __tmp__Balance := Balance;
[L1569]              __tmp__DType := DType;
[L1570]              __tmp__Alloc := Alloc;
[L1571]              __tmp__balance_ADDR := balance_ADDR;
[L1572]              __tmp__M_Ref_int := M_Ref_int;
[L1573]              __tmp__sum_balances0 := sum_balances0;
[L1574]              __tmp__alloc_allowed_GEEQToken_lvl0 := alloc_allowed_GEEQToken_lvl0;
[L1575]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L1576]              __tmp__sum_allowed1 := sum_allowed1;
[L1577]              __tmp__sum_geeqaddress2 := sum_geeqaddress2;
[L1578]              __tmp__Length := Length;
[L1579]              __tmp__now := now;
[L1580]              __tmp__owner_Owned := owner_Owned;
[L1581]              __tmp__newOwner_Owned := newOwner_Owned;
[L1582]              __tmp__symbol_GEEQToken := symbol_GEEQToken;
[L1583]              __tmp__name_GEEQToken := name_GEEQToken;
[L1584]              __tmp__decimals_GEEQToken := decimals_GEEQToken;
[L1585]              __tmp___totalSupply_GEEQToken := _totalSupply_GEEQToken;
[L1586]              __tmp___totalMinted_GEEQToken := _totalMinted_GEEQToken;
[L1587]              __tmp___maxMintable_GEEQToken := _maxMintable_GEEQToken;
[L1588]              __tmp__pauseOn_GEEQToken := pauseOn_GEEQToken;
[L1589]              __tmp__migrationOn_GEEQToken := migrationOn_GEEQToken;
[L1590]              __tmp__balances_GEEQToken := balances_GEEQToken;
[L1591]              __tmp__allowed_GEEQToken := allowed_GEEQToken;
[L1592]              __tmp__geeqaddress_GEEQToken := geeqaddress_GEEQToken;
[L1593]  CALL        call success_s747 := transferFrom~address~address~uint256_GEEQToken__fail(this, msgsender_MSG, msgvalue_MSG, from_s747, to_s747, tokens_s747);
[L3565]  COND TRUE   __tmp__pauseOn_GEEQToken[this]
[L3566]              revert := true;
[L1593]  RET         call success_s747 := transferFrom~address~address~uint256_GEEQToken__fail(this, msgsender_MSG, msgvalue_MSG, from_s747, to_s747, tokens_s747);
[L1594]              assume revert || gas < 0;
[L5217]  RET         call success_s747 := transferFrom~address~address~uint256_GEEQToken(this, msgsender_MSG, msgvalue_MSG, from_s747, to_s747, tokens_s747);
[L5360]  RET         call CorralChoice_GEEQToken(this);

Loop:
[L5360]  CALL        call CorralChoice_GEEQToken(this);
[L5125]              havoc msgsender_MSG;
[L5126]              havoc msgvalue_MSG;
[L5127]              havoc choice;
[L5128]              havoc __ret_0_totalSupply;
[L5129]              havoc tokenOwner_s591;
[L5130]              havoc balance_s591;
[L5131]              havoc tokenOwner_s763;
[L5132]              havoc spender_s763;
[L5133]              havoc remaining_s763;
[L5134]              havoc to_s647;
[L5135]              havoc tokens_s647;
[L5136]              havoc success_s647;
[L5137]              havoc spender_s675;
[L5138]              havoc tokens_s675;
[L5139]              havoc success_s675;
[L5140]              havoc from_s747;
[L5141]              havoc to_s747;
[L5142]              havoc tokens_s747;
[L5143]              havoc success_s747;
[L5144]              havoc __ret_0_owner;
[L5145]              havoc __ret_0_newOwner;
[L5146]              havoc _newOwner_s220;
[L5147]              havoc __ret_0_symbol;
[L5148]              havoc __ret_0_name;
[L5149]              havoc __ret_0_decimals;
[L5150]              havoc __ret_0_pauseOn;
[L5151]              havoc __ret_0_migrationOn;
[L5152]              havoc arg813_s0;
[L5153]              havoc __ret_0_balances;
[L5154]              havoc arg814_s0;
[L5155]              havoc __ret_0_geeqaddress;
[L5156]              havoc registeraddress_s387;
[L5157]              havoc tokenAddress_s407;
[L5158]              havoc tokens_s407;
[L5159]              havoc success_s407;
[L5160]              havoc __ret_0_totalMinted;
[L5161]              havoc receiver_s579;
[L5162]              havoc token_amt_s579;
[L5163]              havoc spender_s806;
[L5164]              havoc tokens_s806;
[L5165]              havoc data_s806;
[L5166]              havoc success_s806;
[L5167]              havoc tmpNow;
[L5168]              havoc gas;
[L5169]              assume gas > 4000000 && gas <= 8000000;
[L5170]              tmpNow := now;
[L5171]              havoc now;
[L5172]              assume now > tmpNow;
[L5173]              assume msgsender_MSG != null;
[L5174]              assume DType[msgsender_MSG] != SafeMath;
[L5175]              assume DType[msgsender_MSG] != ERC20Interface;
[L5176]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L5177]              assume DType[msgsender_MSG] != Owned;
[L5178]              assume DType[msgsender_MSG] != GEEQToken;
[L5179]              Alloc[msgsender_MSG] := true;
[L5180]  COND FALSE  !(choice == 26)
[L5186]  COND FALSE  !(choice == 25)
[L5192]  COND FALSE  !(choice == 24)
[L5198]  COND FALSE  !(choice == 23)
[L5205]  COND FALSE  !(choice == 22)
[L5212]  COND FALSE  !(choice == 21)
[L5219]  COND FALSE  !(choice == 20)
[L5225]  COND FALSE  !(choice == 19)
[L5231]  COND FALSE  !(choice == 18)
[L5237]  COND FALSE  !(choice == 17)
[L5243]  COND FALSE  !(choice == 16)
[L5249]  COND FALSE  !(choice == 15)
[L5255]  COND FALSE  !(choice == 14)
[L5261]  COND FALSE  !(choice == 13)
[L5267]  COND FALSE  !(choice == 12)
[L5273]  COND FALSE  !(choice == 11)
[L5279]  COND FALSE  !(choice == 10)
[L5285]  COND FALSE  !(choice == 9)
[L5291]  COND FALSE  !(choice == 8)
[L5298]  COND TRUE   choice == 7
[L5299]              gas := gas - 21000;
[L5300]  COND TRUE   gas >= 0
[L5301]              assume msgvalue_MSG == 0;
[L5302]  CALL        call pauseEnable_GEEQToken(this, msgsender_MSG, msgvalue_MSG);
[L885]               havoc __exception;
[L886]               revert := false;
[L887]   COND FALSE  !(__exception)
[L916]   CALL        call pauseEnable_GEEQToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3242]  CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4783]  COND FALSE  !(!(msgsender_MSG == owner_Owned[this]))
[L3242]  RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3243]  COND FALSE  !(revert)
[L3246]              pauseOn_GEEQToken[this] := true;
[L916]   RET         call pauseEnable_GEEQToken__success(this, msgsender_MSG, msgvalue_MSG);
[L917]               assume !revert && gas >= 0;
[L5302]  RET         call pauseEnable_GEEQToken(this, msgsender_MSG, msgvalue_MSG);
[L5360]  RET         call CorralChoice_GEEQToken(this);

[2020-11-25 16:57:23,340 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 16:57:23,340 INFO  L82        PathProgramCache]: Analyzing trace with hash -1471881349, now seen corresponding path program 1 times
[2020-11-25 16:57:23,340 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 16:57:23,350 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-25 16:57:23,361 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-25 16:57:23,424 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 16:57:23,424 INFO  L82        PathProgramCache]: Analyzing trace with hash -1723404884, now seen corresponding path program 1 times
[2020-11-25 16:57:23,425 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 16:57:23,428 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-25 16:57:23,431 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-25 16:57:23,439 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 16:57:23,439 INFO  L82        PathProgramCache]: Analyzing trace with hash 202575730, now seen corresponding path program 1 times
[2020-11-25 16:57:23,440 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 16:57:23,452 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-25 16:57:23,465 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 61 to 113
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 67 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 67 to 131
Garbage collection #2: 131 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 131 to 257
Garbage collection #3: 257 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 257 to 509
Garbage collection #4: 509 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 509 to 1013
Garbage collection #5: 1013 nodes / 0 free / 0.001s / 0.002s total
Resizing node table from 1013 to 2017
Garbage collection #6: 2017 nodes / 0 free / 0.001s / 0.003s total
Resizing node table from 2017 to 4027
Garbage collection #1: 79 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 79 to 157
Garbage collection #2: 157 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 157 to 313
Garbage collection #3: 313 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 313 to 619
Garbage collection #4: 619 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 619 to 1237
Garbage collection #5: 1237 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1237 to 2473
Garbage collection #6: 2473 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 2473 to 4943
Garbage collection #1: 47 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 47 to 89
Garbage collection #2: 89 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 89 to 173
Garbage collection #3: 173 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 173 to 337
Garbage collection #4: 337 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 337 to 673
Garbage collection #5: 673 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 673 to 1327
Garbage collection #1: 131 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 131 to 257
Garbage collection #2: 257 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 257 to 509
Garbage collection #3: 509 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 509 to 1013
Garbage collection #4: 1013 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1013 to 2017
Garbage collection #5: 2017 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 2017 to 4027
Garbage collection #6: 4027 nodes / 0 free / 0.001s / 0.002s total
Resizing node table from 4027 to 8053
Garbage collection #7: 8053 nodes / 0 free / 0.002s / 0.004s total
Resizing node table from 8053 to 16103
Garbage collection #1: 101 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 101 to 199
Garbage collection #2: 199 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 199 to 397
Garbage collection #3: 397 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 397 to 787
Garbage collection #4: 787 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 787 to 1571
Garbage collection #5: 1571 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 1571 to 3137
Garbage collection #6: 3137 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 3137 to 6271
[2020-11-25 16:57:23,952 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #2: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #3: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 113 to 223
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #2: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #3: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #4: 397 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 397 to 787
Garbage collection #5: 787 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 787 to 1571
Garbage collection #1: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #2: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #3: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #4: 397 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 397 to 787
Garbage collection #5: 787 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 787 to 1571
Garbage collection #1: 59 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 59 to 113
Garbage collection #2: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #3: 223 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 223 to 443
Garbage collection #4: 443 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 443 to 883
Garbage collection #5: 883 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 883 to 1759
Garbage collection #1: 41 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 41 to 79
Garbage collection #2: 79 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 79 to 157
Garbage collection #3: 157 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 157 to 313
Garbage collection #4: 313 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 313 to 619
Garbage collection #5: 619 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 619 to 1237
Garbage collection #1: 109 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 109 to 211
Garbage collection #2: 211 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 211 to 421
Garbage collection #3: 421 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 421 to 839
Garbage collection #4: 839 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 839 to 1669
Garbage collection #5: 1669 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1669 to 3331
Garbage collection #6: 3331 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3331 to 6661
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #2: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #3: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #1: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #2: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #3: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 67 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 67 to 131
Garbage collection #2: 131 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 131 to 257
Garbage collection #3: 257 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 257 to 509
Garbage collection #4: 509 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 509 to 1013
Garbage collection #5: 1013 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1013 to 2017
Garbage collection #1: 79 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 79 to 157
Garbage collection #2: 157 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 157 to 313
Garbage collection #3: 313 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 313 to 619
Garbage collection #4: 619 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 619 to 1237
Garbage collection #5: 1237 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1237 to 2473
Garbage collection #6: 2473 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2473 to 4943
Garbage collection #1: 47 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 47 to 89
Garbage collection #2: 89 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 89 to 173
Garbage collection #3: 173 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 173 to 337
Garbage collection #4: 337 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 337 to 673
Garbage collection #5: 673 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 673 to 1327
Garbage collection #1: 131 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 131 to 257
Garbage collection #2: 257 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 257 to 509
Garbage collection #3: 509 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 509 to 1013
Garbage collection #4: 1013 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1013 to 2017
Garbage collection #5: 2017 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2017 to 4027
Garbage collection #6: 4027 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 4027 to 8053
Garbage collection #7: 8053 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 8053 to 16103
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 67 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 67 to 131
Garbage collection #2: 131 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 131 to 257
Garbage collection #3: 257 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 257 to 509
Garbage collection #4: 509 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 509 to 1013
Garbage collection #5: 1013 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1013 to 2017
Garbage collection #1: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #2: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #3: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #4: 397 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 397 to 787
Garbage collection #5: 787 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 787 to 1571
Garbage collection #6: 1571 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1571 to 3137
Garbage collection #7: 3137 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3137 to 6271
[2020-11-25 16:57:25,007 WARN  L188               SmtUtils]: Spent 205.00 ms on a formula simplification that was a NOOP. DAG size: 296
Garbage collection #1: 127 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 127 to 251
Garbage collection #2: 251 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 251 to 499
Garbage collection #3: 499 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 499 to 997
Garbage collection #4: 997 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 997 to 1993
Garbage collection #5: 1993 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 1993 to 3967
Garbage collection #6: 3967 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 3967 to 7933
[2020-11-25 16:57:25,555 WARN  L188               SmtUtils]: Spent 535.00 ms on a formula simplification. DAG size of input: 240 DAG size of output: 240
[2020-11-25 16:57:26,262 WARN  L188               SmtUtils]: Spent 705.00 ms on a formula simplification. DAG size of input: 299 DAG size of output: 281
Garbage collection #1: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #2: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #3: 397 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 397 to 787
Garbage collection #4: 787 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 787 to 1571
Garbage collection #5: 1571 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1571 to 3137
Garbage collection #6: 3137 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3137 to 6271
Garbage collection #7: 6271 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 6271 to 12541
Garbage collection #8: 12541 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 12541 to 25073
Garbage collection #1: 67 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 67 to 131
Garbage collection #2: 131 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 131 to 257
Garbage collection #3: 257 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 257 to 509
Garbage collection #4: 509 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 509 to 1013
Garbage collection #5: 1013 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1013 to 2017
Garbage collection #6: 2017 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2017 to 4027
Garbage collection #7: 4027 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 4027 to 8053
Garbage collection #8: 8053 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 8053 to 16103
[2020-11-25 16:57:26,506 WARN  L188               SmtUtils]: Spent 222.00 ms on a formula simplification. DAG size of input: 180 DAG size of output: 163
[2020-11-25 16:57:26,722 WARN  L188               SmtUtils]: Spent 214.00 ms on a formula simplification that was a NOOP. DAG size: 366
Garbage collection #1: 149 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 149 to 293
Garbage collection #2: 293 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 293 to 577
Garbage collection #3: 577 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 577 to 1153
Garbage collection #4: 1153 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1153 to 2297
Garbage collection #5: 2297 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2297 to 4591
Garbage collection #6: 4591 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 4591 to 9181
Garbage collection #7: 9181 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 9181 to 18353
[2020-11-25 16:57:27,251 WARN  L188               SmtUtils]: Spent 516.00 ms on a formula simplification. DAG size of input: 295 DAG size of output: 293
[2020-11-25 16:57:29,535 WARN  L188               SmtUtils]: Spent 2.28 s on a formula simplification. DAG size of input: 725 DAG size of output: 712
Garbage collection #1: 307 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 307 to 613
Garbage collection #2: 613 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 613 to 1223
Garbage collection #3: 1223 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1223 to 2441
Garbage collection #4: 2441 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2441 to 4877
Garbage collection #5: 4877 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 4877 to 9749
Garbage collection #6: 9749 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 9749 to 19489
Garbage collection #7: 19489 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 19489 to 38977
Garbage collection #1: 79 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 79 to 157
Garbage collection #2: 157 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 157 to 313
Garbage collection #3: 313 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 313 to 619
Garbage collection #4: 619 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 619 to 1237
Garbage collection #5: 1237 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 1237 to 2473
Garbage collection #6: 2473 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 2473 to 4943
Garbage collection #7: 4943 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 4943 to 9883
[2020-11-25 16:57:30,011 WARN  L188               SmtUtils]: Spent 400.00 ms on a formula simplification. DAG size of input: 230 DAG size of output: 221
[2020-11-25 16:57:30,240 WARN  L188               SmtUtils]: Spent 209.00 ms on a formula simplification that was a NOOP. DAG size: 352
Garbage collection #1: 127 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 127 to 251
Garbage collection #2: 251 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 251 to 499
Garbage collection #3: 499 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 499 to 997
Garbage collection #4: 997 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 997 to 1993
Garbage collection #5: 1993 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1993 to 3967
Garbage collection #6: 3967 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3967 to 7933
Garbage collection #7: 7933 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 7933 to 15859
Garbage collection #1: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #2: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #3: 277 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 277 to 547
Garbage collection #4: 547 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 547 to 1093
Garbage collection #5: 1093 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1093 to 2179
Garbage collection #6: 2179 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2179 to 4357
Garbage collection #7: 4357 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 4357 to 8713
[2020-11-25 16:57:30,578 WARN  L188               SmtUtils]: Spent 269.00 ms on a formula simplification. DAG size of input: 344 DAG size of output: 343
Garbage collection #1: 127 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 127 to 251
Garbage collection #2: 251 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 251 to 499
Garbage collection #3: 499 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 499 to 997
Garbage collection #4: 997 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 997 to 1993
Garbage collection #5: 1993 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1993 to 3967
Garbage collection #6: 3967 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 3967 to 7933
Garbage collection #1: 127 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 127 to 251
Garbage collection #2: 251 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 251 to 499
Garbage collection #3: 499 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 499 to 997
Garbage collection #4: 997 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 997 to 1993
Garbage collection #5: 1993 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1993 to 3967
Garbage collection #6: 3967 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3967 to 7933
[2020-11-25 16:57:30,713 WARN  L188               SmtUtils]: Spent 131.00 ms on a formula simplification that was a NOOP. DAG size: 339
[2020-11-25 16:57:30,725 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-25 16:57:30,742 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-25 16:57:30,749 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer CFG 25.11 04:57:30 BasicIcfg
[2020-11-25 16:57:30,749 INFO  L132        PluginConnector]: ------------------------ END BuchiAutomizer----------------------------
[2020-11-25 16:57:30,749 INFO  L168              Benchmark]: Toolchain (without parser) took 49069.15 ms. Allocated memory was 1.0 GB in the beginning and 2.9 GB in the end (delta: 1.9 GB). Free memory was 935.2 MB in the beginning and 1.8 GB in the end (delta: -852.8 MB). Peak memory consumption was 1.9 GB. Max. memory is 15.3 GB.
[2020-11-25 16:57:30,750 INFO  L168              Benchmark]: Boogie PL CUP Parser took 0.17 ms. Allocated memory is still 1.0 GB. Free memory is still 951.3 MB. There was no memory consumed. Max. memory is 15.3 GB.
[2020-11-25 16:57:30,750 INFO  L168              Benchmark]: Boogie Preprocessor took 112.83 ms. Allocated memory is still 1.0 GB. Free memory was 935.2 MB in the beginning and 924.5 MB in the end (delta: 10.7 MB). Peak memory consumption was 10.7 MB. Max. memory is 15.3 GB.
[2020-11-25 16:57:30,750 INFO  L168              Benchmark]: UtopiaSpecLang took 71.35 ms. Allocated memory is still 1.0 GB. Free memory was 924.5 MB in the beginning and 908.3 MB in the end (delta: 16.1 MB). Peak memory consumption was 16.1 MB. Max. memory is 15.3 GB.
[2020-11-25 16:57:30,750 INFO  L168              Benchmark]: Boogie Printer took 19.16 ms. Allocated memory is still 1.0 GB. Free memory was 908.3 MB in the beginning and 903.0 MB in the end (delta: 5.4 MB). Peak memory consumption was 5.4 MB. Max. memory is 15.3 GB.
[2020-11-25 16:57:30,751 INFO  L168              Benchmark]: RCFGBuilder took 798.92 ms. Allocated memory is still 1.0 GB. Free memory was 903.0 MB in the beginning and 763.4 MB in the end (delta: 139.6 MB). Peak memory consumption was 139.6 MB. Max. memory is 15.3 GB.
[2020-11-25 16:57:30,751 INFO  L168              Benchmark]: UtopiaLTL2Aut took 44.82 ms. Allocated memory is still 1.0 GB. Free memory was 763.4 MB in the beginning and 759.8 MB in the end (delta: 3.6 MB). Peak memory consumption was 3.6 MB. Max. memory is 15.3 GB.
[2020-11-25 16:57:30,752 INFO  L168              Benchmark]: BÃ¼chi Program Product took 1501.51 ms. Allocated memory was 1.0 GB in the beginning and 1.2 GB in the end (delta: 210.2 MB). Free memory was 759.8 MB in the beginning and 857.6 MB in the end (delta: -97.8 MB). Peak memory consumption was 155.9 MB. Max. memory is 15.3 GB.
[2020-11-25 16:57:30,752 INFO  L168              Benchmark]: BlockEncodingV2 took 186.52 ms. Allocated memory is still 1.2 GB. Free memory was 857.6 MB in the beginning and 788.8 MB in the end (delta: 68.8 MB). Peak memory consumption was 68.8 MB. Max. memory is 15.3 GB.
[2020-11-25 16:57:30,752 INFO  L168              Benchmark]: BuchiAutomizer took 46330.79 ms. Allocated memory was 1.2 GB in the beginning and 2.9 GB in the end (delta: 1.7 GB). Free memory was 788.8 MB in the beginning and 1.8 GB in the end (delta: -999.2 MB). Peak memory consumption was 1.6 GB. Max. memory is 15.3 GB.
[2020-11-25 16:57:30,755 INFO  L337   ainManager$Toolchain]: #######################  End [Toolchain 1] #######################
 --- Results ---
 * Results from de.uni_freiburg.informatik.ultimate.plugins.blockencoding:
  - StatisticsResult: Initial Icfg
    4722 locations, 8038 edges
  - StatisticsResult: Encoded RCFG
    4672 locations, 7908 edges
 * Results from de.uni_freiburg.informatik.ultimate.core:
  - StatisticsResult: Toolchain Benchmarks
    Benchmark results are:
 * Boogie PL CUP Parser took 0.17 ms. Allocated memory is still 1.0 GB. Free memory is still 951.3 MB. There was no memory consumed. Max. memory is 15.3 GB.
 * Boogie Preprocessor took 112.83 ms. Allocated memory is still 1.0 GB. Free memory was 935.2 MB in the beginning and 924.5 MB in the end (delta: 10.7 MB). Peak memory consumption was 10.7 MB. Max. memory is 15.3 GB.
 * UtopiaSpecLang took 71.35 ms. Allocated memory is still 1.0 GB. Free memory was 924.5 MB in the beginning and 908.3 MB in the end (delta: 16.1 MB). Peak memory consumption was 16.1 MB. Max. memory is 15.3 GB.
 * Boogie Printer took 19.16 ms. Allocated memory is still 1.0 GB. Free memory was 908.3 MB in the beginning and 903.0 MB in the end (delta: 5.4 MB). Peak memory consumption was 5.4 MB. Max. memory is 15.3 GB.
 * RCFGBuilder took 798.92 ms. Allocated memory is still 1.0 GB. Free memory was 903.0 MB in the beginning and 763.4 MB in the end (delta: 139.6 MB). Peak memory consumption was 139.6 MB. Max. memory is 15.3 GB.
 * UtopiaLTL2Aut took 44.82 ms. Allocated memory is still 1.0 GB. Free memory was 763.4 MB in the beginning and 759.8 MB in the end (delta: 3.6 MB). Peak memory consumption was 3.6 MB. Max. memory is 15.3 GB.
 * BÃ¼chi Program Product took 1501.51 ms. Allocated memory was 1.0 GB in the beginning and 1.2 GB in the end (delta: 210.2 MB). Free memory was 759.8 MB in the beginning and 857.6 MB in the end (delta: -97.8 MB). Peak memory consumption was 155.9 MB. Max. memory is 15.3 GB.
 * BlockEncodingV2 took 186.52 ms. Allocated memory is still 1.2 GB. Free memory was 857.6 MB in the beginning and 788.8 MB in the end (delta: 68.8 MB). Peak memory consumption was 68.8 MB. Max. memory is 15.3 GB.
 * BuchiAutomizer took 46330.79 ms. Allocated memory was 1.2 GB in the beginning and 2.9 GB in the end (delta: 1.7 GB). Free memory was 788.8 MB in the beginning and 1.8 GB in the end (delta: -999.2 MB). Peak memory consumption was 1.6 GB. Max. memory is 15.3 GB.
 * Results from de.uni_freiburg.informatik.ultimate.buchiprogramproduct:
  - StatisticsResult: Initial property automaton
    2 locations, 3 edges
  - StatisticsResult: Initial RCFG
    1990 locations, 2487 edges
  - StatisticsResult: BuchiProgram size
    4722 locations, 8038 edges
 * Results from de.uni_freiburg.informatik.ultimate.plugins.generator.traceabstraction:
  - StatisticsResult: Constructed decomposition of program
    Your program was decomposed into 13 terminating modules (13 trivial, 0 deterministic, 0 nondeterministic) and one nonterminating remainder module.13 modules have a trivial ranking function, the largest among these consists of 43 locations. The remainder module has 3381 locations.
  - StatisticsResult: Timing statistics
    BÃ¼chiAutomizer plugin needed 46.2s and 14 iterations.  TraceHistogramMax:2. Analysis of lassos took 10.6s. Construction of modules took 27.4s. BÃ¼chi inclusion checks took 6.9s. Highest rank in rank-based complementation 0. Minimization of det autom 13. Minimization of nondet autom 0. Automata minimization 0.4s AutomataMinimizationTime, 13 MinimizatonAttempts, 7799 StatesRemovedByMinimization, 12 NontrivialMinimizations. Non-live state removal took 0.3s Buchi closure took 0.0s. Biggest automaton had 3990 states and ocurred in iteration 5.	Nontrivial modules had stage [0, 0, 0, 0, 0].	InterpolantCoveringCapabilityFinite: 0/0	InterpolantCoveringCapabilityBuchi: 0/0	HoareTripleCheckerStatistics: 49615 SDtfs, 64335 SDslu, 141694 SDs, 0 SdLazy, 323671 SolverSat, 10995 SolverUnsat, 0 SolverUnknown, 0 SolverNotchecked, 27.4s Time	LassoAnalysisResults: nont1 unkn0 SFLI0 SFLT0 conc0 concLT0 SILN0 SILU13 SILI0 SILT0 lasso0 LassoPreprocessingBenchmarks: LassoTerminationAnalysisBenchmarks: not availableLassoTerminationAnalysisBenchmarks: LassoNonterminationAnalysisSatFixpoint: 0	LassoNonterminationAnalysisSatUnbounded: 0	LassoNonterminationAnalysisUnsat: 0	LassoNonterminationAnalysisUnknown: 0	LassoNonterminationAnalysisTime: 0.0s	
  - TransactionCounterexample: Violation of LTL property LTL
    Found an infinite, lasso-shaped execution that violates the LTL property LTL.
Stem:
address(1164884506) = (new GEEQToken)({from : 1164884509});
[L679]               havoc __exception;
[L680]               revert := false;
[L681]   COND FALSE  !(__exception)
[L710]   CALL        call GEEQToken_GEEQToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3141]  CALL        call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L2920]  CALL        call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2905]              assume msgsender_MSG != null;
[L2906]              Balance[this] := 0;
[L2920]  RET         call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2921]  COND FALSE  !(revert)
[L3141]  RET         call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L3142]  COND FALSE  !(revert)
[L3145]  CALL        call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L2988]  CALL        call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2971]              assume msgsender_MSG != null;
[L2972]              Balance[this] := 0;
[L2973]              owner_Owned[this] := null;
[L2974]              newOwner_Owned[this] := null;
[L2988]  RET         call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2989]  COND FALSE  !(revert)
[L3145]  RET         call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L3146]  COND FALSE  !(revert)
[L3149]  CALL        call GEEQToken_GEEQToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3095]              assume msgsender_MSG != null;
[L3096]              Balance[this] := 0;
[L3097]              symbol_GEEQToken[this] := 1164884495;
[L3098]              name_GEEQToken[this] := 1164884495;
[L3099]              decimals_GEEQToken[this] := 0;
[L3100]              _totalSupply_GEEQToken[this] := 0;
[L3101]              _totalMinted_GEEQToken[this] := 0;
[L3102]              _maxMintable_GEEQToken[this] := 0;
[L3103]              pauseOn_GEEQToken[this] := false;
[L3104]              migrationOn_GEEQToken[this] := false;
[L3105]              balances_GEEQToken[this] := zeroRefintArr();
[L3106]              sum_balances0[this] := 0;
[L3107]              allowed_GEEQToken[this] := zeroRefRefintArr();
[L3108]              sum_allowed1[this] := 0;
[L3109]              geeqaddress_GEEQToken[this] := zeroRefintArr();
[L3111]              symbol_GEEQToken[this] := -15460934;
[L3112]              name_GEEQToken[this] := -1182004402;
[L3113]              decimals_GEEQToken[this] := 18;
[L3114]              _totalMinted_GEEQToken[this] := 0;
[L3115]              _totalSupply_GEEQToken[this] := 0;
[L3116]              __var_2 := decimals_GEEQToken[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3117]              _maxMintable_GEEQToken[this] := 100000000 * (nonlinearPow(10, decimals_GEEQToken[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3118]              owner_Owned[this] := msgsender_MSG;
[L3149]  RET         call GEEQToken_GEEQToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3150]  COND FALSE  !(revert)
[L710]   RET         call GEEQToken_GEEQToken__success(this, msgsender_MSG, msgvalue_MSG);
[L711]               assume !revert && gas >= 0;
[L5356]  RET         call GEEQToken_GEEQToken(this, msgsender_MSG, msgvalue_MSG);
GEEQToken(1164884506).pauseEnable.gas(3979002)({from : 1164884509});
[L885]               havoc __exception;
[L886]               revert := false;
[L887]   COND FALSE  !(__exception)
[L916]   CALL        call pauseEnable_GEEQToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3242]  CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4783]  COND FALSE  !(!(msgsender_MSG == owner_Owned[this]))
[L3242]  RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3243]  COND FALSE  !(revert)
[L3246]              pauseOn_GEEQToken[this] := true;
[L916]   RET         call pauseEnable_GEEQToken__success(this, msgsender_MSG, msgvalue_MSG);
[L917]               assume !revert && gas >= 0;
[L5302]  RET         call pauseEnable_GEEQToken(this, msgsender_MSG, msgvalue_MSG);
GEEQToken(1164884506).transferFrom~address~address~uint256.gas(3979003)({from : 1164884509, from : 1164884505, to : 1164884505, tokens : 0});
[L3]                revert_hold := revert;
[L3]                revert := false;
[L3]                assume (((((((((((p1 != from_s747 || p2 != msgsender_MSG) && from_s747 == to_s747) && tokens_s747 <= balances_GEEQToken[this][from_s747]) && tokens_s747 <= allowed_GEEQToken[this][from_s747][msgsender_MSG]) && tokens_s747 >= 0) && tokens_s747 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_GEEQToken[this][to_s747] >= 0) && balances_GEEQToken[this][to_s747] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_GEEQToken[this][from_s747] >= 0) && balances_GEEQToken[this][from_s747] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_GEEQToken[this][from_s747][msgsender_MSG] >= 0) && allowed_GEEQToken[this][from_s747][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                call_transferFrom_GEEQToken0 := true;
[L3]                call_transferFrom_GEEQToken0 := false;
[L3]                revert := revert_hold;
[L1565]             havoc __exception;
[L1566]             revert := false;
[L1567]  COND TRUE  __exception
[L1568]             __tmp__Balance := Balance;
[L1569]             __tmp__DType := DType;
[L1570]             __tmp__Alloc := Alloc;
[L1571]             __tmp__balance_ADDR := balance_ADDR;
[L1572]             __tmp__M_Ref_int := M_Ref_int;
[L1573]             __tmp__sum_balances0 := sum_balances0;
[L1574]             __tmp__alloc_allowed_GEEQToken_lvl0 := alloc_allowed_GEEQToken_lvl0;
[L1575]             __tmp__M_Ref_Ref := M_Ref_Ref;
[L1576]             __tmp__sum_allowed1 := sum_allowed1;
[L1577]             __tmp__sum_geeqaddress2 := sum_geeqaddress2;
[L1578]             __tmp__Length := Length;
[L1579]             __tmp__now := now;
[L1580]             __tmp__owner_Owned := owner_Owned;
[L1581]             __tmp__newOwner_Owned := newOwner_Owned;
[L1582]             __tmp__symbol_GEEQToken := symbol_GEEQToken;
[L1583]             __tmp__name_GEEQToken := name_GEEQToken;
[L1584]             __tmp__decimals_GEEQToken := decimals_GEEQToken;
[L1585]             __tmp___totalSupply_GEEQToken := _totalSupply_GEEQToken;
[L1586]             __tmp___totalMinted_GEEQToken := _totalMinted_GEEQToken;
[L1587]             __tmp___maxMintable_GEEQToken := _maxMintable_GEEQToken;
[L1588]             __tmp__pauseOn_GEEQToken := pauseOn_GEEQToken;
[L1589]             __tmp__migrationOn_GEEQToken := migrationOn_GEEQToken;
[L1590]             __tmp__balances_GEEQToken := balances_GEEQToken;
[L1591]             __tmp__allowed_GEEQToken := allowed_GEEQToken;
[L1592]             __tmp__geeqaddress_GEEQToken := geeqaddress_GEEQToken;
[L1593]  CALL       call success_s747 := transferFrom~address~address~uint256_GEEQToken__fail(this, msgsender_MSG, msgvalue_MSG, from_s747, to_s747, tokens_s747);
[L3565]  COND TRUE  __tmp__pauseOn_GEEQToken[this]
[L3566]             revert := true;
[L1593]  RET        call success_s747 := transferFrom~address~address~uint256_GEEQToken__fail(this, msgsender_MSG, msgvalue_MSG, from_s747, to_s747, tokens_s747);
[L1594]             assume revert || gas < 0;
[L5217]  RET        call success_s747 := transferFrom~address~address~uint256_GEEQToken(this, msgsender_MSG, msgvalue_MSG, from_s747, to_s747, tokens_s747);

Loop:
GEEQToken(1164884506).pauseEnable.gas(3979001)({from : 1164884509});
[L885]               havoc __exception;
[L886]               revert := false;
[L887]   COND FALSE  !(__exception)
[L916]   CALL        call pauseEnable_GEEQToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3242]  CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4783]  COND FALSE  !(!(msgsender_MSG == owner_Owned[this]))
[L3242]  RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3243]  COND FALSE  !(revert)
[L3246]              pauseOn_GEEQToken[this] := true;
[L916]   RET         call pauseEnable_GEEQToken__success(this, msgsender_MSG, msgvalue_MSG);
[L917]               assume !revert && gas >= 0;
[L5302]  RET         call pauseEnable_GEEQToken(this, msgsender_MSG, msgvalue_MSG);

End of lasso representation.
RESULT: Ultimate could not prove your program: Toolchain returned no result.
Received shutdown request...
