This is Ultimate 0.1.24-f1553f5-m
[2020-11-25 08:10:37,336 INFO  L170        SettingsManager]: Resetting all preferences to default values...
[2020-11-25 08:10:37,337 INFO  L174        SettingsManager]: Resetting UltimateCore preferences to default values
[2020-11-25 08:10:37,345 INFO  L177        SettingsManager]: Ultimate Commandline Interface provides no preferences, ignoring...
[2020-11-25 08:10:37,345 INFO  L174        SettingsManager]: Resetting Boogie Preprocessor preferences to default values
[2020-11-25 08:10:37,345 INFO  L174        SettingsManager]: Resetting Boogie Procedure Inliner preferences to default values
[2020-11-25 08:10:37,346 INFO  L174        SettingsManager]: Resetting Abstract Interpretation preferences to default values
[2020-11-25 08:10:37,347 INFO  L174        SettingsManager]: Resetting LassoRanker preferences to default values
[2020-11-25 08:10:37,348 INFO  L174        SettingsManager]: Resetting Reaching Definitions preferences to default values
[2020-11-25 08:10:37,348 INFO  L174        SettingsManager]: Resetting SyntaxChecker preferences to default values
[2020-11-25 08:10:37,349 INFO  L177        SettingsManager]: BÃ¼chi Program Product provides no preferences, ignoring...
[2020-11-25 08:10:37,349 INFO  L174        SettingsManager]: Resetting LTL2Aut preferences to default values
[2020-11-25 08:10:37,349 INFO  L174        SettingsManager]: Resetting PEA to Boogie preferences to default values
[2020-11-25 08:10:37,350 INFO  L174        SettingsManager]: Resetting BlockEncodingV2 preferences to default values
[2020-11-25 08:10:37,351 INFO  L174        SettingsManager]: Resetting ChcToBoogie preferences to default values
[2020-11-25 08:10:37,351 INFO  L174        SettingsManager]: Resetting AutomataScriptInterpreter preferences to default values
[2020-11-25 08:10:37,351 INFO  L174        SettingsManager]: Resetting BuchiAutomizer preferences to default values
[2020-11-25 08:10:37,352 INFO  L174        SettingsManager]: Resetting CACSL2BoogieTranslator preferences to default values
[2020-11-25 08:10:37,353 INFO  L174        SettingsManager]: Resetting CodeCheck preferences to default values
[2020-11-25 08:10:37,354 INFO  L174        SettingsManager]: Resetting InvariantSynthesis preferences to default values
[2020-11-25 08:10:37,354 INFO  L174        SettingsManager]: Resetting RCFGBuilder preferences to default values
[2020-11-25 08:10:37,355 INFO  L174        SettingsManager]: Resetting TraceAbstraction preferences to default values
[2020-11-25 08:10:37,356 INFO  L177        SettingsManager]: TraceAbstractionConcurrent provides no preferences, ignoring...
[2020-11-25 08:10:37,356 INFO  L177        SettingsManager]: TraceAbstractionWithAFAs provides no preferences, ignoring...
[2020-11-25 08:10:37,356 INFO  L174        SettingsManager]: Resetting TreeAutomizer preferences to default values
[2020-11-25 08:10:37,357 INFO  L174        SettingsManager]: Resetting IcfgToChc preferences to default values
[2020-11-25 08:10:37,357 INFO  L174        SettingsManager]: Resetting IcfgTransformer preferences to default values
[2020-11-25 08:10:37,358 INFO  L177        SettingsManager]: ReqToTest provides no preferences, ignoring...
[2020-11-25 08:10:37,358 INFO  L174        SettingsManager]: Resetting UtopiaLTL2Aut preferences to default values
[2020-11-25 08:10:37,358 INFO  L174        SettingsManager]: Resetting UtopiaSpecLang preferences to default values
[2020-11-25 08:10:37,358 INFO  L174        SettingsManager]: Resetting Boogie Printer preferences to default values
[2020-11-25 08:10:37,358 INFO  L174        SettingsManager]: Resetting ChcSmtPrinter preferences to default values
[2020-11-25 08:10:37,359 INFO  L174        SettingsManager]: Resetting ReqPrinter preferences to default values
[2020-11-25 08:10:37,359 INFO  L174        SettingsManager]: Resetting Witness Printer preferences to default values
[2020-11-25 08:10:37,360 INFO  L177        SettingsManager]: Boogie PL CUP Parser provides no preferences, ignoring...
[2020-11-25 08:10:37,360 INFO  L174        SettingsManager]: Resetting CDTParser preferences to default values
[2020-11-25 08:10:37,360 INFO  L177        SettingsManager]: AutomataScriptParser provides no preferences, ignoring...
[2020-11-25 08:10:37,360 INFO  L177        SettingsManager]: ReqParser provides no preferences, ignoring...
[2020-11-25 08:10:37,360 INFO  L174        SettingsManager]: Resetting SmtParser preferences to default values
[2020-11-25 08:10:37,361 INFO  L174        SettingsManager]: Resetting Witness Parser preferences to default values
[2020-11-25 08:10:37,361 INFO  L181        SettingsManager]: Finished resetting all preferences to default values...
[2020-11-25 08:10:37,361 INFO  L98         SettingsManager]: Beginning loading settings from /mnt/data0/jon/SmartPulseTool/SmartPulse/settings.epf
[2020-11-25 08:10:37,367 INFO  L110        SettingsManager]: Loading preferences was successful
[2020-11-25 08:10:37,367 INFO  L112        SettingsManager]: Preferences different from defaults after loading the file:
[2020-11-25 08:10:37,368 INFO  L131        SettingsManager]: Preferences of LTL2Aut differ from their defaults:
[2020-11-25 08:10:37,368 INFO  L133        SettingsManager]:  * Read property from file=true
[2020-11-25 08:10:37,368 INFO  L133        SettingsManager]:  * Path to LTL*BA executable (LTL2BA, LTL3BA)=/mnt/data0/jon/SmartPulseTool/ltl2ba
[2020-11-25 08:10:37,368 INFO  L131        SettingsManager]: Preferences of BlockEncodingV2 differ from their defaults:
[2020-11-25 08:10:37,368 INFO  L133        SettingsManager]:  * Maximize final states=false
[2020-11-25 08:10:37,368 INFO  L133        SettingsManager]:  * Minimize states even if more edges are added than removed.=true
[2020-11-25 08:10:37,368 INFO  L133        SettingsManager]:  * Minimize states using LBE with the strategy=NONE
[2020-11-25 08:10:37,368 INFO  L131        SettingsManager]: Preferences of BuchiAutomizer differ from their defaults:
[2020-11-25 08:10:37,368 INFO  L133        SettingsManager]:  * Compute Interpolants along a Counterexample=Craig_TreeInterpolation
[2020-11-25 08:10:37,368 INFO  L133        SettingsManager]:  * Use old map elimination=false
[2020-11-25 08:10:37,368 INFO  L133        SettingsManager]:  * Try twofold refinement=false
[2020-11-25 08:10:37,369 INFO  L131        SettingsManager]: Preferences of CACSL2BoogieTranslator differ from their defaults:
[2020-11-25 08:10:37,369 INFO  L133        SettingsManager]:  * Check unreachability of error function in SV-COMP mode=false
[2020-11-25 08:10:37,369 INFO  L133        SettingsManager]:  * Overapproximate operations on floating types=true
[2020-11-25 08:10:37,369 INFO  L133        SettingsManager]:  * Check division by zero=IGNORE
[2020-11-25 08:10:37,369 INFO  L133        SettingsManager]:  * Pointer to allocated memory at dereference=ASSUME
[2020-11-25 08:10:37,369 INFO  L133        SettingsManager]:  * If two pointers are subtracted or compared they have the same base address=ASSUME
[2020-11-25 08:10:37,369 INFO  L133        SettingsManager]:  * Check array bounds for arrays that are off heap=ASSUME
[2020-11-25 08:10:37,369 INFO  L133        SettingsManager]:  * Check if freed pointer was valid=false
[2020-11-25 08:10:37,369 INFO  L133        SettingsManager]:  * Use constant arrays=true
[2020-11-25 08:10:37,369 INFO  L133        SettingsManager]:  * Pointer base address is valid at dereference=ASSUME
[2020-11-25 08:10:37,369 INFO  L131        SettingsManager]: Preferences of RCFGBuilder differ from their defaults:
[2020-11-25 08:10:37,369 INFO  L133        SettingsManager]:  * Size of a code block=SingleStatement
[2020-11-25 08:10:37,369 INFO  L133        SettingsManager]:  * SMT solver=Internal_SMTInterpol
[2020-11-25 08:10:37,391 INFO  L81    nceAwareModelManager]: Repository-Root is: /tmp
[2020-11-25 08:10:37,404 INFO  L259   ainManager$Toolchain]: [Toolchain 1]: Applicable parser(s) successfully (re)initialized
[2020-11-25 08:10:37,407 INFO  L215   ainManager$Toolchain]: [Toolchain 1]: Toolchain selected.
[2020-11-25 08:10:37,408 INFO  L271        PluginConnector]: Initializing Boogie PL CUP Parser...
[2020-11-25 08:10:37,408 INFO  L276        PluginConnector]: Boogie PL CUP Parser initialized
[2020-11-25 08:10:37,409 INFO  L430   ainManager$Toolchain]: [Toolchain 1]: Parsing single file: /mnt/data0/jon/SmartPulseTool/USDollarHKex_0x164f0C960c164F8988a556B4EB86d3a696b8E7f0_transfer-fail.bpl
[2020-11-25 08:10:37,409 INFO  L111           BoogieParser]: Parsing: '/mnt/data0/jon/SmartPulseTool/USDollarHKex_0x164f0C960c164F8988a556B4EB86d3a696b8E7f0_transfer-fail.bpl'
[2020-11-25 08:10:37,519 INFO  L297   ainManager$Toolchain]: ####################### [Toolchain 1] #######################
[2020-11-25 08:10:37,521 INFO  L131        ToolchainWalker]: Walking toolchain with 8 elements.
[2020-11-25 08:10:37,521 INFO  L113        PluginConnector]: ------------------------Boogie Preprocessor----------------------------
[2020-11-25 08:10:37,521 INFO  L271        PluginConnector]: Initializing Boogie Preprocessor...
[2020-11-25 08:10:37,521 INFO  L276        PluginConnector]: Boogie Preprocessor initialized
[2020-11-25 08:10:37,537 INFO  L185        PluginConnector]: Executing the observer EnsureBoogieModelObserver from plugin Boogie Preprocessor for "USDollarHKex_0x164f0C960c164F8988a556B4EB86d3a696b8E7f0_transfer-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 08:10:37" (1/1) ...
[2020-11-25 08:10:37,538 INFO  L185        PluginConnector]: Executing the observer TypeChecker from plugin Boogie Preprocessor for "USDollarHKex_0x164f0C960c164F8988a556B4EB86d3a696b8E7f0_transfer-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 08:10:37" (1/1) ...
[2020-11-25 08:10:37,581 INFO  L185        PluginConnector]: Executing the observer ConstExpander from plugin Boogie Preprocessor for "USDollarHKex_0x164f0C960c164F8988a556B4EB86d3a696b8E7f0_transfer-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 08:10:37" (1/1) ...
[2020-11-25 08:10:37,582 INFO  L185        PluginConnector]: Executing the observer StructExpander from plugin Boogie Preprocessor for "USDollarHKex_0x164f0C960c164F8988a556B4EB86d3a696b8E7f0_transfer-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 08:10:37" (1/1) ...
[2020-11-25 08:10:37,606 INFO  L185        PluginConnector]: Executing the observer UnstructureCode from plugin Boogie Preprocessor for "USDollarHKex_0x164f0C960c164F8988a556B4EB86d3a696b8E7f0_transfer-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 08:10:37" (1/1) ...
[2020-11-25 08:10:37,617 INFO  L185        PluginConnector]: Executing the observer FunctionInliner from plugin Boogie Preprocessor for "USDollarHKex_0x164f0C960c164F8988a556B4EB86d3a696b8E7f0_transfer-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 08:10:37" (1/1) ...
[2020-11-25 08:10:37,628 INFO  L185        PluginConnector]: Executing the observer BoogieSymbolTableConstructor from plugin Boogie Preprocessor for "USDollarHKex_0x164f0C960c164F8988a556B4EB86d3a696b8E7f0_transfer-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 08:10:37" (1/1) ...
[2020-11-25 08:10:37,641 INFO  L132        PluginConnector]: ------------------------ END Boogie Preprocessor----------------------------
[2020-11-25 08:10:37,642 INFO  L113        PluginConnector]: ------------------------UtopiaSpecLang----------------------------
[2020-11-25 08:10:37,642 INFO  L271        PluginConnector]: Initializing UtopiaSpecLang...
[2020-11-25 08:10:37,644 INFO  L276        PluginConnector]: UtopiaSpecLang initialized
[2020-11-25 08:10:37,646 INFO  L185        PluginConnector]: Executing the observer UtopiaSpecLangObserver from plugin UtopiaSpecLang for "USDollarHKex_0x164f0C960c164F8988a556B4EB86d3a696b8E7f0_transfer-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 08:10:37" (1/1) ...
[2020-11-25 08:10:37,662 INFO  L1012  opiaSpecLangObserver]: Parsing LTLPlus Formula to AstNode: [](started(USDollarHKex.transfer(to, value), msg.sender != to && (value > balances_BasicToken[this][msg.sender] || balances_BasicToken[this][to] + value >= 0x10000000000000000000000000000000000000000000000000000000000000000) && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_BasicToken[this][to] >= 0 && balances_BasicToken[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_BasicToken[this][msg.sender] >= 0 &&  balances_BasicToken[this][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(reverted(USDollarHKex.transfer)))
[2020-11-25 08:10:37,667 INFO  L1016  opiaSpecLangObserver]: Successfully lexed: [](started(USDollarHKex.transfer(to, value), msg.sender != to && (value > balances_BasicToken[this][msg.sender] || balances_BasicToken[this][to] + value >= 0x10000000000000000000000000000000000000000000000000000000000000000) && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_BasicToken[this][to] >= 0 && balances_BasicToken[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_BasicToken[this][msg.sender] >= 0 &&  balances_BasicToken[this][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(reverted(USDollarHKex.transfer)))
[2020-11-25 08:10:37,673 INFO  L1018  opiaSpecLangObserver]: Successfully parsed: [](started(USDollarHKex.transfer(to, value), msg.sender != to && (value > balances_BasicToken[this][msg.sender] || balances_BasicToken[this][to] + value >= 0x10000000000000000000000000000000000000000000000000000000000000000) && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_BasicToken[this][to] >= 0 && balances_BasicToken[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_BasicToken[this][msg.sender] >= 0 &&  balances_BasicToken[this][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(reverted(USDollarHKex.transfer)))
[2020-11-25 08:10:37,681 INFO  L636   opiaSpecLangObserver]: Parsed ( ( ( ( ( ( ( msg.sender!=_to_s828 && ( _value_s828>balances_BasicToken[this][msg.sender] || ( balances_BasicToken[this][_to_s828] + _value_s828 )>=115792089237316195423570985008687907853269984665640564039457584007913129639936 ) ) && _value_s828>=0 ) && _value_s828<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) && balances_BasicToken[this][_to_s828]>=0 ) && balances_BasicToken[this][_to_s828]<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) && balances_BasicToken[this][msg.sender]>=0 ) && balances_BasicToken[this][msg.sender]<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) to BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[COMPNEQ,IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transfer~address~uint256_USDollarHKex>],IdentifierExpression[_to_s828,<IMPLEMENTATION_INPARAM,transfer~address~uint256_USDollarHKex>]],BinaryExpression[LOGICOR,BinaryExpression[COMPGT,IdentifierExpression[_value_s828,<IMPLEMENTATION_INPARAM,transfer~address~uint256_USDollarHKex>],ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balances_BasicToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_USDollarHKex>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transfer~address~uint256_USDollarHKex>]]]],BinaryExpression[COMPGEQ,BinaryExpression[ARITHPLUS,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balances_BasicToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_USDollarHKex>]]],[IdentifierExpression[_to_s828,<IMPLEMENTATION_INPARAM,transfer~address~uint256_USDollarHKex>]]],IdentifierExpression[_value_s828,<IMPLEMENTATION_INPARAM,transfer~address~uint256_USDollarHKex>]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]]],BinaryExpression[COMPGEQ,IdentifierExpression[_value_s828,<IMPLEMENTATION_INPARAM,transfer~address~uint256_USDollarHKex>],IntegerLiteral[0]]],BinaryExpression[COMPLT,IdentifierExpression[_value_s828,<IMPLEMENTATION_INPARAM,transfer~address~uint256_USDollarHKex>],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]],BinaryExpression[COMPGEQ,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balances_BasicToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_USDollarHKex>]]],[IdentifierExpression[_to_s828,<IMPLEMENTATION_INPARAM,transfer~address~uint256_USDollarHKex>]]],IntegerLiteral[0]]],BinaryExpression[COMPLT,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balances_BasicToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_USDollarHKex>]]],[IdentifierExpression[_to_s828,<IMPLEMENTATION_INPARAM,transfer~address~uint256_USDollarHKex>]]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]],BinaryExpression[COMPGEQ,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balances_BasicToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_USDollarHKex>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transfer~address~uint256_USDollarHKex>]]],IntegerLiteral[0]]],BinaryExpression[COMPLT,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balances_BasicToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_USDollarHKex>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transfer~address~uint256_USDollarHKex>]]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]]
[2020-11-25 08:10:37,686 INFO  L1005  opiaSpecLangObserver]: Compiling: [](started(USDollarHKex.transfer(to, value), msg.sender != to && (value > balances_BasicToken[this][msg.sender] || balances_BasicToken[this][to] + value >= 0x10000000000000000000000000000000000000000000000000000000000000000) && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_BasicToken[this][to] >= 0 && balances_BasicToken[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_BasicToken[this][msg.sender] >= 0 &&  balances_BasicToken[this][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(reverted(USDollarHKex.transfer)))
[2020-11-25 08:10:37,686 INFO  L1007  opiaSpecLangObserver]: Compiled to ( []( AP(call_transfer_USDollarHKex0) ==> ( <>AP(fail_transfer_USDollarHKex0) ) ) )
Executed UtopiaSpecLang
[2020-11-25 08:10:37,700 INFO  L202        PluginConnector]: Adding new model Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 08:10:37 PropertyContainer
[2020-11-25 08:10:37,700 INFO  L132        PluginConnector]: ------------------------ END UtopiaSpecLang----------------------------
[2020-11-25 08:10:37,700 INFO  L113        PluginConnector]: ------------------------Boogie Printer----------------------------
[2020-11-25 08:10:37,700 INFO  L271        PluginConnector]: Initializing Boogie Printer...
[2020-11-25 08:10:37,700 INFO  L276        PluginConnector]: Boogie Printer initialized
[2020-11-25 08:10:37,701 INFO  L185        PluginConnector]: Executing the observer BoogiePrinterObserver from plugin Boogie Printer for "USDollarHKex_0x164f0C960c164F8988a556B4EB86d3a696b8E7f0_transfer-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 08:10:37" (1/2) ...
[2020-11-25 08:10:37,702 INFO  L116   oogiePrinterObserver]: File already exists and will be overwritten: /tmp/boogiePrinter.bpl
[2020-11-25 08:10:37,702 INFO  L120   oogiePrinterObserver]: Writing to file /tmp/boogiePrinter.bpl
[2020-11-25 08:10:37,722 INFO  L185        PluginConnector]: Executing the observer BoogiePrinterObserver from plugin Boogie Printer for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 08:10:37" (2/2) ...
[2020-11-25 08:10:37,722 INFO  L132        PluginConnector]: ------------------------ END Boogie Printer----------------------------
[2020-11-25 08:10:37,722 INFO  L113        PluginConnector]: ------------------------RCFGBuilder----------------------------
[2020-11-25 08:10:37,722 INFO  L271        PluginConnector]: Initializing RCFGBuilder...
[2020-11-25 08:10:37,722 INFO  L276        PluginConnector]: RCFGBuilder initialized
[2020-11-25 08:10:37,723 INFO  L185        PluginConnector]: Executing the observer RCFGBuilderObserver from plugin RCFGBuilder for "USDollarHKex_0x164f0C960c164F8988a556B4EB86d3a696b8E7f0_transfer-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 08:10:37" (1/2) ...
[2020-11-25 08:10:37,760 INFO  L130     BoogieDeclarations]: Found specification of procedure FreshRefGenerator__success
[2020-11-25 08:10:37,760 INFO  L130     BoogieDeclarations]: Found specification of procedure USDollarHKex.TimeLock_ctor__success
[2020-11-25 08:10:37,760 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath_NoBaseCtor__success
[2020-11-25 08:10:37,760 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath
[2020-11-25 08:10:37,760 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath
[2020-11-25 08:10:37,760 INFO  L130     BoogieDeclarations]: Found specification of procedure mul~uint256~uint256_SafeMath__success
[2020-11-25 08:10:37,760 INFO  L130     BoogieDeclarations]: Found specification of procedure div~uint256~uint256_SafeMath__success
[2020-11-25 08:10:37,760 INFO  L130     BoogieDeclarations]: Found specification of procedure sub~uint256~uint256_SafeMath__success
[2020-11-25 08:10:37,760 INFO  L130     BoogieDeclarations]: Found specification of procedure add~uint256~uint256_SafeMath__success
[2020-11-25 08:10:37,760 INFO  L130     BoogieDeclarations]: Found specification of procedure Ownable_Ownable_NoBaseCtor__success
[2020-11-25 08:10:37,760 INFO  L130     BoogieDeclarations]: Found specification of procedure Ownable_Ownable
[2020-11-25 08:10:37,761 INFO  L138     BoogieDeclarations]: Found implementation of procedure Ownable_Ownable
[2020-11-25 08:10:37,761 INFO  L130     BoogieDeclarations]: Found specification of procedure transferOwnership~address_Ownable
[2020-11-25 08:10:37,761 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferOwnership~address_Ownable
[2020-11-25 08:10:37,761 INFO  L130     BoogieDeclarations]: Found specification of procedure _transferOwnership~address_Ownable__success
[2020-11-25 08:10:37,761 INFO  L130     BoogieDeclarations]: Found specification of procedure owner_Ownable
[2020-11-25 08:10:37,761 INFO  L138     BoogieDeclarations]: Found implementation of procedure owner_Ownable
[2020-11-25 08:10:37,761 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Basic_ERC20Basic_NoBaseCtor__success
[2020-11-25 08:10:37,761 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Basic_ERC20Basic
[2020-11-25 08:10:37,761 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Basic_ERC20Basic
[2020-11-25 08:10:37,761 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_ERC20Basic
[2020-11-25 08:10:37,761 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_ERC20Basic
[2020-11-25 08:10:37,761 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_ERC20Basic
[2020-11-25 08:10:37,762 INFO  L130     BoogieDeclarations]: Found specification of procedure BasicToken_BasicToken_NoBaseCtor__success
[2020-11-25 08:10:37,762 INFO  L130     BoogieDeclarations]: Found specification of procedure BasicToken_BasicToken
[2020-11-25 08:10:37,762 INFO  L138     BoogieDeclarations]: Found implementation of procedure BasicToken_BasicToken
[2020-11-25 08:10:37,762 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_BasicToken
[2020-11-25 08:10:37,762 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_BasicToken
[2020-11-25 08:10:37,762 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_BasicToken
[2020-11-25 08:10:37,763 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_BasicToken
[2020-11-25 08:10:37,763 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_BasicToken
[2020-11-25 08:10:37,763 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_BasicToken
[2020-11-25 08:10:37,763 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20_NoBaseCtor__success
[2020-11-25 08:10:37,764 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20
[2020-11-25 08:10:37,764 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20
[2020-11-25 08:10:37,764 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_ERC20
[2020-11-25 08:10:37,764 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_ERC20
[2020-11-25 08:10:37,764 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_ERC20
[2020-11-25 08:10:37,765 INFO  L130     BoogieDeclarations]: Found specification of procedure StandardToken_StandardToken_NoBaseCtor__success
[2020-11-25 08:10:37,765 INFO  L130     BoogieDeclarations]: Found specification of procedure StandardToken_StandardToken
[2020-11-25 08:10:37,765 INFO  L138     BoogieDeclarations]: Found implementation of procedure StandardToken_StandardToken
[2020-11-25 08:10:37,765 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_StandardToken
[2020-11-25 08:10:37,765 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_StandardToken
[2020-11-25 08:10:37,766 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_StandardToken
[2020-11-25 08:10:37,766 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_StandardToken
[2020-11-25 08:10:37,766 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_StandardToken
[2020-11-25 08:10:37,766 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_StandardToken
[2020-11-25 08:10:37,767 INFO  L130     BoogieDeclarations]: Found specification of procedure increaseApproval~address~uint256_StandardToken
[2020-11-25 08:10:37,767 INFO  L138     BoogieDeclarations]: Found implementation of procedure increaseApproval~address~uint256_StandardToken
[2020-11-25 08:10:37,767 INFO  L130     BoogieDeclarations]: Found specification of procedure decreaseApproval~address~uint256_StandardToken
[2020-11-25 08:10:37,767 INFO  L138     BoogieDeclarations]: Found implementation of procedure decreaseApproval~address~uint256_StandardToken
[2020-11-25 08:10:37,768 INFO  L130     BoogieDeclarations]: Found specification of procedure Pausable_Pausable_NoBaseCtor__success
[2020-11-25 08:10:37,768 INFO  L130     BoogieDeclarations]: Found specification of procedure Pausable_Pausable
[2020-11-25 08:10:37,768 INFO  L138     BoogieDeclarations]: Found implementation of procedure Pausable_Pausable
[2020-11-25 08:10:37,768 INFO  L130     BoogieDeclarations]: Found specification of procedure pause_Pausable
[2020-11-25 08:10:37,768 INFO  L138     BoogieDeclarations]: Found implementation of procedure pause_Pausable
[2020-11-25 08:10:37,769 INFO  L130     BoogieDeclarations]: Found specification of procedure unpause_Pausable
[2020-11-25 08:10:37,769 INFO  L138     BoogieDeclarations]: Found implementation of procedure unpause_Pausable
[2020-11-25 08:10:37,769 INFO  L130     BoogieDeclarations]: Found specification of procedure paused_Pausable
[2020-11-25 08:10:37,769 INFO  L138     BoogieDeclarations]: Found implementation of procedure paused_Pausable
[2020-11-25 08:10:37,769 INFO  L130     BoogieDeclarations]: Found specification of procedure PausableToken_PausableToken_NoBaseCtor__success
[2020-11-25 08:10:37,770 INFO  L130     BoogieDeclarations]: Found specification of procedure PausableToken_PausableToken
[2020-11-25 08:10:37,770 INFO  L138     BoogieDeclarations]: Found implementation of procedure PausableToken_PausableToken
[2020-11-25 08:10:37,770 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_PausableToken
[2020-11-25 08:10:37,770 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_PausableToken
[2020-11-25 08:10:37,770 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_PausableToken
[2020-11-25 08:10:37,771 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_PausableToken
[2020-11-25 08:10:37,771 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_PausableToken
[2020-11-25 08:10:37,771 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_PausableToken
[2020-11-25 08:10:37,771 INFO  L130     BoogieDeclarations]: Found specification of procedure increaseApproval~address~uint256_PausableToken
[2020-11-25 08:10:37,772 INFO  L138     BoogieDeclarations]: Found implementation of procedure increaseApproval~address~uint256_PausableToken
[2020-11-25 08:10:37,772 INFO  L130     BoogieDeclarations]: Found specification of procedure decreaseApproval~address~uint256_PausableToken
[2020-11-25 08:10:37,772 INFO  L138     BoogieDeclarations]: Found implementation of procedure decreaseApproval~address~uint256_PausableToken
[2020-11-25 08:10:37,772 INFO  L130     BoogieDeclarations]: Found specification of procedure USDollarHKex_USDollarHKex_NoBaseCtor__success
[2020-11-25 08:10:37,772 INFO  L130     BoogieDeclarations]: Found specification of procedure USDollarHKex_USDollarHKex
[2020-11-25 08:10:37,773 INFO  L138     BoogieDeclarations]: Found implementation of procedure USDollarHKex_USDollarHKex
[2020-11-25 08:10:37,773 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_USDollarHKex
[2020-11-25 08:10:37,773 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_USDollarHKex
[2020-11-25 08:10:37,773 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_USDollarHKex
[2020-11-25 08:10:37,773 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_USDollarHKex
[2020-11-25 08:10:37,774 INFO  L130     BoogieDeclarations]: Found specification of procedure canSubAllocation~address~uint256_USDollarHKex__success
[2020-11-25 08:10:37,774 INFO  L130     BoogieDeclarations]: Found specification of procedure subAllocation~address_USDollarHKex__success
[2020-11-25 08:10:37,774 INFO  L130     BoogieDeclarations]: Found specification of procedure setAllocation~address~uint256~arr~arr_USDollarHKex
[2020-11-25 08:10:37,774 INFO  L138     BoogieDeclarations]: Found implementation of procedure setAllocation~address~uint256~arr~arr_USDollarHKex
[2020-11-25 08:10:37,775 INFO  L130     BoogieDeclarations]: Found specification of procedure name_USDollarHKex
[2020-11-25 08:10:37,775 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_USDollarHKex
[2020-11-25 08:10:37,775 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_USDollarHKex
[2020-11-25 08:10:37,775 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_USDollarHKex
[2020-11-25 08:10:37,775 INFO  L130     BoogieDeclarations]: Found specification of procedure standard_USDollarHKex
[2020-11-25 08:10:37,776 INFO  L138     BoogieDeclarations]: Found implementation of procedure standard_USDollarHKex
[2020-11-25 08:10:37,776 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_USDollarHKex
[2020-11-25 08:10:37,776 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_USDollarHKex
[2020-11-25 08:10:37,776 INFO  L130     BoogieDeclarations]: Found specification of procedure INITIAL_SUPPLY_USDollarHKex
[2020-11-25 08:10:37,776 INFO  L138     BoogieDeclarations]: Found implementation of procedure INITIAL_SUPPLY_USDollarHKex
[2020-11-25 08:10:37,776 INFO  L130     BoogieDeclarations]: Found specification of procedure allocations~address~uint256_USDollarHKex
[2020-11-25 08:10:37,776 INFO  L138     BoogieDeclarations]: Found implementation of procedure allocations~address~uint256_USDollarHKex
[2020-11-25 08:10:37,776 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackDispatch__success
[2020-11-25 08:10:37,776 INFO  L130     BoogieDeclarations]: Found specification of procedure Fallback_UnknownType__success
[2020-11-25 08:10:37,776 INFO  L130     BoogieDeclarations]: Found specification of procedure send__success
[2020-11-25 08:10:37,776 INFO  L130     BoogieDeclarations]: Found specification of procedure onlyOwner_pre__success
[2020-11-25 08:10:37,777 INFO  L130     BoogieDeclarations]: Found specification of procedure whenNotPaused_pre__success
[2020-11-25 08:10:37,777 INFO  L130     BoogieDeclarations]: Found specification of procedure whenPaused_pre__success
[2020-11-25 08:10:37,777 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_SafeMath
[2020-11-25 08:10:37,777 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_SafeMath
[2020-11-25 08:10:37,777 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_Ownable
[2020-11-25 08:10:37,777 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_Ownable
[2020-11-25 08:10:37,777 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_ERC20Basic
[2020-11-25 08:10:37,777 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_ERC20Basic
[2020-11-25 08:10:37,777 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_BasicToken
[2020-11-25 08:10:37,777 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_BasicToken
[2020-11-25 08:10:37,778 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_ERC20
[2020-11-25 08:10:37,778 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_ERC20
[2020-11-25 08:10:37,778 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_StandardToken
[2020-11-25 08:10:37,778 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_StandardToken
[2020-11-25 08:10:37,778 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_Pausable
[2020-11-25 08:10:37,778 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_Pausable
[2020-11-25 08:10:37,778 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_PausableToken
[2020-11-25 08:10:37,778 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_PausableToken
[2020-11-25 08:10:37,778 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_USDollarHKex
[2020-11-25 08:10:37,778 INFO  L130     BoogieDeclarations]: Found specification of procedure main
[2020-11-25 08:10:37,778 INFO  L130     BoogieDeclarations]: Found specification of procedure FreshRefGenerator__fail
[2020-11-25 08:10:37,779 INFO  L130     BoogieDeclarations]: Found specification of procedure USDollarHKex.TimeLock_ctor__fail
[2020-11-25 08:10:37,779 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath_NoBaseCtor__fail
[2020-11-25 08:10:37,779 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath__success
[2020-11-25 08:10:37,779 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath__fail
[2020-11-25 08:10:37,779 INFO  L130     BoogieDeclarations]: Found specification of procedure mul~uint256~uint256_SafeMath__fail
[2020-11-25 08:10:37,779 INFO  L130     BoogieDeclarations]: Found specification of procedure div~uint256~uint256_SafeMath__fail
[2020-11-25 08:10:37,779 INFO  L130     BoogieDeclarations]: Found specification of procedure sub~uint256~uint256_SafeMath__fail
[2020-11-25 08:10:37,780 INFO  L130     BoogieDeclarations]: Found specification of procedure add~uint256~uint256_SafeMath__fail
[2020-11-25 08:10:37,780 INFO  L130     BoogieDeclarations]: Found specification of procedure Ownable_Ownable_NoBaseCtor__fail
[2020-11-25 08:10:37,780 INFO  L130     BoogieDeclarations]: Found specification of procedure Ownable_Ownable__success
[2020-11-25 08:10:37,780 INFO  L130     BoogieDeclarations]: Found specification of procedure Ownable_Ownable__fail
[2020-11-25 08:10:37,780 INFO  L130     BoogieDeclarations]: Found specification of procedure transferOwnership~address_Ownable__success
[2020-11-25 08:10:37,780 INFO  L130     BoogieDeclarations]: Found specification of procedure transferOwnership~address_Ownable__fail
[2020-11-25 08:10:37,780 INFO  L130     BoogieDeclarations]: Found specification of procedure _transferOwnership~address_Ownable__fail
[2020-11-25 08:10:37,780 INFO  L130     BoogieDeclarations]: Found specification of procedure owner_Ownable__success
[2020-11-25 08:10:37,780 INFO  L130     BoogieDeclarations]: Found specification of procedure owner_Ownable__fail
[2020-11-25 08:10:37,780 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Basic_ERC20Basic_NoBaseCtor__fail
[2020-11-25 08:10:37,780 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Basic_ERC20Basic__success
[2020-11-25 08:10:37,781 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Basic_ERC20Basic__fail
[2020-11-25 08:10:37,781 INFO  L130     BoogieDeclarations]: Found specification of procedure BasicToken_BasicToken_NoBaseCtor__fail
[2020-11-25 08:10:37,781 INFO  L130     BoogieDeclarations]: Found specification of procedure BasicToken_BasicToken__success
[2020-11-25 08:10:37,781 INFO  L130     BoogieDeclarations]: Found specification of procedure BasicToken_BasicToken__fail
[2020-11-25 08:10:37,781 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_BasicToken__success
[2020-11-25 08:10:37,781 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_BasicToken__fail
[2020-11-25 08:10:37,781 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_BasicToken__success
[2020-11-25 08:10:37,781 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_BasicToken__fail
[2020-11-25 08:10:37,781 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_BasicToken__success
[2020-11-25 08:10:37,781 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_BasicToken__fail
[2020-11-25 08:10:37,782 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20_NoBaseCtor__fail
[2020-11-25 08:10:37,782 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20__success
[2020-11-25 08:10:37,782 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20__fail
[2020-11-25 08:10:37,782 INFO  L130     BoogieDeclarations]: Found specification of procedure StandardToken_StandardToken_NoBaseCtor__fail
[2020-11-25 08:10:37,782 INFO  L130     BoogieDeclarations]: Found specification of procedure StandardToken_StandardToken__success
[2020-11-25 08:10:37,782 INFO  L130     BoogieDeclarations]: Found specification of procedure StandardToken_StandardToken__fail
[2020-11-25 08:10:37,782 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_StandardToken__success
[2020-11-25 08:10:37,782 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_StandardToken__fail
[2020-11-25 08:10:37,782 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_StandardToken__success
[2020-11-25 08:10:37,782 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_StandardToken__fail
[2020-11-25 08:10:37,783 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_StandardToken__success
[2020-11-25 08:10:37,783 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_StandardToken__fail
[2020-11-25 08:10:37,783 INFO  L130     BoogieDeclarations]: Found specification of procedure increaseApproval~address~uint256_StandardToken__success
[2020-11-25 08:10:37,783 INFO  L130     BoogieDeclarations]: Found specification of procedure increaseApproval~address~uint256_StandardToken__fail
[2020-11-25 08:10:37,783 INFO  L130     BoogieDeclarations]: Found specification of procedure decreaseApproval~address~uint256_StandardToken__success
[2020-11-25 08:10:37,783 INFO  L130     BoogieDeclarations]: Found specification of procedure decreaseApproval~address~uint256_StandardToken__fail
[2020-11-25 08:10:37,783 INFO  L130     BoogieDeclarations]: Found specification of procedure Pausable_Pausable_NoBaseCtor__fail
[2020-11-25 08:10:37,783 INFO  L130     BoogieDeclarations]: Found specification of procedure Pausable_Pausable__success
[2020-11-25 08:10:37,783 INFO  L130     BoogieDeclarations]: Found specification of procedure Pausable_Pausable__fail
[2020-11-25 08:10:37,783 INFO  L130     BoogieDeclarations]: Found specification of procedure pause_Pausable__success
[2020-11-25 08:10:37,784 INFO  L130     BoogieDeclarations]: Found specification of procedure pause_Pausable__fail
[2020-11-25 08:10:37,784 INFO  L130     BoogieDeclarations]: Found specification of procedure unpause_Pausable__success
[2020-11-25 08:10:37,784 INFO  L130     BoogieDeclarations]: Found specification of procedure unpause_Pausable__fail
[2020-11-25 08:10:37,784 INFO  L130     BoogieDeclarations]: Found specification of procedure paused_Pausable__success
[2020-11-25 08:10:37,784 INFO  L130     BoogieDeclarations]: Found specification of procedure paused_Pausable__fail
[2020-11-25 08:10:37,784 INFO  L130     BoogieDeclarations]: Found specification of procedure PausableToken_PausableToken_NoBaseCtor__fail
[2020-11-25 08:10:37,784 INFO  L130     BoogieDeclarations]: Found specification of procedure PausableToken_PausableToken__success
[2020-11-25 08:10:37,784 INFO  L130     BoogieDeclarations]: Found specification of procedure PausableToken_PausableToken__fail
[2020-11-25 08:10:37,784 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_PausableToken__success
[2020-11-25 08:10:37,784 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_PausableToken__fail
[2020-11-25 08:10:37,784 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_PausableToken__success
[2020-11-25 08:10:37,784 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_PausableToken__fail
[2020-11-25 08:10:37,785 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_PausableToken__success
[2020-11-25 08:10:37,785 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_PausableToken__fail
[2020-11-25 08:10:37,785 INFO  L130     BoogieDeclarations]: Found specification of procedure increaseApproval~address~uint256_PausableToken__success
[2020-11-25 08:10:37,785 INFO  L130     BoogieDeclarations]: Found specification of procedure increaseApproval~address~uint256_PausableToken__fail
[2020-11-25 08:10:37,785 INFO  L130     BoogieDeclarations]: Found specification of procedure decreaseApproval~address~uint256_PausableToken__success
[2020-11-25 08:10:37,785 INFO  L130     BoogieDeclarations]: Found specification of procedure decreaseApproval~address~uint256_PausableToken__fail
[2020-11-25 08:10:37,785 INFO  L130     BoogieDeclarations]: Found specification of procedure USDollarHKex_USDollarHKex_NoBaseCtor__fail
[2020-11-25 08:10:37,785 INFO  L130     BoogieDeclarations]: Found specification of procedure USDollarHKex_USDollarHKex__success
[2020-11-25 08:10:37,785 INFO  L130     BoogieDeclarations]: Found specification of procedure USDollarHKex_USDollarHKex__fail
[2020-11-25 08:10:37,785 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_USDollarHKex__success
[2020-11-25 08:10:37,785 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_USDollarHKex__fail
[2020-11-25 08:10:37,786 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_USDollarHKex__success
[2020-11-25 08:10:37,786 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_USDollarHKex__fail
[2020-11-25 08:10:37,786 INFO  L130     BoogieDeclarations]: Found specification of procedure canSubAllocation~address~uint256_USDollarHKex__fail
[2020-11-25 08:10:37,786 INFO  L130     BoogieDeclarations]: Found specification of procedure subAllocation~address_USDollarHKex__fail
[2020-11-25 08:10:37,786 INFO  L130     BoogieDeclarations]: Found specification of procedure setAllocation~address~uint256~arr~arr_USDollarHKex__success
[2020-11-25 08:10:37,786 INFO  L130     BoogieDeclarations]: Found specification of procedure setAllocation~address~uint256~arr~arr_USDollarHKex__fail
[2020-11-25 08:10:37,786 INFO  L130     BoogieDeclarations]: Found specification of procedure name_USDollarHKex__success
[2020-11-25 08:10:37,786 INFO  L130     BoogieDeclarations]: Found specification of procedure name_USDollarHKex__fail
[2020-11-25 08:10:37,786 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_USDollarHKex__success
[2020-11-25 08:10:37,786 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_USDollarHKex__fail
[2020-11-25 08:10:37,786 INFO  L130     BoogieDeclarations]: Found specification of procedure standard_USDollarHKex__success
[2020-11-25 08:10:37,786 INFO  L130     BoogieDeclarations]: Found specification of procedure standard_USDollarHKex__fail
[2020-11-25 08:10:37,787 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_USDollarHKex__success
[2020-11-25 08:10:37,787 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_USDollarHKex__fail
[2020-11-25 08:10:37,787 INFO  L130     BoogieDeclarations]: Found specification of procedure INITIAL_SUPPLY_USDollarHKex__success
[2020-11-25 08:10:37,787 INFO  L130     BoogieDeclarations]: Found specification of procedure INITIAL_SUPPLY_USDollarHKex__fail
[2020-11-25 08:10:37,787 INFO  L130     BoogieDeclarations]: Found specification of procedure allocations~address~uint256_USDollarHKex__success
[2020-11-25 08:10:37,787 INFO  L130     BoogieDeclarations]: Found specification of procedure allocations~address~uint256_USDollarHKex__fail
[2020-11-25 08:10:37,787 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackDispatch__fail
[2020-11-25 08:10:37,787 INFO  L130     BoogieDeclarations]: Found specification of procedure Fallback_UnknownType__fail
[2020-11-25 08:10:37,787 INFO  L130     BoogieDeclarations]: Found specification of procedure send__fail
[2020-11-25 08:10:37,787 INFO  L130     BoogieDeclarations]: Found specification of procedure onlyOwner_pre__fail
[2020-11-25 08:10:37,787 INFO  L130     BoogieDeclarations]: Found specification of procedure whenNotPaused_pre__fail
[2020-11-25 08:10:37,787 INFO  L130     BoogieDeclarations]: Found specification of procedure whenPaused_pre__fail
[2020-11-25 08:10:37,788 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreshRefGenerator__fail
[2020-11-25 08:10:37,788 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreshRefGenerator__success
[2020-11-25 08:10:37,788 INFO  L138     BoogieDeclarations]: Found implementation of procedure USDollarHKex.TimeLock_ctor__fail
[2020-11-25 08:10:37,788 INFO  L138     BoogieDeclarations]: Found implementation of procedure USDollarHKex.TimeLock_ctor__success
[2020-11-25 08:10:37,788 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath_NoBaseCtor__fail
[2020-11-25 08:10:37,788 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath_NoBaseCtor__success
[2020-11-25 08:10:37,788 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath__fail
[2020-11-25 08:10:37,788 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath__success
[2020-11-25 08:10:37,788 INFO  L138     BoogieDeclarations]: Found implementation of procedure mul~uint256~uint256_SafeMath__fail
[2020-11-25 08:10:37,788 INFO  L138     BoogieDeclarations]: Found implementation of procedure mul~uint256~uint256_SafeMath__success
[2020-11-25 08:10:37,788 INFO  L138     BoogieDeclarations]: Found implementation of procedure div~uint256~uint256_SafeMath__fail
[2020-11-25 08:10:37,788 INFO  L138     BoogieDeclarations]: Found implementation of procedure div~uint256~uint256_SafeMath__success
[2020-11-25 08:10:37,789 INFO  L138     BoogieDeclarations]: Found implementation of procedure sub~uint256~uint256_SafeMath__fail
[2020-11-25 08:10:37,789 INFO  L138     BoogieDeclarations]: Found implementation of procedure sub~uint256~uint256_SafeMath__success
[2020-11-25 08:10:37,789 INFO  L138     BoogieDeclarations]: Found implementation of procedure add~uint256~uint256_SafeMath__fail
[2020-11-25 08:10:37,789 INFO  L138     BoogieDeclarations]: Found implementation of procedure add~uint256~uint256_SafeMath__success
[2020-11-25 08:10:37,789 INFO  L138     BoogieDeclarations]: Found implementation of procedure Ownable_Ownable_NoBaseCtor__fail
[2020-11-25 08:10:37,789 INFO  L138     BoogieDeclarations]: Found implementation of procedure Ownable_Ownable_NoBaseCtor__success
[2020-11-25 08:10:37,789 INFO  L138     BoogieDeclarations]: Found implementation of procedure Ownable_Ownable__fail
[2020-11-25 08:10:37,789 INFO  L138     BoogieDeclarations]: Found implementation of procedure Ownable_Ownable__success
[2020-11-25 08:10:37,789 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferOwnership~address_Ownable__fail
[2020-11-25 08:10:37,789 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferOwnership~address_Ownable__success
[2020-11-25 08:10:37,789 INFO  L138     BoogieDeclarations]: Found implementation of procedure _transferOwnership~address_Ownable__fail
[2020-11-25 08:10:37,789 INFO  L138     BoogieDeclarations]: Found implementation of procedure _transferOwnership~address_Ownable__success
[2020-11-25 08:10:37,789 INFO  L138     BoogieDeclarations]: Found implementation of procedure owner_Ownable__fail
[2020-11-25 08:10:37,790 INFO  L138     BoogieDeclarations]: Found implementation of procedure owner_Ownable__success
[2020-11-25 08:10:37,790 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Basic_ERC20Basic_NoBaseCtor__fail
[2020-11-25 08:10:37,790 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Basic_ERC20Basic_NoBaseCtor__success
[2020-11-25 08:10:37,790 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Basic_ERC20Basic__fail
[2020-11-25 08:10:37,790 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Basic_ERC20Basic__success
[2020-11-25 08:10:37,790 INFO  L138     BoogieDeclarations]: Found implementation of procedure BasicToken_BasicToken_NoBaseCtor__fail
[2020-11-25 08:10:37,790 INFO  L138     BoogieDeclarations]: Found implementation of procedure BasicToken_BasicToken_NoBaseCtor__success
[2020-11-25 08:10:37,790 INFO  L138     BoogieDeclarations]: Found implementation of procedure BasicToken_BasicToken__fail
[2020-11-25 08:10:37,790 INFO  L138     BoogieDeclarations]: Found implementation of procedure BasicToken_BasicToken__success
[2020-11-25 08:10:37,790 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_BasicToken__fail
[2020-11-25 08:10:37,790 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_BasicToken__success
[2020-11-25 08:10:37,790 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_BasicToken__fail
[2020-11-25 08:10:37,791 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_BasicToken__success
[2020-11-25 08:10:37,791 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_BasicToken__fail
[2020-11-25 08:10:37,791 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_BasicToken__success
[2020-11-25 08:10:37,791 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20_NoBaseCtor__fail
[2020-11-25 08:10:37,791 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20_NoBaseCtor__success
[2020-11-25 08:10:37,791 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20__fail
[2020-11-25 08:10:37,791 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20__success
[2020-11-25 08:10:37,791 INFO  L138     BoogieDeclarations]: Found implementation of procedure StandardToken_StandardToken_NoBaseCtor__fail
[2020-11-25 08:10:37,791 INFO  L138     BoogieDeclarations]: Found implementation of procedure StandardToken_StandardToken_NoBaseCtor__success
[2020-11-25 08:10:37,791 INFO  L138     BoogieDeclarations]: Found implementation of procedure StandardToken_StandardToken__fail
[2020-11-25 08:10:37,791 INFO  L138     BoogieDeclarations]: Found implementation of procedure StandardToken_StandardToken__success
[2020-11-25 08:10:37,791 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_StandardToken__fail
[2020-11-25 08:10:37,792 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_StandardToken__success
[2020-11-25 08:10:37,792 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_StandardToken__fail
[2020-11-25 08:10:37,792 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_StandardToken__success
[2020-11-25 08:10:37,792 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_StandardToken__fail
[2020-11-25 08:10:37,792 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_StandardToken__success
[2020-11-25 08:10:37,792 INFO  L138     BoogieDeclarations]: Found implementation of procedure increaseApproval~address~uint256_StandardToken__fail
[2020-11-25 08:10:37,792 INFO  L138     BoogieDeclarations]: Found implementation of procedure increaseApproval~address~uint256_StandardToken__success
[2020-11-25 08:10:37,792 INFO  L138     BoogieDeclarations]: Found implementation of procedure decreaseApproval~address~uint256_StandardToken__fail
[2020-11-25 08:10:37,793 INFO  L138     BoogieDeclarations]: Found implementation of procedure decreaseApproval~address~uint256_StandardToken__success
[2020-11-25 08:10:37,793 INFO  L138     BoogieDeclarations]: Found implementation of procedure Pausable_Pausable_NoBaseCtor__fail
[2020-11-25 08:10:37,793 INFO  L138     BoogieDeclarations]: Found implementation of procedure Pausable_Pausable_NoBaseCtor__success
[2020-11-25 08:10:37,793 INFO  L138     BoogieDeclarations]: Found implementation of procedure Pausable_Pausable__fail
[2020-11-25 08:10:37,793 INFO  L138     BoogieDeclarations]: Found implementation of procedure Pausable_Pausable__success
[2020-11-25 08:10:37,793 INFO  L138     BoogieDeclarations]: Found implementation of procedure pause_Pausable__fail
[2020-11-25 08:10:37,793 INFO  L138     BoogieDeclarations]: Found implementation of procedure pause_Pausable__success
[2020-11-25 08:10:37,793 INFO  L138     BoogieDeclarations]: Found implementation of procedure unpause_Pausable__fail
[2020-11-25 08:10:37,793 INFO  L138     BoogieDeclarations]: Found implementation of procedure unpause_Pausable__success
[2020-11-25 08:10:37,793 INFO  L138     BoogieDeclarations]: Found implementation of procedure paused_Pausable__fail
[2020-11-25 08:10:37,794 INFO  L138     BoogieDeclarations]: Found implementation of procedure paused_Pausable__success
[2020-11-25 08:10:37,794 INFO  L138     BoogieDeclarations]: Found implementation of procedure PausableToken_PausableToken_NoBaseCtor__fail
[2020-11-25 08:10:37,794 INFO  L138     BoogieDeclarations]: Found implementation of procedure PausableToken_PausableToken_NoBaseCtor__success
[2020-11-25 08:10:37,794 INFO  L138     BoogieDeclarations]: Found implementation of procedure PausableToken_PausableToken__fail
[2020-11-25 08:10:37,794 INFO  L138     BoogieDeclarations]: Found implementation of procedure PausableToken_PausableToken__success
[2020-11-25 08:10:37,794 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_PausableToken__fail
[2020-11-25 08:10:37,794 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_PausableToken__success
[2020-11-25 08:10:37,794 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_PausableToken__fail
[2020-11-25 08:10:37,794 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_PausableToken__success
[2020-11-25 08:10:37,794 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_PausableToken__fail
[2020-11-25 08:10:37,794 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_PausableToken__success
[2020-11-25 08:10:37,794 INFO  L138     BoogieDeclarations]: Found implementation of procedure increaseApproval~address~uint256_PausableToken__fail
[2020-11-25 08:10:37,795 INFO  L138     BoogieDeclarations]: Found implementation of procedure increaseApproval~address~uint256_PausableToken__success
[2020-11-25 08:10:37,795 INFO  L138     BoogieDeclarations]: Found implementation of procedure decreaseApproval~address~uint256_PausableToken__fail
[2020-11-25 08:10:37,795 INFO  L138     BoogieDeclarations]: Found implementation of procedure decreaseApproval~address~uint256_PausableToken__success
[2020-11-25 08:10:37,795 INFO  L138     BoogieDeclarations]: Found implementation of procedure USDollarHKex_USDollarHKex_NoBaseCtor__fail
[2020-11-25 08:10:37,795 INFO  L138     BoogieDeclarations]: Found implementation of procedure USDollarHKex_USDollarHKex_NoBaseCtor__success
[2020-11-25 08:10:37,795 INFO  L138     BoogieDeclarations]: Found implementation of procedure USDollarHKex_USDollarHKex__fail
[2020-11-25 08:10:37,795 INFO  L138     BoogieDeclarations]: Found implementation of procedure USDollarHKex_USDollarHKex__success
[2020-11-25 08:10:37,795 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_USDollarHKex__fail
[2020-11-25 08:10:37,795 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_USDollarHKex__success
[2020-11-25 08:10:37,795 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_USDollarHKex__fail
[2020-11-25 08:10:37,795 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_USDollarHKex__success
[2020-11-25 08:10:37,795 INFO  L138     BoogieDeclarations]: Found implementation of procedure canSubAllocation~address~uint256_USDollarHKex__fail
[2020-11-25 08:10:37,795 INFO  L138     BoogieDeclarations]: Found implementation of procedure canSubAllocation~address~uint256_USDollarHKex__success
[2020-11-25 08:10:37,796 INFO  L138     BoogieDeclarations]: Found implementation of procedure subAllocation~address_USDollarHKex__fail
[2020-11-25 08:10:37,796 INFO  L138     BoogieDeclarations]: Found implementation of procedure subAllocation~address_USDollarHKex__success
[2020-11-25 08:10:37,796 INFO  L138     BoogieDeclarations]: Found implementation of procedure setAllocation~address~uint256~arr~arr_USDollarHKex__fail
[2020-11-25 08:10:37,796 INFO  L138     BoogieDeclarations]: Found implementation of procedure setAllocation~address~uint256~arr~arr_USDollarHKex__success
[2020-11-25 08:10:37,796 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_USDollarHKex__fail
[2020-11-25 08:10:37,796 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_USDollarHKex__success
[2020-11-25 08:10:37,796 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_USDollarHKex__fail
[2020-11-25 08:10:37,796 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_USDollarHKex__success
[2020-11-25 08:10:37,796 INFO  L138     BoogieDeclarations]: Found implementation of procedure standard_USDollarHKex__fail
[2020-11-25 08:10:37,796 INFO  L138     BoogieDeclarations]: Found implementation of procedure standard_USDollarHKex__success
[2020-11-25 08:10:37,796 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_USDollarHKex__fail
[2020-11-25 08:10:37,796 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_USDollarHKex__success
[2020-11-25 08:10:37,797 INFO  L138     BoogieDeclarations]: Found implementation of procedure INITIAL_SUPPLY_USDollarHKex__fail
[2020-11-25 08:10:37,797 INFO  L138     BoogieDeclarations]: Found implementation of procedure INITIAL_SUPPLY_USDollarHKex__success
[2020-11-25 08:10:37,797 INFO  L138     BoogieDeclarations]: Found implementation of procedure allocations~address~uint256_USDollarHKex__fail
[2020-11-25 08:10:37,797 INFO  L138     BoogieDeclarations]: Found implementation of procedure allocations~address~uint256_USDollarHKex__success
[2020-11-25 08:10:37,797 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackDispatch__fail
[2020-11-25 08:10:37,797 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackDispatch__success
[2020-11-25 08:10:37,797 INFO  L138     BoogieDeclarations]: Found implementation of procedure Fallback_UnknownType__fail
[2020-11-25 08:10:37,797 INFO  L138     BoogieDeclarations]: Found implementation of procedure Fallback_UnknownType__success
[2020-11-25 08:10:37,797 INFO  L138     BoogieDeclarations]: Found implementation of procedure send__fail
[2020-11-25 08:10:37,797 INFO  L138     BoogieDeclarations]: Found implementation of procedure send__success
[2020-11-25 08:10:37,797 INFO  L138     BoogieDeclarations]: Found implementation of procedure onlyOwner_pre__fail
[2020-11-25 08:10:37,797 INFO  L138     BoogieDeclarations]: Found implementation of procedure onlyOwner_pre__success
[2020-11-25 08:10:37,798 INFO  L138     BoogieDeclarations]: Found implementation of procedure whenNotPaused_pre__fail
[2020-11-25 08:10:37,798 INFO  L138     BoogieDeclarations]: Found implementation of procedure whenNotPaused_pre__success
[2020-11-25 08:10:37,798 INFO  L138     BoogieDeclarations]: Found implementation of procedure whenPaused_pre__fail
[2020-11-25 08:10:37,798 INFO  L138     BoogieDeclarations]: Found implementation of procedure whenPaused_pre__success
[2020-11-25 08:10:37,798 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_SafeMath
[2020-11-25 08:10:37,798 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_SafeMath
[2020-11-25 08:10:37,798 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_Ownable
[2020-11-25 08:10:37,798 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_Ownable
[2020-11-25 08:10:37,798 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_ERC20Basic
[2020-11-25 08:10:37,798 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_ERC20Basic
[2020-11-25 08:10:37,798 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_BasicToken
[2020-11-25 08:10:37,798 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_BasicToken
[2020-11-25 08:10:37,799 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_ERC20
[2020-11-25 08:10:37,799 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_ERC20
[2020-11-25 08:10:37,799 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_StandardToken
[2020-11-25 08:10:37,799 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_StandardToken
[2020-11-25 08:10:37,799 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_Pausable
[2020-11-25 08:10:37,799 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_Pausable
[2020-11-25 08:10:37,799 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_PausableToken
[2020-11-25 08:10:37,799 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_PausableToken
[2020-11-25 08:10:37,799 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_USDollarHKex
[2020-11-25 08:10:37,799 INFO  L138     BoogieDeclarations]: Found implementation of procedure main
[2020-11-25 08:10:37,799 INFO  L130     BoogieDeclarations]: Found specification of procedure ULTIMATE.start
[2020-11-25 08:10:37,799 INFO  L138     BoogieDeclarations]: Found implementation of procedure ULTIMATE.start
[2020-11-25 08:10:38,774 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 08:10:38,774 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 08:10:38,945 INFO  L281             CfgBuilder]: Using the 1 location(s) as analysis (start of procedure ULTIMATE.start)
[2020-11-25 08:10:38,945 INFO  L286             CfgBuilder]: Removed 9 assue(true) statements.
[2020-11-25 08:10:38,948 INFO  L202        PluginConnector]: Adding new model USDollarHKex_0x164f0C960c164F8988a556B4EB86d3a696b8E7f0_transfer-fail.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 08:10:38 BoogieIcfgContainer
[2020-11-25 08:10:38,948 INFO  L185        PluginConnector]: Executing the observer RCFGBuilderObserver from plugin RCFGBuilder for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 08:10:37" (2/2) ...
[2020-11-25 08:10:38,948 INFO  L85     RCFGBuilderObserver]: No WrapperNode. Let Ultimate process with next node
[2020-11-25 08:10:38,948 INFO  L205        PluginConnector]: Invalid model from RCFGBuilder for observer de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder.RCFGBuilderObserver@22b556da and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 08:10:38, skipping insertion in model container
[2020-11-25 08:10:38,949 INFO  L132        PluginConnector]: ------------------------ END RCFGBuilder----------------------------
[2020-11-25 08:10:38,949 INFO  L113        PluginConnector]: ------------------------UtopiaLTL2Aut----------------------------
[2020-11-25 08:10:38,949 INFO  L271        PluginConnector]: Initializing UtopiaLTL2Aut...
[2020-11-25 08:10:38,950 INFO  L276        PluginConnector]: UtopiaLTL2Aut initialized
[2020-11-25 08:10:38,950 INFO  L185        PluginConnector]: Executing the observer UtopiaLTL2AutObserver from plugin UtopiaLTL2Aut for "USDollarHKex_0x164f0C960c164F8988a556B4EB86d3a696b8E7f0_transfer-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 08:10:37" (1/3) ...
[2020-11-25 08:10:38,951 INFO  L205        PluginConnector]: Invalid model from UtopiaLTL2Aut for observer edu.utexas.cs.utopia.ltl2aut.UtopiaLTL2AutObserver@61f4694c and model type Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 08:10:38, skipping insertion in model container
[2020-11-25 08:10:38,951 INFO  L185        PluginConnector]: Executing the observer UtopiaLTL2AutObserver from plugin UtopiaLTL2Aut for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 08:10:37" (2/3) ...
No working directory specified, using /mnt/data0/jon/SmartPulseTool/ltl2ba
Starting monitored process 1 with /mnt/data0/jon/SmartPulseTool/ltl2ba -f ! ( ( [] ( a -> ( <>b ) ) ) )  (exit command is null, workingDir is null)
[2020-11-25 08:10:38,988 INFO  L202        PluginConnector]: Adding new model Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 08:10:38 NWAContainer
[2020-11-25 08:10:38,988 INFO  L132        PluginConnector]: ------------------------ END UtopiaLTL2Aut----------------------------
[2020-11-25 08:10:38,988 INFO  L113        PluginConnector]: ------------------------BÃ¼chi Program Product----------------------------
[2020-11-25 08:10:38,988 INFO  L271        PluginConnector]: Initializing BÃ¼chi Program Product...
[2020-11-25 08:10:38,989 INFO  L276        PluginConnector]: BÃ¼chi Program Product initialized
[2020-11-25 08:10:38,990 INFO  L185        PluginConnector]: Executing the observer BuchiProductObserver from plugin BÃ¼chi Program Product for "USDollarHKex_0x164f0C960c164F8988a556B4EB86d3a696b8E7f0_transfer-fail.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 08:10:38" (3/4) ...
[2020-11-25 08:10:38,990 INFO  L205        PluginConnector]: Invalid model from BÃ¼chi Program Product for observer de.uni_freiburg.informatik.ultimate.buchiprogramproduct.BuchiProductObserver@1d3c0a14 and model type LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 08:10:38, skipping insertion in model container
[2020-11-25 08:10:38,990 INFO  L185        PluginConnector]: Executing the observer BuchiProductObserver from plugin BÃ¼chi Program Product for "Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 08:10:38" (4/4) ...
[2020-11-25 08:10:38,993 INFO  L104   BuchiProductObserver]: Initial property automaton 2 locations, 3 edges
[2020-11-25 08:10:38,999 INFO  L110   BuchiProductObserver]: Initial RCFG 3266 locations, 4464 edges
[2020-11-25 08:10:38,999 INFO  L93    BuchiProductObserver]: Beginning generation of product automaton
[2020-11-25 08:10:39,013 INFO  L136       ProductGenerator]: The program has no step specification, so we assume maximum atomicity
[2020-11-25 08:10:41,470 INFO  L97    BuchiProductObserver]: Finished generation of product automaton successfully
[2020-11-25 08:10:41,480 INFO  L110   BuchiProductObserver]: BuchiProgram size 8068 locations, 14499 edges
[2020-11-25 08:10:41,480 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 08:10:41 BoogieIcfgContainer
[2020-11-25 08:10:41,480 INFO  L132        PluginConnector]: ------------------------ END BÃ¼chi Program Product----------------------------
[2020-11-25 08:10:41,480 INFO  L113        PluginConnector]: ------------------------BlockEncodingV2----------------------------
[2020-11-25 08:10:41,481 INFO  L271        PluginConnector]: Initializing BlockEncodingV2...
[2020-11-25 08:10:41,482 INFO  L276        PluginConnector]: BlockEncodingV2 initialized
[2020-11-25 08:10:41,482 INFO  L185        PluginConnector]: Executing the observer BlockEncodingObserver from plugin BlockEncodingV2 for "LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 08:10:41" (1/1) ...
[2020-11-25 08:10:41,632 INFO  L313           BlockEncoder]: Initial Icfg 8068 locations, 14499 edges
[2020-11-25 08:10:41,632 INFO  L258           BlockEncoder]: Using Remove infeasible edges
[2020-11-25 08:10:41,632 INFO  L270           BlockEncoder]: Using Minimize states even if more edges are added than removed.=true
[2020-11-25 08:10:41,632 INFO  L296           BlockEncoder]: Using Remove sink states
[2020-11-25 08:10:41,633 INFO  L171           BlockEncoder]: Using Apply optimizations until nothing changes=true
[2020-11-25 08:10:41,651 INFO  L70    emoveInfeasibleEdges]: Removed 150 edges and 22 locations because of local infeasibility
[2020-11-25 08:10:41,669 INFO  L70        RemoveSinkStates]: Removed 178 edges and 98 locations by removing sink states
[2020-11-25 08:10:41,692 INFO  L70    emoveInfeasibleEdges]: Removed 0 edges and 0 locations because of local infeasibility
[2020-11-25 08:10:41,698 INFO  L70        RemoveSinkStates]: Removed 0 edges and 0 locations by removing sink states
[2020-11-25 08:10:41,703 INFO  L237           BlockEncoder]: Using Create parallel compositions if possible
[2020-11-25 08:10:41,704 INFO  L66        ParallelComposer]: Creating parallel compositions
[2020-11-25 08:10:41,708 INFO  L313           BlockEncoder]: Encoded RCFG 7908 locations, 14112 edges
[2020-11-25 08:10:41,708 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.blockencoding CFG 25.11 08:10:41 BasicIcfg
[2020-11-25 08:10:41,709 INFO  L132        PluginConnector]: ------------------------ END BlockEncodingV2----------------------------
[2020-11-25 08:10:41,709 INFO  L113        PluginConnector]: ------------------------BuchiAutomizer----------------------------
[2020-11-25 08:10:41,709 INFO  L271        PluginConnector]: Initializing BuchiAutomizer...
[2020-11-25 08:10:41,710 INFO  L276        PluginConnector]: BuchiAutomizer initialized
[2020-11-25 08:10:41,711 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 08:10:41,711 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "USDollarHKex_0x164f0C960c164F8988a556B4EB86d3a696b8E7f0_transfer-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 08:10:37" (1/6) ...
[2020-11-25 08:10:41,712 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@264ed5d8 and model type USDollarHKex_0x164f0C960c164F8988a556B4EB86d3a696b8E7f0_transfer-fail.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 08:10:41, skipping insertion in model container
[2020-11-25 08:10:41,712 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 08:10:41,712 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 08:10:37" (2/6) ...
[2020-11-25 08:10:41,713 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@264ed5d8 and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 08:10:41, skipping insertion in model container
[2020-11-25 08:10:41,713 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 08:10:41,713 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "USDollarHKex_0x164f0C960c164F8988a556B4EB86d3a696b8E7f0_transfer-fail.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 08:10:38" (3/6) ...
[2020-11-25 08:10:41,713 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@264ed5d8 and model type USDollarHKex_0x164f0C960c164F8988a556B4EB86d3a696b8E7f0_transfer-fail.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer CFG 25.11 08:10:41, skipping insertion in model container
[2020-11-25 08:10:41,713 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 08:10:41,713 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 08:10:38" (4/6) ...
[2020-11-25 08:10:41,713 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@264ed5d8 and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 08:10:41, skipping insertion in model container
[2020-11-25 08:10:41,713 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 08:10:41,713 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 08:10:41" (5/6) ...
[2020-11-25 08:10:41,713 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@264ed5d8 and model type LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer OTHER 25.11 08:10:41, skipping insertion in model container
[2020-11-25 08:10:41,714 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 08:10:41,714 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.blockencoding CFG 25.11 08:10:41" (6/6) ...
[2020-11-25 08:10:41,715 INFO  L404   chiAutomizerObserver]: Analyzing ICFG USDollarHKex_0x164f0C960c164F8988a556B4EB86d3a696b8E7f0_transfer-fail.bpl_BEv2
[2020-11-25 08:10:41,751 INFO  L133   ementStrategyFactory]: Using default assertion order modulation
[2020-11-25 08:10:41,751 INFO  L377         BuchiCegarLoop]: Interprodecural is true
[2020-11-25 08:10:41,751 INFO  L378         BuchiCegarLoop]: Hoare is false
[2020-11-25 08:10:41,751 INFO  L379         BuchiCegarLoop]: Compute interpolants for Craig_TreeInterpolation
[2020-11-25 08:10:41,751 INFO  L380         BuchiCegarLoop]: Backedges is STRAIGHT_LINE
[2020-11-25 08:10:41,751 INFO  L381         BuchiCegarLoop]: Determinization is PREDICATE_ABSTRACTION
[2020-11-25 08:10:41,751 INFO  L382         BuchiCegarLoop]: Difference is false
[2020-11-25 08:10:41,751 INFO  L383         BuchiCegarLoop]: Minimize is MINIMIZE_SEVPA
[2020-11-25 08:10:41,751 INFO  L386         BuchiCegarLoop]: ======== Iteration 0==of CEGAR loop == BuchiCegarLoop========
[2020-11-25 08:10:41,824 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 7908 states.
[2020-11-25 08:10:41,906 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 08:10:41,906 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 08:10:41,906 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 08:10:41,913 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 08:10:41,913 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 08:10:41,913 INFO  L445         BuchiCegarLoop]: ======== Iteration 1============
[2020-11-25 08:10:41,913 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 7908 states.
[2020-11-25 08:10:41,941 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 08:10:41,941 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 08:10:41,942 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 08:10:41,943 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 08:10:41,943 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transfer_USDollarHKex0 := false;
[L2]                 call_transfer_USDollarHKex0 := false;
[L2]     CALL        call main();
[L8678]              assume null == 0;
[L8679]  CALL        call this := FreshRefGenerator__success();
[L3835]              havoc newRef;
[L3836]              assume Alloc[newRef] == false;
[L3837]              Alloc[newRef] := true;
[L3838]              assume newRef != null;
[L8679]  RET         call this := FreshRefGenerator__success();
[L8680]              assume now >= 0;
[L8681]              assume DType[this] == USDollarHKex;
[L8682]              assume msgvalue_MSG == 0;
[L8683]              gas := gas - 53000;
[L8684]  CALL        call USDollarHKex_USDollarHKex(this, msgsender_MSG, msgvalue_MSG);
[L2092]              havoc __exception;
[L2093]              revert := false;
[L2094]  COND FALSE  !(__exception)
[L2126]  CALL        call USDollarHKex_USDollarHKex__success(this, msgsender_MSG, msgvalue_MSG);
[L5079]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4107]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4092]              assume msgsender_MSG != null;
[L4093]              Balance[this] := 0;
[L4107]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4108]  COND FALSE  !(revert)
[L5079]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5080]  COND TRUE   revert
[L2126]  RET         call USDollarHKex_USDollarHKex__success(this, msgsender_MSG, msgvalue_MSG);
[L2127]              assume !revert && gas >= 0;
[L8684]  RET         call USDollarHKex_USDollarHKex(this, msgsender_MSG, msgvalue_MSG);
[L8685]              assume !revert && gas >= 0;

Loop:
[L8688]  CALL        call CorralChoice_USDollarHKex(this);
[L8483]              havoc msgsender_MSG;
[L8484]              havoc msgvalue_MSG;
[L8485]              havoc choice;
[L8486]              havoc __ret_0_owner;
[L8487]              havoc _newOwner_s133;
[L8488]              havoc __ret_0_totalSupply;
[L8489]              havoc _owner_s278;
[L8490]              havoc __ret_0_balanceOf;
[L8491]              havoc _to_s828;
[L8492]              havoc _value_s828;
[L8493]              havoc __ret_0_transfer;
[L8494]              havoc _owner_s459;
[L8495]              havoc _spender_s459;
[L8496]              havoc __ret_0_allowance;
[L8497]              havoc _from_s858;
[L8498]              havoc _to_s858;
[L8499]              havoc _value_s858;
[L8500]              havoc __ret_0_transferFrom;
[L8501]              havoc _spender_s680;
[L8502]              havoc _value_s680;
[L8503]              havoc __ret_0_approve;
[L8504]              havoc _spender_s698;
[L8505]              havoc _addedValue_s698;
[L8506]              havoc success_s698;
[L8507]              havoc _spender_s716;
[L8508]              havoc _subtractedValue_s716;
[L8509]              havoc success_s716;
[L8510]              havoc __ret_0_paused;
[L8511]              havoc __ret_0_name;
[L8512]              havoc __ret_0_symbol;
[L8513]              havoc __ret_0_standard;
[L8514]              havoc __ret_0_decimals;
[L8515]              havoc __ret_0_INITIAL_SUPPLY;
[L8516]              havoc arg1229_s0;
[L8517]              havoc arg1230_s0;
[L8518]              havoc __ret_0_allocations;
[L8519]              havoc _address_s1226;
[L8520]              havoc total_value_s1226;
[L8521]              havoc times_s1226;
[L8522]              havoc balanceRequires_s1226;
[L8523]              havoc __ret_0_setAllocation;
[L8524]              havoc tmpNow;
[L8525]              havoc gas;
[L8526]              assume gas > 4000000 && gas <= 8000000;
[L8527]              tmpNow := now;
[L8528]              havoc now;
[L8529]              assume now > tmpNow;
[L8530]              assume msgsender_MSG != null;
[L8531]              assume DType[msgsender_MSG] != SafeMath;
[L8532]              assume DType[msgsender_MSG] != Ownable;
[L8533]              assume DType[msgsender_MSG] != ERC20Basic;
[L8534]              assume DType[msgsender_MSG] != BasicToken;
[L8535]              assume DType[msgsender_MSG] != ERC20;
[L8536]              assume DType[msgsender_MSG] != StandardToken;
[L8537]              assume DType[msgsender_MSG] != Pausable;
[L8538]              assume DType[msgsender_MSG] != PausableToken;
[L8539]              assume DType[msgsender_MSG] != USDollarHKex;
[L8540]              Alloc[msgsender_MSG] := true;
[L8541]  COND TRUE   choice == 20
[L8542]              gas := gas - 21000;
[L8543]  COND FALSE  !(gas >= 0)
[L8688]  RET         call CorralChoice_USDollarHKex(this);

[2020-11-25 08:10:41,957 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 08:10:41,957 INFO  L82        PathProgramCache]: Analyzing trace with hash 668233361, now seen corresponding path program 1 times
[2020-11-25 08:10:41,961 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 08:10:41,984 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 08:10:42,016 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 08:10:42,018 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 08:10:42,018 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [4] imperfect sequences [] total 4
[2020-11-25 08:10:42,420 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 08:10:42,429 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-11-25 08:10:42,429 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=5, Invalid=7, Unknown=0, NotChecked=0, Total=12
[2020-11-25 08:10:42,430 INFO  L87              Difference]: Start difference. First operand 7908 states. Second operand 4 states.
[2020-11-25 08:10:44,050 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 08:10:44,050 INFO  L93              Difference]: Finished difference Result 6380 states and 10173 transitions.
[2020-11-25 08:10:44,050 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 4 states. 
[2020-11-25 08:10:44,052 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 6380 states and 10173 transitions.
[2020-11-25 08:10:44,100 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 08:10:44,146 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 6380 states to 6154 states and 9799 transitions.
[2020-11-25 08:10:44,147 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 13
[2020-11-25 08:10:44,151 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1213
[2020-11-25 08:10:44,152 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 6154 states and 9799 transitions.
[2020-11-25 08:10:44,172 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 08:10:44,172 INFO  L728         BuchiCegarLoop]: Abstraction has 6154 states and 9799 transitions.
[2020-11-25 08:10:44,190 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 6154 states and 9799 transitions.
[2020-11-25 08:10:44,293 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 6154 to 5940.
[2020-11-25 08:10:44,294 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 5940 states.
[2020-11-25 08:10:44,308 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 5940 states to 5940 states and 9414 transitions.
[2020-11-25 08:10:44,310 INFO  L751         BuchiCegarLoop]: Abstraction has 5940 states and 9414 transitions.
[2020-11-25 08:10:44,310 INFO  L631         BuchiCegarLoop]: Abstraction has 5940 states and 9414 transitions.
[2020-11-25 08:10:44,310 INFO  L445         BuchiCegarLoop]: ======== Iteration 2============
[2020-11-25 08:10:44,310 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 5940 states and 9414 transitions.
[2020-11-25 08:10:44,326 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 08:10:44,327 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 08:10:44,327 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 08:10:44,333 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [12, 12, 12, 12, 12, 12, 12, 12, 12, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 08:10:44,334 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transfer_USDollarHKex0 := false;
[L2]                 call_transfer_USDollarHKex0 := false;
[L2]     CALL        call main();
[L8678]              assume null == 0;
[L8679]  CALL        call this := FreshRefGenerator__success();
[L3835]              havoc newRef;
[L3836]              assume Alloc[newRef] == false;
[L3837]              Alloc[newRef] := true;
[L3838]              assume newRef != null;
[L8679]  RET         call this := FreshRefGenerator__success();
[L8680]              assume now >= 0;
[L8681]              assume DType[this] == USDollarHKex;
[L8682]              assume msgvalue_MSG == 0;
[L8683]              gas := gas - 53000;
[L8684]  CALL        call USDollarHKex_USDollarHKex(this, msgsender_MSG, msgvalue_MSG);
[L2092]              havoc __exception;
[L2093]              revert := false;
[L2094]  COND TRUE   __exception
[L2095]              __tmp__Balance := Balance;
[L2096]              __tmp__DType := DType;
[L2097]              __tmp__Alloc := Alloc;
[L2098]              __tmp__balance_ADDR := balance_ADDR;
[L2099]              __tmp__M_Ref_int := M_Ref_int;
[L2100]              __tmp__sum_balances0 := sum_balances0;
[L2101]              __tmp__alloc_allowed_StandardToken_lvl0 := alloc_allowed_StandardToken_lvl0;
[L2102]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L2103]              __tmp__sum_allowed1 := sum_allowed1;
[L2104]              __tmp__M_int_Ref := M_int_Ref;
[L2105]              __tmp__alloc_allocations_USDollarHKex_lvl0 := alloc_allocations_USDollarHKex_lvl0;
[L2106]              __tmp__sum := sum;
[L2107]              __tmp__M_int_int := M_int_int;
[L2108]              __tmp__Length := Length;
[L2109]              __tmp__now := now;
[L2110]              __tmp__owner_Ownable := owner_Ownable;
[L2111]              __tmp__balances_BasicToken := balances_BasicToken;
[L2112]              __tmp__totalSupply__BasicToken := totalSupply__BasicToken;
[L2113]              __tmp__allowed_StandardToken := allowed_StandardToken;
[L2114]              __tmp__paused_Pausable := paused_Pausable;
[L2115]              __tmp__name_USDollarHKex := name_USDollarHKex;
[L2116]              __tmp__symbol_USDollarHKex := symbol_USDollarHKex;
[L2117]              __tmp__standard_USDollarHKex := standard_USDollarHKex;
[L2118]              __tmp__decimals_USDollarHKex := decimals_USDollarHKex;
[L2119]              __tmp__INITIAL_SUPPLY_USDollarHKex := INITIAL_SUPPLY_USDollarHKex;
[L2120]              __tmp__allocations_USDollarHKex := allocations_USDollarHKex;
[L2121]              __tmp__releaseTime_USDollarHKex.TimeLock := releaseTime_USDollarHKex.TimeLock;
[L2122]              __tmp__balance_USDollarHKex.TimeLock := balance_USDollarHKex.TimeLock;
[L2123]  CALL        call USDollarHKex_USDollarHKex__fail(this, msgsender_MSG, msgvalue_MSG);
[L5041]  CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L4099]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4084]              assume msgsender_MSG != null;
[L4085]              __tmp__Balance[this] := 0;
[L4099]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4100]  COND FALSE  !(revert)
[L5041]  RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L5042]  COND FALSE  !(revert)
[L5045]  CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4266]  CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L4099]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4084]              assume msgsender_MSG != null;
[L4085]              __tmp__Balance[this] := 0;
[L4099]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4100]  COND FALSE  !(revert)
[L4266]  RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L4267]  COND FALSE  !(revert)
[L4270]  CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4251]              assume msgsender_MSG != null;
[L4252]              __tmp__Balance[this] := 0;
[L4270]  RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4271]  COND FALSE  !(revert)
[L5045]  RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L5046]  COND FALSE  !(revert)
[L5049]  CALL        call BasicToken_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L4137]  CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L4099]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4084]              assume msgsender_MSG != null;
[L4085]              __tmp__Balance[this] := 0;
[L4099]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4100]  COND FALSE  !(revert)
[L4137]  RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L4138]  COND FALSE  !(revert)
[L4141]  CALL        call BasicToken_BasicToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4116]              assume msgsender_MSG != null;
[L4117]              __tmp__Balance[this] := 0;
[L4118]              __tmp__balances_BasicToken[this] := zeroRefintArr();
[L4119]              __tmp__sum_balances0[this] := 0;
[L4120]              __tmp__totalSupply__BasicToken[this] := 0;
[L4141]  RET         call BasicToken_BasicToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4142]  COND FALSE  !(revert)
[L5049]  RET         call BasicToken_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L5050]  COND FALSE  !(revert)
[L5053]  CALL        call StandardToken_StandardToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L4310]  CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L4099]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4084]              assume msgsender_MSG != null;
[L4085]              __tmp__Balance[this] := 0;
[L4099]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4100]  COND FALSE  !(revert)
[L4310]  RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L4311]  COND FALSE  !(revert)
[L4314]  CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4266]  CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L4099]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4084]              assume msgsender_MSG != null;
[L4085]              __tmp__Balance[this] := 0;
[L4099]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4100]  COND FALSE  !(revert)
[L4266]  RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L4267]  COND FALSE  !(revert)
[L4270]  CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4251]              assume msgsender_MSG != null;
[L4252]              __tmp__Balance[this] := 0;
[L4270]  RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4271]  COND FALSE  !(revert)
[L4314]  RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4315]  COND FALSE  !(revert)
[L4318]  CALL        call BasicToken_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L4137]  CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L4099]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4084]              assume msgsender_MSG != null;
[L4085]              __tmp__Balance[this] := 0;
[L4099]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4100]  COND FALSE  !(revert)
[L4137]  RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L4138]  COND FALSE  !(revert)
[L4141]  CALL        call BasicToken_BasicToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4116]              assume msgsender_MSG != null;
[L4117]              __tmp__Balance[this] := 0;
[L4118]              __tmp__balances_BasicToken[this] := zeroRefintArr();
[L4119]              __tmp__sum_balances0[this] := 0;
[L4120]              __tmp__totalSupply__BasicToken[this] := 0;
[L4141]  RET         call BasicToken_BasicToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4142]  COND FALSE  !(revert)
[L4318]  RET         call BasicToken_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L4319]  COND FALSE  !(revert)
[L4322]  CALL        call StandardToken_StandardToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4291]              assume msgsender_MSG != null;
[L4292]              __tmp__Balance[this] := 0;
[L4293]              __tmp__allowed_StandardToken[this] := zeroRefRefintArr();
[L4294]              __tmp__sum_allowed1[this] := 0;
[L4322]  RET         call StandardToken_StandardToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4323]  COND FALSE  !(revert)
[L5053]  RET         call StandardToken_StandardToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L5054]  COND FALSE  !(revert)
[L5057]  CALL        call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L3970]  CALL        call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3951]              assume msgsender_MSG != null;
[L3952]              __tmp__Balance[this] := 0;
[L3953]              __tmp__owner_Ownable[this] := null;
[L3955]              __tmp__owner_Ownable[this] := msgsender_MSG;
[L3970]  RET         call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3971]  COND FALSE  !(revert)
[L5057]  RET         call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L5058]  COND FALSE  !(revert)
[L5061]  CALL        call Pausable_Pausable__fail(this, msgsender_MSG, msgvalue_MSG);
[L4562]  CALL        call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L3970]  CALL        call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3951]              assume msgsender_MSG != null;
[L3952]              __tmp__Balance[this] := 0;
[L3953]              __tmp__owner_Ownable[this] := null;
[L3955]              __tmp__owner_Ownable[this] := msgsender_MSG;
[L3970]  RET         call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3971]  COND FALSE  !(revert)
[L4562]  RET         call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L4563]  COND FALSE  !(revert)
[L4566]  CALL        call Pausable_Pausable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4545]              assume msgsender_MSG != null;
[L4546]              __tmp__Balance[this] := 0;
[L4547]              __tmp__paused_Pausable[this] := false;
[L4566]  RET         call Pausable_Pausable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4567]  COND FALSE  !(revert)
[L5061]  RET         call Pausable_Pausable__fail(this, msgsender_MSG, msgvalue_MSG);
[L5062]  COND FALSE  !(revert)
[L5065]  CALL        call PausableToken_PausableToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L4668]  CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L4099]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4084]              assume msgsender_MSG != null;
[L4085]              __tmp__Balance[this] := 0;
[L4099]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4100]  COND FALSE  !(revert)
[L4668]  RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L4669]  COND FALSE  !(revert)
[L4672]  CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4266]  CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L4099]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4084]              assume msgsender_MSG != null;
[L4085]              __tmp__Balance[this] := 0;
[L4099]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4100]  COND FALSE  !(revert)
[L4266]  RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L4267]  COND FALSE  !(revert)
[L4270]  CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4251]              assume msgsender_MSG != null;
[L4252]              __tmp__Balance[this] := 0;
[L4270]  RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4271]  COND FALSE  !(revert)
[L4672]  RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4673]  COND FALSE  !(revert)
[L4676]  CALL        call BasicToken_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L4137]  CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L4099]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4084]              assume msgsender_MSG != null;
[L4085]              __tmp__Balance[this] := 0;
[L4099]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4100]  COND FALSE  !(revert)
[L4137]  RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L4138]  COND FALSE  !(revert)
[L4141]  CALL        call BasicToken_BasicToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4116]              assume msgsender_MSG != null;
[L4117]              __tmp__Balance[this] := 0;
[L4118]              __tmp__balances_BasicToken[this] := zeroRefintArr();
[L4119]              __tmp__sum_balances0[this] := 0;
[L4120]              __tmp__totalSupply__BasicToken[this] := 0;
[L4141]  RET         call BasicToken_BasicToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4142]  COND FALSE  !(revert)
[L4676]  RET         call BasicToken_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L4677]  COND FALSE  !(revert)
[L4680]  CALL        call StandardToken_StandardToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L4310]  CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L4099]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4084]              assume msgsender_MSG != null;
[L4085]              __tmp__Balance[this] := 0;
[L4099]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4100]  COND FALSE  !(revert)
[L4310]  RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L4311]  COND FALSE  !(revert)
[L4314]  CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4266]  CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L4099]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4084]              assume msgsender_MSG != null;
[L4085]              __tmp__Balance[this] := 0;
[L4099]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4100]  COND FALSE  !(revert)
[L4266]  RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L4267]  COND FALSE  !(revert)
[L4270]  CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4251]              assume msgsender_MSG != null;
[L4252]              __tmp__Balance[this] := 0;
[L4270]  RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4271]  COND FALSE  !(revert)
[L4314]  RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4315]  COND FALSE  !(revert)
[L4318]  CALL        call BasicToken_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L4137]  CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L4099]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4084]              assume msgsender_MSG != null;
[L4085]              __tmp__Balance[this] := 0;
[L4099]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4100]  COND FALSE  !(revert)
[L4137]  RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L4138]  COND FALSE  !(revert)
[L4141]  CALL        call BasicToken_BasicToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4116]              assume msgsender_MSG != null;
[L4117]              __tmp__Balance[this] := 0;
[L4118]              __tmp__balances_BasicToken[this] := zeroRefintArr();
[L4119]              __tmp__sum_balances0[this] := 0;
[L4120]              __tmp__totalSupply__BasicToken[this] := 0;
[L4141]  RET         call BasicToken_BasicToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4142]  COND FALSE  !(revert)
[L4318]  RET         call BasicToken_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L4319]  COND FALSE  !(revert)
[L4322]  CALL        call StandardToken_StandardToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4291]              assume msgsender_MSG != null;
[L4292]              __tmp__Balance[this] := 0;
[L4293]              __tmp__allowed_StandardToken[this] := zeroRefRefintArr();
[L4294]              __tmp__sum_allowed1[this] := 0;
[L4322]  RET         call StandardToken_StandardToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4323]  COND FALSE  !(revert)
[L4680]  RET         call StandardToken_StandardToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L4681]  COND FALSE  !(revert)
[L4684]  CALL        call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L3970]  CALL        call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3951]              assume msgsender_MSG != null;
[L3952]              __tmp__Balance[this] := 0;
[L3953]              __tmp__owner_Ownable[this] := null;
[L3955]              __tmp__owner_Ownable[this] := msgsender_MSG;
[L3970]  RET         call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3971]  COND FALSE  !(revert)
[L4684]  RET         call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L4685]  COND FALSE  !(revert)
[L4688]  CALL        call Pausable_Pausable__fail(this, msgsender_MSG, msgvalue_MSG);
[L4562]  CALL        call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L3970]  CALL        call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3951]              assume msgsender_MSG != null;
[L3952]              __tmp__Balance[this] := 0;
[L3953]              __tmp__owner_Ownable[this] := null;
[L3955]              __tmp__owner_Ownable[this] := msgsender_MSG;
[L3970]  RET         call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3971]  COND FALSE  !(revert)
[L4562]  RET         call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L4563]  COND FALSE  !(revert)
[L4566]  CALL        call Pausable_Pausable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4545]              assume msgsender_MSG != null;
[L4546]              __tmp__Balance[this] := 0;
[L4547]              __tmp__paused_Pausable[this] := false;
[L4566]  RET         call Pausable_Pausable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4567]  COND FALSE  !(revert)
[L4688]  RET         call Pausable_Pausable__fail(this, msgsender_MSG, msgvalue_MSG);
[L4689]  COND FALSE  !(revert)
[L4692]  CALL        call PausableToken_PausableToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4653]              assume msgsender_MSG != null;
[L4654]              __tmp__Balance[this] := 0;
[L4692]  RET         call PausableToken_PausableToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4693]  COND FALSE  !(revert)
[L5065]  RET         call PausableToken_PausableToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L5066]  COND FALSE  !(revert)
[L5069]  CALL        call USDollarHKex_USDollarHKex_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4985]              assume msgsender_MSG != null;
[L4986]              __tmp__Balance[this] := 0;
[L4987]              __tmp__name_USDollarHKex[this] := 749918206;
[L4988]              __tmp__symbol_USDollarHKex[this] := 2047713833;
[L4989]              __tmp__standard_USDollarHKex[this] := -1333876585;
[L4990]              __tmp__decimals_USDollarHKex[this] := 18;
[L4991]              __var_22 := __tmp__decimals_USDollarHKex[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4992]              __tmp__INITIAL_SUPPLY_USDollarHKex[this] := nonlinearMul(25 * (100000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936), nonlinearPow(10, __tmp__decimals_USDollarHKex[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4994]  CALL        call __var_23 := FreshRefGenerator__fail();
[L3827]              havoc newRef;
[L3828]              assume __tmp__Alloc[newRef] == false;
[L3829]              __tmp__Alloc[newRef] := true;
[L3830]              assume newRef != null;
[L4994]  RET         call __var_23 := FreshRefGenerator__fail();
[L4995]  COND FALSE  !(revert)
[L4998]              __tmp__allocations_USDollarHKex[this] := __var_23;
[L5000]              __tmp__alloc_allocations_USDollarHKex_lvl0[__tmp__allocations_USDollarHKex[this]] := zeroRefboolArr();
[L5002]              __tmp__totalSupply__BasicToken[this] := __tmp__INITIAL_SUPPLY_USDollarHKex[this];
[L5003]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] - __tmp__balances_BasicToken[this][msgsender_MSG];
[L5004]              __tmp__balances_BasicToken[this][msgsender_MSG] := __tmp__INITIAL_SUPPLY_USDollarHKex[this];
[L5005]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] + __tmp__balances_BasicToken[this][msgsender_MSG];
[L5069]  RET         call USDollarHKex_USDollarHKex_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5070]  COND FALSE  !(revert)
[L2123]  RET         call USDollarHKex_USDollarHKex__fail(this, msgsender_MSG, msgvalue_MSG);
[L2124]              assume revert || gas < 0;
[L8684]  RET         call USDollarHKex_USDollarHKex(this, msgsender_MSG, msgvalue_MSG);
[L8685]              assume !revert && gas >= 0;

Loop:
[L8688]  CALL        call CorralChoice_USDollarHKex(this);
[L8483]              havoc msgsender_MSG;
[L8484]              havoc msgvalue_MSG;
[L8485]              havoc choice;
[L8486]              havoc __ret_0_owner;
[L8487]              havoc _newOwner_s133;
[L8488]              havoc __ret_0_totalSupply;
[L8489]              havoc _owner_s278;
[L8490]              havoc __ret_0_balanceOf;
[L8491]              havoc _to_s828;
[L8492]              havoc _value_s828;
[L8493]              havoc __ret_0_transfer;
[L8494]              havoc _owner_s459;
[L8495]              havoc _spender_s459;
[L8496]              havoc __ret_0_allowance;
[L8497]              havoc _from_s858;
[L8498]              havoc _to_s858;
[L8499]              havoc _value_s858;
[L8500]              havoc __ret_0_transferFrom;
[L8501]              havoc _spender_s680;
[L8502]              havoc _value_s680;
[L8503]              havoc __ret_0_approve;
[L8504]              havoc _spender_s698;
[L8505]              havoc _addedValue_s698;
[L8506]              havoc success_s698;
[L8507]              havoc _spender_s716;
[L8508]              havoc _subtractedValue_s716;
[L8509]              havoc success_s716;
[L8510]              havoc __ret_0_paused;
[L8511]              havoc __ret_0_name;
[L8512]              havoc __ret_0_symbol;
[L8513]              havoc __ret_0_standard;
[L8514]              havoc __ret_0_decimals;
[L8515]              havoc __ret_0_INITIAL_SUPPLY;
[L8516]              havoc arg1229_s0;
[L8517]              havoc arg1230_s0;
[L8518]              havoc __ret_0_allocations;
[L8519]              havoc _address_s1226;
[L8520]              havoc total_value_s1226;
[L8521]              havoc times_s1226;
[L8522]              havoc balanceRequires_s1226;
[L8523]              havoc __ret_0_setAllocation;
[L8524]              havoc tmpNow;
[L8525]              havoc gas;
[L8526]              assume gas > 4000000 && gas <= 8000000;
[L8527]              tmpNow := now;
[L8528]              havoc now;
[L8529]              assume now > tmpNow;
[L8530]              assume msgsender_MSG != null;
[L8531]              assume DType[msgsender_MSG] != SafeMath;
[L8532]              assume DType[msgsender_MSG] != Ownable;
[L8533]              assume DType[msgsender_MSG] != ERC20Basic;
[L8534]              assume DType[msgsender_MSG] != BasicToken;
[L8535]              assume DType[msgsender_MSG] != ERC20;
[L8536]              assume DType[msgsender_MSG] != StandardToken;
[L8537]              assume DType[msgsender_MSG] != Pausable;
[L8538]              assume DType[msgsender_MSG] != PausableToken;
[L8539]              assume DType[msgsender_MSG] != USDollarHKex;
[L8540]              Alloc[msgsender_MSG] := true;
[L8541]  COND TRUE   choice == 20
[L8542]              gas := gas - 21000;
[L8543]  COND FALSE  !(gas >= 0)
[L8688]  RET         call CorralChoice_USDollarHKex(this);

[2020-11-25 08:10:44,342 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 08:10:44,343 INFO  L82        PathProgramCache]: Analyzing trace with hash 1016421623, now seen corresponding path program 1 times
[2020-11-25 08:10:44,344 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 08:10:44,360 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 08:10:44,570 INFO  L134       CoverageAnalysis]: Checked inductivity of 957 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 957 trivial. 0 not checked.
[2020-11-25 08:10:44,570 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 08:10:44,571 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [4] imperfect sequences [] total 4
[2020-11-25 08:10:44,572 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 08:10:44,572 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-11-25 08:10:44,573 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=5, Invalid=7, Unknown=0, NotChecked=0, Total=12
[2020-11-25 08:10:44,573 INFO  L87              Difference]: Start difference. First operand 5940 states and 9414 transitions. cyclomatic complexity: 3494 Second operand 4 states.
[2020-11-25 08:10:45,060 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 08:10:45,060 INFO  L93              Difference]: Finished difference Result 5175 states and 5813 transitions.
[2020-11-25 08:10:45,060 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 4 states. 
[2020-11-25 08:10:45,060 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 5175 states and 5813 transitions.
[2020-11-25 08:10:45,070 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 08:10:45,082 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 5175 states to 5175 states and 5813 transitions.
[2020-11-25 08:10:45,082 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1036
[2020-11-25 08:10:45,082 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1036
[2020-11-25 08:10:45,082 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 5175 states and 5813 transitions.
[2020-11-25 08:10:45,086 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 08:10:45,086 INFO  L728         BuchiCegarLoop]: Abstraction has 5175 states and 5813 transitions.
[2020-11-25 08:10:45,090 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 5175 states and 5813 transitions.
[2020-11-25 08:10:45,119 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 5175 to 5175.
[2020-11-25 08:10:45,119 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 5175 states.
[2020-11-25 08:10:45,124 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 5175 states to 5175 states and 5813 transitions.
[2020-11-25 08:10:45,124 INFO  L751         BuchiCegarLoop]: Abstraction has 5175 states and 5813 transitions.
[2020-11-25 08:10:45,124 INFO  L631         BuchiCegarLoop]: Abstraction has 5175 states and 5813 transitions.
[2020-11-25 08:10:45,124 INFO  L445         BuchiCegarLoop]: ======== Iteration 3============
[2020-11-25 08:10:45,124 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 5175 states and 5813 transitions.
[2020-11-25 08:10:45,130 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 08:10:45,130 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 08:10:45,130 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 08:10:45,132 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [12, 12, 12, 12, 12, 12, 12, 12, 12, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 08:10:45,132 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transfer_USDollarHKex0 := false;
[L2]                 call_transfer_USDollarHKex0 := false;
[L2]     CALL        call main();
[L8678]              assume null == 0;
[L8679]  CALL        call this := FreshRefGenerator__success();
[L3835]              havoc newRef;
[L3836]              assume Alloc[newRef] == false;
[L3837]              Alloc[newRef] := true;
[L3838]              assume newRef != null;
[L8679]  RET         call this := FreshRefGenerator__success();
[L8680]              assume now >= 0;
[L8681]              assume DType[this] == USDollarHKex;
[L8682]              assume msgvalue_MSG == 0;
[L8683]              gas := gas - 53000;
[L8684]  CALL        call USDollarHKex_USDollarHKex(this, msgsender_MSG, msgvalue_MSG);
[L2092]              havoc __exception;
[L2093]              revert := false;
[L2094]  COND FALSE  !(__exception)
[L2126]  CALL        call USDollarHKex_USDollarHKex__success(this, msgsender_MSG, msgvalue_MSG);
[L5079]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4107]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4092]              assume msgsender_MSG != null;
[L4093]              Balance[this] := 0;
[L4107]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4108]  COND FALSE  !(revert)
[L5079]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5080]  COND FALSE  !(revert)
[L5083]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4278]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4107]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4092]              assume msgsender_MSG != null;
[L4093]              Balance[this] := 0;
[L4107]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4108]  COND FALSE  !(revert)
[L4278]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4279]  COND FALSE  !(revert)
[L4282]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4259]              assume msgsender_MSG != null;
[L4260]              Balance[this] := 0;
[L4282]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4283]  COND FALSE  !(revert)
[L5083]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5084]  COND FALSE  !(revert)
[L5087]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4149]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4107]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4092]              assume msgsender_MSG != null;
[L4093]              Balance[this] := 0;
[L4107]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4108]  COND FALSE  !(revert)
[L4149]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4150]  COND FALSE  !(revert)
[L4153]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4127]              assume msgsender_MSG != null;
[L4128]              Balance[this] := 0;
[L4129]              balances_BasicToken[this] := zeroRefintArr();
[L4130]              sum_balances0[this] := 0;
[L4131]              totalSupply__BasicToken[this] := 0;
[L4153]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4154]  COND FALSE  !(revert)
[L5087]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L5088]  COND FALSE  !(revert)
[L5091]  CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4330]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4107]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4092]              assume msgsender_MSG != null;
[L4093]              Balance[this] := 0;
[L4107]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4108]  COND FALSE  !(revert)
[L4330]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4331]  COND FALSE  !(revert)
[L4334]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4278]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4107]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4092]              assume msgsender_MSG != null;
[L4093]              Balance[this] := 0;
[L4107]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4108]  COND FALSE  !(revert)
[L4278]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4279]  COND FALSE  !(revert)
[L4282]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4259]              assume msgsender_MSG != null;
[L4260]              Balance[this] := 0;
[L4282]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4283]  COND FALSE  !(revert)
[L4334]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4335]  COND FALSE  !(revert)
[L4338]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4149]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4107]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4092]              assume msgsender_MSG != null;
[L4093]              Balance[this] := 0;
[L4107]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4108]  COND FALSE  !(revert)
[L4149]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4150]  COND FALSE  !(revert)
[L4153]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4127]              assume msgsender_MSG != null;
[L4128]              Balance[this] := 0;
[L4129]              balances_BasicToken[this] := zeroRefintArr();
[L4130]              sum_balances0[this] := 0;
[L4131]              totalSupply__BasicToken[this] := 0;
[L4153]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4154]  COND FALSE  !(revert)
[L4338]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4339]  COND FALSE  !(revert)
[L4342]  CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4301]              assume msgsender_MSG != null;
[L4302]              Balance[this] := 0;
[L4303]              allowed_StandardToken[this] := zeroRefRefintArr();
[L4304]              sum_allowed1[this] := 0;
[L4342]  RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4343]  COND FALSE  !(revert)
[L5091]  RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L5092]  COND FALSE  !(revert)
[L5095]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3978]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3961]              assume msgsender_MSG != null;
[L3962]              Balance[this] := 0;
[L3963]              owner_Ownable[this] := null;
[L3965]              owner_Ownable[this] := msgsender_MSG;
[L3978]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3979]  COND FALSE  !(revert)
[L5095]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5096]  COND FALSE  !(revert)
[L5099]  CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3978]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3961]              assume msgsender_MSG != null;
[L3962]              Balance[this] := 0;
[L3963]              owner_Ownable[this] := null;
[L3965]              owner_Ownable[this] := msgsender_MSG;
[L3978]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3979]  COND FALSE  !(revert)
[L4574]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]  COND FALSE  !(revert)
[L4578]  CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4554]              assume msgsender_MSG != null;
[L4555]              Balance[this] := 0;
[L4556]              paused_Pausable[this] := false;
[L4578]  RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4579]  COND FALSE  !(revert)
[L5099]  RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L5100]  COND FALSE  !(revert)
[L5103]  CALL        call PausableToken_PausableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4700]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4107]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4092]              assume msgsender_MSG != null;
[L4093]              Balance[this] := 0;
[L4107]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4108]  COND FALSE  !(revert)
[L4700]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4701]  COND FALSE  !(revert)
[L4704]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4278]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4107]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4092]              assume msgsender_MSG != null;
[L4093]              Balance[this] := 0;
[L4107]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4108]  COND FALSE  !(revert)
[L4278]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4279]  COND FALSE  !(revert)
[L4282]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4259]              assume msgsender_MSG != null;
[L4260]              Balance[this] := 0;
[L4282]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4283]  COND FALSE  !(revert)
[L4704]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4705]  COND FALSE  !(revert)
[L4708]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4149]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4107]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4092]              assume msgsender_MSG != null;
[L4093]              Balance[this] := 0;
[L4107]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4108]  COND FALSE  !(revert)
[L4149]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4150]  COND FALSE  !(revert)
[L4153]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4127]              assume msgsender_MSG != null;
[L4128]              Balance[this] := 0;
[L4129]              balances_BasicToken[this] := zeroRefintArr();
[L4130]              sum_balances0[this] := 0;
[L4131]              totalSupply__BasicToken[this] := 0;
[L4153]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4154]  COND FALSE  !(revert)
[L4708]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4709]  COND FALSE  !(revert)
[L4712]  CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4330]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4107]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4092]              assume msgsender_MSG != null;
[L4093]              Balance[this] := 0;
[L4107]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4108]  COND FALSE  !(revert)
[L4330]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4331]  COND FALSE  !(revert)
[L4334]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4278]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4107]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4092]              assume msgsender_MSG != null;
[L4093]              Balance[this] := 0;
[L4107]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4108]  COND FALSE  !(revert)
[L4278]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4279]  COND FALSE  !(revert)
[L4282]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4259]              assume msgsender_MSG != null;
[L4260]              Balance[this] := 0;
[L4282]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4283]  COND FALSE  !(revert)
[L4334]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4335]  COND FALSE  !(revert)
[L4338]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4149]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4107]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4092]              assume msgsender_MSG != null;
[L4093]              Balance[this] := 0;
[L4107]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4108]  COND FALSE  !(revert)
[L4149]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4150]  COND FALSE  !(revert)
[L4153]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4127]              assume msgsender_MSG != null;
[L4128]              Balance[this] := 0;
[L4129]              balances_BasicToken[this] := zeroRefintArr();
[L4130]              sum_balances0[this] := 0;
[L4131]              totalSupply__BasicToken[this] := 0;
[L4153]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4154]  COND FALSE  !(revert)
[L4338]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4339]  COND FALSE  !(revert)
[L4342]  CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4301]              assume msgsender_MSG != null;
[L4302]              Balance[this] := 0;
[L4303]              allowed_StandardToken[this] := zeroRefRefintArr();
[L4304]              sum_allowed1[this] := 0;
[L4342]  RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4343]  COND FALSE  !(revert)
[L4712]  RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4713]  COND FALSE  !(revert)
[L4716]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3978]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3961]              assume msgsender_MSG != null;
[L3962]              Balance[this] := 0;
[L3963]              owner_Ownable[this] := null;
[L3965]              owner_Ownable[this] := msgsender_MSG;
[L3978]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3979]  COND FALSE  !(revert)
[L4716]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L4717]  COND FALSE  !(revert)
[L4720]  CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3978]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3961]              assume msgsender_MSG != null;
[L3962]              Balance[this] := 0;
[L3963]              owner_Ownable[this] := null;
[L3965]              owner_Ownable[this] := msgsender_MSG;
[L3978]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3979]  COND FALSE  !(revert)
[L4574]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]  COND FALSE  !(revert)
[L4578]  CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4554]              assume msgsender_MSG != null;
[L4555]              Balance[this] := 0;
[L4556]              paused_Pausable[this] := false;
[L4578]  RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4579]  COND FALSE  !(revert)
[L4720]  RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L4721]  COND FALSE  !(revert)
[L4724]  CALL        call PausableToken_PausableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4661]              assume msgsender_MSG != null;
[L4662]              Balance[this] := 0;
[L4724]  RET         call PausableToken_PausableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4725]  COND FALSE  !(revert)
[L5103]  RET         call PausableToken_PausableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L5104]  COND FALSE  !(revert)
[L5107]  CALL        call USDollarHKex_USDollarHKex_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5013]              assume msgsender_MSG != null;
[L5014]              Balance[this] := 0;
[L5015]              name_USDollarHKex[this] := 749918206;
[L5016]              symbol_USDollarHKex[this] := 2047713833;
[L5017]              standard_USDollarHKex[this] := -1333876585;
[L5018]              decimals_USDollarHKex[this] := 18;
[L5019]              __var_22 := decimals_USDollarHKex[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5020]              INITIAL_SUPPLY_USDollarHKex[this] := nonlinearMul(25 * (100000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936), nonlinearPow(10, decimals_USDollarHKex[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5022]  CALL        call __var_23 := FreshRefGenerator__success();
[L3835]              havoc newRef;
[L3836]              assume Alloc[newRef] == false;
[L3837]              Alloc[newRef] := true;
[L3838]              assume newRef != null;
[L5022]  RET         call __var_23 := FreshRefGenerator__success();
[L5023]  COND FALSE  !(revert)
[L5026]              allocations_USDollarHKex[this] := __var_23;
[L5028]              alloc_allocations_USDollarHKex_lvl0[allocations_USDollarHKex[this]] := zeroRefboolArr();
[L5030]              totalSupply__BasicToken[this] := INITIAL_SUPPLY_USDollarHKex[this];
[L5031]              sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][msgsender_MSG];
[L5032]              balances_BasicToken[this][msgsender_MSG] := INITIAL_SUPPLY_USDollarHKex[this];
[L5033]              sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][msgsender_MSG];
[L5034]              assert { :EventEmitted "Transfer_USDollarHKex" } true;
[L5107]  RET         call USDollarHKex_USDollarHKex_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5108]  COND FALSE  !(revert)
[L2126]  RET         call USDollarHKex_USDollarHKex__success(this, msgsender_MSG, msgvalue_MSG);
[L2127]              assume !revert && gas >= 0;
[L8684]  RET         call USDollarHKex_USDollarHKex(this, msgsender_MSG, msgvalue_MSG);
[L8685]              assume !revert && gas >= 0;
[L8688]  CALL        call CorralChoice_USDollarHKex(this);
[L8483]              havoc msgsender_MSG;
[L8484]              havoc msgvalue_MSG;
[L8485]              havoc choice;
[L8486]              havoc __ret_0_owner;
[L8487]              havoc _newOwner_s133;
[L8488]              havoc __ret_0_totalSupply;
[L8489]              havoc _owner_s278;
[L8490]              havoc __ret_0_balanceOf;
[L8491]              havoc _to_s828;
[L8492]              havoc _value_s828;
[L8493]              havoc __ret_0_transfer;
[L8494]              havoc _owner_s459;
[L8495]              havoc _spender_s459;
[L8496]              havoc __ret_0_allowance;
[L8497]              havoc _from_s858;
[L8498]              havoc _to_s858;
[L8499]              havoc _value_s858;
[L8500]              havoc __ret_0_transferFrom;
[L8501]              havoc _spender_s680;
[L8502]              havoc _value_s680;
[L8503]              havoc __ret_0_approve;
[L8504]              havoc _spender_s698;
[L8505]              havoc _addedValue_s698;
[L8506]              havoc success_s698;
[L8507]              havoc _spender_s716;
[L8508]              havoc _subtractedValue_s716;
[L8509]              havoc success_s716;
[L8510]              havoc __ret_0_paused;
[L8511]              havoc __ret_0_name;
[L8512]              havoc __ret_0_symbol;
[L8513]              havoc __ret_0_standard;
[L8514]              havoc __ret_0_decimals;
[L8515]              havoc __ret_0_INITIAL_SUPPLY;
[L8516]              havoc arg1229_s0;
[L8517]              havoc arg1230_s0;
[L8518]              havoc __ret_0_allocations;
[L8519]              havoc _address_s1226;
[L8520]              havoc total_value_s1226;
[L8521]              havoc times_s1226;
[L8522]              havoc balanceRequires_s1226;
[L8523]              havoc __ret_0_setAllocation;
[L8524]              havoc tmpNow;
[L8525]              havoc gas;
[L8526]              assume gas > 4000000 && gas <= 8000000;
[L8527]              tmpNow := now;
[L8528]              havoc now;
[L8529]              assume now > tmpNow;
[L8530]              assume msgsender_MSG != null;
[L8531]              assume DType[msgsender_MSG] != SafeMath;
[L8532]              assume DType[msgsender_MSG] != Ownable;
[L8533]              assume DType[msgsender_MSG] != ERC20Basic;
[L8534]              assume DType[msgsender_MSG] != BasicToken;
[L8535]              assume DType[msgsender_MSG] != ERC20;
[L8536]              assume DType[msgsender_MSG] != StandardToken;
[L8537]              assume DType[msgsender_MSG] != Pausable;
[L8538]              assume DType[msgsender_MSG] != PausableToken;
[L8539]              assume DType[msgsender_MSG] != USDollarHKex;
[L8540]              Alloc[msgsender_MSG] := true;
[L8541]  COND FALSE  !(choice == 20)
[L8547]  COND FALSE  !(choice == 19)
[L8553]  COND FALSE  !(choice == 18)
[L8559]  COND FALSE  !(choice == 17)
[L8565]  COND TRUE   choice == 16
[L8566]              gas := gas - 21000;
[L8567]  COND TRUE   gas >= 0
[L8568]              assume _value_s828 >= 0 && _value_s828 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8569]              assume msgvalue_MSG == 0;
[L8570]  CALL        call __ret_0_transfer := transfer~address~uint256_USDollarHKex(this, msgsender_MSG, msgvalue_MSG, _to_s828, _value_s828);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG != _to_s828 && (_value_s828 > balances_BasicToken[this][msgsender_MSG] || balances_BasicToken[this][_to_s828] + _value_s828 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && _value_s828 >= 0) && _value_s828 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][_to_s828] >= 0) && balances_BasicToken[this][_to_s828] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][msgsender_MSG] >= 0) && balances_BasicToken[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_USDollarHKex0 := true;
[L2]                 call_transfer_USDollarHKex0 := false;
[L2]                 revert := revert_hold;
[L2170]              havoc __exception;
[L2171]              revert := false;
[L2172]  COND FALSE  !(__exception)
[L2204]  CALL        call __ret_0_ := transfer~address~uint256_USDollarHKex__success(this, msgsender_MSG, msgvalue_MSG, _to_s828, _value_s828);
[L5147]  CALL        call __var_24 := canSubAllocation~address~uint256_USDollarHKex__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, _value_s828);
[L5328]  COND TRUE   sub_value_s949 == 0
[L5329]              __ret_0_ := false;
[L5147]  RET         call __var_24 := canSubAllocation~address~uint256_USDollarHKex__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, _value_s828);
[L5148]  COND FALSE  !(revert)
[L5151]  COND FALSE  !(!__var_24)
[L5155]  CALL        call subAllocation~address_USDollarHKex__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5554]              total_lockamount_s1052 := 0;
[L5555]              total_unlockamount_s1052 := 0;
[L5556]  COND FALSE  !(alloc_allocations_USDollarHKex_lvl0[allocations_USDollarHKex[this]][sender_s1052] == false)
[L5567]              j_s1052 := 0;
[L5568]  COND FALSE  !(j_s1052 < Length[M_Ref_Ref[allocations_USDollarHKex[this]][sender_s1052]])
[L5633]  COND FALSE  !(total_unlockamount_s1052 > 0)
[L5636]  COND FALSE  !(alloc_allocations_USDollarHKex_lvl0[allocations_USDollarHKex[this]][sender_s1052] == false)
[L5647]  COND FALSE  !(total_lockamount_s1052 == 0 && Length[M_Ref_Ref[allocations_USDollarHKex[this]][sender_s1052]] > 0)
[L5155]  RET         call subAllocation~address_USDollarHKex__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5156]  COND FALSE  !(revert)
[L5159]  COND TRUE   DType[this] == USDollarHKex
[L5160]  CALL        call __var_25 := transfer~address~uint256_PausableToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s828, _value_s828);
[L4759]  CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7619]  COND FALSE  !(!!paused_Pausable[this])
[L4759]  RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4760]  COND FALSE  !(revert)
[L4763]  COND TRUE   DType[this] == USDollarHKex
[L4764]  CALL        call __var_11 := transfer~address~uint256_BasicToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s641, _value_s641);
[L4208]              __var_2 := null;
[L4209]  COND FALSE  !(!(_to_s266 != null))
[L4213]  COND FALSE  !(!(_value_s266 <= balances_BasicToken[this][msgsender_MSG]))
[L4217]  CALL        call __var_3 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][msgsender_MSG], _value_s266);
[L3928]              assert b_s68 <= a_s68;
[L3929]              __ret_0_ := (a_s68 - b_s68) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4217]  RET         call __var_3 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][msgsender_MSG], _value_s266);
[L4218]  COND FALSE  !(revert)
[L4221]              sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][msgsender_MSG];
[L4222]              balances_BasicToken[this][msgsender_MSG] := __var_3;
[L4223]              sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][msgsender_MSG];
[L4224]  CALL        call __var_4 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_to_s266], _value_s266);
[L3942]              c_s92 := (a_s92 + b_s92) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3943]              assert c_s92 >= a_s92;
[L3944]              c_s92 := c_s92;
[L4224]  RET         call __var_4 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_to_s266], _value_s266);
[L4225]  COND FALSE  !(revert)
[L4228]              sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][_to_s266];
[L4229]              balances_BasicToken[this][_to_s266] := __var_4;
[L4230]              sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][_to_s266];
[L4231]              assert { :EventEmitted "Transfer_BasicToken" } true;
[L4232]              __ret_0_ := true;
[L4764]  RET         call __var_11 := transfer~address~uint256_BasicToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s641, _value_s641);
[L4765]  COND FALSE  !(revert)
[L4776]              __ret_0_ := __var_11;
[L5160]  RET         call __var_25 := transfer~address~uint256_PausableToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s828, _value_s828);
[L5161]  COND FALSE  !(revert)
[L5167]              __ret_0_ := __var_25;
[L2204]  RET         call __ret_0_ := transfer~address~uint256_USDollarHKex__success(this, msgsender_MSG, msgvalue_MSG, _to_s828, _value_s828);
[L2205]              assume !revert && gas >= 0;
[L8570]  RET         call __ret_0_transfer := transfer~address~uint256_USDollarHKex(this, msgsender_MSG, msgvalue_MSG, _to_s828, _value_s828);
[L8688]  RET         call CorralChoice_USDollarHKex(this);

Loop:
[L8688]  CALL        call CorralChoice_USDollarHKex(this);
[L8483]              havoc msgsender_MSG;
[L8484]              havoc msgvalue_MSG;
[L8485]              havoc choice;
[L8486]              havoc __ret_0_owner;
[L8487]              havoc _newOwner_s133;
[L8488]              havoc __ret_0_totalSupply;
[L8489]              havoc _owner_s278;
[L8490]              havoc __ret_0_balanceOf;
[L8491]              havoc _to_s828;
[L8492]              havoc _value_s828;
[L8493]              havoc __ret_0_transfer;
[L8494]              havoc _owner_s459;
[L8495]              havoc _spender_s459;
[L8496]              havoc __ret_0_allowance;
[L8497]              havoc _from_s858;
[L8498]              havoc _to_s858;
[L8499]              havoc _value_s858;
[L8500]              havoc __ret_0_transferFrom;
[L8501]              havoc _spender_s680;
[L8502]              havoc _value_s680;
[L8503]              havoc __ret_0_approve;
[L8504]              havoc _spender_s698;
[L8505]              havoc _addedValue_s698;
[L8506]              havoc success_s698;
[L8507]              havoc _spender_s716;
[L8508]              havoc _subtractedValue_s716;
[L8509]              havoc success_s716;
[L8510]              havoc __ret_0_paused;
[L8511]              havoc __ret_0_name;
[L8512]              havoc __ret_0_symbol;
[L8513]              havoc __ret_0_standard;
[L8514]              havoc __ret_0_decimals;
[L8515]              havoc __ret_0_INITIAL_SUPPLY;
[L8516]              havoc arg1229_s0;
[L8517]              havoc arg1230_s0;
[L8518]              havoc __ret_0_allocations;
[L8519]              havoc _address_s1226;
[L8520]              havoc total_value_s1226;
[L8521]              havoc times_s1226;
[L8522]              havoc balanceRequires_s1226;
[L8523]              havoc __ret_0_setAllocation;
[L8524]              havoc tmpNow;
[L8525]              havoc gas;
[L8526]              assume gas > 4000000 && gas <= 8000000;
[L8527]              tmpNow := now;
[L8528]              havoc now;
[L8529]              assume now > tmpNow;
[L8530]              assume msgsender_MSG != null;
[L8531]              assume DType[msgsender_MSG] != SafeMath;
[L8532]              assume DType[msgsender_MSG] != Ownable;
[L8533]              assume DType[msgsender_MSG] != ERC20Basic;
[L8534]              assume DType[msgsender_MSG] != BasicToken;
[L8535]              assume DType[msgsender_MSG] != ERC20;
[L8536]              assume DType[msgsender_MSG] != StandardToken;
[L8537]              assume DType[msgsender_MSG] != Pausable;
[L8538]              assume DType[msgsender_MSG] != PausableToken;
[L8539]              assume DType[msgsender_MSG] != USDollarHKex;
[L8540]              Alloc[msgsender_MSG] := true;
[L8541]  COND FALSE  !(choice == 20)
[L8547]  COND FALSE  !(choice == 19)
[L8553]  COND FALSE  !(choice == 18)
[L8559]  COND FALSE  !(choice == 17)
[L8565]  COND TRUE   choice == 16
[L8566]              gas := gas - 21000;
[L8567]  COND TRUE   gas >= 0
[L8568]              assume _value_s828 >= 0 && _value_s828 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8569]              assume msgvalue_MSG == 0;
[L8570]  CALL        call __ret_0_transfer := transfer~address~uint256_USDollarHKex(this, msgsender_MSG, msgvalue_MSG, _to_s828, _value_s828);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG != _to_s828 && (_value_s828 > balances_BasicToken[this][msgsender_MSG] || balances_BasicToken[this][_to_s828] + _value_s828 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && _value_s828 >= 0) && _value_s828 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][_to_s828] >= 0) && balances_BasicToken[this][_to_s828] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][msgsender_MSG] >= 0) && balances_BasicToken[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_USDollarHKex0 := true;
[L2]                 call_transfer_USDollarHKex0 := false;
[L2]                 revert := revert_hold;
[L2170]              havoc __exception;
[L2171]              revert := false;
[L2172]  COND FALSE  !(__exception)
[L2204]  CALL        call __ret_0_ := transfer~address~uint256_USDollarHKex__success(this, msgsender_MSG, msgvalue_MSG, _to_s828, _value_s828);
[L5147]  CALL        call __var_24 := canSubAllocation~address~uint256_USDollarHKex__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, _value_s828);
[L5328]  COND TRUE   sub_value_s949 == 0
[L5329]              __ret_0_ := false;
[L5147]  RET         call __var_24 := canSubAllocation~address~uint256_USDollarHKex__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, _value_s828);
[L5148]  COND FALSE  !(revert)
[L5151]  COND FALSE  !(!__var_24)
[L5155]  CALL        call subAllocation~address_USDollarHKex__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5554]              total_lockamount_s1052 := 0;
[L5555]              total_unlockamount_s1052 := 0;
[L5556]  COND FALSE  !(alloc_allocations_USDollarHKex_lvl0[allocations_USDollarHKex[this]][sender_s1052] == false)
[L5567]              j_s1052 := 0;
[L5568]  COND FALSE  !(j_s1052 < Length[M_Ref_Ref[allocations_USDollarHKex[this]][sender_s1052]])
[L5633]  COND FALSE  !(total_unlockamount_s1052 > 0)
[L5636]  COND FALSE  !(alloc_allocations_USDollarHKex_lvl0[allocations_USDollarHKex[this]][sender_s1052] == false)
[L5647]  COND FALSE  !(total_lockamount_s1052 == 0 && Length[M_Ref_Ref[allocations_USDollarHKex[this]][sender_s1052]] > 0)
[L5155]  RET         call subAllocation~address_USDollarHKex__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5156]  COND FALSE  !(revert)
[L5159]  COND TRUE   DType[this] == USDollarHKex
[L5160]  CALL        call __var_25 := transfer~address~uint256_PausableToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s828, _value_s828);
[L4759]  CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7619]  COND FALSE  !(!!paused_Pausable[this])
[L4759]  RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4760]  COND FALSE  !(revert)
[L4763]  COND TRUE   DType[this] == USDollarHKex
[L4764]  CALL        call __var_11 := transfer~address~uint256_BasicToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s641, _value_s641);
[L4208]              __var_2 := null;
[L4209]  COND FALSE  !(!(_to_s266 != null))
[L4213]  COND FALSE  !(!(_value_s266 <= balances_BasicToken[this][msgsender_MSG]))
[L4217]  CALL        call __var_3 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][msgsender_MSG], _value_s266);
[L3928]              assert b_s68 <= a_s68;
[L3929]              __ret_0_ := (a_s68 - b_s68) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4217]  RET         call __var_3 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][msgsender_MSG], _value_s266);
[L4218]  COND FALSE  !(revert)
[L4221]              sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][msgsender_MSG];
[L4222]              balances_BasicToken[this][msgsender_MSG] := __var_3;
[L4223]              sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][msgsender_MSG];
[L4224]  CALL        call __var_4 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_to_s266], _value_s266);
[L3942]              c_s92 := (a_s92 + b_s92) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3943]              assert c_s92 >= a_s92;
[L3944]              c_s92 := c_s92;
[L4224]  RET         call __var_4 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_to_s266], _value_s266);
[L4225]  COND FALSE  !(revert)
[L4228]              sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][_to_s266];
[L4229]              balances_BasicToken[this][_to_s266] := __var_4;
[L4230]              sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][_to_s266];
[L4231]              assert { :EventEmitted "Transfer_BasicToken" } true;
[L4232]              __ret_0_ := true;
[L4764]  RET         call __var_11 := transfer~address~uint256_BasicToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s641, _value_s641);
[L4765]  COND FALSE  !(revert)
[L4776]              __ret_0_ := __var_11;
[L5160]  RET         call __var_25 := transfer~address~uint256_PausableToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s828, _value_s828);
[L5161]  COND FALSE  !(revert)
[L5167]              __ret_0_ := __var_25;
[L2204]  RET         call __ret_0_ := transfer~address~uint256_USDollarHKex__success(this, msgsender_MSG, msgvalue_MSG, _to_s828, _value_s828);
[L2205]              assume !revert && gas >= 0;
[L8570]  RET         call __ret_0_transfer := transfer~address~uint256_USDollarHKex(this, msgsender_MSG, msgvalue_MSG, _to_s828, _value_s828);
[L8688]  RET         call CorralChoice_USDollarHKex(this);

[2020-11-25 08:10:45,138 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 08:10:45,139 INFO  L82        PathProgramCache]: Analyzing trace with hash 2145669261, now seen corresponding path program 1 times
[2020-11-25 08:10:45,139 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 08:10:45,159 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 08:10:45,320 INFO  L134       CoverageAnalysis]: Checked inductivity of 963 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 963 trivial. 0 not checked.
[2020-11-25 08:10:45,320 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 08:10:45,320 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [4] imperfect sequences [] total 4
[2020-11-25 08:10:45,321 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 08:10:45,321 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-11-25 08:10:45,321 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=5, Invalid=7, Unknown=0, NotChecked=0, Total=12
[2020-11-25 08:10:45,321 INFO  L87              Difference]: Start difference. First operand 5175 states and 5813 transitions. cyclomatic complexity: 655 Second operand 4 states.
[2020-11-25 08:10:45,361 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 08:10:45,361 INFO  L93              Difference]: Finished difference Result 5185 states and 5823 transitions.
[2020-11-25 08:10:45,361 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 4 states. 
[2020-11-25 08:10:45,362 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 5185 states and 5823 transitions.
[2020-11-25 08:10:45,371 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 08:10:45,385 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 5185 states to 5179 states and 5817 transitions.
[2020-11-25 08:10:45,385 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1036
[2020-11-25 08:10:45,386 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1036
[2020-11-25 08:10:45,386 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 5179 states and 5817 transitions.
[2020-11-25 08:10:45,389 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 08:10:45,390 INFO  L728         BuchiCegarLoop]: Abstraction has 5179 states and 5817 transitions.
[2020-11-25 08:10:45,394 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 5179 states and 5817 transitions.
[2020-11-25 08:10:45,422 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 5179 to 5179.
[2020-11-25 08:10:45,422 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 5179 states.
[2020-11-25 08:10:45,427 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 5179 states to 5179 states and 5817 transitions.
[2020-11-25 08:10:45,427 INFO  L751         BuchiCegarLoop]: Abstraction has 5179 states and 5817 transitions.
[2020-11-25 08:10:45,427 INFO  L631         BuchiCegarLoop]: Abstraction has 5179 states and 5817 transitions.
[2020-11-25 08:10:45,427 INFO  L445         BuchiCegarLoop]: ======== Iteration 4============
[2020-11-25 08:10:45,427 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 5179 states and 5817 transitions.
[2020-11-25 08:10:45,432 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 08:10:45,432 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 08:10:45,432 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 08:10:45,434 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [12, 12, 12, 12, 12, 12, 12, 12, 12, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 08:10:45,434 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transfer_USDollarHKex0 := false;
[L2]                 call_transfer_USDollarHKex0 := false;
[L2]     CALL        call main();
[L8678]              assume null == 0;
[L8679]  CALL        call this := FreshRefGenerator__success();
[L3835]              havoc newRef;
[L3836]              assume Alloc[newRef] == false;
[L3837]              Alloc[newRef] := true;
[L3838]              assume newRef != null;
[L8679]  RET         call this := FreshRefGenerator__success();
[L8680]              assume now >= 0;
[L8681]              assume DType[this] == USDollarHKex;
[L8682]              assume msgvalue_MSG == 0;
[L8683]              gas := gas - 53000;
[L8684]  CALL        call USDollarHKex_USDollarHKex(this, msgsender_MSG, msgvalue_MSG);
[L2092]              havoc __exception;
[L2093]              revert := false;
[L2094]  COND FALSE  !(__exception)
[L2126]  CALL        call USDollarHKex_USDollarHKex__success(this, msgsender_MSG, msgvalue_MSG);
[L5079]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4107]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4092]              assume msgsender_MSG != null;
[L4093]              Balance[this] := 0;
[L4107]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4108]  COND FALSE  !(revert)
[L5079]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5080]  COND FALSE  !(revert)
[L5083]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4278]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4107]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4092]              assume msgsender_MSG != null;
[L4093]              Balance[this] := 0;
[L4107]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4108]  COND FALSE  !(revert)
[L4278]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4279]  COND FALSE  !(revert)
[L4282]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4259]              assume msgsender_MSG != null;
[L4260]              Balance[this] := 0;
[L4282]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4283]  COND FALSE  !(revert)
[L5083]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5084]  COND FALSE  !(revert)
[L5087]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4149]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4107]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4092]              assume msgsender_MSG != null;
[L4093]              Balance[this] := 0;
[L4107]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4108]  COND FALSE  !(revert)
[L4149]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4150]  COND FALSE  !(revert)
[L4153]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4127]              assume msgsender_MSG != null;
[L4128]              Balance[this] := 0;
[L4129]              balances_BasicToken[this] := zeroRefintArr();
[L4130]              sum_balances0[this] := 0;
[L4131]              totalSupply__BasicToken[this] := 0;
[L4153]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4154]  COND FALSE  !(revert)
[L5087]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L5088]  COND FALSE  !(revert)
[L5091]  CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4330]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4107]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4092]              assume msgsender_MSG != null;
[L4093]              Balance[this] := 0;
[L4107]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4108]  COND FALSE  !(revert)
[L4330]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4331]  COND FALSE  !(revert)
[L4334]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4278]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4107]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4092]              assume msgsender_MSG != null;
[L4093]              Balance[this] := 0;
[L4107]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4108]  COND FALSE  !(revert)
[L4278]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4279]  COND FALSE  !(revert)
[L4282]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4259]              assume msgsender_MSG != null;
[L4260]              Balance[this] := 0;
[L4282]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4283]  COND FALSE  !(revert)
[L4334]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4335]  COND FALSE  !(revert)
[L4338]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4149]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4107]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4092]              assume msgsender_MSG != null;
[L4093]              Balance[this] := 0;
[L4107]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4108]  COND FALSE  !(revert)
[L4149]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4150]  COND FALSE  !(revert)
[L4153]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4127]              assume msgsender_MSG != null;
[L4128]              Balance[this] := 0;
[L4129]              balances_BasicToken[this] := zeroRefintArr();
[L4130]              sum_balances0[this] := 0;
[L4131]              totalSupply__BasicToken[this] := 0;
[L4153]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4154]  COND FALSE  !(revert)
[L4338]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4339]  COND FALSE  !(revert)
[L4342]  CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4301]              assume msgsender_MSG != null;
[L4302]              Balance[this] := 0;
[L4303]              allowed_StandardToken[this] := zeroRefRefintArr();
[L4304]              sum_allowed1[this] := 0;
[L4342]  RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4343]  COND FALSE  !(revert)
[L5091]  RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L5092]  COND FALSE  !(revert)
[L5095]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3978]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3961]              assume msgsender_MSG != null;
[L3962]              Balance[this] := 0;
[L3963]              owner_Ownable[this] := null;
[L3965]              owner_Ownable[this] := msgsender_MSG;
[L3978]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3979]  COND FALSE  !(revert)
[L5095]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5096]  COND FALSE  !(revert)
[L5099]  CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3978]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3961]              assume msgsender_MSG != null;
[L3962]              Balance[this] := 0;
[L3963]              owner_Ownable[this] := null;
[L3965]              owner_Ownable[this] := msgsender_MSG;
[L3978]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3979]  COND FALSE  !(revert)
[L4574]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]  COND FALSE  !(revert)
[L4578]  CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4554]              assume msgsender_MSG != null;
[L4555]              Balance[this] := 0;
[L4556]              paused_Pausable[this] := false;
[L4578]  RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4579]  COND FALSE  !(revert)
[L5099]  RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L5100]  COND FALSE  !(revert)
[L5103]  CALL        call PausableToken_PausableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4700]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4107]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4092]              assume msgsender_MSG != null;
[L4093]              Balance[this] := 0;
[L4107]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4108]  COND FALSE  !(revert)
[L4700]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4701]  COND FALSE  !(revert)
[L4704]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4278]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4107]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4092]              assume msgsender_MSG != null;
[L4093]              Balance[this] := 0;
[L4107]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4108]  COND FALSE  !(revert)
[L4278]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4279]  COND FALSE  !(revert)
[L4282]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4259]              assume msgsender_MSG != null;
[L4260]              Balance[this] := 0;
[L4282]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4283]  COND FALSE  !(revert)
[L4704]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4705]  COND FALSE  !(revert)
[L4708]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4149]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4107]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4092]              assume msgsender_MSG != null;
[L4093]              Balance[this] := 0;
[L4107]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4108]  COND FALSE  !(revert)
[L4149]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4150]  COND FALSE  !(revert)
[L4153]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4127]              assume msgsender_MSG != null;
[L4128]              Balance[this] := 0;
[L4129]              balances_BasicToken[this] := zeroRefintArr();
[L4130]              sum_balances0[this] := 0;
[L4131]              totalSupply__BasicToken[this] := 0;
[L4153]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4154]  COND FALSE  !(revert)
[L4708]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4709]  COND FALSE  !(revert)
[L4712]  CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4330]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4107]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4092]              assume msgsender_MSG != null;
[L4093]              Balance[this] := 0;
[L4107]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4108]  COND FALSE  !(revert)
[L4330]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4331]  COND FALSE  !(revert)
[L4334]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4278]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4107]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4092]              assume msgsender_MSG != null;
[L4093]              Balance[this] := 0;
[L4107]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4108]  COND FALSE  !(revert)
[L4278]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4279]  COND FALSE  !(revert)
[L4282]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4259]              assume msgsender_MSG != null;
[L4260]              Balance[this] := 0;
[L4282]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4283]  COND FALSE  !(revert)
[L4334]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4335]  COND FALSE  !(revert)
[L4338]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4149]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4107]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4092]              assume msgsender_MSG != null;
[L4093]              Balance[this] := 0;
[L4107]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4108]  COND FALSE  !(revert)
[L4149]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4150]  COND FALSE  !(revert)
[L4153]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4127]              assume msgsender_MSG != null;
[L4128]              Balance[this] := 0;
[L4129]              balances_BasicToken[this] := zeroRefintArr();
[L4130]              sum_balances0[this] := 0;
[L4131]              totalSupply__BasicToken[this] := 0;
[L4153]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4154]  COND FALSE  !(revert)
[L4338]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4339]  COND FALSE  !(revert)
[L4342]  CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4301]              assume msgsender_MSG != null;
[L4302]              Balance[this] := 0;
[L4303]              allowed_StandardToken[this] := zeroRefRefintArr();
[L4304]              sum_allowed1[this] := 0;
[L4342]  RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4343]  COND FALSE  !(revert)
[L4712]  RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4713]  COND FALSE  !(revert)
[L4716]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3978]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3961]              assume msgsender_MSG != null;
[L3962]              Balance[this] := 0;
[L3963]              owner_Ownable[this] := null;
[L3965]              owner_Ownable[this] := msgsender_MSG;
[L3978]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3979]  COND FALSE  !(revert)
[L4716]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L4717]  COND FALSE  !(revert)
[L4720]  CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3978]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3961]              assume msgsender_MSG != null;
[L3962]              Balance[this] := 0;
[L3963]              owner_Ownable[this] := null;
[L3965]              owner_Ownable[this] := msgsender_MSG;
[L3978]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3979]  COND FALSE  !(revert)
[L4574]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]  COND FALSE  !(revert)
[L4578]  CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4554]              assume msgsender_MSG != null;
[L4555]              Balance[this] := 0;
[L4556]              paused_Pausable[this] := false;
[L4578]  RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4579]  COND FALSE  !(revert)
[L4720]  RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L4721]  COND FALSE  !(revert)
[L4724]  CALL        call PausableToken_PausableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4661]              assume msgsender_MSG != null;
[L4662]              Balance[this] := 0;
[L4724]  RET         call PausableToken_PausableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4725]  COND FALSE  !(revert)
[L5103]  RET         call PausableToken_PausableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L5104]  COND FALSE  !(revert)
[L5107]  CALL        call USDollarHKex_USDollarHKex_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5013]              assume msgsender_MSG != null;
[L5014]              Balance[this] := 0;
[L5015]              name_USDollarHKex[this] := 749918206;
[L5016]              symbol_USDollarHKex[this] := 2047713833;
[L5017]              standard_USDollarHKex[this] := -1333876585;
[L5018]              decimals_USDollarHKex[this] := 18;
[L5019]              __var_22 := decimals_USDollarHKex[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5020]              INITIAL_SUPPLY_USDollarHKex[this] := nonlinearMul(25 * (100000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936), nonlinearPow(10, decimals_USDollarHKex[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5022]  CALL        call __var_23 := FreshRefGenerator__success();
[L3835]              havoc newRef;
[L3836]              assume Alloc[newRef] == false;
[L3837]              Alloc[newRef] := true;
[L3838]              assume newRef != null;
[L5022]  RET         call __var_23 := FreshRefGenerator__success();
[L5023]  COND FALSE  !(revert)
[L5026]              allocations_USDollarHKex[this] := __var_23;
[L5028]              alloc_allocations_USDollarHKex_lvl0[allocations_USDollarHKex[this]] := zeroRefboolArr();
[L5030]              totalSupply__BasicToken[this] := INITIAL_SUPPLY_USDollarHKex[this];
[L5031]              sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][msgsender_MSG];
[L5032]              balances_BasicToken[this][msgsender_MSG] := INITIAL_SUPPLY_USDollarHKex[this];
[L5033]              sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][msgsender_MSG];
[L5034]              assert { :EventEmitted "Transfer_USDollarHKex" } true;
[L5107]  RET         call USDollarHKex_USDollarHKex_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5108]  COND FALSE  !(revert)
[L2126]  RET         call USDollarHKex_USDollarHKex__success(this, msgsender_MSG, msgvalue_MSG);
[L2127]              assume !revert && gas >= 0;
[L8684]  RET         call USDollarHKex_USDollarHKex(this, msgsender_MSG, msgvalue_MSG);
[L8685]              assume !revert && gas >= 0;
[L8688]  CALL        call CorralChoice_USDollarHKex(this);
[L8483]              havoc msgsender_MSG;
[L8484]              havoc msgvalue_MSG;
[L8485]              havoc choice;
[L8486]              havoc __ret_0_owner;
[L8487]              havoc _newOwner_s133;
[L8488]              havoc __ret_0_totalSupply;
[L8489]              havoc _owner_s278;
[L8490]              havoc __ret_0_balanceOf;
[L8491]              havoc _to_s828;
[L8492]              havoc _value_s828;
[L8493]              havoc __ret_0_transfer;
[L8494]              havoc _owner_s459;
[L8495]              havoc _spender_s459;
[L8496]              havoc __ret_0_allowance;
[L8497]              havoc _from_s858;
[L8498]              havoc _to_s858;
[L8499]              havoc _value_s858;
[L8500]              havoc __ret_0_transferFrom;
[L8501]              havoc _spender_s680;
[L8502]              havoc _value_s680;
[L8503]              havoc __ret_0_approve;
[L8504]              havoc _spender_s698;
[L8505]              havoc _addedValue_s698;
[L8506]              havoc success_s698;
[L8507]              havoc _spender_s716;
[L8508]              havoc _subtractedValue_s716;
[L8509]              havoc success_s716;
[L8510]              havoc __ret_0_paused;
[L8511]              havoc __ret_0_name;
[L8512]              havoc __ret_0_symbol;
[L8513]              havoc __ret_0_standard;
[L8514]              havoc __ret_0_decimals;
[L8515]              havoc __ret_0_INITIAL_SUPPLY;
[L8516]              havoc arg1229_s0;
[L8517]              havoc arg1230_s0;
[L8518]              havoc __ret_0_allocations;
[L8519]              havoc _address_s1226;
[L8520]              havoc total_value_s1226;
[L8521]              havoc times_s1226;
[L8522]              havoc balanceRequires_s1226;
[L8523]              havoc __ret_0_setAllocation;
[L8524]              havoc tmpNow;
[L8525]              havoc gas;
[L8526]              assume gas > 4000000 && gas <= 8000000;
[L8527]              tmpNow := now;
[L8528]              havoc now;
[L8529]              assume now > tmpNow;
[L8530]              assume msgsender_MSG != null;
[L8531]              assume DType[msgsender_MSG] != SafeMath;
[L8532]              assume DType[msgsender_MSG] != Ownable;
[L8533]              assume DType[msgsender_MSG] != ERC20Basic;
[L8534]              assume DType[msgsender_MSG] != BasicToken;
[L8535]              assume DType[msgsender_MSG] != ERC20;
[L8536]              assume DType[msgsender_MSG] != StandardToken;
[L8537]              assume DType[msgsender_MSG] != Pausable;
[L8538]              assume DType[msgsender_MSG] != PausableToken;
[L8539]              assume DType[msgsender_MSG] != USDollarHKex;
[L8540]              Alloc[msgsender_MSG] := true;
[L8541]  COND FALSE  !(choice == 20)
[L8547]  COND FALSE  !(choice == 19)
[L8553]  COND FALSE  !(choice == 18)
[L8559]  COND FALSE  !(choice == 17)
[L8565]  COND TRUE   choice == 16
[L8566]              gas := gas - 21000;
[L8567]  COND TRUE   gas >= 0
[L8568]              assume _value_s828 >= 0 && _value_s828 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8569]              assume msgvalue_MSG == 0;
[L8570]  CALL        call __ret_0_transfer := transfer~address~uint256_USDollarHKex(this, msgsender_MSG, msgvalue_MSG, _to_s828, _value_s828);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG != _to_s828 && (_value_s828 > balances_BasicToken[this][msgsender_MSG] || balances_BasicToken[this][_to_s828] + _value_s828 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && _value_s828 >= 0) && _value_s828 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][_to_s828] >= 0) && balances_BasicToken[this][_to_s828] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][msgsender_MSG] >= 0) && balances_BasicToken[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_USDollarHKex0 := true;
[L2]                 call_transfer_USDollarHKex0 := false;
[L2]                 revert := revert_hold;
[L2170]              havoc __exception;
[L2171]              revert := false;
[L2172]  COND FALSE  !(__exception)
[L2204]  CALL        call __ret_0_ := transfer~address~uint256_USDollarHKex__success(this, msgsender_MSG, msgvalue_MSG, _to_s828, _value_s828);
[L5147]  CALL        call __var_24 := canSubAllocation~address~uint256_USDollarHKex__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, _value_s828);
[L5328]  COND FALSE  !(sub_value_s949 == 0)
[L5332]  COND FALSE  !(balances_BasicToken[this][sender_s949] < sub_value_s949)
[L5336]  COND FALSE  !(alloc_allocations_USDollarHKex_lvl0[allocations_USDollarHKex[this]][sender_s949] == false)
[L5347]  COND TRUE   Length[M_Ref_Ref[allocations_USDollarHKex[this]][sender_s949]] == 0
[L5348]              __ret_0_ := true;
[L5147]  RET         call __var_24 := canSubAllocation~address~uint256_USDollarHKex__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, _value_s828);
[L5148]  COND FALSE  !(revert)
[L5151]  COND FALSE  !(!__var_24)
[L5155]  CALL        call subAllocation~address_USDollarHKex__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5554]              total_lockamount_s1052 := 0;
[L5555]              total_unlockamount_s1052 := 0;
[L5556]  COND FALSE  !(alloc_allocations_USDollarHKex_lvl0[allocations_USDollarHKex[this]][sender_s1052] == false)
[L5567]              j_s1052 := 0;
[L5568]  COND FALSE  !(j_s1052 < Length[M_Ref_Ref[allocations_USDollarHKex[this]][sender_s1052]])
[L5633]  COND FALSE  !(total_unlockamount_s1052 > 0)
[L5636]  COND FALSE  !(alloc_allocations_USDollarHKex_lvl0[allocations_USDollarHKex[this]][sender_s1052] == false)
[L5647]  COND FALSE  !(total_lockamount_s1052 == 0 && Length[M_Ref_Ref[allocations_USDollarHKex[this]][sender_s1052]] > 0)
[L5155]  RET         call subAllocation~address_USDollarHKex__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5156]  COND FALSE  !(revert)
[L5159]  COND TRUE   DType[this] == USDollarHKex
[L5160]  CALL        call __var_25 := transfer~address~uint256_PausableToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s828, _value_s828);
[L4759]  CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7619]  COND FALSE  !(!!paused_Pausable[this])
[L4759]  RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4760]  COND FALSE  !(revert)
[L4763]  COND TRUE   DType[this] == USDollarHKex
[L4764]  CALL        call __var_11 := transfer~address~uint256_BasicToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s641, _value_s641);
[L4208]              __var_2 := null;
[L4209]  COND FALSE  !(!(_to_s266 != null))
[L4213]  COND FALSE  !(!(_value_s266 <= balances_BasicToken[this][msgsender_MSG]))
[L4217]  CALL        call __var_3 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][msgsender_MSG], _value_s266);
[L3928]              assert b_s68 <= a_s68;
[L3929]              __ret_0_ := (a_s68 - b_s68) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4217]  RET         call __var_3 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][msgsender_MSG], _value_s266);
[L4218]  COND FALSE  !(revert)
[L4221]              sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][msgsender_MSG];
[L4222]              balances_BasicToken[this][msgsender_MSG] := __var_3;
[L4223]              sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][msgsender_MSG];
[L4224]  CALL        call __var_4 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_to_s266], _value_s266);
[L3942]              c_s92 := (a_s92 + b_s92) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3943]              assert c_s92 >= a_s92;
[L3944]              c_s92 := c_s92;
[L4224]  RET         call __var_4 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_to_s266], _value_s266);
[L4225]  COND FALSE  !(revert)
[L4228]              sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][_to_s266];
[L4229]              balances_BasicToken[this][_to_s266] := __var_4;
[L4230]              sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][_to_s266];
[L4231]              assert { :EventEmitted "Transfer_BasicToken" } true;
[L4232]              __ret_0_ := true;
[L4764]  RET         call __var_11 := transfer~address~uint256_BasicToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s641, _value_s641);
[L4765]  COND FALSE  !(revert)
[L4776]              __ret_0_ := __var_11;
[L5160]  RET         call __var_25 := transfer~address~uint256_PausableToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s828, _value_s828);
[L5161]  COND FALSE  !(revert)
[L5167]              __ret_0_ := __var_25;
[L2204]  RET         call __ret_0_ := transfer~address~uint256_USDollarHKex__success(this, msgsender_MSG, msgvalue_MSG, _to_s828, _value_s828);
[L2205]              assume !revert && gas >= 0;
[L8570]  RET         call __ret_0_transfer := transfer~address~uint256_USDollarHKex(this, msgsender_MSG, msgvalue_MSG, _to_s828, _value_s828);
[L8688]  RET         call CorralChoice_USDollarHKex(this);

Loop:
[L8688]  CALL        call CorralChoice_USDollarHKex(this);
[L8483]              havoc msgsender_MSG;
[L8484]              havoc msgvalue_MSG;
[L8485]              havoc choice;
[L8486]              havoc __ret_0_owner;
[L8487]              havoc _newOwner_s133;
[L8488]              havoc __ret_0_totalSupply;
[L8489]              havoc _owner_s278;
[L8490]              havoc __ret_0_balanceOf;
[L8491]              havoc _to_s828;
[L8492]              havoc _value_s828;
[L8493]              havoc __ret_0_transfer;
[L8494]              havoc _owner_s459;
[L8495]              havoc _spender_s459;
[L8496]              havoc __ret_0_allowance;
[L8497]              havoc _from_s858;
[L8498]              havoc _to_s858;
[L8499]              havoc _value_s858;
[L8500]              havoc __ret_0_transferFrom;
[L8501]              havoc _spender_s680;
[L8502]              havoc _value_s680;
[L8503]              havoc __ret_0_approve;
[L8504]              havoc _spender_s698;
[L8505]              havoc _addedValue_s698;
[L8506]              havoc success_s698;
[L8507]              havoc _spender_s716;
[L8508]              havoc _subtractedValue_s716;
[L8509]              havoc success_s716;
[L8510]              havoc __ret_0_paused;
[L8511]              havoc __ret_0_name;
[L8512]              havoc __ret_0_symbol;
[L8513]              havoc __ret_0_standard;
[L8514]              havoc __ret_0_decimals;
[L8515]              havoc __ret_0_INITIAL_SUPPLY;
[L8516]              havoc arg1229_s0;
[L8517]              havoc arg1230_s0;
[L8518]              havoc __ret_0_allocations;
[L8519]              havoc _address_s1226;
[L8520]              havoc total_value_s1226;
[L8521]              havoc times_s1226;
[L8522]              havoc balanceRequires_s1226;
[L8523]              havoc __ret_0_setAllocation;
[L8524]              havoc tmpNow;
[L8525]              havoc gas;
[L8526]              assume gas > 4000000 && gas <= 8000000;
[L8527]              tmpNow := now;
[L8528]              havoc now;
[L8529]              assume now > tmpNow;
[L8530]              assume msgsender_MSG != null;
[L8531]              assume DType[msgsender_MSG] != SafeMath;
[L8532]              assume DType[msgsender_MSG] != Ownable;
[L8533]              assume DType[msgsender_MSG] != ERC20Basic;
[L8534]              assume DType[msgsender_MSG] != BasicToken;
[L8535]              assume DType[msgsender_MSG] != ERC20;
[L8536]              assume DType[msgsender_MSG] != StandardToken;
[L8537]              assume DType[msgsender_MSG] != Pausable;
[L8538]              assume DType[msgsender_MSG] != PausableToken;
[L8539]              assume DType[msgsender_MSG] != USDollarHKex;
[L8540]              Alloc[msgsender_MSG] := true;
[L8541]  COND FALSE  !(choice == 20)
[L8547]  COND FALSE  !(choice == 19)
[L8553]  COND FALSE  !(choice == 18)
[L8559]  COND FALSE  !(choice == 17)
[L8565]  COND TRUE   choice == 16
[L8566]              gas := gas - 21000;
[L8567]  COND TRUE   gas >= 0
[L8568]              assume _value_s828 >= 0 && _value_s828 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8569]              assume msgvalue_MSG == 0;
[L8570]  CALL        call __ret_0_transfer := transfer~address~uint256_USDollarHKex(this, msgsender_MSG, msgvalue_MSG, _to_s828, _value_s828);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG != _to_s828 && (_value_s828 > balances_BasicToken[this][msgsender_MSG] || balances_BasicToken[this][_to_s828] + _value_s828 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && _value_s828 >= 0) && _value_s828 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][_to_s828] >= 0) && balances_BasicToken[this][_to_s828] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][msgsender_MSG] >= 0) && balances_BasicToken[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_USDollarHKex0 := true;
[L2]                 call_transfer_USDollarHKex0 := false;
[L2]                 revert := revert_hold;
[L2170]              havoc __exception;
[L2171]              revert := false;
[L2172]  COND FALSE  !(__exception)
[L2204]  CALL        call __ret_0_ := transfer~address~uint256_USDollarHKex__success(this, msgsender_MSG, msgvalue_MSG, _to_s828, _value_s828);
[L5147]  CALL        call __var_24 := canSubAllocation~address~uint256_USDollarHKex__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, _value_s828);
[L5328]  COND FALSE  !(sub_value_s949 == 0)
[L5332]  COND FALSE  !(balances_BasicToken[this][sender_s949] < sub_value_s949)
[L5336]  COND FALSE  !(alloc_allocations_USDollarHKex_lvl0[allocations_USDollarHKex[this]][sender_s949] == false)
[L5347]  COND TRUE   Length[M_Ref_Ref[allocations_USDollarHKex[this]][sender_s949]] == 0
[L5348]              __ret_0_ := true;
[L5147]  RET         call __var_24 := canSubAllocation~address~uint256_USDollarHKex__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, _value_s828);
[L5148]  COND FALSE  !(revert)
[L5151]  COND FALSE  !(!__var_24)
[L5155]  CALL        call subAllocation~address_USDollarHKex__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5554]              total_lockamount_s1052 := 0;
[L5555]              total_unlockamount_s1052 := 0;
[L5556]  COND FALSE  !(alloc_allocations_USDollarHKex_lvl0[allocations_USDollarHKex[this]][sender_s1052] == false)
[L5567]              j_s1052 := 0;
[L5568]  COND FALSE  !(j_s1052 < Length[M_Ref_Ref[allocations_USDollarHKex[this]][sender_s1052]])
[L5633]  COND FALSE  !(total_unlockamount_s1052 > 0)
[L5636]  COND FALSE  !(alloc_allocations_USDollarHKex_lvl0[allocations_USDollarHKex[this]][sender_s1052] == false)
[L5647]  COND FALSE  !(total_lockamount_s1052 == 0 && Length[M_Ref_Ref[allocations_USDollarHKex[this]][sender_s1052]] > 0)
[L5155]  RET         call subAllocation~address_USDollarHKex__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5156]  COND FALSE  !(revert)
[L5159]  COND TRUE   DType[this] == USDollarHKex
[L5160]  CALL        call __var_25 := transfer~address~uint256_PausableToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s828, _value_s828);
[L4759]  CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7619]  COND FALSE  !(!!paused_Pausable[this])
[L4759]  RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4760]  COND FALSE  !(revert)
[L4763]  COND TRUE   DType[this] == USDollarHKex
[L4764]  CALL        call __var_11 := transfer~address~uint256_BasicToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s641, _value_s641);
[L4208]              __var_2 := null;
[L4209]  COND FALSE  !(!(_to_s266 != null))
[L4213]  COND FALSE  !(!(_value_s266 <= balances_BasicToken[this][msgsender_MSG]))
[L4217]  CALL        call __var_3 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][msgsender_MSG], _value_s266);
[L3928]              assert b_s68 <= a_s68;
[L3929]              __ret_0_ := (a_s68 - b_s68) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4217]  RET         call __var_3 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][msgsender_MSG], _value_s266);
[L4218]  COND FALSE  !(revert)
[L4221]              sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][msgsender_MSG];
[L4222]              balances_BasicToken[this][msgsender_MSG] := __var_3;
[L4223]              sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][msgsender_MSG];
[L4224]  CALL        call __var_4 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_to_s266], _value_s266);
[L3942]              c_s92 := (a_s92 + b_s92) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3943]              assert c_s92 >= a_s92;
[L3944]              c_s92 := c_s92;
[L4224]  RET         call __var_4 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_to_s266], _value_s266);
[L4225]  COND FALSE  !(revert)
[L4228]              sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][_to_s266];
[L4229]              balances_BasicToken[this][_to_s266] := __var_4;
[L4230]              sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][_to_s266];
[L4231]              assert { :EventEmitted "Transfer_BasicToken" } true;
[L4232]              __ret_0_ := true;
[L4764]  RET         call __var_11 := transfer~address~uint256_BasicToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s641, _value_s641);
[L4765]  COND FALSE  !(revert)
[L4776]              __ret_0_ := __var_11;
[L5160]  RET         call __var_25 := transfer~address~uint256_PausableToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s828, _value_s828);
[L5161]  COND FALSE  !(revert)
[L5167]              __ret_0_ := __var_25;
[L2204]  RET         call __ret_0_ := transfer~address~uint256_USDollarHKex__success(this, msgsender_MSG, msgvalue_MSG, _to_s828, _value_s828);
[L2205]              assume !revert && gas >= 0;
[L8570]  RET         call __ret_0_transfer := transfer~address~uint256_USDollarHKex(this, msgsender_MSG, msgvalue_MSG, _to_s828, _value_s828);
[L8688]  RET         call CorralChoice_USDollarHKex(this);

[2020-11-25 08:10:45,446 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 08:10:45,446 INFO  L82        PathProgramCache]: Analyzing trace with hash -1240260817, now seen corresponding path program 1 times
[2020-11-25 08:10:45,448 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 08:10:45,475 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 08:10:45,774 INFO  L134       CoverageAnalysis]: Checked inductivity of 963 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 963 trivial. 0 not checked.
[2020-11-25 08:10:45,774 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 08:10:45,775 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [11] imperfect sequences [] total 11
[2020-11-25 08:10:45,775 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 08:10:45,775 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 12 interpolants.
[2020-11-25 08:10:45,775 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=24, Invalid=108, Unknown=0, NotChecked=0, Total=132
[2020-11-25 08:10:45,776 INFO  L87              Difference]: Start difference. First operand 5179 states and 5817 transitions. cyclomatic complexity: 655 Second operand 12 states.
[2020-11-25 08:10:48,238 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 08:10:48,238 INFO  L93              Difference]: Finished difference Result 5632 states and 6428 transitions.
[2020-11-25 08:10:48,239 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 14 states. 
[2020-11-25 08:10:48,239 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 5632 states and 6428 transitions.
[2020-11-25 08:10:48,250 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 8
[2020-11-25 08:10:48,266 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 5632 states to 5632 states and 6428 transitions.
[2020-11-25 08:10:48,266 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1094
[2020-11-25 08:10:48,266 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1094
[2020-11-25 08:10:48,267 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 5632 states and 6428 transitions.
[2020-11-25 08:10:48,271 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 08:10:48,271 INFO  L728         BuchiCegarLoop]: Abstraction has 5632 states and 6428 transitions.
[2020-11-25 08:10:48,275 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 5632 states and 6428 transitions.
[2020-11-25 08:10:48,317 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 5632 to 5472.
[2020-11-25 08:10:48,317 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 5472 states.
[2020-11-25 08:10:48,323 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 5472 states to 5472 states and 6211 transitions.
[2020-11-25 08:10:48,323 INFO  L751         BuchiCegarLoop]: Abstraction has 5472 states and 6211 transitions.
[2020-11-25 08:10:48,323 INFO  L631         BuchiCegarLoop]: Abstraction has 5472 states and 6211 transitions.
[2020-11-25 08:10:48,323 INFO  L445         BuchiCegarLoop]: ======== Iteration 5============
[2020-11-25 08:10:48,323 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 5472 states and 6211 transitions.
[2020-11-25 08:10:48,329 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 08:10:48,329 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 08:10:48,329 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 08:10:48,332 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [12, 12, 12, 12, 12, 12, 12, 12, 12, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 08:10:48,332 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transfer_USDollarHKex0 := false;
[L2]                 call_transfer_USDollarHKex0 := false;
[L2]     CALL        call main();
[L8678]              assume null == 0;
[L8679]  CALL        call this := FreshRefGenerator__success();
[L3835]              havoc newRef;
[L3836]              assume Alloc[newRef] == false;
[L3837]              Alloc[newRef] := true;
[L3838]              assume newRef != null;
[L8679]  RET         call this := FreshRefGenerator__success();
[L8680]              assume now >= 0;
[L8681]              assume DType[this] == USDollarHKex;
[L8682]              assume msgvalue_MSG == 0;
[L8683]              gas := gas - 53000;
[L8684]  CALL        call USDollarHKex_USDollarHKex(this, msgsender_MSG, msgvalue_MSG);
[L2092]              havoc __exception;
[L2093]              revert := false;
[L2094]  COND FALSE  !(__exception)
[L2126]  CALL        call USDollarHKex_USDollarHKex__success(this, msgsender_MSG, msgvalue_MSG);
[L5079]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4107]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4092]              assume msgsender_MSG != null;
[L4093]              Balance[this] := 0;
[L4107]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4108]  COND FALSE  !(revert)
[L5079]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5080]  COND FALSE  !(revert)
[L5083]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4278]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4107]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4092]              assume msgsender_MSG != null;
[L4093]              Balance[this] := 0;
[L4107]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4108]  COND FALSE  !(revert)
[L4278]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4279]  COND FALSE  !(revert)
[L4282]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4259]              assume msgsender_MSG != null;
[L4260]              Balance[this] := 0;
[L4282]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4283]  COND FALSE  !(revert)
[L5083]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5084]  COND FALSE  !(revert)
[L5087]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4149]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4107]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4092]              assume msgsender_MSG != null;
[L4093]              Balance[this] := 0;
[L4107]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4108]  COND FALSE  !(revert)
[L4149]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4150]  COND FALSE  !(revert)
[L4153]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4127]              assume msgsender_MSG != null;
[L4128]              Balance[this] := 0;
[L4129]              balances_BasicToken[this] := zeroRefintArr();
[L4130]              sum_balances0[this] := 0;
[L4131]              totalSupply__BasicToken[this] := 0;
[L4153]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4154]  COND FALSE  !(revert)
[L5087]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L5088]  COND FALSE  !(revert)
[L5091]  CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4330]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4107]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4092]              assume msgsender_MSG != null;
[L4093]              Balance[this] := 0;
[L4107]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4108]  COND FALSE  !(revert)
[L4330]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4331]  COND FALSE  !(revert)
[L4334]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4278]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4107]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4092]              assume msgsender_MSG != null;
[L4093]              Balance[this] := 0;
[L4107]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4108]  COND FALSE  !(revert)
[L4278]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4279]  COND FALSE  !(revert)
[L4282]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4259]              assume msgsender_MSG != null;
[L4260]              Balance[this] := 0;
[L4282]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4283]  COND FALSE  !(revert)
[L4334]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4335]  COND FALSE  !(revert)
[L4338]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4149]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4107]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4092]              assume msgsender_MSG != null;
[L4093]              Balance[this] := 0;
[L4107]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4108]  COND FALSE  !(revert)
[L4149]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4150]  COND FALSE  !(revert)
[L4153]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4127]              assume msgsender_MSG != null;
[L4128]              Balance[this] := 0;
[L4129]              balances_BasicToken[this] := zeroRefintArr();
[L4130]              sum_balances0[this] := 0;
[L4131]              totalSupply__BasicToken[this] := 0;
[L4153]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4154]  COND FALSE  !(revert)
[L4338]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4339]  COND FALSE  !(revert)
[L4342]  CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4301]              assume msgsender_MSG != null;
[L4302]              Balance[this] := 0;
[L4303]              allowed_StandardToken[this] := zeroRefRefintArr();
[L4304]              sum_allowed1[this] := 0;
[L4342]  RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4343]  COND FALSE  !(revert)
[L5091]  RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L5092]  COND FALSE  !(revert)
[L5095]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3978]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3961]              assume msgsender_MSG != null;
[L3962]              Balance[this] := 0;
[L3963]              owner_Ownable[this] := null;
[L3965]              owner_Ownable[this] := msgsender_MSG;
[L3978]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3979]  COND FALSE  !(revert)
[L5095]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5096]  COND FALSE  !(revert)
[L5099]  CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3978]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3961]              assume msgsender_MSG != null;
[L3962]              Balance[this] := 0;
[L3963]              owner_Ownable[this] := null;
[L3965]              owner_Ownable[this] := msgsender_MSG;
[L3978]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3979]  COND FALSE  !(revert)
[L4574]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]  COND FALSE  !(revert)
[L4578]  CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4554]              assume msgsender_MSG != null;
[L4555]              Balance[this] := 0;
[L4556]              paused_Pausable[this] := false;
[L4578]  RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4579]  COND FALSE  !(revert)
[L5099]  RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L5100]  COND FALSE  !(revert)
[L5103]  CALL        call PausableToken_PausableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4700]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4107]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4092]              assume msgsender_MSG != null;
[L4093]              Balance[this] := 0;
[L4107]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4108]  COND FALSE  !(revert)
[L4700]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4701]  COND FALSE  !(revert)
[L4704]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4278]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4107]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4092]              assume msgsender_MSG != null;
[L4093]              Balance[this] := 0;
[L4107]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4108]  COND FALSE  !(revert)
[L4278]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4279]  COND FALSE  !(revert)
[L4282]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4259]              assume msgsender_MSG != null;
[L4260]              Balance[this] := 0;
[L4282]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4283]  COND FALSE  !(revert)
[L4704]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4705]  COND FALSE  !(revert)
[L4708]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4149]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4107]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4092]              assume msgsender_MSG != null;
[L4093]              Balance[this] := 0;
[L4107]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4108]  COND FALSE  !(revert)
[L4149]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4150]  COND FALSE  !(revert)
[L4153]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4127]              assume msgsender_MSG != null;
[L4128]              Balance[this] := 0;
[L4129]              balances_BasicToken[this] := zeroRefintArr();
[L4130]              sum_balances0[this] := 0;
[L4131]              totalSupply__BasicToken[this] := 0;
[L4153]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4154]  COND FALSE  !(revert)
[L4708]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4709]  COND FALSE  !(revert)
[L4712]  CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4330]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4107]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4092]              assume msgsender_MSG != null;
[L4093]              Balance[this] := 0;
[L4107]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4108]  COND FALSE  !(revert)
[L4330]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4331]  COND FALSE  !(revert)
[L4334]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4278]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4107]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4092]              assume msgsender_MSG != null;
[L4093]              Balance[this] := 0;
[L4107]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4108]  COND FALSE  !(revert)
[L4278]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4279]  COND FALSE  !(revert)
[L4282]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4259]              assume msgsender_MSG != null;
[L4260]              Balance[this] := 0;
[L4282]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4283]  COND FALSE  !(revert)
[L4334]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4335]  COND FALSE  !(revert)
[L4338]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4149]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4107]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4092]              assume msgsender_MSG != null;
[L4093]              Balance[this] := 0;
[L4107]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4108]  COND FALSE  !(revert)
[L4149]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4150]  COND FALSE  !(revert)
[L4153]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4127]              assume msgsender_MSG != null;
[L4128]              Balance[this] := 0;
[L4129]              balances_BasicToken[this] := zeroRefintArr();
[L4130]              sum_balances0[this] := 0;
[L4131]              totalSupply__BasicToken[this] := 0;
[L4153]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4154]  COND FALSE  !(revert)
[L4338]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4339]  COND FALSE  !(revert)
[L4342]  CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4301]              assume msgsender_MSG != null;
[L4302]              Balance[this] := 0;
[L4303]              allowed_StandardToken[this] := zeroRefRefintArr();
[L4304]              sum_allowed1[this] := 0;
[L4342]  RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4343]  COND FALSE  !(revert)
[L4712]  RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4713]  COND FALSE  !(revert)
[L4716]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3978]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3961]              assume msgsender_MSG != null;
[L3962]              Balance[this] := 0;
[L3963]              owner_Ownable[this] := null;
[L3965]              owner_Ownable[this] := msgsender_MSG;
[L3978]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3979]  COND FALSE  !(revert)
[L4716]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L4717]  COND FALSE  !(revert)
[L4720]  CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3978]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3961]              assume msgsender_MSG != null;
[L3962]              Balance[this] := 0;
[L3963]              owner_Ownable[this] := null;
[L3965]              owner_Ownable[this] := msgsender_MSG;
[L3978]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3979]  COND FALSE  !(revert)
[L4574]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]  COND FALSE  !(revert)
[L4578]  CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4554]              assume msgsender_MSG != null;
[L4555]              Balance[this] := 0;
[L4556]              paused_Pausable[this] := false;
[L4578]  RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4579]  COND FALSE  !(revert)
[L4720]  RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L4721]  COND FALSE  !(revert)
[L4724]  CALL        call PausableToken_PausableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4661]              assume msgsender_MSG != null;
[L4662]              Balance[this] := 0;
[L4724]  RET         call PausableToken_PausableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4725]  COND FALSE  !(revert)
[L5103]  RET         call PausableToken_PausableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L5104]  COND FALSE  !(revert)
[L5107]  CALL        call USDollarHKex_USDollarHKex_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5013]              assume msgsender_MSG != null;
[L5014]              Balance[this] := 0;
[L5015]              name_USDollarHKex[this] := 749918206;
[L5016]              symbol_USDollarHKex[this] := 2047713833;
[L5017]              standard_USDollarHKex[this] := -1333876585;
[L5018]              decimals_USDollarHKex[this] := 18;
[L5019]              __var_22 := decimals_USDollarHKex[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5020]              INITIAL_SUPPLY_USDollarHKex[this] := nonlinearMul(25 * (100000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936), nonlinearPow(10, decimals_USDollarHKex[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5022]  CALL        call __var_23 := FreshRefGenerator__success();
[L3835]              havoc newRef;
[L3836]              assume Alloc[newRef] == false;
[L3837]              Alloc[newRef] := true;
[L3838]              assume newRef != null;
[L5022]  RET         call __var_23 := FreshRefGenerator__success();
[L5023]  COND FALSE  !(revert)
[L5026]              allocations_USDollarHKex[this] := __var_23;
[L5028]              alloc_allocations_USDollarHKex_lvl0[allocations_USDollarHKex[this]] := zeroRefboolArr();
[L5030]              totalSupply__BasicToken[this] := INITIAL_SUPPLY_USDollarHKex[this];
[L5031]              sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][msgsender_MSG];
[L5032]              balances_BasicToken[this][msgsender_MSG] := INITIAL_SUPPLY_USDollarHKex[this];
[L5033]              sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][msgsender_MSG];
[L5034]              assert { :EventEmitted "Transfer_USDollarHKex" } true;
[L5107]  RET         call USDollarHKex_USDollarHKex_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5108]  COND FALSE  !(revert)
[L2126]  RET         call USDollarHKex_USDollarHKex__success(this, msgsender_MSG, msgvalue_MSG);
[L2127]              assume !revert && gas >= 0;
[L8684]  RET         call USDollarHKex_USDollarHKex(this, msgsender_MSG, msgvalue_MSG);
[L8685]              assume !revert && gas >= 0;
[L8688]  CALL        call CorralChoice_USDollarHKex(this);
[L8483]              havoc msgsender_MSG;
[L8484]              havoc msgvalue_MSG;
[L8485]              havoc choice;
[L8486]              havoc __ret_0_owner;
[L8487]              havoc _newOwner_s133;
[L8488]              havoc __ret_0_totalSupply;
[L8489]              havoc _owner_s278;
[L8490]              havoc __ret_0_balanceOf;
[L8491]              havoc _to_s828;
[L8492]              havoc _value_s828;
[L8493]              havoc __ret_0_transfer;
[L8494]              havoc _owner_s459;
[L8495]              havoc _spender_s459;
[L8496]              havoc __ret_0_allowance;
[L8497]              havoc _from_s858;
[L8498]              havoc _to_s858;
[L8499]              havoc _value_s858;
[L8500]              havoc __ret_0_transferFrom;
[L8501]              havoc _spender_s680;
[L8502]              havoc _value_s680;
[L8503]              havoc __ret_0_approve;
[L8504]              havoc _spender_s698;
[L8505]              havoc _addedValue_s698;
[L8506]              havoc success_s698;
[L8507]              havoc _spender_s716;
[L8508]              havoc _subtractedValue_s716;
[L8509]              havoc success_s716;
[L8510]              havoc __ret_0_paused;
[L8511]              havoc __ret_0_name;
[L8512]              havoc __ret_0_symbol;
[L8513]              havoc __ret_0_standard;
[L8514]              havoc __ret_0_decimals;
[L8515]              havoc __ret_0_INITIAL_SUPPLY;
[L8516]              havoc arg1229_s0;
[L8517]              havoc arg1230_s0;
[L8518]              havoc __ret_0_allocations;
[L8519]              havoc _address_s1226;
[L8520]              havoc total_value_s1226;
[L8521]              havoc times_s1226;
[L8522]              havoc balanceRequires_s1226;
[L8523]              havoc __ret_0_setAllocation;
[L8524]              havoc tmpNow;
[L8525]              havoc gas;
[L8526]              assume gas > 4000000 && gas <= 8000000;
[L8527]              tmpNow := now;
[L8528]              havoc now;
[L8529]              assume now > tmpNow;
[L8530]              assume msgsender_MSG != null;
[L8531]              assume DType[msgsender_MSG] != SafeMath;
[L8532]              assume DType[msgsender_MSG] != Ownable;
[L8533]              assume DType[msgsender_MSG] != ERC20Basic;
[L8534]              assume DType[msgsender_MSG] != BasicToken;
[L8535]              assume DType[msgsender_MSG] != ERC20;
[L8536]              assume DType[msgsender_MSG] != StandardToken;
[L8537]              assume DType[msgsender_MSG] != Pausable;
[L8538]              assume DType[msgsender_MSG] != PausableToken;
[L8539]              assume DType[msgsender_MSG] != USDollarHKex;
[L8540]              Alloc[msgsender_MSG] := true;
[L8541]  COND FALSE  !(choice == 20)
[L8547]  COND FALSE  !(choice == 19)
[L8553]  COND FALSE  !(choice == 18)
[L8559]  COND FALSE  !(choice == 17)
[L8565]  COND TRUE   choice == 16
[L8566]              gas := gas - 21000;
[L8567]  COND TRUE   gas >= 0
[L8568]              assume _value_s828 >= 0 && _value_s828 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8569]              assume msgvalue_MSG == 0;
[L8570]  CALL        call __ret_0_transfer := transfer~address~uint256_USDollarHKex(this, msgsender_MSG, msgvalue_MSG, _to_s828, _value_s828);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG != _to_s828 && (_value_s828 > balances_BasicToken[this][msgsender_MSG] || balances_BasicToken[this][_to_s828] + _value_s828 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && _value_s828 >= 0) && _value_s828 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][_to_s828] >= 0) && balances_BasicToken[this][_to_s828] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][msgsender_MSG] >= 0) && balances_BasicToken[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_USDollarHKex0 := true;
[L2]                 call_transfer_USDollarHKex0 := false;
[L2]                 revert := revert_hold;
[L2170]              havoc __exception;
[L2171]              revert := false;
[L2172]  COND FALSE  !(__exception)
[L2204]  CALL        call __ret_0_ := transfer~address~uint256_USDollarHKex__success(this, msgsender_MSG, msgvalue_MSG, _to_s828, _value_s828);
[L5147]  CALL        call __var_24 := canSubAllocation~address~uint256_USDollarHKex__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, _value_s828);
[L5328]  COND FALSE  !(sub_value_s949 == 0)
[L5332]  COND FALSE  !(balances_BasicToken[this][sender_s949] < sub_value_s949)
[L5336]  COND TRUE   alloc_allocations_USDollarHKex_lvl0[allocations_USDollarHKex[this]][sender_s949] == false
[L5337]  CALL        call __var_30 := FreshRefGenerator__success();
[L3835]              havoc newRef;
[L3836]              assume Alloc[newRef] == false;
[L3837]              Alloc[newRef] := true;
[L3838]              assume newRef != null;
[L5337]  RET         call __var_30 := FreshRefGenerator__success();
[L5338]  COND FALSE  !(revert)
[L5341]              assume Length[M_Ref_Ref[allocations_USDollarHKex[this]][sender_s949]] == 0;
[L5342]              alloc_allocations_USDollarHKex_lvl0[allocations_USDollarHKex[this]][sender_s949] := true;
[L5343]              assume M_int_Ref[M_Ref_Ref[allocations_USDollarHKex[this]][sender_s949]] == zerointRefArr();
[L5344]              assume M_Ref_Ref[allocations_USDollarHKex[this]][sender_s949] == __var_30;
[L5345]              assume sum[M_Ref_Ref[allocations_USDollarHKex[this]][sender_s949]] == 0;
[L5347]  COND TRUE   Length[M_Ref_Ref[allocations_USDollarHKex[this]][sender_s949]] == 0
[L5348]              __ret_0_ := true;
[L5147]  RET         call __var_24 := canSubAllocation~address~uint256_USDollarHKex__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, _value_s828);
[L5148]  COND FALSE  !(revert)
[L5151]  COND FALSE  !(!__var_24)
[L5155]  CALL        call subAllocation~address_USDollarHKex__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5554]              total_lockamount_s1052 := 0;
[L5555]              total_unlockamount_s1052 := 0;
[L5556]  COND FALSE  !(alloc_allocations_USDollarHKex_lvl0[allocations_USDollarHKex[this]][sender_s1052] == false)
[L5567]              j_s1052 := 0;
[L5568]  COND FALSE  !(j_s1052 < Length[M_Ref_Ref[allocations_USDollarHKex[this]][sender_s1052]])
[L5633]  COND FALSE  !(total_unlockamount_s1052 > 0)
[L5636]  COND FALSE  !(alloc_allocations_USDollarHKex_lvl0[allocations_USDollarHKex[this]][sender_s1052] == false)
[L5647]  COND FALSE  !(total_lockamount_s1052 == 0 && Length[M_Ref_Ref[allocations_USDollarHKex[this]][sender_s1052]] > 0)
[L5155]  RET         call subAllocation~address_USDollarHKex__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5156]  COND FALSE  !(revert)
[L5159]  COND TRUE   DType[this] == USDollarHKex
[L5160]  CALL        call __var_25 := transfer~address~uint256_PausableToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s828, _value_s828);
[L4759]  CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7619]  COND FALSE  !(!!paused_Pausable[this])
[L4759]  RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4760]  COND FALSE  !(revert)
[L4763]  COND TRUE   DType[this] == USDollarHKex
[L4764]  CALL        call __var_11 := transfer~address~uint256_BasicToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s641, _value_s641);
[L4208]              __var_2 := null;
[L4209]  COND FALSE  !(!(_to_s266 != null))
[L4213]  COND FALSE  !(!(_value_s266 <= balances_BasicToken[this][msgsender_MSG]))
[L4217]  CALL        call __var_3 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][msgsender_MSG], _value_s266);
[L3928]              assert b_s68 <= a_s68;
[L3929]              __ret_0_ := (a_s68 - b_s68) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4217]  RET         call __var_3 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][msgsender_MSG], _value_s266);
[L4218]  COND FALSE  !(revert)
[L4221]              sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][msgsender_MSG];
[L4222]              balances_BasicToken[this][msgsender_MSG] := __var_3;
[L4223]              sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][msgsender_MSG];
[L4224]  CALL        call __var_4 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_to_s266], _value_s266);
[L3942]              c_s92 := (a_s92 + b_s92) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3943]              assert c_s92 >= a_s92;
[L3944]              c_s92 := c_s92;
[L4224]  RET         call __var_4 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_to_s266], _value_s266);
[L4225]  COND FALSE  !(revert)
[L4228]              sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][_to_s266];
[L4229]              balances_BasicToken[this][_to_s266] := __var_4;
[L4230]              sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][_to_s266];
[L4231]              assert { :EventEmitted "Transfer_BasicToken" } true;
[L4232]              __ret_0_ := true;
[L4764]  RET         call __var_11 := transfer~address~uint256_BasicToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s641, _value_s641);
[L4765]  COND FALSE  !(revert)
[L4776]              __ret_0_ := __var_11;
[L5160]  RET         call __var_25 := transfer~address~uint256_PausableToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s828, _value_s828);
[L5161]  COND FALSE  !(revert)
[L5167]              __ret_0_ := __var_25;
[L2204]  RET         call __ret_0_ := transfer~address~uint256_USDollarHKex__success(this, msgsender_MSG, msgvalue_MSG, _to_s828, _value_s828);
[L2205]              assume !revert && gas >= 0;
[L8570]  RET         call __ret_0_transfer := transfer~address~uint256_USDollarHKex(this, msgsender_MSG, msgvalue_MSG, _to_s828, _value_s828);
[L8688]  RET         call CorralChoice_USDollarHKex(this);

Loop:
[L8688]  CALL        call CorralChoice_USDollarHKex(this);
[L8483]              havoc msgsender_MSG;
[L8484]              havoc msgvalue_MSG;
[L8485]              havoc choice;
[L8486]              havoc __ret_0_owner;
[L8487]              havoc _newOwner_s133;
[L8488]              havoc __ret_0_totalSupply;
[L8489]              havoc _owner_s278;
[L8490]              havoc __ret_0_balanceOf;
[L8491]              havoc _to_s828;
[L8492]              havoc _value_s828;
[L8493]              havoc __ret_0_transfer;
[L8494]              havoc _owner_s459;
[L8495]              havoc _spender_s459;
[L8496]              havoc __ret_0_allowance;
[L8497]              havoc _from_s858;
[L8498]              havoc _to_s858;
[L8499]              havoc _value_s858;
[L8500]              havoc __ret_0_transferFrom;
[L8501]              havoc _spender_s680;
[L8502]              havoc _value_s680;
[L8503]              havoc __ret_0_approve;
[L8504]              havoc _spender_s698;
[L8505]              havoc _addedValue_s698;
[L8506]              havoc success_s698;
[L8507]              havoc _spender_s716;
[L8508]              havoc _subtractedValue_s716;
[L8509]              havoc success_s716;
[L8510]              havoc __ret_0_paused;
[L8511]              havoc __ret_0_name;
[L8512]              havoc __ret_0_symbol;
[L8513]              havoc __ret_0_standard;
[L8514]              havoc __ret_0_decimals;
[L8515]              havoc __ret_0_INITIAL_SUPPLY;
[L8516]              havoc arg1229_s0;
[L8517]              havoc arg1230_s0;
[L8518]              havoc __ret_0_allocations;
[L8519]              havoc _address_s1226;
[L8520]              havoc total_value_s1226;
[L8521]              havoc times_s1226;
[L8522]              havoc balanceRequires_s1226;
[L8523]              havoc __ret_0_setAllocation;
[L8524]              havoc tmpNow;
[L8525]              havoc gas;
[L8526]              assume gas > 4000000 && gas <= 8000000;
[L8527]              tmpNow := now;
[L8528]              havoc now;
[L8529]              assume now > tmpNow;
[L8530]              assume msgsender_MSG != null;
[L8531]              assume DType[msgsender_MSG] != SafeMath;
[L8532]              assume DType[msgsender_MSG] != Ownable;
[L8533]              assume DType[msgsender_MSG] != ERC20Basic;
[L8534]              assume DType[msgsender_MSG] != BasicToken;
[L8535]              assume DType[msgsender_MSG] != ERC20;
[L8536]              assume DType[msgsender_MSG] != StandardToken;
[L8537]              assume DType[msgsender_MSG] != Pausable;
[L8538]              assume DType[msgsender_MSG] != PausableToken;
[L8539]              assume DType[msgsender_MSG] != USDollarHKex;
[L8540]              Alloc[msgsender_MSG] := true;
[L8541]  COND FALSE  !(choice == 20)
[L8547]  COND FALSE  !(choice == 19)
[L8553]  COND FALSE  !(choice == 18)
[L8559]  COND FALSE  !(choice == 17)
[L8565]  COND TRUE   choice == 16
[L8566]              gas := gas - 21000;
[L8567]  COND TRUE   gas >= 0
[L8568]              assume _value_s828 >= 0 && _value_s828 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8569]              assume msgvalue_MSG == 0;
[L8570]  CALL        call __ret_0_transfer := transfer~address~uint256_USDollarHKex(this, msgsender_MSG, msgvalue_MSG, _to_s828, _value_s828);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG != _to_s828 && (_value_s828 > balances_BasicToken[this][msgsender_MSG] || balances_BasicToken[this][_to_s828] + _value_s828 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && _value_s828 >= 0) && _value_s828 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][_to_s828] >= 0) && balances_BasicToken[this][_to_s828] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][msgsender_MSG] >= 0) && balances_BasicToken[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_USDollarHKex0 := true;
[L2]                 call_transfer_USDollarHKex0 := false;
[L2]                 revert := revert_hold;
[L2170]              havoc __exception;
[L2171]              revert := false;
[L2172]  COND FALSE  !(__exception)
[L2204]  CALL        call __ret_0_ := transfer~address~uint256_USDollarHKex__success(this, msgsender_MSG, msgvalue_MSG, _to_s828, _value_s828);
[L5147]  CALL        call __var_24 := canSubAllocation~address~uint256_USDollarHKex__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, _value_s828);
[L5328]  COND FALSE  !(sub_value_s949 == 0)
[L5332]  COND FALSE  !(balances_BasicToken[this][sender_s949] < sub_value_s949)
[L5336]  COND FALSE  !(alloc_allocations_USDollarHKex_lvl0[allocations_USDollarHKex[this]][sender_s949] == false)
[L5347]  COND TRUE   Length[M_Ref_Ref[allocations_USDollarHKex[this]][sender_s949]] == 0
[L5348]              __ret_0_ := true;
[L5147]  RET         call __var_24 := canSubAllocation~address~uint256_USDollarHKex__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, _value_s828);
[L5148]  COND FALSE  !(revert)
[L5151]  COND FALSE  !(!__var_24)
[L5155]  CALL        call subAllocation~address_USDollarHKex__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5554]              total_lockamount_s1052 := 0;
[L5555]              total_unlockamount_s1052 := 0;
[L5556]  COND FALSE  !(alloc_allocations_USDollarHKex_lvl0[allocations_USDollarHKex[this]][sender_s1052] == false)
[L5567]              j_s1052 := 0;
[L5568]  COND FALSE  !(j_s1052 < Length[M_Ref_Ref[allocations_USDollarHKex[this]][sender_s1052]])
[L5633]  COND FALSE  !(total_unlockamount_s1052 > 0)
[L5636]  COND FALSE  !(alloc_allocations_USDollarHKex_lvl0[allocations_USDollarHKex[this]][sender_s1052] == false)
[L5647]  COND FALSE  !(total_lockamount_s1052 == 0 && Length[M_Ref_Ref[allocations_USDollarHKex[this]][sender_s1052]] > 0)
[L5155]  RET         call subAllocation~address_USDollarHKex__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5156]  COND FALSE  !(revert)
[L5159]  COND TRUE   DType[this] == USDollarHKex
[L5160]  CALL        call __var_25 := transfer~address~uint256_PausableToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s828, _value_s828);
[L4759]  CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7619]  COND FALSE  !(!!paused_Pausable[this])
[L4759]  RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4760]  COND FALSE  !(revert)
[L4763]  COND TRUE   DType[this] == USDollarHKex
[L4764]  CALL        call __var_11 := transfer~address~uint256_BasicToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s641, _value_s641);
[L4208]              __var_2 := null;
[L4209]  COND FALSE  !(!(_to_s266 != null))
[L4213]  COND FALSE  !(!(_value_s266 <= balances_BasicToken[this][msgsender_MSG]))
[L4217]  CALL        call __var_3 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][msgsender_MSG], _value_s266);
[L3928]              assert b_s68 <= a_s68;
[L3929]              __ret_0_ := (a_s68 - b_s68) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4217]  RET         call __var_3 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][msgsender_MSG], _value_s266);
[L4218]  COND FALSE  !(revert)
[L4221]              sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][msgsender_MSG];
[L4222]              balances_BasicToken[this][msgsender_MSG] := __var_3;
[L4223]              sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][msgsender_MSG];
[L4224]  CALL        call __var_4 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_to_s266], _value_s266);
[L3942]              c_s92 := (a_s92 + b_s92) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3943]              assert c_s92 >= a_s92;
[L3944]              c_s92 := c_s92;
[L4224]  RET         call __var_4 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_to_s266], _value_s266);
[L4225]  COND FALSE  !(revert)
[L4228]              sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][_to_s266];
[L4229]              balances_BasicToken[this][_to_s266] := __var_4;
[L4230]              sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][_to_s266];
[L4231]              assert { :EventEmitted "Transfer_BasicToken" } true;
[L4232]              __ret_0_ := true;
[L4764]  RET         call __var_11 := transfer~address~uint256_BasicToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s641, _value_s641);
[L4765]  COND FALSE  !(revert)
[L4776]              __ret_0_ := __var_11;
[L5160]  RET         call __var_25 := transfer~address~uint256_PausableToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s828, _value_s828);
[L5161]  COND FALSE  !(revert)
[L5167]              __ret_0_ := __var_25;
[L2204]  RET         call __ret_0_ := transfer~address~uint256_USDollarHKex__success(this, msgsender_MSG, msgvalue_MSG, _to_s828, _value_s828);
[L2205]              assume !revert && gas >= 0;
[L8570]  RET         call __ret_0_transfer := transfer~address~uint256_USDollarHKex(this, msgsender_MSG, msgvalue_MSG, _to_s828, _value_s828);
[L8688]  RET         call CorralChoice_USDollarHKex(this);

[2020-11-25 08:10:48,338 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 08:10:48,338 INFO  L82        PathProgramCache]: Analyzing trace with hash -1972094167, now seen corresponding path program 1 times
[2020-11-25 08:10:48,339 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 08:10:48,362 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 08:10:49,109 INFO  L134       CoverageAnalysis]: Checked inductivity of 963 backedges. 31 proven. 0 refuted. 0 times theorem prover too weak. 932 trivial. 0 not checked.
[2020-11-25 08:10:49,109 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 08:10:49,109 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [26] imperfect sequences [] total 26
[2020-11-25 08:10:49,110 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 08:10:49,110 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 27 interpolants.
[2020-11-25 08:10:49,110 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=72, Invalid=630, Unknown=0, NotChecked=0, Total=702
[2020-11-25 08:10:49,111 INFO  L87              Difference]: Start difference. First operand 5472 states and 6211 transitions. cyclomatic complexity: 763 Second operand 27 states.
[2020-11-25 08:10:56,418 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 08:10:56,418 INFO  L93              Difference]: Finished difference Result 5633 states and 6443 transitions.
[2020-11-25 08:10:56,418 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 30 states. 
[2020-11-25 08:10:56,418 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 5633 states and 6443 transitions.
[2020-11-25 08:10:56,427 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 08:10:56,440 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 5633 states to 5633 states and 6443 transitions.
[2020-11-25 08:10:56,440 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1111
[2020-11-25 08:10:56,440 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1111
[2020-11-25 08:10:56,440 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 5633 states and 6443 transitions.
[2020-11-25 08:10:56,444 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 08:10:56,444 INFO  L728         BuchiCegarLoop]: Abstraction has 5633 states and 6443 transitions.
[2020-11-25 08:10:56,448 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 5633 states and 6443 transitions.
[2020-11-25 08:10:56,483 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 5633 to 5449.
[2020-11-25 08:10:56,483 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 5449 states.
[2020-11-25 08:10:56,489 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 5449 states to 5449 states and 6191 transitions.
[2020-11-25 08:10:56,489 INFO  L751         BuchiCegarLoop]: Abstraction has 5449 states and 6191 transitions.
[2020-11-25 08:10:56,489 INFO  L631         BuchiCegarLoop]: Abstraction has 5449 states and 6191 transitions.
[2020-11-25 08:10:56,489 INFO  L445         BuchiCegarLoop]: ======== Iteration 6============
[2020-11-25 08:10:56,489 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 5449 states and 6191 transitions.
[2020-11-25 08:10:56,495 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 08:10:56,495 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 08:10:56,495 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 08:10:56,497 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [12, 12, 12, 12, 12, 12, 12, 12, 12, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 08:10:56,497 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transfer_USDollarHKex0 := false;
[L2]                 call_transfer_USDollarHKex0 := false;
[L2]     CALL        call main();
[L8678]              assume null == 0;
[L8679]  CALL        call this := FreshRefGenerator__success();
[L3835]              havoc newRef;
[L3836]              assume Alloc[newRef] == false;
[L3837]              Alloc[newRef] := true;
[L3838]              assume newRef != null;
[L8679]  RET         call this := FreshRefGenerator__success();
[L8680]              assume now >= 0;
[L8681]              assume DType[this] == USDollarHKex;
[L8682]              assume msgvalue_MSG == 0;
[L8683]              gas := gas - 53000;
[L8684]  CALL        call USDollarHKex_USDollarHKex(this, msgsender_MSG, msgvalue_MSG);
[L2092]              havoc __exception;
[L2093]              revert := false;
[L2094]  COND TRUE   __exception
[L2095]              __tmp__Balance := Balance;
[L2096]              __tmp__DType := DType;
[L2097]              __tmp__Alloc := Alloc;
[L2098]              __tmp__balance_ADDR := balance_ADDR;
[L2099]              __tmp__M_Ref_int := M_Ref_int;
[L2100]              __tmp__sum_balances0 := sum_balances0;
[L2101]              __tmp__alloc_allowed_StandardToken_lvl0 := alloc_allowed_StandardToken_lvl0;
[L2102]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L2103]              __tmp__sum_allowed1 := sum_allowed1;
[L2104]              __tmp__M_int_Ref := M_int_Ref;
[L2105]              __tmp__alloc_allocations_USDollarHKex_lvl0 := alloc_allocations_USDollarHKex_lvl0;
[L2106]              __tmp__sum := sum;
[L2107]              __tmp__M_int_int := M_int_int;
[L2108]              __tmp__Length := Length;
[L2109]              __tmp__now := now;
[L2110]              __tmp__owner_Ownable := owner_Ownable;
[L2111]              __tmp__balances_BasicToken := balances_BasicToken;
[L2112]              __tmp__totalSupply__BasicToken := totalSupply__BasicToken;
[L2113]              __tmp__allowed_StandardToken := allowed_StandardToken;
[L2114]              __tmp__paused_Pausable := paused_Pausable;
[L2115]              __tmp__name_USDollarHKex := name_USDollarHKex;
[L2116]              __tmp__symbol_USDollarHKex := symbol_USDollarHKex;
[L2117]              __tmp__standard_USDollarHKex := standard_USDollarHKex;
[L2118]              __tmp__decimals_USDollarHKex := decimals_USDollarHKex;
[L2119]              __tmp__INITIAL_SUPPLY_USDollarHKex := INITIAL_SUPPLY_USDollarHKex;
[L2120]              __tmp__allocations_USDollarHKex := allocations_USDollarHKex;
[L2121]              __tmp__releaseTime_USDollarHKex.TimeLock := releaseTime_USDollarHKex.TimeLock;
[L2122]              __tmp__balance_USDollarHKex.TimeLock := balance_USDollarHKex.TimeLock;
[L2123]  CALL        call USDollarHKex_USDollarHKex__fail(this, msgsender_MSG, msgvalue_MSG);
[L5041]  CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L4099]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4084]              assume msgsender_MSG != null;
[L4085]              __tmp__Balance[this] := 0;
[L4099]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4100]  COND FALSE  !(revert)
[L5041]  RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L5042]  COND FALSE  !(revert)
[L5045]  CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4266]  CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L4099]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4084]              assume msgsender_MSG != null;
[L4085]              __tmp__Balance[this] := 0;
[L4099]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4100]  COND FALSE  !(revert)
[L4266]  RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L4267]  COND FALSE  !(revert)
[L4270]  CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4251]              assume msgsender_MSG != null;
[L4252]              __tmp__Balance[this] := 0;
[L4270]  RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4271]  COND FALSE  !(revert)
[L5045]  RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L5046]  COND FALSE  !(revert)
[L5049]  CALL        call BasicToken_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L4137]  CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L4099]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4084]              assume msgsender_MSG != null;
[L4085]              __tmp__Balance[this] := 0;
[L4099]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4100]  COND FALSE  !(revert)
[L4137]  RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L4138]  COND FALSE  !(revert)
[L4141]  CALL        call BasicToken_BasicToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4116]              assume msgsender_MSG != null;
[L4117]              __tmp__Balance[this] := 0;
[L4118]              __tmp__balances_BasicToken[this] := zeroRefintArr();
[L4119]              __tmp__sum_balances0[this] := 0;
[L4120]              __tmp__totalSupply__BasicToken[this] := 0;
[L4141]  RET         call BasicToken_BasicToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4142]  COND FALSE  !(revert)
[L5049]  RET         call BasicToken_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L5050]  COND FALSE  !(revert)
[L5053]  CALL        call StandardToken_StandardToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L4310]  CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L4099]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4084]              assume msgsender_MSG != null;
[L4085]              __tmp__Balance[this] := 0;
[L4099]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4100]  COND FALSE  !(revert)
[L4310]  RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L4311]  COND FALSE  !(revert)
[L4314]  CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4266]  CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L4099]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4084]              assume msgsender_MSG != null;
[L4085]              __tmp__Balance[this] := 0;
[L4099]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4100]  COND FALSE  !(revert)
[L4266]  RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L4267]  COND FALSE  !(revert)
[L4270]  CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4251]              assume msgsender_MSG != null;
[L4252]              __tmp__Balance[this] := 0;
[L4270]  RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4271]  COND FALSE  !(revert)
[L4314]  RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4315]  COND FALSE  !(revert)
[L4318]  CALL        call BasicToken_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L4137]  CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L4099]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4084]              assume msgsender_MSG != null;
[L4085]              __tmp__Balance[this] := 0;
[L4099]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4100]  COND FALSE  !(revert)
[L4137]  RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L4138]  COND FALSE  !(revert)
[L4141]  CALL        call BasicToken_BasicToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4116]              assume msgsender_MSG != null;
[L4117]              __tmp__Balance[this] := 0;
[L4118]              __tmp__balances_BasicToken[this] := zeroRefintArr();
[L4119]              __tmp__sum_balances0[this] := 0;
[L4120]              __tmp__totalSupply__BasicToken[this] := 0;
[L4141]  RET         call BasicToken_BasicToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4142]  COND FALSE  !(revert)
[L4318]  RET         call BasicToken_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L4319]  COND FALSE  !(revert)
[L4322]  CALL        call StandardToken_StandardToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4291]              assume msgsender_MSG != null;
[L4292]              __tmp__Balance[this] := 0;
[L4293]              __tmp__allowed_StandardToken[this] := zeroRefRefintArr();
[L4294]              __tmp__sum_allowed1[this] := 0;
[L4322]  RET         call StandardToken_StandardToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4323]  COND FALSE  !(revert)
[L5053]  RET         call StandardToken_StandardToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L5054]  COND FALSE  !(revert)
[L5057]  CALL        call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L3970]  CALL        call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3951]              assume msgsender_MSG != null;
[L3952]              __tmp__Balance[this] := 0;
[L3953]              __tmp__owner_Ownable[this] := null;
[L3955]              __tmp__owner_Ownable[this] := msgsender_MSG;
[L3970]  RET         call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3971]  COND FALSE  !(revert)
[L5057]  RET         call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L5058]  COND FALSE  !(revert)
[L5061]  CALL        call Pausable_Pausable__fail(this, msgsender_MSG, msgvalue_MSG);
[L4562]  CALL        call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L3970]  CALL        call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3951]              assume msgsender_MSG != null;
[L3952]              __tmp__Balance[this] := 0;
[L3953]              __tmp__owner_Ownable[this] := null;
[L3955]              __tmp__owner_Ownable[this] := msgsender_MSG;
[L3970]  RET         call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3971]  COND FALSE  !(revert)
[L4562]  RET         call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L4563]  COND FALSE  !(revert)
[L4566]  CALL        call Pausable_Pausable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4545]              assume msgsender_MSG != null;
[L4546]              __tmp__Balance[this] := 0;
[L4547]              __tmp__paused_Pausable[this] := false;
[L4566]  RET         call Pausable_Pausable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4567]  COND FALSE  !(revert)
[L5061]  RET         call Pausable_Pausable__fail(this, msgsender_MSG, msgvalue_MSG);
[L5062]  COND FALSE  !(revert)
[L5065]  CALL        call PausableToken_PausableToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L4668]  CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L4099]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4084]              assume msgsender_MSG != null;
[L4085]              __tmp__Balance[this] := 0;
[L4099]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4100]  COND FALSE  !(revert)
[L4668]  RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L4669]  COND FALSE  !(revert)
[L4672]  CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4266]  CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L4099]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4084]              assume msgsender_MSG != null;
[L4085]              __tmp__Balance[this] := 0;
[L4099]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4100]  COND FALSE  !(revert)
[L4266]  RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L4267]  COND FALSE  !(revert)
[L4270]  CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4251]              assume msgsender_MSG != null;
[L4252]              __tmp__Balance[this] := 0;
[L4270]  RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4271]  COND FALSE  !(revert)
[L4672]  RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4673]  COND FALSE  !(revert)
[L4676]  CALL        call BasicToken_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L4137]  CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L4099]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4084]              assume msgsender_MSG != null;
[L4085]              __tmp__Balance[this] := 0;
[L4099]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4100]  COND FALSE  !(revert)
[L4137]  RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L4138]  COND FALSE  !(revert)
[L4141]  CALL        call BasicToken_BasicToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4116]              assume msgsender_MSG != null;
[L4117]              __tmp__Balance[this] := 0;
[L4118]              __tmp__balances_BasicToken[this] := zeroRefintArr();
[L4119]              __tmp__sum_balances0[this] := 0;
[L4120]              __tmp__totalSupply__BasicToken[this] := 0;
[L4141]  RET         call BasicToken_BasicToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4142]  COND FALSE  !(revert)
[L4676]  RET         call BasicToken_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L4677]  COND FALSE  !(revert)
[L4680]  CALL        call StandardToken_StandardToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L4310]  CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L4099]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4084]              assume msgsender_MSG != null;
[L4085]              __tmp__Balance[this] := 0;
[L4099]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4100]  COND FALSE  !(revert)
[L4310]  RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L4311]  COND FALSE  !(revert)
[L4314]  CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4266]  CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L4099]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4084]              assume msgsender_MSG != null;
[L4085]              __tmp__Balance[this] := 0;
[L4099]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4100]  COND FALSE  !(revert)
[L4266]  RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L4267]  COND FALSE  !(revert)
[L4270]  CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4251]              assume msgsender_MSG != null;
[L4252]              __tmp__Balance[this] := 0;
[L4270]  RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4271]  COND FALSE  !(revert)
[L4314]  RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4315]  COND FALSE  !(revert)
[L4318]  CALL        call BasicToken_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L4137]  CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L4099]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4084]              assume msgsender_MSG != null;
[L4085]              __tmp__Balance[this] := 0;
[L4099]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4100]  COND FALSE  !(revert)
[L4137]  RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L4138]  COND FALSE  !(revert)
[L4141]  CALL        call BasicToken_BasicToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4116]              assume msgsender_MSG != null;
[L4117]              __tmp__Balance[this] := 0;
[L4118]              __tmp__balances_BasicToken[this] := zeroRefintArr();
[L4119]              __tmp__sum_balances0[this] := 0;
[L4120]              __tmp__totalSupply__BasicToken[this] := 0;
[L4141]  RET         call BasicToken_BasicToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4142]  COND FALSE  !(revert)
[L4318]  RET         call BasicToken_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L4319]  COND FALSE  !(revert)
[L4322]  CALL        call StandardToken_StandardToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4291]              assume msgsender_MSG != null;
[L4292]              __tmp__Balance[this] := 0;
[L4293]              __tmp__allowed_StandardToken[this] := zeroRefRefintArr();
[L4294]              __tmp__sum_allowed1[this] := 0;
[L4322]  RET         call StandardToken_StandardToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4323]  COND FALSE  !(revert)
[L4680]  RET         call StandardToken_StandardToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L4681]  COND FALSE  !(revert)
[L4684]  CALL        call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L3970]  CALL        call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3951]              assume msgsender_MSG != null;
[L3952]              __tmp__Balance[this] := 0;
[L3953]              __tmp__owner_Ownable[this] := null;
[L3955]              __tmp__owner_Ownable[this] := msgsender_MSG;
[L3970]  RET         call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3971]  COND FALSE  !(revert)
[L4684]  RET         call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L4685]  COND FALSE  !(revert)
[L4688]  CALL        call Pausable_Pausable__fail(this, msgsender_MSG, msgvalue_MSG);
[L4562]  CALL        call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L3970]  CALL        call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3951]              assume msgsender_MSG != null;
[L3952]              __tmp__Balance[this] := 0;
[L3953]              __tmp__owner_Ownable[this] := null;
[L3955]              __tmp__owner_Ownable[this] := msgsender_MSG;
[L3970]  RET         call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3971]  COND FALSE  !(revert)
[L4562]  RET         call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L4563]  COND FALSE  !(revert)
[L4566]  CALL        call Pausable_Pausable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4545]              assume msgsender_MSG != null;
[L4546]              __tmp__Balance[this] := 0;
[L4547]              __tmp__paused_Pausable[this] := false;
[L4566]  RET         call Pausable_Pausable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4567]  COND FALSE  !(revert)
[L4688]  RET         call Pausable_Pausable__fail(this, msgsender_MSG, msgvalue_MSG);
[L4689]  COND FALSE  !(revert)
[L4692]  CALL        call PausableToken_PausableToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4653]              assume msgsender_MSG != null;
[L4654]              __tmp__Balance[this] := 0;
[L4692]  RET         call PausableToken_PausableToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4693]  COND FALSE  !(revert)
[L5065]  RET         call PausableToken_PausableToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L5066]  COND FALSE  !(revert)
[L5069]  CALL        call USDollarHKex_USDollarHKex_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4985]              assume msgsender_MSG != null;
[L4986]              __tmp__Balance[this] := 0;
[L4987]              __tmp__name_USDollarHKex[this] := 749918206;
[L4988]              __tmp__symbol_USDollarHKex[this] := 2047713833;
[L4989]              __tmp__standard_USDollarHKex[this] := -1333876585;
[L4990]              __tmp__decimals_USDollarHKex[this] := 18;
[L4991]              __var_22 := __tmp__decimals_USDollarHKex[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4992]              __tmp__INITIAL_SUPPLY_USDollarHKex[this] := nonlinearMul(25 * (100000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936), nonlinearPow(10, __tmp__decimals_USDollarHKex[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4994]  CALL        call __var_23 := FreshRefGenerator__fail();
[L3827]              havoc newRef;
[L3828]              assume __tmp__Alloc[newRef] == false;
[L3829]              __tmp__Alloc[newRef] := true;
[L3830]              assume newRef != null;
[L4994]  RET         call __var_23 := FreshRefGenerator__fail();
[L4995]  COND FALSE  !(revert)
[L4998]              __tmp__allocations_USDollarHKex[this] := __var_23;
[L5000]              __tmp__alloc_allocations_USDollarHKex_lvl0[__tmp__allocations_USDollarHKex[this]] := zeroRefboolArr();
[L5002]              __tmp__totalSupply__BasicToken[this] := __tmp__INITIAL_SUPPLY_USDollarHKex[this];
[L5003]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] - __tmp__balances_BasicToken[this][msgsender_MSG];
[L5004]              __tmp__balances_BasicToken[this][msgsender_MSG] := __tmp__INITIAL_SUPPLY_USDollarHKex[this];
[L5005]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] + __tmp__balances_BasicToken[this][msgsender_MSG];
[L5069]  RET         call USDollarHKex_USDollarHKex_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5070]  COND FALSE  !(revert)
[L2123]  RET         call USDollarHKex_USDollarHKex__fail(this, msgsender_MSG, msgvalue_MSG);
[L2124]              assume revert || gas < 0;
[L8684]  RET         call USDollarHKex_USDollarHKex(this, msgsender_MSG, msgvalue_MSG);
[L8685]              assume !revert && gas >= 0;
[L8688]  CALL        call CorralChoice_USDollarHKex(this);
[L8483]              havoc msgsender_MSG;
[L8484]              havoc msgvalue_MSG;
[L8485]              havoc choice;
[L8486]              havoc __ret_0_owner;
[L8487]              havoc _newOwner_s133;
[L8488]              havoc __ret_0_totalSupply;
[L8489]              havoc _owner_s278;
[L8490]              havoc __ret_0_balanceOf;
[L8491]              havoc _to_s828;
[L8492]              havoc _value_s828;
[L8493]              havoc __ret_0_transfer;
[L8494]              havoc _owner_s459;
[L8495]              havoc _spender_s459;
[L8496]              havoc __ret_0_allowance;
[L8497]              havoc _from_s858;
[L8498]              havoc _to_s858;
[L8499]              havoc _value_s858;
[L8500]              havoc __ret_0_transferFrom;
[L8501]              havoc _spender_s680;
[L8502]              havoc _value_s680;
[L8503]              havoc __ret_0_approve;
[L8504]              havoc _spender_s698;
[L8505]              havoc _addedValue_s698;
[L8506]              havoc success_s698;
[L8507]              havoc _spender_s716;
[L8508]              havoc _subtractedValue_s716;
[L8509]              havoc success_s716;
[L8510]              havoc __ret_0_paused;
[L8511]              havoc __ret_0_name;
[L8512]              havoc __ret_0_symbol;
[L8513]              havoc __ret_0_standard;
[L8514]              havoc __ret_0_decimals;
[L8515]              havoc __ret_0_INITIAL_SUPPLY;
[L8516]              havoc arg1229_s0;
[L8517]              havoc arg1230_s0;
[L8518]              havoc __ret_0_allocations;
[L8519]              havoc _address_s1226;
[L8520]              havoc total_value_s1226;
[L8521]              havoc times_s1226;
[L8522]              havoc balanceRequires_s1226;
[L8523]              havoc __ret_0_setAllocation;
[L8524]              havoc tmpNow;
[L8525]              havoc gas;
[L8526]              assume gas > 4000000 && gas <= 8000000;
[L8527]              tmpNow := now;
[L8528]              havoc now;
[L8529]              assume now > tmpNow;
[L8530]              assume msgsender_MSG != null;
[L8531]              assume DType[msgsender_MSG] != SafeMath;
[L8532]              assume DType[msgsender_MSG] != Ownable;
[L8533]              assume DType[msgsender_MSG] != ERC20Basic;
[L8534]              assume DType[msgsender_MSG] != BasicToken;
[L8535]              assume DType[msgsender_MSG] != ERC20;
[L8536]              assume DType[msgsender_MSG] != StandardToken;
[L8537]              assume DType[msgsender_MSG] != Pausable;
[L8538]              assume DType[msgsender_MSG] != PausableToken;
[L8539]              assume DType[msgsender_MSG] != USDollarHKex;
[L8540]              Alloc[msgsender_MSG] := true;
[L8541]  COND FALSE  !(choice == 20)
[L8547]  COND FALSE  !(choice == 19)
[L8553]  COND FALSE  !(choice == 18)
[L8559]  COND FALSE  !(choice == 17)
[L8565]  COND TRUE   choice == 16
[L8566]              gas := gas - 21000;
[L8567]  COND TRUE   gas >= 0
[L8568]              assume _value_s828 >= 0 && _value_s828 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8569]              assume msgvalue_MSG == 0;
[L8570]  CALL        call __ret_0_transfer := transfer~address~uint256_USDollarHKex(this, msgsender_MSG, msgvalue_MSG, _to_s828, _value_s828);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG != _to_s828 && (_value_s828 > balances_BasicToken[this][msgsender_MSG] || balances_BasicToken[this][_to_s828] + _value_s828 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && _value_s828 >= 0) && _value_s828 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][_to_s828] >= 0) && balances_BasicToken[this][_to_s828] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][msgsender_MSG] >= 0) && balances_BasicToken[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_USDollarHKex0 := true;
[L2]                 call_transfer_USDollarHKex0 := false;
[L2]                 revert := revert_hold;
[L2170]              havoc __exception;
[L2171]              revert := false;
[L2172]  COND FALSE  !(__exception)
[L2204]  CALL        call __ret_0_ := transfer~address~uint256_USDollarHKex__success(this, msgsender_MSG, msgvalue_MSG, _to_s828, _value_s828);
[L5147]  CALL        call __var_24 := canSubAllocation~address~uint256_USDollarHKex__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, _value_s828);
[L5328]  COND FALSE  !(sub_value_s949 == 0)
[L5332]  COND FALSE  !(balances_BasicToken[this][sender_s949] < sub_value_s949)
[L5336]  COND FALSE  !(alloc_allocations_USDollarHKex_lvl0[allocations_USDollarHKex[this]][sender_s949] == false)
[L5347]  COND TRUE   Length[M_Ref_Ref[allocations_USDollarHKex[this]][sender_s949]] == 0
[L5348]              __ret_0_ := true;
[L5147]  RET         call __var_24 := canSubAllocation~address~uint256_USDollarHKex__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, _value_s828);
[L5148]  COND FALSE  !(revert)
[L5151]  COND FALSE  !(!__var_24)
[L5155]  CALL        call subAllocation~address_USDollarHKex__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5554]              total_lockamount_s1052 := 0;
[L5555]              total_unlockamount_s1052 := 0;
[L5556]  COND FALSE  !(alloc_allocations_USDollarHKex_lvl0[allocations_USDollarHKex[this]][sender_s1052] == false)
[L5567]              j_s1052 := 0;
[L5568]  COND FALSE  !(j_s1052 < Length[M_Ref_Ref[allocations_USDollarHKex[this]][sender_s1052]])
[L5633]  COND FALSE  !(total_unlockamount_s1052 > 0)
[L5636]  COND FALSE  !(alloc_allocations_USDollarHKex_lvl0[allocations_USDollarHKex[this]][sender_s1052] == false)
[L5647]  COND FALSE  !(total_lockamount_s1052 == 0 && Length[M_Ref_Ref[allocations_USDollarHKex[this]][sender_s1052]] > 0)
[L5155]  RET         call subAllocation~address_USDollarHKex__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5156]  COND FALSE  !(revert)
[L5159]  COND TRUE   DType[this] == USDollarHKex
[L5160]  CALL        call __var_25 := transfer~address~uint256_PausableToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s828, _value_s828);
[L4759]  CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7619]  COND FALSE  !(!!paused_Pausable[this])
[L4759]  RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4760]  COND FALSE  !(revert)
[L4763]  COND TRUE   DType[this] == USDollarHKex
[L4764]  CALL        call __var_11 := transfer~address~uint256_BasicToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s641, _value_s641);
[L4208]              __var_2 := null;
[L4209]  COND FALSE  !(!(_to_s266 != null))
[L4213]  COND FALSE  !(!(_value_s266 <= balances_BasicToken[this][msgsender_MSG]))
[L4217]  CALL        call __var_3 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][msgsender_MSG], _value_s266);
[L3928]              assert b_s68 <= a_s68;
[L3929]              __ret_0_ := (a_s68 - b_s68) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4217]  RET         call __var_3 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][msgsender_MSG], _value_s266);
[L4218]  COND FALSE  !(revert)
[L4221]              sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][msgsender_MSG];
[L4222]              balances_BasicToken[this][msgsender_MSG] := __var_3;
[L4223]              sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][msgsender_MSG];
[L4224]  CALL        call __var_4 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_to_s266], _value_s266);
[L3942]              c_s92 := (a_s92 + b_s92) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3943]              assert c_s92 >= a_s92;
[L3944]              c_s92 := c_s92;
[L4224]  RET         call __var_4 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_to_s266], _value_s266);
[L4225]  COND FALSE  !(revert)
[L4228]              sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][_to_s266];
[L4229]              balances_BasicToken[this][_to_s266] := __var_4;
[L4230]              sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][_to_s266];
[L4231]              assert { :EventEmitted "Transfer_BasicToken" } true;
[L4232]              __ret_0_ := true;
[L4764]  RET         call __var_11 := transfer~address~uint256_BasicToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s641, _value_s641);
[L4765]  COND FALSE  !(revert)
[L4776]              __ret_0_ := __var_11;
[L5160]  RET         call __var_25 := transfer~address~uint256_PausableToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s828, _value_s828);
[L5161]  COND FALSE  !(revert)
[L5167]              __ret_0_ := __var_25;
[L2204]  RET         call __ret_0_ := transfer~address~uint256_USDollarHKex__success(this, msgsender_MSG, msgvalue_MSG, _to_s828, _value_s828);
[L2205]              assume !revert && gas >= 0;
[L8570]  RET         call __ret_0_transfer := transfer~address~uint256_USDollarHKex(this, msgsender_MSG, msgvalue_MSG, _to_s828, _value_s828);
[L8688]  RET         call CorralChoice_USDollarHKex(this);

Loop:
[L8688]  CALL        call CorralChoice_USDollarHKex(this);
[L8483]              havoc msgsender_MSG;
[L8484]              havoc msgvalue_MSG;
[L8485]              havoc choice;
[L8486]              havoc __ret_0_owner;
[L8487]              havoc _newOwner_s133;
[L8488]              havoc __ret_0_totalSupply;
[L8489]              havoc _owner_s278;
[L8490]              havoc __ret_0_balanceOf;
[L8491]              havoc _to_s828;
[L8492]              havoc _value_s828;
[L8493]              havoc __ret_0_transfer;
[L8494]              havoc _owner_s459;
[L8495]              havoc _spender_s459;
[L8496]              havoc __ret_0_allowance;
[L8497]              havoc _from_s858;
[L8498]              havoc _to_s858;
[L8499]              havoc _value_s858;
[L8500]              havoc __ret_0_transferFrom;
[L8501]              havoc _spender_s680;
[L8502]              havoc _value_s680;
[L8503]              havoc __ret_0_approve;
[L8504]              havoc _spender_s698;
[L8505]              havoc _addedValue_s698;
[L8506]              havoc success_s698;
[L8507]              havoc _spender_s716;
[L8508]              havoc _subtractedValue_s716;
[L8509]              havoc success_s716;
[L8510]              havoc __ret_0_paused;
[L8511]              havoc __ret_0_name;
[L8512]              havoc __ret_0_symbol;
[L8513]              havoc __ret_0_standard;
[L8514]              havoc __ret_0_decimals;
[L8515]              havoc __ret_0_INITIAL_SUPPLY;
[L8516]              havoc arg1229_s0;
[L8517]              havoc arg1230_s0;
[L8518]              havoc __ret_0_allocations;
[L8519]              havoc _address_s1226;
[L8520]              havoc total_value_s1226;
[L8521]              havoc times_s1226;
[L8522]              havoc balanceRequires_s1226;
[L8523]              havoc __ret_0_setAllocation;
[L8524]              havoc tmpNow;
[L8525]              havoc gas;
[L8526]              assume gas > 4000000 && gas <= 8000000;
[L8527]              tmpNow := now;
[L8528]              havoc now;
[L8529]              assume now > tmpNow;
[L8530]              assume msgsender_MSG != null;
[L8531]              assume DType[msgsender_MSG] != SafeMath;
[L8532]              assume DType[msgsender_MSG] != Ownable;
[L8533]              assume DType[msgsender_MSG] != ERC20Basic;
[L8534]              assume DType[msgsender_MSG] != BasicToken;
[L8535]              assume DType[msgsender_MSG] != ERC20;
[L8536]              assume DType[msgsender_MSG] != StandardToken;
[L8537]              assume DType[msgsender_MSG] != Pausable;
[L8538]              assume DType[msgsender_MSG] != PausableToken;
[L8539]              assume DType[msgsender_MSG] != USDollarHKex;
[L8540]              Alloc[msgsender_MSG] := true;
[L8541]  COND FALSE  !(choice == 20)
[L8547]  COND FALSE  !(choice == 19)
[L8553]  COND FALSE  !(choice == 18)
[L8559]  COND FALSE  !(choice == 17)
[L8565]  COND TRUE   choice == 16
[L8566]              gas := gas - 21000;
[L8567]  COND TRUE   gas >= 0
[L8568]              assume _value_s828 >= 0 && _value_s828 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8569]              assume msgvalue_MSG == 0;
[L8570]  CALL        call __ret_0_transfer := transfer~address~uint256_USDollarHKex(this, msgsender_MSG, msgvalue_MSG, _to_s828, _value_s828);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG != _to_s828 && (_value_s828 > balances_BasicToken[this][msgsender_MSG] || balances_BasicToken[this][_to_s828] + _value_s828 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && _value_s828 >= 0) && _value_s828 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][_to_s828] >= 0) && balances_BasicToken[this][_to_s828] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][msgsender_MSG] >= 0) && balances_BasicToken[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_USDollarHKex0 := true;
[L2]                 call_transfer_USDollarHKex0 := false;
[L2]                 revert := revert_hold;
[L2170]              havoc __exception;
[L2171]              revert := false;
[L2172]  COND FALSE  !(__exception)
[L2204]  CALL        call __ret_0_ := transfer~address~uint256_USDollarHKex__success(this, msgsender_MSG, msgvalue_MSG, _to_s828, _value_s828);
[L5147]  CALL        call __var_24 := canSubAllocation~address~uint256_USDollarHKex__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, _value_s828);
[L5328]  COND FALSE  !(sub_value_s949 == 0)
[L5332]  COND FALSE  !(balances_BasicToken[this][sender_s949] < sub_value_s949)
[L5336]  COND TRUE   alloc_allocations_USDollarHKex_lvl0[allocations_USDollarHKex[this]][sender_s949] == false
[L5337]  CALL        call __var_30 := FreshRefGenerator__success();
[L3835]              havoc newRef;
[L3836]              assume Alloc[newRef] == false;
[L3837]              Alloc[newRef] := true;
[L3838]              assume newRef != null;
[L5337]  RET         call __var_30 := FreshRefGenerator__success();
[L5338]  COND FALSE  !(revert)
[L5341]              assume Length[M_Ref_Ref[allocations_USDollarHKex[this]][sender_s949]] == 0;
[L5342]              alloc_allocations_USDollarHKex_lvl0[allocations_USDollarHKex[this]][sender_s949] := true;
[L5343]              assume M_int_Ref[M_Ref_Ref[allocations_USDollarHKex[this]][sender_s949]] == zerointRefArr();
[L5344]              assume M_Ref_Ref[allocations_USDollarHKex[this]][sender_s949] == __var_30;
[L5345]              assume sum[M_Ref_Ref[allocations_USDollarHKex[this]][sender_s949]] == 0;
[L5347]  COND TRUE   Length[M_Ref_Ref[allocations_USDollarHKex[this]][sender_s949]] == 0
[L5348]              __ret_0_ := true;
[L5147]  RET         call __var_24 := canSubAllocation~address~uint256_USDollarHKex__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, _value_s828);
[L5148]  COND FALSE  !(revert)
[L5151]  COND FALSE  !(!__var_24)
[L5155]  CALL        call subAllocation~address_USDollarHKex__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5554]              total_lockamount_s1052 := 0;
[L5555]              total_unlockamount_s1052 := 0;
[L5556]  COND FALSE  !(alloc_allocations_USDollarHKex_lvl0[allocations_USDollarHKex[this]][sender_s1052] == false)
[L5567]              j_s1052 := 0;
[L5568]  COND FALSE  !(j_s1052 < Length[M_Ref_Ref[allocations_USDollarHKex[this]][sender_s1052]])
[L5633]  COND FALSE  !(total_unlockamount_s1052 > 0)
[L5636]  COND FALSE  !(alloc_allocations_USDollarHKex_lvl0[allocations_USDollarHKex[this]][sender_s1052] == false)
[L5647]  COND FALSE  !(total_lockamount_s1052 == 0 && Length[M_Ref_Ref[allocations_USDollarHKex[this]][sender_s1052]] > 0)
[L5155]  RET         call subAllocation~address_USDollarHKex__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5156]  COND FALSE  !(revert)
[L5159]  COND TRUE   DType[this] == USDollarHKex
[L5160]  CALL        call __var_25 := transfer~address~uint256_PausableToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s828, _value_s828);
[L4759]  CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7619]  COND FALSE  !(!!paused_Pausable[this])
[L4759]  RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4760]  COND FALSE  !(revert)
[L4763]  COND TRUE   DType[this] == USDollarHKex
[L4764]  CALL        call __var_11 := transfer~address~uint256_BasicToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s641, _value_s641);
[L4208]              __var_2 := null;
[L4209]  COND FALSE  !(!(_to_s266 != null))
[L4213]  COND FALSE  !(!(_value_s266 <= balances_BasicToken[this][msgsender_MSG]))
[L4217]  CALL        call __var_3 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][msgsender_MSG], _value_s266);
[L3928]              assert b_s68 <= a_s68;
[L3929]              __ret_0_ := (a_s68 - b_s68) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4217]  RET         call __var_3 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][msgsender_MSG], _value_s266);
[L4218]  COND FALSE  !(revert)
[L4221]              sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][msgsender_MSG];
[L4222]              balances_BasicToken[this][msgsender_MSG] := __var_3;
[L4223]              sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][msgsender_MSG];
[L4224]  CALL        call __var_4 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_to_s266], _value_s266);
[L3942]              c_s92 := (a_s92 + b_s92) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3943]              assert c_s92 >= a_s92;
[L3944]              c_s92 := c_s92;
[L4224]  RET         call __var_4 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_to_s266], _value_s266);
[L4225]  COND FALSE  !(revert)
[L4228]              sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][_to_s266];
[L4229]              balances_BasicToken[this][_to_s266] := __var_4;
[L4230]              sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][_to_s266];
[L4231]              assert { :EventEmitted "Transfer_BasicToken" } true;
[L4232]              __ret_0_ := true;
[L4764]  RET         call __var_11 := transfer~address~uint256_BasicToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s641, _value_s641);
[L4765]  COND FALSE  !(revert)
[L4776]              __ret_0_ := __var_11;
[L5160]  RET         call __var_25 := transfer~address~uint256_PausableToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s828, _value_s828);
[L5161]  COND FALSE  !(revert)
[L5167]              __ret_0_ := __var_25;
[L2204]  RET         call __ret_0_ := transfer~address~uint256_USDollarHKex__success(this, msgsender_MSG, msgvalue_MSG, _to_s828, _value_s828);
[L2205]              assume !revert && gas >= 0;
[L8570]  RET         call __ret_0_transfer := transfer~address~uint256_USDollarHKex(this, msgsender_MSG, msgvalue_MSG, _to_s828, _value_s828);
[L8688]  RET         call CorralChoice_USDollarHKex(this);

[2020-11-25 08:10:56,502 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 08:10:56,502 INFO  L82        PathProgramCache]: Analyzing trace with hash -284921184, now seen corresponding path program 1 times
[2020-11-25 08:10:56,502 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 08:10:56,518 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 08:10:56,635 INFO  L134       CoverageAnalysis]: Checked inductivity of 957 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 957 trivial. 0 not checked.
[2020-11-25 08:10:56,635 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 08:10:56,635 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [4] imperfect sequences [] total 4
[2020-11-25 08:10:56,636 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 08:10:56,636 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-11-25 08:10:56,636 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=6, Invalid=6, Unknown=0, NotChecked=0, Total=12
[2020-11-25 08:10:56,636 INFO  L87              Difference]: Start difference. First operand 5449 states and 6191 transitions. cyclomatic complexity: 766 Second operand 4 states.
[2020-11-25 08:10:57,155 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 08:10:57,155 INFO  L93              Difference]: Finished difference Result 6690 states and 7717 transitions.
[2020-11-25 08:10:57,155 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 4 states. 
[2020-11-25 08:10:57,155 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 6690 states and 7717 transitions.
[2020-11-25 08:10:57,169 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 6
[2020-11-25 08:10:57,182 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 6690 states to 5896 states and 6807 transitions.
[2020-11-25 08:10:57,183 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1174
[2020-11-25 08:10:57,183 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1174
[2020-11-25 08:10:57,183 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 5896 states and 6807 transitions.
[2020-11-25 08:10:57,187 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 08:10:57,187 INFO  L728         BuchiCegarLoop]: Abstraction has 5896 states and 6807 transitions.
[2020-11-25 08:10:57,191 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 5896 states and 6807 transitions.
[2020-11-25 08:10:57,227 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 5896 to 5445.
[2020-11-25 08:10:57,227 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 5445 states.
[2020-11-25 08:10:57,233 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 5445 states to 5445 states and 6207 transitions.
[2020-11-25 08:10:57,233 INFO  L751         BuchiCegarLoop]: Abstraction has 5445 states and 6207 transitions.
[2020-11-25 08:10:57,233 INFO  L631         BuchiCegarLoop]: Abstraction has 5445 states and 6207 transitions.
[2020-11-25 08:10:57,233 INFO  L445         BuchiCegarLoop]: ======== Iteration 7============
[2020-11-25 08:10:57,233 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 5445 states and 6207 transitions.
[2020-11-25 08:10:57,238 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 08:10:57,238 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 08:10:57,238 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 08:10:57,240 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [12, 12, 12, 12, 12, 12, 12, 12, 12, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 08:10:57,240 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transfer_USDollarHKex0 := false;
[L2]                 call_transfer_USDollarHKex0 := false;
[L2]     CALL        call main();
[L8678]              assume null == 0;
[L8679]  CALL        call this := FreshRefGenerator__success();
[L3835]              havoc newRef;
[L3836]              assume Alloc[newRef] == false;
[L3837]              Alloc[newRef] := true;
[L3838]              assume newRef != null;
[L8679]  RET         call this := FreshRefGenerator__success();
[L8680]              assume now >= 0;
[L8681]              assume DType[this] == USDollarHKex;
[L8682]              assume msgvalue_MSG == 0;
[L8683]              gas := gas - 53000;
[L8684]  CALL        call USDollarHKex_USDollarHKex(this, msgsender_MSG, msgvalue_MSG);
[L2092]              havoc __exception;
[L2093]              revert := false;
[L2094]  COND FALSE  !(__exception)
[L2126]  CALL        call USDollarHKex_USDollarHKex__success(this, msgsender_MSG, msgvalue_MSG);
[L5079]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4107]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4092]              assume msgsender_MSG != null;
[L4093]              Balance[this] := 0;
[L4107]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4108]  COND FALSE  !(revert)
[L5079]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5080]  COND FALSE  !(revert)
[L5083]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4278]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4107]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4092]              assume msgsender_MSG != null;
[L4093]              Balance[this] := 0;
[L4107]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4108]  COND FALSE  !(revert)
[L4278]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4279]  COND FALSE  !(revert)
[L4282]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4259]              assume msgsender_MSG != null;
[L4260]              Balance[this] := 0;
[L4282]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4283]  COND FALSE  !(revert)
[L5083]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5084]  COND FALSE  !(revert)
[L5087]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4149]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4107]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4092]              assume msgsender_MSG != null;
[L4093]              Balance[this] := 0;
[L4107]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4108]  COND FALSE  !(revert)
[L4149]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4150]  COND FALSE  !(revert)
[L4153]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4127]              assume msgsender_MSG != null;
[L4128]              Balance[this] := 0;
[L4129]              balances_BasicToken[this] := zeroRefintArr();
[L4130]              sum_balances0[this] := 0;
[L4131]              totalSupply__BasicToken[this] := 0;
[L4153]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4154]  COND FALSE  !(revert)
[L5087]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L5088]  COND FALSE  !(revert)
[L5091]  CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4330]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4107]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4092]              assume msgsender_MSG != null;
[L4093]              Balance[this] := 0;
[L4107]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4108]  COND FALSE  !(revert)
[L4330]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4331]  COND FALSE  !(revert)
[L4334]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4278]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4107]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4092]              assume msgsender_MSG != null;
[L4093]              Balance[this] := 0;
[L4107]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4108]  COND FALSE  !(revert)
[L4278]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4279]  COND FALSE  !(revert)
[L4282]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4259]              assume msgsender_MSG != null;
[L4260]              Balance[this] := 0;
[L4282]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4283]  COND FALSE  !(revert)
[L4334]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4335]  COND FALSE  !(revert)
[L4338]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4149]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4107]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4092]              assume msgsender_MSG != null;
[L4093]              Balance[this] := 0;
[L4107]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4108]  COND FALSE  !(revert)
[L4149]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4150]  COND FALSE  !(revert)
[L4153]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4127]              assume msgsender_MSG != null;
[L4128]              Balance[this] := 0;
[L4129]              balances_BasicToken[this] := zeroRefintArr();
[L4130]              sum_balances0[this] := 0;
[L4131]              totalSupply__BasicToken[this] := 0;
[L4153]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4154]  COND FALSE  !(revert)
[L4338]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4339]  COND FALSE  !(revert)
[L4342]  CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4301]              assume msgsender_MSG != null;
[L4302]              Balance[this] := 0;
[L4303]              allowed_StandardToken[this] := zeroRefRefintArr();
[L4304]              sum_allowed1[this] := 0;
[L4342]  RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4343]  COND FALSE  !(revert)
[L5091]  RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L5092]  COND FALSE  !(revert)
[L5095]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3978]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3961]              assume msgsender_MSG != null;
[L3962]              Balance[this] := 0;
[L3963]              owner_Ownable[this] := null;
[L3965]              owner_Ownable[this] := msgsender_MSG;
[L3978]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3979]  COND FALSE  !(revert)
[L5095]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5096]  COND FALSE  !(revert)
[L5099]  CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3978]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3961]              assume msgsender_MSG != null;
[L3962]              Balance[this] := 0;
[L3963]              owner_Ownable[this] := null;
[L3965]              owner_Ownable[this] := msgsender_MSG;
[L3978]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3979]  COND FALSE  !(revert)
[L4574]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]  COND FALSE  !(revert)
[L4578]  CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4554]              assume msgsender_MSG != null;
[L4555]              Balance[this] := 0;
[L4556]              paused_Pausable[this] := false;
[L4578]  RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4579]  COND FALSE  !(revert)
[L5099]  RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L5100]  COND FALSE  !(revert)
[L5103]  CALL        call PausableToken_PausableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4700]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4107]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4092]              assume msgsender_MSG != null;
[L4093]              Balance[this] := 0;
[L4107]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4108]  COND FALSE  !(revert)
[L4700]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4701]  COND FALSE  !(revert)
[L4704]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4278]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4107]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4092]              assume msgsender_MSG != null;
[L4093]              Balance[this] := 0;
[L4107]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4108]  COND FALSE  !(revert)
[L4278]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4279]  COND FALSE  !(revert)
[L4282]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4259]              assume msgsender_MSG != null;
[L4260]              Balance[this] := 0;
[L4282]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4283]  COND FALSE  !(revert)
[L4704]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4705]  COND FALSE  !(revert)
[L4708]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4149]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4107]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4092]              assume msgsender_MSG != null;
[L4093]              Balance[this] := 0;
[L4107]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4108]  COND FALSE  !(revert)
[L4149]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4150]  COND FALSE  !(revert)
[L4153]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4127]              assume msgsender_MSG != null;
[L4128]              Balance[this] := 0;
[L4129]              balances_BasicToken[this] := zeroRefintArr();
[L4130]              sum_balances0[this] := 0;
[L4131]              totalSupply__BasicToken[this] := 0;
[L4153]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4154]  COND FALSE  !(revert)
[L4708]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4709]  COND FALSE  !(revert)
[L4712]  CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4330]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4107]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4092]              assume msgsender_MSG != null;
[L4093]              Balance[this] := 0;
[L4107]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4108]  COND FALSE  !(revert)
[L4330]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4331]  COND FALSE  !(revert)
[L4334]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4278]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4107]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4092]              assume msgsender_MSG != null;
[L4093]              Balance[this] := 0;
[L4107]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4108]  COND FALSE  !(revert)
[L4278]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4279]  COND FALSE  !(revert)
[L4282]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4259]              assume msgsender_MSG != null;
[L4260]              Balance[this] := 0;
[L4282]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4283]  COND FALSE  !(revert)
[L4334]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4335]  COND FALSE  !(revert)
[L4338]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4149]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4107]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4092]              assume msgsender_MSG != null;
[L4093]              Balance[this] := 0;
[L4107]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4108]  COND FALSE  !(revert)
[L4149]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4150]  COND FALSE  !(revert)
[L4153]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4127]              assume msgsender_MSG != null;
[L4128]              Balance[this] := 0;
[L4129]              balances_BasicToken[this] := zeroRefintArr();
[L4130]              sum_balances0[this] := 0;
[L4131]              totalSupply__BasicToken[this] := 0;
[L4153]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4154]  COND FALSE  !(revert)
[L4338]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4339]  COND FALSE  !(revert)
[L4342]  CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4301]              assume msgsender_MSG != null;
[L4302]              Balance[this] := 0;
[L4303]              allowed_StandardToken[this] := zeroRefRefintArr();
[L4304]              sum_allowed1[this] := 0;
[L4342]  RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4343]  COND FALSE  !(revert)
[L4712]  RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4713]  COND FALSE  !(revert)
[L4716]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3978]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3961]              assume msgsender_MSG != null;
[L3962]              Balance[this] := 0;
[L3963]              owner_Ownable[this] := null;
[L3965]              owner_Ownable[this] := msgsender_MSG;
[L3978]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3979]  COND FALSE  !(revert)
[L4716]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L4717]  COND FALSE  !(revert)
[L4720]  CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3978]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3961]              assume msgsender_MSG != null;
[L3962]              Balance[this] := 0;
[L3963]              owner_Ownable[this] := null;
[L3965]              owner_Ownable[this] := msgsender_MSG;
[L3978]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3979]  COND FALSE  !(revert)
[L4574]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]  COND FALSE  !(revert)
[L4578]  CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4554]              assume msgsender_MSG != null;
[L4555]              Balance[this] := 0;
[L4556]              paused_Pausable[this] := false;
[L4578]  RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4579]  COND FALSE  !(revert)
[L4720]  RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L4721]  COND FALSE  !(revert)
[L4724]  CALL        call PausableToken_PausableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4661]              assume msgsender_MSG != null;
[L4662]              Balance[this] := 0;
[L4724]  RET         call PausableToken_PausableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4725]  COND FALSE  !(revert)
[L5103]  RET         call PausableToken_PausableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L5104]  COND FALSE  !(revert)
[L5107]  CALL        call USDollarHKex_USDollarHKex_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5013]              assume msgsender_MSG != null;
[L5014]              Balance[this] := 0;
[L5015]              name_USDollarHKex[this] := 749918206;
[L5016]              symbol_USDollarHKex[this] := 2047713833;
[L5017]              standard_USDollarHKex[this] := -1333876585;
[L5018]              decimals_USDollarHKex[this] := 18;
[L5019]              __var_22 := decimals_USDollarHKex[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5020]              INITIAL_SUPPLY_USDollarHKex[this] := nonlinearMul(25 * (100000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936), nonlinearPow(10, decimals_USDollarHKex[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5022]  CALL        call __var_23 := FreshRefGenerator__success();
[L3835]              havoc newRef;
[L3836]              assume Alloc[newRef] == false;
[L3837]              Alloc[newRef] := true;
[L3838]              assume newRef != null;
[L5022]  RET         call __var_23 := FreshRefGenerator__success();
[L5023]  COND FALSE  !(revert)
[L5026]              allocations_USDollarHKex[this] := __var_23;
[L5028]              alloc_allocations_USDollarHKex_lvl0[allocations_USDollarHKex[this]] := zeroRefboolArr();
[L5030]              totalSupply__BasicToken[this] := INITIAL_SUPPLY_USDollarHKex[this];
[L5031]              sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][msgsender_MSG];
[L5032]              balances_BasicToken[this][msgsender_MSG] := INITIAL_SUPPLY_USDollarHKex[this];
[L5033]              sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][msgsender_MSG];
[L5034]              assert { :EventEmitted "Transfer_USDollarHKex" } true;
[L5107]  RET         call USDollarHKex_USDollarHKex_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5108]  COND FALSE  !(revert)
[L2126]  RET         call USDollarHKex_USDollarHKex__success(this, msgsender_MSG, msgvalue_MSG);
[L2127]              assume !revert && gas >= 0;
[L8684]  RET         call USDollarHKex_USDollarHKex(this, msgsender_MSG, msgvalue_MSG);
[L8685]              assume !revert && gas >= 0;
[L8688]  CALL        call CorralChoice_USDollarHKex(this);
[L8483]              havoc msgsender_MSG;
[L8484]              havoc msgvalue_MSG;
[L8485]              havoc choice;
[L8486]              havoc __ret_0_owner;
[L8487]              havoc _newOwner_s133;
[L8488]              havoc __ret_0_totalSupply;
[L8489]              havoc _owner_s278;
[L8490]              havoc __ret_0_balanceOf;
[L8491]              havoc _to_s828;
[L8492]              havoc _value_s828;
[L8493]              havoc __ret_0_transfer;
[L8494]              havoc _owner_s459;
[L8495]              havoc _spender_s459;
[L8496]              havoc __ret_0_allowance;
[L8497]              havoc _from_s858;
[L8498]              havoc _to_s858;
[L8499]              havoc _value_s858;
[L8500]              havoc __ret_0_transferFrom;
[L8501]              havoc _spender_s680;
[L8502]              havoc _value_s680;
[L8503]              havoc __ret_0_approve;
[L8504]              havoc _spender_s698;
[L8505]              havoc _addedValue_s698;
[L8506]              havoc success_s698;
[L8507]              havoc _spender_s716;
[L8508]              havoc _subtractedValue_s716;
[L8509]              havoc success_s716;
[L8510]              havoc __ret_0_paused;
[L8511]              havoc __ret_0_name;
[L8512]              havoc __ret_0_symbol;
[L8513]              havoc __ret_0_standard;
[L8514]              havoc __ret_0_decimals;
[L8515]              havoc __ret_0_INITIAL_SUPPLY;
[L8516]              havoc arg1229_s0;
[L8517]              havoc arg1230_s0;
[L8518]              havoc __ret_0_allocations;
[L8519]              havoc _address_s1226;
[L8520]              havoc total_value_s1226;
[L8521]              havoc times_s1226;
[L8522]              havoc balanceRequires_s1226;
[L8523]              havoc __ret_0_setAllocation;
[L8524]              havoc tmpNow;
[L8525]              havoc gas;
[L8526]              assume gas > 4000000 && gas <= 8000000;
[L8527]              tmpNow := now;
[L8528]              havoc now;
[L8529]              assume now > tmpNow;
[L8530]              assume msgsender_MSG != null;
[L8531]              assume DType[msgsender_MSG] != SafeMath;
[L8532]              assume DType[msgsender_MSG] != Ownable;
[L8533]              assume DType[msgsender_MSG] != ERC20Basic;
[L8534]              assume DType[msgsender_MSG] != BasicToken;
[L8535]              assume DType[msgsender_MSG] != ERC20;
[L8536]              assume DType[msgsender_MSG] != StandardToken;
[L8537]              assume DType[msgsender_MSG] != Pausable;
[L8538]              assume DType[msgsender_MSG] != PausableToken;
[L8539]              assume DType[msgsender_MSG] != USDollarHKex;
[L8540]              Alloc[msgsender_MSG] := true;
[L8541]  COND FALSE  !(choice == 20)
[L8547]  COND FALSE  !(choice == 19)
[L8553]  COND FALSE  !(choice == 18)
[L8559]  COND FALSE  !(choice == 17)
[L8565]  COND FALSE  !(choice == 16)
[L8572]  COND FALSE  !(choice == 15)
[L8578]  COND TRUE   choice == 14
[L8579]              gas := gas - 21000;
[L8580]  COND TRUE   gas >= 0
[L8581]              assume _value_s858 >= 0 && _value_s858 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8582]              assume msgvalue_MSG == 0;
[L8583]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_USDollarHKex(this, msgsender_MSG, msgvalue_MSG, _from_s858, _to_s858, _value_s858);
[L2250]              havoc __exception;
[L2251]              revert := false;
[L2252]  COND FALSE  !(__exception)
[L2284]  CALL        call __ret_0_ := transferFrom~address~address~uint256_USDollarHKex__success(this, msgsender_MSG, msgvalue_MSG, _from_s858, _to_s858, _value_s858);
[L5205]  CALL        call __var_27 := canSubAllocation~address~uint256_USDollarHKex__success(this, msgsender_MSG, msgvalue_MSG, _from_s858, _value_s858);
[L5328]  COND TRUE   sub_value_s949 == 0
[L5329]              __ret_0_ := false;
[L5205]  RET         call __var_27 := canSubAllocation~address~uint256_USDollarHKex__success(this, msgsender_MSG, msgvalue_MSG, _from_s858, _value_s858);
[L5206]  COND FALSE  !(revert)
[L5209]  COND FALSE  !(!__var_27)
[L5213]  CALL        call subAllocation~address_USDollarHKex__success(this, msgsender_MSG, msgvalue_MSG, _from_s858);
[L5554]              total_lockamount_s1052 := 0;
[L5555]              total_unlockamount_s1052 := 0;
[L5556]  COND FALSE  !(alloc_allocations_USDollarHKex_lvl0[allocations_USDollarHKex[this]][sender_s1052] == false)
[L5567]              j_s1052 := 0;
[L5568]  COND FALSE  !(j_s1052 < Length[M_Ref_Ref[allocations_USDollarHKex[this]][sender_s1052]])
[L5633]  COND FALSE  !(total_unlockamount_s1052 > 0)
[L5636]  COND FALSE  !(alloc_allocations_USDollarHKex_lvl0[allocations_USDollarHKex[this]][sender_s1052] == false)
[L5647]  COND TRUE   total_lockamount_s1052 == 0 && Length[M_Ref_Ref[allocations_USDollarHKex[this]][sender_s1052]] > 0
[L5648]  COND FALSE  !(alloc_allocations_USDollarHKex_lvl0[allocations_USDollarHKex[this]][sender_s1052] == false)
[L5659]  COND TRUE   alloc_allocations_USDollarHKex_lvl0[allocations_USDollarHKex[this]][sender_s1052] == false
[L5660]  CALL        call __var_41 := FreshRefGenerator__success();
[L3835]              havoc newRef;
[L3836]              assume Alloc[newRef] == false;
[L3837]              Alloc[newRef] := true;
[L3838]              assume newRef != null;
[L5660]  RET         call __var_41 := FreshRefGenerator__success();
[L5661]  COND FALSE  !(revert)
[L5664]              assume Length[M_Ref_Ref[allocations_USDollarHKex[this]][sender_s1052]] == 0;
[L5665]              alloc_allocations_USDollarHKex_lvl0[allocations_USDollarHKex[this]][sender_s1052] := true;
[L5666]              assume M_int_Ref[M_Ref_Ref[allocations_USDollarHKex[this]][sender_s1052]] == zerointRefArr();
[L5667]              assume M_Ref_Ref[allocations_USDollarHKex[this]][sender_s1052] == __var_41;
[L5668]              assume sum[M_Ref_Ref[allocations_USDollarHKex[this]][sender_s1052]] == 0;
[L5670]              Length[M_Ref_Ref[allocations_USDollarHKex[this]][sender_s1052]] := 0;
[L5213]  RET         call subAllocation~address_USDollarHKex__success(this, msgsender_MSG, msgvalue_MSG, _from_s858);
[L5214]  COND FALSE  !(revert)
[L5217]  COND TRUE   DType[this] == USDollarHKex
[L5218]  CALL        call __var_28 := transferFrom~address~address~uint256_PausableToken__success(this, msgsender_MSG, msgvalue_MSG, _from_s858, _to_s858, _value_s858);
[L4809]  CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7619]  COND FALSE  !(!!paused_Pausable[this])
[L4809]  RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4810]  COND FALSE  !(revert)
[L4813]  COND FALSE  !(DType[this] == USDollarHKex)
[L4818]  COND TRUE   DType[this] == PausableToken
[L4819]  CALL        call __var_13 := transferFrom~address~address~uint256_StandardToken__success(this, msgsender_MSG, msgvalue_MSG, _from_s662, _to_s662, _value_s662);
[L4398]              __var_5 := null;
[L4399]  COND FALSE  !(!(_to_s415 != null))
[L4403]  COND FALSE  !(!(_value_s415 <= balances_BasicToken[this][_from_s415]))
[L4407]  COND FALSE  !(!(_value_s415 <= allowed_StandardToken[this][_from_s415][msgsender_MSG]))
[L4411]  CALL        call __var_6 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_from_s415], _value_s415);
[L3928]              assert b_s68 <= a_s68;
[L3929]              __ret_0_ := (a_s68 - b_s68) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4411]  RET         call __var_6 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_from_s415], _value_s415);
[L4412]  COND FALSE  !(revert)
[L4415]              sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][_from_s415];
[L4416]              balances_BasicToken[this][_from_s415] := __var_6;
[L4417]              sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][_from_s415];
[L4418]  CALL        call __var_7 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_to_s415], _value_s415);
[L3942]              c_s92 := (a_s92 + b_s92) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3943]              assert c_s92 >= a_s92;
[L3944]              c_s92 := c_s92;
[L4418]  RET         call __var_7 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_to_s415], _value_s415);
[L4419]  COND FALSE  !(revert)
[L4422]              sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][_to_s415];
[L4423]              balances_BasicToken[this][_to_s415] := __var_7;
[L4424]              sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][_to_s415];
[L4425]  CALL        call __var_8 := sub~uint256~uint256_SafeMath__success(this, this, 0, allowed_StandardToken[this][_from_s415][msgsender_MSG], _value_s415);
[L3928]              assert b_s68 <= a_s68;
[L3929]              __ret_0_ := (a_s68 - b_s68) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4425]  RET         call __var_8 := sub~uint256~uint256_SafeMath__success(this, this, 0, allowed_StandardToken[this][_from_s415][msgsender_MSG], _value_s415);
[L4426]  COND FALSE  !(revert)
[L4429]              sum_allowed1[_from_s415] := sum_allowed1[_from_s415] - allowed_StandardToken[this][_from_s415][msgsender_MSG];
[L4430]              allowed_StandardToken[this][_from_s415][msgsender_MSG] := __var_8;
[L4431]              sum_allowed1[_from_s415] := sum_allowed1[_from_s415] + allowed_StandardToken[this][_from_s415][msgsender_MSG];
[L4432]              assert { :EventEmitted "Transfer_StandardToken" } true;
[L4433]              __ret_0_ := true;
[L4819]  RET         call __var_13 := transferFrom~address~address~uint256_StandardToken__success(this, msgsender_MSG, msgvalue_MSG, _from_s662, _to_s662, _value_s662);
[L4820]  COND FALSE  !(revert)
[L4826]              __ret_0_ := __var_13;
[L5218]  RET         call __var_28 := transferFrom~address~address~uint256_PausableToken__success(this, msgsender_MSG, msgvalue_MSG, _from_s858, _to_s858, _value_s858);
[L5219]  COND FALSE  !(revert)
[L5225]              __ret_0_ := __var_28;
[L2284]  RET         call __ret_0_ := transferFrom~address~address~uint256_USDollarHKex__success(this, msgsender_MSG, msgvalue_MSG, _from_s858, _to_s858, _value_s858);
[L2285]              assume !revert && gas >= 0;
[L8583]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_USDollarHKex(this, msgsender_MSG, msgvalue_MSG, _from_s858, _to_s858, _value_s858);
[L8688]  RET         call CorralChoice_USDollarHKex(this);
[L8688]  CALL        call CorralChoice_USDollarHKex(this);
[L8483]              havoc msgsender_MSG;
[L8484]              havoc msgvalue_MSG;
[L8485]              havoc choice;
[L8486]              havoc __ret_0_owner;
[L8487]              havoc _newOwner_s133;
[L8488]              havoc __ret_0_totalSupply;
[L8489]              havoc _owner_s278;
[L8490]              havoc __ret_0_balanceOf;
[L8491]              havoc _to_s828;
[L8492]              havoc _value_s828;
[L8493]              havoc __ret_0_transfer;
[L8494]              havoc _owner_s459;
[L8495]              havoc _spender_s459;
[L8496]              havoc __ret_0_allowance;
[L8497]              havoc _from_s858;
[L8498]              havoc _to_s858;
[L8499]              havoc _value_s858;
[L8500]              havoc __ret_0_transferFrom;
[L8501]              havoc _spender_s680;
[L8502]              havoc _value_s680;
[L8503]              havoc __ret_0_approve;
[L8504]              havoc _spender_s698;
[L8505]              havoc _addedValue_s698;
[L8506]              havoc success_s698;
[L8507]              havoc _spender_s716;
[L8508]              havoc _subtractedValue_s716;
[L8509]              havoc success_s716;
[L8510]              havoc __ret_0_paused;
[L8511]              havoc __ret_0_name;
[L8512]              havoc __ret_0_symbol;
[L8513]              havoc __ret_0_standard;
[L8514]              havoc __ret_0_decimals;
[L8515]              havoc __ret_0_INITIAL_SUPPLY;
[L8516]              havoc arg1229_s0;
[L8517]              havoc arg1230_s0;
[L8518]              havoc __ret_0_allocations;
[L8519]              havoc _address_s1226;
[L8520]              havoc total_value_s1226;
[L8521]              havoc times_s1226;
[L8522]              havoc balanceRequires_s1226;
[L8523]              havoc __ret_0_setAllocation;
[L8524]              havoc tmpNow;
[L8525]              havoc gas;
[L8526]              assume gas > 4000000 && gas <= 8000000;
[L8527]              tmpNow := now;
[L8528]              havoc now;
[L8529]              assume now > tmpNow;
[L8530]              assume msgsender_MSG != null;
[L8531]              assume DType[msgsender_MSG] != SafeMath;
[L8532]              assume DType[msgsender_MSG] != Ownable;
[L8533]              assume DType[msgsender_MSG] != ERC20Basic;
[L8534]              assume DType[msgsender_MSG] != BasicToken;
[L8535]              assume DType[msgsender_MSG] != ERC20;
[L8536]              assume DType[msgsender_MSG] != StandardToken;
[L8537]              assume DType[msgsender_MSG] != Pausable;
[L8538]              assume DType[msgsender_MSG] != PausableToken;
[L8539]              assume DType[msgsender_MSG] != USDollarHKex;
[L8540]              Alloc[msgsender_MSG] := true;
[L8541]  COND FALSE  !(choice == 20)
[L8547]  COND FALSE  !(choice == 19)
[L8553]  COND FALSE  !(choice == 18)
[L8559]  COND FALSE  !(choice == 17)
[L8565]  COND TRUE   choice == 16
[L8566]              gas := gas - 21000;
[L8567]  COND TRUE   gas >= 0
[L8568]              assume _value_s828 >= 0 && _value_s828 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8569]              assume msgvalue_MSG == 0;
[L8570]  CALL        call __ret_0_transfer := transfer~address~uint256_USDollarHKex(this, msgsender_MSG, msgvalue_MSG, _to_s828, _value_s828);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG != _to_s828 && (_value_s828 > balances_BasicToken[this][msgsender_MSG] || balances_BasicToken[this][_to_s828] + _value_s828 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && _value_s828 >= 0) && _value_s828 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][_to_s828] >= 0) && balances_BasicToken[this][_to_s828] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][msgsender_MSG] >= 0) && balances_BasicToken[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_USDollarHKex0 := true;
[L2]                 call_transfer_USDollarHKex0 := false;
[L2]                 revert := revert_hold;
[L2170]              havoc __exception;
[L2171]              revert := false;
[L2172]  COND FALSE  !(__exception)
[L2204]  CALL        call __ret_0_ := transfer~address~uint256_USDollarHKex__success(this, msgsender_MSG, msgvalue_MSG, _to_s828, _value_s828);
[L5147]  CALL        call __var_24 := canSubAllocation~address~uint256_USDollarHKex__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, _value_s828);
[L5328]  COND FALSE  !(sub_value_s949 == 0)
[L5332]  COND FALSE  !(balances_BasicToken[this][sender_s949] < sub_value_s949)
[L5336]  COND FALSE  !(alloc_allocations_USDollarHKex_lvl0[allocations_USDollarHKex[this]][sender_s949] == false)
[L5347]  COND TRUE   Length[M_Ref_Ref[allocations_USDollarHKex[this]][sender_s949]] == 0
[L5348]              __ret_0_ := true;
[L5147]  RET         call __var_24 := canSubAllocation~address~uint256_USDollarHKex__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, _value_s828);
[L5148]  COND FALSE  !(revert)
[L5151]  COND FALSE  !(!__var_24)
[L5155]  CALL        call subAllocation~address_USDollarHKex__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5554]              total_lockamount_s1052 := 0;
[L5555]              total_unlockamount_s1052 := 0;
[L5556]  COND FALSE  !(alloc_allocations_USDollarHKex_lvl0[allocations_USDollarHKex[this]][sender_s1052] == false)
[L5567]              j_s1052 := 0;
[L5568]  COND FALSE  !(j_s1052 < Length[M_Ref_Ref[allocations_USDollarHKex[this]][sender_s1052]])
[L5633]  COND FALSE  !(total_unlockamount_s1052 > 0)
[L5636]  COND FALSE  !(alloc_allocations_USDollarHKex_lvl0[allocations_USDollarHKex[this]][sender_s1052] == false)
[L5647]  COND FALSE  !(total_lockamount_s1052 == 0 && Length[M_Ref_Ref[allocations_USDollarHKex[this]][sender_s1052]] > 0)
[L5155]  RET         call subAllocation~address_USDollarHKex__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5156]  COND FALSE  !(revert)
[L5159]  COND TRUE   DType[this] == USDollarHKex
[L5160]  CALL        call __var_25 := transfer~address~uint256_PausableToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s828, _value_s828);
[L4759]  CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7619]  COND FALSE  !(!!paused_Pausable[this])
[L4759]  RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4760]  COND FALSE  !(revert)
[L4763]  COND TRUE   DType[this] == USDollarHKex
[L4764]  CALL        call __var_11 := transfer~address~uint256_BasicToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s641, _value_s641);
[L4208]              __var_2 := null;
[L4209]  COND FALSE  !(!(_to_s266 != null))
[L4213]  COND FALSE  !(!(_value_s266 <= balances_BasicToken[this][msgsender_MSG]))
[L4217]  CALL        call __var_3 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][msgsender_MSG], _value_s266);
[L3928]              assert b_s68 <= a_s68;
[L3929]              __ret_0_ := (a_s68 - b_s68) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4217]  RET         call __var_3 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][msgsender_MSG], _value_s266);
[L4218]  COND FALSE  !(revert)
[L4221]              sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][msgsender_MSG];
[L4222]              balances_BasicToken[this][msgsender_MSG] := __var_3;
[L4223]              sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][msgsender_MSG];
[L4224]  CALL        call __var_4 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_to_s266], _value_s266);
[L3942]              c_s92 := (a_s92 + b_s92) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3943]              assert c_s92 >= a_s92;
[L3944]              c_s92 := c_s92;
[L4224]  RET         call __var_4 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_to_s266], _value_s266);
[L4225]  COND FALSE  !(revert)
[L4228]              sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][_to_s266];
[L4229]              balances_BasicToken[this][_to_s266] := __var_4;
[L4230]              sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][_to_s266];
[L4231]              assert { :EventEmitted "Transfer_BasicToken" } true;
[L4232]              __ret_0_ := true;
[L4764]  RET         call __var_11 := transfer~address~uint256_BasicToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s641, _value_s641);
[L4765]  COND FALSE  !(revert)
[L4776]              __ret_0_ := __var_11;
[L5160]  RET         call __var_25 := transfer~address~uint256_PausableToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s828, _value_s828);
[L5161]  COND FALSE  !(revert)
[L5167]              __ret_0_ := __var_25;
[L2204]  RET         call __ret_0_ := transfer~address~uint256_USDollarHKex__success(this, msgsender_MSG, msgvalue_MSG, _to_s828, _value_s828);
[L2205]              assume !revert && gas >= 0;
[L8570]  RET         call __ret_0_transfer := transfer~address~uint256_USDollarHKex(this, msgsender_MSG, msgvalue_MSG, _to_s828, _value_s828);
[L8688]  RET         call CorralChoice_USDollarHKex(this);

Loop:
[L8688]  CALL        call CorralChoice_USDollarHKex(this);
[L8483]              havoc msgsender_MSG;
[L8484]              havoc msgvalue_MSG;
[L8485]              havoc choice;
[L8486]              havoc __ret_0_owner;
[L8487]              havoc _newOwner_s133;
[L8488]              havoc __ret_0_totalSupply;
[L8489]              havoc _owner_s278;
[L8490]              havoc __ret_0_balanceOf;
[L8491]              havoc _to_s828;
[L8492]              havoc _value_s828;
[L8493]              havoc __ret_0_transfer;
[L8494]              havoc _owner_s459;
[L8495]              havoc _spender_s459;
[L8496]              havoc __ret_0_allowance;
[L8497]              havoc _from_s858;
[L8498]              havoc _to_s858;
[L8499]              havoc _value_s858;
[L8500]              havoc __ret_0_transferFrom;
[L8501]              havoc _spender_s680;
[L8502]              havoc _value_s680;
[L8503]              havoc __ret_0_approve;
[L8504]              havoc _spender_s698;
[L8505]              havoc _addedValue_s698;
[L8506]              havoc success_s698;
[L8507]              havoc _spender_s716;
[L8508]              havoc _subtractedValue_s716;
[L8509]              havoc success_s716;
[L8510]              havoc __ret_0_paused;
[L8511]              havoc __ret_0_name;
[L8512]              havoc __ret_0_symbol;
[L8513]              havoc __ret_0_standard;
[L8514]              havoc __ret_0_decimals;
[L8515]              havoc __ret_0_INITIAL_SUPPLY;
[L8516]              havoc arg1229_s0;
[L8517]              havoc arg1230_s0;
[L8518]              havoc __ret_0_allocations;
[L8519]              havoc _address_s1226;
[L8520]              havoc total_value_s1226;
[L8521]              havoc times_s1226;
[L8522]              havoc balanceRequires_s1226;
[L8523]              havoc __ret_0_setAllocation;
[L8524]              havoc tmpNow;
[L8525]              havoc gas;
[L8526]              assume gas > 4000000 && gas <= 8000000;
[L8527]              tmpNow := now;
[L8528]              havoc now;
[L8529]              assume now > tmpNow;
[L8530]              assume msgsender_MSG != null;
[L8531]              assume DType[msgsender_MSG] != SafeMath;
[L8532]              assume DType[msgsender_MSG] != Ownable;
[L8533]              assume DType[msgsender_MSG] != ERC20Basic;
[L8534]              assume DType[msgsender_MSG] != BasicToken;
[L8535]              assume DType[msgsender_MSG] != ERC20;
[L8536]              assume DType[msgsender_MSG] != StandardToken;
[L8537]              assume DType[msgsender_MSG] != Pausable;
[L8538]              assume DType[msgsender_MSG] != PausableToken;
[L8539]              assume DType[msgsender_MSG] != USDollarHKex;
[L8540]              Alloc[msgsender_MSG] := true;
[L8541]  COND FALSE  !(choice == 20)
[L8547]  COND FALSE  !(choice == 19)
[L8553]  COND FALSE  !(choice == 18)
[L8559]  COND FALSE  !(choice == 17)
[L8565]  COND TRUE   choice == 16
[L8566]              gas := gas - 21000;
[L8567]  COND TRUE   gas >= 0
[L8568]              assume _value_s828 >= 0 && _value_s828 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8569]              assume msgvalue_MSG == 0;
[L8570]  CALL        call __ret_0_transfer := transfer~address~uint256_USDollarHKex(this, msgsender_MSG, msgvalue_MSG, _to_s828, _value_s828);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG != _to_s828 && (_value_s828 > balances_BasicToken[this][msgsender_MSG] || balances_BasicToken[this][_to_s828] + _value_s828 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && _value_s828 >= 0) && _value_s828 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][_to_s828] >= 0) && balances_BasicToken[this][_to_s828] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][msgsender_MSG] >= 0) && balances_BasicToken[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_USDollarHKex0 := true;
[L2]                 call_transfer_USDollarHKex0 := false;
[L2]                 revert := revert_hold;
[L2170]              havoc __exception;
[L2171]              revert := false;
[L2172]  COND FALSE  !(__exception)
[L2204]  CALL        call __ret_0_ := transfer~address~uint256_USDollarHKex__success(this, msgsender_MSG, msgvalue_MSG, _to_s828, _value_s828);
[L5147]  CALL        call __var_24 := canSubAllocation~address~uint256_USDollarHKex__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, _value_s828);
[L5328]  COND FALSE  !(sub_value_s949 == 0)
[L5332]  COND FALSE  !(balances_BasicToken[this][sender_s949] < sub_value_s949)
[L5336]  COND TRUE   alloc_allocations_USDollarHKex_lvl0[allocations_USDollarHKex[this]][sender_s949] == false
[L5337]  CALL        call __var_30 := FreshRefGenerator__success();
[L3835]              havoc newRef;
[L3836]              assume Alloc[newRef] == false;
[L3837]              Alloc[newRef] := true;
[L3838]              assume newRef != null;
[L5337]  RET         call __var_30 := FreshRefGenerator__success();
[L5338]  COND FALSE  !(revert)
[L5341]              assume Length[M_Ref_Ref[allocations_USDollarHKex[this]][sender_s949]] == 0;
[L5342]              alloc_allocations_USDollarHKex_lvl0[allocations_USDollarHKex[this]][sender_s949] := true;
[L5343]              assume M_int_Ref[M_Ref_Ref[allocations_USDollarHKex[this]][sender_s949]] == zerointRefArr();
[L5344]              assume M_Ref_Ref[allocations_USDollarHKex[this]][sender_s949] == __var_30;
[L5345]              assume sum[M_Ref_Ref[allocations_USDollarHKex[this]][sender_s949]] == 0;
[L5347]  COND TRUE   Length[M_Ref_Ref[allocations_USDollarHKex[this]][sender_s949]] == 0
[L5348]              __ret_0_ := true;
[L5147]  RET         call __var_24 := canSubAllocation~address~uint256_USDollarHKex__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, _value_s828);
[L5148]  COND FALSE  !(revert)
[L5151]  COND FALSE  !(!__var_24)
[L5155]  CALL        call subAllocation~address_USDollarHKex__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5554]              total_lockamount_s1052 := 0;
[L5555]              total_unlockamount_s1052 := 0;
[L5556]  COND FALSE  !(alloc_allocations_USDollarHKex_lvl0[allocations_USDollarHKex[this]][sender_s1052] == false)
[L5567]              j_s1052 := 0;
[L5568]  COND FALSE  !(j_s1052 < Length[M_Ref_Ref[allocations_USDollarHKex[this]][sender_s1052]])
[L5633]  COND FALSE  !(total_unlockamount_s1052 > 0)
[L5636]  COND FALSE  !(alloc_allocations_USDollarHKex_lvl0[allocations_USDollarHKex[this]][sender_s1052] == false)
[L5647]  COND FALSE  !(total_lockamount_s1052 == 0 && Length[M_Ref_Ref[allocations_USDollarHKex[this]][sender_s1052]] > 0)
[L5155]  RET         call subAllocation~address_USDollarHKex__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5156]  COND FALSE  !(revert)
[L5159]  COND TRUE   DType[this] == USDollarHKex
[L5160]  CALL        call __var_25 := transfer~address~uint256_PausableToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s828, _value_s828);
[L4759]  CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7619]  COND FALSE  !(!!paused_Pausable[this])
[L4759]  RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4760]  COND FALSE  !(revert)
[L4763]  COND TRUE   DType[this] == USDollarHKex
[L4764]  CALL        call __var_11 := transfer~address~uint256_BasicToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s641, _value_s641);
[L4208]              __var_2 := null;
[L4209]  COND FALSE  !(!(_to_s266 != null))
[L4213]  COND FALSE  !(!(_value_s266 <= balances_BasicToken[this][msgsender_MSG]))
[L4217]  CALL        call __var_3 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][msgsender_MSG], _value_s266);
[L3928]              assert b_s68 <= a_s68;
[L3929]              __ret_0_ := (a_s68 - b_s68) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4217]  RET         call __var_3 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][msgsender_MSG], _value_s266);
[L4218]  COND FALSE  !(revert)
[L4221]              sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][msgsender_MSG];
[L4222]              balances_BasicToken[this][msgsender_MSG] := __var_3;
[L4223]              sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][msgsender_MSG];
[L4224]  CALL        call __var_4 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_to_s266], _value_s266);
[L3942]              c_s92 := (a_s92 + b_s92) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3943]              assert c_s92 >= a_s92;
[L3944]              c_s92 := c_s92;
[L4224]  RET         call __var_4 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_to_s266], _value_s266);
[L4225]  COND FALSE  !(revert)
[L4228]              sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][_to_s266];
[L4229]              balances_BasicToken[this][_to_s266] := __var_4;
[L4230]              sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][_to_s266];
[L4231]              assert { :EventEmitted "Transfer_BasicToken" } true;
[L4232]              __ret_0_ := true;
[L4764]  RET         call __var_11 := transfer~address~uint256_BasicToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s641, _value_s641);
[L4765]  COND FALSE  !(revert)
[L4776]              __ret_0_ := __var_11;
[L5160]  RET         call __var_25 := transfer~address~uint256_PausableToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s828, _value_s828);
[L5161]  COND FALSE  !(revert)
[L5167]              __ret_0_ := __var_25;
[L2204]  RET         call __ret_0_ := transfer~address~uint256_USDollarHKex__success(this, msgsender_MSG, msgvalue_MSG, _to_s828, _value_s828);
[L2205]              assume !revert && gas >= 0;
[L8570]  RET         call __ret_0_transfer := transfer~address~uint256_USDollarHKex(this, msgsender_MSG, msgvalue_MSG, _to_s828, _value_s828);
[L8688]  RET         call CorralChoice_USDollarHKex(this);

[2020-11-25 08:10:57,245 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 08:10:57,246 INFO  L82        PathProgramCache]: Analyzing trace with hash -1425780964, now seen corresponding path program 1 times
[2020-11-25 08:10:57,246 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 08:10:57,266 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 08:10:57,463 INFO  L134       CoverageAnalysis]: Checked inductivity of 1044 backedges. 1 proven. 0 refuted. 0 times theorem prover too weak. 1043 trivial. 0 not checked.
[2020-11-25 08:10:57,463 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 08:10:57,463 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [3] imperfect sequences [] total 3
[2020-11-25 08:10:57,463 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 08:10:57,464 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-11-25 08:10:57,464 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-11-25 08:10:57,464 INFO  L87              Difference]: Start difference. First operand 5445 states and 6207 transitions. cyclomatic complexity: 786 Second operand 3 states.
[2020-11-25 08:10:57,516 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 08:10:57,516 INFO  L93              Difference]: Finished difference Result 5319 states and 6046 transitions.
[2020-11-25 08:10:57,516 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-11-25 08:10:57,516 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 5319 states and 6046 transitions.
[2020-11-25 08:10:57,524 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 08:10:57,533 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 5319 states to 5319 states and 6046 transitions.
[2020-11-25 08:10:57,533 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1056
[2020-11-25 08:10:57,534 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1056
[2020-11-25 08:10:57,534 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 5319 states and 6046 transitions.
[2020-11-25 08:10:57,537 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 08:10:57,537 INFO  L728         BuchiCegarLoop]: Abstraction has 5319 states and 6046 transitions.
[2020-11-25 08:10:57,541 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 5319 states and 6046 transitions.
[2020-11-25 08:10:57,568 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 5319 to 5319.
[2020-11-25 08:10:57,568 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 5319 states.
[2020-11-25 08:10:57,574 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 5319 states to 5319 states and 6046 transitions.
[2020-11-25 08:10:57,574 INFO  L751         BuchiCegarLoop]: Abstraction has 5319 states and 6046 transitions.
[2020-11-25 08:10:57,574 INFO  L631         BuchiCegarLoop]: Abstraction has 5319 states and 6046 transitions.
[2020-11-25 08:10:57,574 INFO  L445         BuchiCegarLoop]: ======== Iteration 8============
[2020-11-25 08:10:57,574 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 5319 states and 6046 transitions.
[2020-11-25 08:10:57,579 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 08:10:57,579 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 08:10:57,579 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 08:10:57,581 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [12, 12, 12, 12, 12, 12, 12, 12, 12, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 08:10:57,581 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transfer_USDollarHKex0 := false;
[L2]                 call_transfer_USDollarHKex0 := false;
[L2]     CALL        call main();
[L8678]              assume null == 0;
[L8679]  CALL        call this := FreshRefGenerator__success();
[L3835]              havoc newRef;
[L3836]              assume Alloc[newRef] == false;
[L3837]              Alloc[newRef] := true;
[L3838]              assume newRef != null;
[L8679]  RET         call this := FreshRefGenerator__success();
[L8680]              assume now >= 0;
[L8681]              assume DType[this] == USDollarHKex;
[L8682]              assume msgvalue_MSG == 0;
[L8683]              gas := gas - 53000;
[L8684]  CALL        call USDollarHKex_USDollarHKex(this, msgsender_MSG, msgvalue_MSG);
[L2092]              havoc __exception;
[L2093]              revert := false;
[L2094]  COND FALSE  !(__exception)
[L2126]  CALL        call USDollarHKex_USDollarHKex__success(this, msgsender_MSG, msgvalue_MSG);
[L5079]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4107]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4092]              assume msgsender_MSG != null;
[L4093]              Balance[this] := 0;
[L4107]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4108]  COND FALSE  !(revert)
[L5079]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5080]  COND FALSE  !(revert)
[L5083]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4278]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4107]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4092]              assume msgsender_MSG != null;
[L4093]              Balance[this] := 0;
[L4107]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4108]  COND FALSE  !(revert)
[L4278]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4279]  COND FALSE  !(revert)
[L4282]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4259]              assume msgsender_MSG != null;
[L4260]              Balance[this] := 0;
[L4282]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4283]  COND FALSE  !(revert)
[L5083]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5084]  COND FALSE  !(revert)
[L5087]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4149]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4107]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4092]              assume msgsender_MSG != null;
[L4093]              Balance[this] := 0;
[L4107]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4108]  COND FALSE  !(revert)
[L4149]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4150]  COND FALSE  !(revert)
[L4153]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4127]              assume msgsender_MSG != null;
[L4128]              Balance[this] := 0;
[L4129]              balances_BasicToken[this] := zeroRefintArr();
[L4130]              sum_balances0[this] := 0;
[L4131]              totalSupply__BasicToken[this] := 0;
[L4153]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4154]  COND FALSE  !(revert)
[L5087]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L5088]  COND FALSE  !(revert)
[L5091]  CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4330]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4107]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4092]              assume msgsender_MSG != null;
[L4093]              Balance[this] := 0;
[L4107]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4108]  COND FALSE  !(revert)
[L4330]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4331]  COND FALSE  !(revert)
[L4334]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4278]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4107]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4092]              assume msgsender_MSG != null;
[L4093]              Balance[this] := 0;
[L4107]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4108]  COND FALSE  !(revert)
[L4278]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4279]  COND FALSE  !(revert)
[L4282]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4259]              assume msgsender_MSG != null;
[L4260]              Balance[this] := 0;
[L4282]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4283]  COND FALSE  !(revert)
[L4334]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4335]  COND FALSE  !(revert)
[L4338]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4149]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4107]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4092]              assume msgsender_MSG != null;
[L4093]              Balance[this] := 0;
[L4107]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4108]  COND FALSE  !(revert)
[L4149]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4150]  COND FALSE  !(revert)
[L4153]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4127]              assume msgsender_MSG != null;
[L4128]              Balance[this] := 0;
[L4129]              balances_BasicToken[this] := zeroRefintArr();
[L4130]              sum_balances0[this] := 0;
[L4131]              totalSupply__BasicToken[this] := 0;
[L4153]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4154]  COND FALSE  !(revert)
[L4338]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4339]  COND FALSE  !(revert)
[L4342]  CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4301]              assume msgsender_MSG != null;
[L4302]              Balance[this] := 0;
[L4303]              allowed_StandardToken[this] := zeroRefRefintArr();
[L4304]              sum_allowed1[this] := 0;
[L4342]  RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4343]  COND FALSE  !(revert)
[L5091]  RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L5092]  COND FALSE  !(revert)
[L5095]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3978]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3961]              assume msgsender_MSG != null;
[L3962]              Balance[this] := 0;
[L3963]              owner_Ownable[this] := null;
[L3965]              owner_Ownable[this] := msgsender_MSG;
[L3978]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3979]  COND FALSE  !(revert)
[L5095]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5096]  COND FALSE  !(revert)
[L5099]  CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3978]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3961]              assume msgsender_MSG != null;
[L3962]              Balance[this] := 0;
[L3963]              owner_Ownable[this] := null;
[L3965]              owner_Ownable[this] := msgsender_MSG;
[L3978]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3979]  COND FALSE  !(revert)
[L4574]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]  COND FALSE  !(revert)
[L4578]  CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4554]              assume msgsender_MSG != null;
[L4555]              Balance[this] := 0;
[L4556]              paused_Pausable[this] := false;
[L4578]  RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4579]  COND FALSE  !(revert)
[L5099]  RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L5100]  COND FALSE  !(revert)
[L5103]  CALL        call PausableToken_PausableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4700]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4107]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4092]              assume msgsender_MSG != null;
[L4093]              Balance[this] := 0;
[L4107]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4108]  COND FALSE  !(revert)
[L4700]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4701]  COND FALSE  !(revert)
[L4704]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4278]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4107]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4092]              assume msgsender_MSG != null;
[L4093]              Balance[this] := 0;
[L4107]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4108]  COND FALSE  !(revert)
[L4278]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4279]  COND FALSE  !(revert)
[L4282]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4259]              assume msgsender_MSG != null;
[L4260]              Balance[this] := 0;
[L4282]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4283]  COND FALSE  !(revert)
[L4704]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4705]  COND FALSE  !(revert)
[L4708]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4149]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4107]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4092]              assume msgsender_MSG != null;
[L4093]              Balance[this] := 0;
[L4107]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4108]  COND FALSE  !(revert)
[L4149]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4150]  COND FALSE  !(revert)
[L4153]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4127]              assume msgsender_MSG != null;
[L4128]              Balance[this] := 0;
[L4129]              balances_BasicToken[this] := zeroRefintArr();
[L4130]              sum_balances0[this] := 0;
[L4131]              totalSupply__BasicToken[this] := 0;
[L4153]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4154]  COND FALSE  !(revert)
[L4708]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4709]  COND FALSE  !(revert)
[L4712]  CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4330]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4107]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4092]              assume msgsender_MSG != null;
[L4093]              Balance[this] := 0;
[L4107]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4108]  COND FALSE  !(revert)
[L4330]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4331]  COND FALSE  !(revert)
[L4334]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4278]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4107]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4092]              assume msgsender_MSG != null;
[L4093]              Balance[this] := 0;
[L4107]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4108]  COND FALSE  !(revert)
[L4278]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4279]  COND FALSE  !(revert)
[L4282]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4259]              assume msgsender_MSG != null;
[L4260]              Balance[this] := 0;
[L4282]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4283]  COND FALSE  !(revert)
[L4334]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4335]  COND FALSE  !(revert)
[L4338]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4149]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4107]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4092]              assume msgsender_MSG != null;
[L4093]              Balance[this] := 0;
[L4107]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4108]  COND FALSE  !(revert)
[L4149]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4150]  COND FALSE  !(revert)
[L4153]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4127]              assume msgsender_MSG != null;
[L4128]              Balance[this] := 0;
[L4129]              balances_BasicToken[this] := zeroRefintArr();
[L4130]              sum_balances0[this] := 0;
[L4131]              totalSupply__BasicToken[this] := 0;
[L4153]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4154]  COND FALSE  !(revert)
[L4338]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4339]  COND FALSE  !(revert)
[L4342]  CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4301]              assume msgsender_MSG != null;
[L4302]              Balance[this] := 0;
[L4303]              allowed_StandardToken[this] := zeroRefRefintArr();
[L4304]              sum_allowed1[this] := 0;
[L4342]  RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4343]  COND FALSE  !(revert)
[L4712]  RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4713]  COND FALSE  !(revert)
[L4716]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3978]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3961]              assume msgsender_MSG != null;
[L3962]              Balance[this] := 0;
[L3963]              owner_Ownable[this] := null;
[L3965]              owner_Ownable[this] := msgsender_MSG;
[L3978]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3979]  COND FALSE  !(revert)
[L4716]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L4717]  COND FALSE  !(revert)
[L4720]  CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3978]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3961]              assume msgsender_MSG != null;
[L3962]              Balance[this] := 0;
[L3963]              owner_Ownable[this] := null;
[L3965]              owner_Ownable[this] := msgsender_MSG;
[L3978]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3979]  COND FALSE  !(revert)
[L4574]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]  COND FALSE  !(revert)
[L4578]  CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4554]              assume msgsender_MSG != null;
[L4555]              Balance[this] := 0;
[L4556]              paused_Pausable[this] := false;
[L4578]  RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4579]  COND FALSE  !(revert)
[L4720]  RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L4721]  COND FALSE  !(revert)
[L4724]  CALL        call PausableToken_PausableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4661]              assume msgsender_MSG != null;
[L4662]              Balance[this] := 0;
[L4724]  RET         call PausableToken_PausableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4725]  COND FALSE  !(revert)
[L5103]  RET         call PausableToken_PausableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L5104]  COND FALSE  !(revert)
[L5107]  CALL        call USDollarHKex_USDollarHKex_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5013]              assume msgsender_MSG != null;
[L5014]              Balance[this] := 0;
[L5015]              name_USDollarHKex[this] := 749918206;
[L5016]              symbol_USDollarHKex[this] := 2047713833;
[L5017]              standard_USDollarHKex[this] := -1333876585;
[L5018]              decimals_USDollarHKex[this] := 18;
[L5019]              __var_22 := decimals_USDollarHKex[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5020]              INITIAL_SUPPLY_USDollarHKex[this] := nonlinearMul(25 * (100000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936), nonlinearPow(10, decimals_USDollarHKex[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5022]  CALL        call __var_23 := FreshRefGenerator__success();
[L3835]              havoc newRef;
[L3836]              assume Alloc[newRef] == false;
[L3837]              Alloc[newRef] := true;
[L3838]              assume newRef != null;
[L5022]  RET         call __var_23 := FreshRefGenerator__success();
[L5023]  COND FALSE  !(revert)
[L5026]              allocations_USDollarHKex[this] := __var_23;
[L5028]              alloc_allocations_USDollarHKex_lvl0[allocations_USDollarHKex[this]] := zeroRefboolArr();
[L5030]              totalSupply__BasicToken[this] := INITIAL_SUPPLY_USDollarHKex[this];
[L5031]              sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][msgsender_MSG];
[L5032]              balances_BasicToken[this][msgsender_MSG] := INITIAL_SUPPLY_USDollarHKex[this];
[L5033]              sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][msgsender_MSG];
[L5034]              assert { :EventEmitted "Transfer_USDollarHKex" } true;
[L5107]  RET         call USDollarHKex_USDollarHKex_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5108]  COND FALSE  !(revert)
[L2126]  RET         call USDollarHKex_USDollarHKex__success(this, msgsender_MSG, msgvalue_MSG);
[L2127]              assume !revert && gas >= 0;
[L8684]  RET         call USDollarHKex_USDollarHKex(this, msgsender_MSG, msgvalue_MSG);
[L8685]              assume !revert && gas >= 0;
[L8688]  CALL        call CorralChoice_USDollarHKex(this);
[L8483]              havoc msgsender_MSG;
[L8484]              havoc msgvalue_MSG;
[L8485]              havoc choice;
[L8486]              havoc __ret_0_owner;
[L8487]              havoc _newOwner_s133;
[L8488]              havoc __ret_0_totalSupply;
[L8489]              havoc _owner_s278;
[L8490]              havoc __ret_0_balanceOf;
[L8491]              havoc _to_s828;
[L8492]              havoc _value_s828;
[L8493]              havoc __ret_0_transfer;
[L8494]              havoc _owner_s459;
[L8495]              havoc _spender_s459;
[L8496]              havoc __ret_0_allowance;
[L8497]              havoc _from_s858;
[L8498]              havoc _to_s858;
[L8499]              havoc _value_s858;
[L8500]              havoc __ret_0_transferFrom;
[L8501]              havoc _spender_s680;
[L8502]              havoc _value_s680;
[L8503]              havoc __ret_0_approve;
[L8504]              havoc _spender_s698;
[L8505]              havoc _addedValue_s698;
[L8506]              havoc success_s698;
[L8507]              havoc _spender_s716;
[L8508]              havoc _subtractedValue_s716;
[L8509]              havoc success_s716;
[L8510]              havoc __ret_0_paused;
[L8511]              havoc __ret_0_name;
[L8512]              havoc __ret_0_symbol;
[L8513]              havoc __ret_0_standard;
[L8514]              havoc __ret_0_decimals;
[L8515]              havoc __ret_0_INITIAL_SUPPLY;
[L8516]              havoc arg1229_s0;
[L8517]              havoc arg1230_s0;
[L8518]              havoc __ret_0_allocations;
[L8519]              havoc _address_s1226;
[L8520]              havoc total_value_s1226;
[L8521]              havoc times_s1226;
[L8522]              havoc balanceRequires_s1226;
[L8523]              havoc __ret_0_setAllocation;
[L8524]              havoc tmpNow;
[L8525]              havoc gas;
[L8526]              assume gas > 4000000 && gas <= 8000000;
[L8527]              tmpNow := now;
[L8528]              havoc now;
[L8529]              assume now > tmpNow;
[L8530]              assume msgsender_MSG != null;
[L8531]              assume DType[msgsender_MSG] != SafeMath;
[L8532]              assume DType[msgsender_MSG] != Ownable;
[L8533]              assume DType[msgsender_MSG] != ERC20Basic;
[L8534]              assume DType[msgsender_MSG] != BasicToken;
[L8535]              assume DType[msgsender_MSG] != ERC20;
[L8536]              assume DType[msgsender_MSG] != StandardToken;
[L8537]              assume DType[msgsender_MSG] != Pausable;
[L8538]              assume DType[msgsender_MSG] != PausableToken;
[L8539]              assume DType[msgsender_MSG] != USDollarHKex;
[L8540]              Alloc[msgsender_MSG] := true;
[L8541]  COND FALSE  !(choice == 20)
[L8547]  COND FALSE  !(choice == 19)
[L8553]  COND FALSE  !(choice == 18)
[L8559]  COND FALSE  !(choice == 17)
[L8565]  COND FALSE  !(choice == 16)
[L8572]  COND FALSE  !(choice == 15)
[L8578]  COND TRUE   choice == 14
[L8579]              gas := gas - 21000;
[L8580]  COND TRUE   gas >= 0
[L8581]              assume _value_s858 >= 0 && _value_s858 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8582]              assume msgvalue_MSG == 0;
[L8583]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_USDollarHKex(this, msgsender_MSG, msgvalue_MSG, _from_s858, _to_s858, _value_s858);
[L2250]              havoc __exception;
[L2251]              revert := false;
[L2252]  COND FALSE  !(__exception)
[L2284]  CALL        call __ret_0_ := transferFrom~address~address~uint256_USDollarHKex__success(this, msgsender_MSG, msgvalue_MSG, _from_s858, _to_s858, _value_s858);
[L5205]  CALL        call __var_27 := canSubAllocation~address~uint256_USDollarHKex__success(this, msgsender_MSG, msgvalue_MSG, _from_s858, _value_s858);
[L5328]  COND TRUE   sub_value_s949 == 0
[L5329]              __ret_0_ := false;
[L5205]  RET         call __var_27 := canSubAllocation~address~uint256_USDollarHKex__success(this, msgsender_MSG, msgvalue_MSG, _from_s858, _value_s858);
[L5206]  COND FALSE  !(revert)
[L5209]  COND FALSE  !(!__var_27)
[L5213]  CALL        call subAllocation~address_USDollarHKex__success(this, msgsender_MSG, msgvalue_MSG, _from_s858);
[L5554]              total_lockamount_s1052 := 0;
[L5555]              total_unlockamount_s1052 := 0;
[L5556]  COND FALSE  !(alloc_allocations_USDollarHKex_lvl0[allocations_USDollarHKex[this]][sender_s1052] == false)
[L5567]              j_s1052 := 0;
[L5568]  COND FALSE  !(j_s1052 < Length[M_Ref_Ref[allocations_USDollarHKex[this]][sender_s1052]])
[L5633]  COND FALSE  !(total_unlockamount_s1052 > 0)
[L5636]  COND FALSE  !(alloc_allocations_USDollarHKex_lvl0[allocations_USDollarHKex[this]][sender_s1052] == false)
[L5647]  COND FALSE  !(total_lockamount_s1052 == 0 && Length[M_Ref_Ref[allocations_USDollarHKex[this]][sender_s1052]] > 0)
[L5213]  RET         call subAllocation~address_USDollarHKex__success(this, msgsender_MSG, msgvalue_MSG, _from_s858);
[L5214]  COND FALSE  !(revert)
[L5217]  COND TRUE   DType[this] == USDollarHKex
[L5218]  CALL        call __var_28 := transferFrom~address~address~uint256_PausableToken__success(this, msgsender_MSG, msgvalue_MSG, _from_s858, _to_s858, _value_s858);
[L4809]  CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7619]  COND FALSE  !(!!paused_Pausable[this])
[L4809]  RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4810]  COND FALSE  !(revert)
[L4813]  COND FALSE  !(DType[this] == USDollarHKex)
[L4818]  COND TRUE   DType[this] == PausableToken
[L4819]  CALL        call __var_13 := transferFrom~address~address~uint256_StandardToken__success(this, msgsender_MSG, msgvalue_MSG, _from_s662, _to_s662, _value_s662);
[L4398]              __var_5 := null;
[L4399]  COND FALSE  !(!(_to_s415 != null))
[L4403]  COND FALSE  !(!(_value_s415 <= balances_BasicToken[this][_from_s415]))
[L4407]  COND FALSE  !(!(_value_s415 <= allowed_StandardToken[this][_from_s415][msgsender_MSG]))
[L4411]  CALL        call __var_6 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_from_s415], _value_s415);
[L3928]              assert b_s68 <= a_s68;
[L3929]              __ret_0_ := (a_s68 - b_s68) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4411]  RET         call __var_6 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_from_s415], _value_s415);
[L4412]  COND FALSE  !(revert)
[L4415]              sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][_from_s415];
[L4416]              balances_BasicToken[this][_from_s415] := __var_6;
[L4417]              sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][_from_s415];
[L4418]  CALL        call __var_7 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_to_s415], _value_s415);
[L3942]              c_s92 := (a_s92 + b_s92) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3943]              assert c_s92 >= a_s92;
[L3944]              c_s92 := c_s92;
[L4418]  RET         call __var_7 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_to_s415], _value_s415);
[L4419]  COND FALSE  !(revert)
[L4422]              sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][_to_s415];
[L4423]              balances_BasicToken[this][_to_s415] := __var_7;
[L4424]              sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][_to_s415];
[L4425]  CALL        call __var_8 := sub~uint256~uint256_SafeMath__success(this, this, 0, allowed_StandardToken[this][_from_s415][msgsender_MSG], _value_s415);
[L3928]              assert b_s68 <= a_s68;
[L3929]              __ret_0_ := (a_s68 - b_s68) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4425]  RET         call __var_8 := sub~uint256~uint256_SafeMath__success(this, this, 0, allowed_StandardToken[this][_from_s415][msgsender_MSG], _value_s415);
[L4426]  COND FALSE  !(revert)
[L4429]              sum_allowed1[_from_s415] := sum_allowed1[_from_s415] - allowed_StandardToken[this][_from_s415][msgsender_MSG];
[L4430]              allowed_StandardToken[this][_from_s415][msgsender_MSG] := __var_8;
[L4431]              sum_allowed1[_from_s415] := sum_allowed1[_from_s415] + allowed_StandardToken[this][_from_s415][msgsender_MSG];
[L4432]              assert { :EventEmitted "Transfer_StandardToken" } true;
[L4433]              __ret_0_ := true;
[L4819]  RET         call __var_13 := transferFrom~address~address~uint256_StandardToken__success(this, msgsender_MSG, msgvalue_MSG, _from_s662, _to_s662, _value_s662);
[L4820]  COND FALSE  !(revert)
[L4826]              __ret_0_ := __var_13;
[L5218]  RET         call __var_28 := transferFrom~address~address~uint256_PausableToken__success(this, msgsender_MSG, msgvalue_MSG, _from_s858, _to_s858, _value_s858);
[L5219]  COND FALSE  !(revert)
[L5225]              __ret_0_ := __var_28;
[L2284]  RET         call __ret_0_ := transferFrom~address~address~uint256_USDollarHKex__success(this, msgsender_MSG, msgvalue_MSG, _from_s858, _to_s858, _value_s858);
[L2285]              assume !revert && gas >= 0;
[L8583]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_USDollarHKex(this, msgsender_MSG, msgvalue_MSG, _from_s858, _to_s858, _value_s858);
[L8688]  RET         call CorralChoice_USDollarHKex(this);
[L8688]  CALL        call CorralChoice_USDollarHKex(this);
[L8483]              havoc msgsender_MSG;
[L8484]              havoc msgvalue_MSG;
[L8485]              havoc choice;
[L8486]              havoc __ret_0_owner;
[L8487]              havoc _newOwner_s133;
[L8488]              havoc __ret_0_totalSupply;
[L8489]              havoc _owner_s278;
[L8490]              havoc __ret_0_balanceOf;
[L8491]              havoc _to_s828;
[L8492]              havoc _value_s828;
[L8493]              havoc __ret_0_transfer;
[L8494]              havoc _owner_s459;
[L8495]              havoc _spender_s459;
[L8496]              havoc __ret_0_allowance;
[L8497]              havoc _from_s858;
[L8498]              havoc _to_s858;
[L8499]              havoc _value_s858;
[L8500]              havoc __ret_0_transferFrom;
[L8501]              havoc _spender_s680;
[L8502]              havoc _value_s680;
[L8503]              havoc __ret_0_approve;
[L8504]              havoc _spender_s698;
[L8505]              havoc _addedValue_s698;
[L8506]              havoc success_s698;
[L8507]              havoc _spender_s716;
[L8508]              havoc _subtractedValue_s716;
[L8509]              havoc success_s716;
[L8510]              havoc __ret_0_paused;
[L8511]              havoc __ret_0_name;
[L8512]              havoc __ret_0_symbol;
[L8513]              havoc __ret_0_standard;
[L8514]              havoc __ret_0_decimals;
[L8515]              havoc __ret_0_INITIAL_SUPPLY;
[L8516]              havoc arg1229_s0;
[L8517]              havoc arg1230_s0;
[L8518]              havoc __ret_0_allocations;
[L8519]              havoc _address_s1226;
[L8520]              havoc total_value_s1226;
[L8521]              havoc times_s1226;
[L8522]              havoc balanceRequires_s1226;
[L8523]              havoc __ret_0_setAllocation;
[L8524]              havoc tmpNow;
[L8525]              havoc gas;
[L8526]              assume gas > 4000000 && gas <= 8000000;
[L8527]              tmpNow := now;
[L8528]              havoc now;
[L8529]              assume now > tmpNow;
[L8530]              assume msgsender_MSG != null;
[L8531]              assume DType[msgsender_MSG] != SafeMath;
[L8532]              assume DType[msgsender_MSG] != Ownable;
[L8533]              assume DType[msgsender_MSG] != ERC20Basic;
[L8534]              assume DType[msgsender_MSG] != BasicToken;
[L8535]              assume DType[msgsender_MSG] != ERC20;
[L8536]              assume DType[msgsender_MSG] != StandardToken;
[L8537]              assume DType[msgsender_MSG] != Pausable;
[L8538]              assume DType[msgsender_MSG] != PausableToken;
[L8539]              assume DType[msgsender_MSG] != USDollarHKex;
[L8540]              Alloc[msgsender_MSG] := true;
[L8541]  COND FALSE  !(choice == 20)
[L8547]  COND FALSE  !(choice == 19)
[L8553]  COND FALSE  !(choice == 18)
[L8559]  COND FALSE  !(choice == 17)
[L8565]  COND TRUE   choice == 16
[L8566]              gas := gas - 21000;
[L8567]  COND TRUE   gas >= 0
[L8568]              assume _value_s828 >= 0 && _value_s828 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8569]              assume msgvalue_MSG == 0;
[L8570]  CALL        call __ret_0_transfer := transfer~address~uint256_USDollarHKex(this, msgsender_MSG, msgvalue_MSG, _to_s828, _value_s828);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG != _to_s828 && (_value_s828 > balances_BasicToken[this][msgsender_MSG] || balances_BasicToken[this][_to_s828] + _value_s828 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && _value_s828 >= 0) && _value_s828 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][_to_s828] >= 0) && balances_BasicToken[this][_to_s828] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][msgsender_MSG] >= 0) && balances_BasicToken[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_USDollarHKex0 := true;
[L2]                 call_transfer_USDollarHKex0 := false;
[L2]                 revert := revert_hold;
[L2170]              havoc __exception;
[L2171]              revert := false;
[L2172]  COND FALSE  !(__exception)
[L2204]  CALL        call __ret_0_ := transfer~address~uint256_USDollarHKex__success(this, msgsender_MSG, msgvalue_MSG, _to_s828, _value_s828);
[L5147]  CALL        call __var_24 := canSubAllocation~address~uint256_USDollarHKex__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, _value_s828);
[L5328]  COND FALSE  !(sub_value_s949 == 0)
[L5332]  COND FALSE  !(balances_BasicToken[this][sender_s949] < sub_value_s949)
[L5336]  COND TRUE   alloc_allocations_USDollarHKex_lvl0[allocations_USDollarHKex[this]][sender_s949] == false
[L5337]  CALL        call __var_30 := FreshRefGenerator__success();
[L3835]              havoc newRef;
[L3836]              assume Alloc[newRef] == false;
[L3837]              Alloc[newRef] := true;
[L3838]              assume newRef != null;
[L5337]  RET         call __var_30 := FreshRefGenerator__success();
[L5338]  COND FALSE  !(revert)
[L5341]              assume Length[M_Ref_Ref[allocations_USDollarHKex[this]][sender_s949]] == 0;
[L5342]              alloc_allocations_USDollarHKex_lvl0[allocations_USDollarHKex[this]][sender_s949] := true;
[L5343]              assume M_int_Ref[M_Ref_Ref[allocations_USDollarHKex[this]][sender_s949]] == zerointRefArr();
[L5344]              assume M_Ref_Ref[allocations_USDollarHKex[this]][sender_s949] == __var_30;
[L5345]              assume sum[M_Ref_Ref[allocations_USDollarHKex[this]][sender_s949]] == 0;
[L5347]  COND TRUE   Length[M_Ref_Ref[allocations_USDollarHKex[this]][sender_s949]] == 0
[L5348]              __ret_0_ := true;
[L5147]  RET         call __var_24 := canSubAllocation~address~uint256_USDollarHKex__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, _value_s828);
[L5148]  COND FALSE  !(revert)
[L5151]  COND FALSE  !(!__var_24)
[L5155]  CALL        call subAllocation~address_USDollarHKex__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5554]              total_lockamount_s1052 := 0;
[L5555]              total_unlockamount_s1052 := 0;
[L5556]  COND FALSE  !(alloc_allocations_USDollarHKex_lvl0[allocations_USDollarHKex[this]][sender_s1052] == false)
[L5567]              j_s1052 := 0;
[L5568]  COND FALSE  !(j_s1052 < Length[M_Ref_Ref[allocations_USDollarHKex[this]][sender_s1052]])
[L5633]  COND FALSE  !(total_unlockamount_s1052 > 0)
[L5636]  COND FALSE  !(alloc_allocations_USDollarHKex_lvl0[allocations_USDollarHKex[this]][sender_s1052] == false)
[L5647]  COND FALSE  !(total_lockamount_s1052 == 0 && Length[M_Ref_Ref[allocations_USDollarHKex[this]][sender_s1052]] > 0)
[L5155]  RET         call subAllocation~address_USDollarHKex__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5156]  COND FALSE  !(revert)
[L5159]  COND TRUE   DType[this] == USDollarHKex
[L5160]  CALL        call __var_25 := transfer~address~uint256_PausableToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s828, _value_s828);
[L4759]  CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7619]  COND FALSE  !(!!paused_Pausable[this])
[L4759]  RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4760]  COND FALSE  !(revert)
[L4763]  COND FALSE  !(DType[this] == USDollarHKex)
[L4768]  COND TRUE   DType[this] == PausableToken
[L4769]  CALL        call __var_11 := transfer~address~uint256_BasicToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s641, _value_s641);
[L4208]              __var_2 := null;
[L4209]  COND FALSE  !(!(_to_s266 != null))
[L4213]  COND FALSE  !(!(_value_s266 <= balances_BasicToken[this][msgsender_MSG]))
[L4217]  CALL        call __var_3 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][msgsender_MSG], _value_s266);
[L3928]              assert b_s68 <= a_s68;
[L3929]              __ret_0_ := (a_s68 - b_s68) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4217]  RET         call __var_3 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][msgsender_MSG], _value_s266);
[L4218]  COND FALSE  !(revert)
[L4221]              sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][msgsender_MSG];
[L4222]              balances_BasicToken[this][msgsender_MSG] := __var_3;
[L4223]              sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][msgsender_MSG];
[L4224]  CALL        call __var_4 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_to_s266], _value_s266);
[L3942]              c_s92 := (a_s92 + b_s92) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3943]              assert c_s92 >= a_s92;
[L3944]              c_s92 := c_s92;
[L4224]  RET         call __var_4 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_to_s266], _value_s266);
[L4225]  COND FALSE  !(revert)
[L4228]              sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][_to_s266];
[L4229]              balances_BasicToken[this][_to_s266] := __var_4;
[L4230]              sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][_to_s266];
[L4231]              assert { :EventEmitted "Transfer_BasicToken" } true;
[L4232]              __ret_0_ := true;
[L4769]  RET         call __var_11 := transfer~address~uint256_BasicToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s641, _value_s641);
[L4770]  COND FALSE  !(revert)
[L4776]              __ret_0_ := __var_11;
[L5160]  RET         call __var_25 := transfer~address~uint256_PausableToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s828, _value_s828);
[L5161]  COND FALSE  !(revert)
[L5167]              __ret_0_ := __var_25;
[L2204]  RET         call __ret_0_ := transfer~address~uint256_USDollarHKex__success(this, msgsender_MSG, msgvalue_MSG, _to_s828, _value_s828);
[L2205]              assume !revert && gas >= 0;
[L8570]  RET         call __ret_0_transfer := transfer~address~uint256_USDollarHKex(this, msgsender_MSG, msgvalue_MSG, _to_s828, _value_s828);
[L8688]  RET         call CorralChoice_USDollarHKex(this);

Loop:
[L8688]  CALL        call CorralChoice_USDollarHKex(this);
[L8483]              havoc msgsender_MSG;
[L8484]              havoc msgvalue_MSG;
[L8485]              havoc choice;
[L8486]              havoc __ret_0_owner;
[L8487]              havoc _newOwner_s133;
[L8488]              havoc __ret_0_totalSupply;
[L8489]              havoc _owner_s278;
[L8490]              havoc __ret_0_balanceOf;
[L8491]              havoc _to_s828;
[L8492]              havoc _value_s828;
[L8493]              havoc __ret_0_transfer;
[L8494]              havoc _owner_s459;
[L8495]              havoc _spender_s459;
[L8496]              havoc __ret_0_allowance;
[L8497]              havoc _from_s858;
[L8498]              havoc _to_s858;
[L8499]              havoc _value_s858;
[L8500]              havoc __ret_0_transferFrom;
[L8501]              havoc _spender_s680;
[L8502]              havoc _value_s680;
[L8503]              havoc __ret_0_approve;
[L8504]              havoc _spender_s698;
[L8505]              havoc _addedValue_s698;
[L8506]              havoc success_s698;
[L8507]              havoc _spender_s716;
[L8508]              havoc _subtractedValue_s716;
[L8509]              havoc success_s716;
[L8510]              havoc __ret_0_paused;
[L8511]              havoc __ret_0_name;
[L8512]              havoc __ret_0_symbol;
[L8513]              havoc __ret_0_standard;
[L8514]              havoc __ret_0_decimals;
[L8515]              havoc __ret_0_INITIAL_SUPPLY;
[L8516]              havoc arg1229_s0;
[L8517]              havoc arg1230_s0;
[L8518]              havoc __ret_0_allocations;
[L8519]              havoc _address_s1226;
[L8520]              havoc total_value_s1226;
[L8521]              havoc times_s1226;
[L8522]              havoc balanceRequires_s1226;
[L8523]              havoc __ret_0_setAllocation;
[L8524]              havoc tmpNow;
[L8525]              havoc gas;
[L8526]              assume gas > 4000000 && gas <= 8000000;
[L8527]              tmpNow := now;
[L8528]              havoc now;
[L8529]              assume now > tmpNow;
[L8530]              assume msgsender_MSG != null;
[L8531]              assume DType[msgsender_MSG] != SafeMath;
[L8532]              assume DType[msgsender_MSG] != Ownable;
[L8533]              assume DType[msgsender_MSG] != ERC20Basic;
[L8534]              assume DType[msgsender_MSG] != BasicToken;
[L8535]              assume DType[msgsender_MSG] != ERC20;
[L8536]              assume DType[msgsender_MSG] != StandardToken;
[L8537]              assume DType[msgsender_MSG] != Pausable;
[L8538]              assume DType[msgsender_MSG] != PausableToken;
[L8539]              assume DType[msgsender_MSG] != USDollarHKex;
[L8540]              Alloc[msgsender_MSG] := true;
[L8541]  COND FALSE  !(choice == 20)
[L8547]  COND FALSE  !(choice == 19)
[L8553]  COND FALSE  !(choice == 18)
[L8559]  COND FALSE  !(choice == 17)
[L8565]  COND TRUE   choice == 16
[L8566]              gas := gas - 21000;
[L8567]  COND TRUE   gas >= 0
[L8568]              assume _value_s828 >= 0 && _value_s828 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8569]              assume msgvalue_MSG == 0;
[L8570]  CALL        call __ret_0_transfer := transfer~address~uint256_USDollarHKex(this, msgsender_MSG, msgvalue_MSG, _to_s828, _value_s828);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG != _to_s828 && (_value_s828 > balances_BasicToken[this][msgsender_MSG] || balances_BasicToken[this][_to_s828] + _value_s828 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && _value_s828 >= 0) && _value_s828 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][_to_s828] >= 0) && balances_BasicToken[this][_to_s828] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][msgsender_MSG] >= 0) && balances_BasicToken[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_USDollarHKex0 := true;
[L2]                 call_transfer_USDollarHKex0 := false;
[L2]                 revert := revert_hold;
[L2170]              havoc __exception;
[L2171]              revert := false;
[L2172]  COND FALSE  !(__exception)
[L2204]  CALL        call __ret_0_ := transfer~address~uint256_USDollarHKex__success(this, msgsender_MSG, msgvalue_MSG, _to_s828, _value_s828);
[L5147]  CALL        call __var_24 := canSubAllocation~address~uint256_USDollarHKex__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, _value_s828);
[L5328]  COND FALSE  !(sub_value_s949 == 0)
[L5332]  COND FALSE  !(balances_BasicToken[this][sender_s949] < sub_value_s949)
[L5336]  COND TRUE   alloc_allocations_USDollarHKex_lvl0[allocations_USDollarHKex[this]][sender_s949] == false
[L5337]  CALL        call __var_30 := FreshRefGenerator__success();
[L3835]              havoc newRef;
[L3836]              assume Alloc[newRef] == false;
[L3837]              Alloc[newRef] := true;
[L3838]              assume newRef != null;
[L5337]  RET         call __var_30 := FreshRefGenerator__success();
[L5338]  COND FALSE  !(revert)
[L5341]              assume Length[M_Ref_Ref[allocations_USDollarHKex[this]][sender_s949]] == 0;
[L5342]              alloc_allocations_USDollarHKex_lvl0[allocations_USDollarHKex[this]][sender_s949] := true;
[L5343]              assume M_int_Ref[M_Ref_Ref[allocations_USDollarHKex[this]][sender_s949]] == zerointRefArr();
[L5344]              assume M_Ref_Ref[allocations_USDollarHKex[this]][sender_s949] == __var_30;
[L5345]              assume sum[M_Ref_Ref[allocations_USDollarHKex[this]][sender_s949]] == 0;
[L5347]  COND TRUE   Length[M_Ref_Ref[allocations_USDollarHKex[this]][sender_s949]] == 0
[L5348]              __ret_0_ := true;
[L5147]  RET         call __var_24 := canSubAllocation~address~uint256_USDollarHKex__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, _value_s828);
[L5148]  COND FALSE  !(revert)
[L5151]  COND FALSE  !(!__var_24)
[L5155]  CALL        call subAllocation~address_USDollarHKex__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5554]              total_lockamount_s1052 := 0;
[L5555]              total_unlockamount_s1052 := 0;
[L5556]  COND FALSE  !(alloc_allocations_USDollarHKex_lvl0[allocations_USDollarHKex[this]][sender_s1052] == false)
[L5567]              j_s1052 := 0;
[L5568]  COND FALSE  !(j_s1052 < Length[M_Ref_Ref[allocations_USDollarHKex[this]][sender_s1052]])
[L5633]  COND FALSE  !(total_unlockamount_s1052 > 0)
[L5636]  COND FALSE  !(alloc_allocations_USDollarHKex_lvl0[allocations_USDollarHKex[this]][sender_s1052] == false)
[L5647]  COND FALSE  !(total_lockamount_s1052 == 0 && Length[M_Ref_Ref[allocations_USDollarHKex[this]][sender_s1052]] > 0)
[L5155]  RET         call subAllocation~address_USDollarHKex__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5156]  COND FALSE  !(revert)
[L5159]  COND TRUE   DType[this] == USDollarHKex
[L5160]  CALL        call __var_25 := transfer~address~uint256_PausableToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s828, _value_s828);
[L4759]  CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7619]  COND FALSE  !(!!paused_Pausable[this])
[L4759]  RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4760]  COND FALSE  !(revert)
[L4763]  COND FALSE  !(DType[this] == USDollarHKex)
[L4768]  COND TRUE   DType[this] == PausableToken
[L4769]  CALL        call __var_11 := transfer~address~uint256_BasicToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s641, _value_s641);
[L4208]              __var_2 := null;
[L4209]  COND FALSE  !(!(_to_s266 != null))
[L4213]  COND FALSE  !(!(_value_s266 <= balances_BasicToken[this][msgsender_MSG]))
[L4217]  CALL        call __var_3 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][msgsender_MSG], _value_s266);
[L3928]              assert b_s68 <= a_s68;
[L3929]              __ret_0_ := (a_s68 - b_s68) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4217]  RET         call __var_3 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][msgsender_MSG], _value_s266);
[L4218]  COND FALSE  !(revert)
[L4221]              sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][msgsender_MSG];
[L4222]              balances_BasicToken[this][msgsender_MSG] := __var_3;
[L4223]              sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][msgsender_MSG];
[L4224]  CALL        call __var_4 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_to_s266], _value_s266);
[L3942]              c_s92 := (a_s92 + b_s92) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3943]              assert c_s92 >= a_s92;
[L3944]              c_s92 := c_s92;
[L4224]  RET         call __var_4 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_to_s266], _value_s266);
[L4225]  COND FALSE  !(revert)
[L4228]              sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][_to_s266];
[L4229]              balances_BasicToken[this][_to_s266] := __var_4;
[L4230]              sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][_to_s266];
[L4231]              assert { :EventEmitted "Transfer_BasicToken" } true;
[L4232]              __ret_0_ := true;
[L4769]  RET         call __var_11 := transfer~address~uint256_BasicToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s641, _value_s641);
[L4770]  COND FALSE  !(revert)
[L4776]              __ret_0_ := __var_11;
[L5160]  RET         call __var_25 := transfer~address~uint256_PausableToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s828, _value_s828);
[L5161]  COND FALSE  !(revert)
[L5167]              __ret_0_ := __var_25;
[L2204]  RET         call __ret_0_ := transfer~address~uint256_USDollarHKex__success(this, msgsender_MSG, msgvalue_MSG, _to_s828, _value_s828);
[L2205]              assume !revert && gas >= 0;
[L8570]  RET         call __ret_0_transfer := transfer~address~uint256_USDollarHKex(this, msgsender_MSG, msgvalue_MSG, _to_s828, _value_s828);
[L8688]  RET         call CorralChoice_USDollarHKex(this);

[2020-11-25 08:10:57,587 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 08:10:57,587 INFO  L82        PathProgramCache]: Analyzing trace with hash 1433129801, now seen corresponding path program 1 times
[2020-11-25 08:10:57,587 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 08:10:57,607 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 08:10:57,801 INFO  L134       CoverageAnalysis]: Checked inductivity of 1032 backedges. 1 proven. 0 refuted. 0 times theorem prover too weak. 1031 trivial. 0 not checked.
[2020-11-25 08:10:57,801 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 08:10:57,801 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [4] imperfect sequences [] total 4
[2020-11-25 08:10:57,802 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 08:10:57,802 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-11-25 08:10:57,802 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=5, Invalid=7, Unknown=0, NotChecked=0, Total=12
[2020-11-25 08:10:57,802 INFO  L87              Difference]: Start difference. First operand 5319 states and 6046 transitions. cyclomatic complexity: 751 Second operand 4 states.
[2020-11-25 08:10:57,823 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 08:10:57,823 INFO  L93              Difference]: Finished difference Result 5325 states and 6050 transitions.
[2020-11-25 08:10:57,823 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 4 states. 
[2020-11-25 08:10:57,823 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 5325 states and 6050 transitions.
[2020-11-25 08:10:57,831 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 08:10:57,840 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 5325 states to 5311 states and 6034 transitions.
[2020-11-25 08:10:57,841 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1056
[2020-11-25 08:10:57,841 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1056
[2020-11-25 08:10:57,841 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 5311 states and 6034 transitions.
[2020-11-25 08:10:57,844 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 08:10:57,844 INFO  L728         BuchiCegarLoop]: Abstraction has 5311 states and 6034 transitions.
[2020-11-25 08:10:57,847 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 5311 states and 6034 transitions.
[2020-11-25 08:10:57,872 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 5311 to 5311.
[2020-11-25 08:10:57,872 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 5311 states.
[2020-11-25 08:10:57,877 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 5311 states to 5311 states and 6034 transitions.
[2020-11-25 08:10:57,877 INFO  L751         BuchiCegarLoop]: Abstraction has 5311 states and 6034 transitions.
[2020-11-25 08:10:57,877 INFO  L631         BuchiCegarLoop]: Abstraction has 5311 states and 6034 transitions.
[2020-11-25 08:10:57,877 INFO  L445         BuchiCegarLoop]: ======== Iteration 9============
[2020-11-25 08:10:57,877 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 5311 states and 6034 transitions.
[2020-11-25 08:10:57,882 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 08:10:57,882 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 08:10:57,882 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 08:10:57,884 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [12, 12, 12, 12, 12, 12, 12, 12, 12, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 08:10:57,884 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transfer_USDollarHKex0 := false;
[L2]                 call_transfer_USDollarHKex0 := false;
[L2]     CALL        call main();
[L8678]              assume null == 0;
[L8679]  CALL        call this := FreshRefGenerator__success();
[L3835]              havoc newRef;
[L3836]              assume Alloc[newRef] == false;
[L3837]              Alloc[newRef] := true;
[L3838]              assume newRef != null;
[L8679]  RET         call this := FreshRefGenerator__success();
[L8680]              assume now >= 0;
[L8681]              assume DType[this] == USDollarHKex;
[L8682]              assume msgvalue_MSG == 0;
[L8683]              gas := gas - 53000;
[L8684]  CALL        call USDollarHKex_USDollarHKex(this, msgsender_MSG, msgvalue_MSG);
[L2092]              havoc __exception;
[L2093]              revert := false;
[L2094]  COND FALSE  !(__exception)
[L2126]  CALL        call USDollarHKex_USDollarHKex__success(this, msgsender_MSG, msgvalue_MSG);
[L5079]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4107]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4092]              assume msgsender_MSG != null;
[L4093]              Balance[this] := 0;
[L4107]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4108]  COND FALSE  !(revert)
[L5079]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5080]  COND FALSE  !(revert)
[L5083]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4278]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4107]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4092]              assume msgsender_MSG != null;
[L4093]              Balance[this] := 0;
[L4107]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4108]  COND FALSE  !(revert)
[L4278]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4279]  COND FALSE  !(revert)
[L4282]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4259]              assume msgsender_MSG != null;
[L4260]              Balance[this] := 0;
[L4282]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4283]  COND FALSE  !(revert)
[L5083]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5084]  COND FALSE  !(revert)
[L5087]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4149]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4107]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4092]              assume msgsender_MSG != null;
[L4093]              Balance[this] := 0;
[L4107]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4108]  COND FALSE  !(revert)
[L4149]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4150]  COND FALSE  !(revert)
[L4153]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4127]              assume msgsender_MSG != null;
[L4128]              Balance[this] := 0;
[L4129]              balances_BasicToken[this] := zeroRefintArr();
[L4130]              sum_balances0[this] := 0;
[L4131]              totalSupply__BasicToken[this] := 0;
[L4153]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4154]  COND FALSE  !(revert)
[L5087]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L5088]  COND FALSE  !(revert)
[L5091]  CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4330]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4107]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4092]              assume msgsender_MSG != null;
[L4093]              Balance[this] := 0;
[L4107]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4108]  COND FALSE  !(revert)
[L4330]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4331]  COND FALSE  !(revert)
[L4334]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4278]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4107]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4092]              assume msgsender_MSG != null;
[L4093]              Balance[this] := 0;
[L4107]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4108]  COND FALSE  !(revert)
[L4278]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4279]  COND FALSE  !(revert)
[L4282]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4259]              assume msgsender_MSG != null;
[L4260]              Balance[this] := 0;
[L4282]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4283]  COND FALSE  !(revert)
[L4334]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4335]  COND FALSE  !(revert)
[L4338]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4149]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4107]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4092]              assume msgsender_MSG != null;
[L4093]              Balance[this] := 0;
[L4107]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4108]  COND FALSE  !(revert)
[L4149]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4150]  COND FALSE  !(revert)
[L4153]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4127]              assume msgsender_MSG != null;
[L4128]              Balance[this] := 0;
[L4129]              balances_BasicToken[this] := zeroRefintArr();
[L4130]              sum_balances0[this] := 0;
[L4131]              totalSupply__BasicToken[this] := 0;
[L4153]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4154]  COND FALSE  !(revert)
[L4338]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4339]  COND FALSE  !(revert)
[L4342]  CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4301]              assume msgsender_MSG != null;
[L4302]              Balance[this] := 0;
[L4303]              allowed_StandardToken[this] := zeroRefRefintArr();
[L4304]              sum_allowed1[this] := 0;
[L4342]  RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4343]  COND FALSE  !(revert)
[L5091]  RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L5092]  COND FALSE  !(revert)
[L5095]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3978]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3961]              assume msgsender_MSG != null;
[L3962]              Balance[this] := 0;
[L3963]              owner_Ownable[this] := null;
[L3965]              owner_Ownable[this] := msgsender_MSG;
[L3978]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3979]  COND FALSE  !(revert)
[L5095]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5096]  COND FALSE  !(revert)
[L5099]  CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3978]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3961]              assume msgsender_MSG != null;
[L3962]              Balance[this] := 0;
[L3963]              owner_Ownable[this] := null;
[L3965]              owner_Ownable[this] := msgsender_MSG;
[L3978]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3979]  COND FALSE  !(revert)
[L4574]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]  COND FALSE  !(revert)
[L4578]  CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4554]              assume msgsender_MSG != null;
[L4555]              Balance[this] := 0;
[L4556]              paused_Pausable[this] := false;
[L4578]  RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4579]  COND FALSE  !(revert)
[L5099]  RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L5100]  COND FALSE  !(revert)
[L5103]  CALL        call PausableToken_PausableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4700]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4107]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4092]              assume msgsender_MSG != null;
[L4093]              Balance[this] := 0;
[L4107]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4108]  COND FALSE  !(revert)
[L4700]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4701]  COND FALSE  !(revert)
[L4704]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4278]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4107]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4092]              assume msgsender_MSG != null;
[L4093]              Balance[this] := 0;
[L4107]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4108]  COND FALSE  !(revert)
[L4278]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4279]  COND FALSE  !(revert)
[L4282]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4259]              assume msgsender_MSG != null;
[L4260]              Balance[this] := 0;
[L4282]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4283]  COND FALSE  !(revert)
[L4704]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4705]  COND FALSE  !(revert)
[L4708]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4149]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4107]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4092]              assume msgsender_MSG != null;
[L4093]              Balance[this] := 0;
[L4107]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4108]  COND FALSE  !(revert)
[L4149]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4150]  COND FALSE  !(revert)
[L4153]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4127]              assume msgsender_MSG != null;
[L4128]              Balance[this] := 0;
[L4129]              balances_BasicToken[this] := zeroRefintArr();
[L4130]              sum_balances0[this] := 0;
[L4131]              totalSupply__BasicToken[this] := 0;
[L4153]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4154]  COND FALSE  !(revert)
[L4708]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4709]  COND FALSE  !(revert)
[L4712]  CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4330]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4107]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4092]              assume msgsender_MSG != null;
[L4093]              Balance[this] := 0;
[L4107]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4108]  COND FALSE  !(revert)
[L4330]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4331]  COND FALSE  !(revert)
[L4334]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4278]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4107]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4092]              assume msgsender_MSG != null;
[L4093]              Balance[this] := 0;
[L4107]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4108]  COND FALSE  !(revert)
[L4278]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4279]  COND FALSE  !(revert)
[L4282]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4259]              assume msgsender_MSG != null;
[L4260]              Balance[this] := 0;
[L4282]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4283]  COND FALSE  !(revert)
[L4334]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4335]  COND FALSE  !(revert)
[L4338]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4149]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4107]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4092]              assume msgsender_MSG != null;
[L4093]              Balance[this] := 0;
[L4107]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4108]  COND FALSE  !(revert)
[L4149]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4150]  COND FALSE  !(revert)
[L4153]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4127]              assume msgsender_MSG != null;
[L4128]              Balance[this] := 0;
[L4129]              balances_BasicToken[this] := zeroRefintArr();
[L4130]              sum_balances0[this] := 0;
[L4131]              totalSupply__BasicToken[this] := 0;
[L4153]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4154]  COND FALSE  !(revert)
[L4338]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4339]  COND FALSE  !(revert)
[L4342]  CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4301]              assume msgsender_MSG != null;
[L4302]              Balance[this] := 0;
[L4303]              allowed_StandardToken[this] := zeroRefRefintArr();
[L4304]              sum_allowed1[this] := 0;
[L4342]  RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4343]  COND FALSE  !(revert)
[L4712]  RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4713]  COND FALSE  !(revert)
[L4716]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3978]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3961]              assume msgsender_MSG != null;
[L3962]              Balance[this] := 0;
[L3963]              owner_Ownable[this] := null;
[L3965]              owner_Ownable[this] := msgsender_MSG;
[L3978]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3979]  COND FALSE  !(revert)
[L4716]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L4717]  COND FALSE  !(revert)
[L4720]  CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3978]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3961]              assume msgsender_MSG != null;
[L3962]              Balance[this] := 0;
[L3963]              owner_Ownable[this] := null;
[L3965]              owner_Ownable[this] := msgsender_MSG;
[L3978]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3979]  COND FALSE  !(revert)
[L4574]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]  COND FALSE  !(revert)
[L4578]  CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4554]              assume msgsender_MSG != null;
[L4555]              Balance[this] := 0;
[L4556]              paused_Pausable[this] := false;
[L4578]  RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4579]  COND FALSE  !(revert)
[L4720]  RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L4721]  COND FALSE  !(revert)
[L4724]  CALL        call PausableToken_PausableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4661]              assume msgsender_MSG != null;
[L4662]              Balance[this] := 0;
[L4724]  RET         call PausableToken_PausableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4725]  COND FALSE  !(revert)
[L5103]  RET         call PausableToken_PausableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L5104]  COND FALSE  !(revert)
[L5107]  CALL        call USDollarHKex_USDollarHKex_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5013]              assume msgsender_MSG != null;
[L5014]              Balance[this] := 0;
[L5015]              name_USDollarHKex[this] := 749918206;
[L5016]              symbol_USDollarHKex[this] := 2047713833;
[L5017]              standard_USDollarHKex[this] := -1333876585;
[L5018]              decimals_USDollarHKex[this] := 18;
[L5019]              __var_22 := decimals_USDollarHKex[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5020]              INITIAL_SUPPLY_USDollarHKex[this] := nonlinearMul(25 * (100000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936), nonlinearPow(10, decimals_USDollarHKex[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5022]  CALL        call __var_23 := FreshRefGenerator__success();
[L3835]              havoc newRef;
[L3836]              assume Alloc[newRef] == false;
[L3837]              Alloc[newRef] := true;
[L3838]              assume newRef != null;
[L5022]  RET         call __var_23 := FreshRefGenerator__success();
[L5023]  COND FALSE  !(revert)
[L5026]              allocations_USDollarHKex[this] := __var_23;
[L5028]              alloc_allocations_USDollarHKex_lvl0[allocations_USDollarHKex[this]] := zeroRefboolArr();
[L5030]              totalSupply__BasicToken[this] := INITIAL_SUPPLY_USDollarHKex[this];
[L5031]              sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][msgsender_MSG];
[L5032]              balances_BasicToken[this][msgsender_MSG] := INITIAL_SUPPLY_USDollarHKex[this];
[L5033]              sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][msgsender_MSG];
[L5034]              assert { :EventEmitted "Transfer_USDollarHKex" } true;
[L5107]  RET         call USDollarHKex_USDollarHKex_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5108]  COND FALSE  !(revert)
[L2126]  RET         call USDollarHKex_USDollarHKex__success(this, msgsender_MSG, msgvalue_MSG);
[L2127]              assume !revert && gas >= 0;
[L8684]  RET         call USDollarHKex_USDollarHKex(this, msgsender_MSG, msgvalue_MSG);
[L8685]              assume !revert && gas >= 0;
[L8688]  CALL        call CorralChoice_USDollarHKex(this);
[L8483]              havoc msgsender_MSG;
[L8484]              havoc msgvalue_MSG;
[L8485]              havoc choice;
[L8486]              havoc __ret_0_owner;
[L8487]              havoc _newOwner_s133;
[L8488]              havoc __ret_0_totalSupply;
[L8489]              havoc _owner_s278;
[L8490]              havoc __ret_0_balanceOf;
[L8491]              havoc _to_s828;
[L8492]              havoc _value_s828;
[L8493]              havoc __ret_0_transfer;
[L8494]              havoc _owner_s459;
[L8495]              havoc _spender_s459;
[L8496]              havoc __ret_0_allowance;
[L8497]              havoc _from_s858;
[L8498]              havoc _to_s858;
[L8499]              havoc _value_s858;
[L8500]              havoc __ret_0_transferFrom;
[L8501]              havoc _spender_s680;
[L8502]              havoc _value_s680;
[L8503]              havoc __ret_0_approve;
[L8504]              havoc _spender_s698;
[L8505]              havoc _addedValue_s698;
[L8506]              havoc success_s698;
[L8507]              havoc _spender_s716;
[L8508]              havoc _subtractedValue_s716;
[L8509]              havoc success_s716;
[L8510]              havoc __ret_0_paused;
[L8511]              havoc __ret_0_name;
[L8512]              havoc __ret_0_symbol;
[L8513]              havoc __ret_0_standard;
[L8514]              havoc __ret_0_decimals;
[L8515]              havoc __ret_0_INITIAL_SUPPLY;
[L8516]              havoc arg1229_s0;
[L8517]              havoc arg1230_s0;
[L8518]              havoc __ret_0_allocations;
[L8519]              havoc _address_s1226;
[L8520]              havoc total_value_s1226;
[L8521]              havoc times_s1226;
[L8522]              havoc balanceRequires_s1226;
[L8523]              havoc __ret_0_setAllocation;
[L8524]              havoc tmpNow;
[L8525]              havoc gas;
[L8526]              assume gas > 4000000 && gas <= 8000000;
[L8527]              tmpNow := now;
[L8528]              havoc now;
[L8529]              assume now > tmpNow;
[L8530]              assume msgsender_MSG != null;
[L8531]              assume DType[msgsender_MSG] != SafeMath;
[L8532]              assume DType[msgsender_MSG] != Ownable;
[L8533]              assume DType[msgsender_MSG] != ERC20Basic;
[L8534]              assume DType[msgsender_MSG] != BasicToken;
[L8535]              assume DType[msgsender_MSG] != ERC20;
[L8536]              assume DType[msgsender_MSG] != StandardToken;
[L8537]              assume DType[msgsender_MSG] != Pausable;
[L8538]              assume DType[msgsender_MSG] != PausableToken;
[L8539]              assume DType[msgsender_MSG] != USDollarHKex;
[L8540]              Alloc[msgsender_MSG] := true;
[L8541]  COND FALSE  !(choice == 20)
[L8547]  COND FALSE  !(choice == 19)
[L8553]  COND FALSE  !(choice == 18)
[L8559]  COND FALSE  !(choice == 17)
[L8565]  COND FALSE  !(choice == 16)
[L8572]  COND FALSE  !(choice == 15)
[L8578]  COND TRUE   choice == 14
[L8579]              gas := gas - 21000;
[L8580]  COND TRUE   gas >= 0
[L8581]              assume _value_s858 >= 0 && _value_s858 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8582]              assume msgvalue_MSG == 0;
[L8583]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_USDollarHKex(this, msgsender_MSG, msgvalue_MSG, _from_s858, _to_s858, _value_s858);
[L2250]              havoc __exception;
[L2251]              revert := false;
[L2252]  COND FALSE  !(__exception)
[L2284]  CALL        call __ret_0_ := transferFrom~address~address~uint256_USDollarHKex__success(this, msgsender_MSG, msgvalue_MSG, _from_s858, _to_s858, _value_s858);
[L5205]  CALL        call __var_27 := canSubAllocation~address~uint256_USDollarHKex__success(this, msgsender_MSG, msgvalue_MSG, _from_s858, _value_s858);
[L5328]  COND FALSE  !(sub_value_s949 == 0)
[L5332]  COND FALSE  !(balances_BasicToken[this][sender_s949] < sub_value_s949)
[L5336]  COND FALSE  !(alloc_allocations_USDollarHKex_lvl0[allocations_USDollarHKex[this]][sender_s949] == false)
[L5347]  COND TRUE   Length[M_Ref_Ref[allocations_USDollarHKex[this]][sender_s949]] == 0
[L5348]              __ret_0_ := true;
[L5205]  RET         call __var_27 := canSubAllocation~address~uint256_USDollarHKex__success(this, msgsender_MSG, msgvalue_MSG, _from_s858, _value_s858);
[L5206]  COND FALSE  !(revert)
[L5209]  COND FALSE  !(!__var_27)
[L5213]  CALL        call subAllocation~address_USDollarHKex__success(this, msgsender_MSG, msgvalue_MSG, _from_s858);
[L5554]              total_lockamount_s1052 := 0;
[L5555]              total_unlockamount_s1052 := 0;
[L5556]  COND TRUE   alloc_allocations_USDollarHKex_lvl0[allocations_USDollarHKex[this]][sender_s1052] == false
[L5557]  CALL        call __var_34 := FreshRefGenerator__success();
[L3835]              havoc newRef;
[L3836]              assume Alloc[newRef] == false;
[L3837]              Alloc[newRef] := true;
[L3838]              assume newRef != null;
[L5557]  RET         call __var_34 := FreshRefGenerator__success();
[L5558]  COND FALSE  !(revert)
[L5561]              assume Length[M_Ref_Ref[allocations_USDollarHKex[this]][sender_s1052]] == 0;
[L5562]              alloc_allocations_USDollarHKex_lvl0[allocations_USDollarHKex[this]][sender_s1052] := true;
[L5563]              assume M_int_Ref[M_Ref_Ref[allocations_USDollarHKex[this]][sender_s1052]] == zerointRefArr();
[L5564]              assume M_Ref_Ref[allocations_USDollarHKex[this]][sender_s1052] == __var_34;
[L5565]              assume sum[M_Ref_Ref[allocations_USDollarHKex[this]][sender_s1052]] == 0;
[L5567]              j_s1052 := 0;
[L5568]  COND FALSE  !(j_s1052 < Length[M_Ref_Ref[allocations_USDollarHKex[this]][sender_s1052]])
[L5633]  COND FALSE  !(total_unlockamount_s1052 > 0)
[L5636]  COND FALSE  !(alloc_allocations_USDollarHKex_lvl0[allocations_USDollarHKex[this]][sender_s1052] == false)
[L5647]  COND FALSE  !(total_lockamount_s1052 == 0 && Length[M_Ref_Ref[allocations_USDollarHKex[this]][sender_s1052]] > 0)
[L5213]  RET         call subAllocation~address_USDollarHKex__success(this, msgsender_MSG, msgvalue_MSG, _from_s858);
[L5214]  COND FALSE  !(revert)
[L5217]  COND TRUE   DType[this] == USDollarHKex
[L5218]  CALL        call __var_28 := transferFrom~address~address~uint256_PausableToken__success(this, msgsender_MSG, msgvalue_MSG, _from_s858, _to_s858, _value_s858);
[L4809]  CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7619]  COND FALSE  !(!!paused_Pausable[this])
[L4809]  RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4810]  COND FALSE  !(revert)
[L4813]  COND FALSE  !(DType[this] == USDollarHKex)
[L4818]  COND TRUE   DType[this] == PausableToken
[L4819]  CALL        call __var_13 := transferFrom~address~address~uint256_StandardToken__success(this, msgsender_MSG, msgvalue_MSG, _from_s662, _to_s662, _value_s662);
[L4398]              __var_5 := null;
[L4399]  COND FALSE  !(!(_to_s415 != null))
[L4403]  COND FALSE  !(!(_value_s415 <= balances_BasicToken[this][_from_s415]))
[L4407]  COND FALSE  !(!(_value_s415 <= allowed_StandardToken[this][_from_s415][msgsender_MSG]))
[L4411]  CALL        call __var_6 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_from_s415], _value_s415);
[L3928]              assert b_s68 <= a_s68;
[L3929]              __ret_0_ := (a_s68 - b_s68) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4411]  RET         call __var_6 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_from_s415], _value_s415);
[L4412]  COND FALSE  !(revert)
[L4415]              sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][_from_s415];
[L4416]              balances_BasicToken[this][_from_s415] := __var_6;
[L4417]              sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][_from_s415];
[L4418]  CALL        call __var_7 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_to_s415], _value_s415);
[L3942]              c_s92 := (a_s92 + b_s92) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3943]              assert c_s92 >= a_s92;
[L3944]              c_s92 := c_s92;
[L4418]  RET         call __var_7 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_to_s415], _value_s415);
[L4419]  COND FALSE  !(revert)
[L4422]              sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][_to_s415];
[L4423]              balances_BasicToken[this][_to_s415] := __var_7;
[L4424]              sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][_to_s415];
[L4425]  CALL        call __var_8 := sub~uint256~uint256_SafeMath__success(this, this, 0, allowed_StandardToken[this][_from_s415][msgsender_MSG], _value_s415);
[L3928]              assert b_s68 <= a_s68;
[L3929]              __ret_0_ := (a_s68 - b_s68) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4425]  RET         call __var_8 := sub~uint256~uint256_SafeMath__success(this, this, 0, allowed_StandardToken[this][_from_s415][msgsender_MSG], _value_s415);
[L4426]  COND FALSE  !(revert)
[L4429]              sum_allowed1[_from_s415] := sum_allowed1[_from_s415] - allowed_StandardToken[this][_from_s415][msgsender_MSG];
[L4430]              allowed_StandardToken[this][_from_s415][msgsender_MSG] := __var_8;
[L4431]              sum_allowed1[_from_s415] := sum_allowed1[_from_s415] + allowed_StandardToken[this][_from_s415][msgsender_MSG];
[L4432]              assert { :EventEmitted "Transfer_StandardToken" } true;
[L4433]              __ret_0_ := true;
[L4819]  RET         call __var_13 := transferFrom~address~address~uint256_StandardToken__success(this, msgsender_MSG, msgvalue_MSG, _from_s662, _to_s662, _value_s662);
[L4820]  COND FALSE  !(revert)
[L4826]              __ret_0_ := __var_13;
[L5218]  RET         call __var_28 := transferFrom~address~address~uint256_PausableToken__success(this, msgsender_MSG, msgvalue_MSG, _from_s858, _to_s858, _value_s858);
[L5219]  COND FALSE  !(revert)
[L5225]              __ret_0_ := __var_28;
[L2284]  RET         call __ret_0_ := transferFrom~address~address~uint256_USDollarHKex__success(this, msgsender_MSG, msgvalue_MSG, _from_s858, _to_s858, _value_s858);
[L2285]              assume !revert && gas >= 0;
[L8583]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_USDollarHKex(this, msgsender_MSG, msgvalue_MSG, _from_s858, _to_s858, _value_s858);
[L8688]  RET         call CorralChoice_USDollarHKex(this);
[L8688]  CALL        call CorralChoice_USDollarHKex(this);
[L8483]              havoc msgsender_MSG;
[L8484]              havoc msgvalue_MSG;
[L8485]              havoc choice;
[L8486]              havoc __ret_0_owner;
[L8487]              havoc _newOwner_s133;
[L8488]              havoc __ret_0_totalSupply;
[L8489]              havoc _owner_s278;
[L8490]              havoc __ret_0_balanceOf;
[L8491]              havoc _to_s828;
[L8492]              havoc _value_s828;
[L8493]              havoc __ret_0_transfer;
[L8494]              havoc _owner_s459;
[L8495]              havoc _spender_s459;
[L8496]              havoc __ret_0_allowance;
[L8497]              havoc _from_s858;
[L8498]              havoc _to_s858;
[L8499]              havoc _value_s858;
[L8500]              havoc __ret_0_transferFrom;
[L8501]              havoc _spender_s680;
[L8502]              havoc _value_s680;
[L8503]              havoc __ret_0_approve;
[L8504]              havoc _spender_s698;
[L8505]              havoc _addedValue_s698;
[L8506]              havoc success_s698;
[L8507]              havoc _spender_s716;
[L8508]              havoc _subtractedValue_s716;
[L8509]              havoc success_s716;
[L8510]              havoc __ret_0_paused;
[L8511]              havoc __ret_0_name;
[L8512]              havoc __ret_0_symbol;
[L8513]              havoc __ret_0_standard;
[L8514]              havoc __ret_0_decimals;
[L8515]              havoc __ret_0_INITIAL_SUPPLY;
[L8516]              havoc arg1229_s0;
[L8517]              havoc arg1230_s0;
[L8518]              havoc __ret_0_allocations;
[L8519]              havoc _address_s1226;
[L8520]              havoc total_value_s1226;
[L8521]              havoc times_s1226;
[L8522]              havoc balanceRequires_s1226;
[L8523]              havoc __ret_0_setAllocation;
[L8524]              havoc tmpNow;
[L8525]              havoc gas;
[L8526]              assume gas > 4000000 && gas <= 8000000;
[L8527]              tmpNow := now;
[L8528]              havoc now;
[L8529]              assume now > tmpNow;
[L8530]              assume msgsender_MSG != null;
[L8531]              assume DType[msgsender_MSG] != SafeMath;
[L8532]              assume DType[msgsender_MSG] != Ownable;
[L8533]              assume DType[msgsender_MSG] != ERC20Basic;
[L8534]              assume DType[msgsender_MSG] != BasicToken;
[L8535]              assume DType[msgsender_MSG] != ERC20;
[L8536]              assume DType[msgsender_MSG] != StandardToken;
[L8537]              assume DType[msgsender_MSG] != Pausable;
[L8538]              assume DType[msgsender_MSG] != PausableToken;
[L8539]              assume DType[msgsender_MSG] != USDollarHKex;
[L8540]              Alloc[msgsender_MSG] := true;
[L8541]  COND FALSE  !(choice == 20)
[L8547]  COND FALSE  !(choice == 19)
[L8553]  COND FALSE  !(choice == 18)
[L8559]  COND FALSE  !(choice == 17)
[L8565]  COND TRUE   choice == 16
[L8566]              gas := gas - 21000;
[L8567]  COND TRUE   gas >= 0
[L8568]              assume _value_s828 >= 0 && _value_s828 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8569]              assume msgvalue_MSG == 0;
[L8570]  CALL        call __ret_0_transfer := transfer~address~uint256_USDollarHKex(this, msgsender_MSG, msgvalue_MSG, _to_s828, _value_s828);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG != _to_s828 && (_value_s828 > balances_BasicToken[this][msgsender_MSG] || balances_BasicToken[this][_to_s828] + _value_s828 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && _value_s828 >= 0) && _value_s828 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][_to_s828] >= 0) && balances_BasicToken[this][_to_s828] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][msgsender_MSG] >= 0) && balances_BasicToken[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_USDollarHKex0 := true;
[L2]                 call_transfer_USDollarHKex0 := false;
[L2]                 revert := revert_hold;
[L2170]              havoc __exception;
[L2171]              revert := false;
[L2172]  COND FALSE  !(__exception)
[L2204]  CALL        call __ret_0_ := transfer~address~uint256_USDollarHKex__success(this, msgsender_MSG, msgvalue_MSG, _to_s828, _value_s828);
[L5147]  CALL        call __var_24 := canSubAllocation~address~uint256_USDollarHKex__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, _value_s828);
[L5328]  COND FALSE  !(sub_value_s949 == 0)
[L5332]  COND FALSE  !(balances_BasicToken[this][sender_s949] < sub_value_s949)
[L5336]  COND FALSE  !(alloc_allocations_USDollarHKex_lvl0[allocations_USDollarHKex[this]][sender_s949] == false)
[L5347]  COND TRUE   Length[M_Ref_Ref[allocations_USDollarHKex[this]][sender_s949]] == 0
[L5348]              __ret_0_ := true;
[L5147]  RET         call __var_24 := canSubAllocation~address~uint256_USDollarHKex__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, _value_s828);
[L5148]  COND FALSE  !(revert)
[L5151]  COND FALSE  !(!__var_24)
[L5155]  CALL        call subAllocation~address_USDollarHKex__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5554]              total_lockamount_s1052 := 0;
[L5555]              total_unlockamount_s1052 := 0;
[L5556]  COND FALSE  !(alloc_allocations_USDollarHKex_lvl0[allocations_USDollarHKex[this]][sender_s1052] == false)
[L5567]              j_s1052 := 0;
[L5568]  COND FALSE  !(j_s1052 < Length[M_Ref_Ref[allocations_USDollarHKex[this]][sender_s1052]])
[L5633]  COND FALSE  !(total_unlockamount_s1052 > 0)
[L5636]  COND FALSE  !(alloc_allocations_USDollarHKex_lvl0[allocations_USDollarHKex[this]][sender_s1052] == false)
[L5647]  COND FALSE  !(total_lockamount_s1052 == 0 && Length[M_Ref_Ref[allocations_USDollarHKex[this]][sender_s1052]] > 0)
[L5155]  RET         call subAllocation~address_USDollarHKex__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5156]  COND FALSE  !(revert)
[L5159]  COND TRUE   DType[this] == USDollarHKex
[L5160]  CALL        call __var_25 := transfer~address~uint256_PausableToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s828, _value_s828);
[L4759]  CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7619]  COND FALSE  !(!!paused_Pausable[this])
[L4759]  RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4760]  COND FALSE  !(revert)
[L4763]  COND FALSE  !(DType[this] == USDollarHKex)
[L4768]  COND TRUE   DType[this] == PausableToken
[L4769]  CALL        call __var_11 := transfer~address~uint256_BasicToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s641, _value_s641);
[L4208]              __var_2 := null;
[L4209]  COND FALSE  !(!(_to_s266 != null))
[L4213]  COND FALSE  !(!(_value_s266 <= balances_BasicToken[this][msgsender_MSG]))
[L4217]  CALL        call __var_3 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][msgsender_MSG], _value_s266);
[L3928]              assert b_s68 <= a_s68;
[L3929]              __ret_0_ := (a_s68 - b_s68) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4217]  RET         call __var_3 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][msgsender_MSG], _value_s266);
[L4218]  COND FALSE  !(revert)
[L4221]              sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][msgsender_MSG];
[L4222]              balances_BasicToken[this][msgsender_MSG] := __var_3;
[L4223]              sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][msgsender_MSG];
[L4224]  CALL        call __var_4 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_to_s266], _value_s266);
[L3942]              c_s92 := (a_s92 + b_s92) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3943]              assert c_s92 >= a_s92;
[L3944]              c_s92 := c_s92;
[L4224]  RET         call __var_4 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_to_s266], _value_s266);
[L4225]  COND FALSE  !(revert)
[L4228]              sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][_to_s266];
[L4229]              balances_BasicToken[this][_to_s266] := __var_4;
[L4230]              sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][_to_s266];
[L4231]              assert { :EventEmitted "Transfer_BasicToken" } true;
[L4232]              __ret_0_ := true;
[L4769]  RET         call __var_11 := transfer~address~uint256_BasicToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s641, _value_s641);
[L4770]  COND FALSE  !(revert)
[L4776]              __ret_0_ := __var_11;
[L5160]  RET         call __var_25 := transfer~address~uint256_PausableToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s828, _value_s828);
[L5161]  COND FALSE  !(revert)
[L5167]              __ret_0_ := __var_25;
[L2204]  RET         call __ret_0_ := transfer~address~uint256_USDollarHKex__success(this, msgsender_MSG, msgvalue_MSG, _to_s828, _value_s828);
[L2205]              assume !revert && gas >= 0;
[L8570]  RET         call __ret_0_transfer := transfer~address~uint256_USDollarHKex(this, msgsender_MSG, msgvalue_MSG, _to_s828, _value_s828);
[L8688]  RET         call CorralChoice_USDollarHKex(this);

Loop:
[L8688]  CALL        call CorralChoice_USDollarHKex(this);
[L8483]              havoc msgsender_MSG;
[L8484]              havoc msgvalue_MSG;
[L8485]              havoc choice;
[L8486]              havoc __ret_0_owner;
[L8487]              havoc _newOwner_s133;
[L8488]              havoc __ret_0_totalSupply;
[L8489]              havoc _owner_s278;
[L8490]              havoc __ret_0_balanceOf;
[L8491]              havoc _to_s828;
[L8492]              havoc _value_s828;
[L8493]              havoc __ret_0_transfer;
[L8494]              havoc _owner_s459;
[L8495]              havoc _spender_s459;
[L8496]              havoc __ret_0_allowance;
[L8497]              havoc _from_s858;
[L8498]              havoc _to_s858;
[L8499]              havoc _value_s858;
[L8500]              havoc __ret_0_transferFrom;
[L8501]              havoc _spender_s680;
[L8502]              havoc _value_s680;
[L8503]              havoc __ret_0_approve;
[L8504]              havoc _spender_s698;
[L8505]              havoc _addedValue_s698;
[L8506]              havoc success_s698;
[L8507]              havoc _spender_s716;
[L8508]              havoc _subtractedValue_s716;
[L8509]              havoc success_s716;
[L8510]              havoc __ret_0_paused;
[L8511]              havoc __ret_0_name;
[L8512]              havoc __ret_0_symbol;
[L8513]              havoc __ret_0_standard;
[L8514]              havoc __ret_0_decimals;
[L8515]              havoc __ret_0_INITIAL_SUPPLY;
[L8516]              havoc arg1229_s0;
[L8517]              havoc arg1230_s0;
[L8518]              havoc __ret_0_allocations;
[L8519]              havoc _address_s1226;
[L8520]              havoc total_value_s1226;
[L8521]              havoc times_s1226;
[L8522]              havoc balanceRequires_s1226;
[L8523]              havoc __ret_0_setAllocation;
[L8524]              havoc tmpNow;
[L8525]              havoc gas;
[L8526]              assume gas > 4000000 && gas <= 8000000;
[L8527]              tmpNow := now;
[L8528]              havoc now;
[L8529]              assume now > tmpNow;
[L8530]              assume msgsender_MSG != null;
[L8531]              assume DType[msgsender_MSG] != SafeMath;
[L8532]              assume DType[msgsender_MSG] != Ownable;
[L8533]              assume DType[msgsender_MSG] != ERC20Basic;
[L8534]              assume DType[msgsender_MSG] != BasicToken;
[L8535]              assume DType[msgsender_MSG] != ERC20;
[L8536]              assume DType[msgsender_MSG] != StandardToken;
[L8537]              assume DType[msgsender_MSG] != Pausable;
[L8538]              assume DType[msgsender_MSG] != PausableToken;
[L8539]              assume DType[msgsender_MSG] != USDollarHKex;
[L8540]              Alloc[msgsender_MSG] := true;
[L8541]  COND TRUE   choice == 20
[L8542]              gas := gas - 21000;
[L8543]  COND FALSE  !(gas >= 0)
[L8688]  RET         call CorralChoice_USDollarHKex(this);

[2020-11-25 08:10:57,889 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 08:10:57,889 INFO  L82        PathProgramCache]: Analyzing trace with hash -1966172636, now seen corresponding path program 1 times
[2020-11-25 08:10:57,890 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 08:10:57,910 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 08:10:58,091 INFO  L134       CoverageAnalysis]: Checked inductivity of 1044 backedges. 1 proven. 0 refuted. 0 times theorem prover too weak. 1043 trivial. 0 not checked.
[2020-11-25 08:10:58,091 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 08:10:58,091 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [7] imperfect sequences [] total 7
[2020-11-25 08:10:58,091 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 08:10:58,091 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 7 interpolants.
[2020-11-25 08:10:58,092 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=11, Invalid=31, Unknown=0, NotChecked=0, Total=42
[2020-11-25 08:10:58,092 INFO  L87              Difference]: Start difference. First operand 5311 states and 6034 transitions. cyclomatic complexity: 747 Second operand 7 states.
[2020-11-25 08:10:58,156 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 08:10:58,157 INFO  L93              Difference]: Finished difference Result 5353 states and 6074 transitions.
[2020-11-25 08:10:58,157 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 7 states. 
[2020-11-25 08:10:58,157 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 5353 states and 6074 transitions.
[2020-11-25 08:10:58,165 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 08:10:58,175 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 5353 states to 5301 states and 6020 transitions.
[2020-11-25 08:10:58,175 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1054
[2020-11-25 08:10:58,175 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1054
[2020-11-25 08:10:58,175 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 5301 states and 6020 transitions.
[2020-11-25 08:10:58,178 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 08:10:58,178 INFO  L728         BuchiCegarLoop]: Abstraction has 5301 states and 6020 transitions.
[2020-11-25 08:10:58,181 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 5301 states and 6020 transitions.
[2020-11-25 08:10:58,204 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 5301 to 5301.
[2020-11-25 08:10:58,204 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 5301 states.
[2020-11-25 08:10:58,210 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 5301 states to 5301 states and 6020 transitions.
[2020-11-25 08:10:58,210 INFO  L751         BuchiCegarLoop]: Abstraction has 5301 states and 6020 transitions.
[2020-11-25 08:10:58,210 INFO  L631         BuchiCegarLoop]: Abstraction has 5301 states and 6020 transitions.
[2020-11-25 08:10:58,210 INFO  L445         BuchiCegarLoop]: ======== Iteration 10============
[2020-11-25 08:10:58,210 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 5301 states and 6020 transitions.
[2020-11-25 08:10:58,215 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 08:10:58,215 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 08:10:58,215 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 08:10:58,217 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [12, 12, 12, 12, 12, 12, 12, 12, 12, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 08:10:58,217 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transfer_USDollarHKex0 := false;
[L2]                 call_transfer_USDollarHKex0 := false;
[L2]     CALL        call main();
[L8678]              assume null == 0;
[L8679]  CALL        call this := FreshRefGenerator__success();
[L3835]              havoc newRef;
[L3836]              assume Alloc[newRef] == false;
[L3837]              Alloc[newRef] := true;
[L3838]              assume newRef != null;
[L8679]  RET         call this := FreshRefGenerator__success();
[L8680]              assume now >= 0;
[L8681]              assume DType[this] == USDollarHKex;
[L8682]              assume msgvalue_MSG == 0;
[L8683]              gas := gas - 53000;
[L8684]  CALL        call USDollarHKex_USDollarHKex(this, msgsender_MSG, msgvalue_MSG);
[L2092]              havoc __exception;
[L2093]              revert := false;
[L2094]  COND FALSE  !(__exception)
[L2126]  CALL        call USDollarHKex_USDollarHKex__success(this, msgsender_MSG, msgvalue_MSG);
[L5079]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4107]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4092]              assume msgsender_MSG != null;
[L4093]              Balance[this] := 0;
[L4107]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4108]  COND FALSE  !(revert)
[L5079]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5080]  COND FALSE  !(revert)
[L5083]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4278]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4107]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4092]              assume msgsender_MSG != null;
[L4093]              Balance[this] := 0;
[L4107]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4108]  COND FALSE  !(revert)
[L4278]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4279]  COND FALSE  !(revert)
[L4282]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4259]              assume msgsender_MSG != null;
[L4260]              Balance[this] := 0;
[L4282]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4283]  COND FALSE  !(revert)
[L5083]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5084]  COND FALSE  !(revert)
[L5087]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4149]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4107]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4092]              assume msgsender_MSG != null;
[L4093]              Balance[this] := 0;
[L4107]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4108]  COND FALSE  !(revert)
[L4149]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4150]  COND FALSE  !(revert)
[L4153]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4127]              assume msgsender_MSG != null;
[L4128]              Balance[this] := 0;
[L4129]              balances_BasicToken[this] := zeroRefintArr();
[L4130]              sum_balances0[this] := 0;
[L4131]              totalSupply__BasicToken[this] := 0;
[L4153]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4154]  COND FALSE  !(revert)
[L5087]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L5088]  COND FALSE  !(revert)
[L5091]  CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4330]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4107]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4092]              assume msgsender_MSG != null;
[L4093]              Balance[this] := 0;
[L4107]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4108]  COND FALSE  !(revert)
[L4330]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4331]  COND FALSE  !(revert)
[L4334]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4278]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4107]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4092]              assume msgsender_MSG != null;
[L4093]              Balance[this] := 0;
[L4107]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4108]  COND FALSE  !(revert)
[L4278]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4279]  COND FALSE  !(revert)
[L4282]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4259]              assume msgsender_MSG != null;
[L4260]              Balance[this] := 0;
[L4282]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4283]  COND FALSE  !(revert)
[L4334]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4335]  COND FALSE  !(revert)
[L4338]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4149]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4107]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4092]              assume msgsender_MSG != null;
[L4093]              Balance[this] := 0;
[L4107]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4108]  COND FALSE  !(revert)
[L4149]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4150]  COND FALSE  !(revert)
[L4153]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4127]              assume msgsender_MSG != null;
[L4128]              Balance[this] := 0;
[L4129]              balances_BasicToken[this] := zeroRefintArr();
[L4130]              sum_balances0[this] := 0;
[L4131]              totalSupply__BasicToken[this] := 0;
[L4153]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4154]  COND FALSE  !(revert)
[L4338]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4339]  COND FALSE  !(revert)
[L4342]  CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4301]              assume msgsender_MSG != null;
[L4302]              Balance[this] := 0;
[L4303]              allowed_StandardToken[this] := zeroRefRefintArr();
[L4304]              sum_allowed1[this] := 0;
[L4342]  RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4343]  COND FALSE  !(revert)
[L5091]  RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L5092]  COND FALSE  !(revert)
[L5095]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3978]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3961]              assume msgsender_MSG != null;
[L3962]              Balance[this] := 0;
[L3963]              owner_Ownable[this] := null;
[L3965]              owner_Ownable[this] := msgsender_MSG;
[L3978]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3979]  COND FALSE  !(revert)
[L5095]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5096]  COND FALSE  !(revert)
[L5099]  CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3978]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3961]              assume msgsender_MSG != null;
[L3962]              Balance[this] := 0;
[L3963]              owner_Ownable[this] := null;
[L3965]              owner_Ownable[this] := msgsender_MSG;
[L3978]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3979]  COND FALSE  !(revert)
[L4574]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]  COND FALSE  !(revert)
[L4578]  CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4554]              assume msgsender_MSG != null;
[L4555]              Balance[this] := 0;
[L4556]              paused_Pausable[this] := false;
[L4578]  RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4579]  COND FALSE  !(revert)
[L5099]  RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L5100]  COND FALSE  !(revert)
[L5103]  CALL        call PausableToken_PausableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4700]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4107]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4092]              assume msgsender_MSG != null;
[L4093]              Balance[this] := 0;
[L4107]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4108]  COND FALSE  !(revert)
[L4700]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4701]  COND FALSE  !(revert)
[L4704]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4278]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4107]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4092]              assume msgsender_MSG != null;
[L4093]              Balance[this] := 0;
[L4107]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4108]  COND FALSE  !(revert)
[L4278]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4279]  COND FALSE  !(revert)
[L4282]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4259]              assume msgsender_MSG != null;
[L4260]              Balance[this] := 0;
[L4282]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4283]  COND FALSE  !(revert)
[L4704]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4705]  COND FALSE  !(revert)
[L4708]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4149]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4107]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4092]              assume msgsender_MSG != null;
[L4093]              Balance[this] := 0;
[L4107]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4108]  COND FALSE  !(revert)
[L4149]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4150]  COND FALSE  !(revert)
[L4153]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4127]              assume msgsender_MSG != null;
[L4128]              Balance[this] := 0;
[L4129]              balances_BasicToken[this] := zeroRefintArr();
[L4130]              sum_balances0[this] := 0;
[L4131]              totalSupply__BasicToken[this] := 0;
[L4153]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4154]  COND FALSE  !(revert)
[L4708]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4709]  COND FALSE  !(revert)
[L4712]  CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4330]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4107]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4092]              assume msgsender_MSG != null;
[L4093]              Balance[this] := 0;
[L4107]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4108]  COND FALSE  !(revert)
[L4330]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4331]  COND FALSE  !(revert)
[L4334]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4278]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4107]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4092]              assume msgsender_MSG != null;
[L4093]              Balance[this] := 0;
[L4107]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4108]  COND FALSE  !(revert)
[L4278]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4279]  COND FALSE  !(revert)
[L4282]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4259]              assume msgsender_MSG != null;
[L4260]              Balance[this] := 0;
[L4282]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4283]  COND FALSE  !(revert)
[L4334]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4335]  COND FALSE  !(revert)
[L4338]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4149]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4107]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4092]              assume msgsender_MSG != null;
[L4093]              Balance[this] := 0;
[L4107]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4108]  COND FALSE  !(revert)
[L4149]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4150]  COND FALSE  !(revert)
[L4153]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4127]              assume msgsender_MSG != null;
[L4128]              Balance[this] := 0;
[L4129]              balances_BasicToken[this] := zeroRefintArr();
[L4130]              sum_balances0[this] := 0;
[L4131]              totalSupply__BasicToken[this] := 0;
[L4153]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4154]  COND FALSE  !(revert)
[L4338]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4339]  COND FALSE  !(revert)
[L4342]  CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4301]              assume msgsender_MSG != null;
[L4302]              Balance[this] := 0;
[L4303]              allowed_StandardToken[this] := zeroRefRefintArr();
[L4304]              sum_allowed1[this] := 0;
[L4342]  RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4343]  COND FALSE  !(revert)
[L4712]  RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4713]  COND FALSE  !(revert)
[L4716]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3978]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3961]              assume msgsender_MSG != null;
[L3962]              Balance[this] := 0;
[L3963]              owner_Ownable[this] := null;
[L3965]              owner_Ownable[this] := msgsender_MSG;
[L3978]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3979]  COND FALSE  !(revert)
[L4716]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L4717]  COND FALSE  !(revert)
[L4720]  CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3978]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3961]              assume msgsender_MSG != null;
[L3962]              Balance[this] := 0;
[L3963]              owner_Ownable[this] := null;
[L3965]              owner_Ownable[this] := msgsender_MSG;
[L3978]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3979]  COND FALSE  !(revert)
[L4574]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]  COND FALSE  !(revert)
[L4578]  CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4554]              assume msgsender_MSG != null;
[L4555]              Balance[this] := 0;
[L4556]              paused_Pausable[this] := false;
[L4578]  RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4579]  COND FALSE  !(revert)
[L4720]  RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L4721]  COND FALSE  !(revert)
[L4724]  CALL        call PausableToken_PausableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4661]              assume msgsender_MSG != null;
[L4662]              Balance[this] := 0;
[L4724]  RET         call PausableToken_PausableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4725]  COND FALSE  !(revert)
[L5103]  RET         call PausableToken_PausableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L5104]  COND FALSE  !(revert)
[L5107]  CALL        call USDollarHKex_USDollarHKex_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5013]              assume msgsender_MSG != null;
[L5014]              Balance[this] := 0;
[L5015]              name_USDollarHKex[this] := 749918206;
[L5016]              symbol_USDollarHKex[this] := 2047713833;
[L5017]              standard_USDollarHKex[this] := -1333876585;
[L5018]              decimals_USDollarHKex[this] := 18;
[L5019]              __var_22 := decimals_USDollarHKex[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5020]              INITIAL_SUPPLY_USDollarHKex[this] := nonlinearMul(25 * (100000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936), nonlinearPow(10, decimals_USDollarHKex[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5022]  CALL        call __var_23 := FreshRefGenerator__success();
[L3835]              havoc newRef;
[L3836]              assume Alloc[newRef] == false;
[L3837]              Alloc[newRef] := true;
[L3838]              assume newRef != null;
[L5022]  RET         call __var_23 := FreshRefGenerator__success();
[L5023]  COND FALSE  !(revert)
[L5026]              allocations_USDollarHKex[this] := __var_23;
[L5028]              alloc_allocations_USDollarHKex_lvl0[allocations_USDollarHKex[this]] := zeroRefboolArr();
[L5030]              totalSupply__BasicToken[this] := INITIAL_SUPPLY_USDollarHKex[this];
[L5031]              sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][msgsender_MSG];
[L5032]              balances_BasicToken[this][msgsender_MSG] := INITIAL_SUPPLY_USDollarHKex[this];
[L5033]              sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][msgsender_MSG];
[L5034]              assert { :EventEmitted "Transfer_USDollarHKex" } true;
[L5107]  RET         call USDollarHKex_USDollarHKex_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5108]  COND FALSE  !(revert)
[L2126]  RET         call USDollarHKex_USDollarHKex__success(this, msgsender_MSG, msgvalue_MSG);
[L2127]              assume !revert && gas >= 0;
[L8684]  RET         call USDollarHKex_USDollarHKex(this, msgsender_MSG, msgvalue_MSG);
[L8685]              assume !revert && gas >= 0;
[L8688]  CALL        call CorralChoice_USDollarHKex(this);
[L8483]              havoc msgsender_MSG;
[L8484]              havoc msgvalue_MSG;
[L8485]              havoc choice;
[L8486]              havoc __ret_0_owner;
[L8487]              havoc _newOwner_s133;
[L8488]              havoc __ret_0_totalSupply;
[L8489]              havoc _owner_s278;
[L8490]              havoc __ret_0_balanceOf;
[L8491]              havoc _to_s828;
[L8492]              havoc _value_s828;
[L8493]              havoc __ret_0_transfer;
[L8494]              havoc _owner_s459;
[L8495]              havoc _spender_s459;
[L8496]              havoc __ret_0_allowance;
[L8497]              havoc _from_s858;
[L8498]              havoc _to_s858;
[L8499]              havoc _value_s858;
[L8500]              havoc __ret_0_transferFrom;
[L8501]              havoc _spender_s680;
[L8502]              havoc _value_s680;
[L8503]              havoc __ret_0_approve;
[L8504]              havoc _spender_s698;
[L8505]              havoc _addedValue_s698;
[L8506]              havoc success_s698;
[L8507]              havoc _spender_s716;
[L8508]              havoc _subtractedValue_s716;
[L8509]              havoc success_s716;
[L8510]              havoc __ret_0_paused;
[L8511]              havoc __ret_0_name;
[L8512]              havoc __ret_0_symbol;
[L8513]              havoc __ret_0_standard;
[L8514]              havoc __ret_0_decimals;
[L8515]              havoc __ret_0_INITIAL_SUPPLY;
[L8516]              havoc arg1229_s0;
[L8517]              havoc arg1230_s0;
[L8518]              havoc __ret_0_allocations;
[L8519]              havoc _address_s1226;
[L8520]              havoc total_value_s1226;
[L8521]              havoc times_s1226;
[L8522]              havoc balanceRequires_s1226;
[L8523]              havoc __ret_0_setAllocation;
[L8524]              havoc tmpNow;
[L8525]              havoc gas;
[L8526]              assume gas > 4000000 && gas <= 8000000;
[L8527]              tmpNow := now;
[L8528]              havoc now;
[L8529]              assume now > tmpNow;
[L8530]              assume msgsender_MSG != null;
[L8531]              assume DType[msgsender_MSG] != SafeMath;
[L8532]              assume DType[msgsender_MSG] != Ownable;
[L8533]              assume DType[msgsender_MSG] != ERC20Basic;
[L8534]              assume DType[msgsender_MSG] != BasicToken;
[L8535]              assume DType[msgsender_MSG] != ERC20;
[L8536]              assume DType[msgsender_MSG] != StandardToken;
[L8537]              assume DType[msgsender_MSG] != Pausable;
[L8538]              assume DType[msgsender_MSG] != PausableToken;
[L8539]              assume DType[msgsender_MSG] != USDollarHKex;
[L8540]              Alloc[msgsender_MSG] := true;
[L8541]  COND FALSE  !(choice == 20)
[L8547]  COND FALSE  !(choice == 19)
[L8553]  COND FALSE  !(choice == 18)
[L8559]  COND FALSE  !(choice == 17)
[L8565]  COND FALSE  !(choice == 16)
[L8572]  COND FALSE  !(choice == 15)
[L8578]  COND TRUE   choice == 14
[L8579]              gas := gas - 21000;
[L8580]  COND TRUE   gas >= 0
[L8581]              assume _value_s858 >= 0 && _value_s858 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8582]              assume msgvalue_MSG == 0;
[L8583]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_USDollarHKex(this, msgsender_MSG, msgvalue_MSG, _from_s858, _to_s858, _value_s858);
[L2250]              havoc __exception;
[L2251]              revert := false;
[L2252]  COND FALSE  !(__exception)
[L2284]  CALL        call __ret_0_ := transferFrom~address~address~uint256_USDollarHKex__success(this, msgsender_MSG, msgvalue_MSG, _from_s858, _to_s858, _value_s858);
[L5205]  CALL        call __var_27 := canSubAllocation~address~uint256_USDollarHKex__success(this, msgsender_MSG, msgvalue_MSG, _from_s858, _value_s858);
[L5328]  COND FALSE  !(sub_value_s949 == 0)
[L5332]  COND FALSE  !(balances_BasicToken[this][sender_s949] < sub_value_s949)
[L5336]  COND FALSE  !(alloc_allocations_USDollarHKex_lvl0[allocations_USDollarHKex[this]][sender_s949] == false)
[L5347]  COND TRUE   Length[M_Ref_Ref[allocations_USDollarHKex[this]][sender_s949]] == 0
[L5348]              __ret_0_ := true;
[L5205]  RET         call __var_27 := canSubAllocation~address~uint256_USDollarHKex__success(this, msgsender_MSG, msgvalue_MSG, _from_s858, _value_s858);
[L5206]  COND FALSE  !(revert)
[L5209]  COND FALSE  !(!__var_27)
[L5213]  CALL        call subAllocation~address_USDollarHKex__success(this, msgsender_MSG, msgvalue_MSG, _from_s858);
[L5554]              total_lockamount_s1052 := 0;
[L5555]              total_unlockamount_s1052 := 0;
[L5556]  COND FALSE  !(alloc_allocations_USDollarHKex_lvl0[allocations_USDollarHKex[this]][sender_s1052] == false)
[L5567]              j_s1052 := 0;
[L5568]  COND FALSE  !(j_s1052 < Length[M_Ref_Ref[allocations_USDollarHKex[this]][sender_s1052]])
[L5633]  COND FALSE  !(total_unlockamount_s1052 > 0)
[L5636]  COND FALSE  !(alloc_allocations_USDollarHKex_lvl0[allocations_USDollarHKex[this]][sender_s1052] == false)
[L5647]  COND FALSE  !(total_lockamount_s1052 == 0 && Length[M_Ref_Ref[allocations_USDollarHKex[this]][sender_s1052]] > 0)
[L5213]  RET         call subAllocation~address_USDollarHKex__success(this, msgsender_MSG, msgvalue_MSG, _from_s858);
[L5214]  COND FALSE  !(revert)
[L5217]  COND TRUE   DType[this] == USDollarHKex
[L5218]  CALL        call __var_28 := transferFrom~address~address~uint256_PausableToken__success(this, msgsender_MSG, msgvalue_MSG, _from_s858, _to_s858, _value_s858);
[L4809]  CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7619]  COND FALSE  !(!!paused_Pausable[this])
[L4809]  RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4810]  COND FALSE  !(revert)
[L4813]  COND TRUE   DType[this] == USDollarHKex
[L4814]  CALL        call __var_13 := transferFrom~address~address~uint256_StandardToken__success(this, msgsender_MSG, msgvalue_MSG, _from_s662, _to_s662, _value_s662);
[L4398]              __var_5 := null;
[L4399]  COND FALSE  !(!(_to_s415 != null))
[L4403]  COND FALSE  !(!(_value_s415 <= balances_BasicToken[this][_from_s415]))
[L4407]  COND FALSE  !(!(_value_s415 <= allowed_StandardToken[this][_from_s415][msgsender_MSG]))
[L4411]  CALL        call __var_6 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_from_s415], _value_s415);
[L3928]              assert b_s68 <= a_s68;
[L3929]              __ret_0_ := (a_s68 - b_s68) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4411]  RET         call __var_6 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_from_s415], _value_s415);
[L4412]  COND FALSE  !(revert)
[L4415]              sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][_from_s415];
[L4416]              balances_BasicToken[this][_from_s415] := __var_6;
[L4417]              sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][_from_s415];
[L4418]  CALL        call __var_7 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_to_s415], _value_s415);
[L3942]              c_s92 := (a_s92 + b_s92) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3943]              assert c_s92 >= a_s92;
[L3944]              c_s92 := c_s92;
[L4418]  RET         call __var_7 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_to_s415], _value_s415);
[L4419]  COND FALSE  !(revert)
[L4422]              sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][_to_s415];
[L4423]              balances_BasicToken[this][_to_s415] := __var_7;
[L4424]              sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][_to_s415];
[L4425]  CALL        call __var_8 := sub~uint256~uint256_SafeMath__success(this, this, 0, allowed_StandardToken[this][_from_s415][msgsender_MSG], _value_s415);
[L3928]              assert b_s68 <= a_s68;
[L3929]              __ret_0_ := (a_s68 - b_s68) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4425]  RET         call __var_8 := sub~uint256~uint256_SafeMath__success(this, this, 0, allowed_StandardToken[this][_from_s415][msgsender_MSG], _value_s415);
[L4426]  COND FALSE  !(revert)
[L4429]              sum_allowed1[_from_s415] := sum_allowed1[_from_s415] - allowed_StandardToken[this][_from_s415][msgsender_MSG];
[L4430]              allowed_StandardToken[this][_from_s415][msgsender_MSG] := __var_8;
[L4431]              sum_allowed1[_from_s415] := sum_allowed1[_from_s415] + allowed_StandardToken[this][_from_s415][msgsender_MSG];
[L4432]              assert { :EventEmitted "Transfer_StandardToken" } true;
[L4433]              __ret_0_ := true;
[L4814]  RET         call __var_13 := transferFrom~address~address~uint256_StandardToken__success(this, msgsender_MSG, msgvalue_MSG, _from_s662, _to_s662, _value_s662);
[L4815]  COND FALSE  !(revert)
[L4826]              __ret_0_ := __var_13;
[L5218]  RET         call __var_28 := transferFrom~address~address~uint256_PausableToken__success(this, msgsender_MSG, msgvalue_MSG, _from_s858, _to_s858, _value_s858);
[L5219]  COND FALSE  !(revert)
[L5225]              __ret_0_ := __var_28;
[L2284]  RET         call __ret_0_ := transferFrom~address~address~uint256_USDollarHKex__success(this, msgsender_MSG, msgvalue_MSG, _from_s858, _to_s858, _value_s858);
[L2285]              assume !revert && gas >= 0;
[L8583]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_USDollarHKex(this, msgsender_MSG, msgvalue_MSG, _from_s858, _to_s858, _value_s858);
[L8688]  RET         call CorralChoice_USDollarHKex(this);
[L8688]  CALL        call CorralChoice_USDollarHKex(this);
[L8483]              havoc msgsender_MSG;
[L8484]              havoc msgvalue_MSG;
[L8485]              havoc choice;
[L8486]              havoc __ret_0_owner;
[L8487]              havoc _newOwner_s133;
[L8488]              havoc __ret_0_totalSupply;
[L8489]              havoc _owner_s278;
[L8490]              havoc __ret_0_balanceOf;
[L8491]              havoc _to_s828;
[L8492]              havoc _value_s828;
[L8493]              havoc __ret_0_transfer;
[L8494]              havoc _owner_s459;
[L8495]              havoc _spender_s459;
[L8496]              havoc __ret_0_allowance;
[L8497]              havoc _from_s858;
[L8498]              havoc _to_s858;
[L8499]              havoc _value_s858;
[L8500]              havoc __ret_0_transferFrom;
[L8501]              havoc _spender_s680;
[L8502]              havoc _value_s680;
[L8503]              havoc __ret_0_approve;
[L8504]              havoc _spender_s698;
[L8505]              havoc _addedValue_s698;
[L8506]              havoc success_s698;
[L8507]              havoc _spender_s716;
[L8508]              havoc _subtractedValue_s716;
[L8509]              havoc success_s716;
[L8510]              havoc __ret_0_paused;
[L8511]              havoc __ret_0_name;
[L8512]              havoc __ret_0_symbol;
[L8513]              havoc __ret_0_standard;
[L8514]              havoc __ret_0_decimals;
[L8515]              havoc __ret_0_INITIAL_SUPPLY;
[L8516]              havoc arg1229_s0;
[L8517]              havoc arg1230_s0;
[L8518]              havoc __ret_0_allocations;
[L8519]              havoc _address_s1226;
[L8520]              havoc total_value_s1226;
[L8521]              havoc times_s1226;
[L8522]              havoc balanceRequires_s1226;
[L8523]              havoc __ret_0_setAllocation;
[L8524]              havoc tmpNow;
[L8525]              havoc gas;
[L8526]              assume gas > 4000000 && gas <= 8000000;
[L8527]              tmpNow := now;
[L8528]              havoc now;
[L8529]              assume now > tmpNow;
[L8530]              assume msgsender_MSG != null;
[L8531]              assume DType[msgsender_MSG] != SafeMath;
[L8532]              assume DType[msgsender_MSG] != Ownable;
[L8533]              assume DType[msgsender_MSG] != ERC20Basic;
[L8534]              assume DType[msgsender_MSG] != BasicToken;
[L8535]              assume DType[msgsender_MSG] != ERC20;
[L8536]              assume DType[msgsender_MSG] != StandardToken;
[L8537]              assume DType[msgsender_MSG] != Pausable;
[L8538]              assume DType[msgsender_MSG] != PausableToken;
[L8539]              assume DType[msgsender_MSG] != USDollarHKex;
[L8540]              Alloc[msgsender_MSG] := true;
[L8541]  COND FALSE  !(choice == 20)
[L8547]  COND FALSE  !(choice == 19)
[L8553]  COND FALSE  !(choice == 18)
[L8559]  COND FALSE  !(choice == 17)
[L8565]  COND TRUE   choice == 16
[L8566]              gas := gas - 21000;
[L8567]  COND TRUE   gas >= 0
[L8568]              assume _value_s828 >= 0 && _value_s828 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8569]              assume msgvalue_MSG == 0;
[L8570]  CALL        call __ret_0_transfer := transfer~address~uint256_USDollarHKex(this, msgsender_MSG, msgvalue_MSG, _to_s828, _value_s828);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG != _to_s828 && (_value_s828 > balances_BasicToken[this][msgsender_MSG] || balances_BasicToken[this][_to_s828] + _value_s828 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && _value_s828 >= 0) && _value_s828 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][_to_s828] >= 0) && balances_BasicToken[this][_to_s828] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][msgsender_MSG] >= 0) && balances_BasicToken[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_USDollarHKex0 := true;
[L2]                 call_transfer_USDollarHKex0 := false;
[L2]                 revert := revert_hold;
[L2170]              havoc __exception;
[L2171]              revert := false;
[L2172]  COND FALSE  !(__exception)
[L2204]  CALL        call __ret_0_ := transfer~address~uint256_USDollarHKex__success(this, msgsender_MSG, msgvalue_MSG, _to_s828, _value_s828);
[L5147]  CALL        call __var_24 := canSubAllocation~address~uint256_USDollarHKex__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, _value_s828);
[L5328]  COND FALSE  !(sub_value_s949 == 0)
[L5332]  COND FALSE  !(balances_BasicToken[this][sender_s949] < sub_value_s949)
[L5336]  COND TRUE   alloc_allocations_USDollarHKex_lvl0[allocations_USDollarHKex[this]][sender_s949] == false
[L5337]  CALL        call __var_30 := FreshRefGenerator__success();
[L3835]              havoc newRef;
[L3836]              assume Alloc[newRef] == false;
[L3837]              Alloc[newRef] := true;
[L3838]              assume newRef != null;
[L5337]  RET         call __var_30 := FreshRefGenerator__success();
[L5338]  COND FALSE  !(revert)
[L5341]              assume Length[M_Ref_Ref[allocations_USDollarHKex[this]][sender_s949]] == 0;
[L5342]              alloc_allocations_USDollarHKex_lvl0[allocations_USDollarHKex[this]][sender_s949] := true;
[L5343]              assume M_int_Ref[M_Ref_Ref[allocations_USDollarHKex[this]][sender_s949]] == zerointRefArr();
[L5344]              assume M_Ref_Ref[allocations_USDollarHKex[this]][sender_s949] == __var_30;
[L5345]              assume sum[M_Ref_Ref[allocations_USDollarHKex[this]][sender_s949]] == 0;
[L5347]  COND TRUE   Length[M_Ref_Ref[allocations_USDollarHKex[this]][sender_s949]] == 0
[L5348]              __ret_0_ := true;
[L5147]  RET         call __var_24 := canSubAllocation~address~uint256_USDollarHKex__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, _value_s828);
[L5148]  COND FALSE  !(revert)
[L5151]  COND FALSE  !(!__var_24)
[L5155]  CALL        call subAllocation~address_USDollarHKex__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5554]              total_lockamount_s1052 := 0;
[L5555]              total_unlockamount_s1052 := 0;
[L5556]  COND FALSE  !(alloc_allocations_USDollarHKex_lvl0[allocations_USDollarHKex[this]][sender_s1052] == false)
[L5567]              j_s1052 := 0;
[L5568]  COND FALSE  !(j_s1052 < Length[M_Ref_Ref[allocations_USDollarHKex[this]][sender_s1052]])
[L5633]  COND FALSE  !(total_unlockamount_s1052 > 0)
[L5636]  COND FALSE  !(alloc_allocations_USDollarHKex_lvl0[allocations_USDollarHKex[this]][sender_s1052] == false)
[L5647]  COND FALSE  !(total_lockamount_s1052 == 0 && Length[M_Ref_Ref[allocations_USDollarHKex[this]][sender_s1052]] > 0)
[L5155]  RET         call subAllocation~address_USDollarHKex__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5156]  COND FALSE  !(revert)
[L5159]  COND TRUE   DType[this] == USDollarHKex
[L5160]  CALL        call __var_25 := transfer~address~uint256_PausableToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s828, _value_s828);
[L4759]  CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7619]  COND FALSE  !(!!paused_Pausable[this])
[L4759]  RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4760]  COND FALSE  !(revert)
[L4763]  COND FALSE  !(DType[this] == USDollarHKex)
[L4768]  COND TRUE   DType[this] == PausableToken
[L4769]  CALL        call __var_11 := transfer~address~uint256_BasicToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s641, _value_s641);
[L4208]              __var_2 := null;
[L4209]  COND FALSE  !(!(_to_s266 != null))
[L4213]  COND FALSE  !(!(_value_s266 <= balances_BasicToken[this][msgsender_MSG]))
[L4217]  CALL        call __var_3 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][msgsender_MSG], _value_s266);
[L3928]              assert b_s68 <= a_s68;
[L3929]              __ret_0_ := (a_s68 - b_s68) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4217]  RET         call __var_3 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][msgsender_MSG], _value_s266);
[L4218]  COND FALSE  !(revert)
[L4221]              sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][msgsender_MSG];
[L4222]              balances_BasicToken[this][msgsender_MSG] := __var_3;
[L4223]              sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][msgsender_MSG];
[L4224]  CALL        call __var_4 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_to_s266], _value_s266);
[L3942]              c_s92 := (a_s92 + b_s92) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3943]              assert c_s92 >= a_s92;
[L3944]              c_s92 := c_s92;
[L4224]  RET         call __var_4 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_to_s266], _value_s266);
[L4225]  COND FALSE  !(revert)
[L4228]              sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][_to_s266];
[L4229]              balances_BasicToken[this][_to_s266] := __var_4;
[L4230]              sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][_to_s266];
[L4231]              assert { :EventEmitted "Transfer_BasicToken" } true;
[L4232]              __ret_0_ := true;
[L4769]  RET         call __var_11 := transfer~address~uint256_BasicToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s641, _value_s641);
[L4770]  COND FALSE  !(revert)
[L4776]              __ret_0_ := __var_11;
[L5160]  RET         call __var_25 := transfer~address~uint256_PausableToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s828, _value_s828);
[L5161]  COND FALSE  !(revert)
[L5167]              __ret_0_ := __var_25;
[L2204]  RET         call __ret_0_ := transfer~address~uint256_USDollarHKex__success(this, msgsender_MSG, msgvalue_MSG, _to_s828, _value_s828);
[L2205]              assume !revert && gas >= 0;
[L8570]  RET         call __ret_0_transfer := transfer~address~uint256_USDollarHKex(this, msgsender_MSG, msgvalue_MSG, _to_s828, _value_s828);
[L8688]  RET         call CorralChoice_USDollarHKex(this);

Loop:
[L8688]  CALL        call CorralChoice_USDollarHKex(this);
[L8483]              havoc msgsender_MSG;
[L8484]              havoc msgvalue_MSG;
[L8485]              havoc choice;
[L8486]              havoc __ret_0_owner;
[L8487]              havoc _newOwner_s133;
[L8488]              havoc __ret_0_totalSupply;
[L8489]              havoc _owner_s278;
[L8490]              havoc __ret_0_balanceOf;
[L8491]              havoc _to_s828;
[L8492]              havoc _value_s828;
[L8493]              havoc __ret_0_transfer;
[L8494]              havoc _owner_s459;
[L8495]              havoc _spender_s459;
[L8496]              havoc __ret_0_allowance;
[L8497]              havoc _from_s858;
[L8498]              havoc _to_s858;
[L8499]              havoc _value_s858;
[L8500]              havoc __ret_0_transferFrom;
[L8501]              havoc _spender_s680;
[L8502]              havoc _value_s680;
[L8503]              havoc __ret_0_approve;
[L8504]              havoc _spender_s698;
[L8505]              havoc _addedValue_s698;
[L8506]              havoc success_s698;
[L8507]              havoc _spender_s716;
[L8508]              havoc _subtractedValue_s716;
[L8509]              havoc success_s716;
[L8510]              havoc __ret_0_paused;
[L8511]              havoc __ret_0_name;
[L8512]              havoc __ret_0_symbol;
[L8513]              havoc __ret_0_standard;
[L8514]              havoc __ret_0_decimals;
[L8515]              havoc __ret_0_INITIAL_SUPPLY;
[L8516]              havoc arg1229_s0;
[L8517]              havoc arg1230_s0;
[L8518]              havoc __ret_0_allocations;
[L8519]              havoc _address_s1226;
[L8520]              havoc total_value_s1226;
[L8521]              havoc times_s1226;
[L8522]              havoc balanceRequires_s1226;
[L8523]              havoc __ret_0_setAllocation;
[L8524]              havoc tmpNow;
[L8525]              havoc gas;
[L8526]              assume gas > 4000000 && gas <= 8000000;
[L8527]              tmpNow := now;
[L8528]              havoc now;
[L8529]              assume now > tmpNow;
[L8530]              assume msgsender_MSG != null;
[L8531]              assume DType[msgsender_MSG] != SafeMath;
[L8532]              assume DType[msgsender_MSG] != Ownable;
[L8533]              assume DType[msgsender_MSG] != ERC20Basic;
[L8534]              assume DType[msgsender_MSG] != BasicToken;
[L8535]              assume DType[msgsender_MSG] != ERC20;
[L8536]              assume DType[msgsender_MSG] != StandardToken;
[L8537]              assume DType[msgsender_MSG] != Pausable;
[L8538]              assume DType[msgsender_MSG] != PausableToken;
[L8539]              assume DType[msgsender_MSG] != USDollarHKex;
[L8540]              Alloc[msgsender_MSG] := true;
[L8541]  COND TRUE   choice == 20
[L8542]              gas := gas - 21000;
[L8543]  COND FALSE  !(gas >= 0)
[L8688]  RET         call CorralChoice_USDollarHKex(this);

[2020-11-25 08:10:58,221 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 08:10:58,222 INFO  L82        PathProgramCache]: Analyzing trace with hash -1536728793, now seen corresponding path program 1 times
[2020-11-25 08:10:58,222 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 08:10:58,241 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 08:10:58,430 INFO  L134       CoverageAnalysis]: Checked inductivity of 1032 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 1032 trivial. 0 not checked.
[2020-11-25 08:10:58,430 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 08:10:58,430 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [6] imperfect sequences [] total 6
[2020-11-25 08:10:58,431 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 08:10:58,431 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 7 interpolants.
[2020-11-25 08:10:58,431 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=11, Invalid=31, Unknown=0, NotChecked=0, Total=42
[2020-11-25 08:10:58,431 INFO  L87              Difference]: Start difference. First operand 5301 states and 6020 transitions. cyclomatic complexity: 743 Second operand 7 states.
[2020-11-25 08:10:58,498 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 08:10:58,498 INFO  L93              Difference]: Finished difference Result 5376 states and 6099 transitions.
[2020-11-25 08:10:58,498 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 7 states. 
[2020-11-25 08:10:58,498 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 5376 states and 6099 transitions.
[2020-11-25 08:10:58,506 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 08:10:58,515 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 5376 states to 5307 states and 6027 transitions.
[2020-11-25 08:10:58,515 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1057
[2020-11-25 08:10:58,516 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1057
[2020-11-25 08:10:58,516 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 5307 states and 6027 transitions.
[2020-11-25 08:10:58,518 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 08:10:58,519 INFO  L728         BuchiCegarLoop]: Abstraction has 5307 states and 6027 transitions.
[2020-11-25 08:10:58,522 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 5307 states and 6027 transitions.
[2020-11-25 08:10:58,543 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 5307 to 5307.
[2020-11-25 08:10:58,543 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 5307 states.
[2020-11-25 08:10:58,548 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 5307 states to 5307 states and 6027 transitions.
[2020-11-25 08:10:58,548 INFO  L751         BuchiCegarLoop]: Abstraction has 5307 states and 6027 transitions.
[2020-11-25 08:10:58,548 INFO  L631         BuchiCegarLoop]: Abstraction has 5307 states and 6027 transitions.
[2020-11-25 08:10:58,548 INFO  L445         BuchiCegarLoop]: ======== Iteration 11============
[2020-11-25 08:10:58,548 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 5307 states and 6027 transitions.
[2020-11-25 08:10:58,553 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 08:10:58,553 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 08:10:58,553 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 08:10:58,554 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [12, 12, 12, 12, 12, 12, 12, 12, 12, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 08:10:58,555 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transfer_USDollarHKex0 := false;
[L2]                 call_transfer_USDollarHKex0 := false;
[L2]     CALL        call main();
[L8678]              assume null == 0;
[L8679]  CALL        call this := FreshRefGenerator__success();
[L3835]              havoc newRef;
[L3836]              assume Alloc[newRef] == false;
[L3837]              Alloc[newRef] := true;
[L3838]              assume newRef != null;
[L8679]  RET         call this := FreshRefGenerator__success();
[L8680]              assume now >= 0;
[L8681]              assume DType[this] == USDollarHKex;
[L8682]              assume msgvalue_MSG == 0;
[L8683]              gas := gas - 53000;
[L8684]  CALL        call USDollarHKex_USDollarHKex(this, msgsender_MSG, msgvalue_MSG);
[L2092]              havoc __exception;
[L2093]              revert := false;
[L2094]  COND FALSE  !(__exception)
[L2126]  CALL        call USDollarHKex_USDollarHKex__success(this, msgsender_MSG, msgvalue_MSG);
[L5079]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4107]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4092]              assume msgsender_MSG != null;
[L4093]              Balance[this] := 0;
[L4107]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4108]  COND FALSE  !(revert)
[L5079]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5080]  COND FALSE  !(revert)
[L5083]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4278]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4107]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4092]              assume msgsender_MSG != null;
[L4093]              Balance[this] := 0;
[L4107]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4108]  COND FALSE  !(revert)
[L4278]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4279]  COND FALSE  !(revert)
[L4282]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4259]              assume msgsender_MSG != null;
[L4260]              Balance[this] := 0;
[L4282]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4283]  COND FALSE  !(revert)
[L5083]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5084]  COND FALSE  !(revert)
[L5087]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4149]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4107]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4092]              assume msgsender_MSG != null;
[L4093]              Balance[this] := 0;
[L4107]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4108]  COND FALSE  !(revert)
[L4149]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4150]  COND FALSE  !(revert)
[L4153]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4127]              assume msgsender_MSG != null;
[L4128]              Balance[this] := 0;
[L4129]              balances_BasicToken[this] := zeroRefintArr();
[L4130]              sum_balances0[this] := 0;
[L4131]              totalSupply__BasicToken[this] := 0;
[L4153]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4154]  COND FALSE  !(revert)
[L5087]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L5088]  COND FALSE  !(revert)
[L5091]  CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4330]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4107]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4092]              assume msgsender_MSG != null;
[L4093]              Balance[this] := 0;
[L4107]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4108]  COND FALSE  !(revert)
[L4330]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4331]  COND FALSE  !(revert)
[L4334]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4278]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4107]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4092]              assume msgsender_MSG != null;
[L4093]              Balance[this] := 0;
[L4107]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4108]  COND FALSE  !(revert)
[L4278]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4279]  COND FALSE  !(revert)
[L4282]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4259]              assume msgsender_MSG != null;
[L4260]              Balance[this] := 0;
[L4282]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4283]  COND FALSE  !(revert)
[L4334]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4335]  COND FALSE  !(revert)
[L4338]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4149]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4107]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4092]              assume msgsender_MSG != null;
[L4093]              Balance[this] := 0;
[L4107]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4108]  COND FALSE  !(revert)
[L4149]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4150]  COND FALSE  !(revert)
[L4153]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4127]              assume msgsender_MSG != null;
[L4128]              Balance[this] := 0;
[L4129]              balances_BasicToken[this] := zeroRefintArr();
[L4130]              sum_balances0[this] := 0;
[L4131]              totalSupply__BasicToken[this] := 0;
[L4153]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4154]  COND FALSE  !(revert)
[L4338]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4339]  COND FALSE  !(revert)
[L4342]  CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4301]              assume msgsender_MSG != null;
[L4302]              Balance[this] := 0;
[L4303]              allowed_StandardToken[this] := zeroRefRefintArr();
[L4304]              sum_allowed1[this] := 0;
[L4342]  RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4343]  COND FALSE  !(revert)
[L5091]  RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L5092]  COND FALSE  !(revert)
[L5095]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3978]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3961]              assume msgsender_MSG != null;
[L3962]              Balance[this] := 0;
[L3963]              owner_Ownable[this] := null;
[L3965]              owner_Ownable[this] := msgsender_MSG;
[L3978]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3979]  COND FALSE  !(revert)
[L5095]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5096]  COND FALSE  !(revert)
[L5099]  CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3978]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3961]              assume msgsender_MSG != null;
[L3962]              Balance[this] := 0;
[L3963]              owner_Ownable[this] := null;
[L3965]              owner_Ownable[this] := msgsender_MSG;
[L3978]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3979]  COND FALSE  !(revert)
[L4574]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]  COND FALSE  !(revert)
[L4578]  CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4554]              assume msgsender_MSG != null;
[L4555]              Balance[this] := 0;
[L4556]              paused_Pausable[this] := false;
[L4578]  RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4579]  COND FALSE  !(revert)
[L5099]  RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L5100]  COND FALSE  !(revert)
[L5103]  CALL        call PausableToken_PausableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4700]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4107]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4092]              assume msgsender_MSG != null;
[L4093]              Balance[this] := 0;
[L4107]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4108]  COND FALSE  !(revert)
[L4700]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4701]  COND FALSE  !(revert)
[L4704]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4278]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4107]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4092]              assume msgsender_MSG != null;
[L4093]              Balance[this] := 0;
[L4107]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4108]  COND FALSE  !(revert)
[L4278]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4279]  COND FALSE  !(revert)
[L4282]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4259]              assume msgsender_MSG != null;
[L4260]              Balance[this] := 0;
[L4282]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4283]  COND FALSE  !(revert)
[L4704]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4705]  COND FALSE  !(revert)
[L4708]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4149]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4107]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4092]              assume msgsender_MSG != null;
[L4093]              Balance[this] := 0;
[L4107]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4108]  COND FALSE  !(revert)
[L4149]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4150]  COND FALSE  !(revert)
[L4153]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4127]              assume msgsender_MSG != null;
[L4128]              Balance[this] := 0;
[L4129]              balances_BasicToken[this] := zeroRefintArr();
[L4130]              sum_balances0[this] := 0;
[L4131]              totalSupply__BasicToken[this] := 0;
[L4153]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4154]  COND FALSE  !(revert)
[L4708]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4709]  COND FALSE  !(revert)
[L4712]  CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4330]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4107]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4092]              assume msgsender_MSG != null;
[L4093]              Balance[this] := 0;
[L4107]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4108]  COND FALSE  !(revert)
[L4330]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4331]  COND FALSE  !(revert)
[L4334]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4278]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4107]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4092]              assume msgsender_MSG != null;
[L4093]              Balance[this] := 0;
[L4107]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4108]  COND FALSE  !(revert)
[L4278]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4279]  COND FALSE  !(revert)
[L4282]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4259]              assume msgsender_MSG != null;
[L4260]              Balance[this] := 0;
[L4282]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4283]  COND FALSE  !(revert)
[L4334]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4335]  COND FALSE  !(revert)
[L4338]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4149]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4107]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4092]              assume msgsender_MSG != null;
[L4093]              Balance[this] := 0;
[L4107]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4108]  COND FALSE  !(revert)
[L4149]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4150]  COND FALSE  !(revert)
[L4153]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4127]              assume msgsender_MSG != null;
[L4128]              Balance[this] := 0;
[L4129]              balances_BasicToken[this] := zeroRefintArr();
[L4130]              sum_balances0[this] := 0;
[L4131]              totalSupply__BasicToken[this] := 0;
[L4153]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4154]  COND FALSE  !(revert)
[L4338]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4339]  COND FALSE  !(revert)
[L4342]  CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4301]              assume msgsender_MSG != null;
[L4302]              Balance[this] := 0;
[L4303]              allowed_StandardToken[this] := zeroRefRefintArr();
[L4304]              sum_allowed1[this] := 0;
[L4342]  RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4343]  COND FALSE  !(revert)
[L4712]  RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4713]  COND FALSE  !(revert)
[L4716]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3978]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3961]              assume msgsender_MSG != null;
[L3962]              Balance[this] := 0;
[L3963]              owner_Ownable[this] := null;
[L3965]              owner_Ownable[this] := msgsender_MSG;
[L3978]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3979]  COND FALSE  !(revert)
[L4716]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L4717]  COND FALSE  !(revert)
[L4720]  CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3978]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3961]              assume msgsender_MSG != null;
[L3962]              Balance[this] := 0;
[L3963]              owner_Ownable[this] := null;
[L3965]              owner_Ownable[this] := msgsender_MSG;
[L3978]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3979]  COND FALSE  !(revert)
[L4574]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]  COND FALSE  !(revert)
[L4578]  CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4554]              assume msgsender_MSG != null;
[L4555]              Balance[this] := 0;
[L4556]              paused_Pausable[this] := false;
[L4578]  RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4579]  COND FALSE  !(revert)
[L4720]  RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L4721]  COND FALSE  !(revert)
[L4724]  CALL        call PausableToken_PausableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4661]              assume msgsender_MSG != null;
[L4662]              Balance[this] := 0;
[L4724]  RET         call PausableToken_PausableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4725]  COND FALSE  !(revert)
[L5103]  RET         call PausableToken_PausableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L5104]  COND FALSE  !(revert)
[L5107]  CALL        call USDollarHKex_USDollarHKex_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5013]              assume msgsender_MSG != null;
[L5014]              Balance[this] := 0;
[L5015]              name_USDollarHKex[this] := 749918206;
[L5016]              symbol_USDollarHKex[this] := 2047713833;
[L5017]              standard_USDollarHKex[this] := -1333876585;
[L5018]              decimals_USDollarHKex[this] := 18;
[L5019]              __var_22 := decimals_USDollarHKex[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5020]              INITIAL_SUPPLY_USDollarHKex[this] := nonlinearMul(25 * (100000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936), nonlinearPow(10, decimals_USDollarHKex[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5022]  CALL        call __var_23 := FreshRefGenerator__success();
[L3835]              havoc newRef;
[L3836]              assume Alloc[newRef] == false;
[L3837]              Alloc[newRef] := true;
[L3838]              assume newRef != null;
[L5022]  RET         call __var_23 := FreshRefGenerator__success();
[L5023]  COND FALSE  !(revert)
[L5026]              allocations_USDollarHKex[this] := __var_23;
[L5028]              alloc_allocations_USDollarHKex_lvl0[allocations_USDollarHKex[this]] := zeroRefboolArr();
[L5030]              totalSupply__BasicToken[this] := INITIAL_SUPPLY_USDollarHKex[this];
[L5031]              sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][msgsender_MSG];
[L5032]              balances_BasicToken[this][msgsender_MSG] := INITIAL_SUPPLY_USDollarHKex[this];
[L5033]              sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][msgsender_MSG];
[L5034]              assert { :EventEmitted "Transfer_USDollarHKex" } true;
[L5107]  RET         call USDollarHKex_USDollarHKex_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5108]  COND FALSE  !(revert)
[L2126]  RET         call USDollarHKex_USDollarHKex__success(this, msgsender_MSG, msgvalue_MSG);
[L2127]              assume !revert && gas >= 0;
[L8684]  RET         call USDollarHKex_USDollarHKex(this, msgsender_MSG, msgvalue_MSG);
[L8685]              assume !revert && gas >= 0;
[L8688]  CALL        call CorralChoice_USDollarHKex(this);
[L8483]              havoc msgsender_MSG;
[L8484]              havoc msgvalue_MSG;
[L8485]              havoc choice;
[L8486]              havoc __ret_0_owner;
[L8487]              havoc _newOwner_s133;
[L8488]              havoc __ret_0_totalSupply;
[L8489]              havoc _owner_s278;
[L8490]              havoc __ret_0_balanceOf;
[L8491]              havoc _to_s828;
[L8492]              havoc _value_s828;
[L8493]              havoc __ret_0_transfer;
[L8494]              havoc _owner_s459;
[L8495]              havoc _spender_s459;
[L8496]              havoc __ret_0_allowance;
[L8497]              havoc _from_s858;
[L8498]              havoc _to_s858;
[L8499]              havoc _value_s858;
[L8500]              havoc __ret_0_transferFrom;
[L8501]              havoc _spender_s680;
[L8502]              havoc _value_s680;
[L8503]              havoc __ret_0_approve;
[L8504]              havoc _spender_s698;
[L8505]              havoc _addedValue_s698;
[L8506]              havoc success_s698;
[L8507]              havoc _spender_s716;
[L8508]              havoc _subtractedValue_s716;
[L8509]              havoc success_s716;
[L8510]              havoc __ret_0_paused;
[L8511]              havoc __ret_0_name;
[L8512]              havoc __ret_0_symbol;
[L8513]              havoc __ret_0_standard;
[L8514]              havoc __ret_0_decimals;
[L8515]              havoc __ret_0_INITIAL_SUPPLY;
[L8516]              havoc arg1229_s0;
[L8517]              havoc arg1230_s0;
[L8518]              havoc __ret_0_allocations;
[L8519]              havoc _address_s1226;
[L8520]              havoc total_value_s1226;
[L8521]              havoc times_s1226;
[L8522]              havoc balanceRequires_s1226;
[L8523]              havoc __ret_0_setAllocation;
[L8524]              havoc tmpNow;
[L8525]              havoc gas;
[L8526]              assume gas > 4000000 && gas <= 8000000;
[L8527]              tmpNow := now;
[L8528]              havoc now;
[L8529]              assume now > tmpNow;
[L8530]              assume msgsender_MSG != null;
[L8531]              assume DType[msgsender_MSG] != SafeMath;
[L8532]              assume DType[msgsender_MSG] != Ownable;
[L8533]              assume DType[msgsender_MSG] != ERC20Basic;
[L8534]              assume DType[msgsender_MSG] != BasicToken;
[L8535]              assume DType[msgsender_MSG] != ERC20;
[L8536]              assume DType[msgsender_MSG] != StandardToken;
[L8537]              assume DType[msgsender_MSG] != Pausable;
[L8538]              assume DType[msgsender_MSG] != PausableToken;
[L8539]              assume DType[msgsender_MSG] != USDollarHKex;
[L8540]              Alloc[msgsender_MSG] := true;
[L8541]  COND FALSE  !(choice == 20)
[L8547]  COND FALSE  !(choice == 19)
[L8553]  COND FALSE  !(choice == 18)
[L8559]  COND FALSE  !(choice == 17)
[L8565]  COND FALSE  !(choice == 16)
[L8572]  COND FALSE  !(choice == 15)
[L8578]  COND TRUE   choice == 14
[L8579]              gas := gas - 21000;
[L8580]  COND TRUE   gas >= 0
[L8581]              assume _value_s858 >= 0 && _value_s858 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8582]              assume msgvalue_MSG == 0;
[L8583]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_USDollarHKex(this, msgsender_MSG, msgvalue_MSG, _from_s858, _to_s858, _value_s858);
[L2250]              havoc __exception;
[L2251]              revert := false;
[L2252]  COND FALSE  !(__exception)
[L2284]  CALL        call __ret_0_ := transferFrom~address~address~uint256_USDollarHKex__success(this, msgsender_MSG, msgvalue_MSG, _from_s858, _to_s858, _value_s858);
[L5205]  CALL        call __var_27 := canSubAllocation~address~uint256_USDollarHKex__success(this, msgsender_MSG, msgvalue_MSG, _from_s858, _value_s858);
[L5328]  COND FALSE  !(sub_value_s949 == 0)
[L5332]  COND FALSE  !(balances_BasicToken[this][sender_s949] < sub_value_s949)
[L5336]  COND FALSE  !(alloc_allocations_USDollarHKex_lvl0[allocations_USDollarHKex[this]][sender_s949] == false)
[L5347]  COND TRUE   Length[M_Ref_Ref[allocations_USDollarHKex[this]][sender_s949]] == 0
[L5348]              __ret_0_ := true;
[L5205]  RET         call __var_27 := canSubAllocation~address~uint256_USDollarHKex__success(this, msgsender_MSG, msgvalue_MSG, _from_s858, _value_s858);
[L5206]  COND FALSE  !(revert)
[L5209]  COND FALSE  !(!__var_27)
[L5213]  CALL        call subAllocation~address_USDollarHKex__success(this, msgsender_MSG, msgvalue_MSG, _from_s858);
[L5554]              total_lockamount_s1052 := 0;
[L5555]              total_unlockamount_s1052 := 0;
[L5556]  COND FALSE  !(alloc_allocations_USDollarHKex_lvl0[allocations_USDollarHKex[this]][sender_s1052] == false)
[L5567]              j_s1052 := 0;
[L5568]  COND FALSE  !(j_s1052 < Length[M_Ref_Ref[allocations_USDollarHKex[this]][sender_s1052]])
[L5633]  COND FALSE  !(total_unlockamount_s1052 > 0)
[L5636]  COND FALSE  !(alloc_allocations_USDollarHKex_lvl0[allocations_USDollarHKex[this]][sender_s1052] == false)
[L5647]  COND FALSE  !(total_lockamount_s1052 == 0 && Length[M_Ref_Ref[allocations_USDollarHKex[this]][sender_s1052]] > 0)
[L5213]  RET         call subAllocation~address_USDollarHKex__success(this, msgsender_MSG, msgvalue_MSG, _from_s858);
[L5214]  COND FALSE  !(revert)
[L5217]  COND TRUE   DType[this] == USDollarHKex
[L5218]  CALL        call __var_28 := transferFrom~address~address~uint256_PausableToken__success(this, msgsender_MSG, msgvalue_MSG, _from_s858, _to_s858, _value_s858);
[L4809]  CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7619]  COND FALSE  !(!!paused_Pausable[this])
[L4809]  RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4810]  COND FALSE  !(revert)
[L4813]  COND TRUE   DType[this] == USDollarHKex
[L4814]  CALL        call __var_13 := transferFrom~address~address~uint256_StandardToken__success(this, msgsender_MSG, msgvalue_MSG, _from_s662, _to_s662, _value_s662);
[L4398]              __var_5 := null;
[L4399]  COND FALSE  !(!(_to_s415 != null))
[L4403]  COND FALSE  !(!(_value_s415 <= balances_BasicToken[this][_from_s415]))
[L4407]  COND FALSE  !(!(_value_s415 <= allowed_StandardToken[this][_from_s415][msgsender_MSG]))
[L4411]  CALL        call __var_6 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_from_s415], _value_s415);
[L3928]              assert b_s68 <= a_s68;
[L3929]              __ret_0_ := (a_s68 - b_s68) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4411]  RET         call __var_6 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_from_s415], _value_s415);
[L4412]  COND FALSE  !(revert)
[L4415]              sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][_from_s415];
[L4416]              balances_BasicToken[this][_from_s415] := __var_6;
[L4417]              sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][_from_s415];
[L4418]  CALL        call __var_7 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_to_s415], _value_s415);
[L3942]              c_s92 := (a_s92 + b_s92) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3943]              assert c_s92 >= a_s92;
[L3944]              c_s92 := c_s92;
[L4418]  RET         call __var_7 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_to_s415], _value_s415);
[L4419]  COND FALSE  !(revert)
[L4422]              sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][_to_s415];
[L4423]              balances_BasicToken[this][_to_s415] := __var_7;
[L4424]              sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][_to_s415];
[L4425]  CALL        call __var_8 := sub~uint256~uint256_SafeMath__success(this, this, 0, allowed_StandardToken[this][_from_s415][msgsender_MSG], _value_s415);
[L3928]              assert b_s68 <= a_s68;
[L3929]              __ret_0_ := (a_s68 - b_s68) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4425]  RET         call __var_8 := sub~uint256~uint256_SafeMath__success(this, this, 0, allowed_StandardToken[this][_from_s415][msgsender_MSG], _value_s415);
[L4426]  COND FALSE  !(revert)
[L4429]              sum_allowed1[_from_s415] := sum_allowed1[_from_s415] - allowed_StandardToken[this][_from_s415][msgsender_MSG];
[L4430]              allowed_StandardToken[this][_from_s415][msgsender_MSG] := __var_8;
[L4431]              sum_allowed1[_from_s415] := sum_allowed1[_from_s415] + allowed_StandardToken[this][_from_s415][msgsender_MSG];
[L4432]              assert { :EventEmitted "Transfer_StandardToken" } true;
[L4433]              __ret_0_ := true;
[L4814]  RET         call __var_13 := transferFrom~address~address~uint256_StandardToken__success(this, msgsender_MSG, msgvalue_MSG, _from_s662, _to_s662, _value_s662);
[L4815]  COND FALSE  !(revert)
[L4826]              __ret_0_ := __var_13;
[L5218]  RET         call __var_28 := transferFrom~address~address~uint256_PausableToken__success(this, msgsender_MSG, msgvalue_MSG, _from_s858, _to_s858, _value_s858);
[L5219]  COND FALSE  !(revert)
[L5225]              __ret_0_ := __var_28;
[L2284]  RET         call __ret_0_ := transferFrom~address~address~uint256_USDollarHKex__success(this, msgsender_MSG, msgvalue_MSG, _from_s858, _to_s858, _value_s858);
[L2285]              assume !revert && gas >= 0;
[L8583]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_USDollarHKex(this, msgsender_MSG, msgvalue_MSG, _from_s858, _to_s858, _value_s858);
[L8688]  RET         call CorralChoice_USDollarHKex(this);
[L8688]  CALL        call CorralChoice_USDollarHKex(this);
[L8483]              havoc msgsender_MSG;
[L8484]              havoc msgvalue_MSG;
[L8485]              havoc choice;
[L8486]              havoc __ret_0_owner;
[L8487]              havoc _newOwner_s133;
[L8488]              havoc __ret_0_totalSupply;
[L8489]              havoc _owner_s278;
[L8490]              havoc __ret_0_balanceOf;
[L8491]              havoc _to_s828;
[L8492]              havoc _value_s828;
[L8493]              havoc __ret_0_transfer;
[L8494]              havoc _owner_s459;
[L8495]              havoc _spender_s459;
[L8496]              havoc __ret_0_allowance;
[L8497]              havoc _from_s858;
[L8498]              havoc _to_s858;
[L8499]              havoc _value_s858;
[L8500]              havoc __ret_0_transferFrom;
[L8501]              havoc _spender_s680;
[L8502]              havoc _value_s680;
[L8503]              havoc __ret_0_approve;
[L8504]              havoc _spender_s698;
[L8505]              havoc _addedValue_s698;
[L8506]              havoc success_s698;
[L8507]              havoc _spender_s716;
[L8508]              havoc _subtractedValue_s716;
[L8509]              havoc success_s716;
[L8510]              havoc __ret_0_paused;
[L8511]              havoc __ret_0_name;
[L8512]              havoc __ret_0_symbol;
[L8513]              havoc __ret_0_standard;
[L8514]              havoc __ret_0_decimals;
[L8515]              havoc __ret_0_INITIAL_SUPPLY;
[L8516]              havoc arg1229_s0;
[L8517]              havoc arg1230_s0;
[L8518]              havoc __ret_0_allocations;
[L8519]              havoc _address_s1226;
[L8520]              havoc total_value_s1226;
[L8521]              havoc times_s1226;
[L8522]              havoc balanceRequires_s1226;
[L8523]              havoc __ret_0_setAllocation;
[L8524]              havoc tmpNow;
[L8525]              havoc gas;
[L8526]              assume gas > 4000000 && gas <= 8000000;
[L8527]              tmpNow := now;
[L8528]              havoc now;
[L8529]              assume now > tmpNow;
[L8530]              assume msgsender_MSG != null;
[L8531]              assume DType[msgsender_MSG] != SafeMath;
[L8532]              assume DType[msgsender_MSG] != Ownable;
[L8533]              assume DType[msgsender_MSG] != ERC20Basic;
[L8534]              assume DType[msgsender_MSG] != BasicToken;
[L8535]              assume DType[msgsender_MSG] != ERC20;
[L8536]              assume DType[msgsender_MSG] != StandardToken;
[L8537]              assume DType[msgsender_MSG] != Pausable;
[L8538]              assume DType[msgsender_MSG] != PausableToken;
[L8539]              assume DType[msgsender_MSG] != USDollarHKex;
[L8540]              Alloc[msgsender_MSG] := true;
[L8541]  COND FALSE  !(choice == 20)
[L8547]  COND FALSE  !(choice == 19)
[L8553]  COND FALSE  !(choice == 18)
[L8559]  COND FALSE  !(choice == 17)
[L8565]  COND TRUE   choice == 16
[L8566]              gas := gas - 21000;
[L8567]  COND TRUE   gas >= 0
[L8568]              assume _value_s828 >= 0 && _value_s828 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8569]              assume msgvalue_MSG == 0;
[L8570]  CALL        call __ret_0_transfer := transfer~address~uint256_USDollarHKex(this, msgsender_MSG, msgvalue_MSG, _to_s828, _value_s828);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG != _to_s828 && (_value_s828 > balances_BasicToken[this][msgsender_MSG] || balances_BasicToken[this][_to_s828] + _value_s828 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && _value_s828 >= 0) && _value_s828 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][_to_s828] >= 0) && balances_BasicToken[this][_to_s828] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][msgsender_MSG] >= 0) && balances_BasicToken[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_USDollarHKex0 := true;
[L2]                 call_transfer_USDollarHKex0 := false;
[L2]                 revert := revert_hold;
[L2170]              havoc __exception;
[L2171]              revert := false;
[L2172]  COND FALSE  !(__exception)
[L2204]  CALL        call __ret_0_ := transfer~address~uint256_USDollarHKex__success(this, msgsender_MSG, msgvalue_MSG, _to_s828, _value_s828);
[L5147]  CALL        call __var_24 := canSubAllocation~address~uint256_USDollarHKex__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, _value_s828);
[L5328]  COND FALSE  !(sub_value_s949 == 0)
[L5332]  COND FALSE  !(balances_BasicToken[this][sender_s949] < sub_value_s949)
[L5336]  COND TRUE   alloc_allocations_USDollarHKex_lvl0[allocations_USDollarHKex[this]][sender_s949] == false
[L5337]  CALL        call __var_30 := FreshRefGenerator__success();
[L3835]              havoc newRef;
[L3836]              assume Alloc[newRef] == false;
[L3837]              Alloc[newRef] := true;
[L3838]              assume newRef != null;
[L5337]  RET         call __var_30 := FreshRefGenerator__success();
[L5338]  COND FALSE  !(revert)
[L5341]              assume Length[M_Ref_Ref[allocations_USDollarHKex[this]][sender_s949]] == 0;
[L5342]              alloc_allocations_USDollarHKex_lvl0[allocations_USDollarHKex[this]][sender_s949] := true;
[L5343]              assume M_int_Ref[M_Ref_Ref[allocations_USDollarHKex[this]][sender_s949]] == zerointRefArr();
[L5344]              assume M_Ref_Ref[allocations_USDollarHKex[this]][sender_s949] == __var_30;
[L5345]              assume sum[M_Ref_Ref[allocations_USDollarHKex[this]][sender_s949]] == 0;
[L5347]  COND TRUE   Length[M_Ref_Ref[allocations_USDollarHKex[this]][sender_s949]] == 0
[L5348]              __ret_0_ := true;
[L5147]  RET         call __var_24 := canSubAllocation~address~uint256_USDollarHKex__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, _value_s828);
[L5148]  COND FALSE  !(revert)
[L5151]  COND FALSE  !(!__var_24)
[L5155]  CALL        call subAllocation~address_USDollarHKex__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5554]              total_lockamount_s1052 := 0;
[L5555]              total_unlockamount_s1052 := 0;
[L5556]  COND FALSE  !(alloc_allocations_USDollarHKex_lvl0[allocations_USDollarHKex[this]][sender_s1052] == false)
[L5567]              j_s1052 := 0;
[L5568]  COND FALSE  !(j_s1052 < Length[M_Ref_Ref[allocations_USDollarHKex[this]][sender_s1052]])
[L5633]  COND FALSE  !(total_unlockamount_s1052 > 0)
[L5636]  COND FALSE  !(alloc_allocations_USDollarHKex_lvl0[allocations_USDollarHKex[this]][sender_s1052] == false)
[L5647]  COND FALSE  !(total_lockamount_s1052 == 0 && Length[M_Ref_Ref[allocations_USDollarHKex[this]][sender_s1052]] > 0)
[L5155]  RET         call subAllocation~address_USDollarHKex__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5156]  COND FALSE  !(revert)
[L5159]  COND TRUE   DType[this] == USDollarHKex
[L5160]  CALL        call __var_25 := transfer~address~uint256_PausableToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s828, _value_s828);
[L4759]  CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7619]  COND FALSE  !(!!paused_Pausable[this])
[L4759]  RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4760]  COND FALSE  !(revert)
[L4763]  COND TRUE   DType[this] == USDollarHKex
[L4764]  CALL        call __var_11 := transfer~address~uint256_BasicToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s641, _value_s641);
[L4208]              __var_2 := null;
[L4209]  COND FALSE  !(!(_to_s266 != null))
[L4213]  COND FALSE  !(!(_value_s266 <= balances_BasicToken[this][msgsender_MSG]))
[L4217]  CALL        call __var_3 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][msgsender_MSG], _value_s266);
[L3928]              assert b_s68 <= a_s68;
[L3929]              __ret_0_ := (a_s68 - b_s68) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4217]  RET         call __var_3 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][msgsender_MSG], _value_s266);
[L4218]  COND FALSE  !(revert)
[L4221]              sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][msgsender_MSG];
[L4222]              balances_BasicToken[this][msgsender_MSG] := __var_3;
[L4223]              sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][msgsender_MSG];
[L4224]  CALL        call __var_4 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_to_s266], _value_s266);
[L3942]              c_s92 := (a_s92 + b_s92) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3943]              assert c_s92 >= a_s92;
[L3944]              c_s92 := c_s92;
[L4224]  RET         call __var_4 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_to_s266], _value_s266);
[L4225]  COND FALSE  !(revert)
[L4228]              sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][_to_s266];
[L4229]              balances_BasicToken[this][_to_s266] := __var_4;
[L4230]              sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][_to_s266];
[L4231]              assert { :EventEmitted "Transfer_BasicToken" } true;
[L4232]              __ret_0_ := true;
[L4764]  RET         call __var_11 := transfer~address~uint256_BasicToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s641, _value_s641);
[L4765]  COND FALSE  !(revert)
[L4776]              __ret_0_ := __var_11;
[L5160]  RET         call __var_25 := transfer~address~uint256_PausableToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s828, _value_s828);
[L5161]  COND FALSE  !(revert)
[L5167]              __ret_0_ := __var_25;
[L2204]  RET         call __ret_0_ := transfer~address~uint256_USDollarHKex__success(this, msgsender_MSG, msgvalue_MSG, _to_s828, _value_s828);
[L2205]              assume !revert && gas >= 0;
[L8570]  RET         call __ret_0_transfer := transfer~address~uint256_USDollarHKex(this, msgsender_MSG, msgvalue_MSG, _to_s828, _value_s828);
[L8688]  RET         call CorralChoice_USDollarHKex(this);

Loop:
[L8688]  CALL        call CorralChoice_USDollarHKex(this);
[L8483]              havoc msgsender_MSG;
[L8484]              havoc msgvalue_MSG;
[L8485]              havoc choice;
[L8486]              havoc __ret_0_owner;
[L8487]              havoc _newOwner_s133;
[L8488]              havoc __ret_0_totalSupply;
[L8489]              havoc _owner_s278;
[L8490]              havoc __ret_0_balanceOf;
[L8491]              havoc _to_s828;
[L8492]              havoc _value_s828;
[L8493]              havoc __ret_0_transfer;
[L8494]              havoc _owner_s459;
[L8495]              havoc _spender_s459;
[L8496]              havoc __ret_0_allowance;
[L8497]              havoc _from_s858;
[L8498]              havoc _to_s858;
[L8499]              havoc _value_s858;
[L8500]              havoc __ret_0_transferFrom;
[L8501]              havoc _spender_s680;
[L8502]              havoc _value_s680;
[L8503]              havoc __ret_0_approve;
[L8504]              havoc _spender_s698;
[L8505]              havoc _addedValue_s698;
[L8506]              havoc success_s698;
[L8507]              havoc _spender_s716;
[L8508]              havoc _subtractedValue_s716;
[L8509]              havoc success_s716;
[L8510]              havoc __ret_0_paused;
[L8511]              havoc __ret_0_name;
[L8512]              havoc __ret_0_symbol;
[L8513]              havoc __ret_0_standard;
[L8514]              havoc __ret_0_decimals;
[L8515]              havoc __ret_0_INITIAL_SUPPLY;
[L8516]              havoc arg1229_s0;
[L8517]              havoc arg1230_s0;
[L8518]              havoc __ret_0_allocations;
[L8519]              havoc _address_s1226;
[L8520]              havoc total_value_s1226;
[L8521]              havoc times_s1226;
[L8522]              havoc balanceRequires_s1226;
[L8523]              havoc __ret_0_setAllocation;
[L8524]              havoc tmpNow;
[L8525]              havoc gas;
[L8526]              assume gas > 4000000 && gas <= 8000000;
[L8527]              tmpNow := now;
[L8528]              havoc now;
[L8529]              assume now > tmpNow;
[L8530]              assume msgsender_MSG != null;
[L8531]              assume DType[msgsender_MSG] != SafeMath;
[L8532]              assume DType[msgsender_MSG] != Ownable;
[L8533]              assume DType[msgsender_MSG] != ERC20Basic;
[L8534]              assume DType[msgsender_MSG] != BasicToken;
[L8535]              assume DType[msgsender_MSG] != ERC20;
[L8536]              assume DType[msgsender_MSG] != StandardToken;
[L8537]              assume DType[msgsender_MSG] != Pausable;
[L8538]              assume DType[msgsender_MSG] != PausableToken;
[L8539]              assume DType[msgsender_MSG] != USDollarHKex;
[L8540]              Alloc[msgsender_MSG] := true;
[L8541]  COND FALSE  !(choice == 20)
[L8547]  COND FALSE  !(choice == 19)
[L8553]  COND FALSE  !(choice == 18)
[L8559]  COND FALSE  !(choice == 17)
[L8565]  COND TRUE   choice == 16
[L8566]              gas := gas - 21000;
[L8567]  COND TRUE   gas >= 0
[L8568]              assume _value_s828 >= 0 && _value_s828 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8569]              assume msgvalue_MSG == 0;
[L8570]  CALL        call __ret_0_transfer := transfer~address~uint256_USDollarHKex(this, msgsender_MSG, msgvalue_MSG, _to_s828, _value_s828);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG != _to_s828 && (_value_s828 > balances_BasicToken[this][msgsender_MSG] || balances_BasicToken[this][_to_s828] + _value_s828 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && _value_s828 >= 0) && _value_s828 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][_to_s828] >= 0) && balances_BasicToken[this][_to_s828] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][msgsender_MSG] >= 0) && balances_BasicToken[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_USDollarHKex0 := true;
[L2]                 call_transfer_USDollarHKex0 := false;
[L2]                 revert := revert_hold;
[L2170]              havoc __exception;
[L2171]              revert := false;
[L2172]  COND FALSE  !(__exception)
[L2204]  CALL        call __ret_0_ := transfer~address~uint256_USDollarHKex__success(this, msgsender_MSG, msgvalue_MSG, _to_s828, _value_s828);
[L5147]  CALL        call __var_24 := canSubAllocation~address~uint256_USDollarHKex__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, _value_s828);
[L5328]  COND FALSE  !(sub_value_s949 == 0)
[L5332]  COND FALSE  !(balances_BasicToken[this][sender_s949] < sub_value_s949)
[L5336]  COND FALSE  !(alloc_allocations_USDollarHKex_lvl0[allocations_USDollarHKex[this]][sender_s949] == false)
[L5347]  COND TRUE   Length[M_Ref_Ref[allocations_USDollarHKex[this]][sender_s949]] == 0
[L5348]              __ret_0_ := true;
[L5147]  RET         call __var_24 := canSubAllocation~address~uint256_USDollarHKex__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, _value_s828);
[L5148]  COND FALSE  !(revert)
[L5151]  COND FALSE  !(!__var_24)
[L5155]  CALL        call subAllocation~address_USDollarHKex__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5554]              total_lockamount_s1052 := 0;
[L5555]              total_unlockamount_s1052 := 0;
[L5556]  COND FALSE  !(alloc_allocations_USDollarHKex_lvl0[allocations_USDollarHKex[this]][sender_s1052] == false)
[L5567]              j_s1052 := 0;
[L5568]  COND FALSE  !(j_s1052 < Length[M_Ref_Ref[allocations_USDollarHKex[this]][sender_s1052]])
[L5633]  COND FALSE  !(total_unlockamount_s1052 > 0)
[L5636]  COND FALSE  !(alloc_allocations_USDollarHKex_lvl0[allocations_USDollarHKex[this]][sender_s1052] == false)
[L5647]  COND FALSE  !(total_lockamount_s1052 == 0 && Length[M_Ref_Ref[allocations_USDollarHKex[this]][sender_s1052]] > 0)
[L5155]  RET         call subAllocation~address_USDollarHKex__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5156]  COND FALSE  !(revert)
[L5159]  COND TRUE   DType[this] == USDollarHKex
[L5160]  CALL        call __var_25 := transfer~address~uint256_PausableToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s828, _value_s828);
[L4759]  CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7619]  COND FALSE  !(!!paused_Pausable[this])
[L4759]  RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4760]  COND FALSE  !(revert)
[L4763]  COND TRUE   DType[this] == USDollarHKex
[L4764]  CALL        call __var_11 := transfer~address~uint256_BasicToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s641, _value_s641);
[L4208]              __var_2 := null;
[L4209]  COND FALSE  !(!(_to_s266 != null))
[L4213]  COND FALSE  !(!(_value_s266 <= balances_BasicToken[this][msgsender_MSG]))
[L4217]  CALL        call __var_3 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][msgsender_MSG], _value_s266);
[L3928]              assert b_s68 <= a_s68;
[L3929]              __ret_0_ := (a_s68 - b_s68) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4217]  RET         call __var_3 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][msgsender_MSG], _value_s266);
[L4218]  COND FALSE  !(revert)
[L4221]              sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][msgsender_MSG];
[L4222]              balances_BasicToken[this][msgsender_MSG] := __var_3;
[L4223]              sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][msgsender_MSG];
[L4224]  CALL        call __var_4 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_to_s266], _value_s266);
[L3942]              c_s92 := (a_s92 + b_s92) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3943]              assert c_s92 >= a_s92;
[L3944]              c_s92 := c_s92;
[L4224]  RET         call __var_4 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_to_s266], _value_s266);
[L4225]  COND FALSE  !(revert)
[L4228]              sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][_to_s266];
[L4229]              balances_BasicToken[this][_to_s266] := __var_4;
[L4230]              sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][_to_s266];
[L4231]              assert { :EventEmitted "Transfer_BasicToken" } true;
[L4232]              __ret_0_ := true;
[L4764]  RET         call __var_11 := transfer~address~uint256_BasicToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s641, _value_s641);
[L4765]  COND FALSE  !(revert)
[L4776]              __ret_0_ := __var_11;
[L5160]  RET         call __var_25 := transfer~address~uint256_PausableToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s828, _value_s828);
[L5161]  COND FALSE  !(revert)
[L5167]              __ret_0_ := __var_25;
[L2204]  RET         call __ret_0_ := transfer~address~uint256_USDollarHKex__success(this, msgsender_MSG, msgvalue_MSG, _to_s828, _value_s828);
[L2205]              assume !revert && gas >= 0;
[L8570]  RET         call __ret_0_transfer := transfer~address~uint256_USDollarHKex(this, msgsender_MSG, msgvalue_MSG, _to_s828, _value_s828);
[L8688]  RET         call CorralChoice_USDollarHKex(this);

[2020-11-25 08:10:58,559 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 08:10:58,559 INFO  L82        PathProgramCache]: Analyzing trace with hash -540353388, now seen corresponding path program 1 times
[2020-11-25 08:10:58,560 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 08:10:58,580 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 08:10:58,855 INFO  L134       CoverageAnalysis]: Checked inductivity of 1032 backedges. 1 proven. 64 refuted. 0 times theorem prover too weak. 967 trivial. 0 not checked.
[2020-11-25 08:10:58,855 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 08:10:58,856 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [12] total 12
[2020-11-25 08:10:58,856 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 08:10:58,856 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 12 interpolants.
[2020-11-25 08:10:58,856 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=24, Invalid=108, Unknown=0, NotChecked=0, Total=132
[2020-11-25 08:10:58,856 INFO  L87              Difference]: Start difference. First operand 5307 states and 6027 transitions. cyclomatic complexity: 744 Second operand 12 states.
[2020-11-25 08:11:00,796 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 08:11:00,796 INFO  L93              Difference]: Finished difference Result 5536 states and 6314 transitions.
[2020-11-25 08:11:00,796 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 14 states. 
[2020-11-25 08:11:00,796 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 5536 states and 6314 transitions.
[2020-11-25 08:11:00,806 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 08:11:00,816 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 5536 states to 5536 states and 6314 transitions.
[2020-11-25 08:11:00,817 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1118
[2020-11-25 08:11:00,817 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1118
[2020-11-25 08:11:00,817 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 5536 states and 6314 transitions.
[2020-11-25 08:11:00,821 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 08:11:00,821 INFO  L728         BuchiCegarLoop]: Abstraction has 5536 states and 6314 transitions.
[2020-11-25 08:11:00,826 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 5536 states and 6314 transitions.
[2020-11-25 08:11:00,848 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 5536 to 5280.
[2020-11-25 08:11:00,848 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 5280 states.
[2020-11-25 08:11:00,853 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 5280 states to 5280 states and 5991 transitions.
[2020-11-25 08:11:00,853 INFO  L751         BuchiCegarLoop]: Abstraction has 5280 states and 5991 transitions.
[2020-11-25 08:11:00,853 INFO  L631         BuchiCegarLoop]: Abstraction has 5280 states and 5991 transitions.
[2020-11-25 08:11:00,853 INFO  L445         BuchiCegarLoop]: ======== Iteration 12============
[2020-11-25 08:11:00,853 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 5280 states and 5991 transitions.
[2020-11-25 08:11:00,858 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 08:11:00,858 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 08:11:00,858 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 08:11:00,859 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [12, 12, 12, 12, 12, 12, 12, 12, 12, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 08:11:00,859 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transfer_USDollarHKex0 := false;
[L2]                 call_transfer_USDollarHKex0 := false;
[L2]     CALL        call main();
[L8678]              assume null == 0;
[L8679]  CALL        call this := FreshRefGenerator__success();
[L3835]              havoc newRef;
[L3836]              assume Alloc[newRef] == false;
[L3837]              Alloc[newRef] := true;
[L3838]              assume newRef != null;
[L8679]  RET         call this := FreshRefGenerator__success();
[L8680]              assume now >= 0;
[L8681]              assume DType[this] == USDollarHKex;
[L8682]              assume msgvalue_MSG == 0;
[L8683]              gas := gas - 53000;
[L8684]  CALL        call USDollarHKex_USDollarHKex(this, msgsender_MSG, msgvalue_MSG);
[L2092]              havoc __exception;
[L2093]              revert := false;
[L2094]  COND FALSE  !(__exception)
[L2126]  CALL        call USDollarHKex_USDollarHKex__success(this, msgsender_MSG, msgvalue_MSG);
[L5079]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4107]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4092]              assume msgsender_MSG != null;
[L4093]              Balance[this] := 0;
[L4107]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4108]  COND FALSE  !(revert)
[L5079]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5080]  COND FALSE  !(revert)
[L5083]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4278]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4107]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4092]              assume msgsender_MSG != null;
[L4093]              Balance[this] := 0;
[L4107]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4108]  COND FALSE  !(revert)
[L4278]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4279]  COND FALSE  !(revert)
[L4282]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4259]              assume msgsender_MSG != null;
[L4260]              Balance[this] := 0;
[L4282]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4283]  COND FALSE  !(revert)
[L5083]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5084]  COND FALSE  !(revert)
[L5087]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4149]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4107]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4092]              assume msgsender_MSG != null;
[L4093]              Balance[this] := 0;
[L4107]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4108]  COND FALSE  !(revert)
[L4149]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4150]  COND FALSE  !(revert)
[L4153]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4127]              assume msgsender_MSG != null;
[L4128]              Balance[this] := 0;
[L4129]              balances_BasicToken[this] := zeroRefintArr();
[L4130]              sum_balances0[this] := 0;
[L4131]              totalSupply__BasicToken[this] := 0;
[L4153]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4154]  COND FALSE  !(revert)
[L5087]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L5088]  COND FALSE  !(revert)
[L5091]  CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4330]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4107]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4092]              assume msgsender_MSG != null;
[L4093]              Balance[this] := 0;
[L4107]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4108]  COND FALSE  !(revert)
[L4330]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4331]  COND FALSE  !(revert)
[L4334]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4278]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4107]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4092]              assume msgsender_MSG != null;
[L4093]              Balance[this] := 0;
[L4107]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4108]  COND FALSE  !(revert)
[L4278]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4279]  COND FALSE  !(revert)
[L4282]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4259]              assume msgsender_MSG != null;
[L4260]              Balance[this] := 0;
[L4282]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4283]  COND FALSE  !(revert)
[L4334]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4335]  COND FALSE  !(revert)
[L4338]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4149]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4107]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4092]              assume msgsender_MSG != null;
[L4093]              Balance[this] := 0;
[L4107]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4108]  COND FALSE  !(revert)
[L4149]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4150]  COND FALSE  !(revert)
[L4153]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4127]              assume msgsender_MSG != null;
[L4128]              Balance[this] := 0;
[L4129]              balances_BasicToken[this] := zeroRefintArr();
[L4130]              sum_balances0[this] := 0;
[L4131]              totalSupply__BasicToken[this] := 0;
[L4153]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4154]  COND FALSE  !(revert)
[L4338]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4339]  COND FALSE  !(revert)
[L4342]  CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4301]              assume msgsender_MSG != null;
[L4302]              Balance[this] := 0;
[L4303]              allowed_StandardToken[this] := zeroRefRefintArr();
[L4304]              sum_allowed1[this] := 0;
[L4342]  RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4343]  COND FALSE  !(revert)
[L5091]  RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L5092]  COND FALSE  !(revert)
[L5095]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3978]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3961]              assume msgsender_MSG != null;
[L3962]              Balance[this] := 0;
[L3963]              owner_Ownable[this] := null;
[L3965]              owner_Ownable[this] := msgsender_MSG;
[L3978]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3979]  COND FALSE  !(revert)
[L5095]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5096]  COND FALSE  !(revert)
[L5099]  CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3978]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3961]              assume msgsender_MSG != null;
[L3962]              Balance[this] := 0;
[L3963]              owner_Ownable[this] := null;
[L3965]              owner_Ownable[this] := msgsender_MSG;
[L3978]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3979]  COND FALSE  !(revert)
[L4574]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]  COND FALSE  !(revert)
[L4578]  CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4554]              assume msgsender_MSG != null;
[L4555]              Balance[this] := 0;
[L4556]              paused_Pausable[this] := false;
[L4578]  RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4579]  COND FALSE  !(revert)
[L5099]  RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L5100]  COND FALSE  !(revert)
[L5103]  CALL        call PausableToken_PausableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4700]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4107]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4092]              assume msgsender_MSG != null;
[L4093]              Balance[this] := 0;
[L4107]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4108]  COND FALSE  !(revert)
[L4700]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4701]  COND FALSE  !(revert)
[L4704]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4278]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4107]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4092]              assume msgsender_MSG != null;
[L4093]              Balance[this] := 0;
[L4107]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4108]  COND FALSE  !(revert)
[L4278]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4279]  COND FALSE  !(revert)
[L4282]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4259]              assume msgsender_MSG != null;
[L4260]              Balance[this] := 0;
[L4282]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4283]  COND FALSE  !(revert)
[L4704]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4705]  COND FALSE  !(revert)
[L4708]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4149]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4107]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4092]              assume msgsender_MSG != null;
[L4093]              Balance[this] := 0;
[L4107]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4108]  COND FALSE  !(revert)
[L4149]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4150]  COND FALSE  !(revert)
[L4153]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4127]              assume msgsender_MSG != null;
[L4128]              Balance[this] := 0;
[L4129]              balances_BasicToken[this] := zeroRefintArr();
[L4130]              sum_balances0[this] := 0;
[L4131]              totalSupply__BasicToken[this] := 0;
[L4153]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4154]  COND FALSE  !(revert)
[L4708]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4709]  COND FALSE  !(revert)
[L4712]  CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4330]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4107]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4092]              assume msgsender_MSG != null;
[L4093]              Balance[this] := 0;
[L4107]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4108]  COND FALSE  !(revert)
[L4330]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4331]  COND FALSE  !(revert)
[L4334]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4278]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4107]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4092]              assume msgsender_MSG != null;
[L4093]              Balance[this] := 0;
[L4107]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4108]  COND FALSE  !(revert)
[L4278]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4279]  COND FALSE  !(revert)
[L4282]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4259]              assume msgsender_MSG != null;
[L4260]              Balance[this] := 0;
[L4282]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4283]  COND FALSE  !(revert)
[L4334]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4335]  COND FALSE  !(revert)
[L4338]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4149]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4107]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4092]              assume msgsender_MSG != null;
[L4093]              Balance[this] := 0;
[L4107]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4108]  COND FALSE  !(revert)
[L4149]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4150]  COND FALSE  !(revert)
[L4153]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4127]              assume msgsender_MSG != null;
[L4128]              Balance[this] := 0;
[L4129]              balances_BasicToken[this] := zeroRefintArr();
[L4130]              sum_balances0[this] := 0;
[L4131]              totalSupply__BasicToken[this] := 0;
[L4153]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4154]  COND FALSE  !(revert)
[L4338]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4339]  COND FALSE  !(revert)
[L4342]  CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4301]              assume msgsender_MSG != null;
[L4302]              Balance[this] := 0;
[L4303]              allowed_StandardToken[this] := zeroRefRefintArr();
[L4304]              sum_allowed1[this] := 0;
[L4342]  RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4343]  COND FALSE  !(revert)
[L4712]  RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4713]  COND FALSE  !(revert)
[L4716]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3978]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3961]              assume msgsender_MSG != null;
[L3962]              Balance[this] := 0;
[L3963]              owner_Ownable[this] := null;
[L3965]              owner_Ownable[this] := msgsender_MSG;
[L3978]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3979]  COND FALSE  !(revert)
[L4716]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L4717]  COND FALSE  !(revert)
[L4720]  CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L4574]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3978]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3961]              assume msgsender_MSG != null;
[L3962]              Balance[this] := 0;
[L3963]              owner_Ownable[this] := null;
[L3965]              owner_Ownable[this] := msgsender_MSG;
[L3978]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3979]  COND FALSE  !(revert)
[L4574]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]  COND FALSE  !(revert)
[L4578]  CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4554]              assume msgsender_MSG != null;
[L4555]              Balance[this] := 0;
[L4556]              paused_Pausable[this] := false;
[L4578]  RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4579]  COND FALSE  !(revert)
[L4720]  RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L4721]  COND FALSE  !(revert)
[L4724]  CALL        call PausableToken_PausableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4661]              assume msgsender_MSG != null;
[L4662]              Balance[this] := 0;
[L4724]  RET         call PausableToken_PausableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4725]  COND FALSE  !(revert)
[L5103]  RET         call PausableToken_PausableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L5104]  COND FALSE  !(revert)
[L5107]  CALL        call USDollarHKex_USDollarHKex_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5013]              assume msgsender_MSG != null;
[L5014]              Balance[this] := 0;
[L5015]              name_USDollarHKex[this] := 749918206;
[L5016]              symbol_USDollarHKex[this] := 2047713833;
[L5017]              standard_USDollarHKex[this] := -1333876585;
[L5018]              decimals_USDollarHKex[this] := 18;
[L5019]              __var_22 := decimals_USDollarHKex[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5020]              INITIAL_SUPPLY_USDollarHKex[this] := nonlinearMul(25 * (100000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936), nonlinearPow(10, decimals_USDollarHKex[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5022]  CALL        call __var_23 := FreshRefGenerator__success();
[L3835]              havoc newRef;
[L3836]              assume Alloc[newRef] == false;
[L3837]              Alloc[newRef] := true;
[L3838]              assume newRef != null;
[L5022]  RET         call __var_23 := FreshRefGenerator__success();
[L5023]  COND FALSE  !(revert)
[L5026]              allocations_USDollarHKex[this] := __var_23;
[L5028]              alloc_allocations_USDollarHKex_lvl0[allocations_USDollarHKex[this]] := zeroRefboolArr();
[L5030]              totalSupply__BasicToken[this] := INITIAL_SUPPLY_USDollarHKex[this];
[L5031]              sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][msgsender_MSG];
[L5032]              balances_BasicToken[this][msgsender_MSG] := INITIAL_SUPPLY_USDollarHKex[this];
[L5033]              sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][msgsender_MSG];
[L5034]              assert { :EventEmitted "Transfer_USDollarHKex" } true;
[L5107]  RET         call USDollarHKex_USDollarHKex_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5108]  COND FALSE  !(revert)
[L2126]  RET         call USDollarHKex_USDollarHKex__success(this, msgsender_MSG, msgvalue_MSG);
[L2127]              assume !revert && gas >= 0;
[L8684]  RET         call USDollarHKex_USDollarHKex(this, msgsender_MSG, msgvalue_MSG);
[L8685]              assume !revert && gas >= 0;
[L8688]  CALL        call CorralChoice_USDollarHKex(this);
[L8483]              havoc msgsender_MSG;
[L8484]              havoc msgvalue_MSG;
[L8485]              havoc choice;
[L8486]              havoc __ret_0_owner;
[L8487]              havoc _newOwner_s133;
[L8488]              havoc __ret_0_totalSupply;
[L8489]              havoc _owner_s278;
[L8490]              havoc __ret_0_balanceOf;
[L8491]              havoc _to_s828;
[L8492]              havoc _value_s828;
[L8493]              havoc __ret_0_transfer;
[L8494]              havoc _owner_s459;
[L8495]              havoc _spender_s459;
[L8496]              havoc __ret_0_allowance;
[L8497]              havoc _from_s858;
[L8498]              havoc _to_s858;
[L8499]              havoc _value_s858;
[L8500]              havoc __ret_0_transferFrom;
[L8501]              havoc _spender_s680;
[L8502]              havoc _value_s680;
[L8503]              havoc __ret_0_approve;
[L8504]              havoc _spender_s698;
[L8505]              havoc _addedValue_s698;
[L8506]              havoc success_s698;
[L8507]              havoc _spender_s716;
[L8508]              havoc _subtractedValue_s716;
[L8509]              havoc success_s716;
[L8510]              havoc __ret_0_paused;
[L8511]              havoc __ret_0_name;
[L8512]              havoc __ret_0_symbol;
[L8513]              havoc __ret_0_standard;
[L8514]              havoc __ret_0_decimals;
[L8515]              havoc __ret_0_INITIAL_SUPPLY;
[L8516]              havoc arg1229_s0;
[L8517]              havoc arg1230_s0;
[L8518]              havoc __ret_0_allocations;
[L8519]              havoc _address_s1226;
[L8520]              havoc total_value_s1226;
[L8521]              havoc times_s1226;
[L8522]              havoc balanceRequires_s1226;
[L8523]              havoc __ret_0_setAllocation;
[L8524]              havoc tmpNow;
[L8525]              havoc gas;
[L8526]              assume gas > 4000000 && gas <= 8000000;
[L8527]              tmpNow := now;
[L8528]              havoc now;
[L8529]              assume now > tmpNow;
[L8530]              assume msgsender_MSG != null;
[L8531]              assume DType[msgsender_MSG] != SafeMath;
[L8532]              assume DType[msgsender_MSG] != Ownable;
[L8533]              assume DType[msgsender_MSG] != ERC20Basic;
[L8534]              assume DType[msgsender_MSG] != BasicToken;
[L8535]              assume DType[msgsender_MSG] != ERC20;
[L8536]              assume DType[msgsender_MSG] != StandardToken;
[L8537]              assume DType[msgsender_MSG] != Pausable;
[L8538]              assume DType[msgsender_MSG] != PausableToken;
[L8539]              assume DType[msgsender_MSG] != USDollarHKex;
[L8540]              Alloc[msgsender_MSG] := true;
[L8541]  COND FALSE  !(choice == 20)
[L8547]  COND FALSE  !(choice == 19)
[L8553]  COND FALSE  !(choice == 18)
[L8559]  COND FALSE  !(choice == 17)
[L8565]  COND FALSE  !(choice == 16)
[L8572]  COND FALSE  !(choice == 15)
[L8578]  COND FALSE  !(choice == 14)
[L8585]  COND FALSE  !(choice == 13)
[L8592]  COND FALSE  !(choice == 12)
[L8599]  COND FALSE  !(choice == 11)
[L8606]  COND FALSE  !(choice == 10)
[L8612]  COND FALSE  !(choice == 9)
[L8618]  COND FALSE  !(choice == 8)
[L8624]  COND FALSE  !(choice == 7)
[L8630]  COND FALSE  !(choice == 6)
[L8636]  COND FALSE  !(choice == 5)
[L8642]  COND FALSE  !(choice == 4)
[L8648]  COND FALSE  !(choice == 3)
[L8654]  COND FALSE  !(choice == 2)
[L8661]  COND TRUE   choice == 1
[L8662]              gas := gas - 21000;
[L8663]  COND TRUE   gas >= 0
[L8664]              assume total_value_s1226 >= 0 && total_value_s1226 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8665]  CALL        call times_s1226 := FreshRefGenerator__success();
[L3835]              havoc newRef;
[L3836]              assume Alloc[newRef] == false;
[L3837]              Alloc[newRef] := true;
[L3838]              assume newRef != null;
[L8665]  RET         call times_s1226 := FreshRefGenerator__success();
[L8666]  CALL        call balanceRequires_s1226 := FreshRefGenerator__success();
[L3835]              havoc newRef;
[L3836]              assume Alloc[newRef] == false;
[L3837]              Alloc[newRef] := true;
[L3838]              assume newRef != null;
[L8666]  RET         call balanceRequires_s1226 := FreshRefGenerator__success();
[L8667]              assume msgvalue_MSG == 0;
[L8668]  CALL        call __ret_0_setAllocation := setAllocation~address~uint256~arr~arr_USDollarHKex(this, msgsender_MSG, msgvalue_MSG, _address_s1226, total_value_s1226, times_s1226, balanceRequires_s1226);
[L2339]              havoc __exception;
[L2340]              revert := false;
[L2341]  COND FALSE  !(__exception)
[L2373]  CALL        call __ret_0_ := setAllocation~address~uint256~arr~arr_USDollarHKex__success(this, msgsender_MSG, msgvalue_MSG, _address_s1226, total_value_s1226, times_s1226, balanceRequires_s1226);
[L5854]  CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7603]  COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L5854]  RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5855]  COND FALSE  !(revert)
[L5858]  COND FALSE  !(!(Length[times_s1226] == Length[balanceRequires_s1226]))
[L5862]  COND FALSE  !(!(balances_BasicToken[this][msgsender_MSG] >= total_value_s1226))
[L5866]              sum_s1226 := 0;
[L5867]              x_s1226 := 0;
[L5868]  COND FALSE  !(x_s1226 < Length[balanceRequires_s1226])
[L5884]  COND FALSE  !(!(total_value_s1226 >= sum_s1226))
[L5888]              i_s1226 := 0;
[L5889]  COND FALSE  !(i_s1226 < Length[times_s1226])
[L5984]              assert { :EventEmitted "NewLock_USDollarHKex" } true;
[L5985]  COND TRUE   DType[this] == USDollarHKex
[L5986]  CALL        call __var_52 := transfer~address~uint256_PausableToken__success(this, msgsender_MSG, msgvalue_MSG, _address_s1226, total_value_s1226);
[L4759]  CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7619]  COND FALSE  !(!!paused_Pausable[this])
[L4759]  RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4760]  COND FALSE  !(revert)
[L4763]  COND TRUE   DType[this] == USDollarHKex
[L4764]  CALL        call __var_11 := transfer~address~uint256_BasicToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s641, _value_s641);
[L4208]              __var_2 := null;
[L4209]  COND FALSE  !(!(_to_s266 != null))
[L4213]  COND FALSE  !(!(_value_s266 <= balances_BasicToken[this][msgsender_MSG]))
[L4217]  CALL        call __var_3 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][msgsender_MSG], _value_s266);
[L3928]              assert b_s68 <= a_s68;
[L3929]              __ret_0_ := (a_s68 - b_s68) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4217]  RET         call __var_3 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][msgsender_MSG], _value_s266);
[L4218]  COND FALSE  !(revert)
[L4221]              sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][msgsender_MSG];
[L4222]              balances_BasicToken[this][msgsender_MSG] := __var_3;
[L4223]              sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][msgsender_MSG];
[L4224]  CALL        call __var_4 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_to_s266], _value_s266);
[L3942]              c_s92 := (a_s92 + b_s92) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3943]              assert c_s92 >= a_s92;
[L3944]              c_s92 := c_s92;
[L4224]  RET         call __var_4 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_to_s266], _value_s266);
[L4225]  COND FALSE  !(revert)
[L4228]              sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][_to_s266];
[L4229]              balances_BasicToken[this][_to_s266] := __var_4;
[L4230]              sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][_to_s266];
[L4231]              assert { :EventEmitted "Transfer_BasicToken" } true;
[L4232]              __ret_0_ := true;
[L4764]  RET         call __var_11 := transfer~address~uint256_BasicToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s641, _value_s641);
[L4765]  COND FALSE  !(revert)
[L4776]              __ret_0_ := __var_11;
[L5986]  RET         call __var_52 := transfer~address~uint256_PausableToken__success(this, msgsender_MSG, msgvalue_MSG, _address_s1226, total_value_s1226);
[L5987]  COND FALSE  !(revert)
[L5993]              __ret_0_ := __var_52;
[L2373]  RET         call __ret_0_ := setAllocation~address~uint256~arr~arr_USDollarHKex__success(this, msgsender_MSG, msgvalue_MSG, _address_s1226, total_value_s1226, times_s1226, balanceRequires_s1226);
[L2374]              assume !revert && gas >= 0;
[L8668]  RET         call __ret_0_setAllocation := setAllocation~address~uint256~arr~arr_USDollarHKex(this, msgsender_MSG, msgvalue_MSG, _address_s1226, total_value_s1226, times_s1226, balanceRequires_s1226);
[L8688]  RET         call CorralChoice_USDollarHKex(this);
[L8688]  CALL        call CorralChoice_USDollarHKex(this);
[L8483]              havoc msgsender_MSG;
[L8484]              havoc msgvalue_MSG;
[L8485]              havoc choice;
[L8486]              havoc __ret_0_owner;
[L8487]              havoc _newOwner_s133;
[L8488]              havoc __ret_0_totalSupply;
[L8489]              havoc _owner_s278;
[L8490]              havoc __ret_0_balanceOf;
[L8491]              havoc _to_s828;
[L8492]              havoc _value_s828;
[L8493]              havoc __ret_0_transfer;
[L8494]              havoc _owner_s459;
[L8495]              havoc _spender_s459;
[L8496]              havoc __ret_0_allowance;
[L8497]              havoc _from_s858;
[L8498]              havoc _to_s858;
[L8499]              havoc _value_s858;
[L8500]              havoc __ret_0_transferFrom;
[L8501]              havoc _spender_s680;
[L8502]              havoc _value_s680;
[L8503]              havoc __ret_0_approve;
[L8504]              havoc _spender_s698;
[L8505]              havoc _addedValue_s698;
[L8506]              havoc success_s698;
[L8507]              havoc _spender_s716;
[L8508]              havoc _subtractedValue_s716;
[L8509]              havoc success_s716;
[L8510]              havoc __ret_0_paused;
[L8511]              havoc __ret_0_name;
[L8512]              havoc __ret_0_symbol;
[L8513]              havoc __ret_0_standard;
[L8514]              havoc __ret_0_decimals;
[L8515]              havoc __ret_0_INITIAL_SUPPLY;
[L8516]              havoc arg1229_s0;
[L8517]              havoc arg1230_s0;
[L8518]              havoc __ret_0_allocations;
[L8519]              havoc _address_s1226;
[L8520]              havoc total_value_s1226;
[L8521]              havoc times_s1226;
[L8522]              havoc balanceRequires_s1226;
[L8523]              havoc __ret_0_setAllocation;
[L8524]              havoc tmpNow;
[L8525]              havoc gas;
[L8526]              assume gas > 4000000 && gas <= 8000000;
[L8527]              tmpNow := now;
[L8528]              havoc now;
[L8529]              assume now > tmpNow;
[L8530]              assume msgsender_MSG != null;
[L8531]              assume DType[msgsender_MSG] != SafeMath;
[L8532]              assume DType[msgsender_MSG] != Ownable;
[L8533]              assume DType[msgsender_MSG] != ERC20Basic;
[L8534]              assume DType[msgsender_MSG] != BasicToken;
[L8535]              assume DType[msgsender_MSG] != ERC20;
[L8536]              assume DType[msgsender_MSG] != StandardToken;
[L8537]              assume DType[msgsender_MSG] != Pausable;
[L8538]              assume DType[msgsender_MSG] != PausableToken;
[L8539]              assume DType[msgsender_MSG] != USDollarHKex;
[L8540]              Alloc[msgsender_MSG] := true;
[L8541]  COND FALSE  !(choice == 20)
[L8547]  COND FALSE  !(choice == 19)
[L8553]  COND FALSE  !(choice == 18)
[L8559]  COND FALSE  !(choice == 17)
[L8565]  COND TRUE   choice == 16
[L8566]              gas := gas - 21000;
[L8567]  COND TRUE   gas >= 0
[L8568]              assume _value_s828 >= 0 && _value_s828 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8569]              assume msgvalue_MSG == 0;
[L8570]  CALL        call __ret_0_transfer := transfer~address~uint256_USDollarHKex(this, msgsender_MSG, msgvalue_MSG, _to_s828, _value_s828);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG != _to_s828 && (_value_s828 > balances_BasicToken[this][msgsender_MSG] || balances_BasicToken[this][_to_s828] + _value_s828 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && _value_s828 >= 0) && _value_s828 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][_to_s828] >= 0) && balances_BasicToken[this][_to_s828] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][msgsender_MSG] >= 0) && balances_BasicToken[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_USDollarHKex0 := true;
[L2]                 call_transfer_USDollarHKex0 := false;
[L2]                 revert := revert_hold;
[L2170]              havoc __exception;
[L2171]              revert := false;
[L2172]  COND FALSE  !(__exception)
[L2204]  CALL        call __ret_0_ := transfer~address~uint256_USDollarHKex__success(this, msgsender_MSG, msgvalue_MSG, _to_s828, _value_s828);
[L5147]  CALL        call __var_24 := canSubAllocation~address~uint256_USDollarHKex__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, _value_s828);
[L5328]  COND FALSE  !(sub_value_s949 == 0)
[L5332]  COND FALSE  !(balances_BasicToken[this][sender_s949] < sub_value_s949)
[L5336]  COND TRUE   alloc_allocations_USDollarHKex_lvl0[allocations_USDollarHKex[this]][sender_s949] == false
[L5337]  CALL        call __var_30 := FreshRefGenerator__success();
[L3835]              havoc newRef;
[L3836]              assume Alloc[newRef] == false;
[L3837]              Alloc[newRef] := true;
[L3838]              assume newRef != null;
[L5337]  RET         call __var_30 := FreshRefGenerator__success();
[L5338]  COND FALSE  !(revert)
[L5341]              assume Length[M_Ref_Ref[allocations_USDollarHKex[this]][sender_s949]] == 0;
[L5342]              alloc_allocations_USDollarHKex_lvl0[allocations_USDollarHKex[this]][sender_s949] := true;
[L5343]              assume M_int_Ref[M_Ref_Ref[allocations_USDollarHKex[this]][sender_s949]] == zerointRefArr();
[L5344]              assume M_Ref_Ref[allocations_USDollarHKex[this]][sender_s949] == __var_30;
[L5345]              assume sum[M_Ref_Ref[allocations_USDollarHKex[this]][sender_s949]] == 0;
[L5347]  COND TRUE   Length[M_Ref_Ref[allocations_USDollarHKex[this]][sender_s949]] == 0
[L5348]              __ret_0_ := true;
[L5147]  RET         call __var_24 := canSubAllocation~address~uint256_USDollarHKex__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, _value_s828);
[L5148]  COND FALSE  !(revert)
[L5151]  COND FALSE  !(!__var_24)
[L5155]  CALL        call subAllocation~address_USDollarHKex__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5554]              total_lockamount_s1052 := 0;
[L5555]              total_unlockamount_s1052 := 0;
[L5556]  COND FALSE  !(alloc_allocations_USDollarHKex_lvl0[allocations_USDollarHKex[this]][sender_s1052] == false)
[L5567]              j_s1052 := 0;
[L5568]  COND FALSE  !(j_s1052 < Length[M_Ref_Ref[allocations_USDollarHKex[this]][sender_s1052]])
[L5633]  COND FALSE  !(total_unlockamount_s1052 > 0)
[L5636]  COND FALSE  !(alloc_allocations_USDollarHKex_lvl0[allocations_USDollarHKex[this]][sender_s1052] == false)
[L5647]  COND FALSE  !(total_lockamount_s1052 == 0 && Length[M_Ref_Ref[allocations_USDollarHKex[this]][sender_s1052]] > 0)
[L5155]  RET         call subAllocation~address_USDollarHKex__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5156]  COND FALSE  !(revert)
[L5159]  COND TRUE   DType[this] == USDollarHKex
[L5160]  CALL        call __var_25 := transfer~address~uint256_PausableToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s828, _value_s828);
[L4759]  CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7619]  COND FALSE  !(!!paused_Pausable[this])
[L4759]  RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4760]  COND FALSE  !(revert)
[L4763]  COND TRUE   DType[this] == USDollarHKex
[L4764]  CALL        call __var_11 := transfer~address~uint256_BasicToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s641, _value_s641);
[L4208]              __var_2 := null;
[L4209]  COND FALSE  !(!(_to_s266 != null))
[L4213]  COND FALSE  !(!(_value_s266 <= balances_BasicToken[this][msgsender_MSG]))
[L4217]  CALL        call __var_3 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][msgsender_MSG], _value_s266);
[L3928]              assert b_s68 <= a_s68;
[L3929]              __ret_0_ := (a_s68 - b_s68) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4217]  RET         call __var_3 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][msgsender_MSG], _value_s266);
[L4218]  COND FALSE  !(revert)
[L4221]              sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][msgsender_MSG];
[L4222]              balances_BasicToken[this][msgsender_MSG] := __var_3;
[L4223]              sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][msgsender_MSG];
[L4224]  CALL        call __var_4 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_to_s266], _value_s266);
[L3942]              c_s92 := (a_s92 + b_s92) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3943]              assert c_s92 >= a_s92;
[L3944]              c_s92 := c_s92;
[L4224]  RET         call __var_4 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_to_s266], _value_s266);
[L4225]  COND FALSE  !(revert)
[L4228]              sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][_to_s266];
[L4229]              balances_BasicToken[this][_to_s266] := __var_4;
[L4230]              sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][_to_s266];
[L4231]              assert { :EventEmitted "Transfer_BasicToken" } true;
[L4232]              __ret_0_ := true;
[L4764]  RET         call __var_11 := transfer~address~uint256_BasicToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s641, _value_s641);
[L4765]  COND FALSE  !(revert)
[L4776]              __ret_0_ := __var_11;
[L5160]  RET         call __var_25 := transfer~address~uint256_PausableToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s828, _value_s828);
[L5161]  COND FALSE  !(revert)
[L5167]              __ret_0_ := __var_25;
[L2204]  RET         call __ret_0_ := transfer~address~uint256_USDollarHKex__success(this, msgsender_MSG, msgvalue_MSG, _to_s828, _value_s828);
[L2205]              assume !revert && gas >= 0;
[L8570]  RET         call __ret_0_transfer := transfer~address~uint256_USDollarHKex(this, msgsender_MSG, msgvalue_MSG, _to_s828, _value_s828);
[L8688]  RET         call CorralChoice_USDollarHKex(this);

Loop:
[L8688]  CALL        call CorralChoice_USDollarHKex(this);
[L8483]              havoc msgsender_MSG;
[L8484]              havoc msgvalue_MSG;
[L8485]              havoc choice;
[L8486]              havoc __ret_0_owner;
[L8487]              havoc _newOwner_s133;
[L8488]              havoc __ret_0_totalSupply;
[L8489]              havoc _owner_s278;
[L8490]              havoc __ret_0_balanceOf;
[L8491]              havoc _to_s828;
[L8492]              havoc _value_s828;
[L8493]              havoc __ret_0_transfer;
[L8494]              havoc _owner_s459;
[L8495]              havoc _spender_s459;
[L8496]              havoc __ret_0_allowance;
[L8497]              havoc _from_s858;
[L8498]              havoc _to_s858;
[L8499]              havoc _value_s858;
[L8500]              havoc __ret_0_transferFrom;
[L8501]              havoc _spender_s680;
[L8502]              havoc _value_s680;
[L8503]              havoc __ret_0_approve;
[L8504]              havoc _spender_s698;
[L8505]              havoc _addedValue_s698;
[L8506]              havoc success_s698;
[L8507]              havoc _spender_s716;
[L8508]              havoc _subtractedValue_s716;
[L8509]              havoc success_s716;
[L8510]              havoc __ret_0_paused;
[L8511]              havoc __ret_0_name;
[L8512]              havoc __ret_0_symbol;
[L8513]              havoc __ret_0_standard;
[L8514]              havoc __ret_0_decimals;
[L8515]              havoc __ret_0_INITIAL_SUPPLY;
[L8516]              havoc arg1229_s0;
[L8517]              havoc arg1230_s0;
[L8518]              havoc __ret_0_allocations;
[L8519]              havoc _address_s1226;
[L8520]              havoc total_value_s1226;
[L8521]              havoc times_s1226;
[L8522]              havoc balanceRequires_s1226;
[L8523]              havoc __ret_0_setAllocation;
[L8524]              havoc tmpNow;
[L8525]              havoc gas;
[L8526]              assume gas > 4000000 && gas <= 8000000;
[L8527]              tmpNow := now;
[L8528]              havoc now;
[L8529]              assume now > tmpNow;
[L8530]              assume msgsender_MSG != null;
[L8531]              assume DType[msgsender_MSG] != SafeMath;
[L8532]              assume DType[msgsender_MSG] != Ownable;
[L8533]              assume DType[msgsender_MSG] != ERC20Basic;
[L8534]              assume DType[msgsender_MSG] != BasicToken;
[L8535]              assume DType[msgsender_MSG] != ERC20;
[L8536]              assume DType[msgsender_MSG] != StandardToken;
[L8537]              assume DType[msgsender_MSG] != Pausable;
[L8538]              assume DType[msgsender_MSG] != PausableToken;
[L8539]              assume DType[msgsender_MSG] != USDollarHKex;
[L8540]              Alloc[msgsender_MSG] := true;
[L8541]  COND FALSE  !(choice == 20)
[L8547]  COND FALSE  !(choice == 19)
[L8553]  COND FALSE  !(choice == 18)
[L8559]  COND FALSE  !(choice == 17)
[L8565]  COND TRUE   choice == 16
[L8566]              gas := gas - 21000;
[L8567]  COND TRUE   gas >= 0
[L8568]              assume _value_s828 >= 0 && _value_s828 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8569]              assume msgvalue_MSG == 0;
[L8570]  CALL        call __ret_0_transfer := transfer~address~uint256_USDollarHKex(this, msgsender_MSG, msgvalue_MSG, _to_s828, _value_s828);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG != _to_s828 && (_value_s828 > balances_BasicToken[this][msgsender_MSG] || balances_BasicToken[this][_to_s828] + _value_s828 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && _value_s828 >= 0) && _value_s828 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][_to_s828] >= 0) && balances_BasicToken[this][_to_s828] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][msgsender_MSG] >= 0) && balances_BasicToken[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_USDollarHKex0 := true;
[L2]                 call_transfer_USDollarHKex0 := false;
[L2]                 revert := revert_hold;
[L2170]              havoc __exception;
[L2171]              revert := false;
[L2172]  COND FALSE  !(__exception)
[L2204]  CALL        call __ret_0_ := transfer~address~uint256_USDollarHKex__success(this, msgsender_MSG, msgvalue_MSG, _to_s828, _value_s828);
[L5147]  CALL        call __var_24 := canSubAllocation~address~uint256_USDollarHKex__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, _value_s828);
[L5328]  COND FALSE  !(sub_value_s949 == 0)
[L5332]  COND FALSE  !(balances_BasicToken[this][sender_s949] < sub_value_s949)
[L5336]  COND FALSE  !(alloc_allocations_USDollarHKex_lvl0[allocations_USDollarHKex[this]][sender_s949] == false)
[L5347]  COND TRUE   Length[M_Ref_Ref[allocations_USDollarHKex[this]][sender_s949]] == 0
[L5348]              __ret_0_ := true;
[L5147]  RET         call __var_24 := canSubAllocation~address~uint256_USDollarHKex__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, _value_s828);
[L5148]  COND FALSE  !(revert)
[L5151]  COND FALSE  !(!__var_24)
[L5155]  CALL        call subAllocation~address_USDollarHKex__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5554]              total_lockamount_s1052 := 0;
[L5555]              total_unlockamount_s1052 := 0;
[L5556]  COND FALSE  !(alloc_allocations_USDollarHKex_lvl0[allocations_USDollarHKex[this]][sender_s1052] == false)
[L5567]              j_s1052 := 0;
[L5568]  COND FALSE  !(j_s1052 < Length[M_Ref_Ref[allocations_USDollarHKex[this]][sender_s1052]])
[L5633]  COND FALSE  !(total_unlockamount_s1052 > 0)
[L5636]  COND FALSE  !(alloc_allocations_USDollarHKex_lvl0[allocations_USDollarHKex[this]][sender_s1052] == false)
[L5647]  COND FALSE  !(total_lockamount_s1052 == 0 && Length[M_Ref_Ref[allocations_USDollarHKex[this]][sender_s1052]] > 0)
[L5155]  RET         call subAllocation~address_USDollarHKex__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5156]  COND FALSE  !(revert)
[L5159]  COND TRUE   DType[this] == USDollarHKex
[L5160]  CALL        call __var_25 := transfer~address~uint256_PausableToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s828, _value_s828);
[L4759]  CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7619]  COND FALSE  !(!!paused_Pausable[this])
[L4759]  RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4760]  COND FALSE  !(revert)
[L4763]  COND TRUE   DType[this] == USDollarHKex
[L4764]  CALL        call __var_11 := transfer~address~uint256_BasicToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s641, _value_s641);
[L4208]              __var_2 := null;
[L4209]  COND FALSE  !(!(_to_s266 != null))
[L4213]  COND FALSE  !(!(_value_s266 <= balances_BasicToken[this][msgsender_MSG]))
[L4217]  CALL        call __var_3 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][msgsender_MSG], _value_s266);
[L3928]              assert b_s68 <= a_s68;
[L3929]              __ret_0_ := (a_s68 - b_s68) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4217]  RET         call __var_3 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][msgsender_MSG], _value_s266);
[L4218]  COND FALSE  !(revert)
[L4221]              sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][msgsender_MSG];
[L4222]              balances_BasicToken[this][msgsender_MSG] := __var_3;
[L4223]              sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][msgsender_MSG];
[L4224]  CALL        call __var_4 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_to_s266], _value_s266);
[L3942]              c_s92 := (a_s92 + b_s92) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3943]              assert c_s92 >= a_s92;
[L3944]              c_s92 := c_s92;
[L4224]  RET         call __var_4 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_to_s266], _value_s266);
[L4225]  COND FALSE  !(revert)
[L4228]              sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][_to_s266];
[L4229]              balances_BasicToken[this][_to_s266] := __var_4;
[L4230]              sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][_to_s266];
[L4231]              assert { :EventEmitted "Transfer_BasicToken" } true;
[L4232]              __ret_0_ := true;
[L4764]  RET         call __var_11 := transfer~address~uint256_BasicToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s641, _value_s641);
[L4765]  COND FALSE  !(revert)
[L4776]              __ret_0_ := __var_11;
[L5160]  RET         call __var_25 := transfer~address~uint256_PausableToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s828, _value_s828);
[L5161]  COND FALSE  !(revert)
[L5167]              __ret_0_ := __var_25;
[L2204]  RET         call __ret_0_ := transfer~address~uint256_USDollarHKex__success(this, msgsender_MSG, msgvalue_MSG, _to_s828, _value_s828);
[L2205]              assume !revert && gas >= 0;
[L8570]  RET         call __ret_0_transfer := transfer~address~uint256_USDollarHKex(this, msgsender_MSG, msgvalue_MSG, _to_s828, _value_s828);
[L8688]  RET         call CorralChoice_USDollarHKex(this);

[2020-11-25 08:11:00,864 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 08:11:00,864 INFO  L82        PathProgramCache]: Analyzing trace with hash -758469754, now seen corresponding path program 1 times
[2020-11-25 08:11:00,865 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 08:11:00,902 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 08:11:01,205 INFO  L134       CoverageAnalysis]: Checked inductivity of 1058 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 1058 trivial. 0 not checked.
[2020-11-25 08:11:01,205 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 08:11:01,205 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [13] imperfect sequences [] total 13
[2020-11-25 08:11:01,205 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 08:11:01,205 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 13 interpolants.
[2020-11-25 08:11:01,206 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=28, Invalid=128, Unknown=0, NotChecked=0, Total=156
[2020-11-25 08:11:01,206 INFO  L87              Difference]: Start difference. First operand 5280 states and 5991 transitions. cyclomatic complexity: 734 Second operand 13 states.
[2020-11-25 08:11:03,033 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 08:11:03,033 INFO  L93              Difference]: Finished difference Result 3372 states and 3843 transitions.
[2020-11-25 08:11:03,033 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 13 states. 
[2020-11-25 08:11:03,033 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 3372 states and 3843 transitions.
[2020-11-25 08:11:03,038 INFO  L131   ngComponentsAnalysis]: Automaton has 0 accepting balls. 0
[2020-11-25 08:11:03,038 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 3372 states to 0 states and 0 transitions.
[2020-11-25 08:11:03,038 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 0
[2020-11-25 08:11:03,038 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 0
[2020-11-25 08:11:03,039 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 0 states and 0 transitions.
[2020-11-25 08:11:03,039 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 08:11:03,039 INFO  L728         BuchiCegarLoop]: Abstraction has 0 states and 0 transitions.
[2020-11-25 08:11:03,039 INFO  L751         BuchiCegarLoop]: Abstraction has 0 states and 0 transitions.
[2020-11-25 08:11:03,039 INFO  L631         BuchiCegarLoop]: Abstraction has 0 states and 0 transitions.
[2020-11-25 08:11:03,039 INFO  L445         BuchiCegarLoop]: ======== Iteration 13============
[2020-11-25 08:11:03,039 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 0 states and 0 transitions.
[2020-11-25 08:11:03,039 INFO  L131   ngComponentsAnalysis]: Automaton has 0 accepting balls. 0
[2020-11-25 08:11:03,039 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is true
[2020-11-25 08:11:03,042 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer CFG 25.11 08:11:03 BasicIcfg
[2020-11-25 08:11:03,042 INFO  L132        PluginConnector]: ------------------------ END BuchiAutomizer----------------------------
[2020-11-25 08:11:03,042 INFO  L168              Benchmark]: Toolchain (without parser) took 25522.14 ms. Allocated memory was 1.0 GB in the beginning and 2.8 GB in the end (delta: 1.8 GB). Free memory was 929.8 MB in the beginning and 2.2 GB in the end (delta: -1.2 GB). Peak memory consumption was 529.4 MB. Max. memory is 15.3 GB.
[2020-11-25 08:11:03,043 INFO  L168              Benchmark]: Boogie PL CUP Parser took 0.15 ms. Allocated memory is still 1.0 GB. Free memory is still 951.3 MB. There was no memory consumed. Max. memory is 15.3 GB.
[2020-11-25 08:11:03,043 INFO  L168              Benchmark]: Boogie Preprocessor took 120.77 ms. Allocated memory is still 1.0 GB. Free memory was 929.8 MB in the beginning and 913.7 MB in the end (delta: 16.1 MB). Peak memory consumption was 16.1 MB. Max. memory is 15.3 GB.
[2020-11-25 08:11:03,043 INFO  L168              Benchmark]: UtopiaSpecLang took 58.15 ms. Allocated memory is still 1.0 GB. Free memory was 913.7 MB in the beginning and 903.0 MB in the end (delta: 10.7 MB). Peak memory consumption was 10.7 MB. Max. memory is 15.3 GB.
[2020-11-25 08:11:03,044 INFO  L168              Benchmark]: Boogie Printer took 21.79 ms. Allocated memory is still 1.0 GB. Free memory was 903.0 MB in the beginning and 897.6 MB in the end (delta: 5.4 MB). Peak memory consumption was 5.4 MB. Max. memory is 15.3 GB.
[2020-11-25 08:11:03,044 INFO  L168              Benchmark]: RCFGBuilder took 1226.36 ms. Allocated memory was 1.0 GB in the beginning and 1.1 GB in the end (delta: 62.9 MB). Free memory was 897.6 MB in the beginning and 906.3 MB in the end (delta: -8.7 MB). Peak memory consumption was 186.8 MB. Max. memory is 15.3 GB.
[2020-11-25 08:11:03,044 INFO  L168              Benchmark]: UtopiaLTL2Aut took 39.27 ms. Allocated memory is still 1.1 GB. Free memory was 906.3 MB in the beginning and 902.8 MB in the end (delta: 3.4 MB). Peak memory consumption was 3.4 MB. Max. memory is 15.3 GB.
[2020-11-25 08:11:03,045 INFO  L168              Benchmark]: BÃ¼chi Program Product took 2492.08 ms. Allocated memory was 1.1 GB in the beginning and 1.3 GB in the end (delta: 192.4 MB). Free memory was 902.8 MB in the beginning and 921.2 MB in the end (delta: -18.4 MB). Peak memory consumption was 478.3 MB. Max. memory is 15.3 GB.
[2020-11-25 08:11:03,045 INFO  L168              Benchmark]: BlockEncodingV2 took 228.08 ms. Allocated memory is still 1.3 GB. Free memory was 921.2 MB in the beginning and 811.4 MB in the end (delta: 109.8 MB). Peak memory consumption was 109.8 MB. Max. memory is 15.3 GB.
[2020-11-25 08:11:03,045 INFO  L168              Benchmark]: BuchiAutomizer took 21332.97 ms. Allocated memory was 1.3 GB in the beginning and 2.8 GB in the end (delta: 1.5 GB). Free memory was 811.4 MB in the beginning and 2.2 GB in the end (delta: -1.4 GB). Peak memory consumption was 155.6 MB. Max. memory is 15.3 GB.
[2020-11-25 08:11:03,047 INFO  L337   ainManager$Toolchain]: #######################  End [Toolchain 1] #######################
 --- Results ---
 * Results from de.uni_freiburg.informatik.ultimate.plugins.blockencoding:
  - StatisticsResult: Initial Icfg
    8068 locations, 14499 edges
  - StatisticsResult: Encoded RCFG
    7908 locations, 14112 edges
 * Results from de.uni_freiburg.informatik.ultimate.core:
  - StatisticsResult: Toolchain Benchmarks
    Benchmark results are:
 * Boogie PL CUP Parser took 0.15 ms. Allocated memory is still 1.0 GB. Free memory is still 951.3 MB. There was no memory consumed. Max. memory is 15.3 GB.
 * Boogie Preprocessor took 120.77 ms. Allocated memory is still 1.0 GB. Free memory was 929.8 MB in the beginning and 913.7 MB in the end (delta: 16.1 MB). Peak memory consumption was 16.1 MB. Max. memory is 15.3 GB.
 * UtopiaSpecLang took 58.15 ms. Allocated memory is still 1.0 GB. Free memory was 913.7 MB in the beginning and 903.0 MB in the end (delta: 10.7 MB). Peak memory consumption was 10.7 MB. Max. memory is 15.3 GB.
 * Boogie Printer took 21.79 ms. Allocated memory is still 1.0 GB. Free memory was 903.0 MB in the beginning and 897.6 MB in the end (delta: 5.4 MB). Peak memory consumption was 5.4 MB. Max. memory is 15.3 GB.
 * RCFGBuilder took 1226.36 ms. Allocated memory was 1.0 GB in the beginning and 1.1 GB in the end (delta: 62.9 MB). Free memory was 897.6 MB in the beginning and 906.3 MB in the end (delta: -8.7 MB). Peak memory consumption was 186.8 MB. Max. memory is 15.3 GB.
 * UtopiaLTL2Aut took 39.27 ms. Allocated memory is still 1.1 GB. Free memory was 906.3 MB in the beginning and 902.8 MB in the end (delta: 3.4 MB). Peak memory consumption was 3.4 MB. Max. memory is 15.3 GB.
 * BÃ¼chi Program Product took 2492.08 ms. Allocated memory was 1.1 GB in the beginning and 1.3 GB in the end (delta: 192.4 MB). Free memory was 902.8 MB in the beginning and 921.2 MB in the end (delta: -18.4 MB). Peak memory consumption was 478.3 MB. Max. memory is 15.3 GB.
 * BlockEncodingV2 took 228.08 ms. Allocated memory is still 1.3 GB. Free memory was 921.2 MB in the beginning and 811.4 MB in the end (delta: 109.8 MB). Peak memory consumption was 109.8 MB. Max. memory is 15.3 GB.
 * BuchiAutomizer took 21332.97 ms. Allocated memory was 1.3 GB in the beginning and 2.8 GB in the end (delta: 1.5 GB). Free memory was 811.4 MB in the beginning and 2.2 GB in the end (delta: -1.4 GB). Peak memory consumption was 155.6 MB. Max. memory is 15.3 GB.
 * Results from de.uni_freiburg.informatik.ultimate.buchiprogramproduct:
  - StatisticsResult: Initial property automaton
    2 locations, 3 edges
  - StatisticsResult: Initial RCFG
    3266 locations, 4464 edges
  - StatisticsResult: BuchiProgram size
    8068 locations, 14499 edges
 * Results from de.uni_freiburg.informatik.ultimate.plugins.generator.traceabstraction:
  - StatisticsResult: Constructed decomposition of program
    Your program was decomposed into 12 terminating modules (12 trivial, 0 deterministic, 0 nondeterministic). 12 modules have a trivial ranking function, the largest among these consists of 27 locations.
  - StatisticsResult: Timing statistics
    BÃ¼chiAutomizer plugin needed 21.2s and 13 iterations.  TraceHistogramMax:12. Analysis of lassos took 3.6s. Construction of modules took 12.5s. BÃ¼chi inclusion checks took 3.8s. Highest rank in rank-based complementation 0. Minimization of det autom 12. Minimization of nondet autom 0. Automata minimization 0.5s AutomataMinimizationTime, 11 MinimizatonAttempts, 1265 StatesRemovedByMinimization, 5 NontrivialMinimizations. Non-live state removal took 0.3s Buchi closure took 0.0s. Biggest automaton had 5940 states and ocurred in iteration 1.	Nontrivial modules had stage [0, 0, 0, 0, 0].	InterpolantCoveringCapabilityFinite: 0/0	InterpolantCoveringCapabilityBuchi: 0/0	HoareTripleCheckerStatistics: 60958 SDtfs, 40339 SDslu, 132143 SDs, 0 SdLazy, 170083 SolverSat, 6102 SolverUnsat, 0 SolverUnknown, 0 SolverNotchecked, 12.5s Time	LassoAnalysisResults: nont0 unkn0 SFLI0 SFLT0 conc0 concLT0 SILN0 SILU12 SILI0 SILT0 lasso0 LassoPreprocessingBenchmarks: LassoTerminationAnalysisBenchmarks: not availableLassoTerminationAnalysisBenchmarks: LassoNonterminationAnalysisSatFixpoint: 0	LassoNonterminationAnalysisSatUnbounded: 0	LassoNonterminationAnalysisUnsat: 0	LassoNonterminationAnalysisUnknown: 0	LassoNonterminationAnalysisTime: 0.0s	
  - AllSpecificationsHoldResult: All specifications hold
    Buchi Automizer proved that the LTL property ! ( ( []( (call_transfer_USDollarHKex0) ==> ( <>(fail_transfer_USDollarHKex0) ) ) )) holds
RESULT: Ultimate proved your program to be correct!
Received shutdown request...
