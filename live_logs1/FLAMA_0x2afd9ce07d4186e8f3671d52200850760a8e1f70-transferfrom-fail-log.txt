This is Ultimate 0.1.24-f1553f5-m
[2020-11-25 16:33:04,151 INFO  L170        SettingsManager]: Resetting all preferences to default values...
[2020-11-25 16:33:04,152 INFO  L174        SettingsManager]: Resetting UltimateCore preferences to default values
[2020-11-25 16:33:04,164 INFO  L177        SettingsManager]: Ultimate Commandline Interface provides no preferences, ignoring...
[2020-11-25 16:33:04,164 INFO  L174        SettingsManager]: Resetting Boogie Preprocessor preferences to default values
[2020-11-25 16:33:04,165 INFO  L174        SettingsManager]: Resetting Boogie Procedure Inliner preferences to default values
[2020-11-25 16:33:04,166 INFO  L174        SettingsManager]: Resetting Abstract Interpretation preferences to default values
[2020-11-25 16:33:04,167 INFO  L174        SettingsManager]: Resetting LassoRanker preferences to default values
[2020-11-25 16:33:04,169 INFO  L174        SettingsManager]: Resetting Reaching Definitions preferences to default values
[2020-11-25 16:33:04,169 INFO  L174        SettingsManager]: Resetting SyntaxChecker preferences to default values
[2020-11-25 16:33:04,170 INFO  L177        SettingsManager]: BÃ¼chi Program Product provides no preferences, ignoring...
[2020-11-25 16:33:04,171 INFO  L174        SettingsManager]: Resetting LTL2Aut preferences to default values
[2020-11-25 16:33:04,171 INFO  L174        SettingsManager]: Resetting PEA to Boogie preferences to default values
[2020-11-25 16:33:04,172 INFO  L174        SettingsManager]: Resetting BlockEncodingV2 preferences to default values
[2020-11-25 16:33:04,173 INFO  L174        SettingsManager]: Resetting ChcToBoogie preferences to default values
[2020-11-25 16:33:04,174 INFO  L174        SettingsManager]: Resetting AutomataScriptInterpreter preferences to default values
[2020-11-25 16:33:04,174 INFO  L174        SettingsManager]: Resetting BuchiAutomizer preferences to default values
[2020-11-25 16:33:04,175 INFO  L174        SettingsManager]: Resetting CACSL2BoogieTranslator preferences to default values
[2020-11-25 16:33:04,177 INFO  L174        SettingsManager]: Resetting CodeCheck preferences to default values
[2020-11-25 16:33:04,178 INFO  L174        SettingsManager]: Resetting InvariantSynthesis preferences to default values
[2020-11-25 16:33:04,179 INFO  L174        SettingsManager]: Resetting RCFGBuilder preferences to default values
[2020-11-25 16:33:04,179 INFO  L174        SettingsManager]: Resetting TraceAbstraction preferences to default values
[2020-11-25 16:33:04,181 INFO  L177        SettingsManager]: TraceAbstractionConcurrent provides no preferences, ignoring...
[2020-11-25 16:33:04,181 INFO  L177        SettingsManager]: TraceAbstractionWithAFAs provides no preferences, ignoring...
[2020-11-25 16:33:04,182 INFO  L174        SettingsManager]: Resetting TreeAutomizer preferences to default values
[2020-11-25 16:33:04,182 INFO  L174        SettingsManager]: Resetting IcfgToChc preferences to default values
[2020-11-25 16:33:04,182 INFO  L174        SettingsManager]: Resetting IcfgTransformer preferences to default values
[2020-11-25 16:33:04,183 INFO  L177        SettingsManager]: ReqToTest provides no preferences, ignoring...
[2020-11-25 16:33:04,183 INFO  L174        SettingsManager]: Resetting UtopiaLTL2Aut preferences to default values
[2020-11-25 16:33:04,183 INFO  L174        SettingsManager]: Resetting UtopiaSpecLang preferences to default values
[2020-11-25 16:33:04,184 INFO  L174        SettingsManager]: Resetting Boogie Printer preferences to default values
[2020-11-25 16:33:04,184 INFO  L174        SettingsManager]: Resetting ChcSmtPrinter preferences to default values
[2020-11-25 16:33:04,185 INFO  L174        SettingsManager]: Resetting ReqPrinter preferences to default values
[2020-11-25 16:33:04,185 INFO  L174        SettingsManager]: Resetting Witness Printer preferences to default values
[2020-11-25 16:33:04,186 INFO  L177        SettingsManager]: Boogie PL CUP Parser provides no preferences, ignoring...
[2020-11-25 16:33:04,186 INFO  L174        SettingsManager]: Resetting CDTParser preferences to default values
[2020-11-25 16:33:04,187 INFO  L177        SettingsManager]: AutomataScriptParser provides no preferences, ignoring...
[2020-11-25 16:33:04,187 INFO  L177        SettingsManager]: ReqParser provides no preferences, ignoring...
[2020-11-25 16:33:04,187 INFO  L174        SettingsManager]: Resetting SmtParser preferences to default values
[2020-11-25 16:33:04,188 INFO  L174        SettingsManager]: Resetting Witness Parser preferences to default values
[2020-11-25 16:33:04,188 INFO  L181        SettingsManager]: Finished resetting all preferences to default values...
[2020-11-25 16:33:04,189 INFO  L98         SettingsManager]: Beginning loading settings from /mnt/data0/jon/SmartPulseTool/SmartPulse/settings.epf
[2020-11-25 16:33:04,196 INFO  L110        SettingsManager]: Loading preferences was successful
[2020-11-25 16:33:04,197 INFO  L112        SettingsManager]: Preferences different from defaults after loading the file:
[2020-11-25 16:33:04,197 INFO  L131        SettingsManager]: Preferences of LTL2Aut differ from their defaults:
[2020-11-25 16:33:04,198 INFO  L133        SettingsManager]:  * Read property from file=true
[2020-11-25 16:33:04,198 INFO  L133        SettingsManager]:  * Path to LTL*BA executable (LTL2BA, LTL3BA)=/mnt/data0/jon/SmartPulseTool/ltl2ba
[2020-11-25 16:33:04,198 INFO  L131        SettingsManager]: Preferences of BlockEncodingV2 differ from their defaults:
[2020-11-25 16:33:04,198 INFO  L133        SettingsManager]:  * Maximize final states=false
[2020-11-25 16:33:04,198 INFO  L133        SettingsManager]:  * Minimize states even if more edges are added than removed.=true
[2020-11-25 16:33:04,198 INFO  L133        SettingsManager]:  * Minimize states using LBE with the strategy=NONE
[2020-11-25 16:33:04,198 INFO  L131        SettingsManager]: Preferences of BuchiAutomizer differ from their defaults:
[2020-11-25 16:33:04,198 INFO  L133        SettingsManager]:  * Compute Interpolants along a Counterexample=Craig_TreeInterpolation
[2020-11-25 16:33:04,199 INFO  L133        SettingsManager]:  * Use old map elimination=false
[2020-11-25 16:33:04,199 INFO  L133        SettingsManager]:  * Try twofold refinement=false
[2020-11-25 16:33:04,199 INFO  L131        SettingsManager]: Preferences of CACSL2BoogieTranslator differ from their defaults:
[2020-11-25 16:33:04,199 INFO  L133        SettingsManager]:  * Check unreachability of error function in SV-COMP mode=false
[2020-11-25 16:33:04,199 INFO  L133        SettingsManager]:  * Overapproximate operations on floating types=true
[2020-11-25 16:33:04,199 INFO  L133        SettingsManager]:  * Check division by zero=IGNORE
[2020-11-25 16:33:04,199 INFO  L133        SettingsManager]:  * Pointer to allocated memory at dereference=ASSUME
[2020-11-25 16:33:04,199 INFO  L133        SettingsManager]:  * If two pointers are subtracted or compared they have the same base address=ASSUME
[2020-11-25 16:33:04,199 INFO  L133        SettingsManager]:  * Check array bounds for arrays that are off heap=ASSUME
[2020-11-25 16:33:04,199 INFO  L133        SettingsManager]:  * Check if freed pointer was valid=false
[2020-11-25 16:33:04,200 INFO  L133        SettingsManager]:  * Use constant arrays=true
[2020-11-25 16:33:04,200 INFO  L133        SettingsManager]:  * Pointer base address is valid at dereference=ASSUME
[2020-11-25 16:33:04,200 INFO  L131        SettingsManager]: Preferences of RCFGBuilder differ from their defaults:
[2020-11-25 16:33:04,200 INFO  L133        SettingsManager]:  * Size of a code block=SingleStatement
[2020-11-25 16:33:04,200 INFO  L133        SettingsManager]:  * SMT solver=Internal_SMTInterpol
[2020-11-25 16:33:04,221 INFO  L81    nceAwareModelManager]: Repository-Root is: /tmp
[2020-11-25 16:33:04,231 INFO  L259   ainManager$Toolchain]: [Toolchain 1]: Applicable parser(s) successfully (re)initialized
[2020-11-25 16:33:04,234 INFO  L215   ainManager$Toolchain]: [Toolchain 1]: Toolchain selected.
[2020-11-25 16:33:04,236 INFO  L271        PluginConnector]: Initializing Boogie PL CUP Parser...
[2020-11-25 16:33:04,237 INFO  L276        PluginConnector]: Boogie PL CUP Parser initialized
[2020-11-25 16:33:04,238 INFO  L430   ainManager$Toolchain]: [Toolchain 1]: Parsing single file: /mnt/data0/jon/SmartPulseTool/FLAMA_0x2afd9ce07d4186e8f3671d52200850760a8e1f70_transferfrom-fail.bpl
[2020-11-25 16:33:04,238 INFO  L111           BoogieParser]: Parsing: '/mnt/data0/jon/SmartPulseTool/FLAMA_0x2afd9ce07d4186e8f3671d52200850760a8e1f70_transferfrom-fail.bpl'
[2020-11-25 16:33:04,318 INFO  L297   ainManager$Toolchain]: ####################### [Toolchain 1] #######################
[2020-11-25 16:33:04,319 INFO  L131        ToolchainWalker]: Walking toolchain with 8 elements.
[2020-11-25 16:33:04,320 INFO  L113        PluginConnector]: ------------------------Boogie Preprocessor----------------------------
[2020-11-25 16:33:04,320 INFO  L271        PluginConnector]: Initializing Boogie Preprocessor...
[2020-11-25 16:33:04,320 INFO  L276        PluginConnector]: Boogie Preprocessor initialized
[2020-11-25 16:33:04,337 INFO  L185        PluginConnector]: Executing the observer EnsureBoogieModelObserver from plugin Boogie Preprocessor for "FLAMA_0x2afd9ce07d4186e8f3671d52200850760a8e1f70_transferfrom-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 04:33:04" (1/1) ...
[2020-11-25 16:33:04,339 INFO  L185        PluginConnector]: Executing the observer TypeChecker from plugin Boogie Preprocessor for "FLAMA_0x2afd9ce07d4186e8f3671d52200850760a8e1f70_transferfrom-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 04:33:04" (1/1) ...
[2020-11-25 16:33:04,372 INFO  L185        PluginConnector]: Executing the observer ConstExpander from plugin Boogie Preprocessor for "FLAMA_0x2afd9ce07d4186e8f3671d52200850760a8e1f70_transferfrom-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 04:33:04" (1/1) ...
[2020-11-25 16:33:04,373 INFO  L185        PluginConnector]: Executing the observer StructExpander from plugin Boogie Preprocessor for "FLAMA_0x2afd9ce07d4186e8f3671d52200850760a8e1f70_transferfrom-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 04:33:04" (1/1) ...
[2020-11-25 16:33:04,392 INFO  L185        PluginConnector]: Executing the observer UnstructureCode from plugin Boogie Preprocessor for "FLAMA_0x2afd9ce07d4186e8f3671d52200850760a8e1f70_transferfrom-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 04:33:04" (1/1) ...
[2020-11-25 16:33:04,400 INFO  L185        PluginConnector]: Executing the observer FunctionInliner from plugin Boogie Preprocessor for "FLAMA_0x2afd9ce07d4186e8f3671d52200850760a8e1f70_transferfrom-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 04:33:04" (1/1) ...
[2020-11-25 16:33:04,405 INFO  L185        PluginConnector]: Executing the observer BoogieSymbolTableConstructor from plugin Boogie Preprocessor for "FLAMA_0x2afd9ce07d4186e8f3671d52200850760a8e1f70_transferfrom-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 04:33:04" (1/1) ...
[2020-11-25 16:33:04,414 INFO  L132        PluginConnector]: ------------------------ END Boogie Preprocessor----------------------------
[2020-11-25 16:33:04,414 INFO  L113        PluginConnector]: ------------------------UtopiaSpecLang----------------------------
[2020-11-25 16:33:04,414 INFO  L271        PluginConnector]: Initializing UtopiaSpecLang...
[2020-11-25 16:33:04,416 INFO  L276        PluginConnector]: UtopiaSpecLang initialized
[2020-11-25 16:33:04,420 INFO  L185        PluginConnector]: Executing the observer UtopiaSpecLangObserver from plugin UtopiaSpecLang for "FLAMA_0x2afd9ce07d4186e8f3671d52200850760a8e1f70_transferfrom-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 04:33:04" (1/1) ...
[2020-11-25 16:33:04,440 INFO  L1012  opiaSpecLangObserver]: Parsing LTLPlus Formula to AstNode: [](started(FLAMA.transferFrom(from, to, value), from != to && (value > _balances_FLAMA[this][from] || value > _allowed_FLAMA[this][from][msg.sender] || _balances_FLAMA[this][to] + value >= 0x10000000000000000000000000000000000000000000000000000000000000000) && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_FLAMA[this][to] >= 0 && _balances_FLAMA[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_FLAMA[this][from] >= 0 &&  _balances_FLAMA[this][from] < 0x10000000000000000000000000000000000000000000000000000000000000000 && _allowed_FLAMA[this][from][msg.sender] >= 0 && _allowed_FLAMA[this][from][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(reverted(FLAMA.transferFrom)))
[2020-11-25 16:33:04,447 INFO  L1016  opiaSpecLangObserver]: Successfully lexed: [](started(FLAMA.transferFrom(from, to, value), from != to && (value > _balances_FLAMA[this][from] || value > _allowed_FLAMA[this][from][msg.sender] || _balances_FLAMA[this][to] + value >= 0x10000000000000000000000000000000000000000000000000000000000000000) && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_FLAMA[this][to] >= 0 && _balances_FLAMA[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_FLAMA[this][from] >= 0 &&  _balances_FLAMA[this][from] < 0x10000000000000000000000000000000000000000000000000000000000000000 && _allowed_FLAMA[this][from][msg.sender] >= 0 && _allowed_FLAMA[this][from][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(reverted(FLAMA.transferFrom)))
[2020-11-25 16:33:04,454 INFO  L1018  opiaSpecLangObserver]: Successfully parsed: [](started(FLAMA.transferFrom(from, to, value), from != to && (value > _balances_FLAMA[this][from] || value > _allowed_FLAMA[this][from][msg.sender] || _balances_FLAMA[this][to] + value >= 0x10000000000000000000000000000000000000000000000000000000000000000) && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_FLAMA[this][to] >= 0 && _balances_FLAMA[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_FLAMA[this][from] >= 0 &&  _balances_FLAMA[this][from] < 0x10000000000000000000000000000000000000000000000000000000000000000 && _allowed_FLAMA[this][from][msg.sender] >= 0 && _allowed_FLAMA[this][from][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(reverted(FLAMA.transferFrom)))
[2020-11-25 16:33:04,462 INFO  L636   opiaSpecLangObserver]: Parsed ( ( ( ( ( ( ( ( ( from_s416!=to_s416 && ( ( value_s416>_balances_FLAMA[this][from_s416] || value_s416>_allowed_FLAMA[this][from_s416][msg.sender] ) || ( _balances_FLAMA[this][to_s416] + value_s416 )>=115792089237316195423570985008687907853269984665640564039457584007913129639936 ) ) && value_s416>=0 ) && value_s416<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) && _balances_FLAMA[this][to_s416]>=0 ) && _balances_FLAMA[this][to_s416]<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) && _balances_FLAMA[this][from_s416]>=0 ) && _balances_FLAMA[this][from_s416]<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) && _allowed_FLAMA[this][from_s416][msg.sender]>=0 ) && _allowed_FLAMA[this][from_s416][msg.sender]<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) to BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[COMPNEQ,IdentifierExpression[from_s416,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_FLAMA>],IdentifierExpression[to_s416,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_FLAMA>]],BinaryExpression[LOGICOR,BinaryExpression[LOGICOR,BinaryExpression[COMPGT,IdentifierExpression[value_s416,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_FLAMA>],ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_FLAMA,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_FLAMA>]]],[IdentifierExpression[from_s416,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_FLAMA>]]]],BinaryExpression[COMPGT,IdentifierExpression[value_s416,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_FLAMA>],ArrayAccessExpression[ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_allowed_FLAMA,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_FLAMA>]]],[IdentifierExpression[from_s416,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_FLAMA>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_FLAMA>]]]]],BinaryExpression[COMPGEQ,BinaryExpression[ARITHPLUS,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_FLAMA,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_FLAMA>]]],[IdentifierExpression[to_s416,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_FLAMA>]]],IdentifierExpression[value_s416,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_FLAMA>]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]]],BinaryExpression[COMPGEQ,IdentifierExpression[value_s416,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_FLAMA>],IntegerLiteral[0]]],BinaryExpression[COMPLT,IdentifierExpression[value_s416,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_FLAMA>],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]],BinaryExpression[COMPGEQ,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_FLAMA,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_FLAMA>]]],[IdentifierExpression[to_s416,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_FLAMA>]]],IntegerLiteral[0]]],BinaryExpression[COMPLT,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_FLAMA,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_FLAMA>]]],[IdentifierExpression[to_s416,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_FLAMA>]]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]],BinaryExpression[COMPGEQ,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_FLAMA,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_FLAMA>]]],[IdentifierExpression[from_s416,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_FLAMA>]]],IntegerLiteral[0]]],BinaryExpression[COMPLT,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_FLAMA,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_FLAMA>]]],[IdentifierExpression[from_s416,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_FLAMA>]]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]],BinaryExpression[COMPGEQ,ArrayAccessExpression[ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_allowed_FLAMA,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_FLAMA>]]],[IdentifierExpression[from_s416,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_FLAMA>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_FLAMA>]]],IntegerLiteral[0]]],BinaryExpression[COMPLT,ArrayAccessExpression[ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_allowed_FLAMA,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_FLAMA>]]],[IdentifierExpression[from_s416,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_FLAMA>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_FLAMA>]]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]]
[2020-11-25 16:33:04,466 INFO  L1005  opiaSpecLangObserver]: Compiling: [](started(FLAMA.transferFrom(from, to, value), from != to && (value > _balances_FLAMA[this][from] || value > _allowed_FLAMA[this][from][msg.sender] || _balances_FLAMA[this][to] + value >= 0x10000000000000000000000000000000000000000000000000000000000000000) && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_FLAMA[this][to] >= 0 && _balances_FLAMA[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_FLAMA[this][from] >= 0 &&  _balances_FLAMA[this][from] < 0x10000000000000000000000000000000000000000000000000000000000000000 && _allowed_FLAMA[this][from][msg.sender] >= 0 && _allowed_FLAMA[this][from][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(reverted(FLAMA.transferFrom)))
[2020-11-25 16:33:04,466 INFO  L1007  opiaSpecLangObserver]: Compiled to ( []( AP(call_transferFrom_FLAMA0) ==> ( <>AP(fail_transferFrom_FLAMA0) ) ) )
Executed UtopiaSpecLang
[2020-11-25 16:33:04,472 INFO  L202        PluginConnector]: Adding new model Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 04:33:04 PropertyContainer
[2020-11-25 16:33:04,472 INFO  L132        PluginConnector]: ------------------------ END UtopiaSpecLang----------------------------
[2020-11-25 16:33:04,473 INFO  L113        PluginConnector]: ------------------------Boogie Printer----------------------------
[2020-11-25 16:33:04,473 INFO  L271        PluginConnector]: Initializing Boogie Printer...
[2020-11-25 16:33:04,473 INFO  L276        PluginConnector]: Boogie Printer initialized
[2020-11-25 16:33:04,474 INFO  L185        PluginConnector]: Executing the observer BoogiePrinterObserver from plugin Boogie Printer for "FLAMA_0x2afd9ce07d4186e8f3671d52200850760a8e1f70_transferfrom-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 04:33:04" (1/2) ...
[2020-11-25 16:33:04,474 INFO  L116   oogiePrinterObserver]: File already exists and will be overwritten: /tmp/boogiePrinter.bpl
[2020-11-25 16:33:04,474 INFO  L120   oogiePrinterObserver]: Writing to file /tmp/boogiePrinter.bpl
[2020-11-25 16:33:04,484 INFO  L185        PluginConnector]: Executing the observer BoogiePrinterObserver from plugin Boogie Printer for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 04:33:04" (2/2) ...
[2020-11-25 16:33:04,484 INFO  L132        PluginConnector]: ------------------------ END Boogie Printer----------------------------
[2020-11-25 16:33:04,484 INFO  L113        PluginConnector]: ------------------------RCFGBuilder----------------------------
[2020-11-25 16:33:04,484 INFO  L271        PluginConnector]: Initializing RCFGBuilder...
[2020-11-25 16:33:04,485 INFO  L276        PluginConnector]: RCFGBuilder initialized
[2020-11-25 16:33:04,485 INFO  L185        PluginConnector]: Executing the observer RCFGBuilderObserver from plugin RCFGBuilder for "FLAMA_0x2afd9ce07d4186e8f3671d52200850760a8e1f70_transferfrom-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 04:33:04" (1/2) ...
[2020-11-25 16:33:04,539 INFO  L130     BoogieDeclarations]: Found specification of procedure FreshRefGenerator__success
[2020-11-25 16:33:04,540 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath_NoBaseCtor__success
[2020-11-25 16:33:04,540 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath
[2020-11-25 16:33:04,540 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath
[2020-11-25 16:33:04,540 INFO  L130     BoogieDeclarations]: Found specification of procedure mul~uint256~uint256_SafeMath__success
[2020-11-25 16:33:04,540 INFO  L130     BoogieDeclarations]: Found specification of procedure div~uint256~uint256_SafeMath__success
[2020-11-25 16:33:04,540 INFO  L130     BoogieDeclarations]: Found specification of procedure sub~uint256~uint256_SafeMath__success
[2020-11-25 16:33:04,540 INFO  L130     BoogieDeclarations]: Found specification of procedure add~uint256~uint256_SafeMath__success
[2020-11-25 16:33:04,540 INFO  L130     BoogieDeclarations]: Found specification of procedure mod~uint256~uint256_SafeMath__success
[2020-11-25 16:33:04,540 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20_NoBaseCtor__success
[2020-11-25 16:33:04,540 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20
[2020-11-25 16:33:04,541 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20
[2020-11-25 16:33:04,541 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_IERC20
[2020-11-25 16:33:04,541 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_IERC20
[2020-11-25 16:33:04,541 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_IERC20
[2020-11-25 16:33:04,541 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_IERC20
[2020-11-25 16:33:04,541 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_IERC20
[2020-11-25 16:33:04,541 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_IERC20
[2020-11-25 16:33:04,541 INFO  L130     BoogieDeclarations]: Found specification of procedure burn~uint256_FLAMA
[2020-11-25 16:33:04,541 INFO  L138     BoogieDeclarations]: Found implementation of procedure burn~uint256_FLAMA
[2020-11-25 16:33:04,541 INFO  L130     BoogieDeclarations]: Found specification of procedure FLAMA_FLAMA_NoBaseCtor__success
[2020-11-25 16:33:04,541 INFO  L130     BoogieDeclarations]: Found specification of procedure FLAMA_FLAMA
[2020-11-25 16:33:04,542 INFO  L138     BoogieDeclarations]: Found implementation of procedure FLAMA_FLAMA
[2020-11-25 16:33:04,542 INFO  L130     BoogieDeclarations]: Found specification of procedure name_FLAMA
[2020-11-25 16:33:04,542 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_FLAMA
[2020-11-25 16:33:04,542 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_FLAMA
[2020-11-25 16:33:04,542 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_FLAMA
[2020-11-25 16:33:04,542 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_FLAMA
[2020-11-25 16:33:04,542 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_FLAMA
[2020-11-25 16:33:04,542 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_FLAMA
[2020-11-25 16:33:04,542 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_FLAMA
[2020-11-25 16:33:04,542 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_FLAMA
[2020-11-25 16:33:04,542 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_FLAMA
[2020-11-25 16:33:04,542 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_FLAMA
[2020-11-25 16:33:04,543 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_FLAMA
[2020-11-25 16:33:04,543 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_FLAMA
[2020-11-25 16:33:04,543 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_FLAMA
[2020-11-25 16:33:04,543 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_FLAMA
[2020-11-25 16:33:04,543 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_FLAMA
[2020-11-25 16:33:04,543 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_FLAMA
[2020-11-25 16:33:04,543 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_FLAMA
[2020-11-25 16:33:04,543 INFO  L130     BoogieDeclarations]: Found specification of procedure increaseAllowance~address~uint256_FLAMA
[2020-11-25 16:33:04,543 INFO  L138     BoogieDeclarations]: Found implementation of procedure increaseAllowance~address~uint256_FLAMA
[2020-11-25 16:33:04,543 INFO  L130     BoogieDeclarations]: Found specification of procedure decreaseAllowance~address~uint256_FLAMA
[2020-11-25 16:33:04,543 INFO  L138     BoogieDeclarations]: Found implementation of procedure decreaseAllowance~address~uint256_FLAMA
[2020-11-25 16:33:04,543 INFO  L130     BoogieDeclarations]: Found specification of procedure _transfer~address~address~uint256_FLAMA__success
[2020-11-25 16:33:04,543 INFO  L130     BoogieDeclarations]: Found specification of procedure _burn~address~uint256_FLAMA__success
[2020-11-25 16:33:04,544 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackDispatch__success
[2020-11-25 16:33:04,544 INFO  L130     BoogieDeclarations]: Found specification of procedure Fallback_UnknownType__success
[2020-11-25 16:33:04,544 INFO  L130     BoogieDeclarations]: Found specification of procedure send__success
[2020-11-25 16:33:04,544 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_SafeMath
[2020-11-25 16:33:04,544 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_SafeMath
[2020-11-25 16:33:04,544 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_IERC20
[2020-11-25 16:33:04,544 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_IERC20
[2020-11-25 16:33:04,544 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_FLAMA
[2020-11-25 16:33:04,544 INFO  L130     BoogieDeclarations]: Found specification of procedure main
[2020-11-25 16:33:04,544 INFO  L130     BoogieDeclarations]: Found specification of procedure FreshRefGenerator__fail
[2020-11-25 16:33:04,544 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath_NoBaseCtor__fail
[2020-11-25 16:33:04,544 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath__success
[2020-11-25 16:33:04,544 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath__fail
[2020-11-25 16:33:04,545 INFO  L130     BoogieDeclarations]: Found specification of procedure mul~uint256~uint256_SafeMath__fail
[2020-11-25 16:33:04,545 INFO  L130     BoogieDeclarations]: Found specification of procedure div~uint256~uint256_SafeMath__fail
[2020-11-25 16:33:04,545 INFO  L130     BoogieDeclarations]: Found specification of procedure sub~uint256~uint256_SafeMath__fail
[2020-11-25 16:33:04,545 INFO  L130     BoogieDeclarations]: Found specification of procedure add~uint256~uint256_SafeMath__fail
[2020-11-25 16:33:04,545 INFO  L130     BoogieDeclarations]: Found specification of procedure mod~uint256~uint256_SafeMath__fail
[2020-11-25 16:33:04,545 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20_NoBaseCtor__fail
[2020-11-25 16:33:04,545 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20__success
[2020-11-25 16:33:04,545 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20__fail
[2020-11-25 16:33:04,545 INFO  L130     BoogieDeclarations]: Found specification of procedure burn~uint256_FLAMA__success
[2020-11-25 16:33:04,545 INFO  L130     BoogieDeclarations]: Found specification of procedure burn~uint256_FLAMA__fail
[2020-11-25 16:33:04,545 INFO  L130     BoogieDeclarations]: Found specification of procedure FLAMA_FLAMA_NoBaseCtor__fail
[2020-11-25 16:33:04,545 INFO  L130     BoogieDeclarations]: Found specification of procedure FLAMA_FLAMA__success
[2020-11-25 16:33:04,545 INFO  L130     BoogieDeclarations]: Found specification of procedure FLAMA_FLAMA__fail
[2020-11-25 16:33:04,546 INFO  L130     BoogieDeclarations]: Found specification of procedure name_FLAMA__success
[2020-11-25 16:33:04,546 INFO  L130     BoogieDeclarations]: Found specification of procedure name_FLAMA__fail
[2020-11-25 16:33:04,546 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_FLAMA__success
[2020-11-25 16:33:04,546 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_FLAMA__fail
[2020-11-25 16:33:04,546 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_FLAMA__success
[2020-11-25 16:33:04,546 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_FLAMA__fail
[2020-11-25 16:33:04,546 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_FLAMA__success
[2020-11-25 16:33:04,546 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_FLAMA__fail
[2020-11-25 16:33:04,546 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_FLAMA__success
[2020-11-25 16:33:04,546 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_FLAMA__fail
[2020-11-25 16:33:04,546 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_FLAMA__success
[2020-11-25 16:33:04,546 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_FLAMA__fail
[2020-11-25 16:33:04,546 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_FLAMA__success
[2020-11-25 16:33:04,547 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_FLAMA__fail
[2020-11-25 16:33:04,547 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_FLAMA__success
[2020-11-25 16:33:04,547 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_FLAMA__fail
[2020-11-25 16:33:04,547 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_FLAMA__success
[2020-11-25 16:33:04,547 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_FLAMA__fail
[2020-11-25 16:33:04,547 INFO  L130     BoogieDeclarations]: Found specification of procedure increaseAllowance~address~uint256_FLAMA__success
[2020-11-25 16:33:04,547 INFO  L130     BoogieDeclarations]: Found specification of procedure increaseAllowance~address~uint256_FLAMA__fail
[2020-11-25 16:33:04,547 INFO  L130     BoogieDeclarations]: Found specification of procedure decreaseAllowance~address~uint256_FLAMA__success
[2020-11-25 16:33:04,547 INFO  L130     BoogieDeclarations]: Found specification of procedure decreaseAllowance~address~uint256_FLAMA__fail
[2020-11-25 16:33:04,547 INFO  L130     BoogieDeclarations]: Found specification of procedure _transfer~address~address~uint256_FLAMA__fail
[2020-11-25 16:33:04,547 INFO  L130     BoogieDeclarations]: Found specification of procedure _burn~address~uint256_FLAMA__fail
[2020-11-25 16:33:04,547 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackDispatch__fail
[2020-11-25 16:33:04,548 INFO  L130     BoogieDeclarations]: Found specification of procedure Fallback_UnknownType__fail
[2020-11-25 16:33:04,548 INFO  L130     BoogieDeclarations]: Found specification of procedure send__fail
[2020-11-25 16:33:04,548 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreshRefGenerator__fail
[2020-11-25 16:33:04,548 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreshRefGenerator__success
[2020-11-25 16:33:04,548 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath_NoBaseCtor__fail
[2020-11-25 16:33:04,548 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath_NoBaseCtor__success
[2020-11-25 16:33:04,548 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath__fail
[2020-11-25 16:33:04,548 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath__success
[2020-11-25 16:33:04,548 INFO  L138     BoogieDeclarations]: Found implementation of procedure mul~uint256~uint256_SafeMath__fail
[2020-11-25 16:33:04,548 INFO  L138     BoogieDeclarations]: Found implementation of procedure mul~uint256~uint256_SafeMath__success
[2020-11-25 16:33:04,548 INFO  L138     BoogieDeclarations]: Found implementation of procedure div~uint256~uint256_SafeMath__fail
[2020-11-25 16:33:04,548 INFO  L138     BoogieDeclarations]: Found implementation of procedure div~uint256~uint256_SafeMath__success
[2020-11-25 16:33:04,549 INFO  L138     BoogieDeclarations]: Found implementation of procedure sub~uint256~uint256_SafeMath__fail
[2020-11-25 16:33:04,549 INFO  L138     BoogieDeclarations]: Found implementation of procedure sub~uint256~uint256_SafeMath__success
[2020-11-25 16:33:04,549 INFO  L138     BoogieDeclarations]: Found implementation of procedure add~uint256~uint256_SafeMath__fail
[2020-11-25 16:33:04,549 INFO  L138     BoogieDeclarations]: Found implementation of procedure add~uint256~uint256_SafeMath__success
[2020-11-25 16:33:04,549 INFO  L138     BoogieDeclarations]: Found implementation of procedure mod~uint256~uint256_SafeMath__fail
[2020-11-25 16:33:04,549 INFO  L138     BoogieDeclarations]: Found implementation of procedure mod~uint256~uint256_SafeMath__success
[2020-11-25 16:33:04,549 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20_NoBaseCtor__fail
[2020-11-25 16:33:04,549 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20_NoBaseCtor__success
[2020-11-25 16:33:04,549 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20__fail
[2020-11-25 16:33:04,549 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20__success
[2020-11-25 16:33:04,549 INFO  L138     BoogieDeclarations]: Found implementation of procedure burn~uint256_FLAMA__fail
[2020-11-25 16:33:04,549 INFO  L138     BoogieDeclarations]: Found implementation of procedure burn~uint256_FLAMA__success
[2020-11-25 16:33:04,549 INFO  L138     BoogieDeclarations]: Found implementation of procedure FLAMA_FLAMA_NoBaseCtor__fail
[2020-11-25 16:33:04,549 INFO  L138     BoogieDeclarations]: Found implementation of procedure FLAMA_FLAMA_NoBaseCtor__success
[2020-11-25 16:33:04,550 INFO  L138     BoogieDeclarations]: Found implementation of procedure FLAMA_FLAMA__fail
[2020-11-25 16:33:04,550 INFO  L138     BoogieDeclarations]: Found implementation of procedure FLAMA_FLAMA__success
[2020-11-25 16:33:04,550 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_FLAMA__fail
[2020-11-25 16:33:04,550 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_FLAMA__success
[2020-11-25 16:33:04,550 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_FLAMA__fail
[2020-11-25 16:33:04,550 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_FLAMA__success
[2020-11-25 16:33:04,550 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_FLAMA__fail
[2020-11-25 16:33:04,550 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_FLAMA__success
[2020-11-25 16:33:04,550 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_FLAMA__fail
[2020-11-25 16:33:04,550 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_FLAMA__success
[2020-11-25 16:33:04,550 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_FLAMA__fail
[2020-11-25 16:33:04,551 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_FLAMA__success
[2020-11-25 16:33:04,551 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_FLAMA__fail
[2020-11-25 16:33:04,551 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_FLAMA__success
[2020-11-25 16:33:04,551 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_FLAMA__fail
[2020-11-25 16:33:04,551 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_FLAMA__success
[2020-11-25 16:33:04,551 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_FLAMA__fail
[2020-11-25 16:33:04,551 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_FLAMA__success
[2020-11-25 16:33:04,551 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_FLAMA__fail
[2020-11-25 16:33:04,551 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_FLAMA__success
[2020-11-25 16:33:04,551 INFO  L138     BoogieDeclarations]: Found implementation of procedure increaseAllowance~address~uint256_FLAMA__fail
[2020-11-25 16:33:04,551 INFO  L138     BoogieDeclarations]: Found implementation of procedure increaseAllowance~address~uint256_FLAMA__success
[2020-11-25 16:33:04,551 INFO  L138     BoogieDeclarations]: Found implementation of procedure decreaseAllowance~address~uint256_FLAMA__fail
[2020-11-25 16:33:04,552 INFO  L138     BoogieDeclarations]: Found implementation of procedure decreaseAllowance~address~uint256_FLAMA__success
[2020-11-25 16:33:04,552 INFO  L138     BoogieDeclarations]: Found implementation of procedure _transfer~address~address~uint256_FLAMA__fail
[2020-11-25 16:33:04,552 INFO  L138     BoogieDeclarations]: Found implementation of procedure _transfer~address~address~uint256_FLAMA__success
[2020-11-25 16:33:04,552 INFO  L138     BoogieDeclarations]: Found implementation of procedure _burn~address~uint256_FLAMA__fail
[2020-11-25 16:33:04,552 INFO  L138     BoogieDeclarations]: Found implementation of procedure _burn~address~uint256_FLAMA__success
[2020-11-25 16:33:04,552 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackDispatch__fail
[2020-11-25 16:33:04,552 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackDispatch__success
[2020-11-25 16:33:04,552 INFO  L138     BoogieDeclarations]: Found implementation of procedure Fallback_UnknownType__fail
[2020-11-25 16:33:04,552 INFO  L138     BoogieDeclarations]: Found implementation of procedure Fallback_UnknownType__success
[2020-11-25 16:33:04,552 INFO  L138     BoogieDeclarations]: Found implementation of procedure send__fail
[2020-11-25 16:33:04,552 INFO  L138     BoogieDeclarations]: Found implementation of procedure send__success
[2020-11-25 16:33:04,552 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_SafeMath
[2020-11-25 16:33:04,552 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_SafeMath
[2020-11-25 16:33:04,553 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_IERC20
[2020-11-25 16:33:04,553 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_IERC20
[2020-11-25 16:33:04,553 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_FLAMA
[2020-11-25 16:33:04,553 INFO  L138     BoogieDeclarations]: Found implementation of procedure main
[2020-11-25 16:33:04,553 INFO  L130     BoogieDeclarations]: Found specification of procedure ULTIMATE.start
[2020-11-25 16:33:04,553 INFO  L138     BoogieDeclarations]: Found implementation of procedure ULTIMATE.start
[2020-11-25 16:33:05,036 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 16:33:05,037 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 16:33:05,150 INFO  L281             CfgBuilder]: Using the 1 location(s) as analysis (start of procedure ULTIMATE.start)
[2020-11-25 16:33:05,151 INFO  L286             CfgBuilder]: Removed 3 assue(true) statements.
[2020-11-25 16:33:05,153 INFO  L202        PluginConnector]: Adding new model FLAMA_0x2afd9ce07d4186e8f3671d52200850760a8e1f70_transferfrom-fail.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 04:33:05 BoogieIcfgContainer
[2020-11-25 16:33:05,153 INFO  L185        PluginConnector]: Executing the observer RCFGBuilderObserver from plugin RCFGBuilder for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 04:33:04" (2/2) ...
[2020-11-25 16:33:05,154 INFO  L85     RCFGBuilderObserver]: No WrapperNode. Let Ultimate process with next node
[2020-11-25 16:33:05,154 INFO  L205        PluginConnector]: Invalid model from RCFGBuilder for observer de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder.RCFGBuilderObserver@76d4a780 and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 04:33:05, skipping insertion in model container
[2020-11-25 16:33:05,154 INFO  L132        PluginConnector]: ------------------------ END RCFGBuilder----------------------------
[2020-11-25 16:33:05,155 INFO  L113        PluginConnector]: ------------------------UtopiaLTL2Aut----------------------------
[2020-11-25 16:33:05,155 INFO  L271        PluginConnector]: Initializing UtopiaLTL2Aut...
[2020-11-25 16:33:05,156 INFO  L276        PluginConnector]: UtopiaLTL2Aut initialized
[2020-11-25 16:33:05,157 INFO  L185        PluginConnector]: Executing the observer UtopiaLTL2AutObserver from plugin UtopiaLTL2Aut for "FLAMA_0x2afd9ce07d4186e8f3671d52200850760a8e1f70_transferfrom-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 04:33:04" (1/3) ...
[2020-11-25 16:33:05,157 INFO  L205        PluginConnector]: Invalid model from UtopiaLTL2Aut for observer edu.utexas.cs.utopia.ltl2aut.UtopiaLTL2AutObserver@37ee82ff and model type Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 04:33:05, skipping insertion in model container
[2020-11-25 16:33:05,157 INFO  L185        PluginConnector]: Executing the observer UtopiaLTL2AutObserver from plugin UtopiaLTL2Aut for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 04:33:04" (2/3) ...
No working directory specified, using /mnt/data0/jon/SmartPulseTool/ltl2ba
Starting monitored process 1 with /mnt/data0/jon/SmartPulseTool/ltl2ba -f ! ( ( [] ( a -> ( <>b ) ) ) )  (exit command is null, workingDir is null)
[2020-11-25 16:33:05,195 INFO  L202        PluginConnector]: Adding new model Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 04:33:05 NWAContainer
[2020-11-25 16:33:05,195 INFO  L132        PluginConnector]: ------------------------ END UtopiaLTL2Aut----------------------------
[2020-11-25 16:33:05,195 INFO  L113        PluginConnector]: ------------------------BÃ¼chi Program Product----------------------------
[2020-11-25 16:33:05,195 INFO  L271        PluginConnector]: Initializing BÃ¼chi Program Product...
[2020-11-25 16:33:05,196 INFO  L276        PluginConnector]: BÃ¼chi Program Product initialized
[2020-11-25 16:33:05,197 INFO  L185        PluginConnector]: Executing the observer BuchiProductObserver from plugin BÃ¼chi Program Product for "FLAMA_0x2afd9ce07d4186e8f3671d52200850760a8e1f70_transferfrom-fail.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 04:33:05" (3/4) ...
[2020-11-25 16:33:05,198 INFO  L205        PluginConnector]: Invalid model from BÃ¼chi Program Product for observer de.uni_freiburg.informatik.ultimate.buchiprogramproduct.BuchiProductObserver@21283fa0 and model type LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 04:33:05, skipping insertion in model container
[2020-11-25 16:33:05,198 INFO  L185        PluginConnector]: Executing the observer BuchiProductObserver from plugin BÃ¼chi Program Product for "Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 04:33:05" (4/4) ...
[2020-11-25 16:33:05,201 INFO  L104   BuchiProductObserver]: Initial property automaton 2 locations, 3 edges
[2020-11-25 16:33:05,205 INFO  L110   BuchiProductObserver]: Initial RCFG 959 locations, 1203 edges
[2020-11-25 16:33:05,205 INFO  L93    BuchiProductObserver]: Beginning generation of product automaton
[2020-11-25 16:33:05,220 INFO  L136       ProductGenerator]: The program has no step specification, so we assume maximum atomicity
[2020-11-25 16:33:06,241 INFO  L97    BuchiProductObserver]: Finished generation of product automaton successfully
[2020-11-25 16:33:06,245 INFO  L110   BuchiProductObserver]: BuchiProgram size 2302 locations, 3898 edges
[2020-11-25 16:33:06,245 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 04:33:06 BoogieIcfgContainer
[2020-11-25 16:33:06,246 INFO  L132        PluginConnector]: ------------------------ END BÃ¼chi Program Product----------------------------
[2020-11-25 16:33:06,246 INFO  L113        PluginConnector]: ------------------------BlockEncodingV2----------------------------
[2020-11-25 16:33:06,246 INFO  L271        PluginConnector]: Initializing BlockEncodingV2...
[2020-11-25 16:33:06,248 INFO  L276        PluginConnector]: BlockEncodingV2 initialized
[2020-11-25 16:33:06,249 INFO  L185        PluginConnector]: Executing the observer BlockEncodingObserver from plugin BlockEncodingV2 for "LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 04:33:06" (1/1) ...
[2020-11-25 16:33:06,300 INFO  L313           BlockEncoder]: Initial Icfg 2302 locations, 3898 edges
[2020-11-25 16:33:06,300 INFO  L258           BlockEncoder]: Using Remove infeasible edges
[2020-11-25 16:33:06,301 INFO  L270           BlockEncoder]: Using Minimize states even if more edges are added than removed.=true
[2020-11-25 16:33:06,301 INFO  L296           BlockEncoder]: Using Remove sink states
[2020-11-25 16:33:06,301 INFO  L171           BlockEncoder]: Using Apply optimizations until nothing changes=true
[2020-11-25 16:33:06,309 INFO  L70    emoveInfeasibleEdges]: Removed 42 edges and 9 locations because of local infeasibility
[2020-11-25 16:33:06,315 INFO  L70        RemoveSinkStates]: Removed 40 edges and 20 locations by removing sink states
[2020-11-25 16:33:06,324 INFO  L70    emoveInfeasibleEdges]: Removed 0 edges and 0 locations because of local infeasibility
[2020-11-25 16:33:06,326 INFO  L70        RemoveSinkStates]: Removed 0 edges and 0 locations by removing sink states
[2020-11-25 16:33:06,328 INFO  L237           BlockEncoder]: Using Create parallel compositions if possible
[2020-11-25 16:33:06,328 INFO  L66        ParallelComposer]: Creating parallel compositions
[2020-11-25 16:33:06,331 INFO  L313           BlockEncoder]: Encoded RCFG 2255 locations, 3790 edges
[2020-11-25 16:33:06,331 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.blockencoding CFG 25.11 04:33:06 BasicIcfg
[2020-11-25 16:33:06,331 INFO  L132        PluginConnector]: ------------------------ END BlockEncodingV2----------------------------
[2020-11-25 16:33:06,331 INFO  L113        PluginConnector]: ------------------------BuchiAutomizer----------------------------
[2020-11-25 16:33:06,332 INFO  L271        PluginConnector]: Initializing BuchiAutomizer...
[2020-11-25 16:33:06,333 INFO  L276        PluginConnector]: BuchiAutomizer initialized
[2020-11-25 16:33:06,333 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 16:33:06,334 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "FLAMA_0x2afd9ce07d4186e8f3671d52200850760a8e1f70_transferfrom-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 04:33:04" (1/6) ...
[2020-11-25 16:33:06,336 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@6e512936 and model type FLAMA_0x2afd9ce07d4186e8f3671d52200850760a8e1f70_transferfrom-fail.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 04:33:06, skipping insertion in model container
[2020-11-25 16:33:06,336 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 16:33:06,336 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 04:33:04" (2/6) ...
[2020-11-25 16:33:06,336 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@6e512936 and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 04:33:06, skipping insertion in model container
[2020-11-25 16:33:06,336 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 16:33:06,336 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "FLAMA_0x2afd9ce07d4186e8f3671d52200850760a8e1f70_transferfrom-fail.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 04:33:05" (3/6) ...
[2020-11-25 16:33:06,336 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@6e512936 and model type FLAMA_0x2afd9ce07d4186e8f3671d52200850760a8e1f70_transferfrom-fail.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer CFG 25.11 04:33:06, skipping insertion in model container
[2020-11-25 16:33:06,336 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 16:33:06,336 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 04:33:05" (4/6) ...
[2020-11-25 16:33:06,337 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@6e512936 and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 04:33:06, skipping insertion in model container
[2020-11-25 16:33:06,337 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 16:33:06,337 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 04:33:06" (5/6) ...
[2020-11-25 16:33:06,337 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@6e512936 and model type LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer OTHER 25.11 04:33:06, skipping insertion in model container
[2020-11-25 16:33:06,337 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 16:33:06,337 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.blockencoding CFG 25.11 04:33:06" (6/6) ...
[2020-11-25 16:33:06,338 INFO  L404   chiAutomizerObserver]: Analyzing ICFG FLAMA_0x2afd9ce07d4186e8f3671d52200850760a8e1f70_transferfrom-fail.bpl_BEv2
[2020-11-25 16:33:06,370 INFO  L133   ementStrategyFactory]: Using default assertion order modulation
[2020-11-25 16:33:06,370 INFO  L377         BuchiCegarLoop]: Interprodecural is true
[2020-11-25 16:33:06,370 INFO  L378         BuchiCegarLoop]: Hoare is false
[2020-11-25 16:33:06,370 INFO  L379         BuchiCegarLoop]: Compute interpolants for Craig_TreeInterpolation
[2020-11-25 16:33:06,370 INFO  L380         BuchiCegarLoop]: Backedges is STRAIGHT_LINE
[2020-11-25 16:33:06,370 INFO  L381         BuchiCegarLoop]: Determinization is PREDICATE_ABSTRACTION
[2020-11-25 16:33:06,370 INFO  L382         BuchiCegarLoop]: Difference is false
[2020-11-25 16:33:06,370 INFO  L383         BuchiCegarLoop]: Minimize is MINIMIZE_SEVPA
[2020-11-25 16:33:06,370 INFO  L386         BuchiCegarLoop]: ======== Iteration 0==of CEGAR loop == BuchiCegarLoop========
[2020-11-25 16:33:06,390 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2255 states.
[2020-11-25 16:33:06,427 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 16:33:06,428 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 16:33:06,428 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 16:33:06,437 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 16:33:06,437 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 16:33:06,437 INFO  L445         BuchiCegarLoop]: ======== Iteration 1============
[2020-11-25 16:33:06,437 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2255 states.
[2020-11-25 16:33:06,450 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 16:33:06,450 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 16:33:06,450 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 16:33:06,452 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 16:33:06,452 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transferFrom_FLAMA0 := false;
[L2]                 call_transferFrom_FLAMA0 := false;
[L2]     CALL        call main();
[L2580]              assume null == 0;
[L2581]  CALL        call this := FreshRefGenerator__success();
[L1182]              havoc newRef;
[L1183]              assume Alloc[newRef] == false;
[L1184]              Alloc[newRef] := true;
[L1185]              assume newRef != null;
[L2581]  RET         call this := FreshRefGenerator__success();
[L2582]              assume now >= 0;
[L2583]              assume DType[this] == FLAMA;
[L2584]              assume msgvalue_MSG == 0;
[L2585]              gas := gas - 53000;
[L2586]  CALL        call FLAMA_FLAMA(this, msgsender_MSG, msgvalue_MSG, name_s264, symbol_s264, decimals_s264, totalSupply_s264);
[L261]               havoc __exception;
[L262]               revert := false;
[L263]   COND FALSE  !(__exception)
[L284]   CALL        call FLAMA_FLAMA__success(this, msgsender_MSG, msgvalue_MSG, name_s264, symbol_s264, decimals_s264, totalSupply_s264);
[L1452]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1370]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1355]              assume msgsender_MSG != null;
[L1356]              Balance[this] := 0;
[L1370]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1371]  COND FALSE  !(revert)
[L1452]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1453]  COND TRUE   revert
[L284]   RET         call FLAMA_FLAMA__success(this, msgsender_MSG, msgvalue_MSG, name_s264, symbol_s264, decimals_s264, totalSupply_s264);
[L285]               assume !revert && gas >= 0;
[L2586]  RET         call FLAMA_FLAMA(this, msgsender_MSG, msgvalue_MSG, name_s264, symbol_s264, decimals_s264, totalSupply_s264);
[L2587]              assume !revert && gas >= 0;

Loop:
[L2590]  CALL        call CorralChoice_FLAMA(this);
[L2446]              havoc msgsender_MSG;
[L2447]              havoc msgvalue_MSG;
[L2448]              havoc choice;
[L2449]              havoc __ret_0_totalSupply;
[L2450]              havoc owner_s308;
[L2451]              havoc __ret_0_balanceOf;
[L2452]              havoc owner_s324;
[L2453]              havoc spender_s324;
[L2454]              havoc __ret_0_allowance;
[L2455]              havoc to_s343;
[L2456]              havoc value_s343;
[L2457]              havoc __ret_0_transfer;
[L2458]              havoc spender_s379;
[L2459]              havoc value_s379;
[L2460]              havoc __ret_0_approve;
[L2461]              havoc from_s416;
[L2462]              havoc to_s416;
[L2463]              havoc value_s416;
[L2464]              havoc __ret_0_transferFrom;
[L2465]              havoc value_s229;
[L2466]              havoc name_s264;
[L2467]              havoc symbol_s264;
[L2468]              havoc decimals_s264;
[L2469]              havoc totalSupply_s264;
[L2470]              havoc __ret_0_name;
[L2471]              havoc __ret_0_symbol;
[L2472]              havoc __ret_0_decimals;
[L2473]              havoc spender_s466;
[L2474]              havoc addedValue_s466;
[L2475]              havoc __ret_0_increaseAllowance;
[L2476]              havoc spender_s516;
[L2477]              havoc subtractedValue_s516;
[L2478]              havoc __ret_0_decreaseAllowance;
[L2479]              havoc tmpNow;
[L2480]              havoc gas;
[L2481]              assume gas > 4000000 && gas <= 8000000;
[L2482]              tmpNow := now;
[L2483]              havoc now;
[L2484]              assume now > tmpNow;
[L2485]              assume msgsender_MSG != null;
[L2486]              assume DType[msgsender_MSG] != SafeMath;
[L2487]              assume DType[msgsender_MSG] != IERC20;
[L2488]              assume DType[msgsender_MSG] != FLAMA;
[L2489]              Alloc[msgsender_MSG] := true;
[L2490]  COND TRUE   choice == 12
[L2491]              gas := gas - 21000;
[L2492]  COND FALSE  !(gas >= 0)
[L2590]  RET         call CorralChoice_FLAMA(this);

[2020-11-25 16:33:06,467 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 16:33:06,468 INFO  L82        PathProgramCache]: Analyzing trace with hash 28531695, now seen corresponding path program 1 times
[2020-11-25 16:33:06,471 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 16:33:06,491 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 16:33:06,536 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 16:33:06,538 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 16:33:06,539 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [4] imperfect sequences [] total 4
[2020-11-25 16:33:06,542 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 16:33:06,654 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-11-25 16:33:06,654 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=5, Invalid=7, Unknown=0, NotChecked=0, Total=12
[2020-11-25 16:33:06,656 INFO  L87              Difference]: Start difference. First operand 2255 states. Second operand 4 states.
[2020-11-25 16:33:06,952 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 16:33:06,952 INFO  L93              Difference]: Finished difference Result 1769 states and 1976 transitions.
[2020-11-25 16:33:06,952 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 4 states. 
[2020-11-25 16:33:06,954 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 1769 states and 1976 transitions.
[2020-11-25 16:33:06,965 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 16:33:06,983 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 1769 states to 1769 states and 1976 transitions.
[2020-11-25 16:33:06,984 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 3
[2020-11-25 16:33:06,986 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 517
[2020-11-25 16:33:06,986 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 1769 states and 1976 transitions.
[2020-11-25 16:33:06,992 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 16:33:06,992 INFO  L728         BuchiCegarLoop]: Abstraction has 1769 states and 1976 transitions.
[2020-11-25 16:33:07,015 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 1769 states and 1976 transitions.
[2020-11-25 16:33:07,056 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 1769 to 1769.
[2020-11-25 16:33:07,056 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 1769 states.
[2020-11-25 16:33:07,061 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 1769 states to 1769 states and 1976 transitions.
[2020-11-25 16:33:07,062 INFO  L751         BuchiCegarLoop]: Abstraction has 1769 states and 1976 transitions.
[2020-11-25 16:33:07,062 INFO  L631         BuchiCegarLoop]: Abstraction has 1769 states and 1976 transitions.
[2020-11-25 16:33:07,062 INFO  L445         BuchiCegarLoop]: ======== Iteration 2============
[2020-11-25 16:33:07,063 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 1769 states and 1976 transitions.
[2020-11-25 16:33:07,069 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 16:33:07,069 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 16:33:07,069 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 16:33:07,071 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 16:33:07,072 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transferFrom_FLAMA0 := false;
[L2]                 call_transferFrom_FLAMA0 := false;
[L2]     CALL        call main();
[L2580]              assume null == 0;
[L2581]  CALL        call this := FreshRefGenerator__success();
[L1182]              havoc newRef;
[L1183]              assume Alloc[newRef] == false;
[L1184]              Alloc[newRef] := true;
[L1185]              assume newRef != null;
[L2581]  RET         call this := FreshRefGenerator__success();
[L2582]              assume now >= 0;
[L2583]              assume DType[this] == FLAMA;
[L2584]              assume msgvalue_MSG == 0;
[L2585]              gas := gas - 53000;
[L2586]  CALL        call FLAMA_FLAMA(this, msgsender_MSG, msgvalue_MSG, name_s264, symbol_s264, decimals_s264, totalSupply_s264);
[L261]               havoc __exception;
[L262]               revert := false;
[L263]   COND FALSE  !(__exception)
[L284]   CALL        call FLAMA_FLAMA__success(this, msgsender_MSG, msgvalue_MSG, name_s264, symbol_s264, decimals_s264, totalSupply_s264);
[L1452]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1370]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1355]              assume msgsender_MSG != null;
[L1356]              Balance[this] := 0;
[L1370]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1371]  COND FALSE  !(revert)
[L1452]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1453]  COND TRUE   revert
[L284]   RET         call FLAMA_FLAMA__success(this, msgsender_MSG, msgvalue_MSG, name_s264, symbol_s264, decimals_s264, totalSupply_s264);
[L285]               assume !revert && gas >= 0;
[L2586]  RET         call FLAMA_FLAMA(this, msgsender_MSG, msgvalue_MSG, name_s264, symbol_s264, decimals_s264, totalSupply_s264);
[L2587]              assume !revert && gas >= 0;
[L2590]  CALL        call CorralChoice_FLAMA(this);
[L2446]              havoc msgsender_MSG;
[L2447]              havoc msgvalue_MSG;
[L2448]              havoc choice;
[L2449]              havoc __ret_0_totalSupply;
[L2450]              havoc owner_s308;
[L2451]              havoc __ret_0_balanceOf;
[L2452]              havoc owner_s324;
[L2453]              havoc spender_s324;
[L2454]              havoc __ret_0_allowance;
[L2455]              havoc to_s343;
[L2456]              havoc value_s343;
[L2457]              havoc __ret_0_transfer;
[L2458]              havoc spender_s379;
[L2459]              havoc value_s379;
[L2460]              havoc __ret_0_approve;
[L2461]              havoc from_s416;
[L2462]              havoc to_s416;
[L2463]              havoc value_s416;
[L2464]              havoc __ret_0_transferFrom;
[L2465]              havoc value_s229;
[L2466]              havoc name_s264;
[L2467]              havoc symbol_s264;
[L2468]              havoc decimals_s264;
[L2469]              havoc totalSupply_s264;
[L2470]              havoc __ret_0_name;
[L2471]              havoc __ret_0_symbol;
[L2472]              havoc __ret_0_decimals;
[L2473]              havoc spender_s466;
[L2474]              havoc addedValue_s466;
[L2475]              havoc __ret_0_increaseAllowance;
[L2476]              havoc spender_s516;
[L2477]              havoc subtractedValue_s516;
[L2478]              havoc __ret_0_decreaseAllowance;
[L2479]              havoc tmpNow;
[L2480]              havoc gas;
[L2481]              assume gas > 4000000 && gas <= 8000000;
[L2482]              tmpNow := now;
[L2483]              havoc now;
[L2484]              assume now > tmpNow;
[L2485]              assume msgsender_MSG != null;
[L2486]              assume DType[msgsender_MSG] != SafeMath;
[L2487]              assume DType[msgsender_MSG] != IERC20;
[L2488]              assume DType[msgsender_MSG] != FLAMA;
[L2489]              Alloc[msgsender_MSG] := true;
[L2490]  COND FALSE  !(choice == 12)
[L2496]  COND FALSE  !(choice == 11)
[L2502]  COND FALSE  !(choice == 10)
[L2508]  COND FALSE  !(choice == 9)
[L2515]  COND FALSE  !(choice == 8)
[L2522]  COND TRUE   choice == 7
[L2523]              gas := gas - 21000;
[L2524]  COND TRUE   gas >= 0
[L2525]              assume value_s416 >= 0 && value_s416 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2526]              assume msgvalue_MSG == 0;
[L2527]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_FLAMA(this, msgsender_MSG, msgvalue_MSG, from_s416, to_s416, value_s416);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((((from_s416 != to_s416 && ((value_s416 > _balances_FLAMA[this][from_s416] || value_s416 > _allowed_FLAMA[this][from_s416][msgsender_MSG]) || _balances_FLAMA[this][to_s416] + value_s416 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && value_s416 >= 0) && value_s416 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_FLAMA[this][to_s416] >= 0) && _balances_FLAMA[this][to_s416] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_FLAMA[this][from_s416] >= 0) && _balances_FLAMA[this][from_s416] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowed_FLAMA[this][from_s416][msgsender_MSG] >= 0) && _allowed_FLAMA[this][from_s416][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transferFrom_FLAMA0 := true;
[L2]                 call_transferFrom_FLAMA0 := false;
[L2]                 revert := revert_hold;
[L721]               havoc __exception;
[L722]               revert := false;
[L723]   COND FALSE  !(__exception)
[L744]   CALL        call __ret_0_ := transferFrom~address~address~uint256_FLAMA__success(this, msgsender_MSG, msgvalue_MSG, from_s416, to_s416, value_s416);
[L1606]  CALL        call __var_2 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowed_FLAMA[this][from_s416][msgsender_MSG], value_s416);
[L1291]  COND TRUE   !(b_s82 <= a_s82)
[L1292]              revert := true;
[L1606]  RET         call __var_2 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowed_FLAMA[this][from_s416][msgsender_MSG], value_s416);
[L1607]  COND TRUE   revert
[L744]   RET         call __ret_0_ := transferFrom~address~address~uint256_FLAMA__success(this, msgsender_MSG, msgvalue_MSG, from_s416, to_s416, value_s416);
[L745]               assume !revert && gas >= 0;
[L2527]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_FLAMA(this, msgsender_MSG, msgvalue_MSG, from_s416, to_s416, value_s416);
[L2590]  RET         call CorralChoice_FLAMA(this);

Loop:
[L2590]  CALL        call CorralChoice_FLAMA(this);
[L2446]              havoc msgsender_MSG;
[L2447]              havoc msgvalue_MSG;
[L2448]              havoc choice;
[L2449]              havoc __ret_0_totalSupply;
[L2450]              havoc owner_s308;
[L2451]              havoc __ret_0_balanceOf;
[L2452]              havoc owner_s324;
[L2453]              havoc spender_s324;
[L2454]              havoc __ret_0_allowance;
[L2455]              havoc to_s343;
[L2456]              havoc value_s343;
[L2457]              havoc __ret_0_transfer;
[L2458]              havoc spender_s379;
[L2459]              havoc value_s379;
[L2460]              havoc __ret_0_approve;
[L2461]              havoc from_s416;
[L2462]              havoc to_s416;
[L2463]              havoc value_s416;
[L2464]              havoc __ret_0_transferFrom;
[L2465]              havoc value_s229;
[L2466]              havoc name_s264;
[L2467]              havoc symbol_s264;
[L2468]              havoc decimals_s264;
[L2469]              havoc totalSupply_s264;
[L2470]              havoc __ret_0_name;
[L2471]              havoc __ret_0_symbol;
[L2472]              havoc __ret_0_decimals;
[L2473]              havoc spender_s466;
[L2474]              havoc addedValue_s466;
[L2475]              havoc __ret_0_increaseAllowance;
[L2476]              havoc spender_s516;
[L2477]              havoc subtractedValue_s516;
[L2478]              havoc __ret_0_decreaseAllowance;
[L2479]              havoc tmpNow;
[L2480]              havoc gas;
[L2481]              assume gas > 4000000 && gas <= 8000000;
[L2482]              tmpNow := now;
[L2483]              havoc now;
[L2484]              assume now > tmpNow;
[L2485]              assume msgsender_MSG != null;
[L2486]              assume DType[msgsender_MSG] != SafeMath;
[L2487]              assume DType[msgsender_MSG] != IERC20;
[L2488]              assume DType[msgsender_MSG] != FLAMA;
[L2489]              Alloc[msgsender_MSG] := true;
[L2490]  COND FALSE  !(choice == 12)
[L2496]  COND FALSE  !(choice == 11)
[L2502]  COND FALSE  !(choice == 10)
[L2508]  COND FALSE  !(choice == 9)
[L2515]  COND FALSE  !(choice == 8)
[L2522]  COND TRUE   choice == 7
[L2523]              gas := gas - 21000;
[L2524]  COND TRUE   gas >= 0
[L2525]              assume value_s416 >= 0 && value_s416 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2526]              assume msgvalue_MSG == 0;
[L2527]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_FLAMA(this, msgsender_MSG, msgvalue_MSG, from_s416, to_s416, value_s416);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((((from_s416 != to_s416 && ((value_s416 > _balances_FLAMA[this][from_s416] || value_s416 > _allowed_FLAMA[this][from_s416][msgsender_MSG]) || _balances_FLAMA[this][to_s416] + value_s416 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && value_s416 >= 0) && value_s416 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_FLAMA[this][to_s416] >= 0) && _balances_FLAMA[this][to_s416] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_FLAMA[this][from_s416] >= 0) && _balances_FLAMA[this][from_s416] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowed_FLAMA[this][from_s416][msgsender_MSG] >= 0) && _allowed_FLAMA[this][from_s416][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transferFrom_FLAMA0 := true;
[L2]                 call_transferFrom_FLAMA0 := false;
[L2]                 revert := revert_hold;
[L721]               havoc __exception;
[L722]               revert := false;
[L723]   COND FALSE  !(__exception)
[L744]   CALL        call __ret_0_ := transferFrom~address~address~uint256_FLAMA__success(this, msgsender_MSG, msgvalue_MSG, from_s416, to_s416, value_s416);
[L1606]  CALL        call __var_2 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowed_FLAMA[this][from_s416][msgsender_MSG], value_s416);
[L1291]  COND TRUE   !(b_s82 <= a_s82)
[L1292]              revert := true;
[L1606]  RET         call __var_2 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowed_FLAMA[this][from_s416][msgsender_MSG], value_s416);
[L1607]  COND TRUE   revert
[L744]   RET         call __ret_0_ := transferFrom~address~address~uint256_FLAMA__success(this, msgsender_MSG, msgvalue_MSG, from_s416, to_s416, value_s416);
[L745]               assume !revert && gas >= 0;
[L2527]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_FLAMA(this, msgsender_MSG, msgvalue_MSG, from_s416, to_s416, value_s416);
[L2590]  RET         call CorralChoice_FLAMA(this);

[2020-11-25 16:33:07,077 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 16:33:07,078 INFO  L82        PathProgramCache]: Analyzing trace with hash -1319913276, now seen corresponding path program 1 times
[2020-11-25 16:33:07,079 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 16:33:07,091 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 16:33:07,115 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 16:33:07,115 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 16:33:07,115 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [4] imperfect sequences [] total 4
[2020-11-25 16:33:07,117 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 16:33:07,117 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-11-25 16:33:07,117 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=5, Invalid=7, Unknown=0, NotChecked=0, Total=12
[2020-11-25 16:33:07,118 INFO  L87              Difference]: Start difference. First operand 1769 states and 1976 transitions. cyclomatic complexity: 209 Second operand 4 states.
[2020-11-25 16:33:07,394 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 16:33:07,394 INFO  L93              Difference]: Finished difference Result 2358 states and 2613 transitions.
[2020-11-25 16:33:07,394 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 4 states. 
[2020-11-25 16:33:07,394 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2358 states and 2613 transitions.
[2020-11-25 16:33:07,403 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 16:33:07,411 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2358 states to 2212 states and 2445 transitions.
[2020-11-25 16:33:07,412 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 636
[2020-11-25 16:33:07,412 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 655
[2020-11-25 16:33:07,412 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 2212 states and 2445 transitions.
[2020-11-25 16:33:07,416 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 16:33:07,416 INFO  L728         BuchiCegarLoop]: Abstraction has 2212 states and 2445 transitions.
[2020-11-25 16:33:07,418 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 2212 states and 2445 transitions.
[2020-11-25 16:33:07,442 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 2212 to 1952.
[2020-11-25 16:33:07,442 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 1952 states.
[2020-11-25 16:33:07,446 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 1952 states to 1952 states and 2122 transitions.
[2020-11-25 16:33:07,447 INFO  L751         BuchiCegarLoop]: Abstraction has 1952 states and 2122 transitions.
[2020-11-25 16:33:07,447 INFO  L631         BuchiCegarLoop]: Abstraction has 1952 states and 2122 transitions.
[2020-11-25 16:33:07,447 INFO  L445         BuchiCegarLoop]: ======== Iteration 3============
[2020-11-25 16:33:07,447 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 1952 states and 2122 transitions.
[2020-11-25 16:33:07,452 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 16:33:07,452 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 16:33:07,452 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 16:33:07,455 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [4, 4, 4, 4, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 16:33:07,455 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [4, 4, 4, 4, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transferFrom_FLAMA0 := false;
[L2]                 call_transferFrom_FLAMA0 := false;
[L2]     CALL        call main();
[L2580]              assume null == 0;
[L2581]  CALL        call this := FreshRefGenerator__success();
[L1182]              havoc newRef;
[L1183]              assume Alloc[newRef] == false;
[L1184]              Alloc[newRef] := true;
[L1185]              assume newRef != null;
[L2581]  RET         call this := FreshRefGenerator__success();
[L2582]              assume now >= 0;
[L2583]              assume DType[this] == FLAMA;
[L2584]              assume msgvalue_MSG == 0;
[L2585]              gas := gas - 53000;
[L2586]  CALL        call FLAMA_FLAMA(this, msgsender_MSG, msgvalue_MSG, name_s264, symbol_s264, decimals_s264, totalSupply_s264);
[L261]               havoc __exception;
[L262]               revert := false;
[L263]   COND FALSE  !(__exception)
[L284]   CALL        call FLAMA_FLAMA__success(this, msgsender_MSG, msgvalue_MSG, name_s264, symbol_s264, decimals_s264, totalSupply_s264);
[L1452]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1370]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1355]              assume msgsender_MSG != null;
[L1356]              Balance[this] := 0;
[L1370]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1371]  COND FALSE  !(revert)
[L1452]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1453]  COND FALSE  !(revert)
[L1456]  CALL        call FLAMA_FLAMA_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s264, symbol_s264, decimals_s264, totalSupply_s264);
[L1418]              assume msgsender_MSG != null;
[L1419]              Balance[this] := 0;
[L1420]              _name_FLAMA[this] := 965843050;
[L1421]              _symbol_FLAMA[this] := 965843050;
[L1422]              _decimals_FLAMA[this] := 0;
[L1423]              _totalSupply_FLAMA[this] := 0;
[L1424]              _balances_FLAMA[this] := zeroRefintArr();
[L1425]              sum__balances0[this] := 0;
[L1426]              _allowed_FLAMA[this] := zeroRefRefintArr();
[L1427]              sum__allowed1[this] := 0;
[L1429]              _name_FLAMA[this] := name_s264;
[L1430]              _symbol_FLAMA[this] := symbol_s264;
[L1431]              _decimals_FLAMA[this] := decimals_s264;
[L1432]              _totalSupply_FLAMA[this] := totalSupply_s264;
[L1433]              sum__balances0[this] := sum__balances0[this] - _balances_FLAMA[this][msgsender_MSG];
[L1434]              _balances_FLAMA[this][msgsender_MSG] := _totalSupply_FLAMA[this];
[L1435]              sum__balances0[this] := sum__balances0[this] + _balances_FLAMA[this][msgsender_MSG];
[L1456]  RET         call FLAMA_FLAMA_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s264, symbol_s264, decimals_s264, totalSupply_s264);
[L1457]  COND FALSE  !(revert)
[L284]   RET         call FLAMA_FLAMA__success(this, msgsender_MSG, msgvalue_MSG, name_s264, symbol_s264, decimals_s264, totalSupply_s264);
[L285]               assume !revert && gas >= 0;
[L2586]  RET         call FLAMA_FLAMA(this, msgsender_MSG, msgvalue_MSG, name_s264, symbol_s264, decimals_s264, totalSupply_s264);
[L2587]              assume !revert && gas >= 0;
[L2590]  CALL        call CorralChoice_FLAMA(this);
[L2446]              havoc msgsender_MSG;
[L2447]              havoc msgvalue_MSG;
[L2448]              havoc choice;
[L2449]              havoc __ret_0_totalSupply;
[L2450]              havoc owner_s308;
[L2451]              havoc __ret_0_balanceOf;
[L2452]              havoc owner_s324;
[L2453]              havoc spender_s324;
[L2454]              havoc __ret_0_allowance;
[L2455]              havoc to_s343;
[L2456]              havoc value_s343;
[L2457]              havoc __ret_0_transfer;
[L2458]              havoc spender_s379;
[L2459]              havoc value_s379;
[L2460]              havoc __ret_0_approve;
[L2461]              havoc from_s416;
[L2462]              havoc to_s416;
[L2463]              havoc value_s416;
[L2464]              havoc __ret_0_transferFrom;
[L2465]              havoc value_s229;
[L2466]              havoc name_s264;
[L2467]              havoc symbol_s264;
[L2468]              havoc decimals_s264;
[L2469]              havoc totalSupply_s264;
[L2470]              havoc __ret_0_name;
[L2471]              havoc __ret_0_symbol;
[L2472]              havoc __ret_0_decimals;
[L2473]              havoc spender_s466;
[L2474]              havoc addedValue_s466;
[L2475]              havoc __ret_0_increaseAllowance;
[L2476]              havoc spender_s516;
[L2477]              havoc subtractedValue_s516;
[L2478]              havoc __ret_0_decreaseAllowance;
[L2479]              havoc tmpNow;
[L2480]              havoc gas;
[L2481]              assume gas > 4000000 && gas <= 8000000;
[L2482]              tmpNow := now;
[L2483]              havoc now;
[L2484]              assume now > tmpNow;
[L2485]              assume msgsender_MSG != null;
[L2486]              assume DType[msgsender_MSG] != SafeMath;
[L2487]              assume DType[msgsender_MSG] != IERC20;
[L2488]              assume DType[msgsender_MSG] != FLAMA;
[L2489]              Alloc[msgsender_MSG] := true;
[L2490]  COND FALSE  !(choice == 12)
[L2496]  COND FALSE  !(choice == 11)
[L2502]  COND FALSE  !(choice == 10)
[L2508]  COND FALSE  !(choice == 9)
[L2515]  COND FALSE  !(choice == 8)
[L2522]  COND TRUE   choice == 7
[L2523]              gas := gas - 21000;
[L2524]  COND TRUE   gas >= 0
[L2525]              assume value_s416 >= 0 && value_s416 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2526]              assume msgvalue_MSG == 0;
[L2527]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_FLAMA(this, msgsender_MSG, msgvalue_MSG, from_s416, to_s416, value_s416);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((((from_s416 != to_s416 && ((value_s416 > _balances_FLAMA[this][from_s416] || value_s416 > _allowed_FLAMA[this][from_s416][msgsender_MSG]) || _balances_FLAMA[this][to_s416] + value_s416 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && value_s416 >= 0) && value_s416 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_FLAMA[this][to_s416] >= 0) && _balances_FLAMA[this][to_s416] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_FLAMA[this][from_s416] >= 0) && _balances_FLAMA[this][from_s416] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowed_FLAMA[this][from_s416][msgsender_MSG] >= 0) && _allowed_FLAMA[this][from_s416][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transferFrom_FLAMA0 := true;
[L2]                 call_transferFrom_FLAMA0 := false;
[L2]                 revert := revert_hold;
[L721]               havoc __exception;
[L722]               revert := false;
[L723]   COND FALSE  !(__exception)
[L744]   CALL        call __ret_0_ := transferFrom~address~address~uint256_FLAMA__success(this, msgsender_MSG, msgvalue_MSG, from_s416, to_s416, value_s416);
[L1606]  CALL        call __var_2 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowed_FLAMA[this][from_s416][msgsender_MSG], value_s416);
[L1291]  COND FALSE  !(!(b_s82 <= a_s82))
[L1295]              c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1296]              __ret_0_ := c_s82;
[L1606]  RET         call __var_2 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowed_FLAMA[this][from_s416][msgsender_MSG], value_s416);
[L1607]  COND FALSE  !(revert)
[L1610]              sum__allowed1[from_s416] := sum__allowed1[from_s416] - _allowed_FLAMA[this][from_s416][msgsender_MSG];
[L1611]              _allowed_FLAMA[this][from_s416][msgsender_MSG] := __var_2;
[L1612]              sum__allowed1[from_s416] := sum__allowed1[from_s416] + _allowed_FLAMA[this][from_s416][msgsender_MSG];
[L1613]  CALL        call _transfer~address~address~uint256_FLAMA__success(this, msgsender_MSG, msgvalue_MSG, from_s416, to_s416, value_s416);
[L1762]              __var_7 := null;
[L1763]  COND FALSE  !(!(to_s598 != null))
[L1767]  CALL        call onePercent_s598 := div~uint256~uint256_SafeMath__success(this, this, 0, value_s598, 100);
[L1267]  COND FALSE  !(!(b_s58 > 0))
[L1271]              c_s58 := nonlinearDiv(a_s58, b_s58) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1272]              __ret_0_ := c_s58;
[L1767]  RET         call onePercent_s598 := div~uint256~uint256_SafeMath__success(this, this, 0, value_s598, 100);
[L1768]  COND FALSE  !(revert)
[L1771]              onePercent_s598 := onePercent_s598;
[L1772]  CALL        call burnAmount_s598 := mul~uint256~uint256_SafeMath__success(this, this, 0, onePercent_s598, 3);
[L1239]  COND TRUE   a_s34 == 0
[L1240]              __ret_0_ := 0;
[L1772]  RET         call burnAmount_s598 := mul~uint256~uint256_SafeMath__success(this, this, 0, onePercent_s598, 3);
[L1773]  COND FALSE  !(revert)
[L1776]              burnAmount_s598 := burnAmount_s598;
[L1777]  CALL        call newTransferAmount_s598 := sub~uint256~uint256_SafeMath__success(this, this, 0, value_s598, burnAmount_s598);
[L1291]  COND FALSE  !(!(b_s82 <= a_s82))
[L1295]              c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1296]              __ret_0_ := c_s82;
[L1777]  RET         call newTransferAmount_s598 := sub~uint256~uint256_SafeMath__success(this, this, 0, value_s598, burnAmount_s598);
[L1778]  COND FALSE  !(revert)
[L1781]              newTransferAmount_s598 := newTransferAmount_s598;
[L1782]  CALL        call __var_8 := sub~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_FLAMA[this], burnAmount_s598);
[L1291]  COND FALSE  !(!(b_s82 <= a_s82))
[L1295]              c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1296]              __ret_0_ := c_s82;
[L1782]  RET         call __var_8 := sub~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_FLAMA[this], burnAmount_s598);
[L1783]  COND FALSE  !(revert)
[L1786]              _totalSupply_FLAMA[this] := __var_8;
[L1787]  CALL        call __var_9 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_FLAMA[this][from_s598], value_s598);
[L1291]  COND FALSE  !(!(b_s82 <= a_s82))
[L1295]              c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1296]              __ret_0_ := c_s82;
[L1787]  RET         call __var_9 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_FLAMA[this][from_s598], value_s598);
[L1788]  COND FALSE  !(revert)
[L1791]              sum__balances0[this] := sum__balances0[this] - _balances_FLAMA[this][from_s598];
[L1792]              _balances_FLAMA[this][from_s598] := __var_9;
[L1793]              sum__balances0[this] := sum__balances0[this] + _balances_FLAMA[this][from_s598];
[L1794]  CALL        call __var_10 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_FLAMA[this][to_s598], newTransferAmount_s598);
[L1315]              c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1316]  COND FALSE  !(!(c_s106 >= a_s106))
[L1320]              __ret_0_ := c_s106;
[L1794]  RET         call __var_10 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_FLAMA[this][to_s598], newTransferAmount_s598);
[L1795]  COND FALSE  !(revert)
[L1798]              sum__balances0[this] := sum__balances0[this] - _balances_FLAMA[this][to_s598];
[L1799]              _balances_FLAMA[this][to_s598] := __var_10;
[L1800]              sum__balances0[this] := sum__balances0[this] + _balances_FLAMA[this][to_s598];
[L1801]              assert { :EventEmitted "Transfer_FLAMA" } true;
[L1802]              assert { :EventEmitted "Transfer_FLAMA" } true;
[L1613]  RET         call _transfer~address~address~uint256_FLAMA__success(this, msgsender_MSG, msgvalue_MSG, from_s416, to_s416, value_s416);
[L1614]  COND FALSE  !(revert)
[L1617]              __ret_0_ := true;
[L744]   RET         call __ret_0_ := transferFrom~address~address~uint256_FLAMA__success(this, msgsender_MSG, msgvalue_MSG, from_s416, to_s416, value_s416);
[L745]               assume !revert && gas >= 0;
[L2527]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_FLAMA(this, msgsender_MSG, msgvalue_MSG, from_s416, to_s416, value_s416);
[L2590]  RET         call CorralChoice_FLAMA(this);

Loop:
[L2590]  CALL        call CorralChoice_FLAMA(this);
[L2446]              havoc msgsender_MSG;
[L2447]              havoc msgvalue_MSG;
[L2448]              havoc choice;
[L2449]              havoc __ret_0_totalSupply;
[L2450]              havoc owner_s308;
[L2451]              havoc __ret_0_balanceOf;
[L2452]              havoc owner_s324;
[L2453]              havoc spender_s324;
[L2454]              havoc __ret_0_allowance;
[L2455]              havoc to_s343;
[L2456]              havoc value_s343;
[L2457]              havoc __ret_0_transfer;
[L2458]              havoc spender_s379;
[L2459]              havoc value_s379;
[L2460]              havoc __ret_0_approve;
[L2461]              havoc from_s416;
[L2462]              havoc to_s416;
[L2463]              havoc value_s416;
[L2464]              havoc __ret_0_transferFrom;
[L2465]              havoc value_s229;
[L2466]              havoc name_s264;
[L2467]              havoc symbol_s264;
[L2468]              havoc decimals_s264;
[L2469]              havoc totalSupply_s264;
[L2470]              havoc __ret_0_name;
[L2471]              havoc __ret_0_symbol;
[L2472]              havoc __ret_0_decimals;
[L2473]              havoc spender_s466;
[L2474]              havoc addedValue_s466;
[L2475]              havoc __ret_0_increaseAllowance;
[L2476]              havoc spender_s516;
[L2477]              havoc subtractedValue_s516;
[L2478]              havoc __ret_0_decreaseAllowance;
[L2479]              havoc tmpNow;
[L2480]              havoc gas;
[L2481]              assume gas > 4000000 && gas <= 8000000;
[L2482]              tmpNow := now;
[L2483]              havoc now;
[L2484]              assume now > tmpNow;
[L2485]              assume msgsender_MSG != null;
[L2486]              assume DType[msgsender_MSG] != SafeMath;
[L2487]              assume DType[msgsender_MSG] != IERC20;
[L2488]              assume DType[msgsender_MSG] != FLAMA;
[L2489]              Alloc[msgsender_MSG] := true;
[L2490]  COND FALSE  !(choice == 12)
[L2496]  COND FALSE  !(choice == 11)
[L2502]  COND FALSE  !(choice == 10)
[L2508]  COND FALSE  !(choice == 9)
[L2515]  COND FALSE  !(choice == 8)
[L2522]  COND TRUE   choice == 7
[L2523]              gas := gas - 21000;
[L2524]  COND TRUE   gas >= 0
[L2525]              assume value_s416 >= 0 && value_s416 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2526]              assume msgvalue_MSG == 0;
[L2527]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_FLAMA(this, msgsender_MSG, msgvalue_MSG, from_s416, to_s416, value_s416);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((((from_s416 != to_s416 && ((value_s416 > _balances_FLAMA[this][from_s416] || value_s416 > _allowed_FLAMA[this][from_s416][msgsender_MSG]) || _balances_FLAMA[this][to_s416] + value_s416 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && value_s416 >= 0) && value_s416 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_FLAMA[this][to_s416] >= 0) && _balances_FLAMA[this][to_s416] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_FLAMA[this][from_s416] >= 0) && _balances_FLAMA[this][from_s416] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowed_FLAMA[this][from_s416][msgsender_MSG] >= 0) && _allowed_FLAMA[this][from_s416][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transferFrom_FLAMA0 := true;
[L2]                 call_transferFrom_FLAMA0 := false;
[L2]                 revert := revert_hold;
[L721]               havoc __exception;
[L722]               revert := false;
[L723]   COND FALSE  !(__exception)
[L744]   CALL        call __ret_0_ := transferFrom~address~address~uint256_FLAMA__success(this, msgsender_MSG, msgvalue_MSG, from_s416, to_s416, value_s416);
[L1606]  CALL        call __var_2 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowed_FLAMA[this][from_s416][msgsender_MSG], value_s416);
[L1291]  COND FALSE  !(!(b_s82 <= a_s82))
[L1295]              c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1296]              __ret_0_ := c_s82;
[L1606]  RET         call __var_2 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowed_FLAMA[this][from_s416][msgsender_MSG], value_s416);
[L1607]  COND FALSE  !(revert)
[L1610]              sum__allowed1[from_s416] := sum__allowed1[from_s416] - _allowed_FLAMA[this][from_s416][msgsender_MSG];
[L1611]              _allowed_FLAMA[this][from_s416][msgsender_MSG] := __var_2;
[L1612]              sum__allowed1[from_s416] := sum__allowed1[from_s416] + _allowed_FLAMA[this][from_s416][msgsender_MSG];
[L1613]  CALL        call _transfer~address~address~uint256_FLAMA__success(this, msgsender_MSG, msgvalue_MSG, from_s416, to_s416, value_s416);
[L1762]              __var_7 := null;
[L1763]  COND FALSE  !(!(to_s598 != null))
[L1767]  CALL        call onePercent_s598 := div~uint256~uint256_SafeMath__success(this, this, 0, value_s598, 100);
[L1267]  COND FALSE  !(!(b_s58 > 0))
[L1271]              c_s58 := nonlinearDiv(a_s58, b_s58) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1272]              __ret_0_ := c_s58;
[L1767]  RET         call onePercent_s598 := div~uint256~uint256_SafeMath__success(this, this, 0, value_s598, 100);
[L1768]  COND FALSE  !(revert)
[L1771]              onePercent_s598 := onePercent_s598;
[L1772]  CALL        call burnAmount_s598 := mul~uint256~uint256_SafeMath__success(this, this, 0, onePercent_s598, 3);
[L1239]  COND TRUE   a_s34 == 0
[L1240]              __ret_0_ := 0;
[L1772]  RET         call burnAmount_s598 := mul~uint256~uint256_SafeMath__success(this, this, 0, onePercent_s598, 3);
[L1773]  COND FALSE  !(revert)
[L1776]              burnAmount_s598 := burnAmount_s598;
[L1777]  CALL        call newTransferAmount_s598 := sub~uint256~uint256_SafeMath__success(this, this, 0, value_s598, burnAmount_s598);
[L1291]  COND FALSE  !(!(b_s82 <= a_s82))
[L1295]              c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1296]              __ret_0_ := c_s82;
[L1777]  RET         call newTransferAmount_s598 := sub~uint256~uint256_SafeMath__success(this, this, 0, value_s598, burnAmount_s598);
[L1778]  COND FALSE  !(revert)
[L1781]              newTransferAmount_s598 := newTransferAmount_s598;
[L1782]  CALL        call __var_8 := sub~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_FLAMA[this], burnAmount_s598);
[L1291]  COND FALSE  !(!(b_s82 <= a_s82))
[L1295]              c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1296]              __ret_0_ := c_s82;
[L1782]  RET         call __var_8 := sub~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_FLAMA[this], burnAmount_s598);
[L1783]  COND FALSE  !(revert)
[L1786]              _totalSupply_FLAMA[this] := __var_8;
[L1787]  CALL        call __var_9 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_FLAMA[this][from_s598], value_s598);
[L1291]  COND FALSE  !(!(b_s82 <= a_s82))
[L1295]              c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1296]              __ret_0_ := c_s82;
[L1787]  RET         call __var_9 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_FLAMA[this][from_s598], value_s598);
[L1788]  COND FALSE  !(revert)
[L1791]              sum__balances0[this] := sum__balances0[this] - _balances_FLAMA[this][from_s598];
[L1792]              _balances_FLAMA[this][from_s598] := __var_9;
[L1793]              sum__balances0[this] := sum__balances0[this] + _balances_FLAMA[this][from_s598];
[L1794]  CALL        call __var_10 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_FLAMA[this][to_s598], newTransferAmount_s598);
[L1315]              c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1316]  COND FALSE  !(!(c_s106 >= a_s106))
[L1320]              __ret_0_ := c_s106;
[L1794]  RET         call __var_10 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_FLAMA[this][to_s598], newTransferAmount_s598);
[L1795]  COND FALSE  !(revert)
[L1798]              sum__balances0[this] := sum__balances0[this] - _balances_FLAMA[this][to_s598];
[L1799]              _balances_FLAMA[this][to_s598] := __var_10;
[L1800]              sum__balances0[this] := sum__balances0[this] + _balances_FLAMA[this][to_s598];
[L1801]              assert { :EventEmitted "Transfer_FLAMA" } true;
[L1802]              assert { :EventEmitted "Transfer_FLAMA" } true;
[L1613]  RET         call _transfer~address~address~uint256_FLAMA__success(this, msgsender_MSG, msgvalue_MSG, from_s416, to_s416, value_s416);
[L1614]  COND FALSE  !(revert)
[L1617]              __ret_0_ := true;
[L744]   RET         call __ret_0_ := transferFrom~address~address~uint256_FLAMA__success(this, msgsender_MSG, msgvalue_MSG, from_s416, to_s416, value_s416);
[L745]               assume !revert && gas >= 0;
[L2527]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_FLAMA(this, msgsender_MSG, msgvalue_MSG, from_s416, to_s416, value_s416);
[L2590]  RET         call CorralChoice_FLAMA(this);

[2020-11-25 16:33:07,461 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 16:33:07,461 INFO  L82        PathProgramCache]: Analyzing trace with hash 1624998618, now seen corresponding path program 1 times
[2020-11-25 16:33:07,462 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 16:33:07,484 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 16:33:07,639 INFO  L134       CoverageAnalysis]: Checked inductivity of 30 backedges. 0 proven. 12 refuted. 0 times theorem prover too weak. 18 trivial. 0 not checked.
[2020-11-25 16:33:07,640 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 16:33:07,640 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [12] total 12
[2020-11-25 16:33:07,640 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 16:33:07,640 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 13 interpolants.
[2020-11-25 16:33:07,641 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=24, Invalid=132, Unknown=0, NotChecked=0, Total=156
[2020-11-25 16:33:07,641 INFO  L87              Difference]: Start difference. First operand 1952 states and 2122 transitions. cyclomatic complexity: 172 Second operand 13 states.
[2020-11-25 16:33:08,802 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 16:33:08,802 INFO  L93              Difference]: Finished difference Result 2036 states and 2218 transitions.
[2020-11-25 16:33:08,802 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 13 states. 
[2020-11-25 16:33:08,803 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2036 states and 2218 transitions.
[2020-11-25 16:33:08,809 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 16:33:08,817 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2036 states to 2036 states and 2218 transitions.
[2020-11-25 16:33:08,817 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 626
[2020-11-25 16:33:08,817 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 626
[2020-11-25 16:33:08,817 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 2036 states and 2218 transitions.
[2020-11-25 16:33:08,819 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 16:33:08,820 INFO  L728         BuchiCegarLoop]: Abstraction has 2036 states and 2218 transitions.
[2020-11-25 16:33:08,821 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 2036 states and 2218 transitions.
[2020-11-25 16:33:08,838 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 2036 to 1876.
[2020-11-25 16:33:08,838 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 1876 states.
[2020-11-25 16:33:08,841 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 1876 states to 1876 states and 2025 transitions.
[2020-11-25 16:33:08,841 INFO  L751         BuchiCegarLoop]: Abstraction has 1876 states and 2025 transitions.
[2020-11-25 16:33:08,841 INFO  L631         BuchiCegarLoop]: Abstraction has 1876 states and 2025 transitions.
[2020-11-25 16:33:08,841 INFO  L445         BuchiCegarLoop]: ======== Iteration 4============
[2020-11-25 16:33:08,841 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 1876 states and 2025 transitions.
[2020-11-25 16:33:08,845 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 16:33:08,845 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 16:33:08,845 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 16:33:08,848 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [4, 4, 4, 4, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 16:33:08,848 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transferFrom_FLAMA0 := false;
[L2]                 call_transferFrom_FLAMA0 := false;
[L2]     CALL        call main();
[L2580]              assume null == 0;
[L2581]  CALL        call this := FreshRefGenerator__success();
[L1182]              havoc newRef;
[L1183]              assume Alloc[newRef] == false;
[L1184]              Alloc[newRef] := true;
[L1185]              assume newRef != null;
[L2581]  RET         call this := FreshRefGenerator__success();
[L2582]              assume now >= 0;
[L2583]              assume DType[this] == FLAMA;
[L2584]              assume msgvalue_MSG == 0;
[L2585]              gas := gas - 53000;
[L2586]  CALL        call FLAMA_FLAMA(this, msgsender_MSG, msgvalue_MSG, name_s264, symbol_s264, decimals_s264, totalSupply_s264);
[L261]               havoc __exception;
[L262]               revert := false;
[L263]   COND TRUE   __exception
[L264]               __tmp__Balance := Balance;
[L265]               __tmp__DType := DType;
[L266]               __tmp__Alloc := Alloc;
[L267]               __tmp__balance_ADDR := balance_ADDR;
[L268]               __tmp__M_Ref_int := M_Ref_int;
[L269]               __tmp__sum__balances0 := sum__balances0;
[L270]               __tmp__alloc__allowed_FLAMA_lvl0 := alloc__allowed_FLAMA_lvl0;
[L271]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L272]               __tmp__sum__allowed1 := sum__allowed1;
[L273]               __tmp__Length := Length;
[L274]               __tmp__now := now;
[L275]               __tmp___name_FLAMA := _name_FLAMA;
[L276]               __tmp___symbol_FLAMA := _symbol_FLAMA;
[L277]               __tmp___decimals_FLAMA := _decimals_FLAMA;
[L278]               __tmp___totalSupply_FLAMA := _totalSupply_FLAMA;
[L279]               __tmp___balances_FLAMA := _balances_FLAMA;
[L280]               __tmp___allowed_FLAMA := _allowed_FLAMA;
[L281]   CALL        call FLAMA_FLAMA__fail(this, msgsender_MSG, msgvalue_MSG, name_s264, symbol_s264, decimals_s264, totalSupply_s264);
[L1440]  CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L1362]  CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L1347]              assume msgsender_MSG != null;
[L1348]              __tmp__Balance[this] := 0;
[L1362]  RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L1363]  COND FALSE  !(revert)
[L1440]  RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L1441]  COND FALSE  !(revert)
[L1444]  CALL        call FLAMA_FLAMA_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, name_s264, symbol_s264, decimals_s264, totalSupply_s264);
[L1395]              assume msgsender_MSG != null;
[L1396]              __tmp__Balance[this] := 0;
[L1397]              __tmp___name_FLAMA[this] := 965843050;
[L1398]              __tmp___symbol_FLAMA[this] := 965843050;
[L1399]              __tmp___decimals_FLAMA[this] := 0;
[L1400]              __tmp___totalSupply_FLAMA[this] := 0;
[L1401]              __tmp___balances_FLAMA[this] := zeroRefintArr();
[L1402]              __tmp__sum__balances0[this] := 0;
[L1403]              __tmp___allowed_FLAMA[this] := zeroRefRefintArr();
[L1404]              __tmp__sum__allowed1[this] := 0;
[L1406]              __tmp___name_FLAMA[this] := name_s264;
[L1407]              __tmp___symbol_FLAMA[this] := symbol_s264;
[L1408]              __tmp___decimals_FLAMA[this] := decimals_s264;
[L1409]              __tmp___totalSupply_FLAMA[this] := totalSupply_s264;
[L1410]              __tmp__sum__balances0[this] := __tmp__sum__balances0[this] - __tmp___balances_FLAMA[this][msgsender_MSG];
[L1411]              __tmp___balances_FLAMA[this][msgsender_MSG] := __tmp___totalSupply_FLAMA[this];
[L1412]              __tmp__sum__balances0[this] := __tmp__sum__balances0[this] + __tmp___balances_FLAMA[this][msgsender_MSG];
[L1444]  RET         call FLAMA_FLAMA_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, name_s264, symbol_s264, decimals_s264, totalSupply_s264);
[L1445]  COND FALSE  !(revert)
[L281]   RET         call FLAMA_FLAMA__fail(this, msgsender_MSG, msgvalue_MSG, name_s264, symbol_s264, decimals_s264, totalSupply_s264);
[L282]               assume revert || gas < 0;
[L2586]  RET         call FLAMA_FLAMA(this, msgsender_MSG, msgvalue_MSG, name_s264, symbol_s264, decimals_s264, totalSupply_s264);
[L2587]              assume !revert && gas >= 0;
[L2590]  CALL        call CorralChoice_FLAMA(this);
[L2446]              havoc msgsender_MSG;
[L2447]              havoc msgvalue_MSG;
[L2448]              havoc choice;
[L2449]              havoc __ret_0_totalSupply;
[L2450]              havoc owner_s308;
[L2451]              havoc __ret_0_balanceOf;
[L2452]              havoc owner_s324;
[L2453]              havoc spender_s324;
[L2454]              havoc __ret_0_allowance;
[L2455]              havoc to_s343;
[L2456]              havoc value_s343;
[L2457]              havoc __ret_0_transfer;
[L2458]              havoc spender_s379;
[L2459]              havoc value_s379;
[L2460]              havoc __ret_0_approve;
[L2461]              havoc from_s416;
[L2462]              havoc to_s416;
[L2463]              havoc value_s416;
[L2464]              havoc __ret_0_transferFrom;
[L2465]              havoc value_s229;
[L2466]              havoc name_s264;
[L2467]              havoc symbol_s264;
[L2468]              havoc decimals_s264;
[L2469]              havoc totalSupply_s264;
[L2470]              havoc __ret_0_name;
[L2471]              havoc __ret_0_symbol;
[L2472]              havoc __ret_0_decimals;
[L2473]              havoc spender_s466;
[L2474]              havoc addedValue_s466;
[L2475]              havoc __ret_0_increaseAllowance;
[L2476]              havoc spender_s516;
[L2477]              havoc subtractedValue_s516;
[L2478]              havoc __ret_0_decreaseAllowance;
[L2479]              havoc tmpNow;
[L2480]              havoc gas;
[L2481]              assume gas > 4000000 && gas <= 8000000;
[L2482]              tmpNow := now;
[L2483]              havoc now;
[L2484]              assume now > tmpNow;
[L2485]              assume msgsender_MSG != null;
[L2486]              assume DType[msgsender_MSG] != SafeMath;
[L2487]              assume DType[msgsender_MSG] != IERC20;
[L2488]              assume DType[msgsender_MSG] != FLAMA;
[L2489]              Alloc[msgsender_MSG] := true;
[L2490]  COND FALSE  !(choice == 12)
[L2496]  COND FALSE  !(choice == 11)
[L2502]  COND FALSE  !(choice == 10)
[L2508]  COND FALSE  !(choice == 9)
[L2515]  COND FALSE  !(choice == 8)
[L2522]  COND TRUE   choice == 7
[L2523]              gas := gas - 21000;
[L2524]  COND TRUE   gas >= 0
[L2525]              assume value_s416 >= 0 && value_s416 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2526]              assume msgvalue_MSG == 0;
[L2527]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_FLAMA(this, msgsender_MSG, msgvalue_MSG, from_s416, to_s416, value_s416);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((((from_s416 != to_s416 && ((value_s416 > _balances_FLAMA[this][from_s416] || value_s416 > _allowed_FLAMA[this][from_s416][msgsender_MSG]) || _balances_FLAMA[this][to_s416] + value_s416 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && value_s416 >= 0) && value_s416 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_FLAMA[this][to_s416] >= 0) && _balances_FLAMA[this][to_s416] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_FLAMA[this][from_s416] >= 0) && _balances_FLAMA[this][from_s416] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowed_FLAMA[this][from_s416][msgsender_MSG] >= 0) && _allowed_FLAMA[this][from_s416][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transferFrom_FLAMA0 := true;
[L2]                 call_transferFrom_FLAMA0 := false;
[L2]                 revert := revert_hold;
[L721]               havoc __exception;
[L722]               revert := false;
[L723]   COND FALSE  !(__exception)
[L744]   CALL        call __ret_0_ := transferFrom~address~address~uint256_FLAMA__success(this, msgsender_MSG, msgvalue_MSG, from_s416, to_s416, value_s416);
[L1606]  CALL        call __var_2 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowed_FLAMA[this][from_s416][msgsender_MSG], value_s416);
[L1291]  COND FALSE  !(!(b_s82 <= a_s82))
[L1295]              c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1296]              __ret_0_ := c_s82;
[L1606]  RET         call __var_2 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowed_FLAMA[this][from_s416][msgsender_MSG], value_s416);
[L1607]  COND FALSE  !(revert)
[L1610]              sum__allowed1[from_s416] := sum__allowed1[from_s416] - _allowed_FLAMA[this][from_s416][msgsender_MSG];
[L1611]              _allowed_FLAMA[this][from_s416][msgsender_MSG] := __var_2;
[L1612]              sum__allowed1[from_s416] := sum__allowed1[from_s416] + _allowed_FLAMA[this][from_s416][msgsender_MSG];
[L1613]  CALL        call _transfer~address~address~uint256_FLAMA__success(this, msgsender_MSG, msgvalue_MSG, from_s416, to_s416, value_s416);
[L1762]              __var_7 := null;
[L1763]  COND FALSE  !(!(to_s598 != null))
[L1767]  CALL        call onePercent_s598 := div~uint256~uint256_SafeMath__success(this, this, 0, value_s598, 100);
[L1267]  COND FALSE  !(!(b_s58 > 0))
[L1271]              c_s58 := nonlinearDiv(a_s58, b_s58) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1272]              __ret_0_ := c_s58;
[L1767]  RET         call onePercent_s598 := div~uint256~uint256_SafeMath__success(this, this, 0, value_s598, 100);
[L1768]  COND FALSE  !(revert)
[L1771]              onePercent_s598 := onePercent_s598;
[L1772]  CALL        call burnAmount_s598 := mul~uint256~uint256_SafeMath__success(this, this, 0, onePercent_s598, 3);
[L1239]  COND TRUE   a_s34 == 0
[L1240]              __ret_0_ := 0;
[L1772]  RET         call burnAmount_s598 := mul~uint256~uint256_SafeMath__success(this, this, 0, onePercent_s598, 3);
[L1773]  COND FALSE  !(revert)
[L1776]              burnAmount_s598 := burnAmount_s598;
[L1777]  CALL        call newTransferAmount_s598 := sub~uint256~uint256_SafeMath__success(this, this, 0, value_s598, burnAmount_s598);
[L1291]  COND FALSE  !(!(b_s82 <= a_s82))
[L1295]              c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1296]              __ret_0_ := c_s82;
[L1777]  RET         call newTransferAmount_s598 := sub~uint256~uint256_SafeMath__success(this, this, 0, value_s598, burnAmount_s598);
[L1778]  COND FALSE  !(revert)
[L1781]              newTransferAmount_s598 := newTransferAmount_s598;
[L1782]  CALL        call __var_8 := sub~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_FLAMA[this], burnAmount_s598);
[L1291]  COND FALSE  !(!(b_s82 <= a_s82))
[L1295]              c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1296]              __ret_0_ := c_s82;
[L1782]  RET         call __var_8 := sub~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_FLAMA[this], burnAmount_s598);
[L1783]  COND FALSE  !(revert)
[L1786]              _totalSupply_FLAMA[this] := __var_8;
[L1787]  CALL        call __var_9 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_FLAMA[this][from_s598], value_s598);
[L1291]  COND FALSE  !(!(b_s82 <= a_s82))
[L1295]              c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1296]              __ret_0_ := c_s82;
[L1787]  RET         call __var_9 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_FLAMA[this][from_s598], value_s598);
[L1788]  COND FALSE  !(revert)
[L1791]              sum__balances0[this] := sum__balances0[this] - _balances_FLAMA[this][from_s598];
[L1792]              _balances_FLAMA[this][from_s598] := __var_9;
[L1793]              sum__balances0[this] := sum__balances0[this] + _balances_FLAMA[this][from_s598];
[L1794]  CALL        call __var_10 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_FLAMA[this][to_s598], newTransferAmount_s598);
[L1315]              c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1316]  COND FALSE  !(!(c_s106 >= a_s106))
[L1320]              __ret_0_ := c_s106;
[L1794]  RET         call __var_10 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_FLAMA[this][to_s598], newTransferAmount_s598);
[L1795]  COND FALSE  !(revert)
[L1798]              sum__balances0[this] := sum__balances0[this] - _balances_FLAMA[this][to_s598];
[L1799]              _balances_FLAMA[this][to_s598] := __var_10;
[L1800]              sum__balances0[this] := sum__balances0[this] + _balances_FLAMA[this][to_s598];
[L1801]              assert { :EventEmitted "Transfer_FLAMA" } true;
[L1802]              assert { :EventEmitted "Transfer_FLAMA" } true;
[L1613]  RET         call _transfer~address~address~uint256_FLAMA__success(this, msgsender_MSG, msgvalue_MSG, from_s416, to_s416, value_s416);
[L1614]  COND FALSE  !(revert)
[L1617]              __ret_0_ := true;
[L744]   RET         call __ret_0_ := transferFrom~address~address~uint256_FLAMA__success(this, msgsender_MSG, msgvalue_MSG, from_s416, to_s416, value_s416);
[L745]               assume !revert && gas >= 0;
[L2527]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_FLAMA(this, msgsender_MSG, msgvalue_MSG, from_s416, to_s416, value_s416);
[L2590]  RET         call CorralChoice_FLAMA(this);

Loop:
[L2590]  CALL        call CorralChoice_FLAMA(this);
[L2446]              havoc msgsender_MSG;
[L2447]              havoc msgvalue_MSG;
[L2448]              havoc choice;
[L2449]              havoc __ret_0_totalSupply;
[L2450]              havoc owner_s308;
[L2451]              havoc __ret_0_balanceOf;
[L2452]              havoc owner_s324;
[L2453]              havoc spender_s324;
[L2454]              havoc __ret_0_allowance;
[L2455]              havoc to_s343;
[L2456]              havoc value_s343;
[L2457]              havoc __ret_0_transfer;
[L2458]              havoc spender_s379;
[L2459]              havoc value_s379;
[L2460]              havoc __ret_0_approve;
[L2461]              havoc from_s416;
[L2462]              havoc to_s416;
[L2463]              havoc value_s416;
[L2464]              havoc __ret_0_transferFrom;
[L2465]              havoc value_s229;
[L2466]              havoc name_s264;
[L2467]              havoc symbol_s264;
[L2468]              havoc decimals_s264;
[L2469]              havoc totalSupply_s264;
[L2470]              havoc __ret_0_name;
[L2471]              havoc __ret_0_symbol;
[L2472]              havoc __ret_0_decimals;
[L2473]              havoc spender_s466;
[L2474]              havoc addedValue_s466;
[L2475]              havoc __ret_0_increaseAllowance;
[L2476]              havoc spender_s516;
[L2477]              havoc subtractedValue_s516;
[L2478]              havoc __ret_0_decreaseAllowance;
[L2479]              havoc tmpNow;
[L2480]              havoc gas;
[L2481]              assume gas > 4000000 && gas <= 8000000;
[L2482]              tmpNow := now;
[L2483]              havoc now;
[L2484]              assume now > tmpNow;
[L2485]              assume msgsender_MSG != null;
[L2486]              assume DType[msgsender_MSG] != SafeMath;
[L2487]              assume DType[msgsender_MSG] != IERC20;
[L2488]              assume DType[msgsender_MSG] != FLAMA;
[L2489]              Alloc[msgsender_MSG] := true;
[L2490]  COND TRUE   choice == 12
[L2491]              gas := gas - 21000;
[L2492]  COND FALSE  !(gas >= 0)
[L2590]  RET         call CorralChoice_FLAMA(this);

[2020-11-25 16:33:08,852 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 16:33:08,852 INFO  L82        PathProgramCache]: Analyzing trace with hash -1856048854, now seen corresponding path program 1 times
[2020-11-25 16:33:08,853 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 16:33:08,869 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 16:33:08,907 INFO  L134       CoverageAnalysis]: Checked inductivity of 30 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 30 trivial. 0 not checked.
[2020-11-25 16:33:08,907 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 16:33:08,907 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [4] imperfect sequences [] total 4
[2020-11-25 16:33:08,908 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 16:33:08,908 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-11-25 16:33:08,908 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=6, Invalid=6, Unknown=0, NotChecked=0, Total=12
[2020-11-25 16:33:08,908 INFO  L87              Difference]: Start difference. First operand 1876 states and 2025 transitions. cyclomatic complexity: 152 Second operand 4 states.
[2020-11-25 16:33:09,122 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 16:33:09,122 INFO  L93              Difference]: Finished difference Result 2397 states and 2684 transitions.
[2020-11-25 16:33:09,122 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 4 states. 
[2020-11-25 16:33:09,122 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2397 states and 2684 transitions.
[2020-11-25 16:33:09,131 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 6
[2020-11-25 16:33:09,141 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2397 states to 2333 states and 2620 transitions.
[2020-11-25 16:33:09,141 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 700
[2020-11-25 16:33:09,141 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 700
[2020-11-25 16:33:09,141 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 2333 states and 2620 transitions.
[2020-11-25 16:33:09,159 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 16:33:09,160 INFO  L728         BuchiCegarLoop]: Abstraction has 2333 states and 2620 transitions.
[2020-11-25 16:33:09,163 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 2333 states and 2620 transitions.
[2020-11-25 16:33:09,181 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 2333 to 1812.
[2020-11-25 16:33:09,182 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 1812 states.
[2020-11-25 16:33:09,183 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 1812 states to 1812 states and 1960 transitions.
[2020-11-25 16:33:09,184 INFO  L751         BuchiCegarLoop]: Abstraction has 1812 states and 1960 transitions.
[2020-11-25 16:33:09,184 INFO  L631         BuchiCegarLoop]: Abstraction has 1812 states and 1960 transitions.
[2020-11-25 16:33:09,184 INFO  L445         BuchiCegarLoop]: ======== Iteration 5============
[2020-11-25 16:33:09,184 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 1812 states and 1960 transitions.
[2020-11-25 16:33:09,187 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 16:33:09,187 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 16:33:09,187 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 16:33:09,188 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 16:33:09,188 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [4, 4, 4, 4, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transferFrom_FLAMA0 := false;
[L2]                 call_transferFrom_FLAMA0 := false;
[L2]     CALL        call main();
[L2580]              assume null == 0;
[L2581]  CALL        call this := FreshRefGenerator__success();
[L1182]              havoc newRef;
[L1183]              assume Alloc[newRef] == false;
[L1184]              Alloc[newRef] := true;
[L1185]              assume newRef != null;
[L2581]  RET         call this := FreshRefGenerator__success();
[L2582]              assume now >= 0;
[L2583]              assume DType[this] == FLAMA;
[L2584]              assume msgvalue_MSG == 0;
[L2585]              gas := gas - 53000;
[L2586]  CALL        call FLAMA_FLAMA(this, msgsender_MSG, msgvalue_MSG, name_s264, symbol_s264, decimals_s264, totalSupply_s264);
[L261]               havoc __exception;
[L262]               revert := false;
[L263]   COND FALSE  !(__exception)
[L284]   CALL        call FLAMA_FLAMA__success(this, msgsender_MSG, msgvalue_MSG, name_s264, symbol_s264, decimals_s264, totalSupply_s264);
[L1452]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1370]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1355]              assume msgsender_MSG != null;
[L1356]              Balance[this] := 0;
[L1370]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1371]  COND FALSE  !(revert)
[L1452]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1453]  COND FALSE  !(revert)
[L1456]  CALL        call FLAMA_FLAMA_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s264, symbol_s264, decimals_s264, totalSupply_s264);
[L1418]              assume msgsender_MSG != null;
[L1419]              Balance[this] := 0;
[L1420]              _name_FLAMA[this] := 965843050;
[L1421]              _symbol_FLAMA[this] := 965843050;
[L1422]              _decimals_FLAMA[this] := 0;
[L1423]              _totalSupply_FLAMA[this] := 0;
[L1424]              _balances_FLAMA[this] := zeroRefintArr();
[L1425]              sum__balances0[this] := 0;
[L1426]              _allowed_FLAMA[this] := zeroRefRefintArr();
[L1427]              sum__allowed1[this] := 0;
[L1429]              _name_FLAMA[this] := name_s264;
[L1430]              _symbol_FLAMA[this] := symbol_s264;
[L1431]              _decimals_FLAMA[this] := decimals_s264;
[L1432]              _totalSupply_FLAMA[this] := totalSupply_s264;
[L1433]              sum__balances0[this] := sum__balances0[this] - _balances_FLAMA[this][msgsender_MSG];
[L1434]              _balances_FLAMA[this][msgsender_MSG] := _totalSupply_FLAMA[this];
[L1435]              sum__balances0[this] := sum__balances0[this] + _balances_FLAMA[this][msgsender_MSG];
[L1456]  RET         call FLAMA_FLAMA_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s264, symbol_s264, decimals_s264, totalSupply_s264);
[L1457]  COND FALSE  !(revert)
[L284]   RET         call FLAMA_FLAMA__success(this, msgsender_MSG, msgvalue_MSG, name_s264, symbol_s264, decimals_s264, totalSupply_s264);
[L285]               assume !revert && gas >= 0;
[L2586]  RET         call FLAMA_FLAMA(this, msgsender_MSG, msgvalue_MSG, name_s264, symbol_s264, decimals_s264, totalSupply_s264);
[L2587]              assume !revert && gas >= 0;
[L2590]  CALL        call CorralChoice_FLAMA(this);
[L2446]              havoc msgsender_MSG;
[L2447]              havoc msgvalue_MSG;
[L2448]              havoc choice;
[L2449]              havoc __ret_0_totalSupply;
[L2450]              havoc owner_s308;
[L2451]              havoc __ret_0_balanceOf;
[L2452]              havoc owner_s324;
[L2453]              havoc spender_s324;
[L2454]              havoc __ret_0_allowance;
[L2455]              havoc to_s343;
[L2456]              havoc value_s343;
[L2457]              havoc __ret_0_transfer;
[L2458]              havoc spender_s379;
[L2459]              havoc value_s379;
[L2460]              havoc __ret_0_approve;
[L2461]              havoc from_s416;
[L2462]              havoc to_s416;
[L2463]              havoc value_s416;
[L2464]              havoc __ret_0_transferFrom;
[L2465]              havoc value_s229;
[L2466]              havoc name_s264;
[L2467]              havoc symbol_s264;
[L2468]              havoc decimals_s264;
[L2469]              havoc totalSupply_s264;
[L2470]              havoc __ret_0_name;
[L2471]              havoc __ret_0_symbol;
[L2472]              havoc __ret_0_decimals;
[L2473]              havoc spender_s466;
[L2474]              havoc addedValue_s466;
[L2475]              havoc __ret_0_increaseAllowance;
[L2476]              havoc spender_s516;
[L2477]              havoc subtractedValue_s516;
[L2478]              havoc __ret_0_decreaseAllowance;
[L2479]              havoc tmpNow;
[L2480]              havoc gas;
[L2481]              assume gas > 4000000 && gas <= 8000000;
[L2482]              tmpNow := now;
[L2483]              havoc now;
[L2484]              assume now > tmpNow;
[L2485]              assume msgsender_MSG != null;
[L2486]              assume DType[msgsender_MSG] != SafeMath;
[L2487]              assume DType[msgsender_MSG] != IERC20;
[L2488]              assume DType[msgsender_MSG] != FLAMA;
[L2489]              Alloc[msgsender_MSG] := true;
[L2490]  COND FALSE  !(choice == 12)
[L2496]  COND FALSE  !(choice == 11)
[L2502]  COND FALSE  !(choice == 10)
[L2508]  COND FALSE  !(choice == 9)
[L2515]  COND TRUE   choice == 8
[L2516]              gas := gas - 21000;
[L2517]  COND TRUE   gas >= 0
[L2518]              assume value_s379 >= 0 && value_s379 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2519]              assume msgvalue_MSG == 0;
[L2520]  CALL        call __ret_0_approve := approve~address~uint256_FLAMA(this, msgsender_MSG, msgvalue_MSG, spender_s379, value_s379);
[L666]               havoc __exception;
[L667]               revert := false;
[L668]   COND FALSE  !(__exception)
[L689]   CALL        call __ret_0_ := approve~address~uint256_FLAMA__success(this, msgsender_MSG, msgvalue_MSG, spender_s379, value_s379);
[L1572]              __var_1 := null;
[L1573]  COND FALSE  !(!(spender_s379 != null))
[L1577]              sum__allowed1[msgsender_MSG] := sum__allowed1[msgsender_MSG] - _allowed_FLAMA[this][msgsender_MSG][spender_s379];
[L1578]              _allowed_FLAMA[this][msgsender_MSG][spender_s379] := value_s379;
[L1579]              sum__allowed1[msgsender_MSG] := sum__allowed1[msgsender_MSG] + _allowed_FLAMA[this][msgsender_MSG][spender_s379];
[L1580]              assert { :EventEmitted "Approval_FLAMA" } true;
[L1581]              __ret_0_ := true;
[L689]   RET         call __ret_0_ := approve~address~uint256_FLAMA__success(this, msgsender_MSG, msgvalue_MSG, spender_s379, value_s379);
[L690]               assume !revert && gas >= 0;
[L2520]  RET         call __ret_0_approve := approve~address~uint256_FLAMA(this, msgsender_MSG, msgvalue_MSG, spender_s379, value_s379);
[L2590]  RET         call CorralChoice_FLAMA(this);
[L2590]  CALL        call CorralChoice_FLAMA(this);
[L2446]              havoc msgsender_MSG;
[L2447]              havoc msgvalue_MSG;
[L2448]              havoc choice;
[L2449]              havoc __ret_0_totalSupply;
[L2450]              havoc owner_s308;
[L2451]              havoc __ret_0_balanceOf;
[L2452]              havoc owner_s324;
[L2453]              havoc spender_s324;
[L2454]              havoc __ret_0_allowance;
[L2455]              havoc to_s343;
[L2456]              havoc value_s343;
[L2457]              havoc __ret_0_transfer;
[L2458]              havoc spender_s379;
[L2459]              havoc value_s379;
[L2460]              havoc __ret_0_approve;
[L2461]              havoc from_s416;
[L2462]              havoc to_s416;
[L2463]              havoc value_s416;
[L2464]              havoc __ret_0_transferFrom;
[L2465]              havoc value_s229;
[L2466]              havoc name_s264;
[L2467]              havoc symbol_s264;
[L2468]              havoc decimals_s264;
[L2469]              havoc totalSupply_s264;
[L2470]              havoc __ret_0_name;
[L2471]              havoc __ret_0_symbol;
[L2472]              havoc __ret_0_decimals;
[L2473]              havoc spender_s466;
[L2474]              havoc addedValue_s466;
[L2475]              havoc __ret_0_increaseAllowance;
[L2476]              havoc spender_s516;
[L2477]              havoc subtractedValue_s516;
[L2478]              havoc __ret_0_decreaseAllowance;
[L2479]              havoc tmpNow;
[L2480]              havoc gas;
[L2481]              assume gas > 4000000 && gas <= 8000000;
[L2482]              tmpNow := now;
[L2483]              havoc now;
[L2484]              assume now > tmpNow;
[L2485]              assume msgsender_MSG != null;
[L2486]              assume DType[msgsender_MSG] != SafeMath;
[L2487]              assume DType[msgsender_MSG] != IERC20;
[L2488]              assume DType[msgsender_MSG] != FLAMA;
[L2489]              Alloc[msgsender_MSG] := true;
[L2490]  COND FALSE  !(choice == 12)
[L2496]  COND FALSE  !(choice == 11)
[L2502]  COND FALSE  !(choice == 10)
[L2508]  COND FALSE  !(choice == 9)
[L2515]  COND FALSE  !(choice == 8)
[L2522]  COND TRUE   choice == 7
[L2523]              gas := gas - 21000;
[L2524]  COND TRUE   gas >= 0
[L2525]              assume value_s416 >= 0 && value_s416 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2526]              assume msgvalue_MSG == 0;
[L2527]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_FLAMA(this, msgsender_MSG, msgvalue_MSG, from_s416, to_s416, value_s416);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((((from_s416 != to_s416 && ((value_s416 > _balances_FLAMA[this][from_s416] || value_s416 > _allowed_FLAMA[this][from_s416][msgsender_MSG]) || _balances_FLAMA[this][to_s416] + value_s416 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && value_s416 >= 0) && value_s416 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_FLAMA[this][to_s416] >= 0) && _balances_FLAMA[this][to_s416] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_FLAMA[this][from_s416] >= 0) && _balances_FLAMA[this][from_s416] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowed_FLAMA[this][from_s416][msgsender_MSG] >= 0) && _allowed_FLAMA[this][from_s416][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transferFrom_FLAMA0 := true;
[L2]                 call_transferFrom_FLAMA0 := false;
[L2]                 revert := revert_hold;
[L721]               havoc __exception;
[L722]               revert := false;
[L723]   COND FALSE  !(__exception)
[L744]   CALL        call __ret_0_ := transferFrom~address~address~uint256_FLAMA__success(this, msgsender_MSG, msgvalue_MSG, from_s416, to_s416, value_s416);
[L1606]  CALL        call __var_2 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowed_FLAMA[this][from_s416][msgsender_MSG], value_s416);
[L1291]  COND FALSE  !(!(b_s82 <= a_s82))
[L1295]              c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1296]              __ret_0_ := c_s82;
[L1606]  RET         call __var_2 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowed_FLAMA[this][from_s416][msgsender_MSG], value_s416);
[L1607]  COND FALSE  !(revert)
[L1610]              sum__allowed1[from_s416] := sum__allowed1[from_s416] - _allowed_FLAMA[this][from_s416][msgsender_MSG];
[L1611]              _allowed_FLAMA[this][from_s416][msgsender_MSG] := __var_2;
[L1612]              sum__allowed1[from_s416] := sum__allowed1[from_s416] + _allowed_FLAMA[this][from_s416][msgsender_MSG];
[L1613]  CALL        call _transfer~address~address~uint256_FLAMA__success(this, msgsender_MSG, msgvalue_MSG, from_s416, to_s416, value_s416);
[L1762]              __var_7 := null;
[L1763]  COND FALSE  !(!(to_s598 != null))
[L1767]  CALL        call onePercent_s598 := div~uint256~uint256_SafeMath__success(this, this, 0, value_s598, 100);
[L1267]  COND FALSE  !(!(b_s58 > 0))
[L1271]              c_s58 := nonlinearDiv(a_s58, b_s58) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1272]              __ret_0_ := c_s58;
[L1767]  RET         call onePercent_s598 := div~uint256~uint256_SafeMath__success(this, this, 0, value_s598, 100);
[L1768]  COND FALSE  !(revert)
[L1771]              onePercent_s598 := onePercent_s598;
[L1772]  CALL        call burnAmount_s598 := mul~uint256~uint256_SafeMath__success(this, this, 0, onePercent_s598, 3);
[L1239]  COND TRUE   a_s34 == 0
[L1240]              __ret_0_ := 0;
[L1772]  RET         call burnAmount_s598 := mul~uint256~uint256_SafeMath__success(this, this, 0, onePercent_s598, 3);
[L1773]  COND FALSE  !(revert)
[L1776]              burnAmount_s598 := burnAmount_s598;
[L1777]  CALL        call newTransferAmount_s598 := sub~uint256~uint256_SafeMath__success(this, this, 0, value_s598, burnAmount_s598);
[L1291]  COND FALSE  !(!(b_s82 <= a_s82))
[L1295]              c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1296]              __ret_0_ := c_s82;
[L1777]  RET         call newTransferAmount_s598 := sub~uint256~uint256_SafeMath__success(this, this, 0, value_s598, burnAmount_s598);
[L1778]  COND FALSE  !(revert)
[L1781]              newTransferAmount_s598 := newTransferAmount_s598;
[L1782]  CALL        call __var_8 := sub~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_FLAMA[this], burnAmount_s598);
[L1291]  COND FALSE  !(!(b_s82 <= a_s82))
[L1295]              c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1296]              __ret_0_ := c_s82;
[L1782]  RET         call __var_8 := sub~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_FLAMA[this], burnAmount_s598);
[L1783]  COND FALSE  !(revert)
[L1786]              _totalSupply_FLAMA[this] := __var_8;
[L1787]  CALL        call __var_9 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_FLAMA[this][from_s598], value_s598);
[L1291]  COND FALSE  !(!(b_s82 <= a_s82))
[L1295]              c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1296]              __ret_0_ := c_s82;
[L1787]  RET         call __var_9 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_FLAMA[this][from_s598], value_s598);
[L1788]  COND FALSE  !(revert)
[L1791]              sum__balances0[this] := sum__balances0[this] - _balances_FLAMA[this][from_s598];
[L1792]              _balances_FLAMA[this][from_s598] := __var_9;
[L1793]              sum__balances0[this] := sum__balances0[this] + _balances_FLAMA[this][from_s598];
[L1794]  CALL        call __var_10 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_FLAMA[this][to_s598], newTransferAmount_s598);
[L1315]              c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1316]  COND FALSE  !(!(c_s106 >= a_s106))
[L1320]              __ret_0_ := c_s106;
[L1794]  RET         call __var_10 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_FLAMA[this][to_s598], newTransferAmount_s598);
[L1795]  COND FALSE  !(revert)
[L1798]              sum__balances0[this] := sum__balances0[this] - _balances_FLAMA[this][to_s598];
[L1799]              _balances_FLAMA[this][to_s598] := __var_10;
[L1800]              sum__balances0[this] := sum__balances0[this] + _balances_FLAMA[this][to_s598];
[L1801]              assert { :EventEmitted "Transfer_FLAMA" } true;
[L1802]              assert { :EventEmitted "Transfer_FLAMA" } true;
[L1613]  RET         call _transfer~address~address~uint256_FLAMA__success(this, msgsender_MSG, msgvalue_MSG, from_s416, to_s416, value_s416);
[L1614]  COND FALSE  !(revert)
[L1617]              __ret_0_ := true;
[L744]   RET         call __ret_0_ := transferFrom~address~address~uint256_FLAMA__success(this, msgsender_MSG, msgvalue_MSG, from_s416, to_s416, value_s416);
[L745]               assume !revert && gas >= 0;
[L2527]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_FLAMA(this, msgsender_MSG, msgvalue_MSG, from_s416, to_s416, value_s416);
[L2590]  RET         call CorralChoice_FLAMA(this);

Loop:
[L2590]  CALL        call CorralChoice_FLAMA(this);
[L2446]              havoc msgsender_MSG;
[L2447]              havoc msgvalue_MSG;
[L2448]              havoc choice;
[L2449]              havoc __ret_0_totalSupply;
[L2450]              havoc owner_s308;
[L2451]              havoc __ret_0_balanceOf;
[L2452]              havoc owner_s324;
[L2453]              havoc spender_s324;
[L2454]              havoc __ret_0_allowance;
[L2455]              havoc to_s343;
[L2456]              havoc value_s343;
[L2457]              havoc __ret_0_transfer;
[L2458]              havoc spender_s379;
[L2459]              havoc value_s379;
[L2460]              havoc __ret_0_approve;
[L2461]              havoc from_s416;
[L2462]              havoc to_s416;
[L2463]              havoc value_s416;
[L2464]              havoc __ret_0_transferFrom;
[L2465]              havoc value_s229;
[L2466]              havoc name_s264;
[L2467]              havoc symbol_s264;
[L2468]              havoc decimals_s264;
[L2469]              havoc totalSupply_s264;
[L2470]              havoc __ret_0_name;
[L2471]              havoc __ret_0_symbol;
[L2472]              havoc __ret_0_decimals;
[L2473]              havoc spender_s466;
[L2474]              havoc addedValue_s466;
[L2475]              havoc __ret_0_increaseAllowance;
[L2476]              havoc spender_s516;
[L2477]              havoc subtractedValue_s516;
[L2478]              havoc __ret_0_decreaseAllowance;
[L2479]              havoc tmpNow;
[L2480]              havoc gas;
[L2481]              assume gas > 4000000 && gas <= 8000000;
[L2482]              tmpNow := now;
[L2483]              havoc now;
[L2484]              assume now > tmpNow;
[L2485]              assume msgsender_MSG != null;
[L2486]              assume DType[msgsender_MSG] != SafeMath;
[L2487]              assume DType[msgsender_MSG] != IERC20;
[L2488]              assume DType[msgsender_MSG] != FLAMA;
[L2489]              Alloc[msgsender_MSG] := true;
[L2490]  COND FALSE  !(choice == 12)
[L2496]  COND FALSE  !(choice == 11)
[L2502]  COND FALSE  !(choice == 10)
[L2508]  COND FALSE  !(choice == 9)
[L2515]  COND FALSE  !(choice == 8)
[L2522]  COND TRUE   choice == 7
[L2523]              gas := gas - 21000;
[L2524]  COND TRUE   gas >= 0
[L2525]              assume value_s416 >= 0 && value_s416 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2526]              assume msgvalue_MSG == 0;
[L2527]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_FLAMA(this, msgsender_MSG, msgvalue_MSG, from_s416, to_s416, value_s416);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((((from_s416 != to_s416 && ((value_s416 > _balances_FLAMA[this][from_s416] || value_s416 > _allowed_FLAMA[this][from_s416][msgsender_MSG]) || _balances_FLAMA[this][to_s416] + value_s416 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && value_s416 >= 0) && value_s416 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_FLAMA[this][to_s416] >= 0) && _balances_FLAMA[this][to_s416] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_FLAMA[this][from_s416] >= 0) && _balances_FLAMA[this][from_s416] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowed_FLAMA[this][from_s416][msgsender_MSG] >= 0) && _allowed_FLAMA[this][from_s416][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transferFrom_FLAMA0 := true;
[L2]                 call_transferFrom_FLAMA0 := false;
[L2]                 revert := revert_hold;
[L721]               havoc __exception;
[L722]               revert := false;
[L723]   COND FALSE  !(__exception)
[L744]   CALL        call __ret_0_ := transferFrom~address~address~uint256_FLAMA__success(this, msgsender_MSG, msgvalue_MSG, from_s416, to_s416, value_s416);
[L1606]  CALL        call __var_2 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowed_FLAMA[this][from_s416][msgsender_MSG], value_s416);
[L1291]  COND FALSE  !(!(b_s82 <= a_s82))
[L1295]              c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1296]              __ret_0_ := c_s82;
[L1606]  RET         call __var_2 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowed_FLAMA[this][from_s416][msgsender_MSG], value_s416);
[L1607]  COND FALSE  !(revert)
[L1610]              sum__allowed1[from_s416] := sum__allowed1[from_s416] - _allowed_FLAMA[this][from_s416][msgsender_MSG];
[L1611]              _allowed_FLAMA[this][from_s416][msgsender_MSG] := __var_2;
[L1612]              sum__allowed1[from_s416] := sum__allowed1[from_s416] + _allowed_FLAMA[this][from_s416][msgsender_MSG];
[L1613]  CALL        call _transfer~address~address~uint256_FLAMA__success(this, msgsender_MSG, msgvalue_MSG, from_s416, to_s416, value_s416);
[L1762]              __var_7 := null;
[L1763]  COND FALSE  !(!(to_s598 != null))
[L1767]  CALL        call onePercent_s598 := div~uint256~uint256_SafeMath__success(this, this, 0, value_s598, 100);
[L1267]  COND FALSE  !(!(b_s58 > 0))
[L1271]              c_s58 := nonlinearDiv(a_s58, b_s58) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1272]              __ret_0_ := c_s58;
[L1767]  RET         call onePercent_s598 := div~uint256~uint256_SafeMath__success(this, this, 0, value_s598, 100);
[L1768]  COND FALSE  !(revert)
[L1771]              onePercent_s598 := onePercent_s598;
[L1772]  CALL        call burnAmount_s598 := mul~uint256~uint256_SafeMath__success(this, this, 0, onePercent_s598, 3);
[L1239]  COND TRUE   a_s34 == 0
[L1240]              __ret_0_ := 0;
[L1772]  RET         call burnAmount_s598 := mul~uint256~uint256_SafeMath__success(this, this, 0, onePercent_s598, 3);
[L1773]  COND FALSE  !(revert)
[L1776]              burnAmount_s598 := burnAmount_s598;
[L1777]  CALL        call newTransferAmount_s598 := sub~uint256~uint256_SafeMath__success(this, this, 0, value_s598, burnAmount_s598);
[L1291]  COND FALSE  !(!(b_s82 <= a_s82))
[L1295]              c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1296]              __ret_0_ := c_s82;
[L1777]  RET         call newTransferAmount_s598 := sub~uint256~uint256_SafeMath__success(this, this, 0, value_s598, burnAmount_s598);
[L1778]  COND FALSE  !(revert)
[L1781]              newTransferAmount_s598 := newTransferAmount_s598;
[L1782]  CALL        call __var_8 := sub~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_FLAMA[this], burnAmount_s598);
[L1291]  COND FALSE  !(!(b_s82 <= a_s82))
[L1295]              c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1296]              __ret_0_ := c_s82;
[L1782]  RET         call __var_8 := sub~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_FLAMA[this], burnAmount_s598);
[L1783]  COND FALSE  !(revert)
[L1786]              _totalSupply_FLAMA[this] := __var_8;
[L1787]  CALL        call __var_9 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_FLAMA[this][from_s598], value_s598);
[L1291]  COND FALSE  !(!(b_s82 <= a_s82))
[L1295]              c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1296]              __ret_0_ := c_s82;
[L1787]  RET         call __var_9 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_FLAMA[this][from_s598], value_s598);
[L1788]  COND FALSE  !(revert)
[L1791]              sum__balances0[this] := sum__balances0[this] - _balances_FLAMA[this][from_s598];
[L1792]              _balances_FLAMA[this][from_s598] := __var_9;
[L1793]              sum__balances0[this] := sum__balances0[this] + _balances_FLAMA[this][from_s598];
[L1794]  CALL        call __var_10 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_FLAMA[this][to_s598], newTransferAmount_s598);
[L1315]              c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1316]  COND FALSE  !(!(c_s106 >= a_s106))
[L1320]              __ret_0_ := c_s106;
[L1794]  RET         call __var_10 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_FLAMA[this][to_s598], newTransferAmount_s598);
[L1795]  COND FALSE  !(revert)
[L1798]              sum__balances0[this] := sum__balances0[this] - _balances_FLAMA[this][to_s598];
[L1799]              _balances_FLAMA[this][to_s598] := __var_10;
[L1800]              sum__balances0[this] := sum__balances0[this] + _balances_FLAMA[this][to_s598];
[L1801]              assert { :EventEmitted "Transfer_FLAMA" } true;
[L1802]              assert { :EventEmitted "Transfer_FLAMA" } true;
[L1613]  RET         call _transfer~address~address~uint256_FLAMA__success(this, msgsender_MSG, msgvalue_MSG, from_s416, to_s416, value_s416);
[L1614]  COND FALSE  !(revert)
[L1617]              __ret_0_ := true;
[L744]   RET         call __ret_0_ := transferFrom~address~address~uint256_FLAMA__success(this, msgsender_MSG, msgvalue_MSG, from_s416, to_s416, value_s416);
[L745]               assume !revert && gas >= 0;
[L2527]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_FLAMA(this, msgsender_MSG, msgvalue_MSG, from_s416, to_s416, value_s416);
[L2590]  RET         call CorralChoice_FLAMA(this);

[2020-11-25 16:33:09,195 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 16:33:09,195 INFO  L82        PathProgramCache]: Analyzing trace with hash 207875249, now seen corresponding path program 1 times
[2020-11-25 16:33:09,196 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 16:33:09,209 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 16:33:09,370 INFO  L134       CoverageAnalysis]: Checked inductivity of 81 backedges. 8 proven. 8 refuted. 0 times theorem prover too weak. 65 trivial. 0 not checked.
[2020-11-25 16:33:09,370 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 16:33:09,370 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [17] total 17
[2020-11-25 16:33:09,371 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 16:33:09,371 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 18 interpolants.
[2020-11-25 16:33:09,371 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=41, Invalid=265, Unknown=0, NotChecked=0, Total=306
[2020-11-25 16:33:09,371 INFO  L87              Difference]: Start difference. First operand 1812 states and 1960 transitions. cyclomatic complexity: 151 Second operand 18 states.
[2020-11-25 16:33:10,885 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 16:33:10,885 INFO  L93              Difference]: Finished difference Result 1872 states and 2031 transitions.
[2020-11-25 16:33:10,886 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 18 states. 
[2020-11-25 16:33:10,887 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 1872 states and 2031 transitions.
[2020-11-25 16:33:10,901 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 16:33:10,909 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 1872 states to 1872 states and 2031 transitions.
[2020-11-25 16:33:10,909 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 577
[2020-11-25 16:33:10,910 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 577
[2020-11-25 16:33:10,910 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 1872 states and 2031 transitions.
[2020-11-25 16:33:10,914 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 16:33:10,914 INFO  L728         BuchiCegarLoop]: Abstraction has 1872 states and 2031 transitions.
[2020-11-25 16:33:10,916 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 1872 states and 2031 transitions.
[2020-11-25 16:33:10,941 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 1872 to 1826.
[2020-11-25 16:33:10,941 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 1826 states.
[2020-11-25 16:33:10,945 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 1826 states to 1826 states and 1984 transitions.
[2020-11-25 16:33:10,945 INFO  L751         BuchiCegarLoop]: Abstraction has 1826 states and 1984 transitions.
[2020-11-25 16:33:10,945 INFO  L631         BuchiCegarLoop]: Abstraction has 1826 states and 1984 transitions.
[2020-11-25 16:33:10,945 INFO  L445         BuchiCegarLoop]: ======== Iteration 6============
[2020-11-25 16:33:10,945 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 1826 states and 1984 transitions.
[2020-11-25 16:33:10,950 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 16:33:10,950 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 16:33:10,951 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 16:33:10,954 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 16:33:10,954 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [4, 4, 4, 4, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transferFrom_FLAMA0 := false;
[L2]                 call_transferFrom_FLAMA0 := false;
[L2]     CALL        call main();
[L2580]              assume null == 0;
[L2581]  CALL        call this := FreshRefGenerator__success();
[L1182]              havoc newRef;
[L1183]              assume Alloc[newRef] == false;
[L1184]              Alloc[newRef] := true;
[L1185]              assume newRef != null;
[L2581]  RET         call this := FreshRefGenerator__success();
[L2582]              assume now >= 0;
[L2583]              assume DType[this] == FLAMA;
[L2584]              assume msgvalue_MSG == 0;
[L2585]              gas := gas - 53000;
[L2586]  CALL        call FLAMA_FLAMA(this, msgsender_MSG, msgvalue_MSG, name_s264, symbol_s264, decimals_s264, totalSupply_s264);
[L261]               havoc __exception;
[L262]               revert := false;
[L263]   COND FALSE  !(__exception)
[L284]   CALL        call FLAMA_FLAMA__success(this, msgsender_MSG, msgvalue_MSG, name_s264, symbol_s264, decimals_s264, totalSupply_s264);
[L1452]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1370]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1355]              assume msgsender_MSG != null;
[L1356]              Balance[this] := 0;
[L1370]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1371]  COND FALSE  !(revert)
[L1452]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1453]  COND FALSE  !(revert)
[L1456]  CALL        call FLAMA_FLAMA_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s264, symbol_s264, decimals_s264, totalSupply_s264);
[L1418]              assume msgsender_MSG != null;
[L1419]              Balance[this] := 0;
[L1420]              _name_FLAMA[this] := 965843050;
[L1421]              _symbol_FLAMA[this] := 965843050;
[L1422]              _decimals_FLAMA[this] := 0;
[L1423]              _totalSupply_FLAMA[this] := 0;
[L1424]              _balances_FLAMA[this] := zeroRefintArr();
[L1425]              sum__balances0[this] := 0;
[L1426]              _allowed_FLAMA[this] := zeroRefRefintArr();
[L1427]              sum__allowed1[this] := 0;
[L1429]              _name_FLAMA[this] := name_s264;
[L1430]              _symbol_FLAMA[this] := symbol_s264;
[L1431]              _decimals_FLAMA[this] := decimals_s264;
[L1432]              _totalSupply_FLAMA[this] := totalSupply_s264;
[L1433]              sum__balances0[this] := sum__balances0[this] - _balances_FLAMA[this][msgsender_MSG];
[L1434]              _balances_FLAMA[this][msgsender_MSG] := _totalSupply_FLAMA[this];
[L1435]              sum__balances0[this] := sum__balances0[this] + _balances_FLAMA[this][msgsender_MSG];
[L1456]  RET         call FLAMA_FLAMA_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s264, symbol_s264, decimals_s264, totalSupply_s264);
[L1457]  COND FALSE  !(revert)
[L284]   RET         call FLAMA_FLAMA__success(this, msgsender_MSG, msgvalue_MSG, name_s264, symbol_s264, decimals_s264, totalSupply_s264);
[L285]               assume !revert && gas >= 0;
[L2586]  RET         call FLAMA_FLAMA(this, msgsender_MSG, msgvalue_MSG, name_s264, symbol_s264, decimals_s264, totalSupply_s264);
[L2587]              assume !revert && gas >= 0;
[L2590]  CALL        call CorralChoice_FLAMA(this);
[L2446]              havoc msgsender_MSG;
[L2447]              havoc msgvalue_MSG;
[L2448]              havoc choice;
[L2449]              havoc __ret_0_totalSupply;
[L2450]              havoc owner_s308;
[L2451]              havoc __ret_0_balanceOf;
[L2452]              havoc owner_s324;
[L2453]              havoc spender_s324;
[L2454]              havoc __ret_0_allowance;
[L2455]              havoc to_s343;
[L2456]              havoc value_s343;
[L2457]              havoc __ret_0_transfer;
[L2458]              havoc spender_s379;
[L2459]              havoc value_s379;
[L2460]              havoc __ret_0_approve;
[L2461]              havoc from_s416;
[L2462]              havoc to_s416;
[L2463]              havoc value_s416;
[L2464]              havoc __ret_0_transferFrom;
[L2465]              havoc value_s229;
[L2466]              havoc name_s264;
[L2467]              havoc symbol_s264;
[L2468]              havoc decimals_s264;
[L2469]              havoc totalSupply_s264;
[L2470]              havoc __ret_0_name;
[L2471]              havoc __ret_0_symbol;
[L2472]              havoc __ret_0_decimals;
[L2473]              havoc spender_s466;
[L2474]              havoc addedValue_s466;
[L2475]              havoc __ret_0_increaseAllowance;
[L2476]              havoc spender_s516;
[L2477]              havoc subtractedValue_s516;
[L2478]              havoc __ret_0_decreaseAllowance;
[L2479]              havoc tmpNow;
[L2480]              havoc gas;
[L2481]              assume gas > 4000000 && gas <= 8000000;
[L2482]              tmpNow := now;
[L2483]              havoc now;
[L2484]              assume now > tmpNow;
[L2485]              assume msgsender_MSG != null;
[L2486]              assume DType[msgsender_MSG] != SafeMath;
[L2487]              assume DType[msgsender_MSG] != IERC20;
[L2488]              assume DType[msgsender_MSG] != FLAMA;
[L2489]              Alloc[msgsender_MSG] := true;
[L2490]  COND FALSE  !(choice == 12)
[L2496]  COND FALSE  !(choice == 11)
[L2502]  COND FALSE  !(choice == 10)
[L2508]  COND FALSE  !(choice == 9)
[L2515]  COND FALSE  !(choice == 8)
[L2522]  COND TRUE   choice == 7
[L2523]              gas := gas - 21000;
[L2524]  COND TRUE   gas >= 0
[L2525]              assume value_s416 >= 0 && value_s416 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2526]              assume msgvalue_MSG == 0;
[L2527]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_FLAMA(this, msgsender_MSG, msgvalue_MSG, from_s416, to_s416, value_s416);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((((from_s416 != to_s416 && ((value_s416 > _balances_FLAMA[this][from_s416] || value_s416 > _allowed_FLAMA[this][from_s416][msgsender_MSG]) || _balances_FLAMA[this][to_s416] + value_s416 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && value_s416 >= 0) && value_s416 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_FLAMA[this][to_s416] >= 0) && _balances_FLAMA[this][to_s416] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_FLAMA[this][from_s416] >= 0) && _balances_FLAMA[this][from_s416] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowed_FLAMA[this][from_s416][msgsender_MSG] >= 0) && _allowed_FLAMA[this][from_s416][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2]                 revert := revert_hold;
[L721]               havoc __exception;
[L722]               revert := false;
[L723]   COND FALSE  !(__exception)
[L744]   CALL        call __ret_0_ := transferFrom~address~address~uint256_FLAMA__success(this, msgsender_MSG, msgvalue_MSG, from_s416, to_s416, value_s416);
[L1606]  CALL        call __var_2 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowed_FLAMA[this][from_s416][msgsender_MSG], value_s416);
[L1291]  COND FALSE  !(!(b_s82 <= a_s82))
[L1295]              c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1296]              __ret_0_ := c_s82;
[L1606]  RET         call __var_2 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowed_FLAMA[this][from_s416][msgsender_MSG], value_s416);
[L1607]  COND FALSE  !(revert)
[L1610]              sum__allowed1[from_s416] := sum__allowed1[from_s416] - _allowed_FLAMA[this][from_s416][msgsender_MSG];
[L1611]              _allowed_FLAMA[this][from_s416][msgsender_MSG] := __var_2;
[L1612]              sum__allowed1[from_s416] := sum__allowed1[from_s416] + _allowed_FLAMA[this][from_s416][msgsender_MSG];
[L1613]  CALL        call _transfer~address~address~uint256_FLAMA__success(this, msgsender_MSG, msgvalue_MSG, from_s416, to_s416, value_s416);
[L1762]              __var_7 := null;
[L1763]  COND FALSE  !(!(to_s598 != null))
[L1767]  CALL        call onePercent_s598 := div~uint256~uint256_SafeMath__success(this, this, 0, value_s598, 100);
[L1267]  COND FALSE  !(!(b_s58 > 0))
[L1271]              c_s58 := nonlinearDiv(a_s58, b_s58) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1272]              __ret_0_ := c_s58;
[L1767]  RET         call onePercent_s598 := div~uint256~uint256_SafeMath__success(this, this, 0, value_s598, 100);
[L1768]  COND FALSE  !(revert)
[L1771]              onePercent_s598 := onePercent_s598;
[L1772]  CALL        call burnAmount_s598 := mul~uint256~uint256_SafeMath__success(this, this, 0, onePercent_s598, 3);
[L1239]  COND TRUE   a_s34 == 0
[L1240]              __ret_0_ := 0;
[L1772]  RET         call burnAmount_s598 := mul~uint256~uint256_SafeMath__success(this, this, 0, onePercent_s598, 3);
[L1773]  COND FALSE  !(revert)
[L1776]              burnAmount_s598 := burnAmount_s598;
[L1777]  CALL        call newTransferAmount_s598 := sub~uint256~uint256_SafeMath__success(this, this, 0, value_s598, burnAmount_s598);
[L1291]  COND FALSE  !(!(b_s82 <= a_s82))
[L1295]              c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1296]              __ret_0_ := c_s82;
[L1777]  RET         call newTransferAmount_s598 := sub~uint256~uint256_SafeMath__success(this, this, 0, value_s598, burnAmount_s598);
[L1778]  COND FALSE  !(revert)
[L1781]              newTransferAmount_s598 := newTransferAmount_s598;
[L1782]  CALL        call __var_8 := sub~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_FLAMA[this], burnAmount_s598);
[L1291]  COND FALSE  !(!(b_s82 <= a_s82))
[L1295]              c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1296]              __ret_0_ := c_s82;
[L1782]  RET         call __var_8 := sub~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_FLAMA[this], burnAmount_s598);
[L1783]  COND FALSE  !(revert)
[L1786]              _totalSupply_FLAMA[this] := __var_8;
[L1787]  CALL        call __var_9 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_FLAMA[this][from_s598], value_s598);
[L1291]  COND FALSE  !(!(b_s82 <= a_s82))
[L1295]              c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1296]              __ret_0_ := c_s82;
[L1787]  RET         call __var_9 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_FLAMA[this][from_s598], value_s598);
[L1788]  COND FALSE  !(revert)
[L1791]              sum__balances0[this] := sum__balances0[this] - _balances_FLAMA[this][from_s598];
[L1792]              _balances_FLAMA[this][from_s598] := __var_9;
[L1793]              sum__balances0[this] := sum__balances0[this] + _balances_FLAMA[this][from_s598];
[L1794]  CALL        call __var_10 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_FLAMA[this][to_s598], newTransferAmount_s598);
[L1315]              c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1316]  COND FALSE  !(!(c_s106 >= a_s106))
[L1320]              __ret_0_ := c_s106;
[L1794]  RET         call __var_10 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_FLAMA[this][to_s598], newTransferAmount_s598);
[L1795]  COND FALSE  !(revert)
[L1798]              sum__balances0[this] := sum__balances0[this] - _balances_FLAMA[this][to_s598];
[L1799]              _balances_FLAMA[this][to_s598] := __var_10;
[L1800]              sum__balances0[this] := sum__balances0[this] + _balances_FLAMA[this][to_s598];
[L1801]              assert { :EventEmitted "Transfer_FLAMA" } true;
[L1802]              assert { :EventEmitted "Transfer_FLAMA" } true;
[L1613]  RET         call _transfer~address~address~uint256_FLAMA__success(this, msgsender_MSG, msgvalue_MSG, from_s416, to_s416, value_s416);
[L1614]  COND FALSE  !(revert)
[L1617]              __ret_0_ := true;
[L744]   RET         call __ret_0_ := transferFrom~address~address~uint256_FLAMA__success(this, msgsender_MSG, msgvalue_MSG, from_s416, to_s416, value_s416);
[L745]               assume !revert && gas >= 0;
[L2527]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_FLAMA(this, msgsender_MSG, msgvalue_MSG, from_s416, to_s416, value_s416);
[L2590]  RET         call CorralChoice_FLAMA(this);
[L2590]  CALL        call CorralChoice_FLAMA(this);
[L2446]              havoc msgsender_MSG;
[L2447]              havoc msgvalue_MSG;
[L2448]              havoc choice;
[L2449]              havoc __ret_0_totalSupply;
[L2450]              havoc owner_s308;
[L2451]              havoc __ret_0_balanceOf;
[L2452]              havoc owner_s324;
[L2453]              havoc spender_s324;
[L2454]              havoc __ret_0_allowance;
[L2455]              havoc to_s343;
[L2456]              havoc value_s343;
[L2457]              havoc __ret_0_transfer;
[L2458]              havoc spender_s379;
[L2459]              havoc value_s379;
[L2460]              havoc __ret_0_approve;
[L2461]              havoc from_s416;
[L2462]              havoc to_s416;
[L2463]              havoc value_s416;
[L2464]              havoc __ret_0_transferFrom;
[L2465]              havoc value_s229;
[L2466]              havoc name_s264;
[L2467]              havoc symbol_s264;
[L2468]              havoc decimals_s264;
[L2469]              havoc totalSupply_s264;
[L2470]              havoc __ret_0_name;
[L2471]              havoc __ret_0_symbol;
[L2472]              havoc __ret_0_decimals;
[L2473]              havoc spender_s466;
[L2474]              havoc addedValue_s466;
[L2475]              havoc __ret_0_increaseAllowance;
[L2476]              havoc spender_s516;
[L2477]              havoc subtractedValue_s516;
[L2478]              havoc __ret_0_decreaseAllowance;
[L2479]              havoc tmpNow;
[L2480]              havoc gas;
[L2481]              assume gas > 4000000 && gas <= 8000000;
[L2482]              tmpNow := now;
[L2483]              havoc now;
[L2484]              assume now > tmpNow;
[L2485]              assume msgsender_MSG != null;
[L2486]              assume DType[msgsender_MSG] != SafeMath;
[L2487]              assume DType[msgsender_MSG] != IERC20;
[L2488]              assume DType[msgsender_MSG] != FLAMA;
[L2489]              Alloc[msgsender_MSG] := true;
[L2490]  COND FALSE  !(choice == 12)
[L2496]  COND FALSE  !(choice == 11)
[L2502]  COND FALSE  !(choice == 10)
[L2508]  COND FALSE  !(choice == 9)
[L2515]  COND FALSE  !(choice == 8)
[L2522]  COND TRUE   choice == 7
[L2523]              gas := gas - 21000;
[L2524]  COND TRUE   gas >= 0
[L2525]              assume value_s416 >= 0 && value_s416 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2526]              assume msgvalue_MSG == 0;
[L2527]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_FLAMA(this, msgsender_MSG, msgvalue_MSG, from_s416, to_s416, value_s416);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((((from_s416 != to_s416 && ((value_s416 > _balances_FLAMA[this][from_s416] || value_s416 > _allowed_FLAMA[this][from_s416][msgsender_MSG]) || _balances_FLAMA[this][to_s416] + value_s416 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && value_s416 >= 0) && value_s416 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_FLAMA[this][to_s416] >= 0) && _balances_FLAMA[this][to_s416] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_FLAMA[this][from_s416] >= 0) && _balances_FLAMA[this][from_s416] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowed_FLAMA[this][from_s416][msgsender_MSG] >= 0) && _allowed_FLAMA[this][from_s416][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transferFrom_FLAMA0 := true;
[L2]                 call_transferFrom_FLAMA0 := false;
[L2]                 revert := revert_hold;
[L721]               havoc __exception;
[L722]               revert := false;
[L723]   COND FALSE  !(__exception)
[L744]   CALL        call __ret_0_ := transferFrom~address~address~uint256_FLAMA__success(this, msgsender_MSG, msgvalue_MSG, from_s416, to_s416, value_s416);
[L1606]  CALL        call __var_2 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowed_FLAMA[this][from_s416][msgsender_MSG], value_s416);
[L1291]  COND FALSE  !(!(b_s82 <= a_s82))
[L1295]              c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1296]              __ret_0_ := c_s82;
[L1606]  RET         call __var_2 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowed_FLAMA[this][from_s416][msgsender_MSG], value_s416);
[L1607]  COND FALSE  !(revert)
[L1610]              sum__allowed1[from_s416] := sum__allowed1[from_s416] - _allowed_FLAMA[this][from_s416][msgsender_MSG];
[L1611]              _allowed_FLAMA[this][from_s416][msgsender_MSG] := __var_2;
[L1612]              sum__allowed1[from_s416] := sum__allowed1[from_s416] + _allowed_FLAMA[this][from_s416][msgsender_MSG];
[L1613]  CALL        call _transfer~address~address~uint256_FLAMA__success(this, msgsender_MSG, msgvalue_MSG, from_s416, to_s416, value_s416);
[L1762]              __var_7 := null;
[L1763]  COND FALSE  !(!(to_s598 != null))
[L1767]  CALL        call onePercent_s598 := div~uint256~uint256_SafeMath__success(this, this, 0, value_s598, 100);
[L1267]  COND FALSE  !(!(b_s58 > 0))
[L1271]              c_s58 := nonlinearDiv(a_s58, b_s58) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1272]              __ret_0_ := c_s58;
[L1767]  RET         call onePercent_s598 := div~uint256~uint256_SafeMath__success(this, this, 0, value_s598, 100);
[L1768]  COND FALSE  !(revert)
[L1771]              onePercent_s598 := onePercent_s598;
[L1772]  CALL        call burnAmount_s598 := mul~uint256~uint256_SafeMath__success(this, this, 0, onePercent_s598, 3);
[L1239]  COND TRUE   a_s34 == 0
[L1240]              __ret_0_ := 0;
[L1772]  RET         call burnAmount_s598 := mul~uint256~uint256_SafeMath__success(this, this, 0, onePercent_s598, 3);
[L1773]  COND FALSE  !(revert)
[L1776]              burnAmount_s598 := burnAmount_s598;
[L1777]  CALL        call newTransferAmount_s598 := sub~uint256~uint256_SafeMath__success(this, this, 0, value_s598, burnAmount_s598);
[L1291]  COND FALSE  !(!(b_s82 <= a_s82))
[L1295]              c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1296]              __ret_0_ := c_s82;
[L1777]  RET         call newTransferAmount_s598 := sub~uint256~uint256_SafeMath__success(this, this, 0, value_s598, burnAmount_s598);
[L1778]  COND FALSE  !(revert)
[L1781]              newTransferAmount_s598 := newTransferAmount_s598;
[L1782]  CALL        call __var_8 := sub~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_FLAMA[this], burnAmount_s598);
[L1291]  COND FALSE  !(!(b_s82 <= a_s82))
[L1295]              c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1296]              __ret_0_ := c_s82;
[L1782]  RET         call __var_8 := sub~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_FLAMA[this], burnAmount_s598);
[L1783]  COND FALSE  !(revert)
[L1786]              _totalSupply_FLAMA[this] := __var_8;
[L1787]  CALL        call __var_9 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_FLAMA[this][from_s598], value_s598);
[L1291]  COND FALSE  !(!(b_s82 <= a_s82))
[L1295]              c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1296]              __ret_0_ := c_s82;
[L1787]  RET         call __var_9 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_FLAMA[this][from_s598], value_s598);
[L1788]  COND FALSE  !(revert)
[L1791]              sum__balances0[this] := sum__balances0[this] - _balances_FLAMA[this][from_s598];
[L1792]              _balances_FLAMA[this][from_s598] := __var_9;
[L1793]              sum__balances0[this] := sum__balances0[this] + _balances_FLAMA[this][from_s598];
[L1794]  CALL        call __var_10 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_FLAMA[this][to_s598], newTransferAmount_s598);
[L1315]              c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1316]  COND FALSE  !(!(c_s106 >= a_s106))
[L1320]              __ret_0_ := c_s106;
[L1794]  RET         call __var_10 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_FLAMA[this][to_s598], newTransferAmount_s598);
[L1795]  COND FALSE  !(revert)
[L1798]              sum__balances0[this] := sum__balances0[this] - _balances_FLAMA[this][to_s598];
[L1799]              _balances_FLAMA[this][to_s598] := __var_10;
[L1800]              sum__balances0[this] := sum__balances0[this] + _balances_FLAMA[this][to_s598];
[L1801]              assert { :EventEmitted "Transfer_FLAMA" } true;
[L1802]              assert { :EventEmitted "Transfer_FLAMA" } true;
[L1613]  RET         call _transfer~address~address~uint256_FLAMA__success(this, msgsender_MSG, msgvalue_MSG, from_s416, to_s416, value_s416);
[L1614]  COND FALSE  !(revert)
[L1617]              __ret_0_ := true;
[L744]   RET         call __ret_0_ := transferFrom~address~address~uint256_FLAMA__success(this, msgsender_MSG, msgvalue_MSG, from_s416, to_s416, value_s416);
[L745]               assume !revert && gas >= 0;
[L2527]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_FLAMA(this, msgsender_MSG, msgvalue_MSG, from_s416, to_s416, value_s416);
[L2590]  RET         call CorralChoice_FLAMA(this);

Loop:
[L2590]  CALL        call CorralChoice_FLAMA(this);
[L2446]              havoc msgsender_MSG;
[L2447]              havoc msgvalue_MSG;
[L2448]              havoc choice;
[L2449]              havoc __ret_0_totalSupply;
[L2450]              havoc owner_s308;
[L2451]              havoc __ret_0_balanceOf;
[L2452]              havoc owner_s324;
[L2453]              havoc spender_s324;
[L2454]              havoc __ret_0_allowance;
[L2455]              havoc to_s343;
[L2456]              havoc value_s343;
[L2457]              havoc __ret_0_transfer;
[L2458]              havoc spender_s379;
[L2459]              havoc value_s379;
[L2460]              havoc __ret_0_approve;
[L2461]              havoc from_s416;
[L2462]              havoc to_s416;
[L2463]              havoc value_s416;
[L2464]              havoc __ret_0_transferFrom;
[L2465]              havoc value_s229;
[L2466]              havoc name_s264;
[L2467]              havoc symbol_s264;
[L2468]              havoc decimals_s264;
[L2469]              havoc totalSupply_s264;
[L2470]              havoc __ret_0_name;
[L2471]              havoc __ret_0_symbol;
[L2472]              havoc __ret_0_decimals;
[L2473]              havoc spender_s466;
[L2474]              havoc addedValue_s466;
[L2475]              havoc __ret_0_increaseAllowance;
[L2476]              havoc spender_s516;
[L2477]              havoc subtractedValue_s516;
[L2478]              havoc __ret_0_decreaseAllowance;
[L2479]              havoc tmpNow;
[L2480]              havoc gas;
[L2481]              assume gas > 4000000 && gas <= 8000000;
[L2482]              tmpNow := now;
[L2483]              havoc now;
[L2484]              assume now > tmpNow;
[L2485]              assume msgsender_MSG != null;
[L2486]              assume DType[msgsender_MSG] != SafeMath;
[L2487]              assume DType[msgsender_MSG] != IERC20;
[L2488]              assume DType[msgsender_MSG] != FLAMA;
[L2489]              Alloc[msgsender_MSG] := true;
[L2490]  COND FALSE  !(choice == 12)
[L2496]  COND FALSE  !(choice == 11)
[L2502]  COND FALSE  !(choice == 10)
[L2508]  COND FALSE  !(choice == 9)
[L2515]  COND FALSE  !(choice == 8)
[L2522]  COND TRUE   choice == 7
[L2523]              gas := gas - 21000;
[L2524]  COND TRUE   gas >= 0
[L2525]              assume value_s416 >= 0 && value_s416 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2526]              assume msgvalue_MSG == 0;
[L2527]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_FLAMA(this, msgsender_MSG, msgvalue_MSG, from_s416, to_s416, value_s416);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((((from_s416 != to_s416 && ((value_s416 > _balances_FLAMA[this][from_s416] || value_s416 > _allowed_FLAMA[this][from_s416][msgsender_MSG]) || _balances_FLAMA[this][to_s416] + value_s416 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && value_s416 >= 0) && value_s416 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_FLAMA[this][to_s416] >= 0) && _balances_FLAMA[this][to_s416] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_FLAMA[this][from_s416] >= 0) && _balances_FLAMA[this][from_s416] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowed_FLAMA[this][from_s416][msgsender_MSG] >= 0) && _allowed_FLAMA[this][from_s416][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transferFrom_FLAMA0 := true;
[L2]                 call_transferFrom_FLAMA0 := false;
[L2]                 revert := revert_hold;
[L721]               havoc __exception;
[L722]               revert := false;
[L723]   COND FALSE  !(__exception)
[L744]   CALL        call __ret_0_ := transferFrom~address~address~uint256_FLAMA__success(this, msgsender_MSG, msgvalue_MSG, from_s416, to_s416, value_s416);
[L1606]  CALL        call __var_2 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowed_FLAMA[this][from_s416][msgsender_MSG], value_s416);
[L1291]  COND FALSE  !(!(b_s82 <= a_s82))
[L1295]              c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1296]              __ret_0_ := c_s82;
[L1606]  RET         call __var_2 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowed_FLAMA[this][from_s416][msgsender_MSG], value_s416);
[L1607]  COND FALSE  !(revert)
[L1610]              sum__allowed1[from_s416] := sum__allowed1[from_s416] - _allowed_FLAMA[this][from_s416][msgsender_MSG];
[L1611]              _allowed_FLAMA[this][from_s416][msgsender_MSG] := __var_2;
[L1612]              sum__allowed1[from_s416] := sum__allowed1[from_s416] + _allowed_FLAMA[this][from_s416][msgsender_MSG];
[L1613]  CALL        call _transfer~address~address~uint256_FLAMA__success(this, msgsender_MSG, msgvalue_MSG, from_s416, to_s416, value_s416);
[L1762]              __var_7 := null;
[L1763]  COND FALSE  !(!(to_s598 != null))
[L1767]  CALL        call onePercent_s598 := div~uint256~uint256_SafeMath__success(this, this, 0, value_s598, 100);
[L1267]  COND FALSE  !(!(b_s58 > 0))
[L1271]              c_s58 := nonlinearDiv(a_s58, b_s58) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1272]              __ret_0_ := c_s58;
[L1767]  RET         call onePercent_s598 := div~uint256~uint256_SafeMath__success(this, this, 0, value_s598, 100);
[L1768]  COND FALSE  !(revert)
[L1771]              onePercent_s598 := onePercent_s598;
[L1772]  CALL        call burnAmount_s598 := mul~uint256~uint256_SafeMath__success(this, this, 0, onePercent_s598, 3);
[L1239]  COND TRUE   a_s34 == 0
[L1240]              __ret_0_ := 0;
[L1772]  RET         call burnAmount_s598 := mul~uint256~uint256_SafeMath__success(this, this, 0, onePercent_s598, 3);
[L1773]  COND FALSE  !(revert)
[L1776]              burnAmount_s598 := burnAmount_s598;
[L1777]  CALL        call newTransferAmount_s598 := sub~uint256~uint256_SafeMath__success(this, this, 0, value_s598, burnAmount_s598);
[L1291]  COND FALSE  !(!(b_s82 <= a_s82))
[L1295]              c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1296]              __ret_0_ := c_s82;
[L1777]  RET         call newTransferAmount_s598 := sub~uint256~uint256_SafeMath__success(this, this, 0, value_s598, burnAmount_s598);
[L1778]  COND FALSE  !(revert)
[L1781]              newTransferAmount_s598 := newTransferAmount_s598;
[L1782]  CALL        call __var_8 := sub~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_FLAMA[this], burnAmount_s598);
[L1291]  COND FALSE  !(!(b_s82 <= a_s82))
[L1295]              c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1296]              __ret_0_ := c_s82;
[L1782]  RET         call __var_8 := sub~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_FLAMA[this], burnAmount_s598);
[L1783]  COND FALSE  !(revert)
[L1786]              _totalSupply_FLAMA[this] := __var_8;
[L1787]  CALL        call __var_9 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_FLAMA[this][from_s598], value_s598);
[L1291]  COND FALSE  !(!(b_s82 <= a_s82))
[L1295]              c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1296]              __ret_0_ := c_s82;
[L1787]  RET         call __var_9 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_FLAMA[this][from_s598], value_s598);
[L1788]  COND FALSE  !(revert)
[L1791]              sum__balances0[this] := sum__balances0[this] - _balances_FLAMA[this][from_s598];
[L1792]              _balances_FLAMA[this][from_s598] := __var_9;
[L1793]              sum__balances0[this] := sum__balances0[this] + _balances_FLAMA[this][from_s598];
[L1794]  CALL        call __var_10 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_FLAMA[this][to_s598], newTransferAmount_s598);
[L1315]              c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1316]  COND FALSE  !(!(c_s106 >= a_s106))
[L1320]              __ret_0_ := c_s106;
[L1794]  RET         call __var_10 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_FLAMA[this][to_s598], newTransferAmount_s598);
[L1795]  COND FALSE  !(revert)
[L1798]              sum__balances0[this] := sum__balances0[this] - _balances_FLAMA[this][to_s598];
[L1799]              _balances_FLAMA[this][to_s598] := __var_10;
[L1800]              sum__balances0[this] := sum__balances0[this] + _balances_FLAMA[this][to_s598];
[L1801]              assert { :EventEmitted "Transfer_FLAMA" } true;
[L1802]              assert { :EventEmitted "Transfer_FLAMA" } true;
[L1613]  RET         call _transfer~address~address~uint256_FLAMA__success(this, msgsender_MSG, msgvalue_MSG, from_s416, to_s416, value_s416);
[L1614]  COND FALSE  !(revert)
[L1617]              __ret_0_ := true;
[L744]   RET         call __ret_0_ := transferFrom~address~address~uint256_FLAMA__success(this, msgsender_MSG, msgvalue_MSG, from_s416, to_s416, value_s416);
[L745]               assume !revert && gas >= 0;
[L2527]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_FLAMA(this, msgsender_MSG, msgvalue_MSG, from_s416, to_s416, value_s416);
[L2590]  RET         call CorralChoice_FLAMA(this);

[2020-11-25 16:33:10,964 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 16:33:10,964 INFO  L82        PathProgramCache]: Analyzing trace with hash 249788137, now seen corresponding path program 1 times
[2020-11-25 16:33:10,965 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 16:33:11,032 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 16:33:11,360 INFO  L134       CoverageAnalysis]: Checked inductivity of 121 backedges. 8 proven. 23 refuted. 0 times theorem prover too weak. 90 trivial. 0 not checked.
[2020-11-25 16:33:11,360 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 16:33:11,360 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [26] total 26
[2020-11-25 16:33:11,360 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 16:33:11,361 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 27 interpolants.
[2020-11-25 16:33:11,361 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=75, Invalid=627, Unknown=0, NotChecked=0, Total=702
[2020-11-25 16:33:11,361 INFO  L87              Difference]: Start difference. First operand 1826 states and 1984 transitions. cyclomatic complexity: 163 Second operand 27 states.
[2020-11-25 16:33:14,316 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 16:33:14,316 INFO  L93              Difference]: Finished difference Result 1878 states and 2045 transitions.
[2020-11-25 16:33:14,317 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 24 states. 
[2020-11-25 16:33:14,317 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 1878 states and 2045 transitions.
[2020-11-25 16:33:14,319 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 16:33:14,323 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 1878 states to 1878 states and 2045 transitions.
[2020-11-25 16:33:14,323 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 579
[2020-11-25 16:33:14,323 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 579
[2020-11-25 16:33:14,323 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 1878 states and 2045 transitions.
[2020-11-25 16:33:14,325 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 16:33:14,325 INFO  L728         BuchiCegarLoop]: Abstraction has 1878 states and 2045 transitions.
[2020-11-25 16:33:14,326 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 1878 states and 2045 transitions.
[2020-11-25 16:33:14,336 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 1878 to 1828.
[2020-11-25 16:33:14,336 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 1828 states.
[2020-11-25 16:33:14,338 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 1828 states to 1828 states and 1990 transitions.
[2020-11-25 16:33:14,338 INFO  L751         BuchiCegarLoop]: Abstraction has 1828 states and 1990 transitions.
[2020-11-25 16:33:14,338 INFO  L631         BuchiCegarLoop]: Abstraction has 1828 states and 1990 transitions.
[2020-11-25 16:33:14,338 INFO  L445         BuchiCegarLoop]: ======== Iteration 7============
[2020-11-25 16:33:14,338 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 1828 states and 1990 transitions.
[2020-11-25 16:33:14,340 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 16:33:14,340 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 16:33:14,340 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 16:33:14,342 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 16:33:14,342 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transferFrom_FLAMA0 := false;
[L2]                 call_transferFrom_FLAMA0 := false;
[L2]     CALL        call main();
[L2580]              assume null == 0;
[L2581]  CALL        call this := FreshRefGenerator__success();
[L1182]              havoc newRef;
[L1183]              assume Alloc[newRef] == false;
[L1184]              Alloc[newRef] := true;
[L1185]              assume newRef != null;
[L2581]  RET         call this := FreshRefGenerator__success();
[L2582]              assume now >= 0;
[L2583]              assume DType[this] == FLAMA;
[L2584]              assume msgvalue_MSG == 0;
[L2585]              gas := gas - 53000;
[L2586]  CALL        call FLAMA_FLAMA(this, msgsender_MSG, msgvalue_MSG, name_s264, symbol_s264, decimals_s264, totalSupply_s264);
[L261]               havoc __exception;
[L262]               revert := false;
[L263]   COND FALSE  !(__exception)
[L284]   CALL        call FLAMA_FLAMA__success(this, msgsender_MSG, msgvalue_MSG, name_s264, symbol_s264, decimals_s264, totalSupply_s264);
[L1452]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1370]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1355]              assume msgsender_MSG != null;
[L1356]              Balance[this] := 0;
[L1370]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1371]  COND FALSE  !(revert)
[L1452]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1453]  COND FALSE  !(revert)
[L1456]  CALL        call FLAMA_FLAMA_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s264, symbol_s264, decimals_s264, totalSupply_s264);
[L1418]              assume msgsender_MSG != null;
[L1419]              Balance[this] := 0;
[L1420]              _name_FLAMA[this] := 965843050;
[L1421]              _symbol_FLAMA[this] := 965843050;
[L1422]              _decimals_FLAMA[this] := 0;
[L1423]              _totalSupply_FLAMA[this] := 0;
[L1424]              _balances_FLAMA[this] := zeroRefintArr();
[L1425]              sum__balances0[this] := 0;
[L1426]              _allowed_FLAMA[this] := zeroRefRefintArr();
[L1427]              sum__allowed1[this] := 0;
[L1429]              _name_FLAMA[this] := name_s264;
[L1430]              _symbol_FLAMA[this] := symbol_s264;
[L1431]              _decimals_FLAMA[this] := decimals_s264;
[L1432]              _totalSupply_FLAMA[this] := totalSupply_s264;
[L1433]              sum__balances0[this] := sum__balances0[this] - _balances_FLAMA[this][msgsender_MSG];
[L1434]              _balances_FLAMA[this][msgsender_MSG] := _totalSupply_FLAMA[this];
[L1435]              sum__balances0[this] := sum__balances0[this] + _balances_FLAMA[this][msgsender_MSG];
[L1456]  RET         call FLAMA_FLAMA_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s264, symbol_s264, decimals_s264, totalSupply_s264);
[L1457]  COND FALSE  !(revert)
[L284]   RET         call FLAMA_FLAMA__success(this, msgsender_MSG, msgvalue_MSG, name_s264, symbol_s264, decimals_s264, totalSupply_s264);
[L285]               assume !revert && gas >= 0;
[L2586]  RET         call FLAMA_FLAMA(this, msgsender_MSG, msgvalue_MSG, name_s264, symbol_s264, decimals_s264, totalSupply_s264);
[L2587]              assume !revert && gas >= 0;
[L2590]  CALL        call CorralChoice_FLAMA(this);
[L2446]              havoc msgsender_MSG;
[L2447]              havoc msgvalue_MSG;
[L2448]              havoc choice;
[L2449]              havoc __ret_0_totalSupply;
[L2450]              havoc owner_s308;
[L2451]              havoc __ret_0_balanceOf;
[L2452]              havoc owner_s324;
[L2453]              havoc spender_s324;
[L2454]              havoc __ret_0_allowance;
[L2455]              havoc to_s343;
[L2456]              havoc value_s343;
[L2457]              havoc __ret_0_transfer;
[L2458]              havoc spender_s379;
[L2459]              havoc value_s379;
[L2460]              havoc __ret_0_approve;
[L2461]              havoc from_s416;
[L2462]              havoc to_s416;
[L2463]              havoc value_s416;
[L2464]              havoc __ret_0_transferFrom;
[L2465]              havoc value_s229;
[L2466]              havoc name_s264;
[L2467]              havoc symbol_s264;
[L2468]              havoc decimals_s264;
[L2469]              havoc totalSupply_s264;
[L2470]              havoc __ret_0_name;
[L2471]              havoc __ret_0_symbol;
[L2472]              havoc __ret_0_decimals;
[L2473]              havoc spender_s466;
[L2474]              havoc addedValue_s466;
[L2475]              havoc __ret_0_increaseAllowance;
[L2476]              havoc spender_s516;
[L2477]              havoc subtractedValue_s516;
[L2478]              havoc __ret_0_decreaseAllowance;
[L2479]              havoc tmpNow;
[L2480]              havoc gas;
[L2481]              assume gas > 4000000 && gas <= 8000000;
[L2482]              tmpNow := now;
[L2483]              havoc now;
[L2484]              assume now > tmpNow;
[L2485]              assume msgsender_MSG != null;
[L2486]              assume DType[msgsender_MSG] != SafeMath;
[L2487]              assume DType[msgsender_MSG] != IERC20;
[L2488]              assume DType[msgsender_MSG] != FLAMA;
[L2489]              Alloc[msgsender_MSG] := true;
[L2490]  COND FALSE  !(choice == 12)
[L2496]  COND FALSE  !(choice == 11)
[L2502]  COND FALSE  !(choice == 10)
[L2508]  COND FALSE  !(choice == 9)
[L2515]  COND TRUE   choice == 8
[L2516]              gas := gas - 21000;
[L2517]  COND TRUE   gas >= 0
[L2518]              assume value_s379 >= 0 && value_s379 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2519]              assume msgvalue_MSG == 0;
[L2520]  CALL        call __ret_0_approve := approve~address~uint256_FLAMA(this, msgsender_MSG, msgvalue_MSG, spender_s379, value_s379);
[L666]               havoc __exception;
[L667]               revert := false;
[L668]   COND FALSE  !(__exception)
[L689]   CALL        call __ret_0_ := approve~address~uint256_FLAMA__success(this, msgsender_MSG, msgvalue_MSG, spender_s379, value_s379);
[L1572]              __var_1 := null;
[L1573]  COND FALSE  !(!(spender_s379 != null))
[L1577]              sum__allowed1[msgsender_MSG] := sum__allowed1[msgsender_MSG] - _allowed_FLAMA[this][msgsender_MSG][spender_s379];
[L1578]              _allowed_FLAMA[this][msgsender_MSG][spender_s379] := value_s379;
[L1579]              sum__allowed1[msgsender_MSG] := sum__allowed1[msgsender_MSG] + _allowed_FLAMA[this][msgsender_MSG][spender_s379];
[L1580]              assert { :EventEmitted "Approval_FLAMA" } true;
[L1581]              __ret_0_ := true;
[L689]   RET         call __ret_0_ := approve~address~uint256_FLAMA__success(this, msgsender_MSG, msgvalue_MSG, spender_s379, value_s379);
[L690]               assume !revert && gas >= 0;
[L2520]  RET         call __ret_0_approve := approve~address~uint256_FLAMA(this, msgsender_MSG, msgvalue_MSG, spender_s379, value_s379);
[L2590]  RET         call CorralChoice_FLAMA(this);
[L2590]  CALL        call CorralChoice_FLAMA(this);
[L2446]              havoc msgsender_MSG;
[L2447]              havoc msgvalue_MSG;
[L2448]              havoc choice;
[L2449]              havoc __ret_0_totalSupply;
[L2450]              havoc owner_s308;
[L2451]              havoc __ret_0_balanceOf;
[L2452]              havoc owner_s324;
[L2453]              havoc spender_s324;
[L2454]              havoc __ret_0_allowance;
[L2455]              havoc to_s343;
[L2456]              havoc value_s343;
[L2457]              havoc __ret_0_transfer;
[L2458]              havoc spender_s379;
[L2459]              havoc value_s379;
[L2460]              havoc __ret_0_approve;
[L2461]              havoc from_s416;
[L2462]              havoc to_s416;
[L2463]              havoc value_s416;
[L2464]              havoc __ret_0_transferFrom;
[L2465]              havoc value_s229;
[L2466]              havoc name_s264;
[L2467]              havoc symbol_s264;
[L2468]              havoc decimals_s264;
[L2469]              havoc totalSupply_s264;
[L2470]              havoc __ret_0_name;
[L2471]              havoc __ret_0_symbol;
[L2472]              havoc __ret_0_decimals;
[L2473]              havoc spender_s466;
[L2474]              havoc addedValue_s466;
[L2475]              havoc __ret_0_increaseAllowance;
[L2476]              havoc spender_s516;
[L2477]              havoc subtractedValue_s516;
[L2478]              havoc __ret_0_decreaseAllowance;
[L2479]              havoc tmpNow;
[L2480]              havoc gas;
[L2481]              assume gas > 4000000 && gas <= 8000000;
[L2482]              tmpNow := now;
[L2483]              havoc now;
[L2484]              assume now > tmpNow;
[L2485]              assume msgsender_MSG != null;
[L2486]              assume DType[msgsender_MSG] != SafeMath;
[L2487]              assume DType[msgsender_MSG] != IERC20;
[L2488]              assume DType[msgsender_MSG] != FLAMA;
[L2489]              Alloc[msgsender_MSG] := true;
[L2490]  COND FALSE  !(choice == 12)
[L2496]  COND FALSE  !(choice == 11)
[L2502]  COND FALSE  !(choice == 10)
[L2508]  COND FALSE  !(choice == 9)
[L2515]  COND FALSE  !(choice == 8)
[L2522]  COND FALSE  !(choice == 7)
[L2529]  COND TRUE   choice == 6
[L2530]              gas := gas - 21000;
[L2531]  COND TRUE   gas >= 0
[L2532]              assume value_s229 >= 0 && value_s229 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2533]              assume msgvalue_MSG == 0;
[L2534]  CALL        call burn~uint256_FLAMA(this, msgsender_MSG, msgvalue_MSG, value_s229);
[L192]               havoc __exception;
[L193]               revert := false;
[L194]   COND FALSE  !(__exception)
[L215]   CALL        call burn~uint256_FLAMA__success(this, msgsender_MSG, msgvalue_MSG, value_s229);
[L1386]  CALL        call _burn~address~uint256_FLAMA__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, value_s229);
[L1834]              __var_11 := null;
[L1835]  COND FALSE  !(!(account_s640 != null))
[L1839]  CALL        call __var_12 := sub~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_FLAMA[this], value_s640);
[L1291]  COND FALSE  !(!(b_s82 <= a_s82))
[L1295]              c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1296]              __ret_0_ := c_s82;
[L1839]  RET         call __var_12 := sub~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_FLAMA[this], value_s640);
[L1840]  COND FALSE  !(revert)
[L1843]              _totalSupply_FLAMA[this] := __var_12;
[L1844]  CALL        call __var_13 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_FLAMA[this][account_s640], value_s640);
[L1291]  COND FALSE  !(!(b_s82 <= a_s82))
[L1295]              c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1296]              __ret_0_ := c_s82;
[L1844]  RET         call __var_13 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_FLAMA[this][account_s640], value_s640);
[L1845]  COND FALSE  !(revert)
[L1848]              sum__balances0[this] := sum__balances0[this] - _balances_FLAMA[this][account_s640];
[L1849]              _balances_FLAMA[this][account_s640] := __var_13;
[L1850]              sum__balances0[this] := sum__balances0[this] + _balances_FLAMA[this][account_s640];
[L1851]              assert { :EventEmitted "Transfer_FLAMA" } true;
[L1386]  RET         call _burn~address~uint256_FLAMA__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, value_s229);
[L1387]  COND FALSE  !(revert)
[L215]   RET         call burn~uint256_FLAMA__success(this, msgsender_MSG, msgvalue_MSG, value_s229);
[L216]               assume !revert && gas >= 0;
[L2534]  RET         call burn~uint256_FLAMA(this, msgsender_MSG, msgvalue_MSG, value_s229);
[L2590]  RET         call CorralChoice_FLAMA(this);
[L2590]  CALL        call CorralChoice_FLAMA(this);
[L2446]              havoc msgsender_MSG;
[L2447]              havoc msgvalue_MSG;
[L2448]              havoc choice;
[L2449]              havoc __ret_0_totalSupply;
[L2450]              havoc owner_s308;
[L2451]              havoc __ret_0_balanceOf;
[L2452]              havoc owner_s324;
[L2453]              havoc spender_s324;
[L2454]              havoc __ret_0_allowance;
[L2455]              havoc to_s343;
[L2456]              havoc value_s343;
[L2457]              havoc __ret_0_transfer;
[L2458]              havoc spender_s379;
[L2459]              havoc value_s379;
[L2460]              havoc __ret_0_approve;
[L2461]              havoc from_s416;
[L2462]              havoc to_s416;
[L2463]              havoc value_s416;
[L2464]              havoc __ret_0_transferFrom;
[L2465]              havoc value_s229;
[L2466]              havoc name_s264;
[L2467]              havoc symbol_s264;
[L2468]              havoc decimals_s264;
[L2469]              havoc totalSupply_s264;
[L2470]              havoc __ret_0_name;
[L2471]              havoc __ret_0_symbol;
[L2472]              havoc __ret_0_decimals;
[L2473]              havoc spender_s466;
[L2474]              havoc addedValue_s466;
[L2475]              havoc __ret_0_increaseAllowance;
[L2476]              havoc spender_s516;
[L2477]              havoc subtractedValue_s516;
[L2478]              havoc __ret_0_decreaseAllowance;
[L2479]              havoc tmpNow;
[L2480]              havoc gas;
[L2481]              assume gas > 4000000 && gas <= 8000000;
[L2482]              tmpNow := now;
[L2483]              havoc now;
[L2484]              assume now > tmpNow;
[L2485]              assume msgsender_MSG != null;
[L2486]              assume DType[msgsender_MSG] != SafeMath;
[L2487]              assume DType[msgsender_MSG] != IERC20;
[L2488]              assume DType[msgsender_MSG] != FLAMA;
[L2489]              Alloc[msgsender_MSG] := true;
[L2490]  COND FALSE  !(choice == 12)
[L2496]  COND FALSE  !(choice == 11)
[L2502]  COND FALSE  !(choice == 10)
[L2508]  COND FALSE  !(choice == 9)
[L2515]  COND FALSE  !(choice == 8)
[L2522]  COND TRUE   choice == 7
[L2523]              gas := gas - 21000;
[L2524]  COND TRUE   gas >= 0
[L2525]              assume value_s416 >= 0 && value_s416 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2526]              assume msgvalue_MSG == 0;
[L2527]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_FLAMA(this, msgsender_MSG, msgvalue_MSG, from_s416, to_s416, value_s416);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((((from_s416 != to_s416 && ((value_s416 > _balances_FLAMA[this][from_s416] || value_s416 > _allowed_FLAMA[this][from_s416][msgsender_MSG]) || _balances_FLAMA[this][to_s416] + value_s416 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && value_s416 >= 0) && value_s416 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_FLAMA[this][to_s416] >= 0) && _balances_FLAMA[this][to_s416] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_FLAMA[this][from_s416] >= 0) && _balances_FLAMA[this][from_s416] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowed_FLAMA[this][from_s416][msgsender_MSG] >= 0) && _allowed_FLAMA[this][from_s416][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transferFrom_FLAMA0 := true;
[L2]                 call_transferFrom_FLAMA0 := false;
[L2]                 revert := revert_hold;
[L721]               havoc __exception;
[L722]               revert := false;
[L723]   COND FALSE  !(__exception)
[L744]   CALL        call __ret_0_ := transferFrom~address~address~uint256_FLAMA__success(this, msgsender_MSG, msgvalue_MSG, from_s416, to_s416, value_s416);
[L1606]  CALL        call __var_2 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowed_FLAMA[this][from_s416][msgsender_MSG], value_s416);
[L1291]  COND FALSE  !(!(b_s82 <= a_s82))
[L1295]              c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1296]              __ret_0_ := c_s82;
[L1606]  RET         call __var_2 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowed_FLAMA[this][from_s416][msgsender_MSG], value_s416);
[L1607]  COND FALSE  !(revert)
[L1610]              sum__allowed1[from_s416] := sum__allowed1[from_s416] - _allowed_FLAMA[this][from_s416][msgsender_MSG];
[L1611]              _allowed_FLAMA[this][from_s416][msgsender_MSG] := __var_2;
[L1612]              sum__allowed1[from_s416] := sum__allowed1[from_s416] + _allowed_FLAMA[this][from_s416][msgsender_MSG];
[L1613]  CALL        call _transfer~address~address~uint256_FLAMA__success(this, msgsender_MSG, msgvalue_MSG, from_s416, to_s416, value_s416);
[L1762]              __var_7 := null;
[L1763]  COND FALSE  !(!(to_s598 != null))
[L1767]  CALL        call onePercent_s598 := div~uint256~uint256_SafeMath__success(this, this, 0, value_s598, 100);
[L1267]  COND FALSE  !(!(b_s58 > 0))
[L1271]              c_s58 := nonlinearDiv(a_s58, b_s58) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1272]              __ret_0_ := c_s58;
[L1767]  RET         call onePercent_s598 := div~uint256~uint256_SafeMath__success(this, this, 0, value_s598, 100);
[L1768]  COND FALSE  !(revert)
[L1771]              onePercent_s598 := onePercent_s598;
[L1772]  CALL        call burnAmount_s598 := mul~uint256~uint256_SafeMath__success(this, this, 0, onePercent_s598, 3);
[L1239]  COND TRUE   a_s34 == 0
[L1240]              __ret_0_ := 0;
[L1772]  RET         call burnAmount_s598 := mul~uint256~uint256_SafeMath__success(this, this, 0, onePercent_s598, 3);
[L1773]  COND FALSE  !(revert)
[L1776]              burnAmount_s598 := burnAmount_s598;
[L1777]  CALL        call newTransferAmount_s598 := sub~uint256~uint256_SafeMath__success(this, this, 0, value_s598, burnAmount_s598);
[L1291]  COND FALSE  !(!(b_s82 <= a_s82))
[L1295]              c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1296]              __ret_0_ := c_s82;
[L1777]  RET         call newTransferAmount_s598 := sub~uint256~uint256_SafeMath__success(this, this, 0, value_s598, burnAmount_s598);
[L1778]  COND FALSE  !(revert)
[L1781]              newTransferAmount_s598 := newTransferAmount_s598;
[L1782]  CALL        call __var_8 := sub~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_FLAMA[this], burnAmount_s598);
[L1291]  COND FALSE  !(!(b_s82 <= a_s82))
[L1295]              c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1296]              __ret_0_ := c_s82;
[L1782]  RET         call __var_8 := sub~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_FLAMA[this], burnAmount_s598);
[L1783]  COND FALSE  !(revert)
[L1786]              _totalSupply_FLAMA[this] := __var_8;
[L1787]  CALL        call __var_9 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_FLAMA[this][from_s598], value_s598);
[L1291]  COND FALSE  !(!(b_s82 <= a_s82))
[L1295]              c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1296]              __ret_0_ := c_s82;
[L1787]  RET         call __var_9 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_FLAMA[this][from_s598], value_s598);
[L1788]  COND FALSE  !(revert)
[L1791]              sum__balances0[this] := sum__balances0[this] - _balances_FLAMA[this][from_s598];
[L1792]              _balances_FLAMA[this][from_s598] := __var_9;
[L1793]              sum__balances0[this] := sum__balances0[this] + _balances_FLAMA[this][from_s598];
[L1794]  CALL        call __var_10 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_FLAMA[this][to_s598], newTransferAmount_s598);
[L1315]              c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1316]  COND FALSE  !(!(c_s106 >= a_s106))
[L1320]              __ret_0_ := c_s106;
[L1794]  RET         call __var_10 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_FLAMA[this][to_s598], newTransferAmount_s598);
[L1795]  COND FALSE  !(revert)
[L1798]              sum__balances0[this] := sum__balances0[this] - _balances_FLAMA[this][to_s598];
[L1799]              _balances_FLAMA[this][to_s598] := __var_10;
[L1800]              sum__balances0[this] := sum__balances0[this] + _balances_FLAMA[this][to_s598];
[L1801]              assert { :EventEmitted "Transfer_FLAMA" } true;
[L1802]              assert { :EventEmitted "Transfer_FLAMA" } true;
[L1613]  RET         call _transfer~address~address~uint256_FLAMA__success(this, msgsender_MSG, msgvalue_MSG, from_s416, to_s416, value_s416);
[L1614]  COND FALSE  !(revert)
[L1617]              __ret_0_ := true;
[L744]   RET         call __ret_0_ := transferFrom~address~address~uint256_FLAMA__success(this, msgsender_MSG, msgvalue_MSG, from_s416, to_s416, value_s416);
[L745]               assume !revert && gas >= 0;
[L2527]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_FLAMA(this, msgsender_MSG, msgvalue_MSG, from_s416, to_s416, value_s416);
[L2590]  RET         call CorralChoice_FLAMA(this);

Loop:
[L2590]  CALL        call CorralChoice_FLAMA(this);
[L2446]              havoc msgsender_MSG;
[L2447]              havoc msgvalue_MSG;
[L2448]              havoc choice;
[L2449]              havoc __ret_0_totalSupply;
[L2450]              havoc owner_s308;
[L2451]              havoc __ret_0_balanceOf;
[L2452]              havoc owner_s324;
[L2453]              havoc spender_s324;
[L2454]              havoc __ret_0_allowance;
[L2455]              havoc to_s343;
[L2456]              havoc value_s343;
[L2457]              havoc __ret_0_transfer;
[L2458]              havoc spender_s379;
[L2459]              havoc value_s379;
[L2460]              havoc __ret_0_approve;
[L2461]              havoc from_s416;
[L2462]              havoc to_s416;
[L2463]              havoc value_s416;
[L2464]              havoc __ret_0_transferFrom;
[L2465]              havoc value_s229;
[L2466]              havoc name_s264;
[L2467]              havoc symbol_s264;
[L2468]              havoc decimals_s264;
[L2469]              havoc totalSupply_s264;
[L2470]              havoc __ret_0_name;
[L2471]              havoc __ret_0_symbol;
[L2472]              havoc __ret_0_decimals;
[L2473]              havoc spender_s466;
[L2474]              havoc addedValue_s466;
[L2475]              havoc __ret_0_increaseAllowance;
[L2476]              havoc spender_s516;
[L2477]              havoc subtractedValue_s516;
[L2478]              havoc __ret_0_decreaseAllowance;
[L2479]              havoc tmpNow;
[L2480]              havoc gas;
[L2481]              assume gas > 4000000 && gas <= 8000000;
[L2482]              tmpNow := now;
[L2483]              havoc now;
[L2484]              assume now > tmpNow;
[L2485]              assume msgsender_MSG != null;
[L2486]              assume DType[msgsender_MSG] != SafeMath;
[L2487]              assume DType[msgsender_MSG] != IERC20;
[L2488]              assume DType[msgsender_MSG] != FLAMA;
[L2489]              Alloc[msgsender_MSG] := true;
[L2490]  COND TRUE   choice == 12
[L2491]              gas := gas - 21000;
[L2492]  COND FALSE  !(gas >= 0)
[L2590]  RET         call CorralChoice_FLAMA(this);

[2020-11-25 16:33:14,345 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 16:33:14,346 INFO  L82        PathProgramCache]: Analyzing trace with hash -1776773172, now seen corresponding path program 1 times
[2020-11-25 16:33:14,346 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 16:33:14,364 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 16:33:14,603 INFO  L134       CoverageAnalysis]: Checked inductivity of 192 backedges. 5 proven. 14 refuted. 0 times theorem prover too weak. 173 trivial. 0 not checked.
[2020-11-25 16:33:14,603 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 16:33:14,603 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [20] total 20
[2020-11-25 16:33:14,603 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 16:33:14,603 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 20 interpolants.
[2020-11-25 16:33:14,604 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=48, Invalid=332, Unknown=0, NotChecked=0, Total=380
[2020-11-25 16:33:14,604 INFO  L87              Difference]: Start difference. First operand 1828 states and 1990 transitions. cyclomatic complexity: 168 Second operand 20 states.
[2020-11-25 16:33:16,762 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 16:33:16,762 INFO  L93              Difference]: Finished difference Result 1942 states and 2115 transitions.
[2020-11-25 16:33:16,762 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 20 states. 
[2020-11-25 16:33:16,762 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 1942 states and 2115 transitions.
[2020-11-25 16:33:16,765 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 16:33:16,769 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 1942 states to 1942 states and 2115 transitions.
[2020-11-25 16:33:16,769 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 597
[2020-11-25 16:33:16,770 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 597
[2020-11-25 16:33:16,770 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 1942 states and 2115 transitions.
[2020-11-25 16:33:16,771 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 16:33:16,771 INFO  L728         BuchiCegarLoop]: Abstraction has 1942 states and 2115 transitions.
[2020-11-25 16:33:16,773 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 1942 states and 2115 transitions.
[2020-11-25 16:33:16,782 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 1942 to 1896.
[2020-11-25 16:33:16,782 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 1896 states.
[2020-11-25 16:33:16,784 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 1896 states to 1896 states and 2068 transitions.
[2020-11-25 16:33:16,784 INFO  L751         BuchiCegarLoop]: Abstraction has 1896 states and 2068 transitions.
[2020-11-25 16:33:16,784 INFO  L631         BuchiCegarLoop]: Abstraction has 1896 states and 2068 transitions.
[2020-11-25 16:33:16,784 INFO  L445         BuchiCegarLoop]: ======== Iteration 8============
[2020-11-25 16:33:16,784 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 1896 states and 2068 transitions.
[2020-11-25 16:33:16,786 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 16:33:16,786 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 16:33:16,786 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 16:33:16,788 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 16:33:16,788 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [4, 4, 4, 4, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transferFrom_FLAMA0 := false;
[L2]                 call_transferFrom_FLAMA0 := false;
[L2]     CALL        call main();
[L2580]              assume null == 0;
[L2581]  CALL        call this := FreshRefGenerator__success();
[L1182]              havoc newRef;
[L1183]              assume Alloc[newRef] == false;
[L1184]              Alloc[newRef] := true;
[L1185]              assume newRef != null;
[L2581]  RET         call this := FreshRefGenerator__success();
[L2582]              assume now >= 0;
[L2583]              assume DType[this] == FLAMA;
[L2584]              assume msgvalue_MSG == 0;
[L2585]              gas := gas - 53000;
[L2586]  CALL        call FLAMA_FLAMA(this, msgsender_MSG, msgvalue_MSG, name_s264, symbol_s264, decimals_s264, totalSupply_s264);
[L261]               havoc __exception;
[L262]               revert := false;
[L263]   COND FALSE  !(__exception)
[L284]   CALL        call FLAMA_FLAMA__success(this, msgsender_MSG, msgvalue_MSG, name_s264, symbol_s264, decimals_s264, totalSupply_s264);
[L1452]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1370]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1355]              assume msgsender_MSG != null;
[L1356]              Balance[this] := 0;
[L1370]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1371]  COND FALSE  !(revert)
[L1452]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1453]  COND FALSE  !(revert)
[L1456]  CALL        call FLAMA_FLAMA_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s264, symbol_s264, decimals_s264, totalSupply_s264);
[L1418]              assume msgsender_MSG != null;
[L1419]              Balance[this] := 0;
[L1420]              _name_FLAMA[this] := 965843050;
[L1421]              _symbol_FLAMA[this] := 965843050;
[L1422]              _decimals_FLAMA[this] := 0;
[L1423]              _totalSupply_FLAMA[this] := 0;
[L1424]              _balances_FLAMA[this] := zeroRefintArr();
[L1425]              sum__balances0[this] := 0;
[L1426]              _allowed_FLAMA[this] := zeroRefRefintArr();
[L1427]              sum__allowed1[this] := 0;
[L1429]              _name_FLAMA[this] := name_s264;
[L1430]              _symbol_FLAMA[this] := symbol_s264;
[L1431]              _decimals_FLAMA[this] := decimals_s264;
[L1432]              _totalSupply_FLAMA[this] := totalSupply_s264;
[L1433]              sum__balances0[this] := sum__balances0[this] - _balances_FLAMA[this][msgsender_MSG];
[L1434]              _balances_FLAMA[this][msgsender_MSG] := _totalSupply_FLAMA[this];
[L1435]              sum__balances0[this] := sum__balances0[this] + _balances_FLAMA[this][msgsender_MSG];
[L1456]  RET         call FLAMA_FLAMA_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s264, symbol_s264, decimals_s264, totalSupply_s264);
[L1457]  COND FALSE  !(revert)
[L284]   RET         call FLAMA_FLAMA__success(this, msgsender_MSG, msgvalue_MSG, name_s264, symbol_s264, decimals_s264, totalSupply_s264);
[L285]               assume !revert && gas >= 0;
[L2586]  RET         call FLAMA_FLAMA(this, msgsender_MSG, msgvalue_MSG, name_s264, symbol_s264, decimals_s264, totalSupply_s264);
[L2587]              assume !revert && gas >= 0;
[L2590]  CALL        call CorralChoice_FLAMA(this);
[L2446]              havoc msgsender_MSG;
[L2447]              havoc msgvalue_MSG;
[L2448]              havoc choice;
[L2449]              havoc __ret_0_totalSupply;
[L2450]              havoc owner_s308;
[L2451]              havoc __ret_0_balanceOf;
[L2452]              havoc owner_s324;
[L2453]              havoc spender_s324;
[L2454]              havoc __ret_0_allowance;
[L2455]              havoc to_s343;
[L2456]              havoc value_s343;
[L2457]              havoc __ret_0_transfer;
[L2458]              havoc spender_s379;
[L2459]              havoc value_s379;
[L2460]              havoc __ret_0_approve;
[L2461]              havoc from_s416;
[L2462]              havoc to_s416;
[L2463]              havoc value_s416;
[L2464]              havoc __ret_0_transferFrom;
[L2465]              havoc value_s229;
[L2466]              havoc name_s264;
[L2467]              havoc symbol_s264;
[L2468]              havoc decimals_s264;
[L2469]              havoc totalSupply_s264;
[L2470]              havoc __ret_0_name;
[L2471]              havoc __ret_0_symbol;
[L2472]              havoc __ret_0_decimals;
[L2473]              havoc spender_s466;
[L2474]              havoc addedValue_s466;
[L2475]              havoc __ret_0_increaseAllowance;
[L2476]              havoc spender_s516;
[L2477]              havoc subtractedValue_s516;
[L2478]              havoc __ret_0_decreaseAllowance;
[L2479]              havoc tmpNow;
[L2480]              havoc gas;
[L2481]              assume gas > 4000000 && gas <= 8000000;
[L2482]              tmpNow := now;
[L2483]              havoc now;
[L2484]              assume now > tmpNow;
[L2485]              assume msgsender_MSG != null;
[L2486]              assume DType[msgsender_MSG] != SafeMath;
[L2487]              assume DType[msgsender_MSG] != IERC20;
[L2488]              assume DType[msgsender_MSG] != FLAMA;
[L2489]              Alloc[msgsender_MSG] := true;
[L2490]  COND FALSE  !(choice == 12)
[L2496]  COND FALSE  !(choice == 11)
[L2502]  COND FALSE  !(choice == 10)
[L2508]  COND FALSE  !(choice == 9)
[L2515]  COND TRUE   choice == 8
[L2516]              gas := gas - 21000;
[L2517]  COND TRUE   gas >= 0
[L2518]              assume value_s379 >= 0 && value_s379 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2519]              assume msgvalue_MSG == 0;
[L2520]  CALL        call __ret_0_approve := approve~address~uint256_FLAMA(this, msgsender_MSG, msgvalue_MSG, spender_s379, value_s379);
[L666]               havoc __exception;
[L667]               revert := false;
[L668]   COND FALSE  !(__exception)
[L689]   CALL        call __ret_0_ := approve~address~uint256_FLAMA__success(this, msgsender_MSG, msgvalue_MSG, spender_s379, value_s379);
[L1572]              __var_1 := null;
[L1573]  COND FALSE  !(!(spender_s379 != null))
[L1577]              sum__allowed1[msgsender_MSG] := sum__allowed1[msgsender_MSG] - _allowed_FLAMA[this][msgsender_MSG][spender_s379];
[L1578]              _allowed_FLAMA[this][msgsender_MSG][spender_s379] := value_s379;
[L1579]              sum__allowed1[msgsender_MSG] := sum__allowed1[msgsender_MSG] + _allowed_FLAMA[this][msgsender_MSG][spender_s379];
[L1580]              assert { :EventEmitted "Approval_FLAMA" } true;
[L1581]              __ret_0_ := true;
[L689]   RET         call __ret_0_ := approve~address~uint256_FLAMA__success(this, msgsender_MSG, msgvalue_MSG, spender_s379, value_s379);
[L690]               assume !revert && gas >= 0;
[L2520]  RET         call __ret_0_approve := approve~address~uint256_FLAMA(this, msgsender_MSG, msgvalue_MSG, spender_s379, value_s379);
[L2590]  RET         call CorralChoice_FLAMA(this);
[L2590]  CALL        call CorralChoice_FLAMA(this);
[L2446]              havoc msgsender_MSG;
[L2447]              havoc msgvalue_MSG;
[L2448]              havoc choice;
[L2449]              havoc __ret_0_totalSupply;
[L2450]              havoc owner_s308;
[L2451]              havoc __ret_0_balanceOf;
[L2452]              havoc owner_s324;
[L2453]              havoc spender_s324;
[L2454]              havoc __ret_0_allowance;
[L2455]              havoc to_s343;
[L2456]              havoc value_s343;
[L2457]              havoc __ret_0_transfer;
[L2458]              havoc spender_s379;
[L2459]              havoc value_s379;
[L2460]              havoc __ret_0_approve;
[L2461]              havoc from_s416;
[L2462]              havoc to_s416;
[L2463]              havoc value_s416;
[L2464]              havoc __ret_0_transferFrom;
[L2465]              havoc value_s229;
[L2466]              havoc name_s264;
[L2467]              havoc symbol_s264;
[L2468]              havoc decimals_s264;
[L2469]              havoc totalSupply_s264;
[L2470]              havoc __ret_0_name;
[L2471]              havoc __ret_0_symbol;
[L2472]              havoc __ret_0_decimals;
[L2473]              havoc spender_s466;
[L2474]              havoc addedValue_s466;
[L2475]              havoc __ret_0_increaseAllowance;
[L2476]              havoc spender_s516;
[L2477]              havoc subtractedValue_s516;
[L2478]              havoc __ret_0_decreaseAllowance;
[L2479]              havoc tmpNow;
[L2480]              havoc gas;
[L2481]              assume gas > 4000000 && gas <= 8000000;
[L2482]              tmpNow := now;
[L2483]              havoc now;
[L2484]              assume now > tmpNow;
[L2485]              assume msgsender_MSG != null;
[L2486]              assume DType[msgsender_MSG] != SafeMath;
[L2487]              assume DType[msgsender_MSG] != IERC20;
[L2488]              assume DType[msgsender_MSG] != FLAMA;
[L2489]              Alloc[msgsender_MSG] := true;
[L2490]  COND FALSE  !(choice == 12)
[L2496]  COND FALSE  !(choice == 11)
[L2502]  COND FALSE  !(choice == 10)
[L2508]  COND FALSE  !(choice == 9)
[L2515]  COND FALSE  !(choice == 8)
[L2522]  COND FALSE  !(choice == 7)
[L2529]  COND TRUE   choice == 6
[L2530]              gas := gas - 21000;
[L2531]  COND TRUE   gas >= 0
[L2532]              assume value_s229 >= 0 && value_s229 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2533]              assume msgvalue_MSG == 0;
[L2534]  CALL        call burn~uint256_FLAMA(this, msgsender_MSG, msgvalue_MSG, value_s229);
[L192]               havoc __exception;
[L193]               revert := false;
[L194]   COND FALSE  !(__exception)
[L215]   CALL        call burn~uint256_FLAMA__success(this, msgsender_MSG, msgvalue_MSG, value_s229);
[L1386]  CALL        call _burn~address~uint256_FLAMA__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, value_s229);
[L1834]              __var_11 := null;
[L1835]  COND FALSE  !(!(account_s640 != null))
[L1839]  CALL        call __var_12 := sub~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_FLAMA[this], value_s640);
[L1291]  COND FALSE  !(!(b_s82 <= a_s82))
[L1295]              c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1296]              __ret_0_ := c_s82;
[L1839]  RET         call __var_12 := sub~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_FLAMA[this], value_s640);
[L1840]  COND FALSE  !(revert)
[L1843]              _totalSupply_FLAMA[this] := __var_12;
[L1844]  CALL        call __var_13 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_FLAMA[this][account_s640], value_s640);
[L1291]  COND FALSE  !(!(b_s82 <= a_s82))
[L1295]              c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1296]              __ret_0_ := c_s82;
[L1844]  RET         call __var_13 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_FLAMA[this][account_s640], value_s640);
[L1845]  COND FALSE  !(revert)
[L1848]              sum__balances0[this] := sum__balances0[this] - _balances_FLAMA[this][account_s640];
[L1849]              _balances_FLAMA[this][account_s640] := __var_13;
[L1850]              sum__balances0[this] := sum__balances0[this] + _balances_FLAMA[this][account_s640];
[L1851]              assert { :EventEmitted "Transfer_FLAMA" } true;
[L1386]  RET         call _burn~address~uint256_FLAMA__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, value_s229);
[L1387]  COND FALSE  !(revert)
[L215]   RET         call burn~uint256_FLAMA__success(this, msgsender_MSG, msgvalue_MSG, value_s229);
[L216]               assume !revert && gas >= 0;
[L2534]  RET         call burn~uint256_FLAMA(this, msgsender_MSG, msgvalue_MSG, value_s229);
[L2590]  RET         call CorralChoice_FLAMA(this);
[L2590]  CALL        call CorralChoice_FLAMA(this);
[L2446]              havoc msgsender_MSG;
[L2447]              havoc msgvalue_MSG;
[L2448]              havoc choice;
[L2449]              havoc __ret_0_totalSupply;
[L2450]              havoc owner_s308;
[L2451]              havoc __ret_0_balanceOf;
[L2452]              havoc owner_s324;
[L2453]              havoc spender_s324;
[L2454]              havoc __ret_0_allowance;
[L2455]              havoc to_s343;
[L2456]              havoc value_s343;
[L2457]              havoc __ret_0_transfer;
[L2458]              havoc spender_s379;
[L2459]              havoc value_s379;
[L2460]              havoc __ret_0_approve;
[L2461]              havoc from_s416;
[L2462]              havoc to_s416;
[L2463]              havoc value_s416;
[L2464]              havoc __ret_0_transferFrom;
[L2465]              havoc value_s229;
[L2466]              havoc name_s264;
[L2467]              havoc symbol_s264;
[L2468]              havoc decimals_s264;
[L2469]              havoc totalSupply_s264;
[L2470]              havoc __ret_0_name;
[L2471]              havoc __ret_0_symbol;
[L2472]              havoc __ret_0_decimals;
[L2473]              havoc spender_s466;
[L2474]              havoc addedValue_s466;
[L2475]              havoc __ret_0_increaseAllowance;
[L2476]              havoc spender_s516;
[L2477]              havoc subtractedValue_s516;
[L2478]              havoc __ret_0_decreaseAllowance;
[L2479]              havoc tmpNow;
[L2480]              havoc gas;
[L2481]              assume gas > 4000000 && gas <= 8000000;
[L2482]              tmpNow := now;
[L2483]              havoc now;
[L2484]              assume now > tmpNow;
[L2485]              assume msgsender_MSG != null;
[L2486]              assume DType[msgsender_MSG] != SafeMath;
[L2487]              assume DType[msgsender_MSG] != IERC20;
[L2488]              assume DType[msgsender_MSG] != FLAMA;
[L2489]              Alloc[msgsender_MSG] := true;
[L2490]  COND FALSE  !(choice == 12)
[L2496]  COND FALSE  !(choice == 11)
[L2502]  COND FALSE  !(choice == 10)
[L2508]  COND FALSE  !(choice == 9)
[L2515]  COND FALSE  !(choice == 8)
[L2522]  COND TRUE   choice == 7
[L2523]              gas := gas - 21000;
[L2524]  COND TRUE   gas >= 0
[L2525]              assume value_s416 >= 0 && value_s416 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2526]              assume msgvalue_MSG == 0;
[L2527]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_FLAMA(this, msgsender_MSG, msgvalue_MSG, from_s416, to_s416, value_s416);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((((from_s416 != to_s416 && ((value_s416 > _balances_FLAMA[this][from_s416] || value_s416 > _allowed_FLAMA[this][from_s416][msgsender_MSG]) || _balances_FLAMA[this][to_s416] + value_s416 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && value_s416 >= 0) && value_s416 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_FLAMA[this][to_s416] >= 0) && _balances_FLAMA[this][to_s416] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_FLAMA[this][from_s416] >= 0) && _balances_FLAMA[this][from_s416] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowed_FLAMA[this][from_s416][msgsender_MSG] >= 0) && _allowed_FLAMA[this][from_s416][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transferFrom_FLAMA0 := true;
[L2]                 call_transferFrom_FLAMA0 := false;
[L2]                 revert := revert_hold;
[L721]               havoc __exception;
[L722]               revert := false;
[L723]   COND FALSE  !(__exception)
[L744]   CALL        call __ret_0_ := transferFrom~address~address~uint256_FLAMA__success(this, msgsender_MSG, msgvalue_MSG, from_s416, to_s416, value_s416);
[L1606]  CALL        call __var_2 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowed_FLAMA[this][from_s416][msgsender_MSG], value_s416);
[L1291]  COND FALSE  !(!(b_s82 <= a_s82))
[L1295]              c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1296]              __ret_0_ := c_s82;
[L1606]  RET         call __var_2 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowed_FLAMA[this][from_s416][msgsender_MSG], value_s416);
[L1607]  COND FALSE  !(revert)
[L1610]              sum__allowed1[from_s416] := sum__allowed1[from_s416] - _allowed_FLAMA[this][from_s416][msgsender_MSG];
[L1611]              _allowed_FLAMA[this][from_s416][msgsender_MSG] := __var_2;
[L1612]              sum__allowed1[from_s416] := sum__allowed1[from_s416] + _allowed_FLAMA[this][from_s416][msgsender_MSG];
[L1613]  CALL        call _transfer~address~address~uint256_FLAMA__success(this, msgsender_MSG, msgvalue_MSG, from_s416, to_s416, value_s416);
[L1762]              __var_7 := null;
[L1763]  COND FALSE  !(!(to_s598 != null))
[L1767]  CALL        call onePercent_s598 := div~uint256~uint256_SafeMath__success(this, this, 0, value_s598, 100);
[L1267]  COND FALSE  !(!(b_s58 > 0))
[L1271]              c_s58 := nonlinearDiv(a_s58, b_s58) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1272]              __ret_0_ := c_s58;
[L1767]  RET         call onePercent_s598 := div~uint256~uint256_SafeMath__success(this, this, 0, value_s598, 100);
[L1768]  COND FALSE  !(revert)
[L1771]              onePercent_s598 := onePercent_s598;
[L1772]  CALL        call burnAmount_s598 := mul~uint256~uint256_SafeMath__success(this, this, 0, onePercent_s598, 3);
[L1239]  COND FALSE  !(a_s34 == 0)
[L1243]              c_s34 := nonlinearMul(a_s34, b_s34) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1244]  COND FALSE  !(!(nonlinearDiv(c_s34, a_s34) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 == b_s34))
[L1248]              __ret_0_ := c_s34;
[L1772]  RET         call burnAmount_s598 := mul~uint256~uint256_SafeMath__success(this, this, 0, onePercent_s598, 3);
[L1773]  COND FALSE  !(revert)
[L1776]              burnAmount_s598 := burnAmount_s598;
[L1777]  CALL        call newTransferAmount_s598 := sub~uint256~uint256_SafeMath__success(this, this, 0, value_s598, burnAmount_s598);
[L1291]  COND FALSE  !(!(b_s82 <= a_s82))
[L1295]              c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1296]              __ret_0_ := c_s82;
[L1777]  RET         call newTransferAmount_s598 := sub~uint256~uint256_SafeMath__success(this, this, 0, value_s598, burnAmount_s598);
[L1778]  COND FALSE  !(revert)
[L1781]              newTransferAmount_s598 := newTransferAmount_s598;
[L1782]  CALL        call __var_8 := sub~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_FLAMA[this], burnAmount_s598);
[L1291]  COND FALSE  !(!(b_s82 <= a_s82))
[L1295]              c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1296]              __ret_0_ := c_s82;
[L1782]  RET         call __var_8 := sub~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_FLAMA[this], burnAmount_s598);
[L1783]  COND FALSE  !(revert)
[L1786]              _totalSupply_FLAMA[this] := __var_8;
[L1787]  CALL        call __var_9 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_FLAMA[this][from_s598], value_s598);
[L1291]  COND FALSE  !(!(b_s82 <= a_s82))
[L1295]              c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1296]              __ret_0_ := c_s82;
[L1787]  RET         call __var_9 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_FLAMA[this][from_s598], value_s598);
[L1788]  COND FALSE  !(revert)
[L1791]              sum__balances0[this] := sum__balances0[this] - _balances_FLAMA[this][from_s598];
[L1792]              _balances_FLAMA[this][from_s598] := __var_9;
[L1793]              sum__balances0[this] := sum__balances0[this] + _balances_FLAMA[this][from_s598];
[L1794]  CALL        call __var_10 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_FLAMA[this][to_s598], newTransferAmount_s598);
[L1315]              c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1316]  COND FALSE  !(!(c_s106 >= a_s106))
[L1320]              __ret_0_ := c_s106;
[L1794]  RET         call __var_10 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_FLAMA[this][to_s598], newTransferAmount_s598);
[L1795]  COND FALSE  !(revert)
[L1798]              sum__balances0[this] := sum__balances0[this] - _balances_FLAMA[this][to_s598];
[L1799]              _balances_FLAMA[this][to_s598] := __var_10;
[L1800]              sum__balances0[this] := sum__balances0[this] + _balances_FLAMA[this][to_s598];
[L1801]              assert { :EventEmitted "Transfer_FLAMA" } true;
[L1802]              assert { :EventEmitted "Transfer_FLAMA" } true;
[L1613]  RET         call _transfer~address~address~uint256_FLAMA__success(this, msgsender_MSG, msgvalue_MSG, from_s416, to_s416, value_s416);
[L1614]  COND FALSE  !(revert)
[L1617]              __ret_0_ := true;
[L744]   RET         call __ret_0_ := transferFrom~address~address~uint256_FLAMA__success(this, msgsender_MSG, msgvalue_MSG, from_s416, to_s416, value_s416);
[L745]               assume !revert && gas >= 0;
[L2527]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_FLAMA(this, msgsender_MSG, msgvalue_MSG, from_s416, to_s416, value_s416);
[L2590]  RET         call CorralChoice_FLAMA(this);

Loop:
[L2590]  CALL        call CorralChoice_FLAMA(this);
[L2446]              havoc msgsender_MSG;
[L2447]              havoc msgvalue_MSG;
[L2448]              havoc choice;
[L2449]              havoc __ret_0_totalSupply;
[L2450]              havoc owner_s308;
[L2451]              havoc __ret_0_balanceOf;
[L2452]              havoc owner_s324;
[L2453]              havoc spender_s324;
[L2454]              havoc __ret_0_allowance;
[L2455]              havoc to_s343;
[L2456]              havoc value_s343;
[L2457]              havoc __ret_0_transfer;
[L2458]              havoc spender_s379;
[L2459]              havoc value_s379;
[L2460]              havoc __ret_0_approve;
[L2461]              havoc from_s416;
[L2462]              havoc to_s416;
[L2463]              havoc value_s416;
[L2464]              havoc __ret_0_transferFrom;
[L2465]              havoc value_s229;
[L2466]              havoc name_s264;
[L2467]              havoc symbol_s264;
[L2468]              havoc decimals_s264;
[L2469]              havoc totalSupply_s264;
[L2470]              havoc __ret_0_name;
[L2471]              havoc __ret_0_symbol;
[L2472]              havoc __ret_0_decimals;
[L2473]              havoc spender_s466;
[L2474]              havoc addedValue_s466;
[L2475]              havoc __ret_0_increaseAllowance;
[L2476]              havoc spender_s516;
[L2477]              havoc subtractedValue_s516;
[L2478]              havoc __ret_0_decreaseAllowance;
[L2479]              havoc tmpNow;
[L2480]              havoc gas;
[L2481]              assume gas > 4000000 && gas <= 8000000;
[L2482]              tmpNow := now;
[L2483]              havoc now;
[L2484]              assume now > tmpNow;
[L2485]              assume msgsender_MSG != null;
[L2486]              assume DType[msgsender_MSG] != SafeMath;
[L2487]              assume DType[msgsender_MSG] != IERC20;
[L2488]              assume DType[msgsender_MSG] != FLAMA;
[L2489]              Alloc[msgsender_MSG] := true;
[L2490]  COND FALSE  !(choice == 12)
[L2496]  COND FALSE  !(choice == 11)
[L2502]  COND FALSE  !(choice == 10)
[L2508]  COND FALSE  !(choice == 9)
[L2515]  COND FALSE  !(choice == 8)
[L2522]  COND TRUE   choice == 7
[L2523]              gas := gas - 21000;
[L2524]  COND TRUE   gas >= 0
[L2525]              assume value_s416 >= 0 && value_s416 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2526]              assume msgvalue_MSG == 0;
[L2527]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_FLAMA(this, msgsender_MSG, msgvalue_MSG, from_s416, to_s416, value_s416);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((((from_s416 != to_s416 && ((value_s416 > _balances_FLAMA[this][from_s416] || value_s416 > _allowed_FLAMA[this][from_s416][msgsender_MSG]) || _balances_FLAMA[this][to_s416] + value_s416 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && value_s416 >= 0) && value_s416 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_FLAMA[this][to_s416] >= 0) && _balances_FLAMA[this][to_s416] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_FLAMA[this][from_s416] >= 0) && _balances_FLAMA[this][from_s416] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowed_FLAMA[this][from_s416][msgsender_MSG] >= 0) && _allowed_FLAMA[this][from_s416][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transferFrom_FLAMA0 := true;
[L2]                 call_transferFrom_FLAMA0 := false;
[L2]                 revert := revert_hold;
[L721]               havoc __exception;
[L722]               revert := false;
[L723]   COND FALSE  !(__exception)
[L744]   CALL        call __ret_0_ := transferFrom~address~address~uint256_FLAMA__success(this, msgsender_MSG, msgvalue_MSG, from_s416, to_s416, value_s416);
[L1606]  CALL        call __var_2 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowed_FLAMA[this][from_s416][msgsender_MSG], value_s416);
[L1291]  COND FALSE  !(!(b_s82 <= a_s82))
[L1295]              c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1296]              __ret_0_ := c_s82;
[L1606]  RET         call __var_2 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowed_FLAMA[this][from_s416][msgsender_MSG], value_s416);
[L1607]  COND FALSE  !(revert)
[L1610]              sum__allowed1[from_s416] := sum__allowed1[from_s416] - _allowed_FLAMA[this][from_s416][msgsender_MSG];
[L1611]              _allowed_FLAMA[this][from_s416][msgsender_MSG] := __var_2;
[L1612]              sum__allowed1[from_s416] := sum__allowed1[from_s416] + _allowed_FLAMA[this][from_s416][msgsender_MSG];
[L1613]  CALL        call _transfer~address~address~uint256_FLAMA__success(this, msgsender_MSG, msgvalue_MSG, from_s416, to_s416, value_s416);
[L1762]              __var_7 := null;
[L1763]  COND FALSE  !(!(to_s598 != null))
[L1767]  CALL        call onePercent_s598 := div~uint256~uint256_SafeMath__success(this, this, 0, value_s598, 100);
[L1267]  COND FALSE  !(!(b_s58 > 0))
[L1271]              c_s58 := nonlinearDiv(a_s58, b_s58) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1272]              __ret_0_ := c_s58;
[L1767]  RET         call onePercent_s598 := div~uint256~uint256_SafeMath__success(this, this, 0, value_s598, 100);
[L1768]  COND FALSE  !(revert)
[L1771]              onePercent_s598 := onePercent_s598;
[L1772]  CALL        call burnAmount_s598 := mul~uint256~uint256_SafeMath__success(this, this, 0, onePercent_s598, 3);
[L1239]  COND FALSE  !(a_s34 == 0)
[L1243]              c_s34 := nonlinearMul(a_s34, b_s34) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1244]  COND FALSE  !(!(nonlinearDiv(c_s34, a_s34) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 == b_s34))
[L1248]              __ret_0_ := c_s34;
[L1772]  RET         call burnAmount_s598 := mul~uint256~uint256_SafeMath__success(this, this, 0, onePercent_s598, 3);
[L1773]  COND FALSE  !(revert)
[L1776]              burnAmount_s598 := burnAmount_s598;
[L1777]  CALL        call newTransferAmount_s598 := sub~uint256~uint256_SafeMath__success(this, this, 0, value_s598, burnAmount_s598);
[L1291]  COND FALSE  !(!(b_s82 <= a_s82))
[L1295]              c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1296]              __ret_0_ := c_s82;
[L1777]  RET         call newTransferAmount_s598 := sub~uint256~uint256_SafeMath__success(this, this, 0, value_s598, burnAmount_s598);
[L1778]  COND FALSE  !(revert)
[L1781]              newTransferAmount_s598 := newTransferAmount_s598;
[L1782]  CALL        call __var_8 := sub~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_FLAMA[this], burnAmount_s598);
[L1291]  COND FALSE  !(!(b_s82 <= a_s82))
[L1295]              c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1296]              __ret_0_ := c_s82;
[L1782]  RET         call __var_8 := sub~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_FLAMA[this], burnAmount_s598);
[L1783]  COND FALSE  !(revert)
[L1786]              _totalSupply_FLAMA[this] := __var_8;
[L1787]  CALL        call __var_9 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_FLAMA[this][from_s598], value_s598);
[L1291]  COND FALSE  !(!(b_s82 <= a_s82))
[L1295]              c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1296]              __ret_0_ := c_s82;
[L1787]  RET         call __var_9 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_FLAMA[this][from_s598], value_s598);
[L1788]  COND FALSE  !(revert)
[L1791]              sum__balances0[this] := sum__balances0[this] - _balances_FLAMA[this][from_s598];
[L1792]              _balances_FLAMA[this][from_s598] := __var_9;
[L1793]              sum__balances0[this] := sum__balances0[this] + _balances_FLAMA[this][from_s598];
[L1794]  CALL        call __var_10 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_FLAMA[this][to_s598], newTransferAmount_s598);
[L1315]              c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1316]  COND FALSE  !(!(c_s106 >= a_s106))
[L1320]              __ret_0_ := c_s106;
[L1794]  RET         call __var_10 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_FLAMA[this][to_s598], newTransferAmount_s598);
[L1795]  COND FALSE  !(revert)
[L1798]              sum__balances0[this] := sum__balances0[this] - _balances_FLAMA[this][to_s598];
[L1799]              _balances_FLAMA[this][to_s598] := __var_10;
[L1800]              sum__balances0[this] := sum__balances0[this] + _balances_FLAMA[this][to_s598];
[L1801]              assert { :EventEmitted "Transfer_FLAMA" } true;
[L1802]              assert { :EventEmitted "Transfer_FLAMA" } true;
[L1613]  RET         call _transfer~address~address~uint256_FLAMA__success(this, msgsender_MSG, msgvalue_MSG, from_s416, to_s416, value_s416);
[L1614]  COND FALSE  !(revert)
[L1617]              __ret_0_ := true;
[L744]   RET         call __ret_0_ := transferFrom~address~address~uint256_FLAMA__success(this, msgsender_MSG, msgvalue_MSG, from_s416, to_s416, value_s416);
[L745]               assume !revert && gas >= 0;
[L2527]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_FLAMA(this, msgsender_MSG, msgvalue_MSG, from_s416, to_s416, value_s416);
[L2590]  RET         call CorralChoice_FLAMA(this);

[2020-11-25 16:33:16,792 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 16:33:16,792 INFO  L82        PathProgramCache]: Analyzing trace with hash -246283105, now seen corresponding path program 1 times
[2020-11-25 16:33:16,792 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 16:33:16,811 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 16:33:17,347 INFO  L134       CoverageAnalysis]: Checked inductivity of 192 backedges. 12 proven. 13 refuted. 0 times theorem prover too weak. 167 trivial. 0 not checked.
[2020-11-25 16:33:17,347 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 16:33:17,347 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [30] total 30
[2020-11-25 16:33:17,347 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 16:33:17,347 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 31 interpolants.
[2020-11-25 16:33:17,348 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=95, Invalid=835, Unknown=0, NotChecked=0, Total=930
[2020-11-25 16:33:17,348 INFO  L87              Difference]: Start difference. First operand 1896 states and 2068 transitions. cyclomatic complexity: 178 Second operand 31 states.
[2020-11-25 16:33:20,206 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 16:33:20,206 INFO  L93              Difference]: Finished difference Result 1954 states and 2147 transitions.
[2020-11-25 16:33:20,206 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 31 states. 
[2020-11-25 16:33:20,206 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 1954 states and 2147 transitions.
[2020-11-25 16:33:20,209 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 16:33:20,214 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 1954 states to 1954 states and 2147 transitions.
[2020-11-25 16:33:20,214 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 601
[2020-11-25 16:33:20,214 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 601
[2020-11-25 16:33:20,214 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 1954 states and 2147 transitions.
[2020-11-25 16:33:20,215 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 16:33:20,216 INFO  L728         BuchiCegarLoop]: Abstraction has 1954 states and 2147 transitions.
[2020-11-25 16:33:20,217 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 1954 states and 2147 transitions.
[2020-11-25 16:33:20,225 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 1954 to 1902.
[2020-11-25 16:33:20,225 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 1902 states.
[2020-11-25 16:33:20,227 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 1902 states to 1902 states and 2088 transitions.
[2020-11-25 16:33:20,227 INFO  L751         BuchiCegarLoop]: Abstraction has 1902 states and 2088 transitions.
[2020-11-25 16:33:20,227 INFO  L631         BuchiCegarLoop]: Abstraction has 1902 states and 2088 transitions.
[2020-11-25 16:33:20,227 INFO  L445         BuchiCegarLoop]: ======== Iteration 9============
[2020-11-25 16:33:20,227 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 1902 states and 2088 transitions.
[2020-11-25 16:33:20,229 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 16:33:20,229 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 16:33:20,230 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 16:33:20,231 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 16:33:20,231 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [4, 4, 4, 4, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transferFrom_FLAMA0 := false;
[L2]                 call_transferFrom_FLAMA0 := false;
[L2]     CALL        call main();
[L2580]              assume null == 0;
[L2581]  CALL        call this := FreshRefGenerator__success();
[L1182]              havoc newRef;
[L1183]              assume Alloc[newRef] == false;
[L1184]              Alloc[newRef] := true;
[L1185]              assume newRef != null;
[L2581]  RET         call this := FreshRefGenerator__success();
[L2582]              assume now >= 0;
[L2583]              assume DType[this] == FLAMA;
[L2584]              assume msgvalue_MSG == 0;
[L2585]              gas := gas - 53000;
[L2586]  CALL        call FLAMA_FLAMA(this, msgsender_MSG, msgvalue_MSG, name_s264, symbol_s264, decimals_s264, totalSupply_s264);
[L261]               havoc __exception;
[L262]               revert := false;
[L263]   COND FALSE  !(__exception)
[L284]   CALL        call FLAMA_FLAMA__success(this, msgsender_MSG, msgvalue_MSG, name_s264, symbol_s264, decimals_s264, totalSupply_s264);
[L1452]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1370]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1355]              assume msgsender_MSG != null;
[L1356]              Balance[this] := 0;
[L1370]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1371]  COND FALSE  !(revert)
[L1452]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1453]  COND FALSE  !(revert)
[L1456]  CALL        call FLAMA_FLAMA_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s264, symbol_s264, decimals_s264, totalSupply_s264);
[L1418]              assume msgsender_MSG != null;
[L1419]              Balance[this] := 0;
[L1420]              _name_FLAMA[this] := 965843050;
[L1421]              _symbol_FLAMA[this] := 965843050;
[L1422]              _decimals_FLAMA[this] := 0;
[L1423]              _totalSupply_FLAMA[this] := 0;
[L1424]              _balances_FLAMA[this] := zeroRefintArr();
[L1425]              sum__balances0[this] := 0;
[L1426]              _allowed_FLAMA[this] := zeroRefRefintArr();
[L1427]              sum__allowed1[this] := 0;
[L1429]              _name_FLAMA[this] := name_s264;
[L1430]              _symbol_FLAMA[this] := symbol_s264;
[L1431]              _decimals_FLAMA[this] := decimals_s264;
[L1432]              _totalSupply_FLAMA[this] := totalSupply_s264;
[L1433]              sum__balances0[this] := sum__balances0[this] - _balances_FLAMA[this][msgsender_MSG];
[L1434]              _balances_FLAMA[this][msgsender_MSG] := _totalSupply_FLAMA[this];
[L1435]              sum__balances0[this] := sum__balances0[this] + _balances_FLAMA[this][msgsender_MSG];
[L1456]  RET         call FLAMA_FLAMA_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s264, symbol_s264, decimals_s264, totalSupply_s264);
[L1457]  COND FALSE  !(revert)
[L284]   RET         call FLAMA_FLAMA__success(this, msgsender_MSG, msgvalue_MSG, name_s264, symbol_s264, decimals_s264, totalSupply_s264);
[L285]               assume !revert && gas >= 0;
[L2586]  RET         call FLAMA_FLAMA(this, msgsender_MSG, msgvalue_MSG, name_s264, symbol_s264, decimals_s264, totalSupply_s264);
[L2587]              assume !revert && gas >= 0;
[L2590]  CALL        call CorralChoice_FLAMA(this);
[L2446]              havoc msgsender_MSG;
[L2447]              havoc msgvalue_MSG;
[L2448]              havoc choice;
[L2449]              havoc __ret_0_totalSupply;
[L2450]              havoc owner_s308;
[L2451]              havoc __ret_0_balanceOf;
[L2452]              havoc owner_s324;
[L2453]              havoc spender_s324;
[L2454]              havoc __ret_0_allowance;
[L2455]              havoc to_s343;
[L2456]              havoc value_s343;
[L2457]              havoc __ret_0_transfer;
[L2458]              havoc spender_s379;
[L2459]              havoc value_s379;
[L2460]              havoc __ret_0_approve;
[L2461]              havoc from_s416;
[L2462]              havoc to_s416;
[L2463]              havoc value_s416;
[L2464]              havoc __ret_0_transferFrom;
[L2465]              havoc value_s229;
[L2466]              havoc name_s264;
[L2467]              havoc symbol_s264;
[L2468]              havoc decimals_s264;
[L2469]              havoc totalSupply_s264;
[L2470]              havoc __ret_0_name;
[L2471]              havoc __ret_0_symbol;
[L2472]              havoc __ret_0_decimals;
[L2473]              havoc spender_s466;
[L2474]              havoc addedValue_s466;
[L2475]              havoc __ret_0_increaseAllowance;
[L2476]              havoc spender_s516;
[L2477]              havoc subtractedValue_s516;
[L2478]              havoc __ret_0_decreaseAllowance;
[L2479]              havoc tmpNow;
[L2480]              havoc gas;
[L2481]              assume gas > 4000000 && gas <= 8000000;
[L2482]              tmpNow := now;
[L2483]              havoc now;
[L2484]              assume now > tmpNow;
[L2485]              assume msgsender_MSG != null;
[L2486]              assume DType[msgsender_MSG] != SafeMath;
[L2487]              assume DType[msgsender_MSG] != IERC20;
[L2488]              assume DType[msgsender_MSG] != FLAMA;
[L2489]              Alloc[msgsender_MSG] := true;
[L2490]  COND FALSE  !(choice == 12)
[L2496]  COND FALSE  !(choice == 11)
[L2502]  COND FALSE  !(choice == 10)
[L2508]  COND FALSE  !(choice == 9)
[L2515]  COND TRUE   choice == 8
[L2516]              gas := gas - 21000;
[L2517]  COND TRUE   gas >= 0
[L2518]              assume value_s379 >= 0 && value_s379 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2519]              assume msgvalue_MSG == 0;
[L2520]  CALL        call __ret_0_approve := approve~address~uint256_FLAMA(this, msgsender_MSG, msgvalue_MSG, spender_s379, value_s379);
[L666]               havoc __exception;
[L667]               revert := false;
[L668]   COND FALSE  !(__exception)
[L689]   CALL        call __ret_0_ := approve~address~uint256_FLAMA__success(this, msgsender_MSG, msgvalue_MSG, spender_s379, value_s379);
[L1572]              __var_1 := null;
[L1573]  COND FALSE  !(!(spender_s379 != null))
[L1577]              sum__allowed1[msgsender_MSG] := sum__allowed1[msgsender_MSG] - _allowed_FLAMA[this][msgsender_MSG][spender_s379];
[L1578]              _allowed_FLAMA[this][msgsender_MSG][spender_s379] := value_s379;
[L1579]              sum__allowed1[msgsender_MSG] := sum__allowed1[msgsender_MSG] + _allowed_FLAMA[this][msgsender_MSG][spender_s379];
[L1580]              assert { :EventEmitted "Approval_FLAMA" } true;
[L1581]              __ret_0_ := true;
[L689]   RET         call __ret_0_ := approve~address~uint256_FLAMA__success(this, msgsender_MSG, msgvalue_MSG, spender_s379, value_s379);
[L690]               assume !revert && gas >= 0;
[L2520]  RET         call __ret_0_approve := approve~address~uint256_FLAMA(this, msgsender_MSG, msgvalue_MSG, spender_s379, value_s379);
[L2590]  RET         call CorralChoice_FLAMA(this);
[L2590]  CALL        call CorralChoice_FLAMA(this);
[L2446]              havoc msgsender_MSG;
[L2447]              havoc msgvalue_MSG;
[L2448]              havoc choice;
[L2449]              havoc __ret_0_totalSupply;
[L2450]              havoc owner_s308;
[L2451]              havoc __ret_0_balanceOf;
[L2452]              havoc owner_s324;
[L2453]              havoc spender_s324;
[L2454]              havoc __ret_0_allowance;
[L2455]              havoc to_s343;
[L2456]              havoc value_s343;
[L2457]              havoc __ret_0_transfer;
[L2458]              havoc spender_s379;
[L2459]              havoc value_s379;
[L2460]              havoc __ret_0_approve;
[L2461]              havoc from_s416;
[L2462]              havoc to_s416;
[L2463]              havoc value_s416;
[L2464]              havoc __ret_0_transferFrom;
[L2465]              havoc value_s229;
[L2466]              havoc name_s264;
[L2467]              havoc symbol_s264;
[L2468]              havoc decimals_s264;
[L2469]              havoc totalSupply_s264;
[L2470]              havoc __ret_0_name;
[L2471]              havoc __ret_0_symbol;
[L2472]              havoc __ret_0_decimals;
[L2473]              havoc spender_s466;
[L2474]              havoc addedValue_s466;
[L2475]              havoc __ret_0_increaseAllowance;
[L2476]              havoc spender_s516;
[L2477]              havoc subtractedValue_s516;
[L2478]              havoc __ret_0_decreaseAllowance;
[L2479]              havoc tmpNow;
[L2480]              havoc gas;
[L2481]              assume gas > 4000000 && gas <= 8000000;
[L2482]              tmpNow := now;
[L2483]              havoc now;
[L2484]              assume now > tmpNow;
[L2485]              assume msgsender_MSG != null;
[L2486]              assume DType[msgsender_MSG] != SafeMath;
[L2487]              assume DType[msgsender_MSG] != IERC20;
[L2488]              assume DType[msgsender_MSG] != FLAMA;
[L2489]              Alloc[msgsender_MSG] := true;
[L2490]  COND FALSE  !(choice == 12)
[L2496]  COND FALSE  !(choice == 11)
[L2502]  COND FALSE  !(choice == 10)
[L2508]  COND TRUE   choice == 9
[L2509]              gas := gas - 21000;
[L2510]  COND TRUE   gas >= 0
[L2511]              assume value_s343 >= 0 && value_s343 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2512]              assume msgvalue_MSG == 0;
[L2513]  CALL        call __ret_0_transfer := transfer~address~uint256_FLAMA(this, msgsender_MSG, msgvalue_MSG, to_s343, value_s343);
[L614]               havoc __exception;
[L615]               revert := false;
[L616]   COND FALSE  !(__exception)
[L637]   CALL        call __ret_0_ := transfer~address~uint256_FLAMA__success(this, msgsender_MSG, msgvalue_MSG, to_s343, value_s343);
[L1546]  CALL        call _transfer~address~address~uint256_FLAMA__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s343, value_s343);
[L1762]              __var_7 := null;
[L1763]  COND FALSE  !(!(to_s598 != null))
[L1767]  CALL        call onePercent_s598 := div~uint256~uint256_SafeMath__success(this, this, 0, value_s598, 100);
[L1267]  COND FALSE  !(!(b_s58 > 0))
[L1271]              c_s58 := nonlinearDiv(a_s58, b_s58) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1272]              __ret_0_ := c_s58;
[L1767]  RET         call onePercent_s598 := div~uint256~uint256_SafeMath__success(this, this, 0, value_s598, 100);
[L1768]  COND FALSE  !(revert)
[L1771]              onePercent_s598 := onePercent_s598;
[L1772]  CALL        call burnAmount_s598 := mul~uint256~uint256_SafeMath__success(this, this, 0, onePercent_s598, 3);
[L1239]  COND TRUE   a_s34 == 0
[L1240]              __ret_0_ := 0;
[L1772]  RET         call burnAmount_s598 := mul~uint256~uint256_SafeMath__success(this, this, 0, onePercent_s598, 3);
[L1773]  COND FALSE  !(revert)
[L1776]              burnAmount_s598 := burnAmount_s598;
[L1777]  CALL        call newTransferAmount_s598 := sub~uint256~uint256_SafeMath__success(this, this, 0, value_s598, burnAmount_s598);
[L1291]  COND FALSE  !(!(b_s82 <= a_s82))
[L1295]              c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1296]              __ret_0_ := c_s82;
[L1777]  RET         call newTransferAmount_s598 := sub~uint256~uint256_SafeMath__success(this, this, 0, value_s598, burnAmount_s598);
[L1778]  COND FALSE  !(revert)
[L1781]              newTransferAmount_s598 := newTransferAmount_s598;
[L1782]  CALL        call __var_8 := sub~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_FLAMA[this], burnAmount_s598);
[L1291]  COND FALSE  !(!(b_s82 <= a_s82))
[L1295]              c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1296]              __ret_0_ := c_s82;
[L1782]  RET         call __var_8 := sub~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_FLAMA[this], burnAmount_s598);
[L1783]  COND FALSE  !(revert)
[L1786]              _totalSupply_FLAMA[this] := __var_8;
[L1787]  CALL        call __var_9 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_FLAMA[this][from_s598], value_s598);
[L1291]  COND FALSE  !(!(b_s82 <= a_s82))
[L1295]              c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1296]              __ret_0_ := c_s82;
[L1787]  RET         call __var_9 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_FLAMA[this][from_s598], value_s598);
[L1788]  COND FALSE  !(revert)
[L1791]              sum__balances0[this] := sum__balances0[this] - _balances_FLAMA[this][from_s598];
[L1792]              _balances_FLAMA[this][from_s598] := __var_9;
[L1793]              sum__balances0[this] := sum__balances0[this] + _balances_FLAMA[this][from_s598];
[L1794]  CALL        call __var_10 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_FLAMA[this][to_s598], newTransferAmount_s598);
[L1315]              c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1316]  COND FALSE  !(!(c_s106 >= a_s106))
[L1320]              __ret_0_ := c_s106;
[L1794]  RET         call __var_10 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_FLAMA[this][to_s598], newTransferAmount_s598);
[L1795]  COND FALSE  !(revert)
[L1798]              sum__balances0[this] := sum__balances0[this] - _balances_FLAMA[this][to_s598];
[L1799]              _balances_FLAMA[this][to_s598] := __var_10;
[L1800]              sum__balances0[this] := sum__balances0[this] + _balances_FLAMA[this][to_s598];
[L1801]              assert { :EventEmitted "Transfer_FLAMA" } true;
[L1802]              assert { :EventEmitted "Transfer_FLAMA" } true;
[L1546]  RET         call _transfer~address~address~uint256_FLAMA__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s343, value_s343);
[L1547]  COND FALSE  !(revert)
[L1550]              __ret_0_ := true;
[L637]   RET         call __ret_0_ := transfer~address~uint256_FLAMA__success(this, msgsender_MSG, msgvalue_MSG, to_s343, value_s343);
[L638]               assume !revert && gas >= 0;
[L2513]  RET         call __ret_0_transfer := transfer~address~uint256_FLAMA(this, msgsender_MSG, msgvalue_MSG, to_s343, value_s343);
[L2590]  RET         call CorralChoice_FLAMA(this);
[L2590]  CALL        call CorralChoice_FLAMA(this);
[L2446]              havoc msgsender_MSG;
[L2447]              havoc msgvalue_MSG;
[L2448]              havoc choice;
[L2449]              havoc __ret_0_totalSupply;
[L2450]              havoc owner_s308;
[L2451]              havoc __ret_0_balanceOf;
[L2452]              havoc owner_s324;
[L2453]              havoc spender_s324;
[L2454]              havoc __ret_0_allowance;
[L2455]              havoc to_s343;
[L2456]              havoc value_s343;
[L2457]              havoc __ret_0_transfer;
[L2458]              havoc spender_s379;
[L2459]              havoc value_s379;
[L2460]              havoc __ret_0_approve;
[L2461]              havoc from_s416;
[L2462]              havoc to_s416;
[L2463]              havoc value_s416;
[L2464]              havoc __ret_0_transferFrom;
[L2465]              havoc value_s229;
[L2466]              havoc name_s264;
[L2467]              havoc symbol_s264;
[L2468]              havoc decimals_s264;
[L2469]              havoc totalSupply_s264;
[L2470]              havoc __ret_0_name;
[L2471]              havoc __ret_0_symbol;
[L2472]              havoc __ret_0_decimals;
[L2473]              havoc spender_s466;
[L2474]              havoc addedValue_s466;
[L2475]              havoc __ret_0_increaseAllowance;
[L2476]              havoc spender_s516;
[L2477]              havoc subtractedValue_s516;
[L2478]              havoc __ret_0_decreaseAllowance;
[L2479]              havoc tmpNow;
[L2480]              havoc gas;
[L2481]              assume gas > 4000000 && gas <= 8000000;
[L2482]              tmpNow := now;
[L2483]              havoc now;
[L2484]              assume now > tmpNow;
[L2485]              assume msgsender_MSG != null;
[L2486]              assume DType[msgsender_MSG] != SafeMath;
[L2487]              assume DType[msgsender_MSG] != IERC20;
[L2488]              assume DType[msgsender_MSG] != FLAMA;
[L2489]              Alloc[msgsender_MSG] := true;
[L2490]  COND FALSE  !(choice == 12)
[L2496]  COND FALSE  !(choice == 11)
[L2502]  COND FALSE  !(choice == 10)
[L2508]  COND FALSE  !(choice == 9)
[L2515]  COND FALSE  !(choice == 8)
[L2522]  COND TRUE   choice == 7
[L2523]              gas := gas - 21000;
[L2524]  COND TRUE   gas >= 0
[L2525]              assume value_s416 >= 0 && value_s416 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2526]              assume msgvalue_MSG == 0;
[L2527]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_FLAMA(this, msgsender_MSG, msgvalue_MSG, from_s416, to_s416, value_s416);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((((from_s416 != to_s416 && ((value_s416 > _balances_FLAMA[this][from_s416] || value_s416 > _allowed_FLAMA[this][from_s416][msgsender_MSG]) || _balances_FLAMA[this][to_s416] + value_s416 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && value_s416 >= 0) && value_s416 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_FLAMA[this][to_s416] >= 0) && _balances_FLAMA[this][to_s416] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_FLAMA[this][from_s416] >= 0) && _balances_FLAMA[this][from_s416] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowed_FLAMA[this][from_s416][msgsender_MSG] >= 0) && _allowed_FLAMA[this][from_s416][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transferFrom_FLAMA0 := true;
[L2]                 call_transferFrom_FLAMA0 := false;
[L2]                 revert := revert_hold;
[L721]               havoc __exception;
[L722]               revert := false;
[L723]   COND FALSE  !(__exception)
[L744]   CALL        call __ret_0_ := transferFrom~address~address~uint256_FLAMA__success(this, msgsender_MSG, msgvalue_MSG, from_s416, to_s416, value_s416);
[L1606]  CALL        call __var_2 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowed_FLAMA[this][from_s416][msgsender_MSG], value_s416);
[L1291]  COND FALSE  !(!(b_s82 <= a_s82))
[L1295]              c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1296]              __ret_0_ := c_s82;
[L1606]  RET         call __var_2 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowed_FLAMA[this][from_s416][msgsender_MSG], value_s416);
[L1607]  COND FALSE  !(revert)
[L1610]              sum__allowed1[from_s416] := sum__allowed1[from_s416] - _allowed_FLAMA[this][from_s416][msgsender_MSG];
[L1611]              _allowed_FLAMA[this][from_s416][msgsender_MSG] := __var_2;
[L1612]              sum__allowed1[from_s416] := sum__allowed1[from_s416] + _allowed_FLAMA[this][from_s416][msgsender_MSG];
[L1613]  CALL        call _transfer~address~address~uint256_FLAMA__success(this, msgsender_MSG, msgvalue_MSG, from_s416, to_s416, value_s416);
[L1762]              __var_7 := null;
[L1763]  COND FALSE  !(!(to_s598 != null))
[L1767]  CALL        call onePercent_s598 := div~uint256~uint256_SafeMath__success(this, this, 0, value_s598, 100);
[L1267]  COND FALSE  !(!(b_s58 > 0))
[L1271]              c_s58 := nonlinearDiv(a_s58, b_s58) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1272]              __ret_0_ := c_s58;
[L1767]  RET         call onePercent_s598 := div~uint256~uint256_SafeMath__success(this, this, 0, value_s598, 100);
[L1768]  COND FALSE  !(revert)
[L1771]              onePercent_s598 := onePercent_s598;
[L1772]  CALL        call burnAmount_s598 := mul~uint256~uint256_SafeMath__success(this, this, 0, onePercent_s598, 3);
[L1239]  COND FALSE  !(a_s34 == 0)
[L1243]              c_s34 := nonlinearMul(a_s34, b_s34) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1244]  COND FALSE  !(!(nonlinearDiv(c_s34, a_s34) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 == b_s34))
[L1248]              __ret_0_ := c_s34;
[L1772]  RET         call burnAmount_s598 := mul~uint256~uint256_SafeMath__success(this, this, 0, onePercent_s598, 3);
[L1773]  COND FALSE  !(revert)
[L1776]              burnAmount_s598 := burnAmount_s598;
[L1777]  CALL        call newTransferAmount_s598 := sub~uint256~uint256_SafeMath__success(this, this, 0, value_s598, burnAmount_s598);
[L1291]  COND FALSE  !(!(b_s82 <= a_s82))
[L1295]              c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1296]              __ret_0_ := c_s82;
[L1777]  RET         call newTransferAmount_s598 := sub~uint256~uint256_SafeMath__success(this, this, 0, value_s598, burnAmount_s598);
[L1778]  COND FALSE  !(revert)
[L1781]              newTransferAmount_s598 := newTransferAmount_s598;
[L1782]  CALL        call __var_8 := sub~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_FLAMA[this], burnAmount_s598);
[L1291]  COND FALSE  !(!(b_s82 <= a_s82))
[L1295]              c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1296]              __ret_0_ := c_s82;
[L1782]  RET         call __var_8 := sub~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_FLAMA[this], burnAmount_s598);
[L1783]  COND FALSE  !(revert)
[L1786]              _totalSupply_FLAMA[this] := __var_8;
[L1787]  CALL        call __var_9 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_FLAMA[this][from_s598], value_s598);
[L1291]  COND FALSE  !(!(b_s82 <= a_s82))
[L1295]              c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1296]              __ret_0_ := c_s82;
[L1787]  RET         call __var_9 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_FLAMA[this][from_s598], value_s598);
[L1788]  COND FALSE  !(revert)
[L1791]              sum__balances0[this] := sum__balances0[this] - _balances_FLAMA[this][from_s598];
[L1792]              _balances_FLAMA[this][from_s598] := __var_9;
[L1793]              sum__balances0[this] := sum__balances0[this] + _balances_FLAMA[this][from_s598];
[L1794]  CALL        call __var_10 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_FLAMA[this][to_s598], newTransferAmount_s598);
[L1315]              c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1316]  COND FALSE  !(!(c_s106 >= a_s106))
[L1320]              __ret_0_ := c_s106;
[L1794]  RET         call __var_10 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_FLAMA[this][to_s598], newTransferAmount_s598);
[L1795]  COND FALSE  !(revert)
[L1798]              sum__balances0[this] := sum__balances0[this] - _balances_FLAMA[this][to_s598];
[L1799]              _balances_FLAMA[this][to_s598] := __var_10;
[L1800]              sum__balances0[this] := sum__balances0[this] + _balances_FLAMA[this][to_s598];
[L1801]              assert { :EventEmitted "Transfer_FLAMA" } true;
[L1802]              assert { :EventEmitted "Transfer_FLAMA" } true;
[L1613]  RET         call _transfer~address~address~uint256_FLAMA__success(this, msgsender_MSG, msgvalue_MSG, from_s416, to_s416, value_s416);
[L1614]  COND FALSE  !(revert)
[L1617]              __ret_0_ := true;
[L744]   RET         call __ret_0_ := transferFrom~address~address~uint256_FLAMA__success(this, msgsender_MSG, msgvalue_MSG, from_s416, to_s416, value_s416);
[L745]               assume !revert && gas >= 0;
[L2527]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_FLAMA(this, msgsender_MSG, msgvalue_MSG, from_s416, to_s416, value_s416);
[L2590]  RET         call CorralChoice_FLAMA(this);

Loop:
[L2590]  CALL        call CorralChoice_FLAMA(this);
[L2446]              havoc msgsender_MSG;
[L2447]              havoc msgvalue_MSG;
[L2448]              havoc choice;
[L2449]              havoc __ret_0_totalSupply;
[L2450]              havoc owner_s308;
[L2451]              havoc __ret_0_balanceOf;
[L2452]              havoc owner_s324;
[L2453]              havoc spender_s324;
[L2454]              havoc __ret_0_allowance;
[L2455]              havoc to_s343;
[L2456]              havoc value_s343;
[L2457]              havoc __ret_0_transfer;
[L2458]              havoc spender_s379;
[L2459]              havoc value_s379;
[L2460]              havoc __ret_0_approve;
[L2461]              havoc from_s416;
[L2462]              havoc to_s416;
[L2463]              havoc value_s416;
[L2464]              havoc __ret_0_transferFrom;
[L2465]              havoc value_s229;
[L2466]              havoc name_s264;
[L2467]              havoc symbol_s264;
[L2468]              havoc decimals_s264;
[L2469]              havoc totalSupply_s264;
[L2470]              havoc __ret_0_name;
[L2471]              havoc __ret_0_symbol;
[L2472]              havoc __ret_0_decimals;
[L2473]              havoc spender_s466;
[L2474]              havoc addedValue_s466;
[L2475]              havoc __ret_0_increaseAllowance;
[L2476]              havoc spender_s516;
[L2477]              havoc subtractedValue_s516;
[L2478]              havoc __ret_0_decreaseAllowance;
[L2479]              havoc tmpNow;
[L2480]              havoc gas;
[L2481]              assume gas > 4000000 && gas <= 8000000;
[L2482]              tmpNow := now;
[L2483]              havoc now;
[L2484]              assume now > tmpNow;
[L2485]              assume msgsender_MSG != null;
[L2486]              assume DType[msgsender_MSG] != SafeMath;
[L2487]              assume DType[msgsender_MSG] != IERC20;
[L2488]              assume DType[msgsender_MSG] != FLAMA;
[L2489]              Alloc[msgsender_MSG] := true;
[L2490]  COND FALSE  !(choice == 12)
[L2496]  COND FALSE  !(choice == 11)
[L2502]  COND FALSE  !(choice == 10)
[L2508]  COND FALSE  !(choice == 9)
[L2515]  COND FALSE  !(choice == 8)
[L2522]  COND TRUE   choice == 7
[L2523]              gas := gas - 21000;
[L2524]  COND TRUE   gas >= 0
[L2525]              assume value_s416 >= 0 && value_s416 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2526]              assume msgvalue_MSG == 0;
[L2527]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_FLAMA(this, msgsender_MSG, msgvalue_MSG, from_s416, to_s416, value_s416);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((((from_s416 != to_s416 && ((value_s416 > _balances_FLAMA[this][from_s416] || value_s416 > _allowed_FLAMA[this][from_s416][msgsender_MSG]) || _balances_FLAMA[this][to_s416] + value_s416 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && value_s416 >= 0) && value_s416 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_FLAMA[this][to_s416] >= 0) && _balances_FLAMA[this][to_s416] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_FLAMA[this][from_s416] >= 0) && _balances_FLAMA[this][from_s416] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowed_FLAMA[this][from_s416][msgsender_MSG] >= 0) && _allowed_FLAMA[this][from_s416][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transferFrom_FLAMA0 := true;
[L2]                 call_transferFrom_FLAMA0 := false;
[L2]                 revert := revert_hold;
[L721]               havoc __exception;
[L722]               revert := false;
[L723]   COND FALSE  !(__exception)
[L744]   CALL        call __ret_0_ := transferFrom~address~address~uint256_FLAMA__success(this, msgsender_MSG, msgvalue_MSG, from_s416, to_s416, value_s416);
[L1606]  CALL        call __var_2 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowed_FLAMA[this][from_s416][msgsender_MSG], value_s416);
[L1291]  COND FALSE  !(!(b_s82 <= a_s82))
[L1295]              c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1296]              __ret_0_ := c_s82;
[L1606]  RET         call __var_2 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowed_FLAMA[this][from_s416][msgsender_MSG], value_s416);
[L1607]  COND FALSE  !(revert)
[L1610]              sum__allowed1[from_s416] := sum__allowed1[from_s416] - _allowed_FLAMA[this][from_s416][msgsender_MSG];
[L1611]              _allowed_FLAMA[this][from_s416][msgsender_MSG] := __var_2;
[L1612]              sum__allowed1[from_s416] := sum__allowed1[from_s416] + _allowed_FLAMA[this][from_s416][msgsender_MSG];
[L1613]  CALL        call _transfer~address~address~uint256_FLAMA__success(this, msgsender_MSG, msgvalue_MSG, from_s416, to_s416, value_s416);
[L1762]              __var_7 := null;
[L1763]  COND FALSE  !(!(to_s598 != null))
[L1767]  CALL        call onePercent_s598 := div~uint256~uint256_SafeMath__success(this, this, 0, value_s598, 100);
[L1267]  COND FALSE  !(!(b_s58 > 0))
[L1271]              c_s58 := nonlinearDiv(a_s58, b_s58) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1272]              __ret_0_ := c_s58;
[L1767]  RET         call onePercent_s598 := div~uint256~uint256_SafeMath__success(this, this, 0, value_s598, 100);
[L1768]  COND FALSE  !(revert)
[L1771]              onePercent_s598 := onePercent_s598;
[L1772]  CALL        call burnAmount_s598 := mul~uint256~uint256_SafeMath__success(this, this, 0, onePercent_s598, 3);
[L1239]  COND FALSE  !(a_s34 == 0)
[L1243]              c_s34 := nonlinearMul(a_s34, b_s34) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1244]  COND FALSE  !(!(nonlinearDiv(c_s34, a_s34) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 == b_s34))
[L1248]              __ret_0_ := c_s34;
[L1772]  RET         call burnAmount_s598 := mul~uint256~uint256_SafeMath__success(this, this, 0, onePercent_s598, 3);
[L1773]  COND FALSE  !(revert)
[L1776]              burnAmount_s598 := burnAmount_s598;
[L1777]  CALL        call newTransferAmount_s598 := sub~uint256~uint256_SafeMath__success(this, this, 0, value_s598, burnAmount_s598);
[L1291]  COND FALSE  !(!(b_s82 <= a_s82))
[L1295]              c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1296]              __ret_0_ := c_s82;
[L1777]  RET         call newTransferAmount_s598 := sub~uint256~uint256_SafeMath__success(this, this, 0, value_s598, burnAmount_s598);
[L1778]  COND FALSE  !(revert)
[L1781]              newTransferAmount_s598 := newTransferAmount_s598;
[L1782]  CALL        call __var_8 := sub~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_FLAMA[this], burnAmount_s598);
[L1291]  COND FALSE  !(!(b_s82 <= a_s82))
[L1295]              c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1296]              __ret_0_ := c_s82;
[L1782]  RET         call __var_8 := sub~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_FLAMA[this], burnAmount_s598);
[L1783]  COND FALSE  !(revert)
[L1786]              _totalSupply_FLAMA[this] := __var_8;
[L1787]  CALL        call __var_9 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_FLAMA[this][from_s598], value_s598);
[L1291]  COND FALSE  !(!(b_s82 <= a_s82))
[L1295]              c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1296]              __ret_0_ := c_s82;
[L1787]  RET         call __var_9 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_FLAMA[this][from_s598], value_s598);
[L1788]  COND FALSE  !(revert)
[L1791]              sum__balances0[this] := sum__balances0[this] - _balances_FLAMA[this][from_s598];
[L1792]              _balances_FLAMA[this][from_s598] := __var_9;
[L1793]              sum__balances0[this] := sum__balances0[this] + _balances_FLAMA[this][from_s598];
[L1794]  CALL        call __var_10 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_FLAMA[this][to_s598], newTransferAmount_s598);
[L1315]              c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1316]  COND FALSE  !(!(c_s106 >= a_s106))
[L1320]              __ret_0_ := c_s106;
[L1794]  RET         call __var_10 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_FLAMA[this][to_s598], newTransferAmount_s598);
[L1795]  COND FALSE  !(revert)
[L1798]              sum__balances0[this] := sum__balances0[this] - _balances_FLAMA[this][to_s598];
[L1799]              _balances_FLAMA[this][to_s598] := __var_10;
[L1800]              sum__balances0[this] := sum__balances0[this] + _balances_FLAMA[this][to_s598];
[L1801]              assert { :EventEmitted "Transfer_FLAMA" } true;
[L1802]              assert { :EventEmitted "Transfer_FLAMA" } true;
[L1613]  RET         call _transfer~address~address~uint256_FLAMA__success(this, msgsender_MSG, msgvalue_MSG, from_s416, to_s416, value_s416);
[L1614]  COND FALSE  !(revert)
[L1617]              __ret_0_ := true;
[L744]   RET         call __ret_0_ := transferFrom~address~address~uint256_FLAMA__success(this, msgsender_MSG, msgvalue_MSG, from_s416, to_s416, value_s416);
[L745]               assume !revert && gas >= 0;
[L2527]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_FLAMA(this, msgsender_MSG, msgvalue_MSG, from_s416, to_s416, value_s416);
[L2590]  RET         call CorralChoice_FLAMA(this);

[2020-11-25 16:33:20,235 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 16:33:20,235 INFO  L82        PathProgramCache]: Analyzing trace with hash 2136863618, now seen corresponding path program 1 times
[2020-11-25 16:33:20,236 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 16:33:20,283 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-25 16:33:20,326 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-25 16:33:20,402 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 16:33:20,402 INFO  L82        PathProgramCache]: Analyzing trace with hash -822242219, now seen corresponding path program 1 times
[2020-11-25 16:33:20,403 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 16:33:20,413 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-25 16:33:20,423 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-25 16:33:20,434 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 16:33:20,435 INFO  L82        PathProgramCache]: Analyzing trace with hash -1463438924, now seen corresponding path program 1 times
[2020-11-25 16:33:20,435 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 16:33:20,521 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-25 16:33:20,606 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-25 16:33:21,201 WARN  L188               SmtUtils]: Spent 482.00 ms on a formula simplification. DAG size of input: 219 DAG size of output: 214
Garbage collection #1: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #2: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #3: 317 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 317 to 631
Garbage collection #4: 631 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 631 to 1259
Garbage collection #5: 1259 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1259 to 2503
Garbage collection #6: 2503 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2503 to 5003
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 199 to 397
[2020-11-25 16:33:21,442 WARN  L188               SmtUtils]: Spent 121.00 ms on a formula simplification that was a NOOP. DAG size: 111
Garbage collection #1: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #2: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #3: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #4: 277 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 277 to 547
Garbage collection #5: 547 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 547 to 1093
[2020-11-25 16:33:21,719 WARN  L188               SmtUtils]: Spent 217.00 ms on a formula simplification. DAG size of input: 153 DAG size of output: 152
Garbage collection #1: 47 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 47 to 89
Garbage collection #2: 89 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 89 to 173
Garbage collection #3: 173 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 173 to 337
Garbage collection #4: 337 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 337 to 673
Garbage collection #5: 673 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 673 to 1327
[2020-11-25 16:33:21,947 WARN  L188               SmtUtils]: Spent 171.00 ms on a formula simplification. DAG size of input: 136 DAG size of output: 131
Garbage collection #1: 41 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 41 to 79
Garbage collection #2: 79 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 79 to 157
Garbage collection #3: 157 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 157 to 313
Garbage collection #4: 313 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 313 to 619
Garbage collection #5: 619 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 619 to 1237
[2020-11-25 16:33:22,380 WARN  L188               SmtUtils]: Spent 355.00 ms on a formula simplification. DAG size of input: 162 DAG size of output: 151
Garbage collection #1: 47 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 47 to 89
Garbage collection #2: 89 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 89 to 173
Garbage collection #3: 173 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 173 to 337
Garbage collection #4: 337 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 337 to 673
Garbage collection #5: 673 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 673 to 1327
Garbage collection #6: 1327 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 1327 to 2647
Garbage collection #1: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #2: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #3: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #4: 223 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 223 to 443
Garbage collection #5: 443 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 443 to 883
[2020-11-25 16:33:22,541 WARN  L188               SmtUtils]: Spent 149.00 ms on a formula simplification that was a NOOP. DAG size: 107
[2020-11-25 16:33:23,254 WARN  L188               SmtUtils]: Spent 711.00 ms on a formula simplification. DAG size of input: 250 DAG size of output: 245
Garbage collection #1: 89 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 89 to 173
Garbage collection #2: 173 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 173 to 337
Garbage collection #3: 337 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 337 to 673
Garbage collection #4: 673 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 673 to 1327
Garbage collection #5: 1327 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 1327 to 2647
Garbage collection #6: 2647 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 2647 to 5281
[2020-11-25 16:33:23,883 WARN  L188               SmtUtils]: Spent 623.00 ms on a formula simplification that was a NOOP. DAG size: 228
[2020-11-25 16:33:25,034 WARN  L188               SmtUtils]: Spent 1.15 s on a formula simplification. DAG size of input: 282 DAG size of output: 263
Garbage collection #1: 89 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 89 to 173
Garbage collection #2: 173 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 173 to 337
Garbage collection #3: 337 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 337 to 673
Garbage collection #4: 673 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 673 to 1327
Garbage collection #5: 1327 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1327 to 2647
Garbage collection #6: 2647 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 2647 to 5281
Garbage collection #7: 5281 nodes / 0 free / 0.001s / 0.002s total
Resizing node table from 5281 to 10559
Garbage collection #1: 59 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 59 to 113
Garbage collection #2: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #3: 223 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 223 to 443
Garbage collection #4: 443 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 443 to 883
Garbage collection #5: 883 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 883 to 1759
Garbage collection #6: 1759 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1759 to 3517
[2020-11-25 16:33:25,378 WARN  L188               SmtUtils]: Spent 329.00 ms on a formula simplification that was a NOOP. DAG size: 189
[2020-11-25 16:33:25,833 WARN  L188               SmtUtils]: Spent 453.00 ms on a formula simplification that was a NOOP. DAG size: 311
Garbage collection #1: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #2: 223 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 223 to 443
Garbage collection #3: 443 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 443 to 883
Garbage collection #4: 883 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 883 to 1759
Garbage collection #5: 1759 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1759 to 3517
Garbage collection #6: 3517 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3517 to 7027
Garbage collection #7: 7027 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 7027 to 14051
[2020-11-25 16:33:26,326 WARN  L188               SmtUtils]: Spent 486.00 ms on a formula simplification that was a NOOP. DAG size: 252
[2020-11-25 16:33:26,794 WARN  L188               SmtUtils]: Spent 466.00 ms on a formula simplification that was a NOOP. DAG size: 252
Garbage collection #1: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #2: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #3: 317 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 317 to 631
Garbage collection #4: 631 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 631 to 1259
Garbage collection #5: 1259 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 1259 to 2503
Garbage collection #6: 2503 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 2503 to 5003
Garbage collection #7: 5003 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 5003 to 9973
Garbage collection #1: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #2: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #3: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #4: 397 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 397 to 787
Garbage collection #5: 787 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 787 to 1571
Garbage collection #6: 1571 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1571 to 3137
[2020-11-25 16:33:27,150 WARN  L188               SmtUtils]: Spent 335.00 ms on a formula simplification that was a NOOP. DAG size: 181
[2020-11-25 16:33:27,167 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #1: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #2: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #3: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #4: 277 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 277 to 547
Garbage collection #5: 547 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 547 to 1093
Garbage collection #1: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #2: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #3: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #4: 277 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 277 to 547
Garbage collection #5: 547 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 547 to 1093
Garbage collection #1: 41 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 41 to 79
Garbage collection #2: 79 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 79 to 157
Garbage collection #3: 157 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 157 to 313
Garbage collection #4: 313 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 313 to 619
Garbage collection #5: 619 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 619 to 1237
Garbage collection #1: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #2: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #3: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #4: 223 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 223 to 443
Garbage collection #5: 443 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 443 to 883
Garbage collection #1: 79 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 79 to 157
Garbage collection #2: 157 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 157 to 313
Garbage collection #3: 313 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 313 to 619
Garbage collection #4: 619 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 619 to 1237
Garbage collection #5: 1237 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1237 to 2473
Garbage collection #6: 2473 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2473 to 4943
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 59 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 59 to 113
Garbage collection #2: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #3: 223 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 223 to 443
Garbage collection #4: 443 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 443 to 883
Garbage collection #5: 883 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 883 to 1759
Garbage collection #1: 67 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 67 to 131
Garbage collection #2: 131 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 131 to 257
Garbage collection #3: 257 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 257 to 509
Garbage collection #4: 509 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 509 to 1013
Garbage collection #5: 1013 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1013 to 2017
Garbage collection #6: 2017 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2017 to 4027
Garbage collection #1: 41 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 41 to 79
Garbage collection #2: 79 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 79 to 157
Garbage collection #3: 157 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 157 to 313
Garbage collection #4: 313 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 313 to 619
Garbage collection #5: 619 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 619 to 1237
Garbage collection #1: 97 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 97 to 193
Garbage collection #2: 193 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 193 to 383
Garbage collection #3: 383 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 383 to 761
Garbage collection #4: 761 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 761 to 1511
Garbage collection #5: 1511 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1511 to 3019
Garbage collection #6: 3019 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3019 to 6037
[2020-11-25 16:33:28,033 WARN  L188               SmtUtils]: Spent 367.00 ms on a formula simplification. DAG size of input: 209 DAG size of output: 204
Garbage collection #1: 79 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 79 to 157
Garbage collection #2: 157 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 157 to 313
Garbage collection #3: 313 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 313 to 619
Garbage collection #4: 619 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 619 to 1237
Garbage collection #5: 1237 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1237 to 2473
Garbage collection #6: 2473 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2473 to 4943
Garbage collection #1: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #2: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #3: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #4: 277 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 277 to 547
Garbage collection #5: 547 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 547 to 1093
Garbage collection #1: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #2: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #3: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #4: 223 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 223 to 443
Garbage collection #5: 443 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 443 to 883
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
[2020-11-25 16:33:28,458 WARN  L188               SmtUtils]: Spent 139.00 ms on a formula simplification. DAG size of input: 177 DAG size of output: 172
Garbage collection #1: 67 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 67 to 131
Garbage collection #2: 131 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 131 to 257
Garbage collection #3: 257 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 257 to 509
Garbage collection #4: 509 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 509 to 1013
Garbage collection #5: 1013 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1013 to 2017
[2020-11-25 16:33:28,702 WARN  L188               SmtUtils]: Spent 178.00 ms on a formula simplification. DAG size of input: 210 DAG size of output: 199
Garbage collection #1: 71 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 71 to 139
Garbage collection #2: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #3: 277 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 277 to 547
Garbage collection #4: 547 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 547 to 1093
Garbage collection #5: 1093 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1093 to 2179
Garbage collection #6: 2179 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2179 to 4357
Garbage collection #1: 47 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 47 to 89
Garbage collection #2: 89 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 89 to 173
Garbage collection #3: 173 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 173 to 337
Garbage collection #4: 337 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 337 to 673
Garbage collection #5: 673 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 673 to 1327
[2020-11-25 16:33:28,881 WARN  L188               SmtUtils]: Spent 130.00 ms on a formula simplification that was a NOOP. DAG size: 264
Garbage collection #1: 101 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 101 to 199
Garbage collection #2: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #3: 397 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 397 to 787
Garbage collection #4: 787 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 787 to 1571
Garbage collection #5: 1571 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1571 to 3137
Garbage collection #6: 3137 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3137 to 6271
[2020-11-25 16:33:29,436 WARN  L188               SmtUtils]: Spent 415.00 ms on a formula simplification. DAG size of input: 219 DAG size of output: 214
Garbage collection #1: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #2: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #3: 317 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 317 to 631
Garbage collection #4: 631 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 631 to 1259
Garbage collection #5: 1259 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1259 to 2503
Garbage collection #6: 2503 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2503 to 5003
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #2: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #3: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #4: 277 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 277 to 547
Garbage collection #5: 547 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 547 to 1093
[2020-11-25 16:33:29,779 WARN  L188               SmtUtils]: Spent 209.00 ms on a formula simplification. DAG size of input: 153 DAG size of output: 152
Garbage collection #1: 47 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 47 to 89
Garbage collection #2: 89 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 89 to 173
Garbage collection #3: 173 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 173 to 337
Garbage collection #4: 337 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 337 to 673
Garbage collection #5: 673 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 673 to 1327
[2020-11-25 16:33:29,998 WARN  L188               SmtUtils]: Spent 170.00 ms on a formula simplification. DAG size of input: 136 DAG size of output: 131
Garbage collection #1: 41 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 41 to 79
Garbage collection #2: 79 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 79 to 157
Garbage collection #3: 157 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 157 to 313
Garbage collection #4: 313 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 313 to 619
Garbage collection #5: 619 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 619 to 1237
[2020-11-25 16:33:30,384 WARN  L188               SmtUtils]: Spent 309.00 ms on a formula simplification. DAG size of input: 162 DAG size of output: 151
Garbage collection #1: 47 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 47 to 89
Garbage collection #2: 89 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 89 to 173
Garbage collection #3: 173 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 173 to 337
Garbage collection #4: 337 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 337 to 673
Garbage collection #5: 673 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 673 to 1327
Garbage collection #1: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #2: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #3: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #4: 223 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 223 to 443
Garbage collection #5: 443 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 443 to 883
[2020-11-25 16:33:30,528 WARN  L188               SmtUtils]: Spent 141.00 ms on a formula simplification that was a NOOP. DAG size: 107
[2020-11-25 16:33:31,132 WARN  L188               SmtUtils]: Spent 603.00 ms on a formula simplification. DAG size of input: 250 DAG size of output: 245
Garbage collection #1: 89 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 89 to 173
Garbage collection #2: 173 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 173 to 337
Garbage collection #3: 337 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 337 to 673
Garbage collection #4: 673 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 673 to 1327
Garbage collection #5: 1327 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1327 to 2647
Garbage collection #6: 2647 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2647 to 5281
[2020-11-25 16:33:31,555 WARN  L188               SmtUtils]: Spent 420.00 ms on a formula simplification that was a NOOP. DAG size: 228
[2020-11-25 16:33:32,452 WARN  L188               SmtUtils]: Spent 896.00 ms on a formula simplification. DAG size of input: 281 DAG size of output: 263
Garbage collection #1: 89 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 89 to 173
Garbage collection #2: 173 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 173 to 337
Garbage collection #3: 337 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 337 to 673
Garbage collection #4: 673 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 673 to 1327
Garbage collection #5: 1327 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1327 to 2647
Garbage collection #6: 2647 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2647 to 5281
Garbage collection #7: 5281 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 5281 to 10559
Garbage collection #1: 59 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 59 to 113
Garbage collection #2: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #3: 223 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 223 to 443
Garbage collection #4: 443 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 443 to 883
Garbage collection #5: 883 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 883 to 1759
Garbage collection #6: 1759 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1759 to 3517
[2020-11-25 16:33:32,785 WARN  L188               SmtUtils]: Spent 325.00 ms on a formula simplification that was a NOOP. DAG size: 189
[2020-11-25 16:33:33,251 WARN  L188               SmtUtils]: Spent 465.00 ms on a formula simplification that was a NOOP. DAG size: 311
Garbage collection #1: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #2: 223 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 223 to 443
Garbage collection #3: 443 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 443 to 883
Garbage collection #4: 883 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 883 to 1759
Garbage collection #5: 1759 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1759 to 3517
Garbage collection #6: 3517 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3517 to 7027
Garbage collection #7: 7027 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 7027 to 14051
[2020-11-25 16:33:33,715 WARN  L188               SmtUtils]: Spent 459.00 ms on a formula simplification that was a NOOP. DAG size: 252
[2020-11-25 16:33:48,524 WARN  L188               SmtUtils]: Spent 14.81 s on a formula simplification. DAG size of input: 757 DAG size of output: 739
Garbage collection #1: 293 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 293 to 577
Garbage collection #2: 577 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 577 to 1153
Garbage collection #3: 1153 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1153 to 2297
Garbage collection #4: 2297 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2297 to 4591
Garbage collection #5: 4591 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 4591 to 9181
Garbage collection #6: 9181 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 9181 to 18353
Garbage collection #7: 18353 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 18353 to 36697
Garbage collection #8: 36697 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 36697 to 73387
Garbage collection #1: 79 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 79 to 157
Garbage collection #2: 157 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 157 to 313
Garbage collection #3: 313 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 313 to 619
Garbage collection #4: 619 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 619 to 1237
Garbage collection #5: 1237 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1237 to 2473
Garbage collection #6: 2473 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2473 to 4943
[2020-11-25 16:33:49,890 WARN  L188               SmtUtils]: Spent 1.34 s on a formula simplification that was a NOOP. DAG size: 285
[2020-11-25 16:33:52,296 WARN  L188               SmtUtils]: Spent 2.40 s on a formula simplification that was a NOOP. DAG size: 354
Garbage collection #1: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #2: 199 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 199 to 397
Garbage collection #3: 397 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 397 to 787
Garbage collection #4: 787 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 787 to 1571
Garbage collection #5: 1571 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 1571 to 3137
Garbage collection #6: 3137 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 3137 to 6271
Garbage collection #1: 71 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 71 to 139
Garbage collection #2: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #3: 277 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 277 to 547
Garbage collection #4: 547 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 547 to 1093
Garbage collection #5: 1093 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1093 to 2179
Garbage collection #6: 2179 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2179 to 4357
[2020-11-25 16:33:53,905 WARN  L188               SmtUtils]: Spent 1.60 s on a formula simplification that was a NOOP. DAG size: 285
[2020-11-25 16:33:59,274 WARN  L188               SmtUtils]: Spent 5.37 s on a formula simplification. DAG size of input: 356 DAG size of output: 355
Garbage collection #1: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #2: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #3: 397 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 397 to 787
Garbage collection #4: 787 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 787 to 1571
Garbage collection #5: 1571 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1571 to 3137
Garbage collection #6: 3137 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3137 to 6271
Garbage collection #1: 101 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 101 to 199
Garbage collection #2: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #3: 397 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 397 to 787
Garbage collection #4: 787 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 787 to 1571
Garbage collection #5: 1571 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1571 to 3137
Garbage collection #6: 3137 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3137 to 6271
[2020-11-25 16:34:01,701 WARN  L188               SmtUtils]: Spent 2.42 s on a formula simplification that was a NOOP. DAG size: 351
[2020-11-25 16:34:01,756 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 16:34:01,767 INFO  L216          LassoAnalysis]: Preferences:
[2020-11-25 16:34:01,767 INFO  L124   ssoRankerPreferences]: Compute integeral hull: false
[2020-11-25 16:34:01,768 INFO  L125   ssoRankerPreferences]: Enable LassoPartitioneer: true
[2020-11-25 16:34:01,768 INFO  L126   ssoRankerPreferences]: Term annotations enabled: false
[2020-11-25 16:34:01,768 INFO  L127   ssoRankerPreferences]: Use exernal solver: true
[2020-11-25 16:34:01,768 INFO  L128   ssoRankerPreferences]: SMT solver command: z3 SMTLIB2_COMPLIANT=true -memory:1024 -smt2 -in -t:12000
[2020-11-25 16:34:01,768 INFO  L129   ssoRankerPreferences]: Dump SMT script to file: false
[2020-11-25 16:34:01,768 INFO  L130   ssoRankerPreferences]: Path of dumped script: 
[2020-11-25 16:34:01,768 INFO  L131   ssoRankerPreferences]: Filename of dumped script: FLAMA_0x2afd9ce07d4186e8f3671d52200850760a8e1f70_transferfrom-fail.bpl_BEv2_Iteration9_Lasso
[2020-11-25 16:34:01,768 INFO  L132   ssoRankerPreferences]: MapElimAlgo: Frank
[2020-11-25 16:34:01,768 INFO  L282          LassoAnalysis]: Starting lasso preprocessing...
Garbage collection #1: 107 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 107 to 211
Garbage collection #2: 211 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 211 to 421
Garbage collection #3: 421 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 421 to 839
Garbage collection #4: 839 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 839 to 1669
Garbage collection #5: 1669 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1669 to 3331
Garbage collection #6: 3331 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3331 to 6661
Garbage collection #1: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #2: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #3: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #4: 397 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 397 to 787
Garbage collection #5: 787 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 787 to 1571
Garbage collection #6: 1571 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1571 to 3137
[2020-11-25 16:34:01,880 FATAL L292        ToolchainWalker]: The Plugin de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer has thrown an exception:
java.lang.UnsupportedOperationException: function symbols not yet supported
	at de.uni_freiburg.informatik.ultimate.lassoranker.variables.LassoPartitioneer.addInOuAuxVar(LassoPartitioneer.java:238)
	at de.uni_freiburg.informatik.ultimate.lassoranker.variables.LassoPartitioneer.constructTransFormulaLR(LassoPartitioneer.java:210)
	at de.uni_freiburg.informatik.ultimate.lassoranker.variables.LassoPartitioneer.doPartition(LassoPartitioneer.java:165)
	at de.uni_freiburg.informatik.ultimate.lassoranker.variables.LassoPartitioneer.<init>(LassoPartitioneer.java:95)
	at de.uni_freiburg.informatik.ultimate.lassoranker.preprocessors.LassoPartitioneerPreprocessor.process(LassoPartitioneerPreprocessor.java:65)
	at de.uni_freiburg.informatik.ultimate.lassoranker.variables.LassoBuilder.applyPreprocessor(LassoBuilder.java:154)
	at de.uni_freiburg.informatik.ultimate.lassoranker.variables.LassoBuilder.preprocess(LassoBuilder.java:262)
	at de.uni_freiburg.informatik.ultimate.lassoranker.LassoAnalysis.preprocess(LassoAnalysis.java:286)
	at de.uni_freiburg.informatik.ultimate.lassoranker.LassoAnalysis.<init>(LassoAnalysis.java:235)
	at de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.LassoCheck.synthesize(LassoCheck.java:788)
	at de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.LassoCheck.access$18(LassoCheck.java:715)
	at de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.LassoCheck$LassoCheckResult.checkLassoTermination(LassoCheck.java:1163)
	at de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.LassoCheck$LassoCheckResult.<init>(LassoCheck.java:1062)
	at de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.LassoCheck.<init>(LassoCheck.java:276)
	at de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiCegarLoop.iterate(BuchiCegarLoop.java:479)
	at de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver.doTerminationAnalysis(BuchiAutomizerObserver.java:153)
	at de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver.finish(BuchiAutomizerObserver.java:413)
	at de.uni_freiburg.informatik.ultimate.core.coreplugin.PluginConnector.runObserver(PluginConnector.java:168)
	at de.uni_freiburg.informatik.ultimate.core.coreplugin.PluginConnector.runTool(PluginConnector.java:151)
	at de.uni_freiburg.informatik.ultimate.core.coreplugin.PluginConnector.run(PluginConnector.java:128)
	at de.uni_freiburg.informatik.ultimate.core.coreplugin.ToolchainWalker.executePluginConnector(ToolchainWalker.java:232)
	at de.uni_freiburg.informatik.ultimate.core.coreplugin.ToolchainWalker.processPlugin(ToolchainWalker.java:226)
	at de.uni_freiburg.informatik.ultimate.core.coreplugin.ToolchainWalker.walkUnprotected(ToolchainWalker.java:142)
	at de.uni_freiburg.informatik.ultimate.core.coreplugin.ToolchainWalker.walk(ToolchainWalker.java:104)
	at de.uni_freiburg.informatik.ultimate.core.coreplugin.ToolchainManager$Toolchain.processToolchain(ToolchainManager.java:317)
	at de.uni_freiburg.informatik.ultimate.core.coreplugin.toolchain.DefaultToolchainJob.run(DefaultToolchainJob.java:145)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:55)
[2020-11-25 16:34:01,881 INFO  L168              Benchmark]: Toolchain (without parser) took 57562.24 ms. Allocated memory was 1.0 GB in the beginning and 3.7 GB in the end (delta: 2.6 GB). Free memory was 945.9 MB in the beginning and 3.1 GB in the end (delta: -2.2 GB). Peak memory consumption was 2.8 GB. Max. memory is 15.3 GB.
[2020-11-25 16:34:01,881 INFO  L168              Benchmark]: Boogie PL CUP Parser took 0.30 ms. Allocated memory is still 1.0 GB. Free memory is still 951.3 MB. There was no memory consumed. Max. memory is 15.3 GB.
[2020-11-25 16:34:01,881 INFO  L168              Benchmark]: Boogie Preprocessor took 94.41 ms. Allocated memory is still 1.0 GB. Free memory was 945.9 MB in the beginning and 940.6 MB in the end (delta: 5.4 MB). Peak memory consumption was 5.4 MB. Max. memory is 15.3 GB.
[2020-11-25 16:34:01,881 INFO  L168              Benchmark]: UtopiaSpecLang took 58.13 ms. Allocated memory is still 1.0 GB. Free memory was 940.6 MB in the beginning and 935.2 MB in the end (delta: 5.4 MB). Peak memory consumption was 5.4 MB. Max. memory is 15.3 GB.
[2020-11-25 16:34:01,882 INFO  L168              Benchmark]: Boogie Printer took 11.54 ms. Allocated memory is still 1.0 GB. Free memory was 935.2 MB in the beginning and 929.8 MB in the end (delta: 5.4 MB). Peak memory consumption was 5.4 MB. Max. memory is 15.3 GB.
[2020-11-25 16:34:01,882 INFO  L168              Benchmark]: RCFGBuilder took 669.95 ms. Allocated memory is still 1.0 GB. Free memory was 929.8 MB in the beginning and 865.4 MB in the end (delta: 64.4 MB). Peak memory consumption was 64.4 MB. Max. memory is 15.3 GB.
[2020-11-25 16:34:01,882 INFO  L168              Benchmark]: UtopiaLTL2Aut took 40.50 ms. Allocated memory is still 1.0 GB. Free memory was 865.4 MB in the beginning and 861.8 MB in the end (delta: 3.6 MB). Peak memory consumption was 3.6 MB. Max. memory is 15.3 GB.
[2020-11-25 16:34:01,882 INFO  L168              Benchmark]: BÃ¼chi Program Product took 1050.37 ms. Allocated memory was 1.0 GB in the beginning and 1.1 GB in the end (delta: 69.7 MB). Free memory was 861.8 MB in the beginning and 867.7 MB in the end (delta: -5.9 MB). Peak memory consumption was 147.6 MB. Max. memory is 15.3 GB.
[2020-11-25 16:34:01,883 INFO  L168              Benchmark]: BlockEncodingV2 took 85.28 ms. Allocated memory is still 1.1 GB. Free memory was 867.7 MB in the beginning and 814.7 MB in the end (delta: 53.0 MB). Peak memory consumption was 53.0 MB. Max. memory is 15.3 GB.
[2020-11-25 16:34:01,883 INFO  L168              Benchmark]: BuchiAutomizer took 55548.94 ms. Allocated memory was 1.1 GB in the beginning and 3.7 GB in the end (delta: 2.6 GB). Free memory was 814.7 MB in the beginning and 3.1 GB in the end (delta: -2.3 GB). Peak memory consumption was 2.6 GB. Max. memory is 15.3 GB.
[2020-11-25 16:34:01,885 INFO  L337   ainManager$Toolchain]: #######################  End [Toolchain 1] #######################
 --- Results ---
 * Results from de.uni_freiburg.informatik.ultimate.plugins.blockencoding:
  - StatisticsResult: Initial Icfg
    2302 locations, 3898 edges
  - StatisticsResult: Encoded RCFG
    2255 locations, 3790 edges
 * Results from de.uni_freiburg.informatik.ultimate.core:
  - StatisticsResult: Toolchain Benchmarks
    Benchmark results are:
 * Boogie PL CUP Parser took 0.30 ms. Allocated memory is still 1.0 GB. Free memory is still 951.3 MB. There was no memory consumed. Max. memory is 15.3 GB.
 * Boogie Preprocessor took 94.41 ms. Allocated memory is still 1.0 GB. Free memory was 945.9 MB in the beginning and 940.6 MB in the end (delta: 5.4 MB). Peak memory consumption was 5.4 MB. Max. memory is 15.3 GB.
 * UtopiaSpecLang took 58.13 ms. Allocated memory is still 1.0 GB. Free memory was 940.6 MB in the beginning and 935.2 MB in the end (delta: 5.4 MB). Peak memory consumption was 5.4 MB. Max. memory is 15.3 GB.
 * Boogie Printer took 11.54 ms. Allocated memory is still 1.0 GB. Free memory was 935.2 MB in the beginning and 929.8 MB in the end (delta: 5.4 MB). Peak memory consumption was 5.4 MB. Max. memory is 15.3 GB.
 * RCFGBuilder took 669.95 ms. Allocated memory is still 1.0 GB. Free memory was 929.8 MB in the beginning and 865.4 MB in the end (delta: 64.4 MB). Peak memory consumption was 64.4 MB. Max. memory is 15.3 GB.
 * UtopiaLTL2Aut took 40.50 ms. Allocated memory is still 1.0 GB. Free memory was 865.4 MB in the beginning and 861.8 MB in the end (delta: 3.6 MB). Peak memory consumption was 3.6 MB. Max. memory is 15.3 GB.
 * BÃ¼chi Program Product took 1050.37 ms. Allocated memory was 1.0 GB in the beginning and 1.1 GB in the end (delta: 69.7 MB). Free memory was 861.8 MB in the beginning and 867.7 MB in the end (delta: -5.9 MB). Peak memory consumption was 147.6 MB. Max. memory is 15.3 GB.
 * BlockEncodingV2 took 85.28 ms. Allocated memory is still 1.1 GB. Free memory was 867.7 MB in the beginning and 814.7 MB in the end (delta: 53.0 MB). Peak memory consumption was 53.0 MB. Max. memory is 15.3 GB.
 * BuchiAutomizer took 55548.94 ms. Allocated memory was 1.1 GB in the beginning and 3.7 GB in the end (delta: 2.6 GB). Free memory was 814.7 MB in the beginning and 3.1 GB in the end (delta: -2.3 GB). Peak memory consumption was 2.6 GB. Max. memory is 15.3 GB.
 * Results from de.uni_freiburg.informatik.ultimate.buchiprogramproduct:
  - StatisticsResult: Initial property automaton
    2 locations, 3 edges
  - StatisticsResult: Initial RCFG
    959 locations, 1203 edges
  - StatisticsResult: BuchiProgram size
    2302 locations, 3898 edges
 * Results from de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer:
  - ExceptionOrErrorResult: UnsupportedOperationException: function symbols not yet supported
    de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer: UnsupportedOperationException: function symbols not yet supported: de.uni_freiburg.informatik.ultimate.lassoranker.variables.LassoPartitioneer.addInOuAuxVar(LassoPartitioneer.java:238)
RESULT: Ultimate could not prove your program: Toolchain returned no result.
Received shutdown request...
