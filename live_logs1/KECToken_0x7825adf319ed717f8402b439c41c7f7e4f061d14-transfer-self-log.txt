This is Ultimate 0.1.24-f1553f5-m
[2020-11-24 20:06:15,493 INFO  L170        SettingsManager]: Resetting all preferences to default values...
[2020-11-24 20:06:15,494 INFO  L174        SettingsManager]: Resetting UltimateCore preferences to default values
[2020-11-24 20:06:15,505 INFO  L177        SettingsManager]: Ultimate Commandline Interface provides no preferences, ignoring...
[2020-11-24 20:06:15,505 INFO  L174        SettingsManager]: Resetting Boogie Preprocessor preferences to default values
[2020-11-24 20:06:15,506 INFO  L174        SettingsManager]: Resetting Boogie Procedure Inliner preferences to default values
[2020-11-24 20:06:15,507 INFO  L174        SettingsManager]: Resetting Abstract Interpretation preferences to default values
[2020-11-24 20:06:15,509 INFO  L174        SettingsManager]: Resetting LassoRanker preferences to default values
[2020-11-24 20:06:15,510 INFO  L174        SettingsManager]: Resetting Reaching Definitions preferences to default values
[2020-11-24 20:06:15,511 INFO  L174        SettingsManager]: Resetting SyntaxChecker preferences to default values
[2020-11-24 20:06:15,511 INFO  L177        SettingsManager]: BÃ¼chi Program Product provides no preferences, ignoring...
[2020-11-24 20:06:15,512 INFO  L174        SettingsManager]: Resetting LTL2Aut preferences to default values
[2020-11-24 20:06:15,512 INFO  L174        SettingsManager]: Resetting PEA to Boogie preferences to default values
[2020-11-24 20:06:15,513 INFO  L174        SettingsManager]: Resetting BlockEncodingV2 preferences to default values
[2020-11-24 20:06:15,514 INFO  L174        SettingsManager]: Resetting ChcToBoogie preferences to default values
[2020-11-24 20:06:15,514 INFO  L174        SettingsManager]: Resetting AutomataScriptInterpreter preferences to default values
[2020-11-24 20:06:15,515 INFO  L174        SettingsManager]: Resetting BuchiAutomizer preferences to default values
[2020-11-24 20:06:15,516 INFO  L174        SettingsManager]: Resetting CACSL2BoogieTranslator preferences to default values
[2020-11-24 20:06:15,518 INFO  L174        SettingsManager]: Resetting CodeCheck preferences to default values
[2020-11-24 20:06:15,519 INFO  L174        SettingsManager]: Resetting InvariantSynthesis preferences to default values
[2020-11-24 20:06:15,520 INFO  L174        SettingsManager]: Resetting RCFGBuilder preferences to default values
[2020-11-24 20:06:15,520 INFO  L174        SettingsManager]: Resetting TraceAbstraction preferences to default values
[2020-11-24 20:06:15,522 INFO  L177        SettingsManager]: TraceAbstractionConcurrent provides no preferences, ignoring...
[2020-11-24 20:06:15,522 INFO  L177        SettingsManager]: TraceAbstractionWithAFAs provides no preferences, ignoring...
[2020-11-24 20:06:15,522 INFO  L174        SettingsManager]: Resetting TreeAutomizer preferences to default values
[2020-11-24 20:06:15,523 INFO  L174        SettingsManager]: Resetting IcfgToChc preferences to default values
[2020-11-24 20:06:15,523 INFO  L174        SettingsManager]: Resetting IcfgTransformer preferences to default values
[2020-11-24 20:06:15,524 INFO  L177        SettingsManager]: ReqToTest provides no preferences, ignoring...
[2020-11-24 20:06:15,524 INFO  L174        SettingsManager]: Resetting UtopiaLTL2Aut preferences to default values
[2020-11-24 20:06:15,524 INFO  L174        SettingsManager]: Resetting UtopiaSpecLang preferences to default values
[2020-11-24 20:06:15,524 INFO  L174        SettingsManager]: Resetting Boogie Printer preferences to default values
[2020-11-24 20:06:15,525 INFO  L174        SettingsManager]: Resetting ChcSmtPrinter preferences to default values
[2020-11-24 20:06:15,525 INFO  L174        SettingsManager]: Resetting ReqPrinter preferences to default values
[2020-11-24 20:06:15,526 INFO  L174        SettingsManager]: Resetting Witness Printer preferences to default values
[2020-11-24 20:06:15,526 INFO  L177        SettingsManager]: Boogie PL CUP Parser provides no preferences, ignoring...
[2020-11-24 20:06:15,527 INFO  L174        SettingsManager]: Resetting CDTParser preferences to default values
[2020-11-24 20:06:15,527 INFO  L177        SettingsManager]: AutomataScriptParser provides no preferences, ignoring...
[2020-11-24 20:06:15,527 INFO  L177        SettingsManager]: ReqParser provides no preferences, ignoring...
[2020-11-24 20:06:15,527 INFO  L174        SettingsManager]: Resetting SmtParser preferences to default values
[2020-11-24 20:06:15,528 INFO  L174        SettingsManager]: Resetting Witness Parser preferences to default values
[2020-11-24 20:06:15,529 INFO  L181        SettingsManager]: Finished resetting all preferences to default values...
[2020-11-24 20:06:15,529 INFO  L98         SettingsManager]: Beginning loading settings from /mnt/data0/jon/SmartPulseTool/SmartPulse/settings.epf
[2020-11-24 20:06:15,537 INFO  L110        SettingsManager]: Loading preferences was successful
[2020-11-24 20:06:15,537 INFO  L112        SettingsManager]: Preferences different from defaults after loading the file:
[2020-11-24 20:06:15,538 INFO  L131        SettingsManager]: Preferences of LTL2Aut differ from their defaults:
[2020-11-24 20:06:15,538 INFO  L133        SettingsManager]:  * Read property from file=true
[2020-11-24 20:06:15,538 INFO  L133        SettingsManager]:  * Path to LTL*BA executable (LTL2BA, LTL3BA)=/mnt/data0/jon/SmartPulseTool/ltl2ba
[2020-11-24 20:06:15,538 INFO  L131        SettingsManager]: Preferences of BlockEncodingV2 differ from their defaults:
[2020-11-24 20:06:15,538 INFO  L133        SettingsManager]:  * Maximize final states=false
[2020-11-24 20:06:15,538 INFO  L133        SettingsManager]:  * Minimize states even if more edges are added than removed.=true
[2020-11-24 20:06:15,538 INFO  L133        SettingsManager]:  * Minimize states using LBE with the strategy=NONE
[2020-11-24 20:06:15,538 INFO  L131        SettingsManager]: Preferences of BuchiAutomizer differ from their defaults:
[2020-11-24 20:06:15,539 INFO  L133        SettingsManager]:  * Compute Interpolants along a Counterexample=Craig_TreeInterpolation
[2020-11-24 20:06:15,539 INFO  L133        SettingsManager]:  * Use old map elimination=false
[2020-11-24 20:06:15,539 INFO  L133        SettingsManager]:  * Try twofold refinement=false
[2020-11-24 20:06:15,539 INFO  L131        SettingsManager]: Preferences of CACSL2BoogieTranslator differ from their defaults:
[2020-11-24 20:06:15,539 INFO  L133        SettingsManager]:  * Check unreachability of error function in SV-COMP mode=false
[2020-11-24 20:06:15,539 INFO  L133        SettingsManager]:  * Overapproximate operations on floating types=true
[2020-11-24 20:06:15,539 INFO  L133        SettingsManager]:  * Check division by zero=IGNORE
[2020-11-24 20:06:15,539 INFO  L133        SettingsManager]:  * Pointer to allocated memory at dereference=ASSUME
[2020-11-24 20:06:15,539 INFO  L133        SettingsManager]:  * If two pointers are subtracted or compared they have the same base address=ASSUME
[2020-11-24 20:06:15,539 INFO  L133        SettingsManager]:  * Check array bounds for arrays that are off heap=ASSUME
[2020-11-24 20:06:15,540 INFO  L133        SettingsManager]:  * Check if freed pointer was valid=false
[2020-11-24 20:06:15,540 INFO  L133        SettingsManager]:  * Use constant arrays=true
[2020-11-24 20:06:15,540 INFO  L133        SettingsManager]:  * Pointer base address is valid at dereference=ASSUME
[2020-11-24 20:06:15,540 INFO  L131        SettingsManager]: Preferences of RCFGBuilder differ from their defaults:
[2020-11-24 20:06:15,540 INFO  L133        SettingsManager]:  * Size of a code block=SingleStatement
[2020-11-24 20:06:15,540 INFO  L133        SettingsManager]:  * SMT solver=Internal_SMTInterpol
[2020-11-24 20:06:15,562 INFO  L81    nceAwareModelManager]: Repository-Root is: /tmp
[2020-11-24 20:06:15,578 INFO  L259   ainManager$Toolchain]: [Toolchain 1]: Applicable parser(s) successfully (re)initialized
[2020-11-24 20:06:15,581 INFO  L215   ainManager$Toolchain]: [Toolchain 1]: Toolchain selected.
[2020-11-24 20:06:15,582 INFO  L271        PluginConnector]: Initializing Boogie PL CUP Parser...
[2020-11-24 20:06:15,583 INFO  L276        PluginConnector]: Boogie PL CUP Parser initialized
[2020-11-24 20:06:15,583 INFO  L430   ainManager$Toolchain]: [Toolchain 1]: Parsing single file: /mnt/data0/jon/SmartPulseTool/KECToken_0x7825adf319ed717f8402b439c41c7f7e4f061d14_transfer-self.bpl
[2020-11-24 20:06:15,584 INFO  L111           BoogieParser]: Parsing: '/mnt/data0/jon/SmartPulseTool/KECToken_0x7825adf319ed717f8402b439c41c7f7e4f061d14_transfer-self.bpl'
[2020-11-24 20:06:15,656 INFO  L297   ainManager$Toolchain]: ####################### [Toolchain 1] #######################
[2020-11-24 20:06:15,657 INFO  L131        ToolchainWalker]: Walking toolchain with 8 elements.
[2020-11-24 20:06:15,657 INFO  L113        PluginConnector]: ------------------------Boogie Preprocessor----------------------------
[2020-11-24 20:06:15,657 INFO  L271        PluginConnector]: Initializing Boogie Preprocessor...
[2020-11-24 20:06:15,657 INFO  L276        PluginConnector]: Boogie Preprocessor initialized
[2020-11-24 20:06:15,674 INFO  L185        PluginConnector]: Executing the observer EnsureBoogieModelObserver from plugin Boogie Preprocessor for "KECToken_0x7825adf319ed717f8402b439c41c7f7e4f061d14_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 24.11 08:06:15" (1/1) ...
[2020-11-24 20:06:15,676 INFO  L185        PluginConnector]: Executing the observer TypeChecker from plugin Boogie Preprocessor for "KECToken_0x7825adf319ed717f8402b439c41c7f7e4f061d14_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 24.11 08:06:15" (1/1) ...
[2020-11-24 20:06:15,705 INFO  L185        PluginConnector]: Executing the observer ConstExpander from plugin Boogie Preprocessor for "KECToken_0x7825adf319ed717f8402b439c41c7f7e4f061d14_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 24.11 08:06:15" (1/1) ...
[2020-11-24 20:06:15,705 INFO  L185        PluginConnector]: Executing the observer StructExpander from plugin Boogie Preprocessor for "KECToken_0x7825adf319ed717f8402b439c41c7f7e4f061d14_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 24.11 08:06:15" (1/1) ...
[2020-11-24 20:06:15,726 INFO  L185        PluginConnector]: Executing the observer UnstructureCode from plugin Boogie Preprocessor for "KECToken_0x7825adf319ed717f8402b439c41c7f7e4f061d14_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 24.11 08:06:15" (1/1) ...
[2020-11-24 20:06:15,734 INFO  L185        PluginConnector]: Executing the observer FunctionInliner from plugin Boogie Preprocessor for "KECToken_0x7825adf319ed717f8402b439c41c7f7e4f061d14_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 24.11 08:06:15" (1/1) ...
[2020-11-24 20:06:15,741 INFO  L185        PluginConnector]: Executing the observer BoogieSymbolTableConstructor from plugin Boogie Preprocessor for "KECToken_0x7825adf319ed717f8402b439c41c7f7e4f061d14_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 24.11 08:06:15" (1/1) ...
[2020-11-24 20:06:15,749 INFO  L132        PluginConnector]: ------------------------ END Boogie Preprocessor----------------------------
[2020-11-24 20:06:15,750 INFO  L113        PluginConnector]: ------------------------UtopiaSpecLang----------------------------
[2020-11-24 20:06:15,750 INFO  L271        PluginConnector]: Initializing UtopiaSpecLang...
[2020-11-24 20:06:15,752 INFO  L276        PluginConnector]: UtopiaSpecLang initialized
[2020-11-24 20:06:15,756 INFO  L185        PluginConnector]: Executing the observer UtopiaSpecLangObserver from plugin UtopiaSpecLang for "KECToken_0x7825adf319ed717f8402b439c41c7f7e4f061d14_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 24.11 08:06:15" (1/1) ...
[2020-11-24 20:06:15,774 INFO  L1012  opiaSpecLangObserver]: Parsing LTLPlus Formula to AstNode: [](started(KECToken.transfer(to, value), msg.sender == to && value <= _balances_KECToken[this][msg.sender] && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_KECToken[this][to] >= 0 && _balances_KECToken[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_KECToken[this][msg.sender] >= 0 &&  _balances_KECToken[this][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(finished(KECToken.transfer(to, value), return == true && _totalSupply_KECToken[this] == old(_totalSupply_KECToken[this]) && _balances_KECToken[this] == old(_balances_KECToken[this]) && _allowed_KECToken[this] == old(_allowed_KECToken[this]) && _blacklist_KECToken[this] == old(_blacklist_KECToken[this]) && name_KECToken[this] == old(name_KECToken[this]) && symbol_KECToken[this] == old(symbol_KECToken[this]) && decimals_KECToken[this] == old(decimals_KECToken[this]) && owner_KECToken[this] == old(owner_KECToken[this]))))
[2020-11-24 20:06:15,779 INFO  L1016  opiaSpecLangObserver]: Successfully lexed: [](started(KECToken.transfer(to, value), msg.sender == to && value <= _balances_KECToken[this][msg.sender] && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_KECToken[this][to] >= 0 && _balances_KECToken[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_KECToken[this][msg.sender] >= 0 &&  _balances_KECToken[this][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(finished(KECToken.transfer(to, value), return == true && _totalSupply_KECToken[this] == old(_totalSupply_KECToken[this]) && _balances_KECToken[this] == old(_balances_KECToken[this]) && _allowed_KECToken[this] == old(_allowed_KECToken[this]) && _blacklist_KECToken[this] == old(_blacklist_KECToken[this]) && name_KECToken[this] == old(name_KECToken[this]) && symbol_KECToken[this] == old(symbol_KECToken[this]) && decimals_KECToken[this] == old(decimals_KECToken[this]) && owner_KECToken[this] == old(owner_KECToken[this]))))
[2020-11-24 20:06:15,787 INFO  L1018  opiaSpecLangObserver]: Successfully parsed: [](started(KECToken.transfer(to, value), msg.sender == to && value <= _balances_KECToken[this][msg.sender] && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_KECToken[this][to] >= 0 && _balances_KECToken[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_KECToken[this][msg.sender] >= 0 &&  _balances_KECToken[this][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(finished(KECToken.transfer(to, value), return == true && _totalSupply_KECToken[this] == old(_totalSupply_KECToken[this]) && _balances_KECToken[this] == old(_balances_KECToken[this]) && _allowed_KECToken[this] == old(_allowed_KECToken[this]) && _blacklist_KECToken[this] == old(_blacklist_KECToken[this]) && name_KECToken[this] == old(name_KECToken[this]) && symbol_KECToken[this] == old(symbol_KECToken[this]) && decimals_KECToken[this] == old(decimals_KECToken[this]) && owner_KECToken[this] == old(owner_KECToken[this]))))
[2020-11-24 20:06:15,794 INFO  L636   opiaSpecLangObserver]: Parsed ( ( ( ( ( ( ( msg.sender==to_s456 && value_s456<=_balances_KECToken[this][msg.sender] ) && value_s456>=0 ) && value_s456<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) && _balances_KECToken[this][to_s456]>=0 ) && _balances_KECToken[this][to_s456]<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) && _balances_KECToken[this][msg.sender]>=0 ) && _balances_KECToken[this][msg.sender]<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) to BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[COMPEQ,IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transfer~address~uint256_KECToken>],IdentifierExpression[to_s456,<IMPLEMENTATION_INPARAM,transfer~address~uint256_KECToken>]],BinaryExpression[COMPLEQ,IdentifierExpression[value_s456,<IMPLEMENTATION_INPARAM,transfer~address~uint256_KECToken>],ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_KECToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_KECToken>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transfer~address~uint256_KECToken>]]]]],BinaryExpression[COMPGEQ,IdentifierExpression[value_s456,<IMPLEMENTATION_INPARAM,transfer~address~uint256_KECToken>],IntegerLiteral[0]]],BinaryExpression[COMPLT,IdentifierExpression[value_s456,<IMPLEMENTATION_INPARAM,transfer~address~uint256_KECToken>],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]],BinaryExpression[COMPGEQ,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_KECToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_KECToken>]]],[IdentifierExpression[to_s456,<IMPLEMENTATION_INPARAM,transfer~address~uint256_KECToken>]]],IntegerLiteral[0]]],BinaryExpression[COMPLT,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_KECToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_KECToken>]]],[IdentifierExpression[to_s456,<IMPLEMENTATION_INPARAM,transfer~address~uint256_KECToken>]]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]],BinaryExpression[COMPGEQ,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_KECToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_KECToken>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transfer~address~uint256_KECToken>]]],IntegerLiteral[0]]],BinaryExpression[COMPLT,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_KECToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_KECToken>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transfer~address~uint256_KECToken>]]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]]
[2020-11-24 20:06:15,797 INFO  L636   opiaSpecLangObserver]: Parsed ( ( ( ( ( ( ( ( __ret_0_==true && _totalSupply_KECToken[this]==( old(_totalSupply_KECToken[this]) ) ) && _balances_KECToken[this]==( old(_balances_KECToken[this]) ) ) && _allowed_KECToken[this]==( old(_allowed_KECToken[this]) ) ) && _blacklist_KECToken[this]==( old(_blacklist_KECToken[this]) ) ) && name_KECToken[this]==( old(name_KECToken[this]) ) ) && symbol_KECToken[this]==( old(symbol_KECToken[this]) ) ) && decimals_KECToken[this]==( old(decimals_KECToken[this]) ) ) && owner_KECToken[this]==( old(owner_KECToken[this]) ) ) to BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[COMPEQ,IdentifierExpression[__ret_0_,<IMPLEMENTATION_OUTPARAM,transfer~address~uint256_KECToken>],BooleanLiteral[true]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[_totalSupply_KECToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_KECToken>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[_totalSupply_KECToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_KECToken>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[_balances_KECToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_KECToken>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[_balances_KECToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_KECToken>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[_allowed_KECToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_KECToken>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[_allowed_KECToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_KECToken>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[_blacklist_KECToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_KECToken>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[_blacklist_KECToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_KECToken>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[name_KECToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_KECToken>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[name_KECToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_KECToken>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[symbol_KECToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_KECToken>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[symbol_KECToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_KECToken>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[decimals_KECToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_KECToken>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[decimals_KECToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_KECToken>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[owner_KECToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_KECToken>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[owner_KECToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_KECToken>]]]]]]
[2020-11-24 20:06:15,801 INFO  L1005  opiaSpecLangObserver]: Compiling: [](started(KECToken.transfer(to, value), msg.sender == to && value <= _balances_KECToken[this][msg.sender] && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_KECToken[this][to] >= 0 && _balances_KECToken[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_KECToken[this][msg.sender] >= 0 &&  _balances_KECToken[this][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(finished(KECToken.transfer(to, value), return == true && _totalSupply_KECToken[this] == old(_totalSupply_KECToken[this]) && _balances_KECToken[this] == old(_balances_KECToken[this]) && _allowed_KECToken[this] == old(_allowed_KECToken[this]) && _blacklist_KECToken[this] == old(_blacklist_KECToken[this]) && name_KECToken[this] == old(name_KECToken[this]) && symbol_KECToken[this] == old(symbol_KECToken[this]) && decimals_KECToken[this] == old(decimals_KECToken[this]) && owner_KECToken[this] == old(owner_KECToken[this]))))
[2020-11-24 20:06:15,801 INFO  L1007  opiaSpecLangObserver]: Compiled to ( []( AP(call_transfer_KECToken0) ==> ( <>AP(success_transfer_KECToken0) ) ) )
Executed UtopiaSpecLang
[2020-11-24 20:06:15,808 INFO  L202        PluginConnector]: Adding new model Hardcoded edu.utexas.cs.utopia.specLang AST 24.11 08:06:15 PropertyContainer
[2020-11-24 20:06:15,808 INFO  L132        PluginConnector]: ------------------------ END UtopiaSpecLang----------------------------
[2020-11-24 20:06:15,808 INFO  L113        PluginConnector]: ------------------------Boogie Printer----------------------------
[2020-11-24 20:06:15,808 INFO  L271        PluginConnector]: Initializing Boogie Printer...
[2020-11-24 20:06:15,808 INFO  L276        PluginConnector]: Boogie Printer initialized
[2020-11-24 20:06:15,809 INFO  L185        PluginConnector]: Executing the observer BoogiePrinterObserver from plugin Boogie Printer for "KECToken_0x7825adf319ed717f8402b439c41c7f7e4f061d14_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 24.11 08:06:15" (1/2) ...
[2020-11-24 20:06:15,809 INFO  L116   oogiePrinterObserver]: File already exists and will be overwritten: /tmp/boogiePrinter.bpl
[2020-11-24 20:06:15,810 INFO  L120   oogiePrinterObserver]: Writing to file /tmp/boogiePrinter.bpl
[2020-11-24 20:06:15,821 INFO  L185        PluginConnector]: Executing the observer BoogiePrinterObserver from plugin Boogie Printer for "Hardcoded edu.utexas.cs.utopia.specLang AST 24.11 08:06:15" (2/2) ...
[2020-11-24 20:06:15,821 INFO  L132        PluginConnector]: ------------------------ END Boogie Printer----------------------------
[2020-11-24 20:06:15,821 INFO  L113        PluginConnector]: ------------------------RCFGBuilder----------------------------
[2020-11-24 20:06:15,821 INFO  L271        PluginConnector]: Initializing RCFGBuilder...
[2020-11-24 20:06:15,822 INFO  L276        PluginConnector]: RCFGBuilder initialized
[2020-11-24 20:06:15,823 INFO  L185        PluginConnector]: Executing the observer RCFGBuilderObserver from plugin RCFGBuilder for "KECToken_0x7825adf319ed717f8402b439c41c7f7e4f061d14_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 24.11 08:06:15" (1/2) ...
[2020-11-24 20:06:15,875 INFO  L130     BoogieDeclarations]: Found specification of procedure FreshRefGenerator__success
[2020-11-24 20:06:15,876 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath_NoBaseCtor__success
[2020-11-24 20:06:15,876 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath
[2020-11-24 20:06:15,876 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath
[2020-11-24 20:06:15,876 INFO  L130     BoogieDeclarations]: Found specification of procedure add~uint256~uint256_SafeMath__success
[2020-11-24 20:06:15,876 INFO  L130     BoogieDeclarations]: Found specification of procedure sub~uint256~uint256_SafeMath__success
[2020-11-24 20:06:15,876 INFO  L130     BoogieDeclarations]: Found specification of procedure sub~uint256~uint256~string_SafeMath__success
[2020-11-24 20:06:15,876 INFO  L130     BoogieDeclarations]: Found specification of procedure mul~uint256~uint256_SafeMath__success
[2020-11-24 20:06:15,876 INFO  L130     BoogieDeclarations]: Found specification of procedure div~uint256~uint256_SafeMath__success
[2020-11-24 20:06:15,876 INFO  L130     BoogieDeclarations]: Found specification of procedure div~uint256~uint256~string_SafeMath__success
[2020-11-24 20:06:15,877 INFO  L130     BoogieDeclarations]: Found specification of procedure mod~uint256~uint256_SafeMath__success
[2020-11-24 20:06:15,877 INFO  L130     BoogieDeclarations]: Found specification of procedure mod~uint256~uint256~string_SafeMath__success
[2020-11-24 20:06:15,877 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20_NoBaseCtor__success
[2020-11-24 20:06:15,877 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20
[2020-11-24 20:06:15,877 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20
[2020-11-24 20:06:15,877 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_IERC20
[2020-11-24 20:06:15,878 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_IERC20
[2020-11-24 20:06:15,878 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_IERC20
[2020-11-24 20:06:15,878 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_IERC20
[2020-11-24 20:06:15,878 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_IERC20
[2020-11-24 20:06:15,878 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_IERC20
[2020-11-24 20:06:15,878 INFO  L130     BoogieDeclarations]: Found specification of procedure KECToken_KECToken_NoBaseCtor__success
[2020-11-24 20:06:15,878 INFO  L130     BoogieDeclarations]: Found specification of procedure KECToken_KECToken
[2020-11-24 20:06:15,878 INFO  L138     BoogieDeclarations]: Found implementation of procedure KECToken_KECToken
[2020-11-24 20:06:15,878 INFO  L130     BoogieDeclarations]: Found specification of procedure addBlacklist~address_KECToken
[2020-11-24 20:06:15,878 INFO  L138     BoogieDeclarations]: Found implementation of procedure addBlacklist~address_KECToken
[2020-11-24 20:06:15,879 INFO  L130     BoogieDeclarations]: Found specification of procedure removeBlacklist~address_KECToken
[2020-11-24 20:06:15,879 INFO  L138     BoogieDeclarations]: Found implementation of procedure removeBlacklist~address_KECToken
[2020-11-24 20:06:15,879 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_KECToken
[2020-11-24 20:06:15,879 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_KECToken
[2020-11-24 20:06:15,879 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_KECToken
[2020-11-24 20:06:15,879 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_KECToken
[2020-11-24 20:06:15,879 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_KECToken
[2020-11-24 20:06:15,879 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_KECToken
[2020-11-24 20:06:15,879 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_KECToken
[2020-11-24 20:06:15,879 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_KECToken
[2020-11-24 20:06:15,879 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_KECToken
[2020-11-24 20:06:15,879 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_KECToken
[2020-11-24 20:06:15,879 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_KECToken
[2020-11-24 20:06:15,880 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_KECToken
[2020-11-24 20:06:15,880 INFO  L130     BoogieDeclarations]: Found specification of procedure increaseAllowance~address~uint256_KECToken
[2020-11-24 20:06:15,880 INFO  L138     BoogieDeclarations]: Found implementation of procedure increaseAllowance~address~uint256_KECToken
[2020-11-24 20:06:15,880 INFO  L130     BoogieDeclarations]: Found specification of procedure decreaseAllowance~address~uint256_KECToken
[2020-11-24 20:06:15,880 INFO  L138     BoogieDeclarations]: Found implementation of procedure decreaseAllowance~address~uint256_KECToken
[2020-11-24 20:06:15,880 INFO  L130     BoogieDeclarations]: Found specification of procedure name_KECToken
[2020-11-24 20:06:15,880 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_KECToken
[2020-11-24 20:06:15,880 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_KECToken
[2020-11-24 20:06:15,880 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_KECToken
[2020-11-24 20:06:15,880 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_KECToken
[2020-11-24 20:06:15,880 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_KECToken
[2020-11-24 20:06:15,880 INFO  L130     BoogieDeclarations]: Found specification of procedure owner_KECToken
[2020-11-24 20:06:15,880 INFO  L138     BoogieDeclarations]: Found implementation of procedure owner_KECToken
[2020-11-24 20:06:15,881 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackDispatch__success
[2020-11-24 20:06:15,881 INFO  L130     BoogieDeclarations]: Found specification of procedure Fallback_UnknownType__success
[2020-11-24 20:06:15,881 INFO  L130     BoogieDeclarations]: Found specification of procedure send__success
[2020-11-24 20:06:15,881 INFO  L130     BoogieDeclarations]: Found specification of procedure onlyOwner_pre__success
[2020-11-24 20:06:15,881 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_SafeMath
[2020-11-24 20:06:15,881 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_SafeMath
[2020-11-24 20:06:15,881 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_IERC20
[2020-11-24 20:06:15,881 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_IERC20
[2020-11-24 20:06:15,881 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_KECToken
[2020-11-24 20:06:15,881 INFO  L130     BoogieDeclarations]: Found specification of procedure main
[2020-11-24 20:06:15,881 INFO  L130     BoogieDeclarations]: Found specification of procedure FreshRefGenerator__fail
[2020-11-24 20:06:15,881 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath_NoBaseCtor__fail
[2020-11-24 20:06:15,881 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath__success
[2020-11-24 20:06:15,881 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath__fail
[2020-11-24 20:06:15,882 INFO  L130     BoogieDeclarations]: Found specification of procedure add~uint256~uint256_SafeMath__fail
[2020-11-24 20:06:15,882 INFO  L130     BoogieDeclarations]: Found specification of procedure sub~uint256~uint256_SafeMath__fail
[2020-11-24 20:06:15,882 INFO  L130     BoogieDeclarations]: Found specification of procedure sub~uint256~uint256~string_SafeMath__fail
[2020-11-24 20:06:15,882 INFO  L130     BoogieDeclarations]: Found specification of procedure mul~uint256~uint256_SafeMath__fail
[2020-11-24 20:06:15,882 INFO  L130     BoogieDeclarations]: Found specification of procedure div~uint256~uint256_SafeMath__fail
[2020-11-24 20:06:15,882 INFO  L130     BoogieDeclarations]: Found specification of procedure div~uint256~uint256~string_SafeMath__fail
[2020-11-24 20:06:15,882 INFO  L130     BoogieDeclarations]: Found specification of procedure mod~uint256~uint256_SafeMath__fail
[2020-11-24 20:06:15,882 INFO  L130     BoogieDeclarations]: Found specification of procedure mod~uint256~uint256~string_SafeMath__fail
[2020-11-24 20:06:15,882 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20_NoBaseCtor__fail
[2020-11-24 20:06:15,882 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20__success
[2020-11-24 20:06:15,882 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20__fail
[2020-11-24 20:06:15,882 INFO  L130     BoogieDeclarations]: Found specification of procedure KECToken_KECToken_NoBaseCtor__fail
[2020-11-24 20:06:15,882 INFO  L130     BoogieDeclarations]: Found specification of procedure KECToken_KECToken__success
[2020-11-24 20:06:15,883 INFO  L130     BoogieDeclarations]: Found specification of procedure KECToken_KECToken__fail
[2020-11-24 20:06:15,883 INFO  L130     BoogieDeclarations]: Found specification of procedure addBlacklist~address_KECToken__success
[2020-11-24 20:06:15,883 INFO  L130     BoogieDeclarations]: Found specification of procedure addBlacklist~address_KECToken__fail
[2020-11-24 20:06:15,883 INFO  L130     BoogieDeclarations]: Found specification of procedure removeBlacklist~address_KECToken__success
[2020-11-24 20:06:15,883 INFO  L130     BoogieDeclarations]: Found specification of procedure removeBlacklist~address_KECToken__fail
[2020-11-24 20:06:15,883 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_KECToken__success
[2020-11-24 20:06:15,883 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_KECToken__fail
[2020-11-24 20:06:15,883 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_KECToken__success
[2020-11-24 20:06:15,883 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_KECToken__fail
[2020-11-24 20:06:15,883 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_KECToken__success
[2020-11-24 20:06:15,883 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_KECToken__fail
[2020-11-24 20:06:15,884 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_KECToken__success
[2020-11-24 20:06:15,884 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_KECToken__fail
[2020-11-24 20:06:15,884 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_KECToken__success
[2020-11-24 20:06:15,884 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_KECToken__fail
[2020-11-24 20:06:15,884 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_KECToken__success
[2020-11-24 20:06:15,884 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_KECToken__fail
[2020-11-24 20:06:15,884 INFO  L130     BoogieDeclarations]: Found specification of procedure increaseAllowance~address~uint256_KECToken__success
[2020-11-24 20:06:15,884 INFO  L130     BoogieDeclarations]: Found specification of procedure increaseAllowance~address~uint256_KECToken__fail
[2020-11-24 20:06:15,884 INFO  L130     BoogieDeclarations]: Found specification of procedure decreaseAllowance~address~uint256_KECToken__success
[2020-11-24 20:06:15,884 INFO  L130     BoogieDeclarations]: Found specification of procedure decreaseAllowance~address~uint256_KECToken__fail
[2020-11-24 20:06:15,884 INFO  L130     BoogieDeclarations]: Found specification of procedure name_KECToken__success
[2020-11-24 20:06:15,884 INFO  L130     BoogieDeclarations]: Found specification of procedure name_KECToken__fail
[2020-11-24 20:06:15,884 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_KECToken__success
[2020-11-24 20:06:15,884 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_KECToken__fail
[2020-11-24 20:06:15,885 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_KECToken__success
[2020-11-24 20:06:15,885 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_KECToken__fail
[2020-11-24 20:06:15,885 INFO  L130     BoogieDeclarations]: Found specification of procedure owner_KECToken__success
[2020-11-24 20:06:15,885 INFO  L130     BoogieDeclarations]: Found specification of procedure owner_KECToken__fail
[2020-11-24 20:06:15,885 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackDispatch__fail
[2020-11-24 20:06:15,885 INFO  L130     BoogieDeclarations]: Found specification of procedure Fallback_UnknownType__fail
[2020-11-24 20:06:15,885 INFO  L130     BoogieDeclarations]: Found specification of procedure send__fail
[2020-11-24 20:06:15,885 INFO  L130     BoogieDeclarations]: Found specification of procedure onlyOwner_pre__fail
[2020-11-24 20:06:15,885 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreshRefGenerator__fail
[2020-11-24 20:06:15,885 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreshRefGenerator__success
[2020-11-24 20:06:15,886 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath_NoBaseCtor__fail
[2020-11-24 20:06:15,886 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath_NoBaseCtor__success
[2020-11-24 20:06:15,886 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath__fail
[2020-11-24 20:06:15,886 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath__success
[2020-11-24 20:06:15,886 INFO  L138     BoogieDeclarations]: Found implementation of procedure add~uint256~uint256_SafeMath__fail
[2020-11-24 20:06:15,886 INFO  L138     BoogieDeclarations]: Found implementation of procedure add~uint256~uint256_SafeMath__success
[2020-11-24 20:06:15,886 INFO  L138     BoogieDeclarations]: Found implementation of procedure sub~uint256~uint256_SafeMath__fail
[2020-11-24 20:06:15,886 INFO  L138     BoogieDeclarations]: Found implementation of procedure sub~uint256~uint256_SafeMath__success
[2020-11-24 20:06:15,886 INFO  L138     BoogieDeclarations]: Found implementation of procedure sub~uint256~uint256~string_SafeMath__fail
[2020-11-24 20:06:15,886 INFO  L138     BoogieDeclarations]: Found implementation of procedure sub~uint256~uint256~string_SafeMath__success
[2020-11-24 20:06:15,887 INFO  L138     BoogieDeclarations]: Found implementation of procedure mul~uint256~uint256_SafeMath__fail
[2020-11-24 20:06:15,887 INFO  L138     BoogieDeclarations]: Found implementation of procedure mul~uint256~uint256_SafeMath__success
[2020-11-24 20:06:15,887 INFO  L138     BoogieDeclarations]: Found implementation of procedure div~uint256~uint256_SafeMath__fail
[2020-11-24 20:06:15,887 INFO  L138     BoogieDeclarations]: Found implementation of procedure div~uint256~uint256_SafeMath__success
[2020-11-24 20:06:15,887 INFO  L138     BoogieDeclarations]: Found implementation of procedure div~uint256~uint256~string_SafeMath__fail
[2020-11-24 20:06:15,887 INFO  L138     BoogieDeclarations]: Found implementation of procedure div~uint256~uint256~string_SafeMath__success
[2020-11-24 20:06:15,887 INFO  L138     BoogieDeclarations]: Found implementation of procedure mod~uint256~uint256_SafeMath__fail
[2020-11-24 20:06:15,887 INFO  L138     BoogieDeclarations]: Found implementation of procedure mod~uint256~uint256_SafeMath__success
[2020-11-24 20:06:15,887 INFO  L138     BoogieDeclarations]: Found implementation of procedure mod~uint256~uint256~string_SafeMath__fail
[2020-11-24 20:06:15,887 INFO  L138     BoogieDeclarations]: Found implementation of procedure mod~uint256~uint256~string_SafeMath__success
[2020-11-24 20:06:15,887 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20_NoBaseCtor__fail
[2020-11-24 20:06:15,887 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20_NoBaseCtor__success
[2020-11-24 20:06:15,887 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20__fail
[2020-11-24 20:06:15,888 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20__success
[2020-11-24 20:06:15,888 INFO  L138     BoogieDeclarations]: Found implementation of procedure KECToken_KECToken_NoBaseCtor__fail
[2020-11-24 20:06:15,888 INFO  L138     BoogieDeclarations]: Found implementation of procedure KECToken_KECToken_NoBaseCtor__success
[2020-11-24 20:06:15,888 INFO  L138     BoogieDeclarations]: Found implementation of procedure KECToken_KECToken__fail
[2020-11-24 20:06:15,888 INFO  L138     BoogieDeclarations]: Found implementation of procedure KECToken_KECToken__success
[2020-11-24 20:06:15,888 INFO  L138     BoogieDeclarations]: Found implementation of procedure addBlacklist~address_KECToken__fail
[2020-11-24 20:06:15,888 INFO  L138     BoogieDeclarations]: Found implementation of procedure addBlacklist~address_KECToken__success
[2020-11-24 20:06:15,888 INFO  L138     BoogieDeclarations]: Found implementation of procedure removeBlacklist~address_KECToken__fail
[2020-11-24 20:06:15,888 INFO  L138     BoogieDeclarations]: Found implementation of procedure removeBlacklist~address_KECToken__success
[2020-11-24 20:06:15,888 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_KECToken__fail
[2020-11-24 20:06:15,889 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_KECToken__success
[2020-11-24 20:06:15,889 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_KECToken__fail
[2020-11-24 20:06:15,889 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_KECToken__success
[2020-11-24 20:06:15,889 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_KECToken__fail
[2020-11-24 20:06:15,889 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_KECToken__success
[2020-11-24 20:06:15,889 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_KECToken__fail
[2020-11-24 20:06:15,889 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_KECToken__success
[2020-11-24 20:06:15,889 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_KECToken__fail
[2020-11-24 20:06:15,889 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_KECToken__success
[2020-11-24 20:06:15,889 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_KECToken__fail
[2020-11-24 20:06:15,889 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_KECToken__success
[2020-11-24 20:06:15,889 INFO  L138     BoogieDeclarations]: Found implementation of procedure increaseAllowance~address~uint256_KECToken__fail
[2020-11-24 20:06:15,889 INFO  L138     BoogieDeclarations]: Found implementation of procedure increaseAllowance~address~uint256_KECToken__success
[2020-11-24 20:06:15,889 INFO  L138     BoogieDeclarations]: Found implementation of procedure decreaseAllowance~address~uint256_KECToken__fail
[2020-11-24 20:06:15,890 INFO  L138     BoogieDeclarations]: Found implementation of procedure decreaseAllowance~address~uint256_KECToken__success
[2020-11-24 20:06:15,890 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_KECToken__fail
[2020-11-24 20:06:15,890 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_KECToken__success
[2020-11-24 20:06:15,890 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_KECToken__fail
[2020-11-24 20:06:15,890 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_KECToken__success
[2020-11-24 20:06:15,890 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_KECToken__fail
[2020-11-24 20:06:15,890 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_KECToken__success
[2020-11-24 20:06:15,890 INFO  L138     BoogieDeclarations]: Found implementation of procedure owner_KECToken__fail
[2020-11-24 20:06:15,890 INFO  L138     BoogieDeclarations]: Found implementation of procedure owner_KECToken__success
[2020-11-24 20:06:15,890 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackDispatch__fail
[2020-11-24 20:06:15,890 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackDispatch__success
[2020-11-24 20:06:15,890 INFO  L138     BoogieDeclarations]: Found implementation of procedure Fallback_UnknownType__fail
[2020-11-24 20:06:15,890 INFO  L138     BoogieDeclarations]: Found implementation of procedure Fallback_UnknownType__success
[2020-11-24 20:06:15,890 INFO  L138     BoogieDeclarations]: Found implementation of procedure send__fail
[2020-11-24 20:06:15,891 INFO  L138     BoogieDeclarations]: Found implementation of procedure send__success
[2020-11-24 20:06:15,891 INFO  L138     BoogieDeclarations]: Found implementation of procedure onlyOwner_pre__fail
[2020-11-24 20:06:15,891 INFO  L138     BoogieDeclarations]: Found implementation of procedure onlyOwner_pre__success
[2020-11-24 20:06:15,891 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_SafeMath
[2020-11-24 20:06:15,891 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_SafeMath
[2020-11-24 20:06:15,891 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_IERC20
[2020-11-24 20:06:15,891 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_IERC20
[2020-11-24 20:06:15,891 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_KECToken
[2020-11-24 20:06:15,891 INFO  L138     BoogieDeclarations]: Found implementation of procedure main
[2020-11-24 20:06:15,891 INFO  L130     BoogieDeclarations]: Found specification of procedure ULTIMATE.start
[2020-11-24 20:06:15,891 INFO  L138     BoogieDeclarations]: Found implementation of procedure ULTIMATE.start
[2020-11-24 20:06:16,252 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-24 20:06:16,253 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-24 20:06:16,253 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-24 20:06:16,484 INFO  L281             CfgBuilder]: Using the 1 location(s) as analysis (start of procedure ULTIMATE.start)
[2020-11-24 20:06:16,485 INFO  L286             CfgBuilder]: Removed 3 assue(true) statements.
[2020-11-24 20:06:16,486 INFO  L202        PluginConnector]: Adding new model KECToken_0x7825adf319ed717f8402b439c41c7f7e4f061d14_transfer-self.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 24.11 08:06:16 BoogieIcfgContainer
[2020-11-24 20:06:16,487 INFO  L185        PluginConnector]: Executing the observer RCFGBuilderObserver from plugin RCFGBuilder for "Hardcoded edu.utexas.cs.utopia.specLang AST 24.11 08:06:15" (2/2) ...
[2020-11-24 20:06:16,487 INFO  L85     RCFGBuilderObserver]: No WrapperNode. Let Ultimate process with next node
[2020-11-24 20:06:16,487 INFO  L205        PluginConnector]: Invalid model from RCFGBuilder for observer de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder.RCFGBuilderObserver@721ad851 and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 24.11 08:06:16, skipping insertion in model container
[2020-11-24 20:06:16,487 INFO  L132        PluginConnector]: ------------------------ END RCFGBuilder----------------------------
[2020-11-24 20:06:16,487 INFO  L113        PluginConnector]: ------------------------UtopiaLTL2Aut----------------------------
[2020-11-24 20:06:16,487 INFO  L271        PluginConnector]: Initializing UtopiaLTL2Aut...
[2020-11-24 20:06:16,489 INFO  L276        PluginConnector]: UtopiaLTL2Aut initialized
[2020-11-24 20:06:16,489 INFO  L185        PluginConnector]: Executing the observer UtopiaLTL2AutObserver from plugin UtopiaLTL2Aut for "KECToken_0x7825adf319ed717f8402b439c41c7f7e4f061d14_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 24.11 08:06:15" (1/3) ...
[2020-11-24 20:06:16,489 INFO  L205        PluginConnector]: Invalid model from UtopiaLTL2Aut for observer edu.utexas.cs.utopia.ltl2aut.UtopiaLTL2AutObserver@24a43158 and model type Hardcoded edu.utexas.cs.utopia.ltl2aut AST 24.11 08:06:16, skipping insertion in model container
[2020-11-24 20:06:16,490 INFO  L185        PluginConnector]: Executing the observer UtopiaLTL2AutObserver from plugin UtopiaLTL2Aut for "Hardcoded edu.utexas.cs.utopia.specLang AST 24.11 08:06:15" (2/3) ...
No working directory specified, using /mnt/data0/jon/SmartPulseTool/ltl2ba
Starting monitored process 1 with /mnt/data0/jon/SmartPulseTool/ltl2ba -f ! ( ( [] ( a -> ( <>b ) ) ) )  (exit command is null, workingDir is null)
[2020-11-24 20:06:16,527 INFO  L202        PluginConnector]: Adding new model Hardcoded edu.utexas.cs.utopia.ltl2aut AST 24.11 08:06:16 NWAContainer
[2020-11-24 20:06:16,527 INFO  L132        PluginConnector]: ------------------------ END UtopiaLTL2Aut----------------------------
[2020-11-24 20:06:16,527 INFO  L113        PluginConnector]: ------------------------BÃ¼chi Program Product----------------------------
[2020-11-24 20:06:16,527 INFO  L271        PluginConnector]: Initializing BÃ¼chi Program Product...
[2020-11-24 20:06:16,528 INFO  L276        PluginConnector]: BÃ¼chi Program Product initialized
[2020-11-24 20:06:16,529 INFO  L185        PluginConnector]: Executing the observer BuchiProductObserver from plugin BÃ¼chi Program Product for "KECToken_0x7825adf319ed717f8402b439c41c7f7e4f061d14_transfer-self.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 24.11 08:06:16" (3/4) ...
[2020-11-24 20:06:16,530 INFO  L205        PluginConnector]: Invalid model from BÃ¼chi Program Product for observer de.uni_freiburg.informatik.ultimate.buchiprogramproduct.BuchiProductObserver@71b13665 and model type LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 24.11 08:06:16, skipping insertion in model container
[2020-11-24 20:06:16,530 INFO  L185        PluginConnector]: Executing the observer BuchiProductObserver from plugin BÃ¼chi Program Product for "Hardcoded edu.utexas.cs.utopia.ltl2aut AST 24.11 08:06:16" (4/4) ...
[2020-11-24 20:06:16,534 INFO  L104   BuchiProductObserver]: Initial property automaton 2 locations, 3 edges
[2020-11-24 20:06:16,537 INFO  L110   BuchiProductObserver]: Initial RCFG 1092 locations, 1351 edges
[2020-11-24 20:06:16,537 INFO  L93    BuchiProductObserver]: Beginning generation of product automaton
[2020-11-24 20:06:16,548 INFO  L136       ProductGenerator]: The program has no step specification, so we assume maximum atomicity
[2020-11-24 20:06:17,481 INFO  L97    BuchiProductObserver]: Finished generation of product automaton successfully
[2020-11-24 20:06:17,484 INFO  L110   BuchiProductObserver]: BuchiProgram size 2568 locations, 4347 edges
[2020-11-24 20:06:17,484 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 24.11 08:06:17 BoogieIcfgContainer
[2020-11-24 20:06:17,485 INFO  L132        PluginConnector]: ------------------------ END BÃ¼chi Program Product----------------------------
[2020-11-24 20:06:17,485 INFO  L113        PluginConnector]: ------------------------BlockEncodingV2----------------------------
[2020-11-24 20:06:17,485 INFO  L271        PluginConnector]: Initializing BlockEncodingV2...
[2020-11-24 20:06:17,486 INFO  L276        PluginConnector]: BlockEncodingV2 initialized
[2020-11-24 20:06:17,487 INFO  L185        PluginConnector]: Executing the observer BlockEncodingObserver from plugin BlockEncodingV2 for "LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 24.11 08:06:17" (1/1) ...
[2020-11-24 20:06:17,534 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call __var_3 := mod~uint256~uint256~string_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s162, b_s162, -1564128623);
[2020-11-24 20:06:17,536 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call __var_3 := mod~uint256~uint256~string_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, a_s162, b_s162, -1564128623);
[2020-11-24 20:06:17,537 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call __var_2 := div~uint256~uint256~string_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s119, b_s119, 1634523985);
[2020-11-24 20:06:17,537 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call __var_2 := div~uint256~uint256~string_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, a_s119, b_s119, 1634523985);
[2020-11-24 20:06:17,543 INFO  L313           BlockEncoder]: Initial Icfg 2568 locations, 4347 edges
[2020-11-24 20:06:17,544 INFO  L258           BlockEncoder]: Using Remove infeasible edges
[2020-11-24 20:06:17,544 INFO  L270           BlockEncoder]: Using Minimize states even if more edges are added than removed.=true
[2020-11-24 20:06:17,544 INFO  L296           BlockEncoder]: Using Remove sink states
[2020-11-24 20:06:17,545 INFO  L171           BlockEncoder]: Using Apply optimizations until nothing changes=true
[2020-11-24 20:06:17,563 INFO  L70    emoveInfeasibleEdges]: Removed 39 edges and 9 locations because of local infeasibility
[2020-11-24 20:06:17,569 INFO  L70        RemoveSinkStates]: Removed 2 edges and 1 locations by removing sink states
[2020-11-24 20:06:17,577 INFO  L70    emoveInfeasibleEdges]: Removed 0 edges and 0 locations because of local infeasibility
[2020-11-24 20:06:17,580 INFO  L70        RemoveSinkStates]: Removed 0 edges and 0 locations by removing sink states
[2020-11-24 20:06:17,582 INFO  L237           BlockEncoder]: Using Create parallel compositions if possible
[2020-11-24 20:06:17,582 INFO  L66        ParallelComposer]: Creating parallel compositions
[2020-11-24 20:06:17,585 INFO  L313           BlockEncoder]: Encoded RCFG 2542 locations, 4283 edges
[2020-11-24 20:06:17,586 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.blockencoding CFG 24.11 08:06:17 BasicIcfg
[2020-11-24 20:06:17,586 INFO  L132        PluginConnector]: ------------------------ END BlockEncodingV2----------------------------
[2020-11-24 20:06:17,586 INFO  L113        PluginConnector]: ------------------------BuchiAutomizer----------------------------
[2020-11-24 20:06:17,586 INFO  L271        PluginConnector]: Initializing BuchiAutomizer...
[2020-11-24 20:06:17,588 INFO  L276        PluginConnector]: BuchiAutomizer initialized
[2020-11-24 20:06:17,588 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-24 20:06:17,588 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "KECToken_0x7825adf319ed717f8402b439c41c7f7e4f061d14_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 24.11 08:06:15" (1/6) ...
[2020-11-24 20:06:17,590 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@5cdf3af6 and model type KECToken_0x7825adf319ed717f8402b439c41c7f7e4f061d14_transfer-self.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 24.11 08:06:17, skipping insertion in model container
[2020-11-24 20:06:17,590 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-24 20:06:17,590 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Hardcoded edu.utexas.cs.utopia.specLang AST 24.11 08:06:15" (2/6) ...
[2020-11-24 20:06:17,590 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@5cdf3af6 and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 24.11 08:06:17, skipping insertion in model container
[2020-11-24 20:06:17,590 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-24 20:06:17,591 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "KECToken_0x7825adf319ed717f8402b439c41c7f7e4f061d14_transfer-self.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 24.11 08:06:16" (3/6) ...
[2020-11-24 20:06:17,591 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@5cdf3af6 and model type KECToken_0x7825adf319ed717f8402b439c41c7f7e4f061d14_transfer-self.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer CFG 24.11 08:06:17, skipping insertion in model container
[2020-11-24 20:06:17,591 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-24 20:06:17,591 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Hardcoded edu.utexas.cs.utopia.ltl2aut AST 24.11 08:06:16" (4/6) ...
[2020-11-24 20:06:17,591 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@5cdf3af6 and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 24.11 08:06:17, skipping insertion in model container
[2020-11-24 20:06:17,591 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-24 20:06:17,591 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 24.11 08:06:17" (5/6) ...
[2020-11-24 20:06:17,591 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@5cdf3af6 and model type LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer OTHER 24.11 08:06:17, skipping insertion in model container
[2020-11-24 20:06:17,592 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-24 20:06:17,592 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.blockencoding CFG 24.11 08:06:17" (6/6) ...
[2020-11-24 20:06:17,593 INFO  L404   chiAutomizerObserver]: Analyzing ICFG KECToken_0x7825adf319ed717f8402b439c41c7f7e4f061d14_transfer-self.bpl_BEv2
[2020-11-24 20:06:17,624 INFO  L133   ementStrategyFactory]: Using default assertion order modulation
[2020-11-24 20:06:17,624 INFO  L377         BuchiCegarLoop]: Interprodecural is true
[2020-11-24 20:06:17,624 INFO  L378         BuchiCegarLoop]: Hoare is false
[2020-11-24 20:06:17,624 INFO  L379         BuchiCegarLoop]: Compute interpolants for Craig_TreeInterpolation
[2020-11-24 20:06:17,624 INFO  L380         BuchiCegarLoop]: Backedges is STRAIGHT_LINE
[2020-11-24 20:06:17,624 INFO  L381         BuchiCegarLoop]: Determinization is PREDICATE_ABSTRACTION
[2020-11-24 20:06:17,624 INFO  L382         BuchiCegarLoop]: Difference is false
[2020-11-24 20:06:17,624 INFO  L383         BuchiCegarLoop]: Minimize is MINIMIZE_SEVPA
[2020-11-24 20:06:17,624 INFO  L386         BuchiCegarLoop]: ======== Iteration 0==of CEGAR loop == BuchiCegarLoop========
[2020-11-24 20:06:17,648 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2542 states.
[2020-11-24 20:06:17,694 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-24 20:06:17,694 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-24 20:06:17,694 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-24 20:06:17,704 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-24 20:06:17,704 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-24 20:06:17,704 INFO  L445         BuchiCegarLoop]: ======== Iteration 1============
[2020-11-24 20:06:17,704 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2542 states.
[2020-11-24 20:06:17,727 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-24 20:06:17,727 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-24 20:06:17,727 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-24 20:06:17,729 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-24 20:06:17,729 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_KECToken0 := false;
[L2]                 call_transfer_KECToken0 := false;
[L2]     CALL        call main();
[L3007]              assume null == 0;
[L3008]  CALL        call this := FreshRefGenerator__success();
[L1448]              havoc newRef;
[L1449]              assume Alloc[newRef] == false;
[L1450]              Alloc[newRef] := true;
[L1451]              assume newRef != null;
[L3008]  RET         call this := FreshRefGenerator__success();
[L3009]              assume now >= 0;
[L3010]              assume DType[this] == KECToken;
[L3011]              assume msgvalue_MSG == 0;
[L3012]              gas := gas - 53000;
[L3013]  CALL        call KECToken_KECToken(this, msgsender_MSG, msgvalue_MSG, _owner_s306);
[L243]               havoc __exception;
[L244]               revert := false;
[L245]   COND FALSE  !(__exception)
[L270]   CALL        call KECToken_KECToken__success(this, msgsender_MSG, msgvalue_MSG, _owner_s306);
[L1766]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1702]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1687]              assume msgsender_MSG != null;
[L1688]              Balance[this] := 0;
[L1702]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1703]  COND FALSE  !(revert)
[L1766]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1767]  COND TRUE   revert
[L270]   RET         call KECToken_KECToken__success(this, msgsender_MSG, msgvalue_MSG, _owner_s306);
[L271]               assume !revert && gas >= 0;
[L3013]  RET         call KECToken_KECToken(this, msgsender_MSG, msgvalue_MSG, _owner_s306);
[L3014]              assume !revert && gas >= 0;

Loop:
[L3017]  CALL        call CorralChoice_KECToken(this);
[L2866]              havoc msgsender_MSG;
[L2867]              havoc msgvalue_MSG;
[L2868]              havoc choice;
[L2869]              havoc __ret_0_totalSupply;
[L2870]              havoc _owner_s365;
[L2871]              havoc __ret_0_balanceOf;
[L2872]              havoc to_s456;
[L2873]              havoc value_s456;
[L2874]              havoc __ret_0_transfer;
[L2875]              havoc _owner_s381;
[L2876]              havoc spender_s381;
[L2877]              havoc __ret_0_allowance;
[L2878]              havoc spender_s522;
[L2879]              havoc value_s522;
[L2880]              havoc __ret_0_approve;
[L2881]              havoc from_s622;
[L2882]              havoc to_s622;
[L2883]              havoc value_s622;
[L2884]              havoc __ret_0_transferFrom;
[L2885]              havoc __ret_0_name;
[L2886]              havoc __ret_0_symbol;
[L2887]              havoc __ret_0_decimals;
[L2888]              havoc __ret_0_owner;
[L2889]              havoc _owner_s306;
[L2890]              havoc account_s331;
[L2891]              havoc account_s345;
[L2892]              havoc spender_s687;
[L2893]              havoc addedValue_s687;
[L2894]              havoc __ret_0_increaseAllowance;
[L2895]              havoc spender_s752;
[L2896]              havoc subtractedValue_s752;
[L2897]              havoc __ret_0_decreaseAllowance;
[L2898]              havoc tmpNow;
[L2899]              havoc gas;
[L2900]              assume gas > 4000000 && gas <= 8000000;
[L2901]              tmpNow := now;
[L2902]              havoc now;
[L2903]              assume now > tmpNow;
[L2904]              assume msgsender_MSG != null;
[L2905]              assume DType[msgsender_MSG] != SafeMath;
[L2906]              assume DType[msgsender_MSG] != IERC20;
[L2907]              assume DType[msgsender_MSG] != KECToken;
[L2908]              Alloc[msgsender_MSG] := true;
[L2909]  COND TRUE   choice == 14
[L2910]              gas := gas - 21000;
[L2911]  COND FALSE  !(gas >= 0)
[L3017]  RET         call CorralChoice_KECToken(this);

[2020-11-24 20:06:17,745 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-24 20:06:17,745 INFO  L82        PathProgramCache]: Analyzing trace with hash 2019706918, now seen corresponding path program 1 times
[2020-11-24 20:06:17,750 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-24 20:06:17,775 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-24 20:06:17,822 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-24 20:06:17,824 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-24 20:06:17,824 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [4] imperfect sequences [] total 4
[2020-11-24 20:06:17,829 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-24 20:06:17,969 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-11-24 20:06:17,970 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=5, Invalid=7, Unknown=0, NotChecked=0, Total=12
[2020-11-24 20:06:17,971 INFO  L87              Difference]: Start difference. First operand 2542 states. Second operand 4 states.
[2020-11-24 20:06:18,574 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-24 20:06:18,574 INFO  L93              Difference]: Finished difference Result 3108 states and 5044 transitions.
[2020-11-24 20:06:18,574 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 4 states. 
[2020-11-24 20:06:18,575 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 3108 states and 5044 transitions.
[2020-11-24 20:06:18,593 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 6
[2020-11-24 20:06:18,616 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 3108 states to 2962 states and 4794 transitions.
[2020-11-24 20:06:18,616 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 13
[2020-11-24 20:06:18,621 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1004
[2020-11-24 20:06:18,621 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 2962 states and 4794 transitions.
[2020-11-24 20:06:18,635 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-24 20:06:18,635 INFO  L728         BuchiCegarLoop]: Abstraction has 2962 states and 4794 transitions.
[2020-11-24 20:06:18,648 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 2962 states and 4794 transitions.
[2020-11-24 20:06:18,695 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 2962 to 2198.
[2020-11-24 20:06:18,695 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 2198 states.
[2020-11-24 20:06:18,700 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 2198 states to 2198 states and 3377 transitions.
[2020-11-24 20:06:18,700 INFO  L751         BuchiCegarLoop]: Abstraction has 2198 states and 3377 transitions.
[2020-11-24 20:06:18,700 INFO  L631         BuchiCegarLoop]: Abstraction has 2198 states and 3377 transitions.
[2020-11-24 20:06:18,700 INFO  L445         BuchiCegarLoop]: ======== Iteration 2============
[2020-11-24 20:06:18,701 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2198 states and 3377 transitions.
[2020-11-24 20:06:18,706 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-24 20:06:18,707 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-24 20:06:18,707 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-24 20:06:18,708 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-24 20:06:18,708 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_KECToken0 := false;
[L2]                 call_transfer_KECToken0 := false;
[L2]     CALL        call main();
[L3007]              assume null == 0;
[L3008]  CALL        call this := FreshRefGenerator__success();
[L1448]              havoc newRef;
[L1449]              assume Alloc[newRef] == false;
[L1450]              Alloc[newRef] := true;
[L1451]              assume newRef != null;
[L3008]  RET         call this := FreshRefGenerator__success();
[L3009]              assume now >= 0;
[L3010]              assume DType[this] == KECToken;
[L3011]              assume msgvalue_MSG == 0;
[L3012]              gas := gas - 53000;
[L3013]  CALL        call KECToken_KECToken(this, msgsender_MSG, msgvalue_MSG, _owner_s306);
[L243]               havoc __exception;
[L244]               revert := false;
[L245]   COND FALSE  !(__exception)
[L270]   CALL        call KECToken_KECToken__success(this, msgsender_MSG, msgvalue_MSG, _owner_s306);
[L1766]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1702]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1687]              assume msgsender_MSG != null;
[L1688]              Balance[this] := 0;
[L1702]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1703]  COND FALSE  !(revert)
[L1766]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1767]  COND FALSE  !(revert)
[L1770]  CALL        call KECToken_KECToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _owner_s306);
[L1733]              assume msgsender_MSG != null;
[L1734]              Balance[this] := 0;
[L1735]              _balances_KECToken[this] := zeroRefintArr();
[L1736]              sum__balances0[this] := 0;
[L1737]              _allowed_KECToken[this] := zeroRefRefintArr();
[L1738]              sum__allowed1[this] := 0;
[L1739]              _blacklist_KECToken[this] := zeroRefboolArr();
[L1740]              name_KECToken[this] := 1644945346;
[L1741]              symbol_KECToken[this] := 426684384;
[L1742]              decimals_KECToken[this] := 18;
[L1743]              _totalSupply_KECToken[this] := 5000000 * (1000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L1744]              owner_KECToken[this] := null;
[L1746]              owner_KECToken[this] := _owner_s306;
[L1747]              sum__balances0[this] := sum__balances0[this] - _balances_KECToken[this][_owner_s306];
[L1748]              _balances_KECToken[this][_owner_s306] := _totalSupply_KECToken[this];
[L1749]              sum__balances0[this] := sum__balances0[this] + _balances_KECToken[this][_owner_s306];
[L1770]  RET         call KECToken_KECToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _owner_s306);
[L1771]  COND FALSE  !(revert)
[L270]   RET         call KECToken_KECToken__success(this, msgsender_MSG, msgvalue_MSG, _owner_s306);
[L271]               assume !revert && gas >= 0;
[L3013]  RET         call KECToken_KECToken(this, msgsender_MSG, msgvalue_MSG, _owner_s306);
[L3014]              assume !revert && gas >= 0;

Loop:
[L3017]  CALL        call CorralChoice_KECToken(this);
[L2866]              havoc msgsender_MSG;
[L2867]              havoc msgvalue_MSG;
[L2868]              havoc choice;
[L2869]              havoc __ret_0_totalSupply;
[L2870]              havoc _owner_s365;
[L2871]              havoc __ret_0_balanceOf;
[L2872]              havoc to_s456;
[L2873]              havoc value_s456;
[L2874]              havoc __ret_0_transfer;
[L2875]              havoc _owner_s381;
[L2876]              havoc spender_s381;
[L2877]              havoc __ret_0_allowance;
[L2878]              havoc spender_s522;
[L2879]              havoc value_s522;
[L2880]              havoc __ret_0_approve;
[L2881]              havoc from_s622;
[L2882]              havoc to_s622;
[L2883]              havoc value_s622;
[L2884]              havoc __ret_0_transferFrom;
[L2885]              havoc __ret_0_name;
[L2886]              havoc __ret_0_symbol;
[L2887]              havoc __ret_0_decimals;
[L2888]              havoc __ret_0_owner;
[L2889]              havoc _owner_s306;
[L2890]              havoc account_s331;
[L2891]              havoc account_s345;
[L2892]              havoc spender_s687;
[L2893]              havoc addedValue_s687;
[L2894]              havoc __ret_0_increaseAllowance;
[L2895]              havoc spender_s752;
[L2896]              havoc subtractedValue_s752;
[L2897]              havoc __ret_0_decreaseAllowance;
[L2898]              havoc tmpNow;
[L2899]              havoc gas;
[L2900]              assume gas > 4000000 && gas <= 8000000;
[L2901]              tmpNow := now;
[L2902]              havoc now;
[L2903]              assume now > tmpNow;
[L2904]              assume msgsender_MSG != null;
[L2905]              assume DType[msgsender_MSG] != SafeMath;
[L2906]              assume DType[msgsender_MSG] != IERC20;
[L2907]              assume DType[msgsender_MSG] != KECToken;
[L2908]              Alloc[msgsender_MSG] := true;
[L2909]  COND TRUE   choice == 14
[L2910]              gas := gas - 21000;
[L2911]  COND FALSE  !(gas >= 0)
[L3017]  RET         call CorralChoice_KECToken(this);

[2020-11-24 20:06:18,710 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-24 20:06:18,710 INFO  L82        PathProgramCache]: Analyzing trace with hash 1970034915, now seen corresponding path program 1 times
[2020-11-24 20:06:18,711 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-24 20:06:18,718 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-24 20:06:18,730 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-24 20:06:18,731 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-24 20:06:18,731 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [4] imperfect sequences [] total 4
[2020-11-24 20:06:18,732 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-24 20:06:18,732 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-11-24 20:06:18,732 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=5, Invalid=7, Unknown=0, NotChecked=0, Total=12
[2020-11-24 20:06:18,732 INFO  L87              Difference]: Start difference. First operand 2198 states and 3377 transitions. cyclomatic complexity: 1181 Second operand 4 states.
[2020-11-24 20:06:19,031 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-24 20:06:19,031 INFO  L93              Difference]: Finished difference Result 2071 states and 2232 transitions.
[2020-11-24 20:06:19,032 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 4 states. 
[2020-11-24 20:06:19,033 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2071 states and 2232 transitions.
[2020-11-24 20:06:19,043 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-24 20:06:19,054 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2071 states to 2071 states and 2232 transitions.
[2020-11-24 20:06:19,054 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 659
[2020-11-24 20:06:19,054 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 659
[2020-11-24 20:06:19,055 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 2071 states and 2232 transitions.
[2020-11-24 20:06:19,057 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-24 20:06:19,057 INFO  L728         BuchiCegarLoop]: Abstraction has 2071 states and 2232 transitions.
[2020-11-24 20:06:19,059 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 2071 states and 2232 transitions.
[2020-11-24 20:06:19,078 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 2071 to 2071.
[2020-11-24 20:06:19,078 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 2071 states.
[2020-11-24 20:06:19,082 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 2071 states to 2071 states and 2232 transitions.
[2020-11-24 20:06:19,082 INFO  L751         BuchiCegarLoop]: Abstraction has 2071 states and 2232 transitions.
[2020-11-24 20:06:19,082 INFO  L631         BuchiCegarLoop]: Abstraction has 2071 states and 2232 transitions.
[2020-11-24 20:06:19,082 INFO  L445         BuchiCegarLoop]: ======== Iteration 3============
[2020-11-24 20:06:19,082 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2071 states and 2232 transitions.
[2020-11-24 20:06:19,088 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-24 20:06:19,088 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-24 20:06:19,088 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-24 20:06:19,090 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-24 20:06:19,090 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_KECToken0 := false;
[L2]                 call_transfer_KECToken0 := false;
[L2]     CALL        call main();
[L3007]              assume null == 0;
[L3008]  CALL        call this := FreshRefGenerator__success();
[L1448]              havoc newRef;
[L1449]              assume Alloc[newRef] == false;
[L1450]              Alloc[newRef] := true;
[L1451]              assume newRef != null;
[L3008]  RET         call this := FreshRefGenerator__success();
[L3009]              assume now >= 0;
[L3010]              assume DType[this] == KECToken;
[L3011]              assume msgvalue_MSG == 0;
[L3012]              gas := gas - 53000;
[L3013]  CALL        call KECToken_KECToken(this, msgsender_MSG, msgvalue_MSG, _owner_s306);
[L243]               havoc __exception;
[L244]               revert := false;
[L245]   COND FALSE  !(__exception)
[L270]   CALL        call KECToken_KECToken__success(this, msgsender_MSG, msgvalue_MSG, _owner_s306);
[L1766]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1702]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1687]              assume msgsender_MSG != null;
[L1688]              Balance[this] := 0;
[L1702]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1703]  COND FALSE  !(revert)
[L1766]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1767]  COND FALSE  !(revert)
[L1770]  CALL        call KECToken_KECToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _owner_s306);
[L1733]              assume msgsender_MSG != null;
[L1734]              Balance[this] := 0;
[L1735]              _balances_KECToken[this] := zeroRefintArr();
[L1736]              sum__balances0[this] := 0;
[L1737]              _allowed_KECToken[this] := zeroRefRefintArr();
[L1738]              sum__allowed1[this] := 0;
[L1739]              _blacklist_KECToken[this] := zeroRefboolArr();
[L1740]              name_KECToken[this] := 1644945346;
[L1741]              symbol_KECToken[this] := 426684384;
[L1742]              decimals_KECToken[this] := 18;
[L1743]              _totalSupply_KECToken[this] := 5000000 * (1000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L1744]              owner_KECToken[this] := null;
[L1746]              owner_KECToken[this] := _owner_s306;
[L1747]              sum__balances0[this] := sum__balances0[this] - _balances_KECToken[this][_owner_s306];
[L1748]              _balances_KECToken[this][_owner_s306] := _totalSupply_KECToken[this];
[L1749]              sum__balances0[this] := sum__balances0[this] + _balances_KECToken[this][_owner_s306];
[L1770]  RET         call KECToken_KECToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _owner_s306);
[L1771]  COND FALSE  !(revert)
[L270]   RET         call KECToken_KECToken__success(this, msgsender_MSG, msgvalue_MSG, _owner_s306);
[L271]               assume !revert && gas >= 0;
[L3013]  RET         call KECToken_KECToken(this, msgsender_MSG, msgvalue_MSG, _owner_s306);
[L3014]              assume !revert && gas >= 0;
[L3017]  CALL        call CorralChoice_KECToken(this);
[L2866]              havoc msgsender_MSG;
[L2867]              havoc msgvalue_MSG;
[L2868]              havoc choice;
[L2869]              havoc __ret_0_totalSupply;
[L2870]              havoc _owner_s365;
[L2871]              havoc __ret_0_balanceOf;
[L2872]              havoc to_s456;
[L2873]              havoc value_s456;
[L2874]              havoc __ret_0_transfer;
[L2875]              havoc _owner_s381;
[L2876]              havoc spender_s381;
[L2877]              havoc __ret_0_allowance;
[L2878]              havoc spender_s522;
[L2879]              havoc value_s522;
[L2880]              havoc __ret_0_approve;
[L2881]              havoc from_s622;
[L2882]              havoc to_s622;
[L2883]              havoc value_s622;
[L2884]              havoc __ret_0_transferFrom;
[L2885]              havoc __ret_0_name;
[L2886]              havoc __ret_0_symbol;
[L2887]              havoc __ret_0_decimals;
[L2888]              havoc __ret_0_owner;
[L2889]              havoc _owner_s306;
[L2890]              havoc account_s331;
[L2891]              havoc account_s345;
[L2892]              havoc spender_s687;
[L2893]              havoc addedValue_s687;
[L2894]              havoc __ret_0_increaseAllowance;
[L2895]              havoc spender_s752;
[L2896]              havoc subtractedValue_s752;
[L2897]              havoc __ret_0_decreaseAllowance;
[L2898]              havoc tmpNow;
[L2899]              havoc gas;
[L2900]              assume gas > 4000000 && gas <= 8000000;
[L2901]              tmpNow := now;
[L2902]              havoc now;
[L2903]              assume now > tmpNow;
[L2904]              assume msgsender_MSG != null;
[L2905]              assume DType[msgsender_MSG] != SafeMath;
[L2906]              assume DType[msgsender_MSG] != IERC20;
[L2907]              assume DType[msgsender_MSG] != KECToken;
[L2908]              Alloc[msgsender_MSG] := true;
[L2909]  COND FALSE  !(choice == 14)
[L2915]  COND FALSE  !(choice == 13)
[L2921]  COND TRUE   choice == 12
[L2922]              gas := gas - 21000;
[L2923]  COND TRUE   gas >= 0
[L2924]              assume value_s456 >= 0 && value_s456 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2925]              assume msgvalue_MSG == 0;
[L2926]  CALL        call __ret_0_transfer := transfer~address~uint256_KECToken(this, msgsender_MSG, msgvalue_MSG, to_s456, value_s456);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == to_s456 && value_s456 <= _balances_KECToken[this][msgsender_MSG]) && value_s456 >= 0) && value_s456 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_KECToken[this][to_s456] >= 0) && _balances_KECToken[this][to_s456] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_KECToken[this][msgsender_MSG] >= 0) && _balances_KECToken[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_KECToken0 := true;
[L2]                 call_transfer_KECToken0 := false;
[L2]                 revert := revert_hold;
[L595]               havoc __exception;
[L596]               revert := false;
[L597]   COND TRUE   __exception
[L598]               __tmp__Balance := Balance;
[L599]               __tmp__DType := DType;
[L600]               __tmp__Alloc := Alloc;
[L601]               __tmp__balance_ADDR := balance_ADDR;
[L602]               __tmp__M_Ref_int := M_Ref_int;
[L603]               __tmp__sum__balances0 := sum__balances0;
[L604]               __tmp__alloc__allowed_KECToken_lvl0 := alloc__allowed_KECToken_lvl0;
[L605]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L606]               __tmp__sum__allowed1 := sum__allowed1;
[L607]               __tmp__M_Ref_bool := M_Ref_bool;
[L608]               __tmp__sum__blacklist2 := sum__blacklist2;
[L609]               __tmp__Length := Length;
[L610]               __tmp__now := now;
[L611]               __tmp___balances_KECToken := _balances_KECToken;
[L612]               __tmp___allowed_KECToken := _allowed_KECToken;
[L613]               __tmp___blacklist_KECToken := _blacklist_KECToken;
[L614]               __tmp__name_KECToken := name_KECToken;
[L615]               __tmp__symbol_KECToken := symbol_KECToken;
[L616]               __tmp__decimals_KECToken := decimals_KECToken;
[L617]               __tmp___totalSupply_KECToken := _totalSupply_KECToken;
[L618]               __tmp__owner_KECToken := owner_KECToken;
[L619]   CALL        call __ret_0_ := transfer~address~uint256_KECToken__fail(this, msgsender_MSG, msgvalue_MSG, to_s456, value_s456);
[L1853]  COND TRUE   !(value_s456 <= __tmp___balances_KECToken[this][msgsender_MSG])
[L1854]              revert := true;
[L619]   RET         call __ret_0_ := transfer~address~uint256_KECToken__fail(this, msgsender_MSG, msgvalue_MSG, to_s456, value_s456);
[L620]               assume revert || gas < 0;
[L2926]  RET         call __ret_0_transfer := transfer~address~uint256_KECToken(this, msgsender_MSG, msgvalue_MSG, to_s456, value_s456);
[L3017]  RET         call CorralChoice_KECToken(this);

Loop:
[L3017]  CALL        call CorralChoice_KECToken(this);
[L2866]              havoc msgsender_MSG;
[L2867]              havoc msgvalue_MSG;
[L2868]              havoc choice;
[L2869]              havoc __ret_0_totalSupply;
[L2870]              havoc _owner_s365;
[L2871]              havoc __ret_0_balanceOf;
[L2872]              havoc to_s456;
[L2873]              havoc value_s456;
[L2874]              havoc __ret_0_transfer;
[L2875]              havoc _owner_s381;
[L2876]              havoc spender_s381;
[L2877]              havoc __ret_0_allowance;
[L2878]              havoc spender_s522;
[L2879]              havoc value_s522;
[L2880]              havoc __ret_0_approve;
[L2881]              havoc from_s622;
[L2882]              havoc to_s622;
[L2883]              havoc value_s622;
[L2884]              havoc __ret_0_transferFrom;
[L2885]              havoc __ret_0_name;
[L2886]              havoc __ret_0_symbol;
[L2887]              havoc __ret_0_decimals;
[L2888]              havoc __ret_0_owner;
[L2889]              havoc _owner_s306;
[L2890]              havoc account_s331;
[L2891]              havoc account_s345;
[L2892]              havoc spender_s687;
[L2893]              havoc addedValue_s687;
[L2894]              havoc __ret_0_increaseAllowance;
[L2895]              havoc spender_s752;
[L2896]              havoc subtractedValue_s752;
[L2897]              havoc __ret_0_decreaseAllowance;
[L2898]              havoc tmpNow;
[L2899]              havoc gas;
[L2900]              assume gas > 4000000 && gas <= 8000000;
[L2901]              tmpNow := now;
[L2902]              havoc now;
[L2903]              assume now > tmpNow;
[L2904]              assume msgsender_MSG != null;
[L2905]              assume DType[msgsender_MSG] != SafeMath;
[L2906]              assume DType[msgsender_MSG] != IERC20;
[L2907]              assume DType[msgsender_MSG] != KECToken;
[L2908]              Alloc[msgsender_MSG] := true;
[L2909]  COND FALSE  !(choice == 14)
[L2915]  COND FALSE  !(choice == 13)
[L2921]  COND TRUE   choice == 12
[L2922]              gas := gas - 21000;
[L2923]  COND TRUE   gas >= 0
[L2924]              assume value_s456 >= 0 && value_s456 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2925]              assume msgvalue_MSG == 0;
[L2926]  CALL        call __ret_0_transfer := transfer~address~uint256_KECToken(this, msgsender_MSG, msgvalue_MSG, to_s456, value_s456);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == to_s456 && value_s456 <= _balances_KECToken[this][msgsender_MSG]) && value_s456 >= 0) && value_s456 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_KECToken[this][to_s456] >= 0) && _balances_KECToken[this][to_s456] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_KECToken[this][msgsender_MSG] >= 0) && _balances_KECToken[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_KECToken0 := true;
[L2]                 call_transfer_KECToken0 := false;
[L2]                 revert := revert_hold;
[L595]               havoc __exception;
[L596]               revert := false;
[L597]   COND TRUE   __exception
[L598]               __tmp__Balance := Balance;
[L599]               __tmp__DType := DType;
[L600]               __tmp__Alloc := Alloc;
[L601]               __tmp__balance_ADDR := balance_ADDR;
[L602]               __tmp__M_Ref_int := M_Ref_int;
[L603]               __tmp__sum__balances0 := sum__balances0;
[L604]               __tmp__alloc__allowed_KECToken_lvl0 := alloc__allowed_KECToken_lvl0;
[L605]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L606]               __tmp__sum__allowed1 := sum__allowed1;
[L607]               __tmp__M_Ref_bool := M_Ref_bool;
[L608]               __tmp__sum__blacklist2 := sum__blacklist2;
[L609]               __tmp__Length := Length;
[L610]               __tmp__now := now;
[L611]               __tmp___balances_KECToken := _balances_KECToken;
[L612]               __tmp___allowed_KECToken := _allowed_KECToken;
[L613]               __tmp___blacklist_KECToken := _blacklist_KECToken;
[L614]               __tmp__name_KECToken := name_KECToken;
[L615]               __tmp__symbol_KECToken := symbol_KECToken;
[L616]               __tmp__decimals_KECToken := decimals_KECToken;
[L617]               __tmp___totalSupply_KECToken := _totalSupply_KECToken;
[L618]               __tmp__owner_KECToken := owner_KECToken;
[L619]   CALL        call __ret_0_ := transfer~address~uint256_KECToken__fail(this, msgsender_MSG, msgvalue_MSG, to_s456, value_s456);
[L1853]  COND TRUE   !(value_s456 <= __tmp___balances_KECToken[this][msgsender_MSG])
[L1854]              revert := true;
[L619]   RET         call __ret_0_ := transfer~address~uint256_KECToken__fail(this, msgsender_MSG, msgvalue_MSG, to_s456, value_s456);
[L620]               assume revert || gas < 0;
[L2926]  RET         call __ret_0_transfer := transfer~address~uint256_KECToken(this, msgsender_MSG, msgvalue_MSG, to_s456, value_s456);
[L3017]  RET         call CorralChoice_KECToken(this);

[2020-11-24 20:06:19,095 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-24 20:06:19,095 INFO  L82        PathProgramCache]: Analyzing trace with hash 882460076, now seen corresponding path program 1 times
[2020-11-24 20:06:19,096 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-24 20:06:19,111 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-24 20:06:19,201 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-24 20:06:19,201 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-24 20:06:19,201 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [6] imperfect sequences [] total 6
[2020-11-24 20:06:19,202 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-24 20:06:19,202 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 6 interpolants.
[2020-11-24 20:06:19,202 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=9, Invalid=21, Unknown=0, NotChecked=0, Total=30
[2020-11-24 20:06:19,202 INFO  L87              Difference]: Start difference. First operand 2071 states and 2232 transitions. cyclomatic complexity: 163 Second operand 6 states.
[2020-11-24 20:06:20,091 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-24 20:06:20,091 INFO  L93              Difference]: Finished difference Result 2249 states and 2427 transitions.
[2020-11-24 20:06:20,091 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 7 states. 
[2020-11-24 20:06:20,091 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2249 states and 2427 transitions.
[2020-11-24 20:06:20,097 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-24 20:06:20,103 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2249 states to 2249 states and 2427 transitions.
[2020-11-24 20:06:20,103 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 720
[2020-11-24 20:06:20,103 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 720
[2020-11-24 20:06:20,103 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 2249 states and 2427 transitions.
[2020-11-24 20:06:20,105 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-24 20:06:20,105 INFO  L728         BuchiCegarLoop]: Abstraction has 2249 states and 2427 transitions.
[2020-11-24 20:06:20,107 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 2249 states and 2427 transitions.
[2020-11-24 20:06:20,120 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 2249 to 2131.
[2020-11-24 20:06:20,121 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 2131 states.
[2020-11-24 20:06:20,122 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 2131 states to 2131 states and 2296 transitions.
[2020-11-24 20:06:20,122 INFO  L751         BuchiCegarLoop]: Abstraction has 2131 states and 2296 transitions.
[2020-11-24 20:06:20,123 INFO  L631         BuchiCegarLoop]: Abstraction has 2131 states and 2296 transitions.
[2020-11-24 20:06:20,123 INFO  L445         BuchiCegarLoop]: ======== Iteration 4============
[2020-11-24 20:06:20,123 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2131 states and 2296 transitions.
[2020-11-24 20:06:20,126 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-24 20:06:20,126 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-24 20:06:20,126 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-24 20:06:20,128 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-24 20:06:20,128 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_KECToken0 := false;
[L2]                 call_transfer_KECToken0 := false;
[L2]     CALL        call main();
[L3007]              assume null == 0;
[L3008]  CALL        call this := FreshRefGenerator__success();
[L1448]              havoc newRef;
[L1449]              assume Alloc[newRef] == false;
[L1450]              Alloc[newRef] := true;
[L1451]              assume newRef != null;
[L3008]  RET         call this := FreshRefGenerator__success();
[L3009]              assume now >= 0;
[L3010]              assume DType[this] == KECToken;
[L3011]              assume msgvalue_MSG == 0;
[L3012]              gas := gas - 53000;
[L3013]  CALL        call KECToken_KECToken(this, msgsender_MSG, msgvalue_MSG, _owner_s306);
[L243]               havoc __exception;
[L244]               revert := false;
[L245]   COND FALSE  !(__exception)
[L270]   CALL        call KECToken_KECToken__success(this, msgsender_MSG, msgvalue_MSG, _owner_s306);
[L1766]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1702]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1687]              assume msgsender_MSG != null;
[L1688]              Balance[this] := 0;
[L1702]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1703]  COND FALSE  !(revert)
[L1766]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1767]  COND FALSE  !(revert)
[L1770]  CALL        call KECToken_KECToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _owner_s306);
[L1733]              assume msgsender_MSG != null;
[L1734]              Balance[this] := 0;
[L1735]              _balances_KECToken[this] := zeroRefintArr();
[L1736]              sum__balances0[this] := 0;
[L1737]              _allowed_KECToken[this] := zeroRefRefintArr();
[L1738]              sum__allowed1[this] := 0;
[L1739]              _blacklist_KECToken[this] := zeroRefboolArr();
[L1740]              name_KECToken[this] := 1644945346;
[L1741]              symbol_KECToken[this] := 426684384;
[L1742]              decimals_KECToken[this] := 18;
[L1743]              _totalSupply_KECToken[this] := 5000000 * (1000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L1744]              owner_KECToken[this] := null;
[L1746]              owner_KECToken[this] := _owner_s306;
[L1747]              sum__balances0[this] := sum__balances0[this] - _balances_KECToken[this][_owner_s306];
[L1748]              _balances_KECToken[this][_owner_s306] := _totalSupply_KECToken[this];
[L1749]              sum__balances0[this] := sum__balances0[this] + _balances_KECToken[this][_owner_s306];
[L1770]  RET         call KECToken_KECToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _owner_s306);
[L1771]  COND FALSE  !(revert)
[L270]   RET         call KECToken_KECToken__success(this, msgsender_MSG, msgvalue_MSG, _owner_s306);
[L271]               assume !revert && gas >= 0;
[L3013]  RET         call KECToken_KECToken(this, msgsender_MSG, msgvalue_MSG, _owner_s306);
[L3014]              assume !revert && gas >= 0;
[L3017]  CALL        call CorralChoice_KECToken(this);
[L2866]              havoc msgsender_MSG;
[L2867]              havoc msgvalue_MSG;
[L2868]              havoc choice;
[L2869]              havoc __ret_0_totalSupply;
[L2870]              havoc _owner_s365;
[L2871]              havoc __ret_0_balanceOf;
[L2872]              havoc to_s456;
[L2873]              havoc value_s456;
[L2874]              havoc __ret_0_transfer;
[L2875]              havoc _owner_s381;
[L2876]              havoc spender_s381;
[L2877]              havoc __ret_0_allowance;
[L2878]              havoc spender_s522;
[L2879]              havoc value_s522;
[L2880]              havoc __ret_0_approve;
[L2881]              havoc from_s622;
[L2882]              havoc to_s622;
[L2883]              havoc value_s622;
[L2884]              havoc __ret_0_transferFrom;
[L2885]              havoc __ret_0_name;
[L2886]              havoc __ret_0_symbol;
[L2887]              havoc __ret_0_decimals;
[L2888]              havoc __ret_0_owner;
[L2889]              havoc _owner_s306;
[L2890]              havoc account_s331;
[L2891]              havoc account_s345;
[L2892]              havoc spender_s687;
[L2893]              havoc addedValue_s687;
[L2894]              havoc __ret_0_increaseAllowance;
[L2895]              havoc spender_s752;
[L2896]              havoc subtractedValue_s752;
[L2897]              havoc __ret_0_decreaseAllowance;
[L2898]              havoc tmpNow;
[L2899]              havoc gas;
[L2900]              assume gas > 4000000 && gas <= 8000000;
[L2901]              tmpNow := now;
[L2902]              havoc now;
[L2903]              assume now > tmpNow;
[L2904]              assume msgsender_MSG != null;
[L2905]              assume DType[msgsender_MSG] != SafeMath;
[L2906]              assume DType[msgsender_MSG] != IERC20;
[L2907]              assume DType[msgsender_MSG] != KECToken;
[L2908]              Alloc[msgsender_MSG] := true;
[L2909]  COND FALSE  !(choice == 14)
[L2915]  COND FALSE  !(choice == 13)
[L2921]  COND TRUE   choice == 12
[L2922]              gas := gas - 21000;
[L2923]  COND TRUE   gas >= 0
[L2924]              assume value_s456 >= 0 && value_s456 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2925]              assume msgvalue_MSG == 0;
[L2926]  CALL        call __ret_0_transfer := transfer~address~uint256_KECToken(this, msgsender_MSG, msgvalue_MSG, to_s456, value_s456);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == to_s456 && value_s456 <= _balances_KECToken[this][msgsender_MSG]) && value_s456 >= 0) && value_s456 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_KECToken[this][to_s456] >= 0) && _balances_KECToken[this][to_s456] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_KECToken[this][msgsender_MSG] >= 0) && _balances_KECToken[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_KECToken0 := true;
[L2]                 call_transfer_KECToken0 := false;
[L2]                 revert := revert_hold;
[L595]               havoc __exception;
[L596]               revert := false;
[L597]   COND TRUE   __exception
[L598]               __tmp__Balance := Balance;
[L599]               __tmp__DType := DType;
[L600]               __tmp__Alloc := Alloc;
[L601]               __tmp__balance_ADDR := balance_ADDR;
[L602]               __tmp__M_Ref_int := M_Ref_int;
[L603]               __tmp__sum__balances0 := sum__balances0;
[L604]               __tmp__alloc__allowed_KECToken_lvl0 := alloc__allowed_KECToken_lvl0;
[L605]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L606]               __tmp__sum__allowed1 := sum__allowed1;
[L607]               __tmp__M_Ref_bool := M_Ref_bool;
[L608]               __tmp__sum__blacklist2 := sum__blacklist2;
[L609]               __tmp__Length := Length;
[L610]               __tmp__now := now;
[L611]               __tmp___balances_KECToken := _balances_KECToken;
[L612]               __tmp___allowed_KECToken := _allowed_KECToken;
[L613]               __tmp___blacklist_KECToken := _blacklist_KECToken;
[L614]               __tmp__name_KECToken := name_KECToken;
[L615]               __tmp__symbol_KECToken := symbol_KECToken;
[L616]               __tmp__decimals_KECToken := decimals_KECToken;
[L617]               __tmp___totalSupply_KECToken := _totalSupply_KECToken;
[L618]               __tmp__owner_KECToken := owner_KECToken;
[L619]   CALL        call __ret_0_ := transfer~address~uint256_KECToken__fail(this, msgsender_MSG, msgvalue_MSG, to_s456, value_s456);
[L1853]  COND FALSE  !(!(value_s456 <= __tmp___balances_KECToken[this][msgsender_MSG]))
[L1857]              __var_4 := null;
[L1858]  COND TRUE   !(to_s456 != null)
[L1859]              revert := true;
[L619]   RET         call __ret_0_ := transfer~address~uint256_KECToken__fail(this, msgsender_MSG, msgvalue_MSG, to_s456, value_s456);
[L620]               assume revert || gas < 0;
[L2926]  RET         call __ret_0_transfer := transfer~address~uint256_KECToken(this, msgsender_MSG, msgvalue_MSG, to_s456, value_s456);
[L3017]  RET         call CorralChoice_KECToken(this);

Loop:
[L3017]  CALL        call CorralChoice_KECToken(this);
[L2866]              havoc msgsender_MSG;
[L2867]              havoc msgvalue_MSG;
[L2868]              havoc choice;
[L2869]              havoc __ret_0_totalSupply;
[L2870]              havoc _owner_s365;
[L2871]              havoc __ret_0_balanceOf;
[L2872]              havoc to_s456;
[L2873]              havoc value_s456;
[L2874]              havoc __ret_0_transfer;
[L2875]              havoc _owner_s381;
[L2876]              havoc spender_s381;
[L2877]              havoc __ret_0_allowance;
[L2878]              havoc spender_s522;
[L2879]              havoc value_s522;
[L2880]              havoc __ret_0_approve;
[L2881]              havoc from_s622;
[L2882]              havoc to_s622;
[L2883]              havoc value_s622;
[L2884]              havoc __ret_0_transferFrom;
[L2885]              havoc __ret_0_name;
[L2886]              havoc __ret_0_symbol;
[L2887]              havoc __ret_0_decimals;
[L2888]              havoc __ret_0_owner;
[L2889]              havoc _owner_s306;
[L2890]              havoc account_s331;
[L2891]              havoc account_s345;
[L2892]              havoc spender_s687;
[L2893]              havoc addedValue_s687;
[L2894]              havoc __ret_0_increaseAllowance;
[L2895]              havoc spender_s752;
[L2896]              havoc subtractedValue_s752;
[L2897]              havoc __ret_0_decreaseAllowance;
[L2898]              havoc tmpNow;
[L2899]              havoc gas;
[L2900]              assume gas > 4000000 && gas <= 8000000;
[L2901]              tmpNow := now;
[L2902]              havoc now;
[L2903]              assume now > tmpNow;
[L2904]              assume msgsender_MSG != null;
[L2905]              assume DType[msgsender_MSG] != SafeMath;
[L2906]              assume DType[msgsender_MSG] != IERC20;
[L2907]              assume DType[msgsender_MSG] != KECToken;
[L2908]              Alloc[msgsender_MSG] := true;
[L2909]  COND FALSE  !(choice == 14)
[L2915]  COND FALSE  !(choice == 13)
[L2921]  COND TRUE   choice == 12
[L2922]              gas := gas - 21000;
[L2923]  COND TRUE   gas >= 0
[L2924]              assume value_s456 >= 0 && value_s456 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2925]              assume msgvalue_MSG == 0;
[L2926]  CALL        call __ret_0_transfer := transfer~address~uint256_KECToken(this, msgsender_MSG, msgvalue_MSG, to_s456, value_s456);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == to_s456 && value_s456 <= _balances_KECToken[this][msgsender_MSG]) && value_s456 >= 0) && value_s456 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_KECToken[this][to_s456] >= 0) && _balances_KECToken[this][to_s456] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_KECToken[this][msgsender_MSG] >= 0) && _balances_KECToken[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_KECToken0 := true;
[L2]                 call_transfer_KECToken0 := false;
[L2]                 revert := revert_hold;
[L595]               havoc __exception;
[L596]               revert := false;
[L597]   COND TRUE   __exception
[L598]               __tmp__Balance := Balance;
[L599]               __tmp__DType := DType;
[L600]               __tmp__Alloc := Alloc;
[L601]               __tmp__balance_ADDR := balance_ADDR;
[L602]               __tmp__M_Ref_int := M_Ref_int;
[L603]               __tmp__sum__balances0 := sum__balances0;
[L604]               __tmp__alloc__allowed_KECToken_lvl0 := alloc__allowed_KECToken_lvl0;
[L605]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L606]               __tmp__sum__allowed1 := sum__allowed1;
[L607]               __tmp__M_Ref_bool := M_Ref_bool;
[L608]               __tmp__sum__blacklist2 := sum__blacklist2;
[L609]               __tmp__Length := Length;
[L610]               __tmp__now := now;
[L611]               __tmp___balances_KECToken := _balances_KECToken;
[L612]               __tmp___allowed_KECToken := _allowed_KECToken;
[L613]               __tmp___blacklist_KECToken := _blacklist_KECToken;
[L614]               __tmp__name_KECToken := name_KECToken;
[L615]               __tmp__symbol_KECToken := symbol_KECToken;
[L616]               __tmp__decimals_KECToken := decimals_KECToken;
[L617]               __tmp___totalSupply_KECToken := _totalSupply_KECToken;
[L618]               __tmp__owner_KECToken := owner_KECToken;
[L619]   CALL        call __ret_0_ := transfer~address~uint256_KECToken__fail(this, msgsender_MSG, msgvalue_MSG, to_s456, value_s456);
[L1853]  COND FALSE  !(!(value_s456 <= __tmp___balances_KECToken[this][msgsender_MSG]))
[L1857]              __var_4 := null;
[L1858]  COND TRUE   !(to_s456 != null)
[L1859]              revert := true;
[L619]   RET         call __ret_0_ := transfer~address~uint256_KECToken__fail(this, msgsender_MSG, msgvalue_MSG, to_s456, value_s456);
[L620]               assume revert || gas < 0;
[L2926]  RET         call __ret_0_transfer := transfer~address~uint256_KECToken(this, msgsender_MSG, msgvalue_MSG, to_s456, value_s456);
[L3017]  RET         call CorralChoice_KECToken(this);

[2020-11-24 20:06:20,130 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-24 20:06:20,130 INFO  L82        PathProgramCache]: Analyzing trace with hash 779901340, now seen corresponding path program 1 times
[2020-11-24 20:06:20,131 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-24 20:06:20,137 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-24 20:06:20,156 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-24 20:06:20,156 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-24 20:06:20,156 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [6] imperfect sequences [] total 6
[2020-11-24 20:06:20,156 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-24 20:06:20,156 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 6 interpolants.
[2020-11-24 20:06:20,157 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=9, Invalid=21, Unknown=0, NotChecked=0, Total=30
[2020-11-24 20:06:20,157 INFO  L87              Difference]: Start difference. First operand 2131 states and 2296 transitions. cyclomatic complexity: 167 Second operand 6 states.
[2020-11-24 20:06:20,183 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-24 20:06:20,183 INFO  L93              Difference]: Finished difference Result 2165 states and 2333 transitions.
[2020-11-24 20:06:20,183 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 6 states. 
[2020-11-24 20:06:20,183 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2165 states and 2333 transitions.
[2020-11-24 20:06:20,188 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-24 20:06:20,192 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2165 states to 2157 states and 2325 transitions.
[2020-11-24 20:06:20,192 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 676
[2020-11-24 20:06:20,193 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 676
[2020-11-24 20:06:20,193 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 2157 states and 2325 transitions.
[2020-11-24 20:06:20,194 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-24 20:06:20,194 INFO  L728         BuchiCegarLoop]: Abstraction has 2157 states and 2325 transitions.
[2020-11-24 20:06:20,195 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 2157 states and 2325 transitions.
[2020-11-24 20:06:20,208 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 2157 to 2138.
[2020-11-24 20:06:20,208 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 2138 states.
[2020-11-24 20:06:20,209 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 2138 states to 2138 states and 2304 transitions.
[2020-11-24 20:06:20,209 INFO  L751         BuchiCegarLoop]: Abstraction has 2138 states and 2304 transitions.
[2020-11-24 20:06:20,210 INFO  L631         BuchiCegarLoop]: Abstraction has 2138 states and 2304 transitions.
[2020-11-24 20:06:20,210 INFO  L445         BuchiCegarLoop]: ======== Iteration 5============
[2020-11-24 20:06:20,210 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2138 states and 2304 transitions.
[2020-11-24 20:06:20,212 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-24 20:06:20,212 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-24 20:06:20,212 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-24 20:06:20,213 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-24 20:06:20,213 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_KECToken0 := false;
[L2]                 call_transfer_KECToken0 := false;
[L2]     CALL        call main();
[L3007]              assume null == 0;
[L3008]  CALL        call this := FreshRefGenerator__success();
[L1448]              havoc newRef;
[L1449]              assume Alloc[newRef] == false;
[L1450]              Alloc[newRef] := true;
[L1451]              assume newRef != null;
[L3008]  RET         call this := FreshRefGenerator__success();
[L3009]              assume now >= 0;
[L3010]              assume DType[this] == KECToken;
[L3011]              assume msgvalue_MSG == 0;
[L3012]              gas := gas - 53000;
[L3013]  CALL        call KECToken_KECToken(this, msgsender_MSG, msgvalue_MSG, _owner_s306);
[L243]               havoc __exception;
[L244]               revert := false;
[L245]   COND FALSE  !(__exception)
[L270]   CALL        call KECToken_KECToken__success(this, msgsender_MSG, msgvalue_MSG, _owner_s306);
[L1766]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1702]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1687]              assume msgsender_MSG != null;
[L1688]              Balance[this] := 0;
[L1702]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1703]  COND FALSE  !(revert)
[L1766]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1767]  COND FALSE  !(revert)
[L1770]  CALL        call KECToken_KECToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _owner_s306);
[L1733]              assume msgsender_MSG != null;
[L1734]              Balance[this] := 0;
[L1735]              _balances_KECToken[this] := zeroRefintArr();
[L1736]              sum__balances0[this] := 0;
[L1737]              _allowed_KECToken[this] := zeroRefRefintArr();
[L1738]              sum__allowed1[this] := 0;
[L1739]              _blacklist_KECToken[this] := zeroRefboolArr();
[L1740]              name_KECToken[this] := 1644945346;
[L1741]              symbol_KECToken[this] := 426684384;
[L1742]              decimals_KECToken[this] := 18;
[L1743]              _totalSupply_KECToken[this] := 5000000 * (1000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L1744]              owner_KECToken[this] := null;
[L1746]              owner_KECToken[this] := _owner_s306;
[L1747]              sum__balances0[this] := sum__balances0[this] - _balances_KECToken[this][_owner_s306];
[L1748]              _balances_KECToken[this][_owner_s306] := _totalSupply_KECToken[this];
[L1749]              sum__balances0[this] := sum__balances0[this] + _balances_KECToken[this][_owner_s306];
[L1770]  RET         call KECToken_KECToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _owner_s306);
[L1771]  COND FALSE  !(revert)
[L270]   RET         call KECToken_KECToken__success(this, msgsender_MSG, msgvalue_MSG, _owner_s306);
[L271]               assume !revert && gas >= 0;
[L3013]  RET         call KECToken_KECToken(this, msgsender_MSG, msgvalue_MSG, _owner_s306);
[L3014]              assume !revert && gas >= 0;
[L3017]  CALL        call CorralChoice_KECToken(this);
[L2866]              havoc msgsender_MSG;
[L2867]              havoc msgvalue_MSG;
[L2868]              havoc choice;
[L2869]              havoc __ret_0_totalSupply;
[L2870]              havoc _owner_s365;
[L2871]              havoc __ret_0_balanceOf;
[L2872]              havoc to_s456;
[L2873]              havoc value_s456;
[L2874]              havoc __ret_0_transfer;
[L2875]              havoc _owner_s381;
[L2876]              havoc spender_s381;
[L2877]              havoc __ret_0_allowance;
[L2878]              havoc spender_s522;
[L2879]              havoc value_s522;
[L2880]              havoc __ret_0_approve;
[L2881]              havoc from_s622;
[L2882]              havoc to_s622;
[L2883]              havoc value_s622;
[L2884]              havoc __ret_0_transferFrom;
[L2885]              havoc __ret_0_name;
[L2886]              havoc __ret_0_symbol;
[L2887]              havoc __ret_0_decimals;
[L2888]              havoc __ret_0_owner;
[L2889]              havoc _owner_s306;
[L2890]              havoc account_s331;
[L2891]              havoc account_s345;
[L2892]              havoc spender_s687;
[L2893]              havoc addedValue_s687;
[L2894]              havoc __ret_0_increaseAllowance;
[L2895]              havoc spender_s752;
[L2896]              havoc subtractedValue_s752;
[L2897]              havoc __ret_0_decreaseAllowance;
[L2898]              havoc tmpNow;
[L2899]              havoc gas;
[L2900]              assume gas > 4000000 && gas <= 8000000;
[L2901]              tmpNow := now;
[L2902]              havoc now;
[L2903]              assume now > tmpNow;
[L2904]              assume msgsender_MSG != null;
[L2905]              assume DType[msgsender_MSG] != SafeMath;
[L2906]              assume DType[msgsender_MSG] != IERC20;
[L2907]              assume DType[msgsender_MSG] != KECToken;
[L2908]              Alloc[msgsender_MSG] := true;
[L2909]  COND FALSE  !(choice == 14)
[L2915]  COND FALSE  !(choice == 13)
[L2921]  COND TRUE   choice == 12
[L2922]              gas := gas - 21000;
[L2923]  COND TRUE   gas >= 0
[L2924]              assume value_s456 >= 0 && value_s456 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2925]              assume msgvalue_MSG == 0;
[L2926]  CALL        call __ret_0_transfer := transfer~address~uint256_KECToken(this, msgsender_MSG, msgvalue_MSG, to_s456, value_s456);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == to_s456 && value_s456 <= _balances_KECToken[this][msgsender_MSG]) && value_s456 >= 0) && value_s456 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_KECToken[this][to_s456] >= 0) && _balances_KECToken[this][to_s456] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_KECToken[this][msgsender_MSG] >= 0) && _balances_KECToken[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_KECToken0 := true;
[L2]                 call_transfer_KECToken0 := false;
[L2]                 revert := revert_hold;
[L595]               havoc __exception;
[L596]               revert := false;
[L597]   COND TRUE   __exception
[L598]               __tmp__Balance := Balance;
[L599]               __tmp__DType := DType;
[L600]               __tmp__Alloc := Alloc;
[L601]               __tmp__balance_ADDR := balance_ADDR;
[L602]               __tmp__M_Ref_int := M_Ref_int;
[L603]               __tmp__sum__balances0 := sum__balances0;
[L604]               __tmp__alloc__allowed_KECToken_lvl0 := alloc__allowed_KECToken_lvl0;
[L605]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L606]               __tmp__sum__allowed1 := sum__allowed1;
[L607]               __tmp__M_Ref_bool := M_Ref_bool;
[L608]               __tmp__sum__blacklist2 := sum__blacklist2;
[L609]               __tmp__Length := Length;
[L610]               __tmp__now := now;
[L611]               __tmp___balances_KECToken := _balances_KECToken;
[L612]               __tmp___allowed_KECToken := _allowed_KECToken;
[L613]               __tmp___blacklist_KECToken := _blacklist_KECToken;
[L614]               __tmp__name_KECToken := name_KECToken;
[L615]               __tmp__symbol_KECToken := symbol_KECToken;
[L616]               __tmp__decimals_KECToken := decimals_KECToken;
[L617]               __tmp___totalSupply_KECToken := _totalSupply_KECToken;
[L618]               __tmp__owner_KECToken := owner_KECToken;
[L619]   CALL        call __ret_0_ := transfer~address~uint256_KECToken__fail(this, msgsender_MSG, msgvalue_MSG, to_s456, value_s456);
[L1853]  COND FALSE  !(!(value_s456 <= __tmp___balances_KECToken[this][msgsender_MSG]))
[L1857]              __var_4 := null;
[L1858]  COND FALSE  !(!(to_s456 != null))
[L1862]  COND TRUE   !(__tmp___blacklist_KECToken[this][msgsender_MSG] != true && __tmp___blacklist_KECToken[this][to_s456] != true)
[L1863]              revert := true;
[L619]   RET         call __ret_0_ := transfer~address~uint256_KECToken__fail(this, msgsender_MSG, msgvalue_MSG, to_s456, value_s456);
[L620]               assume revert || gas < 0;
[L2926]  RET         call __ret_0_transfer := transfer~address~uint256_KECToken(this, msgsender_MSG, msgvalue_MSG, to_s456, value_s456);
[L3017]  RET         call CorralChoice_KECToken(this);

Loop:
[L3017]  CALL        call CorralChoice_KECToken(this);
[L2866]              havoc msgsender_MSG;
[L2867]              havoc msgvalue_MSG;
[L2868]              havoc choice;
[L2869]              havoc __ret_0_totalSupply;
[L2870]              havoc _owner_s365;
[L2871]              havoc __ret_0_balanceOf;
[L2872]              havoc to_s456;
[L2873]              havoc value_s456;
[L2874]              havoc __ret_0_transfer;
[L2875]              havoc _owner_s381;
[L2876]              havoc spender_s381;
[L2877]              havoc __ret_0_allowance;
[L2878]              havoc spender_s522;
[L2879]              havoc value_s522;
[L2880]              havoc __ret_0_approve;
[L2881]              havoc from_s622;
[L2882]              havoc to_s622;
[L2883]              havoc value_s622;
[L2884]              havoc __ret_0_transferFrom;
[L2885]              havoc __ret_0_name;
[L2886]              havoc __ret_0_symbol;
[L2887]              havoc __ret_0_decimals;
[L2888]              havoc __ret_0_owner;
[L2889]              havoc _owner_s306;
[L2890]              havoc account_s331;
[L2891]              havoc account_s345;
[L2892]              havoc spender_s687;
[L2893]              havoc addedValue_s687;
[L2894]              havoc __ret_0_increaseAllowance;
[L2895]              havoc spender_s752;
[L2896]              havoc subtractedValue_s752;
[L2897]              havoc __ret_0_decreaseAllowance;
[L2898]              havoc tmpNow;
[L2899]              havoc gas;
[L2900]              assume gas > 4000000 && gas <= 8000000;
[L2901]              tmpNow := now;
[L2902]              havoc now;
[L2903]              assume now > tmpNow;
[L2904]              assume msgsender_MSG != null;
[L2905]              assume DType[msgsender_MSG] != SafeMath;
[L2906]              assume DType[msgsender_MSG] != IERC20;
[L2907]              assume DType[msgsender_MSG] != KECToken;
[L2908]              Alloc[msgsender_MSG] := true;
[L2909]  COND FALSE  !(choice == 14)
[L2915]  COND FALSE  !(choice == 13)
[L2921]  COND TRUE   choice == 12
[L2922]              gas := gas - 21000;
[L2923]  COND TRUE   gas >= 0
[L2924]              assume value_s456 >= 0 && value_s456 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2925]              assume msgvalue_MSG == 0;
[L2926]  CALL        call __ret_0_transfer := transfer~address~uint256_KECToken(this, msgsender_MSG, msgvalue_MSG, to_s456, value_s456);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == to_s456 && value_s456 <= _balances_KECToken[this][msgsender_MSG]) && value_s456 >= 0) && value_s456 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_KECToken[this][to_s456] >= 0) && _balances_KECToken[this][to_s456] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_KECToken[this][msgsender_MSG] >= 0) && _balances_KECToken[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_KECToken0 := true;
[L2]                 call_transfer_KECToken0 := false;
[L2]                 revert := revert_hold;
[L595]               havoc __exception;
[L596]               revert := false;
[L597]   COND TRUE   __exception
[L598]               __tmp__Balance := Balance;
[L599]               __tmp__DType := DType;
[L600]               __tmp__Alloc := Alloc;
[L601]               __tmp__balance_ADDR := balance_ADDR;
[L602]               __tmp__M_Ref_int := M_Ref_int;
[L603]               __tmp__sum__balances0 := sum__balances0;
[L604]               __tmp__alloc__allowed_KECToken_lvl0 := alloc__allowed_KECToken_lvl0;
[L605]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L606]               __tmp__sum__allowed1 := sum__allowed1;
[L607]               __tmp__M_Ref_bool := M_Ref_bool;
[L608]               __tmp__sum__blacklist2 := sum__blacklist2;
[L609]               __tmp__Length := Length;
[L610]               __tmp__now := now;
[L611]               __tmp___balances_KECToken := _balances_KECToken;
[L612]               __tmp___allowed_KECToken := _allowed_KECToken;
[L613]               __tmp___blacklist_KECToken := _blacklist_KECToken;
[L614]               __tmp__name_KECToken := name_KECToken;
[L615]               __tmp__symbol_KECToken := symbol_KECToken;
[L616]               __tmp__decimals_KECToken := decimals_KECToken;
[L617]               __tmp___totalSupply_KECToken := _totalSupply_KECToken;
[L618]               __tmp__owner_KECToken := owner_KECToken;
[L619]   CALL        call __ret_0_ := transfer~address~uint256_KECToken__fail(this, msgsender_MSG, msgvalue_MSG, to_s456, value_s456);
[L1853]  COND FALSE  !(!(value_s456 <= __tmp___balances_KECToken[this][msgsender_MSG]))
[L1857]              __var_4 := null;
[L1858]  COND FALSE  !(!(to_s456 != null))
[L1862]  COND TRUE   !(__tmp___blacklist_KECToken[this][msgsender_MSG] != true && __tmp___blacklist_KECToken[this][to_s456] != true)
[L1863]              revert := true;
[L619]   RET         call __ret_0_ := transfer~address~uint256_KECToken__fail(this, msgsender_MSG, msgvalue_MSG, to_s456, value_s456);
[L620]               assume revert || gas < 0;
[L2926]  RET         call __ret_0_transfer := transfer~address~uint256_KECToken(this, msgsender_MSG, msgvalue_MSG, to_s456, value_s456);
[L3017]  RET         call CorralChoice_KECToken(this);

[2020-11-24 20:06:20,216 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-24 20:06:20,216 INFO  L82        PathProgramCache]: Analyzing trace with hash -1145613389, now seen corresponding path program 1 times
[2020-11-24 20:06:20,216 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-24 20:06:20,222 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-24 20:06:20,261 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-24 20:06:20,262 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-24 20:06:20,262 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [11] imperfect sequences [] total 11
[2020-11-24 20:06:20,262 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-24 20:06:20,262 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 12 interpolants.
[2020-11-24 20:06:20,262 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=22, Invalid=110, Unknown=0, NotChecked=0, Total=132
[2020-11-24 20:06:20,262 INFO  L87              Difference]: Start difference. First operand 2138 states and 2304 transitions. cyclomatic complexity: 168 Second operand 12 states.
[2020-11-24 20:06:20,949 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-24 20:06:20,949 INFO  L93              Difference]: Finished difference Result 2201 states and 2387 transitions.
[2020-11-24 20:06:20,949 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 12 states. 
[2020-11-24 20:06:20,949 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2201 states and 2387 transitions.
[2020-11-24 20:06:20,953 INFO  L131   ngComponentsAnalysis]: Automaton has 3 accepting balls. 6
[2020-11-24 20:06:20,958 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2201 states to 2201 states and 2387 transitions.
[2020-11-24 20:06:20,958 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 695
[2020-11-24 20:06:20,958 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 695
[2020-11-24 20:06:20,958 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 2201 states and 2387 transitions.
[2020-11-24 20:06:20,960 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-24 20:06:20,960 INFO  L728         BuchiCegarLoop]: Abstraction has 2201 states and 2387 transitions.
[2020-11-24 20:06:20,962 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 2201 states and 2387 transitions.
[2020-11-24 20:06:20,974 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 2201 to 2180.
[2020-11-24 20:06:20,974 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 2180 states.
[2020-11-24 20:06:20,977 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 2180 states to 2180 states and 2355 transitions.
[2020-11-24 20:06:20,977 INFO  L751         BuchiCegarLoop]: Abstraction has 2180 states and 2355 transitions.
[2020-11-24 20:06:20,977 INFO  L631         BuchiCegarLoop]: Abstraction has 2180 states and 2355 transitions.
[2020-11-24 20:06:20,977 INFO  L445         BuchiCegarLoop]: ======== Iteration 6============
[2020-11-24 20:06:20,977 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2180 states and 2355 transitions.
[2020-11-24 20:06:20,979 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-24 20:06:20,979 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-24 20:06:20,979 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-24 20:06:20,980 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-24 20:06:20,981 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_KECToken0 := false;
[L2]                 call_transfer_KECToken0 := false;
[L2]     CALL        call main();
[L3007]              assume null == 0;
[L3008]  CALL        call this := FreshRefGenerator__success();
[L1448]              havoc newRef;
[L1449]              assume Alloc[newRef] == false;
[L1450]              Alloc[newRef] := true;
[L1451]              assume newRef != null;
[L3008]  RET         call this := FreshRefGenerator__success();
[L3009]              assume now >= 0;
[L3010]              assume DType[this] == KECToken;
[L3011]              assume msgvalue_MSG == 0;
[L3012]              gas := gas - 53000;
[L3013]  CALL        call KECToken_KECToken(this, msgsender_MSG, msgvalue_MSG, _owner_s306);
[L243]               havoc __exception;
[L244]               revert := false;
[L245]   COND FALSE  !(__exception)
[L270]   CALL        call KECToken_KECToken__success(this, msgsender_MSG, msgvalue_MSG, _owner_s306);
[L1766]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1702]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1687]              assume msgsender_MSG != null;
[L1688]              Balance[this] := 0;
[L1702]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1703]  COND FALSE  !(revert)
[L1766]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1767]  COND FALSE  !(revert)
[L1770]  CALL        call KECToken_KECToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _owner_s306);
[L1733]              assume msgsender_MSG != null;
[L1734]              Balance[this] := 0;
[L1735]              _balances_KECToken[this] := zeroRefintArr();
[L1736]              sum__balances0[this] := 0;
[L1737]              _allowed_KECToken[this] := zeroRefRefintArr();
[L1738]              sum__allowed1[this] := 0;
[L1739]              _blacklist_KECToken[this] := zeroRefboolArr();
[L1740]              name_KECToken[this] := 1644945346;
[L1741]              symbol_KECToken[this] := 426684384;
[L1742]              decimals_KECToken[this] := 18;
[L1743]              _totalSupply_KECToken[this] := 5000000 * (1000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L1744]              owner_KECToken[this] := null;
[L1746]              owner_KECToken[this] := _owner_s306;
[L1747]              sum__balances0[this] := sum__balances0[this] - _balances_KECToken[this][_owner_s306];
[L1748]              _balances_KECToken[this][_owner_s306] := _totalSupply_KECToken[this];
[L1749]              sum__balances0[this] := sum__balances0[this] + _balances_KECToken[this][_owner_s306];
[L1770]  RET         call KECToken_KECToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _owner_s306);
[L1771]  COND FALSE  !(revert)
[L270]   RET         call KECToken_KECToken__success(this, msgsender_MSG, msgvalue_MSG, _owner_s306);
[L271]               assume !revert && gas >= 0;
[L3013]  RET         call KECToken_KECToken(this, msgsender_MSG, msgvalue_MSG, _owner_s306);
[L3014]              assume !revert && gas >= 0;
[L3017]  CALL        call CorralChoice_KECToken(this);
[L2866]              havoc msgsender_MSG;
[L2867]              havoc msgvalue_MSG;
[L2868]              havoc choice;
[L2869]              havoc __ret_0_totalSupply;
[L2870]              havoc _owner_s365;
[L2871]              havoc __ret_0_balanceOf;
[L2872]              havoc to_s456;
[L2873]              havoc value_s456;
[L2874]              havoc __ret_0_transfer;
[L2875]              havoc _owner_s381;
[L2876]              havoc spender_s381;
[L2877]              havoc __ret_0_allowance;
[L2878]              havoc spender_s522;
[L2879]              havoc value_s522;
[L2880]              havoc __ret_0_approve;
[L2881]              havoc from_s622;
[L2882]              havoc to_s622;
[L2883]              havoc value_s622;
[L2884]              havoc __ret_0_transferFrom;
[L2885]              havoc __ret_0_name;
[L2886]              havoc __ret_0_symbol;
[L2887]              havoc __ret_0_decimals;
[L2888]              havoc __ret_0_owner;
[L2889]              havoc _owner_s306;
[L2890]              havoc account_s331;
[L2891]              havoc account_s345;
[L2892]              havoc spender_s687;
[L2893]              havoc addedValue_s687;
[L2894]              havoc __ret_0_increaseAllowance;
[L2895]              havoc spender_s752;
[L2896]              havoc subtractedValue_s752;
[L2897]              havoc __ret_0_decreaseAllowance;
[L2898]              havoc tmpNow;
[L2899]              havoc gas;
[L2900]              assume gas > 4000000 && gas <= 8000000;
[L2901]              tmpNow := now;
[L2902]              havoc now;
[L2903]              assume now > tmpNow;
[L2904]              assume msgsender_MSG != null;
[L2905]              assume DType[msgsender_MSG] != SafeMath;
[L2906]              assume DType[msgsender_MSG] != IERC20;
[L2907]              assume DType[msgsender_MSG] != KECToken;
[L2908]              Alloc[msgsender_MSG] := true;
[L2909]  COND FALSE  !(choice == 14)
[L2915]  COND FALSE  !(choice == 13)
[L2921]  COND TRUE   choice == 12
[L2922]              gas := gas - 21000;
[L2923]  COND TRUE   gas >= 0
[L2924]              assume value_s456 >= 0 && value_s456 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2925]              assume msgvalue_MSG == 0;
[L2926]  CALL        call __ret_0_transfer := transfer~address~uint256_KECToken(this, msgsender_MSG, msgvalue_MSG, to_s456, value_s456);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == to_s456 && value_s456 <= _balances_KECToken[this][msgsender_MSG]) && value_s456 >= 0) && value_s456 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_KECToken[this][to_s456] >= 0) && _balances_KECToken[this][to_s456] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_KECToken[this][msgsender_MSG] >= 0) && _balances_KECToken[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_KECToken0 := true;
[L2]                 call_transfer_KECToken0 := false;
[L2]                 revert := revert_hold;
[L595]               havoc __exception;
[L596]               revert := false;
[L597]   COND TRUE   __exception
[L598]               __tmp__Balance := Balance;
[L599]               __tmp__DType := DType;
[L600]               __tmp__Alloc := Alloc;
[L601]               __tmp__balance_ADDR := balance_ADDR;
[L602]               __tmp__M_Ref_int := M_Ref_int;
[L603]               __tmp__sum__balances0 := sum__balances0;
[L604]               __tmp__alloc__allowed_KECToken_lvl0 := alloc__allowed_KECToken_lvl0;
[L605]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L606]               __tmp__sum__allowed1 := sum__allowed1;
[L607]               __tmp__M_Ref_bool := M_Ref_bool;
[L608]               __tmp__sum__blacklist2 := sum__blacklist2;
[L609]               __tmp__Length := Length;
[L610]               __tmp__now := now;
[L611]               __tmp___balances_KECToken := _balances_KECToken;
[L612]               __tmp___allowed_KECToken := _allowed_KECToken;
[L613]               __tmp___blacklist_KECToken := _blacklist_KECToken;
[L614]               __tmp__name_KECToken := name_KECToken;
[L615]               __tmp__symbol_KECToken := symbol_KECToken;
[L616]               __tmp__decimals_KECToken := decimals_KECToken;
[L617]               __tmp___totalSupply_KECToken := _totalSupply_KECToken;
[L618]               __tmp__owner_KECToken := owner_KECToken;
[L619]   CALL        call __ret_0_ := transfer~address~uint256_KECToken__fail(this, msgsender_MSG, msgvalue_MSG, to_s456, value_s456);
[L1853]  COND FALSE  !(!(value_s456 <= __tmp___balances_KECToken[this][msgsender_MSG]))
[L1857]              __var_4 := null;
[L1858]  COND FALSE  !(!(to_s456 != null))
[L1862]  COND FALSE  !(!(__tmp___blacklist_KECToken[this][msgsender_MSG] != true && __tmp___blacklist_KECToken[this][to_s456] != true))
[L1866]  CALL        call __var_5 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_KECToken[this][msgsender_MSG], value_s456);
[L1513]  CALL        call __var_1 := sub~uint256~uint256~string_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, a_s42, b_s42, -489841812);
[L1535]  COND TRUE   !(b_s69 <= a_s69)
[L1536]              revert := true;
[L1513]  RET         call __var_1 := sub~uint256~uint256~string_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, a_s42, b_s42, -489841812);
[L1514]  COND TRUE   revert
[L1866]  RET         call __var_5 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_KECToken[this][msgsender_MSG], value_s456);
[L1867]  COND TRUE   revert
[L619]   RET         call __ret_0_ := transfer~address~uint256_KECToken__fail(this, msgsender_MSG, msgvalue_MSG, to_s456, value_s456);
[L620]               assume revert || gas < 0;
[L2926]  RET         call __ret_0_transfer := transfer~address~uint256_KECToken(this, msgsender_MSG, msgvalue_MSG, to_s456, value_s456);
[L3017]  RET         call CorralChoice_KECToken(this);

Loop:
[L3017]  CALL        call CorralChoice_KECToken(this);
[L2866]              havoc msgsender_MSG;
[L2867]              havoc msgvalue_MSG;
[L2868]              havoc choice;
[L2869]              havoc __ret_0_totalSupply;
[L2870]              havoc _owner_s365;
[L2871]              havoc __ret_0_balanceOf;
[L2872]              havoc to_s456;
[L2873]              havoc value_s456;
[L2874]              havoc __ret_0_transfer;
[L2875]              havoc _owner_s381;
[L2876]              havoc spender_s381;
[L2877]              havoc __ret_0_allowance;
[L2878]              havoc spender_s522;
[L2879]              havoc value_s522;
[L2880]              havoc __ret_0_approve;
[L2881]              havoc from_s622;
[L2882]              havoc to_s622;
[L2883]              havoc value_s622;
[L2884]              havoc __ret_0_transferFrom;
[L2885]              havoc __ret_0_name;
[L2886]              havoc __ret_0_symbol;
[L2887]              havoc __ret_0_decimals;
[L2888]              havoc __ret_0_owner;
[L2889]              havoc _owner_s306;
[L2890]              havoc account_s331;
[L2891]              havoc account_s345;
[L2892]              havoc spender_s687;
[L2893]              havoc addedValue_s687;
[L2894]              havoc __ret_0_increaseAllowance;
[L2895]              havoc spender_s752;
[L2896]              havoc subtractedValue_s752;
[L2897]              havoc __ret_0_decreaseAllowance;
[L2898]              havoc tmpNow;
[L2899]              havoc gas;
[L2900]              assume gas > 4000000 && gas <= 8000000;
[L2901]              tmpNow := now;
[L2902]              havoc now;
[L2903]              assume now > tmpNow;
[L2904]              assume msgsender_MSG != null;
[L2905]              assume DType[msgsender_MSG] != SafeMath;
[L2906]              assume DType[msgsender_MSG] != IERC20;
[L2907]              assume DType[msgsender_MSG] != KECToken;
[L2908]              Alloc[msgsender_MSG] := true;
[L2909]  COND FALSE  !(choice == 14)
[L2915]  COND FALSE  !(choice == 13)
[L2921]  COND TRUE   choice == 12
[L2922]              gas := gas - 21000;
[L2923]  COND TRUE   gas >= 0
[L2924]              assume value_s456 >= 0 && value_s456 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2925]              assume msgvalue_MSG == 0;
[L2926]  CALL        call __ret_0_transfer := transfer~address~uint256_KECToken(this, msgsender_MSG, msgvalue_MSG, to_s456, value_s456);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == to_s456 && value_s456 <= _balances_KECToken[this][msgsender_MSG]) && value_s456 >= 0) && value_s456 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_KECToken[this][to_s456] >= 0) && _balances_KECToken[this][to_s456] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_KECToken[this][msgsender_MSG] >= 0) && _balances_KECToken[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_KECToken0 := true;
[L2]                 call_transfer_KECToken0 := false;
[L2]                 revert := revert_hold;
[L595]               havoc __exception;
[L596]               revert := false;
[L597]   COND TRUE   __exception
[L598]               __tmp__Balance := Balance;
[L599]               __tmp__DType := DType;
[L600]               __tmp__Alloc := Alloc;
[L601]               __tmp__balance_ADDR := balance_ADDR;
[L602]               __tmp__M_Ref_int := M_Ref_int;
[L603]               __tmp__sum__balances0 := sum__balances0;
[L604]               __tmp__alloc__allowed_KECToken_lvl0 := alloc__allowed_KECToken_lvl0;
[L605]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L606]               __tmp__sum__allowed1 := sum__allowed1;
[L607]               __tmp__M_Ref_bool := M_Ref_bool;
[L608]               __tmp__sum__blacklist2 := sum__blacklist2;
[L609]               __tmp__Length := Length;
[L610]               __tmp__now := now;
[L611]               __tmp___balances_KECToken := _balances_KECToken;
[L612]               __tmp___allowed_KECToken := _allowed_KECToken;
[L613]               __tmp___blacklist_KECToken := _blacklist_KECToken;
[L614]               __tmp__name_KECToken := name_KECToken;
[L615]               __tmp__symbol_KECToken := symbol_KECToken;
[L616]               __tmp__decimals_KECToken := decimals_KECToken;
[L617]               __tmp___totalSupply_KECToken := _totalSupply_KECToken;
[L618]               __tmp__owner_KECToken := owner_KECToken;
[L619]   CALL        call __ret_0_ := transfer~address~uint256_KECToken__fail(this, msgsender_MSG, msgvalue_MSG, to_s456, value_s456);
[L1853]  COND FALSE  !(!(value_s456 <= __tmp___balances_KECToken[this][msgsender_MSG]))
[L1857]              __var_4 := null;
[L1858]  COND FALSE  !(!(to_s456 != null))
[L1862]  COND FALSE  !(!(__tmp___blacklist_KECToken[this][msgsender_MSG] != true && __tmp___blacklist_KECToken[this][to_s456] != true))
[L1866]  CALL        call __var_5 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_KECToken[this][msgsender_MSG], value_s456);
[L1513]  CALL        call __var_1 := sub~uint256~uint256~string_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, a_s42, b_s42, -489841812);
[L1535]  COND TRUE   !(b_s69 <= a_s69)
[L1536]              revert := true;
[L1513]  RET         call __var_1 := sub~uint256~uint256~string_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, a_s42, b_s42, -489841812);
[L1514]  COND TRUE   revert
[L1866]  RET         call __var_5 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_KECToken[this][msgsender_MSG], value_s456);
[L1867]  COND TRUE   revert
[L619]   RET         call __ret_0_ := transfer~address~uint256_KECToken__fail(this, msgsender_MSG, msgvalue_MSG, to_s456, value_s456);
[L620]               assume revert || gas < 0;
[L2926]  RET         call __ret_0_transfer := transfer~address~uint256_KECToken(this, msgsender_MSG, msgvalue_MSG, to_s456, value_s456);
[L3017]  RET         call CorralChoice_KECToken(this);

[2020-11-24 20:06:20,983 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-24 20:06:20,983 INFO  L82        PathProgramCache]: Analyzing trace with hash -1568975974, now seen corresponding path program 1 times
[2020-11-24 20:06:20,984 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-24 20:06:20,990 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-24 20:06:21,010 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-24 20:06:21,010 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-24 20:06:21,010 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [5] imperfect sequences [] total 5
[2020-11-24 20:06:21,011 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-24 20:06:21,011 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 5 interpolants.
[2020-11-24 20:06:21,011 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=7, Invalid=13, Unknown=0, NotChecked=0, Total=20
[2020-11-24 20:06:21,011 INFO  L87              Difference]: Start difference. First operand 2180 states and 2355 transitions. cyclomatic complexity: 179 Second operand 5 states.
[2020-11-24 20:06:21,039 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-24 20:06:21,039 INFO  L93              Difference]: Finished difference Result 2180 states and 2353 transitions.
[2020-11-24 20:06:21,039 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 5 states. 
[2020-11-24 20:06:21,039 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2180 states and 2353 transitions.
[2020-11-24 20:06:21,043 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-24 20:06:21,048 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2180 states to 2180 states and 2353 transitions.
[2020-11-24 20:06:21,048 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 691
[2020-11-24 20:06:21,048 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 691
[2020-11-24 20:06:21,048 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 2180 states and 2353 transitions.
[2020-11-24 20:06:21,050 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-24 20:06:21,050 INFO  L728         BuchiCegarLoop]: Abstraction has 2180 states and 2353 transitions.
[2020-11-24 20:06:21,051 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 2180 states and 2353 transitions.
[2020-11-24 20:06:21,063 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 2180 to 2176.
[2020-11-24 20:06:21,063 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 2176 states.
[2020-11-24 20:06:21,065 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 2176 states to 2176 states and 2349 transitions.
[2020-11-24 20:06:21,065 INFO  L751         BuchiCegarLoop]: Abstraction has 2176 states and 2349 transitions.
[2020-11-24 20:06:21,065 INFO  L631         BuchiCegarLoop]: Abstraction has 2176 states and 2349 transitions.
[2020-11-24 20:06:21,065 INFO  L445         BuchiCegarLoop]: ======== Iteration 7============
[2020-11-24 20:06:21,065 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2176 states and 2349 transitions.
[2020-11-24 20:06:21,067 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-24 20:06:21,068 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-24 20:06:21,068 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-24 20:06:21,068 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-24 20:06:21,069 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_KECToken0 := false;
[L2]                 call_transfer_KECToken0 := false;
[L2]     CALL        call main();
[L3007]              assume null == 0;
[L3008]  CALL        call this := FreshRefGenerator__success();
[L1448]              havoc newRef;
[L1449]              assume Alloc[newRef] == false;
[L1450]              Alloc[newRef] := true;
[L1451]              assume newRef != null;
[L3008]  RET         call this := FreshRefGenerator__success();
[L3009]              assume now >= 0;
[L3010]              assume DType[this] == KECToken;
[L3011]              assume msgvalue_MSG == 0;
[L3012]              gas := gas - 53000;
[L3013]  CALL        call KECToken_KECToken(this, msgsender_MSG, msgvalue_MSG, _owner_s306);
[L243]               havoc __exception;
[L244]               revert := false;
[L245]   COND FALSE  !(__exception)
[L270]   CALL        call KECToken_KECToken__success(this, msgsender_MSG, msgvalue_MSG, _owner_s306);
[L1766]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1702]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1687]              assume msgsender_MSG != null;
[L1688]              Balance[this] := 0;
[L1702]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1703]  COND FALSE  !(revert)
[L1766]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1767]  COND FALSE  !(revert)
[L1770]  CALL        call KECToken_KECToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _owner_s306);
[L1733]              assume msgsender_MSG != null;
[L1734]              Balance[this] := 0;
[L1735]              _balances_KECToken[this] := zeroRefintArr();
[L1736]              sum__balances0[this] := 0;
[L1737]              _allowed_KECToken[this] := zeroRefRefintArr();
[L1738]              sum__allowed1[this] := 0;
[L1739]              _blacklist_KECToken[this] := zeroRefboolArr();
[L1740]              name_KECToken[this] := 1644945346;
[L1741]              symbol_KECToken[this] := 426684384;
[L1742]              decimals_KECToken[this] := 18;
[L1743]              _totalSupply_KECToken[this] := 5000000 * (1000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L1744]              owner_KECToken[this] := null;
[L1746]              owner_KECToken[this] := _owner_s306;
[L1747]              sum__balances0[this] := sum__balances0[this] - _balances_KECToken[this][_owner_s306];
[L1748]              _balances_KECToken[this][_owner_s306] := _totalSupply_KECToken[this];
[L1749]              sum__balances0[this] := sum__balances0[this] + _balances_KECToken[this][_owner_s306];
[L1770]  RET         call KECToken_KECToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _owner_s306);
[L1771]  COND FALSE  !(revert)
[L270]   RET         call KECToken_KECToken__success(this, msgsender_MSG, msgvalue_MSG, _owner_s306);
[L271]               assume !revert && gas >= 0;
[L3013]  RET         call KECToken_KECToken(this, msgsender_MSG, msgvalue_MSG, _owner_s306);
[L3014]              assume !revert && gas >= 0;
[L3017]  CALL        call CorralChoice_KECToken(this);
[L2866]              havoc msgsender_MSG;
[L2867]              havoc msgvalue_MSG;
[L2868]              havoc choice;
[L2869]              havoc __ret_0_totalSupply;
[L2870]              havoc _owner_s365;
[L2871]              havoc __ret_0_balanceOf;
[L2872]              havoc to_s456;
[L2873]              havoc value_s456;
[L2874]              havoc __ret_0_transfer;
[L2875]              havoc _owner_s381;
[L2876]              havoc spender_s381;
[L2877]              havoc __ret_0_allowance;
[L2878]              havoc spender_s522;
[L2879]              havoc value_s522;
[L2880]              havoc __ret_0_approve;
[L2881]              havoc from_s622;
[L2882]              havoc to_s622;
[L2883]              havoc value_s622;
[L2884]              havoc __ret_0_transferFrom;
[L2885]              havoc __ret_0_name;
[L2886]              havoc __ret_0_symbol;
[L2887]              havoc __ret_0_decimals;
[L2888]              havoc __ret_0_owner;
[L2889]              havoc _owner_s306;
[L2890]              havoc account_s331;
[L2891]              havoc account_s345;
[L2892]              havoc spender_s687;
[L2893]              havoc addedValue_s687;
[L2894]              havoc __ret_0_increaseAllowance;
[L2895]              havoc spender_s752;
[L2896]              havoc subtractedValue_s752;
[L2897]              havoc __ret_0_decreaseAllowance;
[L2898]              havoc tmpNow;
[L2899]              havoc gas;
[L2900]              assume gas > 4000000 && gas <= 8000000;
[L2901]              tmpNow := now;
[L2902]              havoc now;
[L2903]              assume now > tmpNow;
[L2904]              assume msgsender_MSG != null;
[L2905]              assume DType[msgsender_MSG] != SafeMath;
[L2906]              assume DType[msgsender_MSG] != IERC20;
[L2907]              assume DType[msgsender_MSG] != KECToken;
[L2908]              Alloc[msgsender_MSG] := true;
[L2909]  COND FALSE  !(choice == 14)
[L2915]  COND FALSE  !(choice == 13)
[L2921]  COND TRUE   choice == 12
[L2922]              gas := gas - 21000;
[L2923]  COND TRUE   gas >= 0
[L2924]              assume value_s456 >= 0 && value_s456 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2925]              assume msgvalue_MSG == 0;
[L2926]  CALL        call __ret_0_transfer := transfer~address~uint256_KECToken(this, msgsender_MSG, msgvalue_MSG, to_s456, value_s456);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == to_s456 && value_s456 <= _balances_KECToken[this][msgsender_MSG]) && value_s456 >= 0) && value_s456 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_KECToken[this][to_s456] >= 0) && _balances_KECToken[this][to_s456] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_KECToken[this][msgsender_MSG] >= 0) && _balances_KECToken[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_KECToken0 := true;
[L2]                 call_transfer_KECToken0 := false;
[L2]                 revert := revert_hold;
[L595]               havoc __exception;
[L596]               revert := false;
[L597]   COND FALSE  !(__exception)
[L622]   CALL        call __ret_0_ := transfer~address~uint256_KECToken__success(this, msgsender_MSG, msgvalue_MSG, to_s456, value_s456);
[L1889]  COND FALSE  !(!(value_s456 <= _balances_KECToken[this][msgsender_MSG]))
[L1893]              __var_4 := null;
[L1894]  COND FALSE  !(!(to_s456 != null))
[L1898]  COND FALSE  !(!(_blacklist_KECToken[this][msgsender_MSG] != true && _blacklist_KECToken[this][to_s456] != true))
[L1902]  CALL        call __var_5 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_KECToken[this][msgsender_MSG], value_s456);
[L1524]  CALL        call __var_1 := sub~uint256~uint256~string_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s42, b_s42, -489841812);
[L1547]  COND FALSE  !(!(b_s69 <= a_s69))
[L1551]              c_s69 := (a_s69 - b_s69) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1552]              __ret_0_ := c_s69;
[L1524]  RET         call __var_1 := sub~uint256~uint256~string_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s42, b_s42, -489841812);
[L1525]  COND FALSE  !(revert)
[L1528]              __ret_0_ := __var_1;
[L1902]  RET         call __var_5 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_KECToken[this][msgsender_MSG], value_s456);
[L1903]  COND FALSE  !(revert)
[L1906]              sum__balances0[this] := sum__balances0[this] - _balances_KECToken[this][msgsender_MSG];
[L1907]              _balances_KECToken[this][msgsender_MSG] := __var_5;
[L1908]              sum__balances0[this] := sum__balances0[this] + _balances_KECToken[this][msgsender_MSG];
[L1909]  CALL        call __var_6 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_KECToken[this][to_s456], value_s456);
[L1501]              c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1502]  COND FALSE  !(!(c_s26 >= a_s26))
[L1506]              __ret_0_ := c_s26;
[L1909]  RET         call __var_6 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_KECToken[this][to_s456], value_s456);
[L1910]  COND FALSE  !(revert)
[L1913]              sum__balances0[this] := sum__balances0[this] - _balances_KECToken[this][to_s456];
[L1914]              _balances_KECToken[this][to_s456] := __var_6;
[L1915]              sum__balances0[this] := sum__balances0[this] + _balances_KECToken[this][to_s456];
[L1916]              assert { :EventEmitted "Transfer_KECToken" } true;
[L1917]              __ret_0_ := true;
[L622]   RET         call __ret_0_ := transfer~address~uint256_KECToken__success(this, msgsender_MSG, msgvalue_MSG, to_s456, value_s456);
[L623]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !((((((((__ret_0_ == true && _totalSupply_KECToken[this] == old(_totalSupply_KECToken[this])) && _balances_KECToken[this] == old(_balances_KECToken[this])) && _allowed_KECToken[this] == old(_allowed_KECToken[this])) && _blacklist_KECToken[this] == old(_blacklist_KECToken[this])) && name_KECToken[this] == old(name_KECToken[this])) && symbol_KECToken[this] == old(symbol_KECToken[this])) && decimals_KECToken[this] == old(decimals_KECToken[this])) && owner_KECToken[this] == old(owner_KECToken[this]));
[L2]                 revert := revert_hold;
[L2926]  RET         call __ret_0_transfer := transfer~address~uint256_KECToken(this, msgsender_MSG, msgvalue_MSG, to_s456, value_s456);
[L3017]  RET         call CorralChoice_KECToken(this);

Loop:
[L3017]  CALL        call CorralChoice_KECToken(this);
[L2866]              havoc msgsender_MSG;
[L2867]              havoc msgvalue_MSG;
[L2868]              havoc choice;
[L2869]              havoc __ret_0_totalSupply;
[L2870]              havoc _owner_s365;
[L2871]              havoc __ret_0_balanceOf;
[L2872]              havoc to_s456;
[L2873]              havoc value_s456;
[L2874]              havoc __ret_0_transfer;
[L2875]              havoc _owner_s381;
[L2876]              havoc spender_s381;
[L2877]              havoc __ret_0_allowance;
[L2878]              havoc spender_s522;
[L2879]              havoc value_s522;
[L2880]              havoc __ret_0_approve;
[L2881]              havoc from_s622;
[L2882]              havoc to_s622;
[L2883]              havoc value_s622;
[L2884]              havoc __ret_0_transferFrom;
[L2885]              havoc __ret_0_name;
[L2886]              havoc __ret_0_symbol;
[L2887]              havoc __ret_0_decimals;
[L2888]              havoc __ret_0_owner;
[L2889]              havoc _owner_s306;
[L2890]              havoc account_s331;
[L2891]              havoc account_s345;
[L2892]              havoc spender_s687;
[L2893]              havoc addedValue_s687;
[L2894]              havoc __ret_0_increaseAllowance;
[L2895]              havoc spender_s752;
[L2896]              havoc subtractedValue_s752;
[L2897]              havoc __ret_0_decreaseAllowance;
[L2898]              havoc tmpNow;
[L2899]              havoc gas;
[L2900]              assume gas > 4000000 && gas <= 8000000;
[L2901]              tmpNow := now;
[L2902]              havoc now;
[L2903]              assume now > tmpNow;
[L2904]              assume msgsender_MSG != null;
[L2905]              assume DType[msgsender_MSG] != SafeMath;
[L2906]              assume DType[msgsender_MSG] != IERC20;
[L2907]              assume DType[msgsender_MSG] != KECToken;
[L2908]              Alloc[msgsender_MSG] := true;
[L2909]  COND FALSE  !(choice == 14)
[L2915]  COND FALSE  !(choice == 13)
[L2921]  COND TRUE   choice == 12
[L2922]              gas := gas - 21000;
[L2923]  COND TRUE   gas >= 0
[L2924]              assume value_s456 >= 0 && value_s456 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2925]              assume msgvalue_MSG == 0;
[L2926]  CALL        call __ret_0_transfer := transfer~address~uint256_KECToken(this, msgsender_MSG, msgvalue_MSG, to_s456, value_s456);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == to_s456 && value_s456 <= _balances_KECToken[this][msgsender_MSG]) && value_s456 >= 0) && value_s456 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_KECToken[this][to_s456] >= 0) && _balances_KECToken[this][to_s456] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_KECToken[this][msgsender_MSG] >= 0) && _balances_KECToken[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_KECToken0 := true;
[L2]                 call_transfer_KECToken0 := false;
[L2]                 revert := revert_hold;
[L595]               havoc __exception;
[L596]               revert := false;
[L597]   COND FALSE  !(__exception)
[L622]   CALL        call __ret_0_ := transfer~address~uint256_KECToken__success(this, msgsender_MSG, msgvalue_MSG, to_s456, value_s456);
[L1889]  COND FALSE  !(!(value_s456 <= _balances_KECToken[this][msgsender_MSG]))
[L1893]              __var_4 := null;
[L1894]  COND FALSE  !(!(to_s456 != null))
[L1898]  COND FALSE  !(!(_blacklist_KECToken[this][msgsender_MSG] != true && _blacklist_KECToken[this][to_s456] != true))
[L1902]  CALL        call __var_5 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_KECToken[this][msgsender_MSG], value_s456);
[L1524]  CALL        call __var_1 := sub~uint256~uint256~string_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s42, b_s42, -489841812);
[L1547]  COND FALSE  !(!(b_s69 <= a_s69))
[L1551]              c_s69 := (a_s69 - b_s69) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1552]              __ret_0_ := c_s69;
[L1524]  RET         call __var_1 := sub~uint256~uint256~string_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s42, b_s42, -489841812);
[L1525]  COND FALSE  !(revert)
[L1528]              __ret_0_ := __var_1;
[L1902]  RET         call __var_5 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_KECToken[this][msgsender_MSG], value_s456);
[L1903]  COND FALSE  !(revert)
[L1906]              sum__balances0[this] := sum__balances0[this] - _balances_KECToken[this][msgsender_MSG];
[L1907]              _balances_KECToken[this][msgsender_MSG] := __var_5;
[L1908]              sum__balances0[this] := sum__balances0[this] + _balances_KECToken[this][msgsender_MSG];
[L1909]  CALL        call __var_6 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_KECToken[this][to_s456], value_s456);
[L1501]              c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1502]  COND FALSE  !(!(c_s26 >= a_s26))
[L1506]              __ret_0_ := c_s26;
[L1909]  RET         call __var_6 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_KECToken[this][to_s456], value_s456);
[L1910]  COND FALSE  !(revert)
[L1913]              sum__balances0[this] := sum__balances0[this] - _balances_KECToken[this][to_s456];
[L1914]              _balances_KECToken[this][to_s456] := __var_6;
[L1915]              sum__balances0[this] := sum__balances0[this] + _balances_KECToken[this][to_s456];
[L1916]              assert { :EventEmitted "Transfer_KECToken" } true;
[L1917]              __ret_0_ := true;
[L622]   RET         call __ret_0_ := transfer~address~uint256_KECToken__success(this, msgsender_MSG, msgvalue_MSG, to_s456, value_s456);
[L623]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !((((((((__ret_0_ == true && _totalSupply_KECToken[this] == old(_totalSupply_KECToken[this])) && _balances_KECToken[this] == old(_balances_KECToken[this])) && _allowed_KECToken[this] == old(_allowed_KECToken[this])) && _blacklist_KECToken[this] == old(_blacklist_KECToken[this])) && name_KECToken[this] == old(name_KECToken[this])) && symbol_KECToken[this] == old(symbol_KECToken[this])) && decimals_KECToken[this] == old(decimals_KECToken[this])) && owner_KECToken[this] == old(owner_KECToken[this]));
[L2]                 revert := revert_hold;
[L2926]  RET         call __ret_0_transfer := transfer~address~uint256_KECToken(this, msgsender_MSG, msgvalue_MSG, to_s456, value_s456);
[L3017]  RET         call CorralChoice_KECToken(this);

[2020-11-24 20:06:21,071 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-24 20:06:21,071 INFO  L82        PathProgramCache]: Analyzing trace with hash -1265283067, now seen corresponding path program 1 times
[2020-11-24 20:06:21,072 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-24 20:06:21,101 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-24 20:06:21,639 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-24 20:06:21,639 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-24 20:06:21,639 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [24] imperfect sequences [] total 24
[2020-11-24 20:06:21,640 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-24 20:06:21,640 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 25 interpolants.
[2020-11-24 20:06:21,640 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=55, Invalid=545, Unknown=0, NotChecked=0, Total=600
[2020-11-24 20:06:21,640 INFO  L87              Difference]: Start difference. First operand 2176 states and 2349 transitions. cyclomatic complexity: 177 Second operand 25 states.
[2020-11-24 20:06:25,400 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-24 20:06:25,400 INFO  L93              Difference]: Finished difference Result 2228 states and 2440 transitions.
[2020-11-24 20:06:25,400 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 25 states. 
[2020-11-24 20:06:25,400 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2228 states and 2440 transitions.
[2020-11-24 20:06:25,404 INFO  L131   ngComponentsAnalysis]: Automaton has 5 accepting balls. 10
[2020-11-24 20:06:25,409 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2228 states to 2228 states and 2440 transitions.
[2020-11-24 20:06:25,409 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 708
[2020-11-24 20:06:25,409 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 708
[2020-11-24 20:06:25,409 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 2228 states and 2440 transitions.
[2020-11-24 20:06:25,411 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-24 20:06:25,411 INFO  L728         BuchiCegarLoop]: Abstraction has 2228 states and 2440 transitions.
[2020-11-24 20:06:25,413 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 2228 states and 2440 transitions.
[2020-11-24 20:06:25,425 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 2228 to 2217.
[2020-11-24 20:06:25,425 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 2217 states.
[2020-11-24 20:06:25,427 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 2217 states to 2217 states and 2416 transitions.
[2020-11-24 20:06:25,427 INFO  L751         BuchiCegarLoop]: Abstraction has 2217 states and 2416 transitions.
[2020-11-24 20:06:25,427 INFO  L631         BuchiCegarLoop]: Abstraction has 2217 states and 2416 transitions.
[2020-11-24 20:06:25,427 INFO  L445         BuchiCegarLoop]: ======== Iteration 8============
[2020-11-24 20:06:25,427 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2217 states and 2416 transitions.
[2020-11-24 20:06:25,430 INFO  L131   ngComponentsAnalysis]: Automaton has 4 accepting balls. 8
[2020-11-24 20:06:25,430 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-24 20:06:25,430 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-24 20:06:25,431 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-24 20:06:25,431 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_KECToken0 := false;
[L2]                 call_transfer_KECToken0 := false;
[L2]     CALL        call main();
[L3007]              assume null == 0;
[L3008]  CALL        call this := FreshRefGenerator__success();
[L1448]              havoc newRef;
[L1449]              assume Alloc[newRef] == false;
[L1450]              Alloc[newRef] := true;
[L1451]              assume newRef != null;
[L3008]  RET         call this := FreshRefGenerator__success();
[L3009]              assume now >= 0;
[L3010]              assume DType[this] == KECToken;
[L3011]              assume msgvalue_MSG == 0;
[L3012]              gas := gas - 53000;
[L3013]  CALL        call KECToken_KECToken(this, msgsender_MSG, msgvalue_MSG, _owner_s306);
[L243]               havoc __exception;
[L244]               revert := false;
[L245]   COND FALSE  !(__exception)
[L270]   CALL        call KECToken_KECToken__success(this, msgsender_MSG, msgvalue_MSG, _owner_s306);
[L1766]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1702]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1687]              assume msgsender_MSG != null;
[L1688]              Balance[this] := 0;
[L1702]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1703]  COND FALSE  !(revert)
[L1766]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1767]  COND FALSE  !(revert)
[L1770]  CALL        call KECToken_KECToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _owner_s306);
[L1733]              assume msgsender_MSG != null;
[L1734]              Balance[this] := 0;
[L1735]              _balances_KECToken[this] := zeroRefintArr();
[L1736]              sum__balances0[this] := 0;
[L1737]              _allowed_KECToken[this] := zeroRefRefintArr();
[L1738]              sum__allowed1[this] := 0;
[L1739]              _blacklist_KECToken[this] := zeroRefboolArr();
[L1740]              name_KECToken[this] := 1644945346;
[L1741]              symbol_KECToken[this] := 426684384;
[L1742]              decimals_KECToken[this] := 18;
[L1743]              _totalSupply_KECToken[this] := 5000000 * (1000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L1744]              owner_KECToken[this] := null;
[L1746]              owner_KECToken[this] := _owner_s306;
[L1747]              sum__balances0[this] := sum__balances0[this] - _balances_KECToken[this][_owner_s306];
[L1748]              _balances_KECToken[this][_owner_s306] := _totalSupply_KECToken[this];
[L1749]              sum__balances0[this] := sum__balances0[this] + _balances_KECToken[this][_owner_s306];
[L1770]  RET         call KECToken_KECToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _owner_s306);
[L1771]  COND FALSE  !(revert)
[L270]   RET         call KECToken_KECToken__success(this, msgsender_MSG, msgvalue_MSG, _owner_s306);
[L271]               assume !revert && gas >= 0;
[L3013]  RET         call KECToken_KECToken(this, msgsender_MSG, msgvalue_MSG, _owner_s306);
[L3014]              assume !revert && gas >= 0;
[L3017]  CALL        call CorralChoice_KECToken(this);
[L2866]              havoc msgsender_MSG;
[L2867]              havoc msgvalue_MSG;
[L2868]              havoc choice;
[L2869]              havoc __ret_0_totalSupply;
[L2870]              havoc _owner_s365;
[L2871]              havoc __ret_0_balanceOf;
[L2872]              havoc to_s456;
[L2873]              havoc value_s456;
[L2874]              havoc __ret_0_transfer;
[L2875]              havoc _owner_s381;
[L2876]              havoc spender_s381;
[L2877]              havoc __ret_0_allowance;
[L2878]              havoc spender_s522;
[L2879]              havoc value_s522;
[L2880]              havoc __ret_0_approve;
[L2881]              havoc from_s622;
[L2882]              havoc to_s622;
[L2883]              havoc value_s622;
[L2884]              havoc __ret_0_transferFrom;
[L2885]              havoc __ret_0_name;
[L2886]              havoc __ret_0_symbol;
[L2887]              havoc __ret_0_decimals;
[L2888]              havoc __ret_0_owner;
[L2889]              havoc _owner_s306;
[L2890]              havoc account_s331;
[L2891]              havoc account_s345;
[L2892]              havoc spender_s687;
[L2893]              havoc addedValue_s687;
[L2894]              havoc __ret_0_increaseAllowance;
[L2895]              havoc spender_s752;
[L2896]              havoc subtractedValue_s752;
[L2897]              havoc __ret_0_decreaseAllowance;
[L2898]              havoc tmpNow;
[L2899]              havoc gas;
[L2900]              assume gas > 4000000 && gas <= 8000000;
[L2901]              tmpNow := now;
[L2902]              havoc now;
[L2903]              assume now > tmpNow;
[L2904]              assume msgsender_MSG != null;
[L2905]              assume DType[msgsender_MSG] != SafeMath;
[L2906]              assume DType[msgsender_MSG] != IERC20;
[L2907]              assume DType[msgsender_MSG] != KECToken;
[L2908]              Alloc[msgsender_MSG] := true;
[L2909]  COND FALSE  !(choice == 14)
[L2915]  COND FALSE  !(choice == 13)
[L2921]  COND TRUE   choice == 12
[L2922]              gas := gas - 21000;
[L2923]  COND TRUE   gas >= 0
[L2924]              assume value_s456 >= 0 && value_s456 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2925]              assume msgvalue_MSG == 0;
[L2926]  CALL        call __ret_0_transfer := transfer~address~uint256_KECToken(this, msgsender_MSG, msgvalue_MSG, to_s456, value_s456);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == to_s456 && value_s456 <= _balances_KECToken[this][msgsender_MSG]) && value_s456 >= 0) && value_s456 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_KECToken[this][to_s456] >= 0) && _balances_KECToken[this][to_s456] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_KECToken[this][msgsender_MSG] >= 0) && _balances_KECToken[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_KECToken0 := true;
[L2]                 call_transfer_KECToken0 := false;
[L2]                 revert := revert_hold;
[L595]               havoc __exception;
[L596]               revert := false;
[L597]   COND TRUE   __exception
[L598]               __tmp__Balance := Balance;
[L599]               __tmp__DType := DType;
[L600]               __tmp__Alloc := Alloc;
[L601]               __tmp__balance_ADDR := balance_ADDR;
[L602]               __tmp__M_Ref_int := M_Ref_int;
[L603]               __tmp__sum__balances0 := sum__balances0;
[L604]               __tmp__alloc__allowed_KECToken_lvl0 := alloc__allowed_KECToken_lvl0;
[L605]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L606]               __tmp__sum__allowed1 := sum__allowed1;
[L607]               __tmp__M_Ref_bool := M_Ref_bool;
[L608]               __tmp__sum__blacklist2 := sum__blacklist2;
[L609]               __tmp__Length := Length;
[L610]               __tmp__now := now;
[L611]               __tmp___balances_KECToken := _balances_KECToken;
[L612]               __tmp___allowed_KECToken := _allowed_KECToken;
[L613]               __tmp___blacklist_KECToken := _blacklist_KECToken;
[L614]               __tmp__name_KECToken := name_KECToken;
[L615]               __tmp__symbol_KECToken := symbol_KECToken;
[L616]               __tmp__decimals_KECToken := decimals_KECToken;
[L617]               __tmp___totalSupply_KECToken := _totalSupply_KECToken;
[L618]               __tmp__owner_KECToken := owner_KECToken;
[L619]   CALL        call __ret_0_ := transfer~address~uint256_KECToken__fail(this, msgsender_MSG, msgvalue_MSG, to_s456, value_s456);
[L1853]  COND FALSE  !(!(value_s456 <= __tmp___balances_KECToken[this][msgsender_MSG]))
[L1857]              __var_4 := null;
[L1858]  COND FALSE  !(!(to_s456 != null))
[L1862]  COND FALSE  !(!(__tmp___blacklist_KECToken[this][msgsender_MSG] != true && __tmp___blacklist_KECToken[this][to_s456] != true))
[L1866]  CALL        call __var_5 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_KECToken[this][msgsender_MSG], value_s456);
[L1513]  CALL        call __var_1 := sub~uint256~uint256~string_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, a_s42, b_s42, -489841812);
[L1535]  COND FALSE  !(!(b_s69 <= a_s69))
[L1539]              c_s69 := (a_s69 - b_s69) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1540]              __ret_0_ := c_s69;
[L1513]  RET         call __var_1 := sub~uint256~uint256~string_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, a_s42, b_s42, -489841812);
[L1514]  COND FALSE  !(revert)
[L1517]              __ret_0_ := __var_1;
[L1866]  RET         call __var_5 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_KECToken[this][msgsender_MSG], value_s456);
[L1867]  COND FALSE  !(revert)
[L1870]              __tmp__sum__balances0[this] := __tmp__sum__balances0[this] - __tmp___balances_KECToken[this][msgsender_MSG];
[L1871]              __tmp___balances_KECToken[this][msgsender_MSG] := __var_5;
[L1872]              __tmp__sum__balances0[this] := __tmp__sum__balances0[this] + __tmp___balances_KECToken[this][msgsender_MSG];
[L1873]  CALL        call __var_6 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_KECToken[this][to_s456], value_s456);
[L1489]              c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1490]  COND TRUE   !(c_s26 >= a_s26)
[L1491]              revert := true;
[L1873]  RET         call __var_6 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_KECToken[this][to_s456], value_s456);
[L1874]  COND TRUE   revert
[L619]   RET         call __ret_0_ := transfer~address~uint256_KECToken__fail(this, msgsender_MSG, msgvalue_MSG, to_s456, value_s456);
[L620]               assume revert || gas < 0;
[L2926]  RET         call __ret_0_transfer := transfer~address~uint256_KECToken(this, msgsender_MSG, msgvalue_MSG, to_s456, value_s456);
[L3017]  RET         call CorralChoice_KECToken(this);

Loop:
[L3017]  CALL        call CorralChoice_KECToken(this);
[L2866]              havoc msgsender_MSG;
[L2867]              havoc msgvalue_MSG;
[L2868]              havoc choice;
[L2869]              havoc __ret_0_totalSupply;
[L2870]              havoc _owner_s365;
[L2871]              havoc __ret_0_balanceOf;
[L2872]              havoc to_s456;
[L2873]              havoc value_s456;
[L2874]              havoc __ret_0_transfer;
[L2875]              havoc _owner_s381;
[L2876]              havoc spender_s381;
[L2877]              havoc __ret_0_allowance;
[L2878]              havoc spender_s522;
[L2879]              havoc value_s522;
[L2880]              havoc __ret_0_approve;
[L2881]              havoc from_s622;
[L2882]              havoc to_s622;
[L2883]              havoc value_s622;
[L2884]              havoc __ret_0_transferFrom;
[L2885]              havoc __ret_0_name;
[L2886]              havoc __ret_0_symbol;
[L2887]              havoc __ret_0_decimals;
[L2888]              havoc __ret_0_owner;
[L2889]              havoc _owner_s306;
[L2890]              havoc account_s331;
[L2891]              havoc account_s345;
[L2892]              havoc spender_s687;
[L2893]              havoc addedValue_s687;
[L2894]              havoc __ret_0_increaseAllowance;
[L2895]              havoc spender_s752;
[L2896]              havoc subtractedValue_s752;
[L2897]              havoc __ret_0_decreaseAllowance;
[L2898]              havoc tmpNow;
[L2899]              havoc gas;
[L2900]              assume gas > 4000000 && gas <= 8000000;
[L2901]              tmpNow := now;
[L2902]              havoc now;
[L2903]              assume now > tmpNow;
[L2904]              assume msgsender_MSG != null;
[L2905]              assume DType[msgsender_MSG] != SafeMath;
[L2906]              assume DType[msgsender_MSG] != IERC20;
[L2907]              assume DType[msgsender_MSG] != KECToken;
[L2908]              Alloc[msgsender_MSG] := true;
[L2909]  COND FALSE  !(choice == 14)
[L2915]  COND FALSE  !(choice == 13)
[L2921]  COND TRUE   choice == 12
[L2922]              gas := gas - 21000;
[L2923]  COND TRUE   gas >= 0
[L2924]              assume value_s456 >= 0 && value_s456 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2925]              assume msgvalue_MSG == 0;
[L2926]  CALL        call __ret_0_transfer := transfer~address~uint256_KECToken(this, msgsender_MSG, msgvalue_MSG, to_s456, value_s456);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == to_s456 && value_s456 <= _balances_KECToken[this][msgsender_MSG]) && value_s456 >= 0) && value_s456 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_KECToken[this][to_s456] >= 0) && _balances_KECToken[this][to_s456] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_KECToken[this][msgsender_MSG] >= 0) && _balances_KECToken[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_KECToken0 := true;
[L2]                 call_transfer_KECToken0 := false;
[L2]                 revert := revert_hold;
[L595]               havoc __exception;
[L596]               revert := false;
[L597]   COND TRUE   __exception
[L598]               __tmp__Balance := Balance;
[L599]               __tmp__DType := DType;
[L600]               __tmp__Alloc := Alloc;
[L601]               __tmp__balance_ADDR := balance_ADDR;
[L602]               __tmp__M_Ref_int := M_Ref_int;
[L603]               __tmp__sum__balances0 := sum__balances0;
[L604]               __tmp__alloc__allowed_KECToken_lvl0 := alloc__allowed_KECToken_lvl0;
[L605]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L606]               __tmp__sum__allowed1 := sum__allowed1;
[L607]               __tmp__M_Ref_bool := M_Ref_bool;
[L608]               __tmp__sum__blacklist2 := sum__blacklist2;
[L609]               __tmp__Length := Length;
[L610]               __tmp__now := now;
[L611]               __tmp___balances_KECToken := _balances_KECToken;
[L612]               __tmp___allowed_KECToken := _allowed_KECToken;
[L613]               __tmp___blacklist_KECToken := _blacklist_KECToken;
[L614]               __tmp__name_KECToken := name_KECToken;
[L615]               __tmp__symbol_KECToken := symbol_KECToken;
[L616]               __tmp__decimals_KECToken := decimals_KECToken;
[L617]               __tmp___totalSupply_KECToken := _totalSupply_KECToken;
[L618]               __tmp__owner_KECToken := owner_KECToken;
[L619]   CALL        call __ret_0_ := transfer~address~uint256_KECToken__fail(this, msgsender_MSG, msgvalue_MSG, to_s456, value_s456);
[L1853]  COND FALSE  !(!(value_s456 <= __tmp___balances_KECToken[this][msgsender_MSG]))
[L1857]              __var_4 := null;
[L1858]  COND FALSE  !(!(to_s456 != null))
[L1862]  COND FALSE  !(!(__tmp___blacklist_KECToken[this][msgsender_MSG] != true && __tmp___blacklist_KECToken[this][to_s456] != true))
[L1866]  CALL        call __var_5 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_KECToken[this][msgsender_MSG], value_s456);
[L1513]  CALL        call __var_1 := sub~uint256~uint256~string_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, a_s42, b_s42, -489841812);
[L1535]  COND FALSE  !(!(b_s69 <= a_s69))
[L1539]              c_s69 := (a_s69 - b_s69) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1540]              __ret_0_ := c_s69;
[L1513]  RET         call __var_1 := sub~uint256~uint256~string_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, a_s42, b_s42, -489841812);
[L1514]  COND FALSE  !(revert)
[L1517]              __ret_0_ := __var_1;
[L1866]  RET         call __var_5 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_KECToken[this][msgsender_MSG], value_s456);
[L1867]  COND FALSE  !(revert)
[L1870]              __tmp__sum__balances0[this] := __tmp__sum__balances0[this] - __tmp___balances_KECToken[this][msgsender_MSG];
[L1871]              __tmp___balances_KECToken[this][msgsender_MSG] := __var_5;
[L1872]              __tmp__sum__balances0[this] := __tmp__sum__balances0[this] + __tmp___balances_KECToken[this][msgsender_MSG];
[L1873]  CALL        call __var_6 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_KECToken[this][to_s456], value_s456);
[L1489]              c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1490]  COND TRUE   !(c_s26 >= a_s26)
[L1491]              revert := true;
[L1873]  RET         call __var_6 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_KECToken[this][to_s456], value_s456);
[L1874]  COND TRUE   revert
[L619]   RET         call __ret_0_ := transfer~address~uint256_KECToken__fail(this, msgsender_MSG, msgvalue_MSG, to_s456, value_s456);
[L620]               assume revert || gas < 0;
[L2926]  RET         call __ret_0_transfer := transfer~address~uint256_KECToken(this, msgsender_MSG, msgvalue_MSG, to_s456, value_s456);
[L3017]  RET         call CorralChoice_KECToken(this);

[2020-11-24 20:06:25,434 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-24 20:06:25,434 INFO  L82        PathProgramCache]: Analyzing trace with hash -1142979257, now seen corresponding path program 1 times
[2020-11-24 20:06:25,434 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-24 20:06:25,443 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-24 20:06:25,500 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-24 20:06:25,500 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-24 20:06:25,500 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [15] imperfect sequences [] total 15
[2020-11-24 20:06:25,500 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-24 20:06:25,501 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 15 interpolants.
[2020-11-24 20:06:25,501 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=30, Invalid=180, Unknown=0, NotChecked=0, Total=210
[2020-11-24 20:06:25,501 INFO  L87              Difference]: Start difference. First operand 2217 states and 2416 transitions. cyclomatic complexity: 207 Second operand 15 states.
[2020-11-24 20:06:26,346 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-24 20:06:26,346 INFO  L93              Difference]: Finished difference Result 2305 states and 2549 transitions.
[2020-11-24 20:06:26,346 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 16 states. 
[2020-11-24 20:06:26,346 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2305 states and 2549 transitions.
[2020-11-24 20:06:26,351 INFO  L131   ngComponentsAnalysis]: Automaton has 6 accepting balls. 12
[2020-11-24 20:06:26,355 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2305 states to 2305 states and 2549 transitions.
[2020-11-24 20:06:26,356 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 746
[2020-11-24 20:06:26,356 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 746
[2020-11-24 20:06:26,356 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 2305 states and 2549 transitions.
[2020-11-24 20:06:26,358 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-24 20:06:26,358 INFO  L728         BuchiCegarLoop]: Abstraction has 2305 states and 2549 transitions.
[2020-11-24 20:06:26,359 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 2305 states and 2549 transitions.
[2020-11-24 20:06:26,371 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 2305 to 2249.
[2020-11-24 20:06:26,372 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 2249 states.
[2020-11-24 20:06:26,374 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 2249 states to 2249 states and 2451 transitions.
[2020-11-24 20:06:26,374 INFO  L751         BuchiCegarLoop]: Abstraction has 2249 states and 2451 transitions.
[2020-11-24 20:06:26,374 INFO  L631         BuchiCegarLoop]: Abstraction has 2249 states and 2451 transitions.
[2020-11-24 20:06:26,374 INFO  L445         BuchiCegarLoop]: ======== Iteration 9============
[2020-11-24 20:06:26,374 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2249 states and 2451 transitions.
[2020-11-24 20:06:26,376 INFO  L131   ngComponentsAnalysis]: Automaton has 4 accepting balls. 8
[2020-11-24 20:06:26,376 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-24 20:06:26,376 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-24 20:06:26,377 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-24 20:06:26,377 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_KECToken0 := false;
[L2]                 call_transfer_KECToken0 := false;
[L2]     CALL        call main();
[L3007]              assume null == 0;
[L3008]  CALL        call this := FreshRefGenerator__success();
[L1448]              havoc newRef;
[L1449]              assume Alloc[newRef] == false;
[L1450]              Alloc[newRef] := true;
[L1451]              assume newRef != null;
[L3008]  RET         call this := FreshRefGenerator__success();
[L3009]              assume now >= 0;
[L3010]              assume DType[this] == KECToken;
[L3011]              assume msgvalue_MSG == 0;
[L3012]              gas := gas - 53000;
[L3013]  CALL        call KECToken_KECToken(this, msgsender_MSG, msgvalue_MSG, _owner_s306);
[L243]               havoc __exception;
[L244]               revert := false;
[L245]   COND FALSE  !(__exception)
[L270]   CALL        call KECToken_KECToken__success(this, msgsender_MSG, msgvalue_MSG, _owner_s306);
[L1766]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1702]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1687]              assume msgsender_MSG != null;
[L1688]              Balance[this] := 0;
[L1702]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1703]  COND FALSE  !(revert)
[L1766]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1767]  COND FALSE  !(revert)
[L1770]  CALL        call KECToken_KECToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _owner_s306);
[L1733]              assume msgsender_MSG != null;
[L1734]              Balance[this] := 0;
[L1735]              _balances_KECToken[this] := zeroRefintArr();
[L1736]              sum__balances0[this] := 0;
[L1737]              _allowed_KECToken[this] := zeroRefRefintArr();
[L1738]              sum__allowed1[this] := 0;
[L1739]              _blacklist_KECToken[this] := zeroRefboolArr();
[L1740]              name_KECToken[this] := 1644945346;
[L1741]              symbol_KECToken[this] := 426684384;
[L1742]              decimals_KECToken[this] := 18;
[L1743]              _totalSupply_KECToken[this] := 5000000 * (1000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L1744]              owner_KECToken[this] := null;
[L1746]              owner_KECToken[this] := _owner_s306;
[L1747]              sum__balances0[this] := sum__balances0[this] - _balances_KECToken[this][_owner_s306];
[L1748]              _balances_KECToken[this][_owner_s306] := _totalSupply_KECToken[this];
[L1749]              sum__balances0[this] := sum__balances0[this] + _balances_KECToken[this][_owner_s306];
[L1770]  RET         call KECToken_KECToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _owner_s306);
[L1771]  COND FALSE  !(revert)
[L270]   RET         call KECToken_KECToken__success(this, msgsender_MSG, msgvalue_MSG, _owner_s306);
[L271]               assume !revert && gas >= 0;
[L3013]  RET         call KECToken_KECToken(this, msgsender_MSG, msgvalue_MSG, _owner_s306);
[L3014]              assume !revert && gas >= 0;
[L3017]  CALL        call CorralChoice_KECToken(this);
[L2866]              havoc msgsender_MSG;
[L2867]              havoc msgvalue_MSG;
[L2868]              havoc choice;
[L2869]              havoc __ret_0_totalSupply;
[L2870]              havoc _owner_s365;
[L2871]              havoc __ret_0_balanceOf;
[L2872]              havoc to_s456;
[L2873]              havoc value_s456;
[L2874]              havoc __ret_0_transfer;
[L2875]              havoc _owner_s381;
[L2876]              havoc spender_s381;
[L2877]              havoc __ret_0_allowance;
[L2878]              havoc spender_s522;
[L2879]              havoc value_s522;
[L2880]              havoc __ret_0_approve;
[L2881]              havoc from_s622;
[L2882]              havoc to_s622;
[L2883]              havoc value_s622;
[L2884]              havoc __ret_0_transferFrom;
[L2885]              havoc __ret_0_name;
[L2886]              havoc __ret_0_symbol;
[L2887]              havoc __ret_0_decimals;
[L2888]              havoc __ret_0_owner;
[L2889]              havoc _owner_s306;
[L2890]              havoc account_s331;
[L2891]              havoc account_s345;
[L2892]              havoc spender_s687;
[L2893]              havoc addedValue_s687;
[L2894]              havoc __ret_0_increaseAllowance;
[L2895]              havoc spender_s752;
[L2896]              havoc subtractedValue_s752;
[L2897]              havoc __ret_0_decreaseAllowance;
[L2898]              havoc tmpNow;
[L2899]              havoc gas;
[L2900]              assume gas > 4000000 && gas <= 8000000;
[L2901]              tmpNow := now;
[L2902]              havoc now;
[L2903]              assume now > tmpNow;
[L2904]              assume msgsender_MSG != null;
[L2905]              assume DType[msgsender_MSG] != SafeMath;
[L2906]              assume DType[msgsender_MSG] != IERC20;
[L2907]              assume DType[msgsender_MSG] != KECToken;
[L2908]              Alloc[msgsender_MSG] := true;
[L2909]  COND FALSE  !(choice == 14)
[L2915]  COND FALSE  !(choice == 13)
[L2921]  COND TRUE   choice == 12
[L2922]              gas := gas - 21000;
[L2923]  COND TRUE   gas >= 0
[L2924]              assume value_s456 >= 0 && value_s456 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2925]              assume msgvalue_MSG == 0;
[L2926]  CALL        call __ret_0_transfer := transfer~address~uint256_KECToken(this, msgsender_MSG, msgvalue_MSG, to_s456, value_s456);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == to_s456 && value_s456 <= _balances_KECToken[this][msgsender_MSG]) && value_s456 >= 0) && value_s456 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_KECToken[this][to_s456] >= 0) && _balances_KECToken[this][to_s456] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_KECToken[this][msgsender_MSG] >= 0) && _balances_KECToken[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_KECToken0 := true;
[L2]                 call_transfer_KECToken0 := false;
[L2]                 revert := revert_hold;
[L595]               havoc __exception;
[L596]               revert := false;
[L597]   COND TRUE   __exception
[L598]               __tmp__Balance := Balance;
[L599]               __tmp__DType := DType;
[L600]               __tmp__Alloc := Alloc;
[L601]               __tmp__balance_ADDR := balance_ADDR;
[L602]               __tmp__M_Ref_int := M_Ref_int;
[L603]               __tmp__sum__balances0 := sum__balances0;
[L604]               __tmp__alloc__allowed_KECToken_lvl0 := alloc__allowed_KECToken_lvl0;
[L605]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L606]               __tmp__sum__allowed1 := sum__allowed1;
[L607]               __tmp__M_Ref_bool := M_Ref_bool;
[L608]               __tmp__sum__blacklist2 := sum__blacklist2;
[L609]               __tmp__Length := Length;
[L610]               __tmp__now := now;
[L611]               __tmp___balances_KECToken := _balances_KECToken;
[L612]               __tmp___allowed_KECToken := _allowed_KECToken;
[L613]               __tmp___blacklist_KECToken := _blacklist_KECToken;
[L614]               __tmp__name_KECToken := name_KECToken;
[L615]               __tmp__symbol_KECToken := symbol_KECToken;
[L616]               __tmp__decimals_KECToken := decimals_KECToken;
[L617]               __tmp___totalSupply_KECToken := _totalSupply_KECToken;
[L618]               __tmp__owner_KECToken := owner_KECToken;
[L619]   CALL        call __ret_0_ := transfer~address~uint256_KECToken__fail(this, msgsender_MSG, msgvalue_MSG, to_s456, value_s456);
[L1853]  COND FALSE  !(!(value_s456 <= __tmp___balances_KECToken[this][msgsender_MSG]))
[L1857]              __var_4 := null;
[L1858]  COND FALSE  !(!(to_s456 != null))
[L1862]  COND FALSE  !(!(__tmp___blacklist_KECToken[this][msgsender_MSG] != true && __tmp___blacklist_KECToken[this][to_s456] != true))
[L1866]  CALL        call __var_5 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_KECToken[this][msgsender_MSG], value_s456);
[L1513]  CALL        call __var_1 := sub~uint256~uint256~string_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, a_s42, b_s42, -489841812);
[L1535]  COND FALSE  !(!(b_s69 <= a_s69))
[L1539]              c_s69 := (a_s69 - b_s69) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1540]              __ret_0_ := c_s69;
[L1513]  RET         call __var_1 := sub~uint256~uint256~string_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, a_s42, b_s42, -489841812);
[L1514]  COND FALSE  !(revert)
[L1517]              __ret_0_ := __var_1;
[L1866]  RET         call __var_5 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_KECToken[this][msgsender_MSG], value_s456);
[L1867]  COND FALSE  !(revert)
[L1870]              __tmp__sum__balances0[this] := __tmp__sum__balances0[this] - __tmp___balances_KECToken[this][msgsender_MSG];
[L1871]              __tmp___balances_KECToken[this][msgsender_MSG] := __var_5;
[L1872]              __tmp__sum__balances0[this] := __tmp__sum__balances0[this] + __tmp___balances_KECToken[this][msgsender_MSG];
[L1873]  CALL        call __var_6 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_KECToken[this][to_s456], value_s456);
[L1489]              c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1490]  COND FALSE  !(!(c_s26 >= a_s26))
[L1494]              __ret_0_ := c_s26;
[L1873]  RET         call __var_6 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_KECToken[this][to_s456], value_s456);
[L1874]  COND FALSE  !(revert)
[L1877]              __tmp__sum__balances0[this] := __tmp__sum__balances0[this] - __tmp___balances_KECToken[this][to_s456];
[L1878]              __tmp___balances_KECToken[this][to_s456] := __var_6;
[L1879]              __tmp__sum__balances0[this] := __tmp__sum__balances0[this] + __tmp___balances_KECToken[this][to_s456];
[L1880]              __ret_0_ := true;
[L619]   RET         call __ret_0_ := transfer~address~uint256_KECToken__fail(this, msgsender_MSG, msgvalue_MSG, to_s456, value_s456);
[L620]               assume revert || gas < 0;
[L2926]  RET         call __ret_0_transfer := transfer~address~uint256_KECToken(this, msgsender_MSG, msgvalue_MSG, to_s456, value_s456);
[L3017]  RET         call CorralChoice_KECToken(this);

Loop:
[L3017]  CALL        call CorralChoice_KECToken(this);
[L2866]              havoc msgsender_MSG;
[L2867]              havoc msgvalue_MSG;
[L2868]              havoc choice;
[L2869]              havoc __ret_0_totalSupply;
[L2870]              havoc _owner_s365;
[L2871]              havoc __ret_0_balanceOf;
[L2872]              havoc to_s456;
[L2873]              havoc value_s456;
[L2874]              havoc __ret_0_transfer;
[L2875]              havoc _owner_s381;
[L2876]              havoc spender_s381;
[L2877]              havoc __ret_0_allowance;
[L2878]              havoc spender_s522;
[L2879]              havoc value_s522;
[L2880]              havoc __ret_0_approve;
[L2881]              havoc from_s622;
[L2882]              havoc to_s622;
[L2883]              havoc value_s622;
[L2884]              havoc __ret_0_transferFrom;
[L2885]              havoc __ret_0_name;
[L2886]              havoc __ret_0_symbol;
[L2887]              havoc __ret_0_decimals;
[L2888]              havoc __ret_0_owner;
[L2889]              havoc _owner_s306;
[L2890]              havoc account_s331;
[L2891]              havoc account_s345;
[L2892]              havoc spender_s687;
[L2893]              havoc addedValue_s687;
[L2894]              havoc __ret_0_increaseAllowance;
[L2895]              havoc spender_s752;
[L2896]              havoc subtractedValue_s752;
[L2897]              havoc __ret_0_decreaseAllowance;
[L2898]              havoc tmpNow;
[L2899]              havoc gas;
[L2900]              assume gas > 4000000 && gas <= 8000000;
[L2901]              tmpNow := now;
[L2902]              havoc now;
[L2903]              assume now > tmpNow;
[L2904]              assume msgsender_MSG != null;
[L2905]              assume DType[msgsender_MSG] != SafeMath;
[L2906]              assume DType[msgsender_MSG] != IERC20;
[L2907]              assume DType[msgsender_MSG] != KECToken;
[L2908]              Alloc[msgsender_MSG] := true;
[L2909]  COND FALSE  !(choice == 14)
[L2915]  COND FALSE  !(choice == 13)
[L2921]  COND TRUE   choice == 12
[L2922]              gas := gas - 21000;
[L2923]  COND TRUE   gas >= 0
[L2924]              assume value_s456 >= 0 && value_s456 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2925]              assume msgvalue_MSG == 0;
[L2926]  CALL        call __ret_0_transfer := transfer~address~uint256_KECToken(this, msgsender_MSG, msgvalue_MSG, to_s456, value_s456);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == to_s456 && value_s456 <= _balances_KECToken[this][msgsender_MSG]) && value_s456 >= 0) && value_s456 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_KECToken[this][to_s456] >= 0) && _balances_KECToken[this][to_s456] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_KECToken[this][msgsender_MSG] >= 0) && _balances_KECToken[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_KECToken0 := true;
[L2]                 call_transfer_KECToken0 := false;
[L2]                 revert := revert_hold;
[L595]               havoc __exception;
[L596]               revert := false;
[L597]   COND TRUE   __exception
[L598]               __tmp__Balance := Balance;
[L599]               __tmp__DType := DType;
[L600]               __tmp__Alloc := Alloc;
[L601]               __tmp__balance_ADDR := balance_ADDR;
[L602]               __tmp__M_Ref_int := M_Ref_int;
[L603]               __tmp__sum__balances0 := sum__balances0;
[L604]               __tmp__alloc__allowed_KECToken_lvl0 := alloc__allowed_KECToken_lvl0;
[L605]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L606]               __tmp__sum__allowed1 := sum__allowed1;
[L607]               __tmp__M_Ref_bool := M_Ref_bool;
[L608]               __tmp__sum__blacklist2 := sum__blacklist2;
[L609]               __tmp__Length := Length;
[L610]               __tmp__now := now;
[L611]               __tmp___balances_KECToken := _balances_KECToken;
[L612]               __tmp___allowed_KECToken := _allowed_KECToken;
[L613]               __tmp___blacklist_KECToken := _blacklist_KECToken;
[L614]               __tmp__name_KECToken := name_KECToken;
[L615]               __tmp__symbol_KECToken := symbol_KECToken;
[L616]               __tmp__decimals_KECToken := decimals_KECToken;
[L617]               __tmp___totalSupply_KECToken := _totalSupply_KECToken;
[L618]               __tmp__owner_KECToken := owner_KECToken;
[L619]   CALL        call __ret_0_ := transfer~address~uint256_KECToken__fail(this, msgsender_MSG, msgvalue_MSG, to_s456, value_s456);
[L1853]  COND FALSE  !(!(value_s456 <= __tmp___balances_KECToken[this][msgsender_MSG]))
[L1857]              __var_4 := null;
[L1858]  COND FALSE  !(!(to_s456 != null))
[L1862]  COND FALSE  !(!(__tmp___blacklist_KECToken[this][msgsender_MSG] != true && __tmp___blacklist_KECToken[this][to_s456] != true))
[L1866]  CALL        call __var_5 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_KECToken[this][msgsender_MSG], value_s456);
[L1513]  CALL        call __var_1 := sub~uint256~uint256~string_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, a_s42, b_s42, -489841812);
[L1535]  COND FALSE  !(!(b_s69 <= a_s69))
[L1539]              c_s69 := (a_s69 - b_s69) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1540]              __ret_0_ := c_s69;
[L1513]  RET         call __var_1 := sub~uint256~uint256~string_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, a_s42, b_s42, -489841812);
[L1514]  COND FALSE  !(revert)
[L1517]              __ret_0_ := __var_1;
[L1866]  RET         call __var_5 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_KECToken[this][msgsender_MSG], value_s456);
[L1867]  COND FALSE  !(revert)
[L1870]              __tmp__sum__balances0[this] := __tmp__sum__balances0[this] - __tmp___balances_KECToken[this][msgsender_MSG];
[L1871]              __tmp___balances_KECToken[this][msgsender_MSG] := __var_5;
[L1872]              __tmp__sum__balances0[this] := __tmp__sum__balances0[this] + __tmp___balances_KECToken[this][msgsender_MSG];
[L1873]  CALL        call __var_6 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_KECToken[this][to_s456], value_s456);
[L1489]              c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1490]  COND FALSE  !(!(c_s26 >= a_s26))
[L1494]              __ret_0_ := c_s26;
[L1873]  RET         call __var_6 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_KECToken[this][to_s456], value_s456);
[L1874]  COND FALSE  !(revert)
[L1877]              __tmp__sum__balances0[this] := __tmp__sum__balances0[this] - __tmp___balances_KECToken[this][to_s456];
[L1878]              __tmp___balances_KECToken[this][to_s456] := __var_6;
[L1879]              __tmp__sum__balances0[this] := __tmp__sum__balances0[this] + __tmp___balances_KECToken[this][to_s456];
[L1880]              __ret_0_ := true;
[L619]   RET         call __ret_0_ := transfer~address~uint256_KECToken__fail(this, msgsender_MSG, msgvalue_MSG, to_s456, value_s456);
[L620]               assume revert || gas < 0;
[L2926]  RET         call __ret_0_transfer := transfer~address~uint256_KECToken(this, msgsender_MSG, msgvalue_MSG, to_s456, value_s456);
[L3017]  RET         call CorralChoice_KECToken(this);

[2020-11-24 20:06:26,380 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-24 20:06:26,380 INFO  L82        PathProgramCache]: Analyzing trace with hash -635299488, now seen corresponding path program 1 times
[2020-11-24 20:06:26,380 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-24 20:06:26,387 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-24 20:06:26,404 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-24 20:06:26,404 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-24 20:06:26,404 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [5] imperfect sequences [] total 5
[2020-11-24 20:06:26,404 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-24 20:06:26,404 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 5 interpolants.
[2020-11-24 20:06:26,404 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=7, Invalid=13, Unknown=0, NotChecked=0, Total=20
[2020-11-24 20:06:26,404 INFO  L87              Difference]: Start difference. First operand 2249 states and 2451 transitions. cyclomatic complexity: 210 Second operand 5 states.
[2020-11-24 20:06:26,599 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-24 20:06:26,599 INFO  L93              Difference]: Finished difference Result 2805 states and 3250 transitions.
[2020-11-24 20:06:26,599 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 7 states. 
[2020-11-24 20:06:26,599 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2805 states and 3250 transitions.
[2020-11-24 20:06:26,605 INFO  L131   ngComponentsAnalysis]: Automaton has 3 accepting balls. 24
[2020-11-24 20:06:26,612 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2805 states to 2216 states and 2660 transitions.
[2020-11-24 20:06:26,613 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 582
[2020-11-24 20:06:26,613 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 582
[2020-11-24 20:06:26,613 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 2216 states and 2660 transitions.
[2020-11-24 20:06:26,615 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-24 20:06:26,615 INFO  L728         BuchiCegarLoop]: Abstraction has 2216 states and 2660 transitions.
[2020-11-24 20:06:26,617 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 2216 states and 2660 transitions.
[2020-11-24 20:06:26,633 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 2216 to 1676.
[2020-11-24 20:06:26,634 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 1676 states.
[2020-11-24 20:06:26,635 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 1676 states to 1676 states and 1836 transitions.
[2020-11-24 20:06:26,635 INFO  L751         BuchiCegarLoop]: Abstraction has 1676 states and 1836 transitions.
[2020-11-24 20:06:26,635 INFO  L631         BuchiCegarLoop]: Abstraction has 1676 states and 1836 transitions.
[2020-11-24 20:06:26,635 INFO  L445         BuchiCegarLoop]: ======== Iteration 10============
[2020-11-24 20:06:26,635 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 1676 states and 1836 transitions.
[2020-11-24 20:06:26,637 INFO  L131   ngComponentsAnalysis]: Automaton has 3 accepting balls. 6
[2020-11-24 20:06:26,637 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-24 20:06:26,637 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-24 20:06:26,638 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-24 20:06:26,638 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_KECToken0 := false;
[L2]                 call_transfer_KECToken0 := false;
[L2]     CALL        call main();
[L3007]              assume null == 0;
[L3008]  CALL        call this := FreshRefGenerator__success();
[L1448]              havoc newRef;
[L1449]              assume Alloc[newRef] == false;
[L1450]              Alloc[newRef] := true;
[L1451]              assume newRef != null;
[L3008]  RET         call this := FreshRefGenerator__success();
[L3009]              assume now >= 0;
[L3010]              assume DType[this] == KECToken;
[L3011]              assume msgvalue_MSG == 0;
[L3012]              gas := gas - 53000;
[L3013]  CALL        call KECToken_KECToken(this, msgsender_MSG, msgvalue_MSG, _owner_s306);
[L243]               havoc __exception;
[L244]               revert := false;
[L245]   COND FALSE  !(__exception)
[L270]   CALL        call KECToken_KECToken__success(this, msgsender_MSG, msgvalue_MSG, _owner_s306);
[L1766]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1702]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1687]              assume msgsender_MSG != null;
[L1688]              Balance[this] := 0;
[L1702]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1703]  COND FALSE  !(revert)
[L1766]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1767]  COND FALSE  !(revert)
[L1770]  CALL        call KECToken_KECToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _owner_s306);
[L1733]              assume msgsender_MSG != null;
[L1734]              Balance[this] := 0;
[L1735]              _balances_KECToken[this] := zeroRefintArr();
[L1736]              sum__balances0[this] := 0;
[L1737]              _allowed_KECToken[this] := zeroRefRefintArr();
[L1738]              sum__allowed1[this] := 0;
[L1739]              _blacklist_KECToken[this] := zeroRefboolArr();
[L1740]              name_KECToken[this] := 1644945346;
[L1741]              symbol_KECToken[this] := 426684384;
[L1742]              decimals_KECToken[this] := 18;
[L1743]              _totalSupply_KECToken[this] := 5000000 * (1000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L1744]              owner_KECToken[this] := null;
[L1746]              owner_KECToken[this] := _owner_s306;
[L1747]              sum__balances0[this] := sum__balances0[this] - _balances_KECToken[this][_owner_s306];
[L1748]              _balances_KECToken[this][_owner_s306] := _totalSupply_KECToken[this];
[L1749]              sum__balances0[this] := sum__balances0[this] + _balances_KECToken[this][_owner_s306];
[L1770]  RET         call KECToken_KECToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _owner_s306);
[L1771]  COND FALSE  !(revert)
[L270]   RET         call KECToken_KECToken__success(this, msgsender_MSG, msgvalue_MSG, _owner_s306);
[L271]               assume !revert && gas >= 0;
[L3013]  RET         call KECToken_KECToken(this, msgsender_MSG, msgvalue_MSG, _owner_s306);
[L3014]              assume !revert && gas >= 0;
[L3017]  CALL        call CorralChoice_KECToken(this);
[L2866]              havoc msgsender_MSG;
[L2867]              havoc msgvalue_MSG;
[L2868]              havoc choice;
[L2869]              havoc __ret_0_totalSupply;
[L2870]              havoc _owner_s365;
[L2871]              havoc __ret_0_balanceOf;
[L2872]              havoc to_s456;
[L2873]              havoc value_s456;
[L2874]              havoc __ret_0_transfer;
[L2875]              havoc _owner_s381;
[L2876]              havoc spender_s381;
[L2877]              havoc __ret_0_allowance;
[L2878]              havoc spender_s522;
[L2879]              havoc value_s522;
[L2880]              havoc __ret_0_approve;
[L2881]              havoc from_s622;
[L2882]              havoc to_s622;
[L2883]              havoc value_s622;
[L2884]              havoc __ret_0_transferFrom;
[L2885]              havoc __ret_0_name;
[L2886]              havoc __ret_0_symbol;
[L2887]              havoc __ret_0_decimals;
[L2888]              havoc __ret_0_owner;
[L2889]              havoc _owner_s306;
[L2890]              havoc account_s331;
[L2891]              havoc account_s345;
[L2892]              havoc spender_s687;
[L2893]              havoc addedValue_s687;
[L2894]              havoc __ret_0_increaseAllowance;
[L2895]              havoc spender_s752;
[L2896]              havoc subtractedValue_s752;
[L2897]              havoc __ret_0_decreaseAllowance;
[L2898]              havoc tmpNow;
[L2899]              havoc gas;
[L2900]              assume gas > 4000000 && gas <= 8000000;
[L2901]              tmpNow := now;
[L2902]              havoc now;
[L2903]              assume now > tmpNow;
[L2904]              assume msgsender_MSG != null;
[L2905]              assume DType[msgsender_MSG] != SafeMath;
[L2906]              assume DType[msgsender_MSG] != IERC20;
[L2907]              assume DType[msgsender_MSG] != KECToken;
[L2908]              Alloc[msgsender_MSG] := true;
[L2909]  COND FALSE  !(choice == 14)
[L2915]  COND FALSE  !(choice == 13)
[L2921]  COND FALSE  !(choice == 12)
[L2928]  COND FALSE  !(choice == 11)
[L2934]  COND FALSE  !(choice == 10)
[L2941]  COND FALSE  !(choice == 9)
[L2948]  COND FALSE  !(choice == 8)
[L2954]  COND FALSE  !(choice == 7)
[L2960]  COND FALSE  !(choice == 6)
[L2966]  COND FALSE  !(choice == 5)
[L2972]  COND TRUE   choice == 4
[L2973]              gas := gas - 21000;
[L2974]  COND TRUE   gas >= 0
[L2975]              assume msgvalue_MSG == 0;
[L2976]  CALL        call addBlacklist~address_KECToken(this, msgsender_MSG, msgvalue_MSG, account_s331);
[L302]               havoc __exception;
[L303]               revert := false;
[L304]   COND FALSE  !(__exception)
[L329]   CALL        call addBlacklist~address_KECToken__success(this, msgsender_MSG, msgvalue_MSG, account_s331);
[L1787]  CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2743]  COND FALSE  !(!(msgsender_MSG == owner_KECToken[this]))
[L1787]  RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L1788]  COND FALSE  !(revert)
[L1791]              _blacklist_KECToken[this][account_s331] := true;
[L329]   RET         call addBlacklist~address_KECToken__success(this, msgsender_MSG, msgvalue_MSG, account_s331);
[L330]               assume !revert && gas >= 0;
[L2976]  RET         call addBlacklist~address_KECToken(this, msgsender_MSG, msgvalue_MSG, account_s331);
[L3017]  RET         call CorralChoice_KECToken(this);
[L3017]  CALL        call CorralChoice_KECToken(this);
[L2866]              havoc msgsender_MSG;
[L2867]              havoc msgvalue_MSG;
[L2868]              havoc choice;
[L2869]              havoc __ret_0_totalSupply;
[L2870]              havoc _owner_s365;
[L2871]              havoc __ret_0_balanceOf;
[L2872]              havoc to_s456;
[L2873]              havoc value_s456;
[L2874]              havoc __ret_0_transfer;
[L2875]              havoc _owner_s381;
[L2876]              havoc spender_s381;
[L2877]              havoc __ret_0_allowance;
[L2878]              havoc spender_s522;
[L2879]              havoc value_s522;
[L2880]              havoc __ret_0_approve;
[L2881]              havoc from_s622;
[L2882]              havoc to_s622;
[L2883]              havoc value_s622;
[L2884]              havoc __ret_0_transferFrom;
[L2885]              havoc __ret_0_name;
[L2886]              havoc __ret_0_symbol;
[L2887]              havoc __ret_0_decimals;
[L2888]              havoc __ret_0_owner;
[L2889]              havoc _owner_s306;
[L2890]              havoc account_s331;
[L2891]              havoc account_s345;
[L2892]              havoc spender_s687;
[L2893]              havoc addedValue_s687;
[L2894]              havoc __ret_0_increaseAllowance;
[L2895]              havoc spender_s752;
[L2896]              havoc subtractedValue_s752;
[L2897]              havoc __ret_0_decreaseAllowance;
[L2898]              havoc tmpNow;
[L2899]              havoc gas;
[L2900]              assume gas > 4000000 && gas <= 8000000;
[L2901]              tmpNow := now;
[L2902]              havoc now;
[L2903]              assume now > tmpNow;
[L2904]              assume msgsender_MSG != null;
[L2905]              assume DType[msgsender_MSG] != SafeMath;
[L2906]              assume DType[msgsender_MSG] != IERC20;
[L2907]              assume DType[msgsender_MSG] != KECToken;
[L2908]              Alloc[msgsender_MSG] := true;
[L2909]  COND FALSE  !(choice == 14)
[L2915]  COND FALSE  !(choice == 13)
[L2921]  COND TRUE   choice == 12
[L2922]              gas := gas - 21000;
[L2923]  COND TRUE   gas >= 0
[L2924]              assume value_s456 >= 0 && value_s456 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2925]              assume msgvalue_MSG == 0;
[L2926]  CALL        call __ret_0_transfer := transfer~address~uint256_KECToken(this, msgsender_MSG, msgvalue_MSG, to_s456, value_s456);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == to_s456 && value_s456 <= _balances_KECToken[this][msgsender_MSG]) && value_s456 >= 0) && value_s456 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_KECToken[this][to_s456] >= 0) && _balances_KECToken[this][to_s456] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_KECToken[this][msgsender_MSG] >= 0) && _balances_KECToken[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_KECToken0 := true;
[L2]                 call_transfer_KECToken0 := false;
[L2]                 revert := revert_hold;
[L595]               havoc __exception;
[L596]               revert := false;
[L597]   COND TRUE   __exception
[L598]               __tmp__Balance := Balance;
[L599]               __tmp__DType := DType;
[L600]               __tmp__Alloc := Alloc;
[L601]               __tmp__balance_ADDR := balance_ADDR;
[L602]               __tmp__M_Ref_int := M_Ref_int;
[L603]               __tmp__sum__balances0 := sum__balances0;
[L604]               __tmp__alloc__allowed_KECToken_lvl0 := alloc__allowed_KECToken_lvl0;
[L605]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L606]               __tmp__sum__allowed1 := sum__allowed1;
[L607]               __tmp__M_Ref_bool := M_Ref_bool;
[L608]               __tmp__sum__blacklist2 := sum__blacklist2;
[L609]               __tmp__Length := Length;
[L610]               __tmp__now := now;
[L611]               __tmp___balances_KECToken := _balances_KECToken;
[L612]               __tmp___allowed_KECToken := _allowed_KECToken;
[L613]               __tmp___blacklist_KECToken := _blacklist_KECToken;
[L614]               __tmp__name_KECToken := name_KECToken;
[L615]               __tmp__symbol_KECToken := symbol_KECToken;
[L616]               __tmp__decimals_KECToken := decimals_KECToken;
[L617]               __tmp___totalSupply_KECToken := _totalSupply_KECToken;
[L618]               __tmp__owner_KECToken := owner_KECToken;
[L619]   CALL        call __ret_0_ := transfer~address~uint256_KECToken__fail(this, msgsender_MSG, msgvalue_MSG, to_s456, value_s456);
[L1853]  COND FALSE  !(!(value_s456 <= __tmp___balances_KECToken[this][msgsender_MSG]))
[L1857]              __var_4 := null;
[L1858]  COND FALSE  !(!(to_s456 != null))
[L1862]  COND TRUE   !(__tmp___blacklist_KECToken[this][msgsender_MSG] != true && __tmp___blacklist_KECToken[this][to_s456] != true)
[L1863]              revert := true;
[L619]   RET         call __ret_0_ := transfer~address~uint256_KECToken__fail(this, msgsender_MSG, msgvalue_MSG, to_s456, value_s456);
[L620]               assume revert || gas < 0;
[L2926]  RET         call __ret_0_transfer := transfer~address~uint256_KECToken(this, msgsender_MSG, msgvalue_MSG, to_s456, value_s456);
[L3017]  RET         call CorralChoice_KECToken(this);

Loop:
[L3017]  CALL        call CorralChoice_KECToken(this);
[L2866]              havoc msgsender_MSG;
[L2867]              havoc msgvalue_MSG;
[L2868]              havoc choice;
[L2869]              havoc __ret_0_totalSupply;
[L2870]              havoc _owner_s365;
[L2871]              havoc __ret_0_balanceOf;
[L2872]              havoc to_s456;
[L2873]              havoc value_s456;
[L2874]              havoc __ret_0_transfer;
[L2875]              havoc _owner_s381;
[L2876]              havoc spender_s381;
[L2877]              havoc __ret_0_allowance;
[L2878]              havoc spender_s522;
[L2879]              havoc value_s522;
[L2880]              havoc __ret_0_approve;
[L2881]              havoc from_s622;
[L2882]              havoc to_s622;
[L2883]              havoc value_s622;
[L2884]              havoc __ret_0_transferFrom;
[L2885]              havoc __ret_0_name;
[L2886]              havoc __ret_0_symbol;
[L2887]              havoc __ret_0_decimals;
[L2888]              havoc __ret_0_owner;
[L2889]              havoc _owner_s306;
[L2890]              havoc account_s331;
[L2891]              havoc account_s345;
[L2892]              havoc spender_s687;
[L2893]              havoc addedValue_s687;
[L2894]              havoc __ret_0_increaseAllowance;
[L2895]              havoc spender_s752;
[L2896]              havoc subtractedValue_s752;
[L2897]              havoc __ret_0_decreaseAllowance;
[L2898]              havoc tmpNow;
[L2899]              havoc gas;
[L2900]              assume gas > 4000000 && gas <= 8000000;
[L2901]              tmpNow := now;
[L2902]              havoc now;
[L2903]              assume now > tmpNow;
[L2904]              assume msgsender_MSG != null;
[L2905]              assume DType[msgsender_MSG] != SafeMath;
[L2906]              assume DType[msgsender_MSG] != IERC20;
[L2907]              assume DType[msgsender_MSG] != KECToken;
[L2908]              Alloc[msgsender_MSG] := true;
[L2909]  COND TRUE   choice == 14
[L2910]              gas := gas - 21000;
[L2911]  COND FALSE  !(gas >= 0)
[L3017]  RET         call CorralChoice_KECToken(this);

[2020-11-24 20:06:26,640 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-24 20:06:26,640 INFO  L82        PathProgramCache]: Analyzing trace with hash -1538670345, now seen corresponding path program 1 times
[2020-11-24 20:06:26,641 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-24 20:06:26,649 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-24 20:06:26,658 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-24 20:06:26,710 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-24 20:06:26,711 INFO  L82        PathProgramCache]: Analyzing trace with hash -846573003, now seen corresponding path program 1 times
[2020-11-24 20:06:26,711 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-24 20:06:26,713 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-24 20:06:26,716 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-24 20:06:26,716 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-24 20:06:26,717 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [4] imperfect sequences [] total 4
[2020-11-24 20:06:26,717 INFO  L1008  eck$LassoCheckResult]: loop already infeasible
[2020-11-24 20:06:26,717 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-11-24 20:06:26,717 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=6, Invalid=6, Unknown=0, NotChecked=0, Total=12
[2020-11-24 20:06:26,717 INFO  L87              Difference]: Start difference. First operand 1676 states and 1836 transitions. cyclomatic complexity: 167 Second operand 4 states.
[2020-11-24 20:06:26,864 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-24 20:06:26,864 INFO  L93              Difference]: Finished difference Result 1800 states and 1981 transitions.
[2020-11-24 20:06:26,864 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 4 states. 
[2020-11-24 20:06:26,864 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 1800 states and 1981 transitions.
[2020-11-24 20:06:26,870 INFO  L131   ngComponentsAnalysis]: Automaton has 3 accepting balls. 12
[2020-11-24 20:06:26,875 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 1800 states to 1800 states and 1981 transitions.
[2020-11-24 20:06:26,875 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 474
[2020-11-24 20:06:26,875 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 474
[2020-11-24 20:06:26,875 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 1800 states and 1981 transitions.
[2020-11-24 20:06:26,877 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-24 20:06:26,877 INFO  L728         BuchiCegarLoop]: Abstraction has 1800 states and 1981 transitions.
[2020-11-24 20:06:26,878 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 1800 states and 1981 transitions.
[2020-11-24 20:06:26,888 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 1800 to 1676.
[2020-11-24 20:06:26,889 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 1676 states.
[2020-11-24 20:06:26,890 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 1676 states to 1676 states and 1808 transitions.
[2020-11-24 20:06:26,890 INFO  L751         BuchiCegarLoop]: Abstraction has 1676 states and 1808 transitions.
[2020-11-24 20:06:26,890 INFO  L631         BuchiCegarLoop]: Abstraction has 1676 states and 1808 transitions.
[2020-11-24 20:06:26,890 INFO  L445         BuchiCegarLoop]: ======== Iteration 11============
[2020-11-24 20:06:26,890 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 1676 states and 1808 transitions.
[2020-11-24 20:06:26,893 INFO  L131   ngComponentsAnalysis]: Automaton has 3 accepting balls. 6
[2020-11-24 20:06:26,893 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-24 20:06:26,893 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-24 20:06:26,894 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-24 20:06:26,894 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_KECToken0 := false;
[L2]                 call_transfer_KECToken0 := false;
[L2]     CALL        call main();
[L3007]              assume null == 0;
[L3008]  CALL        call this := FreshRefGenerator__success();
[L1448]              havoc newRef;
[L1449]              assume Alloc[newRef] == false;
[L1450]              Alloc[newRef] := true;
[L1451]              assume newRef != null;
[L3008]  RET         call this := FreshRefGenerator__success();
[L3009]              assume now >= 0;
[L3010]              assume DType[this] == KECToken;
[L3011]              assume msgvalue_MSG == 0;
[L3012]              gas := gas - 53000;
[L3013]  CALL        call KECToken_KECToken(this, msgsender_MSG, msgvalue_MSG, _owner_s306);
[L243]               havoc __exception;
[L244]               revert := false;
[L245]   COND FALSE  !(__exception)
[L270]   CALL        call KECToken_KECToken__success(this, msgsender_MSG, msgvalue_MSG, _owner_s306);
[L1766]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1702]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1687]              assume msgsender_MSG != null;
[L1688]              Balance[this] := 0;
[L1702]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1703]  COND FALSE  !(revert)
[L1766]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1767]  COND FALSE  !(revert)
[L1770]  CALL        call KECToken_KECToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _owner_s306);
[L1733]              assume msgsender_MSG != null;
[L1734]              Balance[this] := 0;
[L1735]              _balances_KECToken[this] := zeroRefintArr();
[L1736]              sum__balances0[this] := 0;
[L1737]              _allowed_KECToken[this] := zeroRefRefintArr();
[L1738]              sum__allowed1[this] := 0;
[L1739]              _blacklist_KECToken[this] := zeroRefboolArr();
[L1740]              name_KECToken[this] := 1644945346;
[L1741]              symbol_KECToken[this] := 426684384;
[L1742]              decimals_KECToken[this] := 18;
[L1743]              _totalSupply_KECToken[this] := 5000000 * (1000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L1744]              owner_KECToken[this] := null;
[L1746]              owner_KECToken[this] := _owner_s306;
[L1747]              sum__balances0[this] := sum__balances0[this] - _balances_KECToken[this][_owner_s306];
[L1748]              _balances_KECToken[this][_owner_s306] := _totalSupply_KECToken[this];
[L1749]              sum__balances0[this] := sum__balances0[this] + _balances_KECToken[this][_owner_s306];
[L1770]  RET         call KECToken_KECToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _owner_s306);
[L1771]  COND FALSE  !(revert)
[L270]   RET         call KECToken_KECToken__success(this, msgsender_MSG, msgvalue_MSG, _owner_s306);
[L271]               assume !revert && gas >= 0;
[L3013]  RET         call KECToken_KECToken(this, msgsender_MSG, msgvalue_MSG, _owner_s306);
[L3014]              assume !revert && gas >= 0;
[L3017]  CALL        call CorralChoice_KECToken(this);
[L2866]              havoc msgsender_MSG;
[L2867]              havoc msgvalue_MSG;
[L2868]              havoc choice;
[L2869]              havoc __ret_0_totalSupply;
[L2870]              havoc _owner_s365;
[L2871]              havoc __ret_0_balanceOf;
[L2872]              havoc to_s456;
[L2873]              havoc value_s456;
[L2874]              havoc __ret_0_transfer;
[L2875]              havoc _owner_s381;
[L2876]              havoc spender_s381;
[L2877]              havoc __ret_0_allowance;
[L2878]              havoc spender_s522;
[L2879]              havoc value_s522;
[L2880]              havoc __ret_0_approve;
[L2881]              havoc from_s622;
[L2882]              havoc to_s622;
[L2883]              havoc value_s622;
[L2884]              havoc __ret_0_transferFrom;
[L2885]              havoc __ret_0_name;
[L2886]              havoc __ret_0_symbol;
[L2887]              havoc __ret_0_decimals;
[L2888]              havoc __ret_0_owner;
[L2889]              havoc _owner_s306;
[L2890]              havoc account_s331;
[L2891]              havoc account_s345;
[L2892]              havoc spender_s687;
[L2893]              havoc addedValue_s687;
[L2894]              havoc __ret_0_increaseAllowance;
[L2895]              havoc spender_s752;
[L2896]              havoc subtractedValue_s752;
[L2897]              havoc __ret_0_decreaseAllowance;
[L2898]              havoc tmpNow;
[L2899]              havoc gas;
[L2900]              assume gas > 4000000 && gas <= 8000000;
[L2901]              tmpNow := now;
[L2902]              havoc now;
[L2903]              assume now > tmpNow;
[L2904]              assume msgsender_MSG != null;
[L2905]              assume DType[msgsender_MSG] != SafeMath;
[L2906]              assume DType[msgsender_MSG] != IERC20;
[L2907]              assume DType[msgsender_MSG] != KECToken;
[L2908]              Alloc[msgsender_MSG] := true;
[L2909]  COND FALSE  !(choice == 14)
[L2915]  COND FALSE  !(choice == 13)
[L2921]  COND FALSE  !(choice == 12)
[L2928]  COND FALSE  !(choice == 11)
[L2934]  COND FALSE  !(choice == 10)
[L2941]  COND FALSE  !(choice == 9)
[L2948]  COND FALSE  !(choice == 8)
[L2954]  COND FALSE  !(choice == 7)
[L2960]  COND FALSE  !(choice == 6)
[L2966]  COND FALSE  !(choice == 5)
[L2972]  COND FALSE  !(choice == 4)
[L2978]  COND TRUE   choice == 3
[L2979]              gas := gas - 21000;
[L2980]  COND TRUE   gas >= 0
[L2981]              assume msgvalue_MSG == 0;
[L2982]  CALL        call removeBlacklist~address_KECToken(this, msgsender_MSG, msgvalue_MSG, account_s345);
[L361]               havoc __exception;
[L362]               revert := false;
[L363]   COND FALSE  !(__exception)
[L388]   CALL        call removeBlacklist~address_KECToken__success(this, msgsender_MSG, msgvalue_MSG, account_s345);
[L1805]  CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2743]  COND FALSE  !(!(msgsender_MSG == owner_KECToken[this]))
[L1805]  RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L1806]  COND FALSE  !(revert)
[L1809]              _blacklist_KECToken[this][account_s345] := false;
[L388]   RET         call removeBlacklist~address_KECToken__success(this, msgsender_MSG, msgvalue_MSG, account_s345);
[L389]               assume !revert && gas >= 0;
[L2982]  RET         call removeBlacklist~address_KECToken(this, msgsender_MSG, msgvalue_MSG, account_s345);
[L3017]  RET         call CorralChoice_KECToken(this);
[L3017]  CALL        call CorralChoice_KECToken(this);
[L2866]              havoc msgsender_MSG;
[L2867]              havoc msgvalue_MSG;
[L2868]              havoc choice;
[L2869]              havoc __ret_0_totalSupply;
[L2870]              havoc _owner_s365;
[L2871]              havoc __ret_0_balanceOf;
[L2872]              havoc to_s456;
[L2873]              havoc value_s456;
[L2874]              havoc __ret_0_transfer;
[L2875]              havoc _owner_s381;
[L2876]              havoc spender_s381;
[L2877]              havoc __ret_0_allowance;
[L2878]              havoc spender_s522;
[L2879]              havoc value_s522;
[L2880]              havoc __ret_0_approve;
[L2881]              havoc from_s622;
[L2882]              havoc to_s622;
[L2883]              havoc value_s622;
[L2884]              havoc __ret_0_transferFrom;
[L2885]              havoc __ret_0_name;
[L2886]              havoc __ret_0_symbol;
[L2887]              havoc __ret_0_decimals;
[L2888]              havoc __ret_0_owner;
[L2889]              havoc _owner_s306;
[L2890]              havoc account_s331;
[L2891]              havoc account_s345;
[L2892]              havoc spender_s687;
[L2893]              havoc addedValue_s687;
[L2894]              havoc __ret_0_increaseAllowance;
[L2895]              havoc spender_s752;
[L2896]              havoc subtractedValue_s752;
[L2897]              havoc __ret_0_decreaseAllowance;
[L2898]              havoc tmpNow;
[L2899]              havoc gas;
[L2900]              assume gas > 4000000 && gas <= 8000000;
[L2901]              tmpNow := now;
[L2902]              havoc now;
[L2903]              assume now > tmpNow;
[L2904]              assume msgsender_MSG != null;
[L2905]              assume DType[msgsender_MSG] != SafeMath;
[L2906]              assume DType[msgsender_MSG] != IERC20;
[L2907]              assume DType[msgsender_MSG] != KECToken;
[L2908]              Alloc[msgsender_MSG] := true;
[L2909]  COND FALSE  !(choice == 14)
[L2915]  COND FALSE  !(choice == 13)
[L2921]  COND TRUE   choice == 12
[L2922]              gas := gas - 21000;
[L2923]  COND TRUE   gas >= 0
[L2924]              assume value_s456 >= 0 && value_s456 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2925]              assume msgvalue_MSG == 0;
[L2926]  CALL        call __ret_0_transfer := transfer~address~uint256_KECToken(this, msgsender_MSG, msgvalue_MSG, to_s456, value_s456);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == to_s456 && value_s456 <= _balances_KECToken[this][msgsender_MSG]) && value_s456 >= 0) && value_s456 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_KECToken[this][to_s456] >= 0) && _balances_KECToken[this][to_s456] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_KECToken[this][msgsender_MSG] >= 0) && _balances_KECToken[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_KECToken0 := true;
[L2]                 call_transfer_KECToken0 := false;
[L2]                 revert := revert_hold;
[L595]               havoc __exception;
[L596]               revert := false;
[L597]   COND TRUE   __exception
[L598]               __tmp__Balance := Balance;
[L599]               __tmp__DType := DType;
[L600]               __tmp__Alloc := Alloc;
[L601]               __tmp__balance_ADDR := balance_ADDR;
[L602]               __tmp__M_Ref_int := M_Ref_int;
[L603]               __tmp__sum__balances0 := sum__balances0;
[L604]               __tmp__alloc__allowed_KECToken_lvl0 := alloc__allowed_KECToken_lvl0;
[L605]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L606]               __tmp__sum__allowed1 := sum__allowed1;
[L607]               __tmp__M_Ref_bool := M_Ref_bool;
[L608]               __tmp__sum__blacklist2 := sum__blacklist2;
[L609]               __tmp__Length := Length;
[L610]               __tmp__now := now;
[L611]               __tmp___balances_KECToken := _balances_KECToken;
[L612]               __tmp___allowed_KECToken := _allowed_KECToken;
[L613]               __tmp___blacklist_KECToken := _blacklist_KECToken;
[L614]               __tmp__name_KECToken := name_KECToken;
[L615]               __tmp__symbol_KECToken := symbol_KECToken;
[L616]               __tmp__decimals_KECToken := decimals_KECToken;
[L617]               __tmp___totalSupply_KECToken := _totalSupply_KECToken;
[L618]               __tmp__owner_KECToken := owner_KECToken;
[L619]   CALL        call __ret_0_ := transfer~address~uint256_KECToken__fail(this, msgsender_MSG, msgvalue_MSG, to_s456, value_s456);
[L1853]  COND FALSE  !(!(value_s456 <= __tmp___balances_KECToken[this][msgsender_MSG]))
[L1857]              __var_4 := null;
[L1858]  COND FALSE  !(!(to_s456 != null))
[L1862]  COND TRUE   !(__tmp___blacklist_KECToken[this][msgsender_MSG] != true && __tmp___blacklist_KECToken[this][to_s456] != true)
[L1863]              revert := true;
[L619]   RET         call __ret_0_ := transfer~address~uint256_KECToken__fail(this, msgsender_MSG, msgvalue_MSG, to_s456, value_s456);
[L620]               assume revert || gas < 0;
[L2926]  RET         call __ret_0_transfer := transfer~address~uint256_KECToken(this, msgsender_MSG, msgvalue_MSG, to_s456, value_s456);
[L3017]  RET         call CorralChoice_KECToken(this);

Loop:
[L3017]  CALL        call CorralChoice_KECToken(this);
[L2866]              havoc msgsender_MSG;
[L2867]              havoc msgvalue_MSG;
[L2868]              havoc choice;
[L2869]              havoc __ret_0_totalSupply;
[L2870]              havoc _owner_s365;
[L2871]              havoc __ret_0_balanceOf;
[L2872]              havoc to_s456;
[L2873]              havoc value_s456;
[L2874]              havoc __ret_0_transfer;
[L2875]              havoc _owner_s381;
[L2876]              havoc spender_s381;
[L2877]              havoc __ret_0_allowance;
[L2878]              havoc spender_s522;
[L2879]              havoc value_s522;
[L2880]              havoc __ret_0_approve;
[L2881]              havoc from_s622;
[L2882]              havoc to_s622;
[L2883]              havoc value_s622;
[L2884]              havoc __ret_0_transferFrom;
[L2885]              havoc __ret_0_name;
[L2886]              havoc __ret_0_symbol;
[L2887]              havoc __ret_0_decimals;
[L2888]              havoc __ret_0_owner;
[L2889]              havoc _owner_s306;
[L2890]              havoc account_s331;
[L2891]              havoc account_s345;
[L2892]              havoc spender_s687;
[L2893]              havoc addedValue_s687;
[L2894]              havoc __ret_0_increaseAllowance;
[L2895]              havoc spender_s752;
[L2896]              havoc subtractedValue_s752;
[L2897]              havoc __ret_0_decreaseAllowance;
[L2898]              havoc tmpNow;
[L2899]              havoc gas;
[L2900]              assume gas > 4000000 && gas <= 8000000;
[L2901]              tmpNow := now;
[L2902]              havoc now;
[L2903]              assume now > tmpNow;
[L2904]              assume msgsender_MSG != null;
[L2905]              assume DType[msgsender_MSG] != SafeMath;
[L2906]              assume DType[msgsender_MSG] != IERC20;
[L2907]              assume DType[msgsender_MSG] != KECToken;
[L2908]              Alloc[msgsender_MSG] := true;
[L2909]  COND FALSE  !(choice == 14)
[L2915]  COND FALSE  !(choice == 13)
[L2921]  COND FALSE  !(choice == 12)
[L2928]  COND FALSE  !(choice == 11)
[L2934]  COND FALSE  !(choice == 10)
[L2941]  COND FALSE  !(choice == 9)
[L2948]  COND FALSE  !(choice == 8)
[L2954]  COND FALSE  !(choice == 7)
[L2960]  COND FALSE  !(choice == 6)
[L2966]  COND FALSE  !(choice == 5)
[L2972]  COND FALSE  !(choice == 4)
[L2978]  COND FALSE  !(choice == 3)
[L2984]  COND FALSE  !(choice == 2)
[L2991]  COND FALSE  !(choice == 1)
[L3017]  RET         call CorralChoice_KECToken(this);

[2020-11-24 20:06:26,896 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-24 20:06:26,896 INFO  L82        PathProgramCache]: Analyzing trace with hash 1498230615, now seen corresponding path program 1 times
[2020-11-24 20:06:26,897 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-24 20:06:26,905 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-24 20:06:26,974 INFO  L134       CoverageAnalysis]: Checked inductivity of 48 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 48 trivial. 0 not checked.
[2020-11-24 20:06:26,974 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-24 20:06:26,975 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [14] imperfect sequences [] total 14
[2020-11-24 20:06:26,975 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-24 20:06:26,975 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 15 interpolants.
[2020-11-24 20:06:26,975 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=30, Invalid=180, Unknown=0, NotChecked=0, Total=210
[2020-11-24 20:06:26,975 INFO  L87              Difference]: Start difference. First operand 1676 states and 1808 transitions. cyclomatic complexity: 139 Second operand 15 states.
[2020-11-24 20:06:27,694 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-24 20:06:27,694 INFO  L93              Difference]: Finished difference Result 1691 states and 1843 transitions.
[2020-11-24 20:06:27,695 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 15 states. 
[2020-11-24 20:06:27,695 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 1691 states and 1843 transitions.
[2020-11-24 20:06:27,699 INFO  L131   ngComponentsAnalysis]: Automaton has 4 accepting balls. 8
[2020-11-24 20:06:27,703 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 1691 states to 1691 states and 1843 transitions.
[2020-11-24 20:06:27,704 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 470
[2020-11-24 20:06:27,704 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 470
[2020-11-24 20:06:27,704 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 1691 states and 1843 transitions.
[2020-11-24 20:06:27,705 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-24 20:06:27,705 INFO  L728         BuchiCegarLoop]: Abstraction has 1691 states and 1843 transitions.
[2020-11-24 20:06:27,707 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 1691 states and 1843 transitions.
[2020-11-24 20:06:27,716 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 1691 to 1670.
[2020-11-24 20:06:27,717 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 1670 states.
[2020-11-24 20:06:27,718 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 1670 states to 1670 states and 1802 transitions.
[2020-11-24 20:06:27,718 INFO  L751         BuchiCegarLoop]: Abstraction has 1670 states and 1802 transitions.
[2020-11-24 20:06:27,718 INFO  L631         BuchiCegarLoop]: Abstraction has 1670 states and 1802 transitions.
[2020-11-24 20:06:27,719 INFO  L445         BuchiCegarLoop]: ======== Iteration 12============
[2020-11-24 20:06:27,719 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 1670 states and 1802 transitions.
[2020-11-24 20:06:27,721 INFO  L131   ngComponentsAnalysis]: Automaton has 3 accepting balls. 6
[2020-11-24 20:06:27,721 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-24 20:06:27,721 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-24 20:06:27,722 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-24 20:06:27,722 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_KECToken0 := false;
[L2]                 call_transfer_KECToken0 := false;
[L2]     CALL        call main();
[L3007]              assume null == 0;
[L3008]  CALL        call this := FreshRefGenerator__success();
[L1448]              havoc newRef;
[L1449]              assume Alloc[newRef] == false;
[L1450]              Alloc[newRef] := true;
[L1451]              assume newRef != null;
[L3008]  RET         call this := FreshRefGenerator__success();
[L3009]              assume now >= 0;
[L3010]              assume DType[this] == KECToken;
[L3011]              assume msgvalue_MSG == 0;
[L3012]              gas := gas - 53000;
[L3013]  CALL        call KECToken_KECToken(this, msgsender_MSG, msgvalue_MSG, _owner_s306);
[L243]               havoc __exception;
[L244]               revert := false;
[L245]   COND FALSE  !(__exception)
[L270]   CALL        call KECToken_KECToken__success(this, msgsender_MSG, msgvalue_MSG, _owner_s306);
[L1766]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1702]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1687]              assume msgsender_MSG != null;
[L1688]              Balance[this] := 0;
[L1702]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1703]  COND FALSE  !(revert)
[L1766]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1767]  COND FALSE  !(revert)
[L1770]  CALL        call KECToken_KECToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _owner_s306);
[L1733]              assume msgsender_MSG != null;
[L1734]              Balance[this] := 0;
[L1735]              _balances_KECToken[this] := zeroRefintArr();
[L1736]              sum__balances0[this] := 0;
[L1737]              _allowed_KECToken[this] := zeroRefRefintArr();
[L1738]              sum__allowed1[this] := 0;
[L1739]              _blacklist_KECToken[this] := zeroRefboolArr();
[L1740]              name_KECToken[this] := 1644945346;
[L1741]              symbol_KECToken[this] := 426684384;
[L1742]              decimals_KECToken[this] := 18;
[L1743]              _totalSupply_KECToken[this] := 5000000 * (1000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L1744]              owner_KECToken[this] := null;
[L1746]              owner_KECToken[this] := _owner_s306;
[L1747]              sum__balances0[this] := sum__balances0[this] - _balances_KECToken[this][_owner_s306];
[L1748]              _balances_KECToken[this][_owner_s306] := _totalSupply_KECToken[this];
[L1749]              sum__balances0[this] := sum__balances0[this] + _balances_KECToken[this][_owner_s306];
[L1770]  RET         call KECToken_KECToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _owner_s306);
[L1771]  COND FALSE  !(revert)
[L270]   RET         call KECToken_KECToken__success(this, msgsender_MSG, msgvalue_MSG, _owner_s306);
[L271]               assume !revert && gas >= 0;
[L3013]  RET         call KECToken_KECToken(this, msgsender_MSG, msgvalue_MSG, _owner_s306);
[L3014]              assume !revert && gas >= 0;
[L3017]  CALL        call CorralChoice_KECToken(this);
[L2866]              havoc msgsender_MSG;
[L2867]              havoc msgvalue_MSG;
[L2868]              havoc choice;
[L2869]              havoc __ret_0_totalSupply;
[L2870]              havoc _owner_s365;
[L2871]              havoc __ret_0_balanceOf;
[L2872]              havoc to_s456;
[L2873]              havoc value_s456;
[L2874]              havoc __ret_0_transfer;
[L2875]              havoc _owner_s381;
[L2876]              havoc spender_s381;
[L2877]              havoc __ret_0_allowance;
[L2878]              havoc spender_s522;
[L2879]              havoc value_s522;
[L2880]              havoc __ret_0_approve;
[L2881]              havoc from_s622;
[L2882]              havoc to_s622;
[L2883]              havoc value_s622;
[L2884]              havoc __ret_0_transferFrom;
[L2885]              havoc __ret_0_name;
[L2886]              havoc __ret_0_symbol;
[L2887]              havoc __ret_0_decimals;
[L2888]              havoc __ret_0_owner;
[L2889]              havoc _owner_s306;
[L2890]              havoc account_s331;
[L2891]              havoc account_s345;
[L2892]              havoc spender_s687;
[L2893]              havoc addedValue_s687;
[L2894]              havoc __ret_0_increaseAllowance;
[L2895]              havoc spender_s752;
[L2896]              havoc subtractedValue_s752;
[L2897]              havoc __ret_0_decreaseAllowance;
[L2898]              havoc tmpNow;
[L2899]              havoc gas;
[L2900]              assume gas > 4000000 && gas <= 8000000;
[L2901]              tmpNow := now;
[L2902]              havoc now;
[L2903]              assume now > tmpNow;
[L2904]              assume msgsender_MSG != null;
[L2905]              assume DType[msgsender_MSG] != SafeMath;
[L2906]              assume DType[msgsender_MSG] != IERC20;
[L2907]              assume DType[msgsender_MSG] != KECToken;
[L2908]              Alloc[msgsender_MSG] := true;
[L2909]  COND FALSE  !(choice == 14)
[L2915]  COND FALSE  !(choice == 13)
[L2921]  COND FALSE  !(choice == 12)
[L2928]  COND FALSE  !(choice == 11)
[L2934]  COND FALSE  !(choice == 10)
[L2941]  COND FALSE  !(choice == 9)
[L2948]  COND FALSE  !(choice == 8)
[L2954]  COND FALSE  !(choice == 7)
[L2960]  COND FALSE  !(choice == 6)
[L2966]  COND FALSE  !(choice == 5)
[L2972]  COND TRUE   choice == 4
[L2973]              gas := gas - 21000;
[L2974]  COND TRUE   gas >= 0
[L2975]              assume msgvalue_MSG == 0;
[L2976]  CALL        call addBlacklist~address_KECToken(this, msgsender_MSG, msgvalue_MSG, account_s331);
[L302]               havoc __exception;
[L303]               revert := false;
[L304]   COND FALSE  !(__exception)
[L329]   CALL        call addBlacklist~address_KECToken__success(this, msgsender_MSG, msgvalue_MSG, account_s331);
[L1787]  CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2743]  COND FALSE  !(!(msgsender_MSG == owner_KECToken[this]))
[L1787]  RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L1788]  COND FALSE  !(revert)
[L1791]              _blacklist_KECToken[this][account_s331] := true;
[L329]   RET         call addBlacklist~address_KECToken__success(this, msgsender_MSG, msgvalue_MSG, account_s331);
[L330]               assume !revert && gas >= 0;
[L2976]  RET         call addBlacklist~address_KECToken(this, msgsender_MSG, msgvalue_MSG, account_s331);
[L3017]  RET         call CorralChoice_KECToken(this);
[L3017]  CALL        call CorralChoice_KECToken(this);
[L2866]              havoc msgsender_MSG;
[L2867]              havoc msgvalue_MSG;
[L2868]              havoc choice;
[L2869]              havoc __ret_0_totalSupply;
[L2870]              havoc _owner_s365;
[L2871]              havoc __ret_0_balanceOf;
[L2872]              havoc to_s456;
[L2873]              havoc value_s456;
[L2874]              havoc __ret_0_transfer;
[L2875]              havoc _owner_s381;
[L2876]              havoc spender_s381;
[L2877]              havoc __ret_0_allowance;
[L2878]              havoc spender_s522;
[L2879]              havoc value_s522;
[L2880]              havoc __ret_0_approve;
[L2881]              havoc from_s622;
[L2882]              havoc to_s622;
[L2883]              havoc value_s622;
[L2884]              havoc __ret_0_transferFrom;
[L2885]              havoc __ret_0_name;
[L2886]              havoc __ret_0_symbol;
[L2887]              havoc __ret_0_decimals;
[L2888]              havoc __ret_0_owner;
[L2889]              havoc _owner_s306;
[L2890]              havoc account_s331;
[L2891]              havoc account_s345;
[L2892]              havoc spender_s687;
[L2893]              havoc addedValue_s687;
[L2894]              havoc __ret_0_increaseAllowance;
[L2895]              havoc spender_s752;
[L2896]              havoc subtractedValue_s752;
[L2897]              havoc __ret_0_decreaseAllowance;
[L2898]              havoc tmpNow;
[L2899]              havoc gas;
[L2900]              assume gas > 4000000 && gas <= 8000000;
[L2901]              tmpNow := now;
[L2902]              havoc now;
[L2903]              assume now > tmpNow;
[L2904]              assume msgsender_MSG != null;
[L2905]              assume DType[msgsender_MSG] != SafeMath;
[L2906]              assume DType[msgsender_MSG] != IERC20;
[L2907]              assume DType[msgsender_MSG] != KECToken;
[L2908]              Alloc[msgsender_MSG] := true;
[L2909]  COND FALSE  !(choice == 14)
[L2915]  COND FALSE  !(choice == 13)
[L2921]  COND TRUE   choice == 12
[L2922]              gas := gas - 21000;
[L2923]  COND TRUE   gas >= 0
[L2924]              assume value_s456 >= 0 && value_s456 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2925]              assume msgvalue_MSG == 0;
[L2926]  CALL        call __ret_0_transfer := transfer~address~uint256_KECToken(this, msgsender_MSG, msgvalue_MSG, to_s456, value_s456);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == to_s456 && value_s456 <= _balances_KECToken[this][msgsender_MSG]) && value_s456 >= 0) && value_s456 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_KECToken[this][to_s456] >= 0) && _balances_KECToken[this][to_s456] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_KECToken[this][msgsender_MSG] >= 0) && _balances_KECToken[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_KECToken0 := true;
[L2]                 call_transfer_KECToken0 := false;
[L2]                 revert := revert_hold;
[L595]               havoc __exception;
[L596]               revert := false;
[L597]   COND TRUE   __exception
[L598]               __tmp__Balance := Balance;
[L599]               __tmp__DType := DType;
[L600]               __tmp__Alloc := Alloc;
[L601]               __tmp__balance_ADDR := balance_ADDR;
[L602]               __tmp__M_Ref_int := M_Ref_int;
[L603]               __tmp__sum__balances0 := sum__balances0;
[L604]               __tmp__alloc__allowed_KECToken_lvl0 := alloc__allowed_KECToken_lvl0;
[L605]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L606]               __tmp__sum__allowed1 := sum__allowed1;
[L607]               __tmp__M_Ref_bool := M_Ref_bool;
[L608]               __tmp__sum__blacklist2 := sum__blacklist2;
[L609]               __tmp__Length := Length;
[L610]               __tmp__now := now;
[L611]               __tmp___balances_KECToken := _balances_KECToken;
[L612]               __tmp___allowed_KECToken := _allowed_KECToken;
[L613]               __tmp___blacklist_KECToken := _blacklist_KECToken;
[L614]               __tmp__name_KECToken := name_KECToken;
[L615]               __tmp__symbol_KECToken := symbol_KECToken;
[L616]               __tmp__decimals_KECToken := decimals_KECToken;
[L617]               __tmp___totalSupply_KECToken := _totalSupply_KECToken;
[L618]               __tmp__owner_KECToken := owner_KECToken;
[L619]   CALL        call __ret_0_ := transfer~address~uint256_KECToken__fail(this, msgsender_MSG, msgvalue_MSG, to_s456, value_s456);
[L1853]  COND FALSE  !(!(value_s456 <= __tmp___balances_KECToken[this][msgsender_MSG]))
[L1857]              __var_4 := null;
[L1858]  COND FALSE  !(!(to_s456 != null))
[L1862]  COND TRUE   !(__tmp___blacklist_KECToken[this][msgsender_MSG] != true && __tmp___blacklist_KECToken[this][to_s456] != true)
[L1863]              revert := true;
[L619]   RET         call __ret_0_ := transfer~address~uint256_KECToken__fail(this, msgsender_MSG, msgvalue_MSG, to_s456, value_s456);
[L620]               assume revert || gas < 0;
[L2926]  RET         call __ret_0_transfer := transfer~address~uint256_KECToken(this, msgsender_MSG, msgvalue_MSG, to_s456, value_s456);
[L3017]  RET         call CorralChoice_KECToken(this);

Loop:
[L3017]  CALL        call CorralChoice_KECToken(this);
[L2866]              havoc msgsender_MSG;
[L2867]              havoc msgvalue_MSG;
[L2868]              havoc choice;
[L2869]              havoc __ret_0_totalSupply;
[L2870]              havoc _owner_s365;
[L2871]              havoc __ret_0_balanceOf;
[L2872]              havoc to_s456;
[L2873]              havoc value_s456;
[L2874]              havoc __ret_0_transfer;
[L2875]              havoc _owner_s381;
[L2876]              havoc spender_s381;
[L2877]              havoc __ret_0_allowance;
[L2878]              havoc spender_s522;
[L2879]              havoc value_s522;
[L2880]              havoc __ret_0_approve;
[L2881]              havoc from_s622;
[L2882]              havoc to_s622;
[L2883]              havoc value_s622;
[L2884]              havoc __ret_0_transferFrom;
[L2885]              havoc __ret_0_name;
[L2886]              havoc __ret_0_symbol;
[L2887]              havoc __ret_0_decimals;
[L2888]              havoc __ret_0_owner;
[L2889]              havoc _owner_s306;
[L2890]              havoc account_s331;
[L2891]              havoc account_s345;
[L2892]              havoc spender_s687;
[L2893]              havoc addedValue_s687;
[L2894]              havoc __ret_0_increaseAllowance;
[L2895]              havoc spender_s752;
[L2896]              havoc subtractedValue_s752;
[L2897]              havoc __ret_0_decreaseAllowance;
[L2898]              havoc tmpNow;
[L2899]              havoc gas;
[L2900]              assume gas > 4000000 && gas <= 8000000;
[L2901]              tmpNow := now;
[L2902]              havoc now;
[L2903]              assume now > tmpNow;
[L2904]              assume msgsender_MSG != null;
[L2905]              assume DType[msgsender_MSG] != SafeMath;
[L2906]              assume DType[msgsender_MSG] != IERC20;
[L2907]              assume DType[msgsender_MSG] != KECToken;
[L2908]              Alloc[msgsender_MSG] := true;
[L2909]  COND FALSE  !(choice == 14)
[L2915]  COND FALSE  !(choice == 13)
[L2921]  COND FALSE  !(choice == 12)
[L2928]  COND FALSE  !(choice == 11)
[L2934]  COND FALSE  !(choice == 10)
[L2941]  COND FALSE  !(choice == 9)
[L2948]  COND FALSE  !(choice == 8)
[L2954]  COND FALSE  !(choice == 7)
[L2960]  COND FALSE  !(choice == 6)
[L2966]  COND FALSE  !(choice == 5)
[L2972]  COND TRUE   choice == 4
[L2973]              gas := gas - 21000;
[L2974]  COND TRUE   gas >= 0
[L2975]              assume msgvalue_MSG == 0;
[L2976]  CALL        call addBlacklist~address_KECToken(this, msgsender_MSG, msgvalue_MSG, account_s331);
[L302]               havoc __exception;
[L303]               revert := false;
[L304]   COND FALSE  !(__exception)
[L329]   CALL        call addBlacklist~address_KECToken__success(this, msgsender_MSG, msgvalue_MSG, account_s331);
[L1787]  CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2743]  COND FALSE  !(!(msgsender_MSG == owner_KECToken[this]))
[L1787]  RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L1788]  COND FALSE  !(revert)
[L1791]              _blacklist_KECToken[this][account_s331] := true;
[L329]   RET         call addBlacklist~address_KECToken__success(this, msgsender_MSG, msgvalue_MSG, account_s331);
[L330]               assume !revert && gas >= 0;
[L2976]  RET         call addBlacklist~address_KECToken(this, msgsender_MSG, msgvalue_MSG, account_s331);
[L3017]  RET         call CorralChoice_KECToken(this);

[2020-11-24 20:06:27,724 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-24 20:06:27,725 INFO  L82        PathProgramCache]: Analyzing trace with hash -1538670345, now seen corresponding path program 2 times
[2020-11-24 20:06:27,725 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-24 20:06:27,735 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-24 20:06:27,745 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-24 20:06:27,764 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-24 20:06:27,765 INFO  L82        PathProgramCache]: Analyzing trace with hash 1273419077, now seen corresponding path program 1 times
[2020-11-24 20:06:27,765 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-24 20:06:27,770 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-24 20:06:27,774 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-24 20:06:27,780 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-24 20:06:27,780 INFO  L82        PathProgramCache]: Analyzing trace with hash 956419899, now seen corresponding path program 1 times
[2020-11-24 20:06:27,781 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-24 20:06:27,817 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-24 20:06:27,829 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 17 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 61 to 113
Garbage collection #1: 59 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 59 to 113
Garbage collection #2: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #3: 223 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 223 to 443
Garbage collection #4: 443 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 443 to 883
Garbage collection #5: 883 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 883 to 1759
Garbage collection #1: 67 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 67 to 131
Garbage collection #2: 131 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 131 to 257
Garbage collection #3: 257 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 257 to 509
Garbage collection #4: 509 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 509 to 1013
Garbage collection #5: 1013 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 1013 to 2017
Garbage collection #6: 2017 nodes / 0 free / 0.001s / 0.002s total
Resizing node table from 2017 to 4027
Garbage collection #1: 41 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 41 to 79
Garbage collection #2: 79 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 79 to 157
Garbage collection #3: 157 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 157 to 313
Garbage collection #4: 313 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 313 to 619
Garbage collection #5: 619 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 619 to 1237
Garbage collection #1: 107 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 107 to 211
Garbage collection #2: 211 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 211 to 421
Garbage collection #3: 421 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 421 to 839
Garbage collection #4: 839 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 839 to 1669
Garbage collection #5: 1669 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 1669 to 3331
Garbage collection #6: 3331 nodes / 0 free / 0.001s / 0.002s total
Resizing node table from 3331 to 6661
Garbage collection #1: 79 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 79 to 157
Garbage collection #2: 157 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 157 to 313
Garbage collection #3: 313 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 313 to 619
Garbage collection #4: 619 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 619 to 1237
Garbage collection #5: 1237 nodes / 0 free / 0.001s / 0.002s total
Resizing node table from 1237 to 2473
Garbage collection #6: 2473 nodes / 0 free / 0.001s / 0.003s total
Resizing node table from 2473 to 4943
Garbage collection #1: 41 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 41 to 79
Garbage collection #2: 79 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 79 to 157
Garbage collection #3: 157 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 157 to 313
Garbage collection #4: 313 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 313 to 619
Garbage collection #5: 619 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 619 to 1237
[2020-11-24 20:06:28,228 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #1: 41 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 41 to 79
Garbage collection #2: 79 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 79 to 157
Garbage collection #3: 157 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 157 to 313
Garbage collection #4: 313 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 313 to 619
Garbage collection #5: 619 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 619 to 1237
Garbage collection #1: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #2: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #3: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #4: 277 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 277 to 547
Garbage collection #5: 547 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 547 to 1093
Garbage collection #1: 41 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 41 to 79
Garbage collection #2: 79 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 79 to 157
Garbage collection #3: 157 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 157 to 313
Garbage collection #4: 313 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 313 to 619
Garbage collection #5: 619 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 619 to 1237
Garbage collection #1: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #2: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #3: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #4: 277 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 277 to 547
Garbage collection #1: 89 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 89 to 173
Garbage collection #2: 173 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 173 to 337
Garbage collection #3: 337 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 337 to 673
Garbage collection #4: 673 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 673 to 1327
Garbage collection #5: 1327 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1327 to 2647
Garbage collection #6: 2647 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2647 to 5281
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 59 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 59 to 113
Garbage collection #2: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #3: 223 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 223 to 443
Garbage collection #4: 443 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 443 to 883
Garbage collection #5: 883 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 883 to 1759
Garbage collection #1: 67 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 67 to 131
Garbage collection #2: 131 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 131 to 257
Garbage collection #3: 257 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 257 to 509
Garbage collection #4: 509 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 509 to 1013
Garbage collection #5: 1013 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1013 to 2017
Garbage collection #6: 2017 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2017 to 4027
Garbage collection #1: 41 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 41 to 79
Garbage collection #2: 79 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 79 to 157
Garbage collection #3: 157 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 157 to 313
Garbage collection #4: 313 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 313 to 619
Garbage collection #5: 619 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 619 to 1237
Garbage collection #1: 107 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 107 to 211
Garbage collection #2: 211 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 211 to 421
Garbage collection #3: 421 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 421 to 839
Garbage collection #4: 839 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 839 to 1669
Garbage collection #5: 1669 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1669 to 3331
Garbage collection #6: 3331 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3331 to 6661
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #2: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #3: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #4: 397 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 397 to 787
Garbage collection #5: 787 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 787 to 1571
Garbage collection #6: 1571 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1571 to 3137
Garbage collection #1: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #2: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #3: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #4: 317 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 317 to 631
Garbage collection #5: 631 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 631 to 1259
Garbage collection #6: 1259 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1259 to 2503
Garbage collection #7: 2503 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2503 to 5003
Garbage collection #1: 97 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 97 to 193
Garbage collection #2: 193 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 193 to 383
Garbage collection #3: 383 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 383 to 761
Garbage collection #4: 761 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 761 to 1511
Garbage collection #5: 1511 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1511 to 3019
Garbage collection #6: 3019 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3019 to 6037
[2020-11-24 20:06:29,237 WARN  L188               SmtUtils]: Spent 302.00 ms on a formula simplification. DAG size of input: 238 DAG size of output: 227
Garbage collection #1: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #2: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #3: 317 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 317 to 631
Garbage collection #4: 631 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 631 to 1259
Garbage collection #5: 1259 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1259 to 2503
Garbage collection #6: 2503 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2503 to 5003
Garbage collection #7: 5003 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 5003 to 9973
Garbage collection #1: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #2: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #3: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #4: 397 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 397 to 787
Garbage collection #5: 787 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 787 to 1571
Garbage collection #6: 1571 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1571 to 3137
Garbage collection #7: 3137 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3137 to 6271
[2020-11-24 20:06:29,414 WARN  L188               SmtUtils]: Spent 101.00 ms on a formula simplification that was a NOOP. DAG size: 287
Garbage collection #1: 127 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 127 to 251
Garbage collection #2: 251 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 251 to 499
Garbage collection #3: 499 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 499 to 997
Garbage collection #4: 997 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 997 to 1993
Garbage collection #5: 1993 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1993 to 3967
Garbage collection #6: 3967 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3967 to 7933
[2020-11-24 20:06:30,586 WARN  L188               SmtUtils]: Spent 1.08 s on a formula simplification. DAG size of input: 581 DAG size of output: 573
Garbage collection #1: 241 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 241 to 479
Garbage collection #2: 479 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 479 to 953
Garbage collection #3: 953 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 953 to 1901
Garbage collection #4: 1901 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1901 to 3797
Garbage collection #5: 3797 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3797 to 7591
Garbage collection #6: 7591 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 7591 to 15173
Garbage collection #7: 15173 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 15173 to 30341
Garbage collection #1: 67 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 67 to 131
Garbage collection #2: 131 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 131 to 257
Garbage collection #3: 257 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 257 to 509
Garbage collection #4: 509 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 509 to 1013
Garbage collection #5: 1013 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1013 to 2017
[2020-11-24 20:06:30,713 WARN  L188               SmtUtils]: Spent 109.00 ms on a formula simplification. DAG size of input: 188 DAG size of output: 185
[2020-11-24 20:06:30,869 WARN  L188               SmtUtils]: Spent 134.00 ms on a formula simplification that was a NOOP. DAG size: 287
Garbage collection #1: 101 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 101 to 199
Garbage collection #2: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #3: 397 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 397 to 787
Garbage collection #4: 787 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 787 to 1571
Garbage collection #5: 1571 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1571 to 3137
Garbage collection #6: 3137 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3137 to 6271
Garbage collection #1: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #2: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #3: 223 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 223 to 443
Garbage collection #4: 443 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 443 to 883
Garbage collection #5: 883 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 883 to 1759
Garbage collection #6: 1759 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1759 to 3517
[2020-11-24 20:06:31,111 WARN  L188               SmtUtils]: Spent 191.00 ms on a formula simplification. DAG size of input: 289 DAG size of output: 288
Garbage collection #1: 101 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 101 to 199
Garbage collection #2: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #3: 397 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 397 to 787
Garbage collection #4: 787 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 787 to 1571
Garbage collection #5: 1571 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1571 to 3137
Garbage collection #6: 3137 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3137 to 6271
Garbage collection #1: 101 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 101 to 199
Garbage collection #2: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #3: 397 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 397 to 787
Garbage collection #4: 787 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 787 to 1571
Garbage collection #5: 1571 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1571 to 3137
Garbage collection #6: 3137 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3137 to 6271
[2020-11-24 20:06:31,224 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-24 20:06:31,239 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-24 20:06:31,245 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer CFG 24.11 08:06:31 BasicIcfg
[2020-11-24 20:06:31,245 INFO  L132        PluginConnector]: ------------------------ END BuchiAutomizer----------------------------
[2020-11-24 20:06:31,246 INFO  L168              Benchmark]: Toolchain (without parser) took 15589.57 ms. Allocated memory was 1.0 GB in the beginning and 2.1 GB in the end (delta: 1.0 GB). Free memory was 945.9 MB in the beginning and 989.3 MB in the end (delta: -43.4 MB). Peak memory consumption was 1.2 GB. Max. memory is 15.3 GB.
[2020-11-24 20:06:31,246 INFO  L168              Benchmark]: Boogie PL CUP Parser took 0.18 ms. Allocated memory is still 1.0 GB. Free memory is still 951.3 MB. There was no memory consumed. Max. memory is 15.3 GB.
[2020-11-24 20:06:31,246 INFO  L168              Benchmark]: Boogie Preprocessor took 92.54 ms. Allocated memory is still 1.0 GB. Free memory was 945.9 MB in the beginning and 935.2 MB in the end (delta: 10.7 MB). Peak memory consumption was 10.7 MB. Max. memory is 15.3 GB.
[2020-11-24 20:06:31,246 INFO  L168              Benchmark]: UtopiaSpecLang took 57.99 ms. Allocated memory is still 1.0 GB. Free memory was 935.2 MB in the beginning and 929.8 MB in the end (delta: 5.4 MB). Peak memory consumption was 5.4 MB. Max. memory is 15.3 GB.
[2020-11-24 20:06:31,247 INFO  L168              Benchmark]: Boogie Printer took 12.86 ms. Allocated memory is still 1.0 GB. Free memory is still 929.8 MB. There was no memory consumed. Max. memory is 15.3 GB.
[2020-11-24 20:06:31,247 INFO  L168              Benchmark]: RCFGBuilder took 665.77 ms. Allocated memory is still 1.0 GB. Free memory was 929.8 MB in the beginning and 849.3 MB in the end (delta: 80.5 MB). Peak memory consumption was 80.5 MB. Max. memory is 15.3 GB.
[2020-11-24 20:06:31,248 INFO  L168              Benchmark]: UtopiaLTL2Aut took 39.89 ms. Allocated memory is still 1.0 GB. Free memory was 849.3 MB in the beginning and 840.4 MB in the end (delta: 8.9 MB). Peak memory consumption was 8.9 MB. Max. memory is 15.3 GB.
[2020-11-24 20:06:31,248 INFO  L168              Benchmark]: BÃ¼chi Program Product took 957.27 ms. Allocated memory was 1.0 GB in the beginning and 1.1 GB in the end (delta: 64.5 MB). Free memory was 840.4 MB in the beginning and 789.7 MB in the end (delta: 50.7 MB). Peak memory consumption was 126.4 MB. Max. memory is 15.3 GB.
[2020-11-24 20:06:31,248 INFO  L168              Benchmark]: BlockEncodingV2 took 101.13 ms. Allocated memory is still 1.1 GB. Free memory was 789.7 MB in the beginning and 742.2 MB in the end (delta: 47.5 MB). Peak memory consumption was 47.5 MB. Max. memory is 15.3 GB.
[2020-11-24 20:06:31,249 INFO  L168              Benchmark]: BuchiAutomizer took 13659.18 ms. Allocated memory was 1.1 GB in the beginning and 2.1 GB in the end (delta: 967.3 MB). Free memory was 742.2 MB in the beginning and 989.3 MB in the end (delta: -247.1 MB). Peak memory consumption was 948.9 MB. Max. memory is 15.3 GB.
[2020-11-24 20:06:31,251 INFO  L337   ainManager$Toolchain]: #######################  End [Toolchain 1] #######################
 --- Results ---
 * Results from de.uni_freiburg.informatik.ultimate.plugins.blockencoding:
  - StatisticsResult: Initial Icfg
    2568 locations, 4347 edges
  - StatisticsResult: Encoded RCFG
    2542 locations, 4283 edges
 * Results from de.uni_freiburg.informatik.ultimate.core:
  - StatisticsResult: Toolchain Benchmarks
    Benchmark results are:
 * Boogie PL CUP Parser took 0.18 ms. Allocated memory is still 1.0 GB. Free memory is still 951.3 MB. There was no memory consumed. Max. memory is 15.3 GB.
 * Boogie Preprocessor took 92.54 ms. Allocated memory is still 1.0 GB. Free memory was 945.9 MB in the beginning and 935.2 MB in the end (delta: 10.7 MB). Peak memory consumption was 10.7 MB. Max. memory is 15.3 GB.
 * UtopiaSpecLang took 57.99 ms. Allocated memory is still 1.0 GB. Free memory was 935.2 MB in the beginning and 929.8 MB in the end (delta: 5.4 MB). Peak memory consumption was 5.4 MB. Max. memory is 15.3 GB.
 * Boogie Printer took 12.86 ms. Allocated memory is still 1.0 GB. Free memory is still 929.8 MB. There was no memory consumed. Max. memory is 15.3 GB.
 * RCFGBuilder took 665.77 ms. Allocated memory is still 1.0 GB. Free memory was 929.8 MB in the beginning and 849.3 MB in the end (delta: 80.5 MB). Peak memory consumption was 80.5 MB. Max. memory is 15.3 GB.
 * UtopiaLTL2Aut took 39.89 ms. Allocated memory is still 1.0 GB. Free memory was 849.3 MB in the beginning and 840.4 MB in the end (delta: 8.9 MB). Peak memory consumption was 8.9 MB. Max. memory is 15.3 GB.
 * BÃ¼chi Program Product took 957.27 ms. Allocated memory was 1.0 GB in the beginning and 1.1 GB in the end (delta: 64.5 MB). Free memory was 840.4 MB in the beginning and 789.7 MB in the end (delta: 50.7 MB). Peak memory consumption was 126.4 MB. Max. memory is 15.3 GB.
 * BlockEncodingV2 took 101.13 ms. Allocated memory is still 1.1 GB. Free memory was 789.7 MB in the beginning and 742.2 MB in the end (delta: 47.5 MB). Peak memory consumption was 47.5 MB. Max. memory is 15.3 GB.
 * BuchiAutomizer took 13659.18 ms. Allocated memory was 1.1 GB in the beginning and 2.1 GB in the end (delta: 967.3 MB). Free memory was 742.2 MB in the beginning and 989.3 MB in the end (delta: -247.1 MB). Peak memory consumption was 948.9 MB. Max. memory is 15.3 GB.
 * Results from de.uni_freiburg.informatik.ultimate.buchiprogramproduct:
  - StatisticsResult: Initial property automaton
    2 locations, 3 edges
  - StatisticsResult: Initial RCFG
    1092 locations, 1351 edges
  - StatisticsResult: BuchiProgram size
    2568 locations, 4347 edges
 * Results from de.uni_freiburg.informatik.ultimate.plugins.generator.traceabstraction:
  - StatisticsResult: Constructed decomposition of program
    Your program was decomposed into 11 terminating modules (11 trivial, 0 deterministic, 0 nondeterministic) and one nonterminating remainder module.11 modules have a trivial ranking function, the largest among these consists of 25 locations. The remainder module has 1670 locations.
  - StatisticsResult: Timing statistics
    BÃ¼chiAutomizer plugin needed 13.6s and 12 iterations.  TraceHistogramMax:2. Analysis of lassos took 4.6s. Construction of modules took 6.5s. BÃ¼chi inclusion checks took 1.8s. Highest rank in rank-based complementation 0. Minimization of det autom 11. Minimization of nondet autom 0. Automata minimization 0.2s AutomataMinimizationTime, 11 MinimizatonAttempts, 1678 StatesRemovedByMinimization, 10 NontrivialMinimizations. Non-live state removal took 0.1s Buchi closure took 0.0s. Biggest automaton had 2249 states and ocurred in iteration 8.	Nontrivial modules had stage [0, 0, 0, 0, 0].	InterpolantCoveringCapabilityFinite: 0/0	InterpolantCoveringCapabilityBuchi: 0/0	HoareTripleCheckerStatistics: 24653 SDtfs, 21052 SDslu, 64596 SDs, 0 SdLazy, 69942 SolverSat, 2998 SolverUnsat, 0 SolverUnknown, 0 SolverNotchecked, 6.5s Time	LassoAnalysisResults: nont1 unkn0 SFLI1 SFLT0 conc0 concLT0 SILN0 SILU10 SILI0 SILT0 lasso0 LassoPreprocessingBenchmarks: LassoTerminationAnalysisBenchmarks: not availableLassoTerminationAnalysisBenchmarks: LassoNonterminationAnalysisSatFixpoint: 0	LassoNonterminationAnalysisSatUnbounded: 0	LassoNonterminationAnalysisUnsat: 0	LassoNonterminationAnalysisUnknown: 0	LassoNonterminationAnalysisTime: 0.0s	
  - TransactionCounterexample: Violation of LTL property LTL
    Found an infinite, lasso-shaped execution that violates the LTL property LTL.
Stem:
address(5000000000000000000000001) = (new KECToken)({from : 5000000000000000000000007, _owner : 5000000000000000000000003});
[L243]               havoc __exception;
[L244]               revert := false;
[L245]   COND FALSE  !(__exception)
[L270]   CALL        call KECToken_KECToken__success(this, msgsender_MSG, msgvalue_MSG, _owner_s306);
[L1766]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1702]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1687]              assume msgsender_MSG != null;
[L1688]              Balance[this] := 0;
[L1702]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1703]  COND FALSE  !(revert)
[L1766]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1767]  COND FALSE  !(revert)
[L1770]  CALL        call KECToken_KECToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _owner_s306);
[L1733]              assume msgsender_MSG != null;
[L1734]              Balance[this] := 0;
[L1735]              _balances_KECToken[this] := zeroRefintArr();
[L1736]              sum__balances0[this] := 0;
[L1737]              _allowed_KECToken[this] := zeroRefRefintArr();
[L1738]              sum__allowed1[this] := 0;
[L1739]              _blacklist_KECToken[this] := zeroRefboolArr();
[L1740]              name_KECToken[this] := 1644945346;
[L1741]              symbol_KECToken[this] := 426684384;
[L1742]              decimals_KECToken[this] := 18;
[L1743]              _totalSupply_KECToken[this] := 5000000 * (1000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L1744]              owner_KECToken[this] := null;
[L1746]              owner_KECToken[this] := _owner_s306;
[L1747]              sum__balances0[this] := sum__balances0[this] - _balances_KECToken[this][_owner_s306];
[L1748]              _balances_KECToken[this][_owner_s306] := _totalSupply_KECToken[this];
[L1749]              sum__balances0[this] := sum__balances0[this] + _balances_KECToken[this][_owner_s306];
[L1770]  RET         call KECToken_KECToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _owner_s306);
[L1771]  COND FALSE  !(revert)
[L270]   RET         call KECToken_KECToken__success(this, msgsender_MSG, msgvalue_MSG, _owner_s306);
[L271]               assume !revert && gas >= 0;
[L3013]  RET         call KECToken_KECToken(this, msgsender_MSG, msgvalue_MSG, _owner_s306);
KECToken(5000000000000000000000001).addBlacklist~address.gas(3979002)({from : 5000000000000000000000003, account : 5000000000000000000000003});
[L302]               havoc __exception;
[L303]               revert := false;
[L304]   COND FALSE  !(__exception)
[L329]   CALL        call addBlacklist~address_KECToken__success(this, msgsender_MSG, msgvalue_MSG, account_s331);
[L1787]  CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2743]  COND FALSE  !(!(msgsender_MSG == owner_KECToken[this]))
[L1787]  RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L1788]  COND FALSE  !(revert)
[L1791]              _blacklist_KECToken[this][account_s331] := true;
[L329]   RET         call addBlacklist~address_KECToken__success(this, msgsender_MSG, msgvalue_MSG, account_s331);
[L330]               assume !revert && gas >= 0;
[L2976]  RET         call addBlacklist~address_KECToken(this, msgsender_MSG, msgvalue_MSG, account_s331);
KECToken(5000000000000000000000001).transfer~address~uint256.gas(3979003)({from : 5000000000000000000000003, to : 5000000000000000000000003, value : 0});
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == to_s456 && value_s456 <= _balances_KECToken[this][msgsender_MSG]) && value_s456 >= 0) && value_s456 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_KECToken[this][to_s456] >= 0) && _balances_KECToken[this][to_s456] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_KECToken[this][msgsender_MSG] >= 0) && _balances_KECToken[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_KECToken0 := true;
[L2]                 call_transfer_KECToken0 := false;
[L2]                 revert := revert_hold;
[L595]               havoc __exception;
[L596]               revert := false;
[L597]   COND TRUE   __exception
[L598]               __tmp__Balance := Balance;
[L599]               __tmp__DType := DType;
[L600]               __tmp__Alloc := Alloc;
[L601]               __tmp__balance_ADDR := balance_ADDR;
[L602]               __tmp__M_Ref_int := M_Ref_int;
[L603]               __tmp__sum__balances0 := sum__balances0;
[L604]               __tmp__alloc__allowed_KECToken_lvl0 := alloc__allowed_KECToken_lvl0;
[L605]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L606]               __tmp__sum__allowed1 := sum__allowed1;
[L607]               __tmp__M_Ref_bool := M_Ref_bool;
[L608]               __tmp__sum__blacklist2 := sum__blacklist2;
[L609]               __tmp__Length := Length;
[L610]               __tmp__now := now;
[L611]               __tmp___balances_KECToken := _balances_KECToken;
[L612]               __tmp___allowed_KECToken := _allowed_KECToken;
[L613]               __tmp___blacklist_KECToken := _blacklist_KECToken;
[L614]               __tmp__name_KECToken := name_KECToken;
[L615]               __tmp__symbol_KECToken := symbol_KECToken;
[L616]               __tmp__decimals_KECToken := decimals_KECToken;
[L617]               __tmp___totalSupply_KECToken := _totalSupply_KECToken;
[L618]               __tmp__owner_KECToken := owner_KECToken;
[L619]   CALL        call __ret_0_ := transfer~address~uint256_KECToken__fail(this, msgsender_MSG, msgvalue_MSG, to_s456, value_s456);
[L1853]  COND FALSE  !(!(value_s456 <= __tmp___balances_KECToken[this][msgsender_MSG]))
[L1857]              __var_4 := null;
[L1858]  COND FALSE  !(!(to_s456 != null))
[L1862]  COND TRUE   !(__tmp___blacklist_KECToken[this][msgsender_MSG] != true && __tmp___blacklist_KECToken[this][to_s456] != true)
[L1863]              revert := true;
[L619]   RET         call __ret_0_ := transfer~address~uint256_KECToken__fail(this, msgsender_MSG, msgvalue_MSG, to_s456, value_s456);
[L620]               assume revert || gas < 0;
[L2926]  RET         call __ret_0_transfer := transfer~address~uint256_KECToken(this, msgsender_MSG, msgvalue_MSG, to_s456, value_s456);

Loop:
KECToken(5000000000000000000000001).addBlacklist~address.gas(3979001)({from : 5000000000000000000000003, account : 5000000000000000000000003});
[L302]               havoc __exception;
[L303]               revert := false;
[L304]   COND FALSE  !(__exception)
[L329]   CALL        call addBlacklist~address_KECToken__success(this, msgsender_MSG, msgvalue_MSG, account_s331);
[L1787]  CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2743]  COND FALSE  !(!(msgsender_MSG == owner_KECToken[this]))
[L1787]  RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L1788]  COND FALSE  !(revert)
[L1791]              _blacklist_KECToken[this][account_s331] := true;
[L329]   RET         call addBlacklist~address_KECToken__success(this, msgsender_MSG, msgvalue_MSG, account_s331);
[L330]               assume !revert && gas >= 0;
[L2976]  RET         call addBlacklist~address_KECToken(this, msgsender_MSG, msgvalue_MSG, account_s331);

End of lasso representation.
RESULT: Ultimate could not prove your program: Toolchain returned no result.
Received shutdown request...
