This is Ultimate 0.1.24-f1553f5-m
[2020-11-25 17:39:23,392 INFO  L170        SettingsManager]: Resetting all preferences to default values...
[2020-11-25 17:39:23,393 INFO  L174        SettingsManager]: Resetting UltimateCore preferences to default values
[2020-11-25 17:39:23,403 INFO  L177        SettingsManager]: Ultimate Commandline Interface provides no preferences, ignoring...
[2020-11-25 17:39:23,403 INFO  L174        SettingsManager]: Resetting Boogie Preprocessor preferences to default values
[2020-11-25 17:39:23,404 INFO  L174        SettingsManager]: Resetting Boogie Procedure Inliner preferences to default values
[2020-11-25 17:39:23,405 INFO  L174        SettingsManager]: Resetting Abstract Interpretation preferences to default values
[2020-11-25 17:39:23,406 INFO  L174        SettingsManager]: Resetting LassoRanker preferences to default values
[2020-11-25 17:39:23,408 INFO  L174        SettingsManager]: Resetting Reaching Definitions preferences to default values
[2020-11-25 17:39:23,408 INFO  L174        SettingsManager]: Resetting SyntaxChecker preferences to default values
[2020-11-25 17:39:23,409 INFO  L177        SettingsManager]: BÃ¼chi Program Product provides no preferences, ignoring...
[2020-11-25 17:39:23,409 INFO  L174        SettingsManager]: Resetting LTL2Aut preferences to default values
[2020-11-25 17:39:23,410 INFO  L174        SettingsManager]: Resetting PEA to Boogie preferences to default values
[2020-11-25 17:39:23,411 INFO  L174        SettingsManager]: Resetting BlockEncodingV2 preferences to default values
[2020-11-25 17:39:23,411 INFO  L174        SettingsManager]: Resetting ChcToBoogie preferences to default values
[2020-11-25 17:39:23,412 INFO  L174        SettingsManager]: Resetting AutomataScriptInterpreter preferences to default values
[2020-11-25 17:39:23,412 INFO  L174        SettingsManager]: Resetting BuchiAutomizer preferences to default values
[2020-11-25 17:39:23,413 INFO  L174        SettingsManager]: Resetting CACSL2BoogieTranslator preferences to default values
[2020-11-25 17:39:23,415 INFO  L174        SettingsManager]: Resetting CodeCheck preferences to default values
[2020-11-25 17:39:23,416 INFO  L174        SettingsManager]: Resetting InvariantSynthesis preferences to default values
[2020-11-25 17:39:23,417 INFO  L174        SettingsManager]: Resetting RCFGBuilder preferences to default values
[2020-11-25 17:39:23,418 INFO  L174        SettingsManager]: Resetting TraceAbstraction preferences to default values
[2020-11-25 17:39:23,419 INFO  L177        SettingsManager]: TraceAbstractionConcurrent provides no preferences, ignoring...
[2020-11-25 17:39:23,419 INFO  L177        SettingsManager]: TraceAbstractionWithAFAs provides no preferences, ignoring...
[2020-11-25 17:39:23,419 INFO  L174        SettingsManager]: Resetting TreeAutomizer preferences to default values
[2020-11-25 17:39:23,420 INFO  L174        SettingsManager]: Resetting IcfgToChc preferences to default values
[2020-11-25 17:39:23,420 INFO  L174        SettingsManager]: Resetting IcfgTransformer preferences to default values
[2020-11-25 17:39:23,421 INFO  L177        SettingsManager]: ReqToTest provides no preferences, ignoring...
[2020-11-25 17:39:23,421 INFO  L174        SettingsManager]: Resetting UtopiaLTL2Aut preferences to default values
[2020-11-25 17:39:23,421 INFO  L174        SettingsManager]: Resetting UtopiaSpecLang preferences to default values
[2020-11-25 17:39:23,422 INFO  L174        SettingsManager]: Resetting Boogie Printer preferences to default values
[2020-11-25 17:39:23,422 INFO  L174        SettingsManager]: Resetting ChcSmtPrinter preferences to default values
[2020-11-25 17:39:23,422 INFO  L174        SettingsManager]: Resetting ReqPrinter preferences to default values
[2020-11-25 17:39:23,423 INFO  L174        SettingsManager]: Resetting Witness Printer preferences to default values
[2020-11-25 17:39:23,424 INFO  L177        SettingsManager]: Boogie PL CUP Parser provides no preferences, ignoring...
[2020-11-25 17:39:23,424 INFO  L174        SettingsManager]: Resetting CDTParser preferences to default values
[2020-11-25 17:39:23,424 INFO  L177        SettingsManager]: AutomataScriptParser provides no preferences, ignoring...
[2020-11-25 17:39:23,424 INFO  L177        SettingsManager]: ReqParser provides no preferences, ignoring...
[2020-11-25 17:39:23,424 INFO  L174        SettingsManager]: Resetting SmtParser preferences to default values
[2020-11-25 17:39:23,425 INFO  L174        SettingsManager]: Resetting Witness Parser preferences to default values
[2020-11-25 17:39:23,426 INFO  L181        SettingsManager]: Finished resetting all preferences to default values...
[2020-11-25 17:39:23,426 INFO  L98         SettingsManager]: Beginning loading settings from /mnt/data0/jon/SmartPulseTool/SmartPulse/settings.epf
[2020-11-25 17:39:23,433 INFO  L110        SettingsManager]: Loading preferences was successful
[2020-11-25 17:39:23,433 INFO  L112        SettingsManager]: Preferences different from defaults after loading the file:
[2020-11-25 17:39:23,434 INFO  L131        SettingsManager]: Preferences of LTL2Aut differ from their defaults:
[2020-11-25 17:39:23,434 INFO  L133        SettingsManager]:  * Read property from file=true
[2020-11-25 17:39:23,434 INFO  L133        SettingsManager]:  * Path to LTL*BA executable (LTL2BA, LTL3BA)=/mnt/data0/jon/SmartPulseTool/ltl2ba
[2020-11-25 17:39:23,434 INFO  L131        SettingsManager]: Preferences of BlockEncodingV2 differ from their defaults:
[2020-11-25 17:39:23,434 INFO  L133        SettingsManager]:  * Maximize final states=false
[2020-11-25 17:39:23,434 INFO  L133        SettingsManager]:  * Minimize states even if more edges are added than removed.=true
[2020-11-25 17:39:23,434 INFO  L133        SettingsManager]:  * Minimize states using LBE with the strategy=NONE
[2020-11-25 17:39:23,435 INFO  L131        SettingsManager]: Preferences of BuchiAutomizer differ from their defaults:
[2020-11-25 17:39:23,435 INFO  L133        SettingsManager]:  * Compute Interpolants along a Counterexample=Craig_TreeInterpolation
[2020-11-25 17:39:23,435 INFO  L133        SettingsManager]:  * Use old map elimination=false
[2020-11-25 17:39:23,435 INFO  L133        SettingsManager]:  * Try twofold refinement=false
[2020-11-25 17:39:23,435 INFO  L131        SettingsManager]: Preferences of CACSL2BoogieTranslator differ from their defaults:
[2020-11-25 17:39:23,435 INFO  L133        SettingsManager]:  * Check unreachability of error function in SV-COMP mode=false
[2020-11-25 17:39:23,435 INFO  L133        SettingsManager]:  * Overapproximate operations on floating types=true
[2020-11-25 17:39:23,435 INFO  L133        SettingsManager]:  * Check division by zero=IGNORE
[2020-11-25 17:39:23,435 INFO  L133        SettingsManager]:  * Pointer to allocated memory at dereference=ASSUME
[2020-11-25 17:39:23,435 INFO  L133        SettingsManager]:  * If two pointers are subtracted or compared they have the same base address=ASSUME
[2020-11-25 17:39:23,436 INFO  L133        SettingsManager]:  * Check array bounds for arrays that are off heap=ASSUME
[2020-11-25 17:39:23,436 INFO  L133        SettingsManager]:  * Check if freed pointer was valid=false
[2020-11-25 17:39:23,436 INFO  L133        SettingsManager]:  * Use constant arrays=true
[2020-11-25 17:39:23,436 INFO  L133        SettingsManager]:  * Pointer base address is valid at dereference=ASSUME
[2020-11-25 17:39:23,436 INFO  L131        SettingsManager]: Preferences of RCFGBuilder differ from their defaults:
[2020-11-25 17:39:23,436 INFO  L133        SettingsManager]:  * Size of a code block=SingleStatement
[2020-11-25 17:39:23,436 INFO  L133        SettingsManager]:  * SMT solver=Internal_SMTInterpol
[2020-11-25 17:39:23,455 INFO  L81    nceAwareModelManager]: Repository-Root is: /tmp
[2020-11-25 17:39:23,467 INFO  L259   ainManager$Toolchain]: [Toolchain 1]: Applicable parser(s) successfully (re)initialized
[2020-11-25 17:39:23,469 INFO  L215   ainManager$Toolchain]: [Toolchain 1]: Toolchain selected.
[2020-11-25 17:39:23,470 INFO  L271        PluginConnector]: Initializing Boogie PL CUP Parser...
[2020-11-25 17:39:23,470 INFO  L276        PluginConnector]: Boogie PL CUP Parser initialized
[2020-11-25 17:39:23,471 INFO  L430   ainManager$Toolchain]: [Toolchain 1]: Parsing single file: /mnt/data0/jon/SmartPulseTool/HBC_0xfb9553afa2b5c19c5f8e5b8ee175fc01abd1555f_transfer-self.bpl
[2020-11-25 17:39:23,471 INFO  L111           BoogieParser]: Parsing: '/mnt/data0/jon/SmartPulseTool/HBC_0xfb9553afa2b5c19c5f8e5b8ee175fc01abd1555f_transfer-self.bpl'
[2020-11-25 17:39:23,552 INFO  L297   ainManager$Toolchain]: ####################### [Toolchain 1] #######################
[2020-11-25 17:39:23,553 INFO  L131        ToolchainWalker]: Walking toolchain with 8 elements.
[2020-11-25 17:39:23,553 INFO  L113        PluginConnector]: ------------------------Boogie Preprocessor----------------------------
[2020-11-25 17:39:23,553 INFO  L271        PluginConnector]: Initializing Boogie Preprocessor...
[2020-11-25 17:39:23,553 INFO  L276        PluginConnector]: Boogie Preprocessor initialized
[2020-11-25 17:39:23,570 INFO  L185        PluginConnector]: Executing the observer EnsureBoogieModelObserver from plugin Boogie Preprocessor for "HBC_0xfb9553afa2b5c19c5f8e5b8ee175fc01abd1555f_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 05:39:23" (1/1) ...
[2020-11-25 17:39:23,571 INFO  L185        PluginConnector]: Executing the observer TypeChecker from plugin Boogie Preprocessor for "HBC_0xfb9553afa2b5c19c5f8e5b8ee175fc01abd1555f_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 05:39:23" (1/1) ...
[2020-11-25 17:39:23,604 INFO  L185        PluginConnector]: Executing the observer ConstExpander from plugin Boogie Preprocessor for "HBC_0xfb9553afa2b5c19c5f8e5b8ee175fc01abd1555f_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 05:39:23" (1/1) ...
[2020-11-25 17:39:23,605 INFO  L185        PluginConnector]: Executing the observer StructExpander from plugin Boogie Preprocessor for "HBC_0xfb9553afa2b5c19c5f8e5b8ee175fc01abd1555f_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 05:39:23" (1/1) ...
[2020-11-25 17:39:23,624 INFO  L185        PluginConnector]: Executing the observer UnstructureCode from plugin Boogie Preprocessor for "HBC_0xfb9553afa2b5c19c5f8e5b8ee175fc01abd1555f_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 05:39:23" (1/1) ...
[2020-11-25 17:39:23,633 INFO  L185        PluginConnector]: Executing the observer FunctionInliner from plugin Boogie Preprocessor for "HBC_0xfb9553afa2b5c19c5f8e5b8ee175fc01abd1555f_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 05:39:23" (1/1) ...
[2020-11-25 17:39:23,640 INFO  L185        PluginConnector]: Executing the observer BoogieSymbolTableConstructor from plugin Boogie Preprocessor for "HBC_0xfb9553afa2b5c19c5f8e5b8ee175fc01abd1555f_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 05:39:23" (1/1) ...
[2020-11-25 17:39:23,649 INFO  L132        PluginConnector]: ------------------------ END Boogie Preprocessor----------------------------
[2020-11-25 17:39:23,650 INFO  L113        PluginConnector]: ------------------------UtopiaSpecLang----------------------------
[2020-11-25 17:39:23,650 INFO  L271        PluginConnector]: Initializing UtopiaSpecLang...
[2020-11-25 17:39:23,652 INFO  L276        PluginConnector]: UtopiaSpecLang initialized
[2020-11-25 17:39:23,655 INFO  L185        PluginConnector]: Executing the observer UtopiaSpecLangObserver from plugin UtopiaSpecLang for "HBC_0xfb9553afa2b5c19c5f8e5b8ee175fc01abd1555f_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 05:39:23" (1/1) ...
[2020-11-25 17:39:23,675 INFO  L1012  opiaSpecLangObserver]: Parsing LTLPlus Formula to AstNode: [](started(HBC.transfer(to, value), msg.sender == to && value <= balances_HBC[this][msg.sender] && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_HBC[this][to] >= 0 && balances_HBC[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_HBC[this][msg.sender] >= 0 &&  balances_HBC[this][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(finished(HBC.transfer(to, value), return == true && totalTokenSupply_HBC[this] == old(totalTokenSupply_HBC[this]) && balances_HBC[this] == old(balances_HBC[this]) && allowed_HBC[this] == old(allowed_HBC[this]) && stopped_HBC[this] == old(stopped_HBC[this]) && owner_HBC[this] == old(owner_HBC[this]) && totalBurned_HBC[this] == old(totalBurned_HBC[this]) && forbiddenAddresses_HBC[this] == old(forbiddenAddresses_HBC[this]))))
[2020-11-25 17:39:23,679 INFO  L1016  opiaSpecLangObserver]: Successfully lexed: [](started(HBC.transfer(to, value), msg.sender == to && value <= balances_HBC[this][msg.sender] && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_HBC[this][to] >= 0 && balances_HBC[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_HBC[this][msg.sender] >= 0 &&  balances_HBC[this][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(finished(HBC.transfer(to, value), return == true && totalTokenSupply_HBC[this] == old(totalTokenSupply_HBC[this]) && balances_HBC[this] == old(balances_HBC[this]) && allowed_HBC[this] == old(allowed_HBC[this]) && stopped_HBC[this] == old(stopped_HBC[this]) && owner_HBC[this] == old(owner_HBC[this]) && totalBurned_HBC[this] == old(totalBurned_HBC[this]) && forbiddenAddresses_HBC[this] == old(forbiddenAddresses_HBC[this]))))
[2020-11-25 17:39:23,685 INFO  L1018  opiaSpecLangObserver]: Successfully parsed: [](started(HBC.transfer(to, value), msg.sender == to && value <= balances_HBC[this][msg.sender] && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_HBC[this][to] >= 0 && balances_HBC[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_HBC[this][msg.sender] >= 0 &&  balances_HBC[this][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(finished(HBC.transfer(to, value), return == true && totalTokenSupply_HBC[this] == old(totalTokenSupply_HBC[this]) && balances_HBC[this] == old(balances_HBC[this]) && allowed_HBC[this] == old(allowed_HBC[this]) && stopped_HBC[this] == old(stopped_HBC[this]) && owner_HBC[this] == old(owner_HBC[this]) && totalBurned_HBC[this] == old(totalBurned_HBC[this]) && forbiddenAddresses_HBC[this] == old(forbiddenAddresses_HBC[this]))))
[2020-11-25 17:39:23,692 INFO  L636   opiaSpecLangObserver]: Parsed ( ( ( ( ( ( ( msg.sender==_address_s750 && _tokens_s750<=balances_HBC[this][msg.sender] ) && _tokens_s750>=0 ) && _tokens_s750<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) && balances_HBC[this][_address_s750]>=0 ) && balances_HBC[this][_address_s750]<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) && balances_HBC[this][msg.sender]>=0 ) && balances_HBC[this][msg.sender]<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) to BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[COMPEQ,IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transfer~address~uint256_HBC>],IdentifierExpression[_address_s750,<IMPLEMENTATION_INPARAM,transfer~address~uint256_HBC>]],BinaryExpression[COMPLEQ,IdentifierExpression[_tokens_s750,<IMPLEMENTATION_INPARAM,transfer~address~uint256_HBC>],ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balances_HBC,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_HBC>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transfer~address~uint256_HBC>]]]]],BinaryExpression[COMPGEQ,IdentifierExpression[_tokens_s750,<IMPLEMENTATION_INPARAM,transfer~address~uint256_HBC>],IntegerLiteral[0]]],BinaryExpression[COMPLT,IdentifierExpression[_tokens_s750,<IMPLEMENTATION_INPARAM,transfer~address~uint256_HBC>],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]],BinaryExpression[COMPGEQ,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balances_HBC,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_HBC>]]],[IdentifierExpression[_address_s750,<IMPLEMENTATION_INPARAM,transfer~address~uint256_HBC>]]],IntegerLiteral[0]]],BinaryExpression[COMPLT,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balances_HBC,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_HBC>]]],[IdentifierExpression[_address_s750,<IMPLEMENTATION_INPARAM,transfer~address~uint256_HBC>]]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]],BinaryExpression[COMPGEQ,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balances_HBC,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_HBC>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transfer~address~uint256_HBC>]]],IntegerLiteral[0]]],BinaryExpression[COMPLT,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balances_HBC,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_HBC>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transfer~address~uint256_HBC>]]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]]
[2020-11-25 17:39:23,694 INFO  L636   opiaSpecLangObserver]: Parsed ( ( ( ( ( ( ( __ret_0_==true && totalTokenSupply_HBC[this]==( old(totalTokenSupply_HBC[this]) ) ) && balances_HBC[this]==( old(balances_HBC[this]) ) ) && allowed_HBC[this]==( old(allowed_HBC[this]) ) ) && stopped_HBC[this]==( old(stopped_HBC[this]) ) ) && owner_HBC[this]==( old(owner_HBC[this]) ) ) && totalBurned_HBC[this]==( old(totalBurned_HBC[this]) ) ) && forbiddenAddresses_HBC[this]==( old(forbiddenAddresses_HBC[this]) ) ) to BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[COMPEQ,IdentifierExpression[__ret_0_,<IMPLEMENTATION_OUTPARAM,transfer~address~uint256_HBC>],BooleanLiteral[true]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[totalTokenSupply_HBC,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_HBC>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[totalTokenSupply_HBC,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_HBC>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[balances_HBC,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_HBC>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[balances_HBC,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_HBC>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[allowed_HBC,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_HBC>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[allowed_HBC,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_HBC>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[stopped_HBC,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_HBC>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[stopped_HBC,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_HBC>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[owner_HBC,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_HBC>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[owner_HBC,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_HBC>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[totalBurned_HBC,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_HBC>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[totalBurned_HBC,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_HBC>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[forbiddenAddresses_HBC,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_HBC>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[forbiddenAddresses_HBC,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_HBC>]]]]]]
[2020-11-25 17:39:23,698 INFO  L1005  opiaSpecLangObserver]: Compiling: [](started(HBC.transfer(to, value), msg.sender == to && value <= balances_HBC[this][msg.sender] && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_HBC[this][to] >= 0 && balances_HBC[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_HBC[this][msg.sender] >= 0 &&  balances_HBC[this][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(finished(HBC.transfer(to, value), return == true && totalTokenSupply_HBC[this] == old(totalTokenSupply_HBC[this]) && balances_HBC[this] == old(balances_HBC[this]) && allowed_HBC[this] == old(allowed_HBC[this]) && stopped_HBC[this] == old(stopped_HBC[this]) && owner_HBC[this] == old(owner_HBC[this]) && totalBurned_HBC[this] == old(totalBurned_HBC[this]) && forbiddenAddresses_HBC[this] == old(forbiddenAddresses_HBC[this]))))
[2020-11-25 17:39:23,698 INFO  L1007  opiaSpecLangObserver]: Compiled to ( []( AP(call_transfer_HBC0) ==> ( <>AP(success_transfer_HBC0) ) ) )
Executed UtopiaSpecLang
[2020-11-25 17:39:23,705 INFO  L202        PluginConnector]: Adding new model Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 05:39:23 PropertyContainer
[2020-11-25 17:39:23,705 INFO  L132        PluginConnector]: ------------------------ END UtopiaSpecLang----------------------------
[2020-11-25 17:39:23,706 INFO  L113        PluginConnector]: ------------------------Boogie Printer----------------------------
[2020-11-25 17:39:23,706 INFO  L271        PluginConnector]: Initializing Boogie Printer...
[2020-11-25 17:39:23,706 INFO  L276        PluginConnector]: Boogie Printer initialized
[2020-11-25 17:39:23,707 INFO  L185        PluginConnector]: Executing the observer BoogiePrinterObserver from plugin Boogie Printer for "HBC_0xfb9553afa2b5c19c5f8e5b8ee175fc01abd1555f_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 05:39:23" (1/2) ...
[2020-11-25 17:39:23,707 INFO  L116   oogiePrinterObserver]: File already exists and will be overwritten: /tmp/boogiePrinter.bpl
[2020-11-25 17:39:23,707 INFO  L120   oogiePrinterObserver]: Writing to file /tmp/boogiePrinter.bpl
[2020-11-25 17:39:23,726 INFO  L185        PluginConnector]: Executing the observer BoogiePrinterObserver from plugin Boogie Printer for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 05:39:23" (2/2) ...
[2020-11-25 17:39:23,726 INFO  L132        PluginConnector]: ------------------------ END Boogie Printer----------------------------
[2020-11-25 17:39:23,727 INFO  L113        PluginConnector]: ------------------------RCFGBuilder----------------------------
[2020-11-25 17:39:23,727 INFO  L271        PluginConnector]: Initializing RCFGBuilder...
[2020-11-25 17:39:23,727 INFO  L276        PluginConnector]: RCFGBuilder initialized
[2020-11-25 17:39:23,728 INFO  L185        PluginConnector]: Executing the observer RCFGBuilderObserver from plugin RCFGBuilder for "HBC_0xfb9553afa2b5c19c5f8e5b8ee175fc01abd1555f_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 05:39:23" (1/2) ...
[2020-11-25 17:39:23,779 INFO  L130     BoogieDeclarations]: Found specification of procedure FreshRefGenerator__success
[2020-11-25 17:39:23,779 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath_NoBaseCtor__success
[2020-11-25 17:39:23,779 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath
[2020-11-25 17:39:23,779 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath
[2020-11-25 17:39:23,779 INFO  L130     BoogieDeclarations]: Found specification of procedure add~uint256~uint256_SafeMath__success
[2020-11-25 17:39:23,779 INFO  L130     BoogieDeclarations]: Found specification of procedure sub~uint256~uint256~string_SafeMath__success
[2020-11-25 17:39:23,779 INFO  L130     BoogieDeclarations]: Found specification of procedure mul~uint256~uint256_SafeMath__success
[2020-11-25 17:39:23,779 INFO  L130     BoogieDeclarations]: Found specification of procedure div~uint256~uint256~string_SafeMath__success
[2020-11-25 17:39:23,779 INFO  L130     BoogieDeclarations]: Found specification of procedure mod~uint256~uint256~string_SafeMath__success
[2020-11-25 17:39:23,780 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Interface_ERC20Interface_NoBaseCtor__success
[2020-11-25 17:39:23,780 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Interface_ERC20Interface
[2020-11-25 17:39:23,780 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Interface_ERC20Interface
[2020-11-25 17:39:23,780 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_ERC20Interface
[2020-11-25 17:39:23,780 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_ERC20Interface
[2020-11-25 17:39:23,780 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_ERC20Interface
[2020-11-25 17:39:23,780 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_ERC20Interface
[2020-11-25 17:39:23,780 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_ERC20Interface
[2020-11-25 17:39:23,780 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_ERC20Interface
[2020-11-25 17:39:23,781 INFO  L130     BoogieDeclarations]: Found specification of procedure HBC_HBC_NoBaseCtor__success
[2020-11-25 17:39:23,781 INFO  L130     BoogieDeclarations]: Found specification of procedure HBC_HBC
[2020-11-25 17:39:23,781 INFO  L138     BoogieDeclarations]: Found implementation of procedure HBC_HBC
[2020-11-25 17:39:23,781 INFO  L130     BoogieDeclarations]: Found specification of procedure pauseTransfer_HBC
[2020-11-25 17:39:23,781 INFO  L138     BoogieDeclarations]: Found implementation of procedure pauseTransfer_HBC
[2020-11-25 17:39:23,781 INFO  L130     BoogieDeclarations]: Found specification of procedure resumeTransfer_HBC
[2020-11-25 17:39:23,781 INFO  L138     BoogieDeclarations]: Found implementation of procedure resumeTransfer_HBC
[2020-11-25 17:39:23,781 INFO  L130     BoogieDeclarations]: Found specification of procedure addToForbiddenAddresses~address_HBC
[2020-11-25 17:39:23,781 INFO  L138     BoogieDeclarations]: Found implementation of procedure addToForbiddenAddresses~address_HBC
[2020-11-25 17:39:23,781 INFO  L130     BoogieDeclarations]: Found specification of procedure removeFromForbiddenAddresses~address_HBC
[2020-11-25 17:39:23,781 INFO  L138     BoogieDeclarations]: Found implementation of procedure removeFromForbiddenAddresses~address_HBC
[2020-11-25 17:39:23,781 INFO  L130     BoogieDeclarations]: Found specification of procedure burn~uint256_HBC
[2020-11-25 17:39:23,782 INFO  L138     BoogieDeclarations]: Found implementation of procedure burn~uint256_HBC
[2020-11-25 17:39:23,782 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_HBC
[2020-11-25 17:39:23,782 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_HBC
[2020-11-25 17:39:23,782 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_HBC
[2020-11-25 17:39:23,782 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_HBC
[2020-11-25 17:39:23,782 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_HBC
[2020-11-25 17:39:23,782 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_HBC
[2020-11-25 17:39:23,782 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_HBC
[2020-11-25 17:39:23,782 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_HBC
[2020-11-25 17:39:23,782 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_HBC
[2020-11-25 17:39:23,782 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_HBC
[2020-11-25 17:39:23,783 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_HBC
[2020-11-25 17:39:23,783 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_HBC
[2020-11-25 17:39:23,783 INFO  L130     BoogieDeclarations]: Found specification of procedure transferOwnership~address_HBC
[2020-11-25 17:39:23,783 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferOwnership~address_HBC
[2020-11-25 17:39:23,783 INFO  L130     BoogieDeclarations]: Found specification of procedure renounceOwnership_HBC
[2020-11-25 17:39:23,783 INFO  L138     BoogieDeclarations]: Found implementation of procedure renounceOwnership_HBC
[2020-11-25 17:39:23,783 INFO  L130     BoogieDeclarations]: Found specification of procedure increaseApproval~address~uint256_HBC
[2020-11-25 17:39:23,783 INFO  L138     BoogieDeclarations]: Found implementation of procedure increaseApproval~address~uint256_HBC
[2020-11-25 17:39:23,783 INFO  L130     BoogieDeclarations]: Found specification of procedure decreaseApproval~address~uint256_HBC
[2020-11-25 17:39:23,783 INFO  L138     BoogieDeclarations]: Found implementation of procedure decreaseApproval~address~uint256_HBC
[2020-11-25 17:39:23,783 INFO  L130     BoogieDeclarations]: Found specification of procedure TOKEN_DECIMALS_HBC
[2020-11-25 17:39:23,784 INFO  L138     BoogieDeclarations]: Found implementation of procedure TOKEN_DECIMALS_HBC
[2020-11-25 17:39:23,784 INFO  L130     BoogieDeclarations]: Found specification of procedure name_HBC
[2020-11-25 17:39:23,784 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_HBC
[2020-11-25 17:39:23,784 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_HBC
[2020-11-25 17:39:23,784 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_HBC
[2020-11-25 17:39:23,784 INFO  L130     BoogieDeclarations]: Found specification of procedure totalTokenSupply_HBC
[2020-11-25 17:39:23,784 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalTokenSupply_HBC
[2020-11-25 17:39:23,784 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_HBC
[2020-11-25 17:39:23,784 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_HBC
[2020-11-25 17:39:23,784 INFO  L130     BoogieDeclarations]: Found specification of procedure stopped_HBC
[2020-11-25 17:39:23,785 INFO  L138     BoogieDeclarations]: Found implementation of procedure stopped_HBC
[2020-11-25 17:39:23,785 INFO  L130     BoogieDeclarations]: Found specification of procedure owner_HBC
[2020-11-25 17:39:23,785 INFO  L138     BoogieDeclarations]: Found implementation of procedure owner_HBC
[2020-11-25 17:39:23,785 INFO  L130     BoogieDeclarations]: Found specification of procedure totalBurned_HBC
[2020-11-25 17:39:23,785 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalBurned_HBC
[2020-11-25 17:39:23,785 INFO  L130     BoogieDeclarations]: Found specification of procedure balances~address_HBC
[2020-11-25 17:39:23,785 INFO  L138     BoogieDeclarations]: Found implementation of procedure balances~address_HBC
[2020-11-25 17:39:23,785 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackDispatch__success
[2020-11-25 17:39:23,785 INFO  L130     BoogieDeclarations]: Found specification of procedure Fallback_UnknownType__success
[2020-11-25 17:39:23,785 INFO  L130     BoogieDeclarations]: Found specification of procedure send__success
[2020-11-25 17:39:23,785 INFO  L130     BoogieDeclarations]: Found specification of procedure onlyOwner_pre__success
[2020-11-25 17:39:23,786 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_SafeMath
[2020-11-25 17:39:23,786 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_SafeMath
[2020-11-25 17:39:23,786 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_ERC20Interface
[2020-11-25 17:39:23,786 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_ERC20Interface
[2020-11-25 17:39:23,786 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_HBC
[2020-11-25 17:39:23,786 INFO  L130     BoogieDeclarations]: Found specification of procedure main
[2020-11-25 17:39:23,786 INFO  L130     BoogieDeclarations]: Found specification of procedure FreshRefGenerator__fail
[2020-11-25 17:39:23,786 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath_NoBaseCtor__fail
[2020-11-25 17:39:23,787 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath__success
[2020-11-25 17:39:23,787 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath__fail
[2020-11-25 17:39:23,787 INFO  L130     BoogieDeclarations]: Found specification of procedure add~uint256~uint256_SafeMath__fail
[2020-11-25 17:39:23,787 INFO  L130     BoogieDeclarations]: Found specification of procedure sub~uint256~uint256~string_SafeMath__fail
[2020-11-25 17:39:23,787 INFO  L130     BoogieDeclarations]: Found specification of procedure mul~uint256~uint256_SafeMath__fail
[2020-11-25 17:39:23,787 INFO  L130     BoogieDeclarations]: Found specification of procedure div~uint256~uint256~string_SafeMath__fail
[2020-11-25 17:39:23,787 INFO  L130     BoogieDeclarations]: Found specification of procedure mod~uint256~uint256~string_SafeMath__fail
[2020-11-25 17:39:23,787 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Interface_ERC20Interface_NoBaseCtor__fail
[2020-11-25 17:39:23,787 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Interface_ERC20Interface__success
[2020-11-25 17:39:23,787 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Interface_ERC20Interface__fail
[2020-11-25 17:39:23,788 INFO  L130     BoogieDeclarations]: Found specification of procedure HBC_HBC_NoBaseCtor__fail
[2020-11-25 17:39:23,788 INFO  L130     BoogieDeclarations]: Found specification of procedure HBC_HBC__success
[2020-11-25 17:39:23,788 INFO  L130     BoogieDeclarations]: Found specification of procedure HBC_HBC__fail
[2020-11-25 17:39:23,788 INFO  L130     BoogieDeclarations]: Found specification of procedure pauseTransfer_HBC__success
[2020-11-25 17:39:23,788 INFO  L130     BoogieDeclarations]: Found specification of procedure pauseTransfer_HBC__fail
[2020-11-25 17:39:23,788 INFO  L130     BoogieDeclarations]: Found specification of procedure resumeTransfer_HBC__success
[2020-11-25 17:39:23,788 INFO  L130     BoogieDeclarations]: Found specification of procedure resumeTransfer_HBC__fail
[2020-11-25 17:39:23,788 INFO  L130     BoogieDeclarations]: Found specification of procedure addToForbiddenAddresses~address_HBC__success
[2020-11-25 17:39:23,788 INFO  L130     BoogieDeclarations]: Found specification of procedure addToForbiddenAddresses~address_HBC__fail
[2020-11-25 17:39:23,788 INFO  L130     BoogieDeclarations]: Found specification of procedure removeFromForbiddenAddresses~address_HBC__success
[2020-11-25 17:39:23,789 INFO  L130     BoogieDeclarations]: Found specification of procedure removeFromForbiddenAddresses~address_HBC__fail
[2020-11-25 17:39:23,789 INFO  L130     BoogieDeclarations]: Found specification of procedure burn~uint256_HBC__success
[2020-11-25 17:39:23,789 INFO  L130     BoogieDeclarations]: Found specification of procedure burn~uint256_HBC__fail
[2020-11-25 17:39:23,789 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_HBC__success
[2020-11-25 17:39:23,789 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_HBC__fail
[2020-11-25 17:39:23,789 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_HBC__success
[2020-11-25 17:39:23,789 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_HBC__fail
[2020-11-25 17:39:23,789 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_HBC__success
[2020-11-25 17:39:23,789 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_HBC__fail
[2020-11-25 17:39:23,790 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_HBC__success
[2020-11-25 17:39:23,790 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_HBC__fail
[2020-11-25 17:39:23,790 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_HBC__success
[2020-11-25 17:39:23,790 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_HBC__fail
[2020-11-25 17:39:23,790 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_HBC__success
[2020-11-25 17:39:23,790 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_HBC__fail
[2020-11-25 17:39:23,790 INFO  L130     BoogieDeclarations]: Found specification of procedure transferOwnership~address_HBC__success
[2020-11-25 17:39:23,790 INFO  L130     BoogieDeclarations]: Found specification of procedure transferOwnership~address_HBC__fail
[2020-11-25 17:39:23,790 INFO  L130     BoogieDeclarations]: Found specification of procedure renounceOwnership_HBC__success
[2020-11-25 17:39:23,790 INFO  L130     BoogieDeclarations]: Found specification of procedure renounceOwnership_HBC__fail
[2020-11-25 17:39:23,791 INFO  L130     BoogieDeclarations]: Found specification of procedure increaseApproval~address~uint256_HBC__success
[2020-11-25 17:39:23,791 INFO  L130     BoogieDeclarations]: Found specification of procedure increaseApproval~address~uint256_HBC__fail
[2020-11-25 17:39:23,791 INFO  L130     BoogieDeclarations]: Found specification of procedure decreaseApproval~address~uint256_HBC__success
[2020-11-25 17:39:23,791 INFO  L130     BoogieDeclarations]: Found specification of procedure decreaseApproval~address~uint256_HBC__fail
[2020-11-25 17:39:23,791 INFO  L130     BoogieDeclarations]: Found specification of procedure TOKEN_DECIMALS_HBC__success
[2020-11-25 17:39:23,791 INFO  L130     BoogieDeclarations]: Found specification of procedure TOKEN_DECIMALS_HBC__fail
[2020-11-25 17:39:23,791 INFO  L130     BoogieDeclarations]: Found specification of procedure name_HBC__success
[2020-11-25 17:39:23,791 INFO  L130     BoogieDeclarations]: Found specification of procedure name_HBC__fail
[2020-11-25 17:39:23,791 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_HBC__success
[2020-11-25 17:39:23,791 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_HBC__fail
[2020-11-25 17:39:23,792 INFO  L130     BoogieDeclarations]: Found specification of procedure totalTokenSupply_HBC__success
[2020-11-25 17:39:23,792 INFO  L130     BoogieDeclarations]: Found specification of procedure totalTokenSupply_HBC__fail
[2020-11-25 17:39:23,792 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_HBC__success
[2020-11-25 17:39:23,792 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_HBC__fail
[2020-11-25 17:39:23,792 INFO  L130     BoogieDeclarations]: Found specification of procedure stopped_HBC__success
[2020-11-25 17:39:23,792 INFO  L130     BoogieDeclarations]: Found specification of procedure stopped_HBC__fail
[2020-11-25 17:39:23,792 INFO  L130     BoogieDeclarations]: Found specification of procedure owner_HBC__success
[2020-11-25 17:39:23,792 INFO  L130     BoogieDeclarations]: Found specification of procedure owner_HBC__fail
[2020-11-25 17:39:23,792 INFO  L130     BoogieDeclarations]: Found specification of procedure totalBurned_HBC__success
[2020-11-25 17:39:23,793 INFO  L130     BoogieDeclarations]: Found specification of procedure totalBurned_HBC__fail
[2020-11-25 17:39:23,793 INFO  L130     BoogieDeclarations]: Found specification of procedure balances~address_HBC__success
[2020-11-25 17:39:23,793 INFO  L130     BoogieDeclarations]: Found specification of procedure balances~address_HBC__fail
[2020-11-25 17:39:23,793 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackDispatch__fail
[2020-11-25 17:39:23,793 INFO  L130     BoogieDeclarations]: Found specification of procedure Fallback_UnknownType__fail
[2020-11-25 17:39:23,793 INFO  L130     BoogieDeclarations]: Found specification of procedure send__fail
[2020-11-25 17:39:23,793 INFO  L130     BoogieDeclarations]: Found specification of procedure onlyOwner_pre__fail
[2020-11-25 17:39:23,793 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreshRefGenerator__fail
[2020-11-25 17:39:23,793 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreshRefGenerator__success
[2020-11-25 17:39:23,794 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath_NoBaseCtor__fail
[2020-11-25 17:39:23,794 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath_NoBaseCtor__success
[2020-11-25 17:39:23,794 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath__fail
[2020-11-25 17:39:23,794 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath__success
[2020-11-25 17:39:23,794 INFO  L138     BoogieDeclarations]: Found implementation of procedure add~uint256~uint256_SafeMath__fail
[2020-11-25 17:39:23,794 INFO  L138     BoogieDeclarations]: Found implementation of procedure add~uint256~uint256_SafeMath__success
[2020-11-25 17:39:23,794 INFO  L138     BoogieDeclarations]: Found implementation of procedure sub~uint256~uint256~string_SafeMath__fail
[2020-11-25 17:39:23,794 INFO  L138     BoogieDeclarations]: Found implementation of procedure sub~uint256~uint256~string_SafeMath__success
[2020-11-25 17:39:23,795 INFO  L138     BoogieDeclarations]: Found implementation of procedure mul~uint256~uint256_SafeMath__fail
[2020-11-25 17:39:23,795 INFO  L138     BoogieDeclarations]: Found implementation of procedure mul~uint256~uint256_SafeMath__success
[2020-11-25 17:39:23,795 INFO  L138     BoogieDeclarations]: Found implementation of procedure div~uint256~uint256~string_SafeMath__fail
[2020-11-25 17:39:23,795 INFO  L138     BoogieDeclarations]: Found implementation of procedure div~uint256~uint256~string_SafeMath__success
[2020-11-25 17:39:23,795 INFO  L138     BoogieDeclarations]: Found implementation of procedure mod~uint256~uint256~string_SafeMath__fail
[2020-11-25 17:39:23,795 INFO  L138     BoogieDeclarations]: Found implementation of procedure mod~uint256~uint256~string_SafeMath__success
[2020-11-25 17:39:23,795 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Interface_ERC20Interface_NoBaseCtor__fail
[2020-11-25 17:39:23,795 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Interface_ERC20Interface_NoBaseCtor__success
[2020-11-25 17:39:23,795 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Interface_ERC20Interface__fail
[2020-11-25 17:39:23,795 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Interface_ERC20Interface__success
[2020-11-25 17:39:23,795 INFO  L138     BoogieDeclarations]: Found implementation of procedure HBC_HBC_NoBaseCtor__fail
[2020-11-25 17:39:23,796 INFO  L138     BoogieDeclarations]: Found implementation of procedure HBC_HBC_NoBaseCtor__success
[2020-11-25 17:39:23,796 INFO  L138     BoogieDeclarations]: Found implementation of procedure HBC_HBC__fail
[2020-11-25 17:39:23,796 INFO  L138     BoogieDeclarations]: Found implementation of procedure HBC_HBC__success
[2020-11-25 17:39:23,796 INFO  L138     BoogieDeclarations]: Found implementation of procedure pauseTransfer_HBC__fail
[2020-11-25 17:39:23,796 INFO  L138     BoogieDeclarations]: Found implementation of procedure pauseTransfer_HBC__success
[2020-11-25 17:39:23,796 INFO  L138     BoogieDeclarations]: Found implementation of procedure resumeTransfer_HBC__fail
[2020-11-25 17:39:23,796 INFO  L138     BoogieDeclarations]: Found implementation of procedure resumeTransfer_HBC__success
[2020-11-25 17:39:23,796 INFO  L138     BoogieDeclarations]: Found implementation of procedure addToForbiddenAddresses~address_HBC__fail
[2020-11-25 17:39:23,796 INFO  L138     BoogieDeclarations]: Found implementation of procedure addToForbiddenAddresses~address_HBC__success
[2020-11-25 17:39:23,796 INFO  L138     BoogieDeclarations]: Found implementation of procedure removeFromForbiddenAddresses~address_HBC__fail
[2020-11-25 17:39:23,797 INFO  L138     BoogieDeclarations]: Found implementation of procedure removeFromForbiddenAddresses~address_HBC__success
[2020-11-25 17:39:23,797 INFO  L138     BoogieDeclarations]: Found implementation of procedure burn~uint256_HBC__fail
[2020-11-25 17:39:23,797 INFO  L138     BoogieDeclarations]: Found implementation of procedure burn~uint256_HBC__success
[2020-11-25 17:39:23,797 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_HBC__fail
[2020-11-25 17:39:23,797 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_HBC__success
[2020-11-25 17:39:23,797 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_HBC__fail
[2020-11-25 17:39:23,797 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_HBC__success
[2020-11-25 17:39:23,797 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_HBC__fail
[2020-11-25 17:39:23,797 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_HBC__success
[2020-11-25 17:39:23,797 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_HBC__fail
[2020-11-25 17:39:23,797 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_HBC__success
[2020-11-25 17:39:23,797 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_HBC__fail
[2020-11-25 17:39:23,798 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_HBC__success
[2020-11-25 17:39:23,798 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_HBC__fail
[2020-11-25 17:39:23,798 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_HBC__success
[2020-11-25 17:39:23,798 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferOwnership~address_HBC__fail
[2020-11-25 17:39:23,798 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferOwnership~address_HBC__success
[2020-11-25 17:39:23,798 INFO  L138     BoogieDeclarations]: Found implementation of procedure renounceOwnership_HBC__fail
[2020-11-25 17:39:23,798 INFO  L138     BoogieDeclarations]: Found implementation of procedure renounceOwnership_HBC__success
[2020-11-25 17:39:23,798 INFO  L138     BoogieDeclarations]: Found implementation of procedure increaseApproval~address~uint256_HBC__fail
[2020-11-25 17:39:23,798 INFO  L138     BoogieDeclarations]: Found implementation of procedure increaseApproval~address~uint256_HBC__success
[2020-11-25 17:39:23,798 INFO  L138     BoogieDeclarations]: Found implementation of procedure decreaseApproval~address~uint256_HBC__fail
[2020-11-25 17:39:23,798 INFO  L138     BoogieDeclarations]: Found implementation of procedure decreaseApproval~address~uint256_HBC__success
[2020-11-25 17:39:23,798 INFO  L138     BoogieDeclarations]: Found implementation of procedure TOKEN_DECIMALS_HBC__fail
[2020-11-25 17:39:23,799 INFO  L138     BoogieDeclarations]: Found implementation of procedure TOKEN_DECIMALS_HBC__success
[2020-11-25 17:39:23,799 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_HBC__fail
[2020-11-25 17:39:23,799 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_HBC__success
[2020-11-25 17:39:23,799 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_HBC__fail
[2020-11-25 17:39:23,799 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_HBC__success
[2020-11-25 17:39:23,799 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalTokenSupply_HBC__fail
[2020-11-25 17:39:23,799 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalTokenSupply_HBC__success
[2020-11-25 17:39:23,799 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_HBC__fail
[2020-11-25 17:39:23,799 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_HBC__success
[2020-11-25 17:39:23,799 INFO  L138     BoogieDeclarations]: Found implementation of procedure stopped_HBC__fail
[2020-11-25 17:39:23,799 INFO  L138     BoogieDeclarations]: Found implementation of procedure stopped_HBC__success
[2020-11-25 17:39:23,800 INFO  L138     BoogieDeclarations]: Found implementation of procedure owner_HBC__fail
[2020-11-25 17:39:23,800 INFO  L138     BoogieDeclarations]: Found implementation of procedure owner_HBC__success
[2020-11-25 17:39:23,800 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalBurned_HBC__fail
[2020-11-25 17:39:23,800 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalBurned_HBC__success
[2020-11-25 17:39:23,800 INFO  L138     BoogieDeclarations]: Found implementation of procedure balances~address_HBC__fail
[2020-11-25 17:39:23,800 INFO  L138     BoogieDeclarations]: Found implementation of procedure balances~address_HBC__success
[2020-11-25 17:39:23,800 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackDispatch__fail
[2020-11-25 17:39:23,800 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackDispatch__success
[2020-11-25 17:39:23,800 INFO  L138     BoogieDeclarations]: Found implementation of procedure Fallback_UnknownType__fail
[2020-11-25 17:39:23,800 INFO  L138     BoogieDeclarations]: Found implementation of procedure Fallback_UnknownType__success
[2020-11-25 17:39:23,800 INFO  L138     BoogieDeclarations]: Found implementation of procedure send__fail
[2020-11-25 17:39:23,800 INFO  L138     BoogieDeclarations]: Found implementation of procedure send__success
[2020-11-25 17:39:23,800 INFO  L138     BoogieDeclarations]: Found implementation of procedure onlyOwner_pre__fail
[2020-11-25 17:39:23,801 INFO  L138     BoogieDeclarations]: Found implementation of procedure onlyOwner_pre__success
[2020-11-25 17:39:23,801 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_SafeMath
[2020-11-25 17:39:23,801 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_SafeMath
[2020-11-25 17:39:23,801 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_ERC20Interface
[2020-11-25 17:39:23,801 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_ERC20Interface
[2020-11-25 17:39:23,801 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_HBC
[2020-11-25 17:39:23,801 INFO  L138     BoogieDeclarations]: Found implementation of procedure main
[2020-11-25 17:39:23,801 INFO  L130     BoogieDeclarations]: Found specification of procedure ULTIMATE.start
[2020-11-25 17:39:23,801 INFO  L138     BoogieDeclarations]: Found implementation of procedure ULTIMATE.start
[2020-11-25 17:39:23,894 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 17:39:23,894 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 17:39:23,895 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 17:39:24,447 INFO  L281             CfgBuilder]: Using the 1 location(s) as analysis (start of procedure ULTIMATE.start)
[2020-11-25 17:39:24,448 INFO  L286             CfgBuilder]: Removed 3 assue(true) statements.
[2020-11-25 17:39:24,449 INFO  L202        PluginConnector]: Adding new model HBC_0xfb9553afa2b5c19c5f8e5b8ee175fc01abd1555f_transfer-self.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 05:39:24 BoogieIcfgContainer
[2020-11-25 17:39:24,450 INFO  L185        PluginConnector]: Executing the observer RCFGBuilderObserver from plugin RCFGBuilder for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 05:39:23" (2/2) ...
[2020-11-25 17:39:24,450 INFO  L85     RCFGBuilderObserver]: No WrapperNode. Let Ultimate process with next node
[2020-11-25 17:39:24,450 INFO  L205        PluginConnector]: Invalid model from RCFGBuilder for observer de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder.RCFGBuilderObserver@5214d4e5 and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 05:39:24, skipping insertion in model container
[2020-11-25 17:39:24,450 INFO  L132        PluginConnector]: ------------------------ END RCFGBuilder----------------------------
[2020-11-25 17:39:24,450 INFO  L113        PluginConnector]: ------------------------UtopiaLTL2Aut----------------------------
[2020-11-25 17:39:24,450 INFO  L271        PluginConnector]: Initializing UtopiaLTL2Aut...
[2020-11-25 17:39:24,452 INFO  L276        PluginConnector]: UtopiaLTL2Aut initialized
[2020-11-25 17:39:24,452 INFO  L185        PluginConnector]: Executing the observer UtopiaLTL2AutObserver from plugin UtopiaLTL2Aut for "HBC_0xfb9553afa2b5c19c5f8e5b8ee175fc01abd1555f_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 05:39:23" (1/3) ...
[2020-11-25 17:39:24,452 INFO  L205        PluginConnector]: Invalid model from UtopiaLTL2Aut for observer edu.utexas.cs.utopia.ltl2aut.UtopiaLTL2AutObserver@28ef69f3 and model type Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 05:39:24, skipping insertion in model container
[2020-11-25 17:39:24,452 INFO  L185        PluginConnector]: Executing the observer UtopiaLTL2AutObserver from plugin UtopiaLTL2Aut for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 05:39:23" (2/3) ...
No working directory specified, using /mnt/data0/jon/SmartPulseTool/ltl2ba
Starting monitored process 1 with /mnt/data0/jon/SmartPulseTool/ltl2ba -f ! ( ( [] ( a -> ( <>b ) ) ) )  (exit command is null, workingDir is null)
[2020-11-25 17:39:24,487 INFO  L202        PluginConnector]: Adding new model Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 05:39:24 NWAContainer
[2020-11-25 17:39:24,487 INFO  L132        PluginConnector]: ------------------------ END UtopiaLTL2Aut----------------------------
[2020-11-25 17:39:24,488 INFO  L113        PluginConnector]: ------------------------BÃ¼chi Program Product----------------------------
[2020-11-25 17:39:24,488 INFO  L271        PluginConnector]: Initializing BÃ¼chi Program Product...
[2020-11-25 17:39:24,488 INFO  L276        PluginConnector]: BÃ¼chi Program Product initialized
[2020-11-25 17:39:24,489 INFO  L185        PluginConnector]: Executing the observer BuchiProductObserver from plugin BÃ¼chi Program Product for "HBC_0xfb9553afa2b5c19c5f8e5b8ee175fc01abd1555f_transfer-self.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 05:39:24" (3/4) ...
[2020-11-25 17:39:24,490 INFO  L205        PluginConnector]: Invalid model from BÃ¼chi Program Product for observer de.uni_freiburg.informatik.ultimate.buchiprogramproduct.BuchiProductObserver@23180696 and model type LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 05:39:24, skipping insertion in model container
[2020-11-25 17:39:24,490 INFO  L185        PluginConnector]: Executing the observer BuchiProductObserver from plugin BÃ¼chi Program Product for "Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 05:39:24" (4/4) ...
[2020-11-25 17:39:24,493 INFO  L104   BuchiProductObserver]: Initial property automaton 2 locations, 3 edges
[2020-11-25 17:39:24,497 INFO  L110   BuchiProductObserver]: Initial RCFG 1756 locations, 2197 edges
[2020-11-25 17:39:24,497 INFO  L93    BuchiProductObserver]: Beginning generation of product automaton
[2020-11-25 17:39:24,507 INFO  L136       ProductGenerator]: The program has no step specification, so we assume maximum atomicity
[2020-11-25 17:39:25,955 INFO  L97    BuchiProductObserver]: Finished generation of product automaton successfully
[2020-11-25 17:39:25,962 INFO  L110   BuchiProductObserver]: BuchiProgram size 4120 locations, 7058 edges
[2020-11-25 17:39:25,962 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 05:39:25 BoogieIcfgContainer
[2020-11-25 17:39:25,962 INFO  L132        PluginConnector]: ------------------------ END BÃ¼chi Program Product----------------------------
[2020-11-25 17:39:25,963 INFO  L113        PluginConnector]: ------------------------BlockEncodingV2----------------------------
[2020-11-25 17:39:25,963 INFO  L271        PluginConnector]: Initializing BlockEncodingV2...
[2020-11-25 17:39:25,965 INFO  L276        PluginConnector]: BlockEncodingV2 initialized
[2020-11-25 17:39:25,965 INFO  L185        PluginConnector]: Executing the observer BlockEncodingObserver from plugin BlockEncodingV2 for "LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 05:39:25" (1/1) ...
[2020-11-25 17:39:26,071 INFO  L313           BlockEncoder]: Initial Icfg 4120 locations, 7058 edges
[2020-11-25 17:39:26,071 INFO  L258           BlockEncoder]: Using Remove infeasible edges
[2020-11-25 17:39:26,072 INFO  L270           BlockEncoder]: Using Minimize states even if more edges are added than removed.=true
[2020-11-25 17:39:26,072 INFO  L296           BlockEncoder]: Using Remove sink states
[2020-11-25 17:39:26,072 INFO  L171           BlockEncoder]: Using Apply optimizations until nothing changes=true
[2020-11-25 17:39:26,086 INFO  L70    emoveInfeasibleEdges]: Removed 60 edges and 9 locations because of local infeasibility
[2020-11-25 17:39:26,094 INFO  L70        RemoveSinkStates]: Removed 2 edges and 1 locations by removing sink states
[2020-11-25 17:39:26,106 INFO  L70    emoveInfeasibleEdges]: Removed 0 edges and 0 locations because of local infeasibility
[2020-11-25 17:39:26,110 INFO  L70        RemoveSinkStates]: Removed 0 edges and 0 locations by removing sink states
[2020-11-25 17:39:26,114 INFO  L237           BlockEncoder]: Using Create parallel compositions if possible
[2020-11-25 17:39:26,115 INFO  L66        ParallelComposer]: Creating parallel compositions
[2020-11-25 17:39:26,121 INFO  L313           BlockEncoder]: Encoded RCFG 4080 locations, 6952 edges
[2020-11-25 17:39:26,121 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.blockencoding CFG 25.11 05:39:26 BasicIcfg
[2020-11-25 17:39:26,121 INFO  L132        PluginConnector]: ------------------------ END BlockEncodingV2----------------------------
[2020-11-25 17:39:26,122 INFO  L113        PluginConnector]: ------------------------BuchiAutomizer----------------------------
[2020-11-25 17:39:26,122 INFO  L271        PluginConnector]: Initializing BuchiAutomizer...
[2020-11-25 17:39:26,124 INFO  L276        PluginConnector]: BuchiAutomizer initialized
[2020-11-25 17:39:26,124 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 17:39:26,124 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "HBC_0xfb9553afa2b5c19c5f8e5b8ee175fc01abd1555f_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 05:39:23" (1/6) ...
[2020-11-25 17:39:26,126 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@698a7bf7 and model type HBC_0xfb9553afa2b5c19c5f8e5b8ee175fc01abd1555f_transfer-self.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 05:39:26, skipping insertion in model container
[2020-11-25 17:39:26,126 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 17:39:26,126 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 05:39:23" (2/6) ...
[2020-11-25 17:39:26,127 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@698a7bf7 and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 05:39:26, skipping insertion in model container
[2020-11-25 17:39:26,127 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 17:39:26,127 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "HBC_0xfb9553afa2b5c19c5f8e5b8ee175fc01abd1555f_transfer-self.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 05:39:24" (3/6) ...
[2020-11-25 17:39:26,127 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@698a7bf7 and model type HBC_0xfb9553afa2b5c19c5f8e5b8ee175fc01abd1555f_transfer-self.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer CFG 25.11 05:39:26, skipping insertion in model container
[2020-11-25 17:39:26,127 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 17:39:26,127 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 05:39:24" (4/6) ...
[2020-11-25 17:39:26,127 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@698a7bf7 and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 05:39:26, skipping insertion in model container
[2020-11-25 17:39:26,127 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 17:39:26,127 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 05:39:25" (5/6) ...
[2020-11-25 17:39:26,128 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@698a7bf7 and model type LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer OTHER 25.11 05:39:26, skipping insertion in model container
[2020-11-25 17:39:26,128 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 17:39:26,128 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.blockencoding CFG 25.11 05:39:26" (6/6) ...
[2020-11-25 17:39:26,129 INFO  L404   chiAutomizerObserver]: Analyzing ICFG HBC_0xfb9553afa2b5c19c5f8e5b8ee175fc01abd1555f_transfer-self.bpl_BEv2
[2020-11-25 17:39:26,174 INFO  L133   ementStrategyFactory]: Using default assertion order modulation
[2020-11-25 17:39:26,175 INFO  L377         BuchiCegarLoop]: Interprodecural is true
[2020-11-25 17:39:26,175 INFO  L378         BuchiCegarLoop]: Hoare is false
[2020-11-25 17:39:26,175 INFO  L379         BuchiCegarLoop]: Compute interpolants for Craig_TreeInterpolation
[2020-11-25 17:39:26,175 INFO  L380         BuchiCegarLoop]: Backedges is STRAIGHT_LINE
[2020-11-25 17:39:26,175 INFO  L381         BuchiCegarLoop]: Determinization is PREDICATE_ABSTRACTION
[2020-11-25 17:39:26,175 INFO  L382         BuchiCegarLoop]: Difference is false
[2020-11-25 17:39:26,175 INFO  L383         BuchiCegarLoop]: Minimize is MINIMIZE_SEVPA
[2020-11-25 17:39:26,175 INFO  L386         BuchiCegarLoop]: ======== Iteration 0==of CEGAR loop == BuchiCegarLoop========
[2020-11-25 17:39:26,216 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 4080 states.
[2020-11-25 17:39:26,279 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 17:39:26,280 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 17:39:26,280 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 17:39:26,289 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 17:39:26,289 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 17:39:26,289 INFO  L445         BuchiCegarLoop]: ======== Iteration 1============
[2020-11-25 17:39:26,290 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 4080 states.
[2020-11-25 17:39:26,313 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 17:39:26,313 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 17:39:26,313 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 17:39:26,315 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 17:39:26,315 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_HBC0 := false;
[L2]                 call_transfer_HBC0 := false;
[L2]     CALL        call main();
[L4520]              assume null == 0;
[L4521]  CALL        call this := FreshRefGenerator__success();
[L2236]              havoc newRef;
[L2237]              assume Alloc[newRef] == false;
[L2238]              Alloc[newRef] := true;
[L2239]              assume newRef != null;
[L4521]  RET         call this := FreshRefGenerator__success();
[L4522]              assume now >= 0;
[L4523]              assume DType[this] == HBC;
[L4524]              assume msgvalue_MSG == 0;
[L4525]              gas := gas - 53000;
[L4526]  CALL        call HBC_HBC(this, msgsender_MSG, msgvalue_MSG);
[L254]               havoc __exception;
[L255]               revert := false;
[L256]   COND FALSE  !(__exception)
[L283]   CALL        call HBC_HBC__success(this, msgsender_MSG, msgvalue_MSG);
[L2495]  CALL        call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L2424]  CALL        call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2409]              assume msgsender_MSG != null;
[L2410]              Balance[this] := 0;
[L2424]  RET         call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2425]  COND FALSE  !(revert)
[L2495]  RET         call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L2496]  COND TRUE   revert
[L283]   RET         call HBC_HBC__success(this, msgsender_MSG, msgvalue_MSG);
[L284]               assume !revert && gas >= 0;
[L4526]  RET         call HBC_HBC(this, msgsender_MSG, msgvalue_MSG);
[L4527]              assume !revert && gas >= 0;

Loop:
[L4530]  CALL        call CorralChoice_HBC(this);
[L4311]              havoc msgsender_MSG;
[L4312]              havoc msgvalue_MSG;
[L4313]              havoc choice;
[L4314]              havoc __ret_0_totalSupply;
[L4315]              havoc _owner_s433;
[L4316]              havoc __ret_0_balanceOf;
[L4317]              havoc _address_s750;
[L4318]              havoc _tokens_s750;
[L4319]              havoc __ret_0_transfer;
[L4320]              havoc _owner_s648;
[L4321]              havoc _spender_s648;
[L4322]              havoc __ret_0_allowance;
[L4323]              havoc _from_s570;
[L4324]              havoc _to_s570;
[L4325]              havoc _value_s570;
[L4326]              havoc __ret_0_transferFrom;
[L4327]              havoc _spender_s612;
[L4328]              havoc _tokens_s612;
[L4329]              havoc __ret_0_approve;
[L4330]              havoc __ret_0_TOKEN_DECIMALS;
[L4331]              havoc __ret_0_name;
[L4332]              havoc __ret_0_symbol;
[L4333]              havoc __ret_0_totalTokenSupply;
[L4334]              havoc __ret_0_decimals;
[L4335]              havoc __ret_0_stopped;
[L4336]              havoc __ret_0_owner;
[L4337]              havoc __ret_0_totalBurned;
[L4338]              havoc arg951_s0;
[L4339]              havoc __ret_0_balances;
[L4340]              havoc _newAddr_s337;
[L4341]              havoc _newAddr_s350;
[L4342]              havoc _value_s413;
[L4343]              havoc __ret_0_burn;
[L4344]              havoc _newOwner_s812;
[L4345]              havoc _spender_s881;
[L4346]              havoc _addedValue_s881;
[L4347]              havoc success_s881;
[L4348]              havoc _spender_s948;
[L4349]              havoc _subtractedValue_s948;
[L4350]              havoc success_s948;
[L4351]              havoc tmpNow;
[L4352]              havoc gas;
[L4353]              assume gas > 4000000 && gas <= 8000000;
[L4354]              tmpNow := now;
[L4355]              havoc now;
[L4356]              assume now > tmpNow;
[L4357]              assume msgsender_MSG != null;
[L4358]              assume DType[msgsender_MSG] != SafeMath;
[L4359]              assume DType[msgsender_MSG] != ERC20Interface;
[L4360]              assume DType[msgsender_MSG] != HBC;
[L4361]              Alloc[msgsender_MSG] := true;
[L4362]  COND TRUE   choice == 24
[L4363]              gas := gas - 21000;
[L4364]  COND FALSE  !(gas >= 0)
[L4530]  RET         call CorralChoice_HBC(this);

[2020-11-25 17:39:26,332 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 17:39:26,333 INFO  L82        PathProgramCache]: Analyzing trace with hash 721266334, now seen corresponding path program 1 times
[2020-11-25 17:39:26,337 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 17:39:26,361 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 17:39:26,401 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 17:39:26,403 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 17:39:26,404 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [3] imperfect sequences [] total 3
[2020-11-25 17:39:26,407 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 17:39:26,639 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-11-25 17:39:26,639 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-11-25 17:39:26,641 INFO  L87              Difference]: Start difference. First operand 4080 states. Second operand 3 states.
[2020-11-25 17:39:26,844 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 17:39:26,844 INFO  L93              Difference]: Finished difference Result 3396 states and 3793 transitions.
[2020-11-25 17:39:26,844 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-11-25 17:39:26,845 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 3396 states and 3793 transitions.
[2020-11-25 17:39:26,861 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 17:39:26,883 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 3396 states to 3396 states and 3793 transitions.
[2020-11-25 17:39:26,883 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 4
[2020-11-25 17:39:26,886 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1065
[2020-11-25 17:39:26,886 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 3396 states and 3793 transitions.
[2020-11-25 17:39:26,893 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 17:39:26,893 INFO  L728         BuchiCegarLoop]: Abstraction has 3396 states and 3793 transitions.
[2020-11-25 17:39:26,908 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 3396 states and 3793 transitions.
[2020-11-25 17:39:26,961 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 3396 to 3396.
[2020-11-25 17:39:26,962 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 3396 states.
[2020-11-25 17:39:26,967 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 3396 states to 3396 states and 3793 transitions.
[2020-11-25 17:39:26,968 INFO  L751         BuchiCegarLoop]: Abstraction has 3396 states and 3793 transitions.
[2020-11-25 17:39:26,968 INFO  L631         BuchiCegarLoop]: Abstraction has 3396 states and 3793 transitions.
[2020-11-25 17:39:26,969 INFO  L445         BuchiCegarLoop]: ======== Iteration 2============
[2020-11-25 17:39:26,969 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 3396 states and 3793 transitions.
[2020-11-25 17:39:26,977 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 17:39:26,977 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 17:39:26,977 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 17:39:26,979 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 17:39:26,979 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_HBC0 := false;
[L2]                 call_transfer_HBC0 := false;
[L2]     CALL        call main();
[L4520]              assume null == 0;
[L4521]  CALL        call this := FreshRefGenerator__success();
[L2236]              havoc newRef;
[L2237]              assume Alloc[newRef] == false;
[L2238]              Alloc[newRef] := true;
[L2239]              assume newRef != null;
[L4521]  RET         call this := FreshRefGenerator__success();
[L4522]              assume now >= 0;
[L4523]              assume DType[this] == HBC;
[L4524]              assume msgvalue_MSG == 0;
[L4525]              gas := gas - 53000;
[L4526]  CALL        call HBC_HBC(this, msgsender_MSG, msgvalue_MSG);
[L254]               havoc __exception;
[L255]               revert := false;
[L256]   COND FALSE  !(__exception)
[L283]   CALL        call HBC_HBC__success(this, msgsender_MSG, msgvalue_MSG);
[L2495]  CALL        call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L2424]  CALL        call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2409]              assume msgsender_MSG != null;
[L2410]              Balance[this] := 0;
[L2424]  RET         call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2425]  COND FALSE  !(revert)
[L2495]  RET         call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L2496]  COND TRUE   revert
[L283]   RET         call HBC_HBC__success(this, msgsender_MSG, msgvalue_MSG);
[L284]               assume !revert && gas >= 0;
[L4526]  RET         call HBC_HBC(this, msgsender_MSG, msgvalue_MSG);
[L4527]              assume !revert && gas >= 0;
[L4530]  CALL        call CorralChoice_HBC(this);
[L4311]              havoc msgsender_MSG;
[L4312]              havoc msgvalue_MSG;
[L4313]              havoc choice;
[L4314]              havoc __ret_0_totalSupply;
[L4315]              havoc _owner_s433;
[L4316]              havoc __ret_0_balanceOf;
[L4317]              havoc _address_s750;
[L4318]              havoc _tokens_s750;
[L4319]              havoc __ret_0_transfer;
[L4320]              havoc _owner_s648;
[L4321]              havoc _spender_s648;
[L4322]              havoc __ret_0_allowance;
[L4323]              havoc _from_s570;
[L4324]              havoc _to_s570;
[L4325]              havoc _value_s570;
[L4326]              havoc __ret_0_transferFrom;
[L4327]              havoc _spender_s612;
[L4328]              havoc _tokens_s612;
[L4329]              havoc __ret_0_approve;
[L4330]              havoc __ret_0_TOKEN_DECIMALS;
[L4331]              havoc __ret_0_name;
[L4332]              havoc __ret_0_symbol;
[L4333]              havoc __ret_0_totalTokenSupply;
[L4334]              havoc __ret_0_decimals;
[L4335]              havoc __ret_0_stopped;
[L4336]              havoc __ret_0_owner;
[L4337]              havoc __ret_0_totalBurned;
[L4338]              havoc arg951_s0;
[L4339]              havoc __ret_0_balances;
[L4340]              havoc _newAddr_s337;
[L4341]              havoc _newAddr_s350;
[L4342]              havoc _value_s413;
[L4343]              havoc __ret_0_burn;
[L4344]              havoc _newOwner_s812;
[L4345]              havoc _spender_s881;
[L4346]              havoc _addedValue_s881;
[L4347]              havoc success_s881;
[L4348]              havoc _spender_s948;
[L4349]              havoc _subtractedValue_s948;
[L4350]              havoc success_s948;
[L4351]              havoc tmpNow;
[L4352]              havoc gas;
[L4353]              assume gas > 4000000 && gas <= 8000000;
[L4354]              tmpNow := now;
[L4355]              havoc now;
[L4356]              assume now > tmpNow;
[L4357]              assume msgsender_MSG != null;
[L4358]              assume DType[msgsender_MSG] != SafeMath;
[L4359]              assume DType[msgsender_MSG] != ERC20Interface;
[L4360]              assume DType[msgsender_MSG] != HBC;
[L4361]              Alloc[msgsender_MSG] := true;
[L4362]  COND FALSE  !(choice == 24)
[L4368]  COND FALSE  !(choice == 23)
[L4374]  COND TRUE   choice == 22
[L4375]              gas := gas - 21000;
[L4376]  COND TRUE   gas >= 0
[L4377]              assume _tokens_s750 >= 0 && _tokens_s750 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4378]              assume msgvalue_MSG == 0;
[L4379]  CALL        call __ret_0_transfer := transfer~address~uint256_HBC(this, msgsender_MSG, msgvalue_MSG, _address_s750, _tokens_s750);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == _address_s750 && _tokens_s750 <= balances_HBC[this][msgsender_MSG]) && _tokens_s750 >= 0) && _tokens_s750 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_HBC[this][_address_s750] >= 0) && balances_HBC[this][_address_s750] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_HBC[this][msgsender_MSG] >= 0) && balances_HBC[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_HBC0 := true;
[L2]                 call_transfer_HBC0 := false;
[L2]                 revert := revert_hold;
[L951]               havoc __exception;
[L952]               revert := false;
[L953]   COND FALSE  !(__exception)
[L980]   CALL        call __ret_0_ := transfer~address~uint256_HBC__success(this, msgsender_MSG, msgvalue_MSG, _address_s750, _tokens_s750);
[L2927]  COND TRUE   !!stopped_HBC[this]
[L2928]              revert := true;
[L980]   RET         call __ret_0_ := transfer~address~uint256_HBC__success(this, msgsender_MSG, msgvalue_MSG, _address_s750, _tokens_s750);
[L981]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((__ret_0_ == true && totalTokenSupply_HBC[this] == old(totalTokenSupply_HBC[this])) && balances_HBC[this] == old(balances_HBC[this])) && allowed_HBC[this] == old(allowed_HBC[this])) && stopped_HBC[this] == old(stopped_HBC[this])) && owner_HBC[this] == old(owner_HBC[this])) && totalBurned_HBC[this] == old(totalBurned_HBC[this])) && forbiddenAddresses_HBC[this] == old(forbiddenAddresses_HBC[this]));
[L2]                 revert := revert_hold;
[L4379]  RET         call __ret_0_transfer := transfer~address~uint256_HBC(this, msgsender_MSG, msgvalue_MSG, _address_s750, _tokens_s750);
[L4530]  RET         call CorralChoice_HBC(this);

Loop:
[L4530]  CALL        call CorralChoice_HBC(this);
[L4311]              havoc msgsender_MSG;
[L4312]              havoc msgvalue_MSG;
[L4313]              havoc choice;
[L4314]              havoc __ret_0_totalSupply;
[L4315]              havoc _owner_s433;
[L4316]              havoc __ret_0_balanceOf;
[L4317]              havoc _address_s750;
[L4318]              havoc _tokens_s750;
[L4319]              havoc __ret_0_transfer;
[L4320]              havoc _owner_s648;
[L4321]              havoc _spender_s648;
[L4322]              havoc __ret_0_allowance;
[L4323]              havoc _from_s570;
[L4324]              havoc _to_s570;
[L4325]              havoc _value_s570;
[L4326]              havoc __ret_0_transferFrom;
[L4327]              havoc _spender_s612;
[L4328]              havoc _tokens_s612;
[L4329]              havoc __ret_0_approve;
[L4330]              havoc __ret_0_TOKEN_DECIMALS;
[L4331]              havoc __ret_0_name;
[L4332]              havoc __ret_0_symbol;
[L4333]              havoc __ret_0_totalTokenSupply;
[L4334]              havoc __ret_0_decimals;
[L4335]              havoc __ret_0_stopped;
[L4336]              havoc __ret_0_owner;
[L4337]              havoc __ret_0_totalBurned;
[L4338]              havoc arg951_s0;
[L4339]              havoc __ret_0_balances;
[L4340]              havoc _newAddr_s337;
[L4341]              havoc _newAddr_s350;
[L4342]              havoc _value_s413;
[L4343]              havoc __ret_0_burn;
[L4344]              havoc _newOwner_s812;
[L4345]              havoc _spender_s881;
[L4346]              havoc _addedValue_s881;
[L4347]              havoc success_s881;
[L4348]              havoc _spender_s948;
[L4349]              havoc _subtractedValue_s948;
[L4350]              havoc success_s948;
[L4351]              havoc tmpNow;
[L4352]              havoc gas;
[L4353]              assume gas > 4000000 && gas <= 8000000;
[L4354]              tmpNow := now;
[L4355]              havoc now;
[L4356]              assume now > tmpNow;
[L4357]              assume msgsender_MSG != null;
[L4358]              assume DType[msgsender_MSG] != SafeMath;
[L4359]              assume DType[msgsender_MSG] != ERC20Interface;
[L4360]              assume DType[msgsender_MSG] != HBC;
[L4361]              Alloc[msgsender_MSG] := true;
[L4362]  COND FALSE  !(choice == 24)
[L4368]  COND FALSE  !(choice == 23)
[L4374]  COND TRUE   choice == 22
[L4375]              gas := gas - 21000;
[L4376]  COND TRUE   gas >= 0
[L4377]              assume _tokens_s750 >= 0 && _tokens_s750 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4378]              assume msgvalue_MSG == 0;
[L4379]  CALL        call __ret_0_transfer := transfer~address~uint256_HBC(this, msgsender_MSG, msgvalue_MSG, _address_s750, _tokens_s750);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == _address_s750 && _tokens_s750 <= balances_HBC[this][msgsender_MSG]) && _tokens_s750 >= 0) && _tokens_s750 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_HBC[this][_address_s750] >= 0) && balances_HBC[this][_address_s750] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_HBC[this][msgsender_MSG] >= 0) && balances_HBC[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_HBC0 := true;
[L2]                 call_transfer_HBC0 := false;
[L2]                 revert := revert_hold;
[L951]               havoc __exception;
[L952]               revert := false;
[L953]   COND FALSE  !(__exception)
[L980]   CALL        call __ret_0_ := transfer~address~uint256_HBC__success(this, msgsender_MSG, msgvalue_MSG, _address_s750, _tokens_s750);
[L2927]  COND TRUE   !!stopped_HBC[this]
[L2928]              revert := true;
[L980]   RET         call __ret_0_ := transfer~address~uint256_HBC__success(this, msgsender_MSG, msgvalue_MSG, _address_s750, _tokens_s750);
[L981]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((__ret_0_ == true && totalTokenSupply_HBC[this] == old(totalTokenSupply_HBC[this])) && balances_HBC[this] == old(balances_HBC[this])) && allowed_HBC[this] == old(allowed_HBC[this])) && stopped_HBC[this] == old(stopped_HBC[this])) && owner_HBC[this] == old(owner_HBC[this])) && totalBurned_HBC[this] == old(totalBurned_HBC[this])) && forbiddenAddresses_HBC[this] == old(forbiddenAddresses_HBC[this]));
[L2]                 revert := revert_hold;
[L4379]  RET         call __ret_0_transfer := transfer~address~uint256_HBC(this, msgsender_MSG, msgvalue_MSG, _address_s750, _tokens_s750);
[L4530]  RET         call CorralChoice_HBC(this);

[2020-11-25 17:39:26,983 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 17:39:26,984 INFO  L82        PathProgramCache]: Analyzing trace with hash -71204419, now seen corresponding path program 1 times
[2020-11-25 17:39:26,985 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 17:39:26,996 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 17:39:27,016 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 17:39:27,016 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 17:39:27,016 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [4] imperfect sequences [] total 4
[2020-11-25 17:39:27,017 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 17:39:27,017 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-11-25 17:39:27,017 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=5, Invalid=7, Unknown=0, NotChecked=0, Total=12
[2020-11-25 17:39:27,017 INFO  L87              Difference]: Start difference. First operand 3396 states and 3793 transitions. cyclomatic complexity: 399 Second operand 4 states.
[2020-11-25 17:39:27,551 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 17:39:27,551 INFO  L93              Difference]: Finished difference Result 4872 states and 5597 transitions.
[2020-11-25 17:39:27,551 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 4 states. 
[2020-11-25 17:39:27,552 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 4872 states and 5597 transitions.
[2020-11-25 17:39:27,571 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 6
[2020-11-25 17:39:27,592 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 4872 states to 4636 states and 5309 transitions.
[2020-11-25 17:39:27,592 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1393
[2020-11-25 17:39:27,593 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1405
[2020-11-25 17:39:27,593 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 4636 states and 5309 transitions.
[2020-11-25 17:39:27,601 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 17:39:27,601 INFO  L728         BuchiCegarLoop]: Abstraction has 4636 states and 5309 transitions.
[2020-11-25 17:39:27,605 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 4636 states and 5309 transitions.
[2020-11-25 17:39:27,640 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 4636 to 3432.
[2020-11-25 17:39:27,640 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 3432 states.
[2020-11-25 17:39:27,644 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 3432 states to 3432 states and 3733 transitions.
[2020-11-25 17:39:27,645 INFO  L751         BuchiCegarLoop]: Abstraction has 3432 states and 3733 transitions.
[2020-11-25 17:39:27,645 INFO  L631         BuchiCegarLoop]: Abstraction has 3432 states and 3733 transitions.
[2020-11-25 17:39:27,645 INFO  L445         BuchiCegarLoop]: ======== Iteration 3============
[2020-11-25 17:39:27,645 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 3432 states and 3733 transitions.
[2020-11-25 17:39:27,652 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 17:39:27,652 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 17:39:27,652 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 17:39:27,654 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 17:39:27,655 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_HBC0 := false;
[L2]                 call_transfer_HBC0 := false;
[L2]     CALL        call main();
[L4520]              assume null == 0;
[L4521]  CALL        call this := FreshRefGenerator__success();
[L2236]              havoc newRef;
[L2237]              assume Alloc[newRef] == false;
[L2238]              Alloc[newRef] := true;
[L2239]              assume newRef != null;
[L4521]  RET         call this := FreshRefGenerator__success();
[L4522]              assume now >= 0;
[L4523]              assume DType[this] == HBC;
[L4524]              assume msgvalue_MSG == 0;
[L4525]              gas := gas - 53000;
[L4526]  CALL        call HBC_HBC(this, msgsender_MSG, msgvalue_MSG);
[L254]               havoc __exception;
[L255]               revert := false;
[L256]   COND FALSE  !(__exception)
[L283]   CALL        call HBC_HBC__success(this, msgsender_MSG, msgvalue_MSG);
[L2495]  CALL        call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L2424]  CALL        call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2409]              assume msgsender_MSG != null;
[L2410]              Balance[this] := 0;
[L2424]  RET         call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2425]  COND FALSE  !(revert)
[L2495]  RET         call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L2496]  COND FALSE  !(revert)
[L2499]  CALL        call HBC_HBC_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2458]              assume msgsender_MSG != null;
[L2459]              Balance[this] := 0;
[L2460]              TOKEN_DECIMALS_HBC[this] := 1000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2461]              name_HBC[this] := 1908934807;
[L2462]              symbol_HBC[this] := -845215461;
[L2463]              totalTokenSupply_HBC[this] := 10000000000 * TOKEN_DECIMALS_HBC[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2464]              decimals_HBC[this] := 18;
[L2465]              stopped_HBC[this] := false;
[L2466]              owner_HBC[this] := null;
[L2467]              totalBurned_HBC[this] := 0;
[L2468]              balances_HBC[this] := zeroRefintArr();
[L2469]              sum_balances0[this] := 0;
[L2470]              allowed_HBC[this] := zeroRefRefintArr();
[L2471]              sum_allowed1[this] := 0;
[L2472]              forbiddenAddresses_HBC[this] := zeroRefRefArr();
[L2474]              owner_HBC[this] := msgsender_MSG;
[L2475]              sum_balances0[this] := sum_balances0[this] - balances_HBC[this][owner_HBC[this]];
[L2476]              balances_HBC[this][owner_HBC[this]] := totalTokenSupply_HBC[this];
[L2477]              sum_balances0[this] := sum_balances0[this] + balances_HBC[this][owner_HBC[this]];
[L2478]              assert { :EventEmitted "Transfer_HBC" } true;
[L2499]  RET         call HBC_HBC_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2500]  COND FALSE  !(revert)
[L283]   RET         call HBC_HBC__success(this, msgsender_MSG, msgvalue_MSG);
[L284]               assume !revert && gas >= 0;
[L4526]  RET         call HBC_HBC(this, msgsender_MSG, msgvalue_MSG);
[L4527]              assume !revert && gas >= 0;
[L4530]  CALL        call CorralChoice_HBC(this);
[L4311]              havoc msgsender_MSG;
[L4312]              havoc msgvalue_MSG;
[L4313]              havoc choice;
[L4314]              havoc __ret_0_totalSupply;
[L4315]              havoc _owner_s433;
[L4316]              havoc __ret_0_balanceOf;
[L4317]              havoc _address_s750;
[L4318]              havoc _tokens_s750;
[L4319]              havoc __ret_0_transfer;
[L4320]              havoc _owner_s648;
[L4321]              havoc _spender_s648;
[L4322]              havoc __ret_0_allowance;
[L4323]              havoc _from_s570;
[L4324]              havoc _to_s570;
[L4325]              havoc _value_s570;
[L4326]              havoc __ret_0_transferFrom;
[L4327]              havoc _spender_s612;
[L4328]              havoc _tokens_s612;
[L4329]              havoc __ret_0_approve;
[L4330]              havoc __ret_0_TOKEN_DECIMALS;
[L4331]              havoc __ret_0_name;
[L4332]              havoc __ret_0_symbol;
[L4333]              havoc __ret_0_totalTokenSupply;
[L4334]              havoc __ret_0_decimals;
[L4335]              havoc __ret_0_stopped;
[L4336]              havoc __ret_0_owner;
[L4337]              havoc __ret_0_totalBurned;
[L4338]              havoc arg951_s0;
[L4339]              havoc __ret_0_balances;
[L4340]              havoc _newAddr_s337;
[L4341]              havoc _newAddr_s350;
[L4342]              havoc _value_s413;
[L4343]              havoc __ret_0_burn;
[L4344]              havoc _newOwner_s812;
[L4345]              havoc _spender_s881;
[L4346]              havoc _addedValue_s881;
[L4347]              havoc success_s881;
[L4348]              havoc _spender_s948;
[L4349]              havoc _subtractedValue_s948;
[L4350]              havoc success_s948;
[L4351]              havoc tmpNow;
[L4352]              havoc gas;
[L4353]              assume gas > 4000000 && gas <= 8000000;
[L4354]              tmpNow := now;
[L4355]              havoc now;
[L4356]              assume now > tmpNow;
[L4357]              assume msgsender_MSG != null;
[L4358]              assume DType[msgsender_MSG] != SafeMath;
[L4359]              assume DType[msgsender_MSG] != ERC20Interface;
[L4360]              assume DType[msgsender_MSG] != HBC;
[L4361]              Alloc[msgsender_MSG] := true;
[L4362]  COND FALSE  !(choice == 24)
[L4368]  COND FALSE  !(choice == 23)
[L4374]  COND TRUE   choice == 22
[L4375]              gas := gas - 21000;
[L4376]  COND TRUE   gas >= 0
[L4377]              assume _tokens_s750 >= 0 && _tokens_s750 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4378]              assume msgvalue_MSG == 0;
[L4379]  CALL        call __ret_0_transfer := transfer~address~uint256_HBC(this, msgsender_MSG, msgvalue_MSG, _address_s750, _tokens_s750);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == _address_s750 && _tokens_s750 <= balances_HBC[this][msgsender_MSG]) && _tokens_s750 >= 0) && _tokens_s750 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_HBC[this][_address_s750] >= 0) && balances_HBC[this][_address_s750] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_HBC[this][msgsender_MSG] >= 0) && balances_HBC[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_HBC0 := true;
[L2]                 call_transfer_HBC0 := false;
[L2]                 revert := revert_hold;
[L951]               havoc __exception;
[L952]               revert := false;
[L953]   COND FALSE  !(__exception)
[L980]   CALL        call __ret_0_ := transfer~address~uint256_HBC__success(this, msgsender_MSG, msgvalue_MSG, _address_s750, _tokens_s750);
[L2927]  COND FALSE  !(!!stopped_HBC[this])
[L2931]              __var_12 := null;
[L2932]  COND FALSE  !(!(_address_s750 != null))
[L2936]  COND FALSE  !(!(forbiddenAddresses_HBC[this][msgsender_MSG] != msgsender_MSG))
[L2940]  COND FALSE  !(!(forbiddenAddresses_HBC[this][_address_s750] != _address_s750))
[L2944]  COND TRUE   _tokens_s750 == 0
[L2945]              assert { :EventEmitted "Transfer_HBC" } true;
[L2946]              __ret_0_ := true;
[L980]   RET         call __ret_0_ := transfer~address~uint256_HBC__success(this, msgsender_MSG, msgvalue_MSG, _address_s750, _tokens_s750);
[L981]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((__ret_0_ == true && totalTokenSupply_HBC[this] == old(totalTokenSupply_HBC[this])) && balances_HBC[this] == old(balances_HBC[this])) && allowed_HBC[this] == old(allowed_HBC[this])) && stopped_HBC[this] == old(stopped_HBC[this])) && owner_HBC[this] == old(owner_HBC[this])) && totalBurned_HBC[this] == old(totalBurned_HBC[this])) && forbiddenAddresses_HBC[this] == old(forbiddenAddresses_HBC[this]));
[L2]                 revert := revert_hold;
[L4379]  RET         call __ret_0_transfer := transfer~address~uint256_HBC(this, msgsender_MSG, msgvalue_MSG, _address_s750, _tokens_s750);
[L4530]  RET         call CorralChoice_HBC(this);

Loop:
[L4530]  CALL        call CorralChoice_HBC(this);
[L4311]              havoc msgsender_MSG;
[L4312]              havoc msgvalue_MSG;
[L4313]              havoc choice;
[L4314]              havoc __ret_0_totalSupply;
[L4315]              havoc _owner_s433;
[L4316]              havoc __ret_0_balanceOf;
[L4317]              havoc _address_s750;
[L4318]              havoc _tokens_s750;
[L4319]              havoc __ret_0_transfer;
[L4320]              havoc _owner_s648;
[L4321]              havoc _spender_s648;
[L4322]              havoc __ret_0_allowance;
[L4323]              havoc _from_s570;
[L4324]              havoc _to_s570;
[L4325]              havoc _value_s570;
[L4326]              havoc __ret_0_transferFrom;
[L4327]              havoc _spender_s612;
[L4328]              havoc _tokens_s612;
[L4329]              havoc __ret_0_approve;
[L4330]              havoc __ret_0_TOKEN_DECIMALS;
[L4331]              havoc __ret_0_name;
[L4332]              havoc __ret_0_symbol;
[L4333]              havoc __ret_0_totalTokenSupply;
[L4334]              havoc __ret_0_decimals;
[L4335]              havoc __ret_0_stopped;
[L4336]              havoc __ret_0_owner;
[L4337]              havoc __ret_0_totalBurned;
[L4338]              havoc arg951_s0;
[L4339]              havoc __ret_0_balances;
[L4340]              havoc _newAddr_s337;
[L4341]              havoc _newAddr_s350;
[L4342]              havoc _value_s413;
[L4343]              havoc __ret_0_burn;
[L4344]              havoc _newOwner_s812;
[L4345]              havoc _spender_s881;
[L4346]              havoc _addedValue_s881;
[L4347]              havoc success_s881;
[L4348]              havoc _spender_s948;
[L4349]              havoc _subtractedValue_s948;
[L4350]              havoc success_s948;
[L4351]              havoc tmpNow;
[L4352]              havoc gas;
[L4353]              assume gas > 4000000 && gas <= 8000000;
[L4354]              tmpNow := now;
[L4355]              havoc now;
[L4356]              assume now > tmpNow;
[L4357]              assume msgsender_MSG != null;
[L4358]              assume DType[msgsender_MSG] != SafeMath;
[L4359]              assume DType[msgsender_MSG] != ERC20Interface;
[L4360]              assume DType[msgsender_MSG] != HBC;
[L4361]              Alloc[msgsender_MSG] := true;
[L4362]  COND FALSE  !(choice == 24)
[L4368]  COND FALSE  !(choice == 23)
[L4374]  COND TRUE   choice == 22
[L4375]              gas := gas - 21000;
[L4376]  COND TRUE   gas >= 0
[L4377]              assume _tokens_s750 >= 0 && _tokens_s750 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4378]              assume msgvalue_MSG == 0;
[L4379]  CALL        call __ret_0_transfer := transfer~address~uint256_HBC(this, msgsender_MSG, msgvalue_MSG, _address_s750, _tokens_s750);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == _address_s750 && _tokens_s750 <= balances_HBC[this][msgsender_MSG]) && _tokens_s750 >= 0) && _tokens_s750 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_HBC[this][_address_s750] >= 0) && balances_HBC[this][_address_s750] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_HBC[this][msgsender_MSG] >= 0) && balances_HBC[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_HBC0 := true;
[L2]                 call_transfer_HBC0 := false;
[L2]                 revert := revert_hold;
[L951]               havoc __exception;
[L952]               revert := false;
[L953]   COND FALSE  !(__exception)
[L980]   CALL        call __ret_0_ := transfer~address~uint256_HBC__success(this, msgsender_MSG, msgvalue_MSG, _address_s750, _tokens_s750);
[L2927]  COND FALSE  !(!!stopped_HBC[this])
[L2931]              __var_12 := null;
[L2932]  COND FALSE  !(!(_address_s750 != null))
[L2936]  COND FALSE  !(!(forbiddenAddresses_HBC[this][msgsender_MSG] != msgsender_MSG))
[L2940]  COND FALSE  !(!(forbiddenAddresses_HBC[this][_address_s750] != _address_s750))
[L2944]  COND TRUE   _tokens_s750 == 0
[L2945]              assert { :EventEmitted "Transfer_HBC" } true;
[L2946]              __ret_0_ := true;
[L980]   RET         call __ret_0_ := transfer~address~uint256_HBC__success(this, msgsender_MSG, msgvalue_MSG, _address_s750, _tokens_s750);
[L981]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((__ret_0_ == true && totalTokenSupply_HBC[this] == old(totalTokenSupply_HBC[this])) && balances_HBC[this] == old(balances_HBC[this])) && allowed_HBC[this] == old(allowed_HBC[this])) && stopped_HBC[this] == old(stopped_HBC[this])) && owner_HBC[this] == old(owner_HBC[this])) && totalBurned_HBC[this] == old(totalBurned_HBC[this])) && forbiddenAddresses_HBC[this] == old(forbiddenAddresses_HBC[this]));
[L2]                 revert := revert_hold;
[L4379]  RET         call __ret_0_transfer := transfer~address~uint256_HBC(this, msgsender_MSG, msgvalue_MSG, _address_s750, _tokens_s750);
[L4530]  RET         call CorralChoice_HBC(this);

[2020-11-25 17:39:27,658 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 17:39:27,658 INFO  L82        PathProgramCache]: Analyzing trace with hash 2110175386, now seen corresponding path program 1 times
[2020-11-25 17:39:27,658 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 17:39:27,674 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 17:39:27,716 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 17:39:27,716 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 17:39:27,716 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [5] imperfect sequences [] total 5
[2020-11-25 17:39:27,717 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 17:39:27,717 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 5 interpolants.
[2020-11-25 17:39:27,717 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=9, Invalid=11, Unknown=0, NotChecked=0, Total=20
[2020-11-25 17:39:27,717 INFO  L87              Difference]: Start difference. First operand 3432 states and 3733 transitions. cyclomatic complexity: 303 Second operand 5 states.
[2020-11-25 17:39:28,388 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 17:39:28,388 INFO  L93              Difference]: Finished difference Result 3495 states and 3803 transitions.
[2020-11-25 17:39:28,388 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 5 states. 
[2020-11-25 17:39:28,388 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 3495 states and 3803 transitions.
[2020-11-25 17:39:28,395 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 17:39:28,403 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 3495 states to 3486 states and 3794 transitions.
[2020-11-25 17:39:28,403 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1105
[2020-11-25 17:39:28,404 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1105
[2020-11-25 17:39:28,404 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 3486 states and 3794 transitions.
[2020-11-25 17:39:28,406 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 17:39:28,406 INFO  L728         BuchiCegarLoop]: Abstraction has 3486 states and 3794 transitions.
[2020-11-25 17:39:28,409 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 3486 states and 3794 transitions.
[2020-11-25 17:39:28,430 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 3486 to 3437.
[2020-11-25 17:39:28,430 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 3437 states.
[2020-11-25 17:39:28,433 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 3437 states to 3437 states and 3737 transitions.
[2020-11-25 17:39:28,433 INFO  L751         BuchiCegarLoop]: Abstraction has 3437 states and 3737 transitions.
[2020-11-25 17:39:28,433 INFO  L631         BuchiCegarLoop]: Abstraction has 3437 states and 3737 transitions.
[2020-11-25 17:39:28,433 INFO  L445         BuchiCegarLoop]: ======== Iteration 4============
[2020-11-25 17:39:28,433 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 3437 states and 3737 transitions.
[2020-11-25 17:39:28,437 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 17:39:28,437 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 17:39:28,437 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 17:39:28,438 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 17:39:28,438 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_HBC0 := false;
[L2]                 call_transfer_HBC0 := false;
[L2]     CALL        call main();
[L4520]              assume null == 0;
[L4521]  CALL        call this := FreshRefGenerator__success();
[L2236]              havoc newRef;
[L2237]              assume Alloc[newRef] == false;
[L2238]              Alloc[newRef] := true;
[L2239]              assume newRef != null;
[L4521]  RET         call this := FreshRefGenerator__success();
[L4522]              assume now >= 0;
[L4523]              assume DType[this] == HBC;
[L4524]              assume msgvalue_MSG == 0;
[L4525]              gas := gas - 53000;
[L4526]  CALL        call HBC_HBC(this, msgsender_MSG, msgvalue_MSG);
[L254]               havoc __exception;
[L255]               revert := false;
[L256]   COND FALSE  !(__exception)
[L283]   CALL        call HBC_HBC__success(this, msgsender_MSG, msgvalue_MSG);
[L2495]  CALL        call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L2424]  CALL        call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2409]              assume msgsender_MSG != null;
[L2410]              Balance[this] := 0;
[L2424]  RET         call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2425]  COND FALSE  !(revert)
[L2495]  RET         call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L2496]  COND FALSE  !(revert)
[L2499]  CALL        call HBC_HBC_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2458]              assume msgsender_MSG != null;
[L2459]              Balance[this] := 0;
[L2460]              TOKEN_DECIMALS_HBC[this] := 1000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2461]              name_HBC[this] := 1908934807;
[L2462]              symbol_HBC[this] := -845215461;
[L2463]              totalTokenSupply_HBC[this] := 10000000000 * TOKEN_DECIMALS_HBC[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2464]              decimals_HBC[this] := 18;
[L2465]              stopped_HBC[this] := false;
[L2466]              owner_HBC[this] := null;
[L2467]              totalBurned_HBC[this] := 0;
[L2468]              balances_HBC[this] := zeroRefintArr();
[L2469]              sum_balances0[this] := 0;
[L2470]              allowed_HBC[this] := zeroRefRefintArr();
[L2471]              sum_allowed1[this] := 0;
[L2472]              forbiddenAddresses_HBC[this] := zeroRefRefArr();
[L2474]              owner_HBC[this] := msgsender_MSG;
[L2475]              sum_balances0[this] := sum_balances0[this] - balances_HBC[this][owner_HBC[this]];
[L2476]              balances_HBC[this][owner_HBC[this]] := totalTokenSupply_HBC[this];
[L2477]              sum_balances0[this] := sum_balances0[this] + balances_HBC[this][owner_HBC[this]];
[L2478]              assert { :EventEmitted "Transfer_HBC" } true;
[L2499]  RET         call HBC_HBC_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2500]  COND FALSE  !(revert)
[L283]   RET         call HBC_HBC__success(this, msgsender_MSG, msgvalue_MSG);
[L284]               assume !revert && gas >= 0;
[L4526]  RET         call HBC_HBC(this, msgsender_MSG, msgvalue_MSG);
[L4527]              assume !revert && gas >= 0;
[L4530]  CALL        call CorralChoice_HBC(this);
[L4311]              havoc msgsender_MSG;
[L4312]              havoc msgvalue_MSG;
[L4313]              havoc choice;
[L4314]              havoc __ret_0_totalSupply;
[L4315]              havoc _owner_s433;
[L4316]              havoc __ret_0_balanceOf;
[L4317]              havoc _address_s750;
[L4318]              havoc _tokens_s750;
[L4319]              havoc __ret_0_transfer;
[L4320]              havoc _owner_s648;
[L4321]              havoc _spender_s648;
[L4322]              havoc __ret_0_allowance;
[L4323]              havoc _from_s570;
[L4324]              havoc _to_s570;
[L4325]              havoc _value_s570;
[L4326]              havoc __ret_0_transferFrom;
[L4327]              havoc _spender_s612;
[L4328]              havoc _tokens_s612;
[L4329]              havoc __ret_0_approve;
[L4330]              havoc __ret_0_TOKEN_DECIMALS;
[L4331]              havoc __ret_0_name;
[L4332]              havoc __ret_0_symbol;
[L4333]              havoc __ret_0_totalTokenSupply;
[L4334]              havoc __ret_0_decimals;
[L4335]              havoc __ret_0_stopped;
[L4336]              havoc __ret_0_owner;
[L4337]              havoc __ret_0_totalBurned;
[L4338]              havoc arg951_s0;
[L4339]              havoc __ret_0_balances;
[L4340]              havoc _newAddr_s337;
[L4341]              havoc _newAddr_s350;
[L4342]              havoc _value_s413;
[L4343]              havoc __ret_0_burn;
[L4344]              havoc _newOwner_s812;
[L4345]              havoc _spender_s881;
[L4346]              havoc _addedValue_s881;
[L4347]              havoc success_s881;
[L4348]              havoc _spender_s948;
[L4349]              havoc _subtractedValue_s948;
[L4350]              havoc success_s948;
[L4351]              havoc tmpNow;
[L4352]              havoc gas;
[L4353]              assume gas > 4000000 && gas <= 8000000;
[L4354]              tmpNow := now;
[L4355]              havoc now;
[L4356]              assume now > tmpNow;
[L4357]              assume msgsender_MSG != null;
[L4358]              assume DType[msgsender_MSG] != SafeMath;
[L4359]              assume DType[msgsender_MSG] != ERC20Interface;
[L4360]              assume DType[msgsender_MSG] != HBC;
[L4361]              Alloc[msgsender_MSG] := true;
[L4362]  COND FALSE  !(choice == 24)
[L4368]  COND FALSE  !(choice == 23)
[L4374]  COND TRUE   choice == 22
[L4375]              gas := gas - 21000;
[L4376]  COND TRUE   gas >= 0
[L4377]              assume _tokens_s750 >= 0 && _tokens_s750 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4378]              assume msgvalue_MSG == 0;
[L4379]  CALL        call __ret_0_transfer := transfer~address~uint256_HBC(this, msgsender_MSG, msgvalue_MSG, _address_s750, _tokens_s750);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == _address_s750 && _tokens_s750 <= balances_HBC[this][msgsender_MSG]) && _tokens_s750 >= 0) && _tokens_s750 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_HBC[this][_address_s750] >= 0) && balances_HBC[this][_address_s750] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_HBC[this][msgsender_MSG] >= 0) && balances_HBC[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_HBC0 := true;
[L2]                 call_transfer_HBC0 := false;
[L2]                 revert := revert_hold;
[L951]               havoc __exception;
[L952]               revert := false;
[L953]   COND TRUE   __exception
[L954]               __tmp__Balance := Balance;
[L955]               __tmp__DType := DType;
[L956]               __tmp__Alloc := Alloc;
[L957]               __tmp__balance_ADDR := balance_ADDR;
[L958]               __tmp__M_Ref_int := M_Ref_int;
[L959]               __tmp__sum_balances0 := sum_balances0;
[L960]               __tmp__alloc_allowed_HBC_lvl0 := alloc_allowed_HBC_lvl0;
[L961]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L962]               __tmp__sum_allowed1 := sum_allowed1;
[L963]               __tmp__sum_forbiddenAddresses2 := sum_forbiddenAddresses2;
[L964]               __tmp__Length := Length;
[L965]               __tmp__now := now;
[L966]               __tmp__TOKEN_DECIMALS_HBC := TOKEN_DECIMALS_HBC;
[L967]               __tmp__name_HBC := name_HBC;
[L968]               __tmp__symbol_HBC := symbol_HBC;
[L969]               __tmp__totalTokenSupply_HBC := totalTokenSupply_HBC;
[L970]               __tmp__decimals_HBC := decimals_HBC;
[L971]               __tmp__stopped_HBC := stopped_HBC;
[L972]               __tmp__owner_HBC := owner_HBC;
[L973]               __tmp__totalBurned_HBC := totalBurned_HBC;
[L974]               __tmp__balances_HBC := balances_HBC;
[L975]               __tmp__allowed_HBC := allowed_HBC;
[L976]               __tmp__forbiddenAddresses_HBC := forbiddenAddresses_HBC;
[L977]   CALL        call __ret_0_ := transfer~address~uint256_HBC__fail(this, msgsender_MSG, msgvalue_MSG, _address_s750, _tokens_s750);
[L2879]  COND TRUE   !!__tmp__stopped_HBC[this]
[L2880]              revert := true;
[L977]   RET         call __ret_0_ := transfer~address~uint256_HBC__fail(this, msgsender_MSG, msgvalue_MSG, _address_s750, _tokens_s750);
[L978]               assume revert || gas < 0;
[L4379]  RET         call __ret_0_transfer := transfer~address~uint256_HBC(this, msgsender_MSG, msgvalue_MSG, _address_s750, _tokens_s750);
[L4530]  RET         call CorralChoice_HBC(this);

Loop:
[L4530]  CALL        call CorralChoice_HBC(this);
[L4311]              havoc msgsender_MSG;
[L4312]              havoc msgvalue_MSG;
[L4313]              havoc choice;
[L4314]              havoc __ret_0_totalSupply;
[L4315]              havoc _owner_s433;
[L4316]              havoc __ret_0_balanceOf;
[L4317]              havoc _address_s750;
[L4318]              havoc _tokens_s750;
[L4319]              havoc __ret_0_transfer;
[L4320]              havoc _owner_s648;
[L4321]              havoc _spender_s648;
[L4322]              havoc __ret_0_allowance;
[L4323]              havoc _from_s570;
[L4324]              havoc _to_s570;
[L4325]              havoc _value_s570;
[L4326]              havoc __ret_0_transferFrom;
[L4327]              havoc _spender_s612;
[L4328]              havoc _tokens_s612;
[L4329]              havoc __ret_0_approve;
[L4330]              havoc __ret_0_TOKEN_DECIMALS;
[L4331]              havoc __ret_0_name;
[L4332]              havoc __ret_0_symbol;
[L4333]              havoc __ret_0_totalTokenSupply;
[L4334]              havoc __ret_0_decimals;
[L4335]              havoc __ret_0_stopped;
[L4336]              havoc __ret_0_owner;
[L4337]              havoc __ret_0_totalBurned;
[L4338]              havoc arg951_s0;
[L4339]              havoc __ret_0_balances;
[L4340]              havoc _newAddr_s337;
[L4341]              havoc _newAddr_s350;
[L4342]              havoc _value_s413;
[L4343]              havoc __ret_0_burn;
[L4344]              havoc _newOwner_s812;
[L4345]              havoc _spender_s881;
[L4346]              havoc _addedValue_s881;
[L4347]              havoc success_s881;
[L4348]              havoc _spender_s948;
[L4349]              havoc _subtractedValue_s948;
[L4350]              havoc success_s948;
[L4351]              havoc tmpNow;
[L4352]              havoc gas;
[L4353]              assume gas > 4000000 && gas <= 8000000;
[L4354]              tmpNow := now;
[L4355]              havoc now;
[L4356]              assume now > tmpNow;
[L4357]              assume msgsender_MSG != null;
[L4358]              assume DType[msgsender_MSG] != SafeMath;
[L4359]              assume DType[msgsender_MSG] != ERC20Interface;
[L4360]              assume DType[msgsender_MSG] != HBC;
[L4361]              Alloc[msgsender_MSG] := true;
[L4362]  COND FALSE  !(choice == 24)
[L4368]  COND FALSE  !(choice == 23)
[L4374]  COND TRUE   choice == 22
[L4375]              gas := gas - 21000;
[L4376]  COND TRUE   gas >= 0
[L4377]              assume _tokens_s750 >= 0 && _tokens_s750 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4378]              assume msgvalue_MSG == 0;
[L4379]  CALL        call __ret_0_transfer := transfer~address~uint256_HBC(this, msgsender_MSG, msgvalue_MSG, _address_s750, _tokens_s750);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == _address_s750 && _tokens_s750 <= balances_HBC[this][msgsender_MSG]) && _tokens_s750 >= 0) && _tokens_s750 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_HBC[this][_address_s750] >= 0) && balances_HBC[this][_address_s750] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_HBC[this][msgsender_MSG] >= 0) && balances_HBC[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_HBC0 := true;
[L2]                 call_transfer_HBC0 := false;
[L2]                 revert := revert_hold;
[L951]               havoc __exception;
[L952]               revert := false;
[L953]   COND TRUE   __exception
[L954]               __tmp__Balance := Balance;
[L955]               __tmp__DType := DType;
[L956]               __tmp__Alloc := Alloc;
[L957]               __tmp__balance_ADDR := balance_ADDR;
[L958]               __tmp__M_Ref_int := M_Ref_int;
[L959]               __tmp__sum_balances0 := sum_balances0;
[L960]               __tmp__alloc_allowed_HBC_lvl0 := alloc_allowed_HBC_lvl0;
[L961]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L962]               __tmp__sum_allowed1 := sum_allowed1;
[L963]               __tmp__sum_forbiddenAddresses2 := sum_forbiddenAddresses2;
[L964]               __tmp__Length := Length;
[L965]               __tmp__now := now;
[L966]               __tmp__TOKEN_DECIMALS_HBC := TOKEN_DECIMALS_HBC;
[L967]               __tmp__name_HBC := name_HBC;
[L968]               __tmp__symbol_HBC := symbol_HBC;
[L969]               __tmp__totalTokenSupply_HBC := totalTokenSupply_HBC;
[L970]               __tmp__decimals_HBC := decimals_HBC;
[L971]               __tmp__stopped_HBC := stopped_HBC;
[L972]               __tmp__owner_HBC := owner_HBC;
[L973]               __tmp__totalBurned_HBC := totalBurned_HBC;
[L974]               __tmp__balances_HBC := balances_HBC;
[L975]               __tmp__allowed_HBC := allowed_HBC;
[L976]               __tmp__forbiddenAddresses_HBC := forbiddenAddresses_HBC;
[L977]   CALL        call __ret_0_ := transfer~address~uint256_HBC__fail(this, msgsender_MSG, msgvalue_MSG, _address_s750, _tokens_s750);
[L2879]  COND TRUE   !!__tmp__stopped_HBC[this]
[L2880]              revert := true;
[L977]   RET         call __ret_0_ := transfer~address~uint256_HBC__fail(this, msgsender_MSG, msgvalue_MSG, _address_s750, _tokens_s750);
[L978]               assume revert || gas < 0;
[L4379]  RET         call __ret_0_transfer := transfer~address~uint256_HBC(this, msgsender_MSG, msgvalue_MSG, _address_s750, _tokens_s750);
[L4530]  RET         call CorralChoice_HBC(this);

[2020-11-25 17:39:28,441 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 17:39:28,441 INFO  L82        PathProgramCache]: Analyzing trace with hash -159600944, now seen corresponding path program 1 times
[2020-11-25 17:39:28,441 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 17:39:28,449 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 17:39:28,481 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 17:39:28,481 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 17:39:28,481 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [10] imperfect sequences [] total 10
[2020-11-25 17:39:28,481 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 17:39:28,481 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 11 interpolants.
[2020-11-25 17:39:28,482 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=19, Invalid=91, Unknown=0, NotChecked=0, Total=110
[2020-11-25 17:39:28,482 INFO  L87              Difference]: Start difference. First operand 3437 states and 3737 transitions. cyclomatic complexity: 302 Second operand 11 states.
[2020-11-25 17:39:30,197 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 17:39:30,197 INFO  L93              Difference]: Finished difference Result 5760 states and 6357 transitions.
[2020-11-25 17:39:30,197 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 13 states. 
[2020-11-25 17:39:30,197 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 5760 states and 6357 transitions.
[2020-11-25 17:39:30,209 INFO  L131   ngComponentsAnalysis]: Automaton has 3 accepting balls. 12
[2020-11-25 17:39:30,224 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 5760 states to 5760 states and 6357 transitions.
[2020-11-25 17:39:30,224 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1818
[2020-11-25 17:39:30,225 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1818
[2020-11-25 17:39:30,225 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 5760 states and 6357 transitions.
[2020-11-25 17:39:30,230 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 17:39:30,230 INFO  L728         BuchiCegarLoop]: Abstraction has 5760 states and 6357 transitions.
[2020-11-25 17:39:30,233 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 5760 states and 6357 transitions.
[2020-11-25 17:39:30,261 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 5760 to 3479.
[2020-11-25 17:39:30,261 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 3479 states.
[2020-11-25 17:39:30,265 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 3479 states to 3479 states and 3786 transitions.
[2020-11-25 17:39:30,265 INFO  L751         BuchiCegarLoop]: Abstraction has 3479 states and 3786 transitions.
[2020-11-25 17:39:30,265 INFO  L631         BuchiCegarLoop]: Abstraction has 3479 states and 3786 transitions.
[2020-11-25 17:39:30,265 INFO  L445         BuchiCegarLoop]: ======== Iteration 5============
[2020-11-25 17:39:30,265 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 3479 states and 3786 transitions.
[2020-11-25 17:39:30,270 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 17:39:30,270 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 17:39:30,270 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 17:39:30,272 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 17:39:30,272 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_HBC0 := false;
[L2]                 call_transfer_HBC0 := false;
[L2]     CALL        call main();
[L4520]              assume null == 0;
[L4521]  CALL        call this := FreshRefGenerator__success();
[L2236]              havoc newRef;
[L2237]              assume Alloc[newRef] == false;
[L2238]              Alloc[newRef] := true;
[L2239]              assume newRef != null;
[L4521]  RET         call this := FreshRefGenerator__success();
[L4522]              assume now >= 0;
[L4523]              assume DType[this] == HBC;
[L4524]              assume msgvalue_MSG == 0;
[L4525]              gas := gas - 53000;
[L4526]  CALL        call HBC_HBC(this, msgsender_MSG, msgvalue_MSG);
[L254]               havoc __exception;
[L255]               revert := false;
[L256]   COND FALSE  !(__exception)
[L283]   CALL        call HBC_HBC__success(this, msgsender_MSG, msgvalue_MSG);
[L2495]  CALL        call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L2424]  CALL        call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2409]              assume msgsender_MSG != null;
[L2410]              Balance[this] := 0;
[L2424]  RET         call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2425]  COND FALSE  !(revert)
[L2495]  RET         call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L2496]  COND FALSE  !(revert)
[L2499]  CALL        call HBC_HBC_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2458]              assume msgsender_MSG != null;
[L2459]              Balance[this] := 0;
[L2460]              TOKEN_DECIMALS_HBC[this] := 1000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2461]              name_HBC[this] := 1908934807;
[L2462]              symbol_HBC[this] := -845215461;
[L2463]              totalTokenSupply_HBC[this] := 10000000000 * TOKEN_DECIMALS_HBC[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2464]              decimals_HBC[this] := 18;
[L2465]              stopped_HBC[this] := false;
[L2466]              owner_HBC[this] := null;
[L2467]              totalBurned_HBC[this] := 0;
[L2468]              balances_HBC[this] := zeroRefintArr();
[L2469]              sum_balances0[this] := 0;
[L2470]              allowed_HBC[this] := zeroRefRefintArr();
[L2471]              sum_allowed1[this] := 0;
[L2472]              forbiddenAddresses_HBC[this] := zeroRefRefArr();
[L2474]              owner_HBC[this] := msgsender_MSG;
[L2475]              sum_balances0[this] := sum_balances0[this] - balances_HBC[this][owner_HBC[this]];
[L2476]              balances_HBC[this][owner_HBC[this]] := totalTokenSupply_HBC[this];
[L2477]              sum_balances0[this] := sum_balances0[this] + balances_HBC[this][owner_HBC[this]];
[L2478]              assert { :EventEmitted "Transfer_HBC" } true;
[L2499]  RET         call HBC_HBC_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2500]  COND FALSE  !(revert)
[L283]   RET         call HBC_HBC__success(this, msgsender_MSG, msgvalue_MSG);
[L284]               assume !revert && gas >= 0;
[L4526]  RET         call HBC_HBC(this, msgsender_MSG, msgvalue_MSG);
[L4527]              assume !revert && gas >= 0;
[L4530]  CALL        call CorralChoice_HBC(this);
[L4311]              havoc msgsender_MSG;
[L4312]              havoc msgvalue_MSG;
[L4313]              havoc choice;
[L4314]              havoc __ret_0_totalSupply;
[L4315]              havoc _owner_s433;
[L4316]              havoc __ret_0_balanceOf;
[L4317]              havoc _address_s750;
[L4318]              havoc _tokens_s750;
[L4319]              havoc __ret_0_transfer;
[L4320]              havoc _owner_s648;
[L4321]              havoc _spender_s648;
[L4322]              havoc __ret_0_allowance;
[L4323]              havoc _from_s570;
[L4324]              havoc _to_s570;
[L4325]              havoc _value_s570;
[L4326]              havoc __ret_0_transferFrom;
[L4327]              havoc _spender_s612;
[L4328]              havoc _tokens_s612;
[L4329]              havoc __ret_0_approve;
[L4330]              havoc __ret_0_TOKEN_DECIMALS;
[L4331]              havoc __ret_0_name;
[L4332]              havoc __ret_0_symbol;
[L4333]              havoc __ret_0_totalTokenSupply;
[L4334]              havoc __ret_0_decimals;
[L4335]              havoc __ret_0_stopped;
[L4336]              havoc __ret_0_owner;
[L4337]              havoc __ret_0_totalBurned;
[L4338]              havoc arg951_s0;
[L4339]              havoc __ret_0_balances;
[L4340]              havoc _newAddr_s337;
[L4341]              havoc _newAddr_s350;
[L4342]              havoc _value_s413;
[L4343]              havoc __ret_0_burn;
[L4344]              havoc _newOwner_s812;
[L4345]              havoc _spender_s881;
[L4346]              havoc _addedValue_s881;
[L4347]              havoc success_s881;
[L4348]              havoc _spender_s948;
[L4349]              havoc _subtractedValue_s948;
[L4350]              havoc success_s948;
[L4351]              havoc tmpNow;
[L4352]              havoc gas;
[L4353]              assume gas > 4000000 && gas <= 8000000;
[L4354]              tmpNow := now;
[L4355]              havoc now;
[L4356]              assume now > tmpNow;
[L4357]              assume msgsender_MSG != null;
[L4358]              assume DType[msgsender_MSG] != SafeMath;
[L4359]              assume DType[msgsender_MSG] != ERC20Interface;
[L4360]              assume DType[msgsender_MSG] != HBC;
[L4361]              Alloc[msgsender_MSG] := true;
[L4362]  COND FALSE  !(choice == 24)
[L4368]  COND FALSE  !(choice == 23)
[L4374]  COND TRUE   choice == 22
[L4375]              gas := gas - 21000;
[L4376]  COND TRUE   gas >= 0
[L4377]              assume _tokens_s750 >= 0 && _tokens_s750 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4378]              assume msgvalue_MSG == 0;
[L4379]  CALL        call __ret_0_transfer := transfer~address~uint256_HBC(this, msgsender_MSG, msgvalue_MSG, _address_s750, _tokens_s750);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == _address_s750 && _tokens_s750 <= balances_HBC[this][msgsender_MSG]) && _tokens_s750 >= 0) && _tokens_s750 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_HBC[this][_address_s750] >= 0) && balances_HBC[this][_address_s750] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_HBC[this][msgsender_MSG] >= 0) && balances_HBC[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_HBC0 := true;
[L2]                 call_transfer_HBC0 := false;
[L2]                 revert := revert_hold;
[L951]               havoc __exception;
[L952]               revert := false;
[L953]   COND TRUE   __exception
[L954]               __tmp__Balance := Balance;
[L955]               __tmp__DType := DType;
[L956]               __tmp__Alloc := Alloc;
[L957]               __tmp__balance_ADDR := balance_ADDR;
[L958]               __tmp__M_Ref_int := M_Ref_int;
[L959]               __tmp__sum_balances0 := sum_balances0;
[L960]               __tmp__alloc_allowed_HBC_lvl0 := alloc_allowed_HBC_lvl0;
[L961]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L962]               __tmp__sum_allowed1 := sum_allowed1;
[L963]               __tmp__sum_forbiddenAddresses2 := sum_forbiddenAddresses2;
[L964]               __tmp__Length := Length;
[L965]               __tmp__now := now;
[L966]               __tmp__TOKEN_DECIMALS_HBC := TOKEN_DECIMALS_HBC;
[L967]               __tmp__name_HBC := name_HBC;
[L968]               __tmp__symbol_HBC := symbol_HBC;
[L969]               __tmp__totalTokenSupply_HBC := totalTokenSupply_HBC;
[L970]               __tmp__decimals_HBC := decimals_HBC;
[L971]               __tmp__stopped_HBC := stopped_HBC;
[L972]               __tmp__owner_HBC := owner_HBC;
[L973]               __tmp__totalBurned_HBC := totalBurned_HBC;
[L974]               __tmp__balances_HBC := balances_HBC;
[L975]               __tmp__allowed_HBC := allowed_HBC;
[L976]               __tmp__forbiddenAddresses_HBC := forbiddenAddresses_HBC;
[L977]   CALL        call __ret_0_ := transfer~address~uint256_HBC__fail(this, msgsender_MSG, msgvalue_MSG, _address_s750, _tokens_s750);
[L2879]  COND FALSE  !(!!__tmp__stopped_HBC[this])
[L2883]              __var_12 := null;
[L2884]  COND TRUE   !(_address_s750 != null)
[L2885]              revert := true;
[L977]   RET         call __ret_0_ := transfer~address~uint256_HBC__fail(this, msgsender_MSG, msgvalue_MSG, _address_s750, _tokens_s750);
[L978]               assume revert || gas < 0;
[L4379]  RET         call __ret_0_transfer := transfer~address~uint256_HBC(this, msgsender_MSG, msgvalue_MSG, _address_s750, _tokens_s750);
[L4530]  RET         call CorralChoice_HBC(this);

Loop:
[L4530]  CALL        call CorralChoice_HBC(this);
[L4311]              havoc msgsender_MSG;
[L4312]              havoc msgvalue_MSG;
[L4313]              havoc choice;
[L4314]              havoc __ret_0_totalSupply;
[L4315]              havoc _owner_s433;
[L4316]              havoc __ret_0_balanceOf;
[L4317]              havoc _address_s750;
[L4318]              havoc _tokens_s750;
[L4319]              havoc __ret_0_transfer;
[L4320]              havoc _owner_s648;
[L4321]              havoc _spender_s648;
[L4322]              havoc __ret_0_allowance;
[L4323]              havoc _from_s570;
[L4324]              havoc _to_s570;
[L4325]              havoc _value_s570;
[L4326]              havoc __ret_0_transferFrom;
[L4327]              havoc _spender_s612;
[L4328]              havoc _tokens_s612;
[L4329]              havoc __ret_0_approve;
[L4330]              havoc __ret_0_TOKEN_DECIMALS;
[L4331]              havoc __ret_0_name;
[L4332]              havoc __ret_0_symbol;
[L4333]              havoc __ret_0_totalTokenSupply;
[L4334]              havoc __ret_0_decimals;
[L4335]              havoc __ret_0_stopped;
[L4336]              havoc __ret_0_owner;
[L4337]              havoc __ret_0_totalBurned;
[L4338]              havoc arg951_s0;
[L4339]              havoc __ret_0_balances;
[L4340]              havoc _newAddr_s337;
[L4341]              havoc _newAddr_s350;
[L4342]              havoc _value_s413;
[L4343]              havoc __ret_0_burn;
[L4344]              havoc _newOwner_s812;
[L4345]              havoc _spender_s881;
[L4346]              havoc _addedValue_s881;
[L4347]              havoc success_s881;
[L4348]              havoc _spender_s948;
[L4349]              havoc _subtractedValue_s948;
[L4350]              havoc success_s948;
[L4351]              havoc tmpNow;
[L4352]              havoc gas;
[L4353]              assume gas > 4000000 && gas <= 8000000;
[L4354]              tmpNow := now;
[L4355]              havoc now;
[L4356]              assume now > tmpNow;
[L4357]              assume msgsender_MSG != null;
[L4358]              assume DType[msgsender_MSG] != SafeMath;
[L4359]              assume DType[msgsender_MSG] != ERC20Interface;
[L4360]              assume DType[msgsender_MSG] != HBC;
[L4361]              Alloc[msgsender_MSG] := true;
[L4362]  COND FALSE  !(choice == 24)
[L4368]  COND FALSE  !(choice == 23)
[L4374]  COND TRUE   choice == 22
[L4375]              gas := gas - 21000;
[L4376]  COND TRUE   gas >= 0
[L4377]              assume _tokens_s750 >= 0 && _tokens_s750 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4378]              assume msgvalue_MSG == 0;
[L4379]  CALL        call __ret_0_transfer := transfer~address~uint256_HBC(this, msgsender_MSG, msgvalue_MSG, _address_s750, _tokens_s750);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == _address_s750 && _tokens_s750 <= balances_HBC[this][msgsender_MSG]) && _tokens_s750 >= 0) && _tokens_s750 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_HBC[this][_address_s750] >= 0) && balances_HBC[this][_address_s750] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_HBC[this][msgsender_MSG] >= 0) && balances_HBC[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_HBC0 := true;
[L2]                 call_transfer_HBC0 := false;
[L2]                 revert := revert_hold;
[L951]               havoc __exception;
[L952]               revert := false;
[L953]   COND TRUE   __exception
[L954]               __tmp__Balance := Balance;
[L955]               __tmp__DType := DType;
[L956]               __tmp__Alloc := Alloc;
[L957]               __tmp__balance_ADDR := balance_ADDR;
[L958]               __tmp__M_Ref_int := M_Ref_int;
[L959]               __tmp__sum_balances0 := sum_balances0;
[L960]               __tmp__alloc_allowed_HBC_lvl0 := alloc_allowed_HBC_lvl0;
[L961]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L962]               __tmp__sum_allowed1 := sum_allowed1;
[L963]               __tmp__sum_forbiddenAddresses2 := sum_forbiddenAddresses2;
[L964]               __tmp__Length := Length;
[L965]               __tmp__now := now;
[L966]               __tmp__TOKEN_DECIMALS_HBC := TOKEN_DECIMALS_HBC;
[L967]               __tmp__name_HBC := name_HBC;
[L968]               __tmp__symbol_HBC := symbol_HBC;
[L969]               __tmp__totalTokenSupply_HBC := totalTokenSupply_HBC;
[L970]               __tmp__decimals_HBC := decimals_HBC;
[L971]               __tmp__stopped_HBC := stopped_HBC;
[L972]               __tmp__owner_HBC := owner_HBC;
[L973]               __tmp__totalBurned_HBC := totalBurned_HBC;
[L974]               __tmp__balances_HBC := balances_HBC;
[L975]               __tmp__allowed_HBC := allowed_HBC;
[L976]               __tmp__forbiddenAddresses_HBC := forbiddenAddresses_HBC;
[L977]   CALL        call __ret_0_ := transfer~address~uint256_HBC__fail(this, msgsender_MSG, msgvalue_MSG, _address_s750, _tokens_s750);
[L2879]  COND FALSE  !(!!__tmp__stopped_HBC[this])
[L2883]              __var_12 := null;
[L2884]  COND TRUE   !(_address_s750 != null)
[L2885]              revert := true;
[L977]   RET         call __ret_0_ := transfer~address~uint256_HBC__fail(this, msgsender_MSG, msgvalue_MSG, _address_s750, _tokens_s750);
[L978]               assume revert || gas < 0;
[L4379]  RET         call __ret_0_transfer := transfer~address~uint256_HBC(this, msgsender_MSG, msgvalue_MSG, _address_s750, _tokens_s750);
[L4530]  RET         call CorralChoice_HBC(this);

[2020-11-25 17:39:30,274 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 17:39:30,274 INFO  L82        PathProgramCache]: Analyzing trace with hash -5910781, now seen corresponding path program 1 times
[2020-11-25 17:39:30,275 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 17:39:30,282 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 17:39:30,304 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 17:39:30,304 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 17:39:30,304 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [6] imperfect sequences [] total 6
[2020-11-25 17:39:30,304 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 17:39:30,304 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 6 interpolants.
[2020-11-25 17:39:30,304 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=9, Invalid=21, Unknown=0, NotChecked=0, Total=30
[2020-11-25 17:39:30,304 INFO  L87              Difference]: Start difference. First operand 3479 states and 3786 transitions. cyclomatic complexity: 311 Second operand 6 states.
[2020-11-25 17:39:30,342 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 17:39:30,342 INFO  L93              Difference]: Finished difference Result 3584 states and 3901 transitions.
[2020-11-25 17:39:30,342 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 6 states. 
[2020-11-25 17:39:30,342 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 3584 states and 3901 transitions.
[2020-11-25 17:39:30,350 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 17:39:30,359 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 3584 states to 3576 states and 3893 transitions.
[2020-11-25 17:39:30,359 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1121
[2020-11-25 17:39:30,359 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1121
[2020-11-25 17:39:30,359 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 3576 states and 3893 transitions.
[2020-11-25 17:39:30,362 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 17:39:30,362 INFO  L728         BuchiCegarLoop]: Abstraction has 3576 states and 3893 transitions.
[2020-11-25 17:39:30,365 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 3576 states and 3893 transitions.
[2020-11-25 17:39:30,388 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 3576 to 3554.
[2020-11-25 17:39:30,388 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 3554 states.
[2020-11-25 17:39:30,392 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 3554 states to 3554 states and 3868 transitions.
[2020-11-25 17:39:30,392 INFO  L751         BuchiCegarLoop]: Abstraction has 3554 states and 3868 transitions.
[2020-11-25 17:39:30,392 INFO  L631         BuchiCegarLoop]: Abstraction has 3554 states and 3868 transitions.
[2020-11-25 17:39:30,392 INFO  L445         BuchiCegarLoop]: ======== Iteration 6============
[2020-11-25 17:39:30,392 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 3554 states and 3868 transitions.
[2020-11-25 17:39:30,396 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 17:39:30,396 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 17:39:30,396 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 17:39:30,397 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 17:39:30,397 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_HBC0 := false;
[L2]                 call_transfer_HBC0 := false;
[L2]     CALL        call main();
[L4520]              assume null == 0;
[L4521]  CALL        call this := FreshRefGenerator__success();
[L2236]              havoc newRef;
[L2237]              assume Alloc[newRef] == false;
[L2238]              Alloc[newRef] := true;
[L2239]              assume newRef != null;
[L4521]  RET         call this := FreshRefGenerator__success();
[L4522]              assume now >= 0;
[L4523]              assume DType[this] == HBC;
[L4524]              assume msgvalue_MSG == 0;
[L4525]              gas := gas - 53000;
[L4526]  CALL        call HBC_HBC(this, msgsender_MSG, msgvalue_MSG);
[L254]               havoc __exception;
[L255]               revert := false;
[L256]   COND FALSE  !(__exception)
[L283]   CALL        call HBC_HBC__success(this, msgsender_MSG, msgvalue_MSG);
[L2495]  CALL        call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L2424]  CALL        call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2409]              assume msgsender_MSG != null;
[L2410]              Balance[this] := 0;
[L2424]  RET         call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2425]  COND FALSE  !(revert)
[L2495]  RET         call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L2496]  COND FALSE  !(revert)
[L2499]  CALL        call HBC_HBC_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2458]              assume msgsender_MSG != null;
[L2459]              Balance[this] := 0;
[L2460]              TOKEN_DECIMALS_HBC[this] := 1000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2461]              name_HBC[this] := 1908934807;
[L2462]              symbol_HBC[this] := -845215461;
[L2463]              totalTokenSupply_HBC[this] := 10000000000 * TOKEN_DECIMALS_HBC[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2464]              decimals_HBC[this] := 18;
[L2465]              stopped_HBC[this] := false;
[L2466]              owner_HBC[this] := null;
[L2467]              totalBurned_HBC[this] := 0;
[L2468]              balances_HBC[this] := zeroRefintArr();
[L2469]              sum_balances0[this] := 0;
[L2470]              allowed_HBC[this] := zeroRefRefintArr();
[L2471]              sum_allowed1[this] := 0;
[L2472]              forbiddenAddresses_HBC[this] := zeroRefRefArr();
[L2474]              owner_HBC[this] := msgsender_MSG;
[L2475]              sum_balances0[this] := sum_balances0[this] - balances_HBC[this][owner_HBC[this]];
[L2476]              balances_HBC[this][owner_HBC[this]] := totalTokenSupply_HBC[this];
[L2477]              sum_balances0[this] := sum_balances0[this] + balances_HBC[this][owner_HBC[this]];
[L2478]              assert { :EventEmitted "Transfer_HBC" } true;
[L2499]  RET         call HBC_HBC_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2500]  COND FALSE  !(revert)
[L283]   RET         call HBC_HBC__success(this, msgsender_MSG, msgvalue_MSG);
[L284]               assume !revert && gas >= 0;
[L4526]  RET         call HBC_HBC(this, msgsender_MSG, msgvalue_MSG);
[L4527]              assume !revert && gas >= 0;
[L4530]  CALL        call CorralChoice_HBC(this);
[L4311]              havoc msgsender_MSG;
[L4312]              havoc msgvalue_MSG;
[L4313]              havoc choice;
[L4314]              havoc __ret_0_totalSupply;
[L4315]              havoc _owner_s433;
[L4316]              havoc __ret_0_balanceOf;
[L4317]              havoc _address_s750;
[L4318]              havoc _tokens_s750;
[L4319]              havoc __ret_0_transfer;
[L4320]              havoc _owner_s648;
[L4321]              havoc _spender_s648;
[L4322]              havoc __ret_0_allowance;
[L4323]              havoc _from_s570;
[L4324]              havoc _to_s570;
[L4325]              havoc _value_s570;
[L4326]              havoc __ret_0_transferFrom;
[L4327]              havoc _spender_s612;
[L4328]              havoc _tokens_s612;
[L4329]              havoc __ret_0_approve;
[L4330]              havoc __ret_0_TOKEN_DECIMALS;
[L4331]              havoc __ret_0_name;
[L4332]              havoc __ret_0_symbol;
[L4333]              havoc __ret_0_totalTokenSupply;
[L4334]              havoc __ret_0_decimals;
[L4335]              havoc __ret_0_stopped;
[L4336]              havoc __ret_0_owner;
[L4337]              havoc __ret_0_totalBurned;
[L4338]              havoc arg951_s0;
[L4339]              havoc __ret_0_balances;
[L4340]              havoc _newAddr_s337;
[L4341]              havoc _newAddr_s350;
[L4342]              havoc _value_s413;
[L4343]              havoc __ret_0_burn;
[L4344]              havoc _newOwner_s812;
[L4345]              havoc _spender_s881;
[L4346]              havoc _addedValue_s881;
[L4347]              havoc success_s881;
[L4348]              havoc _spender_s948;
[L4349]              havoc _subtractedValue_s948;
[L4350]              havoc success_s948;
[L4351]              havoc tmpNow;
[L4352]              havoc gas;
[L4353]              assume gas > 4000000 && gas <= 8000000;
[L4354]              tmpNow := now;
[L4355]              havoc now;
[L4356]              assume now > tmpNow;
[L4357]              assume msgsender_MSG != null;
[L4358]              assume DType[msgsender_MSG] != SafeMath;
[L4359]              assume DType[msgsender_MSG] != ERC20Interface;
[L4360]              assume DType[msgsender_MSG] != HBC;
[L4361]              Alloc[msgsender_MSG] := true;
[L4362]  COND FALSE  !(choice == 24)
[L4368]  COND FALSE  !(choice == 23)
[L4374]  COND TRUE   choice == 22
[L4375]              gas := gas - 21000;
[L4376]  COND TRUE   gas >= 0
[L4377]              assume _tokens_s750 >= 0 && _tokens_s750 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4378]              assume msgvalue_MSG == 0;
[L4379]  CALL        call __ret_0_transfer := transfer~address~uint256_HBC(this, msgsender_MSG, msgvalue_MSG, _address_s750, _tokens_s750);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == _address_s750 && _tokens_s750 <= balances_HBC[this][msgsender_MSG]) && _tokens_s750 >= 0) && _tokens_s750 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_HBC[this][_address_s750] >= 0) && balances_HBC[this][_address_s750] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_HBC[this][msgsender_MSG] >= 0) && balances_HBC[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_HBC0 := true;
[L2]                 call_transfer_HBC0 := false;
[L2]                 revert := revert_hold;
[L951]               havoc __exception;
[L952]               revert := false;
[L953]   COND TRUE   __exception
[L954]               __tmp__Balance := Balance;
[L955]               __tmp__DType := DType;
[L956]               __tmp__Alloc := Alloc;
[L957]               __tmp__balance_ADDR := balance_ADDR;
[L958]               __tmp__M_Ref_int := M_Ref_int;
[L959]               __tmp__sum_balances0 := sum_balances0;
[L960]               __tmp__alloc_allowed_HBC_lvl0 := alloc_allowed_HBC_lvl0;
[L961]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L962]               __tmp__sum_allowed1 := sum_allowed1;
[L963]               __tmp__sum_forbiddenAddresses2 := sum_forbiddenAddresses2;
[L964]               __tmp__Length := Length;
[L965]               __tmp__now := now;
[L966]               __tmp__TOKEN_DECIMALS_HBC := TOKEN_DECIMALS_HBC;
[L967]               __tmp__name_HBC := name_HBC;
[L968]               __tmp__symbol_HBC := symbol_HBC;
[L969]               __tmp__totalTokenSupply_HBC := totalTokenSupply_HBC;
[L970]               __tmp__decimals_HBC := decimals_HBC;
[L971]               __tmp__stopped_HBC := stopped_HBC;
[L972]               __tmp__owner_HBC := owner_HBC;
[L973]               __tmp__totalBurned_HBC := totalBurned_HBC;
[L974]               __tmp__balances_HBC := balances_HBC;
[L975]               __tmp__allowed_HBC := allowed_HBC;
[L976]               __tmp__forbiddenAddresses_HBC := forbiddenAddresses_HBC;
[L977]   CALL        call __ret_0_ := transfer~address~uint256_HBC__fail(this, msgsender_MSG, msgvalue_MSG, _address_s750, _tokens_s750);
[L2879]  COND FALSE  !(!!__tmp__stopped_HBC[this])
[L2883]              __var_12 := null;
[L2884]  COND FALSE  !(!(_address_s750 != null))
[L2888]  COND TRUE   !(__tmp__forbiddenAddresses_HBC[this][msgsender_MSG] != msgsender_MSG)
[L2889]              revert := true;
[L977]   RET         call __ret_0_ := transfer~address~uint256_HBC__fail(this, msgsender_MSG, msgvalue_MSG, _address_s750, _tokens_s750);
[L978]               assume revert || gas < 0;
[L4379]  RET         call __ret_0_transfer := transfer~address~uint256_HBC(this, msgsender_MSG, msgvalue_MSG, _address_s750, _tokens_s750);
[L4530]  RET         call CorralChoice_HBC(this);

Loop:
[L4530]  CALL        call CorralChoice_HBC(this);
[L4311]              havoc msgsender_MSG;
[L4312]              havoc msgvalue_MSG;
[L4313]              havoc choice;
[L4314]              havoc __ret_0_totalSupply;
[L4315]              havoc _owner_s433;
[L4316]              havoc __ret_0_balanceOf;
[L4317]              havoc _address_s750;
[L4318]              havoc _tokens_s750;
[L4319]              havoc __ret_0_transfer;
[L4320]              havoc _owner_s648;
[L4321]              havoc _spender_s648;
[L4322]              havoc __ret_0_allowance;
[L4323]              havoc _from_s570;
[L4324]              havoc _to_s570;
[L4325]              havoc _value_s570;
[L4326]              havoc __ret_0_transferFrom;
[L4327]              havoc _spender_s612;
[L4328]              havoc _tokens_s612;
[L4329]              havoc __ret_0_approve;
[L4330]              havoc __ret_0_TOKEN_DECIMALS;
[L4331]              havoc __ret_0_name;
[L4332]              havoc __ret_0_symbol;
[L4333]              havoc __ret_0_totalTokenSupply;
[L4334]              havoc __ret_0_decimals;
[L4335]              havoc __ret_0_stopped;
[L4336]              havoc __ret_0_owner;
[L4337]              havoc __ret_0_totalBurned;
[L4338]              havoc arg951_s0;
[L4339]              havoc __ret_0_balances;
[L4340]              havoc _newAddr_s337;
[L4341]              havoc _newAddr_s350;
[L4342]              havoc _value_s413;
[L4343]              havoc __ret_0_burn;
[L4344]              havoc _newOwner_s812;
[L4345]              havoc _spender_s881;
[L4346]              havoc _addedValue_s881;
[L4347]              havoc success_s881;
[L4348]              havoc _spender_s948;
[L4349]              havoc _subtractedValue_s948;
[L4350]              havoc success_s948;
[L4351]              havoc tmpNow;
[L4352]              havoc gas;
[L4353]              assume gas > 4000000 && gas <= 8000000;
[L4354]              tmpNow := now;
[L4355]              havoc now;
[L4356]              assume now > tmpNow;
[L4357]              assume msgsender_MSG != null;
[L4358]              assume DType[msgsender_MSG] != SafeMath;
[L4359]              assume DType[msgsender_MSG] != ERC20Interface;
[L4360]              assume DType[msgsender_MSG] != HBC;
[L4361]              Alloc[msgsender_MSG] := true;
[L4362]  COND FALSE  !(choice == 24)
[L4368]  COND FALSE  !(choice == 23)
[L4374]  COND TRUE   choice == 22
[L4375]              gas := gas - 21000;
[L4376]  COND TRUE   gas >= 0
[L4377]              assume _tokens_s750 >= 0 && _tokens_s750 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4378]              assume msgvalue_MSG == 0;
[L4379]  CALL        call __ret_0_transfer := transfer~address~uint256_HBC(this, msgsender_MSG, msgvalue_MSG, _address_s750, _tokens_s750);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == _address_s750 && _tokens_s750 <= balances_HBC[this][msgsender_MSG]) && _tokens_s750 >= 0) && _tokens_s750 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_HBC[this][_address_s750] >= 0) && balances_HBC[this][_address_s750] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_HBC[this][msgsender_MSG] >= 0) && balances_HBC[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_HBC0 := true;
[L2]                 call_transfer_HBC0 := false;
[L2]                 revert := revert_hold;
[L951]               havoc __exception;
[L952]               revert := false;
[L953]   COND TRUE   __exception
[L954]               __tmp__Balance := Balance;
[L955]               __tmp__DType := DType;
[L956]               __tmp__Alloc := Alloc;
[L957]               __tmp__balance_ADDR := balance_ADDR;
[L958]               __tmp__M_Ref_int := M_Ref_int;
[L959]               __tmp__sum_balances0 := sum_balances0;
[L960]               __tmp__alloc_allowed_HBC_lvl0 := alloc_allowed_HBC_lvl0;
[L961]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L962]               __tmp__sum_allowed1 := sum_allowed1;
[L963]               __tmp__sum_forbiddenAddresses2 := sum_forbiddenAddresses2;
[L964]               __tmp__Length := Length;
[L965]               __tmp__now := now;
[L966]               __tmp__TOKEN_DECIMALS_HBC := TOKEN_DECIMALS_HBC;
[L967]               __tmp__name_HBC := name_HBC;
[L968]               __tmp__symbol_HBC := symbol_HBC;
[L969]               __tmp__totalTokenSupply_HBC := totalTokenSupply_HBC;
[L970]               __tmp__decimals_HBC := decimals_HBC;
[L971]               __tmp__stopped_HBC := stopped_HBC;
[L972]               __tmp__owner_HBC := owner_HBC;
[L973]               __tmp__totalBurned_HBC := totalBurned_HBC;
[L974]               __tmp__balances_HBC := balances_HBC;
[L975]               __tmp__allowed_HBC := allowed_HBC;
[L976]               __tmp__forbiddenAddresses_HBC := forbiddenAddresses_HBC;
[L977]   CALL        call __ret_0_ := transfer~address~uint256_HBC__fail(this, msgsender_MSG, msgvalue_MSG, _address_s750, _tokens_s750);
[L2879]  COND FALSE  !(!!__tmp__stopped_HBC[this])
[L2883]              __var_12 := null;
[L2884]  COND FALSE  !(!(_address_s750 != null))
[L2888]  COND TRUE   !(__tmp__forbiddenAddresses_HBC[this][msgsender_MSG] != msgsender_MSG)
[L2889]              revert := true;
[L977]   RET         call __ret_0_ := transfer~address~uint256_HBC__fail(this, msgsender_MSG, msgvalue_MSG, _address_s750, _tokens_s750);
[L978]               assume revert || gas < 0;
[L4379]  RET         call __ret_0_transfer := transfer~address~uint256_HBC(this, msgsender_MSG, msgvalue_MSG, _address_s750, _tokens_s750);
[L4530]  RET         call CorralChoice_HBC(this);

[2020-11-25 17:39:30,400 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 17:39:30,400 INFO  L82        PathProgramCache]: Analyzing trace with hash 1860440180, now seen corresponding path program 1 times
[2020-11-25 17:39:30,400 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 17:39:30,413 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 17:39:30,501 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 17:39:30,501 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 17:39:30,501 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [15] imperfect sequences [] total 15
[2020-11-25 17:39:30,501 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 17:39:30,502 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 16 interpolants.
[2020-11-25 17:39:30,502 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=35, Invalid=205, Unknown=0, NotChecked=0, Total=240
[2020-11-25 17:39:30,502 INFO  L87              Difference]: Start difference. First operand 3554 states and 3868 transitions. cyclomatic complexity: 318 Second operand 16 states.
[2020-11-25 17:39:33,133 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 17:39:33,133 INFO  L93              Difference]: Finished difference Result 6190 states and 6868 transitions.
[2020-11-25 17:39:33,133 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 19 states. 
[2020-11-25 17:39:33,133 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 6190 states and 6868 transitions.
[2020-11-25 17:39:33,145 INFO  L131   ngComponentsAnalysis]: Automaton has 5 accepting balls. 20
[2020-11-25 17:39:33,160 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 6190 states to 6190 states and 6868 transitions.
[2020-11-25 17:39:33,160 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1942
[2020-11-25 17:39:33,161 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1942
[2020-11-25 17:39:33,161 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 6190 states and 6868 transitions.
[2020-11-25 17:39:33,166 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 17:39:33,166 INFO  L728         BuchiCegarLoop]: Abstraction has 6190 states and 6868 transitions.
[2020-11-25 17:39:33,170 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 6190 states and 6868 transitions.
[2020-11-25 17:39:33,196 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 6190 to 3594.
[2020-11-25 17:39:33,196 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 3594 states.
[2020-11-25 17:39:33,199 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 3594 states to 3594 states and 3934 transitions.
[2020-11-25 17:39:33,199 INFO  L751         BuchiCegarLoop]: Abstraction has 3594 states and 3934 transitions.
[2020-11-25 17:39:33,199 INFO  L631         BuchiCegarLoop]: Abstraction has 3594 states and 3934 transitions.
[2020-11-25 17:39:33,199 INFO  L445         BuchiCegarLoop]: ======== Iteration 7============
[2020-11-25 17:39:33,199 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 3594 states and 3934 transitions.
[2020-11-25 17:39:33,203 INFO  L131   ngComponentsAnalysis]: Automaton has 4 accepting balls. 8
[2020-11-25 17:39:33,203 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 17:39:33,203 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 17:39:33,204 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 17:39:33,204 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_HBC0 := false;
[L2]                 call_transfer_HBC0 := false;
[L2]     CALL        call main();
[L4520]              assume null == 0;
[L4521]  CALL        call this := FreshRefGenerator__success();
[L2236]              havoc newRef;
[L2237]              assume Alloc[newRef] == false;
[L2238]              Alloc[newRef] := true;
[L2239]              assume newRef != null;
[L4521]  RET         call this := FreshRefGenerator__success();
[L4522]              assume now >= 0;
[L4523]              assume DType[this] == HBC;
[L4524]              assume msgvalue_MSG == 0;
[L4525]              gas := gas - 53000;
[L4526]  CALL        call HBC_HBC(this, msgsender_MSG, msgvalue_MSG);
[L254]               havoc __exception;
[L255]               revert := false;
[L256]   COND FALSE  !(__exception)
[L283]   CALL        call HBC_HBC__success(this, msgsender_MSG, msgvalue_MSG);
[L2495]  CALL        call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L2424]  CALL        call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2409]              assume msgsender_MSG != null;
[L2410]              Balance[this] := 0;
[L2424]  RET         call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2425]  COND FALSE  !(revert)
[L2495]  RET         call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L2496]  COND FALSE  !(revert)
[L2499]  CALL        call HBC_HBC_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2458]              assume msgsender_MSG != null;
[L2459]              Balance[this] := 0;
[L2460]              TOKEN_DECIMALS_HBC[this] := 1000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2461]              name_HBC[this] := 1908934807;
[L2462]              symbol_HBC[this] := -845215461;
[L2463]              totalTokenSupply_HBC[this] := 10000000000 * TOKEN_DECIMALS_HBC[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2464]              decimals_HBC[this] := 18;
[L2465]              stopped_HBC[this] := false;
[L2466]              owner_HBC[this] := null;
[L2467]              totalBurned_HBC[this] := 0;
[L2468]              balances_HBC[this] := zeroRefintArr();
[L2469]              sum_balances0[this] := 0;
[L2470]              allowed_HBC[this] := zeroRefRefintArr();
[L2471]              sum_allowed1[this] := 0;
[L2472]              forbiddenAddresses_HBC[this] := zeroRefRefArr();
[L2474]              owner_HBC[this] := msgsender_MSG;
[L2475]              sum_balances0[this] := sum_balances0[this] - balances_HBC[this][owner_HBC[this]];
[L2476]              balances_HBC[this][owner_HBC[this]] := totalTokenSupply_HBC[this];
[L2477]              sum_balances0[this] := sum_balances0[this] + balances_HBC[this][owner_HBC[this]];
[L2478]              assert { :EventEmitted "Transfer_HBC" } true;
[L2499]  RET         call HBC_HBC_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2500]  COND FALSE  !(revert)
[L283]   RET         call HBC_HBC__success(this, msgsender_MSG, msgvalue_MSG);
[L284]               assume !revert && gas >= 0;
[L4526]  RET         call HBC_HBC(this, msgsender_MSG, msgvalue_MSG);
[L4527]              assume !revert && gas >= 0;
[L4530]  CALL        call CorralChoice_HBC(this);
[L4311]              havoc msgsender_MSG;
[L4312]              havoc msgvalue_MSG;
[L4313]              havoc choice;
[L4314]              havoc __ret_0_totalSupply;
[L4315]              havoc _owner_s433;
[L4316]              havoc __ret_0_balanceOf;
[L4317]              havoc _address_s750;
[L4318]              havoc _tokens_s750;
[L4319]              havoc __ret_0_transfer;
[L4320]              havoc _owner_s648;
[L4321]              havoc _spender_s648;
[L4322]              havoc __ret_0_allowance;
[L4323]              havoc _from_s570;
[L4324]              havoc _to_s570;
[L4325]              havoc _value_s570;
[L4326]              havoc __ret_0_transferFrom;
[L4327]              havoc _spender_s612;
[L4328]              havoc _tokens_s612;
[L4329]              havoc __ret_0_approve;
[L4330]              havoc __ret_0_TOKEN_DECIMALS;
[L4331]              havoc __ret_0_name;
[L4332]              havoc __ret_0_symbol;
[L4333]              havoc __ret_0_totalTokenSupply;
[L4334]              havoc __ret_0_decimals;
[L4335]              havoc __ret_0_stopped;
[L4336]              havoc __ret_0_owner;
[L4337]              havoc __ret_0_totalBurned;
[L4338]              havoc arg951_s0;
[L4339]              havoc __ret_0_balances;
[L4340]              havoc _newAddr_s337;
[L4341]              havoc _newAddr_s350;
[L4342]              havoc _value_s413;
[L4343]              havoc __ret_0_burn;
[L4344]              havoc _newOwner_s812;
[L4345]              havoc _spender_s881;
[L4346]              havoc _addedValue_s881;
[L4347]              havoc success_s881;
[L4348]              havoc _spender_s948;
[L4349]              havoc _subtractedValue_s948;
[L4350]              havoc success_s948;
[L4351]              havoc tmpNow;
[L4352]              havoc gas;
[L4353]              assume gas > 4000000 && gas <= 8000000;
[L4354]              tmpNow := now;
[L4355]              havoc now;
[L4356]              assume now > tmpNow;
[L4357]              assume msgsender_MSG != null;
[L4358]              assume DType[msgsender_MSG] != SafeMath;
[L4359]              assume DType[msgsender_MSG] != ERC20Interface;
[L4360]              assume DType[msgsender_MSG] != HBC;
[L4361]              Alloc[msgsender_MSG] := true;
[L4362]  COND FALSE  !(choice == 24)
[L4368]  COND FALSE  !(choice == 23)
[L4374]  COND TRUE   choice == 22
[L4375]              gas := gas - 21000;
[L4376]  COND TRUE   gas >= 0
[L4377]              assume _tokens_s750 >= 0 && _tokens_s750 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4378]              assume msgvalue_MSG == 0;
[L4379]  CALL        call __ret_0_transfer := transfer~address~uint256_HBC(this, msgsender_MSG, msgvalue_MSG, _address_s750, _tokens_s750);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == _address_s750 && _tokens_s750 <= balances_HBC[this][msgsender_MSG]) && _tokens_s750 >= 0) && _tokens_s750 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_HBC[this][_address_s750] >= 0) && balances_HBC[this][_address_s750] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_HBC[this][msgsender_MSG] >= 0) && balances_HBC[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_HBC0 := true;
[L2]                 call_transfer_HBC0 := false;
[L2]                 revert := revert_hold;
[L951]               havoc __exception;
[L952]               revert := false;
[L953]   COND TRUE   __exception
[L954]               __tmp__Balance := Balance;
[L955]               __tmp__DType := DType;
[L956]               __tmp__Alloc := Alloc;
[L957]               __tmp__balance_ADDR := balance_ADDR;
[L958]               __tmp__M_Ref_int := M_Ref_int;
[L959]               __tmp__sum_balances0 := sum_balances0;
[L960]               __tmp__alloc_allowed_HBC_lvl0 := alloc_allowed_HBC_lvl0;
[L961]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L962]               __tmp__sum_allowed1 := sum_allowed1;
[L963]               __tmp__sum_forbiddenAddresses2 := sum_forbiddenAddresses2;
[L964]               __tmp__Length := Length;
[L965]               __tmp__now := now;
[L966]               __tmp__TOKEN_DECIMALS_HBC := TOKEN_DECIMALS_HBC;
[L967]               __tmp__name_HBC := name_HBC;
[L968]               __tmp__symbol_HBC := symbol_HBC;
[L969]               __tmp__totalTokenSupply_HBC := totalTokenSupply_HBC;
[L970]               __tmp__decimals_HBC := decimals_HBC;
[L971]               __tmp__stopped_HBC := stopped_HBC;
[L972]               __tmp__owner_HBC := owner_HBC;
[L973]               __tmp__totalBurned_HBC := totalBurned_HBC;
[L974]               __tmp__balances_HBC := balances_HBC;
[L975]               __tmp__allowed_HBC := allowed_HBC;
[L976]               __tmp__forbiddenAddresses_HBC := forbiddenAddresses_HBC;
[L977]   CALL        call __ret_0_ := transfer~address~uint256_HBC__fail(this, msgsender_MSG, msgvalue_MSG, _address_s750, _tokens_s750);
[L2879]  COND FALSE  !(!!__tmp__stopped_HBC[this])
[L2883]              __var_12 := null;
[L2884]  COND FALSE  !(!(_address_s750 != null))
[L2888]  COND FALSE  !(!(__tmp__forbiddenAddresses_HBC[this][msgsender_MSG] != msgsender_MSG))
[L2892]  COND TRUE   !(__tmp__forbiddenAddresses_HBC[this][_address_s750] != _address_s750)
[L2893]              revert := true;
[L977]   RET         call __ret_0_ := transfer~address~uint256_HBC__fail(this, msgsender_MSG, msgvalue_MSG, _address_s750, _tokens_s750);
[L978]               assume revert || gas < 0;
[L4379]  RET         call __ret_0_transfer := transfer~address~uint256_HBC(this, msgsender_MSG, msgvalue_MSG, _address_s750, _tokens_s750);
[L4530]  RET         call CorralChoice_HBC(this);

Loop:
[L4530]  CALL        call CorralChoice_HBC(this);
[L4311]              havoc msgsender_MSG;
[L4312]              havoc msgvalue_MSG;
[L4313]              havoc choice;
[L4314]              havoc __ret_0_totalSupply;
[L4315]              havoc _owner_s433;
[L4316]              havoc __ret_0_balanceOf;
[L4317]              havoc _address_s750;
[L4318]              havoc _tokens_s750;
[L4319]              havoc __ret_0_transfer;
[L4320]              havoc _owner_s648;
[L4321]              havoc _spender_s648;
[L4322]              havoc __ret_0_allowance;
[L4323]              havoc _from_s570;
[L4324]              havoc _to_s570;
[L4325]              havoc _value_s570;
[L4326]              havoc __ret_0_transferFrom;
[L4327]              havoc _spender_s612;
[L4328]              havoc _tokens_s612;
[L4329]              havoc __ret_0_approve;
[L4330]              havoc __ret_0_TOKEN_DECIMALS;
[L4331]              havoc __ret_0_name;
[L4332]              havoc __ret_0_symbol;
[L4333]              havoc __ret_0_totalTokenSupply;
[L4334]              havoc __ret_0_decimals;
[L4335]              havoc __ret_0_stopped;
[L4336]              havoc __ret_0_owner;
[L4337]              havoc __ret_0_totalBurned;
[L4338]              havoc arg951_s0;
[L4339]              havoc __ret_0_balances;
[L4340]              havoc _newAddr_s337;
[L4341]              havoc _newAddr_s350;
[L4342]              havoc _value_s413;
[L4343]              havoc __ret_0_burn;
[L4344]              havoc _newOwner_s812;
[L4345]              havoc _spender_s881;
[L4346]              havoc _addedValue_s881;
[L4347]              havoc success_s881;
[L4348]              havoc _spender_s948;
[L4349]              havoc _subtractedValue_s948;
[L4350]              havoc success_s948;
[L4351]              havoc tmpNow;
[L4352]              havoc gas;
[L4353]              assume gas > 4000000 && gas <= 8000000;
[L4354]              tmpNow := now;
[L4355]              havoc now;
[L4356]              assume now > tmpNow;
[L4357]              assume msgsender_MSG != null;
[L4358]              assume DType[msgsender_MSG] != SafeMath;
[L4359]              assume DType[msgsender_MSG] != ERC20Interface;
[L4360]              assume DType[msgsender_MSG] != HBC;
[L4361]              Alloc[msgsender_MSG] := true;
[L4362]  COND FALSE  !(choice == 24)
[L4368]  COND FALSE  !(choice == 23)
[L4374]  COND TRUE   choice == 22
[L4375]              gas := gas - 21000;
[L4376]  COND TRUE   gas >= 0
[L4377]              assume _tokens_s750 >= 0 && _tokens_s750 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4378]              assume msgvalue_MSG == 0;
[L4379]  CALL        call __ret_0_transfer := transfer~address~uint256_HBC(this, msgsender_MSG, msgvalue_MSG, _address_s750, _tokens_s750);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == _address_s750 && _tokens_s750 <= balances_HBC[this][msgsender_MSG]) && _tokens_s750 >= 0) && _tokens_s750 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_HBC[this][_address_s750] >= 0) && balances_HBC[this][_address_s750] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_HBC[this][msgsender_MSG] >= 0) && balances_HBC[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_HBC0 := true;
[L2]                 call_transfer_HBC0 := false;
[L2]                 revert := revert_hold;
[L951]               havoc __exception;
[L952]               revert := false;
[L953]   COND TRUE   __exception
[L954]               __tmp__Balance := Balance;
[L955]               __tmp__DType := DType;
[L956]               __tmp__Alloc := Alloc;
[L957]               __tmp__balance_ADDR := balance_ADDR;
[L958]               __tmp__M_Ref_int := M_Ref_int;
[L959]               __tmp__sum_balances0 := sum_balances0;
[L960]               __tmp__alloc_allowed_HBC_lvl0 := alloc_allowed_HBC_lvl0;
[L961]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L962]               __tmp__sum_allowed1 := sum_allowed1;
[L963]               __tmp__sum_forbiddenAddresses2 := sum_forbiddenAddresses2;
[L964]               __tmp__Length := Length;
[L965]               __tmp__now := now;
[L966]               __tmp__TOKEN_DECIMALS_HBC := TOKEN_DECIMALS_HBC;
[L967]               __tmp__name_HBC := name_HBC;
[L968]               __tmp__symbol_HBC := symbol_HBC;
[L969]               __tmp__totalTokenSupply_HBC := totalTokenSupply_HBC;
[L970]               __tmp__decimals_HBC := decimals_HBC;
[L971]               __tmp__stopped_HBC := stopped_HBC;
[L972]               __tmp__owner_HBC := owner_HBC;
[L973]               __tmp__totalBurned_HBC := totalBurned_HBC;
[L974]               __tmp__balances_HBC := balances_HBC;
[L975]               __tmp__allowed_HBC := allowed_HBC;
[L976]               __tmp__forbiddenAddresses_HBC := forbiddenAddresses_HBC;
[L977]   CALL        call __ret_0_ := transfer~address~uint256_HBC__fail(this, msgsender_MSG, msgvalue_MSG, _address_s750, _tokens_s750);
[L2879]  COND FALSE  !(!!__tmp__stopped_HBC[this])
[L2883]              __var_12 := null;
[L2884]  COND FALSE  !(!(_address_s750 != null))
[L2888]  COND FALSE  !(!(__tmp__forbiddenAddresses_HBC[this][msgsender_MSG] != msgsender_MSG))
[L2892]  COND TRUE   !(__tmp__forbiddenAddresses_HBC[this][_address_s750] != _address_s750)
[L2893]              revert := true;
[L977]   RET         call __ret_0_ := transfer~address~uint256_HBC__fail(this, msgsender_MSG, msgvalue_MSG, _address_s750, _tokens_s750);
[L978]               assume revert || gas < 0;
[L4379]  RET         call __ret_0_transfer := transfer~address~uint256_HBC(this, msgsender_MSG, msgvalue_MSG, _address_s750, _tokens_s750);
[L4530]  RET         call CorralChoice_HBC(this);

[2020-11-25 17:39:33,206 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 17:39:33,206 INFO  L82        PathProgramCache]: Analyzing trace with hash 1827544903, now seen corresponding path program 1 times
[2020-11-25 17:39:33,207 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 17:39:33,213 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 17:39:33,232 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 17:39:33,232 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 17:39:33,232 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [5] imperfect sequences [] total 5
[2020-11-25 17:39:33,233 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 17:39:33,233 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 5 interpolants.
[2020-11-25 17:39:33,233 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=8, Invalid=12, Unknown=0, NotChecked=0, Total=20
[2020-11-25 17:39:33,233 INFO  L87              Difference]: Start difference. First operand 3594 states and 3934 transitions. cyclomatic complexity: 348 Second operand 5 states.
[2020-11-25 17:39:33,272 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 17:39:33,272 INFO  L93              Difference]: Finished difference Result 3624 states and 3967 transitions.
[2020-11-25 17:39:33,272 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 5 states. 
[2020-11-25 17:39:33,272 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 3624 states and 3967 transitions.
[2020-11-25 17:39:33,278 INFO  L131   ngComponentsAnalysis]: Automaton has 4 accepting balls. 8
[2020-11-25 17:39:33,285 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 3624 states to 3624 states and 3967 transitions.
[2020-11-25 17:39:33,285 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1145
[2020-11-25 17:39:33,285 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1145
[2020-11-25 17:39:33,285 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 3624 states and 3967 transitions.
[2020-11-25 17:39:33,287 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 17:39:33,287 INFO  L728         BuchiCegarLoop]: Abstraction has 3624 states and 3967 transitions.
[2020-11-25 17:39:33,290 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 3624 states and 3967 transitions.
[2020-11-25 17:39:33,307 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 3624 to 3594.
[2020-11-25 17:39:33,307 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 3594 states.
[2020-11-25 17:39:33,310 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 3594 states to 3594 states and 3934 transitions.
[2020-11-25 17:39:33,310 INFO  L751         BuchiCegarLoop]: Abstraction has 3594 states and 3934 transitions.
[2020-11-25 17:39:33,310 INFO  L631         BuchiCegarLoop]: Abstraction has 3594 states and 3934 transitions.
[2020-11-25 17:39:33,310 INFO  L445         BuchiCegarLoop]: ======== Iteration 8============
[2020-11-25 17:39:33,310 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 3594 states and 3934 transitions.
[2020-11-25 17:39:33,314 INFO  L131   ngComponentsAnalysis]: Automaton has 4 accepting balls. 8
[2020-11-25 17:39:33,314 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 17:39:33,314 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 17:39:33,315 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 17:39:33,315 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_HBC0 := false;
[L2]                 call_transfer_HBC0 := false;
[L2]     CALL        call main();
[L4520]              assume null == 0;
[L4521]  CALL        call this := FreshRefGenerator__success();
[L2236]              havoc newRef;
[L2237]              assume Alloc[newRef] == false;
[L2238]              Alloc[newRef] := true;
[L2239]              assume newRef != null;
[L4521]  RET         call this := FreshRefGenerator__success();
[L4522]              assume now >= 0;
[L4523]              assume DType[this] == HBC;
[L4524]              assume msgvalue_MSG == 0;
[L4525]              gas := gas - 53000;
[L4526]  CALL        call HBC_HBC(this, msgsender_MSG, msgvalue_MSG);
[L254]               havoc __exception;
[L255]               revert := false;
[L256]   COND FALSE  !(__exception)
[L283]   CALL        call HBC_HBC__success(this, msgsender_MSG, msgvalue_MSG);
[L2495]  CALL        call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L2424]  CALL        call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2409]              assume msgsender_MSG != null;
[L2410]              Balance[this] := 0;
[L2424]  RET         call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2425]  COND FALSE  !(revert)
[L2495]  RET         call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L2496]  COND FALSE  !(revert)
[L2499]  CALL        call HBC_HBC_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2458]              assume msgsender_MSG != null;
[L2459]              Balance[this] := 0;
[L2460]              TOKEN_DECIMALS_HBC[this] := 1000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2461]              name_HBC[this] := 1908934807;
[L2462]              symbol_HBC[this] := -845215461;
[L2463]              totalTokenSupply_HBC[this] := 10000000000 * TOKEN_DECIMALS_HBC[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2464]              decimals_HBC[this] := 18;
[L2465]              stopped_HBC[this] := false;
[L2466]              owner_HBC[this] := null;
[L2467]              totalBurned_HBC[this] := 0;
[L2468]              balances_HBC[this] := zeroRefintArr();
[L2469]              sum_balances0[this] := 0;
[L2470]              allowed_HBC[this] := zeroRefRefintArr();
[L2471]              sum_allowed1[this] := 0;
[L2472]              forbiddenAddresses_HBC[this] := zeroRefRefArr();
[L2474]              owner_HBC[this] := msgsender_MSG;
[L2475]              sum_balances0[this] := sum_balances0[this] - balances_HBC[this][owner_HBC[this]];
[L2476]              balances_HBC[this][owner_HBC[this]] := totalTokenSupply_HBC[this];
[L2477]              sum_balances0[this] := sum_balances0[this] + balances_HBC[this][owner_HBC[this]];
[L2478]              assert { :EventEmitted "Transfer_HBC" } true;
[L2499]  RET         call HBC_HBC_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2500]  COND FALSE  !(revert)
[L283]   RET         call HBC_HBC__success(this, msgsender_MSG, msgvalue_MSG);
[L284]               assume !revert && gas >= 0;
[L4526]  RET         call HBC_HBC(this, msgsender_MSG, msgvalue_MSG);
[L4527]              assume !revert && gas >= 0;
[L4530]  CALL        call CorralChoice_HBC(this);
[L4311]              havoc msgsender_MSG;
[L4312]              havoc msgvalue_MSG;
[L4313]              havoc choice;
[L4314]              havoc __ret_0_totalSupply;
[L4315]              havoc _owner_s433;
[L4316]              havoc __ret_0_balanceOf;
[L4317]              havoc _address_s750;
[L4318]              havoc _tokens_s750;
[L4319]              havoc __ret_0_transfer;
[L4320]              havoc _owner_s648;
[L4321]              havoc _spender_s648;
[L4322]              havoc __ret_0_allowance;
[L4323]              havoc _from_s570;
[L4324]              havoc _to_s570;
[L4325]              havoc _value_s570;
[L4326]              havoc __ret_0_transferFrom;
[L4327]              havoc _spender_s612;
[L4328]              havoc _tokens_s612;
[L4329]              havoc __ret_0_approve;
[L4330]              havoc __ret_0_TOKEN_DECIMALS;
[L4331]              havoc __ret_0_name;
[L4332]              havoc __ret_0_symbol;
[L4333]              havoc __ret_0_totalTokenSupply;
[L4334]              havoc __ret_0_decimals;
[L4335]              havoc __ret_0_stopped;
[L4336]              havoc __ret_0_owner;
[L4337]              havoc __ret_0_totalBurned;
[L4338]              havoc arg951_s0;
[L4339]              havoc __ret_0_balances;
[L4340]              havoc _newAddr_s337;
[L4341]              havoc _newAddr_s350;
[L4342]              havoc _value_s413;
[L4343]              havoc __ret_0_burn;
[L4344]              havoc _newOwner_s812;
[L4345]              havoc _spender_s881;
[L4346]              havoc _addedValue_s881;
[L4347]              havoc success_s881;
[L4348]              havoc _spender_s948;
[L4349]              havoc _subtractedValue_s948;
[L4350]              havoc success_s948;
[L4351]              havoc tmpNow;
[L4352]              havoc gas;
[L4353]              assume gas > 4000000 && gas <= 8000000;
[L4354]              tmpNow := now;
[L4355]              havoc now;
[L4356]              assume now > tmpNow;
[L4357]              assume msgsender_MSG != null;
[L4358]              assume DType[msgsender_MSG] != SafeMath;
[L4359]              assume DType[msgsender_MSG] != ERC20Interface;
[L4360]              assume DType[msgsender_MSG] != HBC;
[L4361]              Alloc[msgsender_MSG] := true;
[L4362]  COND FALSE  !(choice == 24)
[L4368]  COND FALSE  !(choice == 23)
[L4374]  COND TRUE   choice == 22
[L4375]              gas := gas - 21000;
[L4376]  COND TRUE   gas >= 0
[L4377]              assume _tokens_s750 >= 0 && _tokens_s750 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4378]              assume msgvalue_MSG == 0;
[L4379]  CALL        call __ret_0_transfer := transfer~address~uint256_HBC(this, msgsender_MSG, msgvalue_MSG, _address_s750, _tokens_s750);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == _address_s750 && _tokens_s750 <= balances_HBC[this][msgsender_MSG]) && _tokens_s750 >= 0) && _tokens_s750 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_HBC[this][_address_s750] >= 0) && balances_HBC[this][_address_s750] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_HBC[this][msgsender_MSG] >= 0) && balances_HBC[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_HBC0 := true;
[L2]                 call_transfer_HBC0 := false;
[L2]                 revert := revert_hold;
[L951]               havoc __exception;
[L952]               revert := false;
[L953]   COND TRUE   __exception
[L954]               __tmp__Balance := Balance;
[L955]               __tmp__DType := DType;
[L956]               __tmp__Alloc := Alloc;
[L957]               __tmp__balance_ADDR := balance_ADDR;
[L958]               __tmp__M_Ref_int := M_Ref_int;
[L959]               __tmp__sum_balances0 := sum_balances0;
[L960]               __tmp__alloc_allowed_HBC_lvl0 := alloc_allowed_HBC_lvl0;
[L961]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L962]               __tmp__sum_allowed1 := sum_allowed1;
[L963]               __tmp__sum_forbiddenAddresses2 := sum_forbiddenAddresses2;
[L964]               __tmp__Length := Length;
[L965]               __tmp__now := now;
[L966]               __tmp__TOKEN_DECIMALS_HBC := TOKEN_DECIMALS_HBC;
[L967]               __tmp__name_HBC := name_HBC;
[L968]               __tmp__symbol_HBC := symbol_HBC;
[L969]               __tmp__totalTokenSupply_HBC := totalTokenSupply_HBC;
[L970]               __tmp__decimals_HBC := decimals_HBC;
[L971]               __tmp__stopped_HBC := stopped_HBC;
[L972]               __tmp__owner_HBC := owner_HBC;
[L973]               __tmp__totalBurned_HBC := totalBurned_HBC;
[L974]               __tmp__balances_HBC := balances_HBC;
[L975]               __tmp__allowed_HBC := allowed_HBC;
[L976]               __tmp__forbiddenAddresses_HBC := forbiddenAddresses_HBC;
[L977]   CALL        call __ret_0_ := transfer~address~uint256_HBC__fail(this, msgsender_MSG, msgvalue_MSG, _address_s750, _tokens_s750);
[L2879]  COND FALSE  !(!!__tmp__stopped_HBC[this])
[L2883]              __var_12 := null;
[L2884]  COND FALSE  !(!(_address_s750 != null))
[L2888]  COND FALSE  !(!(__tmp__forbiddenAddresses_HBC[this][msgsender_MSG] != msgsender_MSG))
[L2892]  COND FALSE  !(!(__tmp__forbiddenAddresses_HBC[this][_address_s750] != _address_s750))
[L2896]  COND TRUE   _tokens_s750 == 0
[L2897]              __ret_0_ := true;
[L977]   RET         call __ret_0_ := transfer~address~uint256_HBC__fail(this, msgsender_MSG, msgvalue_MSG, _address_s750, _tokens_s750);
[L978]               assume revert || gas < 0;
[L4379]  RET         call __ret_0_transfer := transfer~address~uint256_HBC(this, msgsender_MSG, msgvalue_MSG, _address_s750, _tokens_s750);
[L4530]  RET         call CorralChoice_HBC(this);

Loop:
[L4530]  CALL        call CorralChoice_HBC(this);
[L4311]              havoc msgsender_MSG;
[L4312]              havoc msgvalue_MSG;
[L4313]              havoc choice;
[L4314]              havoc __ret_0_totalSupply;
[L4315]              havoc _owner_s433;
[L4316]              havoc __ret_0_balanceOf;
[L4317]              havoc _address_s750;
[L4318]              havoc _tokens_s750;
[L4319]              havoc __ret_0_transfer;
[L4320]              havoc _owner_s648;
[L4321]              havoc _spender_s648;
[L4322]              havoc __ret_0_allowance;
[L4323]              havoc _from_s570;
[L4324]              havoc _to_s570;
[L4325]              havoc _value_s570;
[L4326]              havoc __ret_0_transferFrom;
[L4327]              havoc _spender_s612;
[L4328]              havoc _tokens_s612;
[L4329]              havoc __ret_0_approve;
[L4330]              havoc __ret_0_TOKEN_DECIMALS;
[L4331]              havoc __ret_0_name;
[L4332]              havoc __ret_0_symbol;
[L4333]              havoc __ret_0_totalTokenSupply;
[L4334]              havoc __ret_0_decimals;
[L4335]              havoc __ret_0_stopped;
[L4336]              havoc __ret_0_owner;
[L4337]              havoc __ret_0_totalBurned;
[L4338]              havoc arg951_s0;
[L4339]              havoc __ret_0_balances;
[L4340]              havoc _newAddr_s337;
[L4341]              havoc _newAddr_s350;
[L4342]              havoc _value_s413;
[L4343]              havoc __ret_0_burn;
[L4344]              havoc _newOwner_s812;
[L4345]              havoc _spender_s881;
[L4346]              havoc _addedValue_s881;
[L4347]              havoc success_s881;
[L4348]              havoc _spender_s948;
[L4349]              havoc _subtractedValue_s948;
[L4350]              havoc success_s948;
[L4351]              havoc tmpNow;
[L4352]              havoc gas;
[L4353]              assume gas > 4000000 && gas <= 8000000;
[L4354]              tmpNow := now;
[L4355]              havoc now;
[L4356]              assume now > tmpNow;
[L4357]              assume msgsender_MSG != null;
[L4358]              assume DType[msgsender_MSG] != SafeMath;
[L4359]              assume DType[msgsender_MSG] != ERC20Interface;
[L4360]              assume DType[msgsender_MSG] != HBC;
[L4361]              Alloc[msgsender_MSG] := true;
[L4362]  COND FALSE  !(choice == 24)
[L4368]  COND FALSE  !(choice == 23)
[L4374]  COND TRUE   choice == 22
[L4375]              gas := gas - 21000;
[L4376]  COND TRUE   gas >= 0
[L4377]              assume _tokens_s750 >= 0 && _tokens_s750 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4378]              assume msgvalue_MSG == 0;
[L4379]  CALL        call __ret_0_transfer := transfer~address~uint256_HBC(this, msgsender_MSG, msgvalue_MSG, _address_s750, _tokens_s750);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == _address_s750 && _tokens_s750 <= balances_HBC[this][msgsender_MSG]) && _tokens_s750 >= 0) && _tokens_s750 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_HBC[this][_address_s750] >= 0) && balances_HBC[this][_address_s750] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_HBC[this][msgsender_MSG] >= 0) && balances_HBC[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_HBC0 := true;
[L2]                 call_transfer_HBC0 := false;
[L2]                 revert := revert_hold;
[L951]               havoc __exception;
[L952]               revert := false;
[L953]   COND TRUE   __exception
[L954]               __tmp__Balance := Balance;
[L955]               __tmp__DType := DType;
[L956]               __tmp__Alloc := Alloc;
[L957]               __tmp__balance_ADDR := balance_ADDR;
[L958]               __tmp__M_Ref_int := M_Ref_int;
[L959]               __tmp__sum_balances0 := sum_balances0;
[L960]               __tmp__alloc_allowed_HBC_lvl0 := alloc_allowed_HBC_lvl0;
[L961]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L962]               __tmp__sum_allowed1 := sum_allowed1;
[L963]               __tmp__sum_forbiddenAddresses2 := sum_forbiddenAddresses2;
[L964]               __tmp__Length := Length;
[L965]               __tmp__now := now;
[L966]               __tmp__TOKEN_DECIMALS_HBC := TOKEN_DECIMALS_HBC;
[L967]               __tmp__name_HBC := name_HBC;
[L968]               __tmp__symbol_HBC := symbol_HBC;
[L969]               __tmp__totalTokenSupply_HBC := totalTokenSupply_HBC;
[L970]               __tmp__decimals_HBC := decimals_HBC;
[L971]               __tmp__stopped_HBC := stopped_HBC;
[L972]               __tmp__owner_HBC := owner_HBC;
[L973]               __tmp__totalBurned_HBC := totalBurned_HBC;
[L974]               __tmp__balances_HBC := balances_HBC;
[L975]               __tmp__allowed_HBC := allowed_HBC;
[L976]               __tmp__forbiddenAddresses_HBC := forbiddenAddresses_HBC;
[L977]   CALL        call __ret_0_ := transfer~address~uint256_HBC__fail(this, msgsender_MSG, msgvalue_MSG, _address_s750, _tokens_s750);
[L2879]  COND FALSE  !(!!__tmp__stopped_HBC[this])
[L2883]              __var_12 := null;
[L2884]  COND FALSE  !(!(_address_s750 != null))
[L2888]  COND FALSE  !(!(__tmp__forbiddenAddresses_HBC[this][msgsender_MSG] != msgsender_MSG))
[L2892]  COND FALSE  !(!(__tmp__forbiddenAddresses_HBC[this][_address_s750] != _address_s750))
[L2896]  COND TRUE   _tokens_s750 == 0
[L2897]              __ret_0_ := true;
[L977]   RET         call __ret_0_ := transfer~address~uint256_HBC__fail(this, msgsender_MSG, msgvalue_MSG, _address_s750, _tokens_s750);
[L978]               assume revert || gas < 0;
[L4379]  RET         call __ret_0_transfer := transfer~address~uint256_HBC(this, msgsender_MSG, msgvalue_MSG, _address_s750, _tokens_s750);
[L4530]  RET         call CorralChoice_HBC(this);

[2020-11-25 17:39:33,317 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 17:39:33,317 INFO  L82        PathProgramCache]: Analyzing trace with hash 355129663, now seen corresponding path program 1 times
[2020-11-25 17:39:33,318 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 17:39:33,324 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 17:39:33,341 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 17:39:33,341 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 17:39:33,341 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [6] imperfect sequences [] total 6
[2020-11-25 17:39:33,341 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 17:39:33,341 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 6 interpolants.
[2020-11-25 17:39:33,341 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=10, Invalid=20, Unknown=0, NotChecked=0, Total=30
[2020-11-25 17:39:33,341 INFO  L87              Difference]: Start difference. First operand 3594 states and 3934 transitions. cyclomatic complexity: 348 Second operand 6 states.
[2020-11-25 17:39:33,833 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 17:39:33,833 INFO  L93              Difference]: Finished difference Result 4490 states and 5152 transitions.
[2020-11-25 17:39:33,833 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 10 states. 
[2020-11-25 17:39:33,833 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 4490 states and 5152 transitions.
[2020-11-25 17:39:33,844 INFO  L131   ngComponentsAnalysis]: Automaton has 4 accepting balls. 32
[2020-11-25 17:39:33,857 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 4490 states to 3526 states and 4181 transitions.
[2020-11-25 17:39:33,857 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 917
[2020-11-25 17:39:33,858 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 917
[2020-11-25 17:39:33,858 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 3526 states and 4181 transitions.
[2020-11-25 17:39:33,861 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 17:39:33,861 INFO  L728         BuchiCegarLoop]: Abstraction has 3526 states and 4181 transitions.
[2020-11-25 17:39:33,863 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 3526 states and 4181 transitions.
[2020-11-25 17:39:33,889 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 3526 to 2765.
[2020-11-25 17:39:33,889 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 2765 states.
[2020-11-25 17:39:33,891 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 2765 states to 2765 states and 3053 transitions.
[2020-11-25 17:39:33,892 INFO  L751         BuchiCegarLoop]: Abstraction has 2765 states and 3053 transitions.
[2020-11-25 17:39:33,892 INFO  L631         BuchiCegarLoop]: Abstraction has 2765 states and 3053 transitions.
[2020-11-25 17:39:33,892 INFO  L445         BuchiCegarLoop]: ======== Iteration 9============
[2020-11-25 17:39:33,892 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2765 states and 3053 transitions.
[2020-11-25 17:39:33,894 INFO  L131   ngComponentsAnalysis]: Automaton has 4 accepting balls. 8
[2020-11-25 17:39:33,894 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 17:39:33,894 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 17:39:33,895 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 17:39:33,895 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_HBC0 := false;
[L2]                 call_transfer_HBC0 := false;
[L2]     CALL        call main();
[L4520]              assume null == 0;
[L4521]  CALL        call this := FreshRefGenerator__success();
[L2236]              havoc newRef;
[L2237]              assume Alloc[newRef] == false;
[L2238]              Alloc[newRef] := true;
[L2239]              assume newRef != null;
[L4521]  RET         call this := FreshRefGenerator__success();
[L4522]              assume now >= 0;
[L4523]              assume DType[this] == HBC;
[L4524]              assume msgvalue_MSG == 0;
[L4525]              gas := gas - 53000;
[L4526]  CALL        call HBC_HBC(this, msgsender_MSG, msgvalue_MSG);
[L254]               havoc __exception;
[L255]               revert := false;
[L256]   COND FALSE  !(__exception)
[L283]   CALL        call HBC_HBC__success(this, msgsender_MSG, msgvalue_MSG);
[L2495]  CALL        call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L2424]  CALL        call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2409]              assume msgsender_MSG != null;
[L2410]              Balance[this] := 0;
[L2424]  RET         call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2425]  COND FALSE  !(revert)
[L2495]  RET         call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L2496]  COND FALSE  !(revert)
[L2499]  CALL        call HBC_HBC_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2458]              assume msgsender_MSG != null;
[L2459]              Balance[this] := 0;
[L2460]              TOKEN_DECIMALS_HBC[this] := 1000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2461]              name_HBC[this] := 1908934807;
[L2462]              symbol_HBC[this] := -845215461;
[L2463]              totalTokenSupply_HBC[this] := 10000000000 * TOKEN_DECIMALS_HBC[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2464]              decimals_HBC[this] := 18;
[L2465]              stopped_HBC[this] := false;
[L2466]              owner_HBC[this] := null;
[L2467]              totalBurned_HBC[this] := 0;
[L2468]              balances_HBC[this] := zeroRefintArr();
[L2469]              sum_balances0[this] := 0;
[L2470]              allowed_HBC[this] := zeroRefRefintArr();
[L2471]              sum_allowed1[this] := 0;
[L2472]              forbiddenAddresses_HBC[this] := zeroRefRefArr();
[L2474]              owner_HBC[this] := msgsender_MSG;
[L2475]              sum_balances0[this] := sum_balances0[this] - balances_HBC[this][owner_HBC[this]];
[L2476]              balances_HBC[this][owner_HBC[this]] := totalTokenSupply_HBC[this];
[L2477]              sum_balances0[this] := sum_balances0[this] + balances_HBC[this][owner_HBC[this]];
[L2478]              assert { :EventEmitted "Transfer_HBC" } true;
[L2499]  RET         call HBC_HBC_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2500]  COND FALSE  !(revert)
[L283]   RET         call HBC_HBC__success(this, msgsender_MSG, msgvalue_MSG);
[L284]               assume !revert && gas >= 0;
[L4526]  RET         call HBC_HBC(this, msgsender_MSG, msgvalue_MSG);
[L4527]              assume !revert && gas >= 0;
[L4530]  CALL        call CorralChoice_HBC(this);
[L4311]              havoc msgsender_MSG;
[L4312]              havoc msgvalue_MSG;
[L4313]              havoc choice;
[L4314]              havoc __ret_0_totalSupply;
[L4315]              havoc _owner_s433;
[L4316]              havoc __ret_0_balanceOf;
[L4317]              havoc _address_s750;
[L4318]              havoc _tokens_s750;
[L4319]              havoc __ret_0_transfer;
[L4320]              havoc _owner_s648;
[L4321]              havoc _spender_s648;
[L4322]              havoc __ret_0_allowance;
[L4323]              havoc _from_s570;
[L4324]              havoc _to_s570;
[L4325]              havoc _value_s570;
[L4326]              havoc __ret_0_transferFrom;
[L4327]              havoc _spender_s612;
[L4328]              havoc _tokens_s612;
[L4329]              havoc __ret_0_approve;
[L4330]              havoc __ret_0_TOKEN_DECIMALS;
[L4331]              havoc __ret_0_name;
[L4332]              havoc __ret_0_symbol;
[L4333]              havoc __ret_0_totalTokenSupply;
[L4334]              havoc __ret_0_decimals;
[L4335]              havoc __ret_0_stopped;
[L4336]              havoc __ret_0_owner;
[L4337]              havoc __ret_0_totalBurned;
[L4338]              havoc arg951_s0;
[L4339]              havoc __ret_0_balances;
[L4340]              havoc _newAddr_s337;
[L4341]              havoc _newAddr_s350;
[L4342]              havoc _value_s413;
[L4343]              havoc __ret_0_burn;
[L4344]              havoc _newOwner_s812;
[L4345]              havoc _spender_s881;
[L4346]              havoc _addedValue_s881;
[L4347]              havoc success_s881;
[L4348]              havoc _spender_s948;
[L4349]              havoc _subtractedValue_s948;
[L4350]              havoc success_s948;
[L4351]              havoc tmpNow;
[L4352]              havoc gas;
[L4353]              assume gas > 4000000 && gas <= 8000000;
[L4354]              tmpNow := now;
[L4355]              havoc now;
[L4356]              assume now > tmpNow;
[L4357]              assume msgsender_MSG != null;
[L4358]              assume DType[msgsender_MSG] != SafeMath;
[L4359]              assume DType[msgsender_MSG] != ERC20Interface;
[L4360]              assume DType[msgsender_MSG] != HBC;
[L4361]              Alloc[msgsender_MSG] := true;
[L4362]  COND FALSE  !(choice == 24)
[L4368]  COND FALSE  !(choice == 23)
[L4374]  COND TRUE   choice == 22
[L4375]              gas := gas - 21000;
[L4376]  COND TRUE   gas >= 0
[L4377]              assume _tokens_s750 >= 0 && _tokens_s750 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4378]              assume msgvalue_MSG == 0;
[L4379]  CALL        call __ret_0_transfer := transfer~address~uint256_HBC(this, msgsender_MSG, msgvalue_MSG, _address_s750, _tokens_s750);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == _address_s750 && _tokens_s750 <= balances_HBC[this][msgsender_MSG]) && _tokens_s750 >= 0) && _tokens_s750 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_HBC[this][_address_s750] >= 0) && balances_HBC[this][_address_s750] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_HBC[this][msgsender_MSG] >= 0) && balances_HBC[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_HBC0 := true;
[L2]                 call_transfer_HBC0 := false;
[L2]                 revert := revert_hold;
[L951]               havoc __exception;
[L952]               revert := false;
[L953]   COND TRUE   __exception
[L954]               __tmp__Balance := Balance;
[L955]               __tmp__DType := DType;
[L956]               __tmp__Alloc := Alloc;
[L957]               __tmp__balance_ADDR := balance_ADDR;
[L958]               __tmp__M_Ref_int := M_Ref_int;
[L959]               __tmp__sum_balances0 := sum_balances0;
[L960]               __tmp__alloc_allowed_HBC_lvl0 := alloc_allowed_HBC_lvl0;
[L961]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L962]               __tmp__sum_allowed1 := sum_allowed1;
[L963]               __tmp__sum_forbiddenAddresses2 := sum_forbiddenAddresses2;
[L964]               __tmp__Length := Length;
[L965]               __tmp__now := now;
[L966]               __tmp__TOKEN_DECIMALS_HBC := TOKEN_DECIMALS_HBC;
[L967]               __tmp__name_HBC := name_HBC;
[L968]               __tmp__symbol_HBC := symbol_HBC;
[L969]               __tmp__totalTokenSupply_HBC := totalTokenSupply_HBC;
[L970]               __tmp__decimals_HBC := decimals_HBC;
[L971]               __tmp__stopped_HBC := stopped_HBC;
[L972]               __tmp__owner_HBC := owner_HBC;
[L973]               __tmp__totalBurned_HBC := totalBurned_HBC;
[L974]               __tmp__balances_HBC := balances_HBC;
[L975]               __tmp__allowed_HBC := allowed_HBC;
[L976]               __tmp__forbiddenAddresses_HBC := forbiddenAddresses_HBC;
[L977]   CALL        call __ret_0_ := transfer~address~uint256_HBC__fail(this, msgsender_MSG, msgvalue_MSG, _address_s750, _tokens_s750);
[L2879]  COND FALSE  !(!!__tmp__stopped_HBC[this])
[L2883]              __var_12 := null;
[L2884]  COND FALSE  !(!(_address_s750 != null))
[L2888]  COND FALSE  !(!(__tmp__forbiddenAddresses_HBC[this][msgsender_MSG] != msgsender_MSG))
[L2892]  COND FALSE  !(!(__tmp__forbiddenAddresses_HBC[this][_address_s750] != _address_s750))
[L2896]  COND FALSE  !(_tokens_s750 == 0)
[L2900]  COND TRUE   !(__tmp__balances_HBC[this][msgsender_MSG] >= _tokens_s750)
[L2901]              revert := true;
[L977]   RET         call __ret_0_ := transfer~address~uint256_HBC__fail(this, msgsender_MSG, msgvalue_MSG, _address_s750, _tokens_s750);
[L978]               assume revert || gas < 0;
[L4379]  RET         call __ret_0_transfer := transfer~address~uint256_HBC(this, msgsender_MSG, msgvalue_MSG, _address_s750, _tokens_s750);
[L4530]  RET         call CorralChoice_HBC(this);

Loop:
[L4530]  CALL        call CorralChoice_HBC(this);
[L4311]              havoc msgsender_MSG;
[L4312]              havoc msgvalue_MSG;
[L4313]              havoc choice;
[L4314]              havoc __ret_0_totalSupply;
[L4315]              havoc _owner_s433;
[L4316]              havoc __ret_0_balanceOf;
[L4317]              havoc _address_s750;
[L4318]              havoc _tokens_s750;
[L4319]              havoc __ret_0_transfer;
[L4320]              havoc _owner_s648;
[L4321]              havoc _spender_s648;
[L4322]              havoc __ret_0_allowance;
[L4323]              havoc _from_s570;
[L4324]              havoc _to_s570;
[L4325]              havoc _value_s570;
[L4326]              havoc __ret_0_transferFrom;
[L4327]              havoc _spender_s612;
[L4328]              havoc _tokens_s612;
[L4329]              havoc __ret_0_approve;
[L4330]              havoc __ret_0_TOKEN_DECIMALS;
[L4331]              havoc __ret_0_name;
[L4332]              havoc __ret_0_symbol;
[L4333]              havoc __ret_0_totalTokenSupply;
[L4334]              havoc __ret_0_decimals;
[L4335]              havoc __ret_0_stopped;
[L4336]              havoc __ret_0_owner;
[L4337]              havoc __ret_0_totalBurned;
[L4338]              havoc arg951_s0;
[L4339]              havoc __ret_0_balances;
[L4340]              havoc _newAddr_s337;
[L4341]              havoc _newAddr_s350;
[L4342]              havoc _value_s413;
[L4343]              havoc __ret_0_burn;
[L4344]              havoc _newOwner_s812;
[L4345]              havoc _spender_s881;
[L4346]              havoc _addedValue_s881;
[L4347]              havoc success_s881;
[L4348]              havoc _spender_s948;
[L4349]              havoc _subtractedValue_s948;
[L4350]              havoc success_s948;
[L4351]              havoc tmpNow;
[L4352]              havoc gas;
[L4353]              assume gas > 4000000 && gas <= 8000000;
[L4354]              tmpNow := now;
[L4355]              havoc now;
[L4356]              assume now > tmpNow;
[L4357]              assume msgsender_MSG != null;
[L4358]              assume DType[msgsender_MSG] != SafeMath;
[L4359]              assume DType[msgsender_MSG] != ERC20Interface;
[L4360]              assume DType[msgsender_MSG] != HBC;
[L4361]              Alloc[msgsender_MSG] := true;
[L4362]  COND FALSE  !(choice == 24)
[L4368]  COND FALSE  !(choice == 23)
[L4374]  COND TRUE   choice == 22
[L4375]              gas := gas - 21000;
[L4376]  COND TRUE   gas >= 0
[L4377]              assume _tokens_s750 >= 0 && _tokens_s750 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4378]              assume msgvalue_MSG == 0;
[L4379]  CALL        call __ret_0_transfer := transfer~address~uint256_HBC(this, msgsender_MSG, msgvalue_MSG, _address_s750, _tokens_s750);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == _address_s750 && _tokens_s750 <= balances_HBC[this][msgsender_MSG]) && _tokens_s750 >= 0) && _tokens_s750 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_HBC[this][_address_s750] >= 0) && balances_HBC[this][_address_s750] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_HBC[this][msgsender_MSG] >= 0) && balances_HBC[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_HBC0 := true;
[L2]                 call_transfer_HBC0 := false;
[L2]                 revert := revert_hold;
[L951]               havoc __exception;
[L952]               revert := false;
[L953]   COND TRUE   __exception
[L954]               __tmp__Balance := Balance;
[L955]               __tmp__DType := DType;
[L956]               __tmp__Alloc := Alloc;
[L957]               __tmp__balance_ADDR := balance_ADDR;
[L958]               __tmp__M_Ref_int := M_Ref_int;
[L959]               __tmp__sum_balances0 := sum_balances0;
[L960]               __tmp__alloc_allowed_HBC_lvl0 := alloc_allowed_HBC_lvl0;
[L961]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L962]               __tmp__sum_allowed1 := sum_allowed1;
[L963]               __tmp__sum_forbiddenAddresses2 := sum_forbiddenAddresses2;
[L964]               __tmp__Length := Length;
[L965]               __tmp__now := now;
[L966]               __tmp__TOKEN_DECIMALS_HBC := TOKEN_DECIMALS_HBC;
[L967]               __tmp__name_HBC := name_HBC;
[L968]               __tmp__symbol_HBC := symbol_HBC;
[L969]               __tmp__totalTokenSupply_HBC := totalTokenSupply_HBC;
[L970]               __tmp__decimals_HBC := decimals_HBC;
[L971]               __tmp__stopped_HBC := stopped_HBC;
[L972]               __tmp__owner_HBC := owner_HBC;
[L973]               __tmp__totalBurned_HBC := totalBurned_HBC;
[L974]               __tmp__balances_HBC := balances_HBC;
[L975]               __tmp__allowed_HBC := allowed_HBC;
[L976]               __tmp__forbiddenAddresses_HBC := forbiddenAddresses_HBC;
[L977]   CALL        call __ret_0_ := transfer~address~uint256_HBC__fail(this, msgsender_MSG, msgvalue_MSG, _address_s750, _tokens_s750);
[L2879]  COND FALSE  !(!!__tmp__stopped_HBC[this])
[L2883]              __var_12 := null;
[L2884]  COND FALSE  !(!(_address_s750 != null))
[L2888]  COND FALSE  !(!(__tmp__forbiddenAddresses_HBC[this][msgsender_MSG] != msgsender_MSG))
[L2892]  COND FALSE  !(!(__tmp__forbiddenAddresses_HBC[this][_address_s750] != _address_s750))
[L2896]  COND FALSE  !(_tokens_s750 == 0)
[L2900]  COND TRUE   !(__tmp__balances_HBC[this][msgsender_MSG] >= _tokens_s750)
[L2901]              revert := true;
[L977]   RET         call __ret_0_ := transfer~address~uint256_HBC__fail(this, msgsender_MSG, msgvalue_MSG, _address_s750, _tokens_s750);
[L978]               assume revert || gas < 0;
[L4379]  RET         call __ret_0_transfer := transfer~address~uint256_HBC(this, msgsender_MSG, msgvalue_MSG, _address_s750, _tokens_s750);
[L4530]  RET         call CorralChoice_HBC(this);

[2020-11-25 17:39:33,898 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 17:39:33,898 INFO  L82        PathProgramCache]: Analyzing trace with hash -1344149393, now seen corresponding path program 1 times
[2020-11-25 17:39:33,899 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 17:39:33,905 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 17:39:33,930 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 17:39:33,930 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 17:39:33,930 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [6] imperfect sequences [] total 6
[2020-11-25 17:39:33,931 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 17:39:33,931 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 6 interpolants.
[2020-11-25 17:39:33,931 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=9, Invalid=21, Unknown=0, NotChecked=0, Total=30
[2020-11-25 17:39:33,931 INFO  L87              Difference]: Start difference. First operand 2765 states and 3053 transitions. cyclomatic complexity: 296 Second operand 6 states.
[2020-11-25 17:39:34,516 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 17:39:34,517 INFO  L93              Difference]: Finished difference Result 2857 states and 3217 transitions.
[2020-11-25 17:39:34,517 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 7 states. 
[2020-11-25 17:39:34,517 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2857 states and 3217 transitions.
[2020-11-25 17:39:34,523 INFO  L131   ngComponentsAnalysis]: Automaton has 8 accepting balls. 16
[2020-11-25 17:39:34,529 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2857 states to 2857 states and 3217 transitions.
[2020-11-25 17:39:34,529 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 806
[2020-11-25 17:39:34,529 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 806
[2020-11-25 17:39:34,529 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 2857 states and 3217 transitions.
[2020-11-25 17:39:34,531 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 17:39:34,531 INFO  L728         BuchiCegarLoop]: Abstraction has 2857 states and 3217 transitions.
[2020-11-25 17:39:34,534 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 2857 states and 3217 transitions.
[2020-11-25 17:39:34,547 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 2857 to 2765.
[2020-11-25 17:39:34,547 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 2765 states.
[2020-11-25 17:39:34,550 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 2765 states to 2765 states and 3053 transitions.
[2020-11-25 17:39:34,550 INFO  L751         BuchiCegarLoop]: Abstraction has 2765 states and 3053 transitions.
[2020-11-25 17:39:34,550 INFO  L631         BuchiCegarLoop]: Abstraction has 2765 states and 3053 transitions.
[2020-11-25 17:39:34,550 INFO  L445         BuchiCegarLoop]: ======== Iteration 10============
[2020-11-25 17:39:34,550 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2765 states and 3053 transitions.
[2020-11-25 17:39:34,552 INFO  L131   ngComponentsAnalysis]: Automaton has 4 accepting balls. 8
[2020-11-25 17:39:34,553 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 17:39:34,553 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 17:39:34,553 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 17:39:34,553 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_HBC0 := false;
[L2]                 call_transfer_HBC0 := false;
[L2]     CALL        call main();
[L4520]              assume null == 0;
[L4521]  CALL        call this := FreshRefGenerator__success();
[L2236]              havoc newRef;
[L2237]              assume Alloc[newRef] == false;
[L2238]              Alloc[newRef] := true;
[L2239]              assume newRef != null;
[L4521]  RET         call this := FreshRefGenerator__success();
[L4522]              assume now >= 0;
[L4523]              assume DType[this] == HBC;
[L4524]              assume msgvalue_MSG == 0;
[L4525]              gas := gas - 53000;
[L4526]  CALL        call HBC_HBC(this, msgsender_MSG, msgvalue_MSG);
[L254]               havoc __exception;
[L255]               revert := false;
[L256]   COND FALSE  !(__exception)
[L283]   CALL        call HBC_HBC__success(this, msgsender_MSG, msgvalue_MSG);
[L2495]  CALL        call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L2424]  CALL        call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2409]              assume msgsender_MSG != null;
[L2410]              Balance[this] := 0;
[L2424]  RET         call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2425]  COND FALSE  !(revert)
[L2495]  RET         call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L2496]  COND FALSE  !(revert)
[L2499]  CALL        call HBC_HBC_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2458]              assume msgsender_MSG != null;
[L2459]              Balance[this] := 0;
[L2460]              TOKEN_DECIMALS_HBC[this] := 1000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2461]              name_HBC[this] := 1908934807;
[L2462]              symbol_HBC[this] := -845215461;
[L2463]              totalTokenSupply_HBC[this] := 10000000000 * TOKEN_DECIMALS_HBC[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2464]              decimals_HBC[this] := 18;
[L2465]              stopped_HBC[this] := false;
[L2466]              owner_HBC[this] := null;
[L2467]              totalBurned_HBC[this] := 0;
[L2468]              balances_HBC[this] := zeroRefintArr();
[L2469]              sum_balances0[this] := 0;
[L2470]              allowed_HBC[this] := zeroRefRefintArr();
[L2471]              sum_allowed1[this] := 0;
[L2472]              forbiddenAddresses_HBC[this] := zeroRefRefArr();
[L2474]              owner_HBC[this] := msgsender_MSG;
[L2475]              sum_balances0[this] := sum_balances0[this] - balances_HBC[this][owner_HBC[this]];
[L2476]              balances_HBC[this][owner_HBC[this]] := totalTokenSupply_HBC[this];
[L2477]              sum_balances0[this] := sum_balances0[this] + balances_HBC[this][owner_HBC[this]];
[L2478]              assert { :EventEmitted "Transfer_HBC" } true;
[L2499]  RET         call HBC_HBC_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2500]  COND FALSE  !(revert)
[L283]   RET         call HBC_HBC__success(this, msgsender_MSG, msgvalue_MSG);
[L284]               assume !revert && gas >= 0;
[L4526]  RET         call HBC_HBC(this, msgsender_MSG, msgvalue_MSG);
[L4527]              assume !revert && gas >= 0;
[L4530]  CALL        call CorralChoice_HBC(this);
[L4311]              havoc msgsender_MSG;
[L4312]              havoc msgvalue_MSG;
[L4313]              havoc choice;
[L4314]              havoc __ret_0_totalSupply;
[L4315]              havoc _owner_s433;
[L4316]              havoc __ret_0_balanceOf;
[L4317]              havoc _address_s750;
[L4318]              havoc _tokens_s750;
[L4319]              havoc __ret_0_transfer;
[L4320]              havoc _owner_s648;
[L4321]              havoc _spender_s648;
[L4322]              havoc __ret_0_allowance;
[L4323]              havoc _from_s570;
[L4324]              havoc _to_s570;
[L4325]              havoc _value_s570;
[L4326]              havoc __ret_0_transferFrom;
[L4327]              havoc _spender_s612;
[L4328]              havoc _tokens_s612;
[L4329]              havoc __ret_0_approve;
[L4330]              havoc __ret_0_TOKEN_DECIMALS;
[L4331]              havoc __ret_0_name;
[L4332]              havoc __ret_0_symbol;
[L4333]              havoc __ret_0_totalTokenSupply;
[L4334]              havoc __ret_0_decimals;
[L4335]              havoc __ret_0_stopped;
[L4336]              havoc __ret_0_owner;
[L4337]              havoc __ret_0_totalBurned;
[L4338]              havoc arg951_s0;
[L4339]              havoc __ret_0_balances;
[L4340]              havoc _newAddr_s337;
[L4341]              havoc _newAddr_s350;
[L4342]              havoc _value_s413;
[L4343]              havoc __ret_0_burn;
[L4344]              havoc _newOwner_s812;
[L4345]              havoc _spender_s881;
[L4346]              havoc _addedValue_s881;
[L4347]              havoc success_s881;
[L4348]              havoc _spender_s948;
[L4349]              havoc _subtractedValue_s948;
[L4350]              havoc success_s948;
[L4351]              havoc tmpNow;
[L4352]              havoc gas;
[L4353]              assume gas > 4000000 && gas <= 8000000;
[L4354]              tmpNow := now;
[L4355]              havoc now;
[L4356]              assume now > tmpNow;
[L4357]              assume msgsender_MSG != null;
[L4358]              assume DType[msgsender_MSG] != SafeMath;
[L4359]              assume DType[msgsender_MSG] != ERC20Interface;
[L4360]              assume DType[msgsender_MSG] != HBC;
[L4361]              Alloc[msgsender_MSG] := true;
[L4362]  COND FALSE  !(choice == 24)
[L4368]  COND FALSE  !(choice == 23)
[L4374]  COND TRUE   choice == 22
[L4375]              gas := gas - 21000;
[L4376]  COND TRUE   gas >= 0
[L4377]              assume _tokens_s750 >= 0 && _tokens_s750 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4378]              assume msgvalue_MSG == 0;
[L4379]  CALL        call __ret_0_transfer := transfer~address~uint256_HBC(this, msgsender_MSG, msgvalue_MSG, _address_s750, _tokens_s750);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == _address_s750 && _tokens_s750 <= balances_HBC[this][msgsender_MSG]) && _tokens_s750 >= 0) && _tokens_s750 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_HBC[this][_address_s750] >= 0) && balances_HBC[this][_address_s750] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_HBC[this][msgsender_MSG] >= 0) && balances_HBC[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_HBC0 := true;
[L2]                 call_transfer_HBC0 := false;
[L2]                 revert := revert_hold;
[L951]               havoc __exception;
[L952]               revert := false;
[L953]   COND FALSE  !(__exception)
[L980]   CALL        call __ret_0_ := transfer~address~uint256_HBC__success(this, msgsender_MSG, msgvalue_MSG, _address_s750, _tokens_s750);
[L2927]  COND FALSE  !(!!stopped_HBC[this])
[L2931]              __var_12 := null;
[L2932]  COND FALSE  !(!(_address_s750 != null))
[L2936]  COND FALSE  !(!(forbiddenAddresses_HBC[this][msgsender_MSG] != msgsender_MSG))
[L2940]  COND FALSE  !(!(forbiddenAddresses_HBC[this][_address_s750] != _address_s750))
[L2944]  COND FALSE  !(_tokens_s750 == 0)
[L2949]  COND FALSE  !(!(balances_HBC[this][msgsender_MSG] >= _tokens_s750))
[L2953]  CALL        call __var_13 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, balances_HBC[this][msgsender_MSG], _tokens_s750, -2084992712);
[L2313]  COND FALSE  !(!(b_s53 <= a_s53))
[L2317]              c_s53 := (a_s53 - b_s53) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2318]              __ret_0_ := c_s53;
[L2953]  RET         call __var_13 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, balances_HBC[this][msgsender_MSG], _tokens_s750, -2084992712);
[L2954]  COND FALSE  !(revert)
[L2957]              sum_balances0[this] := sum_balances0[this] - balances_HBC[this][msgsender_MSG];
[L2958]              balances_HBC[this][msgsender_MSG] := __var_13;
[L2959]              sum_balances0[this] := sum_balances0[this] + balances_HBC[this][msgsender_MSG];
[L2960]  CALL        call __var_14 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_HBC[this][_address_s750], _tokens_s750);
[L2289]              c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2290]  COND FALSE  !(!(c_s26 >= a_s26))
[L2294]              __ret_0_ := c_s26;
[L2960]  RET         call __var_14 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_HBC[this][_address_s750], _tokens_s750);
[L2961]  COND FALSE  !(revert)
[L2964]              sum_balances0[this] := sum_balances0[this] - balances_HBC[this][_address_s750];
[L2965]              balances_HBC[this][_address_s750] := __var_14;
[L2966]              sum_balances0[this] := sum_balances0[this] + balances_HBC[this][_address_s750];
[L2967]              assert { :EventEmitted "Transfer_HBC" } true;
[L2968]              __ret_0_ := true;
[L980]   RET         call __ret_0_ := transfer~address~uint256_HBC__success(this, msgsender_MSG, msgvalue_MSG, _address_s750, _tokens_s750);
[L981]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((__ret_0_ == true && totalTokenSupply_HBC[this] == old(totalTokenSupply_HBC[this])) && balances_HBC[this] == old(balances_HBC[this])) && allowed_HBC[this] == old(allowed_HBC[this])) && stopped_HBC[this] == old(stopped_HBC[this])) && owner_HBC[this] == old(owner_HBC[this])) && totalBurned_HBC[this] == old(totalBurned_HBC[this])) && forbiddenAddresses_HBC[this] == old(forbiddenAddresses_HBC[this]));
[L2]                 revert := revert_hold;
[L4379]  RET         call __ret_0_transfer := transfer~address~uint256_HBC(this, msgsender_MSG, msgvalue_MSG, _address_s750, _tokens_s750);
[L4530]  RET         call CorralChoice_HBC(this);

Loop:
[L4530]  CALL        call CorralChoice_HBC(this);
[L4311]              havoc msgsender_MSG;
[L4312]              havoc msgvalue_MSG;
[L4313]              havoc choice;
[L4314]              havoc __ret_0_totalSupply;
[L4315]              havoc _owner_s433;
[L4316]              havoc __ret_0_balanceOf;
[L4317]              havoc _address_s750;
[L4318]              havoc _tokens_s750;
[L4319]              havoc __ret_0_transfer;
[L4320]              havoc _owner_s648;
[L4321]              havoc _spender_s648;
[L4322]              havoc __ret_0_allowance;
[L4323]              havoc _from_s570;
[L4324]              havoc _to_s570;
[L4325]              havoc _value_s570;
[L4326]              havoc __ret_0_transferFrom;
[L4327]              havoc _spender_s612;
[L4328]              havoc _tokens_s612;
[L4329]              havoc __ret_0_approve;
[L4330]              havoc __ret_0_TOKEN_DECIMALS;
[L4331]              havoc __ret_0_name;
[L4332]              havoc __ret_0_symbol;
[L4333]              havoc __ret_0_totalTokenSupply;
[L4334]              havoc __ret_0_decimals;
[L4335]              havoc __ret_0_stopped;
[L4336]              havoc __ret_0_owner;
[L4337]              havoc __ret_0_totalBurned;
[L4338]              havoc arg951_s0;
[L4339]              havoc __ret_0_balances;
[L4340]              havoc _newAddr_s337;
[L4341]              havoc _newAddr_s350;
[L4342]              havoc _value_s413;
[L4343]              havoc __ret_0_burn;
[L4344]              havoc _newOwner_s812;
[L4345]              havoc _spender_s881;
[L4346]              havoc _addedValue_s881;
[L4347]              havoc success_s881;
[L4348]              havoc _spender_s948;
[L4349]              havoc _subtractedValue_s948;
[L4350]              havoc success_s948;
[L4351]              havoc tmpNow;
[L4352]              havoc gas;
[L4353]              assume gas > 4000000 && gas <= 8000000;
[L4354]              tmpNow := now;
[L4355]              havoc now;
[L4356]              assume now > tmpNow;
[L4357]              assume msgsender_MSG != null;
[L4358]              assume DType[msgsender_MSG] != SafeMath;
[L4359]              assume DType[msgsender_MSG] != ERC20Interface;
[L4360]              assume DType[msgsender_MSG] != HBC;
[L4361]              Alloc[msgsender_MSG] := true;
[L4362]  COND FALSE  !(choice == 24)
[L4368]  COND FALSE  !(choice == 23)
[L4374]  COND TRUE   choice == 22
[L4375]              gas := gas - 21000;
[L4376]  COND TRUE   gas >= 0
[L4377]              assume _tokens_s750 >= 0 && _tokens_s750 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4378]              assume msgvalue_MSG == 0;
[L4379]  CALL        call __ret_0_transfer := transfer~address~uint256_HBC(this, msgsender_MSG, msgvalue_MSG, _address_s750, _tokens_s750);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == _address_s750 && _tokens_s750 <= balances_HBC[this][msgsender_MSG]) && _tokens_s750 >= 0) && _tokens_s750 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_HBC[this][_address_s750] >= 0) && balances_HBC[this][_address_s750] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_HBC[this][msgsender_MSG] >= 0) && balances_HBC[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_HBC0 := true;
[L2]                 call_transfer_HBC0 := false;
[L2]                 revert := revert_hold;
[L951]               havoc __exception;
[L952]               revert := false;
[L953]   COND FALSE  !(__exception)
[L980]   CALL        call __ret_0_ := transfer~address~uint256_HBC__success(this, msgsender_MSG, msgvalue_MSG, _address_s750, _tokens_s750);
[L2927]  COND FALSE  !(!!stopped_HBC[this])
[L2931]              __var_12 := null;
[L2932]  COND FALSE  !(!(_address_s750 != null))
[L2936]  COND FALSE  !(!(forbiddenAddresses_HBC[this][msgsender_MSG] != msgsender_MSG))
[L2940]  COND FALSE  !(!(forbiddenAddresses_HBC[this][_address_s750] != _address_s750))
[L2944]  COND FALSE  !(_tokens_s750 == 0)
[L2949]  COND FALSE  !(!(balances_HBC[this][msgsender_MSG] >= _tokens_s750))
[L2953]  CALL        call __var_13 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, balances_HBC[this][msgsender_MSG], _tokens_s750, -2084992712);
[L2313]  COND FALSE  !(!(b_s53 <= a_s53))
[L2317]              c_s53 := (a_s53 - b_s53) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2318]              __ret_0_ := c_s53;
[L2953]  RET         call __var_13 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, balances_HBC[this][msgsender_MSG], _tokens_s750, -2084992712);
[L2954]  COND FALSE  !(revert)
[L2957]              sum_balances0[this] := sum_balances0[this] - balances_HBC[this][msgsender_MSG];
[L2958]              balances_HBC[this][msgsender_MSG] := __var_13;
[L2959]              sum_balances0[this] := sum_balances0[this] + balances_HBC[this][msgsender_MSG];
[L2960]  CALL        call __var_14 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_HBC[this][_address_s750], _tokens_s750);
[L2289]              c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2290]  COND FALSE  !(!(c_s26 >= a_s26))
[L2294]              __ret_0_ := c_s26;
[L2960]  RET         call __var_14 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_HBC[this][_address_s750], _tokens_s750);
[L2961]  COND FALSE  !(revert)
[L2964]              sum_balances0[this] := sum_balances0[this] - balances_HBC[this][_address_s750];
[L2965]              balances_HBC[this][_address_s750] := __var_14;
[L2966]              sum_balances0[this] := sum_balances0[this] + balances_HBC[this][_address_s750];
[L2967]              assert { :EventEmitted "Transfer_HBC" } true;
[L2968]              __ret_0_ := true;
[L980]   RET         call __ret_0_ := transfer~address~uint256_HBC__success(this, msgsender_MSG, msgvalue_MSG, _address_s750, _tokens_s750);
[L981]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((__ret_0_ == true && totalTokenSupply_HBC[this] == old(totalTokenSupply_HBC[this])) && balances_HBC[this] == old(balances_HBC[this])) && allowed_HBC[this] == old(allowed_HBC[this])) && stopped_HBC[this] == old(stopped_HBC[this])) && owner_HBC[this] == old(owner_HBC[this])) && totalBurned_HBC[this] == old(totalBurned_HBC[this])) && forbiddenAddresses_HBC[this] == old(forbiddenAddresses_HBC[this]));
[L2]                 revert := revert_hold;
[L4379]  RET         call __ret_0_transfer := transfer~address~uint256_HBC(this, msgsender_MSG, msgvalue_MSG, _address_s750, _tokens_s750);
[L4530]  RET         call CorralChoice_HBC(this);

[2020-11-25 17:39:34,556 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 17:39:34,556 INFO  L82        PathProgramCache]: Analyzing trace with hash -739401531, now seen corresponding path program 1 times
[2020-11-25 17:39:34,556 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 17:39:34,583 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 17:39:34,967 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 17:39:34,968 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 17:39:34,968 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [26] imperfect sequences [] total 26
[2020-11-25 17:39:34,968 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 17:39:34,968 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 27 interpolants.
[2020-11-25 17:39:34,968 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=63, Invalid=639, Unknown=0, NotChecked=0, Total=702
[2020-11-25 17:39:34,969 INFO  L87              Difference]: Start difference. First operand 2765 states and 3053 transitions. cyclomatic complexity: 296 Second operand 27 states.
[2020-11-25 17:39:40,648 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 17:39:40,648 INFO  L93              Difference]: Finished difference Result 2850 states and 3186 transitions.
[2020-11-25 17:39:40,648 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 27 states. 
[2020-11-25 17:39:40,649 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2850 states and 3186 transitions.
[2020-11-25 17:39:40,654 INFO  L131   ngComponentsAnalysis]: Automaton has 6 accepting balls. 12
[2020-11-25 17:39:40,659 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2850 states to 2850 states and 3186 transitions.
[2020-11-25 17:39:40,659 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 802
[2020-11-25 17:39:40,660 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 802
[2020-11-25 17:39:40,660 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 2850 states and 3186 transitions.
[2020-11-25 17:39:40,662 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 17:39:40,662 INFO  L728         BuchiCegarLoop]: Abstraction has 2850 states and 3186 transitions.
[2020-11-25 17:39:40,664 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 2850 states and 3186 transitions.
[2020-11-25 17:39:40,677 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 2850 to 2823.
[2020-11-25 17:39:40,678 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 2823 states.
[2020-11-25 17:39:40,680 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 2823 states to 2823 states and 3154 transitions.
[2020-11-25 17:39:40,681 INFO  L751         BuchiCegarLoop]: Abstraction has 2823 states and 3154 transitions.
[2020-11-25 17:39:40,681 INFO  L631         BuchiCegarLoop]: Abstraction has 2823 states and 3154 transitions.
[2020-11-25 17:39:40,681 INFO  L445         BuchiCegarLoop]: ======== Iteration 11============
[2020-11-25 17:39:40,681 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2823 states and 3154 transitions.
[2020-11-25 17:39:40,683 INFO  L131   ngComponentsAnalysis]: Automaton has 6 accepting balls. 12
[2020-11-25 17:39:40,683 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 17:39:40,683 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 17:39:40,684 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 17:39:40,684 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_HBC0 := false;
[L2]                 call_transfer_HBC0 := false;
[L2]     CALL        call main();
[L4520]              assume null == 0;
[L4521]  CALL        call this := FreshRefGenerator__success();
[L2236]              havoc newRef;
[L2237]              assume Alloc[newRef] == false;
[L2238]              Alloc[newRef] := true;
[L2239]              assume newRef != null;
[L4521]  RET         call this := FreshRefGenerator__success();
[L4522]              assume now >= 0;
[L4523]              assume DType[this] == HBC;
[L4524]              assume msgvalue_MSG == 0;
[L4525]              gas := gas - 53000;
[L4526]  CALL        call HBC_HBC(this, msgsender_MSG, msgvalue_MSG);
[L254]               havoc __exception;
[L255]               revert := false;
[L256]   COND FALSE  !(__exception)
[L283]   CALL        call HBC_HBC__success(this, msgsender_MSG, msgvalue_MSG);
[L2495]  CALL        call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L2424]  CALL        call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2409]              assume msgsender_MSG != null;
[L2410]              Balance[this] := 0;
[L2424]  RET         call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2425]  COND FALSE  !(revert)
[L2495]  RET         call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L2496]  COND FALSE  !(revert)
[L2499]  CALL        call HBC_HBC_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2458]              assume msgsender_MSG != null;
[L2459]              Balance[this] := 0;
[L2460]              TOKEN_DECIMALS_HBC[this] := 1000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2461]              name_HBC[this] := 1908934807;
[L2462]              symbol_HBC[this] := -845215461;
[L2463]              totalTokenSupply_HBC[this] := 10000000000 * TOKEN_DECIMALS_HBC[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2464]              decimals_HBC[this] := 18;
[L2465]              stopped_HBC[this] := false;
[L2466]              owner_HBC[this] := null;
[L2467]              totalBurned_HBC[this] := 0;
[L2468]              balances_HBC[this] := zeroRefintArr();
[L2469]              sum_balances0[this] := 0;
[L2470]              allowed_HBC[this] := zeroRefRefintArr();
[L2471]              sum_allowed1[this] := 0;
[L2472]              forbiddenAddresses_HBC[this] := zeroRefRefArr();
[L2474]              owner_HBC[this] := msgsender_MSG;
[L2475]              sum_balances0[this] := sum_balances0[this] - balances_HBC[this][owner_HBC[this]];
[L2476]              balances_HBC[this][owner_HBC[this]] := totalTokenSupply_HBC[this];
[L2477]              sum_balances0[this] := sum_balances0[this] + balances_HBC[this][owner_HBC[this]];
[L2478]              assert { :EventEmitted "Transfer_HBC" } true;
[L2499]  RET         call HBC_HBC_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2500]  COND FALSE  !(revert)
[L283]   RET         call HBC_HBC__success(this, msgsender_MSG, msgvalue_MSG);
[L284]               assume !revert && gas >= 0;
[L4526]  RET         call HBC_HBC(this, msgsender_MSG, msgvalue_MSG);
[L4527]              assume !revert && gas >= 0;
[L4530]  CALL        call CorralChoice_HBC(this);
[L4311]              havoc msgsender_MSG;
[L4312]              havoc msgvalue_MSG;
[L4313]              havoc choice;
[L4314]              havoc __ret_0_totalSupply;
[L4315]              havoc _owner_s433;
[L4316]              havoc __ret_0_balanceOf;
[L4317]              havoc _address_s750;
[L4318]              havoc _tokens_s750;
[L4319]              havoc __ret_0_transfer;
[L4320]              havoc _owner_s648;
[L4321]              havoc _spender_s648;
[L4322]              havoc __ret_0_allowance;
[L4323]              havoc _from_s570;
[L4324]              havoc _to_s570;
[L4325]              havoc _value_s570;
[L4326]              havoc __ret_0_transferFrom;
[L4327]              havoc _spender_s612;
[L4328]              havoc _tokens_s612;
[L4329]              havoc __ret_0_approve;
[L4330]              havoc __ret_0_TOKEN_DECIMALS;
[L4331]              havoc __ret_0_name;
[L4332]              havoc __ret_0_symbol;
[L4333]              havoc __ret_0_totalTokenSupply;
[L4334]              havoc __ret_0_decimals;
[L4335]              havoc __ret_0_stopped;
[L4336]              havoc __ret_0_owner;
[L4337]              havoc __ret_0_totalBurned;
[L4338]              havoc arg951_s0;
[L4339]              havoc __ret_0_balances;
[L4340]              havoc _newAddr_s337;
[L4341]              havoc _newAddr_s350;
[L4342]              havoc _value_s413;
[L4343]              havoc __ret_0_burn;
[L4344]              havoc _newOwner_s812;
[L4345]              havoc _spender_s881;
[L4346]              havoc _addedValue_s881;
[L4347]              havoc success_s881;
[L4348]              havoc _spender_s948;
[L4349]              havoc _subtractedValue_s948;
[L4350]              havoc success_s948;
[L4351]              havoc tmpNow;
[L4352]              havoc gas;
[L4353]              assume gas > 4000000 && gas <= 8000000;
[L4354]              tmpNow := now;
[L4355]              havoc now;
[L4356]              assume now > tmpNow;
[L4357]              assume msgsender_MSG != null;
[L4358]              assume DType[msgsender_MSG] != SafeMath;
[L4359]              assume DType[msgsender_MSG] != ERC20Interface;
[L4360]              assume DType[msgsender_MSG] != HBC;
[L4361]              Alloc[msgsender_MSG] := true;
[L4362]  COND FALSE  !(choice == 24)
[L4368]  COND FALSE  !(choice == 23)
[L4374]  COND TRUE   choice == 22
[L4375]              gas := gas - 21000;
[L4376]  COND TRUE   gas >= 0
[L4377]              assume _tokens_s750 >= 0 && _tokens_s750 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4378]              assume msgvalue_MSG == 0;
[L4379]  CALL        call __ret_0_transfer := transfer~address~uint256_HBC(this, msgsender_MSG, msgvalue_MSG, _address_s750, _tokens_s750);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == _address_s750 && _tokens_s750 <= balances_HBC[this][msgsender_MSG]) && _tokens_s750 >= 0) && _tokens_s750 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_HBC[this][_address_s750] >= 0) && balances_HBC[this][_address_s750] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_HBC[this][msgsender_MSG] >= 0) && balances_HBC[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_HBC0 := true;
[L2]                 call_transfer_HBC0 := false;
[L2]                 revert := revert_hold;
[L951]               havoc __exception;
[L952]               revert := false;
[L953]   COND TRUE   __exception
[L954]               __tmp__Balance := Balance;
[L955]               __tmp__DType := DType;
[L956]               __tmp__Alloc := Alloc;
[L957]               __tmp__balance_ADDR := balance_ADDR;
[L958]               __tmp__M_Ref_int := M_Ref_int;
[L959]               __tmp__sum_balances0 := sum_balances0;
[L960]               __tmp__alloc_allowed_HBC_lvl0 := alloc_allowed_HBC_lvl0;
[L961]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L962]               __tmp__sum_allowed1 := sum_allowed1;
[L963]               __tmp__sum_forbiddenAddresses2 := sum_forbiddenAddresses2;
[L964]               __tmp__Length := Length;
[L965]               __tmp__now := now;
[L966]               __tmp__TOKEN_DECIMALS_HBC := TOKEN_DECIMALS_HBC;
[L967]               __tmp__name_HBC := name_HBC;
[L968]               __tmp__symbol_HBC := symbol_HBC;
[L969]               __tmp__totalTokenSupply_HBC := totalTokenSupply_HBC;
[L970]               __tmp__decimals_HBC := decimals_HBC;
[L971]               __tmp__stopped_HBC := stopped_HBC;
[L972]               __tmp__owner_HBC := owner_HBC;
[L973]               __tmp__totalBurned_HBC := totalBurned_HBC;
[L974]               __tmp__balances_HBC := balances_HBC;
[L975]               __tmp__allowed_HBC := allowed_HBC;
[L976]               __tmp__forbiddenAddresses_HBC := forbiddenAddresses_HBC;
[L977]   CALL        call __ret_0_ := transfer~address~uint256_HBC__fail(this, msgsender_MSG, msgvalue_MSG, _address_s750, _tokens_s750);
[L2879]  COND FALSE  !(!!__tmp__stopped_HBC[this])
[L2883]              __var_12 := null;
[L2884]  COND FALSE  !(!(_address_s750 != null))
[L2888]  COND FALSE  !(!(__tmp__forbiddenAddresses_HBC[this][msgsender_MSG] != msgsender_MSG))
[L2892]  COND FALSE  !(!(__tmp__forbiddenAddresses_HBC[this][_address_s750] != _address_s750))
[L2896]  COND FALSE  !(_tokens_s750 == 0)
[L2900]  COND FALSE  !(!(__tmp__balances_HBC[this][msgsender_MSG] >= _tokens_s750))
[L2904]  CALL        call __var_13 := sub~uint256~uint256~string_SafeMath__fail(this, this, 0, __tmp__balances_HBC[this][msgsender_MSG], _tokens_s750, -2084992712);
[L2301]  COND TRUE   !(b_s53 <= a_s53)
[L2302]              revert := true;
[L2904]  RET         call __var_13 := sub~uint256~uint256~string_SafeMath__fail(this, this, 0, __tmp__balances_HBC[this][msgsender_MSG], _tokens_s750, -2084992712);
[L2905]  COND TRUE   revert
[L977]   RET         call __ret_0_ := transfer~address~uint256_HBC__fail(this, msgsender_MSG, msgvalue_MSG, _address_s750, _tokens_s750);
[L978]               assume revert || gas < 0;
[L4379]  RET         call __ret_0_transfer := transfer~address~uint256_HBC(this, msgsender_MSG, msgvalue_MSG, _address_s750, _tokens_s750);
[L4530]  RET         call CorralChoice_HBC(this);

Loop:
[L4530]  CALL        call CorralChoice_HBC(this);
[L4311]              havoc msgsender_MSG;
[L4312]              havoc msgvalue_MSG;
[L4313]              havoc choice;
[L4314]              havoc __ret_0_totalSupply;
[L4315]              havoc _owner_s433;
[L4316]              havoc __ret_0_balanceOf;
[L4317]              havoc _address_s750;
[L4318]              havoc _tokens_s750;
[L4319]              havoc __ret_0_transfer;
[L4320]              havoc _owner_s648;
[L4321]              havoc _spender_s648;
[L4322]              havoc __ret_0_allowance;
[L4323]              havoc _from_s570;
[L4324]              havoc _to_s570;
[L4325]              havoc _value_s570;
[L4326]              havoc __ret_0_transferFrom;
[L4327]              havoc _spender_s612;
[L4328]              havoc _tokens_s612;
[L4329]              havoc __ret_0_approve;
[L4330]              havoc __ret_0_TOKEN_DECIMALS;
[L4331]              havoc __ret_0_name;
[L4332]              havoc __ret_0_symbol;
[L4333]              havoc __ret_0_totalTokenSupply;
[L4334]              havoc __ret_0_decimals;
[L4335]              havoc __ret_0_stopped;
[L4336]              havoc __ret_0_owner;
[L4337]              havoc __ret_0_totalBurned;
[L4338]              havoc arg951_s0;
[L4339]              havoc __ret_0_balances;
[L4340]              havoc _newAddr_s337;
[L4341]              havoc _newAddr_s350;
[L4342]              havoc _value_s413;
[L4343]              havoc __ret_0_burn;
[L4344]              havoc _newOwner_s812;
[L4345]              havoc _spender_s881;
[L4346]              havoc _addedValue_s881;
[L4347]              havoc success_s881;
[L4348]              havoc _spender_s948;
[L4349]              havoc _subtractedValue_s948;
[L4350]              havoc success_s948;
[L4351]              havoc tmpNow;
[L4352]              havoc gas;
[L4353]              assume gas > 4000000 && gas <= 8000000;
[L4354]              tmpNow := now;
[L4355]              havoc now;
[L4356]              assume now > tmpNow;
[L4357]              assume msgsender_MSG != null;
[L4358]              assume DType[msgsender_MSG] != SafeMath;
[L4359]              assume DType[msgsender_MSG] != ERC20Interface;
[L4360]              assume DType[msgsender_MSG] != HBC;
[L4361]              Alloc[msgsender_MSG] := true;
[L4362]  COND FALSE  !(choice == 24)
[L4368]  COND FALSE  !(choice == 23)
[L4374]  COND TRUE   choice == 22
[L4375]              gas := gas - 21000;
[L4376]  COND TRUE   gas >= 0
[L4377]              assume _tokens_s750 >= 0 && _tokens_s750 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4378]              assume msgvalue_MSG == 0;
[L4379]  CALL        call __ret_0_transfer := transfer~address~uint256_HBC(this, msgsender_MSG, msgvalue_MSG, _address_s750, _tokens_s750);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == _address_s750 && _tokens_s750 <= balances_HBC[this][msgsender_MSG]) && _tokens_s750 >= 0) && _tokens_s750 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_HBC[this][_address_s750] >= 0) && balances_HBC[this][_address_s750] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_HBC[this][msgsender_MSG] >= 0) && balances_HBC[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_HBC0 := true;
[L2]                 call_transfer_HBC0 := false;
[L2]                 revert := revert_hold;
[L951]               havoc __exception;
[L952]               revert := false;
[L953]   COND TRUE   __exception
[L954]               __tmp__Balance := Balance;
[L955]               __tmp__DType := DType;
[L956]               __tmp__Alloc := Alloc;
[L957]               __tmp__balance_ADDR := balance_ADDR;
[L958]               __tmp__M_Ref_int := M_Ref_int;
[L959]               __tmp__sum_balances0 := sum_balances0;
[L960]               __tmp__alloc_allowed_HBC_lvl0 := alloc_allowed_HBC_lvl0;
[L961]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L962]               __tmp__sum_allowed1 := sum_allowed1;
[L963]               __tmp__sum_forbiddenAddresses2 := sum_forbiddenAddresses2;
[L964]               __tmp__Length := Length;
[L965]               __tmp__now := now;
[L966]               __tmp__TOKEN_DECIMALS_HBC := TOKEN_DECIMALS_HBC;
[L967]               __tmp__name_HBC := name_HBC;
[L968]               __tmp__symbol_HBC := symbol_HBC;
[L969]               __tmp__totalTokenSupply_HBC := totalTokenSupply_HBC;
[L970]               __tmp__decimals_HBC := decimals_HBC;
[L971]               __tmp__stopped_HBC := stopped_HBC;
[L972]               __tmp__owner_HBC := owner_HBC;
[L973]               __tmp__totalBurned_HBC := totalBurned_HBC;
[L974]               __tmp__balances_HBC := balances_HBC;
[L975]               __tmp__allowed_HBC := allowed_HBC;
[L976]               __tmp__forbiddenAddresses_HBC := forbiddenAddresses_HBC;
[L977]   CALL        call __ret_0_ := transfer~address~uint256_HBC__fail(this, msgsender_MSG, msgvalue_MSG, _address_s750, _tokens_s750);
[L2879]  COND FALSE  !(!!__tmp__stopped_HBC[this])
[L2883]              __var_12 := null;
[L2884]  COND FALSE  !(!(_address_s750 != null))
[L2888]  COND FALSE  !(!(__tmp__forbiddenAddresses_HBC[this][msgsender_MSG] != msgsender_MSG))
[L2892]  COND FALSE  !(!(__tmp__forbiddenAddresses_HBC[this][_address_s750] != _address_s750))
[L2896]  COND FALSE  !(_tokens_s750 == 0)
[L2900]  COND FALSE  !(!(__tmp__balances_HBC[this][msgsender_MSG] >= _tokens_s750))
[L2904]  CALL        call __var_13 := sub~uint256~uint256~string_SafeMath__fail(this, this, 0, __tmp__balances_HBC[this][msgsender_MSG], _tokens_s750, -2084992712);
[L2301]  COND TRUE   !(b_s53 <= a_s53)
[L2302]              revert := true;
[L2904]  RET         call __var_13 := sub~uint256~uint256~string_SafeMath__fail(this, this, 0, __tmp__balances_HBC[this][msgsender_MSG], _tokens_s750, -2084992712);
[L2905]  COND TRUE   revert
[L977]   RET         call __ret_0_ := transfer~address~uint256_HBC__fail(this, msgsender_MSG, msgvalue_MSG, _address_s750, _tokens_s750);
[L978]               assume revert || gas < 0;
[L4379]  RET         call __ret_0_transfer := transfer~address~uint256_HBC(this, msgsender_MSG, msgvalue_MSG, _address_s750, _tokens_s750);
[L4530]  RET         call CorralChoice_HBC(this);

[2020-11-25 17:39:40,687 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 17:39:40,687 INFO  L82        PathProgramCache]: Analyzing trace with hash 661959536, now seen corresponding path program 1 times
[2020-11-25 17:39:40,687 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 17:39:40,693 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 17:39:40,715 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 17:39:40,716 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 17:39:40,716 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [7] imperfect sequences [] total 7
[2020-11-25 17:39:40,716 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 17:39:40,716 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 7 interpolants.
[2020-11-25 17:39:40,716 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=11, Invalid=31, Unknown=0, NotChecked=0, Total=42
[2020-11-25 17:39:40,716 INFO  L87              Difference]: Start difference. First operand 2823 states and 3154 transitions. cyclomatic complexity: 343 Second operand 7 states.
[2020-11-25 17:39:41,153 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 17:39:41,153 INFO  L93              Difference]: Finished difference Result 2897 states and 3315 transitions.
[2020-11-25 17:39:41,153 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 8 states. 
[2020-11-25 17:39:41,153 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2897 states and 3315 transitions.
[2020-11-25 17:39:41,160 INFO  L131   ngComponentsAnalysis]: Automaton has 10 accepting balls. 20
[2020-11-25 17:39:41,167 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2897 states to 2897 states and 3315 transitions.
[2020-11-25 17:39:41,167 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 816
[2020-11-25 17:39:41,167 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 816
[2020-11-25 17:39:41,167 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 2897 states and 3315 transitions.
[2020-11-25 17:39:41,169 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 17:39:41,169 INFO  L728         BuchiCegarLoop]: Abstraction has 2897 states and 3315 transitions.
[2020-11-25 17:39:41,171 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 2897 states and 3315 transitions.
[2020-11-25 17:39:41,187 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 2897 to 2823.
[2020-11-25 17:39:41,187 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 2823 states.
[2020-11-25 17:39:41,192 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 2823 states to 2823 states and 3154 transitions.
[2020-11-25 17:39:41,192 INFO  L751         BuchiCegarLoop]: Abstraction has 2823 states and 3154 transitions.
[2020-11-25 17:39:41,192 INFO  L631         BuchiCegarLoop]: Abstraction has 2823 states and 3154 transitions.
[2020-11-25 17:39:41,192 INFO  L445         BuchiCegarLoop]: ======== Iteration 12============
[2020-11-25 17:39:41,192 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2823 states and 3154 transitions.
[2020-11-25 17:39:41,196 INFO  L131   ngComponentsAnalysis]: Automaton has 6 accepting balls. 12
[2020-11-25 17:39:41,196 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 17:39:41,196 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 17:39:41,197 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 17:39:41,197 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_HBC0 := false;
[L2]                 call_transfer_HBC0 := false;
[L2]     CALL        call main();
[L4520]              assume null == 0;
[L4521]  CALL        call this := FreshRefGenerator__success();
[L2236]              havoc newRef;
[L2237]              assume Alloc[newRef] == false;
[L2238]              Alloc[newRef] := true;
[L2239]              assume newRef != null;
[L4521]  RET         call this := FreshRefGenerator__success();
[L4522]              assume now >= 0;
[L4523]              assume DType[this] == HBC;
[L4524]              assume msgvalue_MSG == 0;
[L4525]              gas := gas - 53000;
[L4526]  CALL        call HBC_HBC(this, msgsender_MSG, msgvalue_MSG);
[L254]               havoc __exception;
[L255]               revert := false;
[L256]   COND FALSE  !(__exception)
[L283]   CALL        call HBC_HBC__success(this, msgsender_MSG, msgvalue_MSG);
[L2495]  CALL        call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L2424]  CALL        call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2409]              assume msgsender_MSG != null;
[L2410]              Balance[this] := 0;
[L2424]  RET         call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2425]  COND FALSE  !(revert)
[L2495]  RET         call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L2496]  COND FALSE  !(revert)
[L2499]  CALL        call HBC_HBC_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2458]              assume msgsender_MSG != null;
[L2459]              Balance[this] := 0;
[L2460]              TOKEN_DECIMALS_HBC[this] := 1000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2461]              name_HBC[this] := 1908934807;
[L2462]              symbol_HBC[this] := -845215461;
[L2463]              totalTokenSupply_HBC[this] := 10000000000 * TOKEN_DECIMALS_HBC[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2464]              decimals_HBC[this] := 18;
[L2465]              stopped_HBC[this] := false;
[L2466]              owner_HBC[this] := null;
[L2467]              totalBurned_HBC[this] := 0;
[L2468]              balances_HBC[this] := zeroRefintArr();
[L2469]              sum_balances0[this] := 0;
[L2470]              allowed_HBC[this] := zeroRefRefintArr();
[L2471]              sum_allowed1[this] := 0;
[L2472]              forbiddenAddresses_HBC[this] := zeroRefRefArr();
[L2474]              owner_HBC[this] := msgsender_MSG;
[L2475]              sum_balances0[this] := sum_balances0[this] - balances_HBC[this][owner_HBC[this]];
[L2476]              balances_HBC[this][owner_HBC[this]] := totalTokenSupply_HBC[this];
[L2477]              sum_balances0[this] := sum_balances0[this] + balances_HBC[this][owner_HBC[this]];
[L2478]              assert { :EventEmitted "Transfer_HBC" } true;
[L2499]  RET         call HBC_HBC_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2500]  COND FALSE  !(revert)
[L283]   RET         call HBC_HBC__success(this, msgsender_MSG, msgvalue_MSG);
[L284]               assume !revert && gas >= 0;
[L4526]  RET         call HBC_HBC(this, msgsender_MSG, msgvalue_MSG);
[L4527]              assume !revert && gas >= 0;
[L4530]  CALL        call CorralChoice_HBC(this);
[L4311]              havoc msgsender_MSG;
[L4312]              havoc msgvalue_MSG;
[L4313]              havoc choice;
[L4314]              havoc __ret_0_totalSupply;
[L4315]              havoc _owner_s433;
[L4316]              havoc __ret_0_balanceOf;
[L4317]              havoc _address_s750;
[L4318]              havoc _tokens_s750;
[L4319]              havoc __ret_0_transfer;
[L4320]              havoc _owner_s648;
[L4321]              havoc _spender_s648;
[L4322]              havoc __ret_0_allowance;
[L4323]              havoc _from_s570;
[L4324]              havoc _to_s570;
[L4325]              havoc _value_s570;
[L4326]              havoc __ret_0_transferFrom;
[L4327]              havoc _spender_s612;
[L4328]              havoc _tokens_s612;
[L4329]              havoc __ret_0_approve;
[L4330]              havoc __ret_0_TOKEN_DECIMALS;
[L4331]              havoc __ret_0_name;
[L4332]              havoc __ret_0_symbol;
[L4333]              havoc __ret_0_totalTokenSupply;
[L4334]              havoc __ret_0_decimals;
[L4335]              havoc __ret_0_stopped;
[L4336]              havoc __ret_0_owner;
[L4337]              havoc __ret_0_totalBurned;
[L4338]              havoc arg951_s0;
[L4339]              havoc __ret_0_balances;
[L4340]              havoc _newAddr_s337;
[L4341]              havoc _newAddr_s350;
[L4342]              havoc _value_s413;
[L4343]              havoc __ret_0_burn;
[L4344]              havoc _newOwner_s812;
[L4345]              havoc _spender_s881;
[L4346]              havoc _addedValue_s881;
[L4347]              havoc success_s881;
[L4348]              havoc _spender_s948;
[L4349]              havoc _subtractedValue_s948;
[L4350]              havoc success_s948;
[L4351]              havoc tmpNow;
[L4352]              havoc gas;
[L4353]              assume gas > 4000000 && gas <= 8000000;
[L4354]              tmpNow := now;
[L4355]              havoc now;
[L4356]              assume now > tmpNow;
[L4357]              assume msgsender_MSG != null;
[L4358]              assume DType[msgsender_MSG] != SafeMath;
[L4359]              assume DType[msgsender_MSG] != ERC20Interface;
[L4360]              assume DType[msgsender_MSG] != HBC;
[L4361]              Alloc[msgsender_MSG] := true;
[L4362]  COND FALSE  !(choice == 24)
[L4368]  COND FALSE  !(choice == 23)
[L4374]  COND TRUE   choice == 22
[L4375]              gas := gas - 21000;
[L4376]  COND TRUE   gas >= 0
[L4377]              assume _tokens_s750 >= 0 && _tokens_s750 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4378]              assume msgvalue_MSG == 0;
[L4379]  CALL        call __ret_0_transfer := transfer~address~uint256_HBC(this, msgsender_MSG, msgvalue_MSG, _address_s750, _tokens_s750);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == _address_s750 && _tokens_s750 <= balances_HBC[this][msgsender_MSG]) && _tokens_s750 >= 0) && _tokens_s750 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_HBC[this][_address_s750] >= 0) && balances_HBC[this][_address_s750] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_HBC[this][msgsender_MSG] >= 0) && balances_HBC[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_HBC0 := true;
[L2]                 call_transfer_HBC0 := false;
[L2]                 revert := revert_hold;
[L951]               havoc __exception;
[L952]               revert := false;
[L953]   COND TRUE   __exception
[L954]               __tmp__Balance := Balance;
[L955]               __tmp__DType := DType;
[L956]               __tmp__Alloc := Alloc;
[L957]               __tmp__balance_ADDR := balance_ADDR;
[L958]               __tmp__M_Ref_int := M_Ref_int;
[L959]               __tmp__sum_balances0 := sum_balances0;
[L960]               __tmp__alloc_allowed_HBC_lvl0 := alloc_allowed_HBC_lvl0;
[L961]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L962]               __tmp__sum_allowed1 := sum_allowed1;
[L963]               __tmp__sum_forbiddenAddresses2 := sum_forbiddenAddresses2;
[L964]               __tmp__Length := Length;
[L965]               __tmp__now := now;
[L966]               __tmp__TOKEN_DECIMALS_HBC := TOKEN_DECIMALS_HBC;
[L967]               __tmp__name_HBC := name_HBC;
[L968]               __tmp__symbol_HBC := symbol_HBC;
[L969]               __tmp__totalTokenSupply_HBC := totalTokenSupply_HBC;
[L970]               __tmp__decimals_HBC := decimals_HBC;
[L971]               __tmp__stopped_HBC := stopped_HBC;
[L972]               __tmp__owner_HBC := owner_HBC;
[L973]               __tmp__totalBurned_HBC := totalBurned_HBC;
[L974]               __tmp__balances_HBC := balances_HBC;
[L975]               __tmp__allowed_HBC := allowed_HBC;
[L976]               __tmp__forbiddenAddresses_HBC := forbiddenAddresses_HBC;
[L977]   CALL        call __ret_0_ := transfer~address~uint256_HBC__fail(this, msgsender_MSG, msgvalue_MSG, _address_s750, _tokens_s750);
[L2879]  COND FALSE  !(!!__tmp__stopped_HBC[this])
[L2883]              __var_12 := null;
[L2884]  COND FALSE  !(!(_address_s750 != null))
[L2888]  COND FALSE  !(!(__tmp__forbiddenAddresses_HBC[this][msgsender_MSG] != msgsender_MSG))
[L2892]  COND FALSE  !(!(__tmp__forbiddenAddresses_HBC[this][_address_s750] != _address_s750))
[L2896]  COND FALSE  !(_tokens_s750 == 0)
[L2900]  COND FALSE  !(!(__tmp__balances_HBC[this][msgsender_MSG] >= _tokens_s750))
[L2904]  CALL        call __var_13 := sub~uint256~uint256~string_SafeMath__fail(this, this, 0, __tmp__balances_HBC[this][msgsender_MSG], _tokens_s750, -2084992712);
[L2301]  COND FALSE  !(!(b_s53 <= a_s53))
[L2305]              c_s53 := (a_s53 - b_s53) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2306]              __ret_0_ := c_s53;
[L2904]  RET         call __var_13 := sub~uint256~uint256~string_SafeMath__fail(this, this, 0, __tmp__balances_HBC[this][msgsender_MSG], _tokens_s750, -2084992712);
[L2905]  COND FALSE  !(revert)
[L2908]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] - __tmp__balances_HBC[this][msgsender_MSG];
[L2909]              __tmp__balances_HBC[this][msgsender_MSG] := __var_13;
[L2910]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] + __tmp__balances_HBC[this][msgsender_MSG];
[L2911]  CALL        call __var_14 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__balances_HBC[this][_address_s750], _tokens_s750);
[L2277]              c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2278]  COND TRUE   !(c_s26 >= a_s26)
[L2279]              revert := true;
[L2911]  RET         call __var_14 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__balances_HBC[this][_address_s750], _tokens_s750);
[L2912]  COND TRUE   revert
[L977]   RET         call __ret_0_ := transfer~address~uint256_HBC__fail(this, msgsender_MSG, msgvalue_MSG, _address_s750, _tokens_s750);
[L978]               assume revert || gas < 0;
[L4379]  RET         call __ret_0_transfer := transfer~address~uint256_HBC(this, msgsender_MSG, msgvalue_MSG, _address_s750, _tokens_s750);
[L4530]  RET         call CorralChoice_HBC(this);

Loop:
[L4530]  CALL        call CorralChoice_HBC(this);
[L4311]              havoc msgsender_MSG;
[L4312]              havoc msgvalue_MSG;
[L4313]              havoc choice;
[L4314]              havoc __ret_0_totalSupply;
[L4315]              havoc _owner_s433;
[L4316]              havoc __ret_0_balanceOf;
[L4317]              havoc _address_s750;
[L4318]              havoc _tokens_s750;
[L4319]              havoc __ret_0_transfer;
[L4320]              havoc _owner_s648;
[L4321]              havoc _spender_s648;
[L4322]              havoc __ret_0_allowance;
[L4323]              havoc _from_s570;
[L4324]              havoc _to_s570;
[L4325]              havoc _value_s570;
[L4326]              havoc __ret_0_transferFrom;
[L4327]              havoc _spender_s612;
[L4328]              havoc _tokens_s612;
[L4329]              havoc __ret_0_approve;
[L4330]              havoc __ret_0_TOKEN_DECIMALS;
[L4331]              havoc __ret_0_name;
[L4332]              havoc __ret_0_symbol;
[L4333]              havoc __ret_0_totalTokenSupply;
[L4334]              havoc __ret_0_decimals;
[L4335]              havoc __ret_0_stopped;
[L4336]              havoc __ret_0_owner;
[L4337]              havoc __ret_0_totalBurned;
[L4338]              havoc arg951_s0;
[L4339]              havoc __ret_0_balances;
[L4340]              havoc _newAddr_s337;
[L4341]              havoc _newAddr_s350;
[L4342]              havoc _value_s413;
[L4343]              havoc __ret_0_burn;
[L4344]              havoc _newOwner_s812;
[L4345]              havoc _spender_s881;
[L4346]              havoc _addedValue_s881;
[L4347]              havoc success_s881;
[L4348]              havoc _spender_s948;
[L4349]              havoc _subtractedValue_s948;
[L4350]              havoc success_s948;
[L4351]              havoc tmpNow;
[L4352]              havoc gas;
[L4353]              assume gas > 4000000 && gas <= 8000000;
[L4354]              tmpNow := now;
[L4355]              havoc now;
[L4356]              assume now > tmpNow;
[L4357]              assume msgsender_MSG != null;
[L4358]              assume DType[msgsender_MSG] != SafeMath;
[L4359]              assume DType[msgsender_MSG] != ERC20Interface;
[L4360]              assume DType[msgsender_MSG] != HBC;
[L4361]              Alloc[msgsender_MSG] := true;
[L4362]  COND FALSE  !(choice == 24)
[L4368]  COND FALSE  !(choice == 23)
[L4374]  COND TRUE   choice == 22
[L4375]              gas := gas - 21000;
[L4376]  COND TRUE   gas >= 0
[L4377]              assume _tokens_s750 >= 0 && _tokens_s750 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4378]              assume msgvalue_MSG == 0;
[L4379]  CALL        call __ret_0_transfer := transfer~address~uint256_HBC(this, msgsender_MSG, msgvalue_MSG, _address_s750, _tokens_s750);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == _address_s750 && _tokens_s750 <= balances_HBC[this][msgsender_MSG]) && _tokens_s750 >= 0) && _tokens_s750 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_HBC[this][_address_s750] >= 0) && balances_HBC[this][_address_s750] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_HBC[this][msgsender_MSG] >= 0) && balances_HBC[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_HBC0 := true;
[L2]                 call_transfer_HBC0 := false;
[L2]                 revert := revert_hold;
[L951]               havoc __exception;
[L952]               revert := false;
[L953]   COND TRUE   __exception
[L954]               __tmp__Balance := Balance;
[L955]               __tmp__DType := DType;
[L956]               __tmp__Alloc := Alloc;
[L957]               __tmp__balance_ADDR := balance_ADDR;
[L958]               __tmp__M_Ref_int := M_Ref_int;
[L959]               __tmp__sum_balances0 := sum_balances0;
[L960]               __tmp__alloc_allowed_HBC_lvl0 := alloc_allowed_HBC_lvl0;
[L961]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L962]               __tmp__sum_allowed1 := sum_allowed1;
[L963]               __tmp__sum_forbiddenAddresses2 := sum_forbiddenAddresses2;
[L964]               __tmp__Length := Length;
[L965]               __tmp__now := now;
[L966]               __tmp__TOKEN_DECIMALS_HBC := TOKEN_DECIMALS_HBC;
[L967]               __tmp__name_HBC := name_HBC;
[L968]               __tmp__symbol_HBC := symbol_HBC;
[L969]               __tmp__totalTokenSupply_HBC := totalTokenSupply_HBC;
[L970]               __tmp__decimals_HBC := decimals_HBC;
[L971]               __tmp__stopped_HBC := stopped_HBC;
[L972]               __tmp__owner_HBC := owner_HBC;
[L973]               __tmp__totalBurned_HBC := totalBurned_HBC;
[L974]               __tmp__balances_HBC := balances_HBC;
[L975]               __tmp__allowed_HBC := allowed_HBC;
[L976]               __tmp__forbiddenAddresses_HBC := forbiddenAddresses_HBC;
[L977]   CALL        call __ret_0_ := transfer~address~uint256_HBC__fail(this, msgsender_MSG, msgvalue_MSG, _address_s750, _tokens_s750);
[L2879]  COND FALSE  !(!!__tmp__stopped_HBC[this])
[L2883]              __var_12 := null;
[L2884]  COND FALSE  !(!(_address_s750 != null))
[L2888]  COND FALSE  !(!(__tmp__forbiddenAddresses_HBC[this][msgsender_MSG] != msgsender_MSG))
[L2892]  COND FALSE  !(!(__tmp__forbiddenAddresses_HBC[this][_address_s750] != _address_s750))
[L2896]  COND FALSE  !(_tokens_s750 == 0)
[L2900]  COND FALSE  !(!(__tmp__balances_HBC[this][msgsender_MSG] >= _tokens_s750))
[L2904]  CALL        call __var_13 := sub~uint256~uint256~string_SafeMath__fail(this, this, 0, __tmp__balances_HBC[this][msgsender_MSG], _tokens_s750, -2084992712);
[L2301]  COND FALSE  !(!(b_s53 <= a_s53))
[L2305]              c_s53 := (a_s53 - b_s53) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2306]              __ret_0_ := c_s53;
[L2904]  RET         call __var_13 := sub~uint256~uint256~string_SafeMath__fail(this, this, 0, __tmp__balances_HBC[this][msgsender_MSG], _tokens_s750, -2084992712);
[L2905]  COND FALSE  !(revert)
[L2908]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] - __tmp__balances_HBC[this][msgsender_MSG];
[L2909]              __tmp__balances_HBC[this][msgsender_MSG] := __var_13;
[L2910]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] + __tmp__balances_HBC[this][msgsender_MSG];
[L2911]  CALL        call __var_14 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__balances_HBC[this][_address_s750], _tokens_s750);
[L2277]              c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2278]  COND TRUE   !(c_s26 >= a_s26)
[L2279]              revert := true;
[L2911]  RET         call __var_14 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__balances_HBC[this][_address_s750], _tokens_s750);
[L2912]  COND TRUE   revert
[L977]   RET         call __ret_0_ := transfer~address~uint256_HBC__fail(this, msgsender_MSG, msgvalue_MSG, _address_s750, _tokens_s750);
[L978]               assume revert || gas < 0;
[L4379]  RET         call __ret_0_transfer := transfer~address~uint256_HBC(this, msgsender_MSG, msgvalue_MSG, _address_s750, _tokens_s750);
[L4530]  RET         call CorralChoice_HBC(this);

[2020-11-25 17:39:41,199 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 17:39:41,200 INFO  L82        PathProgramCache]: Analyzing trace with hash 2009231966, now seen corresponding path program 1 times
[2020-11-25 17:39:41,200 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 17:39:41,209 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 17:39:41,290 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 17:39:41,290 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 17:39:41,290 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [14] imperfect sequences [] total 14
[2020-11-25 17:39:41,290 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 17:39:41,290 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 14 interpolants.
[2020-11-25 17:39:41,290 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=30, Invalid=152, Unknown=0, NotChecked=0, Total=182
[2020-11-25 17:39:41,291 INFO  L87              Difference]: Start difference. First operand 2823 states and 3154 transitions. cyclomatic complexity: 343 Second operand 14 states.
[2020-11-25 17:39:42,579 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 17:39:42,579 INFO  L93              Difference]: Finished difference Result 2883 states and 3281 transitions.
[2020-11-25 17:39:42,579 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 14 states. 
[2020-11-25 17:39:42,579 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2883 states and 3281 transitions.
[2020-11-25 17:39:42,585 INFO  L131   ngComponentsAnalysis]: Automaton has 9 accepting balls. 18
[2020-11-25 17:39:42,592 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2883 states to 2883 states and 3281 transitions.
[2020-11-25 17:39:42,592 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 808
[2020-11-25 17:39:42,593 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 808
[2020-11-25 17:39:42,593 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 2883 states and 3281 transitions.
[2020-11-25 17:39:42,594 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 17:39:42,594 INFO  L728         BuchiCegarLoop]: Abstraction has 2883 states and 3281 transitions.
[2020-11-25 17:39:42,596 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 2883 states and 3281 transitions.
[2020-11-25 17:39:42,610 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 2883 to 2790.
[2020-11-25 17:39:42,610 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 2790 states.
[2020-11-25 17:39:42,613 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 2790 states to 2790 states and 3103 transitions.
[2020-11-25 17:39:42,613 INFO  L751         BuchiCegarLoop]: Abstraction has 2790 states and 3103 transitions.
[2020-11-25 17:39:42,613 INFO  L631         BuchiCegarLoop]: Abstraction has 2790 states and 3103 transitions.
[2020-11-25 17:39:42,613 INFO  L445         BuchiCegarLoop]: ======== Iteration 13============
[2020-11-25 17:39:42,614 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2790 states and 3103 transitions.
[2020-11-25 17:39:42,616 INFO  L131   ngComponentsAnalysis]: Automaton has 5 accepting balls. 10
[2020-11-25 17:39:42,616 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 17:39:42,616 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 17:39:42,617 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 17:39:42,617 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_HBC0 := false;
[L2]                 call_transfer_HBC0 := false;
[L2]     CALL        call main();
[L4520]              assume null == 0;
[L4521]  CALL        call this := FreshRefGenerator__success();
[L2236]              havoc newRef;
[L2237]              assume Alloc[newRef] == false;
[L2238]              Alloc[newRef] := true;
[L2239]              assume newRef != null;
[L4521]  RET         call this := FreshRefGenerator__success();
[L4522]              assume now >= 0;
[L4523]              assume DType[this] == HBC;
[L4524]              assume msgvalue_MSG == 0;
[L4525]              gas := gas - 53000;
[L4526]  CALL        call HBC_HBC(this, msgsender_MSG, msgvalue_MSG);
[L254]               havoc __exception;
[L255]               revert := false;
[L256]   COND FALSE  !(__exception)
[L283]   CALL        call HBC_HBC__success(this, msgsender_MSG, msgvalue_MSG);
[L2495]  CALL        call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L2424]  CALL        call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2409]              assume msgsender_MSG != null;
[L2410]              Balance[this] := 0;
[L2424]  RET         call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2425]  COND FALSE  !(revert)
[L2495]  RET         call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L2496]  COND FALSE  !(revert)
[L2499]  CALL        call HBC_HBC_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2458]              assume msgsender_MSG != null;
[L2459]              Balance[this] := 0;
[L2460]              TOKEN_DECIMALS_HBC[this] := 1000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2461]              name_HBC[this] := 1908934807;
[L2462]              symbol_HBC[this] := -845215461;
[L2463]              totalTokenSupply_HBC[this] := 10000000000 * TOKEN_DECIMALS_HBC[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2464]              decimals_HBC[this] := 18;
[L2465]              stopped_HBC[this] := false;
[L2466]              owner_HBC[this] := null;
[L2467]              totalBurned_HBC[this] := 0;
[L2468]              balances_HBC[this] := zeroRefintArr();
[L2469]              sum_balances0[this] := 0;
[L2470]              allowed_HBC[this] := zeroRefRefintArr();
[L2471]              sum_allowed1[this] := 0;
[L2472]              forbiddenAddresses_HBC[this] := zeroRefRefArr();
[L2474]              owner_HBC[this] := msgsender_MSG;
[L2475]              sum_balances0[this] := sum_balances0[this] - balances_HBC[this][owner_HBC[this]];
[L2476]              balances_HBC[this][owner_HBC[this]] := totalTokenSupply_HBC[this];
[L2477]              sum_balances0[this] := sum_balances0[this] + balances_HBC[this][owner_HBC[this]];
[L2478]              assert { :EventEmitted "Transfer_HBC" } true;
[L2499]  RET         call HBC_HBC_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2500]  COND FALSE  !(revert)
[L283]   RET         call HBC_HBC__success(this, msgsender_MSG, msgvalue_MSG);
[L284]               assume !revert && gas >= 0;
[L4526]  RET         call HBC_HBC(this, msgsender_MSG, msgvalue_MSG);
[L4527]              assume !revert && gas >= 0;
[L4530]  CALL        call CorralChoice_HBC(this);
[L4311]              havoc msgsender_MSG;
[L4312]              havoc msgvalue_MSG;
[L4313]              havoc choice;
[L4314]              havoc __ret_0_totalSupply;
[L4315]              havoc _owner_s433;
[L4316]              havoc __ret_0_balanceOf;
[L4317]              havoc _address_s750;
[L4318]              havoc _tokens_s750;
[L4319]              havoc __ret_0_transfer;
[L4320]              havoc _owner_s648;
[L4321]              havoc _spender_s648;
[L4322]              havoc __ret_0_allowance;
[L4323]              havoc _from_s570;
[L4324]              havoc _to_s570;
[L4325]              havoc _value_s570;
[L4326]              havoc __ret_0_transferFrom;
[L4327]              havoc _spender_s612;
[L4328]              havoc _tokens_s612;
[L4329]              havoc __ret_0_approve;
[L4330]              havoc __ret_0_TOKEN_DECIMALS;
[L4331]              havoc __ret_0_name;
[L4332]              havoc __ret_0_symbol;
[L4333]              havoc __ret_0_totalTokenSupply;
[L4334]              havoc __ret_0_decimals;
[L4335]              havoc __ret_0_stopped;
[L4336]              havoc __ret_0_owner;
[L4337]              havoc __ret_0_totalBurned;
[L4338]              havoc arg951_s0;
[L4339]              havoc __ret_0_balances;
[L4340]              havoc _newAddr_s337;
[L4341]              havoc _newAddr_s350;
[L4342]              havoc _value_s413;
[L4343]              havoc __ret_0_burn;
[L4344]              havoc _newOwner_s812;
[L4345]              havoc _spender_s881;
[L4346]              havoc _addedValue_s881;
[L4347]              havoc success_s881;
[L4348]              havoc _spender_s948;
[L4349]              havoc _subtractedValue_s948;
[L4350]              havoc success_s948;
[L4351]              havoc tmpNow;
[L4352]              havoc gas;
[L4353]              assume gas > 4000000 && gas <= 8000000;
[L4354]              tmpNow := now;
[L4355]              havoc now;
[L4356]              assume now > tmpNow;
[L4357]              assume msgsender_MSG != null;
[L4358]              assume DType[msgsender_MSG] != SafeMath;
[L4359]              assume DType[msgsender_MSG] != ERC20Interface;
[L4360]              assume DType[msgsender_MSG] != HBC;
[L4361]              Alloc[msgsender_MSG] := true;
[L4362]  COND FALSE  !(choice == 24)
[L4368]  COND FALSE  !(choice == 23)
[L4374]  COND FALSE  !(choice == 22)
[L4381]  COND FALSE  !(choice == 21)
[L4387]  COND FALSE  !(choice == 20)
[L4394]  COND FALSE  !(choice == 19)
[L4401]  COND FALSE  !(choice == 18)
[L4407]  COND FALSE  !(choice == 17)
[L4413]  COND FALSE  !(choice == 16)
[L4419]  COND FALSE  !(choice == 15)
[L4425]  COND FALSE  !(choice == 14)
[L4431]  COND FALSE  !(choice == 13)
[L4437]  COND FALSE  !(choice == 12)
[L4443]  COND FALSE  !(choice == 11)
[L4449]  COND FALSE  !(choice == 10)
[L4455]  COND TRUE   choice == 9
[L4456]              gas := gas - 21000;
[L4457]  COND TRUE   gas >= 0
[L4458]              assume msgvalue_MSG == 0;
[L4459]  CALL        call pauseTransfer_HBC(this, msgsender_MSG, msgvalue_MSG);
[L317]               havoc __exception;
[L318]               revert := false;
[L319]   COND FALSE  !(__exception)
[L346]   CALL        call pauseTransfer_HBC__success(this, msgsender_MSG, msgvalue_MSG);
[L2516]  CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4108]  COND FALSE  !(!(msgsender_MSG == owner_HBC[this]))
[L2516]  RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2517]  COND FALSE  !(revert)
[L2520]              stopped_HBC[this] := true;
[L346]   RET         call pauseTransfer_HBC__success(this, msgsender_MSG, msgvalue_MSG);
[L347]               assume !revert && gas >= 0;
[L4459]  RET         call pauseTransfer_HBC(this, msgsender_MSG, msgvalue_MSG);
[L4530]  RET         call CorralChoice_HBC(this);
[L4530]  CALL        call CorralChoice_HBC(this);
[L4311]              havoc msgsender_MSG;
[L4312]              havoc msgvalue_MSG;
[L4313]              havoc choice;
[L4314]              havoc __ret_0_totalSupply;
[L4315]              havoc _owner_s433;
[L4316]              havoc __ret_0_balanceOf;
[L4317]              havoc _address_s750;
[L4318]              havoc _tokens_s750;
[L4319]              havoc __ret_0_transfer;
[L4320]              havoc _owner_s648;
[L4321]              havoc _spender_s648;
[L4322]              havoc __ret_0_allowance;
[L4323]              havoc _from_s570;
[L4324]              havoc _to_s570;
[L4325]              havoc _value_s570;
[L4326]              havoc __ret_0_transferFrom;
[L4327]              havoc _spender_s612;
[L4328]              havoc _tokens_s612;
[L4329]              havoc __ret_0_approve;
[L4330]              havoc __ret_0_TOKEN_DECIMALS;
[L4331]              havoc __ret_0_name;
[L4332]              havoc __ret_0_symbol;
[L4333]              havoc __ret_0_totalTokenSupply;
[L4334]              havoc __ret_0_decimals;
[L4335]              havoc __ret_0_stopped;
[L4336]              havoc __ret_0_owner;
[L4337]              havoc __ret_0_totalBurned;
[L4338]              havoc arg951_s0;
[L4339]              havoc __ret_0_balances;
[L4340]              havoc _newAddr_s337;
[L4341]              havoc _newAddr_s350;
[L4342]              havoc _value_s413;
[L4343]              havoc __ret_0_burn;
[L4344]              havoc _newOwner_s812;
[L4345]              havoc _spender_s881;
[L4346]              havoc _addedValue_s881;
[L4347]              havoc success_s881;
[L4348]              havoc _spender_s948;
[L4349]              havoc _subtractedValue_s948;
[L4350]              havoc success_s948;
[L4351]              havoc tmpNow;
[L4352]              havoc gas;
[L4353]              assume gas > 4000000 && gas <= 8000000;
[L4354]              tmpNow := now;
[L4355]              havoc now;
[L4356]              assume now > tmpNow;
[L4357]              assume msgsender_MSG != null;
[L4358]              assume DType[msgsender_MSG] != SafeMath;
[L4359]              assume DType[msgsender_MSG] != ERC20Interface;
[L4360]              assume DType[msgsender_MSG] != HBC;
[L4361]              Alloc[msgsender_MSG] := true;
[L4362]  COND FALSE  !(choice == 24)
[L4368]  COND FALSE  !(choice == 23)
[L4374]  COND TRUE   choice == 22
[L4375]              gas := gas - 21000;
[L4376]  COND TRUE   gas >= 0
[L4377]              assume _tokens_s750 >= 0 && _tokens_s750 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4378]              assume msgvalue_MSG == 0;
[L4379]  CALL        call __ret_0_transfer := transfer~address~uint256_HBC(this, msgsender_MSG, msgvalue_MSG, _address_s750, _tokens_s750);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == _address_s750 && _tokens_s750 <= balances_HBC[this][msgsender_MSG]) && _tokens_s750 >= 0) && _tokens_s750 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_HBC[this][_address_s750] >= 0) && balances_HBC[this][_address_s750] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_HBC[this][msgsender_MSG] >= 0) && balances_HBC[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_HBC0 := true;
[L2]                 call_transfer_HBC0 := false;
[L2]                 revert := revert_hold;
[L951]               havoc __exception;
[L952]               revert := false;
[L953]   COND TRUE   __exception
[L954]               __tmp__Balance := Balance;
[L955]               __tmp__DType := DType;
[L956]               __tmp__Alloc := Alloc;
[L957]               __tmp__balance_ADDR := balance_ADDR;
[L958]               __tmp__M_Ref_int := M_Ref_int;
[L959]               __tmp__sum_balances0 := sum_balances0;
[L960]               __tmp__alloc_allowed_HBC_lvl0 := alloc_allowed_HBC_lvl0;
[L961]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L962]               __tmp__sum_allowed1 := sum_allowed1;
[L963]               __tmp__sum_forbiddenAddresses2 := sum_forbiddenAddresses2;
[L964]               __tmp__Length := Length;
[L965]               __tmp__now := now;
[L966]               __tmp__TOKEN_DECIMALS_HBC := TOKEN_DECIMALS_HBC;
[L967]               __tmp__name_HBC := name_HBC;
[L968]               __tmp__symbol_HBC := symbol_HBC;
[L969]               __tmp__totalTokenSupply_HBC := totalTokenSupply_HBC;
[L970]               __tmp__decimals_HBC := decimals_HBC;
[L971]               __tmp__stopped_HBC := stopped_HBC;
[L972]               __tmp__owner_HBC := owner_HBC;
[L973]               __tmp__totalBurned_HBC := totalBurned_HBC;
[L974]               __tmp__balances_HBC := balances_HBC;
[L975]               __tmp__allowed_HBC := allowed_HBC;
[L976]               __tmp__forbiddenAddresses_HBC := forbiddenAddresses_HBC;
[L977]   CALL        call __ret_0_ := transfer~address~uint256_HBC__fail(this, msgsender_MSG, msgvalue_MSG, _address_s750, _tokens_s750);
[L2879]  COND TRUE   !!__tmp__stopped_HBC[this]
[L2880]              revert := true;
[L977]   RET         call __ret_0_ := transfer~address~uint256_HBC__fail(this, msgsender_MSG, msgvalue_MSG, _address_s750, _tokens_s750);
[L978]               assume revert || gas < 0;
[L4379]  RET         call __ret_0_transfer := transfer~address~uint256_HBC(this, msgsender_MSG, msgvalue_MSG, _address_s750, _tokens_s750);
[L4530]  RET         call CorralChoice_HBC(this);

Loop:
[L4530]  CALL        call CorralChoice_HBC(this);
[L4311]              havoc msgsender_MSG;
[L4312]              havoc msgvalue_MSG;
[L4313]              havoc choice;
[L4314]              havoc __ret_0_totalSupply;
[L4315]              havoc _owner_s433;
[L4316]              havoc __ret_0_balanceOf;
[L4317]              havoc _address_s750;
[L4318]              havoc _tokens_s750;
[L4319]              havoc __ret_0_transfer;
[L4320]              havoc _owner_s648;
[L4321]              havoc _spender_s648;
[L4322]              havoc __ret_0_allowance;
[L4323]              havoc _from_s570;
[L4324]              havoc _to_s570;
[L4325]              havoc _value_s570;
[L4326]              havoc __ret_0_transferFrom;
[L4327]              havoc _spender_s612;
[L4328]              havoc _tokens_s612;
[L4329]              havoc __ret_0_approve;
[L4330]              havoc __ret_0_TOKEN_DECIMALS;
[L4331]              havoc __ret_0_name;
[L4332]              havoc __ret_0_symbol;
[L4333]              havoc __ret_0_totalTokenSupply;
[L4334]              havoc __ret_0_decimals;
[L4335]              havoc __ret_0_stopped;
[L4336]              havoc __ret_0_owner;
[L4337]              havoc __ret_0_totalBurned;
[L4338]              havoc arg951_s0;
[L4339]              havoc __ret_0_balances;
[L4340]              havoc _newAddr_s337;
[L4341]              havoc _newAddr_s350;
[L4342]              havoc _value_s413;
[L4343]              havoc __ret_0_burn;
[L4344]              havoc _newOwner_s812;
[L4345]              havoc _spender_s881;
[L4346]              havoc _addedValue_s881;
[L4347]              havoc success_s881;
[L4348]              havoc _spender_s948;
[L4349]              havoc _subtractedValue_s948;
[L4350]              havoc success_s948;
[L4351]              havoc tmpNow;
[L4352]              havoc gas;
[L4353]              assume gas > 4000000 && gas <= 8000000;
[L4354]              tmpNow := now;
[L4355]              havoc now;
[L4356]              assume now > tmpNow;
[L4357]              assume msgsender_MSG != null;
[L4358]              assume DType[msgsender_MSG] != SafeMath;
[L4359]              assume DType[msgsender_MSG] != ERC20Interface;
[L4360]              assume DType[msgsender_MSG] != HBC;
[L4361]              Alloc[msgsender_MSG] := true;
[L4362]  COND FALSE  !(choice == 24)
[L4368]  COND FALSE  !(choice == 23)
[L4374]  COND TRUE   choice == 22
[L4375]              gas := gas - 21000;
[L4376]  COND TRUE   gas >= 0
[L4377]              assume _tokens_s750 >= 0 && _tokens_s750 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4378]              assume msgvalue_MSG == 0;
[L4379]  CALL        call __ret_0_transfer := transfer~address~uint256_HBC(this, msgsender_MSG, msgvalue_MSG, _address_s750, _tokens_s750);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == _address_s750 && _tokens_s750 <= balances_HBC[this][msgsender_MSG]) && _tokens_s750 >= 0) && _tokens_s750 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_HBC[this][_address_s750] >= 0) && balances_HBC[this][_address_s750] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_HBC[this][msgsender_MSG] >= 0) && balances_HBC[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_HBC0 := true;
[L2]                 call_transfer_HBC0 := false;
[L2]                 revert := revert_hold;
[L951]               havoc __exception;
[L952]               revert := false;
[L953]   COND TRUE   __exception
[L954]               __tmp__Balance := Balance;
[L955]               __tmp__DType := DType;
[L956]               __tmp__Alloc := Alloc;
[L957]               __tmp__balance_ADDR := balance_ADDR;
[L958]               __tmp__M_Ref_int := M_Ref_int;
[L959]               __tmp__sum_balances0 := sum_balances0;
[L960]               __tmp__alloc_allowed_HBC_lvl0 := alloc_allowed_HBC_lvl0;
[L961]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L962]               __tmp__sum_allowed1 := sum_allowed1;
[L963]               __tmp__sum_forbiddenAddresses2 := sum_forbiddenAddresses2;
[L964]               __tmp__Length := Length;
[L965]               __tmp__now := now;
[L966]               __tmp__TOKEN_DECIMALS_HBC := TOKEN_DECIMALS_HBC;
[L967]               __tmp__name_HBC := name_HBC;
[L968]               __tmp__symbol_HBC := symbol_HBC;
[L969]               __tmp__totalTokenSupply_HBC := totalTokenSupply_HBC;
[L970]               __tmp__decimals_HBC := decimals_HBC;
[L971]               __tmp__stopped_HBC := stopped_HBC;
[L972]               __tmp__owner_HBC := owner_HBC;
[L973]               __tmp__totalBurned_HBC := totalBurned_HBC;
[L974]               __tmp__balances_HBC := balances_HBC;
[L975]               __tmp__allowed_HBC := allowed_HBC;
[L976]               __tmp__forbiddenAddresses_HBC := forbiddenAddresses_HBC;
[L977]   CALL        call __ret_0_ := transfer~address~uint256_HBC__fail(this, msgsender_MSG, msgvalue_MSG, _address_s750, _tokens_s750);
[L2879]  COND TRUE   !!__tmp__stopped_HBC[this]
[L2880]              revert := true;
[L977]   RET         call __ret_0_ := transfer~address~uint256_HBC__fail(this, msgsender_MSG, msgvalue_MSG, _address_s750, _tokens_s750);
[L978]               assume revert || gas < 0;
[L4379]  RET         call __ret_0_transfer := transfer~address~uint256_HBC(this, msgsender_MSG, msgvalue_MSG, _address_s750, _tokens_s750);
[L4530]  RET         call CorralChoice_HBC(this);

[2020-11-25 17:39:42,620 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 17:39:42,620 INFO  L82        PathProgramCache]: Analyzing trace with hash 412073758, now seen corresponding path program 1 times
[2020-11-25 17:39:42,621 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 17:39:42,630 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-25 17:39:42,640 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-25 17:39:42,691 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 17:39:42,691 INFO  L82        PathProgramCache]: Analyzing trace with hash -1305392730, now seen corresponding path program 1 times
[2020-11-25 17:39:42,692 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 17:39:42,695 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-25 17:39:42,698 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-25 17:39:42,706 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 17:39:42,706 INFO  L82        PathProgramCache]: Analyzing trace with hash 373893443, now seen corresponding path program 1 times
[2020-11-25 17:39:42,707 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 17:39:42,718 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-25 17:39:42,732 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #1: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #2: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #3: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #4: 397 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 397 to 787
Garbage collection #5: 787 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 787 to 1571
Garbage collection #1: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #2: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #3: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #4: 317 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 317 to 631
Garbage collection #5: 631 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 631 to 1259
Garbage collection #6: 1259 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 1259 to 2503
Garbage collection #7: 2503 nodes / 0 free / 0.001s / 0.002s total
Resizing node table from 2503 to 5003
Garbage collection #1: 101 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 101 to 199
Garbage collection #2: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #3: 397 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 397 to 787
Garbage collection #4: 787 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 787 to 1571
Garbage collection #5: 1571 nodes / 0 free / 0.001s / 0.002s total
Resizing node table from 1571 to 3137
Garbage collection #6: 3137 nodes / 0 free / 0.001s / 0.003s total
Resizing node table from 3137 to 6271
Garbage collection #7: 6271 nodes / 0 free / 0.001s / 0.004s total
Resizing node table from 6271 to 12541
[2020-11-25 17:39:43,092 WARN  L188               SmtUtils]: Spent 105.00 ms on a formula simplification that was a NOOP. DAG size: 202
[2020-11-25 17:39:43,466 WARN  L188               SmtUtils]: Spent 370.00 ms on a formula simplification. DAG size of input: 247 DAG size of output: 237
Garbage collection #1: 89 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 89 to 173
Garbage collection #2: 173 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 173 to 337
Garbage collection #3: 337 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 337 to 673
Garbage collection #4: 673 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 673 to 1327
Garbage collection #5: 1327 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 1327 to 2647
Garbage collection #6: 2647 nodes / 0 free / 0.001s / 0.002s total
Resizing node table from 2647 to 5281
Garbage collection #7: 5281 nodes / 0 free / 0.001s / 0.003s total
Resizing node table from 5281 to 10559
Garbage collection #1: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #2: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #3: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #4: 397 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 397 to 787
Garbage collection #5: 787 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 787 to 1571
Garbage collection #6: 1571 nodes / 0 free / 0.001s / 0.002s total
Resizing node table from 1571 to 3137
Garbage collection #7: 3137 nodes / 0 free / 0.001s / 0.003s total
Resizing node table from 3137 to 6271
[2020-11-25 17:39:43,684 WARN  L188               SmtUtils]: Spent 130.00 ms on a formula simplification that was a NOOP. DAG size: 316
Garbage collection #1: 131 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 131 to 257
Garbage collection #2: 257 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 257 to 509
Garbage collection #3: 509 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 509 to 1013
Garbage collection #4: 1013 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1013 to 2017
Garbage collection #5: 2017 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 2017 to 4027
Garbage collection #6: 4027 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 4027 to 8053
[2020-11-25 17:39:43,790 WARN  L188               SmtUtils]: Spent 100.00 ms on a formula simplification that was a NOOP. DAG size: 251
Garbage collection #1: 97 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 97 to 193
Garbage collection #2: 193 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 193 to 383
Garbage collection #3: 383 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 383 to 761
Garbage collection #4: 761 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 761 to 1511
Garbage collection #5: 1511 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1511 to 3019
Garbage collection #6: 3019 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 3019 to 6037
Garbage collection #7: 6037 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 6037 to 12073
Garbage collection #1: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #2: 103 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 103 to 199
Garbage collection #3: 199 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 199 to 397
Garbage collection #4: 397 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 397 to 787
Garbage collection #5: 787 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 787 to 1571
Garbage collection #6: 1571 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 1571 to 3137
[2020-11-25 17:39:43,922 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #2: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #3: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #4: 397 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 397 to 787
Garbage collection #5: 787 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 787 to 1571
Garbage collection #1: 41 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 41 to 79
Garbage collection #2: 79 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 79 to 157
Garbage collection #3: 157 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 157 to 313
Garbage collection #4: 313 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 313 to 619
Garbage collection #5: 619 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 619 to 1237
Garbage collection #1: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #2: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #3: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #4: 397 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 397 to 787
Garbage collection #5: 787 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 787 to 1571
Garbage collection #1: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #2: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #3: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #4: 277 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 277 to 547
Garbage collection #5: 547 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 547 to 1093
Garbage collection #1: 101 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 101 to 199
Garbage collection #2: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #3: 397 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 397 to 787
Garbage collection #4: 787 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 787 to 1571
Garbage collection #5: 1571 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1571 to 3137
Garbage collection #6: 3137 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3137 to 6271
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #2: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #3: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #1: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #2: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #3: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #2: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #3: 223 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 223 to 443
Garbage collection #4: 443 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 443 to 883
Garbage collection #5: 883 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 883 to 1759
Garbage collection #6: 1759 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1759 to 3517
Garbage collection #1: 71 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 71 to 139
Garbage collection #2: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #3: 277 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 277 to 547
Garbage collection #4: 547 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 547 to 1093
Garbage collection #5: 1093 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1093 to 2179
Garbage collection #6: 2179 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2179 to 4357
Garbage collection #1: 41 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 41 to 79
Garbage collection #2: 79 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 79 to 157
Garbage collection #3: 157 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 157 to 313
Garbage collection #4: 313 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 313 to 619
Garbage collection #5: 619 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 619 to 1237
Garbage collection #1: 127 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 127 to 251
Garbage collection #2: 251 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 251 to 499
Garbage collection #3: 499 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 499 to 997
Garbage collection #4: 997 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 997 to 1993
Garbage collection #5: 1993 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1993 to 3967
Garbage collection #6: 3967 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3967 to 7933
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #1: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #2: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #3: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #4: 397 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 397 to 787
Garbage collection #5: 787 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 787 to 1571
Garbage collection #1: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #2: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #3: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #4: 317 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 317 to 631
Garbage collection #5: 631 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 631 to 1259
Garbage collection #6: 1259 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1259 to 2503
Garbage collection #1: 101 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 101 to 199
Garbage collection #2: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #3: 397 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 397 to 787
Garbage collection #4: 787 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 787 to 1571
Garbage collection #5: 1571 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1571 to 3137
Garbage collection #6: 3137 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3137 to 6271
[2020-11-25 17:39:44,726 WARN  L188               SmtUtils]: Spent 108.00 ms on a formula simplification that was a NOOP. DAG size: 201
[2020-11-25 17:39:45,040 WARN  L188               SmtUtils]: Spent 311.00 ms on a formula simplification. DAG size of input: 245 DAG size of output: 236
Garbage collection #1: 89 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 89 to 173
Garbage collection #2: 173 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 173 to 337
Garbage collection #3: 337 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 337 to 673
Garbage collection #4: 673 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 673 to 1327
Garbage collection #5: 1327 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1327 to 2647
Garbage collection #6: 2647 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2647 to 5281
Garbage collection #7: 5281 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 5281 to 10559
Garbage collection #1: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #2: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #3: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #4: 397 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 397 to 787
Garbage collection #5: 787 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 787 to 1571
Garbage collection #6: 1571 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1571 to 3137
Garbage collection #7: 3137 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3137 to 6271
Garbage collection #1: 131 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 131 to 257
Garbage collection #2: 257 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 257 to 509
Garbage collection #3: 509 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 509 to 1013
Garbage collection #4: 1013 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1013 to 2017
Garbage collection #5: 2017 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2017 to 4027
Garbage collection #6: 4027 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 4027 to 8053
Garbage collection #7: 8053 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 8053 to 16103
[2020-11-25 17:39:46,503 WARN  L188               SmtUtils]: Spent 1.23 s on a formula simplification. DAG size of input: 651 DAG size of output: 644
Garbage collection #1: 277 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 277 to 547
Garbage collection #2: 547 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 547 to 1093
Garbage collection #3: 1093 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1093 to 2179
Garbage collection #4: 2179 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2179 to 4357
Garbage collection #5: 4357 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 4357 to 8713
Garbage collection #6: 8713 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 8713 to 17419
Garbage collection #7: 17419 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17419 to 34819
Garbage collection #1: 71 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 71 to 139
Garbage collection #2: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #3: 277 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 277 to 547
Garbage collection #4: 547 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 547 to 1093
Garbage collection #5: 1093 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1093 to 2179
Garbage collection #6: 2179 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2179 to 4357
[2020-11-25 17:39:46,621 WARN  L188               SmtUtils]: Spent 102.00 ms on a formula simplification. DAG size of input: 196 DAG size of output: 193
Garbage collection #1: 107 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 107 to 211
Garbage collection #2: 211 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 211 to 421
Garbage collection #3: 421 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 421 to 839
Garbage collection #4: 839 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 839 to 1669
Garbage collection #5: 1669 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1669 to 3331
Garbage collection #6: 3331 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3331 to 6661
Garbage collection #1: 67 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 67 to 131
Garbage collection #2: 131 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 131 to 257
Garbage collection #3: 257 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 257 to 509
Garbage collection #4: 509 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 509 to 1013
Garbage collection #5: 1013 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1013 to 2017
[2020-11-25 17:39:46,999 WARN  L188               SmtUtils]: Spent 207.00 ms on a formula simplification. DAG size of input: 309 DAG size of output: 308
Garbage collection #1: 109 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 109 to 211
Garbage collection #2: 211 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 211 to 421
Garbage collection #3: 421 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 421 to 839
Garbage collection #4: 839 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 839 to 1669
Garbage collection #5: 1669 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 1669 to 3331
Garbage collection #6: 3331 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 3331 to 6661
Garbage collection #1: 107 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 107 to 211
Garbage collection #2: 211 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 211 to 421
Garbage collection #3: 421 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 421 to 839
Garbage collection #4: 839 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 839 to 1669
Garbage collection #5: 1669 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1669 to 3331
Garbage collection #6: 3331 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3331 to 6661
[2020-11-25 17:39:47,104 WARN  L188               SmtUtils]: Spent 102.00 ms on a formula simplification that was a NOOP. DAG size: 304
[2020-11-25 17:39:47,117 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-25 17:39:47,134 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-25 17:39:47,141 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer CFG 25.11 05:39:47 BasicIcfg
[2020-11-25 17:39:47,141 INFO  L132        PluginConnector]: ------------------------ END BuchiAutomizer----------------------------
[2020-11-25 17:39:47,141 INFO  L168              Benchmark]: Toolchain (without parser) took 23589.47 ms. Allocated memory was 1.0 GB in the beginning and 2.5 GB in the end (delta: 1.4 GB). Free memory was 935.2 MB in the beginning and 1.2 GB in the end (delta: -314.3 MB). Peak memory consumption was 1.4 GB. Max. memory is 15.3 GB.
[2020-11-25 17:39:47,142 INFO  L168              Benchmark]: Boogie PL CUP Parser took 0.15 ms. Allocated memory is still 1.0 GB. Free memory is still 951.3 MB. There was no memory consumed. Max. memory is 15.3 GB.
[2020-11-25 17:39:47,142 INFO  L168              Benchmark]: Boogie Preprocessor took 96.34 ms. Allocated memory is still 1.0 GB. Free memory was 935.2 MB in the beginning and 924.5 MB in the end (delta: 10.7 MB). Peak memory consumption was 10.7 MB. Max. memory is 15.3 GB.
[2020-11-25 17:39:47,142 INFO  L168              Benchmark]: UtopiaSpecLang took 55.73 ms. Allocated memory is still 1.0 GB. Free memory was 924.5 MB in the beginning and 919.1 MB in the end (delta: 5.4 MB). Peak memory consumption was 5.4 MB. Max. memory is 15.3 GB.
[2020-11-25 17:39:47,142 INFO  L168              Benchmark]: Boogie Printer took 21.00 ms. Allocated memory is still 1.0 GB. Free memory was 919.1 MB in the beginning and 913.7 MB in the end (delta: 5.4 MB). Peak memory consumption was 5.4 MB. Max. memory is 15.3 GB.
[2020-11-25 17:39:47,143 INFO  L168              Benchmark]: RCFGBuilder took 723.36 ms. Allocated memory is still 1.0 GB. Free memory was 913.7 MB in the beginning and 801.0 MB in the end (delta: 112.7 MB). Peak memory consumption was 112.7 MB. Max. memory is 15.3 GB.
[2020-11-25 17:39:47,143 INFO  L168              Benchmark]: UtopiaLTL2Aut took 37.05 ms. Allocated memory is still 1.0 GB. Free memory was 801.0 MB in the beginning and 797.4 MB in the end (delta: 3.6 MB). Peak memory consumption was 3.6 MB. Max. memory is 15.3 GB.
[2020-11-25 17:39:47,143 INFO  L168              Benchmark]: BÃ¼chi Program Product took 1474.99 ms. Allocated memory was 1.0 GB in the beginning and 1.2 GB in the end (delta: 191.4 MB). Free memory was 797.4 MB in the beginning and 972.4 MB in the end (delta: -175.1 MB). Peak memory consumption was 171.9 MB. Max. memory is 15.3 GB.
[2020-11-25 17:39:47,144 INFO  L168              Benchmark]: BlockEncodingV2 took 158.49 ms. Allocated memory is still 1.2 GB. Free memory was 972.4 MB in the beginning and 906.9 MB in the end (delta: 65.6 MB). Peak memory consumption was 65.6 MB. Max. memory is 15.3 GB.
[2020-11-25 17:39:47,144 INFO  L168              Benchmark]: BuchiAutomizer took 21019.62 ms. Allocated memory was 1.2 GB in the beginning and 2.5 GB in the end (delta: 1.3 GB). Free memory was 906.9 MB in the beginning and 1.2 GB in the end (delta: -342.6 MB). Peak memory consumption was 1.2 GB. Max. memory is 15.3 GB.
[2020-11-25 17:39:47,146 INFO  L337   ainManager$Toolchain]: #######################  End [Toolchain 1] #######################
 --- Results ---
 * Results from de.uni_freiburg.informatik.ultimate.plugins.blockencoding:
  - StatisticsResult: Initial Icfg
    4120 locations, 7058 edges
  - StatisticsResult: Encoded RCFG
    4080 locations, 6952 edges
 * Results from de.uni_freiburg.informatik.ultimate.core:
  - StatisticsResult: Toolchain Benchmarks
    Benchmark results are:
 * Boogie PL CUP Parser took 0.15 ms. Allocated memory is still 1.0 GB. Free memory is still 951.3 MB. There was no memory consumed. Max. memory is 15.3 GB.
 * Boogie Preprocessor took 96.34 ms. Allocated memory is still 1.0 GB. Free memory was 935.2 MB in the beginning and 924.5 MB in the end (delta: 10.7 MB). Peak memory consumption was 10.7 MB. Max. memory is 15.3 GB.
 * UtopiaSpecLang took 55.73 ms. Allocated memory is still 1.0 GB. Free memory was 924.5 MB in the beginning and 919.1 MB in the end (delta: 5.4 MB). Peak memory consumption was 5.4 MB. Max. memory is 15.3 GB.
 * Boogie Printer took 21.00 ms. Allocated memory is still 1.0 GB. Free memory was 919.1 MB in the beginning and 913.7 MB in the end (delta: 5.4 MB). Peak memory consumption was 5.4 MB. Max. memory is 15.3 GB.
 * RCFGBuilder took 723.36 ms. Allocated memory is still 1.0 GB. Free memory was 913.7 MB in the beginning and 801.0 MB in the end (delta: 112.7 MB). Peak memory consumption was 112.7 MB. Max. memory is 15.3 GB.
 * UtopiaLTL2Aut took 37.05 ms. Allocated memory is still 1.0 GB. Free memory was 801.0 MB in the beginning and 797.4 MB in the end (delta: 3.6 MB). Peak memory consumption was 3.6 MB. Max. memory is 15.3 GB.
 * BÃ¼chi Program Product took 1474.99 ms. Allocated memory was 1.0 GB in the beginning and 1.2 GB in the end (delta: 191.4 MB). Free memory was 797.4 MB in the beginning and 972.4 MB in the end (delta: -175.1 MB). Peak memory consumption was 171.9 MB. Max. memory is 15.3 GB.
 * BlockEncodingV2 took 158.49 ms. Allocated memory is still 1.2 GB. Free memory was 972.4 MB in the beginning and 906.9 MB in the end (delta: 65.6 MB). Peak memory consumption was 65.6 MB. Max. memory is 15.3 GB.
 * BuchiAutomizer took 21019.62 ms. Allocated memory was 1.2 GB in the beginning and 2.5 GB in the end (delta: 1.3 GB). Free memory was 906.9 MB in the beginning and 1.2 GB in the end (delta: -342.6 MB). Peak memory consumption was 1.2 GB. Max. memory is 15.3 GB.
 * Results from de.uni_freiburg.informatik.ultimate.buchiprogramproduct:
  - StatisticsResult: Initial property automaton
    2 locations, 3 edges
  - StatisticsResult: Initial RCFG
    1756 locations, 2197 edges
  - StatisticsResult: BuchiProgram size
    4120 locations, 7058 edges
 * Results from de.uni_freiburg.informatik.ultimate.plugins.generator.traceabstraction:
  - StatisticsResult: Constructed decomposition of program
    Your program was decomposed into 12 terminating modules (12 trivial, 0 deterministic, 0 nondeterministic) and one nonterminating remainder module.12 modules have a trivial ranking function, the largest among these consists of 27 locations. The remainder module has 2790 locations.
  - StatisticsResult: Timing statistics
    BÃ¼chiAutomizer plugin needed 20.9s and 13 iterations.  TraceHistogramMax:2. Analysis of lassos took 5.5s. Construction of modules took 11.1s. BÃ¼chi inclusion checks took 3.3s. Highest rank in rank-based complementation 0. Minimization of det autom 12. Minimization of nondet autom 0. Automata minimization 0.3s AutomataMinimizationTime, 12 MinimizatonAttempts, 7229 StatesRemovedByMinimization, 11 NontrivialMinimizations. Non-live state removal took 0.2s Buchi closure took 0.0s. Biggest automaton had 3594 states and ocurred in iteration 6.	Nontrivial modules had stage [0, 0, 0, 0, 0].	InterpolantCoveringCapabilityFinite: 0/0	InterpolantCoveringCapabilityBuchi: 0/0	HoareTripleCheckerStatistics: 43187 SDtfs, 46152 SDslu, 91731 SDs, 0 SdLazy, 148840 SolverSat, 7721 SolverUnsat, 0 SolverUnknown, 0 SolverNotchecked, 11.1s Time	LassoAnalysisResults: nont1 unkn0 SFLI0 SFLT0 conc0 concLT0 SILN0 SILU12 SILI0 SILT0 lasso0 LassoPreprocessingBenchmarks: LassoTerminationAnalysisBenchmarks: not availableLassoTerminationAnalysisBenchmarks: LassoNonterminationAnalysisSatFixpoint: 0	LassoNonterminationAnalysisSatUnbounded: 0	LassoNonterminationAnalysisUnsat: 0	LassoNonterminationAnalysisUnknown: 0	LassoNonterminationAnalysisTime: 0.0s	
  - TransactionCounterexample: Violation of LTL property LTL
    Found an infinite, lasso-shaped execution that violates the LTL property LTL.
Stem:
address(10000000000000000000000000003) = (new HBC)({from : 10000000000000000000000000007});
[L254]               havoc __exception;
[L255]               revert := false;
[L256]   COND FALSE  !(__exception)
[L283]   CALL        call HBC_HBC__success(this, msgsender_MSG, msgvalue_MSG);
[L2495]  CALL        call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L2424]  CALL        call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2409]              assume msgsender_MSG != null;
[L2410]              Balance[this] := 0;
[L2424]  RET         call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2425]  COND FALSE  !(revert)
[L2495]  RET         call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L2496]  COND FALSE  !(revert)
[L2499]  CALL        call HBC_HBC_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2458]              assume msgsender_MSG != null;
[L2459]              Balance[this] := 0;
[L2460]              TOKEN_DECIMALS_HBC[this] := 1000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2461]              name_HBC[this] := 1908934807;
[L2462]              symbol_HBC[this] := -845215461;
[L2463]              totalTokenSupply_HBC[this] := 10000000000 * TOKEN_DECIMALS_HBC[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2464]              decimals_HBC[this] := 18;
[L2465]              stopped_HBC[this] := false;
[L2466]              owner_HBC[this] := null;
[L2467]              totalBurned_HBC[this] := 0;
[L2468]              balances_HBC[this] := zeroRefintArr();
[L2469]              sum_balances0[this] := 0;
[L2470]              allowed_HBC[this] := zeroRefRefintArr();
[L2471]              sum_allowed1[this] := 0;
[L2472]              forbiddenAddresses_HBC[this] := zeroRefRefArr();
[L2474]              owner_HBC[this] := msgsender_MSG;
[L2475]              sum_balances0[this] := sum_balances0[this] - balances_HBC[this][owner_HBC[this]];
[L2476]              balances_HBC[this][owner_HBC[this]] := totalTokenSupply_HBC[this];
[L2477]              sum_balances0[this] := sum_balances0[this] + balances_HBC[this][owner_HBC[this]];
[L2478]              assert { :EventEmitted "Transfer_HBC" } true;
[L2499]  RET         call HBC_HBC_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2500]  COND FALSE  !(revert)
[L283]   RET         call HBC_HBC__success(this, msgsender_MSG, msgvalue_MSG);
[L284]               assume !revert && gas >= 0;
[L4526]  RET         call HBC_HBC(this, msgsender_MSG, msgvalue_MSG);
HBC(10000000000000000000000000003).pauseTransfer.gas(3979002)({from : 10000000000000000000000000007});
[L317]               havoc __exception;
[L318]               revert := false;
[L319]   COND FALSE  !(__exception)
[L346]   CALL        call pauseTransfer_HBC__success(this, msgsender_MSG, msgvalue_MSG);
[L2516]  CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4108]  COND FALSE  !(!(msgsender_MSG == owner_HBC[this]))
[L2516]  RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2517]  COND FALSE  !(revert)
[L2520]              stopped_HBC[this] := true;
[L346]   RET         call pauseTransfer_HBC__success(this, msgsender_MSG, msgvalue_MSG);
[L347]               assume !revert && gas >= 0;
[L4459]  RET         call pauseTransfer_HBC(this, msgsender_MSG, msgvalue_MSG);
HBC(10000000000000000000000000003).transfer~address~uint256.gas(3979003)({from : 10000000000000000000000000007, _address : 10000000000000000000000000007, _tokens : 0});
[L2]                revert_hold := revert;
[L2]                revert := false;
[L2]                assume ((((((msgsender_MSG == _address_s750 && _tokens_s750 <= balances_HBC[this][msgsender_MSG]) && _tokens_s750 >= 0) && _tokens_s750 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_HBC[this][_address_s750] >= 0) && balances_HBC[this][_address_s750] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_HBC[this][msgsender_MSG] >= 0) && balances_HBC[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                call_transfer_HBC0 := true;
[L2]                call_transfer_HBC0 := false;
[L2]                revert := revert_hold;
[L951]              havoc __exception;
[L952]              revert := false;
[L953]   COND TRUE  __exception
[L954]              __tmp__Balance := Balance;
[L955]              __tmp__DType := DType;
[L956]              __tmp__Alloc := Alloc;
[L957]              __tmp__balance_ADDR := balance_ADDR;
[L958]              __tmp__M_Ref_int := M_Ref_int;
[L959]              __tmp__sum_balances0 := sum_balances0;
[L960]              __tmp__alloc_allowed_HBC_lvl0 := alloc_allowed_HBC_lvl0;
[L961]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L962]              __tmp__sum_allowed1 := sum_allowed1;
[L963]              __tmp__sum_forbiddenAddresses2 := sum_forbiddenAddresses2;
[L964]              __tmp__Length := Length;
[L965]              __tmp__now := now;
[L966]              __tmp__TOKEN_DECIMALS_HBC := TOKEN_DECIMALS_HBC;
[L967]              __tmp__name_HBC := name_HBC;
[L968]              __tmp__symbol_HBC := symbol_HBC;
[L969]              __tmp__totalTokenSupply_HBC := totalTokenSupply_HBC;
[L970]              __tmp__decimals_HBC := decimals_HBC;
[L971]              __tmp__stopped_HBC := stopped_HBC;
[L972]              __tmp__owner_HBC := owner_HBC;
[L973]              __tmp__totalBurned_HBC := totalBurned_HBC;
[L974]              __tmp__balances_HBC := balances_HBC;
[L975]              __tmp__allowed_HBC := allowed_HBC;
[L976]              __tmp__forbiddenAddresses_HBC := forbiddenAddresses_HBC;
[L977]   CALL       call __ret_0_ := transfer~address~uint256_HBC__fail(this, msgsender_MSG, msgvalue_MSG, _address_s750, _tokens_s750);
[L2879]  COND TRUE  !!__tmp__stopped_HBC[this]
[L2880]             revert := true;
[L977]   RET        call __ret_0_ := transfer~address~uint256_HBC__fail(this, msgsender_MSG, msgvalue_MSG, _address_s750, _tokens_s750);
[L978]              assume revert || gas < 0;
[L4379]  RET        call __ret_0_transfer := transfer~address~uint256_HBC(this, msgsender_MSG, msgvalue_MSG, _address_s750, _tokens_s750);

Loop:
HBC(10000000000000000000000000003).transfer~address~uint256.gas(3979001)({from : 10000000000000000000000000007, _address : 10000000000000000000000000007, _tokens : 0});
[L2]                revert_hold := revert;
[L2]                revert := false;
[L2]                assume ((((((msgsender_MSG == _address_s750 && _tokens_s750 <= balances_HBC[this][msgsender_MSG]) && _tokens_s750 >= 0) && _tokens_s750 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_HBC[this][_address_s750] >= 0) && balances_HBC[this][_address_s750] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_HBC[this][msgsender_MSG] >= 0) && balances_HBC[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                call_transfer_HBC0 := true;
[L2]                call_transfer_HBC0 := false;
[L2]                revert := revert_hold;
[L951]              havoc __exception;
[L952]              revert := false;
[L953]   COND TRUE  __exception
[L954]              __tmp__Balance := Balance;
[L955]              __tmp__DType := DType;
[L956]              __tmp__Alloc := Alloc;
[L957]              __tmp__balance_ADDR := balance_ADDR;
[L958]              __tmp__M_Ref_int := M_Ref_int;
[L959]              __tmp__sum_balances0 := sum_balances0;
[L960]              __tmp__alloc_allowed_HBC_lvl0 := alloc_allowed_HBC_lvl0;
[L961]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L962]              __tmp__sum_allowed1 := sum_allowed1;
[L963]              __tmp__sum_forbiddenAddresses2 := sum_forbiddenAddresses2;
[L964]              __tmp__Length := Length;
[L965]              __tmp__now := now;
[L966]              __tmp__TOKEN_DECIMALS_HBC := TOKEN_DECIMALS_HBC;
[L967]              __tmp__name_HBC := name_HBC;
[L968]              __tmp__symbol_HBC := symbol_HBC;
[L969]              __tmp__totalTokenSupply_HBC := totalTokenSupply_HBC;
[L970]              __tmp__decimals_HBC := decimals_HBC;
[L971]              __tmp__stopped_HBC := stopped_HBC;
[L972]              __tmp__owner_HBC := owner_HBC;
[L973]              __tmp__totalBurned_HBC := totalBurned_HBC;
[L974]              __tmp__balances_HBC := balances_HBC;
[L975]              __tmp__allowed_HBC := allowed_HBC;
[L976]              __tmp__forbiddenAddresses_HBC := forbiddenAddresses_HBC;
[L977]   CALL       call __ret_0_ := transfer~address~uint256_HBC__fail(this, msgsender_MSG, msgvalue_MSG, _address_s750, _tokens_s750);
[L2879]  COND TRUE  !!__tmp__stopped_HBC[this]
[L2880]             revert := true;
[L977]   RET        call __ret_0_ := transfer~address~uint256_HBC__fail(this, msgsender_MSG, msgvalue_MSG, _address_s750, _tokens_s750);
[L978]              assume revert || gas < 0;
[L4379]  RET        call __ret_0_transfer := transfer~address~uint256_HBC(this, msgsender_MSG, msgvalue_MSG, _address_s750, _tokens_s750);

End of lasso representation.
RESULT: Ultimate could not prove your program: Toolchain returned no result.
Received shutdown request...
