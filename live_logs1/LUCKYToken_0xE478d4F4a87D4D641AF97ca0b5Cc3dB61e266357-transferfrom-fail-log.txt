This is Ultimate 0.1.24-f1553f5-m
[2020-11-24 20:42:46,807 INFO  L170        SettingsManager]: Resetting all preferences to default values...
[2020-11-24 20:42:46,808 INFO  L174        SettingsManager]: Resetting UltimateCore preferences to default values
[2020-11-24 20:42:46,821 INFO  L177        SettingsManager]: Ultimate Commandline Interface provides no preferences, ignoring...
[2020-11-24 20:42:46,821 INFO  L174        SettingsManager]: Resetting Boogie Preprocessor preferences to default values
[2020-11-24 20:42:46,822 INFO  L174        SettingsManager]: Resetting Boogie Procedure Inliner preferences to default values
[2020-11-24 20:42:46,823 INFO  L174        SettingsManager]: Resetting Abstract Interpretation preferences to default values
[2020-11-24 20:42:46,825 INFO  L174        SettingsManager]: Resetting LassoRanker preferences to default values
[2020-11-24 20:42:46,826 INFO  L174        SettingsManager]: Resetting Reaching Definitions preferences to default values
[2020-11-24 20:42:46,827 INFO  L174        SettingsManager]: Resetting SyntaxChecker preferences to default values
[2020-11-24 20:42:46,828 INFO  L177        SettingsManager]: BÃ¼chi Program Product provides no preferences, ignoring...
[2020-11-24 20:42:46,828 INFO  L174        SettingsManager]: Resetting LTL2Aut preferences to default values
[2020-11-24 20:42:46,829 INFO  L174        SettingsManager]: Resetting PEA to Boogie preferences to default values
[2020-11-24 20:42:46,830 INFO  L174        SettingsManager]: Resetting BlockEncodingV2 preferences to default values
[2020-11-24 20:42:46,831 INFO  L174        SettingsManager]: Resetting ChcToBoogie preferences to default values
[2020-11-24 20:42:46,831 INFO  L174        SettingsManager]: Resetting AutomataScriptInterpreter preferences to default values
[2020-11-24 20:42:46,832 INFO  L174        SettingsManager]: Resetting BuchiAutomizer preferences to default values
[2020-11-24 20:42:46,833 INFO  L174        SettingsManager]: Resetting CACSL2BoogieTranslator preferences to default values
[2020-11-24 20:42:46,835 INFO  L174        SettingsManager]: Resetting CodeCheck preferences to default values
[2020-11-24 20:42:46,836 INFO  L174        SettingsManager]: Resetting InvariantSynthesis preferences to default values
[2020-11-24 20:42:46,837 INFO  L174        SettingsManager]: Resetting RCFGBuilder preferences to default values
[2020-11-24 20:42:46,838 INFO  L174        SettingsManager]: Resetting TraceAbstraction preferences to default values
[2020-11-24 20:42:46,840 INFO  L177        SettingsManager]: TraceAbstractionConcurrent provides no preferences, ignoring...
[2020-11-24 20:42:46,840 INFO  L177        SettingsManager]: TraceAbstractionWithAFAs provides no preferences, ignoring...
[2020-11-24 20:42:46,840 INFO  L174        SettingsManager]: Resetting TreeAutomizer preferences to default values
[2020-11-24 20:42:46,840 INFO  L174        SettingsManager]: Resetting IcfgToChc preferences to default values
[2020-11-24 20:42:46,841 INFO  L174        SettingsManager]: Resetting IcfgTransformer preferences to default values
[2020-11-24 20:42:46,841 INFO  L177        SettingsManager]: ReqToTest provides no preferences, ignoring...
[2020-11-24 20:42:46,842 INFO  L174        SettingsManager]: Resetting UtopiaLTL2Aut preferences to default values
[2020-11-24 20:42:46,842 INFO  L174        SettingsManager]: Resetting UtopiaSpecLang preferences to default values
[2020-11-24 20:42:46,842 INFO  L174        SettingsManager]: Resetting Boogie Printer preferences to default values
[2020-11-24 20:42:46,843 INFO  L174        SettingsManager]: Resetting ChcSmtPrinter preferences to default values
[2020-11-24 20:42:46,843 INFO  L174        SettingsManager]: Resetting ReqPrinter preferences to default values
[2020-11-24 20:42:46,844 INFO  L174        SettingsManager]: Resetting Witness Printer preferences to default values
[2020-11-24 20:42:46,845 INFO  L177        SettingsManager]: Boogie PL CUP Parser provides no preferences, ignoring...
[2020-11-24 20:42:46,845 INFO  L174        SettingsManager]: Resetting CDTParser preferences to default values
[2020-11-24 20:42:46,845 INFO  L177        SettingsManager]: AutomataScriptParser provides no preferences, ignoring...
[2020-11-24 20:42:46,846 INFO  L177        SettingsManager]: ReqParser provides no preferences, ignoring...
[2020-11-24 20:42:46,846 INFO  L174        SettingsManager]: Resetting SmtParser preferences to default values
[2020-11-24 20:42:46,846 INFO  L174        SettingsManager]: Resetting Witness Parser preferences to default values
[2020-11-24 20:42:46,847 INFO  L181        SettingsManager]: Finished resetting all preferences to default values...
[2020-11-24 20:42:46,847 INFO  L98         SettingsManager]: Beginning loading settings from /mnt/data0/jon/SmartPulseTool/SmartPulse/settings.epf
[2020-11-24 20:42:46,855 INFO  L110        SettingsManager]: Loading preferences was successful
[2020-11-24 20:42:46,856 INFO  L112        SettingsManager]: Preferences different from defaults after loading the file:
[2020-11-24 20:42:46,856 INFO  L131        SettingsManager]: Preferences of LTL2Aut differ from their defaults:
[2020-11-24 20:42:46,857 INFO  L133        SettingsManager]:  * Read property from file=true
[2020-11-24 20:42:46,857 INFO  L133        SettingsManager]:  * Path to LTL*BA executable (LTL2BA, LTL3BA)=/mnt/data0/jon/SmartPulseTool/ltl2ba
[2020-11-24 20:42:46,857 INFO  L131        SettingsManager]: Preferences of BlockEncodingV2 differ from their defaults:
[2020-11-24 20:42:46,857 INFO  L133        SettingsManager]:  * Maximize final states=false
[2020-11-24 20:42:46,857 INFO  L133        SettingsManager]:  * Minimize states even if more edges are added than removed.=true
[2020-11-24 20:42:46,857 INFO  L133        SettingsManager]:  * Minimize states using LBE with the strategy=NONE
[2020-11-24 20:42:46,857 INFO  L131        SettingsManager]: Preferences of BuchiAutomizer differ from their defaults:
[2020-11-24 20:42:46,857 INFO  L133        SettingsManager]:  * Compute Interpolants along a Counterexample=Craig_TreeInterpolation
[2020-11-24 20:42:46,858 INFO  L133        SettingsManager]:  * Use old map elimination=false
[2020-11-24 20:42:46,858 INFO  L133        SettingsManager]:  * Try twofold refinement=false
[2020-11-24 20:42:46,858 INFO  L131        SettingsManager]: Preferences of CACSL2BoogieTranslator differ from their defaults:
[2020-11-24 20:42:46,858 INFO  L133        SettingsManager]:  * Check unreachability of error function in SV-COMP mode=false
[2020-11-24 20:42:46,858 INFO  L133        SettingsManager]:  * Overapproximate operations on floating types=true
[2020-11-24 20:42:46,858 INFO  L133        SettingsManager]:  * Check division by zero=IGNORE
[2020-11-24 20:42:46,858 INFO  L133        SettingsManager]:  * Pointer to allocated memory at dereference=ASSUME
[2020-11-24 20:42:46,858 INFO  L133        SettingsManager]:  * If two pointers are subtracted or compared they have the same base address=ASSUME
[2020-11-24 20:42:46,858 INFO  L133        SettingsManager]:  * Check array bounds for arrays that are off heap=ASSUME
[2020-11-24 20:42:46,858 INFO  L133        SettingsManager]:  * Check if freed pointer was valid=false
[2020-11-24 20:42:46,859 INFO  L133        SettingsManager]:  * Use constant arrays=true
[2020-11-24 20:42:46,859 INFO  L133        SettingsManager]:  * Pointer base address is valid at dereference=ASSUME
[2020-11-24 20:42:46,859 INFO  L131        SettingsManager]: Preferences of RCFGBuilder differ from their defaults:
[2020-11-24 20:42:46,859 INFO  L133        SettingsManager]:  * Size of a code block=SingleStatement
[2020-11-24 20:42:46,859 INFO  L133        SettingsManager]:  * SMT solver=Internal_SMTInterpol
[2020-11-24 20:42:46,883 INFO  L81    nceAwareModelManager]: Repository-Root is: /tmp
[2020-11-24 20:42:46,896 INFO  L259   ainManager$Toolchain]: [Toolchain 1]: Applicable parser(s) successfully (re)initialized
[2020-11-24 20:42:46,900 INFO  L215   ainManager$Toolchain]: [Toolchain 1]: Toolchain selected.
[2020-11-24 20:42:46,902 INFO  L271        PluginConnector]: Initializing Boogie PL CUP Parser...
[2020-11-24 20:42:46,903 INFO  L276        PluginConnector]: Boogie PL CUP Parser initialized
[2020-11-24 20:42:46,904 INFO  L430   ainManager$Toolchain]: [Toolchain 1]: Parsing single file: /mnt/data0/jon/SmartPulseTool/LUCKYToken_0xE478d4F4a87D4D641AF97ca0b5Cc3dB61e266357_transferfrom-fail.bpl
[2020-11-24 20:42:46,904 INFO  L111           BoogieParser]: Parsing: '/mnt/data0/jon/SmartPulseTool/LUCKYToken_0xE478d4F4a87D4D641AF97ca0b5Cc3dB61e266357_transferfrom-fail.bpl'
[2020-11-24 20:42:47,003 INFO  L297   ainManager$Toolchain]: ####################### [Toolchain 1] #######################
[2020-11-24 20:42:47,004 INFO  L131        ToolchainWalker]: Walking toolchain with 8 elements.
[2020-11-24 20:42:47,005 INFO  L113        PluginConnector]: ------------------------Boogie Preprocessor----------------------------
[2020-11-24 20:42:47,005 INFO  L271        PluginConnector]: Initializing Boogie Preprocessor...
[2020-11-24 20:42:47,005 INFO  L276        PluginConnector]: Boogie Preprocessor initialized
[2020-11-24 20:42:47,021 INFO  L185        PluginConnector]: Executing the observer EnsureBoogieModelObserver from plugin Boogie Preprocessor for "LUCKYToken_0xE478d4F4a87D4D641AF97ca0b5Cc3dB61e266357_transferfrom-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 24.11 08:42:46" (1/1) ...
[2020-11-24 20:42:47,023 INFO  L185        PluginConnector]: Executing the observer TypeChecker from plugin Boogie Preprocessor for "LUCKYToken_0xE478d4F4a87D4D641AF97ca0b5Cc3dB61e266357_transferfrom-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 24.11 08:42:46" (1/1) ...
[2020-11-24 20:42:47,068 INFO  L185        PluginConnector]: Executing the observer ConstExpander from plugin Boogie Preprocessor for "LUCKYToken_0xE478d4F4a87D4D641AF97ca0b5Cc3dB61e266357_transferfrom-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 24.11 08:42:46" (1/1) ...
[2020-11-24 20:42:47,069 INFO  L185        PluginConnector]: Executing the observer StructExpander from plugin Boogie Preprocessor for "LUCKYToken_0xE478d4F4a87D4D641AF97ca0b5Cc3dB61e266357_transferfrom-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 24.11 08:42:46" (1/1) ...
[2020-11-24 20:42:47,100 INFO  L185        PluginConnector]: Executing the observer UnstructureCode from plugin Boogie Preprocessor for "LUCKYToken_0xE478d4F4a87D4D641AF97ca0b5Cc3dB61e266357_transferfrom-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 24.11 08:42:46" (1/1) ...
[2020-11-24 20:42:47,114 INFO  L185        PluginConnector]: Executing the observer FunctionInliner from plugin Boogie Preprocessor for "LUCKYToken_0xE478d4F4a87D4D641AF97ca0b5Cc3dB61e266357_transferfrom-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 24.11 08:42:46" (1/1) ...
[2020-11-24 20:42:47,126 INFO  L185        PluginConnector]: Executing the observer BoogieSymbolTableConstructor from plugin Boogie Preprocessor for "LUCKYToken_0xE478d4F4a87D4D641AF97ca0b5Cc3dB61e266357_transferfrom-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 24.11 08:42:46" (1/1) ...
[2020-11-24 20:42:47,142 INFO  L132        PluginConnector]: ------------------------ END Boogie Preprocessor----------------------------
[2020-11-24 20:42:47,143 INFO  L113        PluginConnector]: ------------------------UtopiaSpecLang----------------------------
[2020-11-24 20:42:47,143 INFO  L271        PluginConnector]: Initializing UtopiaSpecLang...
[2020-11-24 20:42:47,145 INFO  L276        PluginConnector]: UtopiaSpecLang initialized
[2020-11-24 20:42:47,149 INFO  L185        PluginConnector]: Executing the observer UtopiaSpecLangObserver from plugin UtopiaSpecLang for "LUCKYToken_0xE478d4F4a87D4D641AF97ca0b5Cc3dB61e266357_transferfrom-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 24.11 08:42:46" (1/1) ...
[2020-11-24 20:42:47,169 INFO  L1012  opiaSpecLangObserver]: Parsing LTLPlus Formula to AstNode: [](started(PausableToken.transferFrom(from, to, value), from != to && (value > _balances_StandardToken[this][from] || value > _allowed_StandardToken[this][from][msg.sender] || _balances_StandardToken[this][to] + value >= 0x10000000000000000000000000000000000000000000000000000000000000000) && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_StandardToken[this][to] >= 0 && _balances_StandardToken[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_StandardToken[this][from] >= 0 &&  _balances_StandardToken[this][from] < 0x10000000000000000000000000000000000000000000000000000000000000000 && _allowed_StandardToken[this][from][msg.sender] >= 0 && _allowed_StandardToken[this][from][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(reverted(PausableToken.transferFrom)))
[2020-11-24 20:42:47,174 INFO  L1016  opiaSpecLangObserver]: Successfully lexed: [](started(PausableToken.transferFrom(from, to, value), from != to && (value > _balances_StandardToken[this][from] || value > _allowed_StandardToken[this][from][msg.sender] || _balances_StandardToken[this][to] + value >= 0x10000000000000000000000000000000000000000000000000000000000000000) && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_StandardToken[this][to] >= 0 && _balances_StandardToken[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_StandardToken[this][from] >= 0 &&  _balances_StandardToken[this][from] < 0x10000000000000000000000000000000000000000000000000000000000000000 && _allowed_StandardToken[this][from][msg.sender] >= 0 && _allowed_StandardToken[this][from][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(reverted(PausableToken.transferFrom)))
[2020-11-24 20:42:47,182 INFO  L1018  opiaSpecLangObserver]: Successfully parsed: [](started(PausableToken.transferFrom(from, to, value), from != to && (value > _balances_StandardToken[this][from] || value > _allowed_StandardToken[this][from][msg.sender] || _balances_StandardToken[this][to] + value >= 0x10000000000000000000000000000000000000000000000000000000000000000) && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_StandardToken[this][to] >= 0 && _balances_StandardToken[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_StandardToken[this][from] >= 0 &&  _balances_StandardToken[this][from] < 0x10000000000000000000000000000000000000000000000000000000000000000 && _allowed_StandardToken[this][from][msg.sender] >= 0 && _allowed_StandardToken[this][from][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(reverted(PausableToken.transferFrom)))
[2020-11-24 20:42:47,192 INFO  L636   opiaSpecLangObserver]: Parsed ( ( ( ( ( ( ( ( ( _from_s691!=_to_s691 && ( ( _value_s691>_balances_StandardToken[this][_from_s691] || _value_s691>_allowed_StandardToken[this][_from_s691][msg.sender] ) || ( _balances_StandardToken[this][_to_s691] + _value_s691 )>=115792089237316195423570985008687907853269984665640564039457584007913129639936 ) ) && _value_s691>=0 ) && _value_s691<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) && _balances_StandardToken[this][_to_s691]>=0 ) && _balances_StandardToken[this][_to_s691]<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) && _balances_StandardToken[this][_from_s691]>=0 ) && _balances_StandardToken[this][_from_s691]<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) && _allowed_StandardToken[this][_from_s691][msg.sender]>=0 ) && _allowed_StandardToken[this][_from_s691][msg.sender]<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) to BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[COMPNEQ,IdentifierExpression[_from_s691,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_PausableToken>],IdentifierExpression[_to_s691,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_PausableToken>]],BinaryExpression[LOGICOR,BinaryExpression[LOGICOR,BinaryExpression[COMPGT,IdentifierExpression[_value_s691,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_PausableToken>],ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_StandardToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_PausableToken>]]],[IdentifierExpression[_from_s691,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_PausableToken>]]]],BinaryExpression[COMPGT,IdentifierExpression[_value_s691,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_PausableToken>],ArrayAccessExpression[ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_allowed_StandardToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_PausableToken>]]],[IdentifierExpression[_from_s691,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_PausableToken>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_PausableToken>]]]]],BinaryExpression[COMPGEQ,BinaryExpression[ARITHPLUS,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_StandardToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_PausableToken>]]],[IdentifierExpression[_to_s691,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_PausableToken>]]],IdentifierExpression[_value_s691,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_PausableToken>]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]]],BinaryExpression[COMPGEQ,IdentifierExpression[_value_s691,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_PausableToken>],IntegerLiteral[0]]],BinaryExpression[COMPLT,IdentifierExpression[_value_s691,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_PausableToken>],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]],BinaryExpression[COMPGEQ,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_StandardToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_PausableToken>]]],[IdentifierExpression[_to_s691,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_PausableToken>]]],IntegerLiteral[0]]],BinaryExpression[COMPLT,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_StandardToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_PausableToken>]]],[IdentifierExpression[_to_s691,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_PausableToken>]]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]],BinaryExpression[COMPGEQ,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_StandardToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_PausableToken>]]],[IdentifierExpression[_from_s691,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_PausableToken>]]],IntegerLiteral[0]]],BinaryExpression[COMPLT,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_StandardToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_PausableToken>]]],[IdentifierExpression[_from_s691,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_PausableToken>]]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]],BinaryExpression[COMPGEQ,ArrayAccessExpression[ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_allowed_StandardToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_PausableToken>]]],[IdentifierExpression[_from_s691,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_PausableToken>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_PausableToken>]]],IntegerLiteral[0]]],BinaryExpression[COMPLT,ArrayAccessExpression[ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_allowed_StandardToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_PausableToken>]]],[IdentifierExpression[_from_s691,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_PausableToken>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_PausableToken>]]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]]
[2020-11-24 20:42:47,199 INFO  L1005  opiaSpecLangObserver]: Compiling: [](started(PausableToken.transferFrom(from, to, value), from != to && (value > _balances_StandardToken[this][from] || value > _allowed_StandardToken[this][from][msg.sender] || _balances_StandardToken[this][to] + value >= 0x10000000000000000000000000000000000000000000000000000000000000000) && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_StandardToken[this][to] >= 0 && _balances_StandardToken[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_StandardToken[this][from] >= 0 &&  _balances_StandardToken[this][from] < 0x10000000000000000000000000000000000000000000000000000000000000000 && _allowed_StandardToken[this][from][msg.sender] >= 0 && _allowed_StandardToken[this][from][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(reverted(PausableToken.transferFrom)))
[2020-11-24 20:42:47,199 INFO  L1007  opiaSpecLangObserver]: Compiled to ( []( AP(call_transferFrom_PausableToken0) ==> ( <>AP(fail_transferFrom_PausableToken0) ) ) )
Executed UtopiaSpecLang
[2020-11-24 20:42:47,213 INFO  L202        PluginConnector]: Adding new model Hardcoded edu.utexas.cs.utopia.specLang AST 24.11 08:42:47 PropertyContainer
[2020-11-24 20:42:47,213 INFO  L132        PluginConnector]: ------------------------ END UtopiaSpecLang----------------------------
[2020-11-24 20:42:47,213 INFO  L113        PluginConnector]: ------------------------Boogie Printer----------------------------
[2020-11-24 20:42:47,213 INFO  L271        PluginConnector]: Initializing Boogie Printer...
[2020-11-24 20:42:47,213 INFO  L276        PluginConnector]: Boogie Printer initialized
[2020-11-24 20:42:47,214 INFO  L185        PluginConnector]: Executing the observer BoogiePrinterObserver from plugin Boogie Printer for "LUCKYToken_0xE478d4F4a87D4D641AF97ca0b5Cc3dB61e266357_transferfrom-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 24.11 08:42:46" (1/2) ...
[2020-11-24 20:42:47,215 INFO  L116   oogiePrinterObserver]: File already exists and will be overwritten: /tmp/boogiePrinter.bpl
[2020-11-24 20:42:47,215 INFO  L120   oogiePrinterObserver]: Writing to file /tmp/boogiePrinter.bpl
[2020-11-24 20:42:47,235 INFO  L185        PluginConnector]: Executing the observer BoogiePrinterObserver from plugin Boogie Printer for "Hardcoded edu.utexas.cs.utopia.specLang AST 24.11 08:42:47" (2/2) ...
[2020-11-24 20:42:47,235 INFO  L132        PluginConnector]: ------------------------ END Boogie Printer----------------------------
[2020-11-24 20:42:47,236 INFO  L113        PluginConnector]: ------------------------RCFGBuilder----------------------------
[2020-11-24 20:42:47,236 INFO  L271        PluginConnector]: Initializing RCFGBuilder...
[2020-11-24 20:42:47,236 INFO  L276        PluginConnector]: RCFGBuilder initialized
[2020-11-24 20:42:47,237 INFO  L185        PluginConnector]: Executing the observer RCFGBuilderObserver from plugin RCFGBuilder for "LUCKYToken_0xE478d4F4a87D4D641AF97ca0b5Cc3dB61e266357_transferfrom-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 24.11 08:42:46" (1/2) ...
[2020-11-24 20:42:47,291 INFO  L130     BoogieDeclarations]: Found specification of procedure FreshRefGenerator__success
[2020-11-24 20:42:47,291 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath_NoBaseCtor__success
[2020-11-24 20:42:47,291 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath
[2020-11-24 20:42:47,291 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath
[2020-11-24 20:42:47,291 INFO  L130     BoogieDeclarations]: Found specification of procedure mul~uint256~uint256_SafeMath__success
[2020-11-24 20:42:47,291 INFO  L130     BoogieDeclarations]: Found specification of procedure div~uint256~uint256_SafeMath__success
[2020-11-24 20:42:47,292 INFO  L130     BoogieDeclarations]: Found specification of procedure sub~uint256~uint256_SafeMath__success
[2020-11-24 20:42:47,292 INFO  L130     BoogieDeclarations]: Found specification of procedure add~uint256~uint256_SafeMath__success
[2020-11-24 20:42:47,292 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20_NoBaseCtor__success
[2020-11-24 20:42:47,292 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20
[2020-11-24 20:42:47,292 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20
[2020-11-24 20:42:47,292 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_IERC20
[2020-11-24 20:42:47,292 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_IERC20
[2020-11-24 20:42:47,292 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_IERC20
[2020-11-24 20:42:47,292 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_IERC20
[2020-11-24 20:42:47,292 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_IERC20
[2020-11-24 20:42:47,292 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_IERC20
[2020-11-24 20:42:47,293 INFO  L130     BoogieDeclarations]: Found specification of procedure StandardToken_StandardToken_NoBaseCtor__success
[2020-11-24 20:42:47,293 INFO  L130     BoogieDeclarations]: Found specification of procedure StandardToken_StandardToken
[2020-11-24 20:42:47,293 INFO  L138     BoogieDeclarations]: Found implementation of procedure StandardToken_StandardToken
[2020-11-24 20:42:47,293 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_StandardToken
[2020-11-24 20:42:47,293 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_StandardToken
[2020-11-24 20:42:47,293 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_StandardToken
[2020-11-24 20:42:47,294 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_StandardToken
[2020-11-24 20:42:47,294 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_StandardToken
[2020-11-24 20:42:47,294 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_StandardToken
[2020-11-24 20:42:47,294 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_StandardToken
[2020-11-24 20:42:47,294 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_StandardToken
[2020-11-24 20:42:47,294 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_StandardToken
[2020-11-24 20:42:47,294 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_StandardToken
[2020-11-24 20:42:47,294 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_StandardToken
[2020-11-24 20:42:47,295 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_StandardToken
[2020-11-24 20:42:47,295 INFO  L130     BoogieDeclarations]: Found specification of procedure increaseAllowance~address~uint256_StandardToken
[2020-11-24 20:42:47,295 INFO  L138     BoogieDeclarations]: Found implementation of procedure increaseAllowance~address~uint256_StandardToken
[2020-11-24 20:42:47,295 INFO  L130     BoogieDeclarations]: Found specification of procedure decreaseAllowance~address~uint256_StandardToken
[2020-11-24 20:42:47,295 INFO  L138     BoogieDeclarations]: Found implementation of procedure decreaseAllowance~address~uint256_StandardToken
[2020-11-24 20:42:47,295 INFO  L130     BoogieDeclarations]: Found specification of procedure _transfer~address~address~uint256_StandardToken__success
[2020-11-24 20:42:47,295 INFO  L130     BoogieDeclarations]: Found specification of procedure _approve~address~address~uint256_StandardToken__success
[2020-11-24 20:42:47,295 INFO  L130     BoogieDeclarations]: Found specification of procedure _burn~address~uint256_StandardToken__success
[2020-11-24 20:42:47,295 INFO  L130     BoogieDeclarations]: Found specification of procedure _burnFrom~address~uint256_StandardToken__success
[2020-11-24 20:42:47,296 INFO  L130     BoogieDeclarations]: Found specification of procedure Ownable_Ownable_NoBaseCtor__success
[2020-11-24 20:42:47,296 INFO  L130     BoogieDeclarations]: Found specification of procedure Ownable_Ownable
[2020-11-24 20:42:47,296 INFO  L138     BoogieDeclarations]: Found implementation of procedure Ownable_Ownable
[2020-11-24 20:42:47,296 INFO  L130     BoogieDeclarations]: Found specification of procedure owner_Ownable
[2020-11-24 20:42:47,296 INFO  L138     BoogieDeclarations]: Found implementation of procedure owner_Ownable
[2020-11-24 20:42:47,296 INFO  L130     BoogieDeclarations]: Found specification of procedure isOwner_Ownable
[2020-11-24 20:42:47,296 INFO  L138     BoogieDeclarations]: Found implementation of procedure isOwner_Ownable
[2020-11-24 20:42:47,296 INFO  L130     BoogieDeclarations]: Found specification of procedure transferOwnership~address_Ownable
[2020-11-24 20:42:47,296 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferOwnership~address_Ownable
[2020-11-24 20:42:47,296 INFO  L130     BoogieDeclarations]: Found specification of procedure _transferOwnership~address_Ownable__success
[2020-11-24 20:42:47,297 INFO  L130     BoogieDeclarations]: Found specification of procedure Pausable_Pausable_NoBaseCtor__success
[2020-11-24 20:42:47,297 INFO  L130     BoogieDeclarations]: Found specification of procedure Pausable_Pausable
[2020-11-24 20:42:47,297 INFO  L138     BoogieDeclarations]: Found implementation of procedure Pausable_Pausable
[2020-11-24 20:42:47,297 INFO  L130     BoogieDeclarations]: Found specification of procedure pause_Pausable
[2020-11-24 20:42:47,297 INFO  L138     BoogieDeclarations]: Found implementation of procedure pause_Pausable
[2020-11-24 20:42:47,297 INFO  L130     BoogieDeclarations]: Found specification of procedure unpause_Pausable
[2020-11-24 20:42:47,297 INFO  L138     BoogieDeclarations]: Found implementation of procedure unpause_Pausable
[2020-11-24 20:42:47,297 INFO  L130     BoogieDeclarations]: Found specification of procedure paused_Pausable
[2020-11-24 20:42:47,297 INFO  L138     BoogieDeclarations]: Found implementation of procedure paused_Pausable
[2020-11-24 20:42:47,297 INFO  L130     BoogieDeclarations]: Found specification of procedure PausableToken_PausableToken_NoBaseCtor__success
[2020-11-24 20:42:47,298 INFO  L130     BoogieDeclarations]: Found specification of procedure PausableToken_PausableToken
[2020-11-24 20:42:47,298 INFO  L138     BoogieDeclarations]: Found implementation of procedure PausableToken_PausableToken
[2020-11-24 20:42:47,298 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_PausableToken
[2020-11-24 20:42:47,298 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_PausableToken
[2020-11-24 20:42:47,298 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_PausableToken
[2020-11-24 20:42:47,298 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_PausableToken
[2020-11-24 20:42:47,298 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_PausableToken
[2020-11-24 20:42:47,298 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_PausableToken
[2020-11-24 20:42:47,298 INFO  L130     BoogieDeclarations]: Found specification of procedure increaseAllowance~address~uint256_PausableToken
[2020-11-24 20:42:47,298 INFO  L138     BoogieDeclarations]: Found implementation of procedure increaseAllowance~address~uint256_PausableToken
[2020-11-24 20:42:47,299 INFO  L130     BoogieDeclarations]: Found specification of procedure decreaseAllowance~address~uint256_PausableToken
[2020-11-24 20:42:47,299 INFO  L138     BoogieDeclarations]: Found implementation of procedure decreaseAllowance~address~uint256_PausableToken
[2020-11-24 20:42:47,299 INFO  L130     BoogieDeclarations]: Found specification of procedure BurnableToken_BurnableToken_NoBaseCtor__success
[2020-11-24 20:42:47,299 INFO  L130     BoogieDeclarations]: Found specification of procedure BurnableToken_BurnableToken
[2020-11-24 20:42:47,299 INFO  L138     BoogieDeclarations]: Found implementation of procedure BurnableToken_BurnableToken
[2020-11-24 20:42:47,299 INFO  L130     BoogieDeclarations]: Found specification of procedure burn~uint256_BurnableToken
[2020-11-24 20:42:47,299 INFO  L138     BoogieDeclarations]: Found implementation of procedure burn~uint256_BurnableToken
[2020-11-24 20:42:47,299 INFO  L130     BoogieDeclarations]: Found specification of procedure burnFrom~address~uint256_BurnableToken
[2020-11-24 20:42:47,299 INFO  L138     BoogieDeclarations]: Found implementation of procedure burnFrom~address~uint256_BurnableToken
[2020-11-24 20:42:47,299 INFO  L130     BoogieDeclarations]: Found specification of procedure LUCKYToken_LUCKYToken_NoBaseCtor__success
[2020-11-24 20:42:47,300 INFO  L130     BoogieDeclarations]: Found specification of procedure LUCKYToken_LUCKYToken
[2020-11-24 20:42:47,300 INFO  L138     BoogieDeclarations]: Found implementation of procedure LUCKYToken_LUCKYToken
[2020-11-24 20:42:47,300 INFO  L130     BoogieDeclarations]: Found specification of procedure name_LUCKYToken
[2020-11-24 20:42:47,300 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_LUCKYToken
[2020-11-24 20:42:47,300 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_LUCKYToken
[2020-11-24 20:42:47,300 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_LUCKYToken
[2020-11-24 20:42:47,300 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_LUCKYToken
[2020-11-24 20:42:47,300 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_LUCKYToken
[2020-11-24 20:42:47,300 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackDispatch__success
[2020-11-24 20:42:47,300 INFO  L130     BoogieDeclarations]: Found specification of procedure Fallback_UnknownType__success
[2020-11-24 20:42:47,301 INFO  L130     BoogieDeclarations]: Found specification of procedure send__success
[2020-11-24 20:42:47,301 INFO  L130     BoogieDeclarations]: Found specification of procedure onlyOwner_pre__success
[2020-11-24 20:42:47,301 INFO  L130     BoogieDeclarations]: Found specification of procedure whenNotPaused_pre__success
[2020-11-24 20:42:47,301 INFO  L130     BoogieDeclarations]: Found specification of procedure whenPaused_pre__success
[2020-11-24 20:42:47,301 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_SafeMath
[2020-11-24 20:42:47,301 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_SafeMath
[2020-11-24 20:42:47,301 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_IERC20
[2020-11-24 20:42:47,301 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_IERC20
[2020-11-24 20:42:47,301 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_StandardToken
[2020-11-24 20:42:47,301 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_StandardToken
[2020-11-24 20:42:47,301 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_Ownable
[2020-11-24 20:42:47,302 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_Ownable
[2020-11-24 20:42:47,302 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_Pausable
[2020-11-24 20:42:47,302 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_Pausable
[2020-11-24 20:42:47,302 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_PausableToken
[2020-11-24 20:42:47,302 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_PausableToken
[2020-11-24 20:42:47,302 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_BurnableToken
[2020-11-24 20:42:47,302 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_BurnableToken
[2020-11-24 20:42:47,302 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_LUCKYToken
[2020-11-24 20:42:47,302 INFO  L130     BoogieDeclarations]: Found specification of procedure main
[2020-11-24 20:42:47,302 INFO  L130     BoogieDeclarations]: Found specification of procedure FreshRefGenerator__fail
[2020-11-24 20:42:47,303 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath_NoBaseCtor__fail
[2020-11-24 20:42:47,303 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath__success
[2020-11-24 20:42:47,303 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath__fail
[2020-11-24 20:42:47,303 INFO  L130     BoogieDeclarations]: Found specification of procedure mul~uint256~uint256_SafeMath__fail
[2020-11-24 20:42:47,303 INFO  L130     BoogieDeclarations]: Found specification of procedure div~uint256~uint256_SafeMath__fail
[2020-11-24 20:42:47,303 INFO  L130     BoogieDeclarations]: Found specification of procedure sub~uint256~uint256_SafeMath__fail
[2020-11-24 20:42:47,303 INFO  L130     BoogieDeclarations]: Found specification of procedure add~uint256~uint256_SafeMath__fail
[2020-11-24 20:42:47,303 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20_NoBaseCtor__fail
[2020-11-24 20:42:47,303 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20__success
[2020-11-24 20:42:47,303 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20__fail
[2020-11-24 20:42:47,304 INFO  L130     BoogieDeclarations]: Found specification of procedure StandardToken_StandardToken_NoBaseCtor__fail
[2020-11-24 20:42:47,304 INFO  L130     BoogieDeclarations]: Found specification of procedure StandardToken_StandardToken__success
[2020-11-24 20:42:47,304 INFO  L130     BoogieDeclarations]: Found specification of procedure StandardToken_StandardToken__fail
[2020-11-24 20:42:47,304 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_StandardToken__success
[2020-11-24 20:42:47,304 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_StandardToken__fail
[2020-11-24 20:42:47,304 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_StandardToken__success
[2020-11-24 20:42:47,304 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_StandardToken__fail
[2020-11-24 20:42:47,304 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_StandardToken__success
[2020-11-24 20:42:47,304 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_StandardToken__fail
[2020-11-24 20:42:47,304 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_StandardToken__success
[2020-11-24 20:42:47,305 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_StandardToken__fail
[2020-11-24 20:42:47,305 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_StandardToken__success
[2020-11-24 20:42:47,305 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_StandardToken__fail
[2020-11-24 20:42:47,305 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_StandardToken__success
[2020-11-24 20:42:47,305 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_StandardToken__fail
[2020-11-24 20:42:47,305 INFO  L130     BoogieDeclarations]: Found specification of procedure increaseAllowance~address~uint256_StandardToken__success
[2020-11-24 20:42:47,305 INFO  L130     BoogieDeclarations]: Found specification of procedure increaseAllowance~address~uint256_StandardToken__fail
[2020-11-24 20:42:47,305 INFO  L130     BoogieDeclarations]: Found specification of procedure decreaseAllowance~address~uint256_StandardToken__success
[2020-11-24 20:42:47,305 INFO  L130     BoogieDeclarations]: Found specification of procedure decreaseAllowance~address~uint256_StandardToken__fail
[2020-11-24 20:42:47,305 INFO  L130     BoogieDeclarations]: Found specification of procedure _transfer~address~address~uint256_StandardToken__fail
[2020-11-24 20:42:47,306 INFO  L130     BoogieDeclarations]: Found specification of procedure _approve~address~address~uint256_StandardToken__fail
[2020-11-24 20:42:47,306 INFO  L130     BoogieDeclarations]: Found specification of procedure _burn~address~uint256_StandardToken__fail
[2020-11-24 20:42:47,307 INFO  L130     BoogieDeclarations]: Found specification of procedure _burnFrom~address~uint256_StandardToken__fail
[2020-11-24 20:42:47,307 INFO  L130     BoogieDeclarations]: Found specification of procedure Ownable_Ownable_NoBaseCtor__fail
[2020-11-24 20:42:47,308 INFO  L130     BoogieDeclarations]: Found specification of procedure Ownable_Ownable__success
[2020-11-24 20:42:47,308 INFO  L130     BoogieDeclarations]: Found specification of procedure Ownable_Ownable__fail
[2020-11-24 20:42:47,308 INFO  L130     BoogieDeclarations]: Found specification of procedure owner_Ownable__success
[2020-11-24 20:42:47,308 INFO  L130     BoogieDeclarations]: Found specification of procedure owner_Ownable__fail
[2020-11-24 20:42:47,309 INFO  L130     BoogieDeclarations]: Found specification of procedure isOwner_Ownable__success
[2020-11-24 20:42:47,309 INFO  L130     BoogieDeclarations]: Found specification of procedure isOwner_Ownable__fail
[2020-11-24 20:42:47,309 INFO  L130     BoogieDeclarations]: Found specification of procedure transferOwnership~address_Ownable__success
[2020-11-24 20:42:47,309 INFO  L130     BoogieDeclarations]: Found specification of procedure transferOwnership~address_Ownable__fail
[2020-11-24 20:42:47,310 INFO  L130     BoogieDeclarations]: Found specification of procedure _transferOwnership~address_Ownable__fail
[2020-11-24 20:42:47,310 INFO  L130     BoogieDeclarations]: Found specification of procedure Pausable_Pausable_NoBaseCtor__fail
[2020-11-24 20:42:47,310 INFO  L130     BoogieDeclarations]: Found specification of procedure Pausable_Pausable__success
[2020-11-24 20:42:47,310 INFO  L130     BoogieDeclarations]: Found specification of procedure Pausable_Pausable__fail
[2020-11-24 20:42:47,310 INFO  L130     BoogieDeclarations]: Found specification of procedure pause_Pausable__success
[2020-11-24 20:42:47,311 INFO  L130     BoogieDeclarations]: Found specification of procedure pause_Pausable__fail
[2020-11-24 20:42:47,311 INFO  L130     BoogieDeclarations]: Found specification of procedure unpause_Pausable__success
[2020-11-24 20:42:47,311 INFO  L130     BoogieDeclarations]: Found specification of procedure unpause_Pausable__fail
[2020-11-24 20:42:47,311 INFO  L130     BoogieDeclarations]: Found specification of procedure paused_Pausable__success
[2020-11-24 20:42:47,312 INFO  L130     BoogieDeclarations]: Found specification of procedure paused_Pausable__fail
[2020-11-24 20:42:47,312 INFO  L130     BoogieDeclarations]: Found specification of procedure PausableToken_PausableToken_NoBaseCtor__fail
[2020-11-24 20:42:47,312 INFO  L130     BoogieDeclarations]: Found specification of procedure PausableToken_PausableToken__success
[2020-11-24 20:42:47,312 INFO  L130     BoogieDeclarations]: Found specification of procedure PausableToken_PausableToken__fail
[2020-11-24 20:42:47,312 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_PausableToken__success
[2020-11-24 20:42:47,312 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_PausableToken__fail
[2020-11-24 20:42:47,313 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_PausableToken__success
[2020-11-24 20:42:47,313 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_PausableToken__fail
[2020-11-24 20:42:47,313 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_PausableToken__success
[2020-11-24 20:42:47,313 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_PausableToken__fail
[2020-11-24 20:42:47,313 INFO  L130     BoogieDeclarations]: Found specification of procedure increaseAllowance~address~uint256_PausableToken__success
[2020-11-24 20:42:47,314 INFO  L130     BoogieDeclarations]: Found specification of procedure increaseAllowance~address~uint256_PausableToken__fail
[2020-11-24 20:42:47,314 INFO  L130     BoogieDeclarations]: Found specification of procedure decreaseAllowance~address~uint256_PausableToken__success
[2020-11-24 20:42:47,314 INFO  L130     BoogieDeclarations]: Found specification of procedure decreaseAllowance~address~uint256_PausableToken__fail
[2020-11-24 20:42:47,314 INFO  L130     BoogieDeclarations]: Found specification of procedure BurnableToken_BurnableToken_NoBaseCtor__fail
[2020-11-24 20:42:47,314 INFO  L130     BoogieDeclarations]: Found specification of procedure BurnableToken_BurnableToken__success
[2020-11-24 20:42:47,314 INFO  L130     BoogieDeclarations]: Found specification of procedure BurnableToken_BurnableToken__fail
[2020-11-24 20:42:47,315 INFO  L130     BoogieDeclarations]: Found specification of procedure burn~uint256_BurnableToken__success
[2020-11-24 20:42:47,315 INFO  L130     BoogieDeclarations]: Found specification of procedure burn~uint256_BurnableToken__fail
[2020-11-24 20:42:47,315 INFO  L130     BoogieDeclarations]: Found specification of procedure burnFrom~address~uint256_BurnableToken__success
[2020-11-24 20:42:47,315 INFO  L130     BoogieDeclarations]: Found specification of procedure burnFrom~address~uint256_BurnableToken__fail
[2020-11-24 20:42:47,315 INFO  L130     BoogieDeclarations]: Found specification of procedure LUCKYToken_LUCKYToken_NoBaseCtor__fail
[2020-11-24 20:42:47,316 INFO  L130     BoogieDeclarations]: Found specification of procedure LUCKYToken_LUCKYToken__success
[2020-11-24 20:42:47,316 INFO  L130     BoogieDeclarations]: Found specification of procedure LUCKYToken_LUCKYToken__fail
[2020-11-24 20:42:47,316 INFO  L130     BoogieDeclarations]: Found specification of procedure name_LUCKYToken__success
[2020-11-24 20:42:47,316 INFO  L130     BoogieDeclarations]: Found specification of procedure name_LUCKYToken__fail
[2020-11-24 20:42:47,316 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_LUCKYToken__success
[2020-11-24 20:42:47,316 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_LUCKYToken__fail
[2020-11-24 20:42:47,317 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_LUCKYToken__success
[2020-11-24 20:42:47,317 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_LUCKYToken__fail
[2020-11-24 20:42:47,317 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackDispatch__fail
[2020-11-24 20:42:47,317 INFO  L130     BoogieDeclarations]: Found specification of procedure Fallback_UnknownType__fail
[2020-11-24 20:42:47,317 INFO  L130     BoogieDeclarations]: Found specification of procedure send__fail
[2020-11-24 20:42:47,318 INFO  L130     BoogieDeclarations]: Found specification of procedure onlyOwner_pre__fail
[2020-11-24 20:42:47,318 INFO  L130     BoogieDeclarations]: Found specification of procedure whenNotPaused_pre__fail
[2020-11-24 20:42:47,318 INFO  L130     BoogieDeclarations]: Found specification of procedure whenPaused_pre__fail
[2020-11-24 20:42:47,318 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreshRefGenerator__fail
[2020-11-24 20:42:47,318 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreshRefGenerator__success
[2020-11-24 20:42:47,319 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath_NoBaseCtor__fail
[2020-11-24 20:42:47,319 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath_NoBaseCtor__success
[2020-11-24 20:42:47,319 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath__fail
[2020-11-24 20:42:47,319 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath__success
[2020-11-24 20:42:47,319 INFO  L138     BoogieDeclarations]: Found implementation of procedure mul~uint256~uint256_SafeMath__fail
[2020-11-24 20:42:47,319 INFO  L138     BoogieDeclarations]: Found implementation of procedure mul~uint256~uint256_SafeMath__success
[2020-11-24 20:42:47,319 INFO  L138     BoogieDeclarations]: Found implementation of procedure div~uint256~uint256_SafeMath__fail
[2020-11-24 20:42:47,319 INFO  L138     BoogieDeclarations]: Found implementation of procedure div~uint256~uint256_SafeMath__success
[2020-11-24 20:42:47,319 INFO  L138     BoogieDeclarations]: Found implementation of procedure sub~uint256~uint256_SafeMath__fail
[2020-11-24 20:42:47,319 INFO  L138     BoogieDeclarations]: Found implementation of procedure sub~uint256~uint256_SafeMath__success
[2020-11-24 20:42:47,319 INFO  L138     BoogieDeclarations]: Found implementation of procedure add~uint256~uint256_SafeMath__fail
[2020-11-24 20:42:47,320 INFO  L138     BoogieDeclarations]: Found implementation of procedure add~uint256~uint256_SafeMath__success
[2020-11-24 20:42:47,320 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20_NoBaseCtor__fail
[2020-11-24 20:42:47,320 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20_NoBaseCtor__success
[2020-11-24 20:42:47,320 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20__fail
[2020-11-24 20:42:47,320 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20__success
[2020-11-24 20:42:47,320 INFO  L138     BoogieDeclarations]: Found implementation of procedure StandardToken_StandardToken_NoBaseCtor__fail
[2020-11-24 20:42:47,320 INFO  L138     BoogieDeclarations]: Found implementation of procedure StandardToken_StandardToken_NoBaseCtor__success
[2020-11-24 20:42:47,320 INFO  L138     BoogieDeclarations]: Found implementation of procedure StandardToken_StandardToken__fail
[2020-11-24 20:42:47,320 INFO  L138     BoogieDeclarations]: Found implementation of procedure StandardToken_StandardToken__success
[2020-11-24 20:42:47,320 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_StandardToken__fail
[2020-11-24 20:42:47,320 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_StandardToken__success
[2020-11-24 20:42:47,321 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_StandardToken__fail
[2020-11-24 20:42:47,321 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_StandardToken__success
[2020-11-24 20:42:47,321 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_StandardToken__fail
[2020-11-24 20:42:47,321 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_StandardToken__success
[2020-11-24 20:42:47,321 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_StandardToken__fail
[2020-11-24 20:42:47,321 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_StandardToken__success
[2020-11-24 20:42:47,321 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_StandardToken__fail
[2020-11-24 20:42:47,321 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_StandardToken__success
[2020-11-24 20:42:47,321 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_StandardToken__fail
[2020-11-24 20:42:47,321 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_StandardToken__success
[2020-11-24 20:42:47,321 INFO  L138     BoogieDeclarations]: Found implementation of procedure increaseAllowance~address~uint256_StandardToken__fail
[2020-11-24 20:42:47,321 INFO  L138     BoogieDeclarations]: Found implementation of procedure increaseAllowance~address~uint256_StandardToken__success
[2020-11-24 20:42:47,322 INFO  L138     BoogieDeclarations]: Found implementation of procedure decreaseAllowance~address~uint256_StandardToken__fail
[2020-11-24 20:42:47,322 INFO  L138     BoogieDeclarations]: Found implementation of procedure decreaseAllowance~address~uint256_StandardToken__success
[2020-11-24 20:42:47,322 INFO  L138     BoogieDeclarations]: Found implementation of procedure _transfer~address~address~uint256_StandardToken__fail
[2020-11-24 20:42:47,322 INFO  L138     BoogieDeclarations]: Found implementation of procedure _transfer~address~address~uint256_StandardToken__success
[2020-11-24 20:42:47,322 INFO  L138     BoogieDeclarations]: Found implementation of procedure _approve~address~address~uint256_StandardToken__fail
[2020-11-24 20:42:47,322 INFO  L138     BoogieDeclarations]: Found implementation of procedure _approve~address~address~uint256_StandardToken__success
[2020-11-24 20:42:47,322 INFO  L138     BoogieDeclarations]: Found implementation of procedure _burn~address~uint256_StandardToken__fail
[2020-11-24 20:42:47,322 INFO  L138     BoogieDeclarations]: Found implementation of procedure _burn~address~uint256_StandardToken__success
[2020-11-24 20:42:47,322 INFO  L138     BoogieDeclarations]: Found implementation of procedure _burnFrom~address~uint256_StandardToken__fail
[2020-11-24 20:42:47,322 INFO  L138     BoogieDeclarations]: Found implementation of procedure _burnFrom~address~uint256_StandardToken__success
[2020-11-24 20:42:47,322 INFO  L138     BoogieDeclarations]: Found implementation of procedure Ownable_Ownable_NoBaseCtor__fail
[2020-11-24 20:42:47,322 INFO  L138     BoogieDeclarations]: Found implementation of procedure Ownable_Ownable_NoBaseCtor__success
[2020-11-24 20:42:47,323 INFO  L138     BoogieDeclarations]: Found implementation of procedure Ownable_Ownable__fail
[2020-11-24 20:42:47,323 INFO  L138     BoogieDeclarations]: Found implementation of procedure Ownable_Ownable__success
[2020-11-24 20:42:47,323 INFO  L138     BoogieDeclarations]: Found implementation of procedure owner_Ownable__fail
[2020-11-24 20:42:47,323 INFO  L138     BoogieDeclarations]: Found implementation of procedure owner_Ownable__success
[2020-11-24 20:42:47,323 INFO  L138     BoogieDeclarations]: Found implementation of procedure isOwner_Ownable__fail
[2020-11-24 20:42:47,323 INFO  L138     BoogieDeclarations]: Found implementation of procedure isOwner_Ownable__success
[2020-11-24 20:42:47,323 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferOwnership~address_Ownable__fail
[2020-11-24 20:42:47,323 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferOwnership~address_Ownable__success
[2020-11-24 20:42:47,323 INFO  L138     BoogieDeclarations]: Found implementation of procedure _transferOwnership~address_Ownable__fail
[2020-11-24 20:42:47,323 INFO  L138     BoogieDeclarations]: Found implementation of procedure _transferOwnership~address_Ownable__success
[2020-11-24 20:42:47,323 INFO  L138     BoogieDeclarations]: Found implementation of procedure Pausable_Pausable_NoBaseCtor__fail
[2020-11-24 20:42:47,324 INFO  L138     BoogieDeclarations]: Found implementation of procedure Pausable_Pausable_NoBaseCtor__success
[2020-11-24 20:42:47,324 INFO  L138     BoogieDeclarations]: Found implementation of procedure Pausable_Pausable__fail
[2020-11-24 20:42:47,324 INFO  L138     BoogieDeclarations]: Found implementation of procedure Pausable_Pausable__success
[2020-11-24 20:42:47,324 INFO  L138     BoogieDeclarations]: Found implementation of procedure pause_Pausable__fail
[2020-11-24 20:42:47,324 INFO  L138     BoogieDeclarations]: Found implementation of procedure pause_Pausable__success
[2020-11-24 20:42:47,324 INFO  L138     BoogieDeclarations]: Found implementation of procedure unpause_Pausable__fail
[2020-11-24 20:42:47,324 INFO  L138     BoogieDeclarations]: Found implementation of procedure unpause_Pausable__success
[2020-11-24 20:42:47,324 INFO  L138     BoogieDeclarations]: Found implementation of procedure paused_Pausable__fail
[2020-11-24 20:42:47,324 INFO  L138     BoogieDeclarations]: Found implementation of procedure paused_Pausable__success
[2020-11-24 20:42:47,324 INFO  L138     BoogieDeclarations]: Found implementation of procedure PausableToken_PausableToken_NoBaseCtor__fail
[2020-11-24 20:42:47,324 INFO  L138     BoogieDeclarations]: Found implementation of procedure PausableToken_PausableToken_NoBaseCtor__success
[2020-11-24 20:42:47,325 INFO  L138     BoogieDeclarations]: Found implementation of procedure PausableToken_PausableToken__fail
[2020-11-24 20:42:47,325 INFO  L138     BoogieDeclarations]: Found implementation of procedure PausableToken_PausableToken__success
[2020-11-24 20:42:47,325 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_PausableToken__fail
[2020-11-24 20:42:47,325 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_PausableToken__success
[2020-11-24 20:42:47,325 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_PausableToken__fail
[2020-11-24 20:42:47,325 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_PausableToken__success
[2020-11-24 20:42:47,326 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_PausableToken__fail
[2020-11-24 20:42:47,326 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_PausableToken__success
[2020-11-24 20:42:47,326 INFO  L138     BoogieDeclarations]: Found implementation of procedure increaseAllowance~address~uint256_PausableToken__fail
[2020-11-24 20:42:47,326 INFO  L138     BoogieDeclarations]: Found implementation of procedure increaseAllowance~address~uint256_PausableToken__success
[2020-11-24 20:42:47,326 INFO  L138     BoogieDeclarations]: Found implementation of procedure decreaseAllowance~address~uint256_PausableToken__fail
[2020-11-24 20:42:47,326 INFO  L138     BoogieDeclarations]: Found implementation of procedure decreaseAllowance~address~uint256_PausableToken__success
[2020-11-24 20:42:47,326 INFO  L138     BoogieDeclarations]: Found implementation of procedure BurnableToken_BurnableToken_NoBaseCtor__fail
[2020-11-24 20:42:47,326 INFO  L138     BoogieDeclarations]: Found implementation of procedure BurnableToken_BurnableToken_NoBaseCtor__success
[2020-11-24 20:42:47,326 INFO  L138     BoogieDeclarations]: Found implementation of procedure BurnableToken_BurnableToken__fail
[2020-11-24 20:42:47,327 INFO  L138     BoogieDeclarations]: Found implementation of procedure BurnableToken_BurnableToken__success
[2020-11-24 20:42:47,327 INFO  L138     BoogieDeclarations]: Found implementation of procedure burn~uint256_BurnableToken__fail
[2020-11-24 20:42:47,327 INFO  L138     BoogieDeclarations]: Found implementation of procedure burn~uint256_BurnableToken__success
[2020-11-24 20:42:47,327 INFO  L138     BoogieDeclarations]: Found implementation of procedure burnFrom~address~uint256_BurnableToken__fail
[2020-11-24 20:42:47,327 INFO  L138     BoogieDeclarations]: Found implementation of procedure burnFrom~address~uint256_BurnableToken__success
[2020-11-24 20:42:47,327 INFO  L138     BoogieDeclarations]: Found implementation of procedure LUCKYToken_LUCKYToken_NoBaseCtor__fail
[2020-11-24 20:42:47,327 INFO  L138     BoogieDeclarations]: Found implementation of procedure LUCKYToken_LUCKYToken_NoBaseCtor__success
[2020-11-24 20:42:47,327 INFO  L138     BoogieDeclarations]: Found implementation of procedure LUCKYToken_LUCKYToken__fail
[2020-11-24 20:42:47,327 INFO  L138     BoogieDeclarations]: Found implementation of procedure LUCKYToken_LUCKYToken__success
[2020-11-24 20:42:47,327 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_LUCKYToken__fail
[2020-11-24 20:42:47,327 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_LUCKYToken__success
[2020-11-24 20:42:47,328 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_LUCKYToken__fail
[2020-11-24 20:42:47,328 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_LUCKYToken__success
[2020-11-24 20:42:47,328 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_LUCKYToken__fail
[2020-11-24 20:42:47,328 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_LUCKYToken__success
[2020-11-24 20:42:47,328 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackDispatch__fail
[2020-11-24 20:42:47,328 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackDispatch__success
[2020-11-24 20:42:47,328 INFO  L138     BoogieDeclarations]: Found implementation of procedure Fallback_UnknownType__fail
[2020-11-24 20:42:47,328 INFO  L138     BoogieDeclarations]: Found implementation of procedure Fallback_UnknownType__success
[2020-11-24 20:42:47,328 INFO  L138     BoogieDeclarations]: Found implementation of procedure send__fail
[2020-11-24 20:42:47,328 INFO  L138     BoogieDeclarations]: Found implementation of procedure send__success
[2020-11-24 20:42:47,328 INFO  L138     BoogieDeclarations]: Found implementation of procedure onlyOwner_pre__fail
[2020-11-24 20:42:47,328 INFO  L138     BoogieDeclarations]: Found implementation of procedure onlyOwner_pre__success
[2020-11-24 20:42:47,329 INFO  L138     BoogieDeclarations]: Found implementation of procedure whenNotPaused_pre__fail
[2020-11-24 20:42:47,329 INFO  L138     BoogieDeclarations]: Found implementation of procedure whenNotPaused_pre__success
[2020-11-24 20:42:47,329 INFO  L138     BoogieDeclarations]: Found implementation of procedure whenPaused_pre__fail
[2020-11-24 20:42:47,329 INFO  L138     BoogieDeclarations]: Found implementation of procedure whenPaused_pre__success
[2020-11-24 20:42:47,329 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_SafeMath
[2020-11-24 20:42:47,329 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_SafeMath
[2020-11-24 20:42:47,329 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_IERC20
[2020-11-24 20:42:47,329 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_IERC20
[2020-11-24 20:42:47,329 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_StandardToken
[2020-11-24 20:42:47,329 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_StandardToken
[2020-11-24 20:42:47,329 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_Ownable
[2020-11-24 20:42:47,329 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_Ownable
[2020-11-24 20:42:47,330 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_Pausable
[2020-11-24 20:42:47,330 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_Pausable
[2020-11-24 20:42:47,330 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_PausableToken
[2020-11-24 20:42:47,330 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_PausableToken
[2020-11-24 20:42:47,330 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_BurnableToken
[2020-11-24 20:42:47,330 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_BurnableToken
[2020-11-24 20:42:47,330 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_LUCKYToken
[2020-11-24 20:42:47,330 INFO  L138     BoogieDeclarations]: Found implementation of procedure main
[2020-11-24 20:42:47,330 INFO  L130     BoogieDeclarations]: Found specification of procedure ULTIMATE.start
[2020-11-24 20:42:47,330 INFO  L138     BoogieDeclarations]: Found implementation of procedure ULTIMATE.start
[2020-11-24 20:42:47,750 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-24 20:42:47,750 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-24 20:42:48,314 INFO  L281             CfgBuilder]: Using the 1 location(s) as analysis (start of procedure ULTIMATE.start)
[2020-11-24 20:42:48,314 INFO  L286             CfgBuilder]: Removed 8 assue(true) statements.
[2020-11-24 20:42:48,317 INFO  L202        PluginConnector]: Adding new model LUCKYToken_0xE478d4F4a87D4D641AF97ca0b5Cc3dB61e266357_transferfrom-fail.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 24.11 08:42:48 BoogieIcfgContainer
[2020-11-24 20:42:48,317 INFO  L185        PluginConnector]: Executing the observer RCFGBuilderObserver from plugin RCFGBuilder for "Hardcoded edu.utexas.cs.utopia.specLang AST 24.11 08:42:47" (2/2) ...
[2020-11-24 20:42:48,317 INFO  L85     RCFGBuilderObserver]: No WrapperNode. Let Ultimate process with next node
[2020-11-24 20:42:48,317 INFO  L205        PluginConnector]: Invalid model from RCFGBuilder for observer de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder.RCFGBuilderObserver@5da26810 and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 24.11 08:42:48, skipping insertion in model container
[2020-11-24 20:42:48,317 INFO  L132        PluginConnector]: ------------------------ END RCFGBuilder----------------------------
[2020-11-24 20:42:48,318 INFO  L113        PluginConnector]: ------------------------UtopiaLTL2Aut----------------------------
[2020-11-24 20:42:48,318 INFO  L271        PluginConnector]: Initializing UtopiaLTL2Aut...
[2020-11-24 20:42:48,319 INFO  L276        PluginConnector]: UtopiaLTL2Aut initialized
[2020-11-24 20:42:48,319 INFO  L185        PluginConnector]: Executing the observer UtopiaLTL2AutObserver from plugin UtopiaLTL2Aut for "LUCKYToken_0xE478d4F4a87D4D641AF97ca0b5Cc3dB61e266357_transferfrom-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 24.11 08:42:46" (1/3) ...
[2020-11-24 20:42:48,320 INFO  L205        PluginConnector]: Invalid model from UtopiaLTL2Aut for observer edu.utexas.cs.utopia.ltl2aut.UtopiaLTL2AutObserver@1283fb2a and model type Hardcoded edu.utexas.cs.utopia.ltl2aut AST 24.11 08:42:48, skipping insertion in model container
[2020-11-24 20:42:48,320 INFO  L185        PluginConnector]: Executing the observer UtopiaLTL2AutObserver from plugin UtopiaLTL2Aut for "Hardcoded edu.utexas.cs.utopia.specLang AST 24.11 08:42:47" (2/3) ...
No working directory specified, using /mnt/data0/jon/SmartPulseTool/ltl2ba
Starting monitored process 1 with /mnt/data0/jon/SmartPulseTool/ltl2ba -f ! ( ( [] ( a -> ( <>b ) ) ) )  (exit command is null, workingDir is null)
[2020-11-24 20:42:48,357 INFO  L202        PluginConnector]: Adding new model Hardcoded edu.utexas.cs.utopia.ltl2aut AST 24.11 08:42:48 NWAContainer
[2020-11-24 20:42:48,357 INFO  L132        PluginConnector]: ------------------------ END UtopiaLTL2Aut----------------------------
[2020-11-24 20:42:48,357 INFO  L113        PluginConnector]: ------------------------BÃ¼chi Program Product----------------------------
[2020-11-24 20:42:48,357 INFO  L271        PluginConnector]: Initializing BÃ¼chi Program Product...
[2020-11-24 20:42:48,358 INFO  L276        PluginConnector]: BÃ¼chi Program Product initialized
[2020-11-24 20:42:48,359 INFO  L185        PluginConnector]: Executing the observer BuchiProductObserver from plugin BÃ¼chi Program Product for "LUCKYToken_0xE478d4F4a87D4D641AF97ca0b5Cc3dB61e266357_transferfrom-fail.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 24.11 08:42:48" (3/4) ...
[2020-11-24 20:42:48,359 INFO  L205        PluginConnector]: Invalid model from BÃ¼chi Program Product for observer de.uni_freiburg.informatik.ultimate.buchiprogramproduct.BuchiProductObserver@23e6fde9 and model type LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 24.11 08:42:48, skipping insertion in model container
[2020-11-24 20:42:48,359 INFO  L185        PluginConnector]: Executing the observer BuchiProductObserver from plugin BÃ¼chi Program Product for "Hardcoded edu.utexas.cs.utopia.ltl2aut AST 24.11 08:42:48" (4/4) ...
[2020-11-24 20:42:48,362 INFO  L104   BuchiProductObserver]: Initial property automaton 2 locations, 3 edges
[2020-11-24 20:42:48,367 INFO  L110   BuchiProductObserver]: Initial RCFG 2614 locations, 3885 edges
[2020-11-24 20:42:48,367 INFO  L93    BuchiProductObserver]: Beginning generation of product automaton
[2020-11-24 20:42:48,380 INFO  L136       ProductGenerator]: The program has no step specification, so we assume maximum atomicity
[2020-11-24 20:42:50,197 INFO  L97    BuchiProductObserver]: Finished generation of product automaton successfully
[2020-11-24 20:42:50,206 INFO  L110   BuchiProductObserver]: BuchiProgram size 6834 locations, 12825 edges
[2020-11-24 20:42:50,206 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 24.11 08:42:50 BoogieIcfgContainer
[2020-11-24 20:42:50,206 INFO  L132        PluginConnector]: ------------------------ END BÃ¼chi Program Product----------------------------
[2020-11-24 20:42:50,206 INFO  L113        PluginConnector]: ------------------------BlockEncodingV2----------------------------
[2020-11-24 20:42:50,206 INFO  L271        PluginConnector]: Initializing BlockEncodingV2...
[2020-11-24 20:42:50,208 INFO  L276        PluginConnector]: BlockEncodingV2 initialized
[2020-11-24 20:42:50,209 INFO  L185        PluginConnector]: Executing the observer BlockEncodingObserver from plugin BlockEncodingV2 for "LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 24.11 08:42:50" (1/1) ...
[2020-11-24 20:42:50,335 INFO  L313           BlockEncoder]: Initial Icfg 6834 locations, 12825 edges
[2020-11-24 20:42:50,335 INFO  L258           BlockEncoder]: Using Remove infeasible edges
[2020-11-24 20:42:50,335 INFO  L270           BlockEncoder]: Using Minimize states even if more edges are added than removed.=true
[2020-11-24 20:42:50,336 INFO  L296           BlockEncoder]: Using Remove sink states
[2020-11-24 20:42:50,336 INFO  L171           BlockEncoder]: Using Apply optimizations until nothing changes=true
[2020-11-24 20:42:50,350 INFO  L70    emoveInfeasibleEdges]: Removed 180 edges and 19 locations because of local infeasibility
[2020-11-24 20:42:50,365 INFO  L70        RemoveSinkStates]: Removed 150 edges and 92 locations by removing sink states
[2020-11-24 20:42:50,378 INFO  L70    emoveInfeasibleEdges]: Removed 0 edges and 0 locations because of local infeasibility
[2020-11-24 20:42:50,382 INFO  L70        RemoveSinkStates]: Removed 0 edges and 0 locations by removing sink states
[2020-11-24 20:42:50,387 INFO  L237           BlockEncoder]: Using Create parallel compositions if possible
[2020-11-24 20:42:50,387 INFO  L66        ParallelComposer]: Creating parallel compositions
[2020-11-24 20:42:50,391 INFO  L313           BlockEncoder]: Encoded RCFG 6691 locations, 12448 edges
[2020-11-24 20:42:50,391 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.blockencoding CFG 24.11 08:42:50 BasicIcfg
[2020-11-24 20:42:50,391 INFO  L132        PluginConnector]: ------------------------ END BlockEncodingV2----------------------------
[2020-11-24 20:42:50,392 INFO  L113        PluginConnector]: ------------------------BuchiAutomizer----------------------------
[2020-11-24 20:42:50,392 INFO  L271        PluginConnector]: Initializing BuchiAutomizer...
[2020-11-24 20:42:50,393 INFO  L276        PluginConnector]: BuchiAutomizer initialized
[2020-11-24 20:42:50,393 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-24 20:42:50,394 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "LUCKYToken_0xE478d4F4a87D4D641AF97ca0b5Cc3dB61e266357_transferfrom-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 24.11 08:42:46" (1/6) ...
[2020-11-24 20:42:50,395 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@4cf43273 and model type LUCKYToken_0xE478d4F4a87D4D641AF97ca0b5Cc3dB61e266357_transferfrom-fail.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 24.11 08:42:50, skipping insertion in model container
[2020-11-24 20:42:50,395 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-24 20:42:50,395 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Hardcoded edu.utexas.cs.utopia.specLang AST 24.11 08:42:47" (2/6) ...
[2020-11-24 20:42:50,396 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@4cf43273 and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 24.11 08:42:50, skipping insertion in model container
[2020-11-24 20:42:50,396 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-24 20:42:50,396 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "LUCKYToken_0xE478d4F4a87D4D641AF97ca0b5Cc3dB61e266357_transferfrom-fail.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 24.11 08:42:48" (3/6) ...
[2020-11-24 20:42:50,396 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@4cf43273 and model type LUCKYToken_0xE478d4F4a87D4D641AF97ca0b5Cc3dB61e266357_transferfrom-fail.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer CFG 24.11 08:42:50, skipping insertion in model container
[2020-11-24 20:42:50,396 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-24 20:42:50,396 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Hardcoded edu.utexas.cs.utopia.ltl2aut AST 24.11 08:42:48" (4/6) ...
[2020-11-24 20:42:50,396 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@4cf43273 and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 24.11 08:42:50, skipping insertion in model container
[2020-11-24 20:42:50,396 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-24 20:42:50,397 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 24.11 08:42:50" (5/6) ...
[2020-11-24 20:42:50,397 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@4cf43273 and model type LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer OTHER 24.11 08:42:50, skipping insertion in model container
[2020-11-24 20:42:50,397 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-24 20:42:50,397 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.blockencoding CFG 24.11 08:42:50" (6/6) ...
[2020-11-24 20:42:50,398 INFO  L404   chiAutomizerObserver]: Analyzing ICFG LUCKYToken_0xE478d4F4a87D4D641AF97ca0b5Cc3dB61e266357_transferfrom-fail.bpl_BEv2
[2020-11-24 20:42:50,441 INFO  L133   ementStrategyFactory]: Using default assertion order modulation
[2020-11-24 20:42:50,442 INFO  L377         BuchiCegarLoop]: Interprodecural is true
[2020-11-24 20:42:50,442 INFO  L378         BuchiCegarLoop]: Hoare is false
[2020-11-24 20:42:50,442 INFO  L379         BuchiCegarLoop]: Compute interpolants for Craig_TreeInterpolation
[2020-11-24 20:42:50,442 INFO  L380         BuchiCegarLoop]: Backedges is STRAIGHT_LINE
[2020-11-24 20:42:50,442 INFO  L381         BuchiCegarLoop]: Determinization is PREDICATE_ABSTRACTION
[2020-11-24 20:42:50,442 INFO  L382         BuchiCegarLoop]: Difference is false
[2020-11-24 20:42:50,442 INFO  L383         BuchiCegarLoop]: Minimize is MINIMIZE_SEVPA
[2020-11-24 20:42:50,442 INFO  L386         BuchiCegarLoop]: ======== Iteration 0==of CEGAR loop == BuchiCegarLoop========
[2020-11-24 20:42:50,505 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 6691 states.
[2020-11-24 20:42:50,585 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-24 20:42:50,585 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-24 20:42:50,585 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-24 20:42:50,595 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-24 20:42:50,595 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-24 20:42:50,595 INFO  L445         BuchiCegarLoop]: ======== Iteration 1============
[2020-11-24 20:42:50,595 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 6691 states.
[2020-11-24 20:42:50,633 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-24 20:42:50,633 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-24 20:42:50,633 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-24 20:42:50,636 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-24 20:42:50,636 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transferFrom_PausableToken0 := false;
[L2]                 call_transferFrom_PausableToken0 := false;
[L2]     CALL        call main();
[L7258]              assume null == 0;
[L7259]  CALL        call this := FreshRefGenerator__success();
[L2904]              havoc newRef;
[L2905]              assume Alloc[newRef] == false;
[L2906]              Alloc[newRef] := true;
[L2907]              assume newRef != null;
[L7259]  RET         call this := FreshRefGenerator__success();
[L7260]              assume now >= 0;
[L7261]              assume DType[this] == LUCKYToken;
[L7262]              assume msgvalue_MSG == 0;
[L7263]              gas := gas - 53000;
[L7264]  CALL        call LUCKYToken_LUCKYToken(this, msgsender_MSG, msgvalue_MSG);
[L1849]              havoc __exception;
[L1850]              revert := false;
[L1851]  COND FALSE  !(__exception)
[L1876]  CALL        call LUCKYToken_LUCKYToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4580]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3072]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3057]              assume msgsender_MSG != null;
[L3058]              Balance[this] := 0;
[L3072]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3073]  COND FALSE  !(revert)
[L4580]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4581]  COND TRUE   revert
[L1876]  RET         call LUCKYToken_LUCKYToken__success(this, msgsender_MSG, msgvalue_MSG);
[L1877]              assume !revert && gas >= 0;
[L7264]  RET         call LUCKYToken_LUCKYToken(this, msgsender_MSG, msgvalue_MSG);
[L7265]              assume !revert && gas >= 0;

Loop:
[L7268]  CALL        call CorralChoice_LUCKYToken(this);
[L7078]              havoc msgsender_MSG;
[L7079]              havoc msgvalue_MSG;
[L7080]              havoc choice;
[L7081]              havoc _to_s670;
[L7082]              havoc _value_s670;
[L7083]              havoc __ret_0_transfer;
[L7084]              havoc _spender_s709;
[L7085]              havoc _value_s709;
[L7086]              havoc __ret_0_approve;
[L7087]              havoc _from_s691;
[L7088]              havoc _to_s691;
[L7089]              havoc _value_s691;
[L7090]              havoc __ret_0_transferFrom;
[L7091]              havoc __ret_0_totalSupply;
[L7092]              havoc owner_s211;
[L7093]              havoc __ret_0_balanceOf;
[L7094]              havoc owner_s227;
[L7095]              havoc spender_s227;
[L7096]              havoc __ret_0_allowance;
[L7097]              havoc _spender_s727;
[L7098]              havoc _addedValue_s727;
[L7099]              havoc success_s727;
[L7100]              havoc _spender_s745;
[L7101]              havoc _subtractedValue_s745;
[L7102]              havoc success_s745;
[L7103]              havoc __ret_0_owner;
[L7104]              havoc __ret_0_isOwner;
[L7105]              havoc newOwner_s564;
[L7106]              havoc __ret_0_paused;
[L7107]              havoc amount_s764;
[L7108]              havoc account_s779;
[L7109]              havoc amount_s779;
[L7110]              havoc __ret_0_name;
[L7111]              havoc __ret_0_symbol;
[L7112]              havoc __ret_0_decimals;
[L7113]              havoc tmpNow;
[L7114]              havoc gas;
[L7115]              assume gas > 4000000 && gas <= 8000000;
[L7116]              tmpNow := now;
[L7117]              havoc now;
[L7118]              assume now > tmpNow;
[L7119]              assume msgsender_MSG != null;
[L7120]              assume DType[msgsender_MSG] != SafeMath;
[L7121]              assume DType[msgsender_MSG] != IERC20;
[L7122]              assume DType[msgsender_MSG] != StandardToken;
[L7123]              assume DType[msgsender_MSG] != Ownable;
[L7124]              assume DType[msgsender_MSG] != Pausable;
[L7125]              assume DType[msgsender_MSG] != PausableToken;
[L7126]              assume DType[msgsender_MSG] != BurnableToken;
[L7127]              assume DType[msgsender_MSG] != LUCKYToken;
[L7128]              Alloc[msgsender_MSG] := true;
[L7129]  COND TRUE   choice == 19
[L7130]              gas := gas - 21000;
[L7131]  COND FALSE  !(gas >= 0)
[L7268]  RET         call CorralChoice_LUCKYToken(this);

[2020-11-24 20:42:50,653 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-24 20:42:50,654 INFO  L82        PathProgramCache]: Analyzing trace with hash 1910445986, now seen corresponding path program 1 times
[2020-11-24 20:42:50,659 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-24 20:42:50,680 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-24 20:42:50,729 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-24 20:42:50,731 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-24 20:42:50,731 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [4] imperfect sequences [] total 4
[2020-11-24 20:42:51,144 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-24 20:42:51,153 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-11-24 20:42:51,153 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=5, Invalid=7, Unknown=0, NotChecked=0, Total=12
[2020-11-24 20:42:51,154 INFO  L87              Difference]: Start difference. First operand 6691 states. Second operand 4 states.
[2020-11-24 20:42:51,839 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-24 20:42:51,839 INFO  L93              Difference]: Finished difference Result 3947 states and 4842 transitions.
[2020-11-24 20:42:51,839 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 4 states. 
[2020-11-24 20:42:51,840 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 3947 states and 4842 transitions.
[2020-11-24 20:42:51,862 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-24 20:42:51,892 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 3947 states to 3947 states and 4842 transitions.
[2020-11-24 20:42:51,893 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 3
[2020-11-24 20:42:51,896 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 969
[2020-11-24 20:42:51,897 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 3947 states and 4842 transitions.
[2020-11-24 20:42:51,907 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-24 20:42:51,907 INFO  L728         BuchiCegarLoop]: Abstraction has 3947 states and 4842 transitions.
[2020-11-24 20:42:51,925 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 3947 states and 4842 transitions.
[2020-11-24 20:42:51,991 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 3947 to 3947.
[2020-11-24 20:42:51,991 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 3947 states.
[2020-11-24 20:42:52,000 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 3947 states to 3947 states and 4842 transitions.
[2020-11-24 20:42:52,001 INFO  L751         BuchiCegarLoop]: Abstraction has 3947 states and 4842 transitions.
[2020-11-24 20:42:52,001 INFO  L631         BuchiCegarLoop]: Abstraction has 3947 states and 4842 transitions.
[2020-11-24 20:42:52,001 INFO  L445         BuchiCegarLoop]: ======== Iteration 2============
[2020-11-24 20:42:52,001 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 3947 states and 4842 transitions.
[2020-11-24 20:42:52,013 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-24 20:42:52,013 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-24 20:42:52,013 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-24 20:42:52,016 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-24 20:42:52,016 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transferFrom_PausableToken0 := false;
[L2]                 call_transferFrom_PausableToken0 := false;
[L2]     CALL        call main();
[L7258]              assume null == 0;
[L7259]  CALL        call this := FreshRefGenerator__success();
[L2904]              havoc newRef;
[L2905]              assume Alloc[newRef] == false;
[L2906]              Alloc[newRef] := true;
[L2907]              assume newRef != null;
[L7259]  RET         call this := FreshRefGenerator__success();
[L7260]              assume now >= 0;
[L7261]              assume DType[this] == LUCKYToken;
[L7262]              assume msgvalue_MSG == 0;
[L7263]              gas := gas - 53000;
[L7264]  CALL        call LUCKYToken_LUCKYToken(this, msgsender_MSG, msgvalue_MSG);
[L1849]              havoc __exception;
[L1850]              revert := false;
[L1851]  COND FALSE  !(__exception)
[L1876]  CALL        call LUCKYToken_LUCKYToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4580]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3072]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3057]              assume msgsender_MSG != null;
[L3058]              Balance[this] := 0;
[L3072]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3073]  COND FALSE  !(revert)
[L4580]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4581]  COND TRUE   revert
[L1876]  RET         call LUCKYToken_LUCKYToken__success(this, msgsender_MSG, msgvalue_MSG);
[L1877]              assume !revert && gas >= 0;
[L7264]  RET         call LUCKYToken_LUCKYToken(this, msgsender_MSG, msgvalue_MSG);
[L7265]              assume !revert && gas >= 0;
[L7268]  CALL        call CorralChoice_LUCKYToken(this);
[L7078]              havoc msgsender_MSG;
[L7079]              havoc msgvalue_MSG;
[L7080]              havoc choice;
[L7081]              havoc _to_s670;
[L7082]              havoc _value_s670;
[L7083]              havoc __ret_0_transfer;
[L7084]              havoc _spender_s709;
[L7085]              havoc _value_s709;
[L7086]              havoc __ret_0_approve;
[L7087]              havoc _from_s691;
[L7088]              havoc _to_s691;
[L7089]              havoc _value_s691;
[L7090]              havoc __ret_0_transferFrom;
[L7091]              havoc __ret_0_totalSupply;
[L7092]              havoc owner_s211;
[L7093]              havoc __ret_0_balanceOf;
[L7094]              havoc owner_s227;
[L7095]              havoc spender_s227;
[L7096]              havoc __ret_0_allowance;
[L7097]              havoc _spender_s727;
[L7098]              havoc _addedValue_s727;
[L7099]              havoc success_s727;
[L7100]              havoc _spender_s745;
[L7101]              havoc _subtractedValue_s745;
[L7102]              havoc success_s745;
[L7103]              havoc __ret_0_owner;
[L7104]              havoc __ret_0_isOwner;
[L7105]              havoc newOwner_s564;
[L7106]              havoc __ret_0_paused;
[L7107]              havoc amount_s764;
[L7108]              havoc account_s779;
[L7109]              havoc amount_s779;
[L7110]              havoc __ret_0_name;
[L7111]              havoc __ret_0_symbol;
[L7112]              havoc __ret_0_decimals;
[L7113]              havoc tmpNow;
[L7114]              havoc gas;
[L7115]              assume gas > 4000000 && gas <= 8000000;
[L7116]              tmpNow := now;
[L7117]              havoc now;
[L7118]              assume now > tmpNow;
[L7119]              assume msgsender_MSG != null;
[L7120]              assume DType[msgsender_MSG] != SafeMath;
[L7121]              assume DType[msgsender_MSG] != IERC20;
[L7122]              assume DType[msgsender_MSG] != StandardToken;
[L7123]              assume DType[msgsender_MSG] != Ownable;
[L7124]              assume DType[msgsender_MSG] != Pausable;
[L7125]              assume DType[msgsender_MSG] != PausableToken;
[L7126]              assume DType[msgsender_MSG] != BurnableToken;
[L7127]              assume DType[msgsender_MSG] != LUCKYToken;
[L7128]              Alloc[msgsender_MSG] := true;
[L7129]  COND FALSE  !(choice == 19)
[L7136]  COND FALSE  !(choice == 18)
[L7143]  COND TRUE   choice == 17
[L7144]              gas := gas - 21000;
[L7145]  COND TRUE   gas >= 0
[L7146]              assume _value_s691 >= 0 && _value_s691 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7147]              assume msgvalue_MSG == 0;
[L7148]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_PausableToken(this, msgsender_MSG, msgvalue_MSG, _from_s691, _to_s691, _value_s691);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((((_from_s691 != _to_s691 && ((_value_s691 > _balances_StandardToken[this][_from_s691] || _value_s691 > _allowed_StandardToken[this][_from_s691][msgsender_MSG]) || _balances_StandardToken[this][_to_s691] + _value_s691 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && _value_s691 >= 0) && _value_s691 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_StandardToken[this][_to_s691] >= 0) && _balances_StandardToken[this][_to_s691] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_StandardToken[this][_from_s691] >= 0) && _balances_StandardToken[this][_from_s691] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowed_StandardToken[this][_from_s691][msgsender_MSG] >= 0) && _allowed_StandardToken[this][_from_s691][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transferFrom_PausableToken0 := true;
[L2]                 call_transferFrom_PausableToken0 := false;
[L2]                 revert := revert_hold;
[L1391]              havoc __exception;
[L1392]              revert := false;
[L1393]  COND FALSE  !(__exception)
[L1418]  CALL        call __ret_0_ := transferFrom~address~address~uint256_PausableToken__success(this, msgsender_MSG, msgvalue_MSG, _from_s691, _to_s691, _value_s691);
[L4185]  CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6244]  COND FALSE  !(!!paused_Pausable[this])
[L4185]  RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4186]  COND TRUE   revert
[L1418]  RET         call __ret_0_ := transferFrom~address~address~uint256_PausableToken__success(this, msgsender_MSG, msgvalue_MSG, _from_s691, _to_s691, _value_s691);
[L1419]              assume !revert && gas >= 0;
[L7148]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_PausableToken(this, msgsender_MSG, msgvalue_MSG, _from_s691, _to_s691, _value_s691);
[L7268]  RET         call CorralChoice_LUCKYToken(this);

Loop:
[L7268]  CALL        call CorralChoice_LUCKYToken(this);
[L7078]              havoc msgsender_MSG;
[L7079]              havoc msgvalue_MSG;
[L7080]              havoc choice;
[L7081]              havoc _to_s670;
[L7082]              havoc _value_s670;
[L7083]              havoc __ret_0_transfer;
[L7084]              havoc _spender_s709;
[L7085]              havoc _value_s709;
[L7086]              havoc __ret_0_approve;
[L7087]              havoc _from_s691;
[L7088]              havoc _to_s691;
[L7089]              havoc _value_s691;
[L7090]              havoc __ret_0_transferFrom;
[L7091]              havoc __ret_0_totalSupply;
[L7092]              havoc owner_s211;
[L7093]              havoc __ret_0_balanceOf;
[L7094]              havoc owner_s227;
[L7095]              havoc spender_s227;
[L7096]              havoc __ret_0_allowance;
[L7097]              havoc _spender_s727;
[L7098]              havoc _addedValue_s727;
[L7099]              havoc success_s727;
[L7100]              havoc _spender_s745;
[L7101]              havoc _subtractedValue_s745;
[L7102]              havoc success_s745;
[L7103]              havoc __ret_0_owner;
[L7104]              havoc __ret_0_isOwner;
[L7105]              havoc newOwner_s564;
[L7106]              havoc __ret_0_paused;
[L7107]              havoc amount_s764;
[L7108]              havoc account_s779;
[L7109]              havoc amount_s779;
[L7110]              havoc __ret_0_name;
[L7111]              havoc __ret_0_symbol;
[L7112]              havoc __ret_0_decimals;
[L7113]              havoc tmpNow;
[L7114]              havoc gas;
[L7115]              assume gas > 4000000 && gas <= 8000000;
[L7116]              tmpNow := now;
[L7117]              havoc now;
[L7118]              assume now > tmpNow;
[L7119]              assume msgsender_MSG != null;
[L7120]              assume DType[msgsender_MSG] != SafeMath;
[L7121]              assume DType[msgsender_MSG] != IERC20;
[L7122]              assume DType[msgsender_MSG] != StandardToken;
[L7123]              assume DType[msgsender_MSG] != Ownable;
[L7124]              assume DType[msgsender_MSG] != Pausable;
[L7125]              assume DType[msgsender_MSG] != PausableToken;
[L7126]              assume DType[msgsender_MSG] != BurnableToken;
[L7127]              assume DType[msgsender_MSG] != LUCKYToken;
[L7128]              Alloc[msgsender_MSG] := true;
[L7129]  COND FALSE  !(choice == 19)
[L7136]  COND FALSE  !(choice == 18)
[L7143]  COND TRUE   choice == 17
[L7144]              gas := gas - 21000;
[L7145]  COND TRUE   gas >= 0
[L7146]              assume _value_s691 >= 0 && _value_s691 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7147]              assume msgvalue_MSG == 0;
[L7148]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_PausableToken(this, msgsender_MSG, msgvalue_MSG, _from_s691, _to_s691, _value_s691);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((((_from_s691 != _to_s691 && ((_value_s691 > _balances_StandardToken[this][_from_s691] || _value_s691 > _allowed_StandardToken[this][_from_s691][msgsender_MSG]) || _balances_StandardToken[this][_to_s691] + _value_s691 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && _value_s691 >= 0) && _value_s691 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_StandardToken[this][_to_s691] >= 0) && _balances_StandardToken[this][_to_s691] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_StandardToken[this][_from_s691] >= 0) && _balances_StandardToken[this][_from_s691] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowed_StandardToken[this][_from_s691][msgsender_MSG] >= 0) && _allowed_StandardToken[this][_from_s691][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transferFrom_PausableToken0 := true;
[L2]                 call_transferFrom_PausableToken0 := false;
[L2]                 revert := revert_hold;
[L1391]              havoc __exception;
[L1392]              revert := false;
[L1393]  COND FALSE  !(__exception)
[L1418]  CALL        call __ret_0_ := transferFrom~address~address~uint256_PausableToken__success(this, msgsender_MSG, msgvalue_MSG, _from_s691, _to_s691, _value_s691);
[L4185]  CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6244]  COND FALSE  !(!!paused_Pausable[this])
[L4185]  RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4186]  COND TRUE   revert
[L1418]  RET         call __ret_0_ := transferFrom~address~address~uint256_PausableToken__success(this, msgsender_MSG, msgvalue_MSG, _from_s691, _to_s691, _value_s691);
[L1419]              assume !revert && gas >= 0;
[L7148]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_PausableToken(this, msgsender_MSG, msgvalue_MSG, _from_s691, _to_s691, _value_s691);
[L7268]  RET         call CorralChoice_LUCKYToken(this);

[2020-11-24 20:42:52,021 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-24 20:42:52,021 INFO  L82        PathProgramCache]: Analyzing trace with hash -1937175949, now seen corresponding path program 1 times
[2020-11-24 20:42:52,022 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-24 20:42:52,034 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-24 20:42:52,058 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-24 20:42:52,059 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-24 20:42:52,059 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [4] imperfect sequences [] total 4
[2020-11-24 20:42:52,060 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-24 20:42:52,060 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-11-24 20:42:52,060 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=5, Invalid=7, Unknown=0, NotChecked=0, Total=12
[2020-11-24 20:42:52,060 INFO  L87              Difference]: Start difference. First operand 3947 states and 4842 transitions. cyclomatic complexity: 897 Second operand 4 states.
[2020-11-24 20:42:53,737 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-24 20:42:53,737 INFO  L93              Difference]: Finished difference Result 5256 states and 6148 transitions.
[2020-11-24 20:42:53,738 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 4 states. 
[2020-11-24 20:42:53,738 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 5256 states and 6148 transitions.
[2020-11-24 20:42:53,778 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-24 20:42:53,795 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 5256 states to 4812 states and 5592 transitions.
[2020-11-24 20:42:53,795 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1215
[2020-11-24 20:42:53,796 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1249
[2020-11-24 20:42:53,797 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 4812 states and 5592 transitions.
[2020-11-24 20:42:53,802 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-24 20:42:53,802 INFO  L728         BuchiCegarLoop]: Abstraction has 4812 states and 5592 transitions.
[2020-11-24 20:42:53,807 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 4812 states and 5592 transitions.
[2020-11-24 20:42:53,856 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 4812 to 4424.
[2020-11-24 20:42:53,856 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 4424 states.
[2020-11-24 20:42:53,863 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 4424 states to 4424 states and 5105 transitions.
[2020-11-24 20:42:53,863 INFO  L751         BuchiCegarLoop]: Abstraction has 4424 states and 5105 transitions.
[2020-11-24 20:42:53,863 INFO  L631         BuchiCegarLoop]: Abstraction has 4424 states and 5105 transitions.
[2020-11-24 20:42:53,863 INFO  L445         BuchiCegarLoop]: ======== Iteration 3============
[2020-11-24 20:42:53,863 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 4424 states and 5105 transitions.
[2020-11-24 20:42:53,871 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-24 20:42:53,871 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-24 20:42:53,871 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-24 20:42:53,876 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [6, 6, 6, 6, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-24 20:42:53,876 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transferFrom_PausableToken0 := false;
[L2]                 call_transferFrom_PausableToken0 := false;
[L2]     CALL        call main();
[L7258]              assume null == 0;
[L7259]  CALL        call this := FreshRefGenerator__success();
[L2904]              havoc newRef;
[L2905]              assume Alloc[newRef] == false;
[L2906]              Alloc[newRef] := true;
[L2907]              assume newRef != null;
[L7259]  RET         call this := FreshRefGenerator__success();
[L7260]              assume now >= 0;
[L7261]              assume DType[this] == LUCKYToken;
[L7262]              assume msgvalue_MSG == 0;
[L7263]              gas := gas - 53000;
[L7264]  CALL        call LUCKYToken_LUCKYToken(this, msgsender_MSG, msgvalue_MSG);
[L1849]              havoc __exception;
[L1850]              revert := false;
[L1851]  COND FALSE  !(__exception)
[L1876]  CALL        call LUCKYToken_LUCKYToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4580]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3072]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3057]              assume msgsender_MSG != null;
[L3058]              Balance[this] := 0;
[L3072]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3073]  COND FALSE  !(revert)
[L4580]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4581]  COND FALSE  !(revert)
[L4584]  CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3118]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3072]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3057]              assume msgsender_MSG != null;
[L3058]              Balance[this] := 0;
[L3072]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3073]  COND FALSE  !(revert)
[L3118]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3119]  COND FALSE  !(revert)
[L3122]  CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3094]              assume msgsender_MSG != null;
[L3095]              Balance[this] := 0;
[L3096]              _balances_StandardToken[this] := zeroRefintArr();
[L3097]              sum__balances0[this] := 0;
[L3098]              _allowed_StandardToken[this] := zeroRefRefintArr();
[L3099]              sum__allowed1[this] := 0;
[L3100]              _totalSupply_StandardToken[this] := 0;
[L3122]  RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3123]  COND FALSE  !(revert)
[L4584]  RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4585]  COND FALSE  !(revert)
[L4588]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3809]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3793]              assume msgsender_MSG != null;
[L3794]              Balance[this] := 0;
[L3795]              _owner_Ownable[this] := null;
[L3809]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3810]  COND FALSE  !(revert)
[L4588]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L4589]  COND FALSE  !(revert)
[L4592]  CALL        call BurnableToken_BurnableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4394]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3072]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3057]              assume msgsender_MSG != null;
[L3058]              Balance[this] := 0;
[L3072]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3073]  COND FALSE  !(revert)
[L4394]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4395]  COND FALSE  !(revert)
[L4398]  CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3118]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3072]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3057]              assume msgsender_MSG != null;
[L3058]              Balance[this] := 0;
[L3072]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3073]  COND FALSE  !(revert)
[L3118]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3119]  COND FALSE  !(revert)
[L3122]  CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3094]              assume msgsender_MSG != null;
[L3095]              Balance[this] := 0;
[L3096]              _balances_StandardToken[this] := zeroRefintArr();
[L3097]              sum__balances0[this] := 0;
[L3098]              _allowed_StandardToken[this] := zeroRefRefintArr();
[L3099]              sum__allowed1[this] := 0;
[L3100]              _totalSupply_StandardToken[this] := 0;
[L3122]  RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3123]  COND FALSE  !(revert)
[L4398]  RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4399]  COND FALSE  !(revert)
[L4402]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3809]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3793]              assume msgsender_MSG != null;
[L3794]              Balance[this] := 0;
[L3795]              _owner_Ownable[this] := null;
[L3809]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3810]  COND FALSE  !(revert)
[L4402]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L4403]  COND FALSE  !(revert)
[L4406]  CALL        call BurnableToken_BurnableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4367]              assume msgsender_MSG != null;
[L4368]              Balance[this] := 0;
[L4406]  RET         call BurnableToken_BurnableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4407]  COND FALSE  !(revert)
[L4592]  RET         call BurnableToken_BurnableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4593]  COND FALSE  !(revert)
[L4596]  CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L3966]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3809]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3793]              assume msgsender_MSG != null;
[L3794]              Balance[this] := 0;
[L3795]              _owner_Ownable[this] := null;
[L3809]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3810]  COND FALSE  !(revert)
[L3966]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3967]  COND FALSE  !(revert)
[L3970]  CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3946]              assume msgsender_MSG != null;
[L3947]              Balance[this] := 0;
[L3948]              paused_Pausable[this] := false;
[L3970]  RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3971]  COND FALSE  !(revert)
[L4596]  RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L4597]  COND FALSE  !(revert)
[L4600]  CALL        call PausableToken_PausableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4084]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3072]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3057]              assume msgsender_MSG != null;
[L3058]              Balance[this] := 0;
[L3072]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3073]  COND FALSE  !(revert)
[L4084]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4085]  COND FALSE  !(revert)
[L4088]  CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3118]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3072]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3057]              assume msgsender_MSG != null;
[L3058]              Balance[this] := 0;
[L3072]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3073]  COND FALSE  !(revert)
[L3118]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3119]  COND FALSE  !(revert)
[L3122]  CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3094]              assume msgsender_MSG != null;
[L3095]              Balance[this] := 0;
[L3096]              _balances_StandardToken[this] := zeroRefintArr();
[L3097]              sum__balances0[this] := 0;
[L3098]              _allowed_StandardToken[this] := zeroRefRefintArr();
[L3099]              sum__allowed1[this] := 0;
[L3100]              _totalSupply_StandardToken[this] := 0;
[L3122]  RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3123]  COND FALSE  !(revert)
[L4088]  RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4089]  COND FALSE  !(revert)
[L4092]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3809]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3793]              assume msgsender_MSG != null;
[L3794]              Balance[this] := 0;
[L3795]              _owner_Ownable[this] := null;
[L3809]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3810]  COND FALSE  !(revert)
[L4092]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L4093]  COND FALSE  !(revert)
[L4096]  CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L3966]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3809]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3793]              assume msgsender_MSG != null;
[L3794]              Balance[this] := 0;
[L3795]              _owner_Ownable[this] := null;
[L3809]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3810]  COND FALSE  !(revert)
[L3966]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3967]  COND FALSE  !(revert)
[L3970]  CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3946]              assume msgsender_MSG != null;
[L3947]              Balance[this] := 0;
[L3948]              paused_Pausable[this] := false;
[L3970]  RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3971]  COND FALSE  !(revert)
[L4096]  RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L4097]  COND FALSE  !(revert)
[L4100]  CALL        call PausableToken_PausableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4053]              assume msgsender_MSG != null;
[L4054]              Balance[this] := 0;
[L4100]  RET         call PausableToken_PausableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4101]  COND FALSE  !(revert)
[L4600]  RET         call PausableToken_PausableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4601]  COND FALSE  !(revert)
[L4604]  CALL        call LUCKYToken_LUCKYToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4523]              assume msgsender_MSG != null;
[L4524]              Balance[this] := 0;
[L4525]              name_LUCKYToken[this] := -927166810;
[L4526]              symbol_LUCKYToken[this] := -927166810;
[L4527]              decimals_LUCKYToken[this] := 18;
[L4528]              INIT_TOTALSUPPLY_LUCKYToken[this] := 10000000000;
[L4529]              __var_26 := ConstantToRef(625314775344980695514831456764478199936221022047);
[L4530]              _tokenOwner_LUCKYToken[this] := ConstantToRef(625314775344980695514831456764478199936221022047);
[L4532]              __var_25 := decimals_LUCKYToken[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4533]              _totalSupply_StandardToken[this] := nonlinearMul(INIT_TOTALSUPPLY_LUCKYToken[this], nonlinearPow(10, decimals_LUCKYToken[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4534]              _owner_Ownable[this] := _tokenOwner_LUCKYToken[this];
[L4535]              assert { :EventEmitted "OwnershipTransferred_LUCKYToken" } true;
[L4536]              sum__balances0[this] := sum__balances0[this] - _balances_StandardToken[this][_owner_Ownable[this]];
[L4537]              _balances_StandardToken[this][_owner_Ownable[this]] := _totalSupply_StandardToken[this];
[L4538]              sum__balances0[this] := sum__balances0[this] + _balances_StandardToken[this][_owner_Ownable[this]];
[L4539]              assert { :EventEmitted "Transfer_LUCKYToken" } true;
[L4604]  RET         call LUCKYToken_LUCKYToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4605]  COND FALSE  !(revert)
[L1876]  RET         call LUCKYToken_LUCKYToken__success(this, msgsender_MSG, msgvalue_MSG);
[L1877]              assume !revert && gas >= 0;
[L7264]  RET         call LUCKYToken_LUCKYToken(this, msgsender_MSG, msgvalue_MSG);
[L7265]              assume !revert && gas >= 0;
[L7268]  CALL        call CorralChoice_LUCKYToken(this);
[L7078]              havoc msgsender_MSG;
[L7079]              havoc msgvalue_MSG;
[L7080]              havoc choice;
[L7081]              havoc _to_s670;
[L7082]              havoc _value_s670;
[L7083]              havoc __ret_0_transfer;
[L7084]              havoc _spender_s709;
[L7085]              havoc _value_s709;
[L7086]              havoc __ret_0_approve;
[L7087]              havoc _from_s691;
[L7088]              havoc _to_s691;
[L7089]              havoc _value_s691;
[L7090]              havoc __ret_0_transferFrom;
[L7091]              havoc __ret_0_totalSupply;
[L7092]              havoc owner_s211;
[L7093]              havoc __ret_0_balanceOf;
[L7094]              havoc owner_s227;
[L7095]              havoc spender_s227;
[L7096]              havoc __ret_0_allowance;
[L7097]              havoc _spender_s727;
[L7098]              havoc _addedValue_s727;
[L7099]              havoc success_s727;
[L7100]              havoc _spender_s745;
[L7101]              havoc _subtractedValue_s745;
[L7102]              havoc success_s745;
[L7103]              havoc __ret_0_owner;
[L7104]              havoc __ret_0_isOwner;
[L7105]              havoc newOwner_s564;
[L7106]              havoc __ret_0_paused;
[L7107]              havoc amount_s764;
[L7108]              havoc account_s779;
[L7109]              havoc amount_s779;
[L7110]              havoc __ret_0_name;
[L7111]              havoc __ret_0_symbol;
[L7112]              havoc __ret_0_decimals;
[L7113]              havoc tmpNow;
[L7114]              havoc gas;
[L7115]              assume gas > 4000000 && gas <= 8000000;
[L7116]              tmpNow := now;
[L7117]              havoc now;
[L7118]              assume now > tmpNow;
[L7119]              assume msgsender_MSG != null;
[L7120]              assume DType[msgsender_MSG] != SafeMath;
[L7121]              assume DType[msgsender_MSG] != IERC20;
[L7122]              assume DType[msgsender_MSG] != StandardToken;
[L7123]              assume DType[msgsender_MSG] != Ownable;
[L7124]              assume DType[msgsender_MSG] != Pausable;
[L7125]              assume DType[msgsender_MSG] != PausableToken;
[L7126]              assume DType[msgsender_MSG] != BurnableToken;
[L7127]              assume DType[msgsender_MSG] != LUCKYToken;
[L7128]              Alloc[msgsender_MSG] := true;
[L7129]  COND FALSE  !(choice == 19)
[L7136]  COND FALSE  !(choice == 18)
[L7143]  COND TRUE   choice == 17
[L7144]              gas := gas - 21000;
[L7145]  COND TRUE   gas >= 0
[L7146]              assume _value_s691 >= 0 && _value_s691 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7147]              assume msgvalue_MSG == 0;
[L7148]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_PausableToken(this, msgsender_MSG, msgvalue_MSG, _from_s691, _to_s691, _value_s691);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((((_from_s691 != _to_s691 && ((_value_s691 > _balances_StandardToken[this][_from_s691] || _value_s691 > _allowed_StandardToken[this][_from_s691][msgsender_MSG]) || _balances_StandardToken[this][_to_s691] + _value_s691 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && _value_s691 >= 0) && _value_s691 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_StandardToken[this][_to_s691] >= 0) && _balances_StandardToken[this][_to_s691] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_StandardToken[this][_from_s691] >= 0) && _balances_StandardToken[this][_from_s691] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowed_StandardToken[this][_from_s691][msgsender_MSG] >= 0) && _allowed_StandardToken[this][_from_s691][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transferFrom_PausableToken0 := true;
[L2]                 call_transferFrom_PausableToken0 := false;
[L2]                 revert := revert_hold;
[L1391]              havoc __exception;
[L1392]              revert := false;
[L1393]  COND FALSE  !(__exception)
[L1418]  CALL        call __ret_0_ := transferFrom~address~address~uint256_PausableToken__success(this, msgsender_MSG, msgvalue_MSG, _from_s691, _to_s691, _value_s691);
[L4185]  CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6244]  COND FALSE  !(!!paused_Pausable[this])
[L4185]  RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4186]  COND FALSE  !(revert)
[L4189]  COND TRUE   DType[this] == LUCKYToken
[L4190]  CALL        call __var_17 := transferFrom~address~address~uint256_StandardToken__success(this, msgsender_MSG, msgvalue_MSG, _from_s691, _to_s691, _value_s691);
[L3340]  COND TRUE   DType[this] == LUCKYToken
[L3341]  CALL        call _transfer~address~address~uint256_StandardToken__success(this, msgsender_MSG, msgvalue_MSG, from_s300, to_s300, value_s300);
[L3561]              __var_4 := null;
[L3562]  COND FALSE  !(!(to_s401 != null))
[L3566]  CALL        call __var_5 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_StandardToken[this][from_s401], value_s401);
[L3013]  COND FALSE  !(!(b_s82 <= a_s82))
[L3017]              c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3018]              __ret_0_ := c_s82;
[L3566]  RET         call __var_5 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_StandardToken[this][from_s401], value_s401);
[L3567]  COND FALSE  !(revert)
[L3570]              sum__balances0[this] := sum__balances0[this] - _balances_StandardToken[this][from_s401];
[L3571]              _balances_StandardToken[this][from_s401] := __var_5;
[L3572]              sum__balances0[this] := sum__balances0[this] + _balances_StandardToken[this][from_s401];
[L3573]  CALL        call __var_6 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_StandardToken[this][to_s401], value_s401);
[L3037]              c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3038]  COND FALSE  !(!(c_s106 >= a_s106))
[L3042]              __ret_0_ := c_s106;
[L3573]  RET         call __var_6 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_StandardToken[this][to_s401], value_s401);
[L3574]  COND FALSE  !(revert)
[L3577]              sum__balances0[this] := sum__balances0[this] - _balances_StandardToken[this][to_s401];
[L3578]              _balances_StandardToken[this][to_s401] := __var_6;
[L3579]              sum__balances0[this] := sum__balances0[this] + _balances_StandardToken[this][to_s401];
[L3580]              assert { :EventEmitted "Transfer_StandardToken" } true;
[L3341]  RET         call _transfer~address~address~uint256_StandardToken__success(this, msgsender_MSG, msgvalue_MSG, from_s300, to_s300, value_s300);
[L3342]  COND FALSE  !(revert)
[L3363]  CALL        call __var_1 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowed_StandardToken[this][from_s300][msgsender_MSG], value_s300);
[L3013]  COND FALSE  !(!(b_s82 <= a_s82))
[L3017]              c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3018]              __ret_0_ := c_s82;
[L3363]  RET         call __var_1 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowed_StandardToken[this][from_s300][msgsender_MSG], value_s300);
[L3364]  COND FALSE  !(revert)
[L3367]  COND TRUE   DType[this] == LUCKYToken
[L3368]  CALL        call _approve~address~address~uint256_StandardToken__success(this, msgsender_MSG, msgvalue_MSG, from_s300, msgsender_MSG, __var_1);
[L3606]              __var_7 := null;
[L3607]  COND FALSE  !(!(spender_s443 != null))
[L3611]              __var_8 := null;
[L3612]  COND FALSE  !(!(owner_s443 != null))
[L3616]              sum__allowed1[owner_s443] := sum__allowed1[owner_s443] - _allowed_StandardToken[this][owner_s443][spender_s443];
[L3617]              _allowed_StandardToken[this][owner_s443][spender_s443] := value_s443;
[L3618]              sum__allowed1[owner_s443] := sum__allowed1[owner_s443] + _allowed_StandardToken[this][owner_s443][spender_s443];
[L3619]              assert { :EventEmitted "Approval_StandardToken" } true;
[L3368]  RET         call _approve~address~address~uint256_StandardToken__success(this, msgsender_MSG, msgvalue_MSG, from_s300, msgsender_MSG, __var_1);
[L3369]  COND FALSE  !(revert)
[L3390]              __ret_0_ := true;
[L4190]  RET         call __var_17 := transferFrom~address~address~uint256_StandardToken__success(this, msgsender_MSG, msgvalue_MSG, _from_s691, _to_s691, _value_s691);
[L4191]  COND FALSE  !(revert)
[L4202]              __ret_0_ := __var_17;
[L1418]  RET         call __ret_0_ := transferFrom~address~address~uint256_PausableToken__success(this, msgsender_MSG, msgvalue_MSG, _from_s691, _to_s691, _value_s691);
[L1419]              assume !revert && gas >= 0;
[L7148]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_PausableToken(this, msgsender_MSG, msgvalue_MSG, _from_s691, _to_s691, _value_s691);
[L7268]  RET         call CorralChoice_LUCKYToken(this);

Loop:
[L7268]  CALL        call CorralChoice_LUCKYToken(this);
[L7078]              havoc msgsender_MSG;
[L7079]              havoc msgvalue_MSG;
[L7080]              havoc choice;
[L7081]              havoc _to_s670;
[L7082]              havoc _value_s670;
[L7083]              havoc __ret_0_transfer;
[L7084]              havoc _spender_s709;
[L7085]              havoc _value_s709;
[L7086]              havoc __ret_0_approve;
[L7087]              havoc _from_s691;
[L7088]              havoc _to_s691;
[L7089]              havoc _value_s691;
[L7090]              havoc __ret_0_transferFrom;
[L7091]              havoc __ret_0_totalSupply;
[L7092]              havoc owner_s211;
[L7093]              havoc __ret_0_balanceOf;
[L7094]              havoc owner_s227;
[L7095]              havoc spender_s227;
[L7096]              havoc __ret_0_allowance;
[L7097]              havoc _spender_s727;
[L7098]              havoc _addedValue_s727;
[L7099]              havoc success_s727;
[L7100]              havoc _spender_s745;
[L7101]              havoc _subtractedValue_s745;
[L7102]              havoc success_s745;
[L7103]              havoc __ret_0_owner;
[L7104]              havoc __ret_0_isOwner;
[L7105]              havoc newOwner_s564;
[L7106]              havoc __ret_0_paused;
[L7107]              havoc amount_s764;
[L7108]              havoc account_s779;
[L7109]              havoc amount_s779;
[L7110]              havoc __ret_0_name;
[L7111]              havoc __ret_0_symbol;
[L7112]              havoc __ret_0_decimals;
[L7113]              havoc tmpNow;
[L7114]              havoc gas;
[L7115]              assume gas > 4000000 && gas <= 8000000;
[L7116]              tmpNow := now;
[L7117]              havoc now;
[L7118]              assume now > tmpNow;
[L7119]              assume msgsender_MSG != null;
[L7120]              assume DType[msgsender_MSG] != SafeMath;
[L7121]              assume DType[msgsender_MSG] != IERC20;
[L7122]              assume DType[msgsender_MSG] != StandardToken;
[L7123]              assume DType[msgsender_MSG] != Ownable;
[L7124]              assume DType[msgsender_MSG] != Pausable;
[L7125]              assume DType[msgsender_MSG] != PausableToken;
[L7126]              assume DType[msgsender_MSG] != BurnableToken;
[L7127]              assume DType[msgsender_MSG] != LUCKYToken;
[L7128]              Alloc[msgsender_MSG] := true;
[L7129]  COND FALSE  !(choice == 19)
[L7136]  COND FALSE  !(choice == 18)
[L7143]  COND TRUE   choice == 17
[L7144]              gas := gas - 21000;
[L7145]  COND TRUE   gas >= 0
[L7146]              assume _value_s691 >= 0 && _value_s691 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7147]              assume msgvalue_MSG == 0;
[L7148]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_PausableToken(this, msgsender_MSG, msgvalue_MSG, _from_s691, _to_s691, _value_s691);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((((_from_s691 != _to_s691 && ((_value_s691 > _balances_StandardToken[this][_from_s691] || _value_s691 > _allowed_StandardToken[this][_from_s691][msgsender_MSG]) || _balances_StandardToken[this][_to_s691] + _value_s691 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && _value_s691 >= 0) && _value_s691 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_StandardToken[this][_to_s691] >= 0) && _balances_StandardToken[this][_to_s691] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_StandardToken[this][_from_s691] >= 0) && _balances_StandardToken[this][_from_s691] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowed_StandardToken[this][_from_s691][msgsender_MSG] >= 0) && _allowed_StandardToken[this][_from_s691][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transferFrom_PausableToken0 := true;
[L2]                 call_transferFrom_PausableToken0 := false;
[L2]                 revert := revert_hold;
[L1391]              havoc __exception;
[L1392]              revert := false;
[L1393]  COND FALSE  !(__exception)
[L1418]  CALL        call __ret_0_ := transferFrom~address~address~uint256_PausableToken__success(this, msgsender_MSG, msgvalue_MSG, _from_s691, _to_s691, _value_s691);
[L4185]  CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6244]  COND FALSE  !(!!paused_Pausable[this])
[L4185]  RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4186]  COND FALSE  !(revert)
[L4189]  COND TRUE   DType[this] == LUCKYToken
[L4190]  CALL        call __var_17 := transferFrom~address~address~uint256_StandardToken__success(this, msgsender_MSG, msgvalue_MSG, _from_s691, _to_s691, _value_s691);
[L3340]  COND TRUE   DType[this] == LUCKYToken
[L3341]  CALL        call _transfer~address~address~uint256_StandardToken__success(this, msgsender_MSG, msgvalue_MSG, from_s300, to_s300, value_s300);
[L3561]              __var_4 := null;
[L3562]  COND FALSE  !(!(to_s401 != null))
[L3566]  CALL        call __var_5 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_StandardToken[this][from_s401], value_s401);
[L3013]  COND FALSE  !(!(b_s82 <= a_s82))
[L3017]              c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3018]              __ret_0_ := c_s82;
[L3566]  RET         call __var_5 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_StandardToken[this][from_s401], value_s401);
[L3567]  COND FALSE  !(revert)
[L3570]              sum__balances0[this] := sum__balances0[this] - _balances_StandardToken[this][from_s401];
[L3571]              _balances_StandardToken[this][from_s401] := __var_5;
[L3572]              sum__balances0[this] := sum__balances0[this] + _balances_StandardToken[this][from_s401];
[L3573]  CALL        call __var_6 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_StandardToken[this][to_s401], value_s401);
[L3037]              c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3038]  COND FALSE  !(!(c_s106 >= a_s106))
[L3042]              __ret_0_ := c_s106;
[L3573]  RET         call __var_6 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_StandardToken[this][to_s401], value_s401);
[L3574]  COND FALSE  !(revert)
[L3577]              sum__balances0[this] := sum__balances0[this] - _balances_StandardToken[this][to_s401];
[L3578]              _balances_StandardToken[this][to_s401] := __var_6;
[L3579]              sum__balances0[this] := sum__balances0[this] + _balances_StandardToken[this][to_s401];
[L3580]              assert { :EventEmitted "Transfer_StandardToken" } true;
[L3341]  RET         call _transfer~address~address~uint256_StandardToken__success(this, msgsender_MSG, msgvalue_MSG, from_s300, to_s300, value_s300);
[L3342]  COND FALSE  !(revert)
[L3363]  CALL        call __var_1 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowed_StandardToken[this][from_s300][msgsender_MSG], value_s300);
[L3013]  COND FALSE  !(!(b_s82 <= a_s82))
[L3017]              c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3018]              __ret_0_ := c_s82;
[L3363]  RET         call __var_1 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowed_StandardToken[this][from_s300][msgsender_MSG], value_s300);
[L3364]  COND FALSE  !(revert)
[L3367]  COND TRUE   DType[this] == LUCKYToken
[L3368]  CALL        call _approve~address~address~uint256_StandardToken__success(this, msgsender_MSG, msgvalue_MSG, from_s300, msgsender_MSG, __var_1);
[L3606]              __var_7 := null;
[L3607]  COND FALSE  !(!(spender_s443 != null))
[L3611]              __var_8 := null;
[L3612]  COND FALSE  !(!(owner_s443 != null))
[L3616]              sum__allowed1[owner_s443] := sum__allowed1[owner_s443] - _allowed_StandardToken[this][owner_s443][spender_s443];
[L3617]              _allowed_StandardToken[this][owner_s443][spender_s443] := value_s443;
[L3618]              sum__allowed1[owner_s443] := sum__allowed1[owner_s443] + _allowed_StandardToken[this][owner_s443][spender_s443];
[L3619]              assert { :EventEmitted "Approval_StandardToken" } true;
[L3368]  RET         call _approve~address~address~uint256_StandardToken__success(this, msgsender_MSG, msgvalue_MSG, from_s300, msgsender_MSG, __var_1);
[L3369]  COND FALSE  !(revert)
[L3390]              __ret_0_ := true;
[L4190]  RET         call __var_17 := transferFrom~address~address~uint256_StandardToken__success(this, msgsender_MSG, msgvalue_MSG, _from_s691, _to_s691, _value_s691);
[L4191]  COND FALSE  !(revert)
[L4202]              __ret_0_ := __var_17;
[L1418]  RET         call __ret_0_ := transferFrom~address~address~uint256_PausableToken__success(this, msgsender_MSG, msgvalue_MSG, _from_s691, _to_s691, _value_s691);
[L1419]              assume !revert && gas >= 0;
[L7148]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_PausableToken(this, msgsender_MSG, msgvalue_MSG, _from_s691, _to_s691, _value_s691);
[L7268]  RET         call CorralChoice_LUCKYToken(this);

[2020-11-24 20:42:53,926 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-24 20:42:53,927 INFO  L82        PathProgramCache]: Analyzing trace with hash -176356824, now seen corresponding path program 1 times
[2020-11-24 20:42:53,928 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-24 20:42:53,960 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-24 20:42:54,172 INFO  L134       CoverageAnalysis]: Checked inductivity of 337 backedges. 20 proven. 0 refuted. 0 times theorem prover too weak. 317 trivial. 0 not checked.
[2020-11-24 20:42:54,172 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-24 20:42:54,172 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [15] imperfect sequences [] total 15
[2020-11-24 20:42:54,173 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-24 20:42:54,173 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 16 interpolants.
[2020-11-24 20:42:54,173 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=30, Invalid=210, Unknown=0, NotChecked=0, Total=240
[2020-11-24 20:42:54,173 INFO  L87              Difference]: Start difference. First operand 4424 states and 5105 transitions. cyclomatic complexity: 683 Second operand 16 states.
[2020-11-24 20:42:57,056 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-24 20:42:57,057 INFO  L93              Difference]: Finished difference Result 4518 states and 5211 transitions.
[2020-11-24 20:42:57,057 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 16 states. 
[2020-11-24 20:42:57,057 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 4518 states and 5211 transitions.
[2020-11-24 20:42:57,065 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-24 20:42:57,077 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 4518 states to 4518 states and 5211 transitions.
[2020-11-24 20:42:57,078 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1225
[2020-11-24 20:42:57,078 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1225
[2020-11-24 20:42:57,078 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 4518 states and 5211 transitions.
[2020-11-24 20:42:57,083 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-24 20:42:57,083 INFO  L728         BuchiCegarLoop]: Abstraction has 4518 states and 5211 transitions.
[2020-11-24 20:42:57,086 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 4518 states and 5211 transitions.
[2020-11-24 20:42:57,113 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 4518 to 4295.
[2020-11-24 20:42:57,113 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 4295 states.
[2020-11-24 20:42:57,118 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 4295 states to 4295 states and 4941 transitions.
[2020-11-24 20:42:57,118 INFO  L751         BuchiCegarLoop]: Abstraction has 4295 states and 4941 transitions.
[2020-11-24 20:42:57,118 INFO  L631         BuchiCegarLoop]: Abstraction has 4295 states and 4941 transitions.
[2020-11-24 20:42:57,118 INFO  L445         BuchiCegarLoop]: ======== Iteration 4============
[2020-11-24 20:42:57,118 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 4295 states and 4941 transitions.
[2020-11-24 20:42:57,123 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-24 20:42:57,123 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-24 20:42:57,123 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-24 20:42:57,126 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [6, 6, 6, 6, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-24 20:42:57,126 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transferFrom_PausableToken0 := false;
[L2]                 call_transferFrom_PausableToken0 := false;
[L2]     CALL        call main();
[L7258]              assume null == 0;
[L7259]  CALL        call this := FreshRefGenerator__success();
[L2904]              havoc newRef;
[L2905]              assume Alloc[newRef] == false;
[L2906]              Alloc[newRef] := true;
[L2907]              assume newRef != null;
[L7259]  RET         call this := FreshRefGenerator__success();
[L7260]              assume now >= 0;
[L7261]              assume DType[this] == LUCKYToken;
[L7262]              assume msgvalue_MSG == 0;
[L7263]              gas := gas - 53000;
[L7264]  CALL        call LUCKYToken_LUCKYToken(this, msgsender_MSG, msgvalue_MSG);
[L1849]              havoc __exception;
[L1850]              revert := false;
[L1851]  COND TRUE   __exception
[L1852]              __tmp__Balance := Balance;
[L1853]              __tmp__DType := DType;
[L1854]              __tmp__Alloc := Alloc;
[L1855]              __tmp__balance_ADDR := balance_ADDR;
[L1856]              __tmp__M_Ref_int := M_Ref_int;
[L1857]              __tmp__sum__balances0 := sum__balances0;
[L1858]              __tmp__alloc__allowed_StandardToken_lvl0 := alloc__allowed_StandardToken_lvl0;
[L1859]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L1860]              __tmp__sum__allowed1 := sum__allowed1;
[L1861]              __tmp__Length := Length;
[L1862]              __tmp__now := now;
[L1863]              __tmp___balances_StandardToken := _balances_StandardToken;
[L1864]              __tmp___allowed_StandardToken := _allowed_StandardToken;
[L1865]              __tmp___totalSupply_StandardToken := _totalSupply_StandardToken;
[L1866]              __tmp___owner_Ownable := _owner_Ownable;
[L1867]              __tmp__paused_Pausable := paused_Pausable;
[L1868]              __tmp__name_LUCKYToken := name_LUCKYToken;
[L1869]              __tmp__symbol_LUCKYToken := symbol_LUCKYToken;
[L1870]              __tmp__decimals_LUCKYToken := decimals_LUCKYToken;
[L1871]              __tmp__INIT_TOTALSUPPLY_LUCKYToken := INIT_TOTALSUPPLY_LUCKYToken;
[L1872]              __tmp___tokenOwner_LUCKYToken := _tokenOwner_LUCKYToken;
[L1873]  CALL        call LUCKYToken_LUCKYToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L4546]  CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L3064]  CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3049]              assume msgsender_MSG != null;
[L3050]              __tmp__Balance[this] := 0;
[L3064]  RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3065]  COND FALSE  !(revert)
[L4546]  RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4547]  COND FALSE  !(revert)
[L4550]  CALL        call StandardToken_StandardToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L3106]  CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L3064]  CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3049]              assume msgsender_MSG != null;
[L3050]              __tmp__Balance[this] := 0;
[L3064]  RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3065]  COND FALSE  !(revert)
[L3106]  RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L3107]  COND FALSE  !(revert)
[L3110]  CALL        call StandardToken_StandardToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3081]              assume msgsender_MSG != null;
[L3082]              __tmp__Balance[this] := 0;
[L3083]              __tmp___balances_StandardToken[this] := zeroRefintArr();
[L3084]              __tmp__sum__balances0[this] := 0;
[L3085]              __tmp___allowed_StandardToken[this] := zeroRefRefintArr();
[L3086]              __tmp__sum__allowed1[this] := 0;
[L3087]              __tmp___totalSupply_StandardToken[this] := 0;
[L3110]  RET         call StandardToken_StandardToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3111]  COND FALSE  !(revert)
[L4550]  RET         call StandardToken_StandardToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L4551]  COND FALSE  !(revert)
[L4554]  CALL        call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L3801]  CALL        call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3784]              assume msgsender_MSG != null;
[L3785]              __tmp__Balance[this] := 0;
[L3786]              __tmp___owner_Ownable[this] := null;
[L3801]  RET         call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3802]  COND FALSE  !(revert)
[L4554]  RET         call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L4555]  COND FALSE  !(revert)
[L4558]  CALL        call BurnableToken_BurnableToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L4374]  CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L3064]  CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3049]              assume msgsender_MSG != null;
[L3050]              __tmp__Balance[this] := 0;
[L3064]  RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3065]  COND FALSE  !(revert)
[L4374]  RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4375]  COND FALSE  !(revert)
[L4378]  CALL        call StandardToken_StandardToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L3106]  CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L3064]  CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3049]              assume msgsender_MSG != null;
[L3050]              __tmp__Balance[this] := 0;
[L3064]  RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3065]  COND FALSE  !(revert)
[L3106]  RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L3107]  COND FALSE  !(revert)
[L3110]  CALL        call StandardToken_StandardToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3081]              assume msgsender_MSG != null;
[L3082]              __tmp__Balance[this] := 0;
[L3083]              __tmp___balances_StandardToken[this] := zeroRefintArr();
[L3084]              __tmp__sum__balances0[this] := 0;
[L3085]              __tmp___allowed_StandardToken[this] := zeroRefRefintArr();
[L3086]              __tmp__sum__allowed1[this] := 0;
[L3087]              __tmp___totalSupply_StandardToken[this] := 0;
[L3110]  RET         call StandardToken_StandardToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3111]  COND FALSE  !(revert)
[L4378]  RET         call StandardToken_StandardToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L4379]  COND FALSE  !(revert)
[L4382]  CALL        call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L3801]  CALL        call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3784]              assume msgsender_MSG != null;
[L3785]              __tmp__Balance[this] := 0;
[L3786]              __tmp___owner_Ownable[this] := null;
[L3801]  RET         call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3802]  COND FALSE  !(revert)
[L4382]  RET         call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L4383]  COND FALSE  !(revert)
[L4386]  CALL        call BurnableToken_BurnableToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4359]              assume msgsender_MSG != null;
[L4360]              __tmp__Balance[this] := 0;
[L4386]  RET         call BurnableToken_BurnableToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4387]  COND FALSE  !(revert)
[L4558]  RET         call BurnableToken_BurnableToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L4559]  COND FALSE  !(revert)
[L4562]  CALL        call Pausable_Pausable__fail(this, msgsender_MSG, msgvalue_MSG);
[L3954]  CALL        call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L3801]  CALL        call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3784]              assume msgsender_MSG != null;
[L3785]              __tmp__Balance[this] := 0;
[L3786]              __tmp___owner_Ownable[this] := null;
[L3801]  RET         call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3802]  COND FALSE  !(revert)
[L3954]  RET         call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L3955]  COND FALSE  !(revert)
[L3958]  CALL        call Pausable_Pausable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3937]              assume msgsender_MSG != null;
[L3938]              __tmp__Balance[this] := 0;
[L3939]              __tmp__paused_Pausable[this] := false;
[L3958]  RET         call Pausable_Pausable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3959]  COND FALSE  !(revert)
[L4562]  RET         call Pausable_Pausable__fail(this, msgsender_MSG, msgvalue_MSG);
[L4563]  COND FALSE  !(revert)
[L4566]  CALL        call PausableToken_PausableToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L4060]  CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L3064]  CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3049]              assume msgsender_MSG != null;
[L3050]              __tmp__Balance[this] := 0;
[L3064]  RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3065]  COND FALSE  !(revert)
[L4060]  RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4061]  COND FALSE  !(revert)
[L4064]  CALL        call StandardToken_StandardToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L3106]  CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L3064]  CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3049]              assume msgsender_MSG != null;
[L3050]              __tmp__Balance[this] := 0;
[L3064]  RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3065]  COND FALSE  !(revert)
[L3106]  RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L3107]  COND FALSE  !(revert)
[L3110]  CALL        call StandardToken_StandardToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3081]              assume msgsender_MSG != null;
[L3082]              __tmp__Balance[this] := 0;
[L3083]              __tmp___balances_StandardToken[this] := zeroRefintArr();
[L3084]              __tmp__sum__balances0[this] := 0;
[L3085]              __tmp___allowed_StandardToken[this] := zeroRefRefintArr();
[L3086]              __tmp__sum__allowed1[this] := 0;
[L3087]              __tmp___totalSupply_StandardToken[this] := 0;
[L3110]  RET         call StandardToken_StandardToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3111]  COND FALSE  !(revert)
[L4064]  RET         call StandardToken_StandardToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L4065]  COND FALSE  !(revert)
[L4068]  CALL        call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L3801]  CALL        call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3784]              assume msgsender_MSG != null;
[L3785]              __tmp__Balance[this] := 0;
[L3786]              __tmp___owner_Ownable[this] := null;
[L3801]  RET         call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3802]  COND FALSE  !(revert)
[L4068]  RET         call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L4069]  COND FALSE  !(revert)
[L4072]  CALL        call Pausable_Pausable__fail(this, msgsender_MSG, msgvalue_MSG);
[L3954]  CALL        call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L3801]  CALL        call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3784]              assume msgsender_MSG != null;
[L3785]              __tmp__Balance[this] := 0;
[L3786]              __tmp___owner_Ownable[this] := null;
[L3801]  RET         call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3802]  COND FALSE  !(revert)
[L3954]  RET         call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L3955]  COND FALSE  !(revert)
[L3958]  CALL        call Pausable_Pausable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3937]              assume msgsender_MSG != null;
[L3938]              __tmp__Balance[this] := 0;
[L3939]              __tmp__paused_Pausable[this] := false;
[L3958]  RET         call Pausable_Pausable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3959]  COND FALSE  !(revert)
[L4072]  RET         call Pausable_Pausable__fail(this, msgsender_MSG, msgvalue_MSG);
[L4073]  COND FALSE  !(revert)
[L4076]  CALL        call PausableToken_PausableToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4045]              assume msgsender_MSG != null;
[L4046]              __tmp__Balance[this] := 0;
[L4076]  RET         call PausableToken_PausableToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4077]  COND FALSE  !(revert)
[L4566]  RET         call PausableToken_PausableToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L4567]  COND FALSE  !(revert)
[L4570]  CALL        call LUCKYToken_LUCKYToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4501]              assume msgsender_MSG != null;
[L4502]              __tmp__Balance[this] := 0;
[L4503]              __tmp__name_LUCKYToken[this] := -927166810;
[L4504]              __tmp__symbol_LUCKYToken[this] := -927166810;
[L4505]              __tmp__decimals_LUCKYToken[this] := 18;
[L4506]              __tmp__INIT_TOTALSUPPLY_LUCKYToken[this] := 10000000000;
[L4507]              __var_26 := ConstantToRef(625314775344980695514831456764478199936221022047);
[L4508]              __tmp___tokenOwner_LUCKYToken[this] := ConstantToRef(625314775344980695514831456764478199936221022047);
[L4510]              __var_25 := __tmp__decimals_LUCKYToken[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4511]              __tmp___totalSupply_StandardToken[this] := nonlinearMul(__tmp__INIT_TOTALSUPPLY_LUCKYToken[this], nonlinearPow(10, __tmp__decimals_LUCKYToken[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4512]              __tmp___owner_Ownable[this] := __tmp___tokenOwner_LUCKYToken[this];
[L4513]              __tmp__sum__balances0[this] := __tmp__sum__balances0[this] - __tmp___balances_StandardToken[this][__tmp___owner_Ownable[this]];
[L4514]              __tmp___balances_StandardToken[this][__tmp___owner_Ownable[this]] := __tmp___totalSupply_StandardToken[this];
[L4515]              __tmp__sum__balances0[this] := __tmp__sum__balances0[this] + __tmp___balances_StandardToken[this][__tmp___owner_Ownable[this]];
[L4570]  RET         call LUCKYToken_LUCKYToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4571]  COND FALSE  !(revert)
[L1873]  RET         call LUCKYToken_LUCKYToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L1874]              assume revert || gas < 0;
[L7264]  RET         call LUCKYToken_LUCKYToken(this, msgsender_MSG, msgvalue_MSG);
[L7265]              assume !revert && gas >= 0;
[L7268]  CALL        call CorralChoice_LUCKYToken(this);
[L7078]              havoc msgsender_MSG;
[L7079]              havoc msgvalue_MSG;
[L7080]              havoc choice;
[L7081]              havoc _to_s670;
[L7082]              havoc _value_s670;
[L7083]              havoc __ret_0_transfer;
[L7084]              havoc _spender_s709;
[L7085]              havoc _value_s709;
[L7086]              havoc __ret_0_approve;
[L7087]              havoc _from_s691;
[L7088]              havoc _to_s691;
[L7089]              havoc _value_s691;
[L7090]              havoc __ret_0_transferFrom;
[L7091]              havoc __ret_0_totalSupply;
[L7092]              havoc owner_s211;
[L7093]              havoc __ret_0_balanceOf;
[L7094]              havoc owner_s227;
[L7095]              havoc spender_s227;
[L7096]              havoc __ret_0_allowance;
[L7097]              havoc _spender_s727;
[L7098]              havoc _addedValue_s727;
[L7099]              havoc success_s727;
[L7100]              havoc _spender_s745;
[L7101]              havoc _subtractedValue_s745;
[L7102]              havoc success_s745;
[L7103]              havoc __ret_0_owner;
[L7104]              havoc __ret_0_isOwner;
[L7105]              havoc newOwner_s564;
[L7106]              havoc __ret_0_paused;
[L7107]              havoc amount_s764;
[L7108]              havoc account_s779;
[L7109]              havoc amount_s779;
[L7110]              havoc __ret_0_name;
[L7111]              havoc __ret_0_symbol;
[L7112]              havoc __ret_0_decimals;
[L7113]              havoc tmpNow;
[L7114]              havoc gas;
[L7115]              assume gas > 4000000 && gas <= 8000000;
[L7116]              tmpNow := now;
[L7117]              havoc now;
[L7118]              assume now > tmpNow;
[L7119]              assume msgsender_MSG != null;
[L7120]              assume DType[msgsender_MSG] != SafeMath;
[L7121]              assume DType[msgsender_MSG] != IERC20;
[L7122]              assume DType[msgsender_MSG] != StandardToken;
[L7123]              assume DType[msgsender_MSG] != Ownable;
[L7124]              assume DType[msgsender_MSG] != Pausable;
[L7125]              assume DType[msgsender_MSG] != PausableToken;
[L7126]              assume DType[msgsender_MSG] != BurnableToken;
[L7127]              assume DType[msgsender_MSG] != LUCKYToken;
[L7128]              Alloc[msgsender_MSG] := true;
[L7129]  COND FALSE  !(choice == 19)
[L7136]  COND FALSE  !(choice == 18)
[L7143]  COND TRUE   choice == 17
[L7144]              gas := gas - 21000;
[L7145]  COND TRUE   gas >= 0
[L7146]              assume _value_s691 >= 0 && _value_s691 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7147]              assume msgvalue_MSG == 0;
[L7148]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_PausableToken(this, msgsender_MSG, msgvalue_MSG, _from_s691, _to_s691, _value_s691);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((((_from_s691 != _to_s691 && ((_value_s691 > _balances_StandardToken[this][_from_s691] || _value_s691 > _allowed_StandardToken[this][_from_s691][msgsender_MSG]) || _balances_StandardToken[this][_to_s691] + _value_s691 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && _value_s691 >= 0) && _value_s691 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_StandardToken[this][_to_s691] >= 0) && _balances_StandardToken[this][_to_s691] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_StandardToken[this][_from_s691] >= 0) && _balances_StandardToken[this][_from_s691] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowed_StandardToken[this][_from_s691][msgsender_MSG] >= 0) && _allowed_StandardToken[this][_from_s691][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transferFrom_PausableToken0 := true;
[L2]                 call_transferFrom_PausableToken0 := false;
[L2]                 revert := revert_hold;
[L1391]              havoc __exception;
[L1392]              revert := false;
[L1393]  COND FALSE  !(__exception)
[L1418]  CALL        call __ret_0_ := transferFrom~address~address~uint256_PausableToken__success(this, msgsender_MSG, msgvalue_MSG, _from_s691, _to_s691, _value_s691);
[L4185]  CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6244]  COND FALSE  !(!!paused_Pausable[this])
[L4185]  RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4186]  COND FALSE  !(revert)
[L4189]  COND FALSE  !(DType[this] == LUCKYToken)
[L4194]  COND TRUE   DType[this] == PausableToken
[L4195]  CALL        call __var_17 := transferFrom~address~address~uint256_StandardToken__success(this, msgsender_MSG, msgvalue_MSG, _from_s691, _to_s691, _value_s691);
[L3340]  COND TRUE   DType[this] == LUCKYToken
[L3341]  CALL        call _transfer~address~address~uint256_StandardToken__success(this, msgsender_MSG, msgvalue_MSG, from_s300, to_s300, value_s300);
[L3561]              __var_4 := null;
[L3562]  COND FALSE  !(!(to_s401 != null))
[L3566]  CALL        call __var_5 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_StandardToken[this][from_s401], value_s401);
[L3013]  COND FALSE  !(!(b_s82 <= a_s82))
[L3017]              c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3018]              __ret_0_ := c_s82;
[L3566]  RET         call __var_5 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_StandardToken[this][from_s401], value_s401);
[L3567]  COND FALSE  !(revert)
[L3570]              sum__balances0[this] := sum__balances0[this] - _balances_StandardToken[this][from_s401];
[L3571]              _balances_StandardToken[this][from_s401] := __var_5;
[L3572]              sum__balances0[this] := sum__balances0[this] + _balances_StandardToken[this][from_s401];
[L3573]  CALL        call __var_6 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_StandardToken[this][to_s401], value_s401);
[L3037]              c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3038]  COND FALSE  !(!(c_s106 >= a_s106))
[L3042]              __ret_0_ := c_s106;
[L3573]  RET         call __var_6 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_StandardToken[this][to_s401], value_s401);
[L3574]  COND FALSE  !(revert)
[L3577]              sum__balances0[this] := sum__balances0[this] - _balances_StandardToken[this][to_s401];
[L3578]              _balances_StandardToken[this][to_s401] := __var_6;
[L3579]              sum__balances0[this] := sum__balances0[this] + _balances_StandardToken[this][to_s401];
[L3580]              assert { :EventEmitted "Transfer_StandardToken" } true;
[L3341]  RET         call _transfer~address~address~uint256_StandardToken__success(this, msgsender_MSG, msgvalue_MSG, from_s300, to_s300, value_s300);
[L3342]  COND FALSE  !(revert)
[L3363]  CALL        call __var_1 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowed_StandardToken[this][from_s300][msgsender_MSG], value_s300);
[L3013]  COND FALSE  !(!(b_s82 <= a_s82))
[L3017]              c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3018]              __ret_0_ := c_s82;
[L3363]  RET         call __var_1 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowed_StandardToken[this][from_s300][msgsender_MSG], value_s300);
[L3364]  COND FALSE  !(revert)
[L3367]  COND TRUE   DType[this] == LUCKYToken
[L3368]  CALL        call _approve~address~address~uint256_StandardToken__success(this, msgsender_MSG, msgvalue_MSG, from_s300, msgsender_MSG, __var_1);
[L3606]              __var_7 := null;
[L3607]  COND FALSE  !(!(spender_s443 != null))
[L3611]              __var_8 := null;
[L3612]  COND FALSE  !(!(owner_s443 != null))
[L3616]              sum__allowed1[owner_s443] := sum__allowed1[owner_s443] - _allowed_StandardToken[this][owner_s443][spender_s443];
[L3617]              _allowed_StandardToken[this][owner_s443][spender_s443] := value_s443;
[L3618]              sum__allowed1[owner_s443] := sum__allowed1[owner_s443] + _allowed_StandardToken[this][owner_s443][spender_s443];
[L3619]              assert { :EventEmitted "Approval_StandardToken" } true;
[L3368]  RET         call _approve~address~address~uint256_StandardToken__success(this, msgsender_MSG, msgvalue_MSG, from_s300, msgsender_MSG, __var_1);
[L3369]  COND FALSE  !(revert)
[L3390]              __ret_0_ := true;
[L4195]  RET         call __var_17 := transferFrom~address~address~uint256_StandardToken__success(this, msgsender_MSG, msgvalue_MSG, _from_s691, _to_s691, _value_s691);
[L4196]  COND FALSE  !(revert)
[L4202]              __ret_0_ := __var_17;
[L1418]  RET         call __ret_0_ := transferFrom~address~address~uint256_PausableToken__success(this, msgsender_MSG, msgvalue_MSG, _from_s691, _to_s691, _value_s691);
[L1419]              assume !revert && gas >= 0;
[L7148]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_PausableToken(this, msgsender_MSG, msgvalue_MSG, _from_s691, _to_s691, _value_s691);
[L7268]  RET         call CorralChoice_LUCKYToken(this);

Loop:
[L7268]  CALL        call CorralChoice_LUCKYToken(this);
[L7078]              havoc msgsender_MSG;
[L7079]              havoc msgvalue_MSG;
[L7080]              havoc choice;
[L7081]              havoc _to_s670;
[L7082]              havoc _value_s670;
[L7083]              havoc __ret_0_transfer;
[L7084]              havoc _spender_s709;
[L7085]              havoc _value_s709;
[L7086]              havoc __ret_0_approve;
[L7087]              havoc _from_s691;
[L7088]              havoc _to_s691;
[L7089]              havoc _value_s691;
[L7090]              havoc __ret_0_transferFrom;
[L7091]              havoc __ret_0_totalSupply;
[L7092]              havoc owner_s211;
[L7093]              havoc __ret_0_balanceOf;
[L7094]              havoc owner_s227;
[L7095]              havoc spender_s227;
[L7096]              havoc __ret_0_allowance;
[L7097]              havoc _spender_s727;
[L7098]              havoc _addedValue_s727;
[L7099]              havoc success_s727;
[L7100]              havoc _spender_s745;
[L7101]              havoc _subtractedValue_s745;
[L7102]              havoc success_s745;
[L7103]              havoc __ret_0_owner;
[L7104]              havoc __ret_0_isOwner;
[L7105]              havoc newOwner_s564;
[L7106]              havoc __ret_0_paused;
[L7107]              havoc amount_s764;
[L7108]              havoc account_s779;
[L7109]              havoc amount_s779;
[L7110]              havoc __ret_0_name;
[L7111]              havoc __ret_0_symbol;
[L7112]              havoc __ret_0_decimals;
[L7113]              havoc tmpNow;
[L7114]              havoc gas;
[L7115]              assume gas > 4000000 && gas <= 8000000;
[L7116]              tmpNow := now;
[L7117]              havoc now;
[L7118]              assume now > tmpNow;
[L7119]              assume msgsender_MSG != null;
[L7120]              assume DType[msgsender_MSG] != SafeMath;
[L7121]              assume DType[msgsender_MSG] != IERC20;
[L7122]              assume DType[msgsender_MSG] != StandardToken;
[L7123]              assume DType[msgsender_MSG] != Ownable;
[L7124]              assume DType[msgsender_MSG] != Pausable;
[L7125]              assume DType[msgsender_MSG] != PausableToken;
[L7126]              assume DType[msgsender_MSG] != BurnableToken;
[L7127]              assume DType[msgsender_MSG] != LUCKYToken;
[L7128]              Alloc[msgsender_MSG] := true;
[L7129]  COND FALSE  !(choice == 19)
[L7136]  COND FALSE  !(choice == 18)
[L7143]  COND TRUE   choice == 17
[L7144]              gas := gas - 21000;
[L7145]  COND TRUE   gas >= 0
[L7146]              assume _value_s691 >= 0 && _value_s691 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7147]              assume msgvalue_MSG == 0;
[L7148]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_PausableToken(this, msgsender_MSG, msgvalue_MSG, _from_s691, _to_s691, _value_s691);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((((_from_s691 != _to_s691 && ((_value_s691 > _balances_StandardToken[this][_from_s691] || _value_s691 > _allowed_StandardToken[this][_from_s691][msgsender_MSG]) || _balances_StandardToken[this][_to_s691] + _value_s691 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && _value_s691 >= 0) && _value_s691 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_StandardToken[this][_to_s691] >= 0) && _balances_StandardToken[this][_to_s691] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_StandardToken[this][_from_s691] >= 0) && _balances_StandardToken[this][_from_s691] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowed_StandardToken[this][_from_s691][msgsender_MSG] >= 0) && _allowed_StandardToken[this][_from_s691][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transferFrom_PausableToken0 := true;
[L2]                 call_transferFrom_PausableToken0 := false;
[L2]                 revert := revert_hold;
[L1391]              havoc __exception;
[L1392]              revert := false;
[L1393]  COND FALSE  !(__exception)
[L1418]  CALL        call __ret_0_ := transferFrom~address~address~uint256_PausableToken__success(this, msgsender_MSG, msgvalue_MSG, _from_s691, _to_s691, _value_s691);
[L4185]  CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6244]  COND FALSE  !(!!paused_Pausable[this])
[L4185]  RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4186]  COND FALSE  !(revert)
[L4189]  COND FALSE  !(DType[this] == LUCKYToken)
[L4194]  COND TRUE   DType[this] == PausableToken
[L4195]  CALL        call __var_17 := transferFrom~address~address~uint256_StandardToken__success(this, msgsender_MSG, msgvalue_MSG, _from_s691, _to_s691, _value_s691);
[L3340]  COND TRUE   DType[this] == LUCKYToken
[L3341]  CALL        call _transfer~address~address~uint256_StandardToken__success(this, msgsender_MSG, msgvalue_MSG, from_s300, to_s300, value_s300);
[L3561]              __var_4 := null;
[L3562]  COND FALSE  !(!(to_s401 != null))
[L3566]  CALL        call __var_5 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_StandardToken[this][from_s401], value_s401);
[L3013]  COND FALSE  !(!(b_s82 <= a_s82))
[L3017]              c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3018]              __ret_0_ := c_s82;
[L3566]  RET         call __var_5 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_StandardToken[this][from_s401], value_s401);
[L3567]  COND FALSE  !(revert)
[L3570]              sum__balances0[this] := sum__balances0[this] - _balances_StandardToken[this][from_s401];
[L3571]              _balances_StandardToken[this][from_s401] := __var_5;
[L3572]              sum__balances0[this] := sum__balances0[this] + _balances_StandardToken[this][from_s401];
[L3573]  CALL        call __var_6 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_StandardToken[this][to_s401], value_s401);
[L3037]              c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3038]  COND FALSE  !(!(c_s106 >= a_s106))
[L3042]              __ret_0_ := c_s106;
[L3573]  RET         call __var_6 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_StandardToken[this][to_s401], value_s401);
[L3574]  COND FALSE  !(revert)
[L3577]              sum__balances0[this] := sum__balances0[this] - _balances_StandardToken[this][to_s401];
[L3578]              _balances_StandardToken[this][to_s401] := __var_6;
[L3579]              sum__balances0[this] := sum__balances0[this] + _balances_StandardToken[this][to_s401];
[L3580]              assert { :EventEmitted "Transfer_StandardToken" } true;
[L3341]  RET         call _transfer~address~address~uint256_StandardToken__success(this, msgsender_MSG, msgvalue_MSG, from_s300, to_s300, value_s300);
[L3342]  COND FALSE  !(revert)
[L3363]  CALL        call __var_1 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowed_StandardToken[this][from_s300][msgsender_MSG], value_s300);
[L3013]  COND FALSE  !(!(b_s82 <= a_s82))
[L3017]              c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3018]              __ret_0_ := c_s82;
[L3363]  RET         call __var_1 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowed_StandardToken[this][from_s300][msgsender_MSG], value_s300);
[L3364]  COND FALSE  !(revert)
[L3367]  COND TRUE   DType[this] == LUCKYToken
[L3368]  CALL        call _approve~address~address~uint256_StandardToken__success(this, msgsender_MSG, msgvalue_MSG, from_s300, msgsender_MSG, __var_1);
[L3606]              __var_7 := null;
[L3607]  COND FALSE  !(!(spender_s443 != null))
[L3611]              __var_8 := null;
[L3612]  COND FALSE  !(!(owner_s443 != null))
[L3616]              sum__allowed1[owner_s443] := sum__allowed1[owner_s443] - _allowed_StandardToken[this][owner_s443][spender_s443];
[L3617]              _allowed_StandardToken[this][owner_s443][spender_s443] := value_s443;
[L3618]              sum__allowed1[owner_s443] := sum__allowed1[owner_s443] + _allowed_StandardToken[this][owner_s443][spender_s443];
[L3619]              assert { :EventEmitted "Approval_StandardToken" } true;
[L3368]  RET         call _approve~address~address~uint256_StandardToken__success(this, msgsender_MSG, msgvalue_MSG, from_s300, msgsender_MSG, __var_1);
[L3369]  COND FALSE  !(revert)
[L3390]              __ret_0_ := true;
[L4195]  RET         call __var_17 := transferFrom~address~address~uint256_StandardToken__success(this, msgsender_MSG, msgvalue_MSG, _from_s691, _to_s691, _value_s691);
[L4196]  COND FALSE  !(revert)
[L4202]              __ret_0_ := __var_17;
[L1418]  RET         call __ret_0_ := transferFrom~address~address~uint256_PausableToken__success(this, msgsender_MSG, msgvalue_MSG, _from_s691, _to_s691, _value_s691);
[L1419]              assume !revert && gas >= 0;
[L7148]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_PausableToken(this, msgsender_MSG, msgvalue_MSG, _from_s691, _to_s691, _value_s691);
[L7268]  RET         call CorralChoice_LUCKYToken(this);

[2020-11-24 20:42:57,132 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-24 20:42:57,132 INFO  L82        PathProgramCache]: Analyzing trace with hash 1745022266, now seen corresponding path program 1 times
[2020-11-24 20:42:57,132 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-24 20:42:57,149 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-24 20:42:57,222 INFO  L134       CoverageAnalysis]: Checked inductivity of 337 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 337 trivial. 0 not checked.
[2020-11-24 20:42:57,223 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-24 20:42:57,223 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [4] imperfect sequences [] total 4
[2020-11-24 20:42:57,223 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-24 20:42:57,223 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-11-24 20:42:57,223 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=6, Invalid=6, Unknown=0, NotChecked=0, Total=12
[2020-11-24 20:42:57,224 INFO  L87              Difference]: Start difference. First operand 4295 states and 4941 transitions. cyclomatic complexity: 649 Second operand 4 states.
[2020-11-24 20:42:57,695 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-24 20:42:57,695 INFO  L93              Difference]: Finished difference Result 5043 states and 5891 transitions.
[2020-11-24 20:42:57,695 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 4 states. 
[2020-11-24 20:42:57,695 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 5043 states and 5891 transitions.
[2020-11-24 20:42:57,706 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 6
[2020-11-24 20:42:57,719 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 5043 states to 4865 states and 5704 transitions.
[2020-11-24 20:42:57,719 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1315
[2020-11-24 20:42:57,720 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1315
[2020-11-24 20:42:57,720 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 4865 states and 5704 transitions.
[2020-11-24 20:42:57,725 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-24 20:42:57,725 INFO  L728         BuchiCegarLoop]: Abstraction has 4865 states and 5704 transitions.
[2020-11-24 20:42:57,728 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 4865 states and 5704 transitions.
[2020-11-24 20:42:57,756 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 4865 to 4117.
[2020-11-24 20:42:57,757 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 4117 states.
[2020-11-24 20:42:57,761 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 4117 states to 4117 states and 4753 transitions.
[2020-11-24 20:42:57,761 INFO  L751         BuchiCegarLoop]: Abstraction has 4117 states and 4753 transitions.
[2020-11-24 20:42:57,761 INFO  L631         BuchiCegarLoop]: Abstraction has 4117 states and 4753 transitions.
[2020-11-24 20:42:57,761 INFO  L445         BuchiCegarLoop]: ======== Iteration 5============
[2020-11-24 20:42:57,761 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 4117 states and 4753 transitions.
[2020-11-24 20:42:57,765 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-24 20:42:57,766 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-24 20:42:57,766 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-24 20:42:57,767 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [6, 6, 6, 6, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-24 20:42:57,767 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transferFrom_PausableToken0 := false;
[L2]                 call_transferFrom_PausableToken0 := false;
[L2]     CALL        call main();
[L7258]              assume null == 0;
[L7259]  CALL        call this := FreshRefGenerator__success();
[L2904]              havoc newRef;
[L2905]              assume Alloc[newRef] == false;
[L2906]              Alloc[newRef] := true;
[L2907]              assume newRef != null;
[L7259]  RET         call this := FreshRefGenerator__success();
[L7260]              assume now >= 0;
[L7261]              assume DType[this] == LUCKYToken;
[L7262]              assume msgvalue_MSG == 0;
[L7263]              gas := gas - 53000;
[L7264]  CALL        call LUCKYToken_LUCKYToken(this, msgsender_MSG, msgvalue_MSG);
[L1849]              havoc __exception;
[L1850]              revert := false;
[L1851]  COND FALSE  !(__exception)
[L1876]  CALL        call LUCKYToken_LUCKYToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4580]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3072]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3057]              assume msgsender_MSG != null;
[L3058]              Balance[this] := 0;
[L3072]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3073]  COND FALSE  !(revert)
[L4580]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4581]  COND FALSE  !(revert)
[L4584]  CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3118]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3072]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3057]              assume msgsender_MSG != null;
[L3058]              Balance[this] := 0;
[L3072]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3073]  COND FALSE  !(revert)
[L3118]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3119]  COND FALSE  !(revert)
[L3122]  CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3094]              assume msgsender_MSG != null;
[L3095]              Balance[this] := 0;
[L3096]              _balances_StandardToken[this] := zeroRefintArr();
[L3097]              sum__balances0[this] := 0;
[L3098]              _allowed_StandardToken[this] := zeroRefRefintArr();
[L3099]              sum__allowed1[this] := 0;
[L3100]              _totalSupply_StandardToken[this] := 0;
[L3122]  RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3123]  COND FALSE  !(revert)
[L4584]  RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4585]  COND FALSE  !(revert)
[L4588]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3809]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3793]              assume msgsender_MSG != null;
[L3794]              Balance[this] := 0;
[L3795]              _owner_Ownable[this] := null;
[L3809]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3810]  COND FALSE  !(revert)
[L4588]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L4589]  COND FALSE  !(revert)
[L4592]  CALL        call BurnableToken_BurnableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4394]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3072]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3057]              assume msgsender_MSG != null;
[L3058]              Balance[this] := 0;
[L3072]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3073]  COND FALSE  !(revert)
[L4394]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4395]  COND FALSE  !(revert)
[L4398]  CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3118]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3072]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3057]              assume msgsender_MSG != null;
[L3058]              Balance[this] := 0;
[L3072]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3073]  COND FALSE  !(revert)
[L3118]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3119]  COND FALSE  !(revert)
[L3122]  CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3094]              assume msgsender_MSG != null;
[L3095]              Balance[this] := 0;
[L3096]              _balances_StandardToken[this] := zeroRefintArr();
[L3097]              sum__balances0[this] := 0;
[L3098]              _allowed_StandardToken[this] := zeroRefRefintArr();
[L3099]              sum__allowed1[this] := 0;
[L3100]              _totalSupply_StandardToken[this] := 0;
[L3122]  RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3123]  COND FALSE  !(revert)
[L4398]  RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4399]  COND FALSE  !(revert)
[L4402]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3809]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3793]              assume msgsender_MSG != null;
[L3794]              Balance[this] := 0;
[L3795]              _owner_Ownable[this] := null;
[L3809]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3810]  COND FALSE  !(revert)
[L4402]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L4403]  COND FALSE  !(revert)
[L4406]  CALL        call BurnableToken_BurnableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4367]              assume msgsender_MSG != null;
[L4368]              Balance[this] := 0;
[L4406]  RET         call BurnableToken_BurnableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4407]  COND FALSE  !(revert)
[L4592]  RET         call BurnableToken_BurnableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4593]  COND FALSE  !(revert)
[L4596]  CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L3966]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3809]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3793]              assume msgsender_MSG != null;
[L3794]              Balance[this] := 0;
[L3795]              _owner_Ownable[this] := null;
[L3809]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3810]  COND FALSE  !(revert)
[L3966]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3967]  COND FALSE  !(revert)
[L3970]  CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3946]              assume msgsender_MSG != null;
[L3947]              Balance[this] := 0;
[L3948]              paused_Pausable[this] := false;
[L3970]  RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3971]  COND FALSE  !(revert)
[L4596]  RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L4597]  COND FALSE  !(revert)
[L4600]  CALL        call PausableToken_PausableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4084]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3072]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3057]              assume msgsender_MSG != null;
[L3058]              Balance[this] := 0;
[L3072]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3073]  COND FALSE  !(revert)
[L4084]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4085]  COND FALSE  !(revert)
[L4088]  CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3118]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3072]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3057]              assume msgsender_MSG != null;
[L3058]              Balance[this] := 0;
[L3072]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3073]  COND FALSE  !(revert)
[L3118]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3119]  COND FALSE  !(revert)
[L3122]  CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3094]              assume msgsender_MSG != null;
[L3095]              Balance[this] := 0;
[L3096]              _balances_StandardToken[this] := zeroRefintArr();
[L3097]              sum__balances0[this] := 0;
[L3098]              _allowed_StandardToken[this] := zeroRefRefintArr();
[L3099]              sum__allowed1[this] := 0;
[L3100]              _totalSupply_StandardToken[this] := 0;
[L3122]  RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3123]  COND FALSE  !(revert)
[L4088]  RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4089]  COND FALSE  !(revert)
[L4092]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3809]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3793]              assume msgsender_MSG != null;
[L3794]              Balance[this] := 0;
[L3795]              _owner_Ownable[this] := null;
[L3809]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3810]  COND FALSE  !(revert)
[L4092]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L4093]  COND FALSE  !(revert)
[L4096]  CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L3966]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3809]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3793]              assume msgsender_MSG != null;
[L3794]              Balance[this] := 0;
[L3795]              _owner_Ownable[this] := null;
[L3809]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3810]  COND FALSE  !(revert)
[L3966]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3967]  COND FALSE  !(revert)
[L3970]  CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3946]              assume msgsender_MSG != null;
[L3947]              Balance[this] := 0;
[L3948]              paused_Pausable[this] := false;
[L3970]  RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3971]  COND FALSE  !(revert)
[L4096]  RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L4097]  COND FALSE  !(revert)
[L4100]  CALL        call PausableToken_PausableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4053]              assume msgsender_MSG != null;
[L4054]              Balance[this] := 0;
[L4100]  RET         call PausableToken_PausableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4101]  COND FALSE  !(revert)
[L4600]  RET         call PausableToken_PausableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4601]  COND FALSE  !(revert)
[L4604]  CALL        call LUCKYToken_LUCKYToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4523]              assume msgsender_MSG != null;
[L4524]              Balance[this] := 0;
[L4525]              name_LUCKYToken[this] := -927166810;
[L4526]              symbol_LUCKYToken[this] := -927166810;
[L4527]              decimals_LUCKYToken[this] := 18;
[L4528]              INIT_TOTALSUPPLY_LUCKYToken[this] := 10000000000;
[L4529]              __var_26 := ConstantToRef(625314775344980695514831456764478199936221022047);
[L4530]              _tokenOwner_LUCKYToken[this] := ConstantToRef(625314775344980695514831456764478199936221022047);
[L4532]              __var_25 := decimals_LUCKYToken[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4533]              _totalSupply_StandardToken[this] := nonlinearMul(INIT_TOTALSUPPLY_LUCKYToken[this], nonlinearPow(10, decimals_LUCKYToken[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4534]              _owner_Ownable[this] := _tokenOwner_LUCKYToken[this];
[L4535]              assert { :EventEmitted "OwnershipTransferred_LUCKYToken" } true;
[L4536]              sum__balances0[this] := sum__balances0[this] - _balances_StandardToken[this][_owner_Ownable[this]];
[L4537]              _balances_StandardToken[this][_owner_Ownable[this]] := _totalSupply_StandardToken[this];
[L4538]              sum__balances0[this] := sum__balances0[this] + _balances_StandardToken[this][_owner_Ownable[this]];
[L4539]              assert { :EventEmitted "Transfer_LUCKYToken" } true;
[L4604]  RET         call LUCKYToken_LUCKYToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4605]  COND FALSE  !(revert)
[L1876]  RET         call LUCKYToken_LUCKYToken__success(this, msgsender_MSG, msgvalue_MSG);
[L1877]              assume !revert && gas >= 0;
[L7264]  RET         call LUCKYToken_LUCKYToken(this, msgsender_MSG, msgvalue_MSG);
[L7265]              assume !revert && gas >= 0;
[L7268]  CALL        call CorralChoice_LUCKYToken(this);
[L7078]              havoc msgsender_MSG;
[L7079]              havoc msgvalue_MSG;
[L7080]              havoc choice;
[L7081]              havoc _to_s670;
[L7082]              havoc _value_s670;
[L7083]              havoc __ret_0_transfer;
[L7084]              havoc _spender_s709;
[L7085]              havoc _value_s709;
[L7086]              havoc __ret_0_approve;
[L7087]              havoc _from_s691;
[L7088]              havoc _to_s691;
[L7089]              havoc _value_s691;
[L7090]              havoc __ret_0_transferFrom;
[L7091]              havoc __ret_0_totalSupply;
[L7092]              havoc owner_s211;
[L7093]              havoc __ret_0_balanceOf;
[L7094]              havoc owner_s227;
[L7095]              havoc spender_s227;
[L7096]              havoc __ret_0_allowance;
[L7097]              havoc _spender_s727;
[L7098]              havoc _addedValue_s727;
[L7099]              havoc success_s727;
[L7100]              havoc _spender_s745;
[L7101]              havoc _subtractedValue_s745;
[L7102]              havoc success_s745;
[L7103]              havoc __ret_0_owner;
[L7104]              havoc __ret_0_isOwner;
[L7105]              havoc newOwner_s564;
[L7106]              havoc __ret_0_paused;
[L7107]              havoc amount_s764;
[L7108]              havoc account_s779;
[L7109]              havoc amount_s779;
[L7110]              havoc __ret_0_name;
[L7111]              havoc __ret_0_symbol;
[L7112]              havoc __ret_0_decimals;
[L7113]              havoc tmpNow;
[L7114]              havoc gas;
[L7115]              assume gas > 4000000 && gas <= 8000000;
[L7116]              tmpNow := now;
[L7117]              havoc now;
[L7118]              assume now > tmpNow;
[L7119]              assume msgsender_MSG != null;
[L7120]              assume DType[msgsender_MSG] != SafeMath;
[L7121]              assume DType[msgsender_MSG] != IERC20;
[L7122]              assume DType[msgsender_MSG] != StandardToken;
[L7123]              assume DType[msgsender_MSG] != Ownable;
[L7124]              assume DType[msgsender_MSG] != Pausable;
[L7125]              assume DType[msgsender_MSG] != PausableToken;
[L7126]              assume DType[msgsender_MSG] != BurnableToken;
[L7127]              assume DType[msgsender_MSG] != LUCKYToken;
[L7128]              Alloc[msgsender_MSG] := true;
[L7129]  COND FALSE  !(choice == 19)
[L7136]  COND TRUE   choice == 18
[L7137]              gas := gas - 21000;
[L7138]  COND TRUE   gas >= 0
[L7139]              assume _value_s709 >= 0 && _value_s709 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7140]              assume msgvalue_MSG == 0;
[L7141]  CALL        call __ret_0_approve := approve~address~uint256_PausableToken(this, msgsender_MSG, msgvalue_MSG, _spender_s709, _value_s709);
[L1451]              havoc __exception;
[L1452]              revert := false;
[L1453]  COND FALSE  !(__exception)
[L1478]  CALL        call __ret_0_ := approve~address~uint256_PausableToken__success(this, msgsender_MSG, msgvalue_MSG, _spender_s709, _value_s709);
[L4235]  CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6244]  COND FALSE  !(!!paused_Pausable[this])
[L4235]  RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4236]  COND FALSE  !(revert)
[L4239]  COND TRUE   DType[this] == LUCKYToken
[L4240]  CALL        call __var_19 := approve~address~uint256_StandardToken__success(this, msgsender_MSG, msgvalue_MSG, _spender_s709, _value_s709);
[L3253]  COND TRUE   DType[this] == LUCKYToken
[L3254]  CALL        call _approve~address~address~uint256_StandardToken__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, spender_s265, value_s265);
[L3606]              __var_7 := null;
[L3607]  COND FALSE  !(!(spender_s443 != null))
[L3611]              __var_8 := null;
[L3612]  COND FALSE  !(!(owner_s443 != null))
[L3616]              sum__allowed1[owner_s443] := sum__allowed1[owner_s443] - _allowed_StandardToken[this][owner_s443][spender_s443];
[L3617]              _allowed_StandardToken[this][owner_s443][spender_s443] := value_s443;
[L3618]              sum__allowed1[owner_s443] := sum__allowed1[owner_s443] + _allowed_StandardToken[this][owner_s443][spender_s443];
[L3619]              assert { :EventEmitted "Approval_StandardToken" } true;
[L3254]  RET         call _approve~address~address~uint256_StandardToken__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, spender_s265, value_s265);
[L3255]  COND FALSE  !(revert)
[L3276]              __ret_0_ := true;
[L4240]  RET         call __var_19 := approve~address~uint256_StandardToken__success(this, msgsender_MSG, msgvalue_MSG, _spender_s709, _value_s709);
[L4241]  COND FALSE  !(revert)
[L4252]              __ret_0_ := __var_19;
[L1478]  RET         call __ret_0_ := approve~address~uint256_PausableToken__success(this, msgsender_MSG, msgvalue_MSG, _spender_s709, _value_s709);
[L1479]              assume !revert && gas >= 0;
[L7141]  RET         call __ret_0_approve := approve~address~uint256_PausableToken(this, msgsender_MSG, msgvalue_MSG, _spender_s709, _value_s709);
[L7268]  RET         call CorralChoice_LUCKYToken(this);
[L7268]  CALL        call CorralChoice_LUCKYToken(this);
[L7078]              havoc msgsender_MSG;
[L7079]              havoc msgvalue_MSG;
[L7080]              havoc choice;
[L7081]              havoc _to_s670;
[L7082]              havoc _value_s670;
[L7083]              havoc __ret_0_transfer;
[L7084]              havoc _spender_s709;
[L7085]              havoc _value_s709;
[L7086]              havoc __ret_0_approve;
[L7087]              havoc _from_s691;
[L7088]              havoc _to_s691;
[L7089]              havoc _value_s691;
[L7090]              havoc __ret_0_transferFrom;
[L7091]              havoc __ret_0_totalSupply;
[L7092]              havoc owner_s211;
[L7093]              havoc __ret_0_balanceOf;
[L7094]              havoc owner_s227;
[L7095]              havoc spender_s227;
[L7096]              havoc __ret_0_allowance;
[L7097]              havoc _spender_s727;
[L7098]              havoc _addedValue_s727;
[L7099]              havoc success_s727;
[L7100]              havoc _spender_s745;
[L7101]              havoc _subtractedValue_s745;
[L7102]              havoc success_s745;
[L7103]              havoc __ret_0_owner;
[L7104]              havoc __ret_0_isOwner;
[L7105]              havoc newOwner_s564;
[L7106]              havoc __ret_0_paused;
[L7107]              havoc amount_s764;
[L7108]              havoc account_s779;
[L7109]              havoc amount_s779;
[L7110]              havoc __ret_0_name;
[L7111]              havoc __ret_0_symbol;
[L7112]              havoc __ret_0_decimals;
[L7113]              havoc tmpNow;
[L7114]              havoc gas;
[L7115]              assume gas > 4000000 && gas <= 8000000;
[L7116]              tmpNow := now;
[L7117]              havoc now;
[L7118]              assume now > tmpNow;
[L7119]              assume msgsender_MSG != null;
[L7120]              assume DType[msgsender_MSG] != SafeMath;
[L7121]              assume DType[msgsender_MSG] != IERC20;
[L7122]              assume DType[msgsender_MSG] != StandardToken;
[L7123]              assume DType[msgsender_MSG] != Ownable;
[L7124]              assume DType[msgsender_MSG] != Pausable;
[L7125]              assume DType[msgsender_MSG] != PausableToken;
[L7126]              assume DType[msgsender_MSG] != BurnableToken;
[L7127]              assume DType[msgsender_MSG] != LUCKYToken;
[L7128]              Alloc[msgsender_MSG] := true;
[L7129]  COND FALSE  !(choice == 19)
[L7136]  COND FALSE  !(choice == 18)
[L7143]  COND TRUE   choice == 17
[L7144]              gas := gas - 21000;
[L7145]  COND TRUE   gas >= 0
[L7146]              assume _value_s691 >= 0 && _value_s691 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7147]              assume msgvalue_MSG == 0;
[L7148]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_PausableToken(this, msgsender_MSG, msgvalue_MSG, _from_s691, _to_s691, _value_s691);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((((_from_s691 != _to_s691 && ((_value_s691 > _balances_StandardToken[this][_from_s691] || _value_s691 > _allowed_StandardToken[this][_from_s691][msgsender_MSG]) || _balances_StandardToken[this][_to_s691] + _value_s691 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && _value_s691 >= 0) && _value_s691 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_StandardToken[this][_to_s691] >= 0) && _balances_StandardToken[this][_to_s691] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_StandardToken[this][_from_s691] >= 0) && _balances_StandardToken[this][_from_s691] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowed_StandardToken[this][_from_s691][msgsender_MSG] >= 0) && _allowed_StandardToken[this][_from_s691][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transferFrom_PausableToken0 := true;
[L2]                 call_transferFrom_PausableToken0 := false;
[L2]                 revert := revert_hold;
[L1391]              havoc __exception;
[L1392]              revert := false;
[L1393]  COND FALSE  !(__exception)
[L1418]  CALL        call __ret_0_ := transferFrom~address~address~uint256_PausableToken__success(this, msgsender_MSG, msgvalue_MSG, _from_s691, _to_s691, _value_s691);
[L4185]  CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6244]  COND FALSE  !(!!paused_Pausable[this])
[L4185]  RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4186]  COND FALSE  !(revert)
[L4189]  COND TRUE   DType[this] == LUCKYToken
[L4190]  CALL        call __var_17 := transferFrom~address~address~uint256_StandardToken__success(this, msgsender_MSG, msgvalue_MSG, _from_s691, _to_s691, _value_s691);
[L3340]  COND TRUE   DType[this] == LUCKYToken
[L3341]  CALL        call _transfer~address~address~uint256_StandardToken__success(this, msgsender_MSG, msgvalue_MSG, from_s300, to_s300, value_s300);
[L3561]              __var_4 := null;
[L3562]  COND FALSE  !(!(to_s401 != null))
[L3566]  CALL        call __var_5 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_StandardToken[this][from_s401], value_s401);
[L3013]  COND FALSE  !(!(b_s82 <= a_s82))
[L3017]              c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3018]              __ret_0_ := c_s82;
[L3566]  RET         call __var_5 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_StandardToken[this][from_s401], value_s401);
[L3567]  COND FALSE  !(revert)
[L3570]              sum__balances0[this] := sum__balances0[this] - _balances_StandardToken[this][from_s401];
[L3571]              _balances_StandardToken[this][from_s401] := __var_5;
[L3572]              sum__balances0[this] := sum__balances0[this] + _balances_StandardToken[this][from_s401];
[L3573]  CALL        call __var_6 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_StandardToken[this][to_s401], value_s401);
[L3037]              c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3038]  COND FALSE  !(!(c_s106 >= a_s106))
[L3042]              __ret_0_ := c_s106;
[L3573]  RET         call __var_6 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_StandardToken[this][to_s401], value_s401);
[L3574]  COND FALSE  !(revert)
[L3577]              sum__balances0[this] := sum__balances0[this] - _balances_StandardToken[this][to_s401];
[L3578]              _balances_StandardToken[this][to_s401] := __var_6;
[L3579]              sum__balances0[this] := sum__balances0[this] + _balances_StandardToken[this][to_s401];
[L3580]              assert { :EventEmitted "Transfer_StandardToken" } true;
[L3341]  RET         call _transfer~address~address~uint256_StandardToken__success(this, msgsender_MSG, msgvalue_MSG, from_s300, to_s300, value_s300);
[L3342]  COND FALSE  !(revert)
[L3363]  CALL        call __var_1 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowed_StandardToken[this][from_s300][msgsender_MSG], value_s300);
[L3013]  COND FALSE  !(!(b_s82 <= a_s82))
[L3017]              c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3018]              __ret_0_ := c_s82;
[L3363]  RET         call __var_1 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowed_StandardToken[this][from_s300][msgsender_MSG], value_s300);
[L3364]  COND FALSE  !(revert)
[L3367]  COND TRUE   DType[this] == LUCKYToken
[L3368]  CALL        call _approve~address~address~uint256_StandardToken__success(this, msgsender_MSG, msgvalue_MSG, from_s300, msgsender_MSG, __var_1);
[L3606]              __var_7 := null;
[L3607]  COND FALSE  !(!(spender_s443 != null))
[L3611]              __var_8 := null;
[L3612]  COND FALSE  !(!(owner_s443 != null))
[L3616]              sum__allowed1[owner_s443] := sum__allowed1[owner_s443] - _allowed_StandardToken[this][owner_s443][spender_s443];
[L3617]              _allowed_StandardToken[this][owner_s443][spender_s443] := value_s443;
[L3618]              sum__allowed1[owner_s443] := sum__allowed1[owner_s443] + _allowed_StandardToken[this][owner_s443][spender_s443];
[L3619]              assert { :EventEmitted "Approval_StandardToken" } true;
[L3368]  RET         call _approve~address~address~uint256_StandardToken__success(this, msgsender_MSG, msgvalue_MSG, from_s300, msgsender_MSG, __var_1);
[L3369]  COND FALSE  !(revert)
[L3390]              __ret_0_ := true;
[L4190]  RET         call __var_17 := transferFrom~address~address~uint256_StandardToken__success(this, msgsender_MSG, msgvalue_MSG, _from_s691, _to_s691, _value_s691);
[L4191]  COND FALSE  !(revert)
[L4202]              __ret_0_ := __var_17;
[L1418]  RET         call __ret_0_ := transferFrom~address~address~uint256_PausableToken__success(this, msgsender_MSG, msgvalue_MSG, _from_s691, _to_s691, _value_s691);
[L1419]              assume !revert && gas >= 0;
[L7148]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_PausableToken(this, msgsender_MSG, msgvalue_MSG, _from_s691, _to_s691, _value_s691);
[L7268]  RET         call CorralChoice_LUCKYToken(this);

Loop:
[L7268]  CALL        call CorralChoice_LUCKYToken(this);
[L7078]              havoc msgsender_MSG;
[L7079]              havoc msgvalue_MSG;
[L7080]              havoc choice;
[L7081]              havoc _to_s670;
[L7082]              havoc _value_s670;
[L7083]              havoc __ret_0_transfer;
[L7084]              havoc _spender_s709;
[L7085]              havoc _value_s709;
[L7086]              havoc __ret_0_approve;
[L7087]              havoc _from_s691;
[L7088]              havoc _to_s691;
[L7089]              havoc _value_s691;
[L7090]              havoc __ret_0_transferFrom;
[L7091]              havoc __ret_0_totalSupply;
[L7092]              havoc owner_s211;
[L7093]              havoc __ret_0_balanceOf;
[L7094]              havoc owner_s227;
[L7095]              havoc spender_s227;
[L7096]              havoc __ret_0_allowance;
[L7097]              havoc _spender_s727;
[L7098]              havoc _addedValue_s727;
[L7099]              havoc success_s727;
[L7100]              havoc _spender_s745;
[L7101]              havoc _subtractedValue_s745;
[L7102]              havoc success_s745;
[L7103]              havoc __ret_0_owner;
[L7104]              havoc __ret_0_isOwner;
[L7105]              havoc newOwner_s564;
[L7106]              havoc __ret_0_paused;
[L7107]              havoc amount_s764;
[L7108]              havoc account_s779;
[L7109]              havoc amount_s779;
[L7110]              havoc __ret_0_name;
[L7111]              havoc __ret_0_symbol;
[L7112]              havoc __ret_0_decimals;
[L7113]              havoc tmpNow;
[L7114]              havoc gas;
[L7115]              assume gas > 4000000 && gas <= 8000000;
[L7116]              tmpNow := now;
[L7117]              havoc now;
[L7118]              assume now > tmpNow;
[L7119]              assume msgsender_MSG != null;
[L7120]              assume DType[msgsender_MSG] != SafeMath;
[L7121]              assume DType[msgsender_MSG] != IERC20;
[L7122]              assume DType[msgsender_MSG] != StandardToken;
[L7123]              assume DType[msgsender_MSG] != Ownable;
[L7124]              assume DType[msgsender_MSG] != Pausable;
[L7125]              assume DType[msgsender_MSG] != PausableToken;
[L7126]              assume DType[msgsender_MSG] != BurnableToken;
[L7127]              assume DType[msgsender_MSG] != LUCKYToken;
[L7128]              Alloc[msgsender_MSG] := true;
[L7129]  COND TRUE   choice == 19
[L7130]              gas := gas - 21000;
[L7131]  COND FALSE  !(gas >= 0)
[L7268]  RET         call CorralChoice_LUCKYToken(this);

[2020-11-24 20:42:57,772 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-24 20:42:57,772 INFO  L82        PathProgramCache]: Analyzing trace with hash -716526967, now seen corresponding path program 1 times
[2020-11-24 20:42:57,773 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-24 20:42:57,803 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-24 20:42:58,257 INFO  L134       CoverageAnalysis]: Checked inductivity of 392 backedges. 20 proven. 0 refuted. 0 times theorem prover too weak. 372 trivial. 0 not checked.
[2020-11-24 20:42:58,257 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-24 20:42:58,257 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [22] imperfect sequences [] total 22
[2020-11-24 20:42:58,257 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-24 20:42:58,258 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 23 interpolants.
[2020-11-24 20:42:58,258 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=50, Invalid=456, Unknown=0, NotChecked=0, Total=506
[2020-11-24 20:42:58,258 INFO  L87              Difference]: Start difference. First operand 4117 states and 4753 transitions. cyclomatic complexity: 639 Second operand 23 states.
[2020-11-24 20:43:03,714 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-24 20:43:03,714 INFO  L93              Difference]: Finished difference Result 4184 states and 4831 transitions.
[2020-11-24 20:43:03,715 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 25 states. 
[2020-11-24 20:43:03,715 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 4184 states and 4831 transitions.
[2020-11-24 20:43:03,722 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-24 20:43:03,732 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 4184 states to 4184 states and 4831 transitions.
[2020-11-24 20:43:03,732 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1145
[2020-11-24 20:43:03,733 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1145
[2020-11-24 20:43:03,733 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 4184 states and 4831 transitions.
[2020-11-24 20:43:03,736 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-24 20:43:03,736 INFO  L728         BuchiCegarLoop]: Abstraction has 4184 states and 4831 transitions.
[2020-11-24 20:43:03,740 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 4184 states and 4831 transitions.
[2020-11-24 20:43:03,763 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 4184 to 4131.
[2020-11-24 20:43:03,763 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 4131 states.
[2020-11-24 20:43:03,767 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 4131 states to 4131 states and 4777 transitions.
[2020-11-24 20:43:03,767 INFO  L751         BuchiCegarLoop]: Abstraction has 4131 states and 4777 transitions.
[2020-11-24 20:43:03,767 INFO  L631         BuchiCegarLoop]: Abstraction has 4131 states and 4777 transitions.
[2020-11-24 20:43:03,767 INFO  L445         BuchiCegarLoop]: ======== Iteration 6============
[2020-11-24 20:43:03,767 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 4131 states and 4777 transitions.
[2020-11-24 20:43:03,771 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-24 20:43:03,771 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-24 20:43:03,771 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-24 20:43:03,773 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [6, 6, 6, 6, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-24 20:43:03,773 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transferFrom_PausableToken0 := false;
[L2]                 call_transferFrom_PausableToken0 := false;
[L2]     CALL        call main();
[L7258]              assume null == 0;
[L7259]  CALL        call this := FreshRefGenerator__success();
[L2904]              havoc newRef;
[L2905]              assume Alloc[newRef] == false;
[L2906]              Alloc[newRef] := true;
[L2907]              assume newRef != null;
[L7259]  RET         call this := FreshRefGenerator__success();
[L7260]              assume now >= 0;
[L7261]              assume DType[this] == LUCKYToken;
[L7262]              assume msgvalue_MSG == 0;
[L7263]              gas := gas - 53000;
[L7264]  CALL        call LUCKYToken_LUCKYToken(this, msgsender_MSG, msgvalue_MSG);
[L1849]              havoc __exception;
[L1850]              revert := false;
[L1851]  COND FALSE  !(__exception)
[L1876]  CALL        call LUCKYToken_LUCKYToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4580]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3072]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3057]              assume msgsender_MSG != null;
[L3058]              Balance[this] := 0;
[L3072]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3073]  COND FALSE  !(revert)
[L4580]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4581]  COND FALSE  !(revert)
[L4584]  CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3118]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3072]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3057]              assume msgsender_MSG != null;
[L3058]              Balance[this] := 0;
[L3072]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3073]  COND FALSE  !(revert)
[L3118]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3119]  COND FALSE  !(revert)
[L3122]  CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3094]              assume msgsender_MSG != null;
[L3095]              Balance[this] := 0;
[L3096]              _balances_StandardToken[this] := zeroRefintArr();
[L3097]              sum__balances0[this] := 0;
[L3098]              _allowed_StandardToken[this] := zeroRefRefintArr();
[L3099]              sum__allowed1[this] := 0;
[L3100]              _totalSupply_StandardToken[this] := 0;
[L3122]  RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3123]  COND FALSE  !(revert)
[L4584]  RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4585]  COND FALSE  !(revert)
[L4588]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3809]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3793]              assume msgsender_MSG != null;
[L3794]              Balance[this] := 0;
[L3795]              _owner_Ownable[this] := null;
[L3809]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3810]  COND FALSE  !(revert)
[L4588]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L4589]  COND FALSE  !(revert)
[L4592]  CALL        call BurnableToken_BurnableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4394]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3072]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3057]              assume msgsender_MSG != null;
[L3058]              Balance[this] := 0;
[L3072]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3073]  COND FALSE  !(revert)
[L4394]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4395]  COND FALSE  !(revert)
[L4398]  CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3118]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3072]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3057]              assume msgsender_MSG != null;
[L3058]              Balance[this] := 0;
[L3072]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3073]  COND FALSE  !(revert)
[L3118]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3119]  COND FALSE  !(revert)
[L3122]  CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3094]              assume msgsender_MSG != null;
[L3095]              Balance[this] := 0;
[L3096]              _balances_StandardToken[this] := zeroRefintArr();
[L3097]              sum__balances0[this] := 0;
[L3098]              _allowed_StandardToken[this] := zeroRefRefintArr();
[L3099]              sum__allowed1[this] := 0;
[L3100]              _totalSupply_StandardToken[this] := 0;
[L3122]  RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3123]  COND FALSE  !(revert)
[L4398]  RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4399]  COND FALSE  !(revert)
[L4402]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3809]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3793]              assume msgsender_MSG != null;
[L3794]              Balance[this] := 0;
[L3795]              _owner_Ownable[this] := null;
[L3809]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3810]  COND FALSE  !(revert)
[L4402]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L4403]  COND FALSE  !(revert)
[L4406]  CALL        call BurnableToken_BurnableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4367]              assume msgsender_MSG != null;
[L4368]              Balance[this] := 0;
[L4406]  RET         call BurnableToken_BurnableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4407]  COND FALSE  !(revert)
[L4592]  RET         call BurnableToken_BurnableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4593]  COND FALSE  !(revert)
[L4596]  CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L3966]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3809]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3793]              assume msgsender_MSG != null;
[L3794]              Balance[this] := 0;
[L3795]              _owner_Ownable[this] := null;
[L3809]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3810]  COND FALSE  !(revert)
[L3966]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3967]  COND FALSE  !(revert)
[L3970]  CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3946]              assume msgsender_MSG != null;
[L3947]              Balance[this] := 0;
[L3948]              paused_Pausable[this] := false;
[L3970]  RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3971]  COND FALSE  !(revert)
[L4596]  RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L4597]  COND FALSE  !(revert)
[L4600]  CALL        call PausableToken_PausableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4084]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3072]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3057]              assume msgsender_MSG != null;
[L3058]              Balance[this] := 0;
[L3072]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3073]  COND FALSE  !(revert)
[L4084]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4085]  COND FALSE  !(revert)
[L4088]  CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3118]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3072]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3057]              assume msgsender_MSG != null;
[L3058]              Balance[this] := 0;
[L3072]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3073]  COND FALSE  !(revert)
[L3118]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3119]  COND FALSE  !(revert)
[L3122]  CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3094]              assume msgsender_MSG != null;
[L3095]              Balance[this] := 0;
[L3096]              _balances_StandardToken[this] := zeroRefintArr();
[L3097]              sum__balances0[this] := 0;
[L3098]              _allowed_StandardToken[this] := zeroRefRefintArr();
[L3099]              sum__allowed1[this] := 0;
[L3100]              _totalSupply_StandardToken[this] := 0;
[L3122]  RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3123]  COND FALSE  !(revert)
[L4088]  RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4089]  COND FALSE  !(revert)
[L4092]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3809]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3793]              assume msgsender_MSG != null;
[L3794]              Balance[this] := 0;
[L3795]              _owner_Ownable[this] := null;
[L3809]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3810]  COND FALSE  !(revert)
[L4092]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L4093]  COND FALSE  !(revert)
[L4096]  CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L3966]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3809]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3793]              assume msgsender_MSG != null;
[L3794]              Balance[this] := 0;
[L3795]              _owner_Ownable[this] := null;
[L3809]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3810]  COND FALSE  !(revert)
[L3966]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3967]  COND FALSE  !(revert)
[L3970]  CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3946]              assume msgsender_MSG != null;
[L3947]              Balance[this] := 0;
[L3948]              paused_Pausable[this] := false;
[L3970]  RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3971]  COND FALSE  !(revert)
[L4096]  RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L4097]  COND FALSE  !(revert)
[L4100]  CALL        call PausableToken_PausableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4053]              assume msgsender_MSG != null;
[L4054]              Balance[this] := 0;
[L4100]  RET         call PausableToken_PausableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4101]  COND FALSE  !(revert)
[L4600]  RET         call PausableToken_PausableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4601]  COND FALSE  !(revert)
[L4604]  CALL        call LUCKYToken_LUCKYToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4523]              assume msgsender_MSG != null;
[L4524]              Balance[this] := 0;
[L4525]              name_LUCKYToken[this] := -927166810;
[L4526]              symbol_LUCKYToken[this] := -927166810;
[L4527]              decimals_LUCKYToken[this] := 18;
[L4528]              INIT_TOTALSUPPLY_LUCKYToken[this] := 10000000000;
[L4529]              __var_26 := ConstantToRef(625314775344980695514831456764478199936221022047);
[L4530]              _tokenOwner_LUCKYToken[this] := ConstantToRef(625314775344980695514831456764478199936221022047);
[L4532]              __var_25 := decimals_LUCKYToken[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4533]              _totalSupply_StandardToken[this] := nonlinearMul(INIT_TOTALSUPPLY_LUCKYToken[this], nonlinearPow(10, decimals_LUCKYToken[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4534]              _owner_Ownable[this] := _tokenOwner_LUCKYToken[this];
[L4535]              assert { :EventEmitted "OwnershipTransferred_LUCKYToken" } true;
[L4536]              sum__balances0[this] := sum__balances0[this] - _balances_StandardToken[this][_owner_Ownable[this]];
[L4537]              _balances_StandardToken[this][_owner_Ownable[this]] := _totalSupply_StandardToken[this];
[L4538]              sum__balances0[this] := sum__balances0[this] + _balances_StandardToken[this][_owner_Ownable[this]];
[L4539]              assert { :EventEmitted "Transfer_LUCKYToken" } true;
[L4604]  RET         call LUCKYToken_LUCKYToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4605]  COND FALSE  !(revert)
[L1876]  RET         call LUCKYToken_LUCKYToken__success(this, msgsender_MSG, msgvalue_MSG);
[L1877]              assume !revert && gas >= 0;
[L7264]  RET         call LUCKYToken_LUCKYToken(this, msgsender_MSG, msgvalue_MSG);
[L7265]              assume !revert && gas >= 0;
[L7268]  CALL        call CorralChoice_LUCKYToken(this);
[L7078]              havoc msgsender_MSG;
[L7079]              havoc msgvalue_MSG;
[L7080]              havoc choice;
[L7081]              havoc _to_s670;
[L7082]              havoc _value_s670;
[L7083]              havoc __ret_0_transfer;
[L7084]              havoc _spender_s709;
[L7085]              havoc _value_s709;
[L7086]              havoc __ret_0_approve;
[L7087]              havoc _from_s691;
[L7088]              havoc _to_s691;
[L7089]              havoc _value_s691;
[L7090]              havoc __ret_0_transferFrom;
[L7091]              havoc __ret_0_totalSupply;
[L7092]              havoc owner_s211;
[L7093]              havoc __ret_0_balanceOf;
[L7094]              havoc owner_s227;
[L7095]              havoc spender_s227;
[L7096]              havoc __ret_0_allowance;
[L7097]              havoc _spender_s727;
[L7098]              havoc _addedValue_s727;
[L7099]              havoc success_s727;
[L7100]              havoc _spender_s745;
[L7101]              havoc _subtractedValue_s745;
[L7102]              havoc success_s745;
[L7103]              havoc __ret_0_owner;
[L7104]              havoc __ret_0_isOwner;
[L7105]              havoc newOwner_s564;
[L7106]              havoc __ret_0_paused;
[L7107]              havoc amount_s764;
[L7108]              havoc account_s779;
[L7109]              havoc amount_s779;
[L7110]              havoc __ret_0_name;
[L7111]              havoc __ret_0_symbol;
[L7112]              havoc __ret_0_decimals;
[L7113]              havoc tmpNow;
[L7114]              havoc gas;
[L7115]              assume gas > 4000000 && gas <= 8000000;
[L7116]              tmpNow := now;
[L7117]              havoc now;
[L7118]              assume now > tmpNow;
[L7119]              assume msgsender_MSG != null;
[L7120]              assume DType[msgsender_MSG] != SafeMath;
[L7121]              assume DType[msgsender_MSG] != IERC20;
[L7122]              assume DType[msgsender_MSG] != StandardToken;
[L7123]              assume DType[msgsender_MSG] != Ownable;
[L7124]              assume DType[msgsender_MSG] != Pausable;
[L7125]              assume DType[msgsender_MSG] != PausableToken;
[L7126]              assume DType[msgsender_MSG] != BurnableToken;
[L7127]              assume DType[msgsender_MSG] != LUCKYToken;
[L7128]              Alloc[msgsender_MSG] := true;
[L7129]  COND FALSE  !(choice == 19)
[L7136]  COND FALSE  !(choice == 18)
[L7143]  COND FALSE  !(choice == 17)
[L7150]  COND FALSE  !(choice == 16)
[L7156]  COND FALSE  !(choice == 15)
[L7162]  COND FALSE  !(choice == 14)
[L7168]  COND FALSE  !(choice == 13)
[L7175]  COND FALSE  !(choice == 12)
[L7182]  COND FALSE  !(choice == 11)
[L7188]  COND FALSE  !(choice == 10)
[L7194]  COND FALSE  !(choice == 9)
[L7200]  COND FALSE  !(choice == 8)
[L7206]  COND FALSE  !(choice == 7)
[L7212]  COND FALSE  !(choice == 6)
[L7218]  COND FALSE  !(choice == 5)
[L7225]  COND TRUE   choice == 4
[L7226]              gas := gas - 21000;
[L7227]  COND TRUE   gas >= 0
[L7228]              assume amount_s779 >= 0 && amount_s779 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7229]              assume msgvalue_MSG == 0;
[L7230]  CALL        call burnFrom~address~uint256_BurnableToken(this, msgsender_MSG, msgvalue_MSG, account_s779, amount_s779);
[L1762]              havoc __exception;
[L1763]              revert := false;
[L1764]  COND FALSE  !(__exception)
[L1789]  CALL        call burnFrom~address~uint256_BurnableToken__success(this, msgsender_MSG, msgvalue_MSG, account_s779, amount_s779);
[L4477]  CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6200]  COND FALSE  !(DType[this] == LUCKYToken)
[L6205]  COND FALSE  !(DType[this] == BurnableToken)
[L6210]  COND FALSE  !(DType[this] == PausableToken)
[L6215]  COND TRUE   DType[this] == Pausable
[L6216]  CALL        call __var_13 := isOwner_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3835]              __ret_0_ := msgsender_MSG == _owner_Ownable[this];
[L6216]  RET         call __var_13 := isOwner_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6217]  COND FALSE  !(revert)
[L6228]  COND FALSE  !(!__var_13)
[L4477]  RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4478]  COND FALSE  !(revert)
[L4481]  COND FALSE  !(DType[this] == LUCKYToken)
[L4486]  COND TRUE   DType[this] == BurnableToken
[L4487]  CALL        call _burnFrom~address~uint256_StandardToken__success(this, msgsender_MSG, msgvalue_MSG, account_s779, amount_s779);
[L3729]  COND FALSE  !(DType[this] == LUCKYToken)
[L3734]  COND TRUE   DType[this] == BurnableToken
[L3735]  CALL        call _burn~address~uint256_StandardToken__success(this, msgsender_MSG, msgvalue_MSG, account_s514, amount_s514);
[L3651]              __var_9 := null;
[L3652]  COND FALSE  !(!(account_s486 != null))
[L3656]  CALL        call __var_10 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_StandardToken[this][account_s486], value_s486);
[L3013]  COND FALSE  !(!(b_s82 <= a_s82))
[L3017]              c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3018]              __ret_0_ := c_s82;
[L3656]  RET         call __var_10 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_StandardToken[this][account_s486], value_s486);
[L3657]  COND FALSE  !(revert)
[L3660]              sum__balances0[this] := sum__balances0[this] - _balances_StandardToken[this][account_s486];
[L3661]              _balances_StandardToken[this][account_s486] := __var_10;
[L3662]              sum__balances0[this] := sum__balances0[this] + _balances_StandardToken[this][account_s486];
[L3663]  CALL        call __var_11 := sub~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_StandardToken[this], value_s486);
[L3013]  COND FALSE  !(!(b_s82 <= a_s82))
[L3017]              c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3018]              __ret_0_ := c_s82;
[L3663]  RET         call __var_11 := sub~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_StandardToken[this], value_s486);
[L3664]  COND FALSE  !(revert)
[L3667]              _totalSupply_StandardToken[this] := __var_11;
[L3668]              assert { :EventEmitted "Transfer_StandardToken" } true;
[L3735]  RET         call _burn~address~uint256_StandardToken__success(this, msgsender_MSG, msgvalue_MSG, account_s514, amount_s514);
[L3736]  COND FALSE  !(revert)
[L3752]  CALL        call __var_12 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowed_StandardToken[this][account_s514][msgsender_MSG], amount_s514);
[L3013]  COND FALSE  !(!(b_s82 <= a_s82))
[L3017]              c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3018]              __ret_0_ := c_s82;
[L3752]  RET         call __var_12 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowed_StandardToken[this][account_s514][msgsender_MSG], amount_s514);
[L3753]  COND FALSE  !(revert)
[L3756]  COND FALSE  !(DType[this] == LUCKYToken)
[L3761]  COND FALSE  !(DType[this] == BurnableToken)
[L3766]  COND TRUE   DType[this] == PausableToken
[L3767]  CALL        call _approve~address~address~uint256_StandardToken__success(this, msgsender_MSG, msgvalue_MSG, account_s514, msgsender_MSG, __var_12);
[L3606]              __var_7 := null;
[L3607]  COND FALSE  !(!(spender_s443 != null))
[L3611]              __var_8 := null;
[L3612]  COND FALSE  !(!(owner_s443 != null))
[L3616]              sum__allowed1[owner_s443] := sum__allowed1[owner_s443] - _allowed_StandardToken[this][owner_s443][spender_s443];
[L3617]              _allowed_StandardToken[this][owner_s443][spender_s443] := value_s443;
[L3618]              sum__allowed1[owner_s443] := sum__allowed1[owner_s443] + _allowed_StandardToken[this][owner_s443][spender_s443];
[L3619]              assert { :EventEmitted "Approval_StandardToken" } true;
[L3767]  RET         call _approve~address~address~uint256_StandardToken__success(this, msgsender_MSG, msgvalue_MSG, account_s514, msgsender_MSG, __var_12);
[L3768]  COND FALSE  !(revert)
[L4487]  RET         call _burnFrom~address~uint256_StandardToken__success(this, msgsender_MSG, msgvalue_MSG, account_s779, amount_s779);
[L4488]  COND FALSE  !(revert)
[L1789]  RET         call burnFrom~address~uint256_BurnableToken__success(this, msgsender_MSG, msgvalue_MSG, account_s779, amount_s779);
[L1790]              assume !revert && gas >= 0;
[L7230]  RET         call burnFrom~address~uint256_BurnableToken(this, msgsender_MSG, msgvalue_MSG, account_s779, amount_s779);
[L7268]  RET         call CorralChoice_LUCKYToken(this);
[L7268]  CALL        call CorralChoice_LUCKYToken(this);
[L7078]              havoc msgsender_MSG;
[L7079]              havoc msgvalue_MSG;
[L7080]              havoc choice;
[L7081]              havoc _to_s670;
[L7082]              havoc _value_s670;
[L7083]              havoc __ret_0_transfer;
[L7084]              havoc _spender_s709;
[L7085]              havoc _value_s709;
[L7086]              havoc __ret_0_approve;
[L7087]              havoc _from_s691;
[L7088]              havoc _to_s691;
[L7089]              havoc _value_s691;
[L7090]              havoc __ret_0_transferFrom;
[L7091]              havoc __ret_0_totalSupply;
[L7092]              havoc owner_s211;
[L7093]              havoc __ret_0_balanceOf;
[L7094]              havoc owner_s227;
[L7095]              havoc spender_s227;
[L7096]              havoc __ret_0_allowance;
[L7097]              havoc _spender_s727;
[L7098]              havoc _addedValue_s727;
[L7099]              havoc success_s727;
[L7100]              havoc _spender_s745;
[L7101]              havoc _subtractedValue_s745;
[L7102]              havoc success_s745;
[L7103]              havoc __ret_0_owner;
[L7104]              havoc __ret_0_isOwner;
[L7105]              havoc newOwner_s564;
[L7106]              havoc __ret_0_paused;
[L7107]              havoc amount_s764;
[L7108]              havoc account_s779;
[L7109]              havoc amount_s779;
[L7110]              havoc __ret_0_name;
[L7111]              havoc __ret_0_symbol;
[L7112]              havoc __ret_0_decimals;
[L7113]              havoc tmpNow;
[L7114]              havoc gas;
[L7115]              assume gas > 4000000 && gas <= 8000000;
[L7116]              tmpNow := now;
[L7117]              havoc now;
[L7118]              assume now > tmpNow;
[L7119]              assume msgsender_MSG != null;
[L7120]              assume DType[msgsender_MSG] != SafeMath;
[L7121]              assume DType[msgsender_MSG] != IERC20;
[L7122]              assume DType[msgsender_MSG] != StandardToken;
[L7123]              assume DType[msgsender_MSG] != Ownable;
[L7124]              assume DType[msgsender_MSG] != Pausable;
[L7125]              assume DType[msgsender_MSG] != PausableToken;
[L7126]              assume DType[msgsender_MSG] != BurnableToken;
[L7127]              assume DType[msgsender_MSG] != LUCKYToken;
[L7128]              Alloc[msgsender_MSG] := true;
[L7129]  COND FALSE  !(choice == 19)
[L7136]  COND FALSE  !(choice == 18)
[L7143]  COND TRUE   choice == 17
[L7144]              gas := gas - 21000;
[L7145]  COND TRUE   gas >= 0
[L7146]              assume _value_s691 >= 0 && _value_s691 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7147]              assume msgvalue_MSG == 0;
[L7148]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_PausableToken(this, msgsender_MSG, msgvalue_MSG, _from_s691, _to_s691, _value_s691);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((((_from_s691 != _to_s691 && ((_value_s691 > _balances_StandardToken[this][_from_s691] || _value_s691 > _allowed_StandardToken[this][_from_s691][msgsender_MSG]) || _balances_StandardToken[this][_to_s691] + _value_s691 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && _value_s691 >= 0) && _value_s691 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_StandardToken[this][_to_s691] >= 0) && _balances_StandardToken[this][_to_s691] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_StandardToken[this][_from_s691] >= 0) && _balances_StandardToken[this][_from_s691] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowed_StandardToken[this][_from_s691][msgsender_MSG] >= 0) && _allowed_StandardToken[this][_from_s691][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transferFrom_PausableToken0 := true;
[L2]                 call_transferFrom_PausableToken0 := false;
[L2]                 revert := revert_hold;
[L1391]              havoc __exception;
[L1392]              revert := false;
[L1393]  COND FALSE  !(__exception)
[L1418]  CALL        call __ret_0_ := transferFrom~address~address~uint256_PausableToken__success(this, msgsender_MSG, msgvalue_MSG, _from_s691, _to_s691, _value_s691);
[L4185]  CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6244]  COND FALSE  !(!!paused_Pausable[this])
[L4185]  RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4186]  COND FALSE  !(revert)
[L4189]  COND TRUE   DType[this] == LUCKYToken
[L4190]  CALL        call __var_17 := transferFrom~address~address~uint256_StandardToken__success(this, msgsender_MSG, msgvalue_MSG, _from_s691, _to_s691, _value_s691);
[L3340]  COND TRUE   DType[this] == LUCKYToken
[L3341]  CALL        call _transfer~address~address~uint256_StandardToken__success(this, msgsender_MSG, msgvalue_MSG, from_s300, to_s300, value_s300);
[L3561]              __var_4 := null;
[L3562]  COND FALSE  !(!(to_s401 != null))
[L3566]  CALL        call __var_5 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_StandardToken[this][from_s401], value_s401);
[L3013]  COND FALSE  !(!(b_s82 <= a_s82))
[L3017]              c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3018]              __ret_0_ := c_s82;
[L3566]  RET         call __var_5 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_StandardToken[this][from_s401], value_s401);
[L3567]  COND FALSE  !(revert)
[L3570]              sum__balances0[this] := sum__balances0[this] - _balances_StandardToken[this][from_s401];
[L3571]              _balances_StandardToken[this][from_s401] := __var_5;
[L3572]              sum__balances0[this] := sum__balances0[this] + _balances_StandardToken[this][from_s401];
[L3573]  CALL        call __var_6 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_StandardToken[this][to_s401], value_s401);
[L3037]              c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3038]  COND FALSE  !(!(c_s106 >= a_s106))
[L3042]              __ret_0_ := c_s106;
[L3573]  RET         call __var_6 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_StandardToken[this][to_s401], value_s401);
[L3574]  COND FALSE  !(revert)
[L3577]              sum__balances0[this] := sum__balances0[this] - _balances_StandardToken[this][to_s401];
[L3578]              _balances_StandardToken[this][to_s401] := __var_6;
[L3579]              sum__balances0[this] := sum__balances0[this] + _balances_StandardToken[this][to_s401];
[L3580]              assert { :EventEmitted "Transfer_StandardToken" } true;
[L3341]  RET         call _transfer~address~address~uint256_StandardToken__success(this, msgsender_MSG, msgvalue_MSG, from_s300, to_s300, value_s300);
[L3342]  COND FALSE  !(revert)
[L3363]  CALL        call __var_1 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowed_StandardToken[this][from_s300][msgsender_MSG], value_s300);
[L3013]  COND FALSE  !(!(b_s82 <= a_s82))
[L3017]              c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3018]              __ret_0_ := c_s82;
[L3363]  RET         call __var_1 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowed_StandardToken[this][from_s300][msgsender_MSG], value_s300);
[L3364]  COND FALSE  !(revert)
[L3367]  COND TRUE   DType[this] == LUCKYToken
[L3368]  CALL        call _approve~address~address~uint256_StandardToken__success(this, msgsender_MSG, msgvalue_MSG, from_s300, msgsender_MSG, __var_1);
[L3606]              __var_7 := null;
[L3607]  COND FALSE  !(!(spender_s443 != null))
[L3611]              __var_8 := null;
[L3612]  COND FALSE  !(!(owner_s443 != null))
[L3616]              sum__allowed1[owner_s443] := sum__allowed1[owner_s443] - _allowed_StandardToken[this][owner_s443][spender_s443];
[L3617]              _allowed_StandardToken[this][owner_s443][spender_s443] := value_s443;
[L3618]              sum__allowed1[owner_s443] := sum__allowed1[owner_s443] + _allowed_StandardToken[this][owner_s443][spender_s443];
[L3619]              assert { :EventEmitted "Approval_StandardToken" } true;
[L3368]  RET         call _approve~address~address~uint256_StandardToken__success(this, msgsender_MSG, msgvalue_MSG, from_s300, msgsender_MSG, __var_1);
[L3369]  COND FALSE  !(revert)
[L3390]              __ret_0_ := true;
[L4190]  RET         call __var_17 := transferFrom~address~address~uint256_StandardToken__success(this, msgsender_MSG, msgvalue_MSG, _from_s691, _to_s691, _value_s691);
[L4191]  COND FALSE  !(revert)
[L4202]              __ret_0_ := __var_17;
[L1418]  RET         call __ret_0_ := transferFrom~address~address~uint256_PausableToken__success(this, msgsender_MSG, msgvalue_MSG, _from_s691, _to_s691, _value_s691);
[L1419]              assume !revert && gas >= 0;
[L7148]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_PausableToken(this, msgsender_MSG, msgvalue_MSG, _from_s691, _to_s691, _value_s691);
[L7268]  RET         call CorralChoice_LUCKYToken(this);

Loop:
[L7268]  CALL        call CorralChoice_LUCKYToken(this);
[L7078]              havoc msgsender_MSG;
[L7079]              havoc msgvalue_MSG;
[L7080]              havoc choice;
[L7081]              havoc _to_s670;
[L7082]              havoc _value_s670;
[L7083]              havoc __ret_0_transfer;
[L7084]              havoc _spender_s709;
[L7085]              havoc _value_s709;
[L7086]              havoc __ret_0_approve;
[L7087]              havoc _from_s691;
[L7088]              havoc _to_s691;
[L7089]              havoc _value_s691;
[L7090]              havoc __ret_0_transferFrom;
[L7091]              havoc __ret_0_totalSupply;
[L7092]              havoc owner_s211;
[L7093]              havoc __ret_0_balanceOf;
[L7094]              havoc owner_s227;
[L7095]              havoc spender_s227;
[L7096]              havoc __ret_0_allowance;
[L7097]              havoc _spender_s727;
[L7098]              havoc _addedValue_s727;
[L7099]              havoc success_s727;
[L7100]              havoc _spender_s745;
[L7101]              havoc _subtractedValue_s745;
[L7102]              havoc success_s745;
[L7103]              havoc __ret_0_owner;
[L7104]              havoc __ret_0_isOwner;
[L7105]              havoc newOwner_s564;
[L7106]              havoc __ret_0_paused;
[L7107]              havoc amount_s764;
[L7108]              havoc account_s779;
[L7109]              havoc amount_s779;
[L7110]              havoc __ret_0_name;
[L7111]              havoc __ret_0_symbol;
[L7112]              havoc __ret_0_decimals;
[L7113]              havoc tmpNow;
[L7114]              havoc gas;
[L7115]              assume gas > 4000000 && gas <= 8000000;
[L7116]              tmpNow := now;
[L7117]              havoc now;
[L7118]              assume now > tmpNow;
[L7119]              assume msgsender_MSG != null;
[L7120]              assume DType[msgsender_MSG] != SafeMath;
[L7121]              assume DType[msgsender_MSG] != IERC20;
[L7122]              assume DType[msgsender_MSG] != StandardToken;
[L7123]              assume DType[msgsender_MSG] != Ownable;
[L7124]              assume DType[msgsender_MSG] != Pausable;
[L7125]              assume DType[msgsender_MSG] != PausableToken;
[L7126]              assume DType[msgsender_MSG] != BurnableToken;
[L7127]              assume DType[msgsender_MSG] != LUCKYToken;
[L7128]              Alloc[msgsender_MSG] := true;
[L7129]  COND FALSE  !(choice == 19)
[L7136]  COND FALSE  !(choice == 18)
[L7143]  COND TRUE   choice == 17
[L7144]              gas := gas - 21000;
[L7145]  COND TRUE   gas >= 0
[L7146]              assume _value_s691 >= 0 && _value_s691 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7147]              assume msgvalue_MSG == 0;
[L7148]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_PausableToken(this, msgsender_MSG, msgvalue_MSG, _from_s691, _to_s691, _value_s691);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((((_from_s691 != _to_s691 && ((_value_s691 > _balances_StandardToken[this][_from_s691] || _value_s691 > _allowed_StandardToken[this][_from_s691][msgsender_MSG]) || _balances_StandardToken[this][_to_s691] + _value_s691 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && _value_s691 >= 0) && _value_s691 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_StandardToken[this][_to_s691] >= 0) && _balances_StandardToken[this][_to_s691] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_StandardToken[this][_from_s691] >= 0) && _balances_StandardToken[this][_from_s691] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowed_StandardToken[this][_from_s691][msgsender_MSG] >= 0) && _allowed_StandardToken[this][_from_s691][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transferFrom_PausableToken0 := true;
[L2]                 call_transferFrom_PausableToken0 := false;
[L2]                 revert := revert_hold;
[L1391]              havoc __exception;
[L1392]              revert := false;
[L1393]  COND FALSE  !(__exception)
[L1418]  CALL        call __ret_0_ := transferFrom~address~address~uint256_PausableToken__success(this, msgsender_MSG, msgvalue_MSG, _from_s691, _to_s691, _value_s691);
[L4185]  CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6244]  COND FALSE  !(!!paused_Pausable[this])
[L4185]  RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4186]  COND FALSE  !(revert)
[L4189]  COND TRUE   DType[this] == LUCKYToken
[L4190]  CALL        call __var_17 := transferFrom~address~address~uint256_StandardToken__success(this, msgsender_MSG, msgvalue_MSG, _from_s691, _to_s691, _value_s691);
[L3340]  COND TRUE   DType[this] == LUCKYToken
[L3341]  CALL        call _transfer~address~address~uint256_StandardToken__success(this, msgsender_MSG, msgvalue_MSG, from_s300, to_s300, value_s300);
[L3561]              __var_4 := null;
[L3562]  COND FALSE  !(!(to_s401 != null))
[L3566]  CALL        call __var_5 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_StandardToken[this][from_s401], value_s401);
[L3013]  COND FALSE  !(!(b_s82 <= a_s82))
[L3017]              c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3018]              __ret_0_ := c_s82;
[L3566]  RET         call __var_5 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_StandardToken[this][from_s401], value_s401);
[L3567]  COND FALSE  !(revert)
[L3570]              sum__balances0[this] := sum__balances0[this] - _balances_StandardToken[this][from_s401];
[L3571]              _balances_StandardToken[this][from_s401] := __var_5;
[L3572]              sum__balances0[this] := sum__balances0[this] + _balances_StandardToken[this][from_s401];
[L3573]  CALL        call __var_6 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_StandardToken[this][to_s401], value_s401);
[L3037]              c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3038]  COND FALSE  !(!(c_s106 >= a_s106))
[L3042]              __ret_0_ := c_s106;
[L3573]  RET         call __var_6 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_StandardToken[this][to_s401], value_s401);
[L3574]  COND FALSE  !(revert)
[L3577]              sum__balances0[this] := sum__balances0[this] - _balances_StandardToken[this][to_s401];
[L3578]              _balances_StandardToken[this][to_s401] := __var_6;
[L3579]              sum__balances0[this] := sum__balances0[this] + _balances_StandardToken[this][to_s401];
[L3580]              assert { :EventEmitted "Transfer_StandardToken" } true;
[L3341]  RET         call _transfer~address~address~uint256_StandardToken__success(this, msgsender_MSG, msgvalue_MSG, from_s300, to_s300, value_s300);
[L3342]  COND FALSE  !(revert)
[L3363]  CALL        call __var_1 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowed_StandardToken[this][from_s300][msgsender_MSG], value_s300);
[L3013]  COND FALSE  !(!(b_s82 <= a_s82))
[L3017]              c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3018]              __ret_0_ := c_s82;
[L3363]  RET         call __var_1 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowed_StandardToken[this][from_s300][msgsender_MSG], value_s300);
[L3364]  COND FALSE  !(revert)
[L3367]  COND TRUE   DType[this] == LUCKYToken
[L3368]  CALL        call _approve~address~address~uint256_StandardToken__success(this, msgsender_MSG, msgvalue_MSG, from_s300, msgsender_MSG, __var_1);
[L3606]              __var_7 := null;
[L3607]  COND FALSE  !(!(spender_s443 != null))
[L3611]              __var_8 := null;
[L3612]  COND FALSE  !(!(owner_s443 != null))
[L3616]              sum__allowed1[owner_s443] := sum__allowed1[owner_s443] - _allowed_StandardToken[this][owner_s443][spender_s443];
[L3617]              _allowed_StandardToken[this][owner_s443][spender_s443] := value_s443;
[L3618]              sum__allowed1[owner_s443] := sum__allowed1[owner_s443] + _allowed_StandardToken[this][owner_s443][spender_s443];
[L3619]              assert { :EventEmitted "Approval_StandardToken" } true;
[L3368]  RET         call _approve~address~address~uint256_StandardToken__success(this, msgsender_MSG, msgvalue_MSG, from_s300, msgsender_MSG, __var_1);
[L3369]  COND FALSE  !(revert)
[L3390]              __ret_0_ := true;
[L4190]  RET         call __var_17 := transferFrom~address~address~uint256_StandardToken__success(this, msgsender_MSG, msgvalue_MSG, _from_s691, _to_s691, _value_s691);
[L4191]  COND FALSE  !(revert)
[L4202]              __ret_0_ := __var_17;
[L1418]  RET         call __ret_0_ := transferFrom~address~address~uint256_PausableToken__success(this, msgsender_MSG, msgvalue_MSG, _from_s691, _to_s691, _value_s691);
[L1419]              assume !revert && gas >= 0;
[L7148]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_PausableToken(this, msgsender_MSG, msgvalue_MSG, _from_s691, _to_s691, _value_s691);
[L7268]  RET         call CorralChoice_LUCKYToken(this);

[2020-11-24 20:43:03,778 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-24 20:43:03,779 INFO  L82        PathProgramCache]: Analyzing trace with hash 297298106, now seen corresponding path program 1 times
[2020-11-24 20:43:03,779 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-24 20:43:03,793 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-24 20:43:03,946 INFO  L134       CoverageAnalysis]: Checked inductivity of 408 backedges. 1 proven. 0 refuted. 0 times theorem prover too weak. 407 trivial. 0 not checked.
[2020-11-24 20:43:03,947 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-24 20:43:03,947 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [7] imperfect sequences [] total 7
[2020-11-24 20:43:03,947 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-24 20:43:03,947 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 7 interpolants.
[2020-11-24 20:43:03,947 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=11, Invalid=31, Unknown=0, NotChecked=0, Total=42
[2020-11-24 20:43:03,948 INFO  L87              Difference]: Start difference. First operand 4131 states and 4777 transitions. cyclomatic complexity: 651 Second operand 7 states.
[2020-11-24 20:43:04,024 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-24 20:43:04,024 INFO  L93              Difference]: Finished difference Result 4145 states and 4797 transitions.
[2020-11-24 20:43:04,024 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 5 states. 
[2020-11-24 20:43:04,024 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 4145 states and 4797 transitions.
[2020-11-24 20:43:04,031 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-24 20:43:04,040 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 4145 states to 4137 states and 4789 transitions.
[2020-11-24 20:43:04,040 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1123
[2020-11-24 20:43:04,041 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1123
[2020-11-24 20:43:04,041 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 4137 states and 4789 transitions.
[2020-11-24 20:43:04,044 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-24 20:43:04,044 INFO  L728         BuchiCegarLoop]: Abstraction has 4137 states and 4789 transitions.
[2020-11-24 20:43:04,047 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 4137 states and 4789 transitions.
[2020-11-24 20:43:04,070 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 4137 to 4137.
[2020-11-24 20:43:04,070 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 4137 states.
[2020-11-24 20:43:04,074 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 4137 states to 4137 states and 4789 transitions.
[2020-11-24 20:43:04,074 INFO  L751         BuchiCegarLoop]: Abstraction has 4137 states and 4789 transitions.
[2020-11-24 20:43:04,074 INFO  L631         BuchiCegarLoop]: Abstraction has 4137 states and 4789 transitions.
[2020-11-24 20:43:04,074 INFO  L445         BuchiCegarLoop]: ======== Iteration 7============
[2020-11-24 20:43:04,074 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 4137 states and 4789 transitions.
[2020-11-24 20:43:04,079 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-24 20:43:04,079 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-24 20:43:04,079 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-24 20:43:04,080 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [6, 6, 6, 6, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-24 20:43:04,080 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transferFrom_PausableToken0 := false;
[L2]                 call_transferFrom_PausableToken0 := false;
[L2]     CALL        call main();
[L7258]              assume null == 0;
[L7259]  CALL        call this := FreshRefGenerator__success();
[L2904]              havoc newRef;
[L2905]              assume Alloc[newRef] == false;
[L2906]              Alloc[newRef] := true;
[L2907]              assume newRef != null;
[L7259]  RET         call this := FreshRefGenerator__success();
[L7260]              assume now >= 0;
[L7261]              assume DType[this] == LUCKYToken;
[L7262]              assume msgvalue_MSG == 0;
[L7263]              gas := gas - 53000;
[L7264]  CALL        call LUCKYToken_LUCKYToken(this, msgsender_MSG, msgvalue_MSG);
[L1849]              havoc __exception;
[L1850]              revert := false;
[L1851]  COND FALSE  !(__exception)
[L1876]  CALL        call LUCKYToken_LUCKYToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4580]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3072]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3057]              assume msgsender_MSG != null;
[L3058]              Balance[this] := 0;
[L3072]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3073]  COND FALSE  !(revert)
[L4580]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4581]  COND FALSE  !(revert)
[L4584]  CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3118]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3072]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3057]              assume msgsender_MSG != null;
[L3058]              Balance[this] := 0;
[L3072]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3073]  COND FALSE  !(revert)
[L3118]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3119]  COND FALSE  !(revert)
[L3122]  CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3094]              assume msgsender_MSG != null;
[L3095]              Balance[this] := 0;
[L3096]              _balances_StandardToken[this] := zeroRefintArr();
[L3097]              sum__balances0[this] := 0;
[L3098]              _allowed_StandardToken[this] := zeroRefRefintArr();
[L3099]              sum__allowed1[this] := 0;
[L3100]              _totalSupply_StandardToken[this] := 0;
[L3122]  RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3123]  COND FALSE  !(revert)
[L4584]  RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4585]  COND FALSE  !(revert)
[L4588]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3809]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3793]              assume msgsender_MSG != null;
[L3794]              Balance[this] := 0;
[L3795]              _owner_Ownable[this] := null;
[L3809]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3810]  COND FALSE  !(revert)
[L4588]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L4589]  COND FALSE  !(revert)
[L4592]  CALL        call BurnableToken_BurnableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4394]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3072]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3057]              assume msgsender_MSG != null;
[L3058]              Balance[this] := 0;
[L3072]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3073]  COND FALSE  !(revert)
[L4394]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4395]  COND FALSE  !(revert)
[L4398]  CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3118]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3072]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3057]              assume msgsender_MSG != null;
[L3058]              Balance[this] := 0;
[L3072]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3073]  COND FALSE  !(revert)
[L3118]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3119]  COND FALSE  !(revert)
[L3122]  CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3094]              assume msgsender_MSG != null;
[L3095]              Balance[this] := 0;
[L3096]              _balances_StandardToken[this] := zeroRefintArr();
[L3097]              sum__balances0[this] := 0;
[L3098]              _allowed_StandardToken[this] := zeroRefRefintArr();
[L3099]              sum__allowed1[this] := 0;
[L3100]              _totalSupply_StandardToken[this] := 0;
[L3122]  RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3123]  COND FALSE  !(revert)
[L4398]  RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4399]  COND FALSE  !(revert)
[L4402]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3809]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3793]              assume msgsender_MSG != null;
[L3794]              Balance[this] := 0;
[L3795]              _owner_Ownable[this] := null;
[L3809]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3810]  COND FALSE  !(revert)
[L4402]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L4403]  COND FALSE  !(revert)
[L4406]  CALL        call BurnableToken_BurnableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4367]              assume msgsender_MSG != null;
[L4368]              Balance[this] := 0;
[L4406]  RET         call BurnableToken_BurnableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4407]  COND FALSE  !(revert)
[L4592]  RET         call BurnableToken_BurnableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4593]  COND FALSE  !(revert)
[L4596]  CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L3966]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3809]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3793]              assume msgsender_MSG != null;
[L3794]              Balance[this] := 0;
[L3795]              _owner_Ownable[this] := null;
[L3809]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3810]  COND FALSE  !(revert)
[L3966]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3967]  COND FALSE  !(revert)
[L3970]  CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3946]              assume msgsender_MSG != null;
[L3947]              Balance[this] := 0;
[L3948]              paused_Pausable[this] := false;
[L3970]  RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3971]  COND FALSE  !(revert)
[L4596]  RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L4597]  COND FALSE  !(revert)
[L4600]  CALL        call PausableToken_PausableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4084]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3072]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3057]              assume msgsender_MSG != null;
[L3058]              Balance[this] := 0;
[L3072]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3073]  COND FALSE  !(revert)
[L4084]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4085]  COND FALSE  !(revert)
[L4088]  CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3118]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3072]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3057]              assume msgsender_MSG != null;
[L3058]              Balance[this] := 0;
[L3072]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3073]  COND FALSE  !(revert)
[L3118]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3119]  COND FALSE  !(revert)
[L3122]  CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3094]              assume msgsender_MSG != null;
[L3095]              Balance[this] := 0;
[L3096]              _balances_StandardToken[this] := zeroRefintArr();
[L3097]              sum__balances0[this] := 0;
[L3098]              _allowed_StandardToken[this] := zeroRefRefintArr();
[L3099]              sum__allowed1[this] := 0;
[L3100]              _totalSupply_StandardToken[this] := 0;
[L3122]  RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3123]  COND FALSE  !(revert)
[L4088]  RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4089]  COND FALSE  !(revert)
[L4092]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3809]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3793]              assume msgsender_MSG != null;
[L3794]              Balance[this] := 0;
[L3795]              _owner_Ownable[this] := null;
[L3809]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3810]  COND FALSE  !(revert)
[L4092]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L4093]  COND FALSE  !(revert)
[L4096]  CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L3966]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3809]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3793]              assume msgsender_MSG != null;
[L3794]              Balance[this] := 0;
[L3795]              _owner_Ownable[this] := null;
[L3809]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3810]  COND FALSE  !(revert)
[L3966]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3967]  COND FALSE  !(revert)
[L3970]  CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3946]              assume msgsender_MSG != null;
[L3947]              Balance[this] := 0;
[L3948]              paused_Pausable[this] := false;
[L3970]  RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3971]  COND FALSE  !(revert)
[L4096]  RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L4097]  COND FALSE  !(revert)
[L4100]  CALL        call PausableToken_PausableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4053]              assume msgsender_MSG != null;
[L4054]              Balance[this] := 0;
[L4100]  RET         call PausableToken_PausableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4101]  COND FALSE  !(revert)
[L4600]  RET         call PausableToken_PausableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4601]  COND FALSE  !(revert)
[L4604]  CALL        call LUCKYToken_LUCKYToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4523]              assume msgsender_MSG != null;
[L4524]              Balance[this] := 0;
[L4525]              name_LUCKYToken[this] := -927166810;
[L4526]              symbol_LUCKYToken[this] := -927166810;
[L4527]              decimals_LUCKYToken[this] := 18;
[L4528]              INIT_TOTALSUPPLY_LUCKYToken[this] := 10000000000;
[L4529]              __var_26 := ConstantToRef(625314775344980695514831456764478199936221022047);
[L4530]              _tokenOwner_LUCKYToken[this] := ConstantToRef(625314775344980695514831456764478199936221022047);
[L4532]              __var_25 := decimals_LUCKYToken[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4533]              _totalSupply_StandardToken[this] := nonlinearMul(INIT_TOTALSUPPLY_LUCKYToken[this], nonlinearPow(10, decimals_LUCKYToken[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4534]              _owner_Ownable[this] := _tokenOwner_LUCKYToken[this];
[L4535]              assert { :EventEmitted "OwnershipTransferred_LUCKYToken" } true;
[L4536]              sum__balances0[this] := sum__balances0[this] - _balances_StandardToken[this][_owner_Ownable[this]];
[L4537]              _balances_StandardToken[this][_owner_Ownable[this]] := _totalSupply_StandardToken[this];
[L4538]              sum__balances0[this] := sum__balances0[this] + _balances_StandardToken[this][_owner_Ownable[this]];
[L4539]              assert { :EventEmitted "Transfer_LUCKYToken" } true;
[L4604]  RET         call LUCKYToken_LUCKYToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4605]  COND FALSE  !(revert)
[L1876]  RET         call LUCKYToken_LUCKYToken__success(this, msgsender_MSG, msgvalue_MSG);
[L1877]              assume !revert && gas >= 0;
[L7264]  RET         call LUCKYToken_LUCKYToken(this, msgsender_MSG, msgvalue_MSG);
[L7265]              assume !revert && gas >= 0;
[L7268]  CALL        call CorralChoice_LUCKYToken(this);
[L7078]              havoc msgsender_MSG;
[L7079]              havoc msgvalue_MSG;
[L7080]              havoc choice;
[L7081]              havoc _to_s670;
[L7082]              havoc _value_s670;
[L7083]              havoc __ret_0_transfer;
[L7084]              havoc _spender_s709;
[L7085]              havoc _value_s709;
[L7086]              havoc __ret_0_approve;
[L7087]              havoc _from_s691;
[L7088]              havoc _to_s691;
[L7089]              havoc _value_s691;
[L7090]              havoc __ret_0_transferFrom;
[L7091]              havoc __ret_0_totalSupply;
[L7092]              havoc owner_s211;
[L7093]              havoc __ret_0_balanceOf;
[L7094]              havoc owner_s227;
[L7095]              havoc spender_s227;
[L7096]              havoc __ret_0_allowance;
[L7097]              havoc _spender_s727;
[L7098]              havoc _addedValue_s727;
[L7099]              havoc success_s727;
[L7100]              havoc _spender_s745;
[L7101]              havoc _subtractedValue_s745;
[L7102]              havoc success_s745;
[L7103]              havoc __ret_0_owner;
[L7104]              havoc __ret_0_isOwner;
[L7105]              havoc newOwner_s564;
[L7106]              havoc __ret_0_paused;
[L7107]              havoc amount_s764;
[L7108]              havoc account_s779;
[L7109]              havoc amount_s779;
[L7110]              havoc __ret_0_name;
[L7111]              havoc __ret_0_symbol;
[L7112]              havoc __ret_0_decimals;
[L7113]              havoc tmpNow;
[L7114]              havoc gas;
[L7115]              assume gas > 4000000 && gas <= 8000000;
[L7116]              tmpNow := now;
[L7117]              havoc now;
[L7118]              assume now > tmpNow;
[L7119]              assume msgsender_MSG != null;
[L7120]              assume DType[msgsender_MSG] != SafeMath;
[L7121]              assume DType[msgsender_MSG] != IERC20;
[L7122]              assume DType[msgsender_MSG] != StandardToken;
[L7123]              assume DType[msgsender_MSG] != Ownable;
[L7124]              assume DType[msgsender_MSG] != Pausable;
[L7125]              assume DType[msgsender_MSG] != PausableToken;
[L7126]              assume DType[msgsender_MSG] != BurnableToken;
[L7127]              assume DType[msgsender_MSG] != LUCKYToken;
[L7128]              Alloc[msgsender_MSG] := true;
[L7129]  COND FALSE  !(choice == 19)
[L7136]  COND FALSE  !(choice == 18)
[L7143]  COND FALSE  !(choice == 17)
[L7150]  COND FALSE  !(choice == 16)
[L7156]  COND FALSE  !(choice == 15)
[L7162]  COND FALSE  !(choice == 14)
[L7168]  COND FALSE  !(choice == 13)
[L7175]  COND FALSE  !(choice == 12)
[L7182]  COND FALSE  !(choice == 11)
[L7188]  COND FALSE  !(choice == 10)
[L7194]  COND FALSE  !(choice == 9)
[L7200]  COND FALSE  !(choice == 8)
[L7206]  COND FALSE  !(choice == 7)
[L7212]  COND FALSE  !(choice == 6)
[L7218]  COND FALSE  !(choice == 5)
[L7225]  COND TRUE   choice == 4
[L7226]              gas := gas - 21000;
[L7227]  COND TRUE   gas >= 0
[L7228]              assume amount_s779 >= 0 && amount_s779 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7229]              assume msgvalue_MSG == 0;
[L7230]  CALL        call burnFrom~address~uint256_BurnableToken(this, msgsender_MSG, msgvalue_MSG, account_s779, amount_s779);
[L1762]              havoc __exception;
[L1763]              revert := false;
[L1764]  COND FALSE  !(__exception)
[L1789]  CALL        call burnFrom~address~uint256_BurnableToken__success(this, msgsender_MSG, msgvalue_MSG, account_s779, amount_s779);
[L4477]  CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6200]  COND FALSE  !(DType[this] == LUCKYToken)
[L6205]  COND FALSE  !(DType[this] == BurnableToken)
[L6210]  COND FALSE  !(DType[this] == PausableToken)
[L6215]  COND FALSE  !(DType[this] == Pausable)
[L6220]  COND TRUE   DType[this] == Ownable
[L6221]  CALL        call __var_13 := isOwner_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3835]              __ret_0_ := msgsender_MSG == _owner_Ownable[this];
[L6221]  RET         call __var_13 := isOwner_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6222]  COND FALSE  !(revert)
[L6228]  COND FALSE  !(!__var_13)
[L4477]  RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4478]  COND FALSE  !(revert)
[L4481]  COND FALSE  !(DType[this] == LUCKYToken)
[L4486]  COND TRUE   DType[this] == BurnableToken
[L4487]  CALL        call _burnFrom~address~uint256_StandardToken__success(this, msgsender_MSG, msgvalue_MSG, account_s779, amount_s779);
[L3729]  COND FALSE  !(DType[this] == LUCKYToken)
[L3734]  COND TRUE   DType[this] == BurnableToken
[L3735]  CALL        call _burn~address~uint256_StandardToken__success(this, msgsender_MSG, msgvalue_MSG, account_s514, amount_s514);
[L3651]              __var_9 := null;
[L3652]  COND FALSE  !(!(account_s486 != null))
[L3656]  CALL        call __var_10 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_StandardToken[this][account_s486], value_s486);
[L3013]  COND FALSE  !(!(b_s82 <= a_s82))
[L3017]              c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3018]              __ret_0_ := c_s82;
[L3656]  RET         call __var_10 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_StandardToken[this][account_s486], value_s486);
[L3657]  COND FALSE  !(revert)
[L3660]              sum__balances0[this] := sum__balances0[this] - _balances_StandardToken[this][account_s486];
[L3661]              _balances_StandardToken[this][account_s486] := __var_10;
[L3662]              sum__balances0[this] := sum__balances0[this] + _balances_StandardToken[this][account_s486];
[L3663]  CALL        call __var_11 := sub~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_StandardToken[this], value_s486);
[L3013]  COND FALSE  !(!(b_s82 <= a_s82))
[L3017]              c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3018]              __ret_0_ := c_s82;
[L3663]  RET         call __var_11 := sub~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_StandardToken[this], value_s486);
[L3664]  COND FALSE  !(revert)
[L3667]              _totalSupply_StandardToken[this] := __var_11;
[L3668]              assert { :EventEmitted "Transfer_StandardToken" } true;
[L3735]  RET         call _burn~address~uint256_StandardToken__success(this, msgsender_MSG, msgvalue_MSG, account_s514, amount_s514);
[L3736]  COND FALSE  !(revert)
[L3752]  CALL        call __var_12 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowed_StandardToken[this][account_s514][msgsender_MSG], amount_s514);
[L3013]  COND FALSE  !(!(b_s82 <= a_s82))
[L3017]              c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3018]              __ret_0_ := c_s82;
[L3752]  RET         call __var_12 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowed_StandardToken[this][account_s514][msgsender_MSG], amount_s514);
[L3753]  COND FALSE  !(revert)
[L3756]  COND TRUE   DType[this] == LUCKYToken
[L3757]  CALL        call _approve~address~address~uint256_StandardToken__success(this, msgsender_MSG, msgvalue_MSG, account_s514, msgsender_MSG, __var_12);
[L3606]              __var_7 := null;
[L3607]  COND FALSE  !(!(spender_s443 != null))
[L3611]              __var_8 := null;
[L3612]  COND FALSE  !(!(owner_s443 != null))
[L3616]              sum__allowed1[owner_s443] := sum__allowed1[owner_s443] - _allowed_StandardToken[this][owner_s443][spender_s443];
[L3617]              _allowed_StandardToken[this][owner_s443][spender_s443] := value_s443;
[L3618]              sum__allowed1[owner_s443] := sum__allowed1[owner_s443] + _allowed_StandardToken[this][owner_s443][spender_s443];
[L3619]              assert { :EventEmitted "Approval_StandardToken" } true;
[L3757]  RET         call _approve~address~address~uint256_StandardToken__success(this, msgsender_MSG, msgvalue_MSG, account_s514, msgsender_MSG, __var_12);
[L3758]  COND FALSE  !(revert)
[L4487]  RET         call _burnFrom~address~uint256_StandardToken__success(this, msgsender_MSG, msgvalue_MSG, account_s779, amount_s779);
[L4488]  COND FALSE  !(revert)
[L1789]  RET         call burnFrom~address~uint256_BurnableToken__success(this, msgsender_MSG, msgvalue_MSG, account_s779, amount_s779);
[L1790]              assume !revert && gas >= 0;
[L7230]  RET         call burnFrom~address~uint256_BurnableToken(this, msgsender_MSG, msgvalue_MSG, account_s779, amount_s779);
[L7268]  RET         call CorralChoice_LUCKYToken(this);
[L7268]  CALL        call CorralChoice_LUCKYToken(this);
[L7078]              havoc msgsender_MSG;
[L7079]              havoc msgvalue_MSG;
[L7080]              havoc choice;
[L7081]              havoc _to_s670;
[L7082]              havoc _value_s670;
[L7083]              havoc __ret_0_transfer;
[L7084]              havoc _spender_s709;
[L7085]              havoc _value_s709;
[L7086]              havoc __ret_0_approve;
[L7087]              havoc _from_s691;
[L7088]              havoc _to_s691;
[L7089]              havoc _value_s691;
[L7090]              havoc __ret_0_transferFrom;
[L7091]              havoc __ret_0_totalSupply;
[L7092]              havoc owner_s211;
[L7093]              havoc __ret_0_balanceOf;
[L7094]              havoc owner_s227;
[L7095]              havoc spender_s227;
[L7096]              havoc __ret_0_allowance;
[L7097]              havoc _spender_s727;
[L7098]              havoc _addedValue_s727;
[L7099]              havoc success_s727;
[L7100]              havoc _spender_s745;
[L7101]              havoc _subtractedValue_s745;
[L7102]              havoc success_s745;
[L7103]              havoc __ret_0_owner;
[L7104]              havoc __ret_0_isOwner;
[L7105]              havoc newOwner_s564;
[L7106]              havoc __ret_0_paused;
[L7107]              havoc amount_s764;
[L7108]              havoc account_s779;
[L7109]              havoc amount_s779;
[L7110]              havoc __ret_0_name;
[L7111]              havoc __ret_0_symbol;
[L7112]              havoc __ret_0_decimals;
[L7113]              havoc tmpNow;
[L7114]              havoc gas;
[L7115]              assume gas > 4000000 && gas <= 8000000;
[L7116]              tmpNow := now;
[L7117]              havoc now;
[L7118]              assume now > tmpNow;
[L7119]              assume msgsender_MSG != null;
[L7120]              assume DType[msgsender_MSG] != SafeMath;
[L7121]              assume DType[msgsender_MSG] != IERC20;
[L7122]              assume DType[msgsender_MSG] != StandardToken;
[L7123]              assume DType[msgsender_MSG] != Ownable;
[L7124]              assume DType[msgsender_MSG] != Pausable;
[L7125]              assume DType[msgsender_MSG] != PausableToken;
[L7126]              assume DType[msgsender_MSG] != BurnableToken;
[L7127]              assume DType[msgsender_MSG] != LUCKYToken;
[L7128]              Alloc[msgsender_MSG] := true;
[L7129]  COND FALSE  !(choice == 19)
[L7136]  COND FALSE  !(choice == 18)
[L7143]  COND TRUE   choice == 17
[L7144]              gas := gas - 21000;
[L7145]  COND TRUE   gas >= 0
[L7146]              assume _value_s691 >= 0 && _value_s691 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7147]              assume msgvalue_MSG == 0;
[L7148]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_PausableToken(this, msgsender_MSG, msgvalue_MSG, _from_s691, _to_s691, _value_s691);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((((_from_s691 != _to_s691 && ((_value_s691 > _balances_StandardToken[this][_from_s691] || _value_s691 > _allowed_StandardToken[this][_from_s691][msgsender_MSG]) || _balances_StandardToken[this][_to_s691] + _value_s691 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && _value_s691 >= 0) && _value_s691 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_StandardToken[this][_to_s691] >= 0) && _balances_StandardToken[this][_to_s691] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_StandardToken[this][_from_s691] >= 0) && _balances_StandardToken[this][_from_s691] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowed_StandardToken[this][_from_s691][msgsender_MSG] >= 0) && _allowed_StandardToken[this][_from_s691][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transferFrom_PausableToken0 := true;
[L2]                 call_transferFrom_PausableToken0 := false;
[L2]                 revert := revert_hold;
[L1391]              havoc __exception;
[L1392]              revert := false;
[L1393]  COND FALSE  !(__exception)
[L1418]  CALL        call __ret_0_ := transferFrom~address~address~uint256_PausableToken__success(this, msgsender_MSG, msgvalue_MSG, _from_s691, _to_s691, _value_s691);
[L4185]  CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6244]  COND FALSE  !(!!paused_Pausable[this])
[L4185]  RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4186]  COND FALSE  !(revert)
[L4189]  COND TRUE   DType[this] == LUCKYToken
[L4190]  CALL        call __var_17 := transferFrom~address~address~uint256_StandardToken__success(this, msgsender_MSG, msgvalue_MSG, _from_s691, _to_s691, _value_s691);
[L3340]  COND TRUE   DType[this] == LUCKYToken
[L3341]  CALL        call _transfer~address~address~uint256_StandardToken__success(this, msgsender_MSG, msgvalue_MSG, from_s300, to_s300, value_s300);
[L3561]              __var_4 := null;
[L3562]  COND FALSE  !(!(to_s401 != null))
[L3566]  CALL        call __var_5 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_StandardToken[this][from_s401], value_s401);
[L3013]  COND FALSE  !(!(b_s82 <= a_s82))
[L3017]              c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3018]              __ret_0_ := c_s82;
[L3566]  RET         call __var_5 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_StandardToken[this][from_s401], value_s401);
[L3567]  COND FALSE  !(revert)
[L3570]              sum__balances0[this] := sum__balances0[this] - _balances_StandardToken[this][from_s401];
[L3571]              _balances_StandardToken[this][from_s401] := __var_5;
[L3572]              sum__balances0[this] := sum__balances0[this] + _balances_StandardToken[this][from_s401];
[L3573]  CALL        call __var_6 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_StandardToken[this][to_s401], value_s401);
[L3037]              c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3038]  COND FALSE  !(!(c_s106 >= a_s106))
[L3042]              __ret_0_ := c_s106;
[L3573]  RET         call __var_6 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_StandardToken[this][to_s401], value_s401);
[L3574]  COND FALSE  !(revert)
[L3577]              sum__balances0[this] := sum__balances0[this] - _balances_StandardToken[this][to_s401];
[L3578]              _balances_StandardToken[this][to_s401] := __var_6;
[L3579]              sum__balances0[this] := sum__balances0[this] + _balances_StandardToken[this][to_s401];
[L3580]              assert { :EventEmitted "Transfer_StandardToken" } true;
[L3341]  RET         call _transfer~address~address~uint256_StandardToken__success(this, msgsender_MSG, msgvalue_MSG, from_s300, to_s300, value_s300);
[L3342]  COND FALSE  !(revert)
[L3363]  CALL        call __var_1 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowed_StandardToken[this][from_s300][msgsender_MSG], value_s300);
[L3013]  COND FALSE  !(!(b_s82 <= a_s82))
[L3017]              c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3018]              __ret_0_ := c_s82;
[L3363]  RET         call __var_1 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowed_StandardToken[this][from_s300][msgsender_MSG], value_s300);
[L3364]  COND FALSE  !(revert)
[L3367]  COND TRUE   DType[this] == LUCKYToken
[L3368]  CALL        call _approve~address~address~uint256_StandardToken__success(this, msgsender_MSG, msgvalue_MSG, from_s300, msgsender_MSG, __var_1);
[L3606]              __var_7 := null;
[L3607]  COND FALSE  !(!(spender_s443 != null))
[L3611]              __var_8 := null;
[L3612]  COND FALSE  !(!(owner_s443 != null))
[L3616]              sum__allowed1[owner_s443] := sum__allowed1[owner_s443] - _allowed_StandardToken[this][owner_s443][spender_s443];
[L3617]              _allowed_StandardToken[this][owner_s443][spender_s443] := value_s443;
[L3618]              sum__allowed1[owner_s443] := sum__allowed1[owner_s443] + _allowed_StandardToken[this][owner_s443][spender_s443];
[L3619]              assert { :EventEmitted "Approval_StandardToken" } true;
[L3368]  RET         call _approve~address~address~uint256_StandardToken__success(this, msgsender_MSG, msgvalue_MSG, from_s300, msgsender_MSG, __var_1);
[L3369]  COND FALSE  !(revert)
[L3390]              __ret_0_ := true;
[L4190]  RET         call __var_17 := transferFrom~address~address~uint256_StandardToken__success(this, msgsender_MSG, msgvalue_MSG, _from_s691, _to_s691, _value_s691);
[L4191]  COND FALSE  !(revert)
[L4202]              __ret_0_ := __var_17;
[L1418]  RET         call __ret_0_ := transferFrom~address~address~uint256_PausableToken__success(this, msgsender_MSG, msgvalue_MSG, _from_s691, _to_s691, _value_s691);
[L1419]              assume !revert && gas >= 0;
[L7148]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_PausableToken(this, msgsender_MSG, msgvalue_MSG, _from_s691, _to_s691, _value_s691);
[L7268]  RET         call CorralChoice_LUCKYToken(this);

Loop:
[L7268]  CALL        call CorralChoice_LUCKYToken(this);
[L7078]              havoc msgsender_MSG;
[L7079]              havoc msgvalue_MSG;
[L7080]              havoc choice;
[L7081]              havoc _to_s670;
[L7082]              havoc _value_s670;
[L7083]              havoc __ret_0_transfer;
[L7084]              havoc _spender_s709;
[L7085]              havoc _value_s709;
[L7086]              havoc __ret_0_approve;
[L7087]              havoc _from_s691;
[L7088]              havoc _to_s691;
[L7089]              havoc _value_s691;
[L7090]              havoc __ret_0_transferFrom;
[L7091]              havoc __ret_0_totalSupply;
[L7092]              havoc owner_s211;
[L7093]              havoc __ret_0_balanceOf;
[L7094]              havoc owner_s227;
[L7095]              havoc spender_s227;
[L7096]              havoc __ret_0_allowance;
[L7097]              havoc _spender_s727;
[L7098]              havoc _addedValue_s727;
[L7099]              havoc success_s727;
[L7100]              havoc _spender_s745;
[L7101]              havoc _subtractedValue_s745;
[L7102]              havoc success_s745;
[L7103]              havoc __ret_0_owner;
[L7104]              havoc __ret_0_isOwner;
[L7105]              havoc newOwner_s564;
[L7106]              havoc __ret_0_paused;
[L7107]              havoc amount_s764;
[L7108]              havoc account_s779;
[L7109]              havoc amount_s779;
[L7110]              havoc __ret_0_name;
[L7111]              havoc __ret_0_symbol;
[L7112]              havoc __ret_0_decimals;
[L7113]              havoc tmpNow;
[L7114]              havoc gas;
[L7115]              assume gas > 4000000 && gas <= 8000000;
[L7116]              tmpNow := now;
[L7117]              havoc now;
[L7118]              assume now > tmpNow;
[L7119]              assume msgsender_MSG != null;
[L7120]              assume DType[msgsender_MSG] != SafeMath;
[L7121]              assume DType[msgsender_MSG] != IERC20;
[L7122]              assume DType[msgsender_MSG] != StandardToken;
[L7123]              assume DType[msgsender_MSG] != Ownable;
[L7124]              assume DType[msgsender_MSG] != Pausable;
[L7125]              assume DType[msgsender_MSG] != PausableToken;
[L7126]              assume DType[msgsender_MSG] != BurnableToken;
[L7127]              assume DType[msgsender_MSG] != LUCKYToken;
[L7128]              Alloc[msgsender_MSG] := true;
[L7129]  COND TRUE   choice == 19
[L7130]              gas := gas - 21000;
[L7131]  COND FALSE  !(gas >= 0)
[L7268]  RET         call CorralChoice_LUCKYToken(this);

[2020-11-24 20:43:04,085 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-24 20:43:04,085 INFO  L82        PathProgramCache]: Analyzing trace with hash -1054466434, now seen corresponding path program 1 times
[2020-11-24 20:43:04,085 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-24 20:43:04,098 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-24 20:43:04,211 INFO  L134       CoverageAnalysis]: Checked inductivity of 408 backedges. 1 proven. 0 refuted. 0 times theorem prover too weak. 407 trivial. 0 not checked.
[2020-11-24 20:43:04,211 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-24 20:43:04,211 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [7] imperfect sequences [] total 7
[2020-11-24 20:43:04,211 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-24 20:43:04,212 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 7 interpolants.
[2020-11-24 20:43:04,212 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=11, Invalid=31, Unknown=0, NotChecked=0, Total=42
[2020-11-24 20:43:04,212 INFO  L87              Difference]: Start difference. First operand 4137 states and 4789 transitions. cyclomatic complexity: 657 Second operand 7 states.
[2020-11-24 20:43:04,297 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-24 20:43:04,297 INFO  L93              Difference]: Finished difference Result 4167 states and 4825 transitions.
[2020-11-24 20:43:04,297 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 7 states. 
[2020-11-24 20:43:04,297 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 4167 states and 4825 transitions.
[2020-11-24 20:43:04,304 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-24 20:43:04,313 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 4167 states to 4133 states and 4787 transitions.
[2020-11-24 20:43:04,313 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1121
[2020-11-24 20:43:04,314 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1121
[2020-11-24 20:43:04,314 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 4133 states and 4787 transitions.
[2020-11-24 20:43:04,317 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-24 20:43:04,317 INFO  L728         BuchiCegarLoop]: Abstraction has 4133 states and 4787 transitions.
[2020-11-24 20:43:04,320 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 4133 states and 4787 transitions.
[2020-11-24 20:43:04,342 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 4133 to 4127.
[2020-11-24 20:43:04,342 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 4127 states.
[2020-11-24 20:43:04,346 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 4127 states to 4127 states and 4775 transitions.
[2020-11-24 20:43:04,346 INFO  L751         BuchiCegarLoop]: Abstraction has 4127 states and 4775 transitions.
[2020-11-24 20:43:04,346 INFO  L631         BuchiCegarLoop]: Abstraction has 4127 states and 4775 transitions.
[2020-11-24 20:43:04,346 INFO  L445         BuchiCegarLoop]: ======== Iteration 8============
[2020-11-24 20:43:04,346 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 4127 states and 4775 transitions.
[2020-11-24 20:43:04,350 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-24 20:43:04,350 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-24 20:43:04,350 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-24 20:43:04,352 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [6, 6, 6, 6, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-24 20:43:04,352 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transferFrom_PausableToken0 := false;
[L2]                 call_transferFrom_PausableToken0 := false;
[L2]     CALL        call main();
[L7258]              assume null == 0;
[L7259]  CALL        call this := FreshRefGenerator__success();
[L2904]              havoc newRef;
[L2905]              assume Alloc[newRef] == false;
[L2906]              Alloc[newRef] := true;
[L2907]              assume newRef != null;
[L7259]  RET         call this := FreshRefGenerator__success();
[L7260]              assume now >= 0;
[L7261]              assume DType[this] == LUCKYToken;
[L7262]              assume msgvalue_MSG == 0;
[L7263]              gas := gas - 53000;
[L7264]  CALL        call LUCKYToken_LUCKYToken(this, msgsender_MSG, msgvalue_MSG);
[L1849]              havoc __exception;
[L1850]              revert := false;
[L1851]  COND FALSE  !(__exception)
[L1876]  CALL        call LUCKYToken_LUCKYToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4580]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3072]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3057]              assume msgsender_MSG != null;
[L3058]              Balance[this] := 0;
[L3072]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3073]  COND FALSE  !(revert)
[L4580]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4581]  COND FALSE  !(revert)
[L4584]  CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3118]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3072]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3057]              assume msgsender_MSG != null;
[L3058]              Balance[this] := 0;
[L3072]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3073]  COND FALSE  !(revert)
[L3118]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3119]  COND FALSE  !(revert)
[L3122]  CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3094]              assume msgsender_MSG != null;
[L3095]              Balance[this] := 0;
[L3096]              _balances_StandardToken[this] := zeroRefintArr();
[L3097]              sum__balances0[this] := 0;
[L3098]              _allowed_StandardToken[this] := zeroRefRefintArr();
[L3099]              sum__allowed1[this] := 0;
[L3100]              _totalSupply_StandardToken[this] := 0;
[L3122]  RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3123]  COND FALSE  !(revert)
[L4584]  RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4585]  COND FALSE  !(revert)
[L4588]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3809]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3793]              assume msgsender_MSG != null;
[L3794]              Balance[this] := 0;
[L3795]              _owner_Ownable[this] := null;
[L3809]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3810]  COND FALSE  !(revert)
[L4588]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L4589]  COND FALSE  !(revert)
[L4592]  CALL        call BurnableToken_BurnableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4394]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3072]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3057]              assume msgsender_MSG != null;
[L3058]              Balance[this] := 0;
[L3072]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3073]  COND FALSE  !(revert)
[L4394]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4395]  COND FALSE  !(revert)
[L4398]  CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3118]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3072]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3057]              assume msgsender_MSG != null;
[L3058]              Balance[this] := 0;
[L3072]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3073]  COND FALSE  !(revert)
[L3118]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3119]  COND FALSE  !(revert)
[L3122]  CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3094]              assume msgsender_MSG != null;
[L3095]              Balance[this] := 0;
[L3096]              _balances_StandardToken[this] := zeroRefintArr();
[L3097]              sum__balances0[this] := 0;
[L3098]              _allowed_StandardToken[this] := zeroRefRefintArr();
[L3099]              sum__allowed1[this] := 0;
[L3100]              _totalSupply_StandardToken[this] := 0;
[L3122]  RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3123]  COND FALSE  !(revert)
[L4398]  RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4399]  COND FALSE  !(revert)
[L4402]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3809]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3793]              assume msgsender_MSG != null;
[L3794]              Balance[this] := 0;
[L3795]              _owner_Ownable[this] := null;
[L3809]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3810]  COND FALSE  !(revert)
[L4402]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L4403]  COND FALSE  !(revert)
[L4406]  CALL        call BurnableToken_BurnableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4367]              assume msgsender_MSG != null;
[L4368]              Balance[this] := 0;
[L4406]  RET         call BurnableToken_BurnableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4407]  COND FALSE  !(revert)
[L4592]  RET         call BurnableToken_BurnableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4593]  COND FALSE  !(revert)
[L4596]  CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L3966]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3809]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3793]              assume msgsender_MSG != null;
[L3794]              Balance[this] := 0;
[L3795]              _owner_Ownable[this] := null;
[L3809]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3810]  COND FALSE  !(revert)
[L3966]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3967]  COND FALSE  !(revert)
[L3970]  CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3946]              assume msgsender_MSG != null;
[L3947]              Balance[this] := 0;
[L3948]              paused_Pausable[this] := false;
[L3970]  RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3971]  COND FALSE  !(revert)
[L4596]  RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L4597]  COND FALSE  !(revert)
[L4600]  CALL        call PausableToken_PausableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4084]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3072]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3057]              assume msgsender_MSG != null;
[L3058]              Balance[this] := 0;
[L3072]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3073]  COND FALSE  !(revert)
[L4084]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4085]  COND FALSE  !(revert)
[L4088]  CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3118]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3072]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3057]              assume msgsender_MSG != null;
[L3058]              Balance[this] := 0;
[L3072]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3073]  COND FALSE  !(revert)
[L3118]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3119]  COND FALSE  !(revert)
[L3122]  CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3094]              assume msgsender_MSG != null;
[L3095]              Balance[this] := 0;
[L3096]              _balances_StandardToken[this] := zeroRefintArr();
[L3097]              sum__balances0[this] := 0;
[L3098]              _allowed_StandardToken[this] := zeroRefRefintArr();
[L3099]              sum__allowed1[this] := 0;
[L3100]              _totalSupply_StandardToken[this] := 0;
[L3122]  RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3123]  COND FALSE  !(revert)
[L4088]  RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4089]  COND FALSE  !(revert)
[L4092]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3809]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3793]              assume msgsender_MSG != null;
[L3794]              Balance[this] := 0;
[L3795]              _owner_Ownable[this] := null;
[L3809]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3810]  COND FALSE  !(revert)
[L4092]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L4093]  COND FALSE  !(revert)
[L4096]  CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L3966]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3809]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3793]              assume msgsender_MSG != null;
[L3794]              Balance[this] := 0;
[L3795]              _owner_Ownable[this] := null;
[L3809]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3810]  COND FALSE  !(revert)
[L3966]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3967]  COND FALSE  !(revert)
[L3970]  CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3946]              assume msgsender_MSG != null;
[L3947]              Balance[this] := 0;
[L3948]              paused_Pausable[this] := false;
[L3970]  RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3971]  COND FALSE  !(revert)
[L4096]  RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L4097]  COND FALSE  !(revert)
[L4100]  CALL        call PausableToken_PausableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4053]              assume msgsender_MSG != null;
[L4054]              Balance[this] := 0;
[L4100]  RET         call PausableToken_PausableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4101]  COND FALSE  !(revert)
[L4600]  RET         call PausableToken_PausableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4601]  COND FALSE  !(revert)
[L4604]  CALL        call LUCKYToken_LUCKYToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4523]              assume msgsender_MSG != null;
[L4524]              Balance[this] := 0;
[L4525]              name_LUCKYToken[this] := -927166810;
[L4526]              symbol_LUCKYToken[this] := -927166810;
[L4527]              decimals_LUCKYToken[this] := 18;
[L4528]              INIT_TOTALSUPPLY_LUCKYToken[this] := 10000000000;
[L4529]              __var_26 := ConstantToRef(625314775344980695514831456764478199936221022047);
[L4530]              _tokenOwner_LUCKYToken[this] := ConstantToRef(625314775344980695514831456764478199936221022047);
[L4532]              __var_25 := decimals_LUCKYToken[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4533]              _totalSupply_StandardToken[this] := nonlinearMul(INIT_TOTALSUPPLY_LUCKYToken[this], nonlinearPow(10, decimals_LUCKYToken[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4534]              _owner_Ownable[this] := _tokenOwner_LUCKYToken[this];
[L4535]              assert { :EventEmitted "OwnershipTransferred_LUCKYToken" } true;
[L4536]              sum__balances0[this] := sum__balances0[this] - _balances_StandardToken[this][_owner_Ownable[this]];
[L4537]              _balances_StandardToken[this][_owner_Ownable[this]] := _totalSupply_StandardToken[this];
[L4538]              sum__balances0[this] := sum__balances0[this] + _balances_StandardToken[this][_owner_Ownable[this]];
[L4539]              assert { :EventEmitted "Transfer_LUCKYToken" } true;
[L4604]  RET         call LUCKYToken_LUCKYToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4605]  COND FALSE  !(revert)
[L1876]  RET         call LUCKYToken_LUCKYToken__success(this, msgsender_MSG, msgvalue_MSG);
[L1877]              assume !revert && gas >= 0;
[L7264]  RET         call LUCKYToken_LUCKYToken(this, msgsender_MSG, msgvalue_MSG);
[L7265]              assume !revert && gas >= 0;
[L7268]  CALL        call CorralChoice_LUCKYToken(this);
[L7078]              havoc msgsender_MSG;
[L7079]              havoc msgvalue_MSG;
[L7080]              havoc choice;
[L7081]              havoc _to_s670;
[L7082]              havoc _value_s670;
[L7083]              havoc __ret_0_transfer;
[L7084]              havoc _spender_s709;
[L7085]              havoc _value_s709;
[L7086]              havoc __ret_0_approve;
[L7087]              havoc _from_s691;
[L7088]              havoc _to_s691;
[L7089]              havoc _value_s691;
[L7090]              havoc __ret_0_transferFrom;
[L7091]              havoc __ret_0_totalSupply;
[L7092]              havoc owner_s211;
[L7093]              havoc __ret_0_balanceOf;
[L7094]              havoc owner_s227;
[L7095]              havoc spender_s227;
[L7096]              havoc __ret_0_allowance;
[L7097]              havoc _spender_s727;
[L7098]              havoc _addedValue_s727;
[L7099]              havoc success_s727;
[L7100]              havoc _spender_s745;
[L7101]              havoc _subtractedValue_s745;
[L7102]              havoc success_s745;
[L7103]              havoc __ret_0_owner;
[L7104]              havoc __ret_0_isOwner;
[L7105]              havoc newOwner_s564;
[L7106]              havoc __ret_0_paused;
[L7107]              havoc amount_s764;
[L7108]              havoc account_s779;
[L7109]              havoc amount_s779;
[L7110]              havoc __ret_0_name;
[L7111]              havoc __ret_0_symbol;
[L7112]              havoc __ret_0_decimals;
[L7113]              havoc tmpNow;
[L7114]              havoc gas;
[L7115]              assume gas > 4000000 && gas <= 8000000;
[L7116]              tmpNow := now;
[L7117]              havoc now;
[L7118]              assume now > tmpNow;
[L7119]              assume msgsender_MSG != null;
[L7120]              assume DType[msgsender_MSG] != SafeMath;
[L7121]              assume DType[msgsender_MSG] != IERC20;
[L7122]              assume DType[msgsender_MSG] != StandardToken;
[L7123]              assume DType[msgsender_MSG] != Ownable;
[L7124]              assume DType[msgsender_MSG] != Pausable;
[L7125]              assume DType[msgsender_MSG] != PausableToken;
[L7126]              assume DType[msgsender_MSG] != BurnableToken;
[L7127]              assume DType[msgsender_MSG] != LUCKYToken;
[L7128]              Alloc[msgsender_MSG] := true;
[L7129]  COND FALSE  !(choice == 19)
[L7136]  COND FALSE  !(choice == 18)
[L7143]  COND FALSE  !(choice == 17)
[L7150]  COND FALSE  !(choice == 16)
[L7156]  COND FALSE  !(choice == 15)
[L7162]  COND FALSE  !(choice == 14)
[L7168]  COND FALSE  !(choice == 13)
[L7175]  COND FALSE  !(choice == 12)
[L7182]  COND FALSE  !(choice == 11)
[L7188]  COND FALSE  !(choice == 10)
[L7194]  COND FALSE  !(choice == 9)
[L7200]  COND FALSE  !(choice == 8)
[L7206]  COND FALSE  !(choice == 7)
[L7212]  COND FALSE  !(choice == 6)
[L7218]  COND FALSE  !(choice == 5)
[L7225]  COND TRUE   choice == 4
[L7226]              gas := gas - 21000;
[L7227]  COND TRUE   gas >= 0
[L7228]              assume amount_s779 >= 0 && amount_s779 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7229]              assume msgvalue_MSG == 0;
[L7230]  CALL        call burnFrom~address~uint256_BurnableToken(this, msgsender_MSG, msgvalue_MSG, account_s779, amount_s779);
[L1762]              havoc __exception;
[L1763]              revert := false;
[L1764]  COND FALSE  !(__exception)
[L1789]  CALL        call burnFrom~address~uint256_BurnableToken__success(this, msgsender_MSG, msgvalue_MSG, account_s779, amount_s779);
[L4477]  CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6200]  COND TRUE   DType[this] == LUCKYToken
[L6201]  CALL        call __var_13 := isOwner_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3835]              __ret_0_ := msgsender_MSG == _owner_Ownable[this];
[L6201]  RET         call __var_13 := isOwner_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6202]  COND FALSE  !(revert)
[L6228]  COND FALSE  !(!__var_13)
[L4477]  RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4478]  COND FALSE  !(revert)
[L4481]  COND TRUE   DType[this] == LUCKYToken
[L4482]  CALL        call _burnFrom~address~uint256_StandardToken__success(this, msgsender_MSG, msgvalue_MSG, account_s779, amount_s779);
[L3729]  COND TRUE   DType[this] == LUCKYToken
[L3730]  CALL        call _burn~address~uint256_StandardToken__success(this, msgsender_MSG, msgvalue_MSG, account_s514, amount_s514);
[L3651]              __var_9 := null;
[L3652]  COND FALSE  !(!(account_s486 != null))
[L3656]  CALL        call __var_10 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_StandardToken[this][account_s486], value_s486);
[L3013]  COND FALSE  !(!(b_s82 <= a_s82))
[L3017]              c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3018]              __ret_0_ := c_s82;
[L3656]  RET         call __var_10 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_StandardToken[this][account_s486], value_s486);
[L3657]  COND FALSE  !(revert)
[L3660]              sum__balances0[this] := sum__balances0[this] - _balances_StandardToken[this][account_s486];
[L3661]              _balances_StandardToken[this][account_s486] := __var_10;
[L3662]              sum__balances0[this] := sum__balances0[this] + _balances_StandardToken[this][account_s486];
[L3663]  CALL        call __var_11 := sub~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_StandardToken[this], value_s486);
[L3013]  COND FALSE  !(!(b_s82 <= a_s82))
[L3017]              c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3018]              __ret_0_ := c_s82;
[L3663]  RET         call __var_11 := sub~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_StandardToken[this], value_s486);
[L3664]  COND FALSE  !(revert)
[L3667]              _totalSupply_StandardToken[this] := __var_11;
[L3668]              assert { :EventEmitted "Transfer_StandardToken" } true;
[L3730]  RET         call _burn~address~uint256_StandardToken__success(this, msgsender_MSG, msgvalue_MSG, account_s514, amount_s514);
[L3731]  COND FALSE  !(revert)
[L3752]  CALL        call __var_12 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowed_StandardToken[this][account_s514][msgsender_MSG], amount_s514);
[L3013]  COND FALSE  !(!(b_s82 <= a_s82))
[L3017]              c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3018]              __ret_0_ := c_s82;
[L3752]  RET         call __var_12 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowed_StandardToken[this][account_s514][msgsender_MSG], amount_s514);
[L3753]  COND FALSE  !(revert)
[L3756]  COND TRUE   DType[this] == LUCKYToken
[L3757]  CALL        call _approve~address~address~uint256_StandardToken__success(this, msgsender_MSG, msgvalue_MSG, account_s514, msgsender_MSG, __var_12);
[L3606]              __var_7 := null;
[L3607]  COND FALSE  !(!(spender_s443 != null))
[L3611]              __var_8 := null;
[L3612]  COND FALSE  !(!(owner_s443 != null))
[L3616]              sum__allowed1[owner_s443] := sum__allowed1[owner_s443] - _allowed_StandardToken[this][owner_s443][spender_s443];
[L3617]              _allowed_StandardToken[this][owner_s443][spender_s443] := value_s443;
[L3618]              sum__allowed1[owner_s443] := sum__allowed1[owner_s443] + _allowed_StandardToken[this][owner_s443][spender_s443];
[L3619]              assert { :EventEmitted "Approval_StandardToken" } true;
[L3757]  RET         call _approve~address~address~uint256_StandardToken__success(this, msgsender_MSG, msgvalue_MSG, account_s514, msgsender_MSG, __var_12);
[L3758]  COND FALSE  !(revert)
[L4482]  RET         call _burnFrom~address~uint256_StandardToken__success(this, msgsender_MSG, msgvalue_MSG, account_s779, amount_s779);
[L4483]  COND FALSE  !(revert)
[L1789]  RET         call burnFrom~address~uint256_BurnableToken__success(this, msgsender_MSG, msgvalue_MSG, account_s779, amount_s779);
[L1790]              assume !revert && gas >= 0;
[L7230]  RET         call burnFrom~address~uint256_BurnableToken(this, msgsender_MSG, msgvalue_MSG, account_s779, amount_s779);
[L7268]  RET         call CorralChoice_LUCKYToken(this);
[L7268]  CALL        call CorralChoice_LUCKYToken(this);
[L7078]              havoc msgsender_MSG;
[L7079]              havoc msgvalue_MSG;
[L7080]              havoc choice;
[L7081]              havoc _to_s670;
[L7082]              havoc _value_s670;
[L7083]              havoc __ret_0_transfer;
[L7084]              havoc _spender_s709;
[L7085]              havoc _value_s709;
[L7086]              havoc __ret_0_approve;
[L7087]              havoc _from_s691;
[L7088]              havoc _to_s691;
[L7089]              havoc _value_s691;
[L7090]              havoc __ret_0_transferFrom;
[L7091]              havoc __ret_0_totalSupply;
[L7092]              havoc owner_s211;
[L7093]              havoc __ret_0_balanceOf;
[L7094]              havoc owner_s227;
[L7095]              havoc spender_s227;
[L7096]              havoc __ret_0_allowance;
[L7097]              havoc _spender_s727;
[L7098]              havoc _addedValue_s727;
[L7099]              havoc success_s727;
[L7100]              havoc _spender_s745;
[L7101]              havoc _subtractedValue_s745;
[L7102]              havoc success_s745;
[L7103]              havoc __ret_0_owner;
[L7104]              havoc __ret_0_isOwner;
[L7105]              havoc newOwner_s564;
[L7106]              havoc __ret_0_paused;
[L7107]              havoc amount_s764;
[L7108]              havoc account_s779;
[L7109]              havoc amount_s779;
[L7110]              havoc __ret_0_name;
[L7111]              havoc __ret_0_symbol;
[L7112]              havoc __ret_0_decimals;
[L7113]              havoc tmpNow;
[L7114]              havoc gas;
[L7115]              assume gas > 4000000 && gas <= 8000000;
[L7116]              tmpNow := now;
[L7117]              havoc now;
[L7118]              assume now > tmpNow;
[L7119]              assume msgsender_MSG != null;
[L7120]              assume DType[msgsender_MSG] != SafeMath;
[L7121]              assume DType[msgsender_MSG] != IERC20;
[L7122]              assume DType[msgsender_MSG] != StandardToken;
[L7123]              assume DType[msgsender_MSG] != Ownable;
[L7124]              assume DType[msgsender_MSG] != Pausable;
[L7125]              assume DType[msgsender_MSG] != PausableToken;
[L7126]              assume DType[msgsender_MSG] != BurnableToken;
[L7127]              assume DType[msgsender_MSG] != LUCKYToken;
[L7128]              Alloc[msgsender_MSG] := true;
[L7129]  COND FALSE  !(choice == 19)
[L7136]  COND FALSE  !(choice == 18)
[L7143]  COND TRUE   choice == 17
[L7144]              gas := gas - 21000;
[L7145]  COND TRUE   gas >= 0
[L7146]              assume _value_s691 >= 0 && _value_s691 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7147]              assume msgvalue_MSG == 0;
[L7148]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_PausableToken(this, msgsender_MSG, msgvalue_MSG, _from_s691, _to_s691, _value_s691);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((((_from_s691 != _to_s691 && ((_value_s691 > _balances_StandardToken[this][_from_s691] || _value_s691 > _allowed_StandardToken[this][_from_s691][msgsender_MSG]) || _balances_StandardToken[this][_to_s691] + _value_s691 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && _value_s691 >= 0) && _value_s691 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_StandardToken[this][_to_s691] >= 0) && _balances_StandardToken[this][_to_s691] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_StandardToken[this][_from_s691] >= 0) && _balances_StandardToken[this][_from_s691] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowed_StandardToken[this][_from_s691][msgsender_MSG] >= 0) && _allowed_StandardToken[this][_from_s691][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transferFrom_PausableToken0 := true;
[L2]                 call_transferFrom_PausableToken0 := false;
[L2]                 revert := revert_hold;
[L1391]              havoc __exception;
[L1392]              revert := false;
[L1393]  COND FALSE  !(__exception)
[L1418]  CALL        call __ret_0_ := transferFrom~address~address~uint256_PausableToken__success(this, msgsender_MSG, msgvalue_MSG, _from_s691, _to_s691, _value_s691);
[L4185]  CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6244]  COND FALSE  !(!!paused_Pausable[this])
[L4185]  RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4186]  COND FALSE  !(revert)
[L4189]  COND TRUE   DType[this] == LUCKYToken
[L4190]  CALL        call __var_17 := transferFrom~address~address~uint256_StandardToken__success(this, msgsender_MSG, msgvalue_MSG, _from_s691, _to_s691, _value_s691);
[L3340]  COND TRUE   DType[this] == LUCKYToken
[L3341]  CALL        call _transfer~address~address~uint256_StandardToken__success(this, msgsender_MSG, msgvalue_MSG, from_s300, to_s300, value_s300);
[L3561]              __var_4 := null;
[L3562]  COND FALSE  !(!(to_s401 != null))
[L3566]  CALL        call __var_5 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_StandardToken[this][from_s401], value_s401);
[L3013]  COND FALSE  !(!(b_s82 <= a_s82))
[L3017]              c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3018]              __ret_0_ := c_s82;
[L3566]  RET         call __var_5 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_StandardToken[this][from_s401], value_s401);
[L3567]  COND FALSE  !(revert)
[L3570]              sum__balances0[this] := sum__balances0[this] - _balances_StandardToken[this][from_s401];
[L3571]              _balances_StandardToken[this][from_s401] := __var_5;
[L3572]              sum__balances0[this] := sum__balances0[this] + _balances_StandardToken[this][from_s401];
[L3573]  CALL        call __var_6 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_StandardToken[this][to_s401], value_s401);
[L3037]              c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3038]  COND FALSE  !(!(c_s106 >= a_s106))
[L3042]              __ret_0_ := c_s106;
[L3573]  RET         call __var_6 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_StandardToken[this][to_s401], value_s401);
[L3574]  COND FALSE  !(revert)
[L3577]              sum__balances0[this] := sum__balances0[this] - _balances_StandardToken[this][to_s401];
[L3578]              _balances_StandardToken[this][to_s401] := __var_6;
[L3579]              sum__balances0[this] := sum__balances0[this] + _balances_StandardToken[this][to_s401];
[L3580]              assert { :EventEmitted "Transfer_StandardToken" } true;
[L3341]  RET         call _transfer~address~address~uint256_StandardToken__success(this, msgsender_MSG, msgvalue_MSG, from_s300, to_s300, value_s300);
[L3342]  COND FALSE  !(revert)
[L3363]  CALL        call __var_1 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowed_StandardToken[this][from_s300][msgsender_MSG], value_s300);
[L3013]  COND FALSE  !(!(b_s82 <= a_s82))
[L3017]              c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3018]              __ret_0_ := c_s82;
[L3363]  RET         call __var_1 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowed_StandardToken[this][from_s300][msgsender_MSG], value_s300);
[L3364]  COND FALSE  !(revert)
[L3367]  COND TRUE   DType[this] == LUCKYToken
[L3368]  CALL        call _approve~address~address~uint256_StandardToken__success(this, msgsender_MSG, msgvalue_MSG, from_s300, msgsender_MSG, __var_1);
[L3606]              __var_7 := null;
[L3607]  COND FALSE  !(!(spender_s443 != null))
[L3611]              __var_8 := null;
[L3612]  COND FALSE  !(!(owner_s443 != null))
[L3616]              sum__allowed1[owner_s443] := sum__allowed1[owner_s443] - _allowed_StandardToken[this][owner_s443][spender_s443];
[L3617]              _allowed_StandardToken[this][owner_s443][spender_s443] := value_s443;
[L3618]              sum__allowed1[owner_s443] := sum__allowed1[owner_s443] + _allowed_StandardToken[this][owner_s443][spender_s443];
[L3619]              assert { :EventEmitted "Approval_StandardToken" } true;
[L3368]  RET         call _approve~address~address~uint256_StandardToken__success(this, msgsender_MSG, msgvalue_MSG, from_s300, msgsender_MSG, __var_1);
[L3369]  COND FALSE  !(revert)
[L3390]              __ret_0_ := true;
[L4190]  RET         call __var_17 := transferFrom~address~address~uint256_StandardToken__success(this, msgsender_MSG, msgvalue_MSG, _from_s691, _to_s691, _value_s691);
[L4191]  COND FALSE  !(revert)
[L4202]              __ret_0_ := __var_17;
[L1418]  RET         call __ret_0_ := transferFrom~address~address~uint256_PausableToken__success(this, msgsender_MSG, msgvalue_MSG, _from_s691, _to_s691, _value_s691);
[L1419]              assume !revert && gas >= 0;
[L7148]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_PausableToken(this, msgsender_MSG, msgvalue_MSG, _from_s691, _to_s691, _value_s691);
[L7268]  RET         call CorralChoice_LUCKYToken(this);

Loop:
[L7268]  CALL        call CorralChoice_LUCKYToken(this);
[L7078]              havoc msgsender_MSG;
[L7079]              havoc msgvalue_MSG;
[L7080]              havoc choice;
[L7081]              havoc _to_s670;
[L7082]              havoc _value_s670;
[L7083]              havoc __ret_0_transfer;
[L7084]              havoc _spender_s709;
[L7085]              havoc _value_s709;
[L7086]              havoc __ret_0_approve;
[L7087]              havoc _from_s691;
[L7088]              havoc _to_s691;
[L7089]              havoc _value_s691;
[L7090]              havoc __ret_0_transferFrom;
[L7091]              havoc __ret_0_totalSupply;
[L7092]              havoc owner_s211;
[L7093]              havoc __ret_0_balanceOf;
[L7094]              havoc owner_s227;
[L7095]              havoc spender_s227;
[L7096]              havoc __ret_0_allowance;
[L7097]              havoc _spender_s727;
[L7098]              havoc _addedValue_s727;
[L7099]              havoc success_s727;
[L7100]              havoc _spender_s745;
[L7101]              havoc _subtractedValue_s745;
[L7102]              havoc success_s745;
[L7103]              havoc __ret_0_owner;
[L7104]              havoc __ret_0_isOwner;
[L7105]              havoc newOwner_s564;
[L7106]              havoc __ret_0_paused;
[L7107]              havoc amount_s764;
[L7108]              havoc account_s779;
[L7109]              havoc amount_s779;
[L7110]              havoc __ret_0_name;
[L7111]              havoc __ret_0_symbol;
[L7112]              havoc __ret_0_decimals;
[L7113]              havoc tmpNow;
[L7114]              havoc gas;
[L7115]              assume gas > 4000000 && gas <= 8000000;
[L7116]              tmpNow := now;
[L7117]              havoc now;
[L7118]              assume now > tmpNow;
[L7119]              assume msgsender_MSG != null;
[L7120]              assume DType[msgsender_MSG] != SafeMath;
[L7121]              assume DType[msgsender_MSG] != IERC20;
[L7122]              assume DType[msgsender_MSG] != StandardToken;
[L7123]              assume DType[msgsender_MSG] != Ownable;
[L7124]              assume DType[msgsender_MSG] != Pausable;
[L7125]              assume DType[msgsender_MSG] != PausableToken;
[L7126]              assume DType[msgsender_MSG] != BurnableToken;
[L7127]              assume DType[msgsender_MSG] != LUCKYToken;
[L7128]              Alloc[msgsender_MSG] := true;
[L7129]  COND FALSE  !(choice == 19)
[L7136]  COND FALSE  !(choice == 18)
[L7143]  COND TRUE   choice == 17
[L7144]              gas := gas - 21000;
[L7145]  COND TRUE   gas >= 0
[L7146]              assume _value_s691 >= 0 && _value_s691 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7147]              assume msgvalue_MSG == 0;
[L7148]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_PausableToken(this, msgsender_MSG, msgvalue_MSG, _from_s691, _to_s691, _value_s691);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((((_from_s691 != _to_s691 && ((_value_s691 > _balances_StandardToken[this][_from_s691] || _value_s691 > _allowed_StandardToken[this][_from_s691][msgsender_MSG]) || _balances_StandardToken[this][_to_s691] + _value_s691 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && _value_s691 >= 0) && _value_s691 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_StandardToken[this][_to_s691] >= 0) && _balances_StandardToken[this][_to_s691] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_StandardToken[this][_from_s691] >= 0) && _balances_StandardToken[this][_from_s691] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowed_StandardToken[this][_from_s691][msgsender_MSG] >= 0) && _allowed_StandardToken[this][_from_s691][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transferFrom_PausableToken0 := true;
[L2]                 call_transferFrom_PausableToken0 := false;
[L2]                 revert := revert_hold;
[L1391]              havoc __exception;
[L1392]              revert := false;
[L1393]  COND FALSE  !(__exception)
[L1418]  CALL        call __ret_0_ := transferFrom~address~address~uint256_PausableToken__success(this, msgsender_MSG, msgvalue_MSG, _from_s691, _to_s691, _value_s691);
[L4185]  CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6244]  COND FALSE  !(!!paused_Pausable[this])
[L4185]  RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4186]  COND FALSE  !(revert)
[L4189]  COND TRUE   DType[this] == LUCKYToken
[L4190]  CALL        call __var_17 := transferFrom~address~address~uint256_StandardToken__success(this, msgsender_MSG, msgvalue_MSG, _from_s691, _to_s691, _value_s691);
[L3340]  COND TRUE   DType[this] == LUCKYToken
[L3341]  CALL        call _transfer~address~address~uint256_StandardToken__success(this, msgsender_MSG, msgvalue_MSG, from_s300, to_s300, value_s300);
[L3561]              __var_4 := null;
[L3562]  COND FALSE  !(!(to_s401 != null))
[L3566]  CALL        call __var_5 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_StandardToken[this][from_s401], value_s401);
[L3013]  COND FALSE  !(!(b_s82 <= a_s82))
[L3017]              c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3018]              __ret_0_ := c_s82;
[L3566]  RET         call __var_5 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_StandardToken[this][from_s401], value_s401);
[L3567]  COND FALSE  !(revert)
[L3570]              sum__balances0[this] := sum__balances0[this] - _balances_StandardToken[this][from_s401];
[L3571]              _balances_StandardToken[this][from_s401] := __var_5;
[L3572]              sum__balances0[this] := sum__balances0[this] + _balances_StandardToken[this][from_s401];
[L3573]  CALL        call __var_6 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_StandardToken[this][to_s401], value_s401);
[L3037]              c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3038]  COND FALSE  !(!(c_s106 >= a_s106))
[L3042]              __ret_0_ := c_s106;
[L3573]  RET         call __var_6 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_StandardToken[this][to_s401], value_s401);
[L3574]  COND FALSE  !(revert)
[L3577]              sum__balances0[this] := sum__balances0[this] - _balances_StandardToken[this][to_s401];
[L3578]              _balances_StandardToken[this][to_s401] := __var_6;
[L3579]              sum__balances0[this] := sum__balances0[this] + _balances_StandardToken[this][to_s401];
[L3580]              assert { :EventEmitted "Transfer_StandardToken" } true;
[L3341]  RET         call _transfer~address~address~uint256_StandardToken__success(this, msgsender_MSG, msgvalue_MSG, from_s300, to_s300, value_s300);
[L3342]  COND FALSE  !(revert)
[L3363]  CALL        call __var_1 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowed_StandardToken[this][from_s300][msgsender_MSG], value_s300);
[L3013]  COND FALSE  !(!(b_s82 <= a_s82))
[L3017]              c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3018]              __ret_0_ := c_s82;
[L3363]  RET         call __var_1 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowed_StandardToken[this][from_s300][msgsender_MSG], value_s300);
[L3364]  COND FALSE  !(revert)
[L3367]  COND TRUE   DType[this] == LUCKYToken
[L3368]  CALL        call _approve~address~address~uint256_StandardToken__success(this, msgsender_MSG, msgvalue_MSG, from_s300, msgsender_MSG, __var_1);
[L3606]              __var_7 := null;
[L3607]  COND FALSE  !(!(spender_s443 != null))
[L3611]              __var_8 := null;
[L3612]  COND FALSE  !(!(owner_s443 != null))
[L3616]              sum__allowed1[owner_s443] := sum__allowed1[owner_s443] - _allowed_StandardToken[this][owner_s443][spender_s443];
[L3617]              _allowed_StandardToken[this][owner_s443][spender_s443] := value_s443;
[L3618]              sum__allowed1[owner_s443] := sum__allowed1[owner_s443] + _allowed_StandardToken[this][owner_s443][spender_s443];
[L3619]              assert { :EventEmitted "Approval_StandardToken" } true;
[L3368]  RET         call _approve~address~address~uint256_StandardToken__success(this, msgsender_MSG, msgvalue_MSG, from_s300, msgsender_MSG, __var_1);
[L3369]  COND FALSE  !(revert)
[L3390]              __ret_0_ := true;
[L4190]  RET         call __var_17 := transferFrom~address~address~uint256_StandardToken__success(this, msgsender_MSG, msgvalue_MSG, _from_s691, _to_s691, _value_s691);
[L4191]  COND FALSE  !(revert)
[L4202]              __ret_0_ := __var_17;
[L1418]  RET         call __ret_0_ := transferFrom~address~address~uint256_PausableToken__success(this, msgsender_MSG, msgvalue_MSG, _from_s691, _to_s691, _value_s691);
[L1419]              assume !revert && gas >= 0;
[L7148]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_PausableToken(this, msgsender_MSG, msgvalue_MSG, _from_s691, _to_s691, _value_s691);
[L7268]  RET         call CorralChoice_LUCKYToken(this);

[2020-11-24 20:43:04,357 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-24 20:43:04,357 INFO  L82        PathProgramCache]: Analyzing trace with hash 67901096, now seen corresponding path program 1 times
[2020-11-24 20:43:04,357 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-24 20:43:04,394 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-24 20:43:04,656 INFO  L134       CoverageAnalysis]: Checked inductivity of 408 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 408 trivial. 0 not checked.
[2020-11-24 20:43:04,656 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-24 20:43:04,657 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [16] imperfect sequences [] total 16
[2020-11-24 20:43:04,657 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-24 20:43:04,657 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 16 interpolants.
[2020-11-24 20:43:04,657 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=36, Invalid=204, Unknown=0, NotChecked=0, Total=240
[2020-11-24 20:43:04,657 INFO  L87              Difference]: Start difference. First operand 4127 states and 4775 transitions. cyclomatic complexity: 653 Second operand 16 states.
[2020-11-24 20:43:07,502 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-24 20:43:07,502 INFO  L93              Difference]: Finished difference Result 2369 states and 2733 transitions.
[2020-11-24 20:43:07,503 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 16 states. 
[2020-11-24 20:43:07,503 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2369 states and 2733 transitions.
[2020-11-24 20:43:07,506 INFO  L131   ngComponentsAnalysis]: Automaton has 0 accepting balls. 0
[2020-11-24 20:43:07,506 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2369 states to 0 states and 0 transitions.
[2020-11-24 20:43:07,506 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 0
[2020-11-24 20:43:07,506 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 0
[2020-11-24 20:43:07,506 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 0 states and 0 transitions.
[2020-11-24 20:43:07,506 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-24 20:43:07,506 INFO  L728         BuchiCegarLoop]: Abstraction has 0 states and 0 transitions.
[2020-11-24 20:43:07,506 INFO  L751         BuchiCegarLoop]: Abstraction has 0 states and 0 transitions.
[2020-11-24 20:43:07,506 INFO  L631         BuchiCegarLoop]: Abstraction has 0 states and 0 transitions.
[2020-11-24 20:43:07,507 INFO  L445         BuchiCegarLoop]: ======== Iteration 9============
[2020-11-24 20:43:07,507 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 0 states and 0 transitions.
[2020-11-24 20:43:07,507 INFO  L131   ngComponentsAnalysis]: Automaton has 0 accepting balls. 0
[2020-11-24 20:43:07,507 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is true
[2020-11-24 20:43:07,510 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer CFG 24.11 08:43:07 BasicIcfg
[2020-11-24 20:43:07,510 INFO  L132        PluginConnector]: ------------------------ END BuchiAutomizer----------------------------
[2020-11-24 20:43:07,510 INFO  L168              Benchmark]: Toolchain (without parser) took 20506.63 ms. Allocated memory was 1.0 GB in the beginning and 2.3 GB in the end (delta: 1.3 GB). Free memory was 929.8 MB in the beginning and 2.1 GB in the end (delta: -1.2 GB). Peak memory consumption was 79.9 MB. Max. memory is 15.3 GB.
[2020-11-24 20:43:07,511 INFO  L168              Benchmark]: Boogie PL CUP Parser took 0.17 ms. Allocated memory is still 1.0 GB. Free memory is still 951.3 MB. There was no memory consumed. Max. memory is 15.3 GB.
[2020-11-24 20:43:07,511 INFO  L168              Benchmark]: Boogie Preprocessor took 138.15 ms. Allocated memory is still 1.0 GB. Free memory was 929.8 MB in the beginning and 913.6 MB in the end (delta: 16.2 MB). Peak memory consumption was 16.2 MB. Max. memory is 15.3 GB.
[2020-11-24 20:43:07,511 INFO  L168              Benchmark]: UtopiaSpecLang took 69.97 ms. Allocated memory is still 1.0 GB. Free memory was 913.6 MB in the beginning and 908.3 MB in the end (delta: 5.4 MB). Peak memory consumption was 5.4 MB. Max. memory is 15.3 GB.
[2020-11-24 20:43:07,512 INFO  L168              Benchmark]: Boogie Printer took 22.32 ms. Allocated memory is still 1.0 GB. Free memory was 908.3 MB in the beginning and 902.9 MB in the end (delta: 5.4 MB). Peak memory consumption was 5.4 MB. Max. memory is 15.3 GB.
[2020-11-24 20:43:07,512 INFO  L168              Benchmark]: RCFGBuilder took 1081.68 ms. Allocated memory was 1.0 GB in the beginning and 1.1 GB in the end (delta: 57.1 MB). Free memory was 902.9 MB in the beginning and 970.4 MB in the end (delta: -67.5 MB). Peak memory consumption was 190.7 MB. Max. memory is 15.3 GB.
[2020-11-24 20:43:07,512 INFO  L168              Benchmark]: UtopiaLTL2Aut took 39.19 ms. Allocated memory is still 1.1 GB. Free memory was 970.4 MB in the beginning and 967.0 MB in the end (delta: 3.4 MB). Peak memory consumption was 3.4 MB. Max. memory is 15.3 GB.
[2020-11-24 20:43:07,513 INFO  L168              Benchmark]: BÃ¼chi Program Product took 1849.14 ms. Allocated memory was 1.1 GB in the beginning and 1.3 GB in the end (delta: 167.2 MB). Free memory was 967.0 MB in the beginning and 810.1 MB in the end (delta: 157.0 MB). Peak memory consumption was 466.0 MB. Max. memory is 15.3 GB.
[2020-11-24 20:43:07,513 INFO  L168              Benchmark]: BlockEncodingV2 took 185.01 ms. Allocated memory is still 1.3 GB. Free memory was 810.1 MB in the beginning and 697.7 MB in the end (delta: 112.4 MB). Peak memory consumption was 112.4 MB. Max. memory is 15.3 GB.
[2020-11-24 20:43:07,513 INFO  L168              Benchmark]: BuchiAutomizer took 17118.05 ms. Allocated memory was 1.3 GB in the beginning and 2.3 GB in the end (delta: 1.1 GB). Free memory was 697.7 MB in the beginning and 2.1 GB in the end (delta: -1.4 GB). There was no memory consumed. Max. memory is 15.3 GB.
[2020-11-24 20:43:07,517 INFO  L337   ainManager$Toolchain]: #######################  End [Toolchain 1] #######################
 --- Results ---
 * Results from de.uni_freiburg.informatik.ultimate.plugins.blockencoding:
  - StatisticsResult: Initial Icfg
    6834 locations, 12825 edges
  - StatisticsResult: Encoded RCFG
    6691 locations, 12448 edges
 * Results from de.uni_freiburg.informatik.ultimate.core:
  - StatisticsResult: Toolchain Benchmarks
    Benchmark results are:
 * Boogie PL CUP Parser took 0.17 ms. Allocated memory is still 1.0 GB. Free memory is still 951.3 MB. There was no memory consumed. Max. memory is 15.3 GB.
 * Boogie Preprocessor took 138.15 ms. Allocated memory is still 1.0 GB. Free memory was 929.8 MB in the beginning and 913.6 MB in the end (delta: 16.2 MB). Peak memory consumption was 16.2 MB. Max. memory is 15.3 GB.
 * UtopiaSpecLang took 69.97 ms. Allocated memory is still 1.0 GB. Free memory was 913.6 MB in the beginning and 908.3 MB in the end (delta: 5.4 MB). Peak memory consumption was 5.4 MB. Max. memory is 15.3 GB.
 * Boogie Printer took 22.32 ms. Allocated memory is still 1.0 GB. Free memory was 908.3 MB in the beginning and 902.9 MB in the end (delta: 5.4 MB). Peak memory consumption was 5.4 MB. Max. memory is 15.3 GB.
 * RCFGBuilder took 1081.68 ms. Allocated memory was 1.0 GB in the beginning and 1.1 GB in the end (delta: 57.1 MB). Free memory was 902.9 MB in the beginning and 970.4 MB in the end (delta: -67.5 MB). Peak memory consumption was 190.7 MB. Max. memory is 15.3 GB.
 * UtopiaLTL2Aut took 39.19 ms. Allocated memory is still 1.1 GB. Free memory was 970.4 MB in the beginning and 967.0 MB in the end (delta: 3.4 MB). Peak memory consumption was 3.4 MB. Max. memory is 15.3 GB.
 * BÃ¼chi Program Product took 1849.14 ms. Allocated memory was 1.1 GB in the beginning and 1.3 GB in the end (delta: 167.2 MB). Free memory was 967.0 MB in the beginning and 810.1 MB in the end (delta: 157.0 MB). Peak memory consumption was 466.0 MB. Max. memory is 15.3 GB.
 * BlockEncodingV2 took 185.01 ms. Allocated memory is still 1.3 GB. Free memory was 810.1 MB in the beginning and 697.7 MB in the end (delta: 112.4 MB). Peak memory consumption was 112.4 MB. Max. memory is 15.3 GB.
 * BuchiAutomizer took 17118.05 ms. Allocated memory was 1.3 GB in the beginning and 2.3 GB in the end (delta: 1.1 GB). Free memory was 697.7 MB in the beginning and 2.1 GB in the end (delta: -1.4 GB). There was no memory consumed. Max. memory is 15.3 GB.
 * Results from de.uni_freiburg.informatik.ultimate.buchiprogramproduct:
  - StatisticsResult: Initial property automaton
    2 locations, 3 edges
  - StatisticsResult: Initial RCFG
    2614 locations, 3885 edges
  - StatisticsResult: BuchiProgram size
    6834 locations, 12825 edges
 * Results from de.uni_freiburg.informatik.ultimate.plugins.generator.traceabstraction:
  - StatisticsResult: Constructed decomposition of program
    Your program was decomposed into 8 terminating modules (8 trivial, 0 deterministic, 0 nondeterministic). 8 modules have a trivial ranking function, the largest among these consists of 23 locations.
  - StatisticsResult: Timing statistics
    BÃ¼chiAutomizer plugin needed 17.0s and 9 iterations.  TraceHistogramMax:6. Analysis of lassos took 2.0s. Construction of modules took 11.1s. BÃ¼chi inclusion checks took 3.0s. Highest rank in rank-based complementation 0. Minimization of det autom 8. Minimization of nondet autom 0. Automata minimization 0.3s AutomataMinimizationTime, 7 MinimizatonAttempts, 1418 StatesRemovedByMinimization, 5 NontrivialMinimizations. Non-live state removal took 0.2s Buchi closure took 0.0s. Biggest automaton had 4424 states and ocurred in iteration 2.	Nontrivial modules had stage [0, 0, 0, 0, 0].	InterpolantCoveringCapabilityFinite: 0/0	InterpolantCoveringCapabilityBuchi: 0/0	HoareTripleCheckerStatistics: 34201 SDtfs, 27431 SDslu, 92306 SDs, 0 SdLazy, 137188 SolverSat, 4891 SolverUnsat, 0 SolverUnknown, 0 SolverNotchecked, 11.1s Time	LassoAnalysisResults: nont0 unkn0 SFLI0 SFLT0 conc0 concLT0 SILN0 SILU8 SILI0 SILT0 lasso0 LassoPreprocessingBenchmarks: LassoTerminationAnalysisBenchmarks: not availableLassoTerminationAnalysisBenchmarks: LassoNonterminationAnalysisSatFixpoint: 0	LassoNonterminationAnalysisSatUnbounded: 0	LassoNonterminationAnalysisUnsat: 0	LassoNonterminationAnalysisUnknown: 0	LassoNonterminationAnalysisTime: 0.0s	
  - AllSpecificationsHoldResult: All specifications hold
    Buchi Automizer proved that the LTL property ! ( ( []( (call_transferFrom_PausableToken0) ==> ( <>(fail_transferFrom_PausableToken0) ) ) )) holds
RESULT: Ultimate proved your program to be correct!
Received shutdown request...
