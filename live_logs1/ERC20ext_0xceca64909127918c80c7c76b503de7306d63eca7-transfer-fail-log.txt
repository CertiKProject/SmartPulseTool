This is Ultimate 0.1.24-f1553f5-m
[2020-11-25 15:07:03,701 INFO  L170        SettingsManager]: Resetting all preferences to default values...
[2020-11-25 15:07:03,702 INFO  L174        SettingsManager]: Resetting UltimateCore preferences to default values
[2020-11-25 15:07:03,710 INFO  L177        SettingsManager]: Ultimate Commandline Interface provides no preferences, ignoring...
[2020-11-25 15:07:03,710 INFO  L174        SettingsManager]: Resetting Boogie Preprocessor preferences to default values
[2020-11-25 15:07:03,710 INFO  L174        SettingsManager]: Resetting Boogie Procedure Inliner preferences to default values
[2020-11-25 15:07:03,711 INFO  L174        SettingsManager]: Resetting Abstract Interpretation preferences to default values
[2020-11-25 15:07:03,712 INFO  L174        SettingsManager]: Resetting LassoRanker preferences to default values
[2020-11-25 15:07:03,714 INFO  L174        SettingsManager]: Resetting Reaching Definitions preferences to default values
[2020-11-25 15:07:03,714 INFO  L174        SettingsManager]: Resetting SyntaxChecker preferences to default values
[2020-11-25 15:07:03,715 INFO  L177        SettingsManager]: BÃ¼chi Program Product provides no preferences, ignoring...
[2020-11-25 15:07:03,715 INFO  L174        SettingsManager]: Resetting LTL2Aut preferences to default values
[2020-11-25 15:07:03,716 INFO  L174        SettingsManager]: Resetting PEA to Boogie preferences to default values
[2020-11-25 15:07:03,716 INFO  L174        SettingsManager]: Resetting BlockEncodingV2 preferences to default values
[2020-11-25 15:07:03,717 INFO  L174        SettingsManager]: Resetting ChcToBoogie preferences to default values
[2020-11-25 15:07:03,718 INFO  L174        SettingsManager]: Resetting AutomataScriptInterpreter preferences to default values
[2020-11-25 15:07:03,719 INFO  L174        SettingsManager]: Resetting BuchiAutomizer preferences to default values
[2020-11-25 15:07:03,720 INFO  L174        SettingsManager]: Resetting CACSL2BoogieTranslator preferences to default values
[2020-11-25 15:07:03,721 INFO  L174        SettingsManager]: Resetting CodeCheck preferences to default values
[2020-11-25 15:07:03,722 INFO  L174        SettingsManager]: Resetting InvariantSynthesis preferences to default values
[2020-11-25 15:07:03,723 INFO  L174        SettingsManager]: Resetting RCFGBuilder preferences to default values
[2020-11-25 15:07:03,723 INFO  L174        SettingsManager]: Resetting TraceAbstraction preferences to default values
[2020-11-25 15:07:03,724 INFO  L177        SettingsManager]: TraceAbstractionConcurrent provides no preferences, ignoring...
[2020-11-25 15:07:03,725 INFO  L177        SettingsManager]: TraceAbstractionWithAFAs provides no preferences, ignoring...
[2020-11-25 15:07:03,725 INFO  L174        SettingsManager]: Resetting TreeAutomizer preferences to default values
[2020-11-25 15:07:03,725 INFO  L174        SettingsManager]: Resetting IcfgToChc preferences to default values
[2020-11-25 15:07:03,725 INFO  L174        SettingsManager]: Resetting IcfgTransformer preferences to default values
[2020-11-25 15:07:03,726 INFO  L177        SettingsManager]: ReqToTest provides no preferences, ignoring...
[2020-11-25 15:07:03,726 INFO  L174        SettingsManager]: Resetting UtopiaLTL2Aut preferences to default values
[2020-11-25 15:07:03,726 INFO  L174        SettingsManager]: Resetting UtopiaSpecLang preferences to default values
[2020-11-25 15:07:03,726 INFO  L174        SettingsManager]: Resetting Boogie Printer preferences to default values
[2020-11-25 15:07:03,727 INFO  L174        SettingsManager]: Resetting ChcSmtPrinter preferences to default values
[2020-11-25 15:07:03,727 INFO  L174        SettingsManager]: Resetting ReqPrinter preferences to default values
[2020-11-25 15:07:03,727 INFO  L174        SettingsManager]: Resetting Witness Printer preferences to default values
[2020-11-25 15:07:03,728 INFO  L177        SettingsManager]: Boogie PL CUP Parser provides no preferences, ignoring...
[2020-11-25 15:07:03,728 INFO  L174        SettingsManager]: Resetting CDTParser preferences to default values
[2020-11-25 15:07:03,728 INFO  L177        SettingsManager]: AutomataScriptParser provides no preferences, ignoring...
[2020-11-25 15:07:03,728 INFO  L177        SettingsManager]: ReqParser provides no preferences, ignoring...
[2020-11-25 15:07:03,728 INFO  L174        SettingsManager]: Resetting SmtParser preferences to default values
[2020-11-25 15:07:03,729 INFO  L174        SettingsManager]: Resetting Witness Parser preferences to default values
[2020-11-25 15:07:03,729 INFO  L181        SettingsManager]: Finished resetting all preferences to default values...
[2020-11-25 15:07:03,729 INFO  L98         SettingsManager]: Beginning loading settings from /mnt/data0/jon/SmartPulseTool/SmartPulse/settings.epf
[2020-11-25 15:07:03,735 INFO  L110        SettingsManager]: Loading preferences was successful
[2020-11-25 15:07:03,735 INFO  L112        SettingsManager]: Preferences different from defaults after loading the file:
[2020-11-25 15:07:03,736 INFO  L131        SettingsManager]: Preferences of LTL2Aut differ from their defaults:
[2020-11-25 15:07:03,736 INFO  L133        SettingsManager]:  * Read property from file=true
[2020-11-25 15:07:03,736 INFO  L133        SettingsManager]:  * Path to LTL*BA executable (LTL2BA, LTL3BA)=/mnt/data0/jon/SmartPulseTool/ltl2ba
[2020-11-25 15:07:03,736 INFO  L131        SettingsManager]: Preferences of BlockEncodingV2 differ from their defaults:
[2020-11-25 15:07:03,736 INFO  L133        SettingsManager]:  * Maximize final states=false
[2020-11-25 15:07:03,736 INFO  L133        SettingsManager]:  * Minimize states even if more edges are added than removed.=true
[2020-11-25 15:07:03,736 INFO  L133        SettingsManager]:  * Minimize states using LBE with the strategy=NONE
[2020-11-25 15:07:03,737 INFO  L131        SettingsManager]: Preferences of BuchiAutomizer differ from their defaults:
[2020-11-25 15:07:03,737 INFO  L133        SettingsManager]:  * Compute Interpolants along a Counterexample=Craig_TreeInterpolation
[2020-11-25 15:07:03,737 INFO  L133        SettingsManager]:  * Use old map elimination=false
[2020-11-25 15:07:03,737 INFO  L133        SettingsManager]:  * Try twofold refinement=false
[2020-11-25 15:07:03,737 INFO  L131        SettingsManager]: Preferences of CACSL2BoogieTranslator differ from their defaults:
[2020-11-25 15:07:03,737 INFO  L133        SettingsManager]:  * Check unreachability of error function in SV-COMP mode=false
[2020-11-25 15:07:03,737 INFO  L133        SettingsManager]:  * Overapproximate operations on floating types=true
[2020-11-25 15:07:03,737 INFO  L133        SettingsManager]:  * Check division by zero=IGNORE
[2020-11-25 15:07:03,737 INFO  L133        SettingsManager]:  * Pointer to allocated memory at dereference=ASSUME
[2020-11-25 15:07:03,737 INFO  L133        SettingsManager]:  * If two pointers are subtracted or compared they have the same base address=ASSUME
[2020-11-25 15:07:03,738 INFO  L133        SettingsManager]:  * Check array bounds for arrays that are off heap=ASSUME
[2020-11-25 15:07:03,738 INFO  L133        SettingsManager]:  * Check if freed pointer was valid=false
[2020-11-25 15:07:03,738 INFO  L133        SettingsManager]:  * Use constant arrays=true
[2020-11-25 15:07:03,738 INFO  L133        SettingsManager]:  * Pointer base address is valid at dereference=ASSUME
[2020-11-25 15:07:03,738 INFO  L131        SettingsManager]: Preferences of RCFGBuilder differ from their defaults:
[2020-11-25 15:07:03,738 INFO  L133        SettingsManager]:  * Size of a code block=SingleStatement
[2020-11-25 15:07:03,738 INFO  L133        SettingsManager]:  * SMT solver=Internal_SMTInterpol
[2020-11-25 15:07:03,756 INFO  L81    nceAwareModelManager]: Repository-Root is: /tmp
[2020-11-25 15:07:03,768 INFO  L259   ainManager$Toolchain]: [Toolchain 1]: Applicable parser(s) successfully (re)initialized
[2020-11-25 15:07:03,770 INFO  L215   ainManager$Toolchain]: [Toolchain 1]: Toolchain selected.
[2020-11-25 15:07:03,771 INFO  L271        PluginConnector]: Initializing Boogie PL CUP Parser...
[2020-11-25 15:07:03,771 INFO  L276        PluginConnector]: Boogie PL CUP Parser initialized
[2020-11-25 15:07:03,771 INFO  L430   ainManager$Toolchain]: [Toolchain 1]: Parsing single file: /mnt/data0/jon/SmartPulseTool/ERC20ext_0xceca64909127918c80c7c76b503de7306d63eca7_transfer-fail.bpl
[2020-11-25 15:07:03,772 INFO  L111           BoogieParser]: Parsing: '/mnt/data0/jon/SmartPulseTool/ERC20ext_0xceca64909127918c80c7c76b503de7306d63eca7_transfer-fail.bpl'
[2020-11-25 15:07:03,836 INFO  L297   ainManager$Toolchain]: ####################### [Toolchain 1] #######################
[2020-11-25 15:07:03,837 INFO  L131        ToolchainWalker]: Walking toolchain with 8 elements.
[2020-11-25 15:07:03,837 INFO  L113        PluginConnector]: ------------------------Boogie Preprocessor----------------------------
[2020-11-25 15:07:03,838 INFO  L271        PluginConnector]: Initializing Boogie Preprocessor...
[2020-11-25 15:07:03,838 INFO  L276        PluginConnector]: Boogie Preprocessor initialized
[2020-11-25 15:07:03,853 INFO  L185        PluginConnector]: Executing the observer EnsureBoogieModelObserver from plugin Boogie Preprocessor for "ERC20ext_0xceca64909127918c80c7c76b503de7306d63eca7_transfer-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 03:07:03" (1/1) ...
[2020-11-25 15:07:03,854 INFO  L185        PluginConnector]: Executing the observer TypeChecker from plugin Boogie Preprocessor for "ERC20ext_0xceca64909127918c80c7c76b503de7306d63eca7_transfer-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 03:07:03" (1/1) ...
[2020-11-25 15:07:03,880 INFO  L185        PluginConnector]: Executing the observer ConstExpander from plugin Boogie Preprocessor for "ERC20ext_0xceca64909127918c80c7c76b503de7306d63eca7_transfer-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 03:07:03" (1/1) ...
[2020-11-25 15:07:03,881 INFO  L185        PluginConnector]: Executing the observer StructExpander from plugin Boogie Preprocessor for "ERC20ext_0xceca64909127918c80c7c76b503de7306d63eca7_transfer-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 03:07:03" (1/1) ...
[2020-11-25 15:07:03,902 INFO  L185        PluginConnector]: Executing the observer UnstructureCode from plugin Boogie Preprocessor for "ERC20ext_0xceca64909127918c80c7c76b503de7306d63eca7_transfer-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 03:07:03" (1/1) ...
[2020-11-25 15:07:03,910 INFO  L185        PluginConnector]: Executing the observer FunctionInliner from plugin Boogie Preprocessor for "ERC20ext_0xceca64909127918c80c7c76b503de7306d63eca7_transfer-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 03:07:03" (1/1) ...
[2020-11-25 15:07:03,917 INFO  L185        PluginConnector]: Executing the observer BoogieSymbolTableConstructor from plugin Boogie Preprocessor for "ERC20ext_0xceca64909127918c80c7c76b503de7306d63eca7_transfer-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 03:07:03" (1/1) ...
[2020-11-25 15:07:03,925 INFO  L132        PluginConnector]: ------------------------ END Boogie Preprocessor----------------------------
[2020-11-25 15:07:03,925 INFO  L113        PluginConnector]: ------------------------UtopiaSpecLang----------------------------
[2020-11-25 15:07:03,925 INFO  L271        PluginConnector]: Initializing UtopiaSpecLang...
[2020-11-25 15:07:03,927 INFO  L276        PluginConnector]: UtopiaSpecLang initialized
[2020-11-25 15:07:03,929 INFO  L185        PluginConnector]: Executing the observer UtopiaSpecLangObserver from plugin UtopiaSpecLang for "ERC20ext_0xceca64909127918c80c7c76b503de7306d63eca7_transfer-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 03:07:03" (1/1) ...
[2020-11-25 15:07:03,945 INFO  L1012  opiaSpecLangObserver]: Parsing LTLPlus Formula to AstNode: [](started(TokenERC20.transfer(to, value), msg.sender != to && (value > balanceOf_TokenERC20[this][msg.sender] || balanceOf_TokenERC20[this][to] + value >= 0x10000000000000000000000000000000000000000000000000000000000000000) && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && balanceOf_TokenERC20[this][to] >= 0 && balanceOf_TokenERC20[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && balanceOf_TokenERC20[this][msg.sender] >= 0 &&  balanceOf_TokenERC20[this][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(reverted(TokenERC20.transfer)))
[2020-11-25 15:07:03,949 INFO  L1016  opiaSpecLangObserver]: Successfully lexed: [](started(TokenERC20.transfer(to, value), msg.sender != to && (value > balanceOf_TokenERC20[this][msg.sender] || balanceOf_TokenERC20[this][to] + value >= 0x10000000000000000000000000000000000000000000000000000000000000000) && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && balanceOf_TokenERC20[this][to] >= 0 && balanceOf_TokenERC20[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && balanceOf_TokenERC20[this][msg.sender] >= 0 &&  balanceOf_TokenERC20[this][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(reverted(TokenERC20.transfer)))
[2020-11-25 15:07:03,954 INFO  L1018  opiaSpecLangObserver]: Successfully parsed: [](started(TokenERC20.transfer(to, value), msg.sender != to && (value > balanceOf_TokenERC20[this][msg.sender] || balanceOf_TokenERC20[this][to] + value >= 0x10000000000000000000000000000000000000000000000000000000000000000) && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && balanceOf_TokenERC20[this][to] >= 0 && balanceOf_TokenERC20[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && balanceOf_TokenERC20[this][msg.sender] >= 0 &&  balanceOf_TokenERC20[this][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(reverted(TokenERC20.transfer)))
[2020-11-25 15:07:03,960 INFO  L636   opiaSpecLangObserver]: Parsed ( ( ( ( ( ( ( msg.sender!=_to_s365 && ( _value_s365>balanceOf_TokenERC20[this][msg.sender] || ( balanceOf_TokenERC20[this][_to_s365] + _value_s365 )>=115792089237316195423570985008687907853269984665640564039457584007913129639936 ) ) && _value_s365>=0 ) && _value_s365<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) && balanceOf_TokenERC20[this][_to_s365]>=0 ) && balanceOf_TokenERC20[this][_to_s365]<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) && balanceOf_TokenERC20[this][msg.sender]>=0 ) && balanceOf_TokenERC20[this][msg.sender]<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) to BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[COMPNEQ,IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transfer~address~uint256_TokenERC20>],IdentifierExpression[_to_s365,<IMPLEMENTATION_INPARAM,transfer~address~uint256_TokenERC20>]],BinaryExpression[LOGICOR,BinaryExpression[COMPGT,IdentifierExpression[_value_s365,<IMPLEMENTATION_INPARAM,transfer~address~uint256_TokenERC20>],ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balanceOf_TokenERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_TokenERC20>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transfer~address~uint256_TokenERC20>]]]],BinaryExpression[COMPGEQ,BinaryExpression[ARITHPLUS,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balanceOf_TokenERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_TokenERC20>]]],[IdentifierExpression[_to_s365,<IMPLEMENTATION_INPARAM,transfer~address~uint256_TokenERC20>]]],IdentifierExpression[_value_s365,<IMPLEMENTATION_INPARAM,transfer~address~uint256_TokenERC20>]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]]],BinaryExpression[COMPGEQ,IdentifierExpression[_value_s365,<IMPLEMENTATION_INPARAM,transfer~address~uint256_TokenERC20>],IntegerLiteral[0]]],BinaryExpression[COMPLT,IdentifierExpression[_value_s365,<IMPLEMENTATION_INPARAM,transfer~address~uint256_TokenERC20>],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]],BinaryExpression[COMPGEQ,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balanceOf_TokenERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_TokenERC20>]]],[IdentifierExpression[_to_s365,<IMPLEMENTATION_INPARAM,transfer~address~uint256_TokenERC20>]]],IntegerLiteral[0]]],BinaryExpression[COMPLT,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balanceOf_TokenERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_TokenERC20>]]],[IdentifierExpression[_to_s365,<IMPLEMENTATION_INPARAM,transfer~address~uint256_TokenERC20>]]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]],BinaryExpression[COMPGEQ,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balanceOf_TokenERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_TokenERC20>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transfer~address~uint256_TokenERC20>]]],IntegerLiteral[0]]],BinaryExpression[COMPLT,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balanceOf_TokenERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_TokenERC20>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transfer~address~uint256_TokenERC20>]]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]]
[2020-11-25 15:07:03,966 INFO  L1005  opiaSpecLangObserver]: Compiling: [](started(TokenERC20.transfer(to, value), msg.sender != to && (value > balanceOf_TokenERC20[this][msg.sender] || balanceOf_TokenERC20[this][to] + value >= 0x10000000000000000000000000000000000000000000000000000000000000000) && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && balanceOf_TokenERC20[this][to] >= 0 && balanceOf_TokenERC20[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && balanceOf_TokenERC20[this][msg.sender] >= 0 &&  balanceOf_TokenERC20[this][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(reverted(TokenERC20.transfer)))
[2020-11-25 15:07:03,966 INFO  L1007  opiaSpecLangObserver]: Compiled to ( []( AP(call_transfer_TokenERC200) ==> ( <>AP(fail_transfer_TokenERC200) ) ) )
Executed UtopiaSpecLang
[2020-11-25 15:07:03,974 INFO  L202        PluginConnector]: Adding new model Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 03:07:03 PropertyContainer
[2020-11-25 15:07:03,974 INFO  L132        PluginConnector]: ------------------------ END UtopiaSpecLang----------------------------
[2020-11-25 15:07:03,974 INFO  L113        PluginConnector]: ------------------------Boogie Printer----------------------------
[2020-11-25 15:07:03,974 INFO  L271        PluginConnector]: Initializing Boogie Printer...
[2020-11-25 15:07:03,974 INFO  L276        PluginConnector]: Boogie Printer initialized
[2020-11-25 15:07:03,975 INFO  L185        PluginConnector]: Executing the observer BoogiePrinterObserver from plugin Boogie Printer for "ERC20ext_0xceca64909127918c80c7c76b503de7306d63eca7_transfer-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 03:07:03" (1/2) ...
[2020-11-25 15:07:03,975 INFO  L116   oogiePrinterObserver]: File already exists and will be overwritten: /tmp/boogiePrinter.bpl
[2020-11-25 15:07:03,975 INFO  L120   oogiePrinterObserver]: Writing to file /tmp/boogiePrinter.bpl
[2020-11-25 15:07:03,989 INFO  L185        PluginConnector]: Executing the observer BoogiePrinterObserver from plugin Boogie Printer for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 03:07:03" (2/2) ...
[2020-11-25 15:07:03,990 INFO  L132        PluginConnector]: ------------------------ END Boogie Printer----------------------------
[2020-11-25 15:07:03,990 INFO  L113        PluginConnector]: ------------------------RCFGBuilder----------------------------
[2020-11-25 15:07:03,990 INFO  L271        PluginConnector]: Initializing RCFGBuilder...
[2020-11-25 15:07:03,990 INFO  L276        PluginConnector]: RCFGBuilder initialized
[2020-11-25 15:07:03,990 INFO  L185        PluginConnector]: Executing the observer RCFGBuilderObserver from plugin RCFGBuilder for "ERC20ext_0xceca64909127918c80c7c76b503de7306d63eca7_transfer-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 03:07:03" (1/2) ...
[2020-11-25 15:07:04,025 INFO  L130     BoogieDeclarations]: Found specification of procedure FreshRefGenerator__success
[2020-11-25 15:07:04,025 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath_NoBaseCtor__success
[2020-11-25 15:07:04,025 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath
[2020-11-25 15:07:04,025 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath
[2020-11-25 15:07:04,025 INFO  L130     BoogieDeclarations]: Found specification of procedure add~uint256~uint256_SafeMath__success
[2020-11-25 15:07:04,026 INFO  L130     BoogieDeclarations]: Found specification of procedure sub~uint256~uint256_SafeMath__success
[2020-11-25 15:07:04,026 INFO  L130     BoogieDeclarations]: Found specification of procedure mul~uint256~uint256_SafeMath__success
[2020-11-25 15:07:04,026 INFO  L130     BoogieDeclarations]: Found specification of procedure div~uint256~uint256_SafeMath__success
[2020-11-25 15:07:04,026 INFO  L130     BoogieDeclarations]: Found specification of procedure mod~uint256~uint256_SafeMath__success
[2020-11-25 15:07:04,026 INFO  L130     BoogieDeclarations]: Found specification of procedure owned_owned_NoBaseCtor__success
[2020-11-25 15:07:04,026 INFO  L130     BoogieDeclarations]: Found specification of procedure owned_owned
[2020-11-25 15:07:04,026 INFO  L138     BoogieDeclarations]: Found implementation of procedure owned_owned
[2020-11-25 15:07:04,026 INFO  L130     BoogieDeclarations]: Found specification of procedure transferOwnership~address_owned
[2020-11-25 15:07:04,026 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferOwnership~address_owned
[2020-11-25 15:07:04,026 INFO  L130     BoogieDeclarations]: Found specification of procedure owner_owned
[2020-11-25 15:07:04,026 INFO  L138     BoogieDeclarations]: Found implementation of procedure owner_owned
[2020-11-25 15:07:04,026 INFO  L130     BoogieDeclarations]: Found specification of procedure tokenRecipient_tokenRecipient_NoBaseCtor__success
[2020-11-25 15:07:04,027 INFO  L130     BoogieDeclarations]: Found specification of procedure tokenRecipient_tokenRecipient
[2020-11-25 15:07:04,027 INFO  L138     BoogieDeclarations]: Found implementation of procedure tokenRecipient_tokenRecipient
[2020-11-25 15:07:04,027 INFO  L130     BoogieDeclarations]: Found specification of procedure receiveApproval~address~uint256~address~bytes_tokenRecipient
[2020-11-25 15:07:04,027 INFO  L130     BoogieDeclarations]: Found specification of procedure TokenERC20_TokenERC20_NoBaseCtor__success
[2020-11-25 15:07:04,027 INFO  L130     BoogieDeclarations]: Found specification of procedure TokenERC20_TokenERC20
[2020-11-25 15:07:04,027 INFO  L138     BoogieDeclarations]: Found implementation of procedure TokenERC20_TokenERC20
[2020-11-25 15:07:04,027 INFO  L130     BoogieDeclarations]: Found specification of procedure _transfer~address~address~uint256_TokenERC20__success
[2020-11-25 15:07:04,027 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_TokenERC20
[2020-11-25 15:07:04,027 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_TokenERC20
[2020-11-25 15:07:04,027 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_TokenERC20
[2020-11-25 15:07:04,027 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_TokenERC20
[2020-11-25 15:07:04,027 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_TokenERC20
[2020-11-25 15:07:04,027 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_TokenERC20
[2020-11-25 15:07:04,028 INFO  L130     BoogieDeclarations]: Found specification of procedure approveAndCall~address~uint256~bytes_TokenERC20
[2020-11-25 15:07:04,028 INFO  L138     BoogieDeclarations]: Found implementation of procedure approveAndCall~address~uint256~bytes_TokenERC20
[2020-11-25 15:07:04,028 INFO  L130     BoogieDeclarations]: Found specification of procedure burn~uint256_TokenERC20
[2020-11-25 15:07:04,028 INFO  L138     BoogieDeclarations]: Found implementation of procedure burn~uint256_TokenERC20
[2020-11-25 15:07:04,028 INFO  L130     BoogieDeclarations]: Found specification of procedure burnFrom~address~uint256_TokenERC20
[2020-11-25 15:07:04,028 INFO  L138     BoogieDeclarations]: Found implementation of procedure burnFrom~address~uint256_TokenERC20
[2020-11-25 15:07:04,028 INFO  L130     BoogieDeclarations]: Found specification of procedure name_TokenERC20
[2020-11-25 15:07:04,028 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_TokenERC20
[2020-11-25 15:07:04,028 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_TokenERC20
[2020-11-25 15:07:04,028 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_TokenERC20
[2020-11-25 15:07:04,028 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_TokenERC20
[2020-11-25 15:07:04,028 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_TokenERC20
[2020-11-25 15:07:04,028 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_TokenERC20
[2020-11-25 15:07:04,028 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_TokenERC20
[2020-11-25 15:07:04,029 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_TokenERC20
[2020-11-25 15:07:04,029 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_TokenERC20
[2020-11-25 15:07:04,029 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_TokenERC20
[2020-11-25 15:07:04,029 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_TokenERC20
[2020-11-25 15:07:04,029 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20ext_ERC20ext_NoBaseCtor__success
[2020-11-25 15:07:04,029 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20ext_ERC20ext
[2020-11-25 15:07:04,029 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20ext_ERC20ext
[2020-11-25 15:07:04,029 INFO  L130     BoogieDeclarations]: Found specification of procedure _transfer~address~address~uint256_ERC20ext__success
[2020-11-25 15:07:04,029 INFO  L130     BoogieDeclarations]: Found specification of procedure mintToken~address~uint256_ERC20ext
[2020-11-25 15:07:04,029 INFO  L138     BoogieDeclarations]: Found implementation of procedure mintToken~address~uint256_ERC20ext
[2020-11-25 15:07:04,029 INFO  L130     BoogieDeclarations]: Found specification of procedure freezeAccount~address~bool_ERC20ext
[2020-11-25 15:07:04,029 INFO  L138     BoogieDeclarations]: Found implementation of procedure freezeAccount~address~bool_ERC20ext
[2020-11-25 15:07:04,029 INFO  L130     BoogieDeclarations]: Found specification of procedure lock~address~uint256~uint256_ERC20ext
[2020-11-25 15:07:04,029 INFO  L138     BoogieDeclarations]: Found implementation of procedure lock~address~uint256~uint256_ERC20ext
[2020-11-25 15:07:04,030 INFO  L130     BoogieDeclarations]: Found specification of procedure frozenAccount~address_ERC20ext
[2020-11-25 15:07:04,030 INFO  L138     BoogieDeclarations]: Found implementation of procedure frozenAccount~address_ERC20ext
[2020-11-25 15:07:04,030 INFO  L130     BoogieDeclarations]: Found specification of procedure lockedAccount~address_ERC20ext
[2020-11-25 15:07:04,030 INFO  L138     BoogieDeclarations]: Found implementation of procedure lockedAccount~address_ERC20ext
[2020-11-25 15:07:04,030 INFO  L130     BoogieDeclarations]: Found specification of procedure lockedAmount~address_ERC20ext
[2020-11-25 15:07:04,030 INFO  L138     BoogieDeclarations]: Found implementation of procedure lockedAmount~address_ERC20ext
[2020-11-25 15:07:04,030 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackDispatch__success
[2020-11-25 15:07:04,030 INFO  L130     BoogieDeclarations]: Found specification of procedure Fallback_UnknownType__success
[2020-11-25 15:07:04,030 INFO  L130     BoogieDeclarations]: Found specification of procedure send__success
[2020-11-25 15:07:04,030 INFO  L130     BoogieDeclarations]: Found specification of procedure onlyOwner_pre__success
[2020-11-25 15:07:04,030 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_SafeMath
[2020-11-25 15:07:04,030 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_SafeMath
[2020-11-25 15:07:04,030 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_owned
[2020-11-25 15:07:04,030 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_owned
[2020-11-25 15:07:04,030 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_tokenRecipient
[2020-11-25 15:07:04,031 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_tokenRecipient
[2020-11-25 15:07:04,031 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_TokenERC20
[2020-11-25 15:07:04,031 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_TokenERC20
[2020-11-25 15:07:04,031 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_ERC20ext
[2020-11-25 15:07:04,031 INFO  L130     BoogieDeclarations]: Found specification of procedure main
[2020-11-25 15:07:04,031 INFO  L130     BoogieDeclarations]: Found specification of procedure FreshRefGenerator__fail
[2020-11-25 15:07:04,031 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath_NoBaseCtor__fail
[2020-11-25 15:07:04,031 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath__success
[2020-11-25 15:07:04,031 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath__fail
[2020-11-25 15:07:04,031 INFO  L130     BoogieDeclarations]: Found specification of procedure add~uint256~uint256_SafeMath__fail
[2020-11-25 15:07:04,031 INFO  L130     BoogieDeclarations]: Found specification of procedure sub~uint256~uint256_SafeMath__fail
[2020-11-25 15:07:04,031 INFO  L130     BoogieDeclarations]: Found specification of procedure mul~uint256~uint256_SafeMath__fail
[2020-11-25 15:07:04,031 INFO  L130     BoogieDeclarations]: Found specification of procedure div~uint256~uint256_SafeMath__fail
[2020-11-25 15:07:04,032 INFO  L130     BoogieDeclarations]: Found specification of procedure mod~uint256~uint256_SafeMath__fail
[2020-11-25 15:07:04,032 INFO  L130     BoogieDeclarations]: Found specification of procedure owned_owned_NoBaseCtor__fail
[2020-11-25 15:07:04,032 INFO  L130     BoogieDeclarations]: Found specification of procedure owned_owned__success
[2020-11-25 15:07:04,032 INFO  L130     BoogieDeclarations]: Found specification of procedure owned_owned__fail
[2020-11-25 15:07:04,032 INFO  L130     BoogieDeclarations]: Found specification of procedure transferOwnership~address_owned__success
[2020-11-25 15:07:04,032 INFO  L130     BoogieDeclarations]: Found specification of procedure transferOwnership~address_owned__fail
[2020-11-25 15:07:04,032 INFO  L130     BoogieDeclarations]: Found specification of procedure owner_owned__success
[2020-11-25 15:07:04,032 INFO  L130     BoogieDeclarations]: Found specification of procedure owner_owned__fail
[2020-11-25 15:07:04,032 INFO  L130     BoogieDeclarations]: Found specification of procedure tokenRecipient_tokenRecipient_NoBaseCtor__fail
[2020-11-25 15:07:04,032 INFO  L130     BoogieDeclarations]: Found specification of procedure tokenRecipient_tokenRecipient__success
[2020-11-25 15:07:04,032 INFO  L130     BoogieDeclarations]: Found specification of procedure tokenRecipient_tokenRecipient__fail
[2020-11-25 15:07:04,032 INFO  L130     BoogieDeclarations]: Found specification of procedure TokenERC20_TokenERC20_NoBaseCtor__fail
[2020-11-25 15:07:04,032 INFO  L130     BoogieDeclarations]: Found specification of procedure TokenERC20_TokenERC20__success
[2020-11-25 15:07:04,032 INFO  L130     BoogieDeclarations]: Found specification of procedure TokenERC20_TokenERC20__fail
[2020-11-25 15:07:04,032 INFO  L130     BoogieDeclarations]: Found specification of procedure _transfer~address~address~uint256_TokenERC20__fail
[2020-11-25 15:07:04,033 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_TokenERC20__success
[2020-11-25 15:07:04,033 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_TokenERC20__fail
[2020-11-25 15:07:04,033 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_TokenERC20__success
[2020-11-25 15:07:04,033 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_TokenERC20__fail
[2020-11-25 15:07:04,033 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_TokenERC20__success
[2020-11-25 15:07:04,033 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_TokenERC20__fail
[2020-11-25 15:07:04,033 INFO  L130     BoogieDeclarations]: Found specification of procedure approveAndCall~address~uint256~bytes_TokenERC20__success
[2020-11-25 15:07:04,033 INFO  L130     BoogieDeclarations]: Found specification of procedure approveAndCall~address~uint256~bytes_TokenERC20__fail
[2020-11-25 15:07:04,033 INFO  L130     BoogieDeclarations]: Found specification of procedure burn~uint256_TokenERC20__success
[2020-11-25 15:07:04,033 INFO  L130     BoogieDeclarations]: Found specification of procedure burn~uint256_TokenERC20__fail
[2020-11-25 15:07:04,033 INFO  L130     BoogieDeclarations]: Found specification of procedure burnFrom~address~uint256_TokenERC20__success
[2020-11-25 15:07:04,033 INFO  L130     BoogieDeclarations]: Found specification of procedure burnFrom~address~uint256_TokenERC20__fail
[2020-11-25 15:07:04,033 INFO  L130     BoogieDeclarations]: Found specification of procedure name_TokenERC20__success
[2020-11-25 15:07:04,033 INFO  L130     BoogieDeclarations]: Found specification of procedure name_TokenERC20__fail
[2020-11-25 15:07:04,034 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_TokenERC20__success
[2020-11-25 15:07:04,034 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_TokenERC20__fail
[2020-11-25 15:07:04,034 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_TokenERC20__success
[2020-11-25 15:07:04,034 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_TokenERC20__fail
[2020-11-25 15:07:04,034 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_TokenERC20__success
[2020-11-25 15:07:04,034 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_TokenERC20__fail
[2020-11-25 15:07:04,034 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_TokenERC20__success
[2020-11-25 15:07:04,034 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_TokenERC20__fail
[2020-11-25 15:07:04,034 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_TokenERC20__success
[2020-11-25 15:07:04,034 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_TokenERC20__fail
[2020-11-25 15:07:04,034 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20ext_ERC20ext_NoBaseCtor__fail
[2020-11-25 15:07:04,034 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20ext_ERC20ext__success
[2020-11-25 15:07:04,034 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20ext_ERC20ext__fail
[2020-11-25 15:07:04,035 INFO  L130     BoogieDeclarations]: Found specification of procedure _transfer~address~address~uint256_ERC20ext__fail
[2020-11-25 15:07:04,035 INFO  L130     BoogieDeclarations]: Found specification of procedure mintToken~address~uint256_ERC20ext__success
[2020-11-25 15:07:04,035 INFO  L130     BoogieDeclarations]: Found specification of procedure mintToken~address~uint256_ERC20ext__fail
[2020-11-25 15:07:04,035 INFO  L130     BoogieDeclarations]: Found specification of procedure freezeAccount~address~bool_ERC20ext__success
[2020-11-25 15:07:04,035 INFO  L130     BoogieDeclarations]: Found specification of procedure freezeAccount~address~bool_ERC20ext__fail
[2020-11-25 15:07:04,035 INFO  L130     BoogieDeclarations]: Found specification of procedure lock~address~uint256~uint256_ERC20ext__success
[2020-11-25 15:07:04,035 INFO  L130     BoogieDeclarations]: Found specification of procedure lock~address~uint256~uint256_ERC20ext__fail
[2020-11-25 15:07:04,035 INFO  L130     BoogieDeclarations]: Found specification of procedure frozenAccount~address_ERC20ext__success
[2020-11-25 15:07:04,035 INFO  L130     BoogieDeclarations]: Found specification of procedure frozenAccount~address_ERC20ext__fail
[2020-11-25 15:07:04,035 INFO  L130     BoogieDeclarations]: Found specification of procedure lockedAccount~address_ERC20ext__success
[2020-11-25 15:07:04,035 INFO  L130     BoogieDeclarations]: Found specification of procedure lockedAccount~address_ERC20ext__fail
[2020-11-25 15:07:04,035 INFO  L130     BoogieDeclarations]: Found specification of procedure lockedAmount~address_ERC20ext__success
[2020-11-25 15:07:04,035 INFO  L130     BoogieDeclarations]: Found specification of procedure lockedAmount~address_ERC20ext__fail
[2020-11-25 15:07:04,036 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackDispatch__fail
[2020-11-25 15:07:04,036 INFO  L130     BoogieDeclarations]: Found specification of procedure Fallback_UnknownType__fail
[2020-11-25 15:07:04,036 INFO  L130     BoogieDeclarations]: Found specification of procedure send__fail
[2020-11-25 15:07:04,036 INFO  L130     BoogieDeclarations]: Found specification of procedure onlyOwner_pre__fail
[2020-11-25 15:07:04,036 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreshRefGenerator__fail
[2020-11-25 15:07:04,036 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreshRefGenerator__success
[2020-11-25 15:07:04,036 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath_NoBaseCtor__fail
[2020-11-25 15:07:04,036 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath_NoBaseCtor__success
[2020-11-25 15:07:04,036 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath__fail
[2020-11-25 15:07:04,036 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath__success
[2020-11-25 15:07:04,036 INFO  L138     BoogieDeclarations]: Found implementation of procedure add~uint256~uint256_SafeMath__fail
[2020-11-25 15:07:04,036 INFO  L138     BoogieDeclarations]: Found implementation of procedure add~uint256~uint256_SafeMath__success
[2020-11-25 15:07:04,036 INFO  L138     BoogieDeclarations]: Found implementation of procedure sub~uint256~uint256_SafeMath__fail
[2020-11-25 15:07:04,036 INFO  L138     BoogieDeclarations]: Found implementation of procedure sub~uint256~uint256_SafeMath__success
[2020-11-25 15:07:04,037 INFO  L138     BoogieDeclarations]: Found implementation of procedure mul~uint256~uint256_SafeMath__fail
[2020-11-25 15:07:04,037 INFO  L138     BoogieDeclarations]: Found implementation of procedure mul~uint256~uint256_SafeMath__success
[2020-11-25 15:07:04,037 INFO  L138     BoogieDeclarations]: Found implementation of procedure div~uint256~uint256_SafeMath__fail
[2020-11-25 15:07:04,037 INFO  L138     BoogieDeclarations]: Found implementation of procedure div~uint256~uint256_SafeMath__success
[2020-11-25 15:07:04,037 INFO  L138     BoogieDeclarations]: Found implementation of procedure mod~uint256~uint256_SafeMath__fail
[2020-11-25 15:07:04,037 INFO  L138     BoogieDeclarations]: Found implementation of procedure mod~uint256~uint256_SafeMath__success
[2020-11-25 15:07:04,037 INFO  L138     BoogieDeclarations]: Found implementation of procedure owned_owned_NoBaseCtor__fail
[2020-11-25 15:07:04,037 INFO  L138     BoogieDeclarations]: Found implementation of procedure owned_owned_NoBaseCtor__success
[2020-11-25 15:07:04,037 INFO  L138     BoogieDeclarations]: Found implementation of procedure owned_owned__fail
[2020-11-25 15:07:04,037 INFO  L138     BoogieDeclarations]: Found implementation of procedure owned_owned__success
[2020-11-25 15:07:04,037 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferOwnership~address_owned__fail
[2020-11-25 15:07:04,037 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferOwnership~address_owned__success
[2020-11-25 15:07:04,037 INFO  L138     BoogieDeclarations]: Found implementation of procedure owner_owned__fail
[2020-11-25 15:07:04,037 INFO  L138     BoogieDeclarations]: Found implementation of procedure owner_owned__success
[2020-11-25 15:07:04,037 INFO  L138     BoogieDeclarations]: Found implementation of procedure tokenRecipient_tokenRecipient_NoBaseCtor__fail
[2020-11-25 15:07:04,037 INFO  L138     BoogieDeclarations]: Found implementation of procedure tokenRecipient_tokenRecipient_NoBaseCtor__success
[2020-11-25 15:07:04,038 INFO  L138     BoogieDeclarations]: Found implementation of procedure tokenRecipient_tokenRecipient__fail
[2020-11-25 15:07:04,038 INFO  L138     BoogieDeclarations]: Found implementation of procedure tokenRecipient_tokenRecipient__success
[2020-11-25 15:07:04,038 INFO  L138     BoogieDeclarations]: Found implementation of procedure TokenERC20_TokenERC20_NoBaseCtor__fail
[2020-11-25 15:07:04,038 INFO  L138     BoogieDeclarations]: Found implementation of procedure TokenERC20_TokenERC20_NoBaseCtor__success
[2020-11-25 15:07:04,038 INFO  L138     BoogieDeclarations]: Found implementation of procedure TokenERC20_TokenERC20__fail
[2020-11-25 15:07:04,038 INFO  L138     BoogieDeclarations]: Found implementation of procedure TokenERC20_TokenERC20__success
[2020-11-25 15:07:04,038 INFO  L138     BoogieDeclarations]: Found implementation of procedure _transfer~address~address~uint256_TokenERC20__fail
[2020-11-25 15:07:04,038 INFO  L138     BoogieDeclarations]: Found implementation of procedure _transfer~address~address~uint256_TokenERC20__success
[2020-11-25 15:07:04,038 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_TokenERC20__fail
[2020-11-25 15:07:04,038 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_TokenERC20__success
[2020-11-25 15:07:04,038 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_TokenERC20__fail
[2020-11-25 15:07:04,038 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_TokenERC20__success
[2020-11-25 15:07:04,038 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_TokenERC20__fail
[2020-11-25 15:07:04,038 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_TokenERC20__success
[2020-11-25 15:07:04,038 INFO  L138     BoogieDeclarations]: Found implementation of procedure approveAndCall~address~uint256~bytes_TokenERC20__fail
[2020-11-25 15:07:04,038 INFO  L138     BoogieDeclarations]: Found implementation of procedure approveAndCall~address~uint256~bytes_TokenERC20__success
[2020-11-25 15:07:04,039 INFO  L138     BoogieDeclarations]: Found implementation of procedure burn~uint256_TokenERC20__fail
[2020-11-25 15:07:04,039 INFO  L138     BoogieDeclarations]: Found implementation of procedure burn~uint256_TokenERC20__success
[2020-11-25 15:07:04,039 INFO  L138     BoogieDeclarations]: Found implementation of procedure burnFrom~address~uint256_TokenERC20__fail
[2020-11-25 15:07:04,039 INFO  L138     BoogieDeclarations]: Found implementation of procedure burnFrom~address~uint256_TokenERC20__success
[2020-11-25 15:07:04,039 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_TokenERC20__fail
[2020-11-25 15:07:04,039 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_TokenERC20__success
[2020-11-25 15:07:04,039 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_TokenERC20__fail
[2020-11-25 15:07:04,039 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_TokenERC20__success
[2020-11-25 15:07:04,039 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_TokenERC20__fail
[2020-11-25 15:07:04,039 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_TokenERC20__success
[2020-11-25 15:07:04,039 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_TokenERC20__fail
[2020-11-25 15:07:04,039 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_TokenERC20__success
[2020-11-25 15:07:04,039 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_TokenERC20__fail
[2020-11-25 15:07:04,039 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_TokenERC20__success
[2020-11-25 15:07:04,039 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_TokenERC20__fail
[2020-11-25 15:07:04,039 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_TokenERC20__success
[2020-11-25 15:07:04,039 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20ext_ERC20ext_NoBaseCtor__fail
[2020-11-25 15:07:04,039 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20ext_ERC20ext_NoBaseCtor__success
[2020-11-25 15:07:04,039 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20ext_ERC20ext__fail
[2020-11-25 15:07:04,039 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20ext_ERC20ext__success
[2020-11-25 15:07:04,039 INFO  L138     BoogieDeclarations]: Found implementation of procedure _transfer~address~address~uint256_ERC20ext__fail
[2020-11-25 15:07:04,039 INFO  L138     BoogieDeclarations]: Found implementation of procedure _transfer~address~address~uint256_ERC20ext__success
[2020-11-25 15:07:04,040 INFO  L138     BoogieDeclarations]: Found implementation of procedure mintToken~address~uint256_ERC20ext__fail
[2020-11-25 15:07:04,040 INFO  L138     BoogieDeclarations]: Found implementation of procedure mintToken~address~uint256_ERC20ext__success
[2020-11-25 15:07:04,040 INFO  L138     BoogieDeclarations]: Found implementation of procedure freezeAccount~address~bool_ERC20ext__fail
[2020-11-25 15:07:04,040 INFO  L138     BoogieDeclarations]: Found implementation of procedure freezeAccount~address~bool_ERC20ext__success
[2020-11-25 15:07:04,040 INFO  L138     BoogieDeclarations]: Found implementation of procedure lock~address~uint256~uint256_ERC20ext__fail
[2020-11-25 15:07:04,040 INFO  L138     BoogieDeclarations]: Found implementation of procedure lock~address~uint256~uint256_ERC20ext__success
[2020-11-25 15:07:04,040 INFO  L138     BoogieDeclarations]: Found implementation of procedure frozenAccount~address_ERC20ext__fail
[2020-11-25 15:07:04,040 INFO  L138     BoogieDeclarations]: Found implementation of procedure frozenAccount~address_ERC20ext__success
[2020-11-25 15:07:04,040 INFO  L138     BoogieDeclarations]: Found implementation of procedure lockedAccount~address_ERC20ext__fail
[2020-11-25 15:07:04,040 INFO  L138     BoogieDeclarations]: Found implementation of procedure lockedAccount~address_ERC20ext__success
[2020-11-25 15:07:04,040 INFO  L138     BoogieDeclarations]: Found implementation of procedure lockedAmount~address_ERC20ext__fail
[2020-11-25 15:07:04,040 INFO  L138     BoogieDeclarations]: Found implementation of procedure lockedAmount~address_ERC20ext__success
[2020-11-25 15:07:04,040 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackDispatch__fail
[2020-11-25 15:07:04,040 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackDispatch__success
[2020-11-25 15:07:04,040 INFO  L138     BoogieDeclarations]: Found implementation of procedure Fallback_UnknownType__fail
[2020-11-25 15:07:04,040 INFO  L138     BoogieDeclarations]: Found implementation of procedure Fallback_UnknownType__success
[2020-11-25 15:07:04,040 INFO  L138     BoogieDeclarations]: Found implementation of procedure send__fail
[2020-11-25 15:07:04,040 INFO  L138     BoogieDeclarations]: Found implementation of procedure send__success
[2020-11-25 15:07:04,040 INFO  L138     BoogieDeclarations]: Found implementation of procedure onlyOwner_pre__fail
[2020-11-25 15:07:04,040 INFO  L138     BoogieDeclarations]: Found implementation of procedure onlyOwner_pre__success
[2020-11-25 15:07:04,040 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_SafeMath
[2020-11-25 15:07:04,040 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_SafeMath
[2020-11-25 15:07:04,040 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_owned
[2020-11-25 15:07:04,041 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_owned
[2020-11-25 15:07:04,041 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_tokenRecipient
[2020-11-25 15:07:04,041 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_tokenRecipient
[2020-11-25 15:07:04,041 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_TokenERC20
[2020-11-25 15:07:04,041 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_TokenERC20
[2020-11-25 15:07:04,041 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_ERC20ext
[2020-11-25 15:07:04,041 INFO  L138     BoogieDeclarations]: Found implementation of procedure main
[2020-11-25 15:07:04,041 INFO  L130     BoogieDeclarations]: Found specification of procedure ULTIMATE.start
[2020-11-25 15:07:04,041 INFO  L138     BoogieDeclarations]: Found implementation of procedure ULTIMATE.start
[2020-11-25 15:07:04,644 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 15:07:04,644 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 15:07:04,687 INFO  L281             CfgBuilder]: Using the 1 location(s) as analysis (start of procedure ULTIMATE.start)
[2020-11-25 15:07:04,687 INFO  L286             CfgBuilder]: Removed 5 assue(true) statements.
[2020-11-25 15:07:04,689 INFO  L202        PluginConnector]: Adding new model ERC20ext_0xceca64909127918c80c7c76b503de7306d63eca7_transfer-fail.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 03:07:04 BoogieIcfgContainer
[2020-11-25 15:07:04,689 INFO  L185        PluginConnector]: Executing the observer RCFGBuilderObserver from plugin RCFGBuilder for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 03:07:03" (2/2) ...
[2020-11-25 15:07:04,689 INFO  L85     RCFGBuilderObserver]: No WrapperNode. Let Ultimate process with next node
[2020-11-25 15:07:04,690 INFO  L205        PluginConnector]: Invalid model from RCFGBuilder for observer de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder.RCFGBuilderObserver@adb1696 and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 03:07:04, skipping insertion in model container
[2020-11-25 15:07:04,690 INFO  L132        PluginConnector]: ------------------------ END RCFGBuilder----------------------------
[2020-11-25 15:07:04,690 INFO  L113        PluginConnector]: ------------------------UtopiaLTL2Aut----------------------------
[2020-11-25 15:07:04,690 INFO  L271        PluginConnector]: Initializing UtopiaLTL2Aut...
[2020-11-25 15:07:04,691 INFO  L276        PluginConnector]: UtopiaLTL2Aut initialized
[2020-11-25 15:07:04,692 INFO  L185        PluginConnector]: Executing the observer UtopiaLTL2AutObserver from plugin UtopiaLTL2Aut for "ERC20ext_0xceca64909127918c80c7c76b503de7306d63eca7_transfer-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 03:07:03" (1/3) ...
[2020-11-25 15:07:04,692 INFO  L205        PluginConnector]: Invalid model from UtopiaLTL2Aut for observer edu.utexas.cs.utopia.ltl2aut.UtopiaLTL2AutObserver@7bb5ae33 and model type Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 03:07:04, skipping insertion in model container
[2020-11-25 15:07:04,692 INFO  L185        PluginConnector]: Executing the observer UtopiaLTL2AutObserver from plugin UtopiaLTL2Aut for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 03:07:03" (2/3) ...
No working directory specified, using /mnt/data0/jon/SmartPulseTool/ltl2ba
Starting monitored process 1 with /mnt/data0/jon/SmartPulseTool/ltl2ba -f ! ( ( [] ( a -> ( <>b ) ) ) )  (exit command is null, workingDir is null)
[2020-11-25 15:07:04,728 INFO  L202        PluginConnector]: Adding new model Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 03:07:04 NWAContainer
[2020-11-25 15:07:04,729 INFO  L132        PluginConnector]: ------------------------ END UtopiaLTL2Aut----------------------------
[2020-11-25 15:07:04,729 INFO  L113        PluginConnector]: ------------------------BÃ¼chi Program Product----------------------------
[2020-11-25 15:07:04,729 INFO  L271        PluginConnector]: Initializing BÃ¼chi Program Product...
[2020-11-25 15:07:04,730 INFO  L276        PluginConnector]: BÃ¼chi Program Product initialized
[2020-11-25 15:07:04,731 INFO  L185        PluginConnector]: Executing the observer BuchiProductObserver from plugin BÃ¼chi Program Product for "ERC20ext_0xceca64909127918c80c7c76b503de7306d63eca7_transfer-fail.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 03:07:04" (3/4) ...
[2020-11-25 15:07:04,731 INFO  L205        PluginConnector]: Invalid model from BÃ¼chi Program Product for observer de.uni_freiburg.informatik.ultimate.buchiprogramproduct.BuchiProductObserver@56910035 and model type LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 03:07:04, skipping insertion in model container
[2020-11-25 15:07:04,731 INFO  L185        PluginConnector]: Executing the observer BuchiProductObserver from plugin BÃ¼chi Program Product for "Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 03:07:04" (4/4) ...
[2020-11-25 15:07:04,734 INFO  L104   BuchiProductObserver]: Initial property automaton 2 locations, 3 edges
[2020-11-25 15:07:04,738 INFO  L110   BuchiProductObserver]: Initial RCFG 1885 locations, 2421 edges
[2020-11-25 15:07:04,738 INFO  L93    BuchiProductObserver]: Beginning generation of product automaton
[2020-11-25 15:07:04,749 INFO  L136       ProductGenerator]: The program has no step specification, so we assume maximum atomicity
[2020-11-25 15:07:06,074 INFO  L97    BuchiProductObserver]: Finished generation of product automaton successfully
[2020-11-25 15:07:06,080 INFO  L110   BuchiProductObserver]: BuchiProgram size 4512 locations, 7833 edges
[2020-11-25 15:07:06,080 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 03:07:06 BoogieIcfgContainer
[2020-11-25 15:07:06,080 INFO  L132        PluginConnector]: ------------------------ END BÃ¼chi Program Product----------------------------
[2020-11-25 15:07:06,080 INFO  L113        PluginConnector]: ------------------------BlockEncodingV2----------------------------
[2020-11-25 15:07:06,081 INFO  L271        PluginConnector]: Initializing BlockEncodingV2...
[2020-11-25 15:07:06,082 INFO  L276        PluginConnector]: BlockEncodingV2 initialized
[2020-11-25 15:07:06,083 INFO  L185        PluginConnector]: Executing the observer BlockEncodingObserver from plugin BlockEncodingV2 for "LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 03:07:06" (1/1) ...
[2020-11-25 15:07:06,180 INFO  L313           BlockEncoder]: Initial Icfg 4512 locations, 7833 edges
[2020-11-25 15:07:06,180 INFO  L258           BlockEncoder]: Using Remove infeasible edges
[2020-11-25 15:07:06,180 INFO  L270           BlockEncoder]: Using Minimize states even if more edges are added than removed.=true
[2020-11-25 15:07:06,181 INFO  L296           BlockEncoder]: Using Remove sink states
[2020-11-25 15:07:06,181 INFO  L171           BlockEncoder]: Using Apply optimizations until nothing changes=true
[2020-11-25 15:07:06,194 INFO  L70    emoveInfeasibleEdges]: Removed 78 edges and 14 locations because of local infeasibility
[2020-11-25 15:07:06,206 INFO  L70        RemoveSinkStates]: Removed 130 edges and 68 locations by removing sink states
[2020-11-25 15:07:06,219 INFO  L70    emoveInfeasibleEdges]: Removed 0 edges and 0 locations because of local infeasibility
[2020-11-25 15:07:06,225 INFO  L70        RemoveSinkStates]: Removed 0 edges and 0 locations by removing sink states
[2020-11-25 15:07:06,228 INFO  L237           BlockEncoder]: Using Create parallel compositions if possible
[2020-11-25 15:07:06,229 INFO  L66        ParallelComposer]: Creating parallel compositions
[2020-11-25 15:07:06,235 INFO  L313           BlockEncoder]: Encoded RCFG 4406 locations, 7590 edges
[2020-11-25 15:07:06,235 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.blockencoding CFG 25.11 03:07:06 BasicIcfg
[2020-11-25 15:07:06,235 INFO  L132        PluginConnector]: ------------------------ END BlockEncodingV2----------------------------
[2020-11-25 15:07:06,236 INFO  L113        PluginConnector]: ------------------------BuchiAutomizer----------------------------
[2020-11-25 15:07:06,236 INFO  L271        PluginConnector]: Initializing BuchiAutomizer...
[2020-11-25 15:07:06,237 INFO  L276        PluginConnector]: BuchiAutomizer initialized
[2020-11-25 15:07:06,238 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 15:07:06,238 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "ERC20ext_0xceca64909127918c80c7c76b503de7306d63eca7_transfer-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 03:07:03" (1/6) ...
[2020-11-25 15:07:06,239 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@cb4e4ac and model type ERC20ext_0xceca64909127918c80c7c76b503de7306d63eca7_transfer-fail.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 03:07:06, skipping insertion in model container
[2020-11-25 15:07:06,239 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 15:07:06,240 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 03:07:03" (2/6) ...
[2020-11-25 15:07:06,240 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@cb4e4ac and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 03:07:06, skipping insertion in model container
[2020-11-25 15:07:06,240 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 15:07:06,240 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "ERC20ext_0xceca64909127918c80c7c76b503de7306d63eca7_transfer-fail.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 03:07:04" (3/6) ...
[2020-11-25 15:07:06,240 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@cb4e4ac and model type ERC20ext_0xceca64909127918c80c7c76b503de7306d63eca7_transfer-fail.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer CFG 25.11 03:07:06, skipping insertion in model container
[2020-11-25 15:07:06,240 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 15:07:06,240 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 03:07:04" (4/6) ...
[2020-11-25 15:07:06,240 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@cb4e4ac and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 03:07:06, skipping insertion in model container
[2020-11-25 15:07:06,240 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 15:07:06,240 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 03:07:06" (5/6) ...
[2020-11-25 15:07:06,241 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@cb4e4ac and model type LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer OTHER 25.11 03:07:06, skipping insertion in model container
[2020-11-25 15:07:06,241 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 15:07:06,241 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.blockencoding CFG 25.11 03:07:06" (6/6) ...
[2020-11-25 15:07:06,242 INFO  L404   chiAutomizerObserver]: Analyzing ICFG ERC20ext_0xceca64909127918c80c7c76b503de7306d63eca7_transfer-fail.bpl_BEv2
[2020-11-25 15:07:06,278 INFO  L133   ementStrategyFactory]: Using default assertion order modulation
[2020-11-25 15:07:06,278 INFO  L377         BuchiCegarLoop]: Interprodecural is true
[2020-11-25 15:07:06,278 INFO  L378         BuchiCegarLoop]: Hoare is false
[2020-11-25 15:07:06,278 INFO  L379         BuchiCegarLoop]: Compute interpolants for Craig_TreeInterpolation
[2020-11-25 15:07:06,278 INFO  L380         BuchiCegarLoop]: Backedges is STRAIGHT_LINE
[2020-11-25 15:07:06,278 INFO  L381         BuchiCegarLoop]: Determinization is PREDICATE_ABSTRACTION
[2020-11-25 15:07:06,278 INFO  L382         BuchiCegarLoop]: Difference is false
[2020-11-25 15:07:06,278 INFO  L383         BuchiCegarLoop]: Minimize is MINIMIZE_SEVPA
[2020-11-25 15:07:06,278 INFO  L386         BuchiCegarLoop]: ======== Iteration 0==of CEGAR loop == BuchiCegarLoop========
[2020-11-25 15:07:06,315 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 4406 states.
[2020-11-25 15:07:06,369 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 15:07:06,370 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 15:07:06,371 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 15:07:06,383 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 15:07:06,383 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 15:07:06,383 INFO  L445         BuchiCegarLoop]: ======== Iteration 1============
[2020-11-25 15:07:06,383 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 4406 states.
[2020-11-25 15:07:06,411 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 15:07:06,412 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 15:07:06,412 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 15:07:06,414 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 15:07:06,414 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transfer_TokenERC200 := false;
[L2]                 call_transfer_TokenERC200 := false;
[L2]     CALL        call main();
[L5089]              assume null == 0;
[L5090]  CALL        call this := FreshRefGenerator__success();
[L2432]              havoc newRef;
[L2433]              assume Alloc[newRef] == false;
[L2434]              Alloc[newRef] := true;
[L2435]              assume newRef != null;
[L5090]  RET         call this := FreshRefGenerator__success();
[L5091]              assume now >= 0;
[L5092]              assume DType[this] == ERC20ext;
[L5093]              assume msgvalue_MSG == 0;
[L5094]              gas := gas - 53000;
[L5095]  CALL        call ERC20ext_ERC20ext(this, msgsender_MSG, msgvalue_MSG, initialSupply_s639, tokenName_s639, tokenSymbol_s639);
[L1360]              havoc __exception;
[L1361]              revert := false;
[L1362]  COND FALSE  !(__exception)
[L1391]  CALL        call ERC20ext_ERC20ext__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s639, tokenName_s639, tokenSymbol_s639);
[L3247]  CALL        call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L2624]  CALL        call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2607]              assume msgsender_MSG != null;
[L2608]              Balance[this] := 0;
[L2609]              owner_owned[this] := null;
[L2611]              owner_owned[this] := msgsender_MSG;
[L2624]  RET         call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2625]  COND FALSE  !(revert)
[L3247]  RET         call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L3248]  COND TRUE   revert
[L1391]  RET         call ERC20ext_ERC20ext__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s639, tokenName_s639, tokenSymbol_s639);
[L1392]              assume !revert && gas >= 0;
[L5095]  RET         call ERC20ext_ERC20ext(this, msgsender_MSG, msgvalue_MSG, initialSupply_s639, tokenName_s639, tokenSymbol_s639);
[L5096]              assume !revert && gas >= 0;

Loop:
[L5099]  CALL        call CorralChoice_ERC20ext(this);
[L4881]              havoc msgsender_MSG;
[L4882]              havoc msgvalue_MSG;
[L4883]              havoc choice;
[L4884]              havoc __ret_0_owner;
[L4885]              havoc newOwner_s166;
[L4886]              havoc __ret_0_name;
[L4887]              havoc __ret_0_symbol;
[L4888]              havoc __ret_0_decimals;
[L4889]              havoc __ret_0_totalSupply;
[L4890]              havoc arg835_s0;
[L4891]              havoc __ret_0_balanceOf;
[L4892]              havoc arg836_s0;
[L4893]              havoc arg837_s0;
[L4894]              havoc __ret_0_allowance;
[L4895]              havoc initialSupply_s258;
[L4896]              havoc tokenName_s258;
[L4897]              havoc tokenSymbol_s258;
[L4898]              havoc _to_s365;
[L4899]              havoc _value_s365;
[L4900]              havoc success_s365;
[L4901]              havoc _from_s413;
[L4902]              havoc _to_s413;
[L4903]              havoc _value_s413;
[L4904]              havoc success_s413;
[L4905]              havoc _spender_s441;
[L4906]              havoc _value_s441;
[L4907]              havoc success_s441;
[L4908]              havoc _spender_s479;
[L4909]              havoc _value_s479;
[L4910]              havoc _extraData_s479;
[L4911]              havoc success_s479;
[L4912]              havoc _value_s527;
[L4913]              havoc success_s527;
[L4914]              havoc _from_s598;
[L4915]              havoc _value_s598;
[L4916]              havoc success_s598;
[L4917]              havoc arg838_s0;
[L4918]              havoc __ret_0_frozenAccount;
[L4919]              havoc arg839_s0;
[L4920]              havoc __ret_0_lockedAccount;
[L4921]              havoc arg840_s0;
[L4922]              havoc __ret_0_lockedAmount;
[L4923]              havoc initialSupply_s639;
[L4924]              havoc tokenName_s639;
[L4925]              havoc tokenSymbol_s639;
[L4926]              havoc target_s779;
[L4927]              havoc mintedAmount_s779;
[L4928]              havoc success_s779;
[L4929]              havoc target_s804;
[L4930]              havoc freeze_s804;
[L4931]              havoc success_s804;
[L4932]              havoc target_s832;
[L4933]              havoc time_s832;
[L4934]              havoc amount_s832;
[L4935]              havoc success_s832;
[L4936]              havoc tmpNow;
[L4937]              havoc gas;
[L4938]              assume gas > 4000000 && gas <= 8000000;
[L4939]              tmpNow := now;
[L4940]              havoc now;
[L4941]              assume now > tmpNow;
[L4942]              assume msgsender_MSG != null;
[L4943]              assume DType[msgsender_MSG] != SafeMath;
[L4944]              assume DType[msgsender_MSG] != owned;
[L4945]              assume DType[msgsender_MSG] != tokenRecipient;
[L4946]              assume DType[msgsender_MSG] != TokenERC20;
[L4947]              assume DType[msgsender_MSG] != ERC20ext;
[L4948]              Alloc[msgsender_MSG] := true;
[L4949]  COND TRUE   choice == 20
[L4950]              gas := gas - 21000;
[L4951]  COND FALSE  !(gas >= 0)
[L5099]  RET         call CorralChoice_ERC20ext(this);

[2020-11-25 15:07:06,433 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 15:07:06,433 INFO  L82        PathProgramCache]: Analyzing trace with hash 189994867, now seen corresponding path program 1 times
[2020-11-25 15:07:06,438 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 15:07:06,466 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 15:07:06,511 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 15:07:06,513 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 15:07:06,513 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [4] imperfect sequences [] total 4
[2020-11-25 15:07:06,789 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 15:07:06,801 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-11-25 15:07:06,802 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=5, Invalid=7, Unknown=0, NotChecked=0, Total=12
[2020-11-25 15:07:06,803 INFO  L87              Difference]: Start difference. First operand 4406 states. Second operand 4 states.
[2020-11-25 15:07:07,256 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 15:07:07,257 INFO  L93              Difference]: Finished difference Result 3029 states and 3373 transitions.
[2020-11-25 15:07:07,257 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 4 states. 
[2020-11-25 15:07:07,258 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 3029 states and 3373 transitions.
[2020-11-25 15:07:07,273 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 15:07:07,293 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 3029 states to 3027 states and 3369 transitions.
[2020-11-25 15:07:07,293 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 3
[2020-11-25 15:07:07,296 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 838
[2020-11-25 15:07:07,296 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 3027 states and 3369 transitions.
[2020-11-25 15:07:07,303 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 15:07:07,303 INFO  L728         BuchiCegarLoop]: Abstraction has 3027 states and 3369 transitions.
[2020-11-25 15:07:07,316 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 3027 states and 3369 transitions.
[2020-11-25 15:07:07,355 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 3027 to 3027.
[2020-11-25 15:07:07,355 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 3027 states.
[2020-11-25 15:07:07,360 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 3027 states to 3027 states and 3369 transitions.
[2020-11-25 15:07:07,360 INFO  L751         BuchiCegarLoop]: Abstraction has 3027 states and 3369 transitions.
[2020-11-25 15:07:07,361 INFO  L631         BuchiCegarLoop]: Abstraction has 3027 states and 3369 transitions.
[2020-11-25 15:07:07,361 INFO  L445         BuchiCegarLoop]: ======== Iteration 2============
[2020-11-25 15:07:07,361 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 3027 states and 3369 transitions.
[2020-11-25 15:07:07,367 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 15:07:07,367 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 15:07:07,367 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 15:07:07,369 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 15:07:07,369 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transfer_TokenERC200 := false;
[L2]                 call_transfer_TokenERC200 := false;
[L2]     CALL        call main();
[L5089]              assume null == 0;
[L5090]  CALL        call this := FreshRefGenerator__success();
[L2432]              havoc newRef;
[L2433]              assume Alloc[newRef] == false;
[L2434]              Alloc[newRef] := true;
[L2435]              assume newRef != null;
[L5090]  RET         call this := FreshRefGenerator__success();
[L5091]              assume now >= 0;
[L5092]              assume DType[this] == ERC20ext;
[L5093]              assume msgvalue_MSG == 0;
[L5094]              gas := gas - 53000;
[L5095]  CALL        call ERC20ext_ERC20ext(this, msgsender_MSG, msgvalue_MSG, initialSupply_s639, tokenName_s639, tokenSymbol_s639);
[L1360]              havoc __exception;
[L1361]              revert := false;
[L1362]  COND FALSE  !(__exception)
[L1391]  CALL        call ERC20ext_ERC20ext__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s639, tokenName_s639, tokenSymbol_s639);
[L3247]  CALL        call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L2624]  CALL        call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2607]              assume msgsender_MSG != null;
[L2608]              Balance[this] := 0;
[L2609]              owner_owned[this] := null;
[L2611]              owner_owned[this] := msgsender_MSG;
[L2624]  RET         call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2625]  COND FALSE  !(revert)
[L3247]  RET         call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L3248]  COND TRUE   revert
[L1391]  RET         call ERC20ext_ERC20ext__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s639, tokenName_s639, tokenSymbol_s639);
[L1392]              assume !revert && gas >= 0;
[L5095]  RET         call ERC20ext_ERC20ext(this, msgsender_MSG, msgvalue_MSG, initialSupply_s639, tokenName_s639, tokenSymbol_s639);
[L5096]              assume !revert && gas >= 0;
[L5099]  CALL        call CorralChoice_ERC20ext(this);
[L4881]              havoc msgsender_MSG;
[L4882]              havoc msgvalue_MSG;
[L4883]              havoc choice;
[L4884]              havoc __ret_0_owner;
[L4885]              havoc newOwner_s166;
[L4886]              havoc __ret_0_name;
[L4887]              havoc __ret_0_symbol;
[L4888]              havoc __ret_0_decimals;
[L4889]              havoc __ret_0_totalSupply;
[L4890]              havoc arg835_s0;
[L4891]              havoc __ret_0_balanceOf;
[L4892]              havoc arg836_s0;
[L4893]              havoc arg837_s0;
[L4894]              havoc __ret_0_allowance;
[L4895]              havoc initialSupply_s258;
[L4896]              havoc tokenName_s258;
[L4897]              havoc tokenSymbol_s258;
[L4898]              havoc _to_s365;
[L4899]              havoc _value_s365;
[L4900]              havoc success_s365;
[L4901]              havoc _from_s413;
[L4902]              havoc _to_s413;
[L4903]              havoc _value_s413;
[L4904]              havoc success_s413;
[L4905]              havoc _spender_s441;
[L4906]              havoc _value_s441;
[L4907]              havoc success_s441;
[L4908]              havoc _spender_s479;
[L4909]              havoc _value_s479;
[L4910]              havoc _extraData_s479;
[L4911]              havoc success_s479;
[L4912]              havoc _value_s527;
[L4913]              havoc success_s527;
[L4914]              havoc _from_s598;
[L4915]              havoc _value_s598;
[L4916]              havoc success_s598;
[L4917]              havoc arg838_s0;
[L4918]              havoc __ret_0_frozenAccount;
[L4919]              havoc arg839_s0;
[L4920]              havoc __ret_0_lockedAccount;
[L4921]              havoc arg840_s0;
[L4922]              havoc __ret_0_lockedAmount;
[L4923]              havoc initialSupply_s639;
[L4924]              havoc tokenName_s639;
[L4925]              havoc tokenSymbol_s639;
[L4926]              havoc target_s779;
[L4927]              havoc mintedAmount_s779;
[L4928]              havoc success_s779;
[L4929]              havoc target_s804;
[L4930]              havoc freeze_s804;
[L4931]              havoc success_s804;
[L4932]              havoc target_s832;
[L4933]              havoc time_s832;
[L4934]              havoc amount_s832;
[L4935]              havoc success_s832;
[L4936]              havoc tmpNow;
[L4937]              havoc gas;
[L4938]              assume gas > 4000000 && gas <= 8000000;
[L4939]              tmpNow := now;
[L4940]              havoc now;
[L4941]              assume now > tmpNow;
[L4942]              assume msgsender_MSG != null;
[L4943]              assume DType[msgsender_MSG] != SafeMath;
[L4944]              assume DType[msgsender_MSG] != owned;
[L4945]              assume DType[msgsender_MSG] != tokenRecipient;
[L4946]              assume DType[msgsender_MSG] != TokenERC20;
[L4947]              assume DType[msgsender_MSG] != ERC20ext;
[L4948]              Alloc[msgsender_MSG] := true;
[L4949]  COND FALSE  !(choice == 20)
[L4955]  COND FALSE  !(choice == 19)
[L4961]  COND FALSE  !(choice == 18)
[L4967]  COND FALSE  !(choice == 17)
[L4973]  COND FALSE  !(choice == 16)
[L4979]  COND FALSE  !(choice == 15)
[L4985]  COND FALSE  !(choice == 14)
[L4991]  COND FALSE  !(choice == 13)
[L4997]  COND TRUE   choice == 12
[L4998]              gas := gas - 21000;
[L4999]  COND TRUE   gas >= 0
[L5000]              assume _value_s365 >= 0 && _value_s365 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5001]              assume msgvalue_MSG == 0;
[L5002]  CALL        call success_s365 := transfer~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, _to_s365, _value_s365);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG != _to_s365 && (_value_s365 > balanceOf_TokenERC20[this][msgsender_MSG] || balanceOf_TokenERC20[this][_to_s365] + _value_s365 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && _value_s365 >= 0) && _value_s365 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_TokenERC20[this][_to_s365] >= 0) && balanceOf_TokenERC20[this][_to_s365] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_TokenERC20[this][msgsender_MSG] >= 0) && balanceOf_TokenERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_TokenERC200 := true;
[L2]                 call_transfer_TokenERC200 := false;
[L2]                 revert := revert_hold;
[L527]               havoc __exception;
[L528]               revert := false;
[L529]   COND FALSE  !(__exception)
[L558]   CALL        call success_s365 := transfer~address~uint256_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, _to_s365, _value_s365);
[L2853]  COND TRUE   DType[this] == ERC20ext
[L2854]  CALL        call _transfer~address~address~uint256_ERC20ext__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, _to_s365, _value_s365);
[L3312]  COND TRUE   !(now > lockedAccount_ERC20ext[this][_from_s739] || (lockedAmount_ERC20ext[this][_from_s739] + _value_s739) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 < balanceOf_TokenERC20[this][_from_s739])
[L3313]              revert := true;
[L2854]  RET         call _transfer~address~address~uint256_ERC20ext__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, _to_s365, _value_s365);
[L2855]  COND TRUE   revert
[L558]   RET         call success_s365 := transfer~address~uint256_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, _to_s365, _value_s365);
[L559]               assume !revert && gas >= 0;
[L5002]  RET         call success_s365 := transfer~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, _to_s365, _value_s365);
[L5099]  RET         call CorralChoice_ERC20ext(this);

Loop:
[L5099]  CALL        call CorralChoice_ERC20ext(this);
[L4881]              havoc msgsender_MSG;
[L4882]              havoc msgvalue_MSG;
[L4883]              havoc choice;
[L4884]              havoc __ret_0_owner;
[L4885]              havoc newOwner_s166;
[L4886]              havoc __ret_0_name;
[L4887]              havoc __ret_0_symbol;
[L4888]              havoc __ret_0_decimals;
[L4889]              havoc __ret_0_totalSupply;
[L4890]              havoc arg835_s0;
[L4891]              havoc __ret_0_balanceOf;
[L4892]              havoc arg836_s0;
[L4893]              havoc arg837_s0;
[L4894]              havoc __ret_0_allowance;
[L4895]              havoc initialSupply_s258;
[L4896]              havoc tokenName_s258;
[L4897]              havoc tokenSymbol_s258;
[L4898]              havoc _to_s365;
[L4899]              havoc _value_s365;
[L4900]              havoc success_s365;
[L4901]              havoc _from_s413;
[L4902]              havoc _to_s413;
[L4903]              havoc _value_s413;
[L4904]              havoc success_s413;
[L4905]              havoc _spender_s441;
[L4906]              havoc _value_s441;
[L4907]              havoc success_s441;
[L4908]              havoc _spender_s479;
[L4909]              havoc _value_s479;
[L4910]              havoc _extraData_s479;
[L4911]              havoc success_s479;
[L4912]              havoc _value_s527;
[L4913]              havoc success_s527;
[L4914]              havoc _from_s598;
[L4915]              havoc _value_s598;
[L4916]              havoc success_s598;
[L4917]              havoc arg838_s0;
[L4918]              havoc __ret_0_frozenAccount;
[L4919]              havoc arg839_s0;
[L4920]              havoc __ret_0_lockedAccount;
[L4921]              havoc arg840_s0;
[L4922]              havoc __ret_0_lockedAmount;
[L4923]              havoc initialSupply_s639;
[L4924]              havoc tokenName_s639;
[L4925]              havoc tokenSymbol_s639;
[L4926]              havoc target_s779;
[L4927]              havoc mintedAmount_s779;
[L4928]              havoc success_s779;
[L4929]              havoc target_s804;
[L4930]              havoc freeze_s804;
[L4931]              havoc success_s804;
[L4932]              havoc target_s832;
[L4933]              havoc time_s832;
[L4934]              havoc amount_s832;
[L4935]              havoc success_s832;
[L4936]              havoc tmpNow;
[L4937]              havoc gas;
[L4938]              assume gas > 4000000 && gas <= 8000000;
[L4939]              tmpNow := now;
[L4940]              havoc now;
[L4941]              assume now > tmpNow;
[L4942]              assume msgsender_MSG != null;
[L4943]              assume DType[msgsender_MSG] != SafeMath;
[L4944]              assume DType[msgsender_MSG] != owned;
[L4945]              assume DType[msgsender_MSG] != tokenRecipient;
[L4946]              assume DType[msgsender_MSG] != TokenERC20;
[L4947]              assume DType[msgsender_MSG] != ERC20ext;
[L4948]              Alloc[msgsender_MSG] := true;
[L4949]  COND FALSE  !(choice == 20)
[L4955]  COND FALSE  !(choice == 19)
[L4961]  COND FALSE  !(choice == 18)
[L4967]  COND FALSE  !(choice == 17)
[L4973]  COND FALSE  !(choice == 16)
[L4979]  COND FALSE  !(choice == 15)
[L4985]  COND FALSE  !(choice == 14)
[L4991]  COND FALSE  !(choice == 13)
[L4997]  COND TRUE   choice == 12
[L4998]              gas := gas - 21000;
[L4999]  COND TRUE   gas >= 0
[L5000]              assume _value_s365 >= 0 && _value_s365 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5001]              assume msgvalue_MSG == 0;
[L5002]  CALL        call success_s365 := transfer~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, _to_s365, _value_s365);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG != _to_s365 && (_value_s365 > balanceOf_TokenERC20[this][msgsender_MSG] || balanceOf_TokenERC20[this][_to_s365] + _value_s365 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && _value_s365 >= 0) && _value_s365 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_TokenERC20[this][_to_s365] >= 0) && balanceOf_TokenERC20[this][_to_s365] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_TokenERC20[this][msgsender_MSG] >= 0) && balanceOf_TokenERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_TokenERC200 := true;
[L2]                 call_transfer_TokenERC200 := false;
[L2]                 revert := revert_hold;
[L527]               havoc __exception;
[L528]               revert := false;
[L529]   COND FALSE  !(__exception)
[L558]   CALL        call success_s365 := transfer~address~uint256_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, _to_s365, _value_s365);
[L2853]  COND TRUE   DType[this] == ERC20ext
[L2854]  CALL        call _transfer~address~address~uint256_ERC20ext__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, _to_s365, _value_s365);
[L3312]  COND TRUE   !(now > lockedAccount_ERC20ext[this][_from_s739] || (lockedAmount_ERC20ext[this][_from_s739] + _value_s739) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 < balanceOf_TokenERC20[this][_from_s739])
[L3313]              revert := true;
[L2854]  RET         call _transfer~address~address~uint256_ERC20ext__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, _to_s365, _value_s365);
[L2855]  COND TRUE   revert
[L558]   RET         call success_s365 := transfer~address~uint256_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, _to_s365, _value_s365);
[L559]               assume !revert && gas >= 0;
[L5002]  RET         call success_s365 := transfer~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, _to_s365, _value_s365);
[L5099]  RET         call CorralChoice_ERC20ext(this);

[2020-11-25 15:07:07,374 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 15:07:07,374 INFO  L82        PathProgramCache]: Analyzing trace with hash 529484526, now seen corresponding path program 1 times
[2020-11-25 15:07:07,374 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 15:07:07,383 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 15:07:07,402 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 15:07:07,403 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 15:07:07,403 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [4] imperfect sequences [] total 4
[2020-11-25 15:07:07,404 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 15:07:07,404 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-11-25 15:07:07,404 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=5, Invalid=7, Unknown=0, NotChecked=0, Total=12
[2020-11-25 15:07:07,404 INFO  L87              Difference]: Start difference. First operand 3027 states and 3369 transitions. cyclomatic complexity: 344 Second operand 4 states.
[2020-11-25 15:07:07,936 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 15:07:07,936 INFO  L93              Difference]: Finished difference Result 3886 states and 4332 transitions.
[2020-11-25 15:07:07,936 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 4 states. 
[2020-11-25 15:07:07,937 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 3886 states and 4332 transitions.
[2020-11-25 15:07:07,950 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 15:07:07,966 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 3886 states to 3690 states and 4090 transitions.
[2020-11-25 15:07:07,966 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 977
[2020-11-25 15:07:07,967 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 996
[2020-11-25 15:07:07,967 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 3690 states and 4090 transitions.
[2020-11-25 15:07:07,973 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 15:07:07,973 INFO  L728         BuchiCegarLoop]: Abstraction has 3690 states and 4090 transitions.
[2020-11-25 15:07:07,976 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 3690 states and 4090 transitions.
[2020-11-25 15:07:08,006 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 3690 to 3273.
[2020-11-25 15:07:08,006 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 3273 states.
[2020-11-25 15:07:08,010 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 3273 states to 3273 states and 3575 transitions.
[2020-11-25 15:07:08,010 INFO  L751         BuchiCegarLoop]: Abstraction has 3273 states and 3575 transitions.
[2020-11-25 15:07:08,010 INFO  L631         BuchiCegarLoop]: Abstraction has 3273 states and 3575 transitions.
[2020-11-25 15:07:08,010 INFO  L445         BuchiCegarLoop]: ======== Iteration 3============
[2020-11-25 15:07:08,010 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 3273 states and 3575 transitions.
[2020-11-25 15:07:08,016 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 15:07:08,017 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 15:07:08,017 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 15:07:08,019 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 15:07:08,019 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transfer_TokenERC200 := false;
[L2]                 call_transfer_TokenERC200 := false;
[L2]     CALL        call main();
[L5089]              assume null == 0;
[L5090]  CALL        call this := FreshRefGenerator__success();
[L2432]              havoc newRef;
[L2433]              assume Alloc[newRef] == false;
[L2434]              Alloc[newRef] := true;
[L2435]              assume newRef != null;
[L5090]  RET         call this := FreshRefGenerator__success();
[L5091]              assume now >= 0;
[L5092]              assume DType[this] == ERC20ext;
[L5093]              assume msgvalue_MSG == 0;
[L5094]              gas := gas - 53000;
[L5095]  CALL        call ERC20ext_ERC20ext(this, msgsender_MSG, msgvalue_MSG, initialSupply_s639, tokenName_s639, tokenSymbol_s639);
[L1360]              havoc __exception;
[L1361]              revert := false;
[L1362]  COND FALSE  !(__exception)
[L1391]  CALL        call ERC20ext_ERC20ext__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s639, tokenName_s639, tokenSymbol_s639);
[L3247]  CALL        call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L2624]  CALL        call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2607]              assume msgsender_MSG != null;
[L2608]              Balance[this] := 0;
[L2609]              owner_owned[this] := null;
[L2611]              owner_owned[this] := msgsender_MSG;
[L2624]  RET         call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2625]  COND FALSE  !(revert)
[L3247]  RET         call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L3248]  COND FALSE  !(revert)
[L3251]  CALL        call TokenERC20_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s639, tokenName_s639, tokenSymbol_s639);
[L2752]  CALL        call TokenERC20_TokenERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s258, tokenName_s258, tokenSymbol_s258);
[L2720]              assume msgsender_MSG != null;
[L2721]              Balance[this] := 0;
[L2722]              name_TokenERC20[this] := 1101944712;
[L2723]              symbol_TokenERC20[this] := 1101944712;
[L2724]              decimals_TokenERC20[this] := 18;
[L2725]              totalSupply_TokenERC20[this] := 0;
[L2726]              balanceOf_TokenERC20[this] := zeroRefintArr();
[L2727]              sum_balanceOf0[this] := 0;
[L2728]              allowance_TokenERC20[this] := zeroRefRefintArr();
[L2729]              sum_allowance1[this] := 0;
[L2731]              __var_1 := decimals_TokenERC20[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2732]              totalSupply_TokenERC20[this] := nonlinearMul(initialSupply_s258, nonlinearPow(10, decimals_TokenERC20[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2733]              sum_balanceOf0[this] := sum_balanceOf0[this] - balanceOf_TokenERC20[this][msgsender_MSG];
[L2734]              balanceOf_TokenERC20[this][msgsender_MSG] := totalSupply_TokenERC20[this];
[L2735]              sum_balanceOf0[this] := sum_balanceOf0[this] + balanceOf_TokenERC20[this][msgsender_MSG];
[L2736]              name_TokenERC20[this] := tokenName_s258;
[L2737]              symbol_TokenERC20[this] := tokenSymbol_s258;
[L2752]  RET         call TokenERC20_TokenERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s258, tokenName_s258, tokenSymbol_s258);
[L2753]  COND FALSE  !(revert)
[L3251]  RET         call TokenERC20_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s639, tokenName_s639, tokenSymbol_s639);
[L3252]  COND FALSE  !(revert)
[L3255]  CALL        call ERC20ext_ERC20ext_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s639, tokenName_s639, tokenSymbol_s639);
[L3219]              assume msgsender_MSG != null;
[L3220]              Balance[this] := 0;
[L3221]              frozenAccount_ERC20ext[this] := zeroRefboolArr();
[L3222]              lockedAccount_ERC20ext[this] := zeroRefintArr();
[L3223]              sum_lockedAccount3[this] := 0;
[L3224]              lockedAmount_ERC20ext[this] := zeroRefintArr();
[L3225]              sum_lockedAmount4[this] := 0;
[L3255]  RET         call ERC20ext_ERC20ext_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s639, tokenName_s639, tokenSymbol_s639);
[L3256]  COND FALSE  !(revert)
[L1391]  RET         call ERC20ext_ERC20ext__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s639, tokenName_s639, tokenSymbol_s639);
[L1392]              assume !revert && gas >= 0;
[L5095]  RET         call ERC20ext_ERC20ext(this, msgsender_MSG, msgvalue_MSG, initialSupply_s639, tokenName_s639, tokenSymbol_s639);
[L5096]              assume !revert && gas >= 0;
[L5099]  CALL        call CorralChoice_ERC20ext(this);
[L4881]              havoc msgsender_MSG;
[L4882]              havoc msgvalue_MSG;
[L4883]              havoc choice;
[L4884]              havoc __ret_0_owner;
[L4885]              havoc newOwner_s166;
[L4886]              havoc __ret_0_name;
[L4887]              havoc __ret_0_symbol;
[L4888]              havoc __ret_0_decimals;
[L4889]              havoc __ret_0_totalSupply;
[L4890]              havoc arg835_s0;
[L4891]              havoc __ret_0_balanceOf;
[L4892]              havoc arg836_s0;
[L4893]              havoc arg837_s0;
[L4894]              havoc __ret_0_allowance;
[L4895]              havoc initialSupply_s258;
[L4896]              havoc tokenName_s258;
[L4897]              havoc tokenSymbol_s258;
[L4898]              havoc _to_s365;
[L4899]              havoc _value_s365;
[L4900]              havoc success_s365;
[L4901]              havoc _from_s413;
[L4902]              havoc _to_s413;
[L4903]              havoc _value_s413;
[L4904]              havoc success_s413;
[L4905]              havoc _spender_s441;
[L4906]              havoc _value_s441;
[L4907]              havoc success_s441;
[L4908]              havoc _spender_s479;
[L4909]              havoc _value_s479;
[L4910]              havoc _extraData_s479;
[L4911]              havoc success_s479;
[L4912]              havoc _value_s527;
[L4913]              havoc success_s527;
[L4914]              havoc _from_s598;
[L4915]              havoc _value_s598;
[L4916]              havoc success_s598;
[L4917]              havoc arg838_s0;
[L4918]              havoc __ret_0_frozenAccount;
[L4919]              havoc arg839_s0;
[L4920]              havoc __ret_0_lockedAccount;
[L4921]              havoc arg840_s0;
[L4922]              havoc __ret_0_lockedAmount;
[L4923]              havoc initialSupply_s639;
[L4924]              havoc tokenName_s639;
[L4925]              havoc tokenSymbol_s639;
[L4926]              havoc target_s779;
[L4927]              havoc mintedAmount_s779;
[L4928]              havoc success_s779;
[L4929]              havoc target_s804;
[L4930]              havoc freeze_s804;
[L4931]              havoc success_s804;
[L4932]              havoc target_s832;
[L4933]              havoc time_s832;
[L4934]              havoc amount_s832;
[L4935]              havoc success_s832;
[L4936]              havoc tmpNow;
[L4937]              havoc gas;
[L4938]              assume gas > 4000000 && gas <= 8000000;
[L4939]              tmpNow := now;
[L4940]              havoc now;
[L4941]              assume now > tmpNow;
[L4942]              assume msgsender_MSG != null;
[L4943]              assume DType[msgsender_MSG] != SafeMath;
[L4944]              assume DType[msgsender_MSG] != owned;
[L4945]              assume DType[msgsender_MSG] != tokenRecipient;
[L4946]              assume DType[msgsender_MSG] != TokenERC20;
[L4947]              assume DType[msgsender_MSG] != ERC20ext;
[L4948]              Alloc[msgsender_MSG] := true;
[L4949]  COND FALSE  !(choice == 20)
[L4955]  COND FALSE  !(choice == 19)
[L4961]  COND FALSE  !(choice == 18)
[L4967]  COND FALSE  !(choice == 17)
[L4973]  COND FALSE  !(choice == 16)
[L4979]  COND FALSE  !(choice == 15)
[L4985]  COND FALSE  !(choice == 14)
[L4991]  COND FALSE  !(choice == 13)
[L4997]  COND TRUE   choice == 12
[L4998]              gas := gas - 21000;
[L4999]  COND TRUE   gas >= 0
[L5000]              assume _value_s365 >= 0 && _value_s365 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5001]              assume msgvalue_MSG == 0;
[L5002]  CALL        call success_s365 := transfer~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, _to_s365, _value_s365);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG != _to_s365 && (_value_s365 > balanceOf_TokenERC20[this][msgsender_MSG] || balanceOf_TokenERC20[this][_to_s365] + _value_s365 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && _value_s365 >= 0) && _value_s365 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_TokenERC20[this][_to_s365] >= 0) && balanceOf_TokenERC20[this][_to_s365] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_TokenERC20[this][msgsender_MSG] >= 0) && balanceOf_TokenERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_TokenERC200 := true;
[L2]                 call_transfer_TokenERC200 := false;
[L2]                 revert := revert_hold;
[L527]               havoc __exception;
[L528]               revert := false;
[L529]   COND FALSE  !(__exception)
[L558]   CALL        call success_s365 := transfer~address~uint256_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, _to_s365, _value_s365);
[L2853]  COND TRUE   DType[this] == ERC20ext
[L2854]  CALL        call _transfer~address~address~uint256_ERC20ext__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, _to_s365, _value_s365);
[L3312]  COND FALSE  !(!(now > lockedAccount_ERC20ext[this][_from_s739] || (lockedAmount_ERC20ext[this][_from_s739] + _value_s739) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 < balanceOf_TokenERC20[this][_from_s739]))
[L3316]              __var_14 := null;
[L3317]  COND FALSE  !(!(_to_s739 != null))
[L3321]  COND FALSE  !(!(balanceOf_TokenERC20[this][_from_s739] >= _value_s739))
[L3325]  COND FALSE  !(!((balanceOf_TokenERC20[this][_to_s739] + _value_s739) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 >= balanceOf_TokenERC20[this][_to_s739]))
[L3329]  COND FALSE  !(!!frozenAccount_ERC20ext[this][_from_s739])
[L3333]  COND FALSE  !(!!frozenAccount_ERC20ext[this][_to_s739])
[L3337]  CALL        call __var_15 := sub~uint256~uint256_SafeMath__success(this, this, 0, balanceOf_TokenERC20[this][_from_s739], _value_s739);
[L2509]  COND FALSE  !(!(b_s51 <= a_s51))
[L2513]              c_s51 := (a_s51 - b_s51) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2514]              __ret_0_ := c_s51;
[L3337]  RET         call __var_15 := sub~uint256~uint256_SafeMath__success(this, this, 0, balanceOf_TokenERC20[this][_from_s739], _value_s739);
[L3338]  COND FALSE  !(revert)
[L3341]              sum_balanceOf0[this] := sum_balanceOf0[this] - balanceOf_TokenERC20[this][_from_s739];
[L3342]              balanceOf_TokenERC20[this][_from_s739] := __var_15;
[L3343]              sum_balanceOf0[this] := sum_balanceOf0[this] + balanceOf_TokenERC20[this][_from_s739];
[L3344]  CALL        call __var_16 := add~uint256~uint256_SafeMath__success(this, this, 0, balanceOf_TokenERC20[this][_to_s739], _value_s739);
[L2485]              c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2486]  COND FALSE  !(!(c_s26 >= a_s26))
[L2490]              __ret_0_ := c_s26;
[L3344]  RET         call __var_16 := add~uint256~uint256_SafeMath__success(this, this, 0, balanceOf_TokenERC20[this][_to_s739], _value_s739);
[L3345]  COND FALSE  !(revert)
[L3348]              sum_balanceOf0[this] := sum_balanceOf0[this] - balanceOf_TokenERC20[this][_to_s739];
[L3349]              balanceOf_TokenERC20[this][_to_s739] := __var_16;
[L3350]              sum_balanceOf0[this] := sum_balanceOf0[this] + balanceOf_TokenERC20[this][_to_s739];
[L3351]              assert { :EventEmitted "Transfer_ERC20ext" } true;
[L2854]  RET         call _transfer~address~address~uint256_ERC20ext__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, _to_s365, _value_s365);
[L2855]  COND FALSE  !(revert)
[L2866]              success_s365 := true;
[L558]   RET         call success_s365 := transfer~address~uint256_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, _to_s365, _value_s365);
[L559]               assume !revert && gas >= 0;
[L5002]  RET         call success_s365 := transfer~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, _to_s365, _value_s365);
[L5099]  RET         call CorralChoice_ERC20ext(this);

Loop:
[L5099]  CALL        call CorralChoice_ERC20ext(this);
[L4881]              havoc msgsender_MSG;
[L4882]              havoc msgvalue_MSG;
[L4883]              havoc choice;
[L4884]              havoc __ret_0_owner;
[L4885]              havoc newOwner_s166;
[L4886]              havoc __ret_0_name;
[L4887]              havoc __ret_0_symbol;
[L4888]              havoc __ret_0_decimals;
[L4889]              havoc __ret_0_totalSupply;
[L4890]              havoc arg835_s0;
[L4891]              havoc __ret_0_balanceOf;
[L4892]              havoc arg836_s0;
[L4893]              havoc arg837_s0;
[L4894]              havoc __ret_0_allowance;
[L4895]              havoc initialSupply_s258;
[L4896]              havoc tokenName_s258;
[L4897]              havoc tokenSymbol_s258;
[L4898]              havoc _to_s365;
[L4899]              havoc _value_s365;
[L4900]              havoc success_s365;
[L4901]              havoc _from_s413;
[L4902]              havoc _to_s413;
[L4903]              havoc _value_s413;
[L4904]              havoc success_s413;
[L4905]              havoc _spender_s441;
[L4906]              havoc _value_s441;
[L4907]              havoc success_s441;
[L4908]              havoc _spender_s479;
[L4909]              havoc _value_s479;
[L4910]              havoc _extraData_s479;
[L4911]              havoc success_s479;
[L4912]              havoc _value_s527;
[L4913]              havoc success_s527;
[L4914]              havoc _from_s598;
[L4915]              havoc _value_s598;
[L4916]              havoc success_s598;
[L4917]              havoc arg838_s0;
[L4918]              havoc __ret_0_frozenAccount;
[L4919]              havoc arg839_s0;
[L4920]              havoc __ret_0_lockedAccount;
[L4921]              havoc arg840_s0;
[L4922]              havoc __ret_0_lockedAmount;
[L4923]              havoc initialSupply_s639;
[L4924]              havoc tokenName_s639;
[L4925]              havoc tokenSymbol_s639;
[L4926]              havoc target_s779;
[L4927]              havoc mintedAmount_s779;
[L4928]              havoc success_s779;
[L4929]              havoc target_s804;
[L4930]              havoc freeze_s804;
[L4931]              havoc success_s804;
[L4932]              havoc target_s832;
[L4933]              havoc time_s832;
[L4934]              havoc amount_s832;
[L4935]              havoc success_s832;
[L4936]              havoc tmpNow;
[L4937]              havoc gas;
[L4938]              assume gas > 4000000 && gas <= 8000000;
[L4939]              tmpNow := now;
[L4940]              havoc now;
[L4941]              assume now > tmpNow;
[L4942]              assume msgsender_MSG != null;
[L4943]              assume DType[msgsender_MSG] != SafeMath;
[L4944]              assume DType[msgsender_MSG] != owned;
[L4945]              assume DType[msgsender_MSG] != tokenRecipient;
[L4946]              assume DType[msgsender_MSG] != TokenERC20;
[L4947]              assume DType[msgsender_MSG] != ERC20ext;
[L4948]              Alloc[msgsender_MSG] := true;
[L4949]  COND FALSE  !(choice == 20)
[L4955]  COND FALSE  !(choice == 19)
[L4961]  COND FALSE  !(choice == 18)
[L4967]  COND FALSE  !(choice == 17)
[L4973]  COND FALSE  !(choice == 16)
[L4979]  COND FALSE  !(choice == 15)
[L4985]  COND FALSE  !(choice == 14)
[L4991]  COND FALSE  !(choice == 13)
[L4997]  COND TRUE   choice == 12
[L4998]              gas := gas - 21000;
[L4999]  COND TRUE   gas >= 0
[L5000]              assume _value_s365 >= 0 && _value_s365 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5001]              assume msgvalue_MSG == 0;
[L5002]  CALL        call success_s365 := transfer~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, _to_s365, _value_s365);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG != _to_s365 && (_value_s365 > balanceOf_TokenERC20[this][msgsender_MSG] || balanceOf_TokenERC20[this][_to_s365] + _value_s365 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && _value_s365 >= 0) && _value_s365 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_TokenERC20[this][_to_s365] >= 0) && balanceOf_TokenERC20[this][_to_s365] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_TokenERC20[this][msgsender_MSG] >= 0) && balanceOf_TokenERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_TokenERC200 := true;
[L2]                 call_transfer_TokenERC200 := false;
[L2]                 revert := revert_hold;
[L527]               havoc __exception;
[L528]               revert := false;
[L529]   COND FALSE  !(__exception)
[L558]   CALL        call success_s365 := transfer~address~uint256_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, _to_s365, _value_s365);
[L2853]  COND TRUE   DType[this] == ERC20ext
[L2854]  CALL        call _transfer~address~address~uint256_ERC20ext__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, _to_s365, _value_s365);
[L3312]  COND FALSE  !(!(now > lockedAccount_ERC20ext[this][_from_s739] || (lockedAmount_ERC20ext[this][_from_s739] + _value_s739) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 < balanceOf_TokenERC20[this][_from_s739]))
[L3316]              __var_14 := null;
[L3317]  COND FALSE  !(!(_to_s739 != null))
[L3321]  COND FALSE  !(!(balanceOf_TokenERC20[this][_from_s739] >= _value_s739))
[L3325]  COND FALSE  !(!((balanceOf_TokenERC20[this][_to_s739] + _value_s739) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 >= balanceOf_TokenERC20[this][_to_s739]))
[L3329]  COND FALSE  !(!!frozenAccount_ERC20ext[this][_from_s739])
[L3333]  COND FALSE  !(!!frozenAccount_ERC20ext[this][_to_s739])
[L3337]  CALL        call __var_15 := sub~uint256~uint256_SafeMath__success(this, this, 0, balanceOf_TokenERC20[this][_from_s739], _value_s739);
[L2509]  COND FALSE  !(!(b_s51 <= a_s51))
[L2513]              c_s51 := (a_s51 - b_s51) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2514]              __ret_0_ := c_s51;
[L3337]  RET         call __var_15 := sub~uint256~uint256_SafeMath__success(this, this, 0, balanceOf_TokenERC20[this][_from_s739], _value_s739);
[L3338]  COND FALSE  !(revert)
[L3341]              sum_balanceOf0[this] := sum_balanceOf0[this] - balanceOf_TokenERC20[this][_from_s739];
[L3342]              balanceOf_TokenERC20[this][_from_s739] := __var_15;
[L3343]              sum_balanceOf0[this] := sum_balanceOf0[this] + balanceOf_TokenERC20[this][_from_s739];
[L3344]  CALL        call __var_16 := add~uint256~uint256_SafeMath__success(this, this, 0, balanceOf_TokenERC20[this][_to_s739], _value_s739);
[L2485]              c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2486]  COND FALSE  !(!(c_s26 >= a_s26))
[L2490]              __ret_0_ := c_s26;
[L3344]  RET         call __var_16 := add~uint256~uint256_SafeMath__success(this, this, 0, balanceOf_TokenERC20[this][_to_s739], _value_s739);
[L3345]  COND FALSE  !(revert)
[L3348]              sum_balanceOf0[this] := sum_balanceOf0[this] - balanceOf_TokenERC20[this][_to_s739];
[L3349]              balanceOf_TokenERC20[this][_to_s739] := __var_16;
[L3350]              sum_balanceOf0[this] := sum_balanceOf0[this] + balanceOf_TokenERC20[this][_to_s739];
[L3351]              assert { :EventEmitted "Transfer_ERC20ext" } true;
[L2854]  RET         call _transfer~address~address~uint256_ERC20ext__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, _to_s365, _value_s365);
[L2855]  COND FALSE  !(revert)
[L2866]              success_s365 := true;
[L558]   RET         call success_s365 := transfer~address~uint256_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, _to_s365, _value_s365);
[L559]               assume !revert && gas >= 0;
[L5002]  RET         call success_s365 := transfer~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, _to_s365, _value_s365);
[L5099]  RET         call CorralChoice_ERC20ext(this);

[2020-11-25 15:07:08,023 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 15:07:08,024 INFO  L82        PathProgramCache]: Analyzing trace with hash 434039848, now seen corresponding path program 1 times
[2020-11-25 15:07:08,024 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 15:07:08,046 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 15:07:08,481 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 15:07:08,481 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 15:07:08,481 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [18] imperfect sequences [] total 18
[2020-11-25 15:07:08,482 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 15:07:08,482 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 19 interpolants.
[2020-11-25 15:07:08,482 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=42, Invalid=300, Unknown=0, NotChecked=0, Total=342
[2020-11-25 15:07:08,482 INFO  L87              Difference]: Start difference. First operand 3273 states and 3575 transitions. cyclomatic complexity: 304 Second operand 19 states.
[2020-11-25 15:07:11,531 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 15:07:11,531 INFO  L93              Difference]: Finished difference Result 3386 states and 3715 transitions.
[2020-11-25 15:07:11,532 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 19 states. 
[2020-11-25 15:07:11,532 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 3386 states and 3715 transitions.
[2020-11-25 15:07:11,545 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 15:07:11,560 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 3386 states to 3386 states and 3715 transitions.
[2020-11-25 15:07:11,560 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 955
[2020-11-25 15:07:11,560 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 955
[2020-11-25 15:07:11,560 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 3386 states and 3715 transitions.
[2020-11-25 15:07:11,564 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 15:07:11,564 INFO  L728         BuchiCegarLoop]: Abstraction has 3386 states and 3715 transitions.
[2020-11-25 15:07:11,568 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 3386 states and 3715 transitions.
[2020-11-25 15:07:11,601 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 3386 to 3165.
[2020-11-25 15:07:11,601 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 3165 states.
[2020-11-25 15:07:11,605 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 3165 states to 3165 states and 3435 transitions.
[2020-11-25 15:07:11,605 INFO  L751         BuchiCegarLoop]: Abstraction has 3165 states and 3435 transitions.
[2020-11-25 15:07:11,606 INFO  L631         BuchiCegarLoop]: Abstraction has 3165 states and 3435 transitions.
[2020-11-25 15:07:11,606 INFO  L445         BuchiCegarLoop]: ======== Iteration 4============
[2020-11-25 15:07:11,606 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 3165 states and 3435 transitions.
[2020-11-25 15:07:11,611 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 15:07:11,611 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 15:07:11,611 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 15:07:11,614 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 15:07:11,614 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transfer_TokenERC200 := false;
[L2]                 call_transfer_TokenERC200 := false;
[L2]     CALL        call main();
[L5089]              assume null == 0;
[L5090]  CALL        call this := FreshRefGenerator__success();
[L2432]              havoc newRef;
[L2433]              assume Alloc[newRef] == false;
[L2434]              Alloc[newRef] := true;
[L2435]              assume newRef != null;
[L5090]  RET         call this := FreshRefGenerator__success();
[L5091]              assume now >= 0;
[L5092]              assume DType[this] == ERC20ext;
[L5093]              assume msgvalue_MSG == 0;
[L5094]              gas := gas - 53000;
[L5095]  CALL        call ERC20ext_ERC20ext(this, msgsender_MSG, msgvalue_MSG, initialSupply_s639, tokenName_s639, tokenSymbol_s639);
[L1360]              havoc __exception;
[L1361]              revert := false;
[L1362]  COND FALSE  !(__exception)
[L1391]  CALL        call ERC20ext_ERC20ext__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s639, tokenName_s639, tokenSymbol_s639);
[L3247]  CALL        call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L2624]  CALL        call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2607]              assume msgsender_MSG != null;
[L2608]              Balance[this] := 0;
[L2609]              owner_owned[this] := null;
[L2611]              owner_owned[this] := msgsender_MSG;
[L2624]  RET         call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2625]  COND FALSE  !(revert)
[L3247]  RET         call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L3248]  COND FALSE  !(revert)
[L3251]  CALL        call TokenERC20_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s639, tokenName_s639, tokenSymbol_s639);
[L2752]  CALL        call TokenERC20_TokenERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s258, tokenName_s258, tokenSymbol_s258);
[L2720]              assume msgsender_MSG != null;
[L2721]              Balance[this] := 0;
[L2722]              name_TokenERC20[this] := 1101944712;
[L2723]              symbol_TokenERC20[this] := 1101944712;
[L2724]              decimals_TokenERC20[this] := 18;
[L2725]              totalSupply_TokenERC20[this] := 0;
[L2726]              balanceOf_TokenERC20[this] := zeroRefintArr();
[L2727]              sum_balanceOf0[this] := 0;
[L2728]              allowance_TokenERC20[this] := zeroRefRefintArr();
[L2729]              sum_allowance1[this] := 0;
[L2731]              __var_1 := decimals_TokenERC20[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2732]              totalSupply_TokenERC20[this] := nonlinearMul(initialSupply_s258, nonlinearPow(10, decimals_TokenERC20[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2733]              sum_balanceOf0[this] := sum_balanceOf0[this] - balanceOf_TokenERC20[this][msgsender_MSG];
[L2734]              balanceOf_TokenERC20[this][msgsender_MSG] := totalSupply_TokenERC20[this];
[L2735]              sum_balanceOf0[this] := sum_balanceOf0[this] + balanceOf_TokenERC20[this][msgsender_MSG];
[L2736]              name_TokenERC20[this] := tokenName_s258;
[L2737]              symbol_TokenERC20[this] := tokenSymbol_s258;
[L2752]  RET         call TokenERC20_TokenERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s258, tokenName_s258, tokenSymbol_s258);
[L2753]  COND FALSE  !(revert)
[L3251]  RET         call TokenERC20_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s639, tokenName_s639, tokenSymbol_s639);
[L3252]  COND FALSE  !(revert)
[L3255]  CALL        call ERC20ext_ERC20ext_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s639, tokenName_s639, tokenSymbol_s639);
[L3219]              assume msgsender_MSG != null;
[L3220]              Balance[this] := 0;
[L3221]              frozenAccount_ERC20ext[this] := zeroRefboolArr();
[L3222]              lockedAccount_ERC20ext[this] := zeroRefintArr();
[L3223]              sum_lockedAccount3[this] := 0;
[L3224]              lockedAmount_ERC20ext[this] := zeroRefintArr();
[L3225]              sum_lockedAmount4[this] := 0;
[L3255]  RET         call ERC20ext_ERC20ext_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s639, tokenName_s639, tokenSymbol_s639);
[L3256]  COND FALSE  !(revert)
[L1391]  RET         call ERC20ext_ERC20ext__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s639, tokenName_s639, tokenSymbol_s639);
[L1392]              assume !revert && gas >= 0;
[L5095]  RET         call ERC20ext_ERC20ext(this, msgsender_MSG, msgvalue_MSG, initialSupply_s639, tokenName_s639, tokenSymbol_s639);
[L5096]              assume !revert && gas >= 0;
[L5099]  CALL        call CorralChoice_ERC20ext(this);
[L4881]              havoc msgsender_MSG;
[L4882]              havoc msgvalue_MSG;
[L4883]              havoc choice;
[L4884]              havoc __ret_0_owner;
[L4885]              havoc newOwner_s166;
[L4886]              havoc __ret_0_name;
[L4887]              havoc __ret_0_symbol;
[L4888]              havoc __ret_0_decimals;
[L4889]              havoc __ret_0_totalSupply;
[L4890]              havoc arg835_s0;
[L4891]              havoc __ret_0_balanceOf;
[L4892]              havoc arg836_s0;
[L4893]              havoc arg837_s0;
[L4894]              havoc __ret_0_allowance;
[L4895]              havoc initialSupply_s258;
[L4896]              havoc tokenName_s258;
[L4897]              havoc tokenSymbol_s258;
[L4898]              havoc _to_s365;
[L4899]              havoc _value_s365;
[L4900]              havoc success_s365;
[L4901]              havoc _from_s413;
[L4902]              havoc _to_s413;
[L4903]              havoc _value_s413;
[L4904]              havoc success_s413;
[L4905]              havoc _spender_s441;
[L4906]              havoc _value_s441;
[L4907]              havoc success_s441;
[L4908]              havoc _spender_s479;
[L4909]              havoc _value_s479;
[L4910]              havoc _extraData_s479;
[L4911]              havoc success_s479;
[L4912]              havoc _value_s527;
[L4913]              havoc success_s527;
[L4914]              havoc _from_s598;
[L4915]              havoc _value_s598;
[L4916]              havoc success_s598;
[L4917]              havoc arg838_s0;
[L4918]              havoc __ret_0_frozenAccount;
[L4919]              havoc arg839_s0;
[L4920]              havoc __ret_0_lockedAccount;
[L4921]              havoc arg840_s0;
[L4922]              havoc __ret_0_lockedAmount;
[L4923]              havoc initialSupply_s639;
[L4924]              havoc tokenName_s639;
[L4925]              havoc tokenSymbol_s639;
[L4926]              havoc target_s779;
[L4927]              havoc mintedAmount_s779;
[L4928]              havoc success_s779;
[L4929]              havoc target_s804;
[L4930]              havoc freeze_s804;
[L4931]              havoc success_s804;
[L4932]              havoc target_s832;
[L4933]              havoc time_s832;
[L4934]              havoc amount_s832;
[L4935]              havoc success_s832;
[L4936]              havoc tmpNow;
[L4937]              havoc gas;
[L4938]              assume gas > 4000000 && gas <= 8000000;
[L4939]              tmpNow := now;
[L4940]              havoc now;
[L4941]              assume now > tmpNow;
[L4942]              assume msgsender_MSG != null;
[L4943]              assume DType[msgsender_MSG] != SafeMath;
[L4944]              assume DType[msgsender_MSG] != owned;
[L4945]              assume DType[msgsender_MSG] != tokenRecipient;
[L4946]              assume DType[msgsender_MSG] != TokenERC20;
[L4947]              assume DType[msgsender_MSG] != ERC20ext;
[L4948]              Alloc[msgsender_MSG] := true;
[L4949]  COND FALSE  !(choice == 20)
[L4955]  COND FALSE  !(choice == 19)
[L4961]  COND FALSE  !(choice == 18)
[L4967]  COND FALSE  !(choice == 17)
[L4973]  COND FALSE  !(choice == 16)
[L4979]  COND FALSE  !(choice == 15)
[L4985]  COND FALSE  !(choice == 14)
[L4991]  COND FALSE  !(choice == 13)
[L4997]  COND TRUE   choice == 12
[L4998]              gas := gas - 21000;
[L4999]  COND TRUE   gas >= 0
[L5000]              assume _value_s365 >= 0 && _value_s365 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5001]              assume msgvalue_MSG == 0;
[L5002]  CALL        call success_s365 := transfer~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, _to_s365, _value_s365);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG != _to_s365 && (_value_s365 > balanceOf_TokenERC20[this][msgsender_MSG] || balanceOf_TokenERC20[this][_to_s365] + _value_s365 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && _value_s365 >= 0) && _value_s365 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_TokenERC20[this][_to_s365] >= 0) && balanceOf_TokenERC20[this][_to_s365] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_TokenERC20[this][msgsender_MSG] >= 0) && balanceOf_TokenERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_TokenERC200 := true;
[L2]                 call_transfer_TokenERC200 := false;
[L2]                 revert := revert_hold;
[L527]               havoc __exception;
[L528]               revert := false;
[L529]   COND FALSE  !(__exception)
[L558]   CALL        call success_s365 := transfer~address~uint256_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, _to_s365, _value_s365);
[L2853]  COND FALSE  !(DType[this] == ERC20ext)
[L2858]  COND TRUE   DType[this] == TokenERC20
[L2859]  CALL        call _transfer~address~address~uint256_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, _to_s365, _value_s365);
[L2800]              __var_2 := null;
[L2801]  COND FALSE  !(!(_to_s346 != null))
[L2805]  COND FALSE  !(!(balanceOf_TokenERC20[this][_from_s346] >= _value_s346))
[L2809]  COND FALSE  !(!((balanceOf_TokenERC20[this][_to_s346] + _value_s346) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 > balanceOf_TokenERC20[this][_to_s346]))
[L2813]              previousBalances_s346 := (balanceOf_TokenERC20[this][_from_s346] + balanceOf_TokenERC20[this][_to_s346]) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2814]  CALL        call __var_3 := sub~uint256~uint256_SafeMath__success(this, this, 0, balanceOf_TokenERC20[this][_from_s346], _value_s346);
[L2509]  COND FALSE  !(!(b_s51 <= a_s51))
[L2513]              c_s51 := (a_s51 - b_s51) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2514]              __ret_0_ := c_s51;
[L2814]  RET         call __var_3 := sub~uint256~uint256_SafeMath__success(this, this, 0, balanceOf_TokenERC20[this][_from_s346], _value_s346);
[L2815]  COND FALSE  !(revert)
[L2818]              sum_balanceOf0[this] := sum_balanceOf0[this] - balanceOf_TokenERC20[this][_from_s346];
[L2819]              balanceOf_TokenERC20[this][_from_s346] := __var_3;
[L2820]              sum_balanceOf0[this] := sum_balanceOf0[this] + balanceOf_TokenERC20[this][_from_s346];
[L2821]  CALL        call __var_4 := add~uint256~uint256_SafeMath__success(this, this, 0, balanceOf_TokenERC20[this][_to_s346], _value_s346);
[L2485]              c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2486]  COND FALSE  !(!(c_s26 >= a_s26))
[L2490]              __ret_0_ := c_s26;
[L2821]  RET         call __var_4 := add~uint256~uint256_SafeMath__success(this, this, 0, balanceOf_TokenERC20[this][_to_s346], _value_s346);
[L2822]  COND FALSE  !(revert)
[L2825]              sum_balanceOf0[this] := sum_balanceOf0[this] - balanceOf_TokenERC20[this][_to_s346];
[L2826]              balanceOf_TokenERC20[this][_to_s346] := __var_4;
[L2827]              sum_balanceOf0[this] := sum_balanceOf0[this] + balanceOf_TokenERC20[this][_to_s346];
[L2828]              assert { :EventEmitted "Transfer_TokenERC20" } true;
[L2829]              assert (balanceOf_TokenERC20[this][_from_s346] + balanceOf_TokenERC20[this][_to_s346]) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 == previousBalances_s346;
[L2859]  RET         call _transfer~address~address~uint256_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, _to_s365, _value_s365);
[L2860]  COND FALSE  !(revert)
[L2866]              success_s365 := true;
[L558]   RET         call success_s365 := transfer~address~uint256_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, _to_s365, _value_s365);
[L559]               assume !revert && gas >= 0;
[L5002]  RET         call success_s365 := transfer~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, _to_s365, _value_s365);
[L5099]  RET         call CorralChoice_ERC20ext(this);

Loop:
[L5099]  CALL        call CorralChoice_ERC20ext(this);
[L4881]              havoc msgsender_MSG;
[L4882]              havoc msgvalue_MSG;
[L4883]              havoc choice;
[L4884]              havoc __ret_0_owner;
[L4885]              havoc newOwner_s166;
[L4886]              havoc __ret_0_name;
[L4887]              havoc __ret_0_symbol;
[L4888]              havoc __ret_0_decimals;
[L4889]              havoc __ret_0_totalSupply;
[L4890]              havoc arg835_s0;
[L4891]              havoc __ret_0_balanceOf;
[L4892]              havoc arg836_s0;
[L4893]              havoc arg837_s0;
[L4894]              havoc __ret_0_allowance;
[L4895]              havoc initialSupply_s258;
[L4896]              havoc tokenName_s258;
[L4897]              havoc tokenSymbol_s258;
[L4898]              havoc _to_s365;
[L4899]              havoc _value_s365;
[L4900]              havoc success_s365;
[L4901]              havoc _from_s413;
[L4902]              havoc _to_s413;
[L4903]              havoc _value_s413;
[L4904]              havoc success_s413;
[L4905]              havoc _spender_s441;
[L4906]              havoc _value_s441;
[L4907]              havoc success_s441;
[L4908]              havoc _spender_s479;
[L4909]              havoc _value_s479;
[L4910]              havoc _extraData_s479;
[L4911]              havoc success_s479;
[L4912]              havoc _value_s527;
[L4913]              havoc success_s527;
[L4914]              havoc _from_s598;
[L4915]              havoc _value_s598;
[L4916]              havoc success_s598;
[L4917]              havoc arg838_s0;
[L4918]              havoc __ret_0_frozenAccount;
[L4919]              havoc arg839_s0;
[L4920]              havoc __ret_0_lockedAccount;
[L4921]              havoc arg840_s0;
[L4922]              havoc __ret_0_lockedAmount;
[L4923]              havoc initialSupply_s639;
[L4924]              havoc tokenName_s639;
[L4925]              havoc tokenSymbol_s639;
[L4926]              havoc target_s779;
[L4927]              havoc mintedAmount_s779;
[L4928]              havoc success_s779;
[L4929]              havoc target_s804;
[L4930]              havoc freeze_s804;
[L4931]              havoc success_s804;
[L4932]              havoc target_s832;
[L4933]              havoc time_s832;
[L4934]              havoc amount_s832;
[L4935]              havoc success_s832;
[L4936]              havoc tmpNow;
[L4937]              havoc gas;
[L4938]              assume gas > 4000000 && gas <= 8000000;
[L4939]              tmpNow := now;
[L4940]              havoc now;
[L4941]              assume now > tmpNow;
[L4942]              assume msgsender_MSG != null;
[L4943]              assume DType[msgsender_MSG] != SafeMath;
[L4944]              assume DType[msgsender_MSG] != owned;
[L4945]              assume DType[msgsender_MSG] != tokenRecipient;
[L4946]              assume DType[msgsender_MSG] != TokenERC20;
[L4947]              assume DType[msgsender_MSG] != ERC20ext;
[L4948]              Alloc[msgsender_MSG] := true;
[L4949]  COND FALSE  !(choice == 20)
[L4955]  COND FALSE  !(choice == 19)
[L4961]  COND FALSE  !(choice == 18)
[L4967]  COND FALSE  !(choice == 17)
[L4973]  COND FALSE  !(choice == 16)
[L4979]  COND FALSE  !(choice == 15)
[L4985]  COND FALSE  !(choice == 14)
[L4991]  COND FALSE  !(choice == 13)
[L4997]  COND TRUE   choice == 12
[L4998]              gas := gas - 21000;
[L4999]  COND TRUE   gas >= 0
[L5000]              assume _value_s365 >= 0 && _value_s365 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5001]              assume msgvalue_MSG == 0;
[L5002]  CALL        call success_s365 := transfer~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, _to_s365, _value_s365);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG != _to_s365 && (_value_s365 > balanceOf_TokenERC20[this][msgsender_MSG] || balanceOf_TokenERC20[this][_to_s365] + _value_s365 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && _value_s365 >= 0) && _value_s365 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_TokenERC20[this][_to_s365] >= 0) && balanceOf_TokenERC20[this][_to_s365] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_TokenERC20[this][msgsender_MSG] >= 0) && balanceOf_TokenERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_TokenERC200 := true;
[L2]                 call_transfer_TokenERC200 := false;
[L2]                 revert := revert_hold;
[L527]               havoc __exception;
[L528]               revert := false;
[L529]   COND FALSE  !(__exception)
[L558]   CALL        call success_s365 := transfer~address~uint256_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, _to_s365, _value_s365);
[L2853]  COND FALSE  !(DType[this] == ERC20ext)
[L2858]  COND TRUE   DType[this] == TokenERC20
[L2859]  CALL        call _transfer~address~address~uint256_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, _to_s365, _value_s365);
[L2800]              __var_2 := null;
[L2801]  COND FALSE  !(!(_to_s346 != null))
[L2805]  COND FALSE  !(!(balanceOf_TokenERC20[this][_from_s346] >= _value_s346))
[L2809]  COND FALSE  !(!((balanceOf_TokenERC20[this][_to_s346] + _value_s346) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 > balanceOf_TokenERC20[this][_to_s346]))
[L2813]              previousBalances_s346 := (balanceOf_TokenERC20[this][_from_s346] + balanceOf_TokenERC20[this][_to_s346]) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2814]  CALL        call __var_3 := sub~uint256~uint256_SafeMath__success(this, this, 0, balanceOf_TokenERC20[this][_from_s346], _value_s346);
[L2509]  COND FALSE  !(!(b_s51 <= a_s51))
[L2513]              c_s51 := (a_s51 - b_s51) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2514]              __ret_0_ := c_s51;
[L2814]  RET         call __var_3 := sub~uint256~uint256_SafeMath__success(this, this, 0, balanceOf_TokenERC20[this][_from_s346], _value_s346);
[L2815]  COND FALSE  !(revert)
[L2818]              sum_balanceOf0[this] := sum_balanceOf0[this] - balanceOf_TokenERC20[this][_from_s346];
[L2819]              balanceOf_TokenERC20[this][_from_s346] := __var_3;
[L2820]              sum_balanceOf0[this] := sum_balanceOf0[this] + balanceOf_TokenERC20[this][_from_s346];
[L2821]  CALL        call __var_4 := add~uint256~uint256_SafeMath__success(this, this, 0, balanceOf_TokenERC20[this][_to_s346], _value_s346);
[L2485]              c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2486]  COND FALSE  !(!(c_s26 >= a_s26))
[L2490]              __ret_0_ := c_s26;
[L2821]  RET         call __var_4 := add~uint256~uint256_SafeMath__success(this, this, 0, balanceOf_TokenERC20[this][_to_s346], _value_s346);
[L2822]  COND FALSE  !(revert)
[L2825]              sum_balanceOf0[this] := sum_balanceOf0[this] - balanceOf_TokenERC20[this][_to_s346];
[L2826]              balanceOf_TokenERC20[this][_to_s346] := __var_4;
[L2827]              sum_balanceOf0[this] := sum_balanceOf0[this] + balanceOf_TokenERC20[this][_to_s346];
[L2828]              assert { :EventEmitted "Transfer_TokenERC20" } true;
[L2829]              assert (balanceOf_TokenERC20[this][_from_s346] + balanceOf_TokenERC20[this][_to_s346]) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 == previousBalances_s346;
[L2859]  RET         call _transfer~address~address~uint256_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, _to_s365, _value_s365);
[L2860]  COND FALSE  !(revert)
[L2866]              success_s365 := true;
[L558]   RET         call success_s365 := transfer~address~uint256_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, _to_s365, _value_s365);
[L559]               assume !revert && gas >= 0;
[L5002]  RET         call success_s365 := transfer~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, _to_s365, _value_s365);
[L5099]  RET         call CorralChoice_ERC20ext(this);

[2020-11-25 15:07:11,618 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 15:07:11,618 INFO  L82        PathProgramCache]: Analyzing trace with hash -1276788450, now seen corresponding path program 1 times
[2020-11-25 15:07:11,619 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 15:07:11,631 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 15:07:11,673 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 15:07:11,674 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 15:07:11,674 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [5] imperfect sequences [] total 5
[2020-11-25 15:07:11,674 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 15:07:11,674 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 6 interpolants.
[2020-11-25 15:07:11,674 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=9, Invalid=21, Unknown=0, NotChecked=0, Total=30
[2020-11-25 15:07:11,674 INFO  L87              Difference]: Start difference. First operand 3165 states and 3435 transitions. cyclomatic complexity: 273 Second operand 6 states.
[2020-11-25 15:07:11,722 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 15:07:11,722 INFO  L93              Difference]: Finished difference Result 3179 states and 3445 transitions.
[2020-11-25 15:07:11,722 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 6 states. 
[2020-11-25 15:07:11,723 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 3179 states and 3445 transitions.
[2020-11-25 15:07:11,729 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 15:07:11,737 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 3179 states to 3149 states and 3410 transitions.
[2020-11-25 15:07:11,738 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 873
[2020-11-25 15:07:11,738 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 873
[2020-11-25 15:07:11,738 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 3149 states and 3410 transitions.
[2020-11-25 15:07:11,740 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 15:07:11,740 INFO  L728         BuchiCegarLoop]: Abstraction has 3149 states and 3410 transitions.
[2020-11-25 15:07:11,743 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 3149 states and 3410 transitions.
[2020-11-25 15:07:11,761 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 3149 to 3138.
[2020-11-25 15:07:11,761 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 3138 states.
[2020-11-25 15:07:11,764 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 3138 states to 3138 states and 3399 transitions.
[2020-11-25 15:07:11,764 INFO  L751         BuchiCegarLoop]: Abstraction has 3138 states and 3399 transitions.
[2020-11-25 15:07:11,764 INFO  L631         BuchiCegarLoop]: Abstraction has 3138 states and 3399 transitions.
[2020-11-25 15:07:11,764 INFO  L445         BuchiCegarLoop]: ======== Iteration 5============
[2020-11-25 15:07:11,764 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 3138 states and 3399 transitions.
[2020-11-25 15:07:11,768 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 15:07:11,768 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 15:07:11,768 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 15:07:11,769 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 15:07:11,769 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transfer_TokenERC200 := false;
[L2]                 call_transfer_TokenERC200 := false;
[L2]     CALL        call main();
[L5089]              assume null == 0;
[L5090]  CALL        call this := FreshRefGenerator__success();
[L2432]              havoc newRef;
[L2433]              assume Alloc[newRef] == false;
[L2434]              Alloc[newRef] := true;
[L2435]              assume newRef != null;
[L5090]  RET         call this := FreshRefGenerator__success();
[L5091]              assume now >= 0;
[L5092]              assume DType[this] == ERC20ext;
[L5093]              assume msgvalue_MSG == 0;
[L5094]              gas := gas - 53000;
[L5095]  CALL        call ERC20ext_ERC20ext(this, msgsender_MSG, msgvalue_MSG, initialSupply_s639, tokenName_s639, tokenSymbol_s639);
[L1360]              havoc __exception;
[L1361]              revert := false;
[L1362]  COND TRUE   __exception
[L1363]              __tmp__Balance := Balance;
[L1364]              __tmp__DType := DType;
[L1365]              __tmp__Alloc := Alloc;
[L1366]              __tmp__balance_ADDR := balance_ADDR;
[L1367]              __tmp__M_Ref_int := M_Ref_int;
[L1368]              __tmp__sum_balanceOf0 := sum_balanceOf0;
[L1369]              __tmp__alloc_allowance_TokenERC20_lvl0 := alloc_allowance_TokenERC20_lvl0;
[L1370]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L1371]              __tmp__sum_allowance1 := sum_allowance1;
[L1372]              __tmp__M_Ref_bool := M_Ref_bool;
[L1373]              __tmp__sum_frozenAccount2 := sum_frozenAccount2;
[L1374]              __tmp__sum_lockedAccount3 := sum_lockedAccount3;
[L1375]              __tmp__sum_lockedAmount4 := sum_lockedAmount4;
[L1376]              __tmp__Length := Length;
[L1377]              __tmp__now := now;
[L1378]              __tmp__owner_owned := owner_owned;
[L1379]              __tmp__name_TokenERC20 := name_TokenERC20;
[L1380]              __tmp__symbol_TokenERC20 := symbol_TokenERC20;
[L1381]              __tmp__decimals_TokenERC20 := decimals_TokenERC20;
[L1382]              __tmp__totalSupply_TokenERC20 := totalSupply_TokenERC20;
[L1383]              __tmp__balanceOf_TokenERC20 := balanceOf_TokenERC20;
[L1384]              __tmp__allowance_TokenERC20 := allowance_TokenERC20;
[L1385]              __tmp__frozenAccount_ERC20ext := frozenAccount_ERC20ext;
[L1386]              __tmp__lockedAccount_ERC20ext := lockedAccount_ERC20ext;
[L1387]              __tmp__lockedAmount_ERC20ext := lockedAmount_ERC20ext;
[L1388]  CALL        call ERC20ext_ERC20ext__fail(this, msgsender_MSG, msgvalue_MSG, initialSupply_s639, tokenName_s639, tokenSymbol_s639);
[L3231]  CALL        call owned_owned__fail(this, msgsender_MSG, msgvalue_MSG);
[L2616]  CALL        call owned_owned_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2597]              assume msgsender_MSG != null;
[L2598]              __tmp__Balance[this] := 0;
[L2599]              __tmp__owner_owned[this] := null;
[L2601]              __tmp__owner_owned[this] := msgsender_MSG;
[L2616]  RET         call owned_owned_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2617]  COND FALSE  !(revert)
[L3231]  RET         call owned_owned__fail(this, msgsender_MSG, msgvalue_MSG);
[L3232]  COND FALSE  !(revert)
[L3235]  CALL        call TokenERC20_TokenERC20__fail(this, msgsender_MSG, msgvalue_MSG, initialSupply_s639, tokenName_s639, tokenSymbol_s639);
[L2743]  CALL        call TokenERC20_TokenERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, initialSupply_s258, tokenName_s258, tokenSymbol_s258);
[L2696]              assume msgsender_MSG != null;
[L2697]              __tmp__Balance[this] := 0;
[L2698]              __tmp__name_TokenERC20[this] := 1101944712;
[L2699]              __tmp__symbol_TokenERC20[this] := 1101944712;
[L2700]              __tmp__decimals_TokenERC20[this] := 18;
[L2701]              __tmp__totalSupply_TokenERC20[this] := 0;
[L2702]              __tmp__balanceOf_TokenERC20[this] := zeroRefintArr();
[L2703]              __tmp__sum_balanceOf0[this] := 0;
[L2704]              __tmp__allowance_TokenERC20[this] := zeroRefRefintArr();
[L2705]              __tmp__sum_allowance1[this] := 0;
[L2707]              __var_1 := __tmp__decimals_TokenERC20[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2708]              __tmp__totalSupply_TokenERC20[this] := nonlinearMul(initialSupply_s258, nonlinearPow(10, __tmp__decimals_TokenERC20[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2709]              __tmp__sum_balanceOf0[this] := __tmp__sum_balanceOf0[this] - __tmp__balanceOf_TokenERC20[this][msgsender_MSG];
[L2710]              __tmp__balanceOf_TokenERC20[this][msgsender_MSG] := __tmp__totalSupply_TokenERC20[this];
[L2711]              __tmp__sum_balanceOf0[this] := __tmp__sum_balanceOf0[this] + __tmp__balanceOf_TokenERC20[this][msgsender_MSG];
[L2712]              __tmp__name_TokenERC20[this] := tokenName_s258;
[L2713]              __tmp__symbol_TokenERC20[this] := tokenSymbol_s258;
[L2743]  RET         call TokenERC20_TokenERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, initialSupply_s258, tokenName_s258, tokenSymbol_s258);
[L2744]  COND FALSE  !(revert)
[L3235]  RET         call TokenERC20_TokenERC20__fail(this, msgsender_MSG, msgvalue_MSG, initialSupply_s639, tokenName_s639, tokenSymbol_s639);
[L3236]  COND FALSE  !(revert)
[L3239]  CALL        call ERC20ext_ERC20ext_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, initialSupply_s639, tokenName_s639, tokenSymbol_s639);
[L3206]              assume msgsender_MSG != null;
[L3207]              __tmp__Balance[this] := 0;
[L3208]              __tmp__frozenAccount_ERC20ext[this] := zeroRefboolArr();
[L3209]              __tmp__lockedAccount_ERC20ext[this] := zeroRefintArr();
[L3210]              __tmp__sum_lockedAccount3[this] := 0;
[L3211]              __tmp__lockedAmount_ERC20ext[this] := zeroRefintArr();
[L3212]              __tmp__sum_lockedAmount4[this] := 0;
[L3239]  RET         call ERC20ext_ERC20ext_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, initialSupply_s639, tokenName_s639, tokenSymbol_s639);
[L3240]  COND FALSE  !(revert)
[L1388]  RET         call ERC20ext_ERC20ext__fail(this, msgsender_MSG, msgvalue_MSG, initialSupply_s639, tokenName_s639, tokenSymbol_s639);
[L1389]              assume revert || gas < 0;
[L5095]  RET         call ERC20ext_ERC20ext(this, msgsender_MSG, msgvalue_MSG, initialSupply_s639, tokenName_s639, tokenSymbol_s639);
[L5096]              assume !revert && gas >= 0;
[L5099]  CALL        call CorralChoice_ERC20ext(this);
[L4881]              havoc msgsender_MSG;
[L4882]              havoc msgvalue_MSG;
[L4883]              havoc choice;
[L4884]              havoc __ret_0_owner;
[L4885]              havoc newOwner_s166;
[L4886]              havoc __ret_0_name;
[L4887]              havoc __ret_0_symbol;
[L4888]              havoc __ret_0_decimals;
[L4889]              havoc __ret_0_totalSupply;
[L4890]              havoc arg835_s0;
[L4891]              havoc __ret_0_balanceOf;
[L4892]              havoc arg836_s0;
[L4893]              havoc arg837_s0;
[L4894]              havoc __ret_0_allowance;
[L4895]              havoc initialSupply_s258;
[L4896]              havoc tokenName_s258;
[L4897]              havoc tokenSymbol_s258;
[L4898]              havoc _to_s365;
[L4899]              havoc _value_s365;
[L4900]              havoc success_s365;
[L4901]              havoc _from_s413;
[L4902]              havoc _to_s413;
[L4903]              havoc _value_s413;
[L4904]              havoc success_s413;
[L4905]              havoc _spender_s441;
[L4906]              havoc _value_s441;
[L4907]              havoc success_s441;
[L4908]              havoc _spender_s479;
[L4909]              havoc _value_s479;
[L4910]              havoc _extraData_s479;
[L4911]              havoc success_s479;
[L4912]              havoc _value_s527;
[L4913]              havoc success_s527;
[L4914]              havoc _from_s598;
[L4915]              havoc _value_s598;
[L4916]              havoc success_s598;
[L4917]              havoc arg838_s0;
[L4918]              havoc __ret_0_frozenAccount;
[L4919]              havoc arg839_s0;
[L4920]              havoc __ret_0_lockedAccount;
[L4921]              havoc arg840_s0;
[L4922]              havoc __ret_0_lockedAmount;
[L4923]              havoc initialSupply_s639;
[L4924]              havoc tokenName_s639;
[L4925]              havoc tokenSymbol_s639;
[L4926]              havoc target_s779;
[L4927]              havoc mintedAmount_s779;
[L4928]              havoc success_s779;
[L4929]              havoc target_s804;
[L4930]              havoc freeze_s804;
[L4931]              havoc success_s804;
[L4932]              havoc target_s832;
[L4933]              havoc time_s832;
[L4934]              havoc amount_s832;
[L4935]              havoc success_s832;
[L4936]              havoc tmpNow;
[L4937]              havoc gas;
[L4938]              assume gas > 4000000 && gas <= 8000000;
[L4939]              tmpNow := now;
[L4940]              havoc now;
[L4941]              assume now > tmpNow;
[L4942]              assume msgsender_MSG != null;
[L4943]              assume DType[msgsender_MSG] != SafeMath;
[L4944]              assume DType[msgsender_MSG] != owned;
[L4945]              assume DType[msgsender_MSG] != tokenRecipient;
[L4946]              assume DType[msgsender_MSG] != TokenERC20;
[L4947]              assume DType[msgsender_MSG] != ERC20ext;
[L4948]              Alloc[msgsender_MSG] := true;
[L4949]  COND FALSE  !(choice == 20)
[L4955]  COND FALSE  !(choice == 19)
[L4961]  COND FALSE  !(choice == 18)
[L4967]  COND FALSE  !(choice == 17)
[L4973]  COND FALSE  !(choice == 16)
[L4979]  COND FALSE  !(choice == 15)
[L4985]  COND FALSE  !(choice == 14)
[L4991]  COND FALSE  !(choice == 13)
[L4997]  COND TRUE   choice == 12
[L4998]              gas := gas - 21000;
[L4999]  COND TRUE   gas >= 0
[L5000]              assume _value_s365 >= 0 && _value_s365 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5001]              assume msgvalue_MSG == 0;
[L5002]  CALL        call success_s365 := transfer~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, _to_s365, _value_s365);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG != _to_s365 && (_value_s365 > balanceOf_TokenERC20[this][msgsender_MSG] || balanceOf_TokenERC20[this][_to_s365] + _value_s365 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && _value_s365 >= 0) && _value_s365 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_TokenERC20[this][_to_s365] >= 0) && balanceOf_TokenERC20[this][_to_s365] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_TokenERC20[this][msgsender_MSG] >= 0) && balanceOf_TokenERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_TokenERC200 := true;
[L2]                 call_transfer_TokenERC200 := false;
[L2]                 revert := revert_hold;
[L527]               havoc __exception;
[L528]               revert := false;
[L529]   COND FALSE  !(__exception)
[L558]   CALL        call success_s365 := transfer~address~uint256_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, _to_s365, _value_s365);
[L2853]  COND TRUE   DType[this] == ERC20ext
[L2854]  CALL        call _transfer~address~address~uint256_ERC20ext__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, _to_s365, _value_s365);
[L3312]  COND FALSE  !(!(now > lockedAccount_ERC20ext[this][_from_s739] || (lockedAmount_ERC20ext[this][_from_s739] + _value_s739) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 < balanceOf_TokenERC20[this][_from_s739]))
[L3316]              __var_14 := null;
[L3317]  COND FALSE  !(!(_to_s739 != null))
[L3321]  COND FALSE  !(!(balanceOf_TokenERC20[this][_from_s739] >= _value_s739))
[L3325]  COND FALSE  !(!((balanceOf_TokenERC20[this][_to_s739] + _value_s739) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 >= balanceOf_TokenERC20[this][_to_s739]))
[L3329]  COND FALSE  !(!!frozenAccount_ERC20ext[this][_from_s739])
[L3333]  COND FALSE  !(!!frozenAccount_ERC20ext[this][_to_s739])
[L3337]  CALL        call __var_15 := sub~uint256~uint256_SafeMath__success(this, this, 0, balanceOf_TokenERC20[this][_from_s739], _value_s739);
[L2509]  COND FALSE  !(!(b_s51 <= a_s51))
[L2513]              c_s51 := (a_s51 - b_s51) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2514]              __ret_0_ := c_s51;
[L3337]  RET         call __var_15 := sub~uint256~uint256_SafeMath__success(this, this, 0, balanceOf_TokenERC20[this][_from_s739], _value_s739);
[L3338]  COND FALSE  !(revert)
[L3341]              sum_balanceOf0[this] := sum_balanceOf0[this] - balanceOf_TokenERC20[this][_from_s739];
[L3342]              balanceOf_TokenERC20[this][_from_s739] := __var_15;
[L3343]              sum_balanceOf0[this] := sum_balanceOf0[this] + balanceOf_TokenERC20[this][_from_s739];
[L3344]  CALL        call __var_16 := add~uint256~uint256_SafeMath__success(this, this, 0, balanceOf_TokenERC20[this][_to_s739], _value_s739);
[L2485]              c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2486]  COND FALSE  !(!(c_s26 >= a_s26))
[L2490]              __ret_0_ := c_s26;
[L3344]  RET         call __var_16 := add~uint256~uint256_SafeMath__success(this, this, 0, balanceOf_TokenERC20[this][_to_s739], _value_s739);
[L3345]  COND FALSE  !(revert)
[L3348]              sum_balanceOf0[this] := sum_balanceOf0[this] - balanceOf_TokenERC20[this][_to_s739];
[L3349]              balanceOf_TokenERC20[this][_to_s739] := __var_16;
[L3350]              sum_balanceOf0[this] := sum_balanceOf0[this] + balanceOf_TokenERC20[this][_to_s739];
[L3351]              assert { :EventEmitted "Transfer_ERC20ext" } true;
[L2854]  RET         call _transfer~address~address~uint256_ERC20ext__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, _to_s365, _value_s365);
[L2855]  COND FALSE  !(revert)
[L2866]              success_s365 := true;
[L558]   RET         call success_s365 := transfer~address~uint256_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, _to_s365, _value_s365);
[L559]               assume !revert && gas >= 0;
[L5002]  RET         call success_s365 := transfer~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, _to_s365, _value_s365);
[L5099]  RET         call CorralChoice_ERC20ext(this);

Loop:
[L5099]  CALL        call CorralChoice_ERC20ext(this);
[L4881]              havoc msgsender_MSG;
[L4882]              havoc msgvalue_MSG;
[L4883]              havoc choice;
[L4884]              havoc __ret_0_owner;
[L4885]              havoc newOwner_s166;
[L4886]              havoc __ret_0_name;
[L4887]              havoc __ret_0_symbol;
[L4888]              havoc __ret_0_decimals;
[L4889]              havoc __ret_0_totalSupply;
[L4890]              havoc arg835_s0;
[L4891]              havoc __ret_0_balanceOf;
[L4892]              havoc arg836_s0;
[L4893]              havoc arg837_s0;
[L4894]              havoc __ret_0_allowance;
[L4895]              havoc initialSupply_s258;
[L4896]              havoc tokenName_s258;
[L4897]              havoc tokenSymbol_s258;
[L4898]              havoc _to_s365;
[L4899]              havoc _value_s365;
[L4900]              havoc success_s365;
[L4901]              havoc _from_s413;
[L4902]              havoc _to_s413;
[L4903]              havoc _value_s413;
[L4904]              havoc success_s413;
[L4905]              havoc _spender_s441;
[L4906]              havoc _value_s441;
[L4907]              havoc success_s441;
[L4908]              havoc _spender_s479;
[L4909]              havoc _value_s479;
[L4910]              havoc _extraData_s479;
[L4911]              havoc success_s479;
[L4912]              havoc _value_s527;
[L4913]              havoc success_s527;
[L4914]              havoc _from_s598;
[L4915]              havoc _value_s598;
[L4916]              havoc success_s598;
[L4917]              havoc arg838_s0;
[L4918]              havoc __ret_0_frozenAccount;
[L4919]              havoc arg839_s0;
[L4920]              havoc __ret_0_lockedAccount;
[L4921]              havoc arg840_s0;
[L4922]              havoc __ret_0_lockedAmount;
[L4923]              havoc initialSupply_s639;
[L4924]              havoc tokenName_s639;
[L4925]              havoc tokenSymbol_s639;
[L4926]              havoc target_s779;
[L4927]              havoc mintedAmount_s779;
[L4928]              havoc success_s779;
[L4929]              havoc target_s804;
[L4930]              havoc freeze_s804;
[L4931]              havoc success_s804;
[L4932]              havoc target_s832;
[L4933]              havoc time_s832;
[L4934]              havoc amount_s832;
[L4935]              havoc success_s832;
[L4936]              havoc tmpNow;
[L4937]              havoc gas;
[L4938]              assume gas > 4000000 && gas <= 8000000;
[L4939]              tmpNow := now;
[L4940]              havoc now;
[L4941]              assume now > tmpNow;
[L4942]              assume msgsender_MSG != null;
[L4943]              assume DType[msgsender_MSG] != SafeMath;
[L4944]              assume DType[msgsender_MSG] != owned;
[L4945]              assume DType[msgsender_MSG] != tokenRecipient;
[L4946]              assume DType[msgsender_MSG] != TokenERC20;
[L4947]              assume DType[msgsender_MSG] != ERC20ext;
[L4948]              Alloc[msgsender_MSG] := true;
[L4949]  COND TRUE   choice == 20
[L4950]              gas := gas - 21000;
[L4951]  COND FALSE  !(gas >= 0)
[L5099]  RET         call CorralChoice_ERC20ext(this);

[2020-11-25 15:07:11,772 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 15:07:11,772 INFO  L82        PathProgramCache]: Analyzing trace with hash -1204962533, now seen corresponding path program 1 times
[2020-11-25 15:07:11,772 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 15:07:11,781 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 15:07:11,812 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 15:07:11,812 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 15:07:11,812 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [4] imperfect sequences [] total 4
[2020-11-25 15:07:11,812 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 15:07:11,813 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-11-25 15:07:11,813 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=6, Invalid=6, Unknown=0, NotChecked=0, Total=12
[2020-11-25 15:07:11,813 INFO  L87              Difference]: Start difference. First operand 3138 states and 3399 transitions. cyclomatic complexity: 264 Second operand 4 states.
[2020-11-25 15:07:12,065 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 15:07:12,065 INFO  L93              Difference]: Finished difference Result 3954 states and 4419 transitions.
[2020-11-25 15:07:12,065 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 4 states. 
[2020-11-25 15:07:12,065 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 3954 states and 4419 transitions.
[2020-11-25 15:07:12,073 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 6
[2020-11-25 15:07:12,084 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 3954 states to 3861 states and 4326 transitions.
[2020-11-25 15:07:12,084 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1060
[2020-11-25 15:07:12,085 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1060
[2020-11-25 15:07:12,085 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 3861 states and 4326 transitions.
[2020-11-25 15:07:12,088 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 15:07:12,089 INFO  L728         BuchiCegarLoop]: Abstraction has 3861 states and 4326 transitions.
[2020-11-25 15:07:12,091 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 3861 states and 4326 transitions.
[2020-11-25 15:07:12,109 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 3861 to 3045.
[2020-11-25 15:07:12,109 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 3045 states.
[2020-11-25 15:07:12,112 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 3045 states to 3045 states and 3305 transitions.
[2020-11-25 15:07:12,112 INFO  L751         BuchiCegarLoop]: Abstraction has 3045 states and 3305 transitions.
[2020-11-25 15:07:12,112 INFO  L631         BuchiCegarLoop]: Abstraction has 3045 states and 3305 transitions.
[2020-11-25 15:07:12,112 INFO  L445         BuchiCegarLoop]: ======== Iteration 6============
[2020-11-25 15:07:12,112 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 3045 states and 3305 transitions.
[2020-11-25 15:07:12,115 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 15:07:12,115 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 15:07:12,115 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 15:07:12,117 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 15:07:12,117 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transfer_TokenERC200 := false;
[L2]                 call_transfer_TokenERC200 := false;
[L2]     CALL        call main();
[L5089]              assume null == 0;
[L5090]  CALL        call this := FreshRefGenerator__success();
[L2432]              havoc newRef;
[L2433]              assume Alloc[newRef] == false;
[L2434]              Alloc[newRef] := true;
[L2435]              assume newRef != null;
[L5090]  RET         call this := FreshRefGenerator__success();
[L5091]              assume now >= 0;
[L5092]              assume DType[this] == ERC20ext;
[L5093]              assume msgvalue_MSG == 0;
[L5094]              gas := gas - 53000;
[L5095]  CALL        call ERC20ext_ERC20ext(this, msgsender_MSG, msgvalue_MSG, initialSupply_s639, tokenName_s639, tokenSymbol_s639);
[L1360]              havoc __exception;
[L1361]              revert := false;
[L1362]  COND FALSE  !(__exception)
[L1391]  CALL        call ERC20ext_ERC20ext__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s639, tokenName_s639, tokenSymbol_s639);
[L3247]  CALL        call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L2624]  CALL        call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2607]              assume msgsender_MSG != null;
[L2608]              Balance[this] := 0;
[L2609]              owner_owned[this] := null;
[L2611]              owner_owned[this] := msgsender_MSG;
[L2624]  RET         call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2625]  COND FALSE  !(revert)
[L3247]  RET         call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L3248]  COND FALSE  !(revert)
[L3251]  CALL        call TokenERC20_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s639, tokenName_s639, tokenSymbol_s639);
[L2752]  CALL        call TokenERC20_TokenERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s258, tokenName_s258, tokenSymbol_s258);
[L2720]              assume msgsender_MSG != null;
[L2721]              Balance[this] := 0;
[L2722]              name_TokenERC20[this] := 1101944712;
[L2723]              symbol_TokenERC20[this] := 1101944712;
[L2724]              decimals_TokenERC20[this] := 18;
[L2725]              totalSupply_TokenERC20[this] := 0;
[L2726]              balanceOf_TokenERC20[this] := zeroRefintArr();
[L2727]              sum_balanceOf0[this] := 0;
[L2728]              allowance_TokenERC20[this] := zeroRefRefintArr();
[L2729]              sum_allowance1[this] := 0;
[L2731]              __var_1 := decimals_TokenERC20[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2732]              totalSupply_TokenERC20[this] := nonlinearMul(initialSupply_s258, nonlinearPow(10, decimals_TokenERC20[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2733]              sum_balanceOf0[this] := sum_balanceOf0[this] - balanceOf_TokenERC20[this][msgsender_MSG];
[L2734]              balanceOf_TokenERC20[this][msgsender_MSG] := totalSupply_TokenERC20[this];
[L2735]              sum_balanceOf0[this] := sum_balanceOf0[this] + balanceOf_TokenERC20[this][msgsender_MSG];
[L2736]              name_TokenERC20[this] := tokenName_s258;
[L2737]              symbol_TokenERC20[this] := tokenSymbol_s258;
[L2752]  RET         call TokenERC20_TokenERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s258, tokenName_s258, tokenSymbol_s258);
[L2753]  COND FALSE  !(revert)
[L3251]  RET         call TokenERC20_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s639, tokenName_s639, tokenSymbol_s639);
[L3252]  COND FALSE  !(revert)
[L3255]  CALL        call ERC20ext_ERC20ext_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s639, tokenName_s639, tokenSymbol_s639);
[L3219]              assume msgsender_MSG != null;
[L3220]              Balance[this] := 0;
[L3221]              frozenAccount_ERC20ext[this] := zeroRefboolArr();
[L3222]              lockedAccount_ERC20ext[this] := zeroRefintArr();
[L3223]              sum_lockedAccount3[this] := 0;
[L3224]              lockedAmount_ERC20ext[this] := zeroRefintArr();
[L3225]              sum_lockedAmount4[this] := 0;
[L3255]  RET         call ERC20ext_ERC20ext_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s639, tokenName_s639, tokenSymbol_s639);
[L3256]  COND FALSE  !(revert)
[L1391]  RET         call ERC20ext_ERC20ext__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s639, tokenName_s639, tokenSymbol_s639);
[L1392]              assume !revert && gas >= 0;
[L5095]  RET         call ERC20ext_ERC20ext(this, msgsender_MSG, msgvalue_MSG, initialSupply_s639, tokenName_s639, tokenSymbol_s639);
[L5096]              assume !revert && gas >= 0;
[L5099]  CALL        call CorralChoice_ERC20ext(this);
[L4881]              havoc msgsender_MSG;
[L4882]              havoc msgvalue_MSG;
[L4883]              havoc choice;
[L4884]              havoc __ret_0_owner;
[L4885]              havoc newOwner_s166;
[L4886]              havoc __ret_0_name;
[L4887]              havoc __ret_0_symbol;
[L4888]              havoc __ret_0_decimals;
[L4889]              havoc __ret_0_totalSupply;
[L4890]              havoc arg835_s0;
[L4891]              havoc __ret_0_balanceOf;
[L4892]              havoc arg836_s0;
[L4893]              havoc arg837_s0;
[L4894]              havoc __ret_0_allowance;
[L4895]              havoc initialSupply_s258;
[L4896]              havoc tokenName_s258;
[L4897]              havoc tokenSymbol_s258;
[L4898]              havoc _to_s365;
[L4899]              havoc _value_s365;
[L4900]              havoc success_s365;
[L4901]              havoc _from_s413;
[L4902]              havoc _to_s413;
[L4903]              havoc _value_s413;
[L4904]              havoc success_s413;
[L4905]              havoc _spender_s441;
[L4906]              havoc _value_s441;
[L4907]              havoc success_s441;
[L4908]              havoc _spender_s479;
[L4909]              havoc _value_s479;
[L4910]              havoc _extraData_s479;
[L4911]              havoc success_s479;
[L4912]              havoc _value_s527;
[L4913]              havoc success_s527;
[L4914]              havoc _from_s598;
[L4915]              havoc _value_s598;
[L4916]              havoc success_s598;
[L4917]              havoc arg838_s0;
[L4918]              havoc __ret_0_frozenAccount;
[L4919]              havoc arg839_s0;
[L4920]              havoc __ret_0_lockedAccount;
[L4921]              havoc arg840_s0;
[L4922]              havoc __ret_0_lockedAmount;
[L4923]              havoc initialSupply_s639;
[L4924]              havoc tokenName_s639;
[L4925]              havoc tokenSymbol_s639;
[L4926]              havoc target_s779;
[L4927]              havoc mintedAmount_s779;
[L4928]              havoc success_s779;
[L4929]              havoc target_s804;
[L4930]              havoc freeze_s804;
[L4931]              havoc success_s804;
[L4932]              havoc target_s832;
[L4933]              havoc time_s832;
[L4934]              havoc amount_s832;
[L4935]              havoc success_s832;
[L4936]              havoc tmpNow;
[L4937]              havoc gas;
[L4938]              assume gas > 4000000 && gas <= 8000000;
[L4939]              tmpNow := now;
[L4940]              havoc now;
[L4941]              assume now > tmpNow;
[L4942]              assume msgsender_MSG != null;
[L4943]              assume DType[msgsender_MSG] != SafeMath;
[L4944]              assume DType[msgsender_MSG] != owned;
[L4945]              assume DType[msgsender_MSG] != tokenRecipient;
[L4946]              assume DType[msgsender_MSG] != TokenERC20;
[L4947]              assume DType[msgsender_MSG] != ERC20ext;
[L4948]              Alloc[msgsender_MSG] := true;
[L4949]  COND FALSE  !(choice == 20)
[L4955]  COND FALSE  !(choice == 19)
[L4961]  COND FALSE  !(choice == 18)
[L4967]  COND FALSE  !(choice == 17)
[L4973]  COND FALSE  !(choice == 16)
[L4979]  COND FALSE  !(choice == 15)
[L4985]  COND FALSE  !(choice == 14)
[L4991]  COND FALSE  !(choice == 13)
[L4997]  COND FALSE  !(choice == 12)
[L5004]  COND FALSE  !(choice == 11)
[L5011]  COND FALSE  !(choice == 10)
[L5018]  COND FALSE  !(choice == 9)
[L5025]  COND FALSE  !(choice == 8)
[L5032]  COND FALSE  !(choice == 7)
[L5039]  COND FALSE  !(choice == 6)
[L5045]  COND FALSE  !(choice == 5)
[L5051]  COND FALSE  !(choice == 4)
[L5057]  COND FALSE  !(choice == 3)
[L5064]  COND FALSE  !(choice == 2)
[L5070]  COND TRUE   choice == 1
[L5071]              gas := gas - 21000;
[L5072]  COND TRUE   gas >= 0
[L5073]              assume time_s832 >= 0 && time_s832 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5074]              assume amount_s832 >= 0 && amount_s832 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5075]              assume msgvalue_MSG == 0;
[L5076]  CALL        call success_s832 := lock~address~uint256~uint256_ERC20ext(this, msgsender_MSG, msgvalue_MSG, target_s832, time_s832, amount_s832);
[L1570]              havoc __exception;
[L1571]              revert := false;
[L1572]  COND FALSE  !(__exception)
[L1601]  CALL        call success_s832 := lock~address~uint256~uint256_ERC20ext__success(this, msgsender_MSG, msgvalue_MSG, target_s832, time_s832, amount_s832);
[L3444]  CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4484]  COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L3444]  RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3445]  COND FALSE  !(revert)
[L3448]              sum_lockedAccount3[this] := sum_lockedAccount3[this] - lockedAccount_ERC20ext[this][target_s832];
[L3449]              lockedAccount_ERC20ext[this][target_s832] := time_s832;
[L3450]              sum_lockedAccount3[this] := sum_lockedAccount3[this] + lockedAccount_ERC20ext[this][target_s832];
[L3451]              sum_lockedAmount4[this] := sum_lockedAmount4[this] - lockedAmount_ERC20ext[this][target_s832];
[L3452]              lockedAmount_ERC20ext[this][target_s832] := amount_s832;
[L3453]              sum_lockedAmount4[this] := sum_lockedAmount4[this] + lockedAmount_ERC20ext[this][target_s832];
[L3454]              success_s832 := true;
[L1601]  RET         call success_s832 := lock~address~uint256~uint256_ERC20ext__success(this, msgsender_MSG, msgvalue_MSG, target_s832, time_s832, amount_s832);
[L1602]              assume !revert && gas >= 0;
[L5076]  RET         call success_s832 := lock~address~uint256~uint256_ERC20ext(this, msgsender_MSG, msgvalue_MSG, target_s832, time_s832, amount_s832);
[L5099]  RET         call CorralChoice_ERC20ext(this);
[L5099]  CALL        call CorralChoice_ERC20ext(this);
[L4881]              havoc msgsender_MSG;
[L4882]              havoc msgvalue_MSG;
[L4883]              havoc choice;
[L4884]              havoc __ret_0_owner;
[L4885]              havoc newOwner_s166;
[L4886]              havoc __ret_0_name;
[L4887]              havoc __ret_0_symbol;
[L4888]              havoc __ret_0_decimals;
[L4889]              havoc __ret_0_totalSupply;
[L4890]              havoc arg835_s0;
[L4891]              havoc __ret_0_balanceOf;
[L4892]              havoc arg836_s0;
[L4893]              havoc arg837_s0;
[L4894]              havoc __ret_0_allowance;
[L4895]              havoc initialSupply_s258;
[L4896]              havoc tokenName_s258;
[L4897]              havoc tokenSymbol_s258;
[L4898]              havoc _to_s365;
[L4899]              havoc _value_s365;
[L4900]              havoc success_s365;
[L4901]              havoc _from_s413;
[L4902]              havoc _to_s413;
[L4903]              havoc _value_s413;
[L4904]              havoc success_s413;
[L4905]              havoc _spender_s441;
[L4906]              havoc _value_s441;
[L4907]              havoc success_s441;
[L4908]              havoc _spender_s479;
[L4909]              havoc _value_s479;
[L4910]              havoc _extraData_s479;
[L4911]              havoc success_s479;
[L4912]              havoc _value_s527;
[L4913]              havoc success_s527;
[L4914]              havoc _from_s598;
[L4915]              havoc _value_s598;
[L4916]              havoc success_s598;
[L4917]              havoc arg838_s0;
[L4918]              havoc __ret_0_frozenAccount;
[L4919]              havoc arg839_s0;
[L4920]              havoc __ret_0_lockedAccount;
[L4921]              havoc arg840_s0;
[L4922]              havoc __ret_0_lockedAmount;
[L4923]              havoc initialSupply_s639;
[L4924]              havoc tokenName_s639;
[L4925]              havoc tokenSymbol_s639;
[L4926]              havoc target_s779;
[L4927]              havoc mintedAmount_s779;
[L4928]              havoc success_s779;
[L4929]              havoc target_s804;
[L4930]              havoc freeze_s804;
[L4931]              havoc success_s804;
[L4932]              havoc target_s832;
[L4933]              havoc time_s832;
[L4934]              havoc amount_s832;
[L4935]              havoc success_s832;
[L4936]              havoc tmpNow;
[L4937]              havoc gas;
[L4938]              assume gas > 4000000 && gas <= 8000000;
[L4939]              tmpNow := now;
[L4940]              havoc now;
[L4941]              assume now > tmpNow;
[L4942]              assume msgsender_MSG != null;
[L4943]              assume DType[msgsender_MSG] != SafeMath;
[L4944]              assume DType[msgsender_MSG] != owned;
[L4945]              assume DType[msgsender_MSG] != tokenRecipient;
[L4946]              assume DType[msgsender_MSG] != TokenERC20;
[L4947]              assume DType[msgsender_MSG] != ERC20ext;
[L4948]              Alloc[msgsender_MSG] := true;
[L4949]  COND FALSE  !(choice == 20)
[L4955]  COND FALSE  !(choice == 19)
[L4961]  COND FALSE  !(choice == 18)
[L4967]  COND FALSE  !(choice == 17)
[L4973]  COND FALSE  !(choice == 16)
[L4979]  COND FALSE  !(choice == 15)
[L4985]  COND FALSE  !(choice == 14)
[L4991]  COND FALSE  !(choice == 13)
[L4997]  COND TRUE   choice == 12
[L4998]              gas := gas - 21000;
[L4999]  COND TRUE   gas >= 0
[L5000]              assume _value_s365 >= 0 && _value_s365 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5001]              assume msgvalue_MSG == 0;
[L5002]  CALL        call success_s365 := transfer~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, _to_s365, _value_s365);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG != _to_s365 && (_value_s365 > balanceOf_TokenERC20[this][msgsender_MSG] || balanceOf_TokenERC20[this][_to_s365] + _value_s365 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && _value_s365 >= 0) && _value_s365 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_TokenERC20[this][_to_s365] >= 0) && balanceOf_TokenERC20[this][_to_s365] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_TokenERC20[this][msgsender_MSG] >= 0) && balanceOf_TokenERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_TokenERC200 := true;
[L2]                 call_transfer_TokenERC200 := false;
[L2]                 revert := revert_hold;
[L527]               havoc __exception;
[L528]               revert := false;
[L529]   COND FALSE  !(__exception)
[L558]   CALL        call success_s365 := transfer~address~uint256_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, _to_s365, _value_s365);
[L2853]  COND TRUE   DType[this] == ERC20ext
[L2854]  CALL        call _transfer~address~address~uint256_ERC20ext__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, _to_s365, _value_s365);
[L3312]  COND FALSE  !(!(now > lockedAccount_ERC20ext[this][_from_s739] || (lockedAmount_ERC20ext[this][_from_s739] + _value_s739) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 < balanceOf_TokenERC20[this][_from_s739]))
[L3316]              __var_14 := null;
[L3317]  COND FALSE  !(!(_to_s739 != null))
[L3321]  COND FALSE  !(!(balanceOf_TokenERC20[this][_from_s739] >= _value_s739))
[L3325]  COND FALSE  !(!((balanceOf_TokenERC20[this][_to_s739] + _value_s739) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 >= balanceOf_TokenERC20[this][_to_s739]))
[L3329]  COND FALSE  !(!!frozenAccount_ERC20ext[this][_from_s739])
[L3333]  COND FALSE  !(!!frozenAccount_ERC20ext[this][_to_s739])
[L3337]  CALL        call __var_15 := sub~uint256~uint256_SafeMath__success(this, this, 0, balanceOf_TokenERC20[this][_from_s739], _value_s739);
[L2509]  COND FALSE  !(!(b_s51 <= a_s51))
[L2513]              c_s51 := (a_s51 - b_s51) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2514]              __ret_0_ := c_s51;
[L3337]  RET         call __var_15 := sub~uint256~uint256_SafeMath__success(this, this, 0, balanceOf_TokenERC20[this][_from_s739], _value_s739);
[L3338]  COND FALSE  !(revert)
[L3341]              sum_balanceOf0[this] := sum_balanceOf0[this] - balanceOf_TokenERC20[this][_from_s739];
[L3342]              balanceOf_TokenERC20[this][_from_s739] := __var_15;
[L3343]              sum_balanceOf0[this] := sum_balanceOf0[this] + balanceOf_TokenERC20[this][_from_s739];
[L3344]  CALL        call __var_16 := add~uint256~uint256_SafeMath__success(this, this, 0, balanceOf_TokenERC20[this][_to_s739], _value_s739);
[L2485]              c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2486]  COND FALSE  !(!(c_s26 >= a_s26))
[L2490]              __ret_0_ := c_s26;
[L3344]  RET         call __var_16 := add~uint256~uint256_SafeMath__success(this, this, 0, balanceOf_TokenERC20[this][_to_s739], _value_s739);
[L3345]  COND FALSE  !(revert)
[L3348]              sum_balanceOf0[this] := sum_balanceOf0[this] - balanceOf_TokenERC20[this][_to_s739];
[L3349]              balanceOf_TokenERC20[this][_to_s739] := __var_16;
[L3350]              sum_balanceOf0[this] := sum_balanceOf0[this] + balanceOf_TokenERC20[this][_to_s739];
[L3351]              assert { :EventEmitted "Transfer_ERC20ext" } true;
[L2854]  RET         call _transfer~address~address~uint256_ERC20ext__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, _to_s365, _value_s365);
[L2855]  COND FALSE  !(revert)
[L2866]              success_s365 := true;
[L558]   RET         call success_s365 := transfer~address~uint256_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, _to_s365, _value_s365);
[L559]               assume !revert && gas >= 0;
[L5002]  RET         call success_s365 := transfer~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, _to_s365, _value_s365);
[L5099]  RET         call CorralChoice_ERC20ext(this);

Loop:
[L5099]  CALL        call CorralChoice_ERC20ext(this);
[L4881]              havoc msgsender_MSG;
[L4882]              havoc msgvalue_MSG;
[L4883]              havoc choice;
[L4884]              havoc __ret_0_owner;
[L4885]              havoc newOwner_s166;
[L4886]              havoc __ret_0_name;
[L4887]              havoc __ret_0_symbol;
[L4888]              havoc __ret_0_decimals;
[L4889]              havoc __ret_0_totalSupply;
[L4890]              havoc arg835_s0;
[L4891]              havoc __ret_0_balanceOf;
[L4892]              havoc arg836_s0;
[L4893]              havoc arg837_s0;
[L4894]              havoc __ret_0_allowance;
[L4895]              havoc initialSupply_s258;
[L4896]              havoc tokenName_s258;
[L4897]              havoc tokenSymbol_s258;
[L4898]              havoc _to_s365;
[L4899]              havoc _value_s365;
[L4900]              havoc success_s365;
[L4901]              havoc _from_s413;
[L4902]              havoc _to_s413;
[L4903]              havoc _value_s413;
[L4904]              havoc success_s413;
[L4905]              havoc _spender_s441;
[L4906]              havoc _value_s441;
[L4907]              havoc success_s441;
[L4908]              havoc _spender_s479;
[L4909]              havoc _value_s479;
[L4910]              havoc _extraData_s479;
[L4911]              havoc success_s479;
[L4912]              havoc _value_s527;
[L4913]              havoc success_s527;
[L4914]              havoc _from_s598;
[L4915]              havoc _value_s598;
[L4916]              havoc success_s598;
[L4917]              havoc arg838_s0;
[L4918]              havoc __ret_0_frozenAccount;
[L4919]              havoc arg839_s0;
[L4920]              havoc __ret_0_lockedAccount;
[L4921]              havoc arg840_s0;
[L4922]              havoc __ret_0_lockedAmount;
[L4923]              havoc initialSupply_s639;
[L4924]              havoc tokenName_s639;
[L4925]              havoc tokenSymbol_s639;
[L4926]              havoc target_s779;
[L4927]              havoc mintedAmount_s779;
[L4928]              havoc success_s779;
[L4929]              havoc target_s804;
[L4930]              havoc freeze_s804;
[L4931]              havoc success_s804;
[L4932]              havoc target_s832;
[L4933]              havoc time_s832;
[L4934]              havoc amount_s832;
[L4935]              havoc success_s832;
[L4936]              havoc tmpNow;
[L4937]              havoc gas;
[L4938]              assume gas > 4000000 && gas <= 8000000;
[L4939]              tmpNow := now;
[L4940]              havoc now;
[L4941]              assume now > tmpNow;
[L4942]              assume msgsender_MSG != null;
[L4943]              assume DType[msgsender_MSG] != SafeMath;
[L4944]              assume DType[msgsender_MSG] != owned;
[L4945]              assume DType[msgsender_MSG] != tokenRecipient;
[L4946]              assume DType[msgsender_MSG] != TokenERC20;
[L4947]              assume DType[msgsender_MSG] != ERC20ext;
[L4948]              Alloc[msgsender_MSG] := true;
[L4949]  COND TRUE   choice == 20
[L4950]              gas := gas - 21000;
[L4951]  COND FALSE  !(gas >= 0)
[L5099]  RET         call CorralChoice_ERC20ext(this);

[2020-11-25 15:07:12,121 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 15:07:12,121 INFO  L82        PathProgramCache]: Analyzing trace with hash 758404878, now seen corresponding path program 1 times
[2020-11-25 15:07:12,121 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 15:07:12,135 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 15:07:12,344 INFO  L134       CoverageAnalysis]: Checked inductivity of 79 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 79 trivial. 0 not checked.
[2020-11-25 15:07:12,344 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 15:07:12,344 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [18] imperfect sequences [] total 18
[2020-11-25 15:07:12,344 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 15:07:12,345 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 19 interpolants.
[2020-11-25 15:07:12,345 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=43, Invalid=299, Unknown=0, NotChecked=0, Total=342
[2020-11-25 15:07:12,345 INFO  L87              Difference]: Start difference. First operand 3045 states and 3305 transitions. cyclomatic complexity: 263 Second operand 19 states.
[2020-11-25 15:07:14,569 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 15:07:14,570 INFO  L93              Difference]: Finished difference Result 3095 states and 3360 transitions.
[2020-11-25 15:07:14,570 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 17 states. 
[2020-11-25 15:07:14,570 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 3095 states and 3360 transitions.
[2020-11-25 15:07:14,575 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 15:07:14,580 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 3095 states to 3095 states and 3360 transitions.
[2020-11-25 15:07:14,581 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 873
[2020-11-25 15:07:14,581 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 873
[2020-11-25 15:07:14,581 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 3095 states and 3360 transitions.
[2020-11-25 15:07:14,583 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 15:07:14,583 INFO  L728         BuchiCegarLoop]: Abstraction has 3095 states and 3360 transitions.
[2020-11-25 15:07:14,585 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 3095 states and 3360 transitions.
[2020-11-25 15:07:14,598 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 3095 to 3042.
[2020-11-25 15:07:14,598 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 3042 states.
[2020-11-25 15:07:14,600 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 3042 states to 3042 states and 3302 transitions.
[2020-11-25 15:07:14,600 INFO  L751         BuchiCegarLoop]: Abstraction has 3042 states and 3302 transitions.
[2020-11-25 15:07:14,601 INFO  L631         BuchiCegarLoop]: Abstraction has 3042 states and 3302 transitions.
[2020-11-25 15:07:14,601 INFO  L445         BuchiCegarLoop]: ======== Iteration 7============
[2020-11-25 15:07:14,601 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 3042 states and 3302 transitions.
[2020-11-25 15:07:14,603 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 15:07:14,603 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 15:07:14,603 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 15:07:14,605 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 15:07:14,605 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transfer_TokenERC200 := false;
[L2]                 call_transfer_TokenERC200 := false;
[L2]     CALL        call main();
[L5089]              assume null == 0;
[L5090]  CALL        call this := FreshRefGenerator__success();
[L2432]              havoc newRef;
[L2433]              assume Alloc[newRef] == false;
[L2434]              Alloc[newRef] := true;
[L2435]              assume newRef != null;
[L5090]  RET         call this := FreshRefGenerator__success();
[L5091]              assume now >= 0;
[L5092]              assume DType[this] == ERC20ext;
[L5093]              assume msgvalue_MSG == 0;
[L5094]              gas := gas - 53000;
[L5095]  CALL        call ERC20ext_ERC20ext(this, msgsender_MSG, msgvalue_MSG, initialSupply_s639, tokenName_s639, tokenSymbol_s639);
[L1360]              havoc __exception;
[L1361]              revert := false;
[L1362]  COND FALSE  !(__exception)
[L1391]  CALL        call ERC20ext_ERC20ext__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s639, tokenName_s639, tokenSymbol_s639);
[L3247]  CALL        call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L2624]  CALL        call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2607]              assume msgsender_MSG != null;
[L2608]              Balance[this] := 0;
[L2609]              owner_owned[this] := null;
[L2611]              owner_owned[this] := msgsender_MSG;
[L2624]  RET         call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2625]  COND FALSE  !(revert)
[L3247]  RET         call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L3248]  COND FALSE  !(revert)
[L3251]  CALL        call TokenERC20_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s639, tokenName_s639, tokenSymbol_s639);
[L2752]  CALL        call TokenERC20_TokenERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s258, tokenName_s258, tokenSymbol_s258);
[L2720]              assume msgsender_MSG != null;
[L2721]              Balance[this] := 0;
[L2722]              name_TokenERC20[this] := 1101944712;
[L2723]              symbol_TokenERC20[this] := 1101944712;
[L2724]              decimals_TokenERC20[this] := 18;
[L2725]              totalSupply_TokenERC20[this] := 0;
[L2726]              balanceOf_TokenERC20[this] := zeroRefintArr();
[L2727]              sum_balanceOf0[this] := 0;
[L2728]              allowance_TokenERC20[this] := zeroRefRefintArr();
[L2729]              sum_allowance1[this] := 0;
[L2731]              __var_1 := decimals_TokenERC20[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2732]              totalSupply_TokenERC20[this] := nonlinearMul(initialSupply_s258, nonlinearPow(10, decimals_TokenERC20[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2733]              sum_balanceOf0[this] := sum_balanceOf0[this] - balanceOf_TokenERC20[this][msgsender_MSG];
[L2734]              balanceOf_TokenERC20[this][msgsender_MSG] := totalSupply_TokenERC20[this];
[L2735]              sum_balanceOf0[this] := sum_balanceOf0[this] + balanceOf_TokenERC20[this][msgsender_MSG];
[L2736]              name_TokenERC20[this] := tokenName_s258;
[L2737]              symbol_TokenERC20[this] := tokenSymbol_s258;
[L2752]  RET         call TokenERC20_TokenERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s258, tokenName_s258, tokenSymbol_s258);
[L2753]  COND FALSE  !(revert)
[L3251]  RET         call TokenERC20_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s639, tokenName_s639, tokenSymbol_s639);
[L3252]  COND FALSE  !(revert)
[L3255]  CALL        call ERC20ext_ERC20ext_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s639, tokenName_s639, tokenSymbol_s639);
[L3219]              assume msgsender_MSG != null;
[L3220]              Balance[this] := 0;
[L3221]              frozenAccount_ERC20ext[this] := zeroRefboolArr();
[L3222]              lockedAccount_ERC20ext[this] := zeroRefintArr();
[L3223]              sum_lockedAccount3[this] := 0;
[L3224]              lockedAmount_ERC20ext[this] := zeroRefintArr();
[L3225]              sum_lockedAmount4[this] := 0;
[L3255]  RET         call ERC20ext_ERC20ext_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s639, tokenName_s639, tokenSymbol_s639);
[L3256]  COND FALSE  !(revert)
[L1391]  RET         call ERC20ext_ERC20ext__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s639, tokenName_s639, tokenSymbol_s639);
[L1392]              assume !revert && gas >= 0;
[L5095]  RET         call ERC20ext_ERC20ext(this, msgsender_MSG, msgvalue_MSG, initialSupply_s639, tokenName_s639, tokenSymbol_s639);
[L5096]              assume !revert && gas >= 0;
[L5099]  CALL        call CorralChoice_ERC20ext(this);
[L4881]              havoc msgsender_MSG;
[L4882]              havoc msgvalue_MSG;
[L4883]              havoc choice;
[L4884]              havoc __ret_0_owner;
[L4885]              havoc newOwner_s166;
[L4886]              havoc __ret_0_name;
[L4887]              havoc __ret_0_symbol;
[L4888]              havoc __ret_0_decimals;
[L4889]              havoc __ret_0_totalSupply;
[L4890]              havoc arg835_s0;
[L4891]              havoc __ret_0_balanceOf;
[L4892]              havoc arg836_s0;
[L4893]              havoc arg837_s0;
[L4894]              havoc __ret_0_allowance;
[L4895]              havoc initialSupply_s258;
[L4896]              havoc tokenName_s258;
[L4897]              havoc tokenSymbol_s258;
[L4898]              havoc _to_s365;
[L4899]              havoc _value_s365;
[L4900]              havoc success_s365;
[L4901]              havoc _from_s413;
[L4902]              havoc _to_s413;
[L4903]              havoc _value_s413;
[L4904]              havoc success_s413;
[L4905]              havoc _spender_s441;
[L4906]              havoc _value_s441;
[L4907]              havoc success_s441;
[L4908]              havoc _spender_s479;
[L4909]              havoc _value_s479;
[L4910]              havoc _extraData_s479;
[L4911]              havoc success_s479;
[L4912]              havoc _value_s527;
[L4913]              havoc success_s527;
[L4914]              havoc _from_s598;
[L4915]              havoc _value_s598;
[L4916]              havoc success_s598;
[L4917]              havoc arg838_s0;
[L4918]              havoc __ret_0_frozenAccount;
[L4919]              havoc arg839_s0;
[L4920]              havoc __ret_0_lockedAccount;
[L4921]              havoc arg840_s0;
[L4922]              havoc __ret_0_lockedAmount;
[L4923]              havoc initialSupply_s639;
[L4924]              havoc tokenName_s639;
[L4925]              havoc tokenSymbol_s639;
[L4926]              havoc target_s779;
[L4927]              havoc mintedAmount_s779;
[L4928]              havoc success_s779;
[L4929]              havoc target_s804;
[L4930]              havoc freeze_s804;
[L4931]              havoc success_s804;
[L4932]              havoc target_s832;
[L4933]              havoc time_s832;
[L4934]              havoc amount_s832;
[L4935]              havoc success_s832;
[L4936]              havoc tmpNow;
[L4937]              havoc gas;
[L4938]              assume gas > 4000000 && gas <= 8000000;
[L4939]              tmpNow := now;
[L4940]              havoc now;
[L4941]              assume now > tmpNow;
[L4942]              assume msgsender_MSG != null;
[L4943]              assume DType[msgsender_MSG] != SafeMath;
[L4944]              assume DType[msgsender_MSG] != owned;
[L4945]              assume DType[msgsender_MSG] != tokenRecipient;
[L4946]              assume DType[msgsender_MSG] != TokenERC20;
[L4947]              assume DType[msgsender_MSG] != ERC20ext;
[L4948]              Alloc[msgsender_MSG] := true;
[L4949]  COND FALSE  !(choice == 20)
[L4955]  COND FALSE  !(choice == 19)
[L4961]  COND FALSE  !(choice == 18)
[L4967]  COND FALSE  !(choice == 17)
[L4973]  COND FALSE  !(choice == 16)
[L4979]  COND FALSE  !(choice == 15)
[L4985]  COND FALSE  !(choice == 14)
[L4991]  COND FALSE  !(choice == 13)
[L4997]  COND FALSE  !(choice == 12)
[L5004]  COND FALSE  !(choice == 11)
[L5011]  COND FALSE  !(choice == 10)
[L5018]  COND FALSE  !(choice == 9)
[L5025]  COND FALSE  !(choice == 8)
[L5032]  COND FALSE  !(choice == 7)
[L5039]  COND FALSE  !(choice == 6)
[L5045]  COND FALSE  !(choice == 5)
[L5051]  COND FALSE  !(choice == 4)
[L5057]  COND TRUE   choice == 3
[L5058]              gas := gas - 21000;
[L5059]  COND TRUE   gas >= 0
[L5060]              assume mintedAmount_s779 >= 0 && mintedAmount_s779 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5061]              assume msgvalue_MSG == 0;
[L5062]  CALL        call success_s779 := mintToken~address~uint256_ERC20ext(this, msgsender_MSG, msgvalue_MSG, target_s779, mintedAmount_s779);
[L1433]              havoc __exception;
[L1434]              revert := false;
[L1435]  COND FALSE  !(__exception)
[L1464]  CALL        call success_s779 := mintToken~address~uint256_ERC20ext__success(this, msgsender_MSG, msgvalue_MSG, target_s779, mintedAmount_s779);
[L3382]  CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4484]  COND FALSE  !(!(msgsender_MSG == owner_owned[this]))
[L3382]  RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3383]  COND FALSE  !(revert)
[L3386]  CALL        call __var_17 := add~uint256~uint256_SafeMath__success(this, this, 0, balanceOf_TokenERC20[this][target_s779], mintedAmount_s779);
[L2485]              c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2486]  COND FALSE  !(!(c_s26 >= a_s26))
[L2490]              __ret_0_ := c_s26;
[L3386]  RET         call __var_17 := add~uint256~uint256_SafeMath__success(this, this, 0, balanceOf_TokenERC20[this][target_s779], mintedAmount_s779);
[L3387]  COND FALSE  !(revert)
[L3390]              sum_balanceOf0[this] := sum_balanceOf0[this] - balanceOf_TokenERC20[this][target_s779];
[L3391]              balanceOf_TokenERC20[this][target_s779] := __var_17;
[L3392]              sum_balanceOf0[this] := sum_balanceOf0[this] + balanceOf_TokenERC20[this][target_s779];
[L3393]  CALL        call __var_18 := add~uint256~uint256_SafeMath__success(this, this, 0, totalSupply_TokenERC20[this], mintedAmount_s779);
[L2485]              c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2486]  COND FALSE  !(!(c_s26 >= a_s26))
[L2490]              __ret_0_ := c_s26;
[L3393]  RET         call __var_18 := add~uint256~uint256_SafeMath__success(this, this, 0, totalSupply_TokenERC20[this], mintedAmount_s779);
[L3394]  COND FALSE  !(revert)
[L3397]              totalSupply_TokenERC20[this] := __var_18;
[L3398]              assert { :EventEmitted "Transfer_ERC20ext" } true;
[L3399]              success_s779 := true;
[L1464]  RET         call success_s779 := mintToken~address~uint256_ERC20ext__success(this, msgsender_MSG, msgvalue_MSG, target_s779, mintedAmount_s779);
[L1465]              assume !revert && gas >= 0;
[L5062]  RET         call success_s779 := mintToken~address~uint256_ERC20ext(this, msgsender_MSG, msgvalue_MSG, target_s779, mintedAmount_s779);
[L5099]  RET         call CorralChoice_ERC20ext(this);
[L5099]  CALL        call CorralChoice_ERC20ext(this);
[L4881]              havoc msgsender_MSG;
[L4882]              havoc msgvalue_MSG;
[L4883]              havoc choice;
[L4884]              havoc __ret_0_owner;
[L4885]              havoc newOwner_s166;
[L4886]              havoc __ret_0_name;
[L4887]              havoc __ret_0_symbol;
[L4888]              havoc __ret_0_decimals;
[L4889]              havoc __ret_0_totalSupply;
[L4890]              havoc arg835_s0;
[L4891]              havoc __ret_0_balanceOf;
[L4892]              havoc arg836_s0;
[L4893]              havoc arg837_s0;
[L4894]              havoc __ret_0_allowance;
[L4895]              havoc initialSupply_s258;
[L4896]              havoc tokenName_s258;
[L4897]              havoc tokenSymbol_s258;
[L4898]              havoc _to_s365;
[L4899]              havoc _value_s365;
[L4900]              havoc success_s365;
[L4901]              havoc _from_s413;
[L4902]              havoc _to_s413;
[L4903]              havoc _value_s413;
[L4904]              havoc success_s413;
[L4905]              havoc _spender_s441;
[L4906]              havoc _value_s441;
[L4907]              havoc success_s441;
[L4908]              havoc _spender_s479;
[L4909]              havoc _value_s479;
[L4910]              havoc _extraData_s479;
[L4911]              havoc success_s479;
[L4912]              havoc _value_s527;
[L4913]              havoc success_s527;
[L4914]              havoc _from_s598;
[L4915]              havoc _value_s598;
[L4916]              havoc success_s598;
[L4917]              havoc arg838_s0;
[L4918]              havoc __ret_0_frozenAccount;
[L4919]              havoc arg839_s0;
[L4920]              havoc __ret_0_lockedAccount;
[L4921]              havoc arg840_s0;
[L4922]              havoc __ret_0_lockedAmount;
[L4923]              havoc initialSupply_s639;
[L4924]              havoc tokenName_s639;
[L4925]              havoc tokenSymbol_s639;
[L4926]              havoc target_s779;
[L4927]              havoc mintedAmount_s779;
[L4928]              havoc success_s779;
[L4929]              havoc target_s804;
[L4930]              havoc freeze_s804;
[L4931]              havoc success_s804;
[L4932]              havoc target_s832;
[L4933]              havoc time_s832;
[L4934]              havoc amount_s832;
[L4935]              havoc success_s832;
[L4936]              havoc tmpNow;
[L4937]              havoc gas;
[L4938]              assume gas > 4000000 && gas <= 8000000;
[L4939]              tmpNow := now;
[L4940]              havoc now;
[L4941]              assume now > tmpNow;
[L4942]              assume msgsender_MSG != null;
[L4943]              assume DType[msgsender_MSG] != SafeMath;
[L4944]              assume DType[msgsender_MSG] != owned;
[L4945]              assume DType[msgsender_MSG] != tokenRecipient;
[L4946]              assume DType[msgsender_MSG] != TokenERC20;
[L4947]              assume DType[msgsender_MSG] != ERC20ext;
[L4948]              Alloc[msgsender_MSG] := true;
[L4949]  COND FALSE  !(choice == 20)
[L4955]  COND FALSE  !(choice == 19)
[L4961]  COND FALSE  !(choice == 18)
[L4967]  COND FALSE  !(choice == 17)
[L4973]  COND FALSE  !(choice == 16)
[L4979]  COND FALSE  !(choice == 15)
[L4985]  COND FALSE  !(choice == 14)
[L4991]  COND FALSE  !(choice == 13)
[L4997]  COND TRUE   choice == 12
[L4998]              gas := gas - 21000;
[L4999]  COND TRUE   gas >= 0
[L5000]              assume _value_s365 >= 0 && _value_s365 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5001]              assume msgvalue_MSG == 0;
[L5002]  CALL        call success_s365 := transfer~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, _to_s365, _value_s365);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG != _to_s365 && (_value_s365 > balanceOf_TokenERC20[this][msgsender_MSG] || balanceOf_TokenERC20[this][_to_s365] + _value_s365 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && _value_s365 >= 0) && _value_s365 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_TokenERC20[this][_to_s365] >= 0) && balanceOf_TokenERC20[this][_to_s365] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_TokenERC20[this][msgsender_MSG] >= 0) && balanceOf_TokenERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_TokenERC200 := true;
[L2]                 call_transfer_TokenERC200 := false;
[L2]                 revert := revert_hold;
[L527]               havoc __exception;
[L528]               revert := false;
[L529]   COND FALSE  !(__exception)
[L558]   CALL        call success_s365 := transfer~address~uint256_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, _to_s365, _value_s365);
[L2853]  COND TRUE   DType[this] == ERC20ext
[L2854]  CALL        call _transfer~address~address~uint256_ERC20ext__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, _to_s365, _value_s365);
[L3312]  COND FALSE  !(!(now > lockedAccount_ERC20ext[this][_from_s739] || (lockedAmount_ERC20ext[this][_from_s739] + _value_s739) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 < balanceOf_TokenERC20[this][_from_s739]))
[L3316]              __var_14 := null;
[L3317]  COND FALSE  !(!(_to_s739 != null))
[L3321]  COND FALSE  !(!(balanceOf_TokenERC20[this][_from_s739] >= _value_s739))
[L3325]  COND FALSE  !(!((balanceOf_TokenERC20[this][_to_s739] + _value_s739) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 >= balanceOf_TokenERC20[this][_to_s739]))
[L3329]  COND FALSE  !(!!frozenAccount_ERC20ext[this][_from_s739])
[L3333]  COND FALSE  !(!!frozenAccount_ERC20ext[this][_to_s739])
[L3337]  CALL        call __var_15 := sub~uint256~uint256_SafeMath__success(this, this, 0, balanceOf_TokenERC20[this][_from_s739], _value_s739);
[L2509]  COND FALSE  !(!(b_s51 <= a_s51))
[L2513]              c_s51 := (a_s51 - b_s51) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2514]              __ret_0_ := c_s51;
[L3337]  RET         call __var_15 := sub~uint256~uint256_SafeMath__success(this, this, 0, balanceOf_TokenERC20[this][_from_s739], _value_s739);
[L3338]  COND FALSE  !(revert)
[L3341]              sum_balanceOf0[this] := sum_balanceOf0[this] - balanceOf_TokenERC20[this][_from_s739];
[L3342]              balanceOf_TokenERC20[this][_from_s739] := __var_15;
[L3343]              sum_balanceOf0[this] := sum_balanceOf0[this] + balanceOf_TokenERC20[this][_from_s739];
[L3344]  CALL        call __var_16 := add~uint256~uint256_SafeMath__success(this, this, 0, balanceOf_TokenERC20[this][_to_s739], _value_s739);
[L2485]              c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2486]  COND FALSE  !(!(c_s26 >= a_s26))
[L2490]              __ret_0_ := c_s26;
[L3344]  RET         call __var_16 := add~uint256~uint256_SafeMath__success(this, this, 0, balanceOf_TokenERC20[this][_to_s739], _value_s739);
[L3345]  COND FALSE  !(revert)
[L3348]              sum_balanceOf0[this] := sum_balanceOf0[this] - balanceOf_TokenERC20[this][_to_s739];
[L3349]              balanceOf_TokenERC20[this][_to_s739] := __var_16;
[L3350]              sum_balanceOf0[this] := sum_balanceOf0[this] + balanceOf_TokenERC20[this][_to_s739];
[L3351]              assert { :EventEmitted "Transfer_ERC20ext" } true;
[L2854]  RET         call _transfer~address~address~uint256_ERC20ext__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, _to_s365, _value_s365);
[L2855]  COND FALSE  !(revert)
[L2866]              success_s365 := true;
[L558]   RET         call success_s365 := transfer~address~uint256_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, _to_s365, _value_s365);
[L559]               assume !revert && gas >= 0;
[L5002]  RET         call success_s365 := transfer~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, _to_s365, _value_s365);
[L5099]  RET         call CorralChoice_ERC20ext(this);

Loop:
[L5099]  CALL        call CorralChoice_ERC20ext(this);
[L4881]              havoc msgsender_MSG;
[L4882]              havoc msgvalue_MSG;
[L4883]              havoc choice;
[L4884]              havoc __ret_0_owner;
[L4885]              havoc newOwner_s166;
[L4886]              havoc __ret_0_name;
[L4887]              havoc __ret_0_symbol;
[L4888]              havoc __ret_0_decimals;
[L4889]              havoc __ret_0_totalSupply;
[L4890]              havoc arg835_s0;
[L4891]              havoc __ret_0_balanceOf;
[L4892]              havoc arg836_s0;
[L4893]              havoc arg837_s0;
[L4894]              havoc __ret_0_allowance;
[L4895]              havoc initialSupply_s258;
[L4896]              havoc tokenName_s258;
[L4897]              havoc tokenSymbol_s258;
[L4898]              havoc _to_s365;
[L4899]              havoc _value_s365;
[L4900]              havoc success_s365;
[L4901]              havoc _from_s413;
[L4902]              havoc _to_s413;
[L4903]              havoc _value_s413;
[L4904]              havoc success_s413;
[L4905]              havoc _spender_s441;
[L4906]              havoc _value_s441;
[L4907]              havoc success_s441;
[L4908]              havoc _spender_s479;
[L4909]              havoc _value_s479;
[L4910]              havoc _extraData_s479;
[L4911]              havoc success_s479;
[L4912]              havoc _value_s527;
[L4913]              havoc success_s527;
[L4914]              havoc _from_s598;
[L4915]              havoc _value_s598;
[L4916]              havoc success_s598;
[L4917]              havoc arg838_s0;
[L4918]              havoc __ret_0_frozenAccount;
[L4919]              havoc arg839_s0;
[L4920]              havoc __ret_0_lockedAccount;
[L4921]              havoc arg840_s0;
[L4922]              havoc __ret_0_lockedAmount;
[L4923]              havoc initialSupply_s639;
[L4924]              havoc tokenName_s639;
[L4925]              havoc tokenSymbol_s639;
[L4926]              havoc target_s779;
[L4927]              havoc mintedAmount_s779;
[L4928]              havoc success_s779;
[L4929]              havoc target_s804;
[L4930]              havoc freeze_s804;
[L4931]              havoc success_s804;
[L4932]              havoc target_s832;
[L4933]              havoc time_s832;
[L4934]              havoc amount_s832;
[L4935]              havoc success_s832;
[L4936]              havoc tmpNow;
[L4937]              havoc gas;
[L4938]              assume gas > 4000000 && gas <= 8000000;
[L4939]              tmpNow := now;
[L4940]              havoc now;
[L4941]              assume now > tmpNow;
[L4942]              assume msgsender_MSG != null;
[L4943]              assume DType[msgsender_MSG] != SafeMath;
[L4944]              assume DType[msgsender_MSG] != owned;
[L4945]              assume DType[msgsender_MSG] != tokenRecipient;
[L4946]              assume DType[msgsender_MSG] != TokenERC20;
[L4947]              assume DType[msgsender_MSG] != ERC20ext;
[L4948]              Alloc[msgsender_MSG] := true;
[L4949]  COND FALSE  !(choice == 20)
[L4955]  COND FALSE  !(choice == 19)
[L4961]  COND FALSE  !(choice == 18)
[L4967]  COND FALSE  !(choice == 17)
[L4973]  COND FALSE  !(choice == 16)
[L4979]  COND FALSE  !(choice == 15)
[L4985]  COND FALSE  !(choice == 14)
[L4991]  COND FALSE  !(choice == 13)
[L4997]  COND TRUE   choice == 12
[L4998]              gas := gas - 21000;
[L4999]  COND TRUE   gas >= 0
[L5000]              assume _value_s365 >= 0 && _value_s365 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5001]              assume msgvalue_MSG == 0;
[L5002]  CALL        call success_s365 := transfer~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, _to_s365, _value_s365);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG != _to_s365 && (_value_s365 > balanceOf_TokenERC20[this][msgsender_MSG] || balanceOf_TokenERC20[this][_to_s365] + _value_s365 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && _value_s365 >= 0) && _value_s365 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_TokenERC20[this][_to_s365] >= 0) && balanceOf_TokenERC20[this][_to_s365] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_TokenERC20[this][msgsender_MSG] >= 0) && balanceOf_TokenERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_TokenERC200 := true;
[L2]                 call_transfer_TokenERC200 := false;
[L2]                 revert := revert_hold;
[L527]               havoc __exception;
[L528]               revert := false;
[L529]   COND FALSE  !(__exception)
[L558]   CALL        call success_s365 := transfer~address~uint256_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, _to_s365, _value_s365);
[L2853]  COND TRUE   DType[this] == ERC20ext
[L2854]  CALL        call _transfer~address~address~uint256_ERC20ext__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, _to_s365, _value_s365);
[L3312]  COND FALSE  !(!(now > lockedAccount_ERC20ext[this][_from_s739] || (lockedAmount_ERC20ext[this][_from_s739] + _value_s739) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 < balanceOf_TokenERC20[this][_from_s739]))
[L3316]              __var_14 := null;
[L3317]  COND FALSE  !(!(_to_s739 != null))
[L3321]  COND FALSE  !(!(balanceOf_TokenERC20[this][_from_s739] >= _value_s739))
[L3325]  COND FALSE  !(!((balanceOf_TokenERC20[this][_to_s739] + _value_s739) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 >= balanceOf_TokenERC20[this][_to_s739]))
[L3329]  COND FALSE  !(!!frozenAccount_ERC20ext[this][_from_s739])
[L3333]  COND FALSE  !(!!frozenAccount_ERC20ext[this][_to_s739])
[L3337]  CALL        call __var_15 := sub~uint256~uint256_SafeMath__success(this, this, 0, balanceOf_TokenERC20[this][_from_s739], _value_s739);
[L2509]  COND FALSE  !(!(b_s51 <= a_s51))
[L2513]              c_s51 := (a_s51 - b_s51) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2514]              __ret_0_ := c_s51;
[L3337]  RET         call __var_15 := sub~uint256~uint256_SafeMath__success(this, this, 0, balanceOf_TokenERC20[this][_from_s739], _value_s739);
[L3338]  COND FALSE  !(revert)
[L3341]              sum_balanceOf0[this] := sum_balanceOf0[this] - balanceOf_TokenERC20[this][_from_s739];
[L3342]              balanceOf_TokenERC20[this][_from_s739] := __var_15;
[L3343]              sum_balanceOf0[this] := sum_balanceOf0[this] + balanceOf_TokenERC20[this][_from_s739];
[L3344]  CALL        call __var_16 := add~uint256~uint256_SafeMath__success(this, this, 0, balanceOf_TokenERC20[this][_to_s739], _value_s739);
[L2485]              c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2486]  COND FALSE  !(!(c_s26 >= a_s26))
[L2490]              __ret_0_ := c_s26;
[L3344]  RET         call __var_16 := add~uint256~uint256_SafeMath__success(this, this, 0, balanceOf_TokenERC20[this][_to_s739], _value_s739);
[L3345]  COND FALSE  !(revert)
[L3348]              sum_balanceOf0[this] := sum_balanceOf0[this] - balanceOf_TokenERC20[this][_to_s739];
[L3349]              balanceOf_TokenERC20[this][_to_s739] := __var_16;
[L3350]              sum_balanceOf0[this] := sum_balanceOf0[this] + balanceOf_TokenERC20[this][_to_s739];
[L3351]              assert { :EventEmitted "Transfer_ERC20ext" } true;
[L2854]  RET         call _transfer~address~address~uint256_ERC20ext__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, _to_s365, _value_s365);
[L2855]  COND FALSE  !(revert)
[L2866]              success_s365 := true;
[L558]   RET         call success_s365 := transfer~address~uint256_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, _to_s365, _value_s365);
[L559]               assume !revert && gas >= 0;
[L5002]  RET         call success_s365 := transfer~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, _to_s365, _value_s365);
[L5099]  RET         call CorralChoice_ERC20ext(this);

[2020-11-25 15:07:14,609 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 15:07:14,609 INFO  L82        PathProgramCache]: Analyzing trace with hash -65391931, now seen corresponding path program 1 times
[2020-11-25 15:07:14,610 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 15:07:14,632 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 15:07:14,718 INFO  L134       CoverageAnalysis]: Checked inductivity of 84 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 84 trivial. 0 not checked.
[2020-11-25 15:07:14,718 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 15:07:14,718 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [9] imperfect sequences [] total 9
[2020-11-25 15:07:14,718 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 15:07:14,718 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 9 interpolants.
[2020-11-25 15:07:14,718 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=19, Invalid=53, Unknown=0, NotChecked=0, Total=72
[2020-11-25 15:07:14,719 INFO  L87              Difference]: Start difference. First operand 3042 states and 3302 transitions. cyclomatic complexity: 263 Second operand 9 states.
[2020-11-25 15:07:15,296 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 15:07:15,296 INFO  L93              Difference]: Finished difference Result 1754 states and 1906 transitions.
[2020-11-25 15:07:15,296 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 9 states. 
[2020-11-25 15:07:15,296 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 1754 states and 1906 transitions.
[2020-11-25 15:07:15,299 INFO  L131   ngComponentsAnalysis]: Automaton has 0 accepting balls. 0
[2020-11-25 15:07:15,299 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 1754 states to 0 states and 0 transitions.
[2020-11-25 15:07:15,299 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 0
[2020-11-25 15:07:15,299 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 0
[2020-11-25 15:07:15,299 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 0 states and 0 transitions.
[2020-11-25 15:07:15,299 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 15:07:15,299 INFO  L728         BuchiCegarLoop]: Abstraction has 0 states and 0 transitions.
[2020-11-25 15:07:15,299 INFO  L751         BuchiCegarLoop]: Abstraction has 0 states and 0 transitions.
[2020-11-25 15:07:15,299 INFO  L631         BuchiCegarLoop]: Abstraction has 0 states and 0 transitions.
[2020-11-25 15:07:15,299 INFO  L445         BuchiCegarLoop]: ======== Iteration 8============
[2020-11-25 15:07:15,299 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 0 states and 0 transitions.
[2020-11-25 15:07:15,300 INFO  L131   ngComponentsAnalysis]: Automaton has 0 accepting balls. 0
[2020-11-25 15:07:15,300 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is true
[2020-11-25 15:07:15,303 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer CFG 25.11 03:07:15 BasicIcfg
[2020-11-25 15:07:15,303 INFO  L132        PluginConnector]: ------------------------ END BuchiAutomizer----------------------------
[2020-11-25 15:07:15,304 INFO  L168              Benchmark]: Toolchain (without parser) took 11466.43 ms. Allocated memory was 1.0 GB in the beginning and 1.9 GB in the end (delta: 848.3 MB). Free memory was 935.2 MB in the beginning and 1.1 GB in the end (delta: -126.8 MB). Peak memory consumption was 721.5 MB. Max. memory is 15.3 GB.
[2020-11-25 15:07:15,304 INFO  L168              Benchmark]: Boogie PL CUP Parser took 0.12 ms. Allocated memory is still 1.0 GB. Free memory is still 951.3 MB. There was no memory consumed. Max. memory is 15.3 GB.
[2020-11-25 15:07:15,305 INFO  L168              Benchmark]: Boogie Preprocessor took 87.69 ms. Allocated memory is still 1.0 GB. Free memory was 935.2 MB in the beginning and 924.5 MB in the end (delta: 10.7 MB). Peak memory consumption was 10.7 MB. Max. memory is 15.3 GB.
[2020-11-25 15:07:15,306 INFO  L168              Benchmark]: UtopiaSpecLang took 48.58 ms. Allocated memory is still 1.0 GB. Free memory was 924.5 MB in the beginning and 919.1 MB in the end (delta: 5.4 MB). Peak memory consumption was 5.4 MB. Max. memory is 15.3 GB.
[2020-11-25 15:07:15,306 INFO  L168              Benchmark]: Boogie Printer took 15.47 ms. Allocated memory is still 1.0 GB. Free memory was 919.1 MB in the beginning and 913.7 MB in the end (delta: 5.4 MB). Peak memory consumption was 5.4 MB. Max. memory is 15.3 GB.
[2020-11-25 15:07:15,306 INFO  L168              Benchmark]: RCFGBuilder took 700.09 ms. Allocated memory is still 1.0 GB. Free memory was 913.7 MB in the beginning and 779.5 MB in the end (delta: 134.2 MB). Peak memory consumption was 134.2 MB. Max. memory is 15.3 GB.
[2020-11-25 15:07:15,306 INFO  L168              Benchmark]: UtopiaLTL2Aut took 38.63 ms. Allocated memory is still 1.0 GB. Free memory was 779.5 MB in the beginning and 775.9 MB in the end (delta: 3.6 MB). Peak memory consumption was 3.6 MB. Max. memory is 15.3 GB.
[2020-11-25 15:07:15,307 INFO  L168              Benchmark]: BÃ¼chi Program Product took 1351.35 ms. Allocated memory was 1.0 GB in the beginning and 1.2 GB in the end (delta: 213.9 MB). Free memory was 775.9 MB in the beginning and 922.3 MB in the end (delta: -146.3 MB). Peak memory consumption was 177.7 MB. Max. memory is 15.3 GB.
[2020-11-25 15:07:15,307 INFO  L168              Benchmark]: BlockEncodingV2 took 154.86 ms. Allocated memory is still 1.2 GB. Free memory was 922.3 MB in the beginning and 842.6 MB in the end (delta: 79.7 MB). Peak memory consumption was 79.7 MB. Max. memory is 15.3 GB.
[2020-11-25 15:07:15,307 INFO  L168              Benchmark]: BuchiAutomizer took 9067.36 ms. Allocated memory was 1.2 GB in the beginning and 1.9 GB in the end (delta: 634.4 MB). Free memory was 842.6 MB in the beginning and 1.1 GB in the end (delta: -219.4 MB). Peak memory consumption was 415.0 MB. Max. memory is 15.3 GB.
[2020-11-25 15:07:15,310 INFO  L337   ainManager$Toolchain]: #######################  End [Toolchain 1] #######################
 --- Results ---
 * Results from de.uni_freiburg.informatik.ultimate.plugins.blockencoding:
  - StatisticsResult: Initial Icfg
    4512 locations, 7833 edges
  - StatisticsResult: Encoded RCFG
    4406 locations, 7590 edges
 * Results from de.uni_freiburg.informatik.ultimate.core:
  - StatisticsResult: Toolchain Benchmarks
    Benchmark results are:
 * Boogie PL CUP Parser took 0.12 ms. Allocated memory is still 1.0 GB. Free memory is still 951.3 MB. There was no memory consumed. Max. memory is 15.3 GB.
 * Boogie Preprocessor took 87.69 ms. Allocated memory is still 1.0 GB. Free memory was 935.2 MB in the beginning and 924.5 MB in the end (delta: 10.7 MB). Peak memory consumption was 10.7 MB. Max. memory is 15.3 GB.
 * UtopiaSpecLang took 48.58 ms. Allocated memory is still 1.0 GB. Free memory was 924.5 MB in the beginning and 919.1 MB in the end (delta: 5.4 MB). Peak memory consumption was 5.4 MB. Max. memory is 15.3 GB.
 * Boogie Printer took 15.47 ms. Allocated memory is still 1.0 GB. Free memory was 919.1 MB in the beginning and 913.7 MB in the end (delta: 5.4 MB). Peak memory consumption was 5.4 MB. Max. memory is 15.3 GB.
 * RCFGBuilder took 700.09 ms. Allocated memory is still 1.0 GB. Free memory was 913.7 MB in the beginning and 779.5 MB in the end (delta: 134.2 MB). Peak memory consumption was 134.2 MB. Max. memory is 15.3 GB.
 * UtopiaLTL2Aut took 38.63 ms. Allocated memory is still 1.0 GB. Free memory was 779.5 MB in the beginning and 775.9 MB in the end (delta: 3.6 MB). Peak memory consumption was 3.6 MB. Max. memory is 15.3 GB.
 * BÃ¼chi Program Product took 1351.35 ms. Allocated memory was 1.0 GB in the beginning and 1.2 GB in the end (delta: 213.9 MB). Free memory was 775.9 MB in the beginning and 922.3 MB in the end (delta: -146.3 MB). Peak memory consumption was 177.7 MB. Max. memory is 15.3 GB.
 * BlockEncodingV2 took 154.86 ms. Allocated memory is still 1.2 GB. Free memory was 922.3 MB in the beginning and 842.6 MB in the end (delta: 79.7 MB). Peak memory consumption was 79.7 MB. Max. memory is 15.3 GB.
 * BuchiAutomizer took 9067.36 ms. Allocated memory was 1.2 GB in the beginning and 1.9 GB in the end (delta: 634.4 MB). Free memory was 842.6 MB in the beginning and 1.1 GB in the end (delta: -219.4 MB). Peak memory consumption was 415.0 MB. Max. memory is 15.3 GB.
 * Results from de.uni_freiburg.informatik.ultimate.buchiprogramproduct:
  - StatisticsResult: Initial property automaton
    2 locations, 3 edges
  - StatisticsResult: Initial RCFG
    1885 locations, 2421 edges
  - StatisticsResult: BuchiProgram size
    4512 locations, 7833 edges
 * Results from de.uni_freiburg.informatik.ultimate.plugins.generator.traceabstraction:
  - StatisticsResult: Constructed decomposition of program
    Your program was decomposed into 7 terminating modules (7 trivial, 0 deterministic, 0 nondeterministic). 7 modules have a trivial ranking function, the largest among these consists of 19 locations.
  - StatisticsResult: Timing statistics
    BÃ¼chiAutomizer plugin needed 9.0s and 8 iterations.  TraceHistogramMax:2. Analysis of lassos took 1.3s. Construction of modules took 5.4s. BÃ¼chi inclusion checks took 1.6s. Highest rank in rank-based complementation 0. Minimization of det autom 7. Minimization of nondet autom 0. Automata minimization 0.1s AutomataMinimizationTime, 6 MinimizatonAttempts, 1518 StatesRemovedByMinimization, 5 NontrivialMinimizations. Non-live state removal took 0.1s Buchi closure took 0.0s. Biggest automaton had 3273 states and ocurred in iteration 2.	Nontrivial modules had stage [0, 0, 0, 0, 0].	InterpolantCoveringCapabilityFinite: 0/0	InterpolantCoveringCapabilityBuchi: 0/0	HoareTripleCheckerStatistics: 21699 SDtfs, 17742 SDslu, 48108 SDs, 0 SdLazy, 78292 SolverSat, 2588 SolverUnsat, 0 SolverUnknown, 0 SolverNotchecked, 5.4s Time	LassoAnalysisResults: nont0 unkn0 SFLI0 SFLT0 conc0 concLT0 SILN0 SILU7 SILI0 SILT0 lasso0 LassoPreprocessingBenchmarks: LassoTerminationAnalysisBenchmarks: not availableLassoTerminationAnalysisBenchmarks: LassoNonterminationAnalysisSatFixpoint: 0	LassoNonterminationAnalysisSatUnbounded: 0	LassoNonterminationAnalysisUnsat: 0	LassoNonterminationAnalysisUnknown: 0	LassoNonterminationAnalysisTime: 0.0s	
  - AllSpecificationsHoldResult: All specifications hold
    Buchi Automizer proved that the LTL property ! ( ( []( (call_transfer_TokenERC200) ==> ( <>(fail_transfer_TokenERC200) ) ) )) holds
RESULT: Ultimate proved your program to be correct!
Received shutdown request...
