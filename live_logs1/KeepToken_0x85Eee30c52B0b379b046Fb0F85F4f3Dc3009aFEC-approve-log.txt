This is Ultimate 0.1.24-f1553f5-m
[2020-11-24 20:07:53,064 INFO  L170        SettingsManager]: Resetting all preferences to default values...
[2020-11-24 20:07:53,066 INFO  L174        SettingsManager]: Resetting UltimateCore preferences to default values
[2020-11-24 20:07:53,076 INFO  L177        SettingsManager]: Ultimate Commandline Interface provides no preferences, ignoring...
[2020-11-24 20:07:53,076 INFO  L174        SettingsManager]: Resetting Boogie Preprocessor preferences to default values
[2020-11-24 20:07:53,076 INFO  L174        SettingsManager]: Resetting Boogie Procedure Inliner preferences to default values
[2020-11-24 20:07:53,077 INFO  L174        SettingsManager]: Resetting Abstract Interpretation preferences to default values
[2020-11-24 20:07:53,079 INFO  L174        SettingsManager]: Resetting LassoRanker preferences to default values
[2020-11-24 20:07:53,080 INFO  L174        SettingsManager]: Resetting Reaching Definitions preferences to default values
[2020-11-24 20:07:53,081 INFO  L174        SettingsManager]: Resetting SyntaxChecker preferences to default values
[2020-11-24 20:07:53,082 INFO  L177        SettingsManager]: BÃ¼chi Program Product provides no preferences, ignoring...
[2020-11-24 20:07:53,082 INFO  L174        SettingsManager]: Resetting LTL2Aut preferences to default values
[2020-11-24 20:07:53,082 INFO  L174        SettingsManager]: Resetting PEA to Boogie preferences to default values
[2020-11-24 20:07:53,083 INFO  L174        SettingsManager]: Resetting BlockEncodingV2 preferences to default values
[2020-11-24 20:07:53,084 INFO  L174        SettingsManager]: Resetting ChcToBoogie preferences to default values
[2020-11-24 20:07:53,084 INFO  L174        SettingsManager]: Resetting AutomataScriptInterpreter preferences to default values
[2020-11-24 20:07:53,085 INFO  L174        SettingsManager]: Resetting BuchiAutomizer preferences to default values
[2020-11-24 20:07:53,086 INFO  L174        SettingsManager]: Resetting CACSL2BoogieTranslator preferences to default values
[2020-11-24 20:07:53,087 INFO  L174        SettingsManager]: Resetting CodeCheck preferences to default values
[2020-11-24 20:07:53,089 INFO  L174        SettingsManager]: Resetting InvariantSynthesis preferences to default values
[2020-11-24 20:07:53,089 INFO  L174        SettingsManager]: Resetting RCFGBuilder preferences to default values
[2020-11-24 20:07:53,090 INFO  L174        SettingsManager]: Resetting TraceAbstraction preferences to default values
[2020-11-24 20:07:53,092 INFO  L177        SettingsManager]: TraceAbstractionConcurrent provides no preferences, ignoring...
[2020-11-24 20:07:53,092 INFO  L177        SettingsManager]: TraceAbstractionWithAFAs provides no preferences, ignoring...
[2020-11-24 20:07:53,092 INFO  L174        SettingsManager]: Resetting TreeAutomizer preferences to default values
[2020-11-24 20:07:53,092 INFO  L174        SettingsManager]: Resetting IcfgToChc preferences to default values
[2020-11-24 20:07:53,093 INFO  L174        SettingsManager]: Resetting IcfgTransformer preferences to default values
[2020-11-24 20:07:53,093 INFO  L177        SettingsManager]: ReqToTest provides no preferences, ignoring...
[2020-11-24 20:07:53,093 INFO  L174        SettingsManager]: Resetting UtopiaLTL2Aut preferences to default values
[2020-11-24 20:07:53,094 INFO  L174        SettingsManager]: Resetting UtopiaSpecLang preferences to default values
[2020-11-24 20:07:53,094 INFO  L174        SettingsManager]: Resetting Boogie Printer preferences to default values
[2020-11-24 20:07:53,094 INFO  L174        SettingsManager]: Resetting ChcSmtPrinter preferences to default values
[2020-11-24 20:07:53,095 INFO  L174        SettingsManager]: Resetting ReqPrinter preferences to default values
[2020-11-24 20:07:53,095 INFO  L174        SettingsManager]: Resetting Witness Printer preferences to default values
[2020-11-24 20:07:53,096 INFO  L177        SettingsManager]: Boogie PL CUP Parser provides no preferences, ignoring...
[2020-11-24 20:07:53,096 INFO  L174        SettingsManager]: Resetting CDTParser preferences to default values
[2020-11-24 20:07:53,097 INFO  L177        SettingsManager]: AutomataScriptParser provides no preferences, ignoring...
[2020-11-24 20:07:53,097 INFO  L177        SettingsManager]: ReqParser provides no preferences, ignoring...
[2020-11-24 20:07:53,097 INFO  L174        SettingsManager]: Resetting SmtParser preferences to default values
[2020-11-24 20:07:53,098 INFO  L174        SettingsManager]: Resetting Witness Parser preferences to default values
[2020-11-24 20:07:53,098 INFO  L181        SettingsManager]: Finished resetting all preferences to default values...
[2020-11-24 20:07:53,098 INFO  L98         SettingsManager]: Beginning loading settings from /mnt/data0/jon/SmartPulseTool/SmartPulse/settings.epf
[2020-11-24 20:07:53,106 INFO  L110        SettingsManager]: Loading preferences was successful
[2020-11-24 20:07:53,106 INFO  L112        SettingsManager]: Preferences different from defaults after loading the file:
[2020-11-24 20:07:53,106 INFO  L131        SettingsManager]: Preferences of LTL2Aut differ from their defaults:
[2020-11-24 20:07:53,107 INFO  L133        SettingsManager]:  * Read property from file=true
[2020-11-24 20:07:53,107 INFO  L133        SettingsManager]:  * Path to LTL*BA executable (LTL2BA, LTL3BA)=/mnt/data0/jon/SmartPulseTool/ltl2ba
[2020-11-24 20:07:53,107 INFO  L131        SettingsManager]: Preferences of BlockEncodingV2 differ from their defaults:
[2020-11-24 20:07:53,107 INFO  L133        SettingsManager]:  * Maximize final states=false
[2020-11-24 20:07:53,107 INFO  L133        SettingsManager]:  * Minimize states even if more edges are added than removed.=true
[2020-11-24 20:07:53,107 INFO  L133        SettingsManager]:  * Minimize states using LBE with the strategy=NONE
[2020-11-24 20:07:53,107 INFO  L131        SettingsManager]: Preferences of BuchiAutomizer differ from their defaults:
[2020-11-24 20:07:53,108 INFO  L133        SettingsManager]:  * Compute Interpolants along a Counterexample=Craig_TreeInterpolation
[2020-11-24 20:07:53,108 INFO  L133        SettingsManager]:  * Use old map elimination=false
[2020-11-24 20:07:53,108 INFO  L133        SettingsManager]:  * Try twofold refinement=false
[2020-11-24 20:07:53,108 INFO  L131        SettingsManager]: Preferences of CACSL2BoogieTranslator differ from their defaults:
[2020-11-24 20:07:53,108 INFO  L133        SettingsManager]:  * Check unreachability of error function in SV-COMP mode=false
[2020-11-24 20:07:53,108 INFO  L133        SettingsManager]:  * Overapproximate operations on floating types=true
[2020-11-24 20:07:53,108 INFO  L133        SettingsManager]:  * Check division by zero=IGNORE
[2020-11-24 20:07:53,109 INFO  L133        SettingsManager]:  * Pointer to allocated memory at dereference=ASSUME
[2020-11-24 20:07:53,109 INFO  L133        SettingsManager]:  * If two pointers are subtracted or compared they have the same base address=ASSUME
[2020-11-24 20:07:53,109 INFO  L133        SettingsManager]:  * Check array bounds for arrays that are off heap=ASSUME
[2020-11-24 20:07:53,109 INFO  L133        SettingsManager]:  * Check if freed pointer was valid=false
[2020-11-24 20:07:53,109 INFO  L133        SettingsManager]:  * Use constant arrays=true
[2020-11-24 20:07:53,109 INFO  L133        SettingsManager]:  * Pointer base address is valid at dereference=ASSUME
[2020-11-24 20:07:53,109 INFO  L131        SettingsManager]: Preferences of RCFGBuilder differ from their defaults:
[2020-11-24 20:07:53,109 INFO  L133        SettingsManager]:  * Size of a code block=SingleStatement
[2020-11-24 20:07:53,109 INFO  L133        SettingsManager]:  * SMT solver=Internal_SMTInterpol
[2020-11-24 20:07:53,130 INFO  L81    nceAwareModelManager]: Repository-Root is: /tmp
[2020-11-24 20:07:53,143 INFO  L259   ainManager$Toolchain]: [Toolchain 1]: Applicable parser(s) successfully (re)initialized
[2020-11-24 20:07:53,145 INFO  L215   ainManager$Toolchain]: [Toolchain 1]: Toolchain selected.
[2020-11-24 20:07:53,146 INFO  L271        PluginConnector]: Initializing Boogie PL CUP Parser...
[2020-11-24 20:07:53,147 INFO  L276        PluginConnector]: Boogie PL CUP Parser initialized
[2020-11-24 20:07:53,147 INFO  L430   ainManager$Toolchain]: [Toolchain 1]: Parsing single file: /mnt/data0/jon/SmartPulseTool/KeepToken_0x85Eee30c52B0b379b046Fb0F85F4f3Dc3009aFEC_approve.bpl
[2020-11-24 20:07:53,147 INFO  L111           BoogieParser]: Parsing: '/mnt/data0/jon/SmartPulseTool/KeepToken_0x85Eee30c52B0b379b046Fb0F85F4f3Dc3009aFEC_approve.bpl'
[2020-11-24 20:07:53,244 INFO  L297   ainManager$Toolchain]: ####################### [Toolchain 1] #######################
[2020-11-24 20:07:53,245 INFO  L131        ToolchainWalker]: Walking toolchain with 8 elements.
[2020-11-24 20:07:53,245 INFO  L113        PluginConnector]: ------------------------Boogie Preprocessor----------------------------
[2020-11-24 20:07:53,246 INFO  L271        PluginConnector]: Initializing Boogie Preprocessor...
[2020-11-24 20:07:53,246 INFO  L276        PluginConnector]: Boogie Preprocessor initialized
[2020-11-24 20:07:53,262 INFO  L185        PluginConnector]: Executing the observer EnsureBoogieModelObserver from plugin Boogie Preprocessor for "KeepToken_0x85Eee30c52B0b379b046Fb0F85F4f3Dc3009aFEC_approve.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 24.11 08:07:53" (1/1) ...
[2020-11-24 20:07:53,264 INFO  L185        PluginConnector]: Executing the observer TypeChecker from plugin Boogie Preprocessor for "KeepToken_0x85Eee30c52B0b379b046Fb0F85F4f3Dc3009aFEC_approve.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 24.11 08:07:53" (1/1) ...
[2020-11-24 20:07:53,298 INFO  L185        PluginConnector]: Executing the observer ConstExpander from plugin Boogie Preprocessor for "KeepToken_0x85Eee30c52B0b379b046Fb0F85F4f3Dc3009aFEC_approve.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 24.11 08:07:53" (1/1) ...
[2020-11-24 20:07:53,299 INFO  L185        PluginConnector]: Executing the observer StructExpander from plugin Boogie Preprocessor for "KeepToken_0x85Eee30c52B0b379b046Fb0F85F4f3Dc3009aFEC_approve.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 24.11 08:07:53" (1/1) ...
[2020-11-24 20:07:53,326 INFO  L185        PluginConnector]: Executing the observer UnstructureCode from plugin Boogie Preprocessor for "KeepToken_0x85Eee30c52B0b379b046Fb0F85F4f3Dc3009aFEC_approve.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 24.11 08:07:53" (1/1) ...
[2020-11-24 20:07:53,339 INFO  L185        PluginConnector]: Executing the observer FunctionInliner from plugin Boogie Preprocessor for "KeepToken_0x85Eee30c52B0b379b046Fb0F85F4f3Dc3009aFEC_approve.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 24.11 08:07:53" (1/1) ...
[2020-11-24 20:07:53,349 INFO  L185        PluginConnector]: Executing the observer BoogieSymbolTableConstructor from plugin Boogie Preprocessor for "KeepToken_0x85Eee30c52B0b379b046Fb0F85F4f3Dc3009aFEC_approve.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 24.11 08:07:53" (1/1) ...
[2020-11-24 20:07:53,361 INFO  L132        PluginConnector]: ------------------------ END Boogie Preprocessor----------------------------
[2020-11-24 20:07:53,362 INFO  L113        PluginConnector]: ------------------------UtopiaSpecLang----------------------------
[2020-11-24 20:07:53,362 INFO  L271        PluginConnector]: Initializing UtopiaSpecLang...
[2020-11-24 20:07:53,364 INFO  L276        PluginConnector]: UtopiaSpecLang initialized
[2020-11-24 20:07:53,368 INFO  L185        PluginConnector]: Executing the observer UtopiaSpecLangObserver from plugin UtopiaSpecLang for "KeepToken_0x85Eee30c52B0b379b046Fb0F85F4f3Dc3009aFEC_approve.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 24.11 08:07:53" (1/1) ...
[2020-11-24 20:07:53,387 INFO  L1012  opiaSpecLangObserver]: Parsing LTLPlus Formula to AstNode: [](started(ERC20.approve(spender, value), p1 != msg.sender || p2 != spender) ==> <>(finished(ERC20.approve(spender, value), return == true && _allowances_ERC20[this][msg.sender][spender] == value &&  _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this]) && _balances_ERC20[this] == old(_balances_ERC20[this]) && _allowances_ERC20[this][p1][p2] == old(_allowances_ERC20[this][p1][p2]) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this]) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this]) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]))))
[2020-11-24 20:07:53,392 INFO  L1016  opiaSpecLangObserver]: Successfully lexed: [](started(ERC20.approve(spender, value), p1 != msg.sender || p2 != spender) ==> <>(finished(ERC20.approve(spender, value), return == true && _allowances_ERC20[this][msg.sender][spender] == value &&  _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this]) && _balances_ERC20[this] == old(_balances_ERC20[this]) && _allowances_ERC20[this][p1][p2] == old(_allowances_ERC20[this][p1][p2]) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this]) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this]) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]))))
[2020-11-24 20:07:53,400 INFO  L1018  opiaSpecLangObserver]: Successfully parsed: [](started(ERC20.approve(spender, value), p1 != msg.sender || p2 != spender) ==> <>(finished(ERC20.approve(spender, value), return == true && _allowances_ERC20[this][msg.sender][spender] == value &&  _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this]) && _balances_ERC20[this] == old(_balances_ERC20[this]) && _allowances_ERC20[this][p1][p2] == old(_allowances_ERC20[this][p1][p2]) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this]) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this]) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]))))
[2020-11-24 20:07:53,406 INFO  L636   opiaSpecLangObserver]: Parsed ( p1!=msg.sender || p2!=spender_s312 ) to BinaryExpression[LOGICOR,BinaryExpression[COMPNEQ,IdentifierExpression[p1,GLOBAL],IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,approve~address~uint256_ERC20>]],BinaryExpression[COMPNEQ,IdentifierExpression[p2,GLOBAL],IdentifierExpression[spender_s312,<IMPLEMENTATION_INPARAM,approve~address~uint256_ERC20>]]]
[2020-11-24 20:07:53,408 INFO  L636   opiaSpecLangObserver]: Parsed ( ( ( ( ( ( ( __ret_0_==true && _allowances_ERC20[this][msg.sender][spender_s312]==amount_s312 ) && _totalSupply_ERC20[this]==( old(_totalSupply_ERC20[this]) ) ) && _balances_ERC20[this]==( old(_balances_ERC20[this]) ) ) && _allowances_ERC20[this][p1][p2]==( old(_allowances_ERC20[this][p1][p2]) ) ) && _name_ERC20Detailed[this]==( old(_name_ERC20Detailed[this]) ) ) && _symbol_ERC20Detailed[this]==( old(_symbol_ERC20Detailed[this]) ) ) && _decimals_ERC20Detailed[this]==( old(_decimals_ERC20Detailed[this]) ) ) to BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[COMPEQ,IdentifierExpression[__ret_0_,<IMPLEMENTATION_OUTPARAM,approve~address~uint256_ERC20>],BooleanLiteral[true]],BinaryExpression[COMPEQ,ArrayAccessExpression[ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_allowances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,approve~address~uint256_ERC20>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,approve~address~uint256_ERC20>]]],[IdentifierExpression[spender_s312,<IMPLEMENTATION_INPARAM,approve~address~uint256_ERC20>]]],IdentifierExpression[amount_s312,<IMPLEMENTATION_INPARAM,approve~address~uint256_ERC20>]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[_totalSupply_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,approve~address~uint256_ERC20>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[_totalSupply_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,approve~address~uint256_ERC20>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[_balances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,approve~address~uint256_ERC20>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[_balances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,approve~address~uint256_ERC20>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_allowances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,approve~address~uint256_ERC20>]]],[IdentifierExpression[p1,GLOBAL]]],[IdentifierExpression[p2,GLOBAL]]],UnaryExpression[OLD,ArrayAccessExpression[ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_allowances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,approve~address~uint256_ERC20>]]],[IdentifierExpression[p1,GLOBAL]]],[IdentifierExpression[p2,GLOBAL]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[_name_ERC20Detailed,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,approve~address~uint256_ERC20>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[_name_ERC20Detailed,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,approve~address~uint256_ERC20>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[_symbol_ERC20Detailed,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,approve~address~uint256_ERC20>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[_symbol_ERC20Detailed,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,approve~address~uint256_ERC20>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[_decimals_ERC20Detailed,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,approve~address~uint256_ERC20>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[_decimals_ERC20Detailed,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,approve~address~uint256_ERC20>]]]]]]
[2020-11-24 20:07:53,415 INFO  L1005  opiaSpecLangObserver]: Compiling: [](started(ERC20.approve(spender, value), p1 != msg.sender || p2 != spender) ==> <>(finished(ERC20.approve(spender, value), return == true && _allowances_ERC20[this][msg.sender][spender] == value &&  _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this]) && _balances_ERC20[this] == old(_balances_ERC20[this]) && _allowances_ERC20[this][p1][p2] == old(_allowances_ERC20[this][p1][p2]) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this]) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this]) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]))))
[2020-11-24 20:07:53,415 INFO  L1007  opiaSpecLangObserver]: Compiled to ( []( AP(call_approve_ERC200) ==> ( <>AP(success_approve_ERC200) ) ) )
Executed UtopiaSpecLang
[2020-11-24 20:07:53,426 INFO  L202        PluginConnector]: Adding new model Hardcoded edu.utexas.cs.utopia.specLang AST 24.11 08:07:53 PropertyContainer
[2020-11-24 20:07:53,427 INFO  L132        PluginConnector]: ------------------------ END UtopiaSpecLang----------------------------
[2020-11-24 20:07:53,427 INFO  L113        PluginConnector]: ------------------------Boogie Printer----------------------------
[2020-11-24 20:07:53,427 INFO  L271        PluginConnector]: Initializing Boogie Printer...
[2020-11-24 20:07:53,427 INFO  L276        PluginConnector]: Boogie Printer initialized
[2020-11-24 20:07:53,428 INFO  L185        PluginConnector]: Executing the observer BoogiePrinterObserver from plugin Boogie Printer for "KeepToken_0x85Eee30c52B0b379b046Fb0F85F4f3Dc3009aFEC_approve.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 24.11 08:07:53" (1/2) ...
[2020-11-24 20:07:53,428 INFO  L116   oogiePrinterObserver]: File already exists and will be overwritten: /tmp/boogiePrinter.bpl
[2020-11-24 20:07:53,428 INFO  L120   oogiePrinterObserver]: Writing to file /tmp/boogiePrinter.bpl
[2020-11-24 20:07:53,447 INFO  L185        PluginConnector]: Executing the observer BoogiePrinterObserver from plugin Boogie Printer for "Hardcoded edu.utexas.cs.utopia.specLang AST 24.11 08:07:53" (2/2) ...
[2020-11-24 20:07:53,447 INFO  L132        PluginConnector]: ------------------------ END Boogie Printer----------------------------
[2020-11-24 20:07:53,448 INFO  L113        PluginConnector]: ------------------------RCFGBuilder----------------------------
[2020-11-24 20:07:53,448 INFO  L271        PluginConnector]: Initializing RCFGBuilder...
[2020-11-24 20:07:53,448 INFO  L276        PluginConnector]: RCFGBuilder initialized
[2020-11-24 20:07:53,449 INFO  L185        PluginConnector]: Executing the observer RCFGBuilderObserver from plugin RCFGBuilder for "KeepToken_0x85Eee30c52B0b379b046Fb0F85F4f3Dc3009aFEC_approve.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 24.11 08:07:53" (1/2) ...
[2020-11-24 20:07:53,502 INFO  L130     BoogieDeclarations]: Found specification of procedure FreshRefGenerator__success
[2020-11-24 20:07:53,503 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath_NoBaseCtor__success
[2020-11-24 20:07:53,503 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath
[2020-11-24 20:07:53,503 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath
[2020-11-24 20:07:53,503 INFO  L130     BoogieDeclarations]: Found specification of procedure add~uint256~uint256_SafeMath__success
[2020-11-24 20:07:53,503 INFO  L130     BoogieDeclarations]: Found specification of procedure sub~uint256~uint256~string_SafeMath__success
[2020-11-24 20:07:53,503 INFO  L130     BoogieDeclarations]: Found specification of procedure mul~uint256~uint256_SafeMath__success
[2020-11-24 20:07:53,503 INFO  L130     BoogieDeclarations]: Found specification of procedure div~uint256~uint256~string_SafeMath__success
[2020-11-24 20:07:53,504 INFO  L130     BoogieDeclarations]: Found specification of procedure mod~uint256~uint256~string_SafeMath__success
[2020-11-24 20:07:53,504 INFO  L130     BoogieDeclarations]: Found specification of procedure Context_Context_NoBaseCtor__success
[2020-11-24 20:07:53,504 INFO  L130     BoogieDeclarations]: Found specification of procedure Context_Context
[2020-11-24 20:07:53,504 INFO  L138     BoogieDeclarations]: Found implementation of procedure Context_Context
[2020-11-24 20:07:53,504 INFO  L130     BoogieDeclarations]: Found specification of procedure _msgSender_Context__success
[2020-11-24 20:07:53,504 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20_NoBaseCtor__success
[2020-11-24 20:07:53,505 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20
[2020-11-24 20:07:53,505 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20
[2020-11-24 20:07:53,505 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_IERC20
[2020-11-24 20:07:53,505 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_IERC20
[2020-11-24 20:07:53,505 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_IERC20
[2020-11-24 20:07:53,506 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_IERC20
[2020-11-24 20:07:53,506 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_IERC20
[2020-11-24 20:07:53,506 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_IERC20
[2020-11-24 20:07:53,506 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20_NoBaseCtor__success
[2020-11-24 20:07:53,506 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20
[2020-11-24 20:07:53,506 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20
[2020-11-24 20:07:53,506 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_ERC20
[2020-11-24 20:07:53,506 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_ERC20
[2020-11-24 20:07:53,506 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_ERC20
[2020-11-24 20:07:53,506 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_ERC20
[2020-11-24 20:07:53,507 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_ERC20
[2020-11-24 20:07:53,507 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_ERC20
[2020-11-24 20:07:53,507 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_ERC20
[2020-11-24 20:07:53,507 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_ERC20
[2020-11-24 20:07:53,507 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_ERC20
[2020-11-24 20:07:53,507 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_ERC20
[2020-11-24 20:07:53,507 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_ERC20
[2020-11-24 20:07:53,507 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_ERC20
[2020-11-24 20:07:53,507 INFO  L130     BoogieDeclarations]: Found specification of procedure increaseAllowance~address~uint256_ERC20
[2020-11-24 20:07:53,507 INFO  L138     BoogieDeclarations]: Found implementation of procedure increaseAllowance~address~uint256_ERC20
[2020-11-24 20:07:53,507 INFO  L130     BoogieDeclarations]: Found specification of procedure decreaseAllowance~address~uint256_ERC20
[2020-11-24 20:07:53,508 INFO  L138     BoogieDeclarations]: Found implementation of procedure decreaseAllowance~address~uint256_ERC20
[2020-11-24 20:07:53,508 INFO  L130     BoogieDeclarations]: Found specification of procedure _transfer~address~address~uint256_ERC20__success
[2020-11-24 20:07:53,508 INFO  L130     BoogieDeclarations]: Found specification of procedure _mint~address~uint256_ERC20__success
[2020-11-24 20:07:53,508 INFO  L130     BoogieDeclarations]: Found specification of procedure _burn~address~uint256_ERC20__success
[2020-11-24 20:07:53,508 INFO  L130     BoogieDeclarations]: Found specification of procedure _approve~address~address~uint256_ERC20__success
[2020-11-24 20:07:53,508 INFO  L130     BoogieDeclarations]: Found specification of procedure _burnFrom~address~uint256_ERC20__success
[2020-11-24 20:07:53,508 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Detailed_ERC20Detailed_NoBaseCtor__success
[2020-11-24 20:07:53,508 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Detailed_ERC20Detailed
[2020-11-24 20:07:53,508 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Detailed_ERC20Detailed
[2020-11-24 20:07:53,508 INFO  L130     BoogieDeclarations]: Found specification of procedure name_ERC20Detailed
[2020-11-24 20:07:53,509 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_ERC20Detailed
[2020-11-24 20:07:53,509 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_ERC20Detailed
[2020-11-24 20:07:53,509 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_ERC20Detailed
[2020-11-24 20:07:53,509 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_ERC20Detailed
[2020-11-24 20:07:53,509 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_ERC20Detailed
[2020-11-24 20:07:53,509 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Burnable_ERC20Burnable_NoBaseCtor__success
[2020-11-24 20:07:53,509 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Burnable_ERC20Burnable
[2020-11-24 20:07:53,509 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Burnable_ERC20Burnable
[2020-11-24 20:07:53,509 INFO  L130     BoogieDeclarations]: Found specification of procedure burn~uint256_ERC20Burnable
[2020-11-24 20:07:53,510 INFO  L138     BoogieDeclarations]: Found implementation of procedure burn~uint256_ERC20Burnable
[2020-11-24 20:07:53,510 INFO  L130     BoogieDeclarations]: Found specification of procedure burnFrom~address~uint256_ERC20Burnable
[2020-11-24 20:07:53,510 INFO  L138     BoogieDeclarations]: Found implementation of procedure burnFrom~address~uint256_ERC20Burnable
[2020-11-24 20:07:53,510 INFO  L130     BoogieDeclarations]: Found specification of procedure tokenRecipient_tokenRecipient_NoBaseCtor__success
[2020-11-24 20:07:53,510 INFO  L130     BoogieDeclarations]: Found specification of procedure tokenRecipient_tokenRecipient
[2020-11-24 20:07:53,510 INFO  L138     BoogieDeclarations]: Found implementation of procedure tokenRecipient_tokenRecipient
[2020-11-24 20:07:53,510 INFO  L130     BoogieDeclarations]: Found specification of procedure receiveApproval~address~uint256~address~bytes_tokenRecipient
[2020-11-24 20:07:53,510 INFO  L130     BoogieDeclarations]: Found specification of procedure KeepToken_KeepToken_NoBaseCtor__success
[2020-11-24 20:07:53,510 INFO  L130     BoogieDeclarations]: Found specification of procedure KeepToken_KeepToken
[2020-11-24 20:07:53,511 INFO  L138     BoogieDeclarations]: Found implementation of procedure KeepToken_KeepToken
[2020-11-24 20:07:53,511 INFO  L130     BoogieDeclarations]: Found specification of procedure approveAndCall~address~uint256~bytes_KeepToken
[2020-11-24 20:07:53,511 INFO  L138     BoogieDeclarations]: Found implementation of procedure approveAndCall~address~uint256~bytes_KeepToken
[2020-11-24 20:07:53,511 INFO  L130     BoogieDeclarations]: Found specification of procedure NAME_KeepToken
[2020-11-24 20:07:53,511 INFO  L138     BoogieDeclarations]: Found implementation of procedure NAME_KeepToken
[2020-11-24 20:07:53,511 INFO  L130     BoogieDeclarations]: Found specification of procedure SYMBOL_KeepToken
[2020-11-24 20:07:53,511 INFO  L138     BoogieDeclarations]: Found implementation of procedure SYMBOL_KeepToken
[2020-11-24 20:07:53,511 INFO  L130     BoogieDeclarations]: Found specification of procedure DECIMALS_KeepToken
[2020-11-24 20:07:53,511 INFO  L138     BoogieDeclarations]: Found implementation of procedure DECIMALS_KeepToken
[2020-11-24 20:07:53,511 INFO  L130     BoogieDeclarations]: Found specification of procedure INITIAL_SUPPLY_KeepToken
[2020-11-24 20:07:53,511 INFO  L138     BoogieDeclarations]: Found implementation of procedure INITIAL_SUPPLY_KeepToken
[2020-11-24 20:07:53,512 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackDispatch__success
[2020-11-24 20:07:53,512 INFO  L130     BoogieDeclarations]: Found specification of procedure Fallback_UnknownType__success
[2020-11-24 20:07:53,512 INFO  L130     BoogieDeclarations]: Found specification of procedure send__success
[2020-11-24 20:07:53,512 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_SafeMath
[2020-11-24 20:07:53,512 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_SafeMath
[2020-11-24 20:07:53,512 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_Context
[2020-11-24 20:07:53,512 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_Context
[2020-11-24 20:07:53,512 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_IERC20
[2020-11-24 20:07:53,512 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_IERC20
[2020-11-24 20:07:53,512 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_ERC20
[2020-11-24 20:07:53,512 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_ERC20
[2020-11-24 20:07:53,512 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_ERC20Detailed
[2020-11-24 20:07:53,513 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_ERC20Detailed
[2020-11-24 20:07:53,513 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_ERC20Burnable
[2020-11-24 20:07:53,513 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_ERC20Burnable
[2020-11-24 20:07:53,513 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_tokenRecipient
[2020-11-24 20:07:53,513 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_tokenRecipient
[2020-11-24 20:07:53,513 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_KeepToken
[2020-11-24 20:07:53,513 INFO  L130     BoogieDeclarations]: Found specification of procedure main
[2020-11-24 20:07:53,513 INFO  L130     BoogieDeclarations]: Found specification of procedure FreshRefGenerator__fail
[2020-11-24 20:07:53,513 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath_NoBaseCtor__fail
[2020-11-24 20:07:53,513 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath__success
[2020-11-24 20:07:53,513 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath__fail
[2020-11-24 20:07:53,513 INFO  L130     BoogieDeclarations]: Found specification of procedure add~uint256~uint256_SafeMath__fail
[2020-11-24 20:07:53,513 INFO  L130     BoogieDeclarations]: Found specification of procedure sub~uint256~uint256~string_SafeMath__fail
[2020-11-24 20:07:53,514 INFO  L130     BoogieDeclarations]: Found specification of procedure mul~uint256~uint256_SafeMath__fail
[2020-11-24 20:07:53,514 INFO  L130     BoogieDeclarations]: Found specification of procedure div~uint256~uint256~string_SafeMath__fail
[2020-11-24 20:07:53,514 INFO  L130     BoogieDeclarations]: Found specification of procedure mod~uint256~uint256~string_SafeMath__fail
[2020-11-24 20:07:53,514 INFO  L130     BoogieDeclarations]: Found specification of procedure Context_Context_NoBaseCtor__fail
[2020-11-24 20:07:53,514 INFO  L130     BoogieDeclarations]: Found specification of procedure Context_Context__success
[2020-11-24 20:07:53,514 INFO  L130     BoogieDeclarations]: Found specification of procedure Context_Context__fail
[2020-11-24 20:07:53,514 INFO  L130     BoogieDeclarations]: Found specification of procedure _msgSender_Context__fail
[2020-11-24 20:07:53,514 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20_NoBaseCtor__fail
[2020-11-24 20:07:53,514 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20__success
[2020-11-24 20:07:53,514 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20__fail
[2020-11-24 20:07:53,514 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20_NoBaseCtor__fail
[2020-11-24 20:07:53,514 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20__success
[2020-11-24 20:07:53,514 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20__fail
[2020-11-24 20:07:53,515 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_ERC20__success
[2020-11-24 20:07:53,515 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_ERC20__fail
[2020-11-24 20:07:53,515 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_ERC20__success
[2020-11-24 20:07:53,515 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_ERC20__fail
[2020-11-24 20:07:53,515 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_ERC20__success
[2020-11-24 20:07:53,515 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_ERC20__fail
[2020-11-24 20:07:53,515 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_ERC20__success
[2020-11-24 20:07:53,515 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_ERC20__fail
[2020-11-24 20:07:53,515 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_ERC20__success
[2020-11-24 20:07:53,515 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_ERC20__fail
[2020-11-24 20:07:53,515 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_ERC20__success
[2020-11-24 20:07:53,516 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_ERC20__fail
[2020-11-24 20:07:53,516 INFO  L130     BoogieDeclarations]: Found specification of procedure increaseAllowance~address~uint256_ERC20__success
[2020-11-24 20:07:53,516 INFO  L130     BoogieDeclarations]: Found specification of procedure increaseAllowance~address~uint256_ERC20__fail
[2020-11-24 20:07:53,516 INFO  L130     BoogieDeclarations]: Found specification of procedure decreaseAllowance~address~uint256_ERC20__success
[2020-11-24 20:07:53,516 INFO  L130     BoogieDeclarations]: Found specification of procedure decreaseAllowance~address~uint256_ERC20__fail
[2020-11-24 20:07:53,516 INFO  L130     BoogieDeclarations]: Found specification of procedure _transfer~address~address~uint256_ERC20__fail
[2020-11-24 20:07:53,516 INFO  L130     BoogieDeclarations]: Found specification of procedure _mint~address~uint256_ERC20__fail
[2020-11-24 20:07:53,516 INFO  L130     BoogieDeclarations]: Found specification of procedure _burn~address~uint256_ERC20__fail
[2020-11-24 20:07:53,516 INFO  L130     BoogieDeclarations]: Found specification of procedure _approve~address~address~uint256_ERC20__fail
[2020-11-24 20:07:53,516 INFO  L130     BoogieDeclarations]: Found specification of procedure _burnFrom~address~uint256_ERC20__fail
[2020-11-24 20:07:53,517 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Detailed_ERC20Detailed_NoBaseCtor__fail
[2020-11-24 20:07:53,517 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Detailed_ERC20Detailed__success
[2020-11-24 20:07:53,517 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Detailed_ERC20Detailed__fail
[2020-11-24 20:07:53,517 INFO  L130     BoogieDeclarations]: Found specification of procedure name_ERC20Detailed__success
[2020-11-24 20:07:53,517 INFO  L130     BoogieDeclarations]: Found specification of procedure name_ERC20Detailed__fail
[2020-11-24 20:07:53,517 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_ERC20Detailed__success
[2020-11-24 20:07:53,517 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_ERC20Detailed__fail
[2020-11-24 20:07:53,517 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_ERC20Detailed__success
[2020-11-24 20:07:53,517 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_ERC20Detailed__fail
[2020-11-24 20:07:53,517 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Burnable_ERC20Burnable_NoBaseCtor__fail
[2020-11-24 20:07:53,518 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Burnable_ERC20Burnable__success
[2020-11-24 20:07:53,518 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Burnable_ERC20Burnable__fail
[2020-11-24 20:07:53,518 INFO  L130     BoogieDeclarations]: Found specification of procedure burn~uint256_ERC20Burnable__success
[2020-11-24 20:07:53,518 INFO  L130     BoogieDeclarations]: Found specification of procedure burn~uint256_ERC20Burnable__fail
[2020-11-24 20:07:53,518 INFO  L130     BoogieDeclarations]: Found specification of procedure burnFrom~address~uint256_ERC20Burnable__success
[2020-11-24 20:07:53,518 INFO  L130     BoogieDeclarations]: Found specification of procedure burnFrom~address~uint256_ERC20Burnable__fail
[2020-11-24 20:07:53,518 INFO  L130     BoogieDeclarations]: Found specification of procedure tokenRecipient_tokenRecipient_NoBaseCtor__fail
[2020-11-24 20:07:53,518 INFO  L130     BoogieDeclarations]: Found specification of procedure tokenRecipient_tokenRecipient__success
[2020-11-24 20:07:53,518 INFO  L130     BoogieDeclarations]: Found specification of procedure tokenRecipient_tokenRecipient__fail
[2020-11-24 20:07:53,519 INFO  L130     BoogieDeclarations]: Found specification of procedure KeepToken_KeepToken_NoBaseCtor__fail
[2020-11-24 20:07:53,519 INFO  L130     BoogieDeclarations]: Found specification of procedure KeepToken_KeepToken__success
[2020-11-24 20:07:53,519 INFO  L130     BoogieDeclarations]: Found specification of procedure KeepToken_KeepToken__fail
[2020-11-24 20:07:53,519 INFO  L130     BoogieDeclarations]: Found specification of procedure approveAndCall~address~uint256~bytes_KeepToken__success
[2020-11-24 20:07:53,519 INFO  L130     BoogieDeclarations]: Found specification of procedure approveAndCall~address~uint256~bytes_KeepToken__fail
[2020-11-24 20:07:53,519 INFO  L130     BoogieDeclarations]: Found specification of procedure NAME_KeepToken__success
[2020-11-24 20:07:53,519 INFO  L130     BoogieDeclarations]: Found specification of procedure NAME_KeepToken__fail
[2020-11-24 20:07:53,519 INFO  L130     BoogieDeclarations]: Found specification of procedure SYMBOL_KeepToken__success
[2020-11-24 20:07:53,519 INFO  L130     BoogieDeclarations]: Found specification of procedure SYMBOL_KeepToken__fail
[2020-11-24 20:07:53,519 INFO  L130     BoogieDeclarations]: Found specification of procedure DECIMALS_KeepToken__success
[2020-11-24 20:07:53,519 INFO  L130     BoogieDeclarations]: Found specification of procedure DECIMALS_KeepToken__fail
[2020-11-24 20:07:53,520 INFO  L130     BoogieDeclarations]: Found specification of procedure INITIAL_SUPPLY_KeepToken__success
[2020-11-24 20:07:53,520 INFO  L130     BoogieDeclarations]: Found specification of procedure INITIAL_SUPPLY_KeepToken__fail
[2020-11-24 20:07:53,520 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackDispatch__fail
[2020-11-24 20:07:53,520 INFO  L130     BoogieDeclarations]: Found specification of procedure Fallback_UnknownType__fail
[2020-11-24 20:07:53,520 INFO  L130     BoogieDeclarations]: Found specification of procedure send__fail
[2020-11-24 20:07:53,520 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreshRefGenerator__fail
[2020-11-24 20:07:53,520 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreshRefGenerator__success
[2020-11-24 20:07:53,520 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath_NoBaseCtor__fail
[2020-11-24 20:07:53,520 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath_NoBaseCtor__success
[2020-11-24 20:07:53,520 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath__fail
[2020-11-24 20:07:53,520 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath__success
[2020-11-24 20:07:53,521 INFO  L138     BoogieDeclarations]: Found implementation of procedure add~uint256~uint256_SafeMath__fail
[2020-11-24 20:07:53,521 INFO  L138     BoogieDeclarations]: Found implementation of procedure add~uint256~uint256_SafeMath__success
[2020-11-24 20:07:53,521 INFO  L138     BoogieDeclarations]: Found implementation of procedure sub~uint256~uint256~string_SafeMath__fail
[2020-11-24 20:07:53,521 INFO  L138     BoogieDeclarations]: Found implementation of procedure sub~uint256~uint256~string_SafeMath__success
[2020-11-24 20:07:53,521 INFO  L138     BoogieDeclarations]: Found implementation of procedure mul~uint256~uint256_SafeMath__fail
[2020-11-24 20:07:53,521 INFO  L138     BoogieDeclarations]: Found implementation of procedure mul~uint256~uint256_SafeMath__success
[2020-11-24 20:07:53,521 INFO  L138     BoogieDeclarations]: Found implementation of procedure div~uint256~uint256~string_SafeMath__fail
[2020-11-24 20:07:53,521 INFO  L138     BoogieDeclarations]: Found implementation of procedure div~uint256~uint256~string_SafeMath__success
[2020-11-24 20:07:53,521 INFO  L138     BoogieDeclarations]: Found implementation of procedure mod~uint256~uint256~string_SafeMath__fail
[2020-11-24 20:07:53,521 INFO  L138     BoogieDeclarations]: Found implementation of procedure mod~uint256~uint256~string_SafeMath__success
[2020-11-24 20:07:53,521 INFO  L138     BoogieDeclarations]: Found implementation of procedure Context_Context_NoBaseCtor__fail
[2020-11-24 20:07:53,521 INFO  L138     BoogieDeclarations]: Found implementation of procedure Context_Context_NoBaseCtor__success
[2020-11-24 20:07:53,522 INFO  L138     BoogieDeclarations]: Found implementation of procedure Context_Context__fail
[2020-11-24 20:07:53,522 INFO  L138     BoogieDeclarations]: Found implementation of procedure Context_Context__success
[2020-11-24 20:07:53,522 INFO  L138     BoogieDeclarations]: Found implementation of procedure _msgSender_Context__fail
[2020-11-24 20:07:53,522 INFO  L138     BoogieDeclarations]: Found implementation of procedure _msgSender_Context__success
[2020-11-24 20:07:53,522 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20_NoBaseCtor__fail
[2020-11-24 20:07:53,522 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20_NoBaseCtor__success
[2020-11-24 20:07:53,522 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20__fail
[2020-11-24 20:07:53,522 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20__success
[2020-11-24 20:07:53,522 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20_NoBaseCtor__fail
[2020-11-24 20:07:53,522 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20_NoBaseCtor__success
[2020-11-24 20:07:53,522 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20__fail
[2020-11-24 20:07:53,522 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20__success
[2020-11-24 20:07:53,523 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_ERC20__fail
[2020-11-24 20:07:53,523 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_ERC20__success
[2020-11-24 20:07:53,523 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_ERC20__fail
[2020-11-24 20:07:53,523 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_ERC20__success
[2020-11-24 20:07:53,523 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_ERC20__fail
[2020-11-24 20:07:53,523 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_ERC20__success
[2020-11-24 20:07:53,523 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_ERC20__fail
[2020-11-24 20:07:53,523 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_ERC20__success
[2020-11-24 20:07:53,523 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_ERC20__fail
[2020-11-24 20:07:53,523 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_ERC20__success
[2020-11-24 20:07:53,523 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_ERC20__fail
[2020-11-24 20:07:53,524 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_ERC20__success
[2020-11-24 20:07:53,524 INFO  L138     BoogieDeclarations]: Found implementation of procedure increaseAllowance~address~uint256_ERC20__fail
[2020-11-24 20:07:53,524 INFO  L138     BoogieDeclarations]: Found implementation of procedure increaseAllowance~address~uint256_ERC20__success
[2020-11-24 20:07:53,524 INFO  L138     BoogieDeclarations]: Found implementation of procedure decreaseAllowance~address~uint256_ERC20__fail
[2020-11-24 20:07:53,524 INFO  L138     BoogieDeclarations]: Found implementation of procedure decreaseAllowance~address~uint256_ERC20__success
[2020-11-24 20:07:53,524 INFO  L138     BoogieDeclarations]: Found implementation of procedure _transfer~address~address~uint256_ERC20__fail
[2020-11-24 20:07:53,524 INFO  L138     BoogieDeclarations]: Found implementation of procedure _transfer~address~address~uint256_ERC20__success
[2020-11-24 20:07:53,524 INFO  L138     BoogieDeclarations]: Found implementation of procedure _mint~address~uint256_ERC20__fail
[2020-11-24 20:07:53,524 INFO  L138     BoogieDeclarations]: Found implementation of procedure _mint~address~uint256_ERC20__success
[2020-11-24 20:07:53,524 INFO  L138     BoogieDeclarations]: Found implementation of procedure _burn~address~uint256_ERC20__fail
[2020-11-24 20:07:53,524 INFO  L138     BoogieDeclarations]: Found implementation of procedure _burn~address~uint256_ERC20__success
[2020-11-24 20:07:53,525 INFO  L138     BoogieDeclarations]: Found implementation of procedure _approve~address~address~uint256_ERC20__fail
[2020-11-24 20:07:53,525 INFO  L138     BoogieDeclarations]: Found implementation of procedure _approve~address~address~uint256_ERC20__success
[2020-11-24 20:07:53,525 INFO  L138     BoogieDeclarations]: Found implementation of procedure _burnFrom~address~uint256_ERC20__fail
[2020-11-24 20:07:53,525 INFO  L138     BoogieDeclarations]: Found implementation of procedure _burnFrom~address~uint256_ERC20__success
[2020-11-24 20:07:53,525 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Detailed_ERC20Detailed_NoBaseCtor__fail
[2020-11-24 20:07:53,525 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Detailed_ERC20Detailed_NoBaseCtor__success
[2020-11-24 20:07:53,525 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Detailed_ERC20Detailed__fail
[2020-11-24 20:07:53,525 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Detailed_ERC20Detailed__success
[2020-11-24 20:07:53,525 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_ERC20Detailed__fail
[2020-11-24 20:07:53,525 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_ERC20Detailed__success
[2020-11-24 20:07:53,525 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_ERC20Detailed__fail
[2020-11-24 20:07:53,526 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_ERC20Detailed__success
[2020-11-24 20:07:53,526 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_ERC20Detailed__fail
[2020-11-24 20:07:53,526 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_ERC20Detailed__success
[2020-11-24 20:07:53,526 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Burnable_ERC20Burnable_NoBaseCtor__fail
[2020-11-24 20:07:53,526 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Burnable_ERC20Burnable_NoBaseCtor__success
[2020-11-24 20:07:53,526 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Burnable_ERC20Burnable__fail
[2020-11-24 20:07:53,526 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Burnable_ERC20Burnable__success
[2020-11-24 20:07:53,526 INFO  L138     BoogieDeclarations]: Found implementation of procedure burn~uint256_ERC20Burnable__fail
[2020-11-24 20:07:53,526 INFO  L138     BoogieDeclarations]: Found implementation of procedure burn~uint256_ERC20Burnable__success
[2020-11-24 20:07:53,526 INFO  L138     BoogieDeclarations]: Found implementation of procedure burnFrom~address~uint256_ERC20Burnable__fail
[2020-11-24 20:07:53,526 INFO  L138     BoogieDeclarations]: Found implementation of procedure burnFrom~address~uint256_ERC20Burnable__success
[2020-11-24 20:07:53,526 INFO  L138     BoogieDeclarations]: Found implementation of procedure tokenRecipient_tokenRecipient_NoBaseCtor__fail
[2020-11-24 20:07:53,527 INFO  L138     BoogieDeclarations]: Found implementation of procedure tokenRecipient_tokenRecipient_NoBaseCtor__success
[2020-11-24 20:07:53,527 INFO  L138     BoogieDeclarations]: Found implementation of procedure tokenRecipient_tokenRecipient__fail
[2020-11-24 20:07:53,527 INFO  L138     BoogieDeclarations]: Found implementation of procedure tokenRecipient_tokenRecipient__success
[2020-11-24 20:07:53,527 INFO  L138     BoogieDeclarations]: Found implementation of procedure KeepToken_KeepToken_NoBaseCtor__fail
[2020-11-24 20:07:53,527 INFO  L138     BoogieDeclarations]: Found implementation of procedure KeepToken_KeepToken_NoBaseCtor__success
[2020-11-24 20:07:53,527 INFO  L138     BoogieDeclarations]: Found implementation of procedure KeepToken_KeepToken__fail
[2020-11-24 20:07:53,527 INFO  L138     BoogieDeclarations]: Found implementation of procedure KeepToken_KeepToken__success
[2020-11-24 20:07:53,527 INFO  L138     BoogieDeclarations]: Found implementation of procedure approveAndCall~address~uint256~bytes_KeepToken__fail
[2020-11-24 20:07:53,527 INFO  L138     BoogieDeclarations]: Found implementation of procedure approveAndCall~address~uint256~bytes_KeepToken__success
[2020-11-24 20:07:53,527 INFO  L138     BoogieDeclarations]: Found implementation of procedure NAME_KeepToken__fail
[2020-11-24 20:07:53,527 INFO  L138     BoogieDeclarations]: Found implementation of procedure NAME_KeepToken__success
[2020-11-24 20:07:53,527 INFO  L138     BoogieDeclarations]: Found implementation of procedure SYMBOL_KeepToken__fail
[2020-11-24 20:07:53,528 INFO  L138     BoogieDeclarations]: Found implementation of procedure SYMBOL_KeepToken__success
[2020-11-24 20:07:53,528 INFO  L138     BoogieDeclarations]: Found implementation of procedure DECIMALS_KeepToken__fail
[2020-11-24 20:07:53,528 INFO  L138     BoogieDeclarations]: Found implementation of procedure DECIMALS_KeepToken__success
[2020-11-24 20:07:53,528 INFO  L138     BoogieDeclarations]: Found implementation of procedure INITIAL_SUPPLY_KeepToken__fail
[2020-11-24 20:07:53,528 INFO  L138     BoogieDeclarations]: Found implementation of procedure INITIAL_SUPPLY_KeepToken__success
[2020-11-24 20:07:53,528 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackDispatch__fail
[2020-11-24 20:07:53,528 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackDispatch__success
[2020-11-24 20:07:53,528 INFO  L138     BoogieDeclarations]: Found implementation of procedure Fallback_UnknownType__fail
[2020-11-24 20:07:53,528 INFO  L138     BoogieDeclarations]: Found implementation of procedure Fallback_UnknownType__success
[2020-11-24 20:07:53,528 INFO  L138     BoogieDeclarations]: Found implementation of procedure send__fail
[2020-11-24 20:07:53,528 INFO  L138     BoogieDeclarations]: Found implementation of procedure send__success
[2020-11-24 20:07:53,529 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_SafeMath
[2020-11-24 20:07:53,529 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_SafeMath
[2020-11-24 20:07:53,529 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_Context
[2020-11-24 20:07:53,529 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_Context
[2020-11-24 20:07:53,529 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_IERC20
[2020-11-24 20:07:53,529 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_IERC20
[2020-11-24 20:07:53,530 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_ERC20
[2020-11-24 20:07:53,530 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_ERC20
[2020-11-24 20:07:53,530 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_ERC20Detailed
[2020-11-24 20:07:53,530 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_ERC20Detailed
[2020-11-24 20:07:53,530 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_ERC20Burnable
[2020-11-24 20:07:53,530 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_ERC20Burnable
[2020-11-24 20:07:53,530 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_tokenRecipient
[2020-11-24 20:07:53,530 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_tokenRecipient
[2020-11-24 20:07:53,530 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_KeepToken
[2020-11-24 20:07:53,530 INFO  L138     BoogieDeclarations]: Found implementation of procedure main
[2020-11-24 20:07:53,530 INFO  L130     BoogieDeclarations]: Found specification of procedure ULTIMATE.start
[2020-11-24 20:07:53,531 INFO  L138     BoogieDeclarations]: Found implementation of procedure ULTIMATE.start
[2020-11-24 20:07:53,857 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-24 20:07:53,858 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-24 20:07:53,858 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-24 20:07:54,069 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-24 20:07:54,413 INFO  L281             CfgBuilder]: Using the 1 location(s) as analysis (start of procedure ULTIMATE.start)
[2020-11-24 20:07:54,413 INFO  L286             CfgBuilder]: Removed 8 assue(true) statements.
[2020-11-24 20:07:54,415 INFO  L202        PluginConnector]: Adding new model KeepToken_0x85Eee30c52B0b379b046Fb0F85F4f3Dc3009aFEC_approve.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 24.11 08:07:54 BoogieIcfgContainer
[2020-11-24 20:07:54,416 INFO  L185        PluginConnector]: Executing the observer RCFGBuilderObserver from plugin RCFGBuilder for "Hardcoded edu.utexas.cs.utopia.specLang AST 24.11 08:07:53" (2/2) ...
[2020-11-24 20:07:54,416 INFO  L85     RCFGBuilderObserver]: No WrapperNode. Let Ultimate process with next node
[2020-11-24 20:07:54,416 INFO  L205        PluginConnector]: Invalid model from RCFGBuilder for observer de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder.RCFGBuilderObserver@61573495 and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 24.11 08:07:54, skipping insertion in model container
[2020-11-24 20:07:54,416 INFO  L132        PluginConnector]: ------------------------ END RCFGBuilder----------------------------
[2020-11-24 20:07:54,416 INFO  L113        PluginConnector]: ------------------------UtopiaLTL2Aut----------------------------
[2020-11-24 20:07:54,416 INFO  L271        PluginConnector]: Initializing UtopiaLTL2Aut...
[2020-11-24 20:07:54,418 INFO  L276        PluginConnector]: UtopiaLTL2Aut initialized
[2020-11-24 20:07:54,418 INFO  L185        PluginConnector]: Executing the observer UtopiaLTL2AutObserver from plugin UtopiaLTL2Aut for "KeepToken_0x85Eee30c52B0b379b046Fb0F85F4f3Dc3009aFEC_approve.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 24.11 08:07:53" (1/3) ...
[2020-11-24 20:07:54,418 INFO  L205        PluginConnector]: Invalid model from UtopiaLTL2Aut for observer edu.utexas.cs.utopia.ltl2aut.UtopiaLTL2AutObserver@7f81543a and model type Hardcoded edu.utexas.cs.utopia.ltl2aut AST 24.11 08:07:54, skipping insertion in model container
[2020-11-24 20:07:54,418 INFO  L185        PluginConnector]: Executing the observer UtopiaLTL2AutObserver from plugin UtopiaLTL2Aut for "Hardcoded edu.utexas.cs.utopia.specLang AST 24.11 08:07:53" (2/3) ...
No working directory specified, using /mnt/data0/jon/SmartPulseTool/ltl2ba
Starting monitored process 1 with /mnt/data0/jon/SmartPulseTool/ltl2ba -f ! ( ( [] ( a -> ( <>b ) ) ) )  (exit command is null, workingDir is null)
[2020-11-24 20:07:54,453 INFO  L202        PluginConnector]: Adding new model Hardcoded edu.utexas.cs.utopia.ltl2aut AST 24.11 08:07:54 NWAContainer
[2020-11-24 20:07:54,453 INFO  L132        PluginConnector]: ------------------------ END UtopiaLTL2Aut----------------------------
[2020-11-24 20:07:54,453 INFO  L113        PluginConnector]: ------------------------BÃ¼chi Program Product----------------------------
[2020-11-24 20:07:54,453 INFO  L271        PluginConnector]: Initializing BÃ¼chi Program Product...
[2020-11-24 20:07:54,454 INFO  L276        PluginConnector]: BÃ¼chi Program Product initialized
[2020-11-24 20:07:54,455 INFO  L185        PluginConnector]: Executing the observer BuchiProductObserver from plugin BÃ¼chi Program Product for "KeepToken_0x85Eee30c52B0b379b046Fb0F85F4f3Dc3009aFEC_approve.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 24.11 08:07:54" (3/4) ...
[2020-11-24 20:07:54,455 INFO  L205        PluginConnector]: Invalid model from BÃ¼chi Program Product for observer de.uni_freiburg.informatik.ultimate.buchiprogramproduct.BuchiProductObserver@57415cd2 and model type LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 24.11 08:07:54, skipping insertion in model container
[2020-11-24 20:07:54,455 INFO  L185        PluginConnector]: Executing the observer BuchiProductObserver from plugin BÃ¼chi Program Product for "Hardcoded edu.utexas.cs.utopia.ltl2aut AST 24.11 08:07:54" (4/4) ...
[2020-11-24 20:07:54,458 INFO  L104   BuchiProductObserver]: Initial property automaton 2 locations, 3 edges
[2020-11-24 20:07:54,463 INFO  L110   BuchiProductObserver]: Initial RCFG 2280 locations, 3330 edges
[2020-11-24 20:07:54,463 INFO  L93    BuchiProductObserver]: Beginning generation of product automaton
[2020-11-24 20:07:54,475 INFO  L136       ProductGenerator]: The program has no step specification, so we assume maximum atomicity
[2020-11-24 20:07:56,028 INFO  L97    BuchiProductObserver]: Finished generation of product automaton successfully
[2020-11-24 20:07:56,036 INFO  L110   BuchiProductObserver]: BuchiProgram size 5864 locations, 10885 edges
[2020-11-24 20:07:56,036 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 24.11 08:07:56 BoogieIcfgContainer
[2020-11-24 20:07:56,036 INFO  L132        PluginConnector]: ------------------------ END BÃ¼chi Program Product----------------------------
[2020-11-24 20:07:56,037 INFO  L113        PluginConnector]: ------------------------BlockEncodingV2----------------------------
[2020-11-24 20:07:56,037 INFO  L271        PluginConnector]: Initializing BlockEncodingV2...
[2020-11-24 20:07:56,038 INFO  L276        PluginConnector]: BlockEncodingV2 initialized
[2020-11-24 20:07:56,038 INFO  L185        PluginConnector]: Executing the observer BlockEncodingObserver from plugin BlockEncodingV2 for "LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 24.11 08:07:56" (1/1) ...
[2020-11-24 20:07:56,147 INFO  L313           BlockEncoder]: Initial Icfg 5864 locations, 10885 edges
[2020-11-24 20:07:56,148 INFO  L258           BlockEncoder]: Using Remove infeasible edges
[2020-11-24 20:07:56,148 INFO  L270           BlockEncoder]: Using Minimize states even if more edges are added than removed.=true
[2020-11-24 20:07:56,148 INFO  L296           BlockEncoder]: Using Remove sink states
[2020-11-24 20:07:56,149 INFO  L171           BlockEncoder]: Using Apply optimizations until nothing changes=true
[2020-11-24 20:07:56,162 INFO  L70    emoveInfeasibleEdges]: Removed 204 edges and 19 locations because of local infeasibility
[2020-11-24 20:07:56,179 INFO  L70        RemoveSinkStates]: Removed 140 edges and 93 locations by removing sink states
[2020-11-24 20:07:56,191 INFO  L70    emoveInfeasibleEdges]: Removed 0 edges and 0 locations because of local infeasibility
[2020-11-24 20:07:56,194 INFO  L70        RemoveSinkStates]: Removed 0 edges and 0 locations by removing sink states
[2020-11-24 20:07:56,197 INFO  L237           BlockEncoder]: Using Create parallel compositions if possible
[2020-11-24 20:07:56,198 INFO  L66        ParallelComposer]: Creating parallel compositions
[2020-11-24 20:07:56,200 INFO  L313           BlockEncoder]: Encoded RCFG 5728 locations, 10506 edges
[2020-11-24 20:07:56,201 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.blockencoding CFG 24.11 08:07:56 BasicIcfg
[2020-11-24 20:07:56,201 INFO  L132        PluginConnector]: ------------------------ END BlockEncodingV2----------------------------
[2020-11-24 20:07:56,201 INFO  L113        PluginConnector]: ------------------------BuchiAutomizer----------------------------
[2020-11-24 20:07:56,201 INFO  L271        PluginConnector]: Initializing BuchiAutomizer...
[2020-11-24 20:07:56,203 INFO  L276        PluginConnector]: BuchiAutomizer initialized
[2020-11-24 20:07:56,203 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-24 20:07:56,203 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "KeepToken_0x85Eee30c52B0b379b046Fb0F85F4f3Dc3009aFEC_approve.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 24.11 08:07:53" (1/6) ...
[2020-11-24 20:07:56,204 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@3143fe6a and model type KeepToken_0x85Eee30c52B0b379b046Fb0F85F4f3Dc3009aFEC_approve.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 24.11 08:07:56, skipping insertion in model container
[2020-11-24 20:07:56,204 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-24 20:07:56,205 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Hardcoded edu.utexas.cs.utopia.specLang AST 24.11 08:07:53" (2/6) ...
[2020-11-24 20:07:56,205 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@3143fe6a and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 24.11 08:07:56, skipping insertion in model container
[2020-11-24 20:07:56,205 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-24 20:07:56,206 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "KeepToken_0x85Eee30c52B0b379b046Fb0F85F4f3Dc3009aFEC_approve.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 24.11 08:07:54" (3/6) ...
[2020-11-24 20:07:56,206 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@3143fe6a and model type KeepToken_0x85Eee30c52B0b379b046Fb0F85F4f3Dc3009aFEC_approve.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer CFG 24.11 08:07:56, skipping insertion in model container
[2020-11-24 20:07:56,206 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-24 20:07:56,206 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Hardcoded edu.utexas.cs.utopia.ltl2aut AST 24.11 08:07:54" (4/6) ...
[2020-11-24 20:07:56,206 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@3143fe6a and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 24.11 08:07:56, skipping insertion in model container
[2020-11-24 20:07:56,206 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-24 20:07:56,206 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 24.11 08:07:56" (5/6) ...
[2020-11-24 20:07:56,206 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@3143fe6a and model type LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer OTHER 24.11 08:07:56, skipping insertion in model container
[2020-11-24 20:07:56,207 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-24 20:07:56,207 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.blockencoding CFG 24.11 08:07:56" (6/6) ...
[2020-11-24 20:07:56,207 INFO  L404   chiAutomizerObserver]: Analyzing ICFG KeepToken_0x85Eee30c52B0b379b046Fb0F85F4f3Dc3009aFEC_approve.bpl_BEv2
[2020-11-24 20:07:56,241 INFO  L133   ementStrategyFactory]: Using default assertion order modulation
[2020-11-24 20:07:56,242 INFO  L377         BuchiCegarLoop]: Interprodecural is true
[2020-11-24 20:07:56,242 INFO  L378         BuchiCegarLoop]: Hoare is false
[2020-11-24 20:07:56,242 INFO  L379         BuchiCegarLoop]: Compute interpolants for Craig_TreeInterpolation
[2020-11-24 20:07:56,242 INFO  L380         BuchiCegarLoop]: Backedges is STRAIGHT_LINE
[2020-11-24 20:07:56,242 INFO  L381         BuchiCegarLoop]: Determinization is PREDICATE_ABSTRACTION
[2020-11-24 20:07:56,242 INFO  L382         BuchiCegarLoop]: Difference is false
[2020-11-24 20:07:56,242 INFO  L383         BuchiCegarLoop]: Minimize is MINIMIZE_SEVPA
[2020-11-24 20:07:56,242 INFO  L386         BuchiCegarLoop]: ======== Iteration 0==of CEGAR loop == BuchiCegarLoop========
[2020-11-24 20:07:56,279 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 5728 states.
[2020-11-24 20:07:56,338 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-24 20:07:56,338 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-24 20:07:56,338 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-24 20:07:56,345 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-24 20:07:56,345 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-24 20:07:56,345 INFO  L445         BuchiCegarLoop]: ======== Iteration 1============
[2020-11-24 20:07:56,345 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 5728 states.
[2020-11-24 20:07:56,369 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-24 20:07:56,370 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-24 20:07:56,370 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-24 20:07:56,371 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-24 20:07:56,371 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_approve_ERC200 := false;
[L3]                 call_approve_ERC200 := false;
[L3]     CALL        call main();
[L3]                 havoc p2;
[L3]                 havoc p1;
[L6169]              assume null == 0;
[L6170]  CALL        call this := FreshRefGenerator__success();
[L2373]              havoc newRef;
[L2374]              assume Alloc[newRef] == false;
[L2375]              Alloc[newRef] := true;
[L2376]              assume newRef != null;
[L6170]  RET         call this := FreshRefGenerator__success();
[L6171]              assume now >= 0;
[L6172]              assume DType[this] == KeepToken;
[L6173]              assume msgvalue_MSG == 0;
[L6174]              gas := gas - 53000;
[L6175]  CALL        call KeepToken_KeepToken(this, msgsender_MSG, msgvalue_MSG);
[L1369]              havoc __exception;
[L1370]              revert := false;
[L1371]  COND FALSE  !(__exception)
[L1396]  CALL        call KeepToken_KeepToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4025]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2561]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2546]              assume msgsender_MSG != null;
[L2547]              Balance[this] := 0;
[L2561]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2562]  COND FALSE  !(revert)
[L4025]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4026]  COND TRUE   revert
[L1396]  RET         call KeepToken_KeepToken__success(this, msgsender_MSG, msgvalue_MSG);
[L1397]              assume !revert && gas >= 0;
[L6175]  RET         call KeepToken_KeepToken(this, msgsender_MSG, msgvalue_MSG);
[L6176]              assume !revert && gas >= 0;

Loop:
[L6179]  CALL        call CorralChoice_KeepToken(this);
[L5987]              havoc msgsender_MSG;
[L5988]              havoc msgvalue_MSG;
[L5989]              havoc choice;
[L5990]              havoc __ret_0_totalSupply;
[L5991]              havoc account_s258;
[L5992]              havoc __ret_0_balanceOf;
[L5993]              havoc recipient_s277;
[L5994]              havoc amount_s277;
[L5995]              havoc __ret_0_transfer;
[L5996]              havoc owner_s293;
[L5997]              havoc spender_s293;
[L5998]              havoc __ret_0_allowance;
[L5999]              havoc spender_s312;
[L6000]              havoc amount_s312;
[L6001]              havoc __ret_0_approve;
[L6002]              havoc sender_s348;
[L6003]              havoc recipient_s348;
[L6004]              havoc amount_s348;
[L6005]              havoc __ret_0_transferFrom;
[L6006]              havoc spender_s375;
[L6007]              havoc addedValue_s375;
[L6008]              havoc __ret_0_increaseAllowance;
[L6009]              havoc spender_s403;
[L6010]              havoc subtractedValue_s403;
[L6011]              havoc __ret_0_decreaseAllowance;
[L6012]              havoc name_s650;
[L6013]              havoc symbol_s650;
[L6014]              havoc decimals_s650;
[L6015]              havoc __ret_0_name;
[L6016]              havoc __ret_0_symbol;
[L6017]              havoc __ret_0_decimals;
[L6018]              havoc amount_s691;
[L6019]              havoc account_s704;
[L6020]              havoc amount_s704;
[L6021]              havoc __ret_0_NAME;
[L6022]              havoc __ret_0_SYMBOL;
[L6023]              havoc __ret_0_DECIMALS;
[L6024]              havoc __ret_0_INITIAL_SUPPLY;
[L6025]              havoc _spender_s788;
[L6026]              havoc _value_s788;
[L6027]              havoc _extraData_s788;
[L6028]              havoc success_s788;
[L6029]              havoc tmpNow;
[L6030]              havoc gas;
[L6031]              assume gas > 4000000 && gas <= 8000000;
[L6032]              tmpNow := now;
[L6033]              havoc now;
[L6034]              assume now > tmpNow;
[L6035]              assume msgsender_MSG != null;
[L6036]              assume DType[msgsender_MSG] != SafeMath;
[L6037]              assume DType[msgsender_MSG] != Context;
[L6038]              assume DType[msgsender_MSG] != IERC20;
[L6039]              assume DType[msgsender_MSG] != ERC20;
[L6040]              assume DType[msgsender_MSG] != ERC20Detailed;
[L6041]              assume DType[msgsender_MSG] != ERC20Burnable;
[L6042]              assume DType[msgsender_MSG] != tokenRecipient;
[L6043]              assume DType[msgsender_MSG] != KeepToken;
[L6044]              Alloc[msgsender_MSG] := true;
[L6045]  COND TRUE   choice == 18
[L6046]              gas := gas - 21000;
[L6047]  COND FALSE  !(gas >= 0)
[L6179]  RET         call CorralChoice_KeepToken(this);

[2020-11-24 20:07:56,395 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-24 20:07:56,395 INFO  L82        PathProgramCache]: Analyzing trace with hash -2027216254, now seen corresponding path program 1 times
[2020-11-24 20:07:56,401 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-24 20:07:56,422 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-24 20:07:56,459 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-24 20:07:56,461 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-24 20:07:56,462 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [4] imperfect sequences [] total 4
[2020-11-24 20:07:56,777 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-24 20:07:56,789 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-11-24 20:07:56,790 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=5, Invalid=7, Unknown=0, NotChecked=0, Total=12
[2020-11-24 20:07:56,791 INFO  L87              Difference]: Start difference. First operand 5728 states. Second operand 4 states.
[2020-11-24 20:07:57,423 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-24 20:07:57,423 INFO  L93              Difference]: Finished difference Result 3766 states and 4651 transitions.
[2020-11-24 20:07:57,423 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 4 states. 
[2020-11-24 20:07:57,425 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 3766 states and 4651 transitions.
[2020-11-24 20:07:57,446 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-24 20:07:57,471 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 3766 states to 3766 states and 4651 transitions.
[2020-11-24 20:07:57,471 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 4
[2020-11-24 20:07:57,474 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 823
[2020-11-24 20:07:57,474 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 3766 states and 4651 transitions.
[2020-11-24 20:07:57,483 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-24 20:07:57,484 INFO  L728         BuchiCegarLoop]: Abstraction has 3766 states and 4651 transitions.
[2020-11-24 20:07:57,498 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 3766 states and 4651 transitions.
[2020-11-24 20:07:57,546 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 3766 to 3766.
[2020-11-24 20:07:57,546 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 3766 states.
[2020-11-24 20:07:57,552 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 3766 states to 3766 states and 4651 transitions.
[2020-11-24 20:07:57,553 INFO  L751         BuchiCegarLoop]: Abstraction has 3766 states and 4651 transitions.
[2020-11-24 20:07:57,553 INFO  L631         BuchiCegarLoop]: Abstraction has 3766 states and 4651 transitions.
[2020-11-24 20:07:57,553 INFO  L445         BuchiCegarLoop]: ======== Iteration 2============
[2020-11-24 20:07:57,553 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 3766 states and 4651 transitions.
[2020-11-24 20:07:57,561 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-24 20:07:57,561 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-24 20:07:57,561 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-24 20:07:57,563 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-24 20:07:57,563 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_approve_ERC200 := false;
[L3]                 call_approve_ERC200 := false;
[L3]     CALL        call main();
[L3]                 havoc p2;
[L3]                 havoc p1;
[L6169]              assume null == 0;
[L6170]  CALL        call this := FreshRefGenerator__success();
[L2373]              havoc newRef;
[L2374]              assume Alloc[newRef] == false;
[L2375]              Alloc[newRef] := true;
[L2376]              assume newRef != null;
[L6170]  RET         call this := FreshRefGenerator__success();
[L6171]              assume now >= 0;
[L6172]              assume DType[this] == KeepToken;
[L6173]              assume msgvalue_MSG == 0;
[L6174]              gas := gas - 53000;
[L6175]  CALL        call KeepToken_KeepToken(this, msgsender_MSG, msgvalue_MSG);
[L1369]              havoc __exception;
[L1370]              revert := false;
[L1371]  COND FALSE  !(__exception)
[L1396]  CALL        call KeepToken_KeepToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4025]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2561]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2546]              assume msgsender_MSG != null;
[L2547]              Balance[this] := 0;
[L2561]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2562]  COND FALSE  !(revert)
[L4025]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4026]  COND TRUE   revert
[L1396]  RET         call KeepToken_KeepToken__success(this, msgsender_MSG, msgvalue_MSG);
[L1397]              assume !revert && gas >= 0;
[L6175]  RET         call KeepToken_KeepToken(this, msgsender_MSG, msgvalue_MSG);
[L6176]              assume !revert && gas >= 0;
[L6179]  CALL        call CorralChoice_KeepToken(this);
[L5987]              havoc msgsender_MSG;
[L5988]              havoc msgvalue_MSG;
[L5989]              havoc choice;
[L5990]              havoc __ret_0_totalSupply;
[L5991]              havoc account_s258;
[L5992]              havoc __ret_0_balanceOf;
[L5993]              havoc recipient_s277;
[L5994]              havoc amount_s277;
[L5995]              havoc __ret_0_transfer;
[L5996]              havoc owner_s293;
[L5997]              havoc spender_s293;
[L5998]              havoc __ret_0_allowance;
[L5999]              havoc spender_s312;
[L6000]              havoc amount_s312;
[L6001]              havoc __ret_0_approve;
[L6002]              havoc sender_s348;
[L6003]              havoc recipient_s348;
[L6004]              havoc amount_s348;
[L6005]              havoc __ret_0_transferFrom;
[L6006]              havoc spender_s375;
[L6007]              havoc addedValue_s375;
[L6008]              havoc __ret_0_increaseAllowance;
[L6009]              havoc spender_s403;
[L6010]              havoc subtractedValue_s403;
[L6011]              havoc __ret_0_decreaseAllowance;
[L6012]              havoc name_s650;
[L6013]              havoc symbol_s650;
[L6014]              havoc decimals_s650;
[L6015]              havoc __ret_0_name;
[L6016]              havoc __ret_0_symbol;
[L6017]              havoc __ret_0_decimals;
[L6018]              havoc amount_s691;
[L6019]              havoc account_s704;
[L6020]              havoc amount_s704;
[L6021]              havoc __ret_0_NAME;
[L6022]              havoc __ret_0_SYMBOL;
[L6023]              havoc __ret_0_DECIMALS;
[L6024]              havoc __ret_0_INITIAL_SUPPLY;
[L6025]              havoc _spender_s788;
[L6026]              havoc _value_s788;
[L6027]              havoc _extraData_s788;
[L6028]              havoc success_s788;
[L6029]              havoc tmpNow;
[L6030]              havoc gas;
[L6031]              assume gas > 4000000 && gas <= 8000000;
[L6032]              tmpNow := now;
[L6033]              havoc now;
[L6034]              assume now > tmpNow;
[L6035]              assume msgsender_MSG != null;
[L6036]              assume DType[msgsender_MSG] != SafeMath;
[L6037]              assume DType[msgsender_MSG] != Context;
[L6038]              assume DType[msgsender_MSG] != IERC20;
[L6039]              assume DType[msgsender_MSG] != ERC20;
[L6040]              assume DType[msgsender_MSG] != ERC20Detailed;
[L6041]              assume DType[msgsender_MSG] != ERC20Burnable;
[L6042]              assume DType[msgsender_MSG] != tokenRecipient;
[L6043]              assume DType[msgsender_MSG] != KeepToken;
[L6044]              Alloc[msgsender_MSG] := true;
[L6045]  COND FALSE  !(choice == 18)
[L6051]  COND FALSE  !(choice == 17)
[L6057]  COND FALSE  !(choice == 16)
[L6064]  COND FALSE  !(choice == 15)
[L6070]  COND TRUE   choice == 14
[L6071]              gas := gas - 21000;
[L6072]  COND TRUE   gas >= 0
[L6073]              assume amount_s312 >= 0 && amount_s312 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6074]              assume msgvalue_MSG == 0;
[L6075]  CALL        call __ret_0_approve := approve~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, spender_s312, amount_s312);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume p1 != msgsender_MSG || p2 != spender_s312;
[L3]                 call_approve_ERC200 := true;
[L3]                 call_approve_ERC200 := false;
[L3]                 revert := revert_hold;
[L581]               havoc __exception;
[L582]               revert := false;
[L583]   COND FALSE  !(__exception)
[L608]   CALL        call __ret_0_ := approve~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, spender_s312, amount_s312);
[L2837]  COND FALSE  !(DType[this] == KeepToken)
[L2842]  COND TRUE   DType[this] == ERC20Burnable
[L2843]  CALL        call __var_2 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2575]              __ret_0_ := msgsender_MSG;
[L2843]  RET         call __var_2 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2844]  COND TRUE   revert
[L608]   RET         call __ret_0_ := approve~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, spender_s312, amount_s312);
[L609]               assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !(((((((__ret_0_ == true && _allowances_ERC20[this][msgsender_MSG][spender_s312] == amount_s312) && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowances_ERC20[this][p1][p2] == old(_allowances_ERC20[this][p1][p2])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]));
[L3]                 revert := revert_hold;
[L6075]  RET         call __ret_0_approve := approve~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, spender_s312, amount_s312);
[L6179]  RET         call CorralChoice_KeepToken(this);

Loop:
[L6179]  CALL        call CorralChoice_KeepToken(this);
[L5987]              havoc msgsender_MSG;
[L5988]              havoc msgvalue_MSG;
[L5989]              havoc choice;
[L5990]              havoc __ret_0_totalSupply;
[L5991]              havoc account_s258;
[L5992]              havoc __ret_0_balanceOf;
[L5993]              havoc recipient_s277;
[L5994]              havoc amount_s277;
[L5995]              havoc __ret_0_transfer;
[L5996]              havoc owner_s293;
[L5997]              havoc spender_s293;
[L5998]              havoc __ret_0_allowance;
[L5999]              havoc spender_s312;
[L6000]              havoc amount_s312;
[L6001]              havoc __ret_0_approve;
[L6002]              havoc sender_s348;
[L6003]              havoc recipient_s348;
[L6004]              havoc amount_s348;
[L6005]              havoc __ret_0_transferFrom;
[L6006]              havoc spender_s375;
[L6007]              havoc addedValue_s375;
[L6008]              havoc __ret_0_increaseAllowance;
[L6009]              havoc spender_s403;
[L6010]              havoc subtractedValue_s403;
[L6011]              havoc __ret_0_decreaseAllowance;
[L6012]              havoc name_s650;
[L6013]              havoc symbol_s650;
[L6014]              havoc decimals_s650;
[L6015]              havoc __ret_0_name;
[L6016]              havoc __ret_0_symbol;
[L6017]              havoc __ret_0_decimals;
[L6018]              havoc amount_s691;
[L6019]              havoc account_s704;
[L6020]              havoc amount_s704;
[L6021]              havoc __ret_0_NAME;
[L6022]              havoc __ret_0_SYMBOL;
[L6023]              havoc __ret_0_DECIMALS;
[L6024]              havoc __ret_0_INITIAL_SUPPLY;
[L6025]              havoc _spender_s788;
[L6026]              havoc _value_s788;
[L6027]              havoc _extraData_s788;
[L6028]              havoc success_s788;
[L6029]              havoc tmpNow;
[L6030]              havoc gas;
[L6031]              assume gas > 4000000 && gas <= 8000000;
[L6032]              tmpNow := now;
[L6033]              havoc now;
[L6034]              assume now > tmpNow;
[L6035]              assume msgsender_MSG != null;
[L6036]              assume DType[msgsender_MSG] != SafeMath;
[L6037]              assume DType[msgsender_MSG] != Context;
[L6038]              assume DType[msgsender_MSG] != IERC20;
[L6039]              assume DType[msgsender_MSG] != ERC20;
[L6040]              assume DType[msgsender_MSG] != ERC20Detailed;
[L6041]              assume DType[msgsender_MSG] != ERC20Burnable;
[L6042]              assume DType[msgsender_MSG] != tokenRecipient;
[L6043]              assume DType[msgsender_MSG] != KeepToken;
[L6044]              Alloc[msgsender_MSG] := true;
[L6045]  COND FALSE  !(choice == 18)
[L6051]  COND FALSE  !(choice == 17)
[L6057]  COND FALSE  !(choice == 16)
[L6064]  COND FALSE  !(choice == 15)
[L6070]  COND TRUE   choice == 14
[L6071]              gas := gas - 21000;
[L6072]  COND TRUE   gas >= 0
[L6073]              assume amount_s312 >= 0 && amount_s312 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6074]              assume msgvalue_MSG == 0;
[L6075]  CALL        call __ret_0_approve := approve~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, spender_s312, amount_s312);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume p1 != msgsender_MSG || p2 != spender_s312;
[L3]                 call_approve_ERC200 := true;
[L3]                 call_approve_ERC200 := false;
[L3]                 revert := revert_hold;
[L581]               havoc __exception;
[L582]               revert := false;
[L583]   COND FALSE  !(__exception)
[L608]   CALL        call __ret_0_ := approve~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, spender_s312, amount_s312);
[L2837]  COND FALSE  !(DType[this] == KeepToken)
[L2842]  COND TRUE   DType[this] == ERC20Burnable
[L2843]  CALL        call __var_2 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2575]              __ret_0_ := msgsender_MSG;
[L2843]  RET         call __var_2 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2844]  COND TRUE   revert
[L608]   RET         call __ret_0_ := approve~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, spender_s312, amount_s312);
[L609]               assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !(((((((__ret_0_ == true && _allowances_ERC20[this][msgsender_MSG][spender_s312] == amount_s312) && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowances_ERC20[this][p1][p2] == old(_allowances_ERC20[this][p1][p2])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]));
[L3]                 revert := revert_hold;
[L6075]  RET         call __ret_0_approve := approve~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, spender_s312, amount_s312);
[L6179]  RET         call CorralChoice_KeepToken(this);

[2020-11-24 20:07:57,567 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-24 20:07:57,567 INFO  L82        PathProgramCache]: Analyzing trace with hash -1120699428, now seen corresponding path program 1 times
[2020-11-24 20:07:57,568 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-24 20:07:57,576 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-24 20:07:57,593 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-24 20:07:57,593 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-24 20:07:57,593 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [3] imperfect sequences [] total 3
[2020-11-24 20:07:57,594 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-24 20:07:57,595 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-11-24 20:07:57,595 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-11-24 20:07:57,595 INFO  L87              Difference]: Start difference. First operand 3766 states and 4651 transitions. cyclomatic complexity: 887 Second operand 3 states.
[2020-11-24 20:07:57,697 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-24 20:07:57,697 INFO  L93              Difference]: Finished difference Result 4752 states and 5739 transitions.
[2020-11-24 20:07:57,697 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-11-24 20:07:57,697 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 4752 states and 5739 transitions.
[2020-11-24 20:07:57,713 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-24 20:07:57,733 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 4752 states to 4752 states and 5739 transitions.
[2020-11-24 20:07:57,733 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1109
[2020-11-24 20:07:57,734 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1109
[2020-11-24 20:07:57,734 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 4752 states and 5739 transitions.
[2020-11-24 20:07:57,740 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-24 20:07:57,740 INFO  L728         BuchiCegarLoop]: Abstraction has 4752 states and 5739 transitions.
[2020-11-24 20:07:57,744 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 4752 states and 5739 transitions.
[2020-11-24 20:07:57,787 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 4752 to 4142.
[2020-11-24 20:07:57,787 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 4142 states.
[2020-11-24 20:07:57,792 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 4142 states to 4142 states and 4995 transitions.
[2020-11-24 20:07:57,792 INFO  L751         BuchiCegarLoop]: Abstraction has 4142 states and 4995 transitions.
[2020-11-24 20:07:57,792 INFO  L631         BuchiCegarLoop]: Abstraction has 4142 states and 4995 transitions.
[2020-11-24 20:07:57,792 INFO  L445         BuchiCegarLoop]: ======== Iteration 3============
[2020-11-24 20:07:57,792 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 4142 states and 4995 transitions.
[2020-11-24 20:07:57,798 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-24 20:07:57,798 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-24 20:07:57,798 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-24 20:07:57,801 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-24 20:07:57,802 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_approve_ERC200 := false;
[L3]                 call_approve_ERC200 := false;
[L3]     CALL        call main();
[L3]                 havoc p2;
[L3]                 havoc p1;
[L6169]              assume null == 0;
[L6170]  CALL        call this := FreshRefGenerator__success();
[L2373]              havoc newRef;
[L2374]              assume Alloc[newRef] == false;
[L2375]              Alloc[newRef] := true;
[L2376]              assume newRef != null;
[L6170]  RET         call this := FreshRefGenerator__success();
[L6171]              assume now >= 0;
[L6172]              assume DType[this] == KeepToken;
[L6173]              assume msgvalue_MSG == 0;
[L6174]              gas := gas - 53000;
[L6175]  CALL        call KeepToken_KeepToken(this, msgsender_MSG, msgvalue_MSG);
[L1369]              havoc __exception;
[L1370]              revert := false;
[L1371]  COND FALSE  !(__exception)
[L1396]  CALL        call KeepToken_KeepToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4025]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2561]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2546]              assume msgsender_MSG != null;
[L2547]              Balance[this] := 0;
[L2561]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2562]  COND FALSE  !(revert)
[L4025]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4026]  COND FALSE  !(revert)
[L4029]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2605]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2590]              assume msgsender_MSG != null;
[L2591]              Balance[this] := 0;
[L2605]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2606]  COND FALSE  !(revert)
[L4029]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4030]  COND FALSE  !(revert)
[L4033]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2655]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2561]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2546]              assume msgsender_MSG != null;
[L2547]              Balance[this] := 0;
[L2561]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2562]  COND FALSE  !(revert)
[L2655]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2656]  COND FALSE  !(revert)
[L2659]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2605]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2590]              assume msgsender_MSG != null;
[L2591]              Balance[this] := 0;
[L2605]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2606]  COND FALSE  !(revert)
[L2659]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2660]  COND FALSE  !(revert)
[L2663]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2627]              assume msgsender_MSG != null;
[L2628]              Balance[this] := 0;
[L2629]              _balances_ERC20[this] := zeroRefintArr();
[L2630]              sum__balances0[this] := 0;
[L2631]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2632]              sum__allowances1[this] := 0;
[L2633]              _totalSupply_ERC20[this] := 0;
[L2663]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2664]  COND FALSE  !(revert)
[L4033]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4034]  COND FALSE  !(revert)
[L4037]  CALL        call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L3809]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2561]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2546]              assume msgsender_MSG != null;
[L2547]              Balance[this] := 0;
[L2561]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2562]  COND FALSE  !(revert)
[L3809]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3810]  COND FALSE  !(revert)
[L3813]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2605]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2590]              assume msgsender_MSG != null;
[L2591]              Balance[this] := 0;
[L2605]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2606]  COND FALSE  !(revert)
[L3813]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3814]  COND FALSE  !(revert)
[L3817]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2655]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2561]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2546]              assume msgsender_MSG != null;
[L2547]              Balance[this] := 0;
[L2561]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2562]  COND FALSE  !(revert)
[L2655]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2656]  COND FALSE  !(revert)
[L2659]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2605]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2590]              assume msgsender_MSG != null;
[L2591]              Balance[this] := 0;
[L2605]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2606]  COND FALSE  !(revert)
[L2659]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2660]  COND FALSE  !(revert)
[L2663]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2627]              assume msgsender_MSG != null;
[L2628]              Balance[this] := 0;
[L2629]              _balances_ERC20[this] := zeroRefintArr();
[L2630]              sum__balances0[this] := 0;
[L2631]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2632]              sum__allowances1[this] := 0;
[L2633]              _totalSupply_ERC20[this] := 0;
[L2663]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2664]  COND FALSE  !(revert)
[L3817]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3818]  COND FALSE  !(revert)
[L3821]  CALL        call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3782]              assume msgsender_MSG != null;
[L3783]              Balance[this] := 0;
[L3821]  RET         call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3822]  COND FALSE  !(revert)
[L4037]  RET         call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L4038]  COND FALSE  !(revert)
[L4041]  CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, NAME_KeepToken[this], SYMBOL_KeepToken[this], DECIMALS_KeepToken[this]);
[L3725]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2605]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2590]              assume msgsender_MSG != null;
[L2591]              Balance[this] := 0;
[L2605]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2606]  COND FALSE  !(revert)
[L3725]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3726]  COND FALSE  !(revert)
[L3729]  CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s650, symbol_s650, decimals_s650);
[L3700]              assume msgsender_MSG != null;
[L3701]              Balance[this] := 0;
[L3702]              _name_ERC20Detailed[this] := -708534286;
[L3703]              _symbol_ERC20Detailed[this] := -708534286;
[L3704]              _decimals_ERC20Detailed[this] := 0;
[L3706]              _name_ERC20Detailed[this] := name_s650;
[L3707]              _symbol_ERC20Detailed[this] := symbol_s650;
[L3708]              _decimals_ERC20Detailed[this] := decimals_s650;
[L3729]  RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s650, symbol_s650, decimals_s650);
[L3730]  COND FALSE  !(revert)
[L4041]  RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, NAME_KeepToken[this], SYMBOL_KeepToken[this], DECIMALS_KeepToken[this]);
[L4042]  COND FALSE  !(revert)
[L4045]  CALL        call KeepToken_KeepToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3978]              assume msgsender_MSG != null;
[L3979]              Balance[this] := 0;
[L3980]              NAME_KeepToken[this] := 153019343;
[L3981]              SYMBOL_KeepToken[this] := 577946439;
[L3982]              DECIMALS_KeepToken[this] := 18;
[L3983]              INITIAL_SUPPLY_KeepToken[this] := 1000000000000000013287555072 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3985]  COND TRUE   DType[this] == KeepToken
[L3986]  CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, INITIAL_SUPPLY_KeepToken[this]);
[L3409]              __var_16 := null;
[L3410]  COND TRUE   !(account_s503 != null)
[L3411]              revert := true;
[L3986]  RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, INITIAL_SUPPLY_KeepToken[this]);
[L3987]  COND TRUE   revert
[L4045]  RET         call KeepToken_KeepToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4046]  COND FALSE  !(revert)
[L1396]  RET         call KeepToken_KeepToken__success(this, msgsender_MSG, msgvalue_MSG);
[L1397]              assume !revert && gas >= 0;
[L6175]  RET         call KeepToken_KeepToken(this, msgsender_MSG, msgvalue_MSG);
[L6176]              assume !revert && gas >= 0;
[L6179]  CALL        call CorralChoice_KeepToken(this);
[L5987]              havoc msgsender_MSG;
[L5988]              havoc msgvalue_MSG;
[L5989]              havoc choice;
[L5990]              havoc __ret_0_totalSupply;
[L5991]              havoc account_s258;
[L5992]              havoc __ret_0_balanceOf;
[L5993]              havoc recipient_s277;
[L5994]              havoc amount_s277;
[L5995]              havoc __ret_0_transfer;
[L5996]              havoc owner_s293;
[L5997]              havoc spender_s293;
[L5998]              havoc __ret_0_allowance;
[L5999]              havoc spender_s312;
[L6000]              havoc amount_s312;
[L6001]              havoc __ret_0_approve;
[L6002]              havoc sender_s348;
[L6003]              havoc recipient_s348;
[L6004]              havoc amount_s348;
[L6005]              havoc __ret_0_transferFrom;
[L6006]              havoc spender_s375;
[L6007]              havoc addedValue_s375;
[L6008]              havoc __ret_0_increaseAllowance;
[L6009]              havoc spender_s403;
[L6010]              havoc subtractedValue_s403;
[L6011]              havoc __ret_0_decreaseAllowance;
[L6012]              havoc name_s650;
[L6013]              havoc symbol_s650;
[L6014]              havoc decimals_s650;
[L6015]              havoc __ret_0_name;
[L6016]              havoc __ret_0_symbol;
[L6017]              havoc __ret_0_decimals;
[L6018]              havoc amount_s691;
[L6019]              havoc account_s704;
[L6020]              havoc amount_s704;
[L6021]              havoc __ret_0_NAME;
[L6022]              havoc __ret_0_SYMBOL;
[L6023]              havoc __ret_0_DECIMALS;
[L6024]              havoc __ret_0_INITIAL_SUPPLY;
[L6025]              havoc _spender_s788;
[L6026]              havoc _value_s788;
[L6027]              havoc _extraData_s788;
[L6028]              havoc success_s788;
[L6029]              havoc tmpNow;
[L6030]              havoc gas;
[L6031]              assume gas > 4000000 && gas <= 8000000;
[L6032]              tmpNow := now;
[L6033]              havoc now;
[L6034]              assume now > tmpNow;
[L6035]              assume msgsender_MSG != null;
[L6036]              assume DType[msgsender_MSG] != SafeMath;
[L6037]              assume DType[msgsender_MSG] != Context;
[L6038]              assume DType[msgsender_MSG] != IERC20;
[L6039]              assume DType[msgsender_MSG] != ERC20;
[L6040]              assume DType[msgsender_MSG] != ERC20Detailed;
[L6041]              assume DType[msgsender_MSG] != ERC20Burnable;
[L6042]              assume DType[msgsender_MSG] != tokenRecipient;
[L6043]              assume DType[msgsender_MSG] != KeepToken;
[L6044]              Alloc[msgsender_MSG] := true;
[L6045]  COND FALSE  !(choice == 18)
[L6051]  COND FALSE  !(choice == 17)
[L6057]  COND FALSE  !(choice == 16)
[L6064]  COND FALSE  !(choice == 15)
[L6070]  COND TRUE   choice == 14
[L6071]              gas := gas - 21000;
[L6072]  COND TRUE   gas >= 0
[L6073]              assume amount_s312 >= 0 && amount_s312 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6074]              assume msgvalue_MSG == 0;
[L6075]  CALL        call __ret_0_approve := approve~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, spender_s312, amount_s312);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume p1 != msgsender_MSG || p2 != spender_s312;
[L3]                 call_approve_ERC200 := true;
[L3]                 call_approve_ERC200 := false;
[L3]                 revert := revert_hold;
[L581]               havoc __exception;
[L582]               revert := false;
[L583]   COND FALSE  !(__exception)
[L608]   CALL        call __ret_0_ := approve~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, spender_s312, amount_s312);
[L2837]  COND FALSE  !(DType[this] == KeepToken)
[L2842]  COND TRUE   DType[this] == ERC20Burnable
[L2843]  CALL        call __var_2 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2575]              __ret_0_ := msgsender_MSG;
[L2843]  RET         call __var_2 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2844]  COND FALSE  !(revert)
[L2855]  COND TRUE   DType[this] == KeepToken
[L2856]  CALL        call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_2, spender_s312, amount_s312);
[L3501]              __var_22 := null;
[L3502]  COND TRUE   !(owner_s590 != null)
[L3503]              revert := true;
[L2856]  RET         call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_2, spender_s312, amount_s312);
[L2857]  COND TRUE   revert
[L608]   RET         call __ret_0_ := approve~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, spender_s312, amount_s312);
[L609]               assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !(((((((__ret_0_ == true && _allowances_ERC20[this][msgsender_MSG][spender_s312] == amount_s312) && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowances_ERC20[this][p1][p2] == old(_allowances_ERC20[this][p1][p2])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]));
[L3]                 revert := revert_hold;
[L6075]  RET         call __ret_0_approve := approve~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, spender_s312, amount_s312);
[L6179]  RET         call CorralChoice_KeepToken(this);

Loop:
[L6179]  CALL        call CorralChoice_KeepToken(this);
[L5987]              havoc msgsender_MSG;
[L5988]              havoc msgvalue_MSG;
[L5989]              havoc choice;
[L5990]              havoc __ret_0_totalSupply;
[L5991]              havoc account_s258;
[L5992]              havoc __ret_0_balanceOf;
[L5993]              havoc recipient_s277;
[L5994]              havoc amount_s277;
[L5995]              havoc __ret_0_transfer;
[L5996]              havoc owner_s293;
[L5997]              havoc spender_s293;
[L5998]              havoc __ret_0_allowance;
[L5999]              havoc spender_s312;
[L6000]              havoc amount_s312;
[L6001]              havoc __ret_0_approve;
[L6002]              havoc sender_s348;
[L6003]              havoc recipient_s348;
[L6004]              havoc amount_s348;
[L6005]              havoc __ret_0_transferFrom;
[L6006]              havoc spender_s375;
[L6007]              havoc addedValue_s375;
[L6008]              havoc __ret_0_increaseAllowance;
[L6009]              havoc spender_s403;
[L6010]              havoc subtractedValue_s403;
[L6011]              havoc __ret_0_decreaseAllowance;
[L6012]              havoc name_s650;
[L6013]              havoc symbol_s650;
[L6014]              havoc decimals_s650;
[L6015]              havoc __ret_0_name;
[L6016]              havoc __ret_0_symbol;
[L6017]              havoc __ret_0_decimals;
[L6018]              havoc amount_s691;
[L6019]              havoc account_s704;
[L6020]              havoc amount_s704;
[L6021]              havoc __ret_0_NAME;
[L6022]              havoc __ret_0_SYMBOL;
[L6023]              havoc __ret_0_DECIMALS;
[L6024]              havoc __ret_0_INITIAL_SUPPLY;
[L6025]              havoc _spender_s788;
[L6026]              havoc _value_s788;
[L6027]              havoc _extraData_s788;
[L6028]              havoc success_s788;
[L6029]              havoc tmpNow;
[L6030]              havoc gas;
[L6031]              assume gas > 4000000 && gas <= 8000000;
[L6032]              tmpNow := now;
[L6033]              havoc now;
[L6034]              assume now > tmpNow;
[L6035]              assume msgsender_MSG != null;
[L6036]              assume DType[msgsender_MSG] != SafeMath;
[L6037]              assume DType[msgsender_MSG] != Context;
[L6038]              assume DType[msgsender_MSG] != IERC20;
[L6039]              assume DType[msgsender_MSG] != ERC20;
[L6040]              assume DType[msgsender_MSG] != ERC20Detailed;
[L6041]              assume DType[msgsender_MSG] != ERC20Burnable;
[L6042]              assume DType[msgsender_MSG] != tokenRecipient;
[L6043]              assume DType[msgsender_MSG] != KeepToken;
[L6044]              Alloc[msgsender_MSG] := true;
[L6045]  COND FALSE  !(choice == 18)
[L6051]  COND FALSE  !(choice == 17)
[L6057]  COND FALSE  !(choice == 16)
[L6064]  COND FALSE  !(choice == 15)
[L6070]  COND TRUE   choice == 14
[L6071]              gas := gas - 21000;
[L6072]  COND TRUE   gas >= 0
[L6073]              assume amount_s312 >= 0 && amount_s312 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6074]              assume msgvalue_MSG == 0;
[L6075]  CALL        call __ret_0_approve := approve~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, spender_s312, amount_s312);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume p1 != msgsender_MSG || p2 != spender_s312;
[L3]                 call_approve_ERC200 := true;
[L3]                 call_approve_ERC200 := false;
[L3]                 revert := revert_hold;
[L581]               havoc __exception;
[L582]               revert := false;
[L583]   COND FALSE  !(__exception)
[L608]   CALL        call __ret_0_ := approve~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, spender_s312, amount_s312);
[L2837]  COND FALSE  !(DType[this] == KeepToken)
[L2842]  COND TRUE   DType[this] == ERC20Burnable
[L2843]  CALL        call __var_2 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2575]              __ret_0_ := msgsender_MSG;
[L2843]  RET         call __var_2 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2844]  COND FALSE  !(revert)
[L2855]  COND TRUE   DType[this] == KeepToken
[L2856]  CALL        call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_2, spender_s312, amount_s312);
[L3501]              __var_22 := null;
[L3502]  COND TRUE   !(owner_s590 != null)
[L3503]              revert := true;
[L2856]  RET         call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_2, spender_s312, amount_s312);
[L2857]  COND TRUE   revert
[L608]   RET         call __ret_0_ := approve~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, spender_s312, amount_s312);
[L609]               assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !(((((((__ret_0_ == true && _allowances_ERC20[this][msgsender_MSG][spender_s312] == amount_s312) && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowances_ERC20[this][p1][p2] == old(_allowances_ERC20[this][p1][p2])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]));
[L3]                 revert := revert_hold;
[L6075]  RET         call __ret_0_approve := approve~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, spender_s312, amount_s312);
[L6179]  RET         call CorralChoice_KeepToken(this);

[2020-11-24 20:07:57,807 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-24 20:07:57,807 INFO  L82        PathProgramCache]: Analyzing trace with hash -1201813934, now seen corresponding path program 1 times
[2020-11-24 20:07:57,808 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-24 20:07:57,822 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-24 20:07:57,921 INFO  L134       CoverageAnalysis]: Checked inductivity of 183 backedges. 0 proven. 21 refuted. 0 times theorem prover too weak. 162 trivial. 0 not checked.
[2020-11-24 20:07:57,921 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-24 20:07:57,921 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [7] total 7
[2020-11-24 20:07:57,922 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-24 20:07:57,922 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 7 interpolants.
[2020-11-24 20:07:57,922 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=11, Invalid=31, Unknown=0, NotChecked=0, Total=42
[2020-11-24 20:07:57,922 INFO  L87              Difference]: Start difference. First operand 4142 states and 4995 transitions. cyclomatic complexity: 855 Second operand 7 states.
[2020-11-24 20:07:57,985 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-24 20:07:57,985 INFO  L93              Difference]: Finished difference Result 4150 states and 5002 transitions.
[2020-11-24 20:07:57,985 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 7 states. 
[2020-11-24 20:07:57,985 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 4150 states and 5002 transitions.
[2020-11-24 20:07:57,994 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-24 20:07:58,008 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 4150 states to 4141 states and 4993 transitions.
[2020-11-24 20:07:58,008 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 943
[2020-11-24 20:07:58,009 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 943
[2020-11-24 20:07:58,009 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 4141 states and 4993 transitions.
[2020-11-24 20:07:58,012 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-24 20:07:58,012 INFO  L728         BuchiCegarLoop]: Abstraction has 4141 states and 4993 transitions.
[2020-11-24 20:07:58,016 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 4141 states and 4993 transitions.
[2020-11-24 20:07:58,049 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 4141 to 4141.
[2020-11-24 20:07:58,049 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 4141 states.
[2020-11-24 20:07:58,055 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 4141 states to 4141 states and 4993 transitions.
[2020-11-24 20:07:58,055 INFO  L751         BuchiCegarLoop]: Abstraction has 4141 states and 4993 transitions.
[2020-11-24 20:07:58,055 INFO  L631         BuchiCegarLoop]: Abstraction has 4141 states and 4993 transitions.
[2020-11-24 20:07:58,055 INFO  L445         BuchiCegarLoop]: ======== Iteration 4============
[2020-11-24 20:07:58,055 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 4141 states and 4993 transitions.
[2020-11-24 20:07:58,060 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-24 20:07:58,060 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-24 20:07:58,060 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-24 20:07:58,062 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-24 20:07:58,062 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_approve_ERC200 := false;
[L3]                 call_approve_ERC200 := false;
[L3]     CALL        call main();
[L3]                 havoc p2;
[L3]                 havoc p1;
[L6169]              assume null == 0;
[L6170]  CALL        call this := FreshRefGenerator__success();
[L2373]              havoc newRef;
[L2374]              assume Alloc[newRef] == false;
[L2375]              Alloc[newRef] := true;
[L2376]              assume newRef != null;
[L6170]  RET         call this := FreshRefGenerator__success();
[L6171]              assume now >= 0;
[L6172]              assume DType[this] == KeepToken;
[L6173]              assume msgvalue_MSG == 0;
[L6174]              gas := gas - 53000;
[L6175]  CALL        call KeepToken_KeepToken(this, msgsender_MSG, msgvalue_MSG);
[L1369]              havoc __exception;
[L1370]              revert := false;
[L1371]  COND FALSE  !(__exception)
[L1396]  CALL        call KeepToken_KeepToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4025]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2561]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2546]              assume msgsender_MSG != null;
[L2547]              Balance[this] := 0;
[L2561]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2562]  COND FALSE  !(revert)
[L4025]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4026]  COND FALSE  !(revert)
[L4029]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2605]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2590]              assume msgsender_MSG != null;
[L2591]              Balance[this] := 0;
[L2605]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2606]  COND FALSE  !(revert)
[L4029]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4030]  COND FALSE  !(revert)
[L4033]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2655]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2561]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2546]              assume msgsender_MSG != null;
[L2547]              Balance[this] := 0;
[L2561]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2562]  COND FALSE  !(revert)
[L2655]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2656]  COND FALSE  !(revert)
[L2659]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2605]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2590]              assume msgsender_MSG != null;
[L2591]              Balance[this] := 0;
[L2605]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2606]  COND FALSE  !(revert)
[L2659]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2660]  COND FALSE  !(revert)
[L2663]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2627]              assume msgsender_MSG != null;
[L2628]              Balance[this] := 0;
[L2629]              _balances_ERC20[this] := zeroRefintArr();
[L2630]              sum__balances0[this] := 0;
[L2631]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2632]              sum__allowances1[this] := 0;
[L2633]              _totalSupply_ERC20[this] := 0;
[L2663]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2664]  COND FALSE  !(revert)
[L4033]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4034]  COND FALSE  !(revert)
[L4037]  CALL        call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L3809]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2561]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2546]              assume msgsender_MSG != null;
[L2547]              Balance[this] := 0;
[L2561]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2562]  COND FALSE  !(revert)
[L3809]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3810]  COND FALSE  !(revert)
[L3813]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2605]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2590]              assume msgsender_MSG != null;
[L2591]              Balance[this] := 0;
[L2605]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2606]  COND FALSE  !(revert)
[L3813]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3814]  COND FALSE  !(revert)
[L3817]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2655]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2561]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2546]              assume msgsender_MSG != null;
[L2547]              Balance[this] := 0;
[L2561]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2562]  COND FALSE  !(revert)
[L2655]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2656]  COND FALSE  !(revert)
[L2659]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2605]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2590]              assume msgsender_MSG != null;
[L2591]              Balance[this] := 0;
[L2605]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2606]  COND FALSE  !(revert)
[L2659]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2660]  COND FALSE  !(revert)
[L2663]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2627]              assume msgsender_MSG != null;
[L2628]              Balance[this] := 0;
[L2629]              _balances_ERC20[this] := zeroRefintArr();
[L2630]              sum__balances0[this] := 0;
[L2631]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2632]              sum__allowances1[this] := 0;
[L2633]              _totalSupply_ERC20[this] := 0;
[L2663]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2664]  COND FALSE  !(revert)
[L3817]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3818]  COND FALSE  !(revert)
[L3821]  CALL        call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3782]              assume msgsender_MSG != null;
[L3783]              Balance[this] := 0;
[L3821]  RET         call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3822]  COND FALSE  !(revert)
[L4037]  RET         call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L4038]  COND FALSE  !(revert)
[L4041]  CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, NAME_KeepToken[this], SYMBOL_KeepToken[this], DECIMALS_KeepToken[this]);
[L3725]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2605]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2590]              assume msgsender_MSG != null;
[L2591]              Balance[this] := 0;
[L2605]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2606]  COND FALSE  !(revert)
[L3725]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3726]  COND FALSE  !(revert)
[L3729]  CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s650, symbol_s650, decimals_s650);
[L3700]              assume msgsender_MSG != null;
[L3701]              Balance[this] := 0;
[L3702]              _name_ERC20Detailed[this] := -708534286;
[L3703]              _symbol_ERC20Detailed[this] := -708534286;
[L3704]              _decimals_ERC20Detailed[this] := 0;
[L3706]              _name_ERC20Detailed[this] := name_s650;
[L3707]              _symbol_ERC20Detailed[this] := symbol_s650;
[L3708]              _decimals_ERC20Detailed[this] := decimals_s650;
[L3729]  RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s650, symbol_s650, decimals_s650);
[L3730]  COND FALSE  !(revert)
[L4041]  RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, NAME_KeepToken[this], SYMBOL_KeepToken[this], DECIMALS_KeepToken[this]);
[L4042]  COND FALSE  !(revert)
[L4045]  CALL        call KeepToken_KeepToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3978]              assume msgsender_MSG != null;
[L3979]              Balance[this] := 0;
[L3980]              NAME_KeepToken[this] := 153019343;
[L3981]              SYMBOL_KeepToken[this] := 577946439;
[L3982]              DECIMALS_KeepToken[this] := 18;
[L3983]              INITIAL_SUPPLY_KeepToken[this] := 1000000000000000013287555072 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3985]  COND TRUE   DType[this] == KeepToken
[L3986]  CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, INITIAL_SUPPLY_KeepToken[this]);
[L3409]              __var_16 := null;
[L3410]  COND FALSE  !(!(account_s503 != null))
[L3414]  CALL        call __var_17 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s503);
[L2426]              c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2427]  COND TRUE   !(c_s26 >= a_s26)
[L2428]              revert := true;
[L3414]  RET         call __var_17 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s503);
[L3415]  COND TRUE   revert
[L3986]  RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, INITIAL_SUPPLY_KeepToken[this]);
[L3987]  COND TRUE   revert
[L4045]  RET         call KeepToken_KeepToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4046]  COND FALSE  !(revert)
[L1396]  RET         call KeepToken_KeepToken__success(this, msgsender_MSG, msgvalue_MSG);
[L1397]              assume !revert && gas >= 0;
[L6175]  RET         call KeepToken_KeepToken(this, msgsender_MSG, msgvalue_MSG);
[L6176]              assume !revert && gas >= 0;
[L6179]  CALL        call CorralChoice_KeepToken(this);
[L5987]              havoc msgsender_MSG;
[L5988]              havoc msgvalue_MSG;
[L5989]              havoc choice;
[L5990]              havoc __ret_0_totalSupply;
[L5991]              havoc account_s258;
[L5992]              havoc __ret_0_balanceOf;
[L5993]              havoc recipient_s277;
[L5994]              havoc amount_s277;
[L5995]              havoc __ret_0_transfer;
[L5996]              havoc owner_s293;
[L5997]              havoc spender_s293;
[L5998]              havoc __ret_0_allowance;
[L5999]              havoc spender_s312;
[L6000]              havoc amount_s312;
[L6001]              havoc __ret_0_approve;
[L6002]              havoc sender_s348;
[L6003]              havoc recipient_s348;
[L6004]              havoc amount_s348;
[L6005]              havoc __ret_0_transferFrom;
[L6006]              havoc spender_s375;
[L6007]              havoc addedValue_s375;
[L6008]              havoc __ret_0_increaseAllowance;
[L6009]              havoc spender_s403;
[L6010]              havoc subtractedValue_s403;
[L6011]              havoc __ret_0_decreaseAllowance;
[L6012]              havoc name_s650;
[L6013]              havoc symbol_s650;
[L6014]              havoc decimals_s650;
[L6015]              havoc __ret_0_name;
[L6016]              havoc __ret_0_symbol;
[L6017]              havoc __ret_0_decimals;
[L6018]              havoc amount_s691;
[L6019]              havoc account_s704;
[L6020]              havoc amount_s704;
[L6021]              havoc __ret_0_NAME;
[L6022]              havoc __ret_0_SYMBOL;
[L6023]              havoc __ret_0_DECIMALS;
[L6024]              havoc __ret_0_INITIAL_SUPPLY;
[L6025]              havoc _spender_s788;
[L6026]              havoc _value_s788;
[L6027]              havoc _extraData_s788;
[L6028]              havoc success_s788;
[L6029]              havoc tmpNow;
[L6030]              havoc gas;
[L6031]              assume gas > 4000000 && gas <= 8000000;
[L6032]              tmpNow := now;
[L6033]              havoc now;
[L6034]              assume now > tmpNow;
[L6035]              assume msgsender_MSG != null;
[L6036]              assume DType[msgsender_MSG] != SafeMath;
[L6037]              assume DType[msgsender_MSG] != Context;
[L6038]              assume DType[msgsender_MSG] != IERC20;
[L6039]              assume DType[msgsender_MSG] != ERC20;
[L6040]              assume DType[msgsender_MSG] != ERC20Detailed;
[L6041]              assume DType[msgsender_MSG] != ERC20Burnable;
[L6042]              assume DType[msgsender_MSG] != tokenRecipient;
[L6043]              assume DType[msgsender_MSG] != KeepToken;
[L6044]              Alloc[msgsender_MSG] := true;
[L6045]  COND FALSE  !(choice == 18)
[L6051]  COND FALSE  !(choice == 17)
[L6057]  COND FALSE  !(choice == 16)
[L6064]  COND FALSE  !(choice == 15)
[L6070]  COND TRUE   choice == 14
[L6071]              gas := gas - 21000;
[L6072]  COND TRUE   gas >= 0
[L6073]              assume amount_s312 >= 0 && amount_s312 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6074]              assume msgvalue_MSG == 0;
[L6075]  CALL        call __ret_0_approve := approve~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, spender_s312, amount_s312);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume p1 != msgsender_MSG || p2 != spender_s312;
[L3]                 call_approve_ERC200 := true;
[L3]                 call_approve_ERC200 := false;
[L3]                 revert := revert_hold;
[L581]               havoc __exception;
[L582]               revert := false;
[L583]   COND FALSE  !(__exception)
[L608]   CALL        call __ret_0_ := approve~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, spender_s312, amount_s312);
[L2837]  COND FALSE  !(DType[this] == KeepToken)
[L2842]  COND TRUE   DType[this] == ERC20Burnable
[L2843]  CALL        call __var_2 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2575]              __ret_0_ := msgsender_MSG;
[L2843]  RET         call __var_2 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2844]  COND FALSE  !(revert)
[L2855]  COND TRUE   DType[this] == KeepToken
[L2856]  CALL        call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_2, spender_s312, amount_s312);
[L3501]              __var_22 := null;
[L3502]  COND TRUE   !(owner_s590 != null)
[L3503]              revert := true;
[L2856]  RET         call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_2, spender_s312, amount_s312);
[L2857]  COND TRUE   revert
[L608]   RET         call __ret_0_ := approve~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, spender_s312, amount_s312);
[L609]               assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !(((((((__ret_0_ == true && _allowances_ERC20[this][msgsender_MSG][spender_s312] == amount_s312) && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowances_ERC20[this][p1][p2] == old(_allowances_ERC20[this][p1][p2])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]));
[L3]                 revert := revert_hold;
[L6075]  RET         call __ret_0_approve := approve~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, spender_s312, amount_s312);
[L6179]  RET         call CorralChoice_KeepToken(this);

Loop:
[L6179]  CALL        call CorralChoice_KeepToken(this);
[L5987]              havoc msgsender_MSG;
[L5988]              havoc msgvalue_MSG;
[L5989]              havoc choice;
[L5990]              havoc __ret_0_totalSupply;
[L5991]              havoc account_s258;
[L5992]              havoc __ret_0_balanceOf;
[L5993]              havoc recipient_s277;
[L5994]              havoc amount_s277;
[L5995]              havoc __ret_0_transfer;
[L5996]              havoc owner_s293;
[L5997]              havoc spender_s293;
[L5998]              havoc __ret_0_allowance;
[L5999]              havoc spender_s312;
[L6000]              havoc amount_s312;
[L6001]              havoc __ret_0_approve;
[L6002]              havoc sender_s348;
[L6003]              havoc recipient_s348;
[L6004]              havoc amount_s348;
[L6005]              havoc __ret_0_transferFrom;
[L6006]              havoc spender_s375;
[L6007]              havoc addedValue_s375;
[L6008]              havoc __ret_0_increaseAllowance;
[L6009]              havoc spender_s403;
[L6010]              havoc subtractedValue_s403;
[L6011]              havoc __ret_0_decreaseAllowance;
[L6012]              havoc name_s650;
[L6013]              havoc symbol_s650;
[L6014]              havoc decimals_s650;
[L6015]              havoc __ret_0_name;
[L6016]              havoc __ret_0_symbol;
[L6017]              havoc __ret_0_decimals;
[L6018]              havoc amount_s691;
[L6019]              havoc account_s704;
[L6020]              havoc amount_s704;
[L6021]              havoc __ret_0_NAME;
[L6022]              havoc __ret_0_SYMBOL;
[L6023]              havoc __ret_0_DECIMALS;
[L6024]              havoc __ret_0_INITIAL_SUPPLY;
[L6025]              havoc _spender_s788;
[L6026]              havoc _value_s788;
[L6027]              havoc _extraData_s788;
[L6028]              havoc success_s788;
[L6029]              havoc tmpNow;
[L6030]              havoc gas;
[L6031]              assume gas > 4000000 && gas <= 8000000;
[L6032]              tmpNow := now;
[L6033]              havoc now;
[L6034]              assume now > tmpNow;
[L6035]              assume msgsender_MSG != null;
[L6036]              assume DType[msgsender_MSG] != SafeMath;
[L6037]              assume DType[msgsender_MSG] != Context;
[L6038]              assume DType[msgsender_MSG] != IERC20;
[L6039]              assume DType[msgsender_MSG] != ERC20;
[L6040]              assume DType[msgsender_MSG] != ERC20Detailed;
[L6041]              assume DType[msgsender_MSG] != ERC20Burnable;
[L6042]              assume DType[msgsender_MSG] != tokenRecipient;
[L6043]              assume DType[msgsender_MSG] != KeepToken;
[L6044]              Alloc[msgsender_MSG] := true;
[L6045]  COND FALSE  !(choice == 18)
[L6051]  COND FALSE  !(choice == 17)
[L6057]  COND FALSE  !(choice == 16)
[L6064]  COND FALSE  !(choice == 15)
[L6070]  COND TRUE   choice == 14
[L6071]              gas := gas - 21000;
[L6072]  COND TRUE   gas >= 0
[L6073]              assume amount_s312 >= 0 && amount_s312 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6074]              assume msgvalue_MSG == 0;
[L6075]  CALL        call __ret_0_approve := approve~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, spender_s312, amount_s312);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume p1 != msgsender_MSG || p2 != spender_s312;
[L3]                 call_approve_ERC200 := true;
[L3]                 call_approve_ERC200 := false;
[L3]                 revert := revert_hold;
[L581]               havoc __exception;
[L582]               revert := false;
[L583]   COND FALSE  !(__exception)
[L608]   CALL        call __ret_0_ := approve~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, spender_s312, amount_s312);
[L2837]  COND FALSE  !(DType[this] == KeepToken)
[L2842]  COND TRUE   DType[this] == ERC20Burnable
[L2843]  CALL        call __var_2 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2575]              __ret_0_ := msgsender_MSG;
[L2843]  RET         call __var_2 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2844]  COND FALSE  !(revert)
[L2855]  COND TRUE   DType[this] == KeepToken
[L2856]  CALL        call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_2, spender_s312, amount_s312);
[L3501]              __var_22 := null;
[L3502]  COND TRUE   !(owner_s590 != null)
[L3503]              revert := true;
[L2856]  RET         call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_2, spender_s312, amount_s312);
[L2857]  COND TRUE   revert
[L608]   RET         call __ret_0_ := approve~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, spender_s312, amount_s312);
[L609]               assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !(((((((__ret_0_ == true && _allowances_ERC20[this][msgsender_MSG][spender_s312] == amount_s312) && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowances_ERC20[this][p1][p2] == old(_allowances_ERC20[this][p1][p2])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]));
[L3]                 revert := revert_hold;
[L6075]  RET         call __ret_0_approve := approve~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, spender_s312, amount_s312);
[L6179]  RET         call CorralChoice_KeepToken(this);

[2020-11-24 20:07:58,066 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-24 20:07:58,066 INFO  L82        PathProgramCache]: Analyzing trace with hash 778173668, now seen corresponding path program 1 times
[2020-11-24 20:07:58,067 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-24 20:07:58,077 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-24 20:07:58,122 INFO  L134       CoverageAnalysis]: Checked inductivity of 183 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 183 trivial. 0 not checked.
[2020-11-24 20:07:58,122 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-24 20:07:58,122 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [3] imperfect sequences [] total 3
[2020-11-24 20:07:58,123 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-24 20:07:58,123 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-11-24 20:07:58,123 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-11-24 20:07:58,123 INFO  L87              Difference]: Start difference. First operand 4141 states and 4993 transitions. cyclomatic complexity: 854 Second operand 3 states.
[2020-11-24 20:07:58,189 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-24 20:07:58,189 INFO  L93              Difference]: Finished difference Result 4751 states and 5563 transitions.
[2020-11-24 20:07:58,189 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-11-24 20:07:58,190 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 4751 states and 5563 transitions.
[2020-11-24 20:07:58,201 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-24 20:07:58,218 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 4751 states to 4464 states and 5213 transitions.
[2020-11-24 20:07:58,218 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1017
[2020-11-24 20:07:58,219 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1050
[2020-11-24 20:07:58,219 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 4464 states and 5213 transitions.
[2020-11-24 20:07:58,223 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-24 20:07:58,223 INFO  L728         BuchiCegarLoop]: Abstraction has 4464 states and 5213 transitions.
[2020-11-24 20:07:58,227 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 4464 states and 5213 transitions.
[2020-11-24 20:07:58,256 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 4464 to 3926.
[2020-11-24 20:07:58,256 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 3926 states.
[2020-11-24 20:07:58,260 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 3926 states to 3926 states and 4541 transitions.
[2020-11-24 20:07:58,261 INFO  L751         BuchiCegarLoop]: Abstraction has 3926 states and 4541 transitions.
[2020-11-24 20:07:58,261 INFO  L631         BuchiCegarLoop]: Abstraction has 3926 states and 4541 transitions.
[2020-11-24 20:07:58,261 INFO  L445         BuchiCegarLoop]: ======== Iteration 5============
[2020-11-24 20:07:58,261 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 3926 states and 4541 transitions.
[2020-11-24 20:07:58,266 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-24 20:07:58,266 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-24 20:07:58,266 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-24 20:07:58,267 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-24 20:07:58,267 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_approve_ERC200 := false;
[L3]                 call_approve_ERC200 := false;
[L3]     CALL        call main();
[L3]                 havoc p2;
[L3]                 havoc p1;
[L6169]              assume null == 0;
[L6170]  CALL        call this := FreshRefGenerator__success();
[L2373]              havoc newRef;
[L2374]              assume Alloc[newRef] == false;
[L2375]              Alloc[newRef] := true;
[L2376]              assume newRef != null;
[L6170]  RET         call this := FreshRefGenerator__success();
[L6171]              assume now >= 0;
[L6172]              assume DType[this] == KeepToken;
[L6173]              assume msgvalue_MSG == 0;
[L6174]              gas := gas - 53000;
[L6175]  CALL        call KeepToken_KeepToken(this, msgsender_MSG, msgvalue_MSG);
[L1369]              havoc __exception;
[L1370]              revert := false;
[L1371]  COND FALSE  !(__exception)
[L1396]  CALL        call KeepToken_KeepToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4025]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2561]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2546]              assume msgsender_MSG != null;
[L2547]              Balance[this] := 0;
[L2561]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2562]  COND FALSE  !(revert)
[L4025]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4026]  COND FALSE  !(revert)
[L4029]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2605]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2590]              assume msgsender_MSG != null;
[L2591]              Balance[this] := 0;
[L2605]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2606]  COND FALSE  !(revert)
[L4029]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4030]  COND FALSE  !(revert)
[L4033]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2655]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2561]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2546]              assume msgsender_MSG != null;
[L2547]              Balance[this] := 0;
[L2561]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2562]  COND FALSE  !(revert)
[L2655]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2656]  COND FALSE  !(revert)
[L2659]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2605]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2590]              assume msgsender_MSG != null;
[L2591]              Balance[this] := 0;
[L2605]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2606]  COND FALSE  !(revert)
[L2659]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2660]  COND FALSE  !(revert)
[L2663]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2627]              assume msgsender_MSG != null;
[L2628]              Balance[this] := 0;
[L2629]              _balances_ERC20[this] := zeroRefintArr();
[L2630]              sum__balances0[this] := 0;
[L2631]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2632]              sum__allowances1[this] := 0;
[L2633]              _totalSupply_ERC20[this] := 0;
[L2663]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2664]  COND FALSE  !(revert)
[L4033]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4034]  COND FALSE  !(revert)
[L4037]  CALL        call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L3809]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2561]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2546]              assume msgsender_MSG != null;
[L2547]              Balance[this] := 0;
[L2561]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2562]  COND FALSE  !(revert)
[L3809]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3810]  COND FALSE  !(revert)
[L3813]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2605]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2590]              assume msgsender_MSG != null;
[L2591]              Balance[this] := 0;
[L2605]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2606]  COND FALSE  !(revert)
[L3813]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3814]  COND FALSE  !(revert)
[L3817]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2655]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2561]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2546]              assume msgsender_MSG != null;
[L2547]              Balance[this] := 0;
[L2561]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2562]  COND FALSE  !(revert)
[L2655]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2656]  COND FALSE  !(revert)
[L2659]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2605]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2590]              assume msgsender_MSG != null;
[L2591]              Balance[this] := 0;
[L2605]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2606]  COND FALSE  !(revert)
[L2659]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2660]  COND FALSE  !(revert)
[L2663]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2627]              assume msgsender_MSG != null;
[L2628]              Balance[this] := 0;
[L2629]              _balances_ERC20[this] := zeroRefintArr();
[L2630]              sum__balances0[this] := 0;
[L2631]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2632]              sum__allowances1[this] := 0;
[L2633]              _totalSupply_ERC20[this] := 0;
[L2663]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2664]  COND FALSE  !(revert)
[L3817]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3818]  COND FALSE  !(revert)
[L3821]  CALL        call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3782]              assume msgsender_MSG != null;
[L3783]              Balance[this] := 0;
[L3821]  RET         call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3822]  COND FALSE  !(revert)
[L4037]  RET         call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L4038]  COND FALSE  !(revert)
[L4041]  CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, NAME_KeepToken[this], SYMBOL_KeepToken[this], DECIMALS_KeepToken[this]);
[L3725]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2605]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2590]              assume msgsender_MSG != null;
[L2591]              Balance[this] := 0;
[L2605]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2606]  COND FALSE  !(revert)
[L3725]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3726]  COND FALSE  !(revert)
[L3729]  CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s650, symbol_s650, decimals_s650);
[L3700]              assume msgsender_MSG != null;
[L3701]              Balance[this] := 0;
[L3702]              _name_ERC20Detailed[this] := -708534286;
[L3703]              _symbol_ERC20Detailed[this] := -708534286;
[L3704]              _decimals_ERC20Detailed[this] := 0;
[L3706]              _name_ERC20Detailed[this] := name_s650;
[L3707]              _symbol_ERC20Detailed[this] := symbol_s650;
[L3708]              _decimals_ERC20Detailed[this] := decimals_s650;
[L3729]  RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s650, symbol_s650, decimals_s650);
[L3730]  COND FALSE  !(revert)
[L4041]  RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, NAME_KeepToken[this], SYMBOL_KeepToken[this], DECIMALS_KeepToken[this]);
[L4042]  COND FALSE  !(revert)
[L4045]  CALL        call KeepToken_KeepToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3978]              assume msgsender_MSG != null;
[L3979]              Balance[this] := 0;
[L3980]              NAME_KeepToken[this] := 153019343;
[L3981]              SYMBOL_KeepToken[this] := 577946439;
[L3982]              DECIMALS_KeepToken[this] := 18;
[L3983]              INITIAL_SUPPLY_KeepToken[this] := 1000000000000000013287555072 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3985]  COND TRUE   DType[this] == KeepToken
[L3986]  CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, INITIAL_SUPPLY_KeepToken[this]);
[L3409]              __var_16 := null;
[L3410]  COND FALSE  !(!(account_s503 != null))
[L3414]  CALL        call __var_17 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s503);
[L2426]              c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2427]  COND FALSE  !(!(c_s26 >= a_s26))
[L2431]              __ret_0_ := c_s26;
[L3414]  RET         call __var_17 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s503);
[L3415]  COND FALSE  !(revert)
[L3418]              _totalSupply_ERC20[this] := __var_17;
[L3419]  CALL        call __var_18 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s503], amount_s503);
[L2426]              c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2427]  COND FALSE  !(!(c_s26 >= a_s26))
[L2431]              __ret_0_ := c_s26;
[L3419]  RET         call __var_18 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s503], amount_s503);
[L3420]  COND FALSE  !(revert)
[L3423]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s503];
[L3424]              _balances_ERC20[this][account_s503] := __var_18;
[L3425]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s503];
[L3426]              assert { :EventEmitted "Transfer_ERC20" } true;
[L3986]  RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, INITIAL_SUPPLY_KeepToken[this]);
[L3987]  COND FALSE  !(revert)
[L4045]  RET         call KeepToken_KeepToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4046]  COND FALSE  !(revert)
[L1396]  RET         call KeepToken_KeepToken__success(this, msgsender_MSG, msgvalue_MSG);
[L1397]              assume !revert && gas >= 0;
[L6175]  RET         call KeepToken_KeepToken(this, msgsender_MSG, msgvalue_MSG);
[L6176]              assume !revert && gas >= 0;
[L6179]  CALL        call CorralChoice_KeepToken(this);
[L5987]              havoc msgsender_MSG;
[L5988]              havoc msgvalue_MSG;
[L5989]              havoc choice;
[L5990]              havoc __ret_0_totalSupply;
[L5991]              havoc account_s258;
[L5992]              havoc __ret_0_balanceOf;
[L5993]              havoc recipient_s277;
[L5994]              havoc amount_s277;
[L5995]              havoc __ret_0_transfer;
[L5996]              havoc owner_s293;
[L5997]              havoc spender_s293;
[L5998]              havoc __ret_0_allowance;
[L5999]              havoc spender_s312;
[L6000]              havoc amount_s312;
[L6001]              havoc __ret_0_approve;
[L6002]              havoc sender_s348;
[L6003]              havoc recipient_s348;
[L6004]              havoc amount_s348;
[L6005]              havoc __ret_0_transferFrom;
[L6006]              havoc spender_s375;
[L6007]              havoc addedValue_s375;
[L6008]              havoc __ret_0_increaseAllowance;
[L6009]              havoc spender_s403;
[L6010]              havoc subtractedValue_s403;
[L6011]              havoc __ret_0_decreaseAllowance;
[L6012]              havoc name_s650;
[L6013]              havoc symbol_s650;
[L6014]              havoc decimals_s650;
[L6015]              havoc __ret_0_name;
[L6016]              havoc __ret_0_symbol;
[L6017]              havoc __ret_0_decimals;
[L6018]              havoc amount_s691;
[L6019]              havoc account_s704;
[L6020]              havoc amount_s704;
[L6021]              havoc __ret_0_NAME;
[L6022]              havoc __ret_0_SYMBOL;
[L6023]              havoc __ret_0_DECIMALS;
[L6024]              havoc __ret_0_INITIAL_SUPPLY;
[L6025]              havoc _spender_s788;
[L6026]              havoc _value_s788;
[L6027]              havoc _extraData_s788;
[L6028]              havoc success_s788;
[L6029]              havoc tmpNow;
[L6030]              havoc gas;
[L6031]              assume gas > 4000000 && gas <= 8000000;
[L6032]              tmpNow := now;
[L6033]              havoc now;
[L6034]              assume now > tmpNow;
[L6035]              assume msgsender_MSG != null;
[L6036]              assume DType[msgsender_MSG] != SafeMath;
[L6037]              assume DType[msgsender_MSG] != Context;
[L6038]              assume DType[msgsender_MSG] != IERC20;
[L6039]              assume DType[msgsender_MSG] != ERC20;
[L6040]              assume DType[msgsender_MSG] != ERC20Detailed;
[L6041]              assume DType[msgsender_MSG] != ERC20Burnable;
[L6042]              assume DType[msgsender_MSG] != tokenRecipient;
[L6043]              assume DType[msgsender_MSG] != KeepToken;
[L6044]              Alloc[msgsender_MSG] := true;
[L6045]  COND FALSE  !(choice == 18)
[L6051]  COND FALSE  !(choice == 17)
[L6057]  COND FALSE  !(choice == 16)
[L6064]  COND FALSE  !(choice == 15)
[L6070]  COND TRUE   choice == 14
[L6071]              gas := gas - 21000;
[L6072]  COND TRUE   gas >= 0
[L6073]              assume amount_s312 >= 0 && amount_s312 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6074]              assume msgvalue_MSG == 0;
[L6075]  CALL        call __ret_0_approve := approve~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, spender_s312, amount_s312);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume p1 != msgsender_MSG || p2 != spender_s312;
[L3]                 call_approve_ERC200 := true;
[L3]                 call_approve_ERC200 := false;
[L3]                 revert := revert_hold;
[L581]               havoc __exception;
[L582]               revert := false;
[L583]   COND FALSE  !(__exception)
[L608]   CALL        call __ret_0_ := approve~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, spender_s312, amount_s312);
[L2837]  COND TRUE   DType[this] == KeepToken
[L2838]  CALL        call __var_2 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2575]              __ret_0_ := msgsender_MSG;
[L2838]  RET         call __var_2 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2839]  COND FALSE  !(revert)
[L2855]  COND TRUE   DType[this] == KeepToken
[L2856]  CALL        call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_2, spender_s312, amount_s312);
[L3501]              __var_22 := null;
[L3502]  COND FALSE  !(!(owner_s590 != null))
[L3506]              __var_23 := null;
[L3507]  COND FALSE  !(!(spender_s590 != null))
[L3511]              sum__allowances1[owner_s590] := sum__allowances1[owner_s590] - _allowances_ERC20[this][owner_s590][spender_s590];
[L3512]              _allowances_ERC20[this][owner_s590][spender_s590] := amount_s590;
[L3513]              sum__allowances1[owner_s590] := sum__allowances1[owner_s590] + _allowances_ERC20[this][owner_s590][spender_s590];
[L3514]              assert { :EventEmitted "Approval_ERC20" } true;
[L2856]  RET         call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_2, spender_s312, amount_s312);
[L2857]  COND FALSE  !(revert)
[L2873]              __ret_0_ := true;
[L608]   RET         call __ret_0_ := approve~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, spender_s312, amount_s312);
[L609]               assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !(((((((__ret_0_ == true && _allowances_ERC20[this][msgsender_MSG][spender_s312] == amount_s312) && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowances_ERC20[this][p1][p2] == old(_allowances_ERC20[this][p1][p2])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]));
[L3]                 revert := revert_hold;
[L6075]  RET         call __ret_0_approve := approve~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, spender_s312, amount_s312);
[L6179]  RET         call CorralChoice_KeepToken(this);

Loop:
[L6179]  CALL        call CorralChoice_KeepToken(this);
[L5987]              havoc msgsender_MSG;
[L5988]              havoc msgvalue_MSG;
[L5989]              havoc choice;
[L5990]              havoc __ret_0_totalSupply;
[L5991]              havoc account_s258;
[L5992]              havoc __ret_0_balanceOf;
[L5993]              havoc recipient_s277;
[L5994]              havoc amount_s277;
[L5995]              havoc __ret_0_transfer;
[L5996]              havoc owner_s293;
[L5997]              havoc spender_s293;
[L5998]              havoc __ret_0_allowance;
[L5999]              havoc spender_s312;
[L6000]              havoc amount_s312;
[L6001]              havoc __ret_0_approve;
[L6002]              havoc sender_s348;
[L6003]              havoc recipient_s348;
[L6004]              havoc amount_s348;
[L6005]              havoc __ret_0_transferFrom;
[L6006]              havoc spender_s375;
[L6007]              havoc addedValue_s375;
[L6008]              havoc __ret_0_increaseAllowance;
[L6009]              havoc spender_s403;
[L6010]              havoc subtractedValue_s403;
[L6011]              havoc __ret_0_decreaseAllowance;
[L6012]              havoc name_s650;
[L6013]              havoc symbol_s650;
[L6014]              havoc decimals_s650;
[L6015]              havoc __ret_0_name;
[L6016]              havoc __ret_0_symbol;
[L6017]              havoc __ret_0_decimals;
[L6018]              havoc amount_s691;
[L6019]              havoc account_s704;
[L6020]              havoc amount_s704;
[L6021]              havoc __ret_0_NAME;
[L6022]              havoc __ret_0_SYMBOL;
[L6023]              havoc __ret_0_DECIMALS;
[L6024]              havoc __ret_0_INITIAL_SUPPLY;
[L6025]              havoc _spender_s788;
[L6026]              havoc _value_s788;
[L6027]              havoc _extraData_s788;
[L6028]              havoc success_s788;
[L6029]              havoc tmpNow;
[L6030]              havoc gas;
[L6031]              assume gas > 4000000 && gas <= 8000000;
[L6032]              tmpNow := now;
[L6033]              havoc now;
[L6034]              assume now > tmpNow;
[L6035]              assume msgsender_MSG != null;
[L6036]              assume DType[msgsender_MSG] != SafeMath;
[L6037]              assume DType[msgsender_MSG] != Context;
[L6038]              assume DType[msgsender_MSG] != IERC20;
[L6039]              assume DType[msgsender_MSG] != ERC20;
[L6040]              assume DType[msgsender_MSG] != ERC20Detailed;
[L6041]              assume DType[msgsender_MSG] != ERC20Burnable;
[L6042]              assume DType[msgsender_MSG] != tokenRecipient;
[L6043]              assume DType[msgsender_MSG] != KeepToken;
[L6044]              Alloc[msgsender_MSG] := true;
[L6045]  COND FALSE  !(choice == 18)
[L6051]  COND FALSE  !(choice == 17)
[L6057]  COND FALSE  !(choice == 16)
[L6064]  COND FALSE  !(choice == 15)
[L6070]  COND TRUE   choice == 14
[L6071]              gas := gas - 21000;
[L6072]  COND TRUE   gas >= 0
[L6073]              assume amount_s312 >= 0 && amount_s312 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6074]              assume msgvalue_MSG == 0;
[L6075]  CALL        call __ret_0_approve := approve~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, spender_s312, amount_s312);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume p1 != msgsender_MSG || p2 != spender_s312;
[L3]                 call_approve_ERC200 := true;
[L3]                 call_approve_ERC200 := false;
[L3]                 revert := revert_hold;
[L581]               havoc __exception;
[L582]               revert := false;
[L583]   COND FALSE  !(__exception)
[L608]   CALL        call __ret_0_ := approve~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, spender_s312, amount_s312);
[L2837]  COND TRUE   DType[this] == KeepToken
[L2838]  CALL        call __var_2 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2575]              __ret_0_ := msgsender_MSG;
[L2838]  RET         call __var_2 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2839]  COND FALSE  !(revert)
[L2855]  COND TRUE   DType[this] == KeepToken
[L2856]  CALL        call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_2, spender_s312, amount_s312);
[L3501]              __var_22 := null;
[L3502]  COND FALSE  !(!(owner_s590 != null))
[L3506]              __var_23 := null;
[L3507]  COND FALSE  !(!(spender_s590 != null))
[L3511]              sum__allowances1[owner_s590] := sum__allowances1[owner_s590] - _allowances_ERC20[this][owner_s590][spender_s590];
[L3512]              _allowances_ERC20[this][owner_s590][spender_s590] := amount_s590;
[L3513]              sum__allowances1[owner_s590] := sum__allowances1[owner_s590] + _allowances_ERC20[this][owner_s590][spender_s590];
[L3514]              assert { :EventEmitted "Approval_ERC20" } true;
[L2856]  RET         call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_2, spender_s312, amount_s312);
[L2857]  COND FALSE  !(revert)
[L2873]              __ret_0_ := true;
[L608]   RET         call __ret_0_ := approve~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, spender_s312, amount_s312);
[L609]               assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !(((((((__ret_0_ == true && _allowances_ERC20[this][msgsender_MSG][spender_s312] == amount_s312) && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowances_ERC20[this][p1][p2] == old(_allowances_ERC20[this][p1][p2])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]));
[L3]                 revert := revert_hold;
[L6075]  RET         call __ret_0_approve := approve~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, spender_s312, amount_s312);
[L6179]  RET         call CorralChoice_KeepToken(this);

[2020-11-24 20:07:58,272 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-24 20:07:58,272 INFO  L82        PathProgramCache]: Analyzing trace with hash -207959884, now seen corresponding path program 1 times
[2020-11-24 20:07:58,272 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-24 20:07:58,306 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-24 20:07:58,547 INFO  L134       CoverageAnalysis]: Checked inductivity of 188 backedges. 8 proven. 0 refuted. 0 times theorem prover too weak. 180 trivial. 0 not checked.
[2020-11-24 20:07:58,547 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-24 20:07:58,547 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [17] imperfect sequences [] total 17
[2020-11-24 20:07:58,547 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-24 20:07:58,548 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 18 interpolants.
[2020-11-24 20:07:58,548 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=36, Invalid=270, Unknown=0, NotChecked=0, Total=306
[2020-11-24 20:07:58,548 INFO  L87              Difference]: Start difference. First operand 3926 states and 4541 transitions. cyclomatic complexity: 617 Second operand 18 states.
[2020-11-24 20:08:01,718 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-24 20:08:01,718 INFO  L93              Difference]: Finished difference Result 4086 states and 4726 transitions.
[2020-11-24 20:08:01,718 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 20 states. 
[2020-11-24 20:08:01,718 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 4086 states and 4726 transitions.
[2020-11-24 20:08:01,726 INFO  L131   ngComponentsAnalysis]: Automaton has 3 accepting balls. 6
[2020-11-24 20:08:01,737 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 4086 states to 4086 states and 4726 transitions.
[2020-11-24 20:08:01,737 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 954
[2020-11-24 20:08:01,739 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 954
[2020-11-24 20:08:01,739 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 4086 states and 4726 transitions.
[2020-11-24 20:08:01,743 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-24 20:08:01,743 INFO  L728         BuchiCegarLoop]: Abstraction has 4086 states and 4726 transitions.
[2020-11-24 20:08:01,746 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 4086 states and 4726 transitions.
[2020-11-24 20:08:01,778 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 4086 to 4053.
[2020-11-24 20:08:01,778 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 4053 states.
[2020-11-24 20:08:01,782 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 4053 states to 4053 states and 4683 transitions.
[2020-11-24 20:08:01,782 INFO  L751         BuchiCegarLoop]: Abstraction has 4053 states and 4683 transitions.
[2020-11-24 20:08:01,782 INFO  L631         BuchiCegarLoop]: Abstraction has 4053 states and 4683 transitions.
[2020-11-24 20:08:01,782 INFO  L445         BuchiCegarLoop]: ======== Iteration 6============
[2020-11-24 20:08:01,782 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 4053 states and 4683 transitions.
[2020-11-24 20:08:01,786 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-24 20:08:01,786 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-24 20:08:01,786 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-24 20:08:01,788 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-24 20:08:01,788 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_approve_ERC200 := false;
[L3]                 call_approve_ERC200 := false;
[L3]     CALL        call main();
[L3]                 havoc p2;
[L3]                 havoc p1;
[L6169]              assume null == 0;
[L6170]  CALL        call this := FreshRefGenerator__success();
[L2373]              havoc newRef;
[L2374]              assume Alloc[newRef] == false;
[L2375]              Alloc[newRef] := true;
[L2376]              assume newRef != null;
[L6170]  RET         call this := FreshRefGenerator__success();
[L6171]              assume now >= 0;
[L6172]              assume DType[this] == KeepToken;
[L6173]              assume msgvalue_MSG == 0;
[L6174]              gas := gas - 53000;
[L6175]  CALL        call KeepToken_KeepToken(this, msgsender_MSG, msgvalue_MSG);
[L1369]              havoc __exception;
[L1370]              revert := false;
[L1371]  COND TRUE   __exception
[L1372]              __tmp__Balance := Balance;
[L1373]              __tmp__DType := DType;
[L1374]              __tmp__Alloc := Alloc;
[L1375]              __tmp__balance_ADDR := balance_ADDR;
[L1376]              __tmp__M_Ref_int := M_Ref_int;
[L1377]              __tmp__sum__balances0 := sum__balances0;
[L1378]              __tmp__alloc__allowances_ERC20_lvl0 := alloc__allowances_ERC20_lvl0;
[L1379]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L1380]              __tmp__sum__allowances1 := sum__allowances1;
[L1381]              __tmp__Length := Length;
[L1382]              __tmp__now := now;
[L1383]              __tmp___balances_ERC20 := _balances_ERC20;
[L1384]              __tmp___allowances_ERC20 := _allowances_ERC20;
[L1385]              __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L1386]              __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L1387]              __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L1388]              __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L1389]              __tmp__NAME_KeepToken := NAME_KeepToken;
[L1390]              __tmp__SYMBOL_KeepToken := SYMBOL_KeepToken;
[L1391]              __tmp__DECIMALS_KeepToken := DECIMALS_KeepToken;
[L1392]              __tmp__INITIAL_SUPPLY_KeepToken := INITIAL_SUPPLY_KeepToken;
[L1393]  CALL        call KeepToken_KeepToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L3997]  CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L2553]  CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2538]              assume msgsender_MSG != null;
[L2539]              __tmp__Balance[this] := 0;
[L2553]  RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2554]  COND FALSE  !(revert)
[L3997]  RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L3998]  COND FALSE  !(revert)
[L4001]  CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L2597]  CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2582]              assume msgsender_MSG != null;
[L2583]              __tmp__Balance[this] := 0;
[L2597]  RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2598]  COND FALSE  !(revert)
[L4001]  RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4002]  COND FALSE  !(revert)
[L4005]  CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L2639]  CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L2553]  CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2538]              assume msgsender_MSG != null;
[L2539]              __tmp__Balance[this] := 0;
[L2553]  RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2554]  COND FALSE  !(revert)
[L2639]  RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L2640]  COND FALSE  !(revert)
[L2643]  CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L2597]  CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2582]              assume msgsender_MSG != null;
[L2583]              __tmp__Balance[this] := 0;
[L2597]  RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2598]  COND FALSE  !(revert)
[L2643]  RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L2644]  COND FALSE  !(revert)
[L2647]  CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2614]              assume msgsender_MSG != null;
[L2615]              __tmp__Balance[this] := 0;
[L2616]              __tmp___balances_ERC20[this] := zeroRefintArr();
[L2617]              __tmp__sum__balances0[this] := 0;
[L2618]              __tmp___allowances_ERC20[this] := zeroRefRefintArr();
[L2619]              __tmp__sum__allowances1[this] := 0;
[L2620]              __tmp___totalSupply_ERC20[this] := 0;
[L2647]  RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2648]  COND FALSE  !(revert)
[L4005]  RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4006]  COND FALSE  !(revert)
[L4009]  CALL        call ERC20Burnable_ERC20Burnable__fail(this, msgsender_MSG, msgvalue_MSG);
[L3789]  CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L2553]  CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2538]              assume msgsender_MSG != null;
[L2539]              __tmp__Balance[this] := 0;
[L2553]  RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2554]  COND FALSE  !(revert)
[L3789]  RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L3790]  COND FALSE  !(revert)
[L3793]  CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L2597]  CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2582]              assume msgsender_MSG != null;
[L2583]              __tmp__Balance[this] := 0;
[L2597]  RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2598]  COND FALSE  !(revert)
[L3793]  RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L3794]  COND FALSE  !(revert)
[L3797]  CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L2639]  CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L2553]  CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2538]              assume msgsender_MSG != null;
[L2539]              __tmp__Balance[this] := 0;
[L2553]  RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2554]  COND FALSE  !(revert)
[L2639]  RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L2640]  COND FALSE  !(revert)
[L2643]  CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L2597]  CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2582]              assume msgsender_MSG != null;
[L2583]              __tmp__Balance[this] := 0;
[L2597]  RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2598]  COND FALSE  !(revert)
[L2643]  RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L2644]  COND FALSE  !(revert)
[L2647]  CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2614]              assume msgsender_MSG != null;
[L2615]              __tmp__Balance[this] := 0;
[L2616]              __tmp___balances_ERC20[this] := zeroRefintArr();
[L2617]              __tmp__sum__balances0[this] := 0;
[L2618]              __tmp___allowances_ERC20[this] := zeroRefRefintArr();
[L2619]              __tmp__sum__allowances1[this] := 0;
[L2620]              __tmp___totalSupply_ERC20[this] := 0;
[L2647]  RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2648]  COND FALSE  !(revert)
[L3797]  RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L3798]  COND FALSE  !(revert)
[L3801]  CALL        call ERC20Burnable_ERC20Burnable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3774]              assume msgsender_MSG != null;
[L3775]              __tmp__Balance[this] := 0;
[L3801]  RET         call ERC20Burnable_ERC20Burnable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3802]  COND FALSE  !(revert)
[L4009]  RET         call ERC20Burnable_ERC20Burnable__fail(this, msgsender_MSG, msgvalue_MSG);
[L4010]  COND FALSE  !(revert)
[L4013]  CALL        call ERC20Detailed_ERC20Detailed__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__NAME_KeepToken[this], __tmp__SYMBOL_KeepToken[this], __tmp__DECIMALS_KeepToken[this]);
[L3713]  CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L2597]  CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2582]              assume msgsender_MSG != null;
[L2583]              __tmp__Balance[this] := 0;
[L2597]  RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2598]  COND FALSE  !(revert)
[L3713]  RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L3714]  COND FALSE  !(revert)
[L3717]  CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, name_s650, symbol_s650, decimals_s650);
[L3686]              assume msgsender_MSG != null;
[L3687]              __tmp__Balance[this] := 0;
[L3688]              __tmp___name_ERC20Detailed[this] := -708534286;
[L3689]              __tmp___symbol_ERC20Detailed[this] := -708534286;
[L3690]              __tmp___decimals_ERC20Detailed[this] := 0;
[L3692]              __tmp___name_ERC20Detailed[this] := name_s650;
[L3693]              __tmp___symbol_ERC20Detailed[this] := symbol_s650;
[L3694]              __tmp___decimals_ERC20Detailed[this] := decimals_s650;
[L3717]  RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, name_s650, symbol_s650, decimals_s650);
[L3718]  COND FALSE  !(revert)
[L4013]  RET         call ERC20Detailed_ERC20Detailed__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__NAME_KeepToken[this], __tmp__SYMBOL_KeepToken[this], __tmp__DECIMALS_KeepToken[this]);
[L4014]  COND FALSE  !(revert)
[L4017]  CALL        call KeepToken_KeepToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3958]              assume msgsender_MSG != null;
[L3959]              __tmp__Balance[this] := 0;
[L3960]              __tmp__NAME_KeepToken[this] := 153019343;
[L3961]              __tmp__SYMBOL_KeepToken[this] := 577946439;
[L3962]              __tmp__DECIMALS_KeepToken[this] := 18;
[L3963]              __tmp__INITIAL_SUPPLY_KeepToken[this] := 1000000000000000013287555072 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3965]  COND TRUE   __tmp__DType[this] == KeepToken
[L3966]  CALL        call _mint~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, __tmp__INITIAL_SUPPLY_KeepToken[this]);
[L3385]              __var_16 := null;
[L3386]  COND FALSE  !(!(account_s503 != null))
[L3390]  CALL        call __var_17 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___totalSupply_ERC20[this], amount_s503);
[L2414]              c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2415]  COND FALSE  !(!(c_s26 >= a_s26))
[L2419]              __ret_0_ := c_s26;
[L3390]  RET         call __var_17 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___totalSupply_ERC20[this], amount_s503);
[L3391]  COND FALSE  !(revert)
[L3394]              __tmp___totalSupply_ERC20[this] := __var_17;
[L3395]  CALL        call __var_18 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][account_s503], amount_s503);
[L2414]              c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2415]  COND FALSE  !(!(c_s26 >= a_s26))
[L2419]              __ret_0_ := c_s26;
[L3395]  RET         call __var_18 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][account_s503], amount_s503);
[L3396]  COND FALSE  !(revert)
[L3399]              __tmp__sum__balances0[this] := __tmp__sum__balances0[this] - __tmp___balances_ERC20[this][account_s503];
[L3400]              __tmp___balances_ERC20[this][account_s503] := __var_18;
[L3401]              __tmp__sum__balances0[this] := __tmp__sum__balances0[this] + __tmp___balances_ERC20[this][account_s503];
[L3966]  RET         call _mint~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, __tmp__INITIAL_SUPPLY_KeepToken[this]);
[L3967]  COND FALSE  !(revert)
[L4017]  RET         call KeepToken_KeepToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4018]  COND FALSE  !(revert)
[L1393]  RET         call KeepToken_KeepToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L1394]              assume revert || gas < 0;
[L6175]  RET         call KeepToken_KeepToken(this, msgsender_MSG, msgvalue_MSG);
[L6176]              assume !revert && gas >= 0;
[L6179]  CALL        call CorralChoice_KeepToken(this);
[L5987]              havoc msgsender_MSG;
[L5988]              havoc msgvalue_MSG;
[L5989]              havoc choice;
[L5990]              havoc __ret_0_totalSupply;
[L5991]              havoc account_s258;
[L5992]              havoc __ret_0_balanceOf;
[L5993]              havoc recipient_s277;
[L5994]              havoc amount_s277;
[L5995]              havoc __ret_0_transfer;
[L5996]              havoc owner_s293;
[L5997]              havoc spender_s293;
[L5998]              havoc __ret_0_allowance;
[L5999]              havoc spender_s312;
[L6000]              havoc amount_s312;
[L6001]              havoc __ret_0_approve;
[L6002]              havoc sender_s348;
[L6003]              havoc recipient_s348;
[L6004]              havoc amount_s348;
[L6005]              havoc __ret_0_transferFrom;
[L6006]              havoc spender_s375;
[L6007]              havoc addedValue_s375;
[L6008]              havoc __ret_0_increaseAllowance;
[L6009]              havoc spender_s403;
[L6010]              havoc subtractedValue_s403;
[L6011]              havoc __ret_0_decreaseAllowance;
[L6012]              havoc name_s650;
[L6013]              havoc symbol_s650;
[L6014]              havoc decimals_s650;
[L6015]              havoc __ret_0_name;
[L6016]              havoc __ret_0_symbol;
[L6017]              havoc __ret_0_decimals;
[L6018]              havoc amount_s691;
[L6019]              havoc account_s704;
[L6020]              havoc amount_s704;
[L6021]              havoc __ret_0_NAME;
[L6022]              havoc __ret_0_SYMBOL;
[L6023]              havoc __ret_0_DECIMALS;
[L6024]              havoc __ret_0_INITIAL_SUPPLY;
[L6025]              havoc _spender_s788;
[L6026]              havoc _value_s788;
[L6027]              havoc _extraData_s788;
[L6028]              havoc success_s788;
[L6029]              havoc tmpNow;
[L6030]              havoc gas;
[L6031]              assume gas > 4000000 && gas <= 8000000;
[L6032]              tmpNow := now;
[L6033]              havoc now;
[L6034]              assume now > tmpNow;
[L6035]              assume msgsender_MSG != null;
[L6036]              assume DType[msgsender_MSG] != SafeMath;
[L6037]              assume DType[msgsender_MSG] != Context;
[L6038]              assume DType[msgsender_MSG] != IERC20;
[L6039]              assume DType[msgsender_MSG] != ERC20;
[L6040]              assume DType[msgsender_MSG] != ERC20Detailed;
[L6041]              assume DType[msgsender_MSG] != ERC20Burnable;
[L6042]              assume DType[msgsender_MSG] != tokenRecipient;
[L6043]              assume DType[msgsender_MSG] != KeepToken;
[L6044]              Alloc[msgsender_MSG] := true;
[L6045]  COND FALSE  !(choice == 18)
[L6051]  COND FALSE  !(choice == 17)
[L6057]  COND FALSE  !(choice == 16)
[L6064]  COND FALSE  !(choice == 15)
[L6070]  COND TRUE   choice == 14
[L6071]              gas := gas - 21000;
[L6072]  COND TRUE   gas >= 0
[L6073]              assume amount_s312 >= 0 && amount_s312 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6074]              assume msgvalue_MSG == 0;
[L6075]  CALL        call __ret_0_approve := approve~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, spender_s312, amount_s312);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume p1 != msgsender_MSG || p2 != spender_s312;
[L3]                 call_approve_ERC200 := true;
[L3]                 call_approve_ERC200 := false;
[L3]                 revert := revert_hold;
[L581]               havoc __exception;
[L582]               revert := false;
[L583]   COND FALSE  !(__exception)
[L608]   CALL        call __ret_0_ := approve~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, spender_s312, amount_s312);
[L2837]  COND TRUE   DType[this] == KeepToken
[L2838]  CALL        call __var_2 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2575]              __ret_0_ := msgsender_MSG;
[L2838]  RET         call __var_2 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2839]  COND FALSE  !(revert)
[L2855]  COND TRUE   DType[this] == KeepToken
[L2856]  CALL        call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_2, spender_s312, amount_s312);
[L3501]              __var_22 := null;
[L3502]  COND FALSE  !(!(owner_s590 != null))
[L3506]              __var_23 := null;
[L3507]  COND FALSE  !(!(spender_s590 != null))
[L3511]              sum__allowances1[owner_s590] := sum__allowances1[owner_s590] - _allowances_ERC20[this][owner_s590][spender_s590];
[L3512]              _allowances_ERC20[this][owner_s590][spender_s590] := amount_s590;
[L3513]              sum__allowances1[owner_s590] := sum__allowances1[owner_s590] + _allowances_ERC20[this][owner_s590][spender_s590];
[L3514]              assert { :EventEmitted "Approval_ERC20" } true;
[L2856]  RET         call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_2, spender_s312, amount_s312);
[L2857]  COND FALSE  !(revert)
[L2873]              __ret_0_ := true;
[L608]   RET         call __ret_0_ := approve~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, spender_s312, amount_s312);
[L609]               assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !(((((((__ret_0_ == true && _allowances_ERC20[this][msgsender_MSG][spender_s312] == amount_s312) && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowances_ERC20[this][p1][p2] == old(_allowances_ERC20[this][p1][p2])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]));
[L3]                 revert := revert_hold;
[L6075]  RET         call __ret_0_approve := approve~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, spender_s312, amount_s312);
[L6179]  RET         call CorralChoice_KeepToken(this);

Loop:
[L6179]  CALL        call CorralChoice_KeepToken(this);
[L5987]              havoc msgsender_MSG;
[L5988]              havoc msgvalue_MSG;
[L5989]              havoc choice;
[L5990]              havoc __ret_0_totalSupply;
[L5991]              havoc account_s258;
[L5992]              havoc __ret_0_balanceOf;
[L5993]              havoc recipient_s277;
[L5994]              havoc amount_s277;
[L5995]              havoc __ret_0_transfer;
[L5996]              havoc owner_s293;
[L5997]              havoc spender_s293;
[L5998]              havoc __ret_0_allowance;
[L5999]              havoc spender_s312;
[L6000]              havoc amount_s312;
[L6001]              havoc __ret_0_approve;
[L6002]              havoc sender_s348;
[L6003]              havoc recipient_s348;
[L6004]              havoc amount_s348;
[L6005]              havoc __ret_0_transferFrom;
[L6006]              havoc spender_s375;
[L6007]              havoc addedValue_s375;
[L6008]              havoc __ret_0_increaseAllowance;
[L6009]              havoc spender_s403;
[L6010]              havoc subtractedValue_s403;
[L6011]              havoc __ret_0_decreaseAllowance;
[L6012]              havoc name_s650;
[L6013]              havoc symbol_s650;
[L6014]              havoc decimals_s650;
[L6015]              havoc __ret_0_name;
[L6016]              havoc __ret_0_symbol;
[L6017]              havoc __ret_0_decimals;
[L6018]              havoc amount_s691;
[L6019]              havoc account_s704;
[L6020]              havoc amount_s704;
[L6021]              havoc __ret_0_NAME;
[L6022]              havoc __ret_0_SYMBOL;
[L6023]              havoc __ret_0_DECIMALS;
[L6024]              havoc __ret_0_INITIAL_SUPPLY;
[L6025]              havoc _spender_s788;
[L6026]              havoc _value_s788;
[L6027]              havoc _extraData_s788;
[L6028]              havoc success_s788;
[L6029]              havoc tmpNow;
[L6030]              havoc gas;
[L6031]              assume gas > 4000000 && gas <= 8000000;
[L6032]              tmpNow := now;
[L6033]              havoc now;
[L6034]              assume now > tmpNow;
[L6035]              assume msgsender_MSG != null;
[L6036]              assume DType[msgsender_MSG] != SafeMath;
[L6037]              assume DType[msgsender_MSG] != Context;
[L6038]              assume DType[msgsender_MSG] != IERC20;
[L6039]              assume DType[msgsender_MSG] != ERC20;
[L6040]              assume DType[msgsender_MSG] != ERC20Detailed;
[L6041]              assume DType[msgsender_MSG] != ERC20Burnable;
[L6042]              assume DType[msgsender_MSG] != tokenRecipient;
[L6043]              assume DType[msgsender_MSG] != KeepToken;
[L6044]              Alloc[msgsender_MSG] := true;
[L6045]  COND FALSE  !(choice == 18)
[L6051]  COND FALSE  !(choice == 17)
[L6057]  COND FALSE  !(choice == 16)
[L6064]  COND FALSE  !(choice == 15)
[L6070]  COND TRUE   choice == 14
[L6071]              gas := gas - 21000;
[L6072]  COND TRUE   gas >= 0
[L6073]              assume amount_s312 >= 0 && amount_s312 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6074]              assume msgvalue_MSG == 0;
[L6075]  CALL        call __ret_0_approve := approve~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, spender_s312, amount_s312);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume p1 != msgsender_MSG || p2 != spender_s312;
[L3]                 call_approve_ERC200 := true;
[L3]                 call_approve_ERC200 := false;
[L3]                 revert := revert_hold;
[L581]               havoc __exception;
[L582]               revert := false;
[L583]   COND FALSE  !(__exception)
[L608]   CALL        call __ret_0_ := approve~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, spender_s312, amount_s312);
[L2837]  COND TRUE   DType[this] == KeepToken
[L2838]  CALL        call __var_2 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2575]              __ret_0_ := msgsender_MSG;
[L2838]  RET         call __var_2 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2839]  COND FALSE  !(revert)
[L2855]  COND TRUE   DType[this] == KeepToken
[L2856]  CALL        call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_2, spender_s312, amount_s312);
[L3501]              __var_22 := null;
[L3502]  COND FALSE  !(!(owner_s590 != null))
[L3506]              __var_23 := null;
[L3507]  COND FALSE  !(!(spender_s590 != null))
[L3511]              sum__allowances1[owner_s590] := sum__allowances1[owner_s590] - _allowances_ERC20[this][owner_s590][spender_s590];
[L3512]              _allowances_ERC20[this][owner_s590][spender_s590] := amount_s590;
[L3513]              sum__allowances1[owner_s590] := sum__allowances1[owner_s590] + _allowances_ERC20[this][owner_s590][spender_s590];
[L3514]              assert { :EventEmitted "Approval_ERC20" } true;
[L2856]  RET         call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_2, spender_s312, amount_s312);
[L2857]  COND FALSE  !(revert)
[L2873]              __ret_0_ := true;
[L608]   RET         call __ret_0_ := approve~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, spender_s312, amount_s312);
[L609]               assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !(((((((__ret_0_ == true && _allowances_ERC20[this][msgsender_MSG][spender_s312] == amount_s312) && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowances_ERC20[this][p1][p2] == old(_allowances_ERC20[this][p1][p2])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]));
[L3]                 revert := revert_hold;
[L6075]  RET         call __ret_0_approve := approve~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, spender_s312, amount_s312);
[L6179]  RET         call CorralChoice_KeepToken(this);

[2020-11-24 20:08:01,792 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-24 20:08:01,793 INFO  L82        PathProgramCache]: Analyzing trace with hash 1805062185, now seen corresponding path program 1 times
[2020-11-24 20:08:01,793 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-24 20:08:01,805 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-24 20:08:01,854 INFO  L134       CoverageAnalysis]: Checked inductivity of 188 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 188 trivial. 0 not checked.
[2020-11-24 20:08:01,855 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-24 20:08:01,855 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [4] imperfect sequences [] total 4
[2020-11-24 20:08:01,855 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-24 20:08:01,855 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-11-24 20:08:01,855 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=5, Invalid=7, Unknown=0, NotChecked=0, Total=12
[2020-11-24 20:08:01,855 INFO  L87              Difference]: Start difference. First operand 4053 states and 4683 transitions. cyclomatic complexity: 634 Second operand 4 states.
[2020-11-24 20:08:02,017 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-24 20:08:02,017 INFO  L93              Difference]: Finished difference Result 4879 states and 5771 transitions.
[2020-11-24 20:08:02,017 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 5 states. 
[2020-11-24 20:08:02,018 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 4879 states and 5771 transitions.
[2020-11-24 20:08:02,029 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 16
[2020-11-24 20:08:02,044 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 4879 states to 4710 states and 5594 transitions.
[2020-11-24 20:08:02,044 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1144
[2020-11-24 20:08:02,044 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1144
[2020-11-24 20:08:02,045 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 4710 states and 5594 transitions.
[2020-11-24 20:08:02,049 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-24 20:08:02,049 INFO  L728         BuchiCegarLoop]: Abstraction has 4710 states and 5594 transitions.
[2020-11-24 20:08:02,053 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 4710 states and 5594 transitions.
[2020-11-24 20:08:02,088 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 4710 to 4103.
[2020-11-24 20:08:02,089 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 4103 states.
[2020-11-24 20:08:02,093 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 4103 states to 4103 states and 4778 transitions.
[2020-11-24 20:08:02,093 INFO  L751         BuchiCegarLoop]: Abstraction has 4103 states and 4778 transitions.
[2020-11-24 20:08:02,093 INFO  L631         BuchiCegarLoop]: Abstraction has 4103 states and 4778 transitions.
[2020-11-24 20:08:02,093 INFO  L445         BuchiCegarLoop]: ======== Iteration 7============
[2020-11-24 20:08:02,093 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 4103 states and 4778 transitions.
[2020-11-24 20:08:02,098 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 8
[2020-11-24 20:08:02,098 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-24 20:08:02,098 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-24 20:08:02,099 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-24 20:08:02,099 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_approve_ERC200 := false;
[L3]                 call_approve_ERC200 := false;
[L3]     CALL        call main();
[L3]                 havoc p2;
[L3]                 havoc p1;
[L6169]              assume null == 0;
[L6170]  CALL        call this := FreshRefGenerator__success();
[L2373]              havoc newRef;
[L2374]              assume Alloc[newRef] == false;
[L2375]              Alloc[newRef] := true;
[L2376]              assume newRef != null;
[L6170]  RET         call this := FreshRefGenerator__success();
[L6171]              assume now >= 0;
[L6172]              assume DType[this] == KeepToken;
[L6173]              assume msgvalue_MSG == 0;
[L6174]              gas := gas - 53000;
[L6175]  CALL        call KeepToken_KeepToken(this, msgsender_MSG, msgvalue_MSG);
[L1369]              havoc __exception;
[L1370]              revert := false;
[L1371]  COND FALSE  !(__exception)
[L1396]  CALL        call KeepToken_KeepToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4025]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2561]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2546]              assume msgsender_MSG != null;
[L2547]              Balance[this] := 0;
[L2561]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2562]  COND FALSE  !(revert)
[L4025]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4026]  COND FALSE  !(revert)
[L4029]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2605]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2590]              assume msgsender_MSG != null;
[L2591]              Balance[this] := 0;
[L2605]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2606]  COND FALSE  !(revert)
[L4029]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4030]  COND FALSE  !(revert)
[L4033]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2655]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2561]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2546]              assume msgsender_MSG != null;
[L2547]              Balance[this] := 0;
[L2561]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2562]  COND FALSE  !(revert)
[L2655]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2656]  COND FALSE  !(revert)
[L2659]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2605]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2590]              assume msgsender_MSG != null;
[L2591]              Balance[this] := 0;
[L2605]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2606]  COND FALSE  !(revert)
[L2659]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2660]  COND FALSE  !(revert)
[L2663]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2627]              assume msgsender_MSG != null;
[L2628]              Balance[this] := 0;
[L2629]              _balances_ERC20[this] := zeroRefintArr();
[L2630]              sum__balances0[this] := 0;
[L2631]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2632]              sum__allowances1[this] := 0;
[L2633]              _totalSupply_ERC20[this] := 0;
[L2663]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2664]  COND FALSE  !(revert)
[L4033]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4034]  COND FALSE  !(revert)
[L4037]  CALL        call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L3809]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2561]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2546]              assume msgsender_MSG != null;
[L2547]              Balance[this] := 0;
[L2561]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2562]  COND FALSE  !(revert)
[L3809]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3810]  COND FALSE  !(revert)
[L3813]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2605]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2590]              assume msgsender_MSG != null;
[L2591]              Balance[this] := 0;
[L2605]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2606]  COND FALSE  !(revert)
[L3813]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3814]  COND FALSE  !(revert)
[L3817]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2655]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2561]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2546]              assume msgsender_MSG != null;
[L2547]              Balance[this] := 0;
[L2561]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2562]  COND FALSE  !(revert)
[L2655]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2656]  COND FALSE  !(revert)
[L2659]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2605]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2590]              assume msgsender_MSG != null;
[L2591]              Balance[this] := 0;
[L2605]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2606]  COND FALSE  !(revert)
[L2659]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2660]  COND FALSE  !(revert)
[L2663]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2627]              assume msgsender_MSG != null;
[L2628]              Balance[this] := 0;
[L2629]              _balances_ERC20[this] := zeroRefintArr();
[L2630]              sum__balances0[this] := 0;
[L2631]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2632]              sum__allowances1[this] := 0;
[L2633]              _totalSupply_ERC20[this] := 0;
[L2663]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2664]  COND FALSE  !(revert)
[L3817]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3818]  COND FALSE  !(revert)
[L3821]  CALL        call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3782]              assume msgsender_MSG != null;
[L3783]              Balance[this] := 0;
[L3821]  RET         call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3822]  COND FALSE  !(revert)
[L4037]  RET         call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L4038]  COND FALSE  !(revert)
[L4041]  CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, NAME_KeepToken[this], SYMBOL_KeepToken[this], DECIMALS_KeepToken[this]);
[L3725]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2605]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2590]              assume msgsender_MSG != null;
[L2591]              Balance[this] := 0;
[L2605]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2606]  COND FALSE  !(revert)
[L3725]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3726]  COND FALSE  !(revert)
[L3729]  CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s650, symbol_s650, decimals_s650);
[L3700]              assume msgsender_MSG != null;
[L3701]              Balance[this] := 0;
[L3702]              _name_ERC20Detailed[this] := -708534286;
[L3703]              _symbol_ERC20Detailed[this] := -708534286;
[L3704]              _decimals_ERC20Detailed[this] := 0;
[L3706]              _name_ERC20Detailed[this] := name_s650;
[L3707]              _symbol_ERC20Detailed[this] := symbol_s650;
[L3708]              _decimals_ERC20Detailed[this] := decimals_s650;
[L3729]  RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s650, symbol_s650, decimals_s650);
[L3730]  COND FALSE  !(revert)
[L4041]  RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, NAME_KeepToken[this], SYMBOL_KeepToken[this], DECIMALS_KeepToken[this]);
[L4042]  COND FALSE  !(revert)
[L4045]  CALL        call KeepToken_KeepToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3978]              assume msgsender_MSG != null;
[L3979]              Balance[this] := 0;
[L3980]              NAME_KeepToken[this] := 153019343;
[L3981]              SYMBOL_KeepToken[this] := 577946439;
[L3982]              DECIMALS_KeepToken[this] := 18;
[L3983]              INITIAL_SUPPLY_KeepToken[this] := 1000000000000000013287555072 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3985]  COND TRUE   DType[this] == KeepToken
[L3986]  CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, INITIAL_SUPPLY_KeepToken[this]);
[L3409]              __var_16 := null;
[L3410]  COND FALSE  !(!(account_s503 != null))
[L3414]  CALL        call __var_17 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s503);
[L2426]              c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2427]  COND FALSE  !(!(c_s26 >= a_s26))
[L2431]              __ret_0_ := c_s26;
[L3414]  RET         call __var_17 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s503);
[L3415]  COND FALSE  !(revert)
[L3418]              _totalSupply_ERC20[this] := __var_17;
[L3419]  CALL        call __var_18 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s503], amount_s503);
[L2426]              c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2427]  COND FALSE  !(!(c_s26 >= a_s26))
[L2431]              __ret_0_ := c_s26;
[L3419]  RET         call __var_18 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s503], amount_s503);
[L3420]  COND FALSE  !(revert)
[L3423]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s503];
[L3424]              _balances_ERC20[this][account_s503] := __var_18;
[L3425]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s503];
[L3426]              assert { :EventEmitted "Transfer_ERC20" } true;
[L3986]  RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, INITIAL_SUPPLY_KeepToken[this]);
[L3987]  COND FALSE  !(revert)
[L4045]  RET         call KeepToken_KeepToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4046]  COND FALSE  !(revert)
[L1396]  RET         call KeepToken_KeepToken__success(this, msgsender_MSG, msgvalue_MSG);
[L1397]              assume !revert && gas >= 0;
[L6175]  RET         call KeepToken_KeepToken(this, msgsender_MSG, msgvalue_MSG);
[L6176]              assume !revert && gas >= 0;
[L6179]  CALL        call CorralChoice_KeepToken(this);
[L5987]              havoc msgsender_MSG;
[L5988]              havoc msgvalue_MSG;
[L5989]              havoc choice;
[L5990]              havoc __ret_0_totalSupply;
[L5991]              havoc account_s258;
[L5992]              havoc __ret_0_balanceOf;
[L5993]              havoc recipient_s277;
[L5994]              havoc amount_s277;
[L5995]              havoc __ret_0_transfer;
[L5996]              havoc owner_s293;
[L5997]              havoc spender_s293;
[L5998]              havoc __ret_0_allowance;
[L5999]              havoc spender_s312;
[L6000]              havoc amount_s312;
[L6001]              havoc __ret_0_approve;
[L6002]              havoc sender_s348;
[L6003]              havoc recipient_s348;
[L6004]              havoc amount_s348;
[L6005]              havoc __ret_0_transferFrom;
[L6006]              havoc spender_s375;
[L6007]              havoc addedValue_s375;
[L6008]              havoc __ret_0_increaseAllowance;
[L6009]              havoc spender_s403;
[L6010]              havoc subtractedValue_s403;
[L6011]              havoc __ret_0_decreaseAllowance;
[L6012]              havoc name_s650;
[L6013]              havoc symbol_s650;
[L6014]              havoc decimals_s650;
[L6015]              havoc __ret_0_name;
[L6016]              havoc __ret_0_symbol;
[L6017]              havoc __ret_0_decimals;
[L6018]              havoc amount_s691;
[L6019]              havoc account_s704;
[L6020]              havoc amount_s704;
[L6021]              havoc __ret_0_NAME;
[L6022]              havoc __ret_0_SYMBOL;
[L6023]              havoc __ret_0_DECIMALS;
[L6024]              havoc __ret_0_INITIAL_SUPPLY;
[L6025]              havoc _spender_s788;
[L6026]              havoc _value_s788;
[L6027]              havoc _extraData_s788;
[L6028]              havoc success_s788;
[L6029]              havoc tmpNow;
[L6030]              havoc gas;
[L6031]              assume gas > 4000000 && gas <= 8000000;
[L6032]              tmpNow := now;
[L6033]              havoc now;
[L6034]              assume now > tmpNow;
[L6035]              assume msgsender_MSG != null;
[L6036]              assume DType[msgsender_MSG] != SafeMath;
[L6037]              assume DType[msgsender_MSG] != Context;
[L6038]              assume DType[msgsender_MSG] != IERC20;
[L6039]              assume DType[msgsender_MSG] != ERC20;
[L6040]              assume DType[msgsender_MSG] != ERC20Detailed;
[L6041]              assume DType[msgsender_MSG] != ERC20Burnable;
[L6042]              assume DType[msgsender_MSG] != tokenRecipient;
[L6043]              assume DType[msgsender_MSG] != KeepToken;
[L6044]              Alloc[msgsender_MSG] := true;
[L6045]  COND FALSE  !(choice == 18)
[L6051]  COND FALSE  !(choice == 17)
[L6057]  COND FALSE  !(choice == 16)
[L6064]  COND FALSE  !(choice == 15)
[L6070]  COND TRUE   choice == 14
[L6071]              gas := gas - 21000;
[L6072]  COND TRUE   gas >= 0
[L6073]              assume amount_s312 >= 0 && amount_s312 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6074]              assume msgvalue_MSG == 0;
[L6075]  CALL        call __ret_0_approve := approve~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, spender_s312, amount_s312);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume p1 != msgsender_MSG || p2 != spender_s312;
[L3]                 call_approve_ERC200 := true;
[L3]                 call_approve_ERC200 := false;
[L3]                 revert := revert_hold;
[L581]               havoc __exception;
[L582]               revert := false;
[L583]   COND TRUE   __exception
[L584]               __tmp__Balance := Balance;
[L585]               __tmp__DType := DType;
[L586]               __tmp__Alloc := Alloc;
[L587]               __tmp__balance_ADDR := balance_ADDR;
[L588]               __tmp__M_Ref_int := M_Ref_int;
[L589]               __tmp__sum__balances0 := sum__balances0;
[L590]               __tmp__alloc__allowances_ERC20_lvl0 := alloc__allowances_ERC20_lvl0;
[L591]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L592]               __tmp__sum__allowances1 := sum__allowances1;
[L593]               __tmp__Length := Length;
[L594]               __tmp__now := now;
[L595]               __tmp___balances_ERC20 := _balances_ERC20;
[L596]               __tmp___allowances_ERC20 := _allowances_ERC20;
[L597]               __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L598]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L599]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L600]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L601]               __tmp__NAME_KeepToken := NAME_KeepToken;
[L602]               __tmp__SYMBOL_KeepToken := SYMBOL_KeepToken;
[L603]               __tmp__DECIMALS_KeepToken := DECIMALS_KeepToken;
[L604]               __tmp__INITIAL_SUPPLY_KeepToken := INITIAL_SUPPLY_KeepToken;
[L605]   CALL        call __ret_0_ := approve~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, spender_s312, amount_s312);
[L2794]  COND TRUE   __tmp__DType[this] == KeepToken
[L2795]  CALL        call __var_2 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L2569]              __ret_0_ := msgsender_MSG;
[L2795]  RET         call __var_2 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L2796]  COND FALSE  !(revert)
[L2812]  COND TRUE   __tmp__DType[this] == KeepToken
[L2813]  CALL        call _approve~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, __var_2, spender_s312, amount_s312);
[L3482]              __var_22 := null;
[L3483]  COND TRUE   !(owner_s590 != null)
[L3484]              revert := true;
[L2813]  RET         call _approve~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, __var_2, spender_s312, amount_s312);
[L2814]  COND TRUE   revert
[L605]   RET         call __ret_0_ := approve~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, spender_s312, amount_s312);
[L606]               assume revert || gas < 0;
[L6075]  RET         call __ret_0_approve := approve~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, spender_s312, amount_s312);
[L6179]  RET         call CorralChoice_KeepToken(this);

Loop:
[L6179]  CALL        call CorralChoice_KeepToken(this);
[L5987]              havoc msgsender_MSG;
[L5988]              havoc msgvalue_MSG;
[L5989]              havoc choice;
[L5990]              havoc __ret_0_totalSupply;
[L5991]              havoc account_s258;
[L5992]              havoc __ret_0_balanceOf;
[L5993]              havoc recipient_s277;
[L5994]              havoc amount_s277;
[L5995]              havoc __ret_0_transfer;
[L5996]              havoc owner_s293;
[L5997]              havoc spender_s293;
[L5998]              havoc __ret_0_allowance;
[L5999]              havoc spender_s312;
[L6000]              havoc amount_s312;
[L6001]              havoc __ret_0_approve;
[L6002]              havoc sender_s348;
[L6003]              havoc recipient_s348;
[L6004]              havoc amount_s348;
[L6005]              havoc __ret_0_transferFrom;
[L6006]              havoc spender_s375;
[L6007]              havoc addedValue_s375;
[L6008]              havoc __ret_0_increaseAllowance;
[L6009]              havoc spender_s403;
[L6010]              havoc subtractedValue_s403;
[L6011]              havoc __ret_0_decreaseAllowance;
[L6012]              havoc name_s650;
[L6013]              havoc symbol_s650;
[L6014]              havoc decimals_s650;
[L6015]              havoc __ret_0_name;
[L6016]              havoc __ret_0_symbol;
[L6017]              havoc __ret_0_decimals;
[L6018]              havoc amount_s691;
[L6019]              havoc account_s704;
[L6020]              havoc amount_s704;
[L6021]              havoc __ret_0_NAME;
[L6022]              havoc __ret_0_SYMBOL;
[L6023]              havoc __ret_0_DECIMALS;
[L6024]              havoc __ret_0_INITIAL_SUPPLY;
[L6025]              havoc _spender_s788;
[L6026]              havoc _value_s788;
[L6027]              havoc _extraData_s788;
[L6028]              havoc success_s788;
[L6029]              havoc tmpNow;
[L6030]              havoc gas;
[L6031]              assume gas > 4000000 && gas <= 8000000;
[L6032]              tmpNow := now;
[L6033]              havoc now;
[L6034]              assume now > tmpNow;
[L6035]              assume msgsender_MSG != null;
[L6036]              assume DType[msgsender_MSG] != SafeMath;
[L6037]              assume DType[msgsender_MSG] != Context;
[L6038]              assume DType[msgsender_MSG] != IERC20;
[L6039]              assume DType[msgsender_MSG] != ERC20;
[L6040]              assume DType[msgsender_MSG] != ERC20Detailed;
[L6041]              assume DType[msgsender_MSG] != ERC20Burnable;
[L6042]              assume DType[msgsender_MSG] != tokenRecipient;
[L6043]              assume DType[msgsender_MSG] != KeepToken;
[L6044]              Alloc[msgsender_MSG] := true;
[L6045]  COND TRUE   choice == 18
[L6046]              gas := gas - 21000;
[L6047]  COND FALSE  !(gas >= 0)
[L6179]  RET         call CorralChoice_KeepToken(this);

[2020-11-24 20:08:02,102 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-24 20:08:02,102 INFO  L82        PathProgramCache]: Analyzing trace with hash 490296844, now seen corresponding path program 1 times
[2020-11-24 20:08:02,103 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-24 20:08:02,113 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-24 20:08:02,188 INFO  L134       CoverageAnalysis]: Checked inductivity of 188 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 188 trivial. 0 not checked.
[2020-11-24 20:08:02,188 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-24 20:08:02,188 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [8] imperfect sequences [] total 8
[2020-11-24 20:08:02,188 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-24 20:08:02,189 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 8 interpolants.
[2020-11-24 20:08:02,189 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=13, Invalid=43, Unknown=0, NotChecked=0, Total=56
[2020-11-24 20:08:02,189 INFO  L87              Difference]: Start difference. First operand 4103 states and 4778 transitions. cyclomatic complexity: 679 Second operand 8 states.
[2020-11-24 20:08:02,297 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-24 20:08:02,297 INFO  L93              Difference]: Finished difference Result 4135 states and 4838 transitions.
[2020-11-24 20:08:02,297 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 8 states. 
[2020-11-24 20:08:02,297 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 4135 states and 4838 transitions.
[2020-11-24 20:08:02,305 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 8
[2020-11-24 20:08:02,316 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 4135 states to 4123 states and 4826 transitions.
[2020-11-24 20:08:02,316 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1090
[2020-11-24 20:08:02,317 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1090
[2020-11-24 20:08:02,317 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 4123 states and 4826 transitions.
[2020-11-24 20:08:02,321 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-24 20:08:02,321 INFO  L728         BuchiCegarLoop]: Abstraction has 4123 states and 4826 transitions.
[2020-11-24 20:08:02,324 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 4123 states and 4826 transitions.
[2020-11-24 20:08:02,352 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 4123 to 4123.
[2020-11-24 20:08:02,352 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 4123 states.
[2020-11-24 20:08:02,357 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 4123 states to 4123 states and 4826 transitions.
[2020-11-24 20:08:02,357 INFO  L751         BuchiCegarLoop]: Abstraction has 4123 states and 4826 transitions.
[2020-11-24 20:08:02,357 INFO  L631         BuchiCegarLoop]: Abstraction has 4123 states and 4826 transitions.
[2020-11-24 20:08:02,357 INFO  L445         BuchiCegarLoop]: ======== Iteration 8============
[2020-11-24 20:08:02,357 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 4123 states and 4826 transitions.
[2020-11-24 20:08:02,362 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 8
[2020-11-24 20:08:02,362 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-24 20:08:02,362 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-24 20:08:02,363 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-24 20:08:02,363 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_approve_ERC200 := false;
[L3]                 call_approve_ERC200 := false;
[L3]     CALL        call main();
[L3]                 havoc p2;
[L3]                 havoc p1;
[L6169]              assume null == 0;
[L6170]  CALL        call this := FreshRefGenerator__success();
[L2373]              havoc newRef;
[L2374]              assume Alloc[newRef] == false;
[L2375]              Alloc[newRef] := true;
[L2376]              assume newRef != null;
[L6170]  RET         call this := FreshRefGenerator__success();
[L6171]              assume now >= 0;
[L6172]              assume DType[this] == KeepToken;
[L6173]              assume msgvalue_MSG == 0;
[L6174]              gas := gas - 53000;
[L6175]  CALL        call KeepToken_KeepToken(this, msgsender_MSG, msgvalue_MSG);
[L1369]              havoc __exception;
[L1370]              revert := false;
[L1371]  COND FALSE  !(__exception)
[L1396]  CALL        call KeepToken_KeepToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4025]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2561]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2546]              assume msgsender_MSG != null;
[L2547]              Balance[this] := 0;
[L2561]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2562]  COND FALSE  !(revert)
[L4025]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4026]  COND FALSE  !(revert)
[L4029]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2605]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2590]              assume msgsender_MSG != null;
[L2591]              Balance[this] := 0;
[L2605]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2606]  COND FALSE  !(revert)
[L4029]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4030]  COND FALSE  !(revert)
[L4033]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2655]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2561]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2546]              assume msgsender_MSG != null;
[L2547]              Balance[this] := 0;
[L2561]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2562]  COND FALSE  !(revert)
[L2655]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2656]  COND FALSE  !(revert)
[L2659]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2605]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2590]              assume msgsender_MSG != null;
[L2591]              Balance[this] := 0;
[L2605]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2606]  COND FALSE  !(revert)
[L2659]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2660]  COND FALSE  !(revert)
[L2663]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2627]              assume msgsender_MSG != null;
[L2628]              Balance[this] := 0;
[L2629]              _balances_ERC20[this] := zeroRefintArr();
[L2630]              sum__balances0[this] := 0;
[L2631]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2632]              sum__allowances1[this] := 0;
[L2633]              _totalSupply_ERC20[this] := 0;
[L2663]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2664]  COND FALSE  !(revert)
[L4033]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4034]  COND FALSE  !(revert)
[L4037]  CALL        call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L3809]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2561]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2546]              assume msgsender_MSG != null;
[L2547]              Balance[this] := 0;
[L2561]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2562]  COND FALSE  !(revert)
[L3809]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3810]  COND FALSE  !(revert)
[L3813]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2605]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2590]              assume msgsender_MSG != null;
[L2591]              Balance[this] := 0;
[L2605]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2606]  COND FALSE  !(revert)
[L3813]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3814]  COND FALSE  !(revert)
[L3817]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2655]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2561]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2546]              assume msgsender_MSG != null;
[L2547]              Balance[this] := 0;
[L2561]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2562]  COND FALSE  !(revert)
[L2655]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2656]  COND FALSE  !(revert)
[L2659]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2605]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2590]              assume msgsender_MSG != null;
[L2591]              Balance[this] := 0;
[L2605]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2606]  COND FALSE  !(revert)
[L2659]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2660]  COND FALSE  !(revert)
[L2663]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2627]              assume msgsender_MSG != null;
[L2628]              Balance[this] := 0;
[L2629]              _balances_ERC20[this] := zeroRefintArr();
[L2630]              sum__balances0[this] := 0;
[L2631]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2632]              sum__allowances1[this] := 0;
[L2633]              _totalSupply_ERC20[this] := 0;
[L2663]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2664]  COND FALSE  !(revert)
[L3817]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3818]  COND FALSE  !(revert)
[L3821]  CALL        call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3782]              assume msgsender_MSG != null;
[L3783]              Balance[this] := 0;
[L3821]  RET         call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3822]  COND FALSE  !(revert)
[L4037]  RET         call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L4038]  COND FALSE  !(revert)
[L4041]  CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, NAME_KeepToken[this], SYMBOL_KeepToken[this], DECIMALS_KeepToken[this]);
[L3725]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2605]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2590]              assume msgsender_MSG != null;
[L2591]              Balance[this] := 0;
[L2605]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2606]  COND FALSE  !(revert)
[L3725]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3726]  COND FALSE  !(revert)
[L3729]  CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s650, symbol_s650, decimals_s650);
[L3700]              assume msgsender_MSG != null;
[L3701]              Balance[this] := 0;
[L3702]              _name_ERC20Detailed[this] := -708534286;
[L3703]              _symbol_ERC20Detailed[this] := -708534286;
[L3704]              _decimals_ERC20Detailed[this] := 0;
[L3706]              _name_ERC20Detailed[this] := name_s650;
[L3707]              _symbol_ERC20Detailed[this] := symbol_s650;
[L3708]              _decimals_ERC20Detailed[this] := decimals_s650;
[L3729]  RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s650, symbol_s650, decimals_s650);
[L3730]  COND FALSE  !(revert)
[L4041]  RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, NAME_KeepToken[this], SYMBOL_KeepToken[this], DECIMALS_KeepToken[this]);
[L4042]  COND FALSE  !(revert)
[L4045]  CALL        call KeepToken_KeepToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3978]              assume msgsender_MSG != null;
[L3979]              Balance[this] := 0;
[L3980]              NAME_KeepToken[this] := 153019343;
[L3981]              SYMBOL_KeepToken[this] := 577946439;
[L3982]              DECIMALS_KeepToken[this] := 18;
[L3983]              INITIAL_SUPPLY_KeepToken[this] := 1000000000000000013287555072 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3985]  COND TRUE   DType[this] == KeepToken
[L3986]  CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, INITIAL_SUPPLY_KeepToken[this]);
[L3409]              __var_16 := null;
[L3410]  COND FALSE  !(!(account_s503 != null))
[L3414]  CALL        call __var_17 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s503);
[L2426]              c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2427]  COND FALSE  !(!(c_s26 >= a_s26))
[L2431]              __ret_0_ := c_s26;
[L3414]  RET         call __var_17 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s503);
[L3415]  COND FALSE  !(revert)
[L3418]              _totalSupply_ERC20[this] := __var_17;
[L3419]  CALL        call __var_18 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s503], amount_s503);
[L2426]              c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2427]  COND FALSE  !(!(c_s26 >= a_s26))
[L2431]              __ret_0_ := c_s26;
[L3419]  RET         call __var_18 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s503], amount_s503);
[L3420]  COND FALSE  !(revert)
[L3423]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s503];
[L3424]              _balances_ERC20[this][account_s503] := __var_18;
[L3425]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s503];
[L3426]              assert { :EventEmitted "Transfer_ERC20" } true;
[L3986]  RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, INITIAL_SUPPLY_KeepToken[this]);
[L3987]  COND FALSE  !(revert)
[L4045]  RET         call KeepToken_KeepToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4046]  COND FALSE  !(revert)
[L1396]  RET         call KeepToken_KeepToken__success(this, msgsender_MSG, msgvalue_MSG);
[L1397]              assume !revert && gas >= 0;
[L6175]  RET         call KeepToken_KeepToken(this, msgsender_MSG, msgvalue_MSG);
[L6176]              assume !revert && gas >= 0;
[L6179]  CALL        call CorralChoice_KeepToken(this);
[L5987]              havoc msgsender_MSG;
[L5988]              havoc msgvalue_MSG;
[L5989]              havoc choice;
[L5990]              havoc __ret_0_totalSupply;
[L5991]              havoc account_s258;
[L5992]              havoc __ret_0_balanceOf;
[L5993]              havoc recipient_s277;
[L5994]              havoc amount_s277;
[L5995]              havoc __ret_0_transfer;
[L5996]              havoc owner_s293;
[L5997]              havoc spender_s293;
[L5998]              havoc __ret_0_allowance;
[L5999]              havoc spender_s312;
[L6000]              havoc amount_s312;
[L6001]              havoc __ret_0_approve;
[L6002]              havoc sender_s348;
[L6003]              havoc recipient_s348;
[L6004]              havoc amount_s348;
[L6005]              havoc __ret_0_transferFrom;
[L6006]              havoc spender_s375;
[L6007]              havoc addedValue_s375;
[L6008]              havoc __ret_0_increaseAllowance;
[L6009]              havoc spender_s403;
[L6010]              havoc subtractedValue_s403;
[L6011]              havoc __ret_0_decreaseAllowance;
[L6012]              havoc name_s650;
[L6013]              havoc symbol_s650;
[L6014]              havoc decimals_s650;
[L6015]              havoc __ret_0_name;
[L6016]              havoc __ret_0_symbol;
[L6017]              havoc __ret_0_decimals;
[L6018]              havoc amount_s691;
[L6019]              havoc account_s704;
[L6020]              havoc amount_s704;
[L6021]              havoc __ret_0_NAME;
[L6022]              havoc __ret_0_SYMBOL;
[L6023]              havoc __ret_0_DECIMALS;
[L6024]              havoc __ret_0_INITIAL_SUPPLY;
[L6025]              havoc _spender_s788;
[L6026]              havoc _value_s788;
[L6027]              havoc _extraData_s788;
[L6028]              havoc success_s788;
[L6029]              havoc tmpNow;
[L6030]              havoc gas;
[L6031]              assume gas > 4000000 && gas <= 8000000;
[L6032]              tmpNow := now;
[L6033]              havoc now;
[L6034]              assume now > tmpNow;
[L6035]              assume msgsender_MSG != null;
[L6036]              assume DType[msgsender_MSG] != SafeMath;
[L6037]              assume DType[msgsender_MSG] != Context;
[L6038]              assume DType[msgsender_MSG] != IERC20;
[L6039]              assume DType[msgsender_MSG] != ERC20;
[L6040]              assume DType[msgsender_MSG] != ERC20Detailed;
[L6041]              assume DType[msgsender_MSG] != ERC20Burnable;
[L6042]              assume DType[msgsender_MSG] != tokenRecipient;
[L6043]              assume DType[msgsender_MSG] != KeepToken;
[L6044]              Alloc[msgsender_MSG] := true;
[L6045]  COND FALSE  !(choice == 18)
[L6051]  COND FALSE  !(choice == 17)
[L6057]  COND FALSE  !(choice == 16)
[L6064]  COND FALSE  !(choice == 15)
[L6070]  COND TRUE   choice == 14
[L6071]              gas := gas - 21000;
[L6072]  COND TRUE   gas >= 0
[L6073]              assume amount_s312 >= 0 && amount_s312 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6074]              assume msgvalue_MSG == 0;
[L6075]  CALL        call __ret_0_approve := approve~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, spender_s312, amount_s312);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume p1 != msgsender_MSG || p2 != spender_s312;
[L3]                 call_approve_ERC200 := true;
[L3]                 call_approve_ERC200 := false;
[L3]                 revert := revert_hold;
[L581]               havoc __exception;
[L582]               revert := false;
[L583]   COND TRUE   __exception
[L584]               __tmp__Balance := Balance;
[L585]               __tmp__DType := DType;
[L586]               __tmp__Alloc := Alloc;
[L587]               __tmp__balance_ADDR := balance_ADDR;
[L588]               __tmp__M_Ref_int := M_Ref_int;
[L589]               __tmp__sum__balances0 := sum__balances0;
[L590]               __tmp__alloc__allowances_ERC20_lvl0 := alloc__allowances_ERC20_lvl0;
[L591]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L592]               __tmp__sum__allowances1 := sum__allowances1;
[L593]               __tmp__Length := Length;
[L594]               __tmp__now := now;
[L595]               __tmp___balances_ERC20 := _balances_ERC20;
[L596]               __tmp___allowances_ERC20 := _allowances_ERC20;
[L597]               __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L598]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L599]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L600]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L601]               __tmp__NAME_KeepToken := NAME_KeepToken;
[L602]               __tmp__SYMBOL_KeepToken := SYMBOL_KeepToken;
[L603]               __tmp__DECIMALS_KeepToken := DECIMALS_KeepToken;
[L604]               __tmp__INITIAL_SUPPLY_KeepToken := INITIAL_SUPPLY_KeepToken;
[L605]   CALL        call __ret_0_ := approve~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, spender_s312, amount_s312);
[L2794]  COND TRUE   __tmp__DType[this] == KeepToken
[L2795]  CALL        call __var_2 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L2569]              __ret_0_ := msgsender_MSG;
[L2795]  RET         call __var_2 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L2796]  COND FALSE  !(revert)
[L2812]  COND TRUE   __tmp__DType[this] == KeepToken
[L2813]  CALL        call _approve~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, __var_2, spender_s312, amount_s312);
[L3482]              __var_22 := null;
[L3483]  COND FALSE  !(!(owner_s590 != null))
[L3487]              __var_23 := null;
[L3488]  COND TRUE   !(spender_s590 != null)
[L3489]              revert := true;
[L2813]  RET         call _approve~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, __var_2, spender_s312, amount_s312);
[L2814]  COND TRUE   revert
[L605]   RET         call __ret_0_ := approve~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, spender_s312, amount_s312);
[L606]               assume revert || gas < 0;
[L6075]  RET         call __ret_0_approve := approve~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, spender_s312, amount_s312);
[L6179]  RET         call CorralChoice_KeepToken(this);

Loop:
[L6179]  CALL        call CorralChoice_KeepToken(this);
[L5987]              havoc msgsender_MSG;
[L5988]              havoc msgvalue_MSG;
[L5989]              havoc choice;
[L5990]              havoc __ret_0_totalSupply;
[L5991]              havoc account_s258;
[L5992]              havoc __ret_0_balanceOf;
[L5993]              havoc recipient_s277;
[L5994]              havoc amount_s277;
[L5995]              havoc __ret_0_transfer;
[L5996]              havoc owner_s293;
[L5997]              havoc spender_s293;
[L5998]              havoc __ret_0_allowance;
[L5999]              havoc spender_s312;
[L6000]              havoc amount_s312;
[L6001]              havoc __ret_0_approve;
[L6002]              havoc sender_s348;
[L6003]              havoc recipient_s348;
[L6004]              havoc amount_s348;
[L6005]              havoc __ret_0_transferFrom;
[L6006]              havoc spender_s375;
[L6007]              havoc addedValue_s375;
[L6008]              havoc __ret_0_increaseAllowance;
[L6009]              havoc spender_s403;
[L6010]              havoc subtractedValue_s403;
[L6011]              havoc __ret_0_decreaseAllowance;
[L6012]              havoc name_s650;
[L6013]              havoc symbol_s650;
[L6014]              havoc decimals_s650;
[L6015]              havoc __ret_0_name;
[L6016]              havoc __ret_0_symbol;
[L6017]              havoc __ret_0_decimals;
[L6018]              havoc amount_s691;
[L6019]              havoc account_s704;
[L6020]              havoc amount_s704;
[L6021]              havoc __ret_0_NAME;
[L6022]              havoc __ret_0_SYMBOL;
[L6023]              havoc __ret_0_DECIMALS;
[L6024]              havoc __ret_0_INITIAL_SUPPLY;
[L6025]              havoc _spender_s788;
[L6026]              havoc _value_s788;
[L6027]              havoc _extraData_s788;
[L6028]              havoc success_s788;
[L6029]              havoc tmpNow;
[L6030]              havoc gas;
[L6031]              assume gas > 4000000 && gas <= 8000000;
[L6032]              tmpNow := now;
[L6033]              havoc now;
[L6034]              assume now > tmpNow;
[L6035]              assume msgsender_MSG != null;
[L6036]              assume DType[msgsender_MSG] != SafeMath;
[L6037]              assume DType[msgsender_MSG] != Context;
[L6038]              assume DType[msgsender_MSG] != IERC20;
[L6039]              assume DType[msgsender_MSG] != ERC20;
[L6040]              assume DType[msgsender_MSG] != ERC20Detailed;
[L6041]              assume DType[msgsender_MSG] != ERC20Burnable;
[L6042]              assume DType[msgsender_MSG] != tokenRecipient;
[L6043]              assume DType[msgsender_MSG] != KeepToken;
[L6044]              Alloc[msgsender_MSG] := true;
[L6045]  COND TRUE   choice == 18
[L6046]              gas := gas - 21000;
[L6047]  COND FALSE  !(gas >= 0)
[L6179]  RET         call CorralChoice_KeepToken(this);

[2020-11-24 20:08:02,366 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-24 20:08:02,366 INFO  L82        PathProgramCache]: Analyzing trace with hash 1443765001, now seen corresponding path program 1 times
[2020-11-24 20:08:02,367 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-24 20:08:02,380 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-24 20:08:02,395 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-24 20:08:02,486 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-24 20:08:02,486 INFO  L82        PathProgramCache]: Analyzing trace with hash 201416897, now seen corresponding path program 1 times
[2020-11-24 20:08:02,487 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-24 20:08:02,489 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-24 20:08:02,494 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-24 20:08:02,495 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-24 20:08:02,495 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [4] imperfect sequences [] total 4
[2020-11-24 20:08:02,495 INFO  L1008  eck$LassoCheckResult]: loop already infeasible
[2020-11-24 20:08:02,495 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-11-24 20:08:02,495 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=6, Invalid=6, Unknown=0, NotChecked=0, Total=12
[2020-11-24 20:08:02,495 INFO  L87              Difference]: Start difference. First operand 4123 states and 4826 transitions. cyclomatic complexity: 707 Second operand 4 states.
[2020-11-24 20:08:02,874 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-24 20:08:02,874 INFO  L93              Difference]: Finished difference Result 4325 states and 5018 transitions.
[2020-11-24 20:08:02,874 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 4 states. 
[2020-11-24 20:08:02,874 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 4325 states and 5018 transitions.
[2020-11-24 20:08:02,889 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 16
[2020-11-24 20:08:02,901 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 4325 states to 4325 states and 5018 transitions.
[2020-11-24 20:08:02,901 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1100
[2020-11-24 20:08:02,902 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1100
[2020-11-24 20:08:02,902 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 4325 states and 5018 transitions.
[2020-11-24 20:08:02,905 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-24 20:08:02,905 INFO  L728         BuchiCegarLoop]: Abstraction has 4325 states and 5018 transitions.
[2020-11-24 20:08:02,909 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 4325 states and 5018 transitions.
[2020-11-24 20:08:02,937 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 4325 to 3947.
[2020-11-24 20:08:02,937 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 3947 states.
[2020-11-24 20:08:02,941 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 3947 states to 3947 states and 4560 transitions.
[2020-11-24 20:08:02,941 INFO  L751         BuchiCegarLoop]: Abstraction has 3947 states and 4560 transitions.
[2020-11-24 20:08:02,941 INFO  L631         BuchiCegarLoop]: Abstraction has 3947 states and 4560 transitions.
[2020-11-24 20:08:02,941 INFO  L445         BuchiCegarLoop]: ======== Iteration 9============
[2020-11-24 20:08:02,941 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 3947 states and 4560 transitions.
[2020-11-24 20:08:02,947 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-24 20:08:02,947 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-24 20:08:02,947 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-24 20:08:02,948 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-24 20:08:02,949 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_approve_ERC200 := false;
[L3]                 call_approve_ERC200 := false;
[L3]     CALL        call main();
[L3]                 havoc p2;
[L3]                 havoc p1;
[L6169]              assume null == 0;
[L6170]  CALL        call this := FreshRefGenerator__success();
[L2373]              havoc newRef;
[L2374]              assume Alloc[newRef] == false;
[L2375]              Alloc[newRef] := true;
[L2376]              assume newRef != null;
[L6170]  RET         call this := FreshRefGenerator__success();
[L6171]              assume now >= 0;
[L6172]              assume DType[this] == KeepToken;
[L6173]              assume msgvalue_MSG == 0;
[L6174]              gas := gas - 53000;
[L6175]  CALL        call KeepToken_KeepToken(this, msgsender_MSG, msgvalue_MSG);
[L1369]              havoc __exception;
[L1370]              revert := false;
[L1371]  COND FALSE  !(__exception)
[L1396]  CALL        call KeepToken_KeepToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4025]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2561]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2546]              assume msgsender_MSG != null;
[L2547]              Balance[this] := 0;
[L2561]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2562]  COND FALSE  !(revert)
[L4025]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4026]  COND FALSE  !(revert)
[L4029]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2605]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2590]              assume msgsender_MSG != null;
[L2591]              Balance[this] := 0;
[L2605]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2606]  COND FALSE  !(revert)
[L4029]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4030]  COND FALSE  !(revert)
[L4033]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2655]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2561]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2546]              assume msgsender_MSG != null;
[L2547]              Balance[this] := 0;
[L2561]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2562]  COND FALSE  !(revert)
[L2655]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2656]  COND FALSE  !(revert)
[L2659]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2605]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2590]              assume msgsender_MSG != null;
[L2591]              Balance[this] := 0;
[L2605]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2606]  COND FALSE  !(revert)
[L2659]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2660]  COND FALSE  !(revert)
[L2663]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2627]              assume msgsender_MSG != null;
[L2628]              Balance[this] := 0;
[L2629]              _balances_ERC20[this] := zeroRefintArr();
[L2630]              sum__balances0[this] := 0;
[L2631]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2632]              sum__allowances1[this] := 0;
[L2633]              _totalSupply_ERC20[this] := 0;
[L2663]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2664]  COND FALSE  !(revert)
[L4033]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4034]  COND FALSE  !(revert)
[L4037]  CALL        call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L3809]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2561]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2546]              assume msgsender_MSG != null;
[L2547]              Balance[this] := 0;
[L2561]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2562]  COND FALSE  !(revert)
[L3809]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3810]  COND FALSE  !(revert)
[L3813]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2605]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2590]              assume msgsender_MSG != null;
[L2591]              Balance[this] := 0;
[L2605]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2606]  COND FALSE  !(revert)
[L3813]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3814]  COND FALSE  !(revert)
[L3817]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2655]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2561]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2546]              assume msgsender_MSG != null;
[L2547]              Balance[this] := 0;
[L2561]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2562]  COND FALSE  !(revert)
[L2655]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2656]  COND FALSE  !(revert)
[L2659]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2605]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2590]              assume msgsender_MSG != null;
[L2591]              Balance[this] := 0;
[L2605]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2606]  COND FALSE  !(revert)
[L2659]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2660]  COND FALSE  !(revert)
[L2663]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2627]              assume msgsender_MSG != null;
[L2628]              Balance[this] := 0;
[L2629]              _balances_ERC20[this] := zeroRefintArr();
[L2630]              sum__balances0[this] := 0;
[L2631]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2632]              sum__allowances1[this] := 0;
[L2633]              _totalSupply_ERC20[this] := 0;
[L2663]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2664]  COND FALSE  !(revert)
[L3817]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3818]  COND FALSE  !(revert)
[L3821]  CALL        call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3782]              assume msgsender_MSG != null;
[L3783]              Balance[this] := 0;
[L3821]  RET         call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3822]  COND FALSE  !(revert)
[L4037]  RET         call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L4038]  COND FALSE  !(revert)
[L4041]  CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, NAME_KeepToken[this], SYMBOL_KeepToken[this], DECIMALS_KeepToken[this]);
[L3725]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2605]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2590]              assume msgsender_MSG != null;
[L2591]              Balance[this] := 0;
[L2605]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2606]  COND FALSE  !(revert)
[L3725]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3726]  COND FALSE  !(revert)
[L3729]  CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s650, symbol_s650, decimals_s650);
[L3700]              assume msgsender_MSG != null;
[L3701]              Balance[this] := 0;
[L3702]              _name_ERC20Detailed[this] := -708534286;
[L3703]              _symbol_ERC20Detailed[this] := -708534286;
[L3704]              _decimals_ERC20Detailed[this] := 0;
[L3706]              _name_ERC20Detailed[this] := name_s650;
[L3707]              _symbol_ERC20Detailed[this] := symbol_s650;
[L3708]              _decimals_ERC20Detailed[this] := decimals_s650;
[L3729]  RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s650, symbol_s650, decimals_s650);
[L3730]  COND FALSE  !(revert)
[L4041]  RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, NAME_KeepToken[this], SYMBOL_KeepToken[this], DECIMALS_KeepToken[this]);
[L4042]  COND FALSE  !(revert)
[L4045]  CALL        call KeepToken_KeepToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3978]              assume msgsender_MSG != null;
[L3979]              Balance[this] := 0;
[L3980]              NAME_KeepToken[this] := 153019343;
[L3981]              SYMBOL_KeepToken[this] := 577946439;
[L3982]              DECIMALS_KeepToken[this] := 18;
[L3983]              INITIAL_SUPPLY_KeepToken[this] := 1000000000000000013287555072 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3985]  COND TRUE   DType[this] == KeepToken
[L3986]  CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, INITIAL_SUPPLY_KeepToken[this]);
[L3409]              __var_16 := null;
[L3410]  COND FALSE  !(!(account_s503 != null))
[L3414]  CALL        call __var_17 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s503);
[L2426]              c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2427]  COND FALSE  !(!(c_s26 >= a_s26))
[L2431]              __ret_0_ := c_s26;
[L3414]  RET         call __var_17 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s503);
[L3415]  COND FALSE  !(revert)
[L3418]              _totalSupply_ERC20[this] := __var_17;
[L3419]  CALL        call __var_18 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s503], amount_s503);
[L2426]              c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2427]  COND FALSE  !(!(c_s26 >= a_s26))
[L2431]              __ret_0_ := c_s26;
[L3419]  RET         call __var_18 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s503], amount_s503);
[L3420]  COND FALSE  !(revert)
[L3423]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s503];
[L3424]              _balances_ERC20[this][account_s503] := __var_18;
[L3425]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s503];
[L3426]              assert { :EventEmitted "Transfer_ERC20" } true;
[L3986]  RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, INITIAL_SUPPLY_KeepToken[this]);
[L3987]  COND FALSE  !(revert)
[L4045]  RET         call KeepToken_KeepToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4046]  COND FALSE  !(revert)
[L1396]  RET         call KeepToken_KeepToken__success(this, msgsender_MSG, msgvalue_MSG);
[L1397]              assume !revert && gas >= 0;
[L6175]  RET         call KeepToken_KeepToken(this, msgsender_MSG, msgvalue_MSG);
[L6176]              assume !revert && gas >= 0;
[L6179]  CALL        call CorralChoice_KeepToken(this);
[L5987]              havoc msgsender_MSG;
[L5988]              havoc msgvalue_MSG;
[L5989]              havoc choice;
[L5990]              havoc __ret_0_totalSupply;
[L5991]              havoc account_s258;
[L5992]              havoc __ret_0_balanceOf;
[L5993]              havoc recipient_s277;
[L5994]              havoc amount_s277;
[L5995]              havoc __ret_0_transfer;
[L5996]              havoc owner_s293;
[L5997]              havoc spender_s293;
[L5998]              havoc __ret_0_allowance;
[L5999]              havoc spender_s312;
[L6000]              havoc amount_s312;
[L6001]              havoc __ret_0_approve;
[L6002]              havoc sender_s348;
[L6003]              havoc recipient_s348;
[L6004]              havoc amount_s348;
[L6005]              havoc __ret_0_transferFrom;
[L6006]              havoc spender_s375;
[L6007]              havoc addedValue_s375;
[L6008]              havoc __ret_0_increaseAllowance;
[L6009]              havoc spender_s403;
[L6010]              havoc subtractedValue_s403;
[L6011]              havoc __ret_0_decreaseAllowance;
[L6012]              havoc name_s650;
[L6013]              havoc symbol_s650;
[L6014]              havoc decimals_s650;
[L6015]              havoc __ret_0_name;
[L6016]              havoc __ret_0_symbol;
[L6017]              havoc __ret_0_decimals;
[L6018]              havoc amount_s691;
[L6019]              havoc account_s704;
[L6020]              havoc amount_s704;
[L6021]              havoc __ret_0_NAME;
[L6022]              havoc __ret_0_SYMBOL;
[L6023]              havoc __ret_0_DECIMALS;
[L6024]              havoc __ret_0_INITIAL_SUPPLY;
[L6025]              havoc _spender_s788;
[L6026]              havoc _value_s788;
[L6027]              havoc _extraData_s788;
[L6028]              havoc success_s788;
[L6029]              havoc tmpNow;
[L6030]              havoc gas;
[L6031]              assume gas > 4000000 && gas <= 8000000;
[L6032]              tmpNow := now;
[L6033]              havoc now;
[L6034]              assume now > tmpNow;
[L6035]              assume msgsender_MSG != null;
[L6036]              assume DType[msgsender_MSG] != SafeMath;
[L6037]              assume DType[msgsender_MSG] != Context;
[L6038]              assume DType[msgsender_MSG] != IERC20;
[L6039]              assume DType[msgsender_MSG] != ERC20;
[L6040]              assume DType[msgsender_MSG] != ERC20Detailed;
[L6041]              assume DType[msgsender_MSG] != ERC20Burnable;
[L6042]              assume DType[msgsender_MSG] != tokenRecipient;
[L6043]              assume DType[msgsender_MSG] != KeepToken;
[L6044]              Alloc[msgsender_MSG] := true;
[L6045]  COND FALSE  !(choice == 18)
[L6051]  COND FALSE  !(choice == 17)
[L6057]  COND FALSE  !(choice == 16)
[L6064]  COND FALSE  !(choice == 15)
[L6070]  COND TRUE   choice == 14
[L6071]              gas := gas - 21000;
[L6072]  COND TRUE   gas >= 0
[L6073]              assume amount_s312 >= 0 && amount_s312 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6074]              assume msgvalue_MSG == 0;
[L6075]  CALL        call __ret_0_approve := approve~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, spender_s312, amount_s312);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume p1 != msgsender_MSG || p2 != spender_s312;
[L3]                 call_approve_ERC200 := true;
[L3]                 call_approve_ERC200 := false;
[L3]                 revert := revert_hold;
[L581]               havoc __exception;
[L582]               revert := false;
[L583]   COND TRUE   __exception
[L584]               __tmp__Balance := Balance;
[L585]               __tmp__DType := DType;
[L586]               __tmp__Alloc := Alloc;
[L587]               __tmp__balance_ADDR := balance_ADDR;
[L588]               __tmp__M_Ref_int := M_Ref_int;
[L589]               __tmp__sum__balances0 := sum__balances0;
[L590]               __tmp__alloc__allowances_ERC20_lvl0 := alloc__allowances_ERC20_lvl0;
[L591]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L592]               __tmp__sum__allowances1 := sum__allowances1;
[L593]               __tmp__Length := Length;
[L594]               __tmp__now := now;
[L595]               __tmp___balances_ERC20 := _balances_ERC20;
[L596]               __tmp___allowances_ERC20 := _allowances_ERC20;
[L597]               __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L598]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L599]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L600]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L601]               __tmp__NAME_KeepToken := NAME_KeepToken;
[L602]               __tmp__SYMBOL_KeepToken := SYMBOL_KeepToken;
[L603]               __tmp__DECIMALS_KeepToken := DECIMALS_KeepToken;
[L604]               __tmp__INITIAL_SUPPLY_KeepToken := INITIAL_SUPPLY_KeepToken;
[L605]   CALL        call __ret_0_ := approve~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, spender_s312, amount_s312);
[L2794]  COND TRUE   __tmp__DType[this] == KeepToken
[L2795]  CALL        call __var_2 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L2569]              __ret_0_ := msgsender_MSG;
[L2795]  RET         call __var_2 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L2796]  COND FALSE  !(revert)
[L2812]  COND TRUE   __tmp__DType[this] == KeepToken
[L2813]  CALL        call _approve~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, __var_2, spender_s312, amount_s312);
[L3482]              __var_22 := null;
[L3483]  COND FALSE  !(!(owner_s590 != null))
[L3487]              __var_23 := null;
[L3488]  COND TRUE   !(spender_s590 != null)
[L3489]              revert := true;
[L2813]  RET         call _approve~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, __var_2, spender_s312, amount_s312);
[L2814]  COND TRUE   revert
[L605]   RET         call __ret_0_ := approve~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, spender_s312, amount_s312);
[L606]               assume revert || gas < 0;
[L6075]  RET         call __ret_0_approve := approve~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, spender_s312, amount_s312);
[L6179]  RET         call CorralChoice_KeepToken(this);

Loop:
[L6179]  CALL        call CorralChoice_KeepToken(this);
[L5987]              havoc msgsender_MSG;
[L5988]              havoc msgvalue_MSG;
[L5989]              havoc choice;
[L5990]              havoc __ret_0_totalSupply;
[L5991]              havoc account_s258;
[L5992]              havoc __ret_0_balanceOf;
[L5993]              havoc recipient_s277;
[L5994]              havoc amount_s277;
[L5995]              havoc __ret_0_transfer;
[L5996]              havoc owner_s293;
[L5997]              havoc spender_s293;
[L5998]              havoc __ret_0_allowance;
[L5999]              havoc spender_s312;
[L6000]              havoc amount_s312;
[L6001]              havoc __ret_0_approve;
[L6002]              havoc sender_s348;
[L6003]              havoc recipient_s348;
[L6004]              havoc amount_s348;
[L6005]              havoc __ret_0_transferFrom;
[L6006]              havoc spender_s375;
[L6007]              havoc addedValue_s375;
[L6008]              havoc __ret_0_increaseAllowance;
[L6009]              havoc spender_s403;
[L6010]              havoc subtractedValue_s403;
[L6011]              havoc __ret_0_decreaseAllowance;
[L6012]              havoc name_s650;
[L6013]              havoc symbol_s650;
[L6014]              havoc decimals_s650;
[L6015]              havoc __ret_0_name;
[L6016]              havoc __ret_0_symbol;
[L6017]              havoc __ret_0_decimals;
[L6018]              havoc amount_s691;
[L6019]              havoc account_s704;
[L6020]              havoc amount_s704;
[L6021]              havoc __ret_0_NAME;
[L6022]              havoc __ret_0_SYMBOL;
[L6023]              havoc __ret_0_DECIMALS;
[L6024]              havoc __ret_0_INITIAL_SUPPLY;
[L6025]              havoc _spender_s788;
[L6026]              havoc _value_s788;
[L6027]              havoc _extraData_s788;
[L6028]              havoc success_s788;
[L6029]              havoc tmpNow;
[L6030]              havoc gas;
[L6031]              assume gas > 4000000 && gas <= 8000000;
[L6032]              tmpNow := now;
[L6033]              havoc now;
[L6034]              assume now > tmpNow;
[L6035]              assume msgsender_MSG != null;
[L6036]              assume DType[msgsender_MSG] != SafeMath;
[L6037]              assume DType[msgsender_MSG] != Context;
[L6038]              assume DType[msgsender_MSG] != IERC20;
[L6039]              assume DType[msgsender_MSG] != ERC20;
[L6040]              assume DType[msgsender_MSG] != ERC20Detailed;
[L6041]              assume DType[msgsender_MSG] != ERC20Burnable;
[L6042]              assume DType[msgsender_MSG] != tokenRecipient;
[L6043]              assume DType[msgsender_MSG] != KeepToken;
[L6044]              Alloc[msgsender_MSG] := true;
[L6045]  COND FALSE  !(choice == 18)
[L6051]  COND FALSE  !(choice == 17)
[L6057]  COND FALSE  !(choice == 16)
[L6064]  COND FALSE  !(choice == 15)
[L6070]  COND FALSE  !(choice == 14)
[L6077]  COND FALSE  !(choice == 13)
[L6084]  COND FALSE  !(choice == 12)
[L6091]  COND FALSE  !(choice == 11)
[L6098]  COND FALSE  !(choice == 10)
[L6104]  COND FALSE  !(choice == 9)
[L6110]  COND FALSE  !(choice == 8)
[L6116]  COND FALSE  !(choice == 7)
[L6123]  COND FALSE  !(choice == 6)
[L6130]  COND FALSE  !(choice == 5)
[L6136]  COND FALSE  !(choice == 4)
[L6142]  COND FALSE  !(choice == 3)
[L6148]  COND FALSE  !(choice == 2)
[L6154]  COND FALSE  !(choice == 1)
[L6179]  RET         call CorralChoice_KeepToken(this);

[2020-11-24 20:08:02,952 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-24 20:08:02,952 INFO  L82        PathProgramCache]: Analyzing trace with hash 1443765001, now seen corresponding path program 2 times
[2020-11-24 20:08:02,953 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-24 20:08:02,964 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-24 20:08:02,978 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-24 20:08:03,013 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-24 20:08:03,013 INFO  L82        PathProgramCache]: Analyzing trace with hash 1473697201, now seen corresponding path program 1 times
[2020-11-24 20:08:03,014 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-24 20:08:03,016 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-24 20:08:03,018 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-24 20:08:03,023 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-24 20:08:03,023 INFO  L82        PathProgramCache]: Analyzing trace with hash -1153078359, now seen corresponding path program 1 times
[2020-11-24 20:08:03,023 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-24 20:08:03,041 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-24 20:08:03,056 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
Garbage collection #1: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #2: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #3: 397 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 397 to 787
Garbage collection #4: 787 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 787 to 1571
Garbage collection #5: 1571 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 1571 to 3137
Garbage collection #6: 3137 nodes / 0 free / 0.002s / 0.003s total
Resizing node table from 3137 to 6271
Garbage collection #1: 101 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 101 to 199
Garbage collection #2: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #3: 397 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 397 to 787
Garbage collection #4: 787 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 787 to 1571
Garbage collection #5: 1571 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1571 to 3137
Garbage collection #6: 3137 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 3137 to 6271
Garbage collection #1: 47 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 47 to 89
Garbage collection #2: 89 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 89 to 173
Garbage collection #3: 173 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 173 to 337
Garbage collection #4: 337 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 337 to 673
Garbage collection #5: 673 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 673 to 1327
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #5: 397 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 397 to 787
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #5: 397 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 397 to 787
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #2: 73 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 73 to 139
Garbage collection #3: 139 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 139 to 277
Garbage collection #4: 277 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 277 to 547
Garbage collection #5: 547 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 547 to 1093
Garbage collection #1: 29 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 199 to 397
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
[2020-11-24 20:08:03,725 WARN  L188               SmtUtils]: Spent 132.00 ms on a formula simplification. DAG size of input: 87 DAG size of output: 86
Garbage collection #1: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #2: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #3: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #4: 223 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 223 to 443
Garbage collection #5: 443 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 443 to 883
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #2: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #3: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #4: 277 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 277 to 547
Garbage collection #5: 547 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 547 to 1093
[2020-11-24 20:08:04,199 WARN  L188               SmtUtils]: Spent 279.00 ms on a formula simplification. DAG size of input: 241 DAG size of output: 228
Garbage collection #1: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #2: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #3: 317 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 317 to 631
Garbage collection #4: 631 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 631 to 1259
Garbage collection #5: 1259 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1259 to 2503
Garbage collection #6: 2503 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2503 to 5003
Garbage collection #1: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #2: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #3: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #4: 397 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 397 to 787
Garbage collection #5: 787 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 787 to 1571
Garbage collection #1: 41 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 41 to 79
Garbage collection #2: 79 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 79 to 157
Garbage collection #3: 157 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 157 to 313
Garbage collection #4: 313 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 313 to 619
Garbage collection #5: 619 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 619 to 1237
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 97 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 97 to 193
Garbage collection #2: 193 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 193 to 383
Garbage collection #3: 383 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 383 to 761
Garbage collection #4: 761 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 761 to 1511
Garbage collection #5: 1511 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1511 to 3019
Garbage collection #6: 3019 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3019 to 6037
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #2: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #3: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #4: 397 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 397 to 787
Garbage collection #5: 787 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 787 to 1571
Garbage collection #1: 41 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 41 to 79
Garbage collection #2: 79 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 79 to 157
Garbage collection #3: 157 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 157 to 313
Garbage collection #4: 313 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 313 to 619
Garbage collection #5: 619 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 619 to 1237
Garbage collection #6: 1237 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1237 to 2473
Garbage collection #7: 2473 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2473 to 4943
Garbage collection #1: 97 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 97 to 193
Garbage collection #2: 193 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 193 to 383
Garbage collection #3: 383 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 383 to 761
Garbage collection #4: 761 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 761 to 1511
Garbage collection #5: 1511 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1511 to 3019
Garbage collection #6: 3019 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3019 to 6037
[2020-11-24 20:08:05,006 WARN  L188               SmtUtils]: Spent 285.00 ms on a formula simplification. DAG size of input: 197 DAG size of output: 197
[2020-11-24 20:08:05,435 WARN  L188               SmtUtils]: Spent 427.00 ms on a formula simplification. DAG size of input: 262 DAG size of output: 247
Garbage collection #1: 89 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 89 to 173
Garbage collection #2: 173 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 173 to 337
Garbage collection #3: 337 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 337 to 673
Garbage collection #4: 673 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 673 to 1327
Garbage collection #5: 1327 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1327 to 2647
Garbage collection #6: 2647 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2647 to 5281
Garbage collection #7: 5281 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 5281 to 10559
Garbage collection #8: 10559 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 10559 to 21107
Garbage collection #1: 59 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 59 to 113
Garbage collection #2: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #3: 223 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 223 to 443
Garbage collection #4: 443 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 443 to 883
Garbage collection #5: 883 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 883 to 1759
Garbage collection #6: 1759 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1759 to 3517
Garbage collection #7: 3517 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3517 to 7027
[2020-11-24 20:08:05,566 WARN  L188               SmtUtils]: Spent 115.00 ms on a formula simplification. DAG size of input: 152 DAG size of output: 146
[2020-11-24 20:08:05,739 WARN  L188               SmtUtils]: Spent 172.00 ms on a formula simplification that was a NOOP. DAG size: 305
Garbage collection #1: 127 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 127 to 251
Garbage collection #2: 251 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 251 to 499
Garbage collection #3: 499 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 499 to 997
Garbage collection #4: 997 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 997 to 1993
Garbage collection #5: 1993 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1993 to 3967
Garbage collection #6: 3967 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3967 to 7933
Garbage collection #7: 7933 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 7933 to 15859
[2020-11-24 20:08:06,026 WARN  L188               SmtUtils]: Spent 280.00 ms on a formula simplification. DAG size of input: 244 DAG size of output: 244
[2020-11-24 20:08:06,892 WARN  L188               SmtUtils]: Spent 864.00 ms on a formula simplification. DAG size of input: 453 DAG size of output: 446
Garbage collection #1: 179 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 179 to 353
Garbage collection #2: 353 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 353 to 701
Garbage collection #3: 701 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 701 to 1399
Garbage collection #4: 1399 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1399 to 2797
Garbage collection #5: 2797 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2797 to 5591
Garbage collection #6: 5591 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 5591 to 11177
Garbage collection #7: 11177 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11177 to 22349
Garbage collection #1: 67 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 67 to 131
Garbage collection #2: 131 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 131 to 257
Garbage collection #3: 257 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 257 to 509
Garbage collection #4: 509 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 509 to 1013
Garbage collection #5: 1013 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1013 to 2017
Garbage collection #6: 2017 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2017 to 4027
[2020-11-24 20:08:07,144 WARN  L188               SmtUtils]: Spent 235.00 ms on a formula simplification. DAG size of input: 200 DAG size of output: 200
[2020-11-24 20:08:07,343 WARN  L188               SmtUtils]: Spent 182.00 ms on a formula simplification that was a NOOP. DAG size: 313
Garbage collection #1: 107 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 107 to 211
Garbage collection #2: 211 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 211 to 421
Garbage collection #3: 421 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 421 to 839
Garbage collection #4: 839 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 839 to 1669
Garbage collection #5: 1669 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1669 to 3331
Garbage collection #6: 3331 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3331 to 6661
Garbage collection #7: 6661 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 6661 to 13313
Garbage collection #1: 79 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 79 to 157
Garbage collection #2: 157 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 157 to 313
Garbage collection #3: 313 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 313 to 619
Garbage collection #4: 619 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 619 to 1237
Garbage collection #5: 1237 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1237 to 2473
Garbage collection #6: 2473 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2473 to 4943
[2020-11-24 20:08:08,234 WARN  L188               SmtUtils]: Spent 883.00 ms on a formula simplification. DAG size of input: 232 DAG size of output: 221
[2020-11-24 20:08:08,778 WARN  L188               SmtUtils]: Spent 543.00 ms on a formula simplification. DAG size of input: 336 DAG size of output: 335
Garbage collection #1: 127 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 127 to 251
Garbage collection #2: 251 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 251 to 499
Garbage collection #3: 499 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 499 to 997
Garbage collection #4: 997 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 997 to 1993
Garbage collection #5: 1993 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1993 to 3967
Garbage collection #6: 3967 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3967 to 7933
Garbage collection #7: 7933 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 7933 to 15859
Garbage collection #1: 127 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 127 to 251
Garbage collection #2: 251 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 251 to 499
Garbage collection #3: 499 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 499 to 997
Garbage collection #4: 997 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 997 to 1993
Garbage collection #5: 1993 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1993 to 3967
Garbage collection #6: 3967 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3967 to 7933
Garbage collection #7: 7933 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 7933 to 15859
Garbage collection #8: 15859 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 15859 to 31699
Garbage collection #9: 31699 nodes / 0 free / 0.001s / 0.002s total
Resizing node table from 31699 to 63397
[2020-11-24 20:08:09,552 WARN  L188               SmtUtils]: Spent 753.00 ms on a formula simplification. DAG size of input: 349 DAG size of output: 330
[2020-11-24 20:08:09,570 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-24 20:08:09,578 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer CFG 24.11 08:08:09 BasicIcfg
[2020-11-24 20:08:09,578 INFO  L132        PluginConnector]: ------------------------ END BuchiAutomizer----------------------------
[2020-11-24 20:08:09,578 INFO  L168              Benchmark]: Toolchain (without parser) took 16334.07 ms. Allocated memory was 1.0 GB in the beginning and 2.2 GB in the end (delta: 1.2 GB). Free memory was 929.8 MB in the beginning and 1.3 GB in the end (delta: -403.5 MB). Peak memory consumption was 1.2 GB. Max. memory is 15.3 GB.
[2020-11-24 20:08:09,579 INFO  L168              Benchmark]: Boogie PL CUP Parser took 0.15 ms. Allocated memory is still 1.0 GB. Free memory is still 951.3 MB. There was no memory consumed. Max. memory is 15.3 GB.
[2020-11-24 20:08:09,579 INFO  L168              Benchmark]: Boogie Preprocessor took 116.20 ms. Allocated memory is still 1.0 GB. Free memory was 929.8 MB in the beginning and 919.1 MB in the end (delta: 10.7 MB). Peak memory consumption was 10.7 MB. Max. memory is 15.3 GB.
[2020-11-24 20:08:09,579 INFO  L168              Benchmark]: UtopiaSpecLang took 64.74 ms. Allocated memory is still 1.0 GB. Free memory was 919.1 MB in the beginning and 913.7 MB in the end (delta: 5.4 MB). Peak memory consumption was 5.4 MB. Max. memory is 15.3 GB.
[2020-11-24 20:08:09,579 INFO  L168              Benchmark]: Boogie Printer took 20.52 ms. Allocated memory is still 1.0 GB. Free memory was 913.7 MB in the beginning and 908.4 MB in the end (delta: 5.4 MB). Peak memory consumption was 5.4 MB. Max. memory is 15.3 GB.
[2020-11-24 20:08:09,580 INFO  L168              Benchmark]: RCFGBuilder took 968.42 ms. Allocated memory was 1.0 GB in the beginning and 1.1 GB in the end (delta: 64.5 MB). Free memory was 908.4 MB in the beginning and 1.0 GB in the end (delta: -121.5 MB). Peak memory consumption was 195.7 MB. Max. memory is 15.3 GB.
[2020-11-24 20:08:09,580 INFO  L168              Benchmark]: UtopiaLTL2Aut took 36.41 ms. Allocated memory is still 1.1 GB. Free memory was 1.0 GB in the beginning and 1.0 GB in the end (delta: 13.1 MB). Peak memory consumption was 13.1 MB. Max. memory is 15.3 GB.
[2020-11-24 20:08:09,580 INFO  L168              Benchmark]: BÃ¼chi Program Product took 1583.41 ms. Allocated memory was 1.1 GB in the beginning and 1.3 GB in the end (delta: 159.9 MB). Free memory was 1.0 GB in the beginning and 1.1 GB in the end (delta: -41.7 MB). Peak memory consumption was 526.3 MB. Max. memory is 15.3 GB.
[2020-11-24 20:08:09,581 INFO  L168              Benchmark]: BlockEncodingV2 took 164.54 ms. Allocated memory is still 1.3 GB. Free memory was 1.1 GB in the beginning and 961.6 MB in the end (delta: 96.9 MB). Peak memory consumption was 96.9 MB. Max. memory is 15.3 GB.
[2020-11-24 20:08:09,581 INFO  L168              Benchmark]: BuchiAutomizer took 13376.94 ms. Allocated memory was 1.3 GB in the beginning and 2.2 GB in the end (delta: 994.1 MB). Free memory was 961.6 MB in the beginning and 1.3 GB in the end (delta: -371.7 MB). Peak memory consumption was 998.0 MB. Max. memory is 15.3 GB.
[2020-11-24 20:08:09,585 INFO  L337   ainManager$Toolchain]: #######################  End [Toolchain 1] #######################
 --- Results ---
 * Results from de.uni_freiburg.informatik.ultimate.plugins.blockencoding:
  - StatisticsResult: Initial Icfg
    5864 locations, 10885 edges
  - StatisticsResult: Encoded RCFG
    5728 locations, 10506 edges
 * Results from de.uni_freiburg.informatik.ultimate.core:
  - StatisticsResult: Toolchain Benchmarks
    Benchmark results are:
 * Boogie PL CUP Parser took 0.15 ms. Allocated memory is still 1.0 GB. Free memory is still 951.3 MB. There was no memory consumed. Max. memory is 15.3 GB.
 * Boogie Preprocessor took 116.20 ms. Allocated memory is still 1.0 GB. Free memory was 929.8 MB in the beginning and 919.1 MB in the end (delta: 10.7 MB). Peak memory consumption was 10.7 MB. Max. memory is 15.3 GB.
 * UtopiaSpecLang took 64.74 ms. Allocated memory is still 1.0 GB. Free memory was 919.1 MB in the beginning and 913.7 MB in the end (delta: 5.4 MB). Peak memory consumption was 5.4 MB. Max. memory is 15.3 GB.
 * Boogie Printer took 20.52 ms. Allocated memory is still 1.0 GB. Free memory was 913.7 MB in the beginning and 908.4 MB in the end (delta: 5.4 MB). Peak memory consumption was 5.4 MB. Max. memory is 15.3 GB.
 * RCFGBuilder took 968.42 ms. Allocated memory was 1.0 GB in the beginning and 1.1 GB in the end (delta: 64.5 MB). Free memory was 908.4 MB in the beginning and 1.0 GB in the end (delta: -121.5 MB). Peak memory consumption was 195.7 MB. Max. memory is 15.3 GB.
 * UtopiaLTL2Aut took 36.41 ms. Allocated memory is still 1.1 GB. Free memory was 1.0 GB in the beginning and 1.0 GB in the end (delta: 13.1 MB). Peak memory consumption was 13.1 MB. Max. memory is 15.3 GB.
 * BÃ¼chi Program Product took 1583.41 ms. Allocated memory was 1.1 GB in the beginning and 1.3 GB in the end (delta: 159.9 MB). Free memory was 1.0 GB in the beginning and 1.1 GB in the end (delta: -41.7 MB). Peak memory consumption was 526.3 MB. Max. memory is 15.3 GB.
 * BlockEncodingV2 took 164.54 ms. Allocated memory is still 1.3 GB. Free memory was 1.1 GB in the beginning and 961.6 MB in the end (delta: 96.9 MB). Peak memory consumption was 96.9 MB. Max. memory is 15.3 GB.
 * BuchiAutomizer took 13376.94 ms. Allocated memory was 1.3 GB in the beginning and 2.2 GB in the end (delta: 994.1 MB). Free memory was 961.6 MB in the beginning and 1.3 GB in the end (delta: -371.7 MB). Peak memory consumption was 998.0 MB. Max. memory is 15.3 GB.
 * Results from de.uni_freiburg.informatik.ultimate.buchiprogramproduct:
  - StatisticsResult: Initial property automaton
    2 locations, 3 edges
  - StatisticsResult: Initial RCFG
    2280 locations, 3330 edges
  - StatisticsResult: BuchiProgram size
    5864 locations, 10885 edges
 * Results from de.uni_freiburg.informatik.ultimate.plugins.generator.traceabstraction:
  - StatisticsResult: Constructed decomposition of program
    Your program was decomposed into 8 terminating modules (8 trivial, 0 deterministic, 0 nondeterministic) and one nonterminating remainder module.8 modules have a trivial ranking function, the largest among these consists of 18 locations. The remainder module has 3947 locations.
  - StatisticsResult: Timing statistics
    BÃ¼chiAutomizer plugin needed 13.3s and 9 iterations.  TraceHistogramMax:5. Analysis of lassos took 7.7s. Construction of modules took 3.3s. BÃ¼chi inclusion checks took 1.3s. Highest rank in rank-based complementation 0. Minimization of det autom 8. Minimization of nondet autom 0. Automata minimization 0.3s AutomataMinimizationTime, 8 MinimizatonAttempts, 2166 StatesRemovedByMinimization, 5 NontrivialMinimizations. Non-live state removal took 0.2s Buchi closure took 0.0s. Biggest automaton had 4142 states and ocurred in iteration 2.	Nontrivial modules had stage [0, 0, 0, 0, 0].	InterpolantCoveringCapabilityFinite: 0/0	InterpolantCoveringCapabilityBuchi: 0/0	HoareTripleCheckerStatistics: 35945 SDtfs, 22295 SDslu, 83395 SDs, 0 SdLazy, 48167 SolverSat, 3404 SolverUnsat, 0 SolverUnknown, 0 SolverNotchecked, 3.3s Time	LassoAnalysisResults: nont1 unkn0 SFLI1 SFLT0 conc0 concLT0 SILN0 SILU7 SILI0 SILT0 lasso0 LassoPreprocessingBenchmarks: LassoTerminationAnalysisBenchmarks: not availableLassoTerminationAnalysisBenchmarks: LassoNonterminationAnalysisSatFixpoint: 0	LassoNonterminationAnalysisSatUnbounded: 0	LassoNonterminationAnalysisUnsat: 0	LassoNonterminationAnalysisUnknown: 0	LassoNonterminationAnalysisTime: 0.0s	
  - TransactionCounterexample: Violation of LTL property LTL
    Found an infinite, lasso-shaped execution that violates the LTL property LTL.
Stem:
address(1000000000000000013287555096) = (new KeepToken)({from : 1000000000000000013287555074});
[L1369]              havoc __exception;
[L1370]              revert := false;
[L1371]  COND FALSE  !(__exception)
[L1396]  CALL        call KeepToken_KeepToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4025]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2561]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2546]              assume msgsender_MSG != null;
[L2547]              Balance[this] := 0;
[L2561]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2562]  COND FALSE  !(revert)
[L4025]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4026]  COND FALSE  !(revert)
[L4029]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2605]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2590]              assume msgsender_MSG != null;
[L2591]              Balance[this] := 0;
[L2605]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2606]  COND FALSE  !(revert)
[L4029]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4030]  COND FALSE  !(revert)
[L4033]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2655]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2561]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2546]              assume msgsender_MSG != null;
[L2547]              Balance[this] := 0;
[L2561]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2562]  COND FALSE  !(revert)
[L2655]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2656]  COND FALSE  !(revert)
[L2659]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2605]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2590]              assume msgsender_MSG != null;
[L2591]              Balance[this] := 0;
[L2605]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2606]  COND FALSE  !(revert)
[L2659]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2660]  COND FALSE  !(revert)
[L2663]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2627]              assume msgsender_MSG != null;
[L2628]              Balance[this] := 0;
[L2629]              _balances_ERC20[this] := zeroRefintArr();
[L2630]              sum__balances0[this] := 0;
[L2631]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2632]              sum__allowances1[this] := 0;
[L2633]              _totalSupply_ERC20[this] := 0;
[L2663]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2664]  COND FALSE  !(revert)
[L4033]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4034]  COND FALSE  !(revert)
[L4037]  CALL        call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L3809]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2561]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2546]              assume msgsender_MSG != null;
[L2547]              Balance[this] := 0;
[L2561]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2562]  COND FALSE  !(revert)
[L3809]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3810]  COND FALSE  !(revert)
[L3813]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2605]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2590]              assume msgsender_MSG != null;
[L2591]              Balance[this] := 0;
[L2605]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2606]  COND FALSE  !(revert)
[L3813]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3814]  COND FALSE  !(revert)
[L3817]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2655]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2561]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2546]              assume msgsender_MSG != null;
[L2547]              Balance[this] := 0;
[L2561]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2562]  COND FALSE  !(revert)
[L2655]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2656]  COND FALSE  !(revert)
[L2659]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2605]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2590]              assume msgsender_MSG != null;
[L2591]              Balance[this] := 0;
[L2605]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2606]  COND FALSE  !(revert)
[L2659]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2660]  COND FALSE  !(revert)
[L2663]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2627]              assume msgsender_MSG != null;
[L2628]              Balance[this] := 0;
[L2629]              _balances_ERC20[this] := zeroRefintArr();
[L2630]              sum__balances0[this] := 0;
[L2631]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2632]              sum__allowances1[this] := 0;
[L2633]              _totalSupply_ERC20[this] := 0;
[L2663]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2664]  COND FALSE  !(revert)
[L3817]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3818]  COND FALSE  !(revert)
[L3821]  CALL        call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3782]              assume msgsender_MSG != null;
[L3783]              Balance[this] := 0;
[L3821]  RET         call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3822]  COND FALSE  !(revert)
[L4037]  RET         call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L4038]  COND FALSE  !(revert)
[L4041]  CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, NAME_KeepToken[this], SYMBOL_KeepToken[this], DECIMALS_KeepToken[this]);
[L3725]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2605]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2590]              assume msgsender_MSG != null;
[L2591]              Balance[this] := 0;
[L2605]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2606]  COND FALSE  !(revert)
[L3725]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3726]  COND FALSE  !(revert)
[L3729]  CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s650, symbol_s650, decimals_s650);
[L3700]              assume msgsender_MSG != null;
[L3701]              Balance[this] := 0;
[L3702]              _name_ERC20Detailed[this] := -708534286;
[L3703]              _symbol_ERC20Detailed[this] := -708534286;
[L3704]              _decimals_ERC20Detailed[this] := 0;
[L3706]              _name_ERC20Detailed[this] := name_s650;
[L3707]              _symbol_ERC20Detailed[this] := symbol_s650;
[L3708]              _decimals_ERC20Detailed[this] := decimals_s650;
[L3729]  RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s650, symbol_s650, decimals_s650);
[L3730]  COND FALSE  !(revert)
[L4041]  RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, NAME_KeepToken[this], SYMBOL_KeepToken[this], DECIMALS_KeepToken[this]);
[L4042]  COND FALSE  !(revert)
[L4045]  CALL        call KeepToken_KeepToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3978]              assume msgsender_MSG != null;
[L3979]              Balance[this] := 0;
[L3980]              NAME_KeepToken[this] := 153019343;
[L3981]              SYMBOL_KeepToken[this] := 577946439;
[L3982]              DECIMALS_KeepToken[this] := 18;
[L3983]              INITIAL_SUPPLY_KeepToken[this] := 1000000000000000013287555072 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3985]  COND TRUE   DType[this] == KeepToken
[L3986]  CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, INITIAL_SUPPLY_KeepToken[this]);
[L3409]              __var_16 := null;
[L3410]  COND FALSE  !(!(account_s503 != null))
[L3414]  CALL        call __var_17 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s503);
[L2426]              c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2427]  COND FALSE  !(!(c_s26 >= a_s26))
[L2431]              __ret_0_ := c_s26;
[L3414]  RET         call __var_17 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s503);
[L3415]  COND FALSE  !(revert)
[L3418]              _totalSupply_ERC20[this] := __var_17;
[L3419]  CALL        call __var_18 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s503], amount_s503);
[L2426]              c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2427]  COND FALSE  !(!(c_s26 >= a_s26))
[L2431]              __ret_0_ := c_s26;
[L3419]  RET         call __var_18 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s503], amount_s503);
[L3420]  COND FALSE  !(revert)
[L3423]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s503];
[L3424]              _balances_ERC20[this][account_s503] := __var_18;
[L3425]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s503];
[L3426]              assert { :EventEmitted "Transfer_ERC20" } true;
[L3986]  RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, INITIAL_SUPPLY_KeepToken[this]);
[L3987]  COND FALSE  !(revert)
[L4045]  RET         call KeepToken_KeepToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4046]  COND FALSE  !(revert)
[L1396]  RET         call KeepToken_KeepToken__success(this, msgsender_MSG, msgvalue_MSG);
[L1397]              assume !revert && gas >= 0;
[L6175]  RET         call KeepToken_KeepToken(this, msgsender_MSG, msgvalue_MSG);
ERC20(1000000000000000013287555096).approve~address~uint256.gas(3979001)({from : 1000000000000000013287555082, spender : 0, amount : 0});
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume p1 != msgsender_MSG || p2 != spender_s312;
[L3]                 call_approve_ERC200 := true;
[L3]                 call_approve_ERC200 := false;
[L3]                 revert := revert_hold;
[L581]               havoc __exception;
[L582]               revert := false;
[L583]   COND TRUE   __exception
[L584]               __tmp__Balance := Balance;
[L585]               __tmp__DType := DType;
[L586]               __tmp__Alloc := Alloc;
[L587]               __tmp__balance_ADDR := balance_ADDR;
[L588]               __tmp__M_Ref_int := M_Ref_int;
[L589]               __tmp__sum__balances0 := sum__balances0;
[L590]               __tmp__alloc__allowances_ERC20_lvl0 := alloc__allowances_ERC20_lvl0;
[L591]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L592]               __tmp__sum__allowances1 := sum__allowances1;
[L593]               __tmp__Length := Length;
[L594]               __tmp__now := now;
[L595]               __tmp___balances_ERC20 := _balances_ERC20;
[L596]               __tmp___allowances_ERC20 := _allowances_ERC20;
[L597]               __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L598]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L599]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L600]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L601]               __tmp__NAME_KeepToken := NAME_KeepToken;
[L602]               __tmp__SYMBOL_KeepToken := SYMBOL_KeepToken;
[L603]               __tmp__DECIMALS_KeepToken := DECIMALS_KeepToken;
[L604]               __tmp__INITIAL_SUPPLY_KeepToken := INITIAL_SUPPLY_KeepToken;
[L605]   CALL        call __ret_0_ := approve~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, spender_s312, amount_s312);
[L2794]  COND TRUE   __tmp__DType[this] == KeepToken
[L2795]  CALL        call __var_2 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L2569]              __ret_0_ := msgsender_MSG;
[L2795]  RET         call __var_2 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L2796]  COND FALSE  !(revert)
[L2812]  COND TRUE   __tmp__DType[this] == KeepToken
[L2813]  CALL        call _approve~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, __var_2, spender_s312, amount_s312);
[L3482]              __var_22 := null;
[L3483]  COND FALSE  !(!(owner_s590 != null))
[L3487]              __var_23 := null;
[L3488]  COND TRUE   !(spender_s590 != null)
[L3489]              revert := true;
[L2813]  RET         call _approve~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, __var_2, spender_s312, amount_s312);
[L2814]  COND TRUE   revert
[L605]   RET         call __ret_0_ := approve~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, spender_s312, amount_s312);
[L606]               assume revert || gas < 0;
[L6075]  RET         call __ret_0_approve := approve~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, spender_s312, amount_s312);

Loop:

End of lasso representation.
RESULT: Ultimate could not prove your program: Toolchain returned no result.
Received shutdown request...
