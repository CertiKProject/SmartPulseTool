This is Ultimate 0.1.24-f1553f5-m
[2020-11-25 14:00:23,936 INFO  L170        SettingsManager]: Resetting all preferences to default values...
[2020-11-25 14:00:23,938 INFO  L174        SettingsManager]: Resetting UltimateCore preferences to default values
[2020-11-25 14:00:23,948 INFO  L177        SettingsManager]: Ultimate Commandline Interface provides no preferences, ignoring...
[2020-11-25 14:00:23,949 INFO  L174        SettingsManager]: Resetting Boogie Preprocessor preferences to default values
[2020-11-25 14:00:23,949 INFO  L174        SettingsManager]: Resetting Boogie Procedure Inliner preferences to default values
[2020-11-25 14:00:23,950 INFO  L174        SettingsManager]: Resetting Abstract Interpretation preferences to default values
[2020-11-25 14:00:23,952 INFO  L174        SettingsManager]: Resetting LassoRanker preferences to default values
[2020-11-25 14:00:23,953 INFO  L174        SettingsManager]: Resetting Reaching Definitions preferences to default values
[2020-11-25 14:00:23,954 INFO  L174        SettingsManager]: Resetting SyntaxChecker preferences to default values
[2020-11-25 14:00:23,954 INFO  L177        SettingsManager]: BÃ¼chi Program Product provides no preferences, ignoring...
[2020-11-25 14:00:23,955 INFO  L174        SettingsManager]: Resetting LTL2Aut preferences to default values
[2020-11-25 14:00:23,955 INFO  L174        SettingsManager]: Resetting PEA to Boogie preferences to default values
[2020-11-25 14:00:23,956 INFO  L174        SettingsManager]: Resetting BlockEncodingV2 preferences to default values
[2020-11-25 14:00:23,957 INFO  L174        SettingsManager]: Resetting ChcToBoogie preferences to default values
[2020-11-25 14:00:23,957 INFO  L174        SettingsManager]: Resetting AutomataScriptInterpreter preferences to default values
[2020-11-25 14:00:23,958 INFO  L174        SettingsManager]: Resetting BuchiAutomizer preferences to default values
[2020-11-25 14:00:23,959 INFO  L174        SettingsManager]: Resetting CACSL2BoogieTranslator preferences to default values
[2020-11-25 14:00:23,960 INFO  L174        SettingsManager]: Resetting CodeCheck preferences to default values
[2020-11-25 14:00:23,962 INFO  L174        SettingsManager]: Resetting InvariantSynthesis preferences to default values
[2020-11-25 14:00:23,963 INFO  L174        SettingsManager]: Resetting RCFGBuilder preferences to default values
[2020-11-25 14:00:23,963 INFO  L174        SettingsManager]: Resetting TraceAbstraction preferences to default values
[2020-11-25 14:00:23,965 INFO  L177        SettingsManager]: TraceAbstractionConcurrent provides no preferences, ignoring...
[2020-11-25 14:00:23,965 INFO  L177        SettingsManager]: TraceAbstractionWithAFAs provides no preferences, ignoring...
[2020-11-25 14:00:23,965 INFO  L174        SettingsManager]: Resetting TreeAutomizer preferences to default values
[2020-11-25 14:00:23,966 INFO  L174        SettingsManager]: Resetting IcfgToChc preferences to default values
[2020-11-25 14:00:23,966 INFO  L174        SettingsManager]: Resetting IcfgTransformer preferences to default values
[2020-11-25 14:00:23,967 INFO  L177        SettingsManager]: ReqToTest provides no preferences, ignoring...
[2020-11-25 14:00:23,967 INFO  L174        SettingsManager]: Resetting UtopiaLTL2Aut preferences to default values
[2020-11-25 14:00:23,967 INFO  L174        SettingsManager]: Resetting UtopiaSpecLang preferences to default values
[2020-11-25 14:00:23,967 INFO  L174        SettingsManager]: Resetting Boogie Printer preferences to default values
[2020-11-25 14:00:23,968 INFO  L174        SettingsManager]: Resetting ChcSmtPrinter preferences to default values
[2020-11-25 14:00:23,968 INFO  L174        SettingsManager]: Resetting ReqPrinter preferences to default values
[2020-11-25 14:00:23,969 INFO  L174        SettingsManager]: Resetting Witness Printer preferences to default values
[2020-11-25 14:00:23,969 INFO  L177        SettingsManager]: Boogie PL CUP Parser provides no preferences, ignoring...
[2020-11-25 14:00:23,970 INFO  L174        SettingsManager]: Resetting CDTParser preferences to default values
[2020-11-25 14:00:23,970 INFO  L177        SettingsManager]: AutomataScriptParser provides no preferences, ignoring...
[2020-11-25 14:00:23,970 INFO  L177        SettingsManager]: ReqParser provides no preferences, ignoring...
[2020-11-25 14:00:23,970 INFO  L174        SettingsManager]: Resetting SmtParser preferences to default values
[2020-11-25 14:00:23,971 INFO  L174        SettingsManager]: Resetting Witness Parser preferences to default values
[2020-11-25 14:00:23,971 INFO  L181        SettingsManager]: Finished resetting all preferences to default values...
[2020-11-25 14:00:23,972 INFO  L98         SettingsManager]: Beginning loading settings from /mnt/data0/jon/SmartPulseTool/SmartPulse/settings.epf
[2020-11-25 14:00:23,979 INFO  L110        SettingsManager]: Loading preferences was successful
[2020-11-25 14:00:23,979 INFO  L112        SettingsManager]: Preferences different from defaults after loading the file:
[2020-11-25 14:00:23,980 INFO  L131        SettingsManager]: Preferences of LTL2Aut differ from their defaults:
[2020-11-25 14:00:23,980 INFO  L133        SettingsManager]:  * Read property from file=true
[2020-11-25 14:00:23,980 INFO  L133        SettingsManager]:  * Path to LTL*BA executable (LTL2BA, LTL3BA)=/mnt/data0/jon/SmartPulseTool/ltl2ba
[2020-11-25 14:00:23,980 INFO  L131        SettingsManager]: Preferences of BlockEncodingV2 differ from their defaults:
[2020-11-25 14:00:23,980 INFO  L133        SettingsManager]:  * Maximize final states=false
[2020-11-25 14:00:23,981 INFO  L133        SettingsManager]:  * Minimize states even if more edges are added than removed.=true
[2020-11-25 14:00:23,981 INFO  L133        SettingsManager]:  * Minimize states using LBE with the strategy=NONE
[2020-11-25 14:00:23,981 INFO  L131        SettingsManager]: Preferences of BuchiAutomizer differ from their defaults:
[2020-11-25 14:00:23,981 INFO  L133        SettingsManager]:  * Compute Interpolants along a Counterexample=Craig_TreeInterpolation
[2020-11-25 14:00:23,981 INFO  L133        SettingsManager]:  * Use old map elimination=false
[2020-11-25 14:00:23,981 INFO  L133        SettingsManager]:  * Try twofold refinement=false
[2020-11-25 14:00:23,981 INFO  L131        SettingsManager]: Preferences of CACSL2BoogieTranslator differ from their defaults:
[2020-11-25 14:00:23,981 INFO  L133        SettingsManager]:  * Check unreachability of error function in SV-COMP mode=false
[2020-11-25 14:00:23,981 INFO  L133        SettingsManager]:  * Overapproximate operations on floating types=true
[2020-11-25 14:00:23,982 INFO  L133        SettingsManager]:  * Check division by zero=IGNORE
[2020-11-25 14:00:23,982 INFO  L133        SettingsManager]:  * Pointer to allocated memory at dereference=ASSUME
[2020-11-25 14:00:23,982 INFO  L133        SettingsManager]:  * If two pointers are subtracted or compared they have the same base address=ASSUME
[2020-11-25 14:00:23,982 INFO  L133        SettingsManager]:  * Check array bounds for arrays that are off heap=ASSUME
[2020-11-25 14:00:23,982 INFO  L133        SettingsManager]:  * Check if freed pointer was valid=false
[2020-11-25 14:00:23,982 INFO  L133        SettingsManager]:  * Use constant arrays=true
[2020-11-25 14:00:23,982 INFO  L133        SettingsManager]:  * Pointer base address is valid at dereference=ASSUME
[2020-11-25 14:00:23,982 INFO  L131        SettingsManager]: Preferences of RCFGBuilder differ from their defaults:
[2020-11-25 14:00:23,982 INFO  L133        SettingsManager]:  * Size of a code block=SingleStatement
[2020-11-25 14:00:23,982 INFO  L133        SettingsManager]:  * SMT solver=Internal_SMTInterpol
[2020-11-25 14:00:24,005 INFO  L81    nceAwareModelManager]: Repository-Root is: /tmp
[2020-11-25 14:00:24,020 INFO  L259   ainManager$Toolchain]: [Toolchain 1]: Applicable parser(s) successfully (re)initialized
[2020-11-25 14:00:24,023 INFO  L215   ainManager$Toolchain]: [Toolchain 1]: Toolchain selected.
[2020-11-25 14:00:24,024 INFO  L271        PluginConnector]: Initializing Boogie PL CUP Parser...
[2020-11-25 14:00:24,024 INFO  L276        PluginConnector]: Boogie PL CUP Parser initialized
[2020-11-25 14:00:24,025 INFO  L430   ainManager$Toolchain]: [Toolchain 1]: Parsing single file: /mnt/data0/jon/SmartPulseTool/DkargoToken_0x5dc60c4d5e75d22588fa17ffeb90a63e535efce0_transfer-normal.bpl
[2020-11-25 14:00:24,025 INFO  L111           BoogieParser]: Parsing: '/mnt/data0/jon/SmartPulseTool/DkargoToken_0x5dc60c4d5e75d22588fa17ffeb90a63e535efce0_transfer-normal.bpl'
[2020-11-25 14:00:24,128 INFO  L297   ainManager$Toolchain]: ####################### [Toolchain 1] #######################
[2020-11-25 14:00:24,129 INFO  L131        ToolchainWalker]: Walking toolchain with 8 elements.
[2020-11-25 14:00:24,129 INFO  L113        PluginConnector]: ------------------------Boogie Preprocessor----------------------------
[2020-11-25 14:00:24,129 INFO  L271        PluginConnector]: Initializing Boogie Preprocessor...
[2020-11-25 14:00:24,129 INFO  L276        PluginConnector]: Boogie Preprocessor initialized
[2020-11-25 14:00:24,145 INFO  L185        PluginConnector]: Executing the observer EnsureBoogieModelObserver from plugin Boogie Preprocessor for "DkargoToken_0x5dc60c4d5e75d22588fa17ffeb90a63e535efce0_transfer-normal.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 02:00:24" (1/1) ...
[2020-11-25 14:00:24,147 INFO  L185        PluginConnector]: Executing the observer TypeChecker from plugin Boogie Preprocessor for "DkargoToken_0x5dc60c4d5e75d22588fa17ffeb90a63e535efce0_transfer-normal.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 02:00:24" (1/1) ...
[2020-11-25 14:00:24,182 INFO  L185        PluginConnector]: Executing the observer ConstExpander from plugin Boogie Preprocessor for "DkargoToken_0x5dc60c4d5e75d22588fa17ffeb90a63e535efce0_transfer-normal.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 02:00:24" (1/1) ...
[2020-11-25 14:00:24,183 INFO  L185        PluginConnector]: Executing the observer StructExpander from plugin Boogie Preprocessor for "DkargoToken_0x5dc60c4d5e75d22588fa17ffeb90a63e535efce0_transfer-normal.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 02:00:24" (1/1) ...
[2020-11-25 14:00:24,209 INFO  L185        PluginConnector]: Executing the observer UnstructureCode from plugin Boogie Preprocessor for "DkargoToken_0x5dc60c4d5e75d22588fa17ffeb90a63e535efce0_transfer-normal.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 02:00:24" (1/1) ...
[2020-11-25 14:00:24,222 INFO  L185        PluginConnector]: Executing the observer FunctionInliner from plugin Boogie Preprocessor for "DkargoToken_0x5dc60c4d5e75d22588fa17ffeb90a63e535efce0_transfer-normal.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 02:00:24" (1/1) ...
[2020-11-25 14:00:24,234 INFO  L185        PluginConnector]: Executing the observer BoogieSymbolTableConstructor from plugin Boogie Preprocessor for "DkargoToken_0x5dc60c4d5e75d22588fa17ffeb90a63e535efce0_transfer-normal.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 02:00:24" (1/1) ...
[2020-11-25 14:00:24,248 INFO  L132        PluginConnector]: ------------------------ END Boogie Preprocessor----------------------------
[2020-11-25 14:00:24,249 INFO  L113        PluginConnector]: ------------------------UtopiaSpecLang----------------------------
[2020-11-25 14:00:24,249 INFO  L271        PluginConnector]: Initializing UtopiaSpecLang...
[2020-11-25 14:00:24,251 INFO  L276        PluginConnector]: UtopiaSpecLang initialized
[2020-11-25 14:00:24,255 INFO  L185        PluginConnector]: Executing the observer UtopiaSpecLangObserver from plugin UtopiaSpecLang for "DkargoToken_0x5dc60c4d5e75d22588fa17ffeb90a63e535efce0_transfer-normal.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 02:00:24" (1/1) ...
[2020-11-25 14:00:24,277 INFO  L1012  opiaSpecLangObserver]: Parsing LTLPlus Formula to AstNode: [](started(DkargoToken.transfer(to, value), p1 != msg.sender && p1 != to && msg.sender != to && value <= _balances_ERC20[this][msg.sender] && _balances_ERC20[this][to] + value < 0x10000000000000000000000000000000000000000000000000000000000000000 && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][to] >= 0 && _balances_ERC20[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][msg.sender] >= 0 &&  _balances_ERC20[this][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(finished(DkargoToken.transfer(to, value), return == true && _balances_ERC20[this][msg.sender] == old(_balances_ERC20[this][msg.sender]) - value && _balances_ERC20[this][to] == old(_balances_ERC20[this][to]) + value && _supply_ERC20[this] == old(_supply_ERC20[this]) && _allowances_ERC20[this] == old(_allowances_ERC20[this]) && _balances_ERC20[this][p1] == old(_balances_ERC20[this][p1]) && _name_DkargoToken[this] == old(_name_DkargoToken[this]) && _symbol_DkargoToken[this] == old(_symbol_DkargoToken[this]) && _dkargoPrefix_DkargoPrefix[this] == old(_dkargoPrefix_DkargoPrefix[this]) && _infcs_ERC165[this] == old(_infcs_ERC165[this]) && _slist_AddressChain[this] == old(_slist_AddressChain[this]) && _owner_Ownership[this] == old(_owner_Ownership[this]))))
[2020-11-25 14:00:24,282 INFO  L1016  opiaSpecLangObserver]: Successfully lexed: [](started(DkargoToken.transfer(to, value), p1 != msg.sender && p1 != to && msg.sender != to && value <= _balances_ERC20[this][msg.sender] && _balances_ERC20[this][to] + value < 0x10000000000000000000000000000000000000000000000000000000000000000 && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][to] >= 0 && _balances_ERC20[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][msg.sender] >= 0 &&  _balances_ERC20[this][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(finished(DkargoToken.transfer(to, value), return == true && _balances_ERC20[this][msg.sender] == old(_balances_ERC20[this][msg.sender]) - value && _balances_ERC20[this][to] == old(_balances_ERC20[this][to]) + value && _supply_ERC20[this] == old(_supply_ERC20[this]) && _allowances_ERC20[this] == old(_allowances_ERC20[this]) && _balances_ERC20[this][p1] == old(_balances_ERC20[this][p1]) && _name_DkargoToken[this] == old(_name_DkargoToken[this]) && _symbol_DkargoToken[this] == old(_symbol_DkargoToken[this]) && _dkargoPrefix_DkargoPrefix[this] == old(_dkargoPrefix_DkargoPrefix[this]) && _infcs_ERC165[this] == old(_infcs_ERC165[this]) && _slist_AddressChain[this] == old(_slist_AddressChain[this]) && _owner_Ownership[this] == old(_owner_Ownership[this]))))
[2020-11-25 14:00:24,290 INFO  L1018  opiaSpecLangObserver]: Successfully parsed: [](started(DkargoToken.transfer(to, value), p1 != msg.sender && p1 != to && msg.sender != to && value <= _balances_ERC20[this][msg.sender] && _balances_ERC20[this][to] + value < 0x10000000000000000000000000000000000000000000000000000000000000000 && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][to] >= 0 && _balances_ERC20[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][msg.sender] >= 0 &&  _balances_ERC20[this][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(finished(DkargoToken.transfer(to, value), return == true && _balances_ERC20[this][msg.sender] == old(_balances_ERC20[this][msg.sender]) - value && _balances_ERC20[this][to] == old(_balances_ERC20[this][to]) + value && _supply_ERC20[this] == old(_supply_ERC20[this]) && _allowances_ERC20[this] == old(_allowances_ERC20[this]) && _balances_ERC20[this][p1] == old(_balances_ERC20[this][p1]) && _name_DkargoToken[this] == old(_name_DkargoToken[this]) && _symbol_DkargoToken[this] == old(_symbol_DkargoToken[this]) && _dkargoPrefix_DkargoPrefix[this] == old(_dkargoPrefix_DkargoPrefix[this]) && _infcs_ERC165[this] == old(_infcs_ERC165[this]) && _slist_AddressChain[this] == old(_slist_AddressChain[this]) && _owner_Ownership[this] == old(_owner_Ownership[this]))))
[2020-11-25 14:00:24,305 INFO  L636   opiaSpecLangObserver]: Parsed ( ( ( ( ( ( ( ( ( ( p1!=msg.sender && p1!=to_s1257 ) && msg.sender!=to_s1257 ) && value_s1257<=_balances_ERC20[this][msg.sender] ) && ( _balances_ERC20[this][to_s1257] + value_s1257 )<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) && value_s1257>=0 ) && value_s1257<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) && _balances_ERC20[this][to_s1257]>=0 ) && _balances_ERC20[this][to_s1257]<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) && _balances_ERC20[this][msg.sender]>=0 ) && _balances_ERC20[this][msg.sender]<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) to BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[COMPNEQ,IdentifierExpression[p1,GLOBAL],IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transfer~address~uint256_DkargoToken>]],BinaryExpression[COMPNEQ,IdentifierExpression[p1,GLOBAL],IdentifierExpression[to_s1257,<IMPLEMENTATION_INPARAM,transfer~address~uint256_DkargoToken>]]],BinaryExpression[COMPNEQ,IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transfer~address~uint256_DkargoToken>],IdentifierExpression[to_s1257,<IMPLEMENTATION_INPARAM,transfer~address~uint256_DkargoToken>]]],BinaryExpression[COMPLEQ,IdentifierExpression[value_s1257,<IMPLEMENTATION_INPARAM,transfer~address~uint256_DkargoToken>],ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_DkargoToken>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transfer~address~uint256_DkargoToken>]]]]],BinaryExpression[COMPLT,BinaryExpression[ARITHPLUS,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_DkargoToken>]]],[IdentifierExpression[to_s1257,<IMPLEMENTATION_INPARAM,transfer~address~uint256_DkargoToken>]]],IdentifierExpression[value_s1257,<IMPLEMENTATION_INPARAM,transfer~address~uint256_DkargoToken>]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]],BinaryExpression[COMPGEQ,IdentifierExpression[value_s1257,<IMPLEMENTATION_INPARAM,transfer~address~uint256_DkargoToken>],IntegerLiteral[0]]],BinaryExpression[COMPLT,IdentifierExpression[value_s1257,<IMPLEMENTATION_INPARAM,transfer~address~uint256_DkargoToken>],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]],BinaryExpression[COMPGEQ,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_DkargoToken>]]],[IdentifierExpression[to_s1257,<IMPLEMENTATION_INPARAM,transfer~address~uint256_DkargoToken>]]],IntegerLiteral[0]]],BinaryExpression[COMPLT,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_DkargoToken>]]],[IdentifierExpression[to_s1257,<IMPLEMENTATION_INPARAM,transfer~address~uint256_DkargoToken>]]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]],BinaryExpression[COMPGEQ,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_DkargoToken>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transfer~address~uint256_DkargoToken>]]],IntegerLiteral[0]]],BinaryExpression[COMPLT,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_DkargoToken>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transfer~address~uint256_DkargoToken>]]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]]
[2020-11-25 14:00:24,308 INFO  L636   opiaSpecLangObserver]: Parsed ( ( ( ( ( ( ( ( ( ( ( __ret_0_==true && _balances_ERC20[this][msg.sender]==( ( old(_balances_ERC20[this][msg.sender]) ) - value_s1257 ) ) && _balances_ERC20[this][to_s1257]==( ( old(_balances_ERC20[this][to_s1257]) ) + value_s1257 ) ) && _supply_ERC20[this]==( old(_supply_ERC20[this]) ) ) && _allowances_ERC20[this]==( old(_allowances_ERC20[this]) ) ) && _balances_ERC20[this][p1]==( old(_balances_ERC20[this][p1]) ) ) && _name_DkargoToken[this]==( old(_name_DkargoToken[this]) ) ) && _symbol_DkargoToken[this]==( old(_symbol_DkargoToken[this]) ) ) && _dkargoPrefix_DkargoPrefix[this]==( old(_dkargoPrefix_DkargoPrefix[this]) ) ) && _infcs_ERC165[this]==( old(_infcs_ERC165[this]) ) ) && _slist_AddressChain[this]==( old(_slist_AddressChain[this]) ) ) && _owner_Ownership[this]==( old(_owner_Ownership[this]) ) ) to BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[COMPEQ,IdentifierExpression[__ret_0_,<IMPLEMENTATION_OUTPARAM,transfer~address~uint256_DkargoToken>],BooleanLiteral[true]],BinaryExpression[COMPEQ,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_DkargoToken>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transfer~address~uint256_DkargoToken>]]],BinaryExpression[ARITHMINUS,UnaryExpression[OLD,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_DkargoToken>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transfer~address~uint256_DkargoToken>]]]],IdentifierExpression[value_s1257,<IMPLEMENTATION_INPARAM,transfer~address~uint256_DkargoToken>]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_DkargoToken>]]],[IdentifierExpression[to_s1257,<IMPLEMENTATION_INPARAM,transfer~address~uint256_DkargoToken>]]],BinaryExpression[ARITHPLUS,UnaryExpression[OLD,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_DkargoToken>]]],[IdentifierExpression[to_s1257,<IMPLEMENTATION_INPARAM,transfer~address~uint256_DkargoToken>]]]],IdentifierExpression[value_s1257,<IMPLEMENTATION_INPARAM,transfer~address~uint256_DkargoToken>]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[_supply_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_DkargoToken>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[_supply_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_DkargoToken>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[_allowances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_DkargoToken>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[_allowances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_DkargoToken>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_DkargoToken>]]],[IdentifierExpression[p1,GLOBAL]]],UnaryExpression[OLD,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_DkargoToken>]]],[IdentifierExpression[p1,GLOBAL]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[_name_DkargoToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_DkargoToken>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[_name_DkargoToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_DkargoToken>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[_symbol_DkargoToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_DkargoToken>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[_symbol_DkargoToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_DkargoToken>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[_dkargoPrefix_DkargoPrefix,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_DkargoToken>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[_dkargoPrefix_DkargoPrefix,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_DkargoToken>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[_infcs_ERC165,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_DkargoToken>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[_infcs_ERC165,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_DkargoToken>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[_slist_AddressChain,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_DkargoToken>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[_slist_AddressChain,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_DkargoToken>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[_owner_Ownership,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_DkargoToken>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[_owner_Ownership,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_DkargoToken>]]]]]]
[2020-11-25 14:00:24,314 INFO  L1005  opiaSpecLangObserver]: Compiling: [](started(DkargoToken.transfer(to, value), p1 != msg.sender && p1 != to && msg.sender != to && value <= _balances_ERC20[this][msg.sender] && _balances_ERC20[this][to] + value < 0x10000000000000000000000000000000000000000000000000000000000000000 && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][to] >= 0 && _balances_ERC20[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][msg.sender] >= 0 &&  _balances_ERC20[this][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(finished(DkargoToken.transfer(to, value), return == true && _balances_ERC20[this][msg.sender] == old(_balances_ERC20[this][msg.sender]) - value && _balances_ERC20[this][to] == old(_balances_ERC20[this][to]) + value && _supply_ERC20[this] == old(_supply_ERC20[this]) && _allowances_ERC20[this] == old(_allowances_ERC20[this]) && _balances_ERC20[this][p1] == old(_balances_ERC20[this][p1]) && _name_DkargoToken[this] == old(_name_DkargoToken[this]) && _symbol_DkargoToken[this] == old(_symbol_DkargoToken[this]) && _dkargoPrefix_DkargoPrefix[this] == old(_dkargoPrefix_DkargoPrefix[this]) && _infcs_ERC165[this] == old(_infcs_ERC165[this]) && _slist_AddressChain[this] == old(_slist_AddressChain[this]) && _owner_Ownership[this] == old(_owner_Ownership[this]))))
[2020-11-25 14:00:24,314 INFO  L1007  opiaSpecLangObserver]: Compiled to ( []( AP(call_transfer_DkargoToken0) ==> ( <>AP(success_transfer_DkargoToken0) ) ) )
Executed UtopiaSpecLang
[2020-11-25 14:00:24,329 INFO  L202        PluginConnector]: Adding new model Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 02:00:24 PropertyContainer
[2020-11-25 14:00:24,330 INFO  L132        PluginConnector]: ------------------------ END UtopiaSpecLang----------------------------
[2020-11-25 14:00:24,330 INFO  L113        PluginConnector]: ------------------------Boogie Printer----------------------------
[2020-11-25 14:00:24,330 INFO  L271        PluginConnector]: Initializing Boogie Printer...
[2020-11-25 14:00:24,330 INFO  L276        PluginConnector]: Boogie Printer initialized
[2020-11-25 14:00:24,331 INFO  L185        PluginConnector]: Executing the observer BoogiePrinterObserver from plugin Boogie Printer for "DkargoToken_0x5dc60c4d5e75d22588fa17ffeb90a63e535efce0_transfer-normal.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 02:00:24" (1/2) ...
[2020-11-25 14:00:24,331 INFO  L116   oogiePrinterObserver]: File already exists and will be overwritten: /tmp/boogiePrinter.bpl
[2020-11-25 14:00:24,331 INFO  L120   oogiePrinterObserver]: Writing to file /tmp/boogiePrinter.bpl
[2020-11-25 14:00:24,353 INFO  L185        PluginConnector]: Executing the observer BoogiePrinterObserver from plugin Boogie Printer for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 02:00:24" (2/2) ...
[2020-11-25 14:00:24,353 INFO  L132        PluginConnector]: ------------------------ END Boogie Printer----------------------------
[2020-11-25 14:00:24,354 INFO  L113        PluginConnector]: ------------------------RCFGBuilder----------------------------
[2020-11-25 14:00:24,354 INFO  L271        PluginConnector]: Initializing RCFGBuilder...
[2020-11-25 14:00:24,354 INFO  L276        PluginConnector]: RCFGBuilder initialized
[2020-11-25 14:00:24,355 INFO  L185        PluginConnector]: Executing the observer RCFGBuilderObserver from plugin RCFGBuilder for "DkargoToken_0x5dc60c4d5e75d22588fa17ffeb90a63e535efce0_transfer-normal.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 02:00:24" (1/2) ...
[2020-11-25 14:00:24,409 INFO  L130     BoogieDeclarations]: Found specification of procedure FreshRefGenerator__success
[2020-11-25 14:00:24,409 INFO  L130     BoogieDeclarations]: Found specification of procedure AddressChain.NodeInfo_ctor__success
[2020-11-25 14:00:24,409 INFO  L130     BoogieDeclarations]: Found specification of procedure AddressChain.NodeList_ctor__success
[2020-11-25 14:00:24,409 INFO  L130     BoogieDeclarations]: Found specification of procedure DkargoPrefix_DkargoPrefix_NoBaseCtor__success
[2020-11-25 14:00:24,410 INFO  L130     BoogieDeclarations]: Found specification of procedure DkargoPrefix_DkargoPrefix
[2020-11-25 14:00:24,410 INFO  L138     BoogieDeclarations]: Found implementation of procedure DkargoPrefix_DkargoPrefix
[2020-11-25 14:00:24,410 INFO  L130     BoogieDeclarations]: Found specification of procedure getDkargoPrefix_DkargoPrefix
[2020-11-25 14:00:24,410 INFO  L138     BoogieDeclarations]: Found implementation of procedure getDkargoPrefix_DkargoPrefix
[2020-11-25 14:00:24,410 INFO  L130     BoogieDeclarations]: Found specification of procedure _setDkargoPrefix~string_DkargoPrefix__success
[2020-11-25 14:00:24,410 INFO  L130     BoogieDeclarations]: Found specification of procedure Ownership_Ownership_NoBaseCtor__success
[2020-11-25 14:00:24,410 INFO  L130     BoogieDeclarations]: Found specification of procedure Ownership_Ownership
[2020-11-25 14:00:24,410 INFO  L138     BoogieDeclarations]: Found implementation of procedure Ownership_Ownership
[2020-11-25 14:00:24,410 INFO  L130     BoogieDeclarations]: Found specification of procedure transferOwnership~address_Ownership
[2020-11-25 14:00:24,410 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferOwnership~address_Ownership
[2020-11-25 14:00:24,411 INFO  L130     BoogieDeclarations]: Found specification of procedure owner_Ownership
[2020-11-25 14:00:24,411 INFO  L138     BoogieDeclarations]: Found implementation of procedure owner_Ownership
[2020-11-25 14:00:24,411 INFO  L130     BoogieDeclarations]: Found specification of procedure isOwner_Ownership
[2020-11-25 14:00:24,411 INFO  L138     BoogieDeclarations]: Found implementation of procedure isOwner_Ownership
[2020-11-25 14:00:24,412 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath_NoBaseCtor__success
[2020-11-25 14:00:24,412 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath
[2020-11-25 14:00:24,412 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath
[2020-11-25 14:00:24,412 INFO  L130     BoogieDeclarations]: Found specification of procedure add~uint256~uint256_SafeMath__success
[2020-11-25 14:00:24,412 INFO  L130     BoogieDeclarations]: Found specification of procedure sub~uint256~uint256~string_SafeMath__success
[2020-11-25 14:00:24,412 INFO  L130     BoogieDeclarations]: Found specification of procedure mul~uint256~uint256_SafeMath__success
[2020-11-25 14:00:24,412 INFO  L130     BoogieDeclarations]: Found specification of procedure div~uint256~uint256_SafeMath__success
[2020-11-25 14:00:24,412 INFO  L130     BoogieDeclarations]: Found specification of procedure mod~uint256~uint256_SafeMath__success
[2020-11-25 14:00:24,412 INFO  L130     BoogieDeclarations]: Found specification of procedure AddressChain_AddressChain_NoBaseCtor__success
[2020-11-25 14:00:24,412 INFO  L130     BoogieDeclarations]: Found specification of procedure AddressChain_AddressChain
[2020-11-25 14:00:24,412 INFO  L138     BoogieDeclarations]: Found implementation of procedure AddressChain_AddressChain
[2020-11-25 14:00:24,413 INFO  L130     BoogieDeclarations]: Found specification of procedure count_AddressChain
[2020-11-25 14:00:24,413 INFO  L138     BoogieDeclarations]: Found implementation of procedure count_AddressChain
[2020-11-25 14:00:24,413 INFO  L130     BoogieDeclarations]: Found specification of procedure head_AddressChain
[2020-11-25 14:00:24,413 INFO  L138     BoogieDeclarations]: Found implementation of procedure head_AddressChain
[2020-11-25 14:00:24,413 INFO  L130     BoogieDeclarations]: Found specification of procedure tail_AddressChain
[2020-11-25 14:00:24,413 INFO  L138     BoogieDeclarations]: Found implementation of procedure tail_AddressChain
[2020-11-25 14:00:24,413 INFO  L130     BoogieDeclarations]: Found specification of procedure nextOf~address_AddressChain
[2020-11-25 14:00:24,413 INFO  L138     BoogieDeclarations]: Found implementation of procedure nextOf~address_AddressChain
[2020-11-25 14:00:24,413 INFO  L130     BoogieDeclarations]: Found specification of procedure prevOf~address_AddressChain
[2020-11-25 14:00:24,413 INFO  L138     BoogieDeclarations]: Found implementation of procedure prevOf~address_AddressChain
[2020-11-25 14:00:24,414 INFO  L130     BoogieDeclarations]: Found specification of procedure isLinked~address_AddressChain
[2020-11-25 14:00:24,414 INFO  L138     BoogieDeclarations]: Found implementation of procedure isLinked~address_AddressChain
[2020-11-25 14:00:24,414 INFO  L130     BoogieDeclarations]: Found specification of procedure _linkChain~address_AddressChain__success
[2020-11-25 14:00:24,414 INFO  L130     BoogieDeclarations]: Found specification of procedure _unlinkChain~address_AddressChain__success
[2020-11-25 14:00:24,414 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC165_IERC165_NoBaseCtor__success
[2020-11-25 14:00:24,414 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC165_IERC165
[2020-11-25 14:00:24,414 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC165_IERC165
[2020-11-25 14:00:24,414 INFO  L130     BoogieDeclarations]: Found specification of procedure supportsInterface~bytes4_IERC165
[2020-11-25 14:00:24,414 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC165_ERC165_NoBaseCtor__success
[2020-11-25 14:00:24,414 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC165_ERC165
[2020-11-25 14:00:24,414 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC165_ERC165
[2020-11-25 14:00:24,415 INFO  L130     BoogieDeclarations]: Found specification of procedure supportsInterface~bytes4_ERC165
[2020-11-25 14:00:24,415 INFO  L138     BoogieDeclarations]: Found implementation of procedure supportsInterface~bytes4_ERC165
[2020-11-25 14:00:24,415 INFO  L130     BoogieDeclarations]: Found specification of procedure _registerInterface~bytes4_ERC165__success
[2020-11-25 14:00:24,415 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20_NoBaseCtor__success
[2020-11-25 14:00:24,415 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20
[2020-11-25 14:00:24,415 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20
[2020-11-25 14:00:24,415 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_IERC20
[2020-11-25 14:00:24,415 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_IERC20
[2020-11-25 14:00:24,415 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_IERC20
[2020-11-25 14:00:24,415 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_IERC20
[2020-11-25 14:00:24,416 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_IERC20
[2020-11-25 14:00:24,416 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_IERC20
[2020-11-25 14:00:24,416 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20_NoBaseCtor__success
[2020-11-25 14:00:24,416 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20
[2020-11-25 14:00:24,416 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20
[2020-11-25 14:00:24,416 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_ERC20
[2020-11-25 14:00:24,416 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_ERC20
[2020-11-25 14:00:24,416 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_ERC20
[2020-11-25 14:00:24,416 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_ERC20
[2020-11-25 14:00:24,416 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_ERC20
[2020-11-25 14:00:24,416 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_ERC20
[2020-11-25 14:00:24,417 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_ERC20
[2020-11-25 14:00:24,417 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_ERC20
[2020-11-25 14:00:24,417 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_ERC20
[2020-11-25 14:00:24,417 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_ERC20
[2020-11-25 14:00:24,417 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_ERC20
[2020-11-25 14:00:24,417 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_ERC20
[2020-11-25 14:00:24,417 INFO  L130     BoogieDeclarations]: Found specification of procedure _approve~address~address~uint256_ERC20__success
[2020-11-25 14:00:24,417 INFO  L130     BoogieDeclarations]: Found specification of procedure _transfer~address~address~uint256_ERC20__success
[2020-11-25 14:00:24,417 INFO  L130     BoogieDeclarations]: Found specification of procedure _mint~address~uint256_ERC20__success
[2020-11-25 14:00:24,417 INFO  L130     BoogieDeclarations]: Found specification of procedure _burn~address~uint256_ERC20__success
[2020-11-25 14:00:24,418 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Safe_ERC20Safe_NoBaseCtor__success
[2020-11-25 14:00:24,418 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Safe_ERC20Safe
[2020-11-25 14:00:24,418 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Safe_ERC20Safe
[2020-11-25 14:00:24,418 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_ERC20Safe
[2020-11-25 14:00:24,418 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_ERC20Safe
[2020-11-25 14:00:24,418 INFO  L130     BoogieDeclarations]: Found specification of procedure increaseAllowance~address~uint256_ERC20Safe
[2020-11-25 14:00:24,418 INFO  L138     BoogieDeclarations]: Found implementation of procedure increaseAllowance~address~uint256_ERC20Safe
[2020-11-25 14:00:24,418 INFO  L130     BoogieDeclarations]: Found specification of procedure decreaseAllowance~address~uint256_ERC20Safe
[2020-11-25 14:00:24,418 INFO  L138     BoogieDeclarations]: Found implementation of procedure decreaseAllowance~address~uint256_ERC20Safe
[2020-11-25 14:00:24,418 INFO  L130     BoogieDeclarations]: Found specification of procedure DkargoToken_DkargoToken_NoBaseCtor__success
[2020-11-25 14:00:24,418 INFO  L130     BoogieDeclarations]: Found specification of procedure DkargoToken_DkargoToken
[2020-11-25 14:00:24,419 INFO  L138     BoogieDeclarations]: Found implementation of procedure DkargoToken_DkargoToken
[2020-11-25 14:00:24,419 INFO  L130     BoogieDeclarations]: Found specification of procedure burn~uint256_DkargoToken
[2020-11-25 14:00:24,419 INFO  L138     BoogieDeclarations]: Found implementation of procedure burn~uint256_DkargoToken
[2020-11-25 14:00:24,419 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_DkargoToken
[2020-11-25 14:00:24,419 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_DkargoToken
[2020-11-25 14:00:24,419 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_DkargoToken
[2020-11-25 14:00:24,419 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_DkargoToken
[2020-11-25 14:00:24,419 INFO  L130     BoogieDeclarations]: Found specification of procedure name_DkargoToken
[2020-11-25 14:00:24,419 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_DkargoToken
[2020-11-25 14:00:24,419 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_DkargoToken
[2020-11-25 14:00:24,419 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_DkargoToken
[2020-11-25 14:00:24,420 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_DkargoToken
[2020-11-25 14:00:24,420 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_DkargoToken
[2020-11-25 14:00:24,420 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackDispatch__success
[2020-11-25 14:00:24,420 INFO  L130     BoogieDeclarations]: Found specification of procedure Fallback_UnknownType__success
[2020-11-25 14:00:24,420 INFO  L130     BoogieDeclarations]: Found specification of procedure send__success
[2020-11-25 14:00:24,420 INFO  L130     BoogieDeclarations]: Found specification of procedure onlyOwner_pre__success
[2020-11-25 14:00:24,420 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_DkargoPrefix
[2020-11-25 14:00:24,420 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_DkargoPrefix
[2020-11-25 14:00:24,420 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_Ownership
[2020-11-25 14:00:24,420 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_Ownership
[2020-11-25 14:00:24,421 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_SafeMath
[2020-11-25 14:00:24,421 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_SafeMath
[2020-11-25 14:00:24,421 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_AddressChain
[2020-11-25 14:00:24,421 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_AddressChain
[2020-11-25 14:00:24,421 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_IERC165
[2020-11-25 14:00:24,421 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_IERC165
[2020-11-25 14:00:24,421 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_ERC165
[2020-11-25 14:00:24,421 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_ERC165
[2020-11-25 14:00:24,421 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_IERC20
[2020-11-25 14:00:24,421 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_IERC20
[2020-11-25 14:00:24,421 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_ERC20
[2020-11-25 14:00:24,422 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_ERC20
[2020-11-25 14:00:24,422 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_ERC20Safe
[2020-11-25 14:00:24,422 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_ERC20Safe
[2020-11-25 14:00:24,422 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_DkargoToken
[2020-11-25 14:00:24,422 INFO  L130     BoogieDeclarations]: Found specification of procedure main
[2020-11-25 14:00:24,422 INFO  L130     BoogieDeclarations]: Found specification of procedure FreshRefGenerator__fail
[2020-11-25 14:00:24,422 INFO  L130     BoogieDeclarations]: Found specification of procedure AddressChain.NodeInfo_ctor__fail
[2020-11-25 14:00:24,422 INFO  L130     BoogieDeclarations]: Found specification of procedure AddressChain.NodeList_ctor__fail
[2020-11-25 14:00:24,422 INFO  L130     BoogieDeclarations]: Found specification of procedure DkargoPrefix_DkargoPrefix_NoBaseCtor__fail
[2020-11-25 14:00:24,422 INFO  L130     BoogieDeclarations]: Found specification of procedure DkargoPrefix_DkargoPrefix__success
[2020-11-25 14:00:24,423 INFO  L130     BoogieDeclarations]: Found specification of procedure DkargoPrefix_DkargoPrefix__fail
[2020-11-25 14:00:24,423 INFO  L130     BoogieDeclarations]: Found specification of procedure getDkargoPrefix_DkargoPrefix__success
[2020-11-25 14:00:24,423 INFO  L130     BoogieDeclarations]: Found specification of procedure getDkargoPrefix_DkargoPrefix__fail
[2020-11-25 14:00:24,423 INFO  L130     BoogieDeclarations]: Found specification of procedure _setDkargoPrefix~string_DkargoPrefix__fail
[2020-11-25 14:00:24,423 INFO  L130     BoogieDeclarations]: Found specification of procedure Ownership_Ownership_NoBaseCtor__fail
[2020-11-25 14:00:24,423 INFO  L130     BoogieDeclarations]: Found specification of procedure Ownership_Ownership__success
[2020-11-25 14:00:24,423 INFO  L130     BoogieDeclarations]: Found specification of procedure Ownership_Ownership__fail
[2020-11-25 14:00:24,423 INFO  L130     BoogieDeclarations]: Found specification of procedure transferOwnership~address_Ownership__success
[2020-11-25 14:00:24,423 INFO  L130     BoogieDeclarations]: Found specification of procedure transferOwnership~address_Ownership__fail
[2020-11-25 14:00:24,423 INFO  L130     BoogieDeclarations]: Found specification of procedure owner_Ownership__success
[2020-11-25 14:00:24,424 INFO  L130     BoogieDeclarations]: Found specification of procedure owner_Ownership__fail
[2020-11-25 14:00:24,424 INFO  L130     BoogieDeclarations]: Found specification of procedure isOwner_Ownership__success
[2020-11-25 14:00:24,424 INFO  L130     BoogieDeclarations]: Found specification of procedure isOwner_Ownership__fail
[2020-11-25 14:00:24,424 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath_NoBaseCtor__fail
[2020-11-25 14:00:24,424 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath__success
[2020-11-25 14:00:24,424 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath__fail
[2020-11-25 14:00:24,424 INFO  L130     BoogieDeclarations]: Found specification of procedure add~uint256~uint256_SafeMath__fail
[2020-11-25 14:00:24,424 INFO  L130     BoogieDeclarations]: Found specification of procedure sub~uint256~uint256~string_SafeMath__fail
[2020-11-25 14:00:24,424 INFO  L130     BoogieDeclarations]: Found specification of procedure mul~uint256~uint256_SafeMath__fail
[2020-11-25 14:00:24,424 INFO  L130     BoogieDeclarations]: Found specification of procedure div~uint256~uint256_SafeMath__fail
[2020-11-25 14:00:24,424 INFO  L130     BoogieDeclarations]: Found specification of procedure mod~uint256~uint256_SafeMath__fail
[2020-11-25 14:00:24,425 INFO  L130     BoogieDeclarations]: Found specification of procedure AddressChain_AddressChain_NoBaseCtor__fail
[2020-11-25 14:00:24,425 INFO  L130     BoogieDeclarations]: Found specification of procedure AddressChain_AddressChain__success
[2020-11-25 14:00:24,425 INFO  L130     BoogieDeclarations]: Found specification of procedure AddressChain_AddressChain__fail
[2020-11-25 14:00:24,425 INFO  L130     BoogieDeclarations]: Found specification of procedure count_AddressChain__success
[2020-11-25 14:00:24,425 INFO  L130     BoogieDeclarations]: Found specification of procedure count_AddressChain__fail
[2020-11-25 14:00:24,425 INFO  L130     BoogieDeclarations]: Found specification of procedure head_AddressChain__success
[2020-11-25 14:00:24,425 INFO  L130     BoogieDeclarations]: Found specification of procedure head_AddressChain__fail
[2020-11-25 14:00:24,425 INFO  L130     BoogieDeclarations]: Found specification of procedure tail_AddressChain__success
[2020-11-25 14:00:24,425 INFO  L130     BoogieDeclarations]: Found specification of procedure tail_AddressChain__fail
[2020-11-25 14:00:24,425 INFO  L130     BoogieDeclarations]: Found specification of procedure nextOf~address_AddressChain__success
[2020-11-25 14:00:24,425 INFO  L130     BoogieDeclarations]: Found specification of procedure nextOf~address_AddressChain__fail
[2020-11-25 14:00:24,426 INFO  L130     BoogieDeclarations]: Found specification of procedure prevOf~address_AddressChain__success
[2020-11-25 14:00:24,426 INFO  L130     BoogieDeclarations]: Found specification of procedure prevOf~address_AddressChain__fail
[2020-11-25 14:00:24,426 INFO  L130     BoogieDeclarations]: Found specification of procedure isLinked~address_AddressChain__success
[2020-11-25 14:00:24,426 INFO  L130     BoogieDeclarations]: Found specification of procedure isLinked~address_AddressChain__fail
[2020-11-25 14:00:24,426 INFO  L130     BoogieDeclarations]: Found specification of procedure _linkChain~address_AddressChain__fail
[2020-11-25 14:00:24,426 INFO  L130     BoogieDeclarations]: Found specification of procedure _unlinkChain~address_AddressChain__fail
[2020-11-25 14:00:24,426 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC165_IERC165_NoBaseCtor__fail
[2020-11-25 14:00:24,426 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC165_IERC165__success
[2020-11-25 14:00:24,426 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC165_IERC165__fail
[2020-11-25 14:00:24,426 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC165_ERC165_NoBaseCtor__fail
[2020-11-25 14:00:24,426 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC165_ERC165__success
[2020-11-25 14:00:24,427 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC165_ERC165__fail
[2020-11-25 14:00:24,427 INFO  L130     BoogieDeclarations]: Found specification of procedure supportsInterface~bytes4_ERC165__success
[2020-11-25 14:00:24,427 INFO  L130     BoogieDeclarations]: Found specification of procedure supportsInterface~bytes4_ERC165__fail
[2020-11-25 14:00:24,427 INFO  L130     BoogieDeclarations]: Found specification of procedure _registerInterface~bytes4_ERC165__fail
[2020-11-25 14:00:24,427 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20_NoBaseCtor__fail
[2020-11-25 14:00:24,427 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20__success
[2020-11-25 14:00:24,427 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20__fail
[2020-11-25 14:00:24,427 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20_NoBaseCtor__fail
[2020-11-25 14:00:24,427 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20__success
[2020-11-25 14:00:24,427 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20__fail
[2020-11-25 14:00:24,427 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_ERC20__success
[2020-11-25 14:00:24,428 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_ERC20__fail
[2020-11-25 14:00:24,428 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_ERC20__success
[2020-11-25 14:00:24,428 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_ERC20__fail
[2020-11-25 14:00:24,428 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_ERC20__success
[2020-11-25 14:00:24,428 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_ERC20__fail
[2020-11-25 14:00:24,428 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_ERC20__success
[2020-11-25 14:00:24,428 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_ERC20__fail
[2020-11-25 14:00:24,428 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_ERC20__success
[2020-11-25 14:00:24,428 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_ERC20__fail
[2020-11-25 14:00:24,428 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_ERC20__success
[2020-11-25 14:00:24,428 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_ERC20__fail
[2020-11-25 14:00:24,428 INFO  L130     BoogieDeclarations]: Found specification of procedure _approve~address~address~uint256_ERC20__fail
[2020-11-25 14:00:24,428 INFO  L130     BoogieDeclarations]: Found specification of procedure _transfer~address~address~uint256_ERC20__fail
[2020-11-25 14:00:24,429 INFO  L130     BoogieDeclarations]: Found specification of procedure _mint~address~uint256_ERC20__fail
[2020-11-25 14:00:24,429 INFO  L130     BoogieDeclarations]: Found specification of procedure _burn~address~uint256_ERC20__fail
[2020-11-25 14:00:24,429 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Safe_ERC20Safe_NoBaseCtor__fail
[2020-11-25 14:00:24,429 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Safe_ERC20Safe__success
[2020-11-25 14:00:24,429 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Safe_ERC20Safe__fail
[2020-11-25 14:00:24,429 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_ERC20Safe__success
[2020-11-25 14:00:24,429 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_ERC20Safe__fail
[2020-11-25 14:00:24,429 INFO  L130     BoogieDeclarations]: Found specification of procedure increaseAllowance~address~uint256_ERC20Safe__success
[2020-11-25 14:00:24,429 INFO  L130     BoogieDeclarations]: Found specification of procedure increaseAllowance~address~uint256_ERC20Safe__fail
[2020-11-25 14:00:24,429 INFO  L130     BoogieDeclarations]: Found specification of procedure decreaseAllowance~address~uint256_ERC20Safe__success
[2020-11-25 14:00:24,429 INFO  L130     BoogieDeclarations]: Found specification of procedure decreaseAllowance~address~uint256_ERC20Safe__fail
[2020-11-25 14:00:24,429 INFO  L130     BoogieDeclarations]: Found specification of procedure DkargoToken_DkargoToken_NoBaseCtor__fail
[2020-11-25 14:00:24,430 INFO  L130     BoogieDeclarations]: Found specification of procedure DkargoToken_DkargoToken__success
[2020-11-25 14:00:24,430 INFO  L130     BoogieDeclarations]: Found specification of procedure DkargoToken_DkargoToken__fail
[2020-11-25 14:00:24,430 INFO  L130     BoogieDeclarations]: Found specification of procedure burn~uint256_DkargoToken__success
[2020-11-25 14:00:24,430 INFO  L130     BoogieDeclarations]: Found specification of procedure burn~uint256_DkargoToken__fail
[2020-11-25 14:00:24,430 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_DkargoToken__success
[2020-11-25 14:00:24,430 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_DkargoToken__fail
[2020-11-25 14:00:24,430 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_DkargoToken__success
[2020-11-25 14:00:24,430 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_DkargoToken__fail
[2020-11-25 14:00:24,430 INFO  L130     BoogieDeclarations]: Found specification of procedure name_DkargoToken__success
[2020-11-25 14:00:24,430 INFO  L130     BoogieDeclarations]: Found specification of procedure name_DkargoToken__fail
[2020-11-25 14:00:24,430 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_DkargoToken__success
[2020-11-25 14:00:24,430 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_DkargoToken__fail
[2020-11-25 14:00:24,431 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_DkargoToken__success
[2020-11-25 14:00:24,431 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_DkargoToken__fail
[2020-11-25 14:00:24,431 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackDispatch__fail
[2020-11-25 14:00:24,431 INFO  L130     BoogieDeclarations]: Found specification of procedure Fallback_UnknownType__fail
[2020-11-25 14:00:24,431 INFO  L130     BoogieDeclarations]: Found specification of procedure send__fail
[2020-11-25 14:00:24,431 INFO  L130     BoogieDeclarations]: Found specification of procedure onlyOwner_pre__fail
[2020-11-25 14:00:24,431 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreshRefGenerator__fail
[2020-11-25 14:00:24,431 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreshRefGenerator__success
[2020-11-25 14:00:24,431 INFO  L138     BoogieDeclarations]: Found implementation of procedure AddressChain.NodeInfo_ctor__fail
[2020-11-25 14:00:24,431 INFO  L138     BoogieDeclarations]: Found implementation of procedure AddressChain.NodeInfo_ctor__success
[2020-11-25 14:00:24,431 INFO  L138     BoogieDeclarations]: Found implementation of procedure AddressChain.NodeList_ctor__fail
[2020-11-25 14:00:24,431 INFO  L138     BoogieDeclarations]: Found implementation of procedure AddressChain.NodeList_ctor__success
[2020-11-25 14:00:24,432 INFO  L138     BoogieDeclarations]: Found implementation of procedure DkargoPrefix_DkargoPrefix_NoBaseCtor__fail
[2020-11-25 14:00:24,432 INFO  L138     BoogieDeclarations]: Found implementation of procedure DkargoPrefix_DkargoPrefix_NoBaseCtor__success
[2020-11-25 14:00:24,432 INFO  L138     BoogieDeclarations]: Found implementation of procedure DkargoPrefix_DkargoPrefix__fail
[2020-11-25 14:00:24,432 INFO  L138     BoogieDeclarations]: Found implementation of procedure DkargoPrefix_DkargoPrefix__success
[2020-11-25 14:00:24,432 INFO  L138     BoogieDeclarations]: Found implementation of procedure getDkargoPrefix_DkargoPrefix__fail
[2020-11-25 14:00:24,432 INFO  L138     BoogieDeclarations]: Found implementation of procedure getDkargoPrefix_DkargoPrefix__success
[2020-11-25 14:00:24,432 INFO  L138     BoogieDeclarations]: Found implementation of procedure _setDkargoPrefix~string_DkargoPrefix__fail
[2020-11-25 14:00:24,432 INFO  L138     BoogieDeclarations]: Found implementation of procedure _setDkargoPrefix~string_DkargoPrefix__success
[2020-11-25 14:00:24,432 INFO  L138     BoogieDeclarations]: Found implementation of procedure Ownership_Ownership_NoBaseCtor__fail
[2020-11-25 14:00:24,432 INFO  L138     BoogieDeclarations]: Found implementation of procedure Ownership_Ownership_NoBaseCtor__success
[2020-11-25 14:00:24,432 INFO  L138     BoogieDeclarations]: Found implementation of procedure Ownership_Ownership__fail
[2020-11-25 14:00:24,432 INFO  L138     BoogieDeclarations]: Found implementation of procedure Ownership_Ownership__success
[2020-11-25 14:00:24,432 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferOwnership~address_Ownership__fail
[2020-11-25 14:00:24,433 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferOwnership~address_Ownership__success
[2020-11-25 14:00:24,433 INFO  L138     BoogieDeclarations]: Found implementation of procedure owner_Ownership__fail
[2020-11-25 14:00:24,433 INFO  L138     BoogieDeclarations]: Found implementation of procedure owner_Ownership__success
[2020-11-25 14:00:24,433 INFO  L138     BoogieDeclarations]: Found implementation of procedure isOwner_Ownership__fail
[2020-11-25 14:00:24,433 INFO  L138     BoogieDeclarations]: Found implementation of procedure isOwner_Ownership__success
[2020-11-25 14:00:24,433 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath_NoBaseCtor__fail
[2020-11-25 14:00:24,433 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath_NoBaseCtor__success
[2020-11-25 14:00:24,433 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath__fail
[2020-11-25 14:00:24,433 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath__success
[2020-11-25 14:00:24,433 INFO  L138     BoogieDeclarations]: Found implementation of procedure add~uint256~uint256_SafeMath__fail
[2020-11-25 14:00:24,433 INFO  L138     BoogieDeclarations]: Found implementation of procedure add~uint256~uint256_SafeMath__success
[2020-11-25 14:00:24,433 INFO  L138     BoogieDeclarations]: Found implementation of procedure sub~uint256~uint256~string_SafeMath__fail
[2020-11-25 14:00:24,434 INFO  L138     BoogieDeclarations]: Found implementation of procedure sub~uint256~uint256~string_SafeMath__success
[2020-11-25 14:00:24,434 INFO  L138     BoogieDeclarations]: Found implementation of procedure mul~uint256~uint256_SafeMath__fail
[2020-11-25 14:00:24,434 INFO  L138     BoogieDeclarations]: Found implementation of procedure mul~uint256~uint256_SafeMath__success
[2020-11-25 14:00:24,434 INFO  L138     BoogieDeclarations]: Found implementation of procedure div~uint256~uint256_SafeMath__fail
[2020-11-25 14:00:24,434 INFO  L138     BoogieDeclarations]: Found implementation of procedure div~uint256~uint256_SafeMath__success
[2020-11-25 14:00:24,434 INFO  L138     BoogieDeclarations]: Found implementation of procedure mod~uint256~uint256_SafeMath__fail
[2020-11-25 14:00:24,434 INFO  L138     BoogieDeclarations]: Found implementation of procedure mod~uint256~uint256_SafeMath__success
[2020-11-25 14:00:24,434 INFO  L138     BoogieDeclarations]: Found implementation of procedure AddressChain_AddressChain_NoBaseCtor__fail
[2020-11-25 14:00:24,434 INFO  L138     BoogieDeclarations]: Found implementation of procedure AddressChain_AddressChain_NoBaseCtor__success
[2020-11-25 14:00:24,434 INFO  L138     BoogieDeclarations]: Found implementation of procedure AddressChain_AddressChain__fail
[2020-11-25 14:00:24,434 INFO  L138     BoogieDeclarations]: Found implementation of procedure AddressChain_AddressChain__success
[2020-11-25 14:00:24,435 INFO  L138     BoogieDeclarations]: Found implementation of procedure count_AddressChain__fail
[2020-11-25 14:00:24,435 INFO  L138     BoogieDeclarations]: Found implementation of procedure count_AddressChain__success
[2020-11-25 14:00:24,435 INFO  L138     BoogieDeclarations]: Found implementation of procedure head_AddressChain__fail
[2020-11-25 14:00:24,435 INFO  L138     BoogieDeclarations]: Found implementation of procedure head_AddressChain__success
[2020-11-25 14:00:24,435 INFO  L138     BoogieDeclarations]: Found implementation of procedure tail_AddressChain__fail
[2020-11-25 14:00:24,435 INFO  L138     BoogieDeclarations]: Found implementation of procedure tail_AddressChain__success
[2020-11-25 14:00:24,435 INFO  L138     BoogieDeclarations]: Found implementation of procedure nextOf~address_AddressChain__fail
[2020-11-25 14:00:24,435 INFO  L138     BoogieDeclarations]: Found implementation of procedure nextOf~address_AddressChain__success
[2020-11-25 14:00:24,435 INFO  L138     BoogieDeclarations]: Found implementation of procedure prevOf~address_AddressChain__fail
[2020-11-25 14:00:24,435 INFO  L138     BoogieDeclarations]: Found implementation of procedure prevOf~address_AddressChain__success
[2020-11-25 14:00:24,435 INFO  L138     BoogieDeclarations]: Found implementation of procedure isLinked~address_AddressChain__fail
[2020-11-25 14:00:24,436 INFO  L138     BoogieDeclarations]: Found implementation of procedure isLinked~address_AddressChain__success
[2020-11-25 14:00:24,436 INFO  L138     BoogieDeclarations]: Found implementation of procedure _linkChain~address_AddressChain__fail
[2020-11-25 14:00:24,436 INFO  L138     BoogieDeclarations]: Found implementation of procedure _linkChain~address_AddressChain__success
[2020-11-25 14:00:24,436 INFO  L138     BoogieDeclarations]: Found implementation of procedure _unlinkChain~address_AddressChain__fail
[2020-11-25 14:00:24,436 INFO  L138     BoogieDeclarations]: Found implementation of procedure _unlinkChain~address_AddressChain__success
[2020-11-25 14:00:24,436 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC165_IERC165_NoBaseCtor__fail
[2020-11-25 14:00:24,436 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC165_IERC165_NoBaseCtor__success
[2020-11-25 14:00:24,436 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC165_IERC165__fail
[2020-11-25 14:00:24,436 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC165_IERC165__success
[2020-11-25 14:00:24,436 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC165_ERC165_NoBaseCtor__fail
[2020-11-25 14:00:24,436 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC165_ERC165_NoBaseCtor__success
[2020-11-25 14:00:24,437 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC165_ERC165__fail
[2020-11-25 14:00:24,437 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC165_ERC165__success
[2020-11-25 14:00:24,437 INFO  L138     BoogieDeclarations]: Found implementation of procedure supportsInterface~bytes4_ERC165__fail
[2020-11-25 14:00:24,437 INFO  L138     BoogieDeclarations]: Found implementation of procedure supportsInterface~bytes4_ERC165__success
[2020-11-25 14:00:24,437 INFO  L138     BoogieDeclarations]: Found implementation of procedure _registerInterface~bytes4_ERC165__fail
[2020-11-25 14:00:24,437 INFO  L138     BoogieDeclarations]: Found implementation of procedure _registerInterface~bytes4_ERC165__success
[2020-11-25 14:00:24,437 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20_NoBaseCtor__fail
[2020-11-25 14:00:24,437 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20_NoBaseCtor__success
[2020-11-25 14:00:24,437 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20__fail
[2020-11-25 14:00:24,437 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20__success
[2020-11-25 14:00:24,437 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20_NoBaseCtor__fail
[2020-11-25 14:00:24,438 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20_NoBaseCtor__success
[2020-11-25 14:00:24,438 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20__fail
[2020-11-25 14:00:24,438 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20__success
[2020-11-25 14:00:24,438 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_ERC20__fail
[2020-11-25 14:00:24,438 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_ERC20__success
[2020-11-25 14:00:24,438 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_ERC20__fail
[2020-11-25 14:00:24,438 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_ERC20__success
[2020-11-25 14:00:24,438 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_ERC20__fail
[2020-11-25 14:00:24,438 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_ERC20__success
[2020-11-25 14:00:24,438 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_ERC20__fail
[2020-11-25 14:00:24,438 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_ERC20__success
[2020-11-25 14:00:24,438 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_ERC20__fail
[2020-11-25 14:00:24,438 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_ERC20__success
[2020-11-25 14:00:24,439 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_ERC20__fail
[2020-11-25 14:00:24,439 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_ERC20__success
[2020-11-25 14:00:24,439 INFO  L138     BoogieDeclarations]: Found implementation of procedure _approve~address~address~uint256_ERC20__fail
[2020-11-25 14:00:24,439 INFO  L138     BoogieDeclarations]: Found implementation of procedure _approve~address~address~uint256_ERC20__success
[2020-11-25 14:00:24,439 INFO  L138     BoogieDeclarations]: Found implementation of procedure _transfer~address~address~uint256_ERC20__fail
[2020-11-25 14:00:24,439 INFO  L138     BoogieDeclarations]: Found implementation of procedure _transfer~address~address~uint256_ERC20__success
[2020-11-25 14:00:24,439 INFO  L138     BoogieDeclarations]: Found implementation of procedure _mint~address~uint256_ERC20__fail
[2020-11-25 14:00:24,439 INFO  L138     BoogieDeclarations]: Found implementation of procedure _mint~address~uint256_ERC20__success
[2020-11-25 14:00:24,439 INFO  L138     BoogieDeclarations]: Found implementation of procedure _burn~address~uint256_ERC20__fail
[2020-11-25 14:00:24,439 INFO  L138     BoogieDeclarations]: Found implementation of procedure _burn~address~uint256_ERC20__success
[2020-11-25 14:00:24,439 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Safe_ERC20Safe_NoBaseCtor__fail
[2020-11-25 14:00:24,439 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Safe_ERC20Safe_NoBaseCtor__success
[2020-11-25 14:00:24,440 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Safe_ERC20Safe__fail
[2020-11-25 14:00:24,440 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Safe_ERC20Safe__success
[2020-11-25 14:00:24,440 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_ERC20Safe__fail
[2020-11-25 14:00:24,440 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_ERC20Safe__success
[2020-11-25 14:00:24,440 INFO  L138     BoogieDeclarations]: Found implementation of procedure increaseAllowance~address~uint256_ERC20Safe__fail
[2020-11-25 14:00:24,440 INFO  L138     BoogieDeclarations]: Found implementation of procedure increaseAllowance~address~uint256_ERC20Safe__success
[2020-11-25 14:00:24,440 INFO  L138     BoogieDeclarations]: Found implementation of procedure decreaseAllowance~address~uint256_ERC20Safe__fail
[2020-11-25 14:00:24,440 INFO  L138     BoogieDeclarations]: Found implementation of procedure decreaseAllowance~address~uint256_ERC20Safe__success
[2020-11-25 14:00:24,440 INFO  L138     BoogieDeclarations]: Found implementation of procedure DkargoToken_DkargoToken_NoBaseCtor__fail
[2020-11-25 14:00:24,440 INFO  L138     BoogieDeclarations]: Found implementation of procedure DkargoToken_DkargoToken_NoBaseCtor__success
[2020-11-25 14:00:24,440 INFO  L138     BoogieDeclarations]: Found implementation of procedure DkargoToken_DkargoToken__fail
[2020-11-25 14:00:24,440 INFO  L138     BoogieDeclarations]: Found implementation of procedure DkargoToken_DkargoToken__success
[2020-11-25 14:00:24,441 INFO  L138     BoogieDeclarations]: Found implementation of procedure burn~uint256_DkargoToken__fail
[2020-11-25 14:00:24,441 INFO  L138     BoogieDeclarations]: Found implementation of procedure burn~uint256_DkargoToken__success
[2020-11-25 14:00:24,441 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_DkargoToken__fail
[2020-11-25 14:00:24,441 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_DkargoToken__success
[2020-11-25 14:00:24,441 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_DkargoToken__fail
[2020-11-25 14:00:24,441 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_DkargoToken__success
[2020-11-25 14:00:24,441 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_DkargoToken__fail
[2020-11-25 14:00:24,441 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_DkargoToken__success
[2020-11-25 14:00:24,441 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_DkargoToken__fail
[2020-11-25 14:00:24,441 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_DkargoToken__success
[2020-11-25 14:00:24,441 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_DkargoToken__fail
[2020-11-25 14:00:24,441 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_DkargoToken__success
[2020-11-25 14:00:24,441 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackDispatch__fail
[2020-11-25 14:00:24,442 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackDispatch__success
[2020-11-25 14:00:24,442 INFO  L138     BoogieDeclarations]: Found implementation of procedure Fallback_UnknownType__fail
[2020-11-25 14:00:24,442 INFO  L138     BoogieDeclarations]: Found implementation of procedure Fallback_UnknownType__success
[2020-11-25 14:00:24,442 INFO  L138     BoogieDeclarations]: Found implementation of procedure send__fail
[2020-11-25 14:00:24,442 INFO  L138     BoogieDeclarations]: Found implementation of procedure send__success
[2020-11-25 14:00:24,442 INFO  L138     BoogieDeclarations]: Found implementation of procedure onlyOwner_pre__fail
[2020-11-25 14:00:24,442 INFO  L138     BoogieDeclarations]: Found implementation of procedure onlyOwner_pre__success
[2020-11-25 14:00:24,442 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_DkargoPrefix
[2020-11-25 14:00:24,442 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_DkargoPrefix
[2020-11-25 14:00:24,442 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_Ownership
[2020-11-25 14:00:24,442 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_Ownership
[2020-11-25 14:00:24,442 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_SafeMath
[2020-11-25 14:00:24,443 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_SafeMath
[2020-11-25 14:00:24,443 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_AddressChain
[2020-11-25 14:00:24,443 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_AddressChain
[2020-11-25 14:00:24,443 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_IERC165
[2020-11-25 14:00:24,443 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_IERC165
[2020-11-25 14:00:24,443 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_ERC165
[2020-11-25 14:00:24,443 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_ERC165
[2020-11-25 14:00:24,443 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_IERC20
[2020-11-25 14:00:24,443 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_IERC20
[2020-11-25 14:00:24,443 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_ERC20
[2020-11-25 14:00:24,443 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_ERC20
[2020-11-25 14:00:24,443 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_ERC20Safe
[2020-11-25 14:00:24,444 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_ERC20Safe
[2020-11-25 14:00:24,444 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_DkargoToken
[2020-11-25 14:00:24,444 INFO  L138     BoogieDeclarations]: Found implementation of procedure main
[2020-11-25 14:00:24,444 INFO  L130     BoogieDeclarations]: Found specification of procedure ULTIMATE.start
[2020-11-25 14:00:24,444 INFO  L138     BoogieDeclarations]: Found implementation of procedure ULTIMATE.start
[2020-11-25 14:00:24,917 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 14:00:24,917 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 14:00:24,917 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 14:00:25,227 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 14:00:25,452 INFO  L281             CfgBuilder]: Using the 1 location(s) as analysis (start of procedure ULTIMATE.start)
[2020-11-25 14:00:25,453 INFO  L286             CfgBuilder]: Removed 10 assue(true) statements.
[2020-11-25 14:00:25,455 INFO  L202        PluginConnector]: Adding new model DkargoToken_0x5dc60c4d5e75d22588fa17ffeb90a63e535efce0_transfer-normal.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 02:00:25 BoogieIcfgContainer
[2020-11-25 14:00:25,455 INFO  L185        PluginConnector]: Executing the observer RCFGBuilderObserver from plugin RCFGBuilder for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 02:00:24" (2/2) ...
[2020-11-25 14:00:25,455 INFO  L85     RCFGBuilderObserver]: No WrapperNode. Let Ultimate process with next node
[2020-11-25 14:00:25,456 INFO  L205        PluginConnector]: Invalid model from RCFGBuilder for observer de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder.RCFGBuilderObserver@6c44d154 and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 02:00:25, skipping insertion in model container
[2020-11-25 14:00:25,456 INFO  L132        PluginConnector]: ------------------------ END RCFGBuilder----------------------------
[2020-11-25 14:00:25,456 INFO  L113        PluginConnector]: ------------------------UtopiaLTL2Aut----------------------------
[2020-11-25 14:00:25,456 INFO  L271        PluginConnector]: Initializing UtopiaLTL2Aut...
[2020-11-25 14:00:25,457 INFO  L276        PluginConnector]: UtopiaLTL2Aut initialized
[2020-11-25 14:00:25,457 INFO  L185        PluginConnector]: Executing the observer UtopiaLTL2AutObserver from plugin UtopiaLTL2Aut for "DkargoToken_0x5dc60c4d5e75d22588fa17ffeb90a63e535efce0_transfer-normal.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 02:00:24" (1/3) ...
[2020-11-25 14:00:25,458 INFO  L205        PluginConnector]: Invalid model from UtopiaLTL2Aut for observer edu.utexas.cs.utopia.ltl2aut.UtopiaLTL2AutObserver@2cf77651 and model type Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 02:00:25, skipping insertion in model container
[2020-11-25 14:00:25,458 INFO  L185        PluginConnector]: Executing the observer UtopiaLTL2AutObserver from plugin UtopiaLTL2Aut for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 02:00:24" (2/3) ...
No working directory specified, using /mnt/data0/jon/SmartPulseTool/ltl2ba
Starting monitored process 1 with /mnt/data0/jon/SmartPulseTool/ltl2ba -f ! ( ( [] ( a -> ( <>b ) ) ) )  (exit command is null, workingDir is null)
[2020-11-25 14:00:25,493 INFO  L202        PluginConnector]: Adding new model Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 02:00:25 NWAContainer
[2020-11-25 14:00:25,493 INFO  L132        PluginConnector]: ------------------------ END UtopiaLTL2Aut----------------------------
[2020-11-25 14:00:25,493 INFO  L113        PluginConnector]: ------------------------BÃ¼chi Program Product----------------------------
[2020-11-25 14:00:25,493 INFO  L271        PluginConnector]: Initializing BÃ¼chi Program Product...
[2020-11-25 14:00:25,494 INFO  L276        PluginConnector]: BÃ¼chi Program Product initialized
[2020-11-25 14:00:25,494 INFO  L185        PluginConnector]: Executing the observer BuchiProductObserver from plugin BÃ¼chi Program Product for "DkargoToken_0x5dc60c4d5e75d22588fa17ffeb90a63e535efce0_transfer-normal.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 02:00:25" (3/4) ...
[2020-11-25 14:00:25,495 INFO  L205        PluginConnector]: Invalid model from BÃ¼chi Program Product for observer de.uni_freiburg.informatik.ultimate.buchiprogramproduct.BuchiProductObserver@7b40be9b and model type LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 02:00:25, skipping insertion in model container
[2020-11-25 14:00:25,495 INFO  L185        PluginConnector]: Executing the observer BuchiProductObserver from plugin BÃ¼chi Program Product for "Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 02:00:25" (4/4) ...
[2020-11-25 14:00:25,498 INFO  L104   BuchiProductObserver]: Initial property automaton 2 locations, 3 edges
[2020-11-25 14:00:25,503 INFO  L110   BuchiProductObserver]: Initial RCFG 3095 locations, 4213 edges
[2020-11-25 14:00:25,503 INFO  L93    BuchiProductObserver]: Beginning generation of product automaton
[2020-11-25 14:00:25,516 INFO  L136       ProductGenerator]: The program has no step specification, so we assume maximum atomicity
[2020-11-25 14:00:27,939 INFO  L97    BuchiProductObserver]: Finished generation of product automaton successfully
[2020-11-25 14:00:27,949 INFO  L110   BuchiProductObserver]: BuchiProgram size 7636 locations, 13672 edges
[2020-11-25 14:00:27,949 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 02:00:27 BoogieIcfgContainer
[2020-11-25 14:00:27,950 INFO  L132        PluginConnector]: ------------------------ END BÃ¼chi Program Product----------------------------
[2020-11-25 14:00:27,950 INFO  L113        PluginConnector]: ------------------------BlockEncodingV2----------------------------
[2020-11-25 14:00:27,950 INFO  L271        PluginConnector]: Initializing BlockEncodingV2...
[2020-11-25 14:00:27,951 INFO  L276        PluginConnector]: BlockEncodingV2 initialized
[2020-11-25 14:00:27,952 INFO  L185        PluginConnector]: Executing the observer BlockEncodingObserver from plugin BlockEncodingV2 for "LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 02:00:27" (1/1) ...
[2020-11-25 14:00:28,085 INFO  L313           BlockEncoder]: Initial Icfg 7636 locations, 13672 edges
[2020-11-25 14:00:28,086 INFO  L258           BlockEncoder]: Using Remove infeasible edges
[2020-11-25 14:00:28,086 INFO  L270           BlockEncoder]: Using Minimize states even if more edges are added than removed.=true
[2020-11-25 14:00:28,086 INFO  L296           BlockEncoder]: Using Remove sink states
[2020-11-25 14:00:28,087 INFO  L171           BlockEncoder]: Using Apply optimizations until nothing changes=true
[2020-11-25 14:00:28,104 INFO  L70    emoveInfeasibleEdges]: Removed 288 edges and 23 locations because of local infeasibility
[2020-11-25 14:00:28,122 INFO  L70        RemoveSinkStates]: Removed 200 edges and 133 locations by removing sink states
[2020-11-25 14:00:28,139 INFO  L70    emoveInfeasibleEdges]: Removed 0 edges and 0 locations because of local infeasibility
[2020-11-25 14:00:28,144 INFO  L70        RemoveSinkStates]: Removed 0 edges and 0 locations by removing sink states
[2020-11-25 14:00:28,149 INFO  L237           BlockEncoder]: Using Create parallel compositions if possible
[2020-11-25 14:00:28,150 INFO  L66        ParallelComposer]: Creating parallel compositions
[2020-11-25 14:00:28,154 INFO  L313           BlockEncoder]: Encoded RCFG 7444 locations, 13131 edges
[2020-11-25 14:00:28,155 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.blockencoding CFG 25.11 02:00:28 BasicIcfg
[2020-11-25 14:00:28,155 INFO  L132        PluginConnector]: ------------------------ END BlockEncodingV2----------------------------
[2020-11-25 14:00:28,155 INFO  L113        PluginConnector]: ------------------------BuchiAutomizer----------------------------
[2020-11-25 14:00:28,155 INFO  L271        PluginConnector]: Initializing BuchiAutomizer...
[2020-11-25 14:00:28,157 INFO  L276        PluginConnector]: BuchiAutomizer initialized
[2020-11-25 14:00:28,157 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 14:00:28,157 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "DkargoToken_0x5dc60c4d5e75d22588fa17ffeb90a63e535efce0_transfer-normal.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 02:00:24" (1/6) ...
[2020-11-25 14:00:28,159 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@492b2325 and model type DkargoToken_0x5dc60c4d5e75d22588fa17ffeb90a63e535efce0_transfer-normal.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 02:00:28, skipping insertion in model container
[2020-11-25 14:00:28,159 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 14:00:28,159 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 02:00:24" (2/6) ...
[2020-11-25 14:00:28,159 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@492b2325 and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 02:00:28, skipping insertion in model container
[2020-11-25 14:00:28,159 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 14:00:28,159 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "DkargoToken_0x5dc60c4d5e75d22588fa17ffeb90a63e535efce0_transfer-normal.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 02:00:25" (3/6) ...
[2020-11-25 14:00:28,159 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@492b2325 and model type DkargoToken_0x5dc60c4d5e75d22588fa17ffeb90a63e535efce0_transfer-normal.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer CFG 25.11 02:00:28, skipping insertion in model container
[2020-11-25 14:00:28,159 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 14:00:28,159 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 02:00:25" (4/6) ...
[2020-11-25 14:00:28,160 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@492b2325 and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 02:00:28, skipping insertion in model container
[2020-11-25 14:00:28,160 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 14:00:28,160 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 02:00:27" (5/6) ...
[2020-11-25 14:00:28,160 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@492b2325 and model type LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer OTHER 25.11 02:00:28, skipping insertion in model container
[2020-11-25 14:00:28,160 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 14:00:28,160 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.blockencoding CFG 25.11 02:00:28" (6/6) ...
[2020-11-25 14:00:28,161 INFO  L404   chiAutomizerObserver]: Analyzing ICFG DkargoToken_0x5dc60c4d5e75d22588fa17ffeb90a63e535efce0_transfer-normal.bpl_BEv2
[2020-11-25 14:00:28,196 INFO  L133   ementStrategyFactory]: Using default assertion order modulation
[2020-11-25 14:00:28,196 INFO  L377         BuchiCegarLoop]: Interprodecural is true
[2020-11-25 14:00:28,196 INFO  L378         BuchiCegarLoop]: Hoare is false
[2020-11-25 14:00:28,196 INFO  L379         BuchiCegarLoop]: Compute interpolants for Craig_TreeInterpolation
[2020-11-25 14:00:28,197 INFO  L380         BuchiCegarLoop]: Backedges is STRAIGHT_LINE
[2020-11-25 14:00:28,197 INFO  L381         BuchiCegarLoop]: Determinization is PREDICATE_ABSTRACTION
[2020-11-25 14:00:28,197 INFO  L382         BuchiCegarLoop]: Difference is false
[2020-11-25 14:00:28,197 INFO  L383         BuchiCegarLoop]: Minimize is MINIMIZE_SEVPA
[2020-11-25 14:00:28,197 INFO  L386         BuchiCegarLoop]: ======== Iteration 0==of CEGAR loop == BuchiCegarLoop========
[2020-11-25 14:00:28,258 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 7444 states.
[2020-11-25 14:00:28,325 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 14:00:28,325 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 14:00:28,325 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 14:00:28,333 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 14:00:28,333 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 14:00:28,333 INFO  L445         BuchiCegarLoop]: ======== Iteration 1============
[2020-11-25 14:00:28,333 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 7444 states.
[2020-11-25 14:00:28,361 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 14:00:28,362 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 14:00:28,362 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 14:00:28,363 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 14:00:28,363 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_transfer_DkargoToken0 := false;
[L3]                 call_transfer_DkargoToken0 := false;
[L3]     CALL        call main();
[L3]                 havoc p1;
[L8441]              assume null == 0;
[L8442]  CALL        call this := FreshRefGenerator__success();
[L3984]              havoc newRef;
[L3985]              assume Alloc[newRef] == false;
[L3986]              Alloc[newRef] := true;
[L3987]              assume newRef != null;
[L8442]  RET         call this := FreshRefGenerator__success();
[L8443]              assume now >= 0;
[L8444]              assume DType[this] == DkargoToken;
[L8445]              assume msgvalue_MSG == 0;
[L8446]              gas := gas - 53000;
[L8447]  CALL        call DkargoToken_DkargoToken(this, msgsender_MSG, msgvalue_MSG, name_s1191, symbol_s1191, supply_s1191);
[L2404]              havoc __exception;
[L2405]              revert := false;
[L2406]  COND FALSE  !(__exception)
[L2439]  CALL        call DkargoToken_DkargoToken__success(this, msgsender_MSG, msgvalue_MSG, name_s1191, symbol_s1191, supply_s1191);
[L5754]  CALL        call Ownership_Ownership__success(this, msgsender_MSG, msgvalue_MSG);
[L4105]  CALL        call Ownership_Ownership_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4087]              assume msgsender_MSG != null;
[L4088]              Balance[this] := 0;
[L4089]              _owner_Ownership[this] := null;
[L4091]              assert { :EventEmitted "OwnershipTransferred_Ownership" } true;
[L4092]              _owner_Ownership[this] := msgsender_MSG;
[L4105]  RET         call Ownership_Ownership_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4106]  COND FALSE  !(revert)
[L5754]  RET         call Ownership_Ownership__success(this, msgsender_MSG, msgvalue_MSG);
[L5755]  COND TRUE   revert
[L2439]  RET         call DkargoToken_DkargoToken__success(this, msgsender_MSG, msgvalue_MSG, name_s1191, symbol_s1191, supply_s1191);
[L2440]              assume !revert && gas >= 0;
[L8447]  RET         call DkargoToken_DkargoToken(this, msgsender_MSG, msgvalue_MSG, name_s1191, symbol_s1191, supply_s1191);
[L8448]              assume !revert && gas >= 0;

Loop:
[L8451]  CALL        call CorralChoice_DkargoToken(this);
[L8221]              havoc msgsender_MSG;
[L8222]              havoc msgvalue_MSG;
[L8223]              havoc choice;
[L8224]              havoc __ret_0_getDkargoPrefix;
[L8225]              havoc expected_s84;
[L8226]              havoc __ret_0_owner;
[L8227]              havoc __ret_0_isOwner;
[L8228]              havoc __ret_0_count;
[L8229]              havoc __ret_0_head;
[L8230]              havoc __ret_0_tail;
[L8231]              havoc node_s309;
[L8232]              havoc __ret_0_nextOf;
[L8233]              havoc node_s323;
[L8234]              havoc __ret_0_prevOf;
[L8235]              havoc node_s376;
[L8236]              havoc __ret_0_isLinked;
[L8237]              havoc infcid_s625;
[L8238]              havoc __ret_0_supportsInterface;
[L8239]              havoc to_s1257;
[L8240]              havoc value_s1257;
[L8241]              havoc __ret_0_transfer;
[L8242]              havoc spender_s1084;
[L8243]              havoc amount_s1084;
[L8244]              havoc __ret_0_approve;
[L8245]              havoc from_s1311;
[L8246]              havoc to_s1311;
[L8247]              havoc value_s1311;
[L8248]              havoc __ret_0_transferFrom;
[L8249]              havoc __ret_0_totalSupply;
[L8250]              havoc account_s841;
[L8251]              havoc __ret_0_balanceOf;
[L8252]              havoc approver_s857;
[L8253]              havoc spender_s857;
[L8254]              havoc __ret_0_allowance;
[L8255]              havoc spender_s1111;
[L8256]              havoc addedValue_s1111;
[L8257]              havoc __ret_0_increaseAllowance;
[L8258]              havoc spender_s1139;
[L8259]              havoc subtractedValue_s1139;
[L8260]              havoc __ret_0_decreaseAllowance;
[L8261]              havoc name_s1191;
[L8262]              havoc symbol_s1191;
[L8263]              havoc supply_s1191;
[L8264]              havoc amount_s1203;
[L8265]              havoc __ret_0_name;
[L8266]              havoc __ret_0_symbol;
[L8267]              havoc __ret_0_decimals;
[L8268]              havoc tmpNow;
[L8269]              havoc gas;
[L8270]              assume gas > 4000000 && gas <= 8000000;
[L8271]              tmpNow := now;
[L8272]              havoc now;
[L8273]              assume now > tmpNow;
[L8274]              assume msgsender_MSG != null;
[L8275]              assume DType[msgsender_MSG] != DkargoPrefix;
[L8276]              assume DType[msgsender_MSG] != Ownership;
[L8277]              assume DType[msgsender_MSG] != SafeMath;
[L8278]              assume DType[msgsender_MSG] != AddressChain;
[L8279]              assume DType[msgsender_MSG] != IERC165;
[L8280]              assume DType[msgsender_MSG] != ERC165;
[L8281]              assume DType[msgsender_MSG] != IERC20;
[L8282]              assume DType[msgsender_MSG] != ERC20;
[L8283]              assume DType[msgsender_MSG] != ERC20Safe;
[L8284]              assume DType[msgsender_MSG] != DkargoToken;
[L8285]              Alloc[msgsender_MSG] := true;
[L8286]  COND TRUE   choice == 23
[L8287]              gas := gas - 21000;
[L8288]  COND FALSE  !(gas >= 0)
[L8451]  RET         call CorralChoice_DkargoToken(this);

[2020-11-25 14:00:28,378 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 14:00:28,378 INFO  L82        PathProgramCache]: Analyzing trace with hash -392013267, now seen corresponding path program 1 times
[2020-11-25 14:00:28,383 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 14:00:28,407 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 14:00:28,450 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 14:00:28,452 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 14:00:28,452 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [4] imperfect sequences [] total 4
[2020-11-25 14:00:28,788 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 14:00:28,800 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-11-25 14:00:28,801 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=5, Invalid=7, Unknown=0, NotChecked=0, Total=12
[2020-11-25 14:00:28,802 INFO  L87              Difference]: Start difference. First operand 7444 states. Second operand 4 states.
[2020-11-25 14:00:29,545 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 14:00:29,545 INFO  L93              Difference]: Finished difference Result 4740 states and 5538 transitions.
[2020-11-25 14:00:29,546 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 4 states. 
[2020-11-25 14:00:29,547 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 4740 states and 5538 transitions.
[2020-11-25 14:00:29,572 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 14:00:29,603 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 4740 states to 4740 states and 5538 transitions.
[2020-11-25 14:00:29,604 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 4
[2020-11-25 14:00:29,607 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1003
[2020-11-25 14:00:29,607 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 4740 states and 5538 transitions.
[2020-11-25 14:00:29,618 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 14:00:29,618 INFO  L728         BuchiCegarLoop]: Abstraction has 4740 states and 5538 transitions.
[2020-11-25 14:00:29,635 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 4740 states and 5538 transitions.
[2020-11-25 14:00:29,702 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 4740 to 4740.
[2020-11-25 14:00:29,702 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 4740 states.
[2020-11-25 14:00:29,708 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 4740 states to 4740 states and 5538 transitions.
[2020-11-25 14:00:29,709 INFO  L751         BuchiCegarLoop]: Abstraction has 4740 states and 5538 transitions.
[2020-11-25 14:00:29,709 INFO  L631         BuchiCegarLoop]: Abstraction has 4740 states and 5538 transitions.
[2020-11-25 14:00:29,709 INFO  L445         BuchiCegarLoop]: ======== Iteration 2============
[2020-11-25 14:00:29,709 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 4740 states and 5538 transitions.
[2020-11-25 14:00:29,719 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 14:00:29,719 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 14:00:29,719 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 14:00:29,721 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 14:00:29,721 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_transfer_DkargoToken0 := false;
[L3]                 call_transfer_DkargoToken0 := false;
[L3]     CALL        call main();
[L3]                 havoc p1;
[L8441]              assume null == 0;
[L8442]  CALL        call this := FreshRefGenerator__success();
[L3984]              havoc newRef;
[L3985]              assume Alloc[newRef] == false;
[L3986]              Alloc[newRef] := true;
[L3987]              assume newRef != null;
[L8442]  RET         call this := FreshRefGenerator__success();
[L8443]              assume now >= 0;
[L8444]              assume DType[this] == DkargoToken;
[L8445]              assume msgvalue_MSG == 0;
[L8446]              gas := gas - 53000;
[L8447]  CALL        call DkargoToken_DkargoToken(this, msgsender_MSG, msgvalue_MSG, name_s1191, symbol_s1191, supply_s1191);
[L2404]              havoc __exception;
[L2405]              revert := false;
[L2406]  COND FALSE  !(__exception)
[L2439]  CALL        call DkargoToken_DkargoToken__success(this, msgsender_MSG, msgvalue_MSG, name_s1191, symbol_s1191, supply_s1191);
[L5754]  CALL        call Ownership_Ownership__success(this, msgsender_MSG, msgvalue_MSG);
[L4105]  CALL        call Ownership_Ownership_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4087]              assume msgsender_MSG != null;
[L4088]              Balance[this] := 0;
[L4089]              _owner_Ownership[this] := null;
[L4091]              assert { :EventEmitted "OwnershipTransferred_Ownership" } true;
[L4092]              _owner_Ownership[this] := msgsender_MSG;
[L4105]  RET         call Ownership_Ownership_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4106]  COND FALSE  !(revert)
[L5754]  RET         call Ownership_Ownership__success(this, msgsender_MSG, msgvalue_MSG);
[L5755]  COND TRUE   revert
[L2439]  RET         call DkargoToken_DkargoToken__success(this, msgsender_MSG, msgvalue_MSG, name_s1191, symbol_s1191, supply_s1191);
[L2440]              assume !revert && gas >= 0;
[L8447]  RET         call DkargoToken_DkargoToken(this, msgsender_MSG, msgvalue_MSG, name_s1191, symbol_s1191, supply_s1191);
[L8448]              assume !revert && gas >= 0;
[L8451]  CALL        call CorralChoice_DkargoToken(this);
[L8221]              havoc msgsender_MSG;
[L8222]              havoc msgvalue_MSG;
[L8223]              havoc choice;
[L8224]              havoc __ret_0_getDkargoPrefix;
[L8225]              havoc expected_s84;
[L8226]              havoc __ret_0_owner;
[L8227]              havoc __ret_0_isOwner;
[L8228]              havoc __ret_0_count;
[L8229]              havoc __ret_0_head;
[L8230]              havoc __ret_0_tail;
[L8231]              havoc node_s309;
[L8232]              havoc __ret_0_nextOf;
[L8233]              havoc node_s323;
[L8234]              havoc __ret_0_prevOf;
[L8235]              havoc node_s376;
[L8236]              havoc __ret_0_isLinked;
[L8237]              havoc infcid_s625;
[L8238]              havoc __ret_0_supportsInterface;
[L8239]              havoc to_s1257;
[L8240]              havoc value_s1257;
[L8241]              havoc __ret_0_transfer;
[L8242]              havoc spender_s1084;
[L8243]              havoc amount_s1084;
[L8244]              havoc __ret_0_approve;
[L8245]              havoc from_s1311;
[L8246]              havoc to_s1311;
[L8247]              havoc value_s1311;
[L8248]              havoc __ret_0_transferFrom;
[L8249]              havoc __ret_0_totalSupply;
[L8250]              havoc account_s841;
[L8251]              havoc __ret_0_balanceOf;
[L8252]              havoc approver_s857;
[L8253]              havoc spender_s857;
[L8254]              havoc __ret_0_allowance;
[L8255]              havoc spender_s1111;
[L8256]              havoc addedValue_s1111;
[L8257]              havoc __ret_0_increaseAllowance;
[L8258]              havoc spender_s1139;
[L8259]              havoc subtractedValue_s1139;
[L8260]              havoc __ret_0_decreaseAllowance;
[L8261]              havoc name_s1191;
[L8262]              havoc symbol_s1191;
[L8263]              havoc supply_s1191;
[L8264]              havoc amount_s1203;
[L8265]              havoc __ret_0_name;
[L8266]              havoc __ret_0_symbol;
[L8267]              havoc __ret_0_decimals;
[L8268]              havoc tmpNow;
[L8269]              havoc gas;
[L8270]              assume gas > 4000000 && gas <= 8000000;
[L8271]              tmpNow := now;
[L8272]              havoc now;
[L8273]              assume now > tmpNow;
[L8274]              assume msgsender_MSG != null;
[L8275]              assume DType[msgsender_MSG] != DkargoPrefix;
[L8276]              assume DType[msgsender_MSG] != Ownership;
[L8277]              assume DType[msgsender_MSG] != SafeMath;
[L8278]              assume DType[msgsender_MSG] != AddressChain;
[L8279]              assume DType[msgsender_MSG] != IERC165;
[L8280]              assume DType[msgsender_MSG] != ERC165;
[L8281]              assume DType[msgsender_MSG] != IERC20;
[L8282]              assume DType[msgsender_MSG] != ERC20;
[L8283]              assume DType[msgsender_MSG] != ERC20Safe;
[L8284]              assume DType[msgsender_MSG] != DkargoToken;
[L8285]              Alloc[msgsender_MSG] := true;
[L8286]  COND FALSE  !(choice == 23)
[L8292]  COND FALSE  !(choice == 22)
[L8298]  COND FALSE  !(choice == 21)
[L8304]  COND FALSE  !(choice == 20)
[L8310]  COND FALSE  !(choice == 19)
[L8316]  COND FALSE  !(choice == 18)
[L8322]  COND FALSE  !(choice == 17)
[L8328]  COND FALSE  !(choice == 16)
[L8334]  COND FALSE  !(choice == 15)
[L8340]  COND FALSE  !(choice == 14)
[L8346]  COND FALSE  !(choice == 13)
[L8352]  COND TRUE   choice == 12
[L8353]              gas := gas - 21000;
[L8354]  COND TRUE   gas >= 0
[L8355]              assume value_s1257 >= 0 && value_s1257 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8356]              assume msgvalue_MSG == 0;
[L8357]  CALL        call __ret_0_transfer := transfer~address~uint256_DkargoToken(this, msgsender_MSG, msgvalue_MSG, to_s1257, value_s1257);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((p1 != msgsender_MSG && p1 != to_s1257) && msgsender_MSG != to_s1257) && value_s1257 <= _balances_ERC20[this][msgsender_MSG]) && _balances_ERC20[this][to_s1257] + value_s1257 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && value_s1257 >= 0) && value_s1257 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1257] >= 0) && _balances_ERC20[this][to_s1257] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transfer_DkargoToken0 := true;
[L3]                 call_transfer_DkargoToken0 := false;
[L3]                 revert := revert_hold;
[L2562]              havoc __exception;
[L2563]              revert := false;
[L2564]  COND FALSE  !(__exception)
[L2597]  CALL        call __ret_0_ := transfer~address~uint256_DkargoToken__success(this, msgsender_MSG, msgvalue_MSG, to_s1257, value_s1257);
[L5897]  COND TRUE   DType[this] == DkargoToken
[L5898]  CALL        call ret_s1257 := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1257, value_s1257);
[L4998]  COND TRUE   DType[this] == DkargoToken
[L4999]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, recipient_s785, amount_s785);
[L5227]              __var_20 := null;
[L5228]  COND TRUE   !(sender_s956 != null)
[L5229]              revert := true;
[L4999]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, recipient_s785, amount_s785);
[L5000]  COND TRUE   revert
[L5898]  RET         call ret_s1257 := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1257, value_s1257);
[L5899]  COND TRUE   revert
[L2597]  RET         call __ret_0_ := transfer~address~uint256_DkargoToken__success(this, msgsender_MSG, msgvalue_MSG, to_s1257, value_s1257);
[L2598]              assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !(((((((((((__ret_0_ == true && _balances_ERC20[this][msgsender_MSG] == old(_balances_ERC20[this][msgsender_MSG]) - value_s1257) && _balances_ERC20[this][to_s1257] == old(_balances_ERC20[this][to_s1257]) + value_s1257) && _supply_ERC20[this] == old(_supply_ERC20[this])) && _allowances_ERC20[this] == old(_allowances_ERC20[this])) && _balances_ERC20[this][p1] == old(_balances_ERC20[this][p1])) && _name_DkargoToken[this] == old(_name_DkargoToken[this])) && _symbol_DkargoToken[this] == old(_symbol_DkargoToken[this])) && _dkargoPrefix_DkargoPrefix[this] == old(_dkargoPrefix_DkargoPrefix[this])) && _infcs_ERC165[this] == old(_infcs_ERC165[this])) && _slist_AddressChain[this] == old(_slist_AddressChain[this])) && _owner_Ownership[this] == old(_owner_Ownership[this]));
[L3]                 revert := revert_hold;
[L8357]  RET         call __ret_0_transfer := transfer~address~uint256_DkargoToken(this, msgsender_MSG, msgvalue_MSG, to_s1257, value_s1257);
[L8451]  RET         call CorralChoice_DkargoToken(this);

Loop:
[L8451]  CALL        call CorralChoice_DkargoToken(this);
[L8221]              havoc msgsender_MSG;
[L8222]              havoc msgvalue_MSG;
[L8223]              havoc choice;
[L8224]              havoc __ret_0_getDkargoPrefix;
[L8225]              havoc expected_s84;
[L8226]              havoc __ret_0_owner;
[L8227]              havoc __ret_0_isOwner;
[L8228]              havoc __ret_0_count;
[L8229]              havoc __ret_0_head;
[L8230]              havoc __ret_0_tail;
[L8231]              havoc node_s309;
[L8232]              havoc __ret_0_nextOf;
[L8233]              havoc node_s323;
[L8234]              havoc __ret_0_prevOf;
[L8235]              havoc node_s376;
[L8236]              havoc __ret_0_isLinked;
[L8237]              havoc infcid_s625;
[L8238]              havoc __ret_0_supportsInterface;
[L8239]              havoc to_s1257;
[L8240]              havoc value_s1257;
[L8241]              havoc __ret_0_transfer;
[L8242]              havoc spender_s1084;
[L8243]              havoc amount_s1084;
[L8244]              havoc __ret_0_approve;
[L8245]              havoc from_s1311;
[L8246]              havoc to_s1311;
[L8247]              havoc value_s1311;
[L8248]              havoc __ret_0_transferFrom;
[L8249]              havoc __ret_0_totalSupply;
[L8250]              havoc account_s841;
[L8251]              havoc __ret_0_balanceOf;
[L8252]              havoc approver_s857;
[L8253]              havoc spender_s857;
[L8254]              havoc __ret_0_allowance;
[L8255]              havoc spender_s1111;
[L8256]              havoc addedValue_s1111;
[L8257]              havoc __ret_0_increaseAllowance;
[L8258]              havoc spender_s1139;
[L8259]              havoc subtractedValue_s1139;
[L8260]              havoc __ret_0_decreaseAllowance;
[L8261]              havoc name_s1191;
[L8262]              havoc symbol_s1191;
[L8263]              havoc supply_s1191;
[L8264]              havoc amount_s1203;
[L8265]              havoc __ret_0_name;
[L8266]              havoc __ret_0_symbol;
[L8267]              havoc __ret_0_decimals;
[L8268]              havoc tmpNow;
[L8269]              havoc gas;
[L8270]              assume gas > 4000000 && gas <= 8000000;
[L8271]              tmpNow := now;
[L8272]              havoc now;
[L8273]              assume now > tmpNow;
[L8274]              assume msgsender_MSG != null;
[L8275]              assume DType[msgsender_MSG] != DkargoPrefix;
[L8276]              assume DType[msgsender_MSG] != Ownership;
[L8277]              assume DType[msgsender_MSG] != SafeMath;
[L8278]              assume DType[msgsender_MSG] != AddressChain;
[L8279]              assume DType[msgsender_MSG] != IERC165;
[L8280]              assume DType[msgsender_MSG] != ERC165;
[L8281]              assume DType[msgsender_MSG] != IERC20;
[L8282]              assume DType[msgsender_MSG] != ERC20;
[L8283]              assume DType[msgsender_MSG] != ERC20Safe;
[L8284]              assume DType[msgsender_MSG] != DkargoToken;
[L8285]              Alloc[msgsender_MSG] := true;
[L8286]  COND FALSE  !(choice == 23)
[L8292]  COND FALSE  !(choice == 22)
[L8298]  COND FALSE  !(choice == 21)
[L8304]  COND FALSE  !(choice == 20)
[L8310]  COND FALSE  !(choice == 19)
[L8316]  COND FALSE  !(choice == 18)
[L8322]  COND FALSE  !(choice == 17)
[L8328]  COND FALSE  !(choice == 16)
[L8334]  COND FALSE  !(choice == 15)
[L8340]  COND FALSE  !(choice == 14)
[L8346]  COND FALSE  !(choice == 13)
[L8352]  COND TRUE   choice == 12
[L8353]              gas := gas - 21000;
[L8354]  COND TRUE   gas >= 0
[L8355]              assume value_s1257 >= 0 && value_s1257 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8356]              assume msgvalue_MSG == 0;
[L8357]  CALL        call __ret_0_transfer := transfer~address~uint256_DkargoToken(this, msgsender_MSG, msgvalue_MSG, to_s1257, value_s1257);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((p1 != msgsender_MSG && p1 != to_s1257) && msgsender_MSG != to_s1257) && value_s1257 <= _balances_ERC20[this][msgsender_MSG]) && _balances_ERC20[this][to_s1257] + value_s1257 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && value_s1257 >= 0) && value_s1257 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1257] >= 0) && _balances_ERC20[this][to_s1257] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transfer_DkargoToken0 := true;
[L3]                 call_transfer_DkargoToken0 := false;
[L3]                 revert := revert_hold;
[L2562]              havoc __exception;
[L2563]              revert := false;
[L2564]  COND FALSE  !(__exception)
[L2597]  CALL        call __ret_0_ := transfer~address~uint256_DkargoToken__success(this, msgsender_MSG, msgvalue_MSG, to_s1257, value_s1257);
[L5897]  COND TRUE   DType[this] == DkargoToken
[L5898]  CALL        call ret_s1257 := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1257, value_s1257);
[L4998]  COND TRUE   DType[this] == DkargoToken
[L4999]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, recipient_s785, amount_s785);
[L5227]              __var_20 := null;
[L5228]  COND TRUE   !(sender_s956 != null)
[L5229]              revert := true;
[L4999]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, recipient_s785, amount_s785);
[L5000]  COND TRUE   revert
[L5898]  RET         call ret_s1257 := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1257, value_s1257);
[L5899]  COND TRUE   revert
[L2597]  RET         call __ret_0_ := transfer~address~uint256_DkargoToken__success(this, msgsender_MSG, msgvalue_MSG, to_s1257, value_s1257);
[L2598]              assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !(((((((((((__ret_0_ == true && _balances_ERC20[this][msgsender_MSG] == old(_balances_ERC20[this][msgsender_MSG]) - value_s1257) && _balances_ERC20[this][to_s1257] == old(_balances_ERC20[this][to_s1257]) + value_s1257) && _supply_ERC20[this] == old(_supply_ERC20[this])) && _allowances_ERC20[this] == old(_allowances_ERC20[this])) && _balances_ERC20[this][p1] == old(_balances_ERC20[this][p1])) && _name_DkargoToken[this] == old(_name_DkargoToken[this])) && _symbol_DkargoToken[this] == old(_symbol_DkargoToken[this])) && _dkargoPrefix_DkargoPrefix[this] == old(_dkargoPrefix_DkargoPrefix[this])) && _infcs_ERC165[this] == old(_infcs_ERC165[this])) && _slist_AddressChain[this] == old(_slist_AddressChain[this])) && _owner_Ownership[this] == old(_owner_Ownership[this]));
[L3]                 revert := revert_hold;
[L8357]  RET         call __ret_0_transfer := transfer~address~uint256_DkargoToken(this, msgsender_MSG, msgvalue_MSG, to_s1257, value_s1257);
[L8451]  RET         call CorralChoice_DkargoToken(this);

[2020-11-25 14:00:29,726 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 14:00:29,726 INFO  L82        PathProgramCache]: Analyzing trace with hash 798924657, now seen corresponding path program 1 times
[2020-11-25 14:00:29,728 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 14:00:29,740 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 14:00:29,764 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 14:00:29,764 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 14:00:29,764 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [3] imperfect sequences [] total 3
[2020-11-25 14:00:29,766 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 14:00:29,766 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-11-25 14:00:29,766 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-11-25 14:00:29,766 INFO  L87              Difference]: Start difference. First operand 4740 states and 5538 transitions. cyclomatic complexity: 800 Second operand 3 states.
[2020-11-25 14:00:29,896 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 14:00:29,897 INFO  L93              Difference]: Finished difference Result 5884 states and 6839 transitions.
[2020-11-25 14:00:29,897 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-11-25 14:00:29,897 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 5884 states and 6839 transitions.
[2020-11-25 14:00:29,913 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 14:00:29,936 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 5884 states to 5884 states and 6839 transitions.
[2020-11-25 14:00:29,936 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1269
[2020-11-25 14:00:29,937 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1269
[2020-11-25 14:00:29,938 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 5884 states and 6839 transitions.
[2020-11-25 14:00:29,944 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 14:00:29,944 INFO  L728         BuchiCegarLoop]: Abstraction has 5884 states and 6839 transitions.
[2020-11-25 14:00:29,950 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 5884 states and 6839 transitions.
[2020-11-25 14:00:30,004 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 5884 to 5198.
[2020-11-25 14:00:30,004 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 5198 states.
[2020-11-25 14:00:30,010 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 5198 states to 5198 states and 5991 transitions.
[2020-11-25 14:00:30,010 INFO  L751         BuchiCegarLoop]: Abstraction has 5198 states and 5991 transitions.
[2020-11-25 14:00:30,010 INFO  L631         BuchiCegarLoop]: Abstraction has 5198 states and 5991 transitions.
[2020-11-25 14:00:30,010 INFO  L445         BuchiCegarLoop]: ======== Iteration 3============
[2020-11-25 14:00:30,010 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 5198 states and 5991 transitions.
[2020-11-25 14:00:30,017 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 14:00:30,017 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 14:00:30,017 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 14:00:30,019 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 14:00:30,019 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_transfer_DkargoToken0 := false;
[L3]                 call_transfer_DkargoToken0 := false;
[L3]     CALL        call main();
[L3]                 havoc p1;
[L8441]              assume null == 0;
[L8442]  CALL        call this := FreshRefGenerator__success();
[L3984]              havoc newRef;
[L3985]              assume Alloc[newRef] == false;
[L3986]              Alloc[newRef] := true;
[L3987]              assume newRef != null;
[L8442]  RET         call this := FreshRefGenerator__success();
[L8443]              assume now >= 0;
[L8444]              assume DType[this] == DkargoToken;
[L8445]              assume msgvalue_MSG == 0;
[L8446]              gas := gas - 53000;
[L8447]  CALL        call DkargoToken_DkargoToken(this, msgsender_MSG, msgvalue_MSG, name_s1191, symbol_s1191, supply_s1191);
[L2404]              havoc __exception;
[L2405]              revert := false;
[L2406]  COND FALSE  !(__exception)
[L2439]  CALL        call DkargoToken_DkargoToken__success(this, msgsender_MSG, msgvalue_MSG, name_s1191, symbol_s1191, supply_s1191);
[L5754]  CALL        call Ownership_Ownership__success(this, msgsender_MSG, msgvalue_MSG);
[L4105]  CALL        call Ownership_Ownership_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4087]              assume msgsender_MSG != null;
[L4088]              Balance[this] := 0;
[L4089]              _owner_Ownership[this] := null;
[L4091]              assert { :EventEmitted "OwnershipTransferred_Ownership" } true;
[L4092]              _owner_Ownership[this] := msgsender_MSG;
[L4105]  RET         call Ownership_Ownership_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4106]  COND FALSE  !(revert)
[L5754]  RET         call Ownership_Ownership__success(this, msgsender_MSG, msgvalue_MSG);
[L5755]  COND FALSE  !(revert)
[L5758]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4826]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4811]              assume msgsender_MSG != null;
[L4812]              Balance[this] := 0;
[L4826]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4827]  COND FALSE  !(revert)
[L5758]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5759]  COND FALSE  !(revert)
[L5762]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG, supply_s1191);
[L4914]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4826]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4811]              assume msgsender_MSG != null;
[L4812]              Balance[this] := 0;
[L4826]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4827]  COND FALSE  !(revert)
[L4914]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4915]  COND FALSE  !(revert)
[L4918]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, supply_s747);
[L4869]              assume msgsender_MSG != null;
[L4870]              Balance[this] := 0;
[L4871]              _supply_ERC20[this] := 0;
[L4872]              _balances_ERC20[this] := zeroRefintArr();
[L4873]              sum__balances1[this] := 0;
[L4874]              _allowances_ERC20[this] := zeroRefRefintArr();
[L4875]              sum__allowances2[this] := 0;
[L4877]              pebs_s747 := supply_s747;
[L4878]  COND TRUE   DType[this] == DkargoToken
[L4879]  CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, pebs_s747);
[L5283]              __var_24 := null;
[L5284]  COND TRUE   !(account_s999 != null)
[L5285]              revert := true;
[L4879]  RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, pebs_s747);
[L4880]  COND TRUE   revert
[L4918]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, supply_s747);
[L4919]  COND TRUE   revert
[L5762]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG, supply_s1191);
[L5763]  COND TRUE   revert
[L2439]  RET         call DkargoToken_DkargoToken__success(this, msgsender_MSG, msgvalue_MSG, name_s1191, symbol_s1191, supply_s1191);
[L2440]              assume !revert && gas >= 0;
[L8447]  RET         call DkargoToken_DkargoToken(this, msgsender_MSG, msgvalue_MSG, name_s1191, symbol_s1191, supply_s1191);
[L8448]              assume !revert && gas >= 0;
[L8451]  CALL        call CorralChoice_DkargoToken(this);
[L8221]              havoc msgsender_MSG;
[L8222]              havoc msgvalue_MSG;
[L8223]              havoc choice;
[L8224]              havoc __ret_0_getDkargoPrefix;
[L8225]              havoc expected_s84;
[L8226]              havoc __ret_0_owner;
[L8227]              havoc __ret_0_isOwner;
[L8228]              havoc __ret_0_count;
[L8229]              havoc __ret_0_head;
[L8230]              havoc __ret_0_tail;
[L8231]              havoc node_s309;
[L8232]              havoc __ret_0_nextOf;
[L8233]              havoc node_s323;
[L8234]              havoc __ret_0_prevOf;
[L8235]              havoc node_s376;
[L8236]              havoc __ret_0_isLinked;
[L8237]              havoc infcid_s625;
[L8238]              havoc __ret_0_supportsInterface;
[L8239]              havoc to_s1257;
[L8240]              havoc value_s1257;
[L8241]              havoc __ret_0_transfer;
[L8242]              havoc spender_s1084;
[L8243]              havoc amount_s1084;
[L8244]              havoc __ret_0_approve;
[L8245]              havoc from_s1311;
[L8246]              havoc to_s1311;
[L8247]              havoc value_s1311;
[L8248]              havoc __ret_0_transferFrom;
[L8249]              havoc __ret_0_totalSupply;
[L8250]              havoc account_s841;
[L8251]              havoc __ret_0_balanceOf;
[L8252]              havoc approver_s857;
[L8253]              havoc spender_s857;
[L8254]              havoc __ret_0_allowance;
[L8255]              havoc spender_s1111;
[L8256]              havoc addedValue_s1111;
[L8257]              havoc __ret_0_increaseAllowance;
[L8258]              havoc spender_s1139;
[L8259]              havoc subtractedValue_s1139;
[L8260]              havoc __ret_0_decreaseAllowance;
[L8261]              havoc name_s1191;
[L8262]              havoc symbol_s1191;
[L8263]              havoc supply_s1191;
[L8264]              havoc amount_s1203;
[L8265]              havoc __ret_0_name;
[L8266]              havoc __ret_0_symbol;
[L8267]              havoc __ret_0_decimals;
[L8268]              havoc tmpNow;
[L8269]              havoc gas;
[L8270]              assume gas > 4000000 && gas <= 8000000;
[L8271]              tmpNow := now;
[L8272]              havoc now;
[L8273]              assume now > tmpNow;
[L8274]              assume msgsender_MSG != null;
[L8275]              assume DType[msgsender_MSG] != DkargoPrefix;
[L8276]              assume DType[msgsender_MSG] != Ownership;
[L8277]              assume DType[msgsender_MSG] != SafeMath;
[L8278]              assume DType[msgsender_MSG] != AddressChain;
[L8279]              assume DType[msgsender_MSG] != IERC165;
[L8280]              assume DType[msgsender_MSG] != ERC165;
[L8281]              assume DType[msgsender_MSG] != IERC20;
[L8282]              assume DType[msgsender_MSG] != ERC20;
[L8283]              assume DType[msgsender_MSG] != ERC20Safe;
[L8284]              assume DType[msgsender_MSG] != DkargoToken;
[L8285]              Alloc[msgsender_MSG] := true;
[L8286]  COND FALSE  !(choice == 23)
[L8292]  COND FALSE  !(choice == 22)
[L8298]  COND FALSE  !(choice == 21)
[L8304]  COND FALSE  !(choice == 20)
[L8310]  COND FALSE  !(choice == 19)
[L8316]  COND FALSE  !(choice == 18)
[L8322]  COND FALSE  !(choice == 17)
[L8328]  COND FALSE  !(choice == 16)
[L8334]  COND FALSE  !(choice == 15)
[L8340]  COND FALSE  !(choice == 14)
[L8346]  COND FALSE  !(choice == 13)
[L8352]  COND TRUE   choice == 12
[L8353]              gas := gas - 21000;
[L8354]  COND TRUE   gas >= 0
[L8355]              assume value_s1257 >= 0 && value_s1257 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8356]              assume msgvalue_MSG == 0;
[L8357]  CALL        call __ret_0_transfer := transfer~address~uint256_DkargoToken(this, msgsender_MSG, msgvalue_MSG, to_s1257, value_s1257);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((p1 != msgsender_MSG && p1 != to_s1257) && msgsender_MSG != to_s1257) && value_s1257 <= _balances_ERC20[this][msgsender_MSG]) && _balances_ERC20[this][to_s1257] + value_s1257 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && value_s1257 >= 0) && value_s1257 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1257] >= 0) && _balances_ERC20[this][to_s1257] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transfer_DkargoToken0 := true;
[L3]                 call_transfer_DkargoToken0 := false;
[L3]                 revert := revert_hold;
[L2562]              havoc __exception;
[L2563]              revert := false;
[L2564]  COND FALSE  !(__exception)
[L2597]  CALL        call __ret_0_ := transfer~address~uint256_DkargoToken__success(this, msgsender_MSG, msgvalue_MSG, to_s1257, value_s1257);
[L5897]  COND TRUE   DType[this] == DkargoToken
[L5898]  CALL        call ret_s1257 := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1257, value_s1257);
[L4998]  COND TRUE   DType[this] == DkargoToken
[L4999]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, recipient_s785, amount_s785);
[L5227]              __var_20 := null;
[L5228]  COND TRUE   !(sender_s956 != null)
[L5229]              revert := true;
[L4999]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, recipient_s785, amount_s785);
[L5000]  COND TRUE   revert
[L5898]  RET         call ret_s1257 := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1257, value_s1257);
[L5899]  COND TRUE   revert
[L2597]  RET         call __ret_0_ := transfer~address~uint256_DkargoToken__success(this, msgsender_MSG, msgvalue_MSG, to_s1257, value_s1257);
[L2598]              assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !(((((((((((__ret_0_ == true && _balances_ERC20[this][msgsender_MSG] == old(_balances_ERC20[this][msgsender_MSG]) - value_s1257) && _balances_ERC20[this][to_s1257] == old(_balances_ERC20[this][to_s1257]) + value_s1257) && _supply_ERC20[this] == old(_supply_ERC20[this])) && _allowances_ERC20[this] == old(_allowances_ERC20[this])) && _balances_ERC20[this][p1] == old(_balances_ERC20[this][p1])) && _name_DkargoToken[this] == old(_name_DkargoToken[this])) && _symbol_DkargoToken[this] == old(_symbol_DkargoToken[this])) && _dkargoPrefix_DkargoPrefix[this] == old(_dkargoPrefix_DkargoPrefix[this])) && _infcs_ERC165[this] == old(_infcs_ERC165[this])) && _slist_AddressChain[this] == old(_slist_AddressChain[this])) && _owner_Ownership[this] == old(_owner_Ownership[this]));
[L3]                 revert := revert_hold;
[L8357]  RET         call __ret_0_transfer := transfer~address~uint256_DkargoToken(this, msgsender_MSG, msgvalue_MSG, to_s1257, value_s1257);
[L8451]  RET         call CorralChoice_DkargoToken(this);

Loop:
[L8451]  CALL        call CorralChoice_DkargoToken(this);
[L8221]              havoc msgsender_MSG;
[L8222]              havoc msgvalue_MSG;
[L8223]              havoc choice;
[L8224]              havoc __ret_0_getDkargoPrefix;
[L8225]              havoc expected_s84;
[L8226]              havoc __ret_0_owner;
[L8227]              havoc __ret_0_isOwner;
[L8228]              havoc __ret_0_count;
[L8229]              havoc __ret_0_head;
[L8230]              havoc __ret_0_tail;
[L8231]              havoc node_s309;
[L8232]              havoc __ret_0_nextOf;
[L8233]              havoc node_s323;
[L8234]              havoc __ret_0_prevOf;
[L8235]              havoc node_s376;
[L8236]              havoc __ret_0_isLinked;
[L8237]              havoc infcid_s625;
[L8238]              havoc __ret_0_supportsInterface;
[L8239]              havoc to_s1257;
[L8240]              havoc value_s1257;
[L8241]              havoc __ret_0_transfer;
[L8242]              havoc spender_s1084;
[L8243]              havoc amount_s1084;
[L8244]              havoc __ret_0_approve;
[L8245]              havoc from_s1311;
[L8246]              havoc to_s1311;
[L8247]              havoc value_s1311;
[L8248]              havoc __ret_0_transferFrom;
[L8249]              havoc __ret_0_totalSupply;
[L8250]              havoc account_s841;
[L8251]              havoc __ret_0_balanceOf;
[L8252]              havoc approver_s857;
[L8253]              havoc spender_s857;
[L8254]              havoc __ret_0_allowance;
[L8255]              havoc spender_s1111;
[L8256]              havoc addedValue_s1111;
[L8257]              havoc __ret_0_increaseAllowance;
[L8258]              havoc spender_s1139;
[L8259]              havoc subtractedValue_s1139;
[L8260]              havoc __ret_0_decreaseAllowance;
[L8261]              havoc name_s1191;
[L8262]              havoc symbol_s1191;
[L8263]              havoc supply_s1191;
[L8264]              havoc amount_s1203;
[L8265]              havoc __ret_0_name;
[L8266]              havoc __ret_0_symbol;
[L8267]              havoc __ret_0_decimals;
[L8268]              havoc tmpNow;
[L8269]              havoc gas;
[L8270]              assume gas > 4000000 && gas <= 8000000;
[L8271]              tmpNow := now;
[L8272]              havoc now;
[L8273]              assume now > tmpNow;
[L8274]              assume msgsender_MSG != null;
[L8275]              assume DType[msgsender_MSG] != DkargoPrefix;
[L8276]              assume DType[msgsender_MSG] != Ownership;
[L8277]              assume DType[msgsender_MSG] != SafeMath;
[L8278]              assume DType[msgsender_MSG] != AddressChain;
[L8279]              assume DType[msgsender_MSG] != IERC165;
[L8280]              assume DType[msgsender_MSG] != ERC165;
[L8281]              assume DType[msgsender_MSG] != IERC20;
[L8282]              assume DType[msgsender_MSG] != ERC20;
[L8283]              assume DType[msgsender_MSG] != ERC20Safe;
[L8284]              assume DType[msgsender_MSG] != DkargoToken;
[L8285]              Alloc[msgsender_MSG] := true;
[L8286]  COND FALSE  !(choice == 23)
[L8292]  COND FALSE  !(choice == 22)
[L8298]  COND FALSE  !(choice == 21)
[L8304]  COND FALSE  !(choice == 20)
[L8310]  COND FALSE  !(choice == 19)
[L8316]  COND FALSE  !(choice == 18)
[L8322]  COND FALSE  !(choice == 17)
[L8328]  COND FALSE  !(choice == 16)
[L8334]  COND FALSE  !(choice == 15)
[L8340]  COND FALSE  !(choice == 14)
[L8346]  COND FALSE  !(choice == 13)
[L8352]  COND TRUE   choice == 12
[L8353]              gas := gas - 21000;
[L8354]  COND TRUE   gas >= 0
[L8355]              assume value_s1257 >= 0 && value_s1257 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8356]              assume msgvalue_MSG == 0;
[L8357]  CALL        call __ret_0_transfer := transfer~address~uint256_DkargoToken(this, msgsender_MSG, msgvalue_MSG, to_s1257, value_s1257);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((p1 != msgsender_MSG && p1 != to_s1257) && msgsender_MSG != to_s1257) && value_s1257 <= _balances_ERC20[this][msgsender_MSG]) && _balances_ERC20[this][to_s1257] + value_s1257 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && value_s1257 >= 0) && value_s1257 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1257] >= 0) && _balances_ERC20[this][to_s1257] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transfer_DkargoToken0 := true;
[L3]                 call_transfer_DkargoToken0 := false;
[L3]                 revert := revert_hold;
[L2562]              havoc __exception;
[L2563]              revert := false;
[L2564]  COND FALSE  !(__exception)
[L2597]  CALL        call __ret_0_ := transfer~address~uint256_DkargoToken__success(this, msgsender_MSG, msgvalue_MSG, to_s1257, value_s1257);
[L5897]  COND TRUE   DType[this] == DkargoToken
[L5898]  CALL        call ret_s1257 := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1257, value_s1257);
[L4998]  COND TRUE   DType[this] == DkargoToken
[L4999]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, recipient_s785, amount_s785);
[L5227]              __var_20 := null;
[L5228]  COND TRUE   !(sender_s956 != null)
[L5229]              revert := true;
[L4999]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, recipient_s785, amount_s785);
[L5000]  COND TRUE   revert
[L5898]  RET         call ret_s1257 := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1257, value_s1257);
[L5899]  COND TRUE   revert
[L2597]  RET         call __ret_0_ := transfer~address~uint256_DkargoToken__success(this, msgsender_MSG, msgvalue_MSG, to_s1257, value_s1257);
[L2598]              assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !(((((((((((__ret_0_ == true && _balances_ERC20[this][msgsender_MSG] == old(_balances_ERC20[this][msgsender_MSG]) - value_s1257) && _balances_ERC20[this][to_s1257] == old(_balances_ERC20[this][to_s1257]) + value_s1257) && _supply_ERC20[this] == old(_supply_ERC20[this])) && _allowances_ERC20[this] == old(_allowances_ERC20[this])) && _balances_ERC20[this][p1] == old(_balances_ERC20[this][p1])) && _name_DkargoToken[this] == old(_name_DkargoToken[this])) && _symbol_DkargoToken[this] == old(_symbol_DkargoToken[this])) && _dkargoPrefix_DkargoPrefix[this] == old(_dkargoPrefix_DkargoPrefix[this])) && _infcs_ERC165[this] == old(_infcs_ERC165[this])) && _slist_AddressChain[this] == old(_slist_AddressChain[this])) && _owner_Ownership[this] == old(_owner_Ownership[this]));
[L3]                 revert := revert_hold;
[L8357]  RET         call __ret_0_transfer := transfer~address~uint256_DkargoToken(this, msgsender_MSG, msgvalue_MSG, to_s1257, value_s1257);
[L8451]  RET         call CorralChoice_DkargoToken(this);

[2020-11-25 14:00:30,023 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 14:00:30,023 INFO  L82        PathProgramCache]: Analyzing trace with hash -1050359504, now seen corresponding path program 1 times
[2020-11-25 14:00:30,024 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 14:00:30,032 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 14:00:30,075 INFO  L134       CoverageAnalysis]: Checked inductivity of 10 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 10 trivial. 0 not checked.
[2020-11-25 14:00:30,075 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 14:00:30,075 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [8] imperfect sequences [] total 8
[2020-11-25 14:00:30,076 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 14:00:30,076 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 8 interpolants.
[2020-11-25 14:00:30,076 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=13, Invalid=43, Unknown=0, NotChecked=0, Total=56
[2020-11-25 14:00:30,076 INFO  L87              Difference]: Start difference. First operand 5198 states and 5991 transitions. cyclomatic complexity: 795 Second operand 8 states.
[2020-11-25 14:00:30,182 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 14:00:30,182 INFO  L93              Difference]: Finished difference Result 5218 states and 6015 transitions.
[2020-11-25 14:00:30,182 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 8 states. 
[2020-11-25 14:00:30,182 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 5218 states and 6015 transitions.
[2020-11-25 14:00:30,197 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 14:00:30,215 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 5218 states to 5197 states and 5989 transitions.
[2020-11-25 14:00:30,215 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1079
[2020-11-25 14:00:30,216 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1079
[2020-11-25 14:00:30,216 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 5197 states and 5989 transitions.
[2020-11-25 14:00:30,220 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 14:00:30,220 INFO  L728         BuchiCegarLoop]: Abstraction has 5197 states and 5989 transitions.
[2020-11-25 14:00:30,225 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 5197 states and 5989 transitions.
[2020-11-25 14:00:30,270 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 5197 to 5197.
[2020-11-25 14:00:30,270 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 5197 states.
[2020-11-25 14:00:30,277 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 5197 states to 5197 states and 5989 transitions.
[2020-11-25 14:00:30,277 INFO  L751         BuchiCegarLoop]: Abstraction has 5197 states and 5989 transitions.
[2020-11-25 14:00:30,277 INFO  L631         BuchiCegarLoop]: Abstraction has 5197 states and 5989 transitions.
[2020-11-25 14:00:30,277 INFO  L445         BuchiCegarLoop]: ======== Iteration 4============
[2020-11-25 14:00:30,277 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 5197 states and 5989 transitions.
[2020-11-25 14:00:30,286 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 14:00:30,286 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 14:00:30,286 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 14:00:30,288 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 14:00:30,288 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_transfer_DkargoToken0 := false;
[L3]                 call_transfer_DkargoToken0 := false;
[L3]     CALL        call main();
[L3]                 havoc p1;
[L8441]              assume null == 0;
[L8442]  CALL        call this := FreshRefGenerator__success();
[L3984]              havoc newRef;
[L3985]              assume Alloc[newRef] == false;
[L3986]              Alloc[newRef] := true;
[L3987]              assume newRef != null;
[L8442]  RET         call this := FreshRefGenerator__success();
[L8443]              assume now >= 0;
[L8444]              assume DType[this] == DkargoToken;
[L8445]              assume msgvalue_MSG == 0;
[L8446]              gas := gas - 53000;
[L8447]  CALL        call DkargoToken_DkargoToken(this, msgsender_MSG, msgvalue_MSG, name_s1191, symbol_s1191, supply_s1191);
[L2404]              havoc __exception;
[L2405]              revert := false;
[L2406]  COND FALSE  !(__exception)
[L2439]  CALL        call DkargoToken_DkargoToken__success(this, msgsender_MSG, msgvalue_MSG, name_s1191, symbol_s1191, supply_s1191);
[L5754]  CALL        call Ownership_Ownership__success(this, msgsender_MSG, msgvalue_MSG);
[L4105]  CALL        call Ownership_Ownership_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4087]              assume msgsender_MSG != null;
[L4088]              Balance[this] := 0;
[L4089]              _owner_Ownership[this] := null;
[L4091]              assert { :EventEmitted "OwnershipTransferred_Ownership" } true;
[L4092]              _owner_Ownership[this] := msgsender_MSG;
[L4105]  RET         call Ownership_Ownership_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4106]  COND FALSE  !(revert)
[L5754]  RET         call Ownership_Ownership__success(this, msgsender_MSG, msgvalue_MSG);
[L5755]  COND FALSE  !(revert)
[L5758]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4826]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4811]              assume msgsender_MSG != null;
[L4812]              Balance[this] := 0;
[L4826]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4827]  COND FALSE  !(revert)
[L5758]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5759]  COND FALSE  !(revert)
[L5762]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG, supply_s1191);
[L4914]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4826]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4811]              assume msgsender_MSG != null;
[L4812]              Balance[this] := 0;
[L4826]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4827]  COND FALSE  !(revert)
[L4914]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4915]  COND FALSE  !(revert)
[L4918]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, supply_s747);
[L4869]              assume msgsender_MSG != null;
[L4870]              Balance[this] := 0;
[L4871]              _supply_ERC20[this] := 0;
[L4872]              _balances_ERC20[this] := zeroRefintArr();
[L4873]              sum__balances1[this] := 0;
[L4874]              _allowances_ERC20[this] := zeroRefRefintArr();
[L4875]              sum__allowances2[this] := 0;
[L4877]              pebs_s747 := supply_s747;
[L4878]  COND TRUE   DType[this] == DkargoToken
[L4879]  CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, pebs_s747);
[L5283]              __var_24 := null;
[L5284]  COND FALSE  !(!(account_s999 != null))
[L5288]  CALL        call __var_25 := add~uint256~uint256_SafeMath__success(this, this, 0, _supply_ERC20[this], amount_s999);
[L4213]              c_s130 := (a_s130 + b_s130) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4214]  COND TRUE   !(c_s130 >= a_s130)
[L4215]              revert := true;
[L5288]  RET         call __var_25 := add~uint256~uint256_SafeMath__success(this, this, 0, _supply_ERC20[this], amount_s999);
[L5289]  COND TRUE   revert
[L4879]  RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, pebs_s747);
[L4880]  COND TRUE   revert
[L4918]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, supply_s747);
[L4919]  COND TRUE   revert
[L5762]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG, supply_s1191);
[L5763]  COND TRUE   revert
[L2439]  RET         call DkargoToken_DkargoToken__success(this, msgsender_MSG, msgvalue_MSG, name_s1191, symbol_s1191, supply_s1191);
[L2440]              assume !revert && gas >= 0;
[L8447]  RET         call DkargoToken_DkargoToken(this, msgsender_MSG, msgvalue_MSG, name_s1191, symbol_s1191, supply_s1191);
[L8448]              assume !revert && gas >= 0;
[L8451]  CALL        call CorralChoice_DkargoToken(this);
[L8221]              havoc msgsender_MSG;
[L8222]              havoc msgvalue_MSG;
[L8223]              havoc choice;
[L8224]              havoc __ret_0_getDkargoPrefix;
[L8225]              havoc expected_s84;
[L8226]              havoc __ret_0_owner;
[L8227]              havoc __ret_0_isOwner;
[L8228]              havoc __ret_0_count;
[L8229]              havoc __ret_0_head;
[L8230]              havoc __ret_0_tail;
[L8231]              havoc node_s309;
[L8232]              havoc __ret_0_nextOf;
[L8233]              havoc node_s323;
[L8234]              havoc __ret_0_prevOf;
[L8235]              havoc node_s376;
[L8236]              havoc __ret_0_isLinked;
[L8237]              havoc infcid_s625;
[L8238]              havoc __ret_0_supportsInterface;
[L8239]              havoc to_s1257;
[L8240]              havoc value_s1257;
[L8241]              havoc __ret_0_transfer;
[L8242]              havoc spender_s1084;
[L8243]              havoc amount_s1084;
[L8244]              havoc __ret_0_approve;
[L8245]              havoc from_s1311;
[L8246]              havoc to_s1311;
[L8247]              havoc value_s1311;
[L8248]              havoc __ret_0_transferFrom;
[L8249]              havoc __ret_0_totalSupply;
[L8250]              havoc account_s841;
[L8251]              havoc __ret_0_balanceOf;
[L8252]              havoc approver_s857;
[L8253]              havoc spender_s857;
[L8254]              havoc __ret_0_allowance;
[L8255]              havoc spender_s1111;
[L8256]              havoc addedValue_s1111;
[L8257]              havoc __ret_0_increaseAllowance;
[L8258]              havoc spender_s1139;
[L8259]              havoc subtractedValue_s1139;
[L8260]              havoc __ret_0_decreaseAllowance;
[L8261]              havoc name_s1191;
[L8262]              havoc symbol_s1191;
[L8263]              havoc supply_s1191;
[L8264]              havoc amount_s1203;
[L8265]              havoc __ret_0_name;
[L8266]              havoc __ret_0_symbol;
[L8267]              havoc __ret_0_decimals;
[L8268]              havoc tmpNow;
[L8269]              havoc gas;
[L8270]              assume gas > 4000000 && gas <= 8000000;
[L8271]              tmpNow := now;
[L8272]              havoc now;
[L8273]              assume now > tmpNow;
[L8274]              assume msgsender_MSG != null;
[L8275]              assume DType[msgsender_MSG] != DkargoPrefix;
[L8276]              assume DType[msgsender_MSG] != Ownership;
[L8277]              assume DType[msgsender_MSG] != SafeMath;
[L8278]              assume DType[msgsender_MSG] != AddressChain;
[L8279]              assume DType[msgsender_MSG] != IERC165;
[L8280]              assume DType[msgsender_MSG] != ERC165;
[L8281]              assume DType[msgsender_MSG] != IERC20;
[L8282]              assume DType[msgsender_MSG] != ERC20;
[L8283]              assume DType[msgsender_MSG] != ERC20Safe;
[L8284]              assume DType[msgsender_MSG] != DkargoToken;
[L8285]              Alloc[msgsender_MSG] := true;
[L8286]  COND FALSE  !(choice == 23)
[L8292]  COND FALSE  !(choice == 22)
[L8298]  COND FALSE  !(choice == 21)
[L8304]  COND FALSE  !(choice == 20)
[L8310]  COND FALSE  !(choice == 19)
[L8316]  COND FALSE  !(choice == 18)
[L8322]  COND FALSE  !(choice == 17)
[L8328]  COND FALSE  !(choice == 16)
[L8334]  COND FALSE  !(choice == 15)
[L8340]  COND FALSE  !(choice == 14)
[L8346]  COND FALSE  !(choice == 13)
[L8352]  COND TRUE   choice == 12
[L8353]              gas := gas - 21000;
[L8354]  COND TRUE   gas >= 0
[L8355]              assume value_s1257 >= 0 && value_s1257 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8356]              assume msgvalue_MSG == 0;
[L8357]  CALL        call __ret_0_transfer := transfer~address~uint256_DkargoToken(this, msgsender_MSG, msgvalue_MSG, to_s1257, value_s1257);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((p1 != msgsender_MSG && p1 != to_s1257) && msgsender_MSG != to_s1257) && value_s1257 <= _balances_ERC20[this][msgsender_MSG]) && _balances_ERC20[this][to_s1257] + value_s1257 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && value_s1257 >= 0) && value_s1257 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1257] >= 0) && _balances_ERC20[this][to_s1257] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transfer_DkargoToken0 := true;
[L3]                 call_transfer_DkargoToken0 := false;
[L3]                 revert := revert_hold;
[L2562]              havoc __exception;
[L2563]              revert := false;
[L2564]  COND FALSE  !(__exception)
[L2597]  CALL        call __ret_0_ := transfer~address~uint256_DkargoToken__success(this, msgsender_MSG, msgvalue_MSG, to_s1257, value_s1257);
[L5897]  COND TRUE   DType[this] == DkargoToken
[L5898]  CALL        call ret_s1257 := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1257, value_s1257);
[L4998]  COND TRUE   DType[this] == DkargoToken
[L4999]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, recipient_s785, amount_s785);
[L5227]              __var_20 := null;
[L5228]  COND TRUE   !(sender_s956 != null)
[L5229]              revert := true;
[L4999]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, recipient_s785, amount_s785);
[L5000]  COND TRUE   revert
[L5898]  RET         call ret_s1257 := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1257, value_s1257);
[L5899]  COND TRUE   revert
[L2597]  RET         call __ret_0_ := transfer~address~uint256_DkargoToken__success(this, msgsender_MSG, msgvalue_MSG, to_s1257, value_s1257);
[L2598]              assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !(((((((((((__ret_0_ == true && _balances_ERC20[this][msgsender_MSG] == old(_balances_ERC20[this][msgsender_MSG]) - value_s1257) && _balances_ERC20[this][to_s1257] == old(_balances_ERC20[this][to_s1257]) + value_s1257) && _supply_ERC20[this] == old(_supply_ERC20[this])) && _allowances_ERC20[this] == old(_allowances_ERC20[this])) && _balances_ERC20[this][p1] == old(_balances_ERC20[this][p1])) && _name_DkargoToken[this] == old(_name_DkargoToken[this])) && _symbol_DkargoToken[this] == old(_symbol_DkargoToken[this])) && _dkargoPrefix_DkargoPrefix[this] == old(_dkargoPrefix_DkargoPrefix[this])) && _infcs_ERC165[this] == old(_infcs_ERC165[this])) && _slist_AddressChain[this] == old(_slist_AddressChain[this])) && _owner_Ownership[this] == old(_owner_Ownership[this]));
[L3]                 revert := revert_hold;
[L8357]  RET         call __ret_0_transfer := transfer~address~uint256_DkargoToken(this, msgsender_MSG, msgvalue_MSG, to_s1257, value_s1257);
[L8451]  RET         call CorralChoice_DkargoToken(this);

Loop:
[L8451]  CALL        call CorralChoice_DkargoToken(this);
[L8221]              havoc msgsender_MSG;
[L8222]              havoc msgvalue_MSG;
[L8223]              havoc choice;
[L8224]              havoc __ret_0_getDkargoPrefix;
[L8225]              havoc expected_s84;
[L8226]              havoc __ret_0_owner;
[L8227]              havoc __ret_0_isOwner;
[L8228]              havoc __ret_0_count;
[L8229]              havoc __ret_0_head;
[L8230]              havoc __ret_0_tail;
[L8231]              havoc node_s309;
[L8232]              havoc __ret_0_nextOf;
[L8233]              havoc node_s323;
[L8234]              havoc __ret_0_prevOf;
[L8235]              havoc node_s376;
[L8236]              havoc __ret_0_isLinked;
[L8237]              havoc infcid_s625;
[L8238]              havoc __ret_0_supportsInterface;
[L8239]              havoc to_s1257;
[L8240]              havoc value_s1257;
[L8241]              havoc __ret_0_transfer;
[L8242]              havoc spender_s1084;
[L8243]              havoc amount_s1084;
[L8244]              havoc __ret_0_approve;
[L8245]              havoc from_s1311;
[L8246]              havoc to_s1311;
[L8247]              havoc value_s1311;
[L8248]              havoc __ret_0_transferFrom;
[L8249]              havoc __ret_0_totalSupply;
[L8250]              havoc account_s841;
[L8251]              havoc __ret_0_balanceOf;
[L8252]              havoc approver_s857;
[L8253]              havoc spender_s857;
[L8254]              havoc __ret_0_allowance;
[L8255]              havoc spender_s1111;
[L8256]              havoc addedValue_s1111;
[L8257]              havoc __ret_0_increaseAllowance;
[L8258]              havoc spender_s1139;
[L8259]              havoc subtractedValue_s1139;
[L8260]              havoc __ret_0_decreaseAllowance;
[L8261]              havoc name_s1191;
[L8262]              havoc symbol_s1191;
[L8263]              havoc supply_s1191;
[L8264]              havoc amount_s1203;
[L8265]              havoc __ret_0_name;
[L8266]              havoc __ret_0_symbol;
[L8267]              havoc __ret_0_decimals;
[L8268]              havoc tmpNow;
[L8269]              havoc gas;
[L8270]              assume gas > 4000000 && gas <= 8000000;
[L8271]              tmpNow := now;
[L8272]              havoc now;
[L8273]              assume now > tmpNow;
[L8274]              assume msgsender_MSG != null;
[L8275]              assume DType[msgsender_MSG] != DkargoPrefix;
[L8276]              assume DType[msgsender_MSG] != Ownership;
[L8277]              assume DType[msgsender_MSG] != SafeMath;
[L8278]              assume DType[msgsender_MSG] != AddressChain;
[L8279]              assume DType[msgsender_MSG] != IERC165;
[L8280]              assume DType[msgsender_MSG] != ERC165;
[L8281]              assume DType[msgsender_MSG] != IERC20;
[L8282]              assume DType[msgsender_MSG] != ERC20;
[L8283]              assume DType[msgsender_MSG] != ERC20Safe;
[L8284]              assume DType[msgsender_MSG] != DkargoToken;
[L8285]              Alloc[msgsender_MSG] := true;
[L8286]  COND FALSE  !(choice == 23)
[L8292]  COND FALSE  !(choice == 22)
[L8298]  COND FALSE  !(choice == 21)
[L8304]  COND FALSE  !(choice == 20)
[L8310]  COND FALSE  !(choice == 19)
[L8316]  COND FALSE  !(choice == 18)
[L8322]  COND FALSE  !(choice == 17)
[L8328]  COND FALSE  !(choice == 16)
[L8334]  COND FALSE  !(choice == 15)
[L8340]  COND FALSE  !(choice == 14)
[L8346]  COND FALSE  !(choice == 13)
[L8352]  COND TRUE   choice == 12
[L8353]              gas := gas - 21000;
[L8354]  COND TRUE   gas >= 0
[L8355]              assume value_s1257 >= 0 && value_s1257 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8356]              assume msgvalue_MSG == 0;
[L8357]  CALL        call __ret_0_transfer := transfer~address~uint256_DkargoToken(this, msgsender_MSG, msgvalue_MSG, to_s1257, value_s1257);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((p1 != msgsender_MSG && p1 != to_s1257) && msgsender_MSG != to_s1257) && value_s1257 <= _balances_ERC20[this][msgsender_MSG]) && _balances_ERC20[this][to_s1257] + value_s1257 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && value_s1257 >= 0) && value_s1257 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1257] >= 0) && _balances_ERC20[this][to_s1257] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transfer_DkargoToken0 := true;
[L3]                 call_transfer_DkargoToken0 := false;
[L3]                 revert := revert_hold;
[L2562]              havoc __exception;
[L2563]              revert := false;
[L2564]  COND FALSE  !(__exception)
[L2597]  CALL        call __ret_0_ := transfer~address~uint256_DkargoToken__success(this, msgsender_MSG, msgvalue_MSG, to_s1257, value_s1257);
[L5897]  COND TRUE   DType[this] == DkargoToken
[L5898]  CALL        call ret_s1257 := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1257, value_s1257);
[L4998]  COND TRUE   DType[this] == DkargoToken
[L4999]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, recipient_s785, amount_s785);
[L5227]              __var_20 := null;
[L5228]  COND TRUE   !(sender_s956 != null)
[L5229]              revert := true;
[L4999]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, recipient_s785, amount_s785);
[L5000]  COND TRUE   revert
[L5898]  RET         call ret_s1257 := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1257, value_s1257);
[L5899]  COND TRUE   revert
[L2597]  RET         call __ret_0_ := transfer~address~uint256_DkargoToken__success(this, msgsender_MSG, msgvalue_MSG, to_s1257, value_s1257);
[L2598]              assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !(((((((((((__ret_0_ == true && _balances_ERC20[this][msgsender_MSG] == old(_balances_ERC20[this][msgsender_MSG]) - value_s1257) && _balances_ERC20[this][to_s1257] == old(_balances_ERC20[this][to_s1257]) + value_s1257) && _supply_ERC20[this] == old(_supply_ERC20[this])) && _allowances_ERC20[this] == old(_allowances_ERC20[this])) && _balances_ERC20[this][p1] == old(_balances_ERC20[this][p1])) && _name_DkargoToken[this] == old(_name_DkargoToken[this])) && _symbol_DkargoToken[this] == old(_symbol_DkargoToken[this])) && _dkargoPrefix_DkargoPrefix[this] == old(_dkargoPrefix_DkargoPrefix[this])) && _infcs_ERC165[this] == old(_infcs_ERC165[this])) && _slist_AddressChain[this] == old(_slist_AddressChain[this])) && _owner_Ownership[this] == old(_owner_Ownership[this]));
[L3]                 revert := revert_hold;
[L8357]  RET         call __ret_0_transfer := transfer~address~uint256_DkargoToken(this, msgsender_MSG, msgvalue_MSG, to_s1257, value_s1257);
[L8451]  RET         call CorralChoice_DkargoToken(this);

[2020-11-25 14:00:30,292 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 14:00:30,292 INFO  L82        PathProgramCache]: Analyzing trace with hash 2103007950, now seen corresponding path program 1 times
[2020-11-25 14:00:30,293 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 14:00:30,305 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 14:00:30,367 INFO  L134       CoverageAnalysis]: Checked inductivity of 10 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 10 trivial. 0 not checked.
[2020-11-25 14:00:30,367 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 14:00:30,367 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [3] imperfect sequences [] total 3
[2020-11-25 14:00:30,368 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 14:00:30,368 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-11-25 14:00:30,368 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-11-25 14:00:30,368 INFO  L87              Difference]: Start difference. First operand 5197 states and 5989 transitions. cyclomatic complexity: 794 Second operand 3 states.
[2020-11-25 14:00:30,457 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 14:00:30,458 INFO  L93              Difference]: Finished difference Result 5883 states and 6653 transitions.
[2020-11-25 14:00:30,458 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-11-25 14:00:30,458 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 5883 states and 6653 transitions.
[2020-11-25 14:00:30,470 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 14:00:30,486 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 5883 states to 5516 states and 6209 transitions.
[2020-11-25 14:00:30,486 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1197
[2020-11-25 14:00:30,487 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1259
[2020-11-25 14:00:30,487 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 5516 states and 6209 transitions.
[2020-11-25 14:00:30,491 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 14:00:30,492 INFO  L728         BuchiCegarLoop]: Abstraction has 5516 states and 6209 transitions.
[2020-11-25 14:00:30,495 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 5516 states and 6209 transitions.
[2020-11-25 14:00:30,524 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 5516 to 4898.
[2020-11-25 14:00:30,525 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 4898 states.
[2020-11-25 14:00:30,529 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 4898 states to 4898 states and 5429 transitions.
[2020-11-25 14:00:30,529 INFO  L751         BuchiCegarLoop]: Abstraction has 4898 states and 5429 transitions.
[2020-11-25 14:00:30,529 INFO  L631         BuchiCegarLoop]: Abstraction has 4898 states and 5429 transitions.
[2020-11-25 14:00:30,529 INFO  L445         BuchiCegarLoop]: ======== Iteration 5============
[2020-11-25 14:00:30,529 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 4898 states and 5429 transitions.
[2020-11-25 14:00:30,535 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 14:00:30,535 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 14:00:30,535 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 14:00:30,537 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 14:00:30,537 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_transfer_DkargoToken0 := false;
[L3]                 call_transfer_DkargoToken0 := false;
[L3]     CALL        call main();
[L3]                 havoc p1;
[L8441]              assume null == 0;
[L8442]  CALL        call this := FreshRefGenerator__success();
[L3984]              havoc newRef;
[L3985]              assume Alloc[newRef] == false;
[L3986]              Alloc[newRef] := true;
[L3987]              assume newRef != null;
[L8442]  RET         call this := FreshRefGenerator__success();
[L8443]              assume now >= 0;
[L8444]              assume DType[this] == DkargoToken;
[L8445]              assume msgvalue_MSG == 0;
[L8446]              gas := gas - 53000;
[L8447]  CALL        call DkargoToken_DkargoToken(this, msgsender_MSG, msgvalue_MSG, name_s1191, symbol_s1191, supply_s1191);
[L2404]              havoc __exception;
[L2405]              revert := false;
[L2406]  COND FALSE  !(__exception)
[L2439]  CALL        call DkargoToken_DkargoToken__success(this, msgsender_MSG, msgvalue_MSG, name_s1191, symbol_s1191, supply_s1191);
[L5754]  CALL        call Ownership_Ownership__success(this, msgsender_MSG, msgvalue_MSG);
[L4105]  CALL        call Ownership_Ownership_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4087]              assume msgsender_MSG != null;
[L4088]              Balance[this] := 0;
[L4089]              _owner_Ownership[this] := null;
[L4091]              assert { :EventEmitted "OwnershipTransferred_Ownership" } true;
[L4092]              _owner_Ownership[this] := msgsender_MSG;
[L4105]  RET         call Ownership_Ownership_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4106]  COND FALSE  !(revert)
[L5754]  RET         call Ownership_Ownership__success(this, msgsender_MSG, msgvalue_MSG);
[L5755]  COND FALSE  !(revert)
[L5758]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4826]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4811]              assume msgsender_MSG != null;
[L4812]              Balance[this] := 0;
[L4826]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4827]  COND FALSE  !(revert)
[L5758]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5759]  COND FALSE  !(revert)
[L5762]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG, supply_s1191);
[L4914]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4826]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4811]              assume msgsender_MSG != null;
[L4812]              Balance[this] := 0;
[L4826]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4827]  COND FALSE  !(revert)
[L4914]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4915]  COND FALSE  !(revert)
[L4918]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, supply_s747);
[L4869]              assume msgsender_MSG != null;
[L4870]              Balance[this] := 0;
[L4871]              _supply_ERC20[this] := 0;
[L4872]              _balances_ERC20[this] := zeroRefintArr();
[L4873]              sum__balances1[this] := 0;
[L4874]              _allowances_ERC20[this] := zeroRefRefintArr();
[L4875]              sum__allowances2[this] := 0;
[L4877]              pebs_s747 := supply_s747;
[L4878]  COND TRUE   DType[this] == DkargoToken
[L4879]  CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, pebs_s747);
[L5283]              __var_24 := null;
[L5284]  COND FALSE  !(!(account_s999 != null))
[L5288]  CALL        call __var_25 := add~uint256~uint256_SafeMath__success(this, this, 0, _supply_ERC20[this], amount_s999);
[L4213]              c_s130 := (a_s130 + b_s130) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4214]  COND FALSE  !(!(c_s130 >= a_s130))
[L4218]              __ret_0_ := c_s130;
[L5288]  RET         call __var_25 := add~uint256~uint256_SafeMath__success(this, this, 0, _supply_ERC20[this], amount_s999);
[L5289]  COND FALSE  !(revert)
[L5292]              _supply_ERC20[this] := __var_25;
[L5293]  CALL        call __var_26 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s999], amount_s999);
[L4213]              c_s130 := (a_s130 + b_s130) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4214]  COND FALSE  !(!(c_s130 >= a_s130))
[L4218]              __ret_0_ := c_s130;
[L5293]  RET         call __var_26 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s999], amount_s999);
[L5294]  COND FALSE  !(revert)
[L5297]              sum__balances1[this] := sum__balances1[this] - _balances_ERC20[this][account_s999];
[L5298]              _balances_ERC20[this][account_s999] := __var_26;
[L5299]              sum__balances1[this] := sum__balances1[this] + _balances_ERC20[this][account_s999];
[L5300]              assert { :EventEmitted "Transfer_ERC20" } true;
[L4879]  RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, pebs_s747);
[L4880]  COND FALSE  !(revert)
[L4918]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, supply_s747);
[L4919]  COND FALSE  !(revert)
[L5762]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG, supply_s1191);
[L5763]  COND FALSE  !(revert)
[L5766]  CALL        call ERC20Safe_ERC20Safe__success(this, msgsender_MSG, msgvalue_MSG);
[L5382]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4826]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4811]              assume msgsender_MSG != null;
[L4812]              Balance[this] := 0;
[L4826]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4827]  COND FALSE  !(revert)
[L5382]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5383]  COND FALSE  !(revert)
[L5386]  CALL        call ERC20Safe_ERC20Safe_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5363]              assume msgsender_MSG != null;
[L5364]              Balance[this] := 0;
[L5386]  RET         call ERC20Safe_ERC20Safe_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5387]  COND FALSE  !(revert)
[L5766]  RET         call ERC20Safe_ERC20Safe__success(this, msgsender_MSG, msgvalue_MSG);
[L5767]  COND FALSE  !(revert)
[L5770]  CALL        call AddressChain_AddressChain__success(this, msgsender_MSG, msgvalue_MSG);
[L4362]  CALL        call AddressChain_AddressChain_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4341]              assume msgsender_MSG != null;
[L4342]              Balance[this] := 0;
[L4344]  CALL        call __var_3 := FreshRefGenerator__success();
[L3984]              havoc newRef;
[L3985]              assume Alloc[newRef] == false;
[L3986]              Alloc[newRef] := true;
[L3987]              assume newRef != null;
[L4344]  RET         call __var_3 := FreshRefGenerator__success();
[L4345]  COND FALSE  !(revert)
[L4348]              _slist_AddressChain[this] := __var_3;
[L4362]  RET         call AddressChain_AddressChain_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4363]  COND FALSE  !(revert)
[L5770]  RET         call AddressChain_AddressChain__success(this, msgsender_MSG, msgvalue_MSG);
[L5771]  COND FALSE  !(revert)
[L5774]  CALL        call IERC165_IERC165__success(this, msgsender_MSG, msgvalue_MSG);
[L4690]  CALL        call IERC165_IERC165_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4675]              assume msgsender_MSG != null;
[L4676]              Balance[this] := 0;
[L4690]  RET         call IERC165_IERC165_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4691]  COND FALSE  !(revert)
[L5774]  RET         call IERC165_IERC165__success(this, msgsender_MSG, msgvalue_MSG);
[L5775]  COND FALSE  !(revert)
[L5778]  CALL        call ERC165_ERC165__success(this, msgsender_MSG, msgvalue_MSG);
[L4760]  CALL        call IERC165_IERC165__success(this, msgsender_MSG, msgvalue_MSG);
[L4690]  CALL        call IERC165_IERC165_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4675]              assume msgsender_MSG != null;
[L4676]              Balance[this] := 0;
[L4690]  RET         call IERC165_IERC165_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4691]  COND FALSE  !(revert)
[L4760]  RET         call IERC165_IERC165__success(this, msgsender_MSG, msgvalue_MSG);
[L4761]  COND FALSE  !(revert)
[L4764]  CALL        call ERC165_ERC165_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4724]              assume msgsender_MSG != null;
[L4725]              Balance[this] := 0;
[L4726]              _infcs_ERC165[this] := zerointboolArr();
[L4728]              __var_16 := 33540519;
[L4729]  COND TRUE   DType[this] == DkargoToken
[L4730]  CALL        call _registerInterface~bytes4_ERC165__success(this, msgsender_MSG, msgvalue_MSG, 33540519);
[L4793]  COND FALSE  !(!(infcid_s644 != -1))
[L4797]              _infcs_ERC165[this][infcid_s644] := true;
[L4730]  RET         call _registerInterface~bytes4_ERC165__success(this, msgsender_MSG, msgvalue_MSG, 33540519);
[L4731]  COND FALSE  !(revert)
[L4764]  RET         call ERC165_ERC165_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4765]  COND FALSE  !(revert)
[L5778]  RET         call ERC165_ERC165__success(this, msgsender_MSG, msgvalue_MSG);
[L5779]  COND FALSE  !(revert)
[L5782]  CALL        call DkargoPrefix_DkargoPrefix__success(this, msgsender_MSG, msgvalue_MSG);
[L4046]  CALL        call DkargoPrefix_DkargoPrefix_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4030]              assume msgsender_MSG != null;
[L4031]              Balance[this] := 0;
[L4032]              _dkargoPrefix_DkargoPrefix[this] := -1676636045;
[L4046]  RET         call DkargoPrefix_DkargoPrefix_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4047]  COND FALSE  !(revert)
[L5782]  RET         call DkargoPrefix_DkargoPrefix__success(this, msgsender_MSG, msgvalue_MSG);
[L5783]  COND FALSE  !(revert)
[L5786]  CALL        call DkargoToken_DkargoToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1191, symbol_s1191, supply_s1191);
[L5676]              assume msgsender_MSG != null;
[L5677]              Balance[this] := 0;
[L5678]              _name_DkargoToken[this] := -1676636045;
[L5679]              _symbol_DkargoToken[this] := -1676636045;
[L5681]  COND TRUE   DType[this] == DkargoToken
[L5682]  CALL        call _setDkargoPrefix~string_DkargoPrefix__success(this, msgsender_MSG, msgvalue_MSG, 978340553);
[L4071]              _dkargoPrefix_DkargoPrefix[this] := prefix_s21;
[L5682]  RET         call _setDkargoPrefix~string_DkargoPrefix__success(this, msgsender_MSG, msgvalue_MSG, 978340553);
[L5683]  COND FALSE  !(revert)
[L5689]              __var_39 := -1804674067;
[L5690]  COND TRUE   DType[this] == DkargoToken
[L5691]  CALL        call _registerInterface~bytes4_ERC165__success(this, msgsender_MSG, msgvalue_MSG, -1804674067);
[L4793]  COND FALSE  !(!(infcid_s644 != -1))
[L4797]              _infcs_ERC165[this][infcid_s644] := true;
[L5691]  RET         call _registerInterface~bytes4_ERC165__success(this, msgsender_MSG, msgvalue_MSG, -1804674067);
[L5692]  COND FALSE  !(revert)
[L5698]              _name_DkargoToken[this] := name_s1191;
[L5699]              _symbol_DkargoToken[this] := symbol_s1191;
[L5700]  COND TRUE   DType[this] == DkargoToken
[L5701]  CALL        call _linkChain~address_AddressChain__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L4505]              __var_6 := null;
[L4506]  COND FALSE  !(!(node_s455 != null))
[L4510]  COND TRUE   DType[this] == DkargoToken
[L4511]  CALL        call __var_7 := isLinked~address_AddressChain__success(this, msgsender_MSG, msgvalue_MSG, node_s455);
[L4447]  COND TRUE   (count_AddressChain.NodeList[_slist_AddressChain[this]] == 1 && head_AddressChain.NodeList[_slist_AddressChain[this]] == node_s376) && tail_AddressChain.NodeList[_slist_AddressChain[this]] == node_s376
[L4448]              __ret_0_ := true;
[L4511]  RET         call __var_7 := isLinked~address_AddressChain__success(this, msgsender_MSG, msgvalue_MSG, node_s455);
[L4512]  COND FALSE  !(revert)
[L4523]  COND FALSE  !(!!__var_7)
[L4527]  COND TRUE   count_AddressChain.NodeList[_slist_AddressChain[this]] == 0
[L4528]              tail_AddressChain.NodeList[_slist_AddressChain[this]] := node_s455;
[L4529]              head_AddressChain.NodeList[_slist_AddressChain[this]] := node_s455;
[L4535]  CALL        call __var_8 := add~uint256~uint256_SafeMath__success(this, this, 0, count_AddressChain.NodeList[_slist_AddressChain[this]], 1);
[L4213]              c_s130 := (a_s130 + b_s130) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4214]  COND FALSE  !(!(c_s130 >= a_s130))
[L4218]              __ret_0_ := c_s130;
[L4535]  RET         call __var_8 := add~uint256~uint256_SafeMath__success(this, this, 0, count_AddressChain.NodeList[_slist_AddressChain[this]], 1);
[L4536]  COND FALSE  !(revert)
[L4539]              count_AddressChain.NodeList[_slist_AddressChain[this]] := __var_8;
[L4540]              assert { :EventEmitted "AddressChainLinked_AddressChain" } true;
[L5701]  RET         call _linkChain~address_AddressChain__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5702]  COND FALSE  !(revert)
[L5786]  RET         call DkargoToken_DkargoToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1191, symbol_s1191, supply_s1191);
[L5787]  COND FALSE  !(revert)
[L2439]  RET         call DkargoToken_DkargoToken__success(this, msgsender_MSG, msgvalue_MSG, name_s1191, symbol_s1191, supply_s1191);
[L2440]              assume !revert && gas >= 0;
[L8447]  RET         call DkargoToken_DkargoToken(this, msgsender_MSG, msgvalue_MSG, name_s1191, symbol_s1191, supply_s1191);
[L8448]              assume !revert && gas >= 0;
[L8451]  CALL        call CorralChoice_DkargoToken(this);
[L8221]              havoc msgsender_MSG;
[L8222]              havoc msgvalue_MSG;
[L8223]              havoc choice;
[L8224]              havoc __ret_0_getDkargoPrefix;
[L8225]              havoc expected_s84;
[L8226]              havoc __ret_0_owner;
[L8227]              havoc __ret_0_isOwner;
[L8228]              havoc __ret_0_count;
[L8229]              havoc __ret_0_head;
[L8230]              havoc __ret_0_tail;
[L8231]              havoc node_s309;
[L8232]              havoc __ret_0_nextOf;
[L8233]              havoc node_s323;
[L8234]              havoc __ret_0_prevOf;
[L8235]              havoc node_s376;
[L8236]              havoc __ret_0_isLinked;
[L8237]              havoc infcid_s625;
[L8238]              havoc __ret_0_supportsInterface;
[L8239]              havoc to_s1257;
[L8240]              havoc value_s1257;
[L8241]              havoc __ret_0_transfer;
[L8242]              havoc spender_s1084;
[L8243]              havoc amount_s1084;
[L8244]              havoc __ret_0_approve;
[L8245]              havoc from_s1311;
[L8246]              havoc to_s1311;
[L8247]              havoc value_s1311;
[L8248]              havoc __ret_0_transferFrom;
[L8249]              havoc __ret_0_totalSupply;
[L8250]              havoc account_s841;
[L8251]              havoc __ret_0_balanceOf;
[L8252]              havoc approver_s857;
[L8253]              havoc spender_s857;
[L8254]              havoc __ret_0_allowance;
[L8255]              havoc spender_s1111;
[L8256]              havoc addedValue_s1111;
[L8257]              havoc __ret_0_increaseAllowance;
[L8258]              havoc spender_s1139;
[L8259]              havoc subtractedValue_s1139;
[L8260]              havoc __ret_0_decreaseAllowance;
[L8261]              havoc name_s1191;
[L8262]              havoc symbol_s1191;
[L8263]              havoc supply_s1191;
[L8264]              havoc amount_s1203;
[L8265]              havoc __ret_0_name;
[L8266]              havoc __ret_0_symbol;
[L8267]              havoc __ret_0_decimals;
[L8268]              havoc tmpNow;
[L8269]              havoc gas;
[L8270]              assume gas > 4000000 && gas <= 8000000;
[L8271]              tmpNow := now;
[L8272]              havoc now;
[L8273]              assume now > tmpNow;
[L8274]              assume msgsender_MSG != null;
[L8275]              assume DType[msgsender_MSG] != DkargoPrefix;
[L8276]              assume DType[msgsender_MSG] != Ownership;
[L8277]              assume DType[msgsender_MSG] != SafeMath;
[L8278]              assume DType[msgsender_MSG] != AddressChain;
[L8279]              assume DType[msgsender_MSG] != IERC165;
[L8280]              assume DType[msgsender_MSG] != ERC165;
[L8281]              assume DType[msgsender_MSG] != IERC20;
[L8282]              assume DType[msgsender_MSG] != ERC20;
[L8283]              assume DType[msgsender_MSG] != ERC20Safe;
[L8284]              assume DType[msgsender_MSG] != DkargoToken;
[L8285]              Alloc[msgsender_MSG] := true;
[L8286]  COND FALSE  !(choice == 23)
[L8292]  COND FALSE  !(choice == 22)
[L8298]  COND FALSE  !(choice == 21)
[L8304]  COND FALSE  !(choice == 20)
[L8310]  COND FALSE  !(choice == 19)
[L8316]  COND FALSE  !(choice == 18)
[L8322]  COND FALSE  !(choice == 17)
[L8328]  COND FALSE  !(choice == 16)
[L8334]  COND FALSE  !(choice == 15)
[L8340]  COND FALSE  !(choice == 14)
[L8346]  COND FALSE  !(choice == 13)
[L8352]  COND TRUE   choice == 12
[L8353]              gas := gas - 21000;
[L8354]  COND TRUE   gas >= 0
[L8355]              assume value_s1257 >= 0 && value_s1257 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8356]              assume msgvalue_MSG == 0;
[L8357]  CALL        call __ret_0_transfer := transfer~address~uint256_DkargoToken(this, msgsender_MSG, msgvalue_MSG, to_s1257, value_s1257);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((p1 != msgsender_MSG && p1 != to_s1257) && msgsender_MSG != to_s1257) && value_s1257 <= _balances_ERC20[this][msgsender_MSG]) && _balances_ERC20[this][to_s1257] + value_s1257 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && value_s1257 >= 0) && value_s1257 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1257] >= 0) && _balances_ERC20[this][to_s1257] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transfer_DkargoToken0 := true;
[L3]                 call_transfer_DkargoToken0 := false;
[L3]                 revert := revert_hold;
[L2562]              havoc __exception;
[L2563]              revert := false;
[L2564]  COND TRUE   __exception
[L2565]              __tmp__Balance := Balance;
[L2566]              __tmp__DType := DType;
[L2567]              __tmp__Alloc := Alloc;
[L2568]              __tmp__balance_ADDR := balance_ADDR;
[L2569]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L2570]              __tmp__sum := sum;
[L2571]              __tmp__M_int_bool := M_int_bool;
[L2572]              __tmp__sum__infcs0 := sum__infcs0;
[L2573]              __tmp__M_Ref_int := M_Ref_int;
[L2574]              __tmp__sum__balances1 := sum__balances1;
[L2575]              __tmp__alloc__allowances_ERC20_lvl0 := alloc__allowances_ERC20_lvl0;
[L2576]              __tmp__sum__allowances2 := sum__allowances2;
[L2577]              __tmp__Length := Length;
[L2578]              __tmp__now := now;
[L2579]              __tmp___dkargoPrefix_DkargoPrefix := _dkargoPrefix_DkargoPrefix;
[L2580]              __tmp___owner_Ownership := _owner_Ownership;
[L2581]              __tmp__prev_AddressChain.NodeInfo := prev_AddressChain.NodeInfo;
[L2582]              __tmp__next_AddressChain.NodeInfo := next_AddressChain.NodeInfo;
[L2583]              __tmp__count_AddressChain.NodeList := count_AddressChain.NodeList;
[L2584]              __tmp__head_AddressChain.NodeList := head_AddressChain.NodeList;
[L2585]              __tmp__tail_AddressChain.NodeList := tail_AddressChain.NodeList;
[L2586]              __tmp__map_AddressChain.NodeList := map_AddressChain.NodeList;
[L2587]              __tmp___slist_AddressChain := _slist_AddressChain;
[L2588]              __tmp___infcs_ERC165 := _infcs_ERC165;
[L2589]              __tmp___supply_ERC20 := _supply_ERC20;
[L2590]              __tmp___balances_ERC20 := _balances_ERC20;
[L2591]              __tmp___allowances_ERC20 := _allowances_ERC20;
[L2592]              __tmp___name_DkargoToken := _name_DkargoToken;
[L2593]              __tmp___symbol_DkargoToken := _symbol_DkargoToken;
[L2594]  CALL        call __ret_0_ := transfer~address~uint256_DkargoToken__fail(this, msgsender_MSG, msgvalue_MSG, to_s1257, value_s1257);
[L5824]  COND TRUE   __tmp__DType[this] == DkargoToken
[L5825]  CALL        call ret_s1257 := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, to_s1257, value_s1257);
[L4974]  COND TRUE   __tmp__DType[this] == DkargoToken
[L4975]  CALL        call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, recipient_s785, amount_s785);
[L5195]              __var_20 := null;
[L5196]  COND TRUE   !(sender_s956 != null)
[L5197]              revert := true;
[L4975]  RET         call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, recipient_s785, amount_s785);
[L4976]  COND TRUE   revert
[L5825]  RET         call ret_s1257 := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, to_s1257, value_s1257);
[L5826]  COND TRUE   revert
[L2594]  RET         call __ret_0_ := transfer~address~uint256_DkargoToken__fail(this, msgsender_MSG, msgvalue_MSG, to_s1257, value_s1257);
[L2595]              assume revert || gas < 0;
[L8357]  RET         call __ret_0_transfer := transfer~address~uint256_DkargoToken(this, msgsender_MSG, msgvalue_MSG, to_s1257, value_s1257);
[L8451]  RET         call CorralChoice_DkargoToken(this);

Loop:
[L8451]  CALL        call CorralChoice_DkargoToken(this);
[L8221]              havoc msgsender_MSG;
[L8222]              havoc msgvalue_MSG;
[L8223]              havoc choice;
[L8224]              havoc __ret_0_getDkargoPrefix;
[L8225]              havoc expected_s84;
[L8226]              havoc __ret_0_owner;
[L8227]              havoc __ret_0_isOwner;
[L8228]              havoc __ret_0_count;
[L8229]              havoc __ret_0_head;
[L8230]              havoc __ret_0_tail;
[L8231]              havoc node_s309;
[L8232]              havoc __ret_0_nextOf;
[L8233]              havoc node_s323;
[L8234]              havoc __ret_0_prevOf;
[L8235]              havoc node_s376;
[L8236]              havoc __ret_0_isLinked;
[L8237]              havoc infcid_s625;
[L8238]              havoc __ret_0_supportsInterface;
[L8239]              havoc to_s1257;
[L8240]              havoc value_s1257;
[L8241]              havoc __ret_0_transfer;
[L8242]              havoc spender_s1084;
[L8243]              havoc amount_s1084;
[L8244]              havoc __ret_0_approve;
[L8245]              havoc from_s1311;
[L8246]              havoc to_s1311;
[L8247]              havoc value_s1311;
[L8248]              havoc __ret_0_transferFrom;
[L8249]              havoc __ret_0_totalSupply;
[L8250]              havoc account_s841;
[L8251]              havoc __ret_0_balanceOf;
[L8252]              havoc approver_s857;
[L8253]              havoc spender_s857;
[L8254]              havoc __ret_0_allowance;
[L8255]              havoc spender_s1111;
[L8256]              havoc addedValue_s1111;
[L8257]              havoc __ret_0_increaseAllowance;
[L8258]              havoc spender_s1139;
[L8259]              havoc subtractedValue_s1139;
[L8260]              havoc __ret_0_decreaseAllowance;
[L8261]              havoc name_s1191;
[L8262]              havoc symbol_s1191;
[L8263]              havoc supply_s1191;
[L8264]              havoc amount_s1203;
[L8265]              havoc __ret_0_name;
[L8266]              havoc __ret_0_symbol;
[L8267]              havoc __ret_0_decimals;
[L8268]              havoc tmpNow;
[L8269]              havoc gas;
[L8270]              assume gas > 4000000 && gas <= 8000000;
[L8271]              tmpNow := now;
[L8272]              havoc now;
[L8273]              assume now > tmpNow;
[L8274]              assume msgsender_MSG != null;
[L8275]              assume DType[msgsender_MSG] != DkargoPrefix;
[L8276]              assume DType[msgsender_MSG] != Ownership;
[L8277]              assume DType[msgsender_MSG] != SafeMath;
[L8278]              assume DType[msgsender_MSG] != AddressChain;
[L8279]              assume DType[msgsender_MSG] != IERC165;
[L8280]              assume DType[msgsender_MSG] != ERC165;
[L8281]              assume DType[msgsender_MSG] != IERC20;
[L8282]              assume DType[msgsender_MSG] != ERC20;
[L8283]              assume DType[msgsender_MSG] != ERC20Safe;
[L8284]              assume DType[msgsender_MSG] != DkargoToken;
[L8285]              Alloc[msgsender_MSG] := true;
[L8286]  COND FALSE  !(choice == 23)
[L8292]  COND FALSE  !(choice == 22)
[L8298]  COND FALSE  !(choice == 21)
[L8304]  COND FALSE  !(choice == 20)
[L8310]  COND FALSE  !(choice == 19)
[L8316]  COND FALSE  !(choice == 18)
[L8322]  COND FALSE  !(choice == 17)
[L8328]  COND FALSE  !(choice == 16)
[L8334]  COND FALSE  !(choice == 15)
[L8340]  COND FALSE  !(choice == 14)
[L8346]  COND FALSE  !(choice == 13)
[L8352]  COND TRUE   choice == 12
[L8353]              gas := gas - 21000;
[L8354]  COND TRUE   gas >= 0
[L8355]              assume value_s1257 >= 0 && value_s1257 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8356]              assume msgvalue_MSG == 0;
[L8357]  CALL        call __ret_0_transfer := transfer~address~uint256_DkargoToken(this, msgsender_MSG, msgvalue_MSG, to_s1257, value_s1257);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((p1 != msgsender_MSG && p1 != to_s1257) && msgsender_MSG != to_s1257) && value_s1257 <= _balances_ERC20[this][msgsender_MSG]) && _balances_ERC20[this][to_s1257] + value_s1257 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && value_s1257 >= 0) && value_s1257 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1257] >= 0) && _balances_ERC20[this][to_s1257] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transfer_DkargoToken0 := true;
[L3]                 call_transfer_DkargoToken0 := false;
[L3]                 revert := revert_hold;
[L2562]              havoc __exception;
[L2563]              revert := false;
[L2564]  COND TRUE   __exception
[L2565]              __tmp__Balance := Balance;
[L2566]              __tmp__DType := DType;
[L2567]              __tmp__Alloc := Alloc;
[L2568]              __tmp__balance_ADDR := balance_ADDR;
[L2569]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L2570]              __tmp__sum := sum;
[L2571]              __tmp__M_int_bool := M_int_bool;
[L2572]              __tmp__sum__infcs0 := sum__infcs0;
[L2573]              __tmp__M_Ref_int := M_Ref_int;
[L2574]              __tmp__sum__balances1 := sum__balances1;
[L2575]              __tmp__alloc__allowances_ERC20_lvl0 := alloc__allowances_ERC20_lvl0;
[L2576]              __tmp__sum__allowances2 := sum__allowances2;
[L2577]              __tmp__Length := Length;
[L2578]              __tmp__now := now;
[L2579]              __tmp___dkargoPrefix_DkargoPrefix := _dkargoPrefix_DkargoPrefix;
[L2580]              __tmp___owner_Ownership := _owner_Ownership;
[L2581]              __tmp__prev_AddressChain.NodeInfo := prev_AddressChain.NodeInfo;
[L2582]              __tmp__next_AddressChain.NodeInfo := next_AddressChain.NodeInfo;
[L2583]              __tmp__count_AddressChain.NodeList := count_AddressChain.NodeList;
[L2584]              __tmp__head_AddressChain.NodeList := head_AddressChain.NodeList;
[L2585]              __tmp__tail_AddressChain.NodeList := tail_AddressChain.NodeList;
[L2586]              __tmp__map_AddressChain.NodeList := map_AddressChain.NodeList;
[L2587]              __tmp___slist_AddressChain := _slist_AddressChain;
[L2588]              __tmp___infcs_ERC165 := _infcs_ERC165;
[L2589]              __tmp___supply_ERC20 := _supply_ERC20;
[L2590]              __tmp___balances_ERC20 := _balances_ERC20;
[L2591]              __tmp___allowances_ERC20 := _allowances_ERC20;
[L2592]              __tmp___name_DkargoToken := _name_DkargoToken;
[L2593]              __tmp___symbol_DkargoToken := _symbol_DkargoToken;
[L2594]  CALL        call __ret_0_ := transfer~address~uint256_DkargoToken__fail(this, msgsender_MSG, msgvalue_MSG, to_s1257, value_s1257);
[L5824]  COND TRUE   __tmp__DType[this] == DkargoToken
[L5825]  CALL        call ret_s1257 := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, to_s1257, value_s1257);
[L4974]  COND TRUE   __tmp__DType[this] == DkargoToken
[L4975]  CALL        call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, recipient_s785, amount_s785);
[L5195]              __var_20 := null;
[L5196]  COND TRUE   !(sender_s956 != null)
[L5197]              revert := true;
[L4975]  RET         call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, recipient_s785, amount_s785);
[L4976]  COND TRUE   revert
[L5825]  RET         call ret_s1257 := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, to_s1257, value_s1257);
[L5826]  COND TRUE   revert
[L2594]  RET         call __ret_0_ := transfer~address~uint256_DkargoToken__fail(this, msgsender_MSG, msgvalue_MSG, to_s1257, value_s1257);
[L2595]              assume revert || gas < 0;
[L8357]  RET         call __ret_0_transfer := transfer~address~uint256_DkargoToken(this, msgsender_MSG, msgvalue_MSG, to_s1257, value_s1257);
[L8451]  RET         call CorralChoice_DkargoToken(this);

[2020-11-25 14:00:30,542 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 14:00:30,542 INFO  L82        PathProgramCache]: Analyzing trace with hash -76695889, now seen corresponding path program 1 times
[2020-11-25 14:00:30,543 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 14:00:30,560 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 14:00:30,625 INFO  L134       CoverageAnalysis]: Checked inductivity of 65 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 65 trivial. 0 not checked.
[2020-11-25 14:00:30,625 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 14:00:30,625 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [4] imperfect sequences [] total 4
[2020-11-25 14:00:30,625 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 14:00:30,626 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-11-25 14:00:30,626 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=5, Invalid=7, Unknown=0, NotChecked=0, Total=12
[2020-11-25 14:00:30,626 INFO  L87              Difference]: Start difference. First operand 4898 states and 5429 transitions. cyclomatic complexity: 533 Second operand 4 states.
[2020-11-25 14:00:30,649 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 14:00:30,649 INFO  L93              Difference]: Finished difference Result 4912 states and 5457 transitions.
[2020-11-25 14:00:30,649 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 4 states. 
[2020-11-25 14:00:30,650 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 4912 states and 5457 transitions.
[2020-11-25 14:00:30,659 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 14:00:30,671 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 4912 states to 4902 states and 5445 transitions.
[2020-11-25 14:00:30,671 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1097
[2020-11-25 14:00:30,671 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1097
[2020-11-25 14:00:30,672 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 4902 states and 5445 transitions.
[2020-11-25 14:00:30,675 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 14:00:30,675 INFO  L728         BuchiCegarLoop]: Abstraction has 4902 states and 5445 transitions.
[2020-11-25 14:00:30,679 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 4902 states and 5445 transitions.
[2020-11-25 14:00:30,706 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 4902 to 4902.
[2020-11-25 14:00:30,706 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 4902 states.
[2020-11-25 14:00:30,711 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 4902 states to 4902 states and 5445 transitions.
[2020-11-25 14:00:30,711 INFO  L751         BuchiCegarLoop]: Abstraction has 4902 states and 5445 transitions.
[2020-11-25 14:00:30,711 INFO  L631         BuchiCegarLoop]: Abstraction has 4902 states and 5445 transitions.
[2020-11-25 14:00:30,711 INFO  L445         BuchiCegarLoop]: ======== Iteration 6============
[2020-11-25 14:00:30,711 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 4902 states and 5445 transitions.
[2020-11-25 14:00:30,716 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 14:00:30,716 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 14:00:30,716 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 14:00:30,719 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 14:00:30,719 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_transfer_DkargoToken0 := false;
[L3]                 call_transfer_DkargoToken0 := false;
[L3]     CALL        call main();
[L3]                 havoc p1;
[L8441]              assume null == 0;
[L8442]  CALL        call this := FreshRefGenerator__success();
[L3984]              havoc newRef;
[L3985]              assume Alloc[newRef] == false;
[L3986]              Alloc[newRef] := true;
[L3987]              assume newRef != null;
[L8442]  RET         call this := FreshRefGenerator__success();
[L8443]              assume now >= 0;
[L8444]              assume DType[this] == DkargoToken;
[L8445]              assume msgvalue_MSG == 0;
[L8446]              gas := gas - 53000;
[L8447]  CALL        call DkargoToken_DkargoToken(this, msgsender_MSG, msgvalue_MSG, name_s1191, symbol_s1191, supply_s1191);
[L2404]              havoc __exception;
[L2405]              revert := false;
[L2406]  COND FALSE  !(__exception)
[L2439]  CALL        call DkargoToken_DkargoToken__success(this, msgsender_MSG, msgvalue_MSG, name_s1191, symbol_s1191, supply_s1191);
[L5754]  CALL        call Ownership_Ownership__success(this, msgsender_MSG, msgvalue_MSG);
[L4105]  CALL        call Ownership_Ownership_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4087]              assume msgsender_MSG != null;
[L4088]              Balance[this] := 0;
[L4089]              _owner_Ownership[this] := null;
[L4091]              assert { :EventEmitted "OwnershipTransferred_Ownership" } true;
[L4092]              _owner_Ownership[this] := msgsender_MSG;
[L4105]  RET         call Ownership_Ownership_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4106]  COND FALSE  !(revert)
[L5754]  RET         call Ownership_Ownership__success(this, msgsender_MSG, msgvalue_MSG);
[L5755]  COND FALSE  !(revert)
[L5758]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4826]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4811]              assume msgsender_MSG != null;
[L4812]              Balance[this] := 0;
[L4826]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4827]  COND FALSE  !(revert)
[L5758]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5759]  COND FALSE  !(revert)
[L5762]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG, supply_s1191);
[L4914]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4826]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4811]              assume msgsender_MSG != null;
[L4812]              Balance[this] := 0;
[L4826]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4827]  COND FALSE  !(revert)
[L4914]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4915]  COND FALSE  !(revert)
[L4918]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, supply_s747);
[L4869]              assume msgsender_MSG != null;
[L4870]              Balance[this] := 0;
[L4871]              _supply_ERC20[this] := 0;
[L4872]              _balances_ERC20[this] := zeroRefintArr();
[L4873]              sum__balances1[this] := 0;
[L4874]              _allowances_ERC20[this] := zeroRefRefintArr();
[L4875]              sum__allowances2[this] := 0;
[L4877]              pebs_s747 := supply_s747;
[L4878]  COND FALSE  !(DType[this] == DkargoToken)
[L4883]  COND TRUE   DType[this] == ERC20Safe
[L4884]  CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, pebs_s747);
[L5283]              __var_24 := null;
[L5284]  COND FALSE  !(!(account_s999 != null))
[L5288]  CALL        call __var_25 := add~uint256~uint256_SafeMath__success(this, this, 0, _supply_ERC20[this], amount_s999);
[L4213]              c_s130 := (a_s130 + b_s130) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4214]  COND FALSE  !(!(c_s130 >= a_s130))
[L4218]              __ret_0_ := c_s130;
[L5288]  RET         call __var_25 := add~uint256~uint256_SafeMath__success(this, this, 0, _supply_ERC20[this], amount_s999);
[L5289]  COND FALSE  !(revert)
[L5292]              _supply_ERC20[this] := __var_25;
[L5293]  CALL        call __var_26 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s999], amount_s999);
[L4213]              c_s130 := (a_s130 + b_s130) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4214]  COND FALSE  !(!(c_s130 >= a_s130))
[L4218]              __ret_0_ := c_s130;
[L5293]  RET         call __var_26 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s999], amount_s999);
[L5294]  COND FALSE  !(revert)
[L5297]              sum__balances1[this] := sum__balances1[this] - _balances_ERC20[this][account_s999];
[L5298]              _balances_ERC20[this][account_s999] := __var_26;
[L5299]              sum__balances1[this] := sum__balances1[this] + _balances_ERC20[this][account_s999];
[L5300]              assert { :EventEmitted "Transfer_ERC20" } true;
[L4884]  RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, pebs_s747);
[L4885]  COND FALSE  !(revert)
[L4918]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, supply_s747);
[L4919]  COND FALSE  !(revert)
[L5762]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG, supply_s1191);
[L5763]  COND FALSE  !(revert)
[L5766]  CALL        call ERC20Safe_ERC20Safe__success(this, msgsender_MSG, msgvalue_MSG);
[L5382]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4826]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4811]              assume msgsender_MSG != null;
[L4812]              Balance[this] := 0;
[L4826]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4827]  COND FALSE  !(revert)
[L5382]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5383]  COND FALSE  !(revert)
[L5386]  CALL        call ERC20Safe_ERC20Safe_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5363]              assume msgsender_MSG != null;
[L5364]              Balance[this] := 0;
[L5386]  RET         call ERC20Safe_ERC20Safe_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5387]  COND FALSE  !(revert)
[L5766]  RET         call ERC20Safe_ERC20Safe__success(this, msgsender_MSG, msgvalue_MSG);
[L5767]  COND FALSE  !(revert)
[L5770]  CALL        call AddressChain_AddressChain__success(this, msgsender_MSG, msgvalue_MSG);
[L4362]  CALL        call AddressChain_AddressChain_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4341]              assume msgsender_MSG != null;
[L4342]              Balance[this] := 0;
[L4344]  CALL        call __var_3 := FreshRefGenerator__success();
[L3984]              havoc newRef;
[L3985]              assume Alloc[newRef] == false;
[L3986]              Alloc[newRef] := true;
[L3987]              assume newRef != null;
[L4344]  RET         call __var_3 := FreshRefGenerator__success();
[L4345]  COND FALSE  !(revert)
[L4348]              _slist_AddressChain[this] := __var_3;
[L4362]  RET         call AddressChain_AddressChain_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4363]  COND FALSE  !(revert)
[L5770]  RET         call AddressChain_AddressChain__success(this, msgsender_MSG, msgvalue_MSG);
[L5771]  COND FALSE  !(revert)
[L5774]  CALL        call IERC165_IERC165__success(this, msgsender_MSG, msgvalue_MSG);
[L4690]  CALL        call IERC165_IERC165_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4675]              assume msgsender_MSG != null;
[L4676]              Balance[this] := 0;
[L4690]  RET         call IERC165_IERC165_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4691]  COND FALSE  !(revert)
[L5774]  RET         call IERC165_IERC165__success(this, msgsender_MSG, msgvalue_MSG);
[L5775]  COND FALSE  !(revert)
[L5778]  CALL        call ERC165_ERC165__success(this, msgsender_MSG, msgvalue_MSG);
[L4760]  CALL        call IERC165_IERC165__success(this, msgsender_MSG, msgvalue_MSG);
[L4690]  CALL        call IERC165_IERC165_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4675]              assume msgsender_MSG != null;
[L4676]              Balance[this] := 0;
[L4690]  RET         call IERC165_IERC165_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4691]  COND FALSE  !(revert)
[L4760]  RET         call IERC165_IERC165__success(this, msgsender_MSG, msgvalue_MSG);
[L4761]  COND FALSE  !(revert)
[L4764]  CALL        call ERC165_ERC165_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4724]              assume msgsender_MSG != null;
[L4725]              Balance[this] := 0;
[L4726]              _infcs_ERC165[this] := zerointboolArr();
[L4728]              __var_16 := 33540519;
[L4729]  COND TRUE   DType[this] == DkargoToken
[L4730]  CALL        call _registerInterface~bytes4_ERC165__success(this, msgsender_MSG, msgvalue_MSG, 33540519);
[L4793]  COND FALSE  !(!(infcid_s644 != -1))
[L4797]              _infcs_ERC165[this][infcid_s644] := true;
[L4730]  RET         call _registerInterface~bytes4_ERC165__success(this, msgsender_MSG, msgvalue_MSG, 33540519);
[L4731]  COND FALSE  !(revert)
[L4764]  RET         call ERC165_ERC165_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4765]  COND FALSE  !(revert)
[L5778]  RET         call ERC165_ERC165__success(this, msgsender_MSG, msgvalue_MSG);
[L5779]  COND FALSE  !(revert)
[L5782]  CALL        call DkargoPrefix_DkargoPrefix__success(this, msgsender_MSG, msgvalue_MSG);
[L4046]  CALL        call DkargoPrefix_DkargoPrefix_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4030]              assume msgsender_MSG != null;
[L4031]              Balance[this] := 0;
[L4032]              _dkargoPrefix_DkargoPrefix[this] := -1676636045;
[L4046]  RET         call DkargoPrefix_DkargoPrefix_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4047]  COND FALSE  !(revert)
[L5782]  RET         call DkargoPrefix_DkargoPrefix__success(this, msgsender_MSG, msgvalue_MSG);
[L5783]  COND FALSE  !(revert)
[L5786]  CALL        call DkargoToken_DkargoToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1191, symbol_s1191, supply_s1191);
[L5676]              assume msgsender_MSG != null;
[L5677]              Balance[this] := 0;
[L5678]              _name_DkargoToken[this] := -1676636045;
[L5679]              _symbol_DkargoToken[this] := -1676636045;
[L5681]  COND TRUE   DType[this] == DkargoToken
[L5682]  CALL        call _setDkargoPrefix~string_DkargoPrefix__success(this, msgsender_MSG, msgvalue_MSG, 978340553);
[L4071]              _dkargoPrefix_DkargoPrefix[this] := prefix_s21;
[L5682]  RET         call _setDkargoPrefix~string_DkargoPrefix__success(this, msgsender_MSG, msgvalue_MSG, 978340553);
[L5683]  COND FALSE  !(revert)
[L5689]              __var_39 := -1804674067;
[L5690]  COND TRUE   DType[this] == DkargoToken
[L5691]  CALL        call _registerInterface~bytes4_ERC165__success(this, msgsender_MSG, msgvalue_MSG, -1804674067);
[L4793]  COND FALSE  !(!(infcid_s644 != -1))
[L4797]              _infcs_ERC165[this][infcid_s644] := true;
[L5691]  RET         call _registerInterface~bytes4_ERC165__success(this, msgsender_MSG, msgvalue_MSG, -1804674067);
[L5692]  COND FALSE  !(revert)
[L5698]              _name_DkargoToken[this] := name_s1191;
[L5699]              _symbol_DkargoToken[this] := symbol_s1191;
[L5700]  COND TRUE   DType[this] == DkargoToken
[L5701]  CALL        call _linkChain~address_AddressChain__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L4505]              __var_6 := null;
[L4506]  COND FALSE  !(!(node_s455 != null))
[L4510]  COND TRUE   DType[this] == DkargoToken
[L4511]  CALL        call __var_7 := isLinked~address_AddressChain__success(this, msgsender_MSG, msgvalue_MSG, node_s455);
[L4447]  COND FALSE  !((count_AddressChain.NodeList[_slist_AddressChain[this]] == 1 && head_AddressChain.NodeList[_slist_AddressChain[this]] == node_s376) && tail_AddressChain.NodeList[_slist_AddressChain[this]] == node_s376)
[L4451]              __var_4 := null;
[L4452]              __var_5 := null;
[L4453]              __ret_0_ := (if prev_AddressChain.NodeInfo[M_Ref_Ref[map_AddressChain.NodeList[_slist_AddressChain[this]]][node_s376]] == null && next_AddressChain.NodeInfo[M_Ref_Ref[map_AddressChain.NodeList[_slist_AddressChain[this]]][node_s376]] == null then false else true);
[L4511]  RET         call __var_7 := isLinked~address_AddressChain__success(this, msgsender_MSG, msgvalue_MSG, node_s455);
[L4512]  COND FALSE  !(revert)
[L4523]  COND FALSE  !(!!__var_7)
[L4527]  COND TRUE   count_AddressChain.NodeList[_slist_AddressChain[this]] == 0
[L4528]              tail_AddressChain.NodeList[_slist_AddressChain[this]] := node_s455;
[L4529]              head_AddressChain.NodeList[_slist_AddressChain[this]] := node_s455;
[L4535]  CALL        call __var_8 := add~uint256~uint256_SafeMath__success(this, this, 0, count_AddressChain.NodeList[_slist_AddressChain[this]], 1);
[L4213]              c_s130 := (a_s130 + b_s130) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4214]  COND FALSE  !(!(c_s130 >= a_s130))
[L4218]              __ret_0_ := c_s130;
[L4535]  RET         call __var_8 := add~uint256~uint256_SafeMath__success(this, this, 0, count_AddressChain.NodeList[_slist_AddressChain[this]], 1);
[L4536]  COND FALSE  !(revert)
[L4539]              count_AddressChain.NodeList[_slist_AddressChain[this]] := __var_8;
[L4540]              assert { :EventEmitted "AddressChainLinked_AddressChain" } true;
[L5701]  RET         call _linkChain~address_AddressChain__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5702]  COND FALSE  !(revert)
[L5786]  RET         call DkargoToken_DkargoToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1191, symbol_s1191, supply_s1191);
[L5787]  COND FALSE  !(revert)
[L2439]  RET         call DkargoToken_DkargoToken__success(this, msgsender_MSG, msgvalue_MSG, name_s1191, symbol_s1191, supply_s1191);
[L2440]              assume !revert && gas >= 0;
[L8447]  RET         call DkargoToken_DkargoToken(this, msgsender_MSG, msgvalue_MSG, name_s1191, symbol_s1191, supply_s1191);
[L8448]              assume !revert && gas >= 0;
[L8451]  CALL        call CorralChoice_DkargoToken(this);
[L8221]              havoc msgsender_MSG;
[L8222]              havoc msgvalue_MSG;
[L8223]              havoc choice;
[L8224]              havoc __ret_0_getDkargoPrefix;
[L8225]              havoc expected_s84;
[L8226]              havoc __ret_0_owner;
[L8227]              havoc __ret_0_isOwner;
[L8228]              havoc __ret_0_count;
[L8229]              havoc __ret_0_head;
[L8230]              havoc __ret_0_tail;
[L8231]              havoc node_s309;
[L8232]              havoc __ret_0_nextOf;
[L8233]              havoc node_s323;
[L8234]              havoc __ret_0_prevOf;
[L8235]              havoc node_s376;
[L8236]              havoc __ret_0_isLinked;
[L8237]              havoc infcid_s625;
[L8238]              havoc __ret_0_supportsInterface;
[L8239]              havoc to_s1257;
[L8240]              havoc value_s1257;
[L8241]              havoc __ret_0_transfer;
[L8242]              havoc spender_s1084;
[L8243]              havoc amount_s1084;
[L8244]              havoc __ret_0_approve;
[L8245]              havoc from_s1311;
[L8246]              havoc to_s1311;
[L8247]              havoc value_s1311;
[L8248]              havoc __ret_0_transferFrom;
[L8249]              havoc __ret_0_totalSupply;
[L8250]              havoc account_s841;
[L8251]              havoc __ret_0_balanceOf;
[L8252]              havoc approver_s857;
[L8253]              havoc spender_s857;
[L8254]              havoc __ret_0_allowance;
[L8255]              havoc spender_s1111;
[L8256]              havoc addedValue_s1111;
[L8257]              havoc __ret_0_increaseAllowance;
[L8258]              havoc spender_s1139;
[L8259]              havoc subtractedValue_s1139;
[L8260]              havoc __ret_0_decreaseAllowance;
[L8261]              havoc name_s1191;
[L8262]              havoc symbol_s1191;
[L8263]              havoc supply_s1191;
[L8264]              havoc amount_s1203;
[L8265]              havoc __ret_0_name;
[L8266]              havoc __ret_0_symbol;
[L8267]              havoc __ret_0_decimals;
[L8268]              havoc tmpNow;
[L8269]              havoc gas;
[L8270]              assume gas > 4000000 && gas <= 8000000;
[L8271]              tmpNow := now;
[L8272]              havoc now;
[L8273]              assume now > tmpNow;
[L8274]              assume msgsender_MSG != null;
[L8275]              assume DType[msgsender_MSG] != DkargoPrefix;
[L8276]              assume DType[msgsender_MSG] != Ownership;
[L8277]              assume DType[msgsender_MSG] != SafeMath;
[L8278]              assume DType[msgsender_MSG] != AddressChain;
[L8279]              assume DType[msgsender_MSG] != IERC165;
[L8280]              assume DType[msgsender_MSG] != ERC165;
[L8281]              assume DType[msgsender_MSG] != IERC20;
[L8282]              assume DType[msgsender_MSG] != ERC20;
[L8283]              assume DType[msgsender_MSG] != ERC20Safe;
[L8284]              assume DType[msgsender_MSG] != DkargoToken;
[L8285]              Alloc[msgsender_MSG] := true;
[L8286]  COND FALSE  !(choice == 23)
[L8292]  COND FALSE  !(choice == 22)
[L8298]  COND FALSE  !(choice == 21)
[L8304]  COND FALSE  !(choice == 20)
[L8310]  COND FALSE  !(choice == 19)
[L8316]  COND FALSE  !(choice == 18)
[L8322]  COND FALSE  !(choice == 17)
[L8328]  COND FALSE  !(choice == 16)
[L8334]  COND FALSE  !(choice == 15)
[L8340]  COND FALSE  !(choice == 14)
[L8346]  COND FALSE  !(choice == 13)
[L8352]  COND TRUE   choice == 12
[L8353]              gas := gas - 21000;
[L8354]  COND TRUE   gas >= 0
[L8355]              assume value_s1257 >= 0 && value_s1257 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8356]              assume msgvalue_MSG == 0;
[L8357]  CALL        call __ret_0_transfer := transfer~address~uint256_DkargoToken(this, msgsender_MSG, msgvalue_MSG, to_s1257, value_s1257);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((p1 != msgsender_MSG && p1 != to_s1257) && msgsender_MSG != to_s1257) && value_s1257 <= _balances_ERC20[this][msgsender_MSG]) && _balances_ERC20[this][to_s1257] + value_s1257 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && value_s1257 >= 0) && value_s1257 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1257] >= 0) && _balances_ERC20[this][to_s1257] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transfer_DkargoToken0 := true;
[L3]                 call_transfer_DkargoToken0 := false;
[L3]                 revert := revert_hold;
[L2562]              havoc __exception;
[L2563]              revert := false;
[L2564]  COND TRUE   __exception
[L2565]              __tmp__Balance := Balance;
[L2566]              __tmp__DType := DType;
[L2567]              __tmp__Alloc := Alloc;
[L2568]              __tmp__balance_ADDR := balance_ADDR;
[L2569]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L2570]              __tmp__sum := sum;
[L2571]              __tmp__M_int_bool := M_int_bool;
[L2572]              __tmp__sum__infcs0 := sum__infcs0;
[L2573]              __tmp__M_Ref_int := M_Ref_int;
[L2574]              __tmp__sum__balances1 := sum__balances1;
[L2575]              __tmp__alloc__allowances_ERC20_lvl0 := alloc__allowances_ERC20_lvl0;
[L2576]              __tmp__sum__allowances2 := sum__allowances2;
[L2577]              __tmp__Length := Length;
[L2578]              __tmp__now := now;
[L2579]              __tmp___dkargoPrefix_DkargoPrefix := _dkargoPrefix_DkargoPrefix;
[L2580]              __tmp___owner_Ownership := _owner_Ownership;
[L2581]              __tmp__prev_AddressChain.NodeInfo := prev_AddressChain.NodeInfo;
[L2582]              __tmp__next_AddressChain.NodeInfo := next_AddressChain.NodeInfo;
[L2583]              __tmp__count_AddressChain.NodeList := count_AddressChain.NodeList;
[L2584]              __tmp__head_AddressChain.NodeList := head_AddressChain.NodeList;
[L2585]              __tmp__tail_AddressChain.NodeList := tail_AddressChain.NodeList;
[L2586]              __tmp__map_AddressChain.NodeList := map_AddressChain.NodeList;
[L2587]              __tmp___slist_AddressChain := _slist_AddressChain;
[L2588]              __tmp___infcs_ERC165 := _infcs_ERC165;
[L2589]              __tmp___supply_ERC20 := _supply_ERC20;
[L2590]              __tmp___balances_ERC20 := _balances_ERC20;
[L2591]              __tmp___allowances_ERC20 := _allowances_ERC20;
[L2592]              __tmp___name_DkargoToken := _name_DkargoToken;
[L2593]              __tmp___symbol_DkargoToken := _symbol_DkargoToken;
[L2594]  CALL        call __ret_0_ := transfer~address~uint256_DkargoToken__fail(this, msgsender_MSG, msgvalue_MSG, to_s1257, value_s1257);
[L5824]  COND TRUE   __tmp__DType[this] == DkargoToken
[L5825]  CALL        call ret_s1257 := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, to_s1257, value_s1257);
[L4974]  COND TRUE   __tmp__DType[this] == DkargoToken
[L4975]  CALL        call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, recipient_s785, amount_s785);
[L5195]              __var_20 := null;
[L5196]  COND TRUE   !(sender_s956 != null)
[L5197]              revert := true;
[L4975]  RET         call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, recipient_s785, amount_s785);
[L4976]  COND TRUE   revert
[L5825]  RET         call ret_s1257 := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, to_s1257, value_s1257);
[L5826]  COND TRUE   revert
[L2594]  RET         call __ret_0_ := transfer~address~uint256_DkargoToken__fail(this, msgsender_MSG, msgvalue_MSG, to_s1257, value_s1257);
[L2595]              assume revert || gas < 0;
[L8357]  RET         call __ret_0_transfer := transfer~address~uint256_DkargoToken(this, msgsender_MSG, msgvalue_MSG, to_s1257, value_s1257);
[L8451]  RET         call CorralChoice_DkargoToken(this);

Loop:
[L8451]  CALL        call CorralChoice_DkargoToken(this);
[L8221]              havoc msgsender_MSG;
[L8222]              havoc msgvalue_MSG;
[L8223]              havoc choice;
[L8224]              havoc __ret_0_getDkargoPrefix;
[L8225]              havoc expected_s84;
[L8226]              havoc __ret_0_owner;
[L8227]              havoc __ret_0_isOwner;
[L8228]              havoc __ret_0_count;
[L8229]              havoc __ret_0_head;
[L8230]              havoc __ret_0_tail;
[L8231]              havoc node_s309;
[L8232]              havoc __ret_0_nextOf;
[L8233]              havoc node_s323;
[L8234]              havoc __ret_0_prevOf;
[L8235]              havoc node_s376;
[L8236]              havoc __ret_0_isLinked;
[L8237]              havoc infcid_s625;
[L8238]              havoc __ret_0_supportsInterface;
[L8239]              havoc to_s1257;
[L8240]              havoc value_s1257;
[L8241]              havoc __ret_0_transfer;
[L8242]              havoc spender_s1084;
[L8243]              havoc amount_s1084;
[L8244]              havoc __ret_0_approve;
[L8245]              havoc from_s1311;
[L8246]              havoc to_s1311;
[L8247]              havoc value_s1311;
[L8248]              havoc __ret_0_transferFrom;
[L8249]              havoc __ret_0_totalSupply;
[L8250]              havoc account_s841;
[L8251]              havoc __ret_0_balanceOf;
[L8252]              havoc approver_s857;
[L8253]              havoc spender_s857;
[L8254]              havoc __ret_0_allowance;
[L8255]              havoc spender_s1111;
[L8256]              havoc addedValue_s1111;
[L8257]              havoc __ret_0_increaseAllowance;
[L8258]              havoc spender_s1139;
[L8259]              havoc subtractedValue_s1139;
[L8260]              havoc __ret_0_decreaseAllowance;
[L8261]              havoc name_s1191;
[L8262]              havoc symbol_s1191;
[L8263]              havoc supply_s1191;
[L8264]              havoc amount_s1203;
[L8265]              havoc __ret_0_name;
[L8266]              havoc __ret_0_symbol;
[L8267]              havoc __ret_0_decimals;
[L8268]              havoc tmpNow;
[L8269]              havoc gas;
[L8270]              assume gas > 4000000 && gas <= 8000000;
[L8271]              tmpNow := now;
[L8272]              havoc now;
[L8273]              assume now > tmpNow;
[L8274]              assume msgsender_MSG != null;
[L8275]              assume DType[msgsender_MSG] != DkargoPrefix;
[L8276]              assume DType[msgsender_MSG] != Ownership;
[L8277]              assume DType[msgsender_MSG] != SafeMath;
[L8278]              assume DType[msgsender_MSG] != AddressChain;
[L8279]              assume DType[msgsender_MSG] != IERC165;
[L8280]              assume DType[msgsender_MSG] != ERC165;
[L8281]              assume DType[msgsender_MSG] != IERC20;
[L8282]              assume DType[msgsender_MSG] != ERC20;
[L8283]              assume DType[msgsender_MSG] != ERC20Safe;
[L8284]              assume DType[msgsender_MSG] != DkargoToken;
[L8285]              Alloc[msgsender_MSG] := true;
[L8286]  COND FALSE  !(choice == 23)
[L8292]  COND FALSE  !(choice == 22)
[L8298]  COND FALSE  !(choice == 21)
[L8304]  COND FALSE  !(choice == 20)
[L8310]  COND FALSE  !(choice == 19)
[L8316]  COND FALSE  !(choice == 18)
[L8322]  COND FALSE  !(choice == 17)
[L8328]  COND FALSE  !(choice == 16)
[L8334]  COND FALSE  !(choice == 15)
[L8340]  COND FALSE  !(choice == 14)
[L8346]  COND FALSE  !(choice == 13)
[L8352]  COND TRUE   choice == 12
[L8353]              gas := gas - 21000;
[L8354]  COND TRUE   gas >= 0
[L8355]              assume value_s1257 >= 0 && value_s1257 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8356]              assume msgvalue_MSG == 0;
[L8357]  CALL        call __ret_0_transfer := transfer~address~uint256_DkargoToken(this, msgsender_MSG, msgvalue_MSG, to_s1257, value_s1257);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((p1 != msgsender_MSG && p1 != to_s1257) && msgsender_MSG != to_s1257) && value_s1257 <= _balances_ERC20[this][msgsender_MSG]) && _balances_ERC20[this][to_s1257] + value_s1257 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && value_s1257 >= 0) && value_s1257 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1257] >= 0) && _balances_ERC20[this][to_s1257] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transfer_DkargoToken0 := true;
[L3]                 call_transfer_DkargoToken0 := false;
[L3]                 revert := revert_hold;
[L2562]              havoc __exception;
[L2563]              revert := false;
[L2564]  COND TRUE   __exception
[L2565]              __tmp__Balance := Balance;
[L2566]              __tmp__DType := DType;
[L2567]              __tmp__Alloc := Alloc;
[L2568]              __tmp__balance_ADDR := balance_ADDR;
[L2569]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L2570]              __tmp__sum := sum;
[L2571]              __tmp__M_int_bool := M_int_bool;
[L2572]              __tmp__sum__infcs0 := sum__infcs0;
[L2573]              __tmp__M_Ref_int := M_Ref_int;
[L2574]              __tmp__sum__balances1 := sum__balances1;
[L2575]              __tmp__alloc__allowances_ERC20_lvl0 := alloc__allowances_ERC20_lvl0;
[L2576]              __tmp__sum__allowances2 := sum__allowances2;
[L2577]              __tmp__Length := Length;
[L2578]              __tmp__now := now;
[L2579]              __tmp___dkargoPrefix_DkargoPrefix := _dkargoPrefix_DkargoPrefix;
[L2580]              __tmp___owner_Ownership := _owner_Ownership;
[L2581]              __tmp__prev_AddressChain.NodeInfo := prev_AddressChain.NodeInfo;
[L2582]              __tmp__next_AddressChain.NodeInfo := next_AddressChain.NodeInfo;
[L2583]              __tmp__count_AddressChain.NodeList := count_AddressChain.NodeList;
[L2584]              __tmp__head_AddressChain.NodeList := head_AddressChain.NodeList;
[L2585]              __tmp__tail_AddressChain.NodeList := tail_AddressChain.NodeList;
[L2586]              __tmp__map_AddressChain.NodeList := map_AddressChain.NodeList;
[L2587]              __tmp___slist_AddressChain := _slist_AddressChain;
[L2588]              __tmp___infcs_ERC165 := _infcs_ERC165;
[L2589]              __tmp___supply_ERC20 := _supply_ERC20;
[L2590]              __tmp___balances_ERC20 := _balances_ERC20;
[L2591]              __tmp___allowances_ERC20 := _allowances_ERC20;
[L2592]              __tmp___name_DkargoToken := _name_DkargoToken;
[L2593]              __tmp___symbol_DkargoToken := _symbol_DkargoToken;
[L2594]  CALL        call __ret_0_ := transfer~address~uint256_DkargoToken__fail(this, msgsender_MSG, msgvalue_MSG, to_s1257, value_s1257);
[L5824]  COND TRUE   __tmp__DType[this] == DkargoToken
[L5825]  CALL        call ret_s1257 := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, to_s1257, value_s1257);
[L4974]  COND TRUE   __tmp__DType[this] == DkargoToken
[L4975]  CALL        call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, recipient_s785, amount_s785);
[L5195]              __var_20 := null;
[L5196]  COND TRUE   !(sender_s956 != null)
[L5197]              revert := true;
[L4975]  RET         call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, recipient_s785, amount_s785);
[L4976]  COND TRUE   revert
[L5825]  RET         call ret_s1257 := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, to_s1257, value_s1257);
[L5826]  COND TRUE   revert
[L2594]  RET         call __ret_0_ := transfer~address~uint256_DkargoToken__fail(this, msgsender_MSG, msgvalue_MSG, to_s1257, value_s1257);
[L2595]              assume revert || gas < 0;
[L8357]  RET         call __ret_0_transfer := transfer~address~uint256_DkargoToken(this, msgsender_MSG, msgvalue_MSG, to_s1257, value_s1257);
[L8451]  RET         call CorralChoice_DkargoToken(this);

[2020-11-25 14:00:30,724 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 14:00:30,724 INFO  L82        PathProgramCache]: Analyzing trace with hash 2036494409, now seen corresponding path program 1 times
[2020-11-25 14:00:30,725 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 14:00:30,737 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 14:00:30,826 INFO  L134       CoverageAnalysis]: Checked inductivity of 65 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 65 trivial. 0 not checked.
[2020-11-25 14:00:30,826 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 14:00:30,827 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [7] imperfect sequences [] total 7
[2020-11-25 14:00:30,827 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 14:00:30,828 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 7 interpolants.
[2020-11-25 14:00:30,828 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=11, Invalid=31, Unknown=0, NotChecked=0, Total=42
[2020-11-25 14:00:30,828 INFO  L87              Difference]: Start difference. First operand 4902 states and 5445 transitions. cyclomatic complexity: 545 Second operand 7 states.
[2020-11-25 14:00:30,937 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 14:00:30,937 INFO  L93              Difference]: Finished difference Result 4934 states and 5482 transitions.
[2020-11-25 14:00:30,937 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 7 states. 
[2020-11-25 14:00:30,937 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 4934 states and 5482 transitions.
[2020-11-25 14:00:30,947 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 14:00:30,961 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 4934 states to 4892 states and 5431 transitions.
[2020-11-25 14:00:30,961 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1097
[2020-11-25 14:00:30,962 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1097
[2020-11-25 14:00:30,962 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 4892 states and 5431 transitions.
[2020-11-25 14:00:30,965 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 14:00:30,965 INFO  L728         BuchiCegarLoop]: Abstraction has 4892 states and 5431 transitions.
[2020-11-25 14:00:30,969 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 4892 states and 5431 transitions.
[2020-11-25 14:00:31,000 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 4892 to 4892.
[2020-11-25 14:00:31,000 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 4892 states.
[2020-11-25 14:00:31,005 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 4892 states to 4892 states and 5431 transitions.
[2020-11-25 14:00:31,005 INFO  L751         BuchiCegarLoop]: Abstraction has 4892 states and 5431 transitions.
[2020-11-25 14:00:31,005 INFO  L631         BuchiCegarLoop]: Abstraction has 4892 states and 5431 transitions.
[2020-11-25 14:00:31,005 INFO  L445         BuchiCegarLoop]: ======== Iteration 7============
[2020-11-25 14:00:31,005 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 4892 states and 5431 transitions.
[2020-11-25 14:00:31,011 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 14:00:31,011 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 14:00:31,011 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 14:00:31,012 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 14:00:31,012 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_transfer_DkargoToken0 := false;
[L3]                 call_transfer_DkargoToken0 := false;
[L3]     CALL        call main();
[L3]                 havoc p1;
[L8441]              assume null == 0;
[L8442]  CALL        call this := FreshRefGenerator__success();
[L3984]              havoc newRef;
[L3985]              assume Alloc[newRef] == false;
[L3986]              Alloc[newRef] := true;
[L3987]              assume newRef != null;
[L8442]  RET         call this := FreshRefGenerator__success();
[L8443]              assume now >= 0;
[L8444]              assume DType[this] == DkargoToken;
[L8445]              assume msgvalue_MSG == 0;
[L8446]              gas := gas - 53000;
[L8447]  CALL        call DkargoToken_DkargoToken(this, msgsender_MSG, msgvalue_MSG, name_s1191, symbol_s1191, supply_s1191);
[L2404]              havoc __exception;
[L2405]              revert := false;
[L2406]  COND FALSE  !(__exception)
[L2439]  CALL        call DkargoToken_DkargoToken__success(this, msgsender_MSG, msgvalue_MSG, name_s1191, symbol_s1191, supply_s1191);
[L5754]  CALL        call Ownership_Ownership__success(this, msgsender_MSG, msgvalue_MSG);
[L4105]  CALL        call Ownership_Ownership_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4087]              assume msgsender_MSG != null;
[L4088]              Balance[this] := 0;
[L4089]              _owner_Ownership[this] := null;
[L4091]              assert { :EventEmitted "OwnershipTransferred_Ownership" } true;
[L4092]              _owner_Ownership[this] := msgsender_MSG;
[L4105]  RET         call Ownership_Ownership_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4106]  COND FALSE  !(revert)
[L5754]  RET         call Ownership_Ownership__success(this, msgsender_MSG, msgvalue_MSG);
[L5755]  COND FALSE  !(revert)
[L5758]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4826]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4811]              assume msgsender_MSG != null;
[L4812]              Balance[this] := 0;
[L4826]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4827]  COND FALSE  !(revert)
[L5758]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5759]  COND FALSE  !(revert)
[L5762]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG, supply_s1191);
[L4914]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4826]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4811]              assume msgsender_MSG != null;
[L4812]              Balance[this] := 0;
[L4826]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4827]  COND FALSE  !(revert)
[L4914]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4915]  COND FALSE  !(revert)
[L4918]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, supply_s747);
[L4869]              assume msgsender_MSG != null;
[L4870]              Balance[this] := 0;
[L4871]              _supply_ERC20[this] := 0;
[L4872]              _balances_ERC20[this] := zeroRefintArr();
[L4873]              sum__balances1[this] := 0;
[L4874]              _allowances_ERC20[this] := zeroRefRefintArr();
[L4875]              sum__allowances2[this] := 0;
[L4877]              pebs_s747 := supply_s747;
[L4878]  COND TRUE   DType[this] == DkargoToken
[L4879]  CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, pebs_s747);
[L5283]              __var_24 := null;
[L5284]  COND FALSE  !(!(account_s999 != null))
[L5288]  CALL        call __var_25 := add~uint256~uint256_SafeMath__success(this, this, 0, _supply_ERC20[this], amount_s999);
[L4213]              c_s130 := (a_s130 + b_s130) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4214]  COND FALSE  !(!(c_s130 >= a_s130))
[L4218]              __ret_0_ := c_s130;
[L5288]  RET         call __var_25 := add~uint256~uint256_SafeMath__success(this, this, 0, _supply_ERC20[this], amount_s999);
[L5289]  COND FALSE  !(revert)
[L5292]              _supply_ERC20[this] := __var_25;
[L5293]  CALL        call __var_26 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s999], amount_s999);
[L4213]              c_s130 := (a_s130 + b_s130) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4214]  COND FALSE  !(!(c_s130 >= a_s130))
[L4218]              __ret_0_ := c_s130;
[L5293]  RET         call __var_26 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s999], amount_s999);
[L5294]  COND FALSE  !(revert)
[L5297]              sum__balances1[this] := sum__balances1[this] - _balances_ERC20[this][account_s999];
[L5298]              _balances_ERC20[this][account_s999] := __var_26;
[L5299]              sum__balances1[this] := sum__balances1[this] + _balances_ERC20[this][account_s999];
[L5300]              assert { :EventEmitted "Transfer_ERC20" } true;
[L4879]  RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, pebs_s747);
[L4880]  COND FALSE  !(revert)
[L4918]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, supply_s747);
[L4919]  COND FALSE  !(revert)
[L5762]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG, supply_s1191);
[L5763]  COND FALSE  !(revert)
[L5766]  CALL        call ERC20Safe_ERC20Safe__success(this, msgsender_MSG, msgvalue_MSG);
[L5382]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4826]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4811]              assume msgsender_MSG != null;
[L4812]              Balance[this] := 0;
[L4826]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4827]  COND FALSE  !(revert)
[L5382]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5383]  COND FALSE  !(revert)
[L5386]  CALL        call ERC20Safe_ERC20Safe_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5363]              assume msgsender_MSG != null;
[L5364]              Balance[this] := 0;
[L5386]  RET         call ERC20Safe_ERC20Safe_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5387]  COND FALSE  !(revert)
[L5766]  RET         call ERC20Safe_ERC20Safe__success(this, msgsender_MSG, msgvalue_MSG);
[L5767]  COND FALSE  !(revert)
[L5770]  CALL        call AddressChain_AddressChain__success(this, msgsender_MSG, msgvalue_MSG);
[L4362]  CALL        call AddressChain_AddressChain_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4341]              assume msgsender_MSG != null;
[L4342]              Balance[this] := 0;
[L4344]  CALL        call __var_3 := FreshRefGenerator__success();
[L3984]              havoc newRef;
[L3985]              assume Alloc[newRef] == false;
[L3986]              Alloc[newRef] := true;
[L3987]              assume newRef != null;
[L4344]  RET         call __var_3 := FreshRefGenerator__success();
[L4345]  COND FALSE  !(revert)
[L4348]              _slist_AddressChain[this] := __var_3;
[L4362]  RET         call AddressChain_AddressChain_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4363]  COND FALSE  !(revert)
[L5770]  RET         call AddressChain_AddressChain__success(this, msgsender_MSG, msgvalue_MSG);
[L5771]  COND FALSE  !(revert)
[L5774]  CALL        call IERC165_IERC165__success(this, msgsender_MSG, msgvalue_MSG);
[L4690]  CALL        call IERC165_IERC165_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4675]              assume msgsender_MSG != null;
[L4676]              Balance[this] := 0;
[L4690]  RET         call IERC165_IERC165_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4691]  COND FALSE  !(revert)
[L5774]  RET         call IERC165_IERC165__success(this, msgsender_MSG, msgvalue_MSG);
[L5775]  COND FALSE  !(revert)
[L5778]  CALL        call ERC165_ERC165__success(this, msgsender_MSG, msgvalue_MSG);
[L4760]  CALL        call IERC165_IERC165__success(this, msgsender_MSG, msgvalue_MSG);
[L4690]  CALL        call IERC165_IERC165_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4675]              assume msgsender_MSG != null;
[L4676]              Balance[this] := 0;
[L4690]  RET         call IERC165_IERC165_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4691]  COND FALSE  !(revert)
[L4760]  RET         call IERC165_IERC165__success(this, msgsender_MSG, msgvalue_MSG);
[L4761]  COND FALSE  !(revert)
[L4764]  CALL        call ERC165_ERC165_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4724]              assume msgsender_MSG != null;
[L4725]              Balance[this] := 0;
[L4726]              _infcs_ERC165[this] := zerointboolArr();
[L4728]              __var_16 := 33540519;
[L4729]  COND TRUE   DType[this] == DkargoToken
[L4730]  CALL        call _registerInterface~bytes4_ERC165__success(this, msgsender_MSG, msgvalue_MSG, 33540519);
[L4793]  COND FALSE  !(!(infcid_s644 != -1))
[L4797]              _infcs_ERC165[this][infcid_s644] := true;
[L4730]  RET         call _registerInterface~bytes4_ERC165__success(this, msgsender_MSG, msgvalue_MSG, 33540519);
[L4731]  COND FALSE  !(revert)
[L4764]  RET         call ERC165_ERC165_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4765]  COND FALSE  !(revert)
[L5778]  RET         call ERC165_ERC165__success(this, msgsender_MSG, msgvalue_MSG);
[L5779]  COND FALSE  !(revert)
[L5782]  CALL        call DkargoPrefix_DkargoPrefix__success(this, msgsender_MSG, msgvalue_MSG);
[L4046]  CALL        call DkargoPrefix_DkargoPrefix_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4030]              assume msgsender_MSG != null;
[L4031]              Balance[this] := 0;
[L4032]              _dkargoPrefix_DkargoPrefix[this] := -1676636045;
[L4046]  RET         call DkargoPrefix_DkargoPrefix_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4047]  COND FALSE  !(revert)
[L5782]  RET         call DkargoPrefix_DkargoPrefix__success(this, msgsender_MSG, msgvalue_MSG);
[L5783]  COND FALSE  !(revert)
[L5786]  CALL        call DkargoToken_DkargoToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1191, symbol_s1191, supply_s1191);
[L5676]              assume msgsender_MSG != null;
[L5677]              Balance[this] := 0;
[L5678]              _name_DkargoToken[this] := -1676636045;
[L5679]              _symbol_DkargoToken[this] := -1676636045;
[L5681]  COND TRUE   DType[this] == DkargoToken
[L5682]  CALL        call _setDkargoPrefix~string_DkargoPrefix__success(this, msgsender_MSG, msgvalue_MSG, 978340553);
[L4071]              _dkargoPrefix_DkargoPrefix[this] := prefix_s21;
[L5682]  RET         call _setDkargoPrefix~string_DkargoPrefix__success(this, msgsender_MSG, msgvalue_MSG, 978340553);
[L5683]  COND FALSE  !(revert)
[L5689]              __var_39 := -1804674067;
[L5690]  COND TRUE   DType[this] == DkargoToken
[L5691]  CALL        call _registerInterface~bytes4_ERC165__success(this, msgsender_MSG, msgvalue_MSG, -1804674067);
[L4793]  COND FALSE  !(!(infcid_s644 != -1))
[L4797]              _infcs_ERC165[this][infcid_s644] := true;
[L5691]  RET         call _registerInterface~bytes4_ERC165__success(this, msgsender_MSG, msgvalue_MSG, -1804674067);
[L5692]  COND FALSE  !(revert)
[L5698]              _name_DkargoToken[this] := name_s1191;
[L5699]              _symbol_DkargoToken[this] := symbol_s1191;
[L5700]  COND TRUE   DType[this] == DkargoToken
[L5701]  CALL        call _linkChain~address_AddressChain__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L4505]              __var_6 := null;
[L4506]  COND FALSE  !(!(node_s455 != null))
[L4510]  COND TRUE   DType[this] == DkargoToken
[L4511]  CALL        call __var_7 := isLinked~address_AddressChain__success(this, msgsender_MSG, msgvalue_MSG, node_s455);
[L4447]  COND FALSE  !((count_AddressChain.NodeList[_slist_AddressChain[this]] == 1 && head_AddressChain.NodeList[_slist_AddressChain[this]] == node_s376) && tail_AddressChain.NodeList[_slist_AddressChain[this]] == node_s376)
[L4451]              __var_4 := null;
[L4452]              __var_5 := null;
[L4453]              __ret_0_ := (if prev_AddressChain.NodeInfo[M_Ref_Ref[map_AddressChain.NodeList[_slist_AddressChain[this]]][node_s376]] == null && next_AddressChain.NodeInfo[M_Ref_Ref[map_AddressChain.NodeList[_slist_AddressChain[this]]][node_s376]] == null then false else true);
[L4511]  RET         call __var_7 := isLinked~address_AddressChain__success(this, msgsender_MSG, msgvalue_MSG, node_s455);
[L4512]  COND FALSE  !(revert)
[L4523]  COND FALSE  !(!!__var_7)
[L4527]  COND TRUE   count_AddressChain.NodeList[_slist_AddressChain[this]] == 0
[L4528]              tail_AddressChain.NodeList[_slist_AddressChain[this]] := node_s455;
[L4529]              head_AddressChain.NodeList[_slist_AddressChain[this]] := node_s455;
[L4535]  CALL        call __var_8 := add~uint256~uint256_SafeMath__success(this, this, 0, count_AddressChain.NodeList[_slist_AddressChain[this]], 1);
[L4213]              c_s130 := (a_s130 + b_s130) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4214]  COND FALSE  !(!(c_s130 >= a_s130))
[L4218]              __ret_0_ := c_s130;
[L4535]  RET         call __var_8 := add~uint256~uint256_SafeMath__success(this, this, 0, count_AddressChain.NodeList[_slist_AddressChain[this]], 1);
[L4536]  COND FALSE  !(revert)
[L4539]              count_AddressChain.NodeList[_slist_AddressChain[this]] := __var_8;
[L4540]              assert { :EventEmitted "AddressChainLinked_AddressChain" } true;
[L5701]  RET         call _linkChain~address_AddressChain__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5702]  COND FALSE  !(revert)
[L5786]  RET         call DkargoToken_DkargoToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1191, symbol_s1191, supply_s1191);
[L5787]  COND FALSE  !(revert)
[L2439]  RET         call DkargoToken_DkargoToken__success(this, msgsender_MSG, msgvalue_MSG, name_s1191, symbol_s1191, supply_s1191);
[L2440]              assume !revert && gas >= 0;
[L8447]  RET         call DkargoToken_DkargoToken(this, msgsender_MSG, msgvalue_MSG, name_s1191, symbol_s1191, supply_s1191);
[L8448]              assume !revert && gas >= 0;
[L8451]  CALL        call CorralChoice_DkargoToken(this);
[L8221]              havoc msgsender_MSG;
[L8222]              havoc msgvalue_MSG;
[L8223]              havoc choice;
[L8224]              havoc __ret_0_getDkargoPrefix;
[L8225]              havoc expected_s84;
[L8226]              havoc __ret_0_owner;
[L8227]              havoc __ret_0_isOwner;
[L8228]              havoc __ret_0_count;
[L8229]              havoc __ret_0_head;
[L8230]              havoc __ret_0_tail;
[L8231]              havoc node_s309;
[L8232]              havoc __ret_0_nextOf;
[L8233]              havoc node_s323;
[L8234]              havoc __ret_0_prevOf;
[L8235]              havoc node_s376;
[L8236]              havoc __ret_0_isLinked;
[L8237]              havoc infcid_s625;
[L8238]              havoc __ret_0_supportsInterface;
[L8239]              havoc to_s1257;
[L8240]              havoc value_s1257;
[L8241]              havoc __ret_0_transfer;
[L8242]              havoc spender_s1084;
[L8243]              havoc amount_s1084;
[L8244]              havoc __ret_0_approve;
[L8245]              havoc from_s1311;
[L8246]              havoc to_s1311;
[L8247]              havoc value_s1311;
[L8248]              havoc __ret_0_transferFrom;
[L8249]              havoc __ret_0_totalSupply;
[L8250]              havoc account_s841;
[L8251]              havoc __ret_0_balanceOf;
[L8252]              havoc approver_s857;
[L8253]              havoc spender_s857;
[L8254]              havoc __ret_0_allowance;
[L8255]              havoc spender_s1111;
[L8256]              havoc addedValue_s1111;
[L8257]              havoc __ret_0_increaseAllowance;
[L8258]              havoc spender_s1139;
[L8259]              havoc subtractedValue_s1139;
[L8260]              havoc __ret_0_decreaseAllowance;
[L8261]              havoc name_s1191;
[L8262]              havoc symbol_s1191;
[L8263]              havoc supply_s1191;
[L8264]              havoc amount_s1203;
[L8265]              havoc __ret_0_name;
[L8266]              havoc __ret_0_symbol;
[L8267]              havoc __ret_0_decimals;
[L8268]              havoc tmpNow;
[L8269]              havoc gas;
[L8270]              assume gas > 4000000 && gas <= 8000000;
[L8271]              tmpNow := now;
[L8272]              havoc now;
[L8273]              assume now > tmpNow;
[L8274]              assume msgsender_MSG != null;
[L8275]              assume DType[msgsender_MSG] != DkargoPrefix;
[L8276]              assume DType[msgsender_MSG] != Ownership;
[L8277]              assume DType[msgsender_MSG] != SafeMath;
[L8278]              assume DType[msgsender_MSG] != AddressChain;
[L8279]              assume DType[msgsender_MSG] != IERC165;
[L8280]              assume DType[msgsender_MSG] != ERC165;
[L8281]              assume DType[msgsender_MSG] != IERC20;
[L8282]              assume DType[msgsender_MSG] != ERC20;
[L8283]              assume DType[msgsender_MSG] != ERC20Safe;
[L8284]              assume DType[msgsender_MSG] != DkargoToken;
[L8285]              Alloc[msgsender_MSG] := true;
[L8286]  COND FALSE  !(choice == 23)
[L8292]  COND FALSE  !(choice == 22)
[L8298]  COND FALSE  !(choice == 21)
[L8304]  COND FALSE  !(choice == 20)
[L8310]  COND FALSE  !(choice == 19)
[L8316]  COND FALSE  !(choice == 18)
[L8322]  COND FALSE  !(choice == 17)
[L8328]  COND FALSE  !(choice == 16)
[L8334]  COND FALSE  !(choice == 15)
[L8340]  COND FALSE  !(choice == 14)
[L8346]  COND FALSE  !(choice == 13)
[L8352]  COND TRUE   choice == 12
[L8353]              gas := gas - 21000;
[L8354]  COND TRUE   gas >= 0
[L8355]              assume value_s1257 >= 0 && value_s1257 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8356]              assume msgvalue_MSG == 0;
[L8357]  CALL        call __ret_0_transfer := transfer~address~uint256_DkargoToken(this, msgsender_MSG, msgvalue_MSG, to_s1257, value_s1257);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((p1 != msgsender_MSG && p1 != to_s1257) && msgsender_MSG != to_s1257) && value_s1257 <= _balances_ERC20[this][msgsender_MSG]) && _balances_ERC20[this][to_s1257] + value_s1257 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && value_s1257 >= 0) && value_s1257 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1257] >= 0) && _balances_ERC20[this][to_s1257] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transfer_DkargoToken0 := true;
[L3]                 call_transfer_DkargoToken0 := false;
[L3]                 revert := revert_hold;
[L2562]              havoc __exception;
[L2563]              revert := false;
[L2564]  COND TRUE   __exception
[L2565]              __tmp__Balance := Balance;
[L2566]              __tmp__DType := DType;
[L2567]              __tmp__Alloc := Alloc;
[L2568]              __tmp__balance_ADDR := balance_ADDR;
[L2569]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L2570]              __tmp__sum := sum;
[L2571]              __tmp__M_int_bool := M_int_bool;
[L2572]              __tmp__sum__infcs0 := sum__infcs0;
[L2573]              __tmp__M_Ref_int := M_Ref_int;
[L2574]              __tmp__sum__balances1 := sum__balances1;
[L2575]              __tmp__alloc__allowances_ERC20_lvl0 := alloc__allowances_ERC20_lvl0;
[L2576]              __tmp__sum__allowances2 := sum__allowances2;
[L2577]              __tmp__Length := Length;
[L2578]              __tmp__now := now;
[L2579]              __tmp___dkargoPrefix_DkargoPrefix := _dkargoPrefix_DkargoPrefix;
[L2580]              __tmp___owner_Ownership := _owner_Ownership;
[L2581]              __tmp__prev_AddressChain.NodeInfo := prev_AddressChain.NodeInfo;
[L2582]              __tmp__next_AddressChain.NodeInfo := next_AddressChain.NodeInfo;
[L2583]              __tmp__count_AddressChain.NodeList := count_AddressChain.NodeList;
[L2584]              __tmp__head_AddressChain.NodeList := head_AddressChain.NodeList;
[L2585]              __tmp__tail_AddressChain.NodeList := tail_AddressChain.NodeList;
[L2586]              __tmp__map_AddressChain.NodeList := map_AddressChain.NodeList;
[L2587]              __tmp___slist_AddressChain := _slist_AddressChain;
[L2588]              __tmp___infcs_ERC165 := _infcs_ERC165;
[L2589]              __tmp___supply_ERC20 := _supply_ERC20;
[L2590]              __tmp___balances_ERC20 := _balances_ERC20;
[L2591]              __tmp___allowances_ERC20 := _allowances_ERC20;
[L2592]              __tmp___name_DkargoToken := _name_DkargoToken;
[L2593]              __tmp___symbol_DkargoToken := _symbol_DkargoToken;
[L2594]  CALL        call __ret_0_ := transfer~address~uint256_DkargoToken__fail(this, msgsender_MSG, msgvalue_MSG, to_s1257, value_s1257);
[L5824]  COND TRUE   __tmp__DType[this] == DkargoToken
[L5825]  CALL        call ret_s1257 := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, to_s1257, value_s1257);
[L4974]  COND TRUE   __tmp__DType[this] == DkargoToken
[L4975]  CALL        call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, recipient_s785, amount_s785);
[L5195]              __var_20 := null;
[L5196]  COND TRUE   !(sender_s956 != null)
[L5197]              revert := true;
[L4975]  RET         call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, recipient_s785, amount_s785);
[L4976]  COND TRUE   revert
[L5825]  RET         call ret_s1257 := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, to_s1257, value_s1257);
[L5826]  COND TRUE   revert
[L2594]  RET         call __ret_0_ := transfer~address~uint256_DkargoToken__fail(this, msgsender_MSG, msgvalue_MSG, to_s1257, value_s1257);
[L2595]              assume revert || gas < 0;
[L8357]  RET         call __ret_0_transfer := transfer~address~uint256_DkargoToken(this, msgsender_MSG, msgvalue_MSG, to_s1257, value_s1257);
[L8451]  RET         call CorralChoice_DkargoToken(this);

Loop:
[L8451]  CALL        call CorralChoice_DkargoToken(this);
[L8221]              havoc msgsender_MSG;
[L8222]              havoc msgvalue_MSG;
[L8223]              havoc choice;
[L8224]              havoc __ret_0_getDkargoPrefix;
[L8225]              havoc expected_s84;
[L8226]              havoc __ret_0_owner;
[L8227]              havoc __ret_0_isOwner;
[L8228]              havoc __ret_0_count;
[L8229]              havoc __ret_0_head;
[L8230]              havoc __ret_0_tail;
[L8231]              havoc node_s309;
[L8232]              havoc __ret_0_nextOf;
[L8233]              havoc node_s323;
[L8234]              havoc __ret_0_prevOf;
[L8235]              havoc node_s376;
[L8236]              havoc __ret_0_isLinked;
[L8237]              havoc infcid_s625;
[L8238]              havoc __ret_0_supportsInterface;
[L8239]              havoc to_s1257;
[L8240]              havoc value_s1257;
[L8241]              havoc __ret_0_transfer;
[L8242]              havoc spender_s1084;
[L8243]              havoc amount_s1084;
[L8244]              havoc __ret_0_approve;
[L8245]              havoc from_s1311;
[L8246]              havoc to_s1311;
[L8247]              havoc value_s1311;
[L8248]              havoc __ret_0_transferFrom;
[L8249]              havoc __ret_0_totalSupply;
[L8250]              havoc account_s841;
[L8251]              havoc __ret_0_balanceOf;
[L8252]              havoc approver_s857;
[L8253]              havoc spender_s857;
[L8254]              havoc __ret_0_allowance;
[L8255]              havoc spender_s1111;
[L8256]              havoc addedValue_s1111;
[L8257]              havoc __ret_0_increaseAllowance;
[L8258]              havoc spender_s1139;
[L8259]              havoc subtractedValue_s1139;
[L8260]              havoc __ret_0_decreaseAllowance;
[L8261]              havoc name_s1191;
[L8262]              havoc symbol_s1191;
[L8263]              havoc supply_s1191;
[L8264]              havoc amount_s1203;
[L8265]              havoc __ret_0_name;
[L8266]              havoc __ret_0_symbol;
[L8267]              havoc __ret_0_decimals;
[L8268]              havoc tmpNow;
[L8269]              havoc gas;
[L8270]              assume gas > 4000000 && gas <= 8000000;
[L8271]              tmpNow := now;
[L8272]              havoc now;
[L8273]              assume now > tmpNow;
[L8274]              assume msgsender_MSG != null;
[L8275]              assume DType[msgsender_MSG] != DkargoPrefix;
[L8276]              assume DType[msgsender_MSG] != Ownership;
[L8277]              assume DType[msgsender_MSG] != SafeMath;
[L8278]              assume DType[msgsender_MSG] != AddressChain;
[L8279]              assume DType[msgsender_MSG] != IERC165;
[L8280]              assume DType[msgsender_MSG] != ERC165;
[L8281]              assume DType[msgsender_MSG] != IERC20;
[L8282]              assume DType[msgsender_MSG] != ERC20;
[L8283]              assume DType[msgsender_MSG] != ERC20Safe;
[L8284]              assume DType[msgsender_MSG] != DkargoToken;
[L8285]              Alloc[msgsender_MSG] := true;
[L8286]  COND FALSE  !(choice == 23)
[L8292]  COND FALSE  !(choice == 22)
[L8298]  COND FALSE  !(choice == 21)
[L8304]  COND FALSE  !(choice == 20)
[L8310]  COND FALSE  !(choice == 19)
[L8316]  COND FALSE  !(choice == 18)
[L8322]  COND FALSE  !(choice == 17)
[L8328]  COND FALSE  !(choice == 16)
[L8334]  COND FALSE  !(choice == 15)
[L8340]  COND FALSE  !(choice == 14)
[L8346]  COND FALSE  !(choice == 13)
[L8352]  COND TRUE   choice == 12
[L8353]              gas := gas - 21000;
[L8354]  COND TRUE   gas >= 0
[L8355]              assume value_s1257 >= 0 && value_s1257 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8356]              assume msgvalue_MSG == 0;
[L8357]  CALL        call __ret_0_transfer := transfer~address~uint256_DkargoToken(this, msgsender_MSG, msgvalue_MSG, to_s1257, value_s1257);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((p1 != msgsender_MSG && p1 != to_s1257) && msgsender_MSG != to_s1257) && value_s1257 <= _balances_ERC20[this][msgsender_MSG]) && _balances_ERC20[this][to_s1257] + value_s1257 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && value_s1257 >= 0) && value_s1257 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1257] >= 0) && _balances_ERC20[this][to_s1257] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transfer_DkargoToken0 := true;
[L3]                 call_transfer_DkargoToken0 := false;
[L3]                 revert := revert_hold;
[L2562]              havoc __exception;
[L2563]              revert := false;
[L2564]  COND TRUE   __exception
[L2565]              __tmp__Balance := Balance;
[L2566]              __tmp__DType := DType;
[L2567]              __tmp__Alloc := Alloc;
[L2568]              __tmp__balance_ADDR := balance_ADDR;
[L2569]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L2570]              __tmp__sum := sum;
[L2571]              __tmp__M_int_bool := M_int_bool;
[L2572]              __tmp__sum__infcs0 := sum__infcs0;
[L2573]              __tmp__M_Ref_int := M_Ref_int;
[L2574]              __tmp__sum__balances1 := sum__balances1;
[L2575]              __tmp__alloc__allowances_ERC20_lvl0 := alloc__allowances_ERC20_lvl0;
[L2576]              __tmp__sum__allowances2 := sum__allowances2;
[L2577]              __tmp__Length := Length;
[L2578]              __tmp__now := now;
[L2579]              __tmp___dkargoPrefix_DkargoPrefix := _dkargoPrefix_DkargoPrefix;
[L2580]              __tmp___owner_Ownership := _owner_Ownership;
[L2581]              __tmp__prev_AddressChain.NodeInfo := prev_AddressChain.NodeInfo;
[L2582]              __tmp__next_AddressChain.NodeInfo := next_AddressChain.NodeInfo;
[L2583]              __tmp__count_AddressChain.NodeList := count_AddressChain.NodeList;
[L2584]              __tmp__head_AddressChain.NodeList := head_AddressChain.NodeList;
[L2585]              __tmp__tail_AddressChain.NodeList := tail_AddressChain.NodeList;
[L2586]              __tmp__map_AddressChain.NodeList := map_AddressChain.NodeList;
[L2587]              __tmp___slist_AddressChain := _slist_AddressChain;
[L2588]              __tmp___infcs_ERC165 := _infcs_ERC165;
[L2589]              __tmp___supply_ERC20 := _supply_ERC20;
[L2590]              __tmp___balances_ERC20 := _balances_ERC20;
[L2591]              __tmp___allowances_ERC20 := _allowances_ERC20;
[L2592]              __tmp___name_DkargoToken := _name_DkargoToken;
[L2593]              __tmp___symbol_DkargoToken := _symbol_DkargoToken;
[L2594]  CALL        call __ret_0_ := transfer~address~uint256_DkargoToken__fail(this, msgsender_MSG, msgvalue_MSG, to_s1257, value_s1257);
[L5824]  COND TRUE   __tmp__DType[this] == DkargoToken
[L5825]  CALL        call ret_s1257 := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, to_s1257, value_s1257);
[L4974]  COND TRUE   __tmp__DType[this] == DkargoToken
[L4975]  CALL        call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, recipient_s785, amount_s785);
[L5195]              __var_20 := null;
[L5196]  COND TRUE   !(sender_s956 != null)
[L5197]              revert := true;
[L4975]  RET         call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, recipient_s785, amount_s785);
[L4976]  COND TRUE   revert
[L5825]  RET         call ret_s1257 := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, to_s1257, value_s1257);
[L5826]  COND TRUE   revert
[L2594]  RET         call __ret_0_ := transfer~address~uint256_DkargoToken__fail(this, msgsender_MSG, msgvalue_MSG, to_s1257, value_s1257);
[L2595]              assume revert || gas < 0;
[L8357]  RET         call __ret_0_transfer := transfer~address~uint256_DkargoToken(this, msgsender_MSG, msgvalue_MSG, to_s1257, value_s1257);
[L8451]  RET         call CorralChoice_DkargoToken(this);

[2020-11-25 14:00:31,017 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 14:00:31,017 INFO  L82        PathProgramCache]: Analyzing trace with hash 617802374, now seen corresponding path program 1 times
[2020-11-25 14:00:31,018 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 14:00:31,034 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 14:00:31,110 INFO  L134       CoverageAnalysis]: Checked inductivity of 65 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 65 trivial. 0 not checked.
[2020-11-25 14:00:31,110 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 14:00:31,110 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [7] imperfect sequences [] total 7
[2020-11-25 14:00:31,110 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 14:00:31,111 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 7 interpolants.
[2020-11-25 14:00:31,111 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=11, Invalid=31, Unknown=0, NotChecked=0, Total=42
[2020-11-25 14:00:31,111 INFO  L87              Difference]: Start difference. First operand 4892 states and 5431 transitions. cyclomatic complexity: 541 Second operand 7 states.
[2020-11-25 14:00:31,167 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 14:00:31,167 INFO  L93              Difference]: Finished difference Result 4928 states and 5475 transitions.
[2020-11-25 14:00:31,167 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 7 states. 
[2020-11-25 14:00:31,167 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 4928 states and 5475 transitions.
[2020-11-25 14:00:31,178 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 14:00:31,190 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 4928 states to 4896 states and 5439 transitions.
[2020-11-25 14:00:31,191 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1099
[2020-11-25 14:00:31,191 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1099
[2020-11-25 14:00:31,191 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 4896 states and 5439 transitions.
[2020-11-25 14:00:31,194 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 14:00:31,194 INFO  L728         BuchiCegarLoop]: Abstraction has 4896 states and 5439 transitions.
[2020-11-25 14:00:31,198 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 4896 states and 5439 transitions.
[2020-11-25 14:00:31,224 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 4896 to 4896.
[2020-11-25 14:00:31,224 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 4896 states.
[2020-11-25 14:00:31,228 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 4896 states to 4896 states and 5439 transitions.
[2020-11-25 14:00:31,228 INFO  L751         BuchiCegarLoop]: Abstraction has 4896 states and 5439 transitions.
[2020-11-25 14:00:31,228 INFO  L631         BuchiCegarLoop]: Abstraction has 4896 states and 5439 transitions.
[2020-11-25 14:00:31,228 INFO  L445         BuchiCegarLoop]: ======== Iteration 8============
[2020-11-25 14:00:31,228 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 4896 states and 5439 transitions.
[2020-11-25 14:00:31,233 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 14:00:31,233 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 14:00:31,233 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 14:00:31,235 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 14:00:31,235 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_transfer_DkargoToken0 := false;
[L3]                 call_transfer_DkargoToken0 := false;
[L3]     CALL        call main();
[L3]                 havoc p1;
[L8441]              assume null == 0;
[L8442]  CALL        call this := FreshRefGenerator__success();
[L3984]              havoc newRef;
[L3985]              assume Alloc[newRef] == false;
[L3986]              Alloc[newRef] := true;
[L3987]              assume newRef != null;
[L8442]  RET         call this := FreshRefGenerator__success();
[L8443]              assume now >= 0;
[L8444]              assume DType[this] == DkargoToken;
[L8445]              assume msgvalue_MSG == 0;
[L8446]              gas := gas - 53000;
[L8447]  CALL        call DkargoToken_DkargoToken(this, msgsender_MSG, msgvalue_MSG, name_s1191, symbol_s1191, supply_s1191);
[L2404]              havoc __exception;
[L2405]              revert := false;
[L2406]  COND FALSE  !(__exception)
[L2439]  CALL        call DkargoToken_DkargoToken__success(this, msgsender_MSG, msgvalue_MSG, name_s1191, symbol_s1191, supply_s1191);
[L5754]  CALL        call Ownership_Ownership__success(this, msgsender_MSG, msgvalue_MSG);
[L4105]  CALL        call Ownership_Ownership_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4087]              assume msgsender_MSG != null;
[L4088]              Balance[this] := 0;
[L4089]              _owner_Ownership[this] := null;
[L4091]              assert { :EventEmitted "OwnershipTransferred_Ownership" } true;
[L4092]              _owner_Ownership[this] := msgsender_MSG;
[L4105]  RET         call Ownership_Ownership_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4106]  COND FALSE  !(revert)
[L5754]  RET         call Ownership_Ownership__success(this, msgsender_MSG, msgvalue_MSG);
[L5755]  COND FALSE  !(revert)
[L5758]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4826]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4811]              assume msgsender_MSG != null;
[L4812]              Balance[this] := 0;
[L4826]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4827]  COND FALSE  !(revert)
[L5758]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5759]  COND FALSE  !(revert)
[L5762]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG, supply_s1191);
[L4914]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4826]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4811]              assume msgsender_MSG != null;
[L4812]              Balance[this] := 0;
[L4826]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4827]  COND FALSE  !(revert)
[L4914]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4915]  COND FALSE  !(revert)
[L4918]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, supply_s747);
[L4869]              assume msgsender_MSG != null;
[L4870]              Balance[this] := 0;
[L4871]              _supply_ERC20[this] := 0;
[L4872]              _balances_ERC20[this] := zeroRefintArr();
[L4873]              sum__balances1[this] := 0;
[L4874]              _allowances_ERC20[this] := zeroRefRefintArr();
[L4875]              sum__allowances2[this] := 0;
[L4877]              pebs_s747 := supply_s747;
[L4878]  COND TRUE   DType[this] == DkargoToken
[L4879]  CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, pebs_s747);
[L5283]              __var_24 := null;
[L5284]  COND FALSE  !(!(account_s999 != null))
[L5288]  CALL        call __var_25 := add~uint256~uint256_SafeMath__success(this, this, 0, _supply_ERC20[this], amount_s999);
[L4213]              c_s130 := (a_s130 + b_s130) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4214]  COND FALSE  !(!(c_s130 >= a_s130))
[L4218]              __ret_0_ := c_s130;
[L5288]  RET         call __var_25 := add~uint256~uint256_SafeMath__success(this, this, 0, _supply_ERC20[this], amount_s999);
[L5289]  COND FALSE  !(revert)
[L5292]              _supply_ERC20[this] := __var_25;
[L5293]  CALL        call __var_26 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s999], amount_s999);
[L4213]              c_s130 := (a_s130 + b_s130) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4214]  COND FALSE  !(!(c_s130 >= a_s130))
[L4218]              __ret_0_ := c_s130;
[L5293]  RET         call __var_26 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s999], amount_s999);
[L5294]  COND FALSE  !(revert)
[L5297]              sum__balances1[this] := sum__balances1[this] - _balances_ERC20[this][account_s999];
[L5298]              _balances_ERC20[this][account_s999] := __var_26;
[L5299]              sum__balances1[this] := sum__balances1[this] + _balances_ERC20[this][account_s999];
[L5300]              assert { :EventEmitted "Transfer_ERC20" } true;
[L4879]  RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, pebs_s747);
[L4880]  COND FALSE  !(revert)
[L4918]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, supply_s747);
[L4919]  COND FALSE  !(revert)
[L5762]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG, supply_s1191);
[L5763]  COND FALSE  !(revert)
[L5766]  CALL        call ERC20Safe_ERC20Safe__success(this, msgsender_MSG, msgvalue_MSG);
[L5382]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4826]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4811]              assume msgsender_MSG != null;
[L4812]              Balance[this] := 0;
[L4826]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4827]  COND FALSE  !(revert)
[L5382]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5383]  COND FALSE  !(revert)
[L5386]  CALL        call ERC20Safe_ERC20Safe_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5363]              assume msgsender_MSG != null;
[L5364]              Balance[this] := 0;
[L5386]  RET         call ERC20Safe_ERC20Safe_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5387]  COND FALSE  !(revert)
[L5766]  RET         call ERC20Safe_ERC20Safe__success(this, msgsender_MSG, msgvalue_MSG);
[L5767]  COND FALSE  !(revert)
[L5770]  CALL        call AddressChain_AddressChain__success(this, msgsender_MSG, msgvalue_MSG);
[L4362]  CALL        call AddressChain_AddressChain_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4341]              assume msgsender_MSG != null;
[L4342]              Balance[this] := 0;
[L4344]  CALL        call __var_3 := FreshRefGenerator__success();
[L3984]              havoc newRef;
[L3985]              assume Alloc[newRef] == false;
[L3986]              Alloc[newRef] := true;
[L3987]              assume newRef != null;
[L4344]  RET         call __var_3 := FreshRefGenerator__success();
[L4345]  COND FALSE  !(revert)
[L4348]              _slist_AddressChain[this] := __var_3;
[L4362]  RET         call AddressChain_AddressChain_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4363]  COND FALSE  !(revert)
[L5770]  RET         call AddressChain_AddressChain__success(this, msgsender_MSG, msgvalue_MSG);
[L5771]  COND FALSE  !(revert)
[L5774]  CALL        call IERC165_IERC165__success(this, msgsender_MSG, msgvalue_MSG);
[L4690]  CALL        call IERC165_IERC165_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4675]              assume msgsender_MSG != null;
[L4676]              Balance[this] := 0;
[L4690]  RET         call IERC165_IERC165_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4691]  COND FALSE  !(revert)
[L5774]  RET         call IERC165_IERC165__success(this, msgsender_MSG, msgvalue_MSG);
[L5775]  COND FALSE  !(revert)
[L5778]  CALL        call ERC165_ERC165__success(this, msgsender_MSG, msgvalue_MSG);
[L4760]  CALL        call IERC165_IERC165__success(this, msgsender_MSG, msgvalue_MSG);
[L4690]  CALL        call IERC165_IERC165_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4675]              assume msgsender_MSG != null;
[L4676]              Balance[this] := 0;
[L4690]  RET         call IERC165_IERC165_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4691]  COND FALSE  !(revert)
[L4760]  RET         call IERC165_IERC165__success(this, msgsender_MSG, msgvalue_MSG);
[L4761]  COND FALSE  !(revert)
[L4764]  CALL        call ERC165_ERC165_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4724]              assume msgsender_MSG != null;
[L4725]              Balance[this] := 0;
[L4726]              _infcs_ERC165[this] := zerointboolArr();
[L4728]              __var_16 := 33540519;
[L4729]  COND TRUE   DType[this] == DkargoToken
[L4730]  CALL        call _registerInterface~bytes4_ERC165__success(this, msgsender_MSG, msgvalue_MSG, 33540519);
[L4793]  COND FALSE  !(!(infcid_s644 != -1))
[L4797]              _infcs_ERC165[this][infcid_s644] := true;
[L4730]  RET         call _registerInterface~bytes4_ERC165__success(this, msgsender_MSG, msgvalue_MSG, 33540519);
[L4731]  COND FALSE  !(revert)
[L4764]  RET         call ERC165_ERC165_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4765]  COND FALSE  !(revert)
[L5778]  RET         call ERC165_ERC165__success(this, msgsender_MSG, msgvalue_MSG);
[L5779]  COND FALSE  !(revert)
[L5782]  CALL        call DkargoPrefix_DkargoPrefix__success(this, msgsender_MSG, msgvalue_MSG);
[L4046]  CALL        call DkargoPrefix_DkargoPrefix_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4030]              assume msgsender_MSG != null;
[L4031]              Balance[this] := 0;
[L4032]              _dkargoPrefix_DkargoPrefix[this] := -1676636045;
[L4046]  RET         call DkargoPrefix_DkargoPrefix_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4047]  COND FALSE  !(revert)
[L5782]  RET         call DkargoPrefix_DkargoPrefix__success(this, msgsender_MSG, msgvalue_MSG);
[L5783]  COND FALSE  !(revert)
[L5786]  CALL        call DkargoToken_DkargoToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1191, symbol_s1191, supply_s1191);
[L5676]              assume msgsender_MSG != null;
[L5677]              Balance[this] := 0;
[L5678]              _name_DkargoToken[this] := -1676636045;
[L5679]              _symbol_DkargoToken[this] := -1676636045;
[L5681]  COND TRUE   DType[this] == DkargoToken
[L5682]  CALL        call _setDkargoPrefix~string_DkargoPrefix__success(this, msgsender_MSG, msgvalue_MSG, 978340553);
[L4071]              _dkargoPrefix_DkargoPrefix[this] := prefix_s21;
[L5682]  RET         call _setDkargoPrefix~string_DkargoPrefix__success(this, msgsender_MSG, msgvalue_MSG, 978340553);
[L5683]  COND FALSE  !(revert)
[L5689]              __var_39 := -1804674067;
[L5690]  COND TRUE   DType[this] == DkargoToken
[L5691]  CALL        call _registerInterface~bytes4_ERC165__success(this, msgsender_MSG, msgvalue_MSG, -1804674067);
[L4793]  COND FALSE  !(!(infcid_s644 != -1))
[L4797]              _infcs_ERC165[this][infcid_s644] := true;
[L5691]  RET         call _registerInterface~bytes4_ERC165__success(this, msgsender_MSG, msgvalue_MSG, -1804674067);
[L5692]  COND FALSE  !(revert)
[L5698]              _name_DkargoToken[this] := name_s1191;
[L5699]              _symbol_DkargoToken[this] := symbol_s1191;
[L5700]  COND TRUE   DType[this] == DkargoToken
[L5701]  CALL        call _linkChain~address_AddressChain__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L4505]              __var_6 := null;
[L4506]  COND FALSE  !(!(node_s455 != null))
[L4510]  COND TRUE   DType[this] == DkargoToken
[L4511]  CALL        call __var_7 := isLinked~address_AddressChain__success(this, msgsender_MSG, msgvalue_MSG, node_s455);
[L4447]  COND FALSE  !((count_AddressChain.NodeList[_slist_AddressChain[this]] == 1 && head_AddressChain.NodeList[_slist_AddressChain[this]] == node_s376) && tail_AddressChain.NodeList[_slist_AddressChain[this]] == node_s376)
[L4451]              __var_4 := null;
[L4452]              __var_5 := null;
[L4453]              __ret_0_ := (if prev_AddressChain.NodeInfo[M_Ref_Ref[map_AddressChain.NodeList[_slist_AddressChain[this]]][node_s376]] == null && next_AddressChain.NodeInfo[M_Ref_Ref[map_AddressChain.NodeList[_slist_AddressChain[this]]][node_s376]] == null then false else true);
[L4511]  RET         call __var_7 := isLinked~address_AddressChain__success(this, msgsender_MSG, msgvalue_MSG, node_s455);
[L4512]  COND FALSE  !(revert)
[L4523]  COND FALSE  !(!!__var_7)
[L4527]  COND TRUE   count_AddressChain.NodeList[_slist_AddressChain[this]] == 0
[L4528]              tail_AddressChain.NodeList[_slist_AddressChain[this]] := node_s455;
[L4529]              head_AddressChain.NodeList[_slist_AddressChain[this]] := node_s455;
[L4535]  CALL        call __var_8 := add~uint256~uint256_SafeMath__success(this, this, 0, count_AddressChain.NodeList[_slist_AddressChain[this]], 1);
[L4213]              c_s130 := (a_s130 + b_s130) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4214]  COND FALSE  !(!(c_s130 >= a_s130))
[L4218]              __ret_0_ := c_s130;
[L4535]  RET         call __var_8 := add~uint256~uint256_SafeMath__success(this, this, 0, count_AddressChain.NodeList[_slist_AddressChain[this]], 1);
[L4536]  COND FALSE  !(revert)
[L4539]              count_AddressChain.NodeList[_slist_AddressChain[this]] := __var_8;
[L4540]              assert { :EventEmitted "AddressChainLinked_AddressChain" } true;
[L5701]  RET         call _linkChain~address_AddressChain__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5702]  COND FALSE  !(revert)
[L5786]  RET         call DkargoToken_DkargoToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1191, symbol_s1191, supply_s1191);
[L5787]  COND FALSE  !(revert)
[L2439]  RET         call DkargoToken_DkargoToken__success(this, msgsender_MSG, msgvalue_MSG, name_s1191, symbol_s1191, supply_s1191);
[L2440]              assume !revert && gas >= 0;
[L8447]  RET         call DkargoToken_DkargoToken(this, msgsender_MSG, msgvalue_MSG, name_s1191, symbol_s1191, supply_s1191);
[L8448]              assume !revert && gas >= 0;
[L8451]  CALL        call CorralChoice_DkargoToken(this);
[L8221]              havoc msgsender_MSG;
[L8222]              havoc msgvalue_MSG;
[L8223]              havoc choice;
[L8224]              havoc __ret_0_getDkargoPrefix;
[L8225]              havoc expected_s84;
[L8226]              havoc __ret_0_owner;
[L8227]              havoc __ret_0_isOwner;
[L8228]              havoc __ret_0_count;
[L8229]              havoc __ret_0_head;
[L8230]              havoc __ret_0_tail;
[L8231]              havoc node_s309;
[L8232]              havoc __ret_0_nextOf;
[L8233]              havoc node_s323;
[L8234]              havoc __ret_0_prevOf;
[L8235]              havoc node_s376;
[L8236]              havoc __ret_0_isLinked;
[L8237]              havoc infcid_s625;
[L8238]              havoc __ret_0_supportsInterface;
[L8239]              havoc to_s1257;
[L8240]              havoc value_s1257;
[L8241]              havoc __ret_0_transfer;
[L8242]              havoc spender_s1084;
[L8243]              havoc amount_s1084;
[L8244]              havoc __ret_0_approve;
[L8245]              havoc from_s1311;
[L8246]              havoc to_s1311;
[L8247]              havoc value_s1311;
[L8248]              havoc __ret_0_transferFrom;
[L8249]              havoc __ret_0_totalSupply;
[L8250]              havoc account_s841;
[L8251]              havoc __ret_0_balanceOf;
[L8252]              havoc approver_s857;
[L8253]              havoc spender_s857;
[L8254]              havoc __ret_0_allowance;
[L8255]              havoc spender_s1111;
[L8256]              havoc addedValue_s1111;
[L8257]              havoc __ret_0_increaseAllowance;
[L8258]              havoc spender_s1139;
[L8259]              havoc subtractedValue_s1139;
[L8260]              havoc __ret_0_decreaseAllowance;
[L8261]              havoc name_s1191;
[L8262]              havoc symbol_s1191;
[L8263]              havoc supply_s1191;
[L8264]              havoc amount_s1203;
[L8265]              havoc __ret_0_name;
[L8266]              havoc __ret_0_symbol;
[L8267]              havoc __ret_0_decimals;
[L8268]              havoc tmpNow;
[L8269]              havoc gas;
[L8270]              assume gas > 4000000 && gas <= 8000000;
[L8271]              tmpNow := now;
[L8272]              havoc now;
[L8273]              assume now > tmpNow;
[L8274]              assume msgsender_MSG != null;
[L8275]              assume DType[msgsender_MSG] != DkargoPrefix;
[L8276]              assume DType[msgsender_MSG] != Ownership;
[L8277]              assume DType[msgsender_MSG] != SafeMath;
[L8278]              assume DType[msgsender_MSG] != AddressChain;
[L8279]              assume DType[msgsender_MSG] != IERC165;
[L8280]              assume DType[msgsender_MSG] != ERC165;
[L8281]              assume DType[msgsender_MSG] != IERC20;
[L8282]              assume DType[msgsender_MSG] != ERC20;
[L8283]              assume DType[msgsender_MSG] != ERC20Safe;
[L8284]              assume DType[msgsender_MSG] != DkargoToken;
[L8285]              Alloc[msgsender_MSG] := true;
[L8286]  COND FALSE  !(choice == 23)
[L8292]  COND FALSE  !(choice == 22)
[L8298]  COND FALSE  !(choice == 21)
[L8304]  COND FALSE  !(choice == 20)
[L8310]  COND FALSE  !(choice == 19)
[L8316]  COND FALSE  !(choice == 18)
[L8322]  COND FALSE  !(choice == 17)
[L8328]  COND FALSE  !(choice == 16)
[L8334]  COND FALSE  !(choice == 15)
[L8340]  COND FALSE  !(choice == 14)
[L8346]  COND FALSE  !(choice == 13)
[L8352]  COND TRUE   choice == 12
[L8353]              gas := gas - 21000;
[L8354]  COND TRUE   gas >= 0
[L8355]              assume value_s1257 >= 0 && value_s1257 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8356]              assume msgvalue_MSG == 0;
[L8357]  CALL        call __ret_0_transfer := transfer~address~uint256_DkargoToken(this, msgsender_MSG, msgvalue_MSG, to_s1257, value_s1257);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((p1 != msgsender_MSG && p1 != to_s1257) && msgsender_MSG != to_s1257) && value_s1257 <= _balances_ERC20[this][msgsender_MSG]) && _balances_ERC20[this][to_s1257] + value_s1257 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && value_s1257 >= 0) && value_s1257 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1257] >= 0) && _balances_ERC20[this][to_s1257] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transfer_DkargoToken0 := true;
[L3]                 call_transfer_DkargoToken0 := false;
[L3]                 revert := revert_hold;
[L2562]              havoc __exception;
[L2563]              revert := false;
[L2564]  COND TRUE   __exception
[L2565]              __tmp__Balance := Balance;
[L2566]              __tmp__DType := DType;
[L2567]              __tmp__Alloc := Alloc;
[L2568]              __tmp__balance_ADDR := balance_ADDR;
[L2569]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L2570]              __tmp__sum := sum;
[L2571]              __tmp__M_int_bool := M_int_bool;
[L2572]              __tmp__sum__infcs0 := sum__infcs0;
[L2573]              __tmp__M_Ref_int := M_Ref_int;
[L2574]              __tmp__sum__balances1 := sum__balances1;
[L2575]              __tmp__alloc__allowances_ERC20_lvl0 := alloc__allowances_ERC20_lvl0;
[L2576]              __tmp__sum__allowances2 := sum__allowances2;
[L2577]              __tmp__Length := Length;
[L2578]              __tmp__now := now;
[L2579]              __tmp___dkargoPrefix_DkargoPrefix := _dkargoPrefix_DkargoPrefix;
[L2580]              __tmp___owner_Ownership := _owner_Ownership;
[L2581]              __tmp__prev_AddressChain.NodeInfo := prev_AddressChain.NodeInfo;
[L2582]              __tmp__next_AddressChain.NodeInfo := next_AddressChain.NodeInfo;
[L2583]              __tmp__count_AddressChain.NodeList := count_AddressChain.NodeList;
[L2584]              __tmp__head_AddressChain.NodeList := head_AddressChain.NodeList;
[L2585]              __tmp__tail_AddressChain.NodeList := tail_AddressChain.NodeList;
[L2586]              __tmp__map_AddressChain.NodeList := map_AddressChain.NodeList;
[L2587]              __tmp___slist_AddressChain := _slist_AddressChain;
[L2588]              __tmp___infcs_ERC165 := _infcs_ERC165;
[L2589]              __tmp___supply_ERC20 := _supply_ERC20;
[L2590]              __tmp___balances_ERC20 := _balances_ERC20;
[L2591]              __tmp___allowances_ERC20 := _allowances_ERC20;
[L2592]              __tmp___name_DkargoToken := _name_DkargoToken;
[L2593]              __tmp___symbol_DkargoToken := _symbol_DkargoToken;
[L2594]  CALL        call __ret_0_ := transfer~address~uint256_DkargoToken__fail(this, msgsender_MSG, msgvalue_MSG, to_s1257, value_s1257);
[L5824]  COND TRUE   __tmp__DType[this] == DkargoToken
[L5825]  CALL        call ret_s1257 := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, to_s1257, value_s1257);
[L4974]  COND TRUE   __tmp__DType[this] == DkargoToken
[L4975]  CALL        call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, recipient_s785, amount_s785);
[L5195]              __var_20 := null;
[L5196]  COND FALSE  !(!(sender_s956 != null))
[L5200]              __var_21 := null;
[L5201]  COND TRUE   !(recipient_s956 != null)
[L5202]              revert := true;
[L4975]  RET         call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, recipient_s785, amount_s785);
[L4976]  COND TRUE   revert
[L5825]  RET         call ret_s1257 := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, to_s1257, value_s1257);
[L5826]  COND TRUE   revert
[L2594]  RET         call __ret_0_ := transfer~address~uint256_DkargoToken__fail(this, msgsender_MSG, msgvalue_MSG, to_s1257, value_s1257);
[L2595]              assume revert || gas < 0;
[L8357]  RET         call __ret_0_transfer := transfer~address~uint256_DkargoToken(this, msgsender_MSG, msgvalue_MSG, to_s1257, value_s1257);
[L8451]  RET         call CorralChoice_DkargoToken(this);

Loop:
[L8451]  CALL        call CorralChoice_DkargoToken(this);
[L8221]              havoc msgsender_MSG;
[L8222]              havoc msgvalue_MSG;
[L8223]              havoc choice;
[L8224]              havoc __ret_0_getDkargoPrefix;
[L8225]              havoc expected_s84;
[L8226]              havoc __ret_0_owner;
[L8227]              havoc __ret_0_isOwner;
[L8228]              havoc __ret_0_count;
[L8229]              havoc __ret_0_head;
[L8230]              havoc __ret_0_tail;
[L8231]              havoc node_s309;
[L8232]              havoc __ret_0_nextOf;
[L8233]              havoc node_s323;
[L8234]              havoc __ret_0_prevOf;
[L8235]              havoc node_s376;
[L8236]              havoc __ret_0_isLinked;
[L8237]              havoc infcid_s625;
[L8238]              havoc __ret_0_supportsInterface;
[L8239]              havoc to_s1257;
[L8240]              havoc value_s1257;
[L8241]              havoc __ret_0_transfer;
[L8242]              havoc spender_s1084;
[L8243]              havoc amount_s1084;
[L8244]              havoc __ret_0_approve;
[L8245]              havoc from_s1311;
[L8246]              havoc to_s1311;
[L8247]              havoc value_s1311;
[L8248]              havoc __ret_0_transferFrom;
[L8249]              havoc __ret_0_totalSupply;
[L8250]              havoc account_s841;
[L8251]              havoc __ret_0_balanceOf;
[L8252]              havoc approver_s857;
[L8253]              havoc spender_s857;
[L8254]              havoc __ret_0_allowance;
[L8255]              havoc spender_s1111;
[L8256]              havoc addedValue_s1111;
[L8257]              havoc __ret_0_increaseAllowance;
[L8258]              havoc spender_s1139;
[L8259]              havoc subtractedValue_s1139;
[L8260]              havoc __ret_0_decreaseAllowance;
[L8261]              havoc name_s1191;
[L8262]              havoc symbol_s1191;
[L8263]              havoc supply_s1191;
[L8264]              havoc amount_s1203;
[L8265]              havoc __ret_0_name;
[L8266]              havoc __ret_0_symbol;
[L8267]              havoc __ret_0_decimals;
[L8268]              havoc tmpNow;
[L8269]              havoc gas;
[L8270]              assume gas > 4000000 && gas <= 8000000;
[L8271]              tmpNow := now;
[L8272]              havoc now;
[L8273]              assume now > tmpNow;
[L8274]              assume msgsender_MSG != null;
[L8275]              assume DType[msgsender_MSG] != DkargoPrefix;
[L8276]              assume DType[msgsender_MSG] != Ownership;
[L8277]              assume DType[msgsender_MSG] != SafeMath;
[L8278]              assume DType[msgsender_MSG] != AddressChain;
[L8279]              assume DType[msgsender_MSG] != IERC165;
[L8280]              assume DType[msgsender_MSG] != ERC165;
[L8281]              assume DType[msgsender_MSG] != IERC20;
[L8282]              assume DType[msgsender_MSG] != ERC20;
[L8283]              assume DType[msgsender_MSG] != ERC20Safe;
[L8284]              assume DType[msgsender_MSG] != DkargoToken;
[L8285]              Alloc[msgsender_MSG] := true;
[L8286]  COND FALSE  !(choice == 23)
[L8292]  COND FALSE  !(choice == 22)
[L8298]  COND FALSE  !(choice == 21)
[L8304]  COND FALSE  !(choice == 20)
[L8310]  COND FALSE  !(choice == 19)
[L8316]  COND FALSE  !(choice == 18)
[L8322]  COND FALSE  !(choice == 17)
[L8328]  COND FALSE  !(choice == 16)
[L8334]  COND FALSE  !(choice == 15)
[L8340]  COND FALSE  !(choice == 14)
[L8346]  COND FALSE  !(choice == 13)
[L8352]  COND TRUE   choice == 12
[L8353]              gas := gas - 21000;
[L8354]  COND TRUE   gas >= 0
[L8355]              assume value_s1257 >= 0 && value_s1257 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8356]              assume msgvalue_MSG == 0;
[L8357]  CALL        call __ret_0_transfer := transfer~address~uint256_DkargoToken(this, msgsender_MSG, msgvalue_MSG, to_s1257, value_s1257);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((p1 != msgsender_MSG && p1 != to_s1257) && msgsender_MSG != to_s1257) && value_s1257 <= _balances_ERC20[this][msgsender_MSG]) && _balances_ERC20[this][to_s1257] + value_s1257 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && value_s1257 >= 0) && value_s1257 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1257] >= 0) && _balances_ERC20[this][to_s1257] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transfer_DkargoToken0 := true;
[L3]                 call_transfer_DkargoToken0 := false;
[L3]                 revert := revert_hold;
[L2562]              havoc __exception;
[L2563]              revert := false;
[L2564]  COND TRUE   __exception
[L2565]              __tmp__Balance := Balance;
[L2566]              __tmp__DType := DType;
[L2567]              __tmp__Alloc := Alloc;
[L2568]              __tmp__balance_ADDR := balance_ADDR;
[L2569]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L2570]              __tmp__sum := sum;
[L2571]              __tmp__M_int_bool := M_int_bool;
[L2572]              __tmp__sum__infcs0 := sum__infcs0;
[L2573]              __tmp__M_Ref_int := M_Ref_int;
[L2574]              __tmp__sum__balances1 := sum__balances1;
[L2575]              __tmp__alloc__allowances_ERC20_lvl0 := alloc__allowances_ERC20_lvl0;
[L2576]              __tmp__sum__allowances2 := sum__allowances2;
[L2577]              __tmp__Length := Length;
[L2578]              __tmp__now := now;
[L2579]              __tmp___dkargoPrefix_DkargoPrefix := _dkargoPrefix_DkargoPrefix;
[L2580]              __tmp___owner_Ownership := _owner_Ownership;
[L2581]              __tmp__prev_AddressChain.NodeInfo := prev_AddressChain.NodeInfo;
[L2582]              __tmp__next_AddressChain.NodeInfo := next_AddressChain.NodeInfo;
[L2583]              __tmp__count_AddressChain.NodeList := count_AddressChain.NodeList;
[L2584]              __tmp__head_AddressChain.NodeList := head_AddressChain.NodeList;
[L2585]              __tmp__tail_AddressChain.NodeList := tail_AddressChain.NodeList;
[L2586]              __tmp__map_AddressChain.NodeList := map_AddressChain.NodeList;
[L2587]              __tmp___slist_AddressChain := _slist_AddressChain;
[L2588]              __tmp___infcs_ERC165 := _infcs_ERC165;
[L2589]              __tmp___supply_ERC20 := _supply_ERC20;
[L2590]              __tmp___balances_ERC20 := _balances_ERC20;
[L2591]              __tmp___allowances_ERC20 := _allowances_ERC20;
[L2592]              __tmp___name_DkargoToken := _name_DkargoToken;
[L2593]              __tmp___symbol_DkargoToken := _symbol_DkargoToken;
[L2594]  CALL        call __ret_0_ := transfer~address~uint256_DkargoToken__fail(this, msgsender_MSG, msgvalue_MSG, to_s1257, value_s1257);
[L5824]  COND TRUE   __tmp__DType[this] == DkargoToken
[L5825]  CALL        call ret_s1257 := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, to_s1257, value_s1257);
[L4974]  COND TRUE   __tmp__DType[this] == DkargoToken
[L4975]  CALL        call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, recipient_s785, amount_s785);
[L5195]              __var_20 := null;
[L5196]  COND FALSE  !(!(sender_s956 != null))
[L5200]              __var_21 := null;
[L5201]  COND TRUE   !(recipient_s956 != null)
[L5202]              revert := true;
[L4975]  RET         call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, recipient_s785, amount_s785);
[L4976]  COND TRUE   revert
[L5825]  RET         call ret_s1257 := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, to_s1257, value_s1257);
[L5826]  COND TRUE   revert
[L2594]  RET         call __ret_0_ := transfer~address~uint256_DkargoToken__fail(this, msgsender_MSG, msgvalue_MSG, to_s1257, value_s1257);
[L2595]              assume revert || gas < 0;
[L8357]  RET         call __ret_0_transfer := transfer~address~uint256_DkargoToken(this, msgsender_MSG, msgvalue_MSG, to_s1257, value_s1257);
[L8451]  RET         call CorralChoice_DkargoToken(this);

[2020-11-25 14:00:31,239 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 14:00:31,240 INFO  L82        PathProgramCache]: Analyzing trace with hash 1948304582, now seen corresponding path program 1 times
[2020-11-25 14:00:31,240 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 14:00:31,265 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-25 14:00:31,294 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-25 14:00:31,390 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 14:00:31,390 INFO  L82        PathProgramCache]: Analyzing trace with hash -1662377562, now seen corresponding path program 1 times
[2020-11-25 14:00:31,391 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 14:00:31,397 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-25 14:00:31,402 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-25 14:00:31,416 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 14:00:31,416 INFO  L82        PathProgramCache]: Analyzing trace with hash -1527612885, now seen corresponding path program 1 times
[2020-11-25 14:00:31,417 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 14:00:31,443 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-25 14:00:31,475 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #4: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #1: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #2: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #3: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #4: 277 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 277 to 547
[2020-11-25 14:00:31,826 WARN  L188               SmtUtils]: Spent 171.00 ms on a formula simplification. DAG size of input: 194 DAG size of output: 186
Garbage collection #1: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #2: 139 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 139 to 277
Garbage collection #3: 277 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 277 to 547
Garbage collection #4: 547 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 547 to 1093
Garbage collection #5: 1093 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 1093 to 2179
Garbage collection #6: 2179 nodes / 0 free / 0.001s / 0.002s total
Resizing node table from 2179 to 4357
Garbage collection #1: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #2: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #3: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #4: 397 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 397 to 787
Garbage collection #5: 787 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 787 to 1571
Garbage collection #6: 1571 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1571 to 3137
Garbage collection #7: 3137 nodes / 0 free / 0.002s / 0.002s total
Resizing node table from 3137 to 6271
[2020-11-25 14:00:31,953 WARN  L188               SmtUtils]: Spent 103.00 ms on a formula simplification. DAG size of input: 131 DAG size of output: 127
[2020-11-25 14:00:32,194 WARN  L188               SmtUtils]: Spent 239.00 ms on a formula simplification that was a NOOP. DAG size: 337
Garbage collection #1: 137 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 137 to 271
Garbage collection #2: 271 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 271 to 541
Garbage collection #3: 541 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 541 to 1069
Garbage collection #4: 1069 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1069 to 2137
Garbage collection #5: 2137 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 2137 to 4273
Garbage collection #6: 4273 nodes / 0 free / 0.001s / 0.002s total
Resizing node table from 4273 to 8543
[2020-11-25 14:00:32,459 WARN  L188               SmtUtils]: Spent 250.00 ms on a formula simplification that was a NOOP. DAG size: 271
[2020-11-25 14:00:33,161 WARN  L188               SmtUtils]: Spent 698.00 ms on a formula simplification. DAG size of input: 362 DAG size of output: 323
Garbage collection #1: 127 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 127 to 251
Garbage collection #2: 251 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 251 to 499
Garbage collection #3: 499 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 499 to 997
Garbage collection #4: 997 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 997 to 1993
Garbage collection #5: 1993 nodes / 0 free / 0.001s / 0.002s total
Resizing node table from 1993 to 3967
Garbage collection #6: 3967 nodes / 0 free / 0.002s / 0.004s total
Resizing node table from 3967 to 7933
Garbage collection #7: 7933 nodes / 0 free / 0.003s / 0.007s total
Resizing node table from 7933 to 15859
Garbage collection #1: 79 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 79 to 157
Garbage collection #2: 157 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 157 to 313
Garbage collection #3: 313 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 313 to 619
Garbage collection #4: 619 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 619 to 1237
Garbage collection #5: 1237 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1237 to 2473
Garbage collection #6: 2473 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2473 to 4943
Garbage collection #7: 4943 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 4943 to 9883
[2020-11-25 14:00:33,423 WARN  L188               SmtUtils]: Spent 208.00 ms on a formula simplification. DAG size of input: 194 DAG size of output: 190
[2020-11-25 14:00:33,661 WARN  L188               SmtUtils]: Spent 236.00 ms on a formula simplification that was a NOOP. DAG size: 413
Garbage collection #1: 167 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 167 to 331
Garbage collection #2: 331 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 331 to 661
Garbage collection #3: 661 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 661 to 1321
Garbage collection #4: 1321 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1321 to 2633
Garbage collection #5: 2633 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2633 to 5261
Garbage collection #6: 5261 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 5261 to 10513
Garbage collection #7: 10513 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 10513 to 21023
[2020-11-25 14:00:33,876 WARN  L188               SmtUtils]: Spent 205.00 ms on a formula simplification that was a NOOP. DAG size: 326
[2020-11-25 14:00:34,070 WARN  L188               SmtUtils]: Spent 192.00 ms on a formula simplification that was a NOOP. DAG size: 326
Garbage collection #1: 127 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 127 to 251
Garbage collection #2: 251 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 251 to 499
Garbage collection #3: 499 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 499 to 997
Garbage collection #4: 997 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 997 to 1993
Garbage collection #5: 1993 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 1993 to 3967
Garbage collection #6: 3967 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 3967 to 7933
Garbage collection #7: 7933 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 7933 to 15859
Garbage collection #1: 71 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 71 to 139
Garbage collection #2: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #3: 277 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 277 to 547
Garbage collection #4: 547 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 547 to 1093
Garbage collection #5: 1093 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1093 to 2179
Garbage collection #6: 2179 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2179 to 4357
Garbage collection #7: 4357 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 4357 to 8713
[2020-11-25 14:00:34,164 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 7 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 7 to 13
Garbage collection #2: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #1: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #2: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #3: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #2: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #3: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #2: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #3: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #4: 223 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 223 to 443
Garbage collection #5: 443 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 443 to 883
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #2: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #3: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #4: 223 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 223 to 443
Garbage collection #5: 443 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 443 to 883
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #5: 397 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 397 to 787
Garbage collection #1: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #2: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #3: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #4: 223 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 223 to 443
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #2: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #3: 43 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 43 to 83
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #2: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #3: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #2: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #3: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #4: 223 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 223 to 443
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #2: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #3: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #4: 223 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 223 to 443
Garbage collection #5: 443 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 443 to 883
Garbage collection #1: 47 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 47 to 89
Garbage collection #2: 89 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 89 to 173
Garbage collection #3: 173 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 173 to 337
Garbage collection #4: 337 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 337 to 673
Garbage collection #5: 673 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 673 to 1327
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #2: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #3: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #4: 397 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 397 to 787
Garbage collection #5: 787 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 787 to 1571
[2020-11-25 14:00:35,224 WARN  L188               SmtUtils]: Spent 351.00 ms on a formula simplification. DAG size of input: 317 DAG size of output: 292
Garbage collection #1: 107 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 107 to 211
Garbage collection #2: 211 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 211 to 421
Garbage collection #3: 421 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 421 to 839
Garbage collection #4: 839 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 839 to 1669
Garbage collection #5: 1669 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1669 to 3331
Garbage collection #6: 3331 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3331 to 6661
Garbage collection #1: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #2: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #3: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #4: 223 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 223 to 443
Garbage collection #5: 443 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 443 to 883
Garbage collection #1: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #2: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #3: 277 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 277 to 547
Garbage collection #4: 547 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 547 to 1093
Garbage collection #5: 1093 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1093 to 2179
Garbage collection #6: 2179 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2179 to 4357
Garbage collection #1: 59 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 59 to 113
Garbage collection #2: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #3: 223 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 223 to 443
Garbage collection #4: 443 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 443 to 883
Garbage collection #5: 883 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 883 to 1759
[2020-11-25 14:00:35,538 WARN  L188               SmtUtils]: Spent 123.00 ms on a formula simplification. DAG size of input: 185 DAG size of output: 184
Garbage collection #1: 59 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 59 to 113
Garbage collection #2: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #3: 223 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 223 to 443
Garbage collection #4: 443 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 443 to 883
Garbage collection #5: 883 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 883 to 1759
Garbage collection #1: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #2: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #3: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #4: 223 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 223 to 443
Garbage collection #5: 443 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 443 to 883
[2020-11-25 14:00:35,749 WARN  L188               SmtUtils]: Spent 179.00 ms on a formula simplification that was a NOOP. DAG size: 366
Garbage collection #1: 137 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 137 to 271
Garbage collection #2: 271 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 271 to 541
Garbage collection #3: 541 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 541 to 1069
Garbage collection #4: 1069 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1069 to 2137
Garbage collection #5: 2137 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2137 to 4273
Garbage collection #6: 4273 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 4273 to 8543
Garbage collection #7: 8543 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 8543 to 17077
Garbage collection #1: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #2: 223 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 223 to 443
Garbage collection #3: 443 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 443 to 883
Garbage collection #4: 883 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 883 to 1759
Garbage collection #5: 1759 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1759 to 3517
Garbage collection #6: 3517 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3517 to 7027
[2020-11-25 14:00:35,928 WARN  L188               SmtUtils]: Spent 174.00 ms on a formula simplification that was a NOOP. DAG size: 328
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #4: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #1: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #2: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #3: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #4: 277 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 277 to 547
Garbage collection #1: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #2: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #3: 277 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 277 to 547
Garbage collection #4: 547 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 547 to 1093
Garbage collection #5: 1093 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1093 to 2179
Garbage collection #6: 2179 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2179 to 4357
Garbage collection #1: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #2: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #3: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #4: 397 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 397 to 787
Garbage collection #5: 787 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 787 to 1571
Garbage collection #6: 1571 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 1571 to 3137
Garbage collection #7: 3137 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 3137 to 6271
[2020-11-25 14:00:36,252 WARN  L188               SmtUtils]: Spent 125.00 ms on a formula simplification that was a NOOP. DAG size: 337
Garbage collection #1: 137 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 137 to 271
Garbage collection #2: 271 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 271 to 541
Garbage collection #3: 541 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 541 to 1069
Garbage collection #4: 1069 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1069 to 2137
Garbage collection #5: 2137 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2137 to 4273
Garbage collection #6: 4273 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 4273 to 8543
[2020-11-25 14:00:36,455 WARN  L188               SmtUtils]: Spent 196.00 ms on a formula simplification that was a NOOP. DAG size: 271
[2020-11-25 14:00:36,995 WARN  L188               SmtUtils]: Spent 538.00 ms on a formula simplification. DAG size of input: 361 DAG size of output: 323
Garbage collection #1: 127 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 127 to 251
Garbage collection #2: 251 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 251 to 499
Garbage collection #3: 499 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 499 to 997
Garbage collection #4: 997 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 997 to 1993
Garbage collection #5: 1993 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1993 to 3967
Garbage collection #6: 3967 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 3967 to 7933
Garbage collection #7: 7933 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 7933 to 15859
Garbage collection #8: 15859 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 15859 to 31699
Garbage collection #1: 79 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 79 to 157
Garbage collection #2: 157 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 157 to 313
Garbage collection #3: 313 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 313 to 619
Garbage collection #4: 619 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 619 to 1237
Garbage collection #5: 1237 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1237 to 2473
Garbage collection #6: 2473 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2473 to 4943
Garbage collection #7: 4943 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 4943 to 9883
[2020-11-25 14:00:37,203 WARN  L188               SmtUtils]: Spent 191.00 ms on a formula simplification. DAG size of input: 194 DAG size of output: 190
[2020-11-25 14:00:37,370 WARN  L188               SmtUtils]: Spent 165.00 ms on a formula simplification that was a NOOP. DAG size: 413
Garbage collection #1: 167 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 167 to 331
Garbage collection #2: 331 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 331 to 661
Garbage collection #3: 661 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 661 to 1321
Garbage collection #4: 1321 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1321 to 2633
Garbage collection #5: 2633 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2633 to 5261
Garbage collection #6: 5261 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 5261 to 10513
Garbage collection #7: 10513 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 10513 to 21023
[2020-11-25 14:00:37,551 WARN  L188               SmtUtils]: Spent 175.00 ms on a formula simplification that was a NOOP. DAG size: 326
[2020-11-25 14:00:38,862 WARN  L188               SmtUtils]: Spent 1.31 s on a formula simplification. DAG size of input: 616 DAG size of output: 604
Garbage collection #1: 239 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 239 to 467
Garbage collection #2: 467 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 467 to 929
Garbage collection #3: 929 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 929 to 1847
Garbage collection #4: 1847 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1847 to 3691
Garbage collection #5: 3691 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3691 to 7369
Garbage collection #6: 7369 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 7369 to 14737
Garbage collection #7: 14737 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 14737 to 29473
Garbage collection #1: 89 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 89 to 173
Garbage collection #2: 173 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 173 to 337
Garbage collection #3: 337 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 337 to 673
Garbage collection #4: 673 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 673 to 1327
Garbage collection #5: 1327 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1327 to 2647
Garbage collection #6: 2647 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2647 to 5281
[2020-11-25 14:00:39,132 WARN  L188               SmtUtils]: Spent 243.00 ms on a formula simplification. DAG size of input: 259 DAG size of output: 256
[2020-11-25 14:00:39,349 WARN  L188               SmtUtils]: Spent 186.00 ms on a formula simplification that was a NOOP. DAG size: 397
Garbage collection #1: 137 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 137 to 271
Garbage collection #2: 271 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 271 to 541
Garbage collection #3: 541 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 541 to 1069
Garbage collection #4: 1069 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1069 to 2137
Garbage collection #5: 2137 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2137 to 4273
Garbage collection #6: 4273 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 4273 to 8543
Garbage collection #7: 8543 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 8543 to 17077
Garbage collection #1: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #2: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #3: 317 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 317 to 631
Garbage collection #4: 631 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 631 to 1259
Garbage collection #5: 1259 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1259 to 2503
Garbage collection #6: 2503 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2503 to 5003
[2020-11-25 14:00:39,808 WARN  L188               SmtUtils]: Spent 356.00 ms on a formula simplification. DAG size of input: 399 DAG size of output: 398
Garbage collection #1: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #2: 277 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 277 to 547
Garbage collection #3: 547 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 547 to 1093
Garbage collection #4: 1093 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1093 to 2179
Garbage collection #5: 2179 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2179 to 4357
Garbage collection #6: 4357 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 4357 to 8713
Garbage collection #7: 8713 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 8713 to 17419
Garbage collection #1: 137 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 137 to 271
Garbage collection #2: 271 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 271 to 541
Garbage collection #3: 541 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 541 to 1069
Garbage collection #4: 1069 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1069 to 2137
Garbage collection #5: 2137 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2137 to 4273
Garbage collection #6: 4273 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 4273 to 8543
Garbage collection #7: 8543 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 8543 to 17077
[2020-11-25 14:00:40,029 WARN  L188               SmtUtils]: Spent 217.00 ms on a formula simplification that was a NOOP. DAG size: 394
[2020-11-25 14:00:40,049 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-25 14:00:40,076 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-25 14:00:40,088 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer CFG 25.11 02:00:40 BasicIcfg
[2020-11-25 14:00:40,088 INFO  L132        PluginConnector]: ------------------------ END BuchiAutomizer----------------------------
[2020-11-25 14:00:40,089 INFO  L168              Benchmark]: Toolchain (without parser) took 15960.58 ms. Allocated memory was 1.0 GB in the beginning and 2.5 GB in the end (delta: 1.4 GB). Free memory was 929.8 MB in the beginning and 2.2 GB in the end (delta: -1.3 GB). Peak memory consumption was 1.5 GB. Max. memory is 15.3 GB.
[2020-11-25 14:00:40,089 INFO  L168              Benchmark]: Boogie PL CUP Parser took 0.15 ms. Allocated memory is still 1.0 GB. Free memory is still 951.3 MB. There was no memory consumed. Max. memory is 15.3 GB.
[2020-11-25 14:00:40,089 INFO  L168              Benchmark]: Boogie Preprocessor took 119.28 ms. Allocated memory is still 1.0 GB. Free memory was 929.8 MB in the beginning and 913.7 MB in the end (delta: 16.1 MB). Peak memory consumption was 16.1 MB. Max. memory is 15.3 GB.
[2020-11-25 14:00:40,090 INFO  L168              Benchmark]: UtopiaSpecLang took 80.86 ms. Allocated memory is still 1.0 GB. Free memory was 913.7 MB in the beginning and 903.0 MB in the end (delta: 10.7 MB). Peak memory consumption was 10.7 MB. Max. memory is 15.3 GB.
[2020-11-25 14:00:40,090 INFO  L168              Benchmark]: Boogie Printer took 23.36 ms. Allocated memory is still 1.0 GB. Free memory was 903.0 MB in the beginning and 897.6 MB in the end (delta: 5.4 MB). Peak memory consumption was 5.4 MB. Max. memory is 15.3 GB.
[2020-11-25 14:00:40,090 INFO  L168              Benchmark]: RCFGBuilder took 1102.01 ms. Allocated memory was 1.0 GB in the beginning and 1.1 GB in the end (delta: 68.7 MB). Free memory was 897.6 MB in the beginning and 927.9 MB in the end (delta: -30.3 MB). Peak memory consumption was 184.9 MB. Max. memory is 15.3 GB.
[2020-11-25 14:00:40,091 INFO  L168              Benchmark]: UtopiaLTL2Aut took 36.96 ms. Allocated memory is still 1.1 GB. Free memory was 927.9 MB in the beginning and 920.4 MB in the end (delta: 7.6 MB). Peak memory consumption was 7.6 MB. Max. memory is 15.3 GB.
[2020-11-25 14:00:40,091 INFO  L168              Benchmark]: BÃ¼chi Program Product took 2456.67 ms. Allocated memory was 1.1 GB in the beginning and 1.3 GB in the end (delta: 184.5 MB). Free memory was 920.4 MB in the beginning and 1.0 GB in the end (delta: -91.0 MB). Peak memory consumption was 477.5 MB. Max. memory is 15.3 GB.
[2020-11-25 14:00:40,092 INFO  L168              Benchmark]: BlockEncodingV2 took 205.08 ms. Allocated memory is still 1.3 GB. Free memory was 1.0 GB in the beginning and 895.8 MB in the end (delta: 115.7 MB). Peak memory consumption was 115.7 MB. Max. memory is 15.3 GB.
[2020-11-25 14:00:40,092 INFO  L168              Benchmark]: BuchiAutomizer took 11933.39 ms. Allocated memory was 1.3 GB in the beginning and 2.5 GB in the end (delta: 1.2 GB). Free memory was 895.8 MB in the beginning and 2.2 GB in the end (delta: -1.4 GB). Peak memory consumption was 1.2 GB. Max. memory is 15.3 GB.
[2020-11-25 14:00:40,094 INFO  L337   ainManager$Toolchain]: #######################  End [Toolchain 1] #######################
 --- Results ---
 * Results from de.uni_freiburg.informatik.ultimate.plugins.blockencoding:
  - StatisticsResult: Initial Icfg
    7636 locations, 13672 edges
  - StatisticsResult: Encoded RCFG
    7444 locations, 13131 edges
 * Results from de.uni_freiburg.informatik.ultimate.core:
  - StatisticsResult: Toolchain Benchmarks
    Benchmark results are:
 * Boogie PL CUP Parser took 0.15 ms. Allocated memory is still 1.0 GB. Free memory is still 951.3 MB. There was no memory consumed. Max. memory is 15.3 GB.
 * Boogie Preprocessor took 119.28 ms. Allocated memory is still 1.0 GB. Free memory was 929.8 MB in the beginning and 913.7 MB in the end (delta: 16.1 MB). Peak memory consumption was 16.1 MB. Max. memory is 15.3 GB.
 * UtopiaSpecLang took 80.86 ms. Allocated memory is still 1.0 GB. Free memory was 913.7 MB in the beginning and 903.0 MB in the end (delta: 10.7 MB). Peak memory consumption was 10.7 MB. Max. memory is 15.3 GB.
 * Boogie Printer took 23.36 ms. Allocated memory is still 1.0 GB. Free memory was 903.0 MB in the beginning and 897.6 MB in the end (delta: 5.4 MB). Peak memory consumption was 5.4 MB. Max. memory is 15.3 GB.
 * RCFGBuilder took 1102.01 ms. Allocated memory was 1.0 GB in the beginning and 1.1 GB in the end (delta: 68.7 MB). Free memory was 897.6 MB in the beginning and 927.9 MB in the end (delta: -30.3 MB). Peak memory consumption was 184.9 MB. Max. memory is 15.3 GB.
 * UtopiaLTL2Aut took 36.96 ms. Allocated memory is still 1.1 GB. Free memory was 927.9 MB in the beginning and 920.4 MB in the end (delta: 7.6 MB). Peak memory consumption was 7.6 MB. Max. memory is 15.3 GB.
 * BÃ¼chi Program Product took 2456.67 ms. Allocated memory was 1.1 GB in the beginning and 1.3 GB in the end (delta: 184.5 MB). Free memory was 920.4 MB in the beginning and 1.0 GB in the end (delta: -91.0 MB). Peak memory consumption was 477.5 MB. Max. memory is 15.3 GB.
 * BlockEncodingV2 took 205.08 ms. Allocated memory is still 1.3 GB. Free memory was 1.0 GB in the beginning and 895.8 MB in the end (delta: 115.7 MB). Peak memory consumption was 115.7 MB. Max. memory is 15.3 GB.
 * BuchiAutomizer took 11933.39 ms. Allocated memory was 1.3 GB in the beginning and 2.5 GB in the end (delta: 1.2 GB). Free memory was 895.8 MB in the beginning and 2.2 GB in the end (delta: -1.4 GB). Peak memory consumption was 1.2 GB. Max. memory is 15.3 GB.
 * Results from de.uni_freiburg.informatik.ultimate.buchiprogramproduct:
  - StatisticsResult: Initial property automaton
    2 locations, 3 edges
  - StatisticsResult: Initial RCFG
    3095 locations, 4213 edges
  - StatisticsResult: BuchiProgram size
    7636 locations, 13672 edges
 * Results from de.uni_freiburg.informatik.ultimate.plugins.generator.traceabstraction:
  - StatisticsResult: Constructed decomposition of program
    Your program was decomposed into 7 terminating modules (7 trivial, 0 deterministic, 0 nondeterministic) and one nonterminating remainder module.7 modules have a trivial ranking function, the largest among these consists of 8 locations. The remainder module has 4896 locations.
  - StatisticsResult: Timing statistics
    BÃ¼chiAutomizer plugin needed 11.8s and 8 iterations.  TraceHistogramMax:3. Analysis of lassos took 9.7s. Construction of modules took 0.6s. BÃ¼chi inclusion checks took 0.5s. Highest rank in rank-based complementation 0. Minimization of det autom 7. Minimization of nondet autom 0. Automata minimization 0.3s AutomataMinimizationTime, 7 MinimizatonAttempts, 1304 StatesRemovedByMinimization, 2 NontrivialMinimizations. Non-live state removal took 0.2s Buchi closure took 0.0s. Biggest automaton had 5198 states and ocurred in iteration 2.	Nontrivial modules had stage [0, 0, 0, 0, 0].	InterpolantCoveringCapabilityFinite: 0/0	InterpolantCoveringCapabilityBuchi: 0/0	HoareTripleCheckerStatistics: 38414 SDtfs, 12198 SDslu, 104507 SDs, 0 SdLazy, 3572 SolverSat, 3130 SolverUnsat, 0 SolverUnknown, 0 SolverNotchecked, 0.6s Time	LassoAnalysisResults: nont1 unkn0 SFLI0 SFLT0 conc0 concLT0 SILN0 SILU7 SILI0 SILT0 lasso0 LassoPreprocessingBenchmarks: LassoTerminationAnalysisBenchmarks: not availableLassoTerminationAnalysisBenchmarks: LassoNonterminationAnalysisSatFixpoint: 0	LassoNonterminationAnalysisSatUnbounded: 0	LassoNonterminationAnalysisUnsat: 0	LassoNonterminationAnalysisUnknown: 0	LassoNonterminationAnalysisTime: 0.0s	
  - TransactionCounterexample: Violation of LTL property LTL
    Found an infinite, lasso-shaped execution that violates the LTL property LTL.
Stem:
address(115792089237316195423570985008687907853269984665640564039457584007913129639968) = (new DkargoToken)({from : 115792089237316195423570985008687907853269984665640564039457584007913129639955, name : 115792089237316195423570985008687907853269984665640564039457584007913129639965, symbol : 115792089237316195423570985008687907853269984665640564039457584007913129639956, supply : 115792089237316195423570985008687907853269984665640564039457584007913129639941});
[L2404]              havoc __exception;
[L2405]              revert := false;
[L2406]  COND FALSE  !(__exception)
[L2439]  CALL        call DkargoToken_DkargoToken__success(this, msgsender_MSG, msgvalue_MSG, name_s1191, symbol_s1191, supply_s1191);
[L5754]  CALL        call Ownership_Ownership__success(this, msgsender_MSG, msgvalue_MSG);
[L4105]  CALL        call Ownership_Ownership_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4087]              assume msgsender_MSG != null;
[L4088]              Balance[this] := 0;
[L4089]              _owner_Ownership[this] := null;
[L4091]              assert { :EventEmitted "OwnershipTransferred_Ownership" } true;
[L4092]              _owner_Ownership[this] := msgsender_MSG;
[L4105]  RET         call Ownership_Ownership_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4106]  COND FALSE  !(revert)
[L5754]  RET         call Ownership_Ownership__success(this, msgsender_MSG, msgvalue_MSG);
[L5755]  COND FALSE  !(revert)
[L5758]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4826]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4811]              assume msgsender_MSG != null;
[L4812]              Balance[this] := 0;
[L4826]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4827]  COND FALSE  !(revert)
[L5758]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5759]  COND FALSE  !(revert)
[L5762]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG, supply_s1191);
[L4914]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4826]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4811]              assume msgsender_MSG != null;
[L4812]              Balance[this] := 0;
[L4826]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4827]  COND FALSE  !(revert)
[L4914]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4915]  COND FALSE  !(revert)
[L4918]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, supply_s747);
[L4869]              assume msgsender_MSG != null;
[L4870]              Balance[this] := 0;
[L4871]              _supply_ERC20[this] := 0;
[L4872]              _balances_ERC20[this] := zeroRefintArr();
[L4873]              sum__balances1[this] := 0;
[L4874]              _allowances_ERC20[this] := zeroRefRefintArr();
[L4875]              sum__allowances2[this] := 0;
[L4877]              pebs_s747 := supply_s747;
[L4878]  COND TRUE   DType[this] == DkargoToken
[L4879]  CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, pebs_s747);
[L5283]              __var_24 := null;
[L5284]  COND FALSE  !(!(account_s999 != null))
[L5288]  CALL        call __var_25 := add~uint256~uint256_SafeMath__success(this, this, 0, _supply_ERC20[this], amount_s999);
[L4213]              c_s130 := (a_s130 + b_s130) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4214]  COND FALSE  !(!(c_s130 >= a_s130))
[L4218]              __ret_0_ := c_s130;
[L5288]  RET         call __var_25 := add~uint256~uint256_SafeMath__success(this, this, 0, _supply_ERC20[this], amount_s999);
[L5289]  COND FALSE  !(revert)
[L5292]              _supply_ERC20[this] := __var_25;
[L5293]  CALL        call __var_26 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s999], amount_s999);
[L4213]              c_s130 := (a_s130 + b_s130) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4214]  COND FALSE  !(!(c_s130 >= a_s130))
[L4218]              __ret_0_ := c_s130;
[L5293]  RET         call __var_26 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s999], amount_s999);
[L5294]  COND FALSE  !(revert)
[L5297]              sum__balances1[this] := sum__balances1[this] - _balances_ERC20[this][account_s999];
[L5298]              _balances_ERC20[this][account_s999] := __var_26;
[L5299]              sum__balances1[this] := sum__balances1[this] + _balances_ERC20[this][account_s999];
[L5300]              assert { :EventEmitted "Transfer_ERC20" } true;
[L4879]  RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, pebs_s747);
[L4880]  COND FALSE  !(revert)
[L4918]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, supply_s747);
[L4919]  COND FALSE  !(revert)
[L5762]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG, supply_s1191);
[L5763]  COND FALSE  !(revert)
[L5766]  CALL        call ERC20Safe_ERC20Safe__success(this, msgsender_MSG, msgvalue_MSG);
[L5382]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4826]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4811]              assume msgsender_MSG != null;
[L4812]              Balance[this] := 0;
[L4826]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4827]  COND FALSE  !(revert)
[L5382]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5383]  COND FALSE  !(revert)
[L5386]  CALL        call ERC20Safe_ERC20Safe_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5363]              assume msgsender_MSG != null;
[L5364]              Balance[this] := 0;
[L5386]  RET         call ERC20Safe_ERC20Safe_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5387]  COND FALSE  !(revert)
[L5766]  RET         call ERC20Safe_ERC20Safe__success(this, msgsender_MSG, msgvalue_MSG);
[L5767]  COND FALSE  !(revert)
[L5770]  CALL        call AddressChain_AddressChain__success(this, msgsender_MSG, msgvalue_MSG);
[L4362]  CALL        call AddressChain_AddressChain_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4341]              assume msgsender_MSG != null;
[L4342]              Balance[this] := 0;
[L4344]  CALL        call __var_3 := FreshRefGenerator__success();
[L3984]              havoc newRef;
[L3985]              assume Alloc[newRef] == false;
[L3986]              Alloc[newRef] := true;
[L3987]              assume newRef != null;
[L4344]  RET         call __var_3 := FreshRefGenerator__success();
[L4345]  COND FALSE  !(revert)
[L4348]              _slist_AddressChain[this] := __var_3;
[L4362]  RET         call AddressChain_AddressChain_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4363]  COND FALSE  !(revert)
[L5770]  RET         call AddressChain_AddressChain__success(this, msgsender_MSG, msgvalue_MSG);
[L5771]  COND FALSE  !(revert)
[L5774]  CALL        call IERC165_IERC165__success(this, msgsender_MSG, msgvalue_MSG);
[L4690]  CALL        call IERC165_IERC165_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4675]              assume msgsender_MSG != null;
[L4676]              Balance[this] := 0;
[L4690]  RET         call IERC165_IERC165_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4691]  COND FALSE  !(revert)
[L5774]  RET         call IERC165_IERC165__success(this, msgsender_MSG, msgvalue_MSG);
[L5775]  COND FALSE  !(revert)
[L5778]  CALL        call ERC165_ERC165__success(this, msgsender_MSG, msgvalue_MSG);
[L4760]  CALL        call IERC165_IERC165__success(this, msgsender_MSG, msgvalue_MSG);
[L4690]  CALL        call IERC165_IERC165_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4675]              assume msgsender_MSG != null;
[L4676]              Balance[this] := 0;
[L4690]  RET         call IERC165_IERC165_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4691]  COND FALSE  !(revert)
[L4760]  RET         call IERC165_IERC165__success(this, msgsender_MSG, msgvalue_MSG);
[L4761]  COND FALSE  !(revert)
[L4764]  CALL        call ERC165_ERC165_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4724]              assume msgsender_MSG != null;
[L4725]              Balance[this] := 0;
[L4726]              _infcs_ERC165[this] := zerointboolArr();
[L4728]              __var_16 := 33540519;
[L4729]  COND TRUE   DType[this] == DkargoToken
[L4730]  CALL        call _registerInterface~bytes4_ERC165__success(this, msgsender_MSG, msgvalue_MSG, 33540519);
[L4793]  COND FALSE  !(!(infcid_s644 != -1))
[L4797]              _infcs_ERC165[this][infcid_s644] := true;
[L4730]  RET         call _registerInterface~bytes4_ERC165__success(this, msgsender_MSG, msgvalue_MSG, 33540519);
[L4731]  COND FALSE  !(revert)
[L4764]  RET         call ERC165_ERC165_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4765]  COND FALSE  !(revert)
[L5778]  RET         call ERC165_ERC165__success(this, msgsender_MSG, msgvalue_MSG);
[L5779]  COND FALSE  !(revert)
[L5782]  CALL        call DkargoPrefix_DkargoPrefix__success(this, msgsender_MSG, msgvalue_MSG);
[L4046]  CALL        call DkargoPrefix_DkargoPrefix_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4030]              assume msgsender_MSG != null;
[L4031]              Balance[this] := 0;
[L4032]              _dkargoPrefix_DkargoPrefix[this] := -1676636045;
[L4046]  RET         call DkargoPrefix_DkargoPrefix_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4047]  COND FALSE  !(revert)
[L5782]  RET         call DkargoPrefix_DkargoPrefix__success(this, msgsender_MSG, msgvalue_MSG);
[L5783]  COND FALSE  !(revert)
[L5786]  CALL        call DkargoToken_DkargoToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1191, symbol_s1191, supply_s1191);
[L5676]              assume msgsender_MSG != null;
[L5677]              Balance[this] := 0;
[L5678]              _name_DkargoToken[this] := -1676636045;
[L5679]              _symbol_DkargoToken[this] := -1676636045;
[L5681]  COND TRUE   DType[this] == DkargoToken
[L5682]  CALL        call _setDkargoPrefix~string_DkargoPrefix__success(this, msgsender_MSG, msgvalue_MSG, 978340553);
[L4071]              _dkargoPrefix_DkargoPrefix[this] := prefix_s21;
[L5682]  RET         call _setDkargoPrefix~string_DkargoPrefix__success(this, msgsender_MSG, msgvalue_MSG, 978340553);
[L5683]  COND FALSE  !(revert)
[L5689]              __var_39 := -1804674067;
[L5690]  COND TRUE   DType[this] == DkargoToken
[L5691]  CALL        call _registerInterface~bytes4_ERC165__success(this, msgsender_MSG, msgvalue_MSG, -1804674067);
[L4793]  COND FALSE  !(!(infcid_s644 != -1))
[L4797]              _infcs_ERC165[this][infcid_s644] := true;
[L5691]  RET         call _registerInterface~bytes4_ERC165__success(this, msgsender_MSG, msgvalue_MSG, -1804674067);
[L5692]  COND FALSE  !(revert)
[L5698]              _name_DkargoToken[this] := name_s1191;
[L5699]              _symbol_DkargoToken[this] := symbol_s1191;
[L5700]  COND TRUE   DType[this] == DkargoToken
[L5701]  CALL        call _linkChain~address_AddressChain__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L4505]              __var_6 := null;
[L4506]  COND FALSE  !(!(node_s455 != null))
[L4510]  COND TRUE   DType[this] == DkargoToken
[L4511]  CALL        call __var_7 := isLinked~address_AddressChain__success(this, msgsender_MSG, msgvalue_MSG, node_s455);
[L4447]  COND FALSE  !((count_AddressChain.NodeList[_slist_AddressChain[this]] == 1 && head_AddressChain.NodeList[_slist_AddressChain[this]] == node_s376) && tail_AddressChain.NodeList[_slist_AddressChain[this]] == node_s376)
[L4451]              __var_4 := null;
[L4452]              __var_5 := null;
[L4453]              __ret_0_ := (if prev_AddressChain.NodeInfo[M_Ref_Ref[map_AddressChain.NodeList[_slist_AddressChain[this]]][node_s376]] == null && next_AddressChain.NodeInfo[M_Ref_Ref[map_AddressChain.NodeList[_slist_AddressChain[this]]][node_s376]] == null then false else true);
[L4511]  RET         call __var_7 := isLinked~address_AddressChain__success(this, msgsender_MSG, msgvalue_MSG, node_s455);
[L4512]  COND FALSE  !(revert)
[L4523]  COND FALSE  !(!!__var_7)
[L4527]  COND TRUE   count_AddressChain.NodeList[_slist_AddressChain[this]] == 0
[L4528]              tail_AddressChain.NodeList[_slist_AddressChain[this]] := node_s455;
[L4529]              head_AddressChain.NodeList[_slist_AddressChain[this]] := node_s455;
[L4535]  CALL        call __var_8 := add~uint256~uint256_SafeMath__success(this, this, 0, count_AddressChain.NodeList[_slist_AddressChain[this]], 1);
[L4213]              c_s130 := (a_s130 + b_s130) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4214]  COND FALSE  !(!(c_s130 >= a_s130))
[L4218]              __ret_0_ := c_s130;
[L4535]  RET         call __var_8 := add~uint256~uint256_SafeMath__success(this, this, 0, count_AddressChain.NodeList[_slist_AddressChain[this]], 1);
[L4536]  COND FALSE  !(revert)
[L4539]              count_AddressChain.NodeList[_slist_AddressChain[this]] := __var_8;
[L4540]              assert { :EventEmitted "AddressChainLinked_AddressChain" } true;
[L5701]  RET         call _linkChain~address_AddressChain__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5702]  COND FALSE  !(revert)
[L5786]  RET         call DkargoToken_DkargoToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1191, symbol_s1191, supply_s1191);
[L5787]  COND FALSE  !(revert)
[L2439]  RET         call DkargoToken_DkargoToken__success(this, msgsender_MSG, msgvalue_MSG, name_s1191, symbol_s1191, supply_s1191);
[L2440]              assume !revert && gas >= 0;
[L8447]  RET         call DkargoToken_DkargoToken(this, msgsender_MSG, msgvalue_MSG, name_s1191, symbol_s1191, supply_s1191);
DkargoToken(115792089237316195423570985008687907853269984665640564039457584007913129639968).transfer~address~uint256.gas(3979002)({from : 115792089237316195423570985008687907853269984665640564039457584007913129639955, to : 0, value : 0});
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((p1 != msgsender_MSG && p1 != to_s1257) && msgsender_MSG != to_s1257) && value_s1257 <= _balances_ERC20[this][msgsender_MSG]) && _balances_ERC20[this][to_s1257] + value_s1257 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && value_s1257 >= 0) && value_s1257 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1257] >= 0) && _balances_ERC20[this][to_s1257] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transfer_DkargoToken0 := true;
[L3]                 call_transfer_DkargoToken0 := false;
[L3]                 revert := revert_hold;
[L2562]              havoc __exception;
[L2563]              revert := false;
[L2564]  COND TRUE   __exception
[L2565]              __tmp__Balance := Balance;
[L2566]              __tmp__DType := DType;
[L2567]              __tmp__Alloc := Alloc;
[L2568]              __tmp__balance_ADDR := balance_ADDR;
[L2569]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L2570]              __tmp__sum := sum;
[L2571]              __tmp__M_int_bool := M_int_bool;
[L2572]              __tmp__sum__infcs0 := sum__infcs0;
[L2573]              __tmp__M_Ref_int := M_Ref_int;
[L2574]              __tmp__sum__balances1 := sum__balances1;
[L2575]              __tmp__alloc__allowances_ERC20_lvl0 := alloc__allowances_ERC20_lvl0;
[L2576]              __tmp__sum__allowances2 := sum__allowances2;
[L2577]              __tmp__Length := Length;
[L2578]              __tmp__now := now;
[L2579]              __tmp___dkargoPrefix_DkargoPrefix := _dkargoPrefix_DkargoPrefix;
[L2580]              __tmp___owner_Ownership := _owner_Ownership;
[L2581]              __tmp__prev_AddressChain.NodeInfo := prev_AddressChain.NodeInfo;
[L2582]              __tmp__next_AddressChain.NodeInfo := next_AddressChain.NodeInfo;
[L2583]              __tmp__count_AddressChain.NodeList := count_AddressChain.NodeList;
[L2584]              __tmp__head_AddressChain.NodeList := head_AddressChain.NodeList;
[L2585]              __tmp__tail_AddressChain.NodeList := tail_AddressChain.NodeList;
[L2586]              __tmp__map_AddressChain.NodeList := map_AddressChain.NodeList;
[L2587]              __tmp___slist_AddressChain := _slist_AddressChain;
[L2588]              __tmp___infcs_ERC165 := _infcs_ERC165;
[L2589]              __tmp___supply_ERC20 := _supply_ERC20;
[L2590]              __tmp___balances_ERC20 := _balances_ERC20;
[L2591]              __tmp___allowances_ERC20 := _allowances_ERC20;
[L2592]              __tmp___name_DkargoToken := _name_DkargoToken;
[L2593]              __tmp___symbol_DkargoToken := _symbol_DkargoToken;
[L2594]  CALL        call __ret_0_ := transfer~address~uint256_DkargoToken__fail(this, msgsender_MSG, msgvalue_MSG, to_s1257, value_s1257);
[L5824]  COND TRUE   __tmp__DType[this] == DkargoToken
[L5825]  CALL        call ret_s1257 := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, to_s1257, value_s1257);
[L4974]  COND TRUE   __tmp__DType[this] == DkargoToken
[L4975]  CALL        call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, recipient_s785, amount_s785);
[L5195]              __var_20 := null;
[L5196]  COND FALSE  !(!(sender_s956 != null))
[L5200]              __var_21 := null;
[L5201]  COND TRUE   !(recipient_s956 != null)
[L5202]              revert := true;
[L4975]  RET         call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, recipient_s785, amount_s785);
[L4976]  COND TRUE   revert
[L5825]  RET         call ret_s1257 := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, to_s1257, value_s1257);
[L5826]  COND TRUE   revert
[L2594]  RET         call __ret_0_ := transfer~address~uint256_DkargoToken__fail(this, msgsender_MSG, msgvalue_MSG, to_s1257, value_s1257);
[L2595]              assume revert || gas < 0;
[L8357]  RET         call __ret_0_transfer := transfer~address~uint256_DkargoToken(this, msgsender_MSG, msgvalue_MSG, to_s1257, value_s1257);

Loop:
DkargoToken(115792089237316195423570985008687907853269984665640564039457584007913129639968).transfer~address~uint256.gas(3979001)({from : 115792089237316195423570985008687907853269984665640564039457584007913129639952, to : 0, value : 0});
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((p1 != msgsender_MSG && p1 != to_s1257) && msgsender_MSG != to_s1257) && value_s1257 <= _balances_ERC20[this][msgsender_MSG]) && _balances_ERC20[this][to_s1257] + value_s1257 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && value_s1257 >= 0) && value_s1257 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1257] >= 0) && _balances_ERC20[this][to_s1257] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transfer_DkargoToken0 := true;
[L3]                 call_transfer_DkargoToken0 := false;
[L3]                 revert := revert_hold;
[L2562]              havoc __exception;
[L2563]              revert := false;
[L2564]  COND TRUE   __exception
[L2565]              __tmp__Balance := Balance;
[L2566]              __tmp__DType := DType;
[L2567]              __tmp__Alloc := Alloc;
[L2568]              __tmp__balance_ADDR := balance_ADDR;
[L2569]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L2570]              __tmp__sum := sum;
[L2571]              __tmp__M_int_bool := M_int_bool;
[L2572]              __tmp__sum__infcs0 := sum__infcs0;
[L2573]              __tmp__M_Ref_int := M_Ref_int;
[L2574]              __tmp__sum__balances1 := sum__balances1;
[L2575]              __tmp__alloc__allowances_ERC20_lvl0 := alloc__allowances_ERC20_lvl0;
[L2576]              __tmp__sum__allowances2 := sum__allowances2;
[L2577]              __tmp__Length := Length;
[L2578]              __tmp__now := now;
[L2579]              __tmp___dkargoPrefix_DkargoPrefix := _dkargoPrefix_DkargoPrefix;
[L2580]              __tmp___owner_Ownership := _owner_Ownership;
[L2581]              __tmp__prev_AddressChain.NodeInfo := prev_AddressChain.NodeInfo;
[L2582]              __tmp__next_AddressChain.NodeInfo := next_AddressChain.NodeInfo;
[L2583]              __tmp__count_AddressChain.NodeList := count_AddressChain.NodeList;
[L2584]              __tmp__head_AddressChain.NodeList := head_AddressChain.NodeList;
[L2585]              __tmp__tail_AddressChain.NodeList := tail_AddressChain.NodeList;
[L2586]              __tmp__map_AddressChain.NodeList := map_AddressChain.NodeList;
[L2587]              __tmp___slist_AddressChain := _slist_AddressChain;
[L2588]              __tmp___infcs_ERC165 := _infcs_ERC165;
[L2589]              __tmp___supply_ERC20 := _supply_ERC20;
[L2590]              __tmp___balances_ERC20 := _balances_ERC20;
[L2591]              __tmp___allowances_ERC20 := _allowances_ERC20;
[L2592]              __tmp___name_DkargoToken := _name_DkargoToken;
[L2593]              __tmp___symbol_DkargoToken := _symbol_DkargoToken;
[L2594]  CALL        call __ret_0_ := transfer~address~uint256_DkargoToken__fail(this, msgsender_MSG, msgvalue_MSG, to_s1257, value_s1257);
[L5824]  COND TRUE   __tmp__DType[this] == DkargoToken
[L5825]  CALL        call ret_s1257 := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, to_s1257, value_s1257);
[L4974]  COND TRUE   __tmp__DType[this] == DkargoToken
[L4975]  CALL        call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, recipient_s785, amount_s785);
[L5195]              __var_20 := null;
[L5196]  COND FALSE  !(!(sender_s956 != null))
[L5200]              __var_21 := null;
[L5201]  COND TRUE   !(recipient_s956 != null)
[L5202]              revert := true;
[L4975]  RET         call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, recipient_s785, amount_s785);
[L4976]  COND TRUE   revert
[L5825]  RET         call ret_s1257 := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, to_s1257, value_s1257);
[L5826]  COND TRUE   revert
[L2594]  RET         call __ret_0_ := transfer~address~uint256_DkargoToken__fail(this, msgsender_MSG, msgvalue_MSG, to_s1257, value_s1257);
[L2595]              assume revert || gas < 0;
[L8357]  RET         call __ret_0_transfer := transfer~address~uint256_DkargoToken(this, msgsender_MSG, msgvalue_MSG, to_s1257, value_s1257);

End of lasso representation.
RESULT: Ultimate could not prove your program: Toolchain returned no result.
Received shutdown request...
