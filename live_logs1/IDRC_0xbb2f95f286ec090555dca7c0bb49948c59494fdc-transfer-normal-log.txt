This is Ultimate 0.1.24-f1553f5-m
[2020-11-25 18:05:03,769 INFO  L170        SettingsManager]: Resetting all preferences to default values...
[2020-11-25 18:05:03,770 INFO  L174        SettingsManager]: Resetting UltimateCore preferences to default values
[2020-11-25 18:05:03,782 INFO  L177        SettingsManager]: Ultimate Commandline Interface provides no preferences, ignoring...
[2020-11-25 18:05:03,783 INFO  L174        SettingsManager]: Resetting Boogie Preprocessor preferences to default values
[2020-11-25 18:05:03,783 INFO  L174        SettingsManager]: Resetting Boogie Procedure Inliner preferences to default values
[2020-11-25 18:05:03,784 INFO  L174        SettingsManager]: Resetting Abstract Interpretation preferences to default values
[2020-11-25 18:05:03,786 INFO  L174        SettingsManager]: Resetting LassoRanker preferences to default values
[2020-11-25 18:05:03,787 INFO  L174        SettingsManager]: Resetting Reaching Definitions preferences to default values
[2020-11-25 18:05:03,788 INFO  L174        SettingsManager]: Resetting SyntaxChecker preferences to default values
[2020-11-25 18:05:03,789 INFO  L177        SettingsManager]: BÃ¼chi Program Product provides no preferences, ignoring...
[2020-11-25 18:05:03,789 INFO  L174        SettingsManager]: Resetting LTL2Aut preferences to default values
[2020-11-25 18:05:03,790 INFO  L174        SettingsManager]: Resetting PEA to Boogie preferences to default values
[2020-11-25 18:05:03,790 INFO  L174        SettingsManager]: Resetting BlockEncodingV2 preferences to default values
[2020-11-25 18:05:03,791 INFO  L174        SettingsManager]: Resetting ChcToBoogie preferences to default values
[2020-11-25 18:05:03,792 INFO  L174        SettingsManager]: Resetting AutomataScriptInterpreter preferences to default values
[2020-11-25 18:05:03,793 INFO  L174        SettingsManager]: Resetting BuchiAutomizer preferences to default values
[2020-11-25 18:05:03,794 INFO  L174        SettingsManager]: Resetting CACSL2BoogieTranslator preferences to default values
[2020-11-25 18:05:03,795 INFO  L174        SettingsManager]: Resetting CodeCheck preferences to default values
[2020-11-25 18:05:03,797 INFO  L174        SettingsManager]: Resetting InvariantSynthesis preferences to default values
[2020-11-25 18:05:03,797 INFO  L174        SettingsManager]: Resetting RCFGBuilder preferences to default values
[2020-11-25 18:05:03,798 INFO  L174        SettingsManager]: Resetting TraceAbstraction preferences to default values
[2020-11-25 18:05:03,800 INFO  L177        SettingsManager]: TraceAbstractionConcurrent provides no preferences, ignoring...
[2020-11-25 18:05:03,800 INFO  L177        SettingsManager]: TraceAbstractionWithAFAs provides no preferences, ignoring...
[2020-11-25 18:05:03,800 INFO  L174        SettingsManager]: Resetting TreeAutomizer preferences to default values
[2020-11-25 18:05:03,801 INFO  L174        SettingsManager]: Resetting IcfgToChc preferences to default values
[2020-11-25 18:05:03,801 INFO  L174        SettingsManager]: Resetting IcfgTransformer preferences to default values
[2020-11-25 18:05:03,802 INFO  L177        SettingsManager]: ReqToTest provides no preferences, ignoring...
[2020-11-25 18:05:03,802 INFO  L174        SettingsManager]: Resetting UtopiaLTL2Aut preferences to default values
[2020-11-25 18:05:03,802 INFO  L174        SettingsManager]: Resetting UtopiaSpecLang preferences to default values
[2020-11-25 18:05:03,803 INFO  L174        SettingsManager]: Resetting Boogie Printer preferences to default values
[2020-11-25 18:05:03,803 INFO  L174        SettingsManager]: Resetting ChcSmtPrinter preferences to default values
[2020-11-25 18:05:03,804 INFO  L174        SettingsManager]: Resetting ReqPrinter preferences to default values
[2020-11-25 18:05:03,804 INFO  L174        SettingsManager]: Resetting Witness Printer preferences to default values
[2020-11-25 18:05:03,805 INFO  L177        SettingsManager]: Boogie PL CUP Parser provides no preferences, ignoring...
[2020-11-25 18:05:03,805 INFO  L174        SettingsManager]: Resetting CDTParser preferences to default values
[2020-11-25 18:05:03,806 INFO  L177        SettingsManager]: AutomataScriptParser provides no preferences, ignoring...
[2020-11-25 18:05:03,806 INFO  L177        SettingsManager]: ReqParser provides no preferences, ignoring...
[2020-11-25 18:05:03,806 INFO  L174        SettingsManager]: Resetting SmtParser preferences to default values
[2020-11-25 18:05:03,807 INFO  L174        SettingsManager]: Resetting Witness Parser preferences to default values
[2020-11-25 18:05:03,807 INFO  L181        SettingsManager]: Finished resetting all preferences to default values...
[2020-11-25 18:05:03,807 INFO  L98         SettingsManager]: Beginning loading settings from /mnt/data0/jon/SmartPulseTool/SmartPulse/settings.epf
[2020-11-25 18:05:03,815 INFO  L110        SettingsManager]: Loading preferences was successful
[2020-11-25 18:05:03,815 INFO  L112        SettingsManager]: Preferences different from defaults after loading the file:
[2020-11-25 18:05:03,816 INFO  L131        SettingsManager]: Preferences of LTL2Aut differ from their defaults:
[2020-11-25 18:05:03,816 INFO  L133        SettingsManager]:  * Read property from file=true
[2020-11-25 18:05:03,817 INFO  L133        SettingsManager]:  * Path to LTL*BA executable (LTL2BA, LTL3BA)=/mnt/data0/jon/SmartPulseTool/ltl2ba
[2020-11-25 18:05:03,817 INFO  L131        SettingsManager]: Preferences of BlockEncodingV2 differ from their defaults:
[2020-11-25 18:05:03,817 INFO  L133        SettingsManager]:  * Maximize final states=false
[2020-11-25 18:05:03,817 INFO  L133        SettingsManager]:  * Minimize states even if more edges are added than removed.=true
[2020-11-25 18:05:03,817 INFO  L133        SettingsManager]:  * Minimize states using LBE with the strategy=NONE
[2020-11-25 18:05:03,817 INFO  L131        SettingsManager]: Preferences of BuchiAutomizer differ from their defaults:
[2020-11-25 18:05:03,817 INFO  L133        SettingsManager]:  * Compute Interpolants along a Counterexample=Craig_TreeInterpolation
[2020-11-25 18:05:03,817 INFO  L133        SettingsManager]:  * Use old map elimination=false
[2020-11-25 18:05:03,817 INFO  L133        SettingsManager]:  * Try twofold refinement=false
[2020-11-25 18:05:03,818 INFO  L131        SettingsManager]: Preferences of CACSL2BoogieTranslator differ from their defaults:
[2020-11-25 18:05:03,818 INFO  L133        SettingsManager]:  * Check unreachability of error function in SV-COMP mode=false
[2020-11-25 18:05:03,818 INFO  L133        SettingsManager]:  * Overapproximate operations on floating types=true
[2020-11-25 18:05:03,818 INFO  L133        SettingsManager]:  * Check division by zero=IGNORE
[2020-11-25 18:05:03,818 INFO  L133        SettingsManager]:  * Pointer to allocated memory at dereference=ASSUME
[2020-11-25 18:05:03,818 INFO  L133        SettingsManager]:  * If two pointers are subtracted or compared they have the same base address=ASSUME
[2020-11-25 18:05:03,818 INFO  L133        SettingsManager]:  * Check array bounds for arrays that are off heap=ASSUME
[2020-11-25 18:05:03,818 INFO  L133        SettingsManager]:  * Check if freed pointer was valid=false
[2020-11-25 18:05:03,818 INFO  L133        SettingsManager]:  * Use constant arrays=true
[2020-11-25 18:05:03,818 INFO  L133        SettingsManager]:  * Pointer base address is valid at dereference=ASSUME
[2020-11-25 18:05:03,819 INFO  L131        SettingsManager]: Preferences of RCFGBuilder differ from their defaults:
[2020-11-25 18:05:03,819 INFO  L133        SettingsManager]:  * Size of a code block=SingleStatement
[2020-11-25 18:05:03,819 INFO  L133        SettingsManager]:  * SMT solver=Internal_SMTInterpol
[2020-11-25 18:05:03,850 INFO  L81    nceAwareModelManager]: Repository-Root is: /tmp
[2020-11-25 18:05:03,863 INFO  L259   ainManager$Toolchain]: [Toolchain 1]: Applicable parser(s) successfully (re)initialized
[2020-11-25 18:05:03,865 INFO  L215   ainManager$Toolchain]: [Toolchain 1]: Toolchain selected.
[2020-11-25 18:05:03,867 INFO  L271        PluginConnector]: Initializing Boogie PL CUP Parser...
[2020-11-25 18:05:03,867 INFO  L276        PluginConnector]: Boogie PL CUP Parser initialized
[2020-11-25 18:05:03,868 INFO  L430   ainManager$Toolchain]: [Toolchain 1]: Parsing single file: /mnt/data0/jon/SmartPulseTool/IDRC_0xbb2f95f286ec090555dca7c0bb49948c59494fdc_transfer-normal.bpl
[2020-11-25 18:05:03,868 INFO  L111           BoogieParser]: Parsing: '/mnt/data0/jon/SmartPulseTool/IDRC_0xbb2f95f286ec090555dca7c0bb49948c59494fdc_transfer-normal.bpl'
[2020-11-25 18:05:03,970 INFO  L297   ainManager$Toolchain]: ####################### [Toolchain 1] #######################
[2020-11-25 18:05:03,972 INFO  L131        ToolchainWalker]: Walking toolchain with 8 elements.
[2020-11-25 18:05:03,972 INFO  L113        PluginConnector]: ------------------------Boogie Preprocessor----------------------------
[2020-11-25 18:05:03,972 INFO  L271        PluginConnector]: Initializing Boogie Preprocessor...
[2020-11-25 18:05:03,972 INFO  L276        PluginConnector]: Boogie Preprocessor initialized
[2020-11-25 18:05:03,989 INFO  L185        PluginConnector]: Executing the observer EnsureBoogieModelObserver from plugin Boogie Preprocessor for "IDRC_0xbb2f95f286ec090555dca7c0bb49948c59494fdc_transfer-normal.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 06:05:03" (1/1) ...
[2020-11-25 18:05:03,991 INFO  L185        PluginConnector]: Executing the observer TypeChecker from plugin Boogie Preprocessor for "IDRC_0xbb2f95f286ec090555dca7c0bb49948c59494fdc_transfer-normal.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 06:05:03" (1/1) ...
[2020-11-25 18:05:04,029 INFO  L185        PluginConnector]: Executing the observer ConstExpander from plugin Boogie Preprocessor for "IDRC_0xbb2f95f286ec090555dca7c0bb49948c59494fdc_transfer-normal.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 06:05:03" (1/1) ...
[2020-11-25 18:05:04,030 INFO  L185        PluginConnector]: Executing the observer StructExpander from plugin Boogie Preprocessor for "IDRC_0xbb2f95f286ec090555dca7c0bb49948c59494fdc_transfer-normal.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 06:05:03" (1/1) ...
[2020-11-25 18:05:04,058 INFO  L185        PluginConnector]: Executing the observer UnstructureCode from plugin Boogie Preprocessor for "IDRC_0xbb2f95f286ec090555dca7c0bb49948c59494fdc_transfer-normal.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 06:05:03" (1/1) ...
[2020-11-25 18:05:04,070 INFO  L185        PluginConnector]: Executing the observer FunctionInliner from plugin Boogie Preprocessor for "IDRC_0xbb2f95f286ec090555dca7c0bb49948c59494fdc_transfer-normal.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 06:05:03" (1/1) ...
[2020-11-25 18:05:04,082 INFO  L185        PluginConnector]: Executing the observer BoogieSymbolTableConstructor from plugin Boogie Preprocessor for "IDRC_0xbb2f95f286ec090555dca7c0bb49948c59494fdc_transfer-normal.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 06:05:03" (1/1) ...
[2020-11-25 18:05:04,096 INFO  L132        PluginConnector]: ------------------------ END Boogie Preprocessor----------------------------
[2020-11-25 18:05:04,097 INFO  L113        PluginConnector]: ------------------------UtopiaSpecLang----------------------------
[2020-11-25 18:05:04,097 INFO  L271        PluginConnector]: Initializing UtopiaSpecLang...
[2020-11-25 18:05:04,100 INFO  L276        PluginConnector]: UtopiaSpecLang initialized
[2020-11-25 18:05:04,107 INFO  L185        PluginConnector]: Executing the observer UtopiaSpecLangObserver from plugin UtopiaSpecLang for "IDRC_0xbb2f95f286ec090555dca7c0bb49948c59494fdc_transfer-normal.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 06:05:03" (1/1) ...
[2020-11-25 18:05:04,130 INFO  L1012  opiaSpecLangObserver]: Parsing LTLPlus Formula to AstNode: [](started(TokenERC20.transfer(to, value), p1 != msg.sender && p1 != to && msg.sender != to && value <= balances_TokenERC20[this][msg.sender] && balances_TokenERC20[this][to] + value < 0x10000000000000000000000000000000000000000000000000000000000000000 && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_TokenERC20[this][to] >= 0 && balances_TokenERC20[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_TokenERC20[this][msg.sender] >= 0 &&  balances_TokenERC20[this][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(finished(TokenERC20.transfer(to, value), return == true && balances_TokenERC20[this][msg.sender] == old(balances_TokenERC20[this][msg.sender]) - value && balances_TokenERC20[this][to] == old(balances_TokenERC20[this][to]) + value && _totalSupply_TokenERC20[this] == old(_totalSupply_TokenERC20[this]) && allowed_TokenERC20[this] == old(allowed_TokenERC20[this]) && balances_TokenERC20[this][p1] == old(balances_TokenERC20[this][p1]) && aSBlock_IDRC[this] == old(aSBlock_IDRC[this]) && aEBlock_IDRC[this] == old(aEBlock_IDRC[this]) && aCap_IDRC[this] == old(aCap_IDRC[this]) && aTot_IDRC[this] == old(aTot_IDRC[this]) && aAmt_IDRC[this] == old(aAmt_IDRC[this]) && sSBlock_IDRC[this] == old(sSBlock_IDRC[this]) && sEBlock_IDRC[this] == old(sEBlock_IDRC[this]) && sCap_IDRC[this] == old(sCap_IDRC[this]) && sTot_IDRC[this] == old(sTot_IDRC[this]) && sChunk_IDRC[this] == old(sChunk_IDRC[this]) && sPrice_IDRC[this] == old(sPrice_IDRC[this]) && symbol_TokenERC20[this] == old(symbol_TokenERC20[this]) && name_TokenERC20[this] == old(name_TokenERC20[this]) && decimals_TokenERC20[this] == old(decimals_TokenERC20[this]) && owner_Owned[this] == old(owner_Owned[this]) && newOwner_Owned[this] == old(newOwner_Owned[this]))))
[2020-11-25 18:05:04,136 INFO  L1016  opiaSpecLangObserver]: Successfully lexed: [](started(TokenERC20.transfer(to, value), p1 != msg.sender && p1 != to && msg.sender != to && value <= balances_TokenERC20[this][msg.sender] && balances_TokenERC20[this][to] + value < 0x10000000000000000000000000000000000000000000000000000000000000000 && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_TokenERC20[this][to] >= 0 && balances_TokenERC20[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_TokenERC20[this][msg.sender] >= 0 &&  balances_TokenERC20[this][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(finished(TokenERC20.transfer(to, value), return == true && balances_TokenERC20[this][msg.sender] == old(balances_TokenERC20[this][msg.sender]) - value && balances_TokenERC20[this][to] == old(balances_TokenERC20[this][to]) + value && _totalSupply_TokenERC20[this] == old(_totalSupply_TokenERC20[this]) && allowed_TokenERC20[this] == old(allowed_TokenERC20[this]) && balances_TokenERC20[this][p1] == old(balances_TokenERC20[this][p1]) && aSBlock_IDRC[this] == old(aSBlock_IDRC[this]) && aEBlock_IDRC[this] == old(aEBlock_IDRC[this]) && aCap_IDRC[this] == old(aCap_IDRC[this]) && aTot_IDRC[this] == old(aTot_IDRC[this]) && aAmt_IDRC[this] == old(aAmt_IDRC[this]) && sSBlock_IDRC[this] == old(sSBlock_IDRC[this]) && sEBlock_IDRC[this] == old(sEBlock_IDRC[this]) && sCap_IDRC[this] == old(sCap_IDRC[this]) && sTot_IDRC[this] == old(sTot_IDRC[this]) && sChunk_IDRC[this] == old(sChunk_IDRC[this]) && sPrice_IDRC[this] == old(sPrice_IDRC[this]) && symbol_TokenERC20[this] == old(symbol_TokenERC20[this]) && name_TokenERC20[this] == old(name_TokenERC20[this]) && decimals_TokenERC20[this] == old(decimals_TokenERC20[this]) && owner_Owned[this] == old(owner_Owned[this]) && newOwner_Owned[this] == old(newOwner_Owned[this]))))
[2020-11-25 18:05:04,145 INFO  L1018  opiaSpecLangObserver]: Successfully parsed: [](started(TokenERC20.transfer(to, value), p1 != msg.sender && p1 != to && msg.sender != to && value <= balances_TokenERC20[this][msg.sender] && balances_TokenERC20[this][to] + value < 0x10000000000000000000000000000000000000000000000000000000000000000 && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_TokenERC20[this][to] >= 0 && balances_TokenERC20[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_TokenERC20[this][msg.sender] >= 0 &&  balances_TokenERC20[this][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(finished(TokenERC20.transfer(to, value), return == true && balances_TokenERC20[this][msg.sender] == old(balances_TokenERC20[this][msg.sender]) - value && balances_TokenERC20[this][to] == old(balances_TokenERC20[this][to]) + value && _totalSupply_TokenERC20[this] == old(_totalSupply_TokenERC20[this]) && allowed_TokenERC20[this] == old(allowed_TokenERC20[this]) && balances_TokenERC20[this][p1] == old(balances_TokenERC20[this][p1]) && aSBlock_IDRC[this] == old(aSBlock_IDRC[this]) && aEBlock_IDRC[this] == old(aEBlock_IDRC[this]) && aCap_IDRC[this] == old(aCap_IDRC[this]) && aTot_IDRC[this] == old(aTot_IDRC[this]) && aAmt_IDRC[this] == old(aAmt_IDRC[this]) && sSBlock_IDRC[this] == old(sSBlock_IDRC[this]) && sEBlock_IDRC[this] == old(sEBlock_IDRC[this]) && sCap_IDRC[this] == old(sCap_IDRC[this]) && sTot_IDRC[this] == old(sTot_IDRC[this]) && sChunk_IDRC[this] == old(sChunk_IDRC[this]) && sPrice_IDRC[this] == old(sPrice_IDRC[this]) && symbol_TokenERC20[this] == old(symbol_TokenERC20[this]) && name_TokenERC20[this] == old(name_TokenERC20[this]) && decimals_TokenERC20[this] == old(decimals_TokenERC20[this]) && owner_Owned[this] == old(owner_Owned[this]) && newOwner_Owned[this] == old(newOwner_Owned[this]))))
[2020-11-25 18:05:04,153 INFO  L636   opiaSpecLangObserver]: Parsed ( ( ( ( ( ( ( ( ( ( p1!=msg.sender && p1!=to_s381 ) && msg.sender!=to_s381 ) && tokens_s381<=balances_TokenERC20[this][msg.sender] ) && ( balances_TokenERC20[this][to_s381] + tokens_s381 )<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) && tokens_s381>=0 ) && tokens_s381<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) && balances_TokenERC20[this][to_s381]>=0 ) && balances_TokenERC20[this][to_s381]<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) && balances_TokenERC20[this][msg.sender]>=0 ) && balances_TokenERC20[this][msg.sender]<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) to BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[COMPNEQ,IdentifierExpression[p1,GLOBAL],IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transfer~address~uint256_TokenERC20>]],BinaryExpression[COMPNEQ,IdentifierExpression[p1,GLOBAL],IdentifierExpression[to_s381,<IMPLEMENTATION_INPARAM,transfer~address~uint256_TokenERC20>]]],BinaryExpression[COMPNEQ,IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transfer~address~uint256_TokenERC20>],IdentifierExpression[to_s381,<IMPLEMENTATION_INPARAM,transfer~address~uint256_TokenERC20>]]],BinaryExpression[COMPLEQ,IdentifierExpression[tokens_s381,<IMPLEMENTATION_INPARAM,transfer~address~uint256_TokenERC20>],ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balances_TokenERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_TokenERC20>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transfer~address~uint256_TokenERC20>]]]]],BinaryExpression[COMPLT,BinaryExpression[ARITHPLUS,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balances_TokenERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_TokenERC20>]]],[IdentifierExpression[to_s381,<IMPLEMENTATION_INPARAM,transfer~address~uint256_TokenERC20>]]],IdentifierExpression[tokens_s381,<IMPLEMENTATION_INPARAM,transfer~address~uint256_TokenERC20>]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]],BinaryExpression[COMPGEQ,IdentifierExpression[tokens_s381,<IMPLEMENTATION_INPARAM,transfer~address~uint256_TokenERC20>],IntegerLiteral[0]]],BinaryExpression[COMPLT,IdentifierExpression[tokens_s381,<IMPLEMENTATION_INPARAM,transfer~address~uint256_TokenERC20>],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]],BinaryExpression[COMPGEQ,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balances_TokenERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_TokenERC20>]]],[IdentifierExpression[to_s381,<IMPLEMENTATION_INPARAM,transfer~address~uint256_TokenERC20>]]],IntegerLiteral[0]]],BinaryExpression[COMPLT,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balances_TokenERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_TokenERC20>]]],[IdentifierExpression[to_s381,<IMPLEMENTATION_INPARAM,transfer~address~uint256_TokenERC20>]]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]],BinaryExpression[COMPGEQ,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balances_TokenERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_TokenERC20>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transfer~address~uint256_TokenERC20>]]],IntegerLiteral[0]]],BinaryExpression[COMPLT,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balances_TokenERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_TokenERC20>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transfer~address~uint256_TokenERC20>]]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]]
[2020-11-25 18:05:04,159 INFO  L636   opiaSpecLangObserver]: Parsed ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( success_s381==true && balances_TokenERC20[this][msg.sender]==( ( old(balances_TokenERC20[this][msg.sender]) ) - tokens_s381 ) ) && balances_TokenERC20[this][to_s381]==( ( old(balances_TokenERC20[this][to_s381]) ) + tokens_s381 ) ) && _totalSupply_TokenERC20[this]==( old(_totalSupply_TokenERC20[this]) ) ) && allowed_TokenERC20[this]==( old(allowed_TokenERC20[this]) ) ) && balances_TokenERC20[this][p1]==( old(balances_TokenERC20[this][p1]) ) ) && aSBlock_IDRC[this]==( old(aSBlock_IDRC[this]) ) ) && aEBlock_IDRC[this]==( old(aEBlock_IDRC[this]) ) ) && aCap_IDRC[this]==( old(aCap_IDRC[this]) ) ) && aTot_IDRC[this]==( old(aTot_IDRC[this]) ) ) && aAmt_IDRC[this]==( old(aAmt_IDRC[this]) ) ) && sSBlock_IDRC[this]==( old(sSBlock_IDRC[this]) ) ) && sEBlock_IDRC[this]==( old(sEBlock_IDRC[this]) ) ) && sCap_IDRC[this]==( old(sCap_IDRC[this]) ) ) && sTot_IDRC[this]==( old(sTot_IDRC[this]) ) ) && sChunk_IDRC[this]==( old(sChunk_IDRC[this]) ) ) && sPrice_IDRC[this]==( old(sPrice_IDRC[this]) ) ) && symbol_TokenERC20[this]==( old(symbol_TokenERC20[this]) ) ) && name_TokenERC20[this]==( old(name_TokenERC20[this]) ) ) && decimals_TokenERC20[this]==( old(decimals_TokenERC20[this]) ) ) && owner_Owned[this]==( old(owner_Owned[this]) ) ) && newOwner_Owned[this]==( old(newOwner_Owned[this]) ) ) to BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[COMPEQ,IdentifierExpression[success_s381,<IMPLEMENTATION_OUTPARAM,transfer~address~uint256_TokenERC20>],BooleanLiteral[true]],BinaryExpression[COMPEQ,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balances_TokenERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_TokenERC20>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transfer~address~uint256_TokenERC20>]]],BinaryExpression[ARITHMINUS,UnaryExpression[OLD,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balances_TokenERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_TokenERC20>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transfer~address~uint256_TokenERC20>]]]],IdentifierExpression[tokens_s381,<IMPLEMENTATION_INPARAM,transfer~address~uint256_TokenERC20>]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balances_TokenERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_TokenERC20>]]],[IdentifierExpression[to_s381,<IMPLEMENTATION_INPARAM,transfer~address~uint256_TokenERC20>]]],BinaryExpression[ARITHPLUS,UnaryExpression[OLD,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balances_TokenERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_TokenERC20>]]],[IdentifierExpression[to_s381,<IMPLEMENTATION_INPARAM,transfer~address~uint256_TokenERC20>]]]],IdentifierExpression[tokens_s381,<IMPLEMENTATION_INPARAM,transfer~address~uint256_TokenERC20>]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[_totalSupply_TokenERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_TokenERC20>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[_totalSupply_TokenERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_TokenERC20>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[allowed_TokenERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_TokenERC20>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[allowed_TokenERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_TokenERC20>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balances_TokenERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_TokenERC20>]]],[IdentifierExpression[p1,GLOBAL]]],UnaryExpression[OLD,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balances_TokenERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_TokenERC20>]]],[IdentifierExpression[p1,GLOBAL]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[aSBlock_IDRC,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_TokenERC20>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[aSBlock_IDRC,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_TokenERC20>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[aEBlock_IDRC,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_TokenERC20>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[aEBlock_IDRC,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_TokenERC20>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[aCap_IDRC,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_TokenERC20>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[aCap_IDRC,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_TokenERC20>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[aTot_IDRC,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_TokenERC20>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[aTot_IDRC,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_TokenERC20>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[aAmt_IDRC,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_TokenERC20>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[aAmt_IDRC,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_TokenERC20>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[sSBlock_IDRC,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_TokenERC20>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[sSBlock_IDRC,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_TokenERC20>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[sEBlock_IDRC,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_TokenERC20>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[sEBlock_IDRC,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_TokenERC20>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[sCap_IDRC,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_TokenERC20>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[sCap_IDRC,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_TokenERC20>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[sTot_IDRC,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_TokenERC20>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[sTot_IDRC,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_TokenERC20>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[sChunk_IDRC,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_TokenERC20>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[sChunk_IDRC,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_TokenERC20>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[sPrice_IDRC,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_TokenERC20>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[sPrice_IDRC,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_TokenERC20>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[symbol_TokenERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_TokenERC20>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[symbol_TokenERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_TokenERC20>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[name_TokenERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_TokenERC20>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[name_TokenERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_TokenERC20>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[decimals_TokenERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_TokenERC20>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[decimals_TokenERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_TokenERC20>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[owner_Owned,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_TokenERC20>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[owner_Owned,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_TokenERC20>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[newOwner_Owned,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_TokenERC20>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[newOwner_Owned,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_TokenERC20>]]]]]]
[2020-11-25 18:05:04,168 INFO  L1005  opiaSpecLangObserver]: Compiling: [](started(TokenERC20.transfer(to, value), p1 != msg.sender && p1 != to && msg.sender != to && value <= balances_TokenERC20[this][msg.sender] && balances_TokenERC20[this][to] + value < 0x10000000000000000000000000000000000000000000000000000000000000000 && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_TokenERC20[this][to] >= 0 && balances_TokenERC20[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_TokenERC20[this][msg.sender] >= 0 &&  balances_TokenERC20[this][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(finished(TokenERC20.transfer(to, value), return == true && balances_TokenERC20[this][msg.sender] == old(balances_TokenERC20[this][msg.sender]) - value && balances_TokenERC20[this][to] == old(balances_TokenERC20[this][to]) + value && _totalSupply_TokenERC20[this] == old(_totalSupply_TokenERC20[this]) && allowed_TokenERC20[this] == old(allowed_TokenERC20[this]) && balances_TokenERC20[this][p1] == old(balances_TokenERC20[this][p1]) && aSBlock_IDRC[this] == old(aSBlock_IDRC[this]) && aEBlock_IDRC[this] == old(aEBlock_IDRC[this]) && aCap_IDRC[this] == old(aCap_IDRC[this]) && aTot_IDRC[this] == old(aTot_IDRC[this]) && aAmt_IDRC[this] == old(aAmt_IDRC[this]) && sSBlock_IDRC[this] == old(sSBlock_IDRC[this]) && sEBlock_IDRC[this] == old(sEBlock_IDRC[this]) && sCap_IDRC[this] == old(sCap_IDRC[this]) && sTot_IDRC[this] == old(sTot_IDRC[this]) && sChunk_IDRC[this] == old(sChunk_IDRC[this]) && sPrice_IDRC[this] == old(sPrice_IDRC[this]) && symbol_TokenERC20[this] == old(symbol_TokenERC20[this]) && name_TokenERC20[this] == old(name_TokenERC20[this]) && decimals_TokenERC20[this] == old(decimals_TokenERC20[this]) && owner_Owned[this] == old(owner_Owned[this]) && newOwner_Owned[this] == old(newOwner_Owned[this]))))
[2020-11-25 18:05:04,168 INFO  L1007  opiaSpecLangObserver]: Compiled to ( []( AP(call_transfer_TokenERC200) ==> ( <>AP(success_transfer_TokenERC200) ) ) )
Executed UtopiaSpecLang
[2020-11-25 18:05:04,185 INFO  L202        PluginConnector]: Adding new model Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 06:05:04 PropertyContainer
[2020-11-25 18:05:04,186 INFO  L132        PluginConnector]: ------------------------ END UtopiaSpecLang----------------------------
[2020-11-25 18:05:04,186 INFO  L113        PluginConnector]: ------------------------Boogie Printer----------------------------
[2020-11-25 18:05:04,186 INFO  L271        PluginConnector]: Initializing Boogie Printer...
[2020-11-25 18:05:04,186 INFO  L276        PluginConnector]: Boogie Printer initialized
[2020-11-25 18:05:04,187 INFO  L185        PluginConnector]: Executing the observer BoogiePrinterObserver from plugin Boogie Printer for "IDRC_0xbb2f95f286ec090555dca7c0bb49948c59494fdc_transfer-normal.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 06:05:03" (1/2) ...
[2020-11-25 18:05:04,188 INFO  L116   oogiePrinterObserver]: File already exists and will be overwritten: /tmp/boogiePrinter.bpl
[2020-11-25 18:05:04,188 INFO  L120   oogiePrinterObserver]: Writing to file /tmp/boogiePrinter.bpl
[2020-11-25 18:05:04,207 INFO  L185        PluginConnector]: Executing the observer BoogiePrinterObserver from plugin Boogie Printer for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 06:05:04" (2/2) ...
[2020-11-25 18:05:04,207 INFO  L132        PluginConnector]: ------------------------ END Boogie Printer----------------------------
[2020-11-25 18:05:04,208 INFO  L113        PluginConnector]: ------------------------RCFGBuilder----------------------------
[2020-11-25 18:05:04,208 INFO  L271        PluginConnector]: Initializing RCFGBuilder...
[2020-11-25 18:05:04,208 INFO  L276        PluginConnector]: RCFGBuilder initialized
[2020-11-25 18:05:04,209 INFO  L185        PluginConnector]: Executing the observer RCFGBuilderObserver from plugin RCFGBuilder for "IDRC_0xbb2f95f286ec090555dca7c0bb49948c59494fdc_transfer-normal.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 06:05:03" (1/2) ...
[2020-11-25 18:05:04,268 INFO  L130     BoogieDeclarations]: Found specification of procedure FreshRefGenerator__success
[2020-11-25 18:05:04,269 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath_NoBaseCtor__success
[2020-11-25 18:05:04,269 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath
[2020-11-25 18:05:04,269 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath
[2020-11-25 18:05:04,269 INFO  L130     BoogieDeclarations]: Found specification of procedure add~uint256~uint256_SafeMath__success
[2020-11-25 18:05:04,269 INFO  L130     BoogieDeclarations]: Found specification of procedure sub~uint256~uint256_SafeMath__success
[2020-11-25 18:05:04,269 INFO  L130     BoogieDeclarations]: Found specification of procedure mul~uint256~uint256_SafeMath__success
[2020-11-25 18:05:04,269 INFO  L130     BoogieDeclarations]: Found specification of procedure div~uint256~uint256_SafeMath__success
[2020-11-25 18:05:04,270 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Interface_ERC20Interface_NoBaseCtor__success
[2020-11-25 18:05:04,270 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Interface_ERC20Interface
[2020-11-25 18:05:04,270 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Interface_ERC20Interface
[2020-11-25 18:05:04,270 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_ERC20Interface
[2020-11-25 18:05:04,270 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_ERC20Interface
[2020-11-25 18:05:04,270 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_ERC20Interface
[2020-11-25 18:05:04,270 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_ERC20Interface
[2020-11-25 18:05:04,271 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_ERC20Interface
[2020-11-25 18:05:04,271 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_ERC20Interface
[2020-11-25 18:05:04,271 INFO  L130     BoogieDeclarations]: Found specification of procedure ApproveAndCallFallBack_ApproveAndCallFallBack_NoBaseCtor__success
[2020-11-25 18:05:04,271 INFO  L130     BoogieDeclarations]: Found specification of procedure ApproveAndCallFallBack_ApproveAndCallFallBack
[2020-11-25 18:05:04,272 INFO  L138     BoogieDeclarations]: Found implementation of procedure ApproveAndCallFallBack_ApproveAndCallFallBack
[2020-11-25 18:05:04,272 INFO  L130     BoogieDeclarations]: Found specification of procedure receiveApproval~address~uint256~address~bytes_ApproveAndCallFallBack
[2020-11-25 18:05:04,272 INFO  L130     BoogieDeclarations]: Found specification of procedure Owned_Owned_NoBaseCtor__success
[2020-11-25 18:05:04,272 INFO  L130     BoogieDeclarations]: Found specification of procedure Owned_Owned
[2020-11-25 18:05:04,272 INFO  L138     BoogieDeclarations]: Found implementation of procedure Owned_Owned
[2020-11-25 18:05:04,272 INFO  L130     BoogieDeclarations]: Found specification of procedure transferOwnership~address_Owned
[2020-11-25 18:05:04,272 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferOwnership~address_Owned
[2020-11-25 18:05:04,272 INFO  L130     BoogieDeclarations]: Found specification of procedure acceptOwnership_Owned
[2020-11-25 18:05:04,272 INFO  L138     BoogieDeclarations]: Found implementation of procedure acceptOwnership_Owned
[2020-11-25 18:05:04,273 INFO  L130     BoogieDeclarations]: Found specification of procedure owner_Owned
[2020-11-25 18:05:04,273 INFO  L138     BoogieDeclarations]: Found implementation of procedure owner_Owned
[2020-11-25 18:05:04,273 INFO  L130     BoogieDeclarations]: Found specification of procedure newOwner_Owned
[2020-11-25 18:05:04,273 INFO  L138     BoogieDeclarations]: Found implementation of procedure newOwner_Owned
[2020-11-25 18:05:04,273 INFO  L130     BoogieDeclarations]: Found specification of procedure TokenERC20_TokenERC20_NoBaseCtor__success
[2020-11-25 18:05:04,273 INFO  L130     BoogieDeclarations]: Found specification of procedure TokenERC20_TokenERC20
[2020-11-25 18:05:04,273 INFO  L138     BoogieDeclarations]: Found implementation of procedure TokenERC20_TokenERC20
[2020-11-25 18:05:04,273 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_TokenERC20
[2020-11-25 18:05:04,273 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_TokenERC20
[2020-11-25 18:05:04,273 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_TokenERC20
[2020-11-25 18:05:04,274 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_TokenERC20
[2020-11-25 18:05:04,274 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_TokenERC20
[2020-11-25 18:05:04,274 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_TokenERC20
[2020-11-25 18:05:04,274 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_TokenERC20
[2020-11-25 18:05:04,274 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_TokenERC20
[2020-11-25 18:05:04,274 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_TokenERC20
[2020-11-25 18:05:04,274 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_TokenERC20
[2020-11-25 18:05:04,274 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_TokenERC20
[2020-11-25 18:05:04,274 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_TokenERC20
[2020-11-25 18:05:04,274 INFO  L130     BoogieDeclarations]: Found specification of procedure approveAndCall~address~uint256~bytes_TokenERC20
[2020-11-25 18:05:04,274 INFO  L138     BoogieDeclarations]: Found implementation of procedure approveAndCall~address~uint256~bytes_TokenERC20
[2020-11-25 18:05:04,275 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackMethod_TokenERC20__success
[2020-11-25 18:05:04,275 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_TokenERC20
[2020-11-25 18:05:04,275 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_TokenERC20
[2020-11-25 18:05:04,275 INFO  L130     BoogieDeclarations]: Found specification of procedure name_TokenERC20
[2020-11-25 18:05:04,275 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_TokenERC20
[2020-11-25 18:05:04,275 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_TokenERC20
[2020-11-25 18:05:04,275 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_TokenERC20
[2020-11-25 18:05:04,275 INFO  L130     BoogieDeclarations]: Found specification of procedure IDRC_IDRC_NoBaseCtor__success
[2020-11-25 18:05:04,275 INFO  L130     BoogieDeclarations]: Found specification of procedure IDRC_IDRC
[2020-11-25 18:05:04,275 INFO  L138     BoogieDeclarations]: Found implementation of procedure IDRC_IDRC
[2020-11-25 18:05:04,276 INFO  L130     BoogieDeclarations]: Found specification of procedure getAirdrop~address_IDRC
[2020-11-25 18:05:04,276 INFO  L138     BoogieDeclarations]: Found implementation of procedure getAirdrop~address_IDRC
[2020-11-25 18:05:04,276 INFO  L130     BoogieDeclarations]: Found specification of procedure tokenSale~address_IDRC
[2020-11-25 18:05:04,276 INFO  L138     BoogieDeclarations]: Found implementation of procedure tokenSale~address_IDRC
[2020-11-25 18:05:04,276 INFO  L130     BoogieDeclarations]: Found specification of procedure viewAirdrop_IDRC
[2020-11-25 18:05:04,276 INFO  L138     BoogieDeclarations]: Found implementation of procedure viewAirdrop_IDRC
[2020-11-25 18:05:04,276 INFO  L130     BoogieDeclarations]: Found specification of procedure viewSale_IDRC
[2020-11-25 18:05:04,276 INFO  L138     BoogieDeclarations]: Found implementation of procedure viewSale_IDRC
[2020-11-25 18:05:04,276 INFO  L130     BoogieDeclarations]: Found specification of procedure startAirdrop~uint256~uint256~uint256~uint256_IDRC
[2020-11-25 18:05:04,276 INFO  L138     BoogieDeclarations]: Found implementation of procedure startAirdrop~uint256~uint256~uint256~uint256_IDRC
[2020-11-25 18:05:04,277 INFO  L130     BoogieDeclarations]: Found specification of procedure startSale~uint256~uint256~uint256~uint256~uint256_IDRC
[2020-11-25 18:05:04,277 INFO  L138     BoogieDeclarations]: Found implementation of procedure startSale~uint256~uint256~uint256~uint256~uint256_IDRC
[2020-11-25 18:05:04,277 INFO  L130     BoogieDeclarations]: Found specification of procedure clearETH_IDRC
[2020-11-25 18:05:04,277 INFO  L138     BoogieDeclarations]: Found implementation of procedure clearETH_IDRC
[2020-11-25 18:05:04,277 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackMethod_IDRC__success
[2020-11-25 18:05:04,277 INFO  L130     BoogieDeclarations]: Found specification of procedure aSBlock_IDRC
[2020-11-25 18:05:04,277 INFO  L138     BoogieDeclarations]: Found implementation of procedure aSBlock_IDRC
[2020-11-25 18:05:04,277 INFO  L130     BoogieDeclarations]: Found specification of procedure aEBlock_IDRC
[2020-11-25 18:05:04,277 INFO  L138     BoogieDeclarations]: Found implementation of procedure aEBlock_IDRC
[2020-11-25 18:05:04,277 INFO  L130     BoogieDeclarations]: Found specification of procedure aCap_IDRC
[2020-11-25 18:05:04,278 INFO  L138     BoogieDeclarations]: Found implementation of procedure aCap_IDRC
[2020-11-25 18:05:04,278 INFO  L130     BoogieDeclarations]: Found specification of procedure aTot_IDRC
[2020-11-25 18:05:04,278 INFO  L138     BoogieDeclarations]: Found implementation of procedure aTot_IDRC
[2020-11-25 18:05:04,278 INFO  L130     BoogieDeclarations]: Found specification of procedure aAmt_IDRC
[2020-11-25 18:05:04,278 INFO  L138     BoogieDeclarations]: Found implementation of procedure aAmt_IDRC
[2020-11-25 18:05:04,278 INFO  L130     BoogieDeclarations]: Found specification of procedure sSBlock_IDRC
[2020-11-25 18:05:04,278 INFO  L138     BoogieDeclarations]: Found implementation of procedure sSBlock_IDRC
[2020-11-25 18:05:04,278 INFO  L130     BoogieDeclarations]: Found specification of procedure sEBlock_IDRC
[2020-11-25 18:05:04,278 INFO  L138     BoogieDeclarations]: Found implementation of procedure sEBlock_IDRC
[2020-11-25 18:05:04,278 INFO  L130     BoogieDeclarations]: Found specification of procedure sCap_IDRC
[2020-11-25 18:05:04,279 INFO  L138     BoogieDeclarations]: Found implementation of procedure sCap_IDRC
[2020-11-25 18:05:04,279 INFO  L130     BoogieDeclarations]: Found specification of procedure sTot_IDRC
[2020-11-25 18:05:04,279 INFO  L138     BoogieDeclarations]: Found implementation of procedure sTot_IDRC
[2020-11-25 18:05:04,279 INFO  L130     BoogieDeclarations]: Found specification of procedure sChunk_IDRC
[2020-11-25 18:05:04,279 INFO  L138     BoogieDeclarations]: Found implementation of procedure sChunk_IDRC
[2020-11-25 18:05:04,279 INFO  L130     BoogieDeclarations]: Found specification of procedure sPrice_IDRC
[2020-11-25 18:05:04,279 INFO  L138     BoogieDeclarations]: Found implementation of procedure sPrice_IDRC
[2020-11-25 18:05:04,279 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackDispatch__success
[2020-11-25 18:05:04,279 INFO  L130     BoogieDeclarations]: Found specification of procedure Fallback_UnknownType__success
[2020-11-25 18:05:04,279 INFO  L130     BoogieDeclarations]: Found specification of procedure send__success
[2020-11-25 18:05:04,279 INFO  L130     BoogieDeclarations]: Found specification of procedure onlyOwner_pre__success
[2020-11-25 18:05:04,280 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_SafeMath
[2020-11-25 18:05:04,280 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_SafeMath
[2020-11-25 18:05:04,280 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_ERC20Interface
[2020-11-25 18:05:04,280 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_ERC20Interface
[2020-11-25 18:05:04,280 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_ApproveAndCallFallBack
[2020-11-25 18:05:04,280 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_ApproveAndCallFallBack
[2020-11-25 18:05:04,280 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_Owned
[2020-11-25 18:05:04,280 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_Owned
[2020-11-25 18:05:04,280 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_TokenERC20
[2020-11-25 18:05:04,281 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_TokenERC20
[2020-11-25 18:05:04,281 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_IDRC
[2020-11-25 18:05:04,281 INFO  L130     BoogieDeclarations]: Found specification of procedure main
[2020-11-25 18:05:04,281 INFO  L130     BoogieDeclarations]: Found specification of procedure FreshRefGenerator__fail
[2020-11-25 18:05:04,281 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath_NoBaseCtor__fail
[2020-11-25 18:05:04,281 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath__success
[2020-11-25 18:05:04,281 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath__fail
[2020-11-25 18:05:04,281 INFO  L130     BoogieDeclarations]: Found specification of procedure add~uint256~uint256_SafeMath__fail
[2020-11-25 18:05:04,281 INFO  L130     BoogieDeclarations]: Found specification of procedure sub~uint256~uint256_SafeMath__fail
[2020-11-25 18:05:04,281 INFO  L130     BoogieDeclarations]: Found specification of procedure mul~uint256~uint256_SafeMath__fail
[2020-11-25 18:05:04,281 INFO  L130     BoogieDeclarations]: Found specification of procedure div~uint256~uint256_SafeMath__fail
[2020-11-25 18:05:04,282 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Interface_ERC20Interface_NoBaseCtor__fail
[2020-11-25 18:05:04,282 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Interface_ERC20Interface__success
[2020-11-25 18:05:04,282 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Interface_ERC20Interface__fail
[2020-11-25 18:05:04,282 INFO  L130     BoogieDeclarations]: Found specification of procedure ApproveAndCallFallBack_ApproveAndCallFallBack_NoBaseCtor__fail
[2020-11-25 18:05:04,282 INFO  L130     BoogieDeclarations]: Found specification of procedure ApproveAndCallFallBack_ApproveAndCallFallBack__success
[2020-11-25 18:05:04,282 INFO  L130     BoogieDeclarations]: Found specification of procedure ApproveAndCallFallBack_ApproveAndCallFallBack__fail
[2020-11-25 18:05:04,282 INFO  L130     BoogieDeclarations]: Found specification of procedure Owned_Owned_NoBaseCtor__fail
[2020-11-25 18:05:04,282 INFO  L130     BoogieDeclarations]: Found specification of procedure Owned_Owned__success
[2020-11-25 18:05:04,283 INFO  L130     BoogieDeclarations]: Found specification of procedure Owned_Owned__fail
[2020-11-25 18:05:04,283 INFO  L130     BoogieDeclarations]: Found specification of procedure transferOwnership~address_Owned__success
[2020-11-25 18:05:04,283 INFO  L130     BoogieDeclarations]: Found specification of procedure transferOwnership~address_Owned__fail
[2020-11-25 18:05:04,283 INFO  L130     BoogieDeclarations]: Found specification of procedure acceptOwnership_Owned__success
[2020-11-25 18:05:04,283 INFO  L130     BoogieDeclarations]: Found specification of procedure acceptOwnership_Owned__fail
[2020-11-25 18:05:04,283 INFO  L130     BoogieDeclarations]: Found specification of procedure owner_Owned__success
[2020-11-25 18:05:04,283 INFO  L130     BoogieDeclarations]: Found specification of procedure owner_Owned__fail
[2020-11-25 18:05:04,283 INFO  L130     BoogieDeclarations]: Found specification of procedure newOwner_Owned__success
[2020-11-25 18:05:04,283 INFO  L130     BoogieDeclarations]: Found specification of procedure newOwner_Owned__fail
[2020-11-25 18:05:04,284 INFO  L130     BoogieDeclarations]: Found specification of procedure TokenERC20_TokenERC20_NoBaseCtor__fail
[2020-11-25 18:05:04,284 INFO  L130     BoogieDeclarations]: Found specification of procedure TokenERC20_TokenERC20__success
[2020-11-25 18:05:04,284 INFO  L130     BoogieDeclarations]: Found specification of procedure TokenERC20_TokenERC20__fail
[2020-11-25 18:05:04,284 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_TokenERC20__success
[2020-11-25 18:05:04,284 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_TokenERC20__fail
[2020-11-25 18:05:04,284 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_TokenERC20__success
[2020-11-25 18:05:04,284 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_TokenERC20__fail
[2020-11-25 18:05:04,284 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_TokenERC20__success
[2020-11-25 18:05:04,284 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_TokenERC20__fail
[2020-11-25 18:05:04,285 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_TokenERC20__success
[2020-11-25 18:05:04,285 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_TokenERC20__fail
[2020-11-25 18:05:04,285 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_TokenERC20__success
[2020-11-25 18:05:04,285 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_TokenERC20__fail
[2020-11-25 18:05:04,285 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_TokenERC20__success
[2020-11-25 18:05:04,285 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_TokenERC20__fail
[2020-11-25 18:05:04,285 INFO  L130     BoogieDeclarations]: Found specification of procedure approveAndCall~address~uint256~bytes_TokenERC20__success
[2020-11-25 18:05:04,285 INFO  L130     BoogieDeclarations]: Found specification of procedure approveAndCall~address~uint256~bytes_TokenERC20__fail
[2020-11-25 18:05:04,285 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackMethod_TokenERC20__fail
[2020-11-25 18:05:04,285 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_TokenERC20__success
[2020-11-25 18:05:04,286 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_TokenERC20__fail
[2020-11-25 18:05:04,286 INFO  L130     BoogieDeclarations]: Found specification of procedure name_TokenERC20__success
[2020-11-25 18:05:04,286 INFO  L130     BoogieDeclarations]: Found specification of procedure name_TokenERC20__fail
[2020-11-25 18:05:04,286 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_TokenERC20__success
[2020-11-25 18:05:04,286 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_TokenERC20__fail
[2020-11-25 18:05:04,286 INFO  L130     BoogieDeclarations]: Found specification of procedure IDRC_IDRC_NoBaseCtor__fail
[2020-11-25 18:05:04,286 INFO  L130     BoogieDeclarations]: Found specification of procedure IDRC_IDRC__success
[2020-11-25 18:05:04,286 INFO  L130     BoogieDeclarations]: Found specification of procedure IDRC_IDRC__fail
[2020-11-25 18:05:04,286 INFO  L130     BoogieDeclarations]: Found specification of procedure getAirdrop~address_IDRC__success
[2020-11-25 18:05:04,286 INFO  L130     BoogieDeclarations]: Found specification of procedure getAirdrop~address_IDRC__fail
[2020-11-25 18:05:04,287 INFO  L130     BoogieDeclarations]: Found specification of procedure tokenSale~address_IDRC__success
[2020-11-25 18:05:04,287 INFO  L130     BoogieDeclarations]: Found specification of procedure tokenSale~address_IDRC__fail
[2020-11-25 18:05:04,287 INFO  L130     BoogieDeclarations]: Found specification of procedure viewAirdrop_IDRC__success
[2020-11-25 18:05:04,287 INFO  L130     BoogieDeclarations]: Found specification of procedure viewAirdrop_IDRC__fail
[2020-11-25 18:05:04,287 INFO  L130     BoogieDeclarations]: Found specification of procedure viewSale_IDRC__success
[2020-11-25 18:05:04,287 INFO  L130     BoogieDeclarations]: Found specification of procedure viewSale_IDRC__fail
[2020-11-25 18:05:04,287 INFO  L130     BoogieDeclarations]: Found specification of procedure startAirdrop~uint256~uint256~uint256~uint256_IDRC__success
[2020-11-25 18:05:04,287 INFO  L130     BoogieDeclarations]: Found specification of procedure startAirdrop~uint256~uint256~uint256~uint256_IDRC__fail
[2020-11-25 18:05:04,287 INFO  L130     BoogieDeclarations]: Found specification of procedure startSale~uint256~uint256~uint256~uint256~uint256_IDRC__success
[2020-11-25 18:05:04,287 INFO  L130     BoogieDeclarations]: Found specification of procedure startSale~uint256~uint256~uint256~uint256~uint256_IDRC__fail
[2020-11-25 18:05:04,287 INFO  L130     BoogieDeclarations]: Found specification of procedure clearETH_IDRC__success
[2020-11-25 18:05:04,288 INFO  L130     BoogieDeclarations]: Found specification of procedure clearETH_IDRC__fail
[2020-11-25 18:05:04,288 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackMethod_IDRC__fail
[2020-11-25 18:05:04,288 INFO  L130     BoogieDeclarations]: Found specification of procedure aSBlock_IDRC__success
[2020-11-25 18:05:04,288 INFO  L130     BoogieDeclarations]: Found specification of procedure aSBlock_IDRC__fail
[2020-11-25 18:05:04,288 INFO  L130     BoogieDeclarations]: Found specification of procedure aEBlock_IDRC__success
[2020-11-25 18:05:04,288 INFO  L130     BoogieDeclarations]: Found specification of procedure aEBlock_IDRC__fail
[2020-11-25 18:05:04,288 INFO  L130     BoogieDeclarations]: Found specification of procedure aCap_IDRC__success
[2020-11-25 18:05:04,288 INFO  L130     BoogieDeclarations]: Found specification of procedure aCap_IDRC__fail
[2020-11-25 18:05:04,288 INFO  L130     BoogieDeclarations]: Found specification of procedure aTot_IDRC__success
[2020-11-25 18:05:04,288 INFO  L130     BoogieDeclarations]: Found specification of procedure aTot_IDRC__fail
[2020-11-25 18:05:04,288 INFO  L130     BoogieDeclarations]: Found specification of procedure aAmt_IDRC__success
[2020-11-25 18:05:04,289 INFO  L130     BoogieDeclarations]: Found specification of procedure aAmt_IDRC__fail
[2020-11-25 18:05:04,289 INFO  L130     BoogieDeclarations]: Found specification of procedure sSBlock_IDRC__success
[2020-11-25 18:05:04,289 INFO  L130     BoogieDeclarations]: Found specification of procedure sSBlock_IDRC__fail
[2020-11-25 18:05:04,289 INFO  L130     BoogieDeclarations]: Found specification of procedure sEBlock_IDRC__success
[2020-11-25 18:05:04,289 INFO  L130     BoogieDeclarations]: Found specification of procedure sEBlock_IDRC__fail
[2020-11-25 18:05:04,289 INFO  L130     BoogieDeclarations]: Found specification of procedure sCap_IDRC__success
[2020-11-25 18:05:04,289 INFO  L130     BoogieDeclarations]: Found specification of procedure sCap_IDRC__fail
[2020-11-25 18:05:04,289 INFO  L130     BoogieDeclarations]: Found specification of procedure sTot_IDRC__success
[2020-11-25 18:05:04,289 INFO  L130     BoogieDeclarations]: Found specification of procedure sTot_IDRC__fail
[2020-11-25 18:05:04,289 INFO  L130     BoogieDeclarations]: Found specification of procedure sChunk_IDRC__success
[2020-11-25 18:05:04,289 INFO  L130     BoogieDeclarations]: Found specification of procedure sChunk_IDRC__fail
[2020-11-25 18:05:04,290 INFO  L130     BoogieDeclarations]: Found specification of procedure sPrice_IDRC__success
[2020-11-25 18:05:04,290 INFO  L130     BoogieDeclarations]: Found specification of procedure sPrice_IDRC__fail
[2020-11-25 18:05:04,290 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackDispatch__fail
[2020-11-25 18:05:04,290 INFO  L130     BoogieDeclarations]: Found specification of procedure Fallback_UnknownType__fail
[2020-11-25 18:05:04,290 INFO  L130     BoogieDeclarations]: Found specification of procedure send__fail
[2020-11-25 18:05:04,290 INFO  L130     BoogieDeclarations]: Found specification of procedure onlyOwner_pre__fail
[2020-11-25 18:05:04,290 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreshRefGenerator__fail
[2020-11-25 18:05:04,290 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreshRefGenerator__success
[2020-11-25 18:05:04,290 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath_NoBaseCtor__fail
[2020-11-25 18:05:04,290 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath_NoBaseCtor__success
[2020-11-25 18:05:04,290 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath__fail
[2020-11-25 18:05:04,291 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath__success
[2020-11-25 18:05:04,291 INFO  L138     BoogieDeclarations]: Found implementation of procedure add~uint256~uint256_SafeMath__fail
[2020-11-25 18:05:04,291 INFO  L138     BoogieDeclarations]: Found implementation of procedure add~uint256~uint256_SafeMath__success
[2020-11-25 18:05:04,291 INFO  L138     BoogieDeclarations]: Found implementation of procedure sub~uint256~uint256_SafeMath__fail
[2020-11-25 18:05:04,291 INFO  L138     BoogieDeclarations]: Found implementation of procedure sub~uint256~uint256_SafeMath__success
[2020-11-25 18:05:04,291 INFO  L138     BoogieDeclarations]: Found implementation of procedure mul~uint256~uint256_SafeMath__fail
[2020-11-25 18:05:04,291 INFO  L138     BoogieDeclarations]: Found implementation of procedure mul~uint256~uint256_SafeMath__success
[2020-11-25 18:05:04,291 INFO  L138     BoogieDeclarations]: Found implementation of procedure div~uint256~uint256_SafeMath__fail
[2020-11-25 18:05:04,291 INFO  L138     BoogieDeclarations]: Found implementation of procedure div~uint256~uint256_SafeMath__success
[2020-11-25 18:05:04,291 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Interface_ERC20Interface_NoBaseCtor__fail
[2020-11-25 18:05:04,291 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Interface_ERC20Interface_NoBaseCtor__success
[2020-11-25 18:05:04,292 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Interface_ERC20Interface__fail
[2020-11-25 18:05:04,292 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Interface_ERC20Interface__success
[2020-11-25 18:05:04,292 INFO  L138     BoogieDeclarations]: Found implementation of procedure ApproveAndCallFallBack_ApproveAndCallFallBack_NoBaseCtor__fail
[2020-11-25 18:05:04,292 INFO  L138     BoogieDeclarations]: Found implementation of procedure ApproveAndCallFallBack_ApproveAndCallFallBack_NoBaseCtor__success
[2020-11-25 18:05:04,292 INFO  L138     BoogieDeclarations]: Found implementation of procedure ApproveAndCallFallBack_ApproveAndCallFallBack__fail
[2020-11-25 18:05:04,292 INFO  L138     BoogieDeclarations]: Found implementation of procedure ApproveAndCallFallBack_ApproveAndCallFallBack__success
[2020-11-25 18:05:04,292 INFO  L138     BoogieDeclarations]: Found implementation of procedure Owned_Owned_NoBaseCtor__fail
[2020-11-25 18:05:04,292 INFO  L138     BoogieDeclarations]: Found implementation of procedure Owned_Owned_NoBaseCtor__success
[2020-11-25 18:05:04,292 INFO  L138     BoogieDeclarations]: Found implementation of procedure Owned_Owned__fail
[2020-11-25 18:05:04,292 INFO  L138     BoogieDeclarations]: Found implementation of procedure Owned_Owned__success
[2020-11-25 18:05:04,292 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferOwnership~address_Owned__fail
[2020-11-25 18:05:04,292 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferOwnership~address_Owned__success
[2020-11-25 18:05:04,293 INFO  L138     BoogieDeclarations]: Found implementation of procedure acceptOwnership_Owned__fail
[2020-11-25 18:05:04,293 INFO  L138     BoogieDeclarations]: Found implementation of procedure acceptOwnership_Owned__success
[2020-11-25 18:05:04,293 INFO  L138     BoogieDeclarations]: Found implementation of procedure owner_Owned__fail
[2020-11-25 18:05:04,293 INFO  L138     BoogieDeclarations]: Found implementation of procedure owner_Owned__success
[2020-11-25 18:05:04,293 INFO  L138     BoogieDeclarations]: Found implementation of procedure newOwner_Owned__fail
[2020-11-25 18:05:04,293 INFO  L138     BoogieDeclarations]: Found implementation of procedure newOwner_Owned__success
[2020-11-25 18:05:04,293 INFO  L138     BoogieDeclarations]: Found implementation of procedure TokenERC20_TokenERC20_NoBaseCtor__fail
[2020-11-25 18:05:04,293 INFO  L138     BoogieDeclarations]: Found implementation of procedure TokenERC20_TokenERC20_NoBaseCtor__success
[2020-11-25 18:05:04,293 INFO  L138     BoogieDeclarations]: Found implementation of procedure TokenERC20_TokenERC20__fail
[2020-11-25 18:05:04,293 INFO  L138     BoogieDeclarations]: Found implementation of procedure TokenERC20_TokenERC20__success
[2020-11-25 18:05:04,293 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_TokenERC20__fail
[2020-11-25 18:05:04,293 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_TokenERC20__success
[2020-11-25 18:05:04,294 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_TokenERC20__fail
[2020-11-25 18:05:04,294 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_TokenERC20__success
[2020-11-25 18:05:04,294 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_TokenERC20__fail
[2020-11-25 18:05:04,294 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_TokenERC20__success
[2020-11-25 18:05:04,294 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_TokenERC20__fail
[2020-11-25 18:05:04,294 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_TokenERC20__success
[2020-11-25 18:05:04,294 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_TokenERC20__fail
[2020-11-25 18:05:04,294 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_TokenERC20__success
[2020-11-25 18:05:04,294 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_TokenERC20__fail
[2020-11-25 18:05:04,294 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_TokenERC20__success
[2020-11-25 18:05:04,294 INFO  L138     BoogieDeclarations]: Found implementation of procedure approveAndCall~address~uint256~bytes_TokenERC20__fail
[2020-11-25 18:05:04,295 INFO  L138     BoogieDeclarations]: Found implementation of procedure approveAndCall~address~uint256~bytes_TokenERC20__success
[2020-11-25 18:05:04,295 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackMethod_TokenERC20__fail
[2020-11-25 18:05:04,295 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackMethod_TokenERC20__success
[2020-11-25 18:05:04,295 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_TokenERC20__fail
[2020-11-25 18:05:04,295 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_TokenERC20__success
[2020-11-25 18:05:04,295 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_TokenERC20__fail
[2020-11-25 18:05:04,295 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_TokenERC20__success
[2020-11-25 18:05:04,295 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_TokenERC20__fail
[2020-11-25 18:05:04,295 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_TokenERC20__success
[2020-11-25 18:05:04,295 INFO  L138     BoogieDeclarations]: Found implementation of procedure IDRC_IDRC_NoBaseCtor__fail
[2020-11-25 18:05:04,295 INFO  L138     BoogieDeclarations]: Found implementation of procedure IDRC_IDRC_NoBaseCtor__success
[2020-11-25 18:05:04,295 INFO  L138     BoogieDeclarations]: Found implementation of procedure IDRC_IDRC__fail
[2020-11-25 18:05:04,296 INFO  L138     BoogieDeclarations]: Found implementation of procedure IDRC_IDRC__success
[2020-11-25 18:05:04,296 INFO  L138     BoogieDeclarations]: Found implementation of procedure getAirdrop~address_IDRC__fail
[2020-11-25 18:05:04,296 INFO  L138     BoogieDeclarations]: Found implementation of procedure getAirdrop~address_IDRC__success
[2020-11-25 18:05:04,296 INFO  L138     BoogieDeclarations]: Found implementation of procedure tokenSale~address_IDRC__fail
[2020-11-25 18:05:04,296 INFO  L138     BoogieDeclarations]: Found implementation of procedure tokenSale~address_IDRC__success
[2020-11-25 18:05:04,296 INFO  L138     BoogieDeclarations]: Found implementation of procedure viewAirdrop_IDRC__fail
[2020-11-25 18:05:04,296 INFO  L138     BoogieDeclarations]: Found implementation of procedure viewAirdrop_IDRC__success
[2020-11-25 18:05:04,296 INFO  L138     BoogieDeclarations]: Found implementation of procedure viewSale_IDRC__fail
[2020-11-25 18:05:04,296 INFO  L138     BoogieDeclarations]: Found implementation of procedure viewSale_IDRC__success
[2020-11-25 18:05:04,296 INFO  L138     BoogieDeclarations]: Found implementation of procedure startAirdrop~uint256~uint256~uint256~uint256_IDRC__fail
[2020-11-25 18:05:04,296 INFO  L138     BoogieDeclarations]: Found implementation of procedure startAirdrop~uint256~uint256~uint256~uint256_IDRC__success
[2020-11-25 18:05:04,297 INFO  L138     BoogieDeclarations]: Found implementation of procedure startSale~uint256~uint256~uint256~uint256~uint256_IDRC__fail
[2020-11-25 18:05:04,297 INFO  L138     BoogieDeclarations]: Found implementation of procedure startSale~uint256~uint256~uint256~uint256~uint256_IDRC__success
[2020-11-25 18:05:04,297 INFO  L138     BoogieDeclarations]: Found implementation of procedure clearETH_IDRC__fail
[2020-11-25 18:05:04,297 INFO  L138     BoogieDeclarations]: Found implementation of procedure clearETH_IDRC__success
[2020-11-25 18:05:04,297 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackMethod_IDRC__fail
[2020-11-25 18:05:04,297 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackMethod_IDRC__success
[2020-11-25 18:05:04,297 INFO  L138     BoogieDeclarations]: Found implementation of procedure aSBlock_IDRC__fail
[2020-11-25 18:05:04,297 INFO  L138     BoogieDeclarations]: Found implementation of procedure aSBlock_IDRC__success
[2020-11-25 18:05:04,297 INFO  L138     BoogieDeclarations]: Found implementation of procedure aEBlock_IDRC__fail
[2020-11-25 18:05:04,297 INFO  L138     BoogieDeclarations]: Found implementation of procedure aEBlock_IDRC__success
[2020-11-25 18:05:04,298 INFO  L138     BoogieDeclarations]: Found implementation of procedure aCap_IDRC__fail
[2020-11-25 18:05:04,298 INFO  L138     BoogieDeclarations]: Found implementation of procedure aCap_IDRC__success
[2020-11-25 18:05:04,298 INFO  L138     BoogieDeclarations]: Found implementation of procedure aTot_IDRC__fail
[2020-11-25 18:05:04,298 INFO  L138     BoogieDeclarations]: Found implementation of procedure aTot_IDRC__success
[2020-11-25 18:05:04,298 INFO  L138     BoogieDeclarations]: Found implementation of procedure aAmt_IDRC__fail
[2020-11-25 18:05:04,298 INFO  L138     BoogieDeclarations]: Found implementation of procedure aAmt_IDRC__success
[2020-11-25 18:05:04,298 INFO  L138     BoogieDeclarations]: Found implementation of procedure sSBlock_IDRC__fail
[2020-11-25 18:05:04,298 INFO  L138     BoogieDeclarations]: Found implementation of procedure sSBlock_IDRC__success
[2020-11-25 18:05:04,298 INFO  L138     BoogieDeclarations]: Found implementation of procedure sEBlock_IDRC__fail
[2020-11-25 18:05:04,298 INFO  L138     BoogieDeclarations]: Found implementation of procedure sEBlock_IDRC__success
[2020-11-25 18:05:04,298 INFO  L138     BoogieDeclarations]: Found implementation of procedure sCap_IDRC__fail
[2020-11-25 18:05:04,298 INFO  L138     BoogieDeclarations]: Found implementation of procedure sCap_IDRC__success
[2020-11-25 18:05:04,299 INFO  L138     BoogieDeclarations]: Found implementation of procedure sTot_IDRC__fail
[2020-11-25 18:05:04,299 INFO  L138     BoogieDeclarations]: Found implementation of procedure sTot_IDRC__success
[2020-11-25 18:05:04,299 INFO  L138     BoogieDeclarations]: Found implementation of procedure sChunk_IDRC__fail
[2020-11-25 18:05:04,299 INFO  L138     BoogieDeclarations]: Found implementation of procedure sChunk_IDRC__success
[2020-11-25 18:05:04,299 INFO  L138     BoogieDeclarations]: Found implementation of procedure sPrice_IDRC__fail
[2020-11-25 18:05:04,299 INFO  L138     BoogieDeclarations]: Found implementation of procedure sPrice_IDRC__success
[2020-11-25 18:05:04,299 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackDispatch__fail
[2020-11-25 18:05:04,299 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackDispatch__success
[2020-11-25 18:05:04,299 INFO  L138     BoogieDeclarations]: Found implementation of procedure Fallback_UnknownType__fail
[2020-11-25 18:05:04,299 INFO  L138     BoogieDeclarations]: Found implementation of procedure Fallback_UnknownType__success
[2020-11-25 18:05:04,299 INFO  L138     BoogieDeclarations]: Found implementation of procedure send__fail
[2020-11-25 18:05:04,299 INFO  L138     BoogieDeclarations]: Found implementation of procedure send__success
[2020-11-25 18:05:04,300 INFO  L138     BoogieDeclarations]: Found implementation of procedure onlyOwner_pre__fail
[2020-11-25 18:05:04,300 INFO  L138     BoogieDeclarations]: Found implementation of procedure onlyOwner_pre__success
[2020-11-25 18:05:04,300 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_SafeMath
[2020-11-25 18:05:04,300 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_SafeMath
[2020-11-25 18:05:04,300 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_ERC20Interface
[2020-11-25 18:05:04,300 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_ERC20Interface
[2020-11-25 18:05:04,300 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_ApproveAndCallFallBack
[2020-11-25 18:05:04,300 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_ApproveAndCallFallBack
[2020-11-25 18:05:04,300 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_Owned
[2020-11-25 18:05:04,300 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_Owned
[2020-11-25 18:05:04,300 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_TokenERC20
[2020-11-25 18:05:04,300 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_TokenERC20
[2020-11-25 18:05:04,301 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_IDRC
[2020-11-25 18:05:04,301 INFO  L138     BoogieDeclarations]: Found implementation of procedure main
[2020-11-25 18:05:04,301 INFO  L130     BoogieDeclarations]: Found specification of procedure ULTIMATE.start
[2020-11-25 18:05:04,301 INFO  L138     BoogieDeclarations]: Found implementation of procedure ULTIMATE.start
[2020-11-25 18:05:04,824 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 18:05:05,172 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 18:05:05,173 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 18:05:05,173 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 18:05:05,228 INFO  L281             CfgBuilder]: Using the 1 location(s) as analysis (start of procedure ULTIMATE.start)
[2020-11-25 18:05:05,228 INFO  L286             CfgBuilder]: Removed 6 assue(true) statements.
[2020-11-25 18:05:05,231 INFO  L202        PluginConnector]: Adding new model IDRC_0xbb2f95f286ec090555dca7c0bb49948c59494fdc_transfer-normal.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 06:05:05 BoogieIcfgContainer
[2020-11-25 18:05:05,231 INFO  L185        PluginConnector]: Executing the observer RCFGBuilderObserver from plugin RCFGBuilder for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 06:05:04" (2/2) ...
[2020-11-25 18:05:05,231 INFO  L85     RCFGBuilderObserver]: No WrapperNode. Let Ultimate process with next node
[2020-11-25 18:05:05,231 INFO  L205        PluginConnector]: Invalid model from RCFGBuilder for observer de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder.RCFGBuilderObserver@6924eb89 and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 06:05:05, skipping insertion in model container
[2020-11-25 18:05:05,231 INFO  L132        PluginConnector]: ------------------------ END RCFGBuilder----------------------------
[2020-11-25 18:05:05,232 INFO  L113        PluginConnector]: ------------------------UtopiaLTL2Aut----------------------------
[2020-11-25 18:05:05,232 INFO  L271        PluginConnector]: Initializing UtopiaLTL2Aut...
[2020-11-25 18:05:05,233 INFO  L276        PluginConnector]: UtopiaLTL2Aut initialized
[2020-11-25 18:05:05,233 INFO  L185        PluginConnector]: Executing the observer UtopiaLTL2AutObserver from plugin UtopiaLTL2Aut for "IDRC_0xbb2f95f286ec090555dca7c0bb49948c59494fdc_transfer-normal.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 06:05:03" (1/3) ...
[2020-11-25 18:05:05,234 INFO  L205        PluginConnector]: Invalid model from UtopiaLTL2Aut for observer edu.utexas.cs.utopia.ltl2aut.UtopiaLTL2AutObserver@2b5d0fdc and model type Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 06:05:05, skipping insertion in model container
[2020-11-25 18:05:05,234 INFO  L185        PluginConnector]: Executing the observer UtopiaLTL2AutObserver from plugin UtopiaLTL2Aut for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 06:05:04" (2/3) ...
No working directory specified, using /mnt/data0/jon/SmartPulseTool/ltl2ba
Starting monitored process 1 with /mnt/data0/jon/SmartPulseTool/ltl2ba -f ! ( ( [] ( a -> ( <>b ) ) ) )  (exit command is null, workingDir is null)
[2020-11-25 18:05:05,270 INFO  L202        PluginConnector]: Adding new model Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 06:05:05 NWAContainer
[2020-11-25 18:05:05,271 INFO  L132        PluginConnector]: ------------------------ END UtopiaLTL2Aut----------------------------
[2020-11-25 18:05:05,271 INFO  L113        PluginConnector]: ------------------------BÃ¼chi Program Product----------------------------
[2020-11-25 18:05:05,271 INFO  L271        PluginConnector]: Initializing BÃ¼chi Program Product...
[2020-11-25 18:05:05,271 INFO  L276        PluginConnector]: BÃ¼chi Program Product initialized
[2020-11-25 18:05:05,272 INFO  L185        PluginConnector]: Executing the observer BuchiProductObserver from plugin BÃ¼chi Program Product for "IDRC_0xbb2f95f286ec090555dca7c0bb49948c59494fdc_transfer-normal.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 06:05:05" (3/4) ...
[2020-11-25 18:05:05,273 INFO  L205        PluginConnector]: Invalid model from BÃ¼chi Program Product for observer de.uni_freiburg.informatik.ultimate.buchiprogramproduct.BuchiProductObserver@4b2c873c and model type LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 06:05:05, skipping insertion in model container
[2020-11-25 18:05:05,273 INFO  L185        PluginConnector]: Executing the observer BuchiProductObserver from plugin BÃ¼chi Program Product for "Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 06:05:05" (4/4) ...
[2020-11-25 18:05:05,276 INFO  L104   BuchiProductObserver]: Initial property automaton 2 locations, 3 edges
[2020-11-25 18:05:05,283 INFO  L110   BuchiProductObserver]: Initial RCFG 3567 locations, 4643 edges
[2020-11-25 18:05:05,283 INFO  L93    BuchiProductObserver]: Beginning generation of product automaton
[2020-11-25 18:05:05,296 INFO  L136       ProductGenerator]: The program has no step specification, so we assume maximum atomicity
[2020-11-25 18:05:07,084 INFO  L97    BuchiProductObserver]: Finished generation of product automaton successfully
[2020-11-25 18:05:07,094 INFO  L110   BuchiProductObserver]: BuchiProgram size 8360 locations, 14614 edges
[2020-11-25 18:05:07,094 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 06:05:07 BoogieIcfgContainer
[2020-11-25 18:05:07,095 INFO  L132        PluginConnector]: ------------------------ END BÃ¼chi Program Product----------------------------
[2020-11-25 18:05:07,095 INFO  L113        PluginConnector]: ------------------------BlockEncodingV2----------------------------
[2020-11-25 18:05:07,095 INFO  L271        PluginConnector]: Initializing BlockEncodingV2...
[2020-11-25 18:05:07,096 INFO  L276        PluginConnector]: BlockEncodingV2 initialized
[2020-11-25 18:05:07,097 INFO  L185        PluginConnector]: Executing the observer BlockEncodingObserver from plugin BlockEncodingV2 for "LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 06:05:07" (1/1) ...
[2020-11-25 18:05:07,216 INFO  L313           BlockEncoder]: Initial Icfg 8360 locations, 14614 edges
[2020-11-25 18:05:07,217 INFO  L258           BlockEncoder]: Using Remove infeasible edges
[2020-11-25 18:05:07,217 INFO  L270           BlockEncoder]: Using Minimize states even if more edges are added than removed.=true
[2020-11-25 18:05:07,217 INFO  L296           BlockEncoder]: Using Remove sink states
[2020-11-25 18:05:07,217 INFO  L171           BlockEncoder]: Using Apply optimizations until nothing changes=true
[2020-11-25 18:05:07,232 INFO  L70    emoveInfeasibleEdges]: Removed 84 edges and 15 locations because of local infeasibility
[2020-11-25 18:05:07,247 INFO  L70        RemoveSinkStates]: Removed 14 edges and 9 locations by removing sink states
[2020-11-25 18:05:07,262 INFO  L70    emoveInfeasibleEdges]: Removed 0 edges and 0 locations because of local infeasibility
[2020-11-25 18:05:07,266 INFO  L70        RemoveSinkStates]: Removed 0 edges and 0 locations by removing sink states
[2020-11-25 18:05:07,271 INFO  L237           BlockEncoder]: Using Create parallel compositions if possible
[2020-11-25 18:05:07,271 INFO  L66        ParallelComposer]: Creating parallel compositions
[2020-11-25 18:05:07,275 INFO  L313           BlockEncoder]: Encoded RCFG 8304 locations, 14469 edges
[2020-11-25 18:05:07,276 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.blockencoding CFG 25.11 06:05:07 BasicIcfg
[2020-11-25 18:05:07,276 INFO  L132        PluginConnector]: ------------------------ END BlockEncodingV2----------------------------
[2020-11-25 18:05:07,276 INFO  L113        PluginConnector]: ------------------------BuchiAutomizer----------------------------
[2020-11-25 18:05:07,276 INFO  L271        PluginConnector]: Initializing BuchiAutomizer...
[2020-11-25 18:05:07,278 INFO  L276        PluginConnector]: BuchiAutomizer initialized
[2020-11-25 18:05:07,278 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 18:05:07,278 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "IDRC_0xbb2f95f286ec090555dca7c0bb49948c59494fdc_transfer-normal.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 06:05:03" (1/6) ...
[2020-11-25 18:05:07,279 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@25434130 and model type IDRC_0xbb2f95f286ec090555dca7c0bb49948c59494fdc_transfer-normal.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 06:05:07, skipping insertion in model container
[2020-11-25 18:05:07,280 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 18:05:07,280 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 06:05:04" (2/6) ...
[2020-11-25 18:05:07,280 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@25434130 and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 06:05:07, skipping insertion in model container
[2020-11-25 18:05:07,280 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 18:05:07,280 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "IDRC_0xbb2f95f286ec090555dca7c0bb49948c59494fdc_transfer-normal.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 06:05:05" (3/6) ...
[2020-11-25 18:05:07,280 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@25434130 and model type IDRC_0xbb2f95f286ec090555dca7c0bb49948c59494fdc_transfer-normal.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer CFG 25.11 06:05:07, skipping insertion in model container
[2020-11-25 18:05:07,280 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 18:05:07,280 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 06:05:05" (4/6) ...
[2020-11-25 18:05:07,281 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@25434130 and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 06:05:07, skipping insertion in model container
[2020-11-25 18:05:07,281 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 18:05:07,281 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 06:05:07" (5/6) ...
[2020-11-25 18:05:07,281 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@25434130 and model type LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer OTHER 25.11 06:05:07, skipping insertion in model container
[2020-11-25 18:05:07,281 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 18:05:07,281 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.blockencoding CFG 25.11 06:05:07" (6/6) ...
[2020-11-25 18:05:07,282 INFO  L404   chiAutomizerObserver]: Analyzing ICFG IDRC_0xbb2f95f286ec090555dca7c0bb49948c59494fdc_transfer-normal.bpl_BEv2
[2020-11-25 18:05:07,316 INFO  L133   ementStrategyFactory]: Using default assertion order modulation
[2020-11-25 18:05:07,316 INFO  L377         BuchiCegarLoop]: Interprodecural is true
[2020-11-25 18:05:07,316 INFO  L378         BuchiCegarLoop]: Hoare is false
[2020-11-25 18:05:07,316 INFO  L379         BuchiCegarLoop]: Compute interpolants for Craig_TreeInterpolation
[2020-11-25 18:05:07,316 INFO  L380         BuchiCegarLoop]: Backedges is STRAIGHT_LINE
[2020-11-25 18:05:07,316 INFO  L381         BuchiCegarLoop]: Determinization is PREDICATE_ABSTRACTION
[2020-11-25 18:05:07,316 INFO  L382         BuchiCegarLoop]: Difference is false
[2020-11-25 18:05:07,316 INFO  L383         BuchiCegarLoop]: Minimize is MINIMIZE_SEVPA
[2020-11-25 18:05:07,316 INFO  L386         BuchiCegarLoop]: ======== Iteration 0==of CEGAR loop == BuchiCegarLoop========
[2020-11-25 18:05:07,365 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 8304 states.
[2020-11-25 18:05:07,443 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 18:05:07,444 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 18:05:07,444 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 18:05:07,451 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 18:05:07,451 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 18:05:07,451 INFO  L445         BuchiCegarLoop]: ======== Iteration 1============
[2020-11-25 18:05:07,451 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 8304 states.
[2020-11-25 18:05:07,485 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 18:05:07,485 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 18:05:07,485 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 18:05:07,486 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 18:05:07,486 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_transfer_TokenERC200 := false;
[L3]                 call_transfer_TokenERC200 := false;
[L3]     CALL        call main();
[L3]                 havoc p1;
[L7673]              assume null == 0;
[L7674]  CALL        call this := FreshRefGenerator__success();
[L4051]              havoc newRef;
[L4052]              assume Alloc[newRef] == false;
[L4053]              Alloc[newRef] := true;
[L4054]              assume newRef != null;
[L7674]  RET         call this := FreshRefGenerator__success();
[L7675]              assume now >= 0;
[L7676]              assume DType[this] == IDRC;
[L7677]              assume msgvalue_MSG == 0;
[L7678]              gas := gas - 53000;
[L7679]  CALL        call IDRC_IDRC__success(this, msgsender_MSG, msgvalue_MSG);
[L4741]  CALL        call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L4187]  CALL        call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4172]              assume msgsender_MSG != null;
[L4173]              Balance[this] := 0;
[L4187]  RET         call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4188]  COND FALSE  !(revert)
[L4741]  RET         call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L4742]  COND TRUE   revert
[L7679]  RET         call IDRC_IDRC__success(this, msgsender_MSG, msgvalue_MSG);
[L7680]              assume !revert && gas >= 0;

Loop:
[L7683]  CALL        call CorralChoice_IDRC(this);
[L7382]              havoc msgsender_MSG;
[L7383]              havoc msgvalue_MSG;
[L7384]              havoc choice;
[L7385]              havoc __ret_0_totalSupply;
[L7386]              havoc tokenOwner_s338;
[L7387]              havoc balance_s338;
[L7388]              havoc tokenOwner_s484;
[L7389]              havoc spender_s484;
[L7390]              havoc remaining_s484;
[L7391]              havoc to_s381;
[L7392]              havoc tokens_s381;
[L7393]              havoc success_s381;
[L7394]              havoc spender_s409;
[L7395]              havoc tokens_s409;
[L7396]              havoc success_s409;
[L7397]              havoc from_s468;
[L7398]              havoc to_s468;
[L7399]              havoc tokens_s468;
[L7400]              havoc success_s468;
[L7401]              havoc __ret_0_owner;
[L7402]              havoc __ret_0_newOwner;
[L7403]              havoc _newOwner_s217;
[L7404]              havoc __ret_0_symbol;
[L7405]              havoc __ret_0_name;
[L7406]              havoc __ret_0_decimals;
[L7407]              havoc spender_s527;
[L7408]              havoc tokens_s527;
[L7409]              havoc data_s527;
[L7410]              havoc success_s527;
[L7411]              havoc __ret_0_aSBlock;
[L7412]              havoc __ret_0_aEBlock;
[L7413]              havoc __ret_0_aCap;
[L7414]              havoc __ret_0_aTot;
[L7415]              havoc __ret_0_aAmt;
[L7416]              havoc __ret_0_sSBlock;
[L7417]              havoc __ret_0_sEBlock;
[L7418]              havoc __ret_0_sCap;
[L7419]              havoc __ret_0_sTot;
[L7420]              havoc __ret_0_sChunk;
[L7421]              havoc __ret_0_sPrice;
[L7422]              havoc _refer_s687;
[L7423]              havoc success_s687;
[L7424]              havoc _refer_s847;
[L7425]              havoc success_s847;
[L7426]              havoc StartBlock_s868;
[L7427]              havoc EndBlock_s868;
[L7428]              havoc DropCap_s868;
[L7429]              havoc DropCount_s868;
[L7430]              havoc DropAmount_s868;
[L7431]              havoc StartBlock_s892;
[L7432]              havoc EndBlock_s892;
[L7433]              havoc SaleCap_s892;
[L7434]              havoc SaleCount_s892;
[L7435]              havoc ChunkSize_s892;
[L7436]              havoc SalePrice_s892;
[L7437]              havoc _aSBlock_s926;
[L7438]              havoc _aEBlock_s926;
[L7439]              havoc _aAmt_s926;
[L7440]              havoc _aCap_s926;
[L7441]              havoc _sSBlock_s966;
[L7442]              havoc _sEBlock_s966;
[L7443]              havoc _sChunk_s966;
[L7444]              havoc _sPrice_s966;
[L7445]              havoc _sCap_s966;
[L7446]              havoc tmpNow;
[L7447]              havoc gas;
[L7448]              assume gas > 4000000 && gas <= 8000000;
[L7449]              tmpNow := now;
[L7450]              havoc now;
[L7451]              assume now > tmpNow;
[L7452]              assume msgsender_MSG != null;
[L7453]              assume DType[msgsender_MSG] != SafeMath;
[L7454]              assume DType[msgsender_MSG] != ERC20Interface;
[L7455]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L7456]              assume DType[msgsender_MSG] != Owned;
[L7457]              assume DType[msgsender_MSG] != TokenERC20;
[L7458]              assume DType[msgsender_MSG] != IDRC;
[L7459]              Alloc[msgsender_MSG] := true;
[L7460]  COND TRUE   choice == 32
[L7461]              gas := gas - 21000;
[L7462]  COND FALSE  !(gas >= 0)
[L7683]  RET         call CorralChoice_IDRC(this);

[2020-11-25 18:05:07,499 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 18:05:07,499 INFO  L82        PathProgramCache]: Analyzing trace with hash 1435167108, now seen corresponding path program 1 times
[2020-11-25 18:05:07,503 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 18:05:07,529 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 18:05:07,560 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 18:05:07,562 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 18:05:07,562 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [3] imperfect sequences [] total 3
[2020-11-25 18:05:08,044 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 18:05:08,053 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-11-25 18:05:08,053 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-11-25 18:05:08,054 INFO  L87              Difference]: Start difference. First operand 8304 states. Second operand 3 states.
[2020-11-25 18:05:08,387 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 18:05:08,387 INFO  L93              Difference]: Finished difference Result 8502 states and 14395 transitions.
[2020-11-25 18:05:08,387 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-11-25 18:05:08,388 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 8502 states and 14395 transitions.
[2020-11-25 18:05:08,434 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 18:05:08,498 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 8502 states to 8502 states and 14395 transitions.
[2020-11-25 18:05:08,499 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 14
[2020-11-25 18:05:08,502 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 399
[2020-11-25 18:05:08,502 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 8502 states and 14395 transitions.
[2020-11-25 18:05:08,526 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 18:05:08,526 INFO  L728         BuchiCegarLoop]: Abstraction has 8502 states and 14395 transitions.
[2020-11-25 18:05:08,547 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 8502 states and 14395 transitions.
[2020-11-25 18:05:08,663 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 8502 to 7554.
[2020-11-25 18:05:08,664 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 7554 states.
[2020-11-25 18:05:08,684 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 7554 states to 7554 states and 12712 transitions.
[2020-11-25 18:05:08,685 INFO  L751         BuchiCegarLoop]: Abstraction has 7554 states and 12712 transitions.
[2020-11-25 18:05:08,685 INFO  L631         BuchiCegarLoop]: Abstraction has 7554 states and 12712 transitions.
[2020-11-25 18:05:08,685 INFO  L445         BuchiCegarLoop]: ======== Iteration 2============
[2020-11-25 18:05:08,685 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 7554 states and 12712 transitions.
[2020-11-25 18:05:08,699 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 18:05:08,699 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 18:05:08,699 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 18:05:08,700 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 18:05:08,700 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                success_transfer_TokenERC200 := false;
[L3]                call_transfer_TokenERC200 := false;
[L3]     CALL       call main();
[L3]                havoc p1;
[L7673]             assume null == 0;
[L7674]  CALL       call this := FreshRefGenerator__success();
[L4051]             havoc newRef;
[L4052]             assume Alloc[newRef] == false;
[L4053]             Alloc[newRef] := true;
[L4054]             assume newRef != null;
[L7674]  RET        call this := FreshRefGenerator__success();
[L7675]             assume now >= 0;
[L7676]             assume DType[this] == IDRC;
[L7677]             assume msgvalue_MSG == 0;
[L7678]             gas := gas - 53000;
[L7679]  CALL       call IDRC_IDRC__success(this, msgsender_MSG, msgvalue_MSG);
[L4741]  CALL       call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L4187]  CALL       call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4172]             assume msgsender_MSG != null;
[L4173]             Balance[this] := 0;
[L4187]  RET        call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4188]  COND TRUE  revert
[L4741]  RET        call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L4742]  COND TRUE  revert
[L7679]  RET        call IDRC_IDRC__success(this, msgsender_MSG, msgvalue_MSG);
[L7680]             assume !revert && gas >= 0;

Loop:
[L7683]  CALL        call CorralChoice_IDRC(this);
[L7382]              havoc msgsender_MSG;
[L7383]              havoc msgvalue_MSG;
[L7384]              havoc choice;
[L7385]              havoc __ret_0_totalSupply;
[L7386]              havoc tokenOwner_s338;
[L7387]              havoc balance_s338;
[L7388]              havoc tokenOwner_s484;
[L7389]              havoc spender_s484;
[L7390]              havoc remaining_s484;
[L7391]              havoc to_s381;
[L7392]              havoc tokens_s381;
[L7393]              havoc success_s381;
[L7394]              havoc spender_s409;
[L7395]              havoc tokens_s409;
[L7396]              havoc success_s409;
[L7397]              havoc from_s468;
[L7398]              havoc to_s468;
[L7399]              havoc tokens_s468;
[L7400]              havoc success_s468;
[L7401]              havoc __ret_0_owner;
[L7402]              havoc __ret_0_newOwner;
[L7403]              havoc _newOwner_s217;
[L7404]              havoc __ret_0_symbol;
[L7405]              havoc __ret_0_name;
[L7406]              havoc __ret_0_decimals;
[L7407]              havoc spender_s527;
[L7408]              havoc tokens_s527;
[L7409]              havoc data_s527;
[L7410]              havoc success_s527;
[L7411]              havoc __ret_0_aSBlock;
[L7412]              havoc __ret_0_aEBlock;
[L7413]              havoc __ret_0_aCap;
[L7414]              havoc __ret_0_aTot;
[L7415]              havoc __ret_0_aAmt;
[L7416]              havoc __ret_0_sSBlock;
[L7417]              havoc __ret_0_sEBlock;
[L7418]              havoc __ret_0_sCap;
[L7419]              havoc __ret_0_sTot;
[L7420]              havoc __ret_0_sChunk;
[L7421]              havoc __ret_0_sPrice;
[L7422]              havoc _refer_s687;
[L7423]              havoc success_s687;
[L7424]              havoc _refer_s847;
[L7425]              havoc success_s847;
[L7426]              havoc StartBlock_s868;
[L7427]              havoc EndBlock_s868;
[L7428]              havoc DropCap_s868;
[L7429]              havoc DropCount_s868;
[L7430]              havoc DropAmount_s868;
[L7431]              havoc StartBlock_s892;
[L7432]              havoc EndBlock_s892;
[L7433]              havoc SaleCap_s892;
[L7434]              havoc SaleCount_s892;
[L7435]              havoc ChunkSize_s892;
[L7436]              havoc SalePrice_s892;
[L7437]              havoc _aSBlock_s926;
[L7438]              havoc _aEBlock_s926;
[L7439]              havoc _aAmt_s926;
[L7440]              havoc _aCap_s926;
[L7441]              havoc _sSBlock_s966;
[L7442]              havoc _sEBlock_s966;
[L7443]              havoc _sChunk_s966;
[L7444]              havoc _sPrice_s966;
[L7445]              havoc _sCap_s966;
[L7446]              havoc tmpNow;
[L7447]              havoc gas;
[L7448]              assume gas > 4000000 && gas <= 8000000;
[L7449]              tmpNow := now;
[L7450]              havoc now;
[L7451]              assume now > tmpNow;
[L7452]              assume msgsender_MSG != null;
[L7453]              assume DType[msgsender_MSG] != SafeMath;
[L7454]              assume DType[msgsender_MSG] != ERC20Interface;
[L7455]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L7456]              assume DType[msgsender_MSG] != Owned;
[L7457]              assume DType[msgsender_MSG] != TokenERC20;
[L7458]              assume DType[msgsender_MSG] != IDRC;
[L7459]              Alloc[msgsender_MSG] := true;
[L7460]  COND TRUE   choice == 32
[L7461]              gas := gas - 21000;
[L7462]  COND FALSE  !(gas >= 0)
[L7683]  RET         call CorralChoice_IDRC(this);

[2020-11-25 18:05:08,702 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 18:05:08,702 INFO  L82        PathProgramCache]: Analyzing trace with hash 755108738, now seen corresponding path program 1 times
[2020-11-25 18:05:08,703 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 18:05:08,707 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 18:05:08,713 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 18:05:08,714 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 18:05:08,714 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [2] imperfect sequences [] total 2
[2020-11-25 18:05:08,714 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 18:05:08,715 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-11-25 18:05:08,715 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-11-25 18:05:08,715 INFO  L87              Difference]: Start difference. First operand 7554 states and 12712 transitions. cyclomatic complexity: 5164 Second operand 3 states.
[2020-11-25 18:05:08,924 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 18:05:08,924 INFO  L93              Difference]: Finished difference Result 7433 states and 8751 transitions.
[2020-11-25 18:05:08,925 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-11-25 18:05:08,925 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 7433 states and 8751 transitions.
[2020-11-25 18:05:08,942 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 18:05:08,968 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 7433 states to 7433 states and 8751 transitions.
[2020-11-25 18:05:08,968 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 244
[2020-11-25 18:05:08,968 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 244
[2020-11-25 18:05:08,968 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 7433 states and 8751 transitions.
[2020-11-25 18:05:08,974 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 18:05:08,974 INFO  L728         BuchiCegarLoop]: Abstraction has 7433 states and 8751 transitions.
[2020-11-25 18:05:08,981 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 7433 states and 8751 transitions.
[2020-11-25 18:05:09,035 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 7433 to 7433.
[2020-11-25 18:05:09,035 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 7433 states.
[2020-11-25 18:05:09,046 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 7433 states to 7433 states and 8751 transitions.
[2020-11-25 18:05:09,046 INFO  L751         BuchiCegarLoop]: Abstraction has 7433 states and 8751 transitions.
[2020-11-25 18:05:09,046 INFO  L631         BuchiCegarLoop]: Abstraction has 7433 states and 8751 transitions.
[2020-11-25 18:05:09,046 INFO  L445         BuchiCegarLoop]: ======== Iteration 3============
[2020-11-25 18:05:09,046 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 7433 states and 8751 transitions.
[2020-11-25 18:05:09,055 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 18:05:09,055 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 18:05:09,055 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 18:05:09,057 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 18:05:09,057 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_transfer_TokenERC200 := false;
[L3]                 call_transfer_TokenERC200 := false;
[L3]     CALL        call main();
[L3]                 havoc p1;
[L7673]              assume null == 0;
[L7674]  CALL        call this := FreshRefGenerator__success();
[L4051]              havoc newRef;
[L4052]              assume Alloc[newRef] == false;
[L4053]              Alloc[newRef] := true;
[L4054]              assume newRef != null;
[L7674]  RET         call this := FreshRefGenerator__success();
[L7675]              assume now >= 0;
[L7676]              assume DType[this] == IDRC;
[L7677]              assume msgvalue_MSG == 0;
[L7678]              gas := gas - 53000;
[L7679]  CALL        call IDRC_IDRC__success(this, msgsender_MSG, msgvalue_MSG);
[L4741]  CALL        call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L4187]  CALL        call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4172]              assume msgsender_MSG != null;
[L4173]              Balance[this] := 0;
[L4187]  RET         call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4188]  COND TRUE   revert
[L4741]  RET         call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L4742]  COND TRUE   revert
[L7679]  RET         call IDRC_IDRC__success(this, msgsender_MSG, msgvalue_MSG);
[L7680]              assume !revert && gas >= 0;
[L7683]  CALL        call CorralChoice_IDRC(this);
[L7382]              havoc msgsender_MSG;
[L7383]              havoc msgvalue_MSG;
[L7384]              havoc choice;
[L7385]              havoc __ret_0_totalSupply;
[L7386]              havoc tokenOwner_s338;
[L7387]              havoc balance_s338;
[L7388]              havoc tokenOwner_s484;
[L7389]              havoc spender_s484;
[L7390]              havoc remaining_s484;
[L7391]              havoc to_s381;
[L7392]              havoc tokens_s381;
[L7393]              havoc success_s381;
[L7394]              havoc spender_s409;
[L7395]              havoc tokens_s409;
[L7396]              havoc success_s409;
[L7397]              havoc from_s468;
[L7398]              havoc to_s468;
[L7399]              havoc tokens_s468;
[L7400]              havoc success_s468;
[L7401]              havoc __ret_0_owner;
[L7402]              havoc __ret_0_newOwner;
[L7403]              havoc _newOwner_s217;
[L7404]              havoc __ret_0_symbol;
[L7405]              havoc __ret_0_name;
[L7406]              havoc __ret_0_decimals;
[L7407]              havoc spender_s527;
[L7408]              havoc tokens_s527;
[L7409]              havoc data_s527;
[L7410]              havoc success_s527;
[L7411]              havoc __ret_0_aSBlock;
[L7412]              havoc __ret_0_aEBlock;
[L7413]              havoc __ret_0_aCap;
[L7414]              havoc __ret_0_aTot;
[L7415]              havoc __ret_0_aAmt;
[L7416]              havoc __ret_0_sSBlock;
[L7417]              havoc __ret_0_sEBlock;
[L7418]              havoc __ret_0_sCap;
[L7419]              havoc __ret_0_sTot;
[L7420]              havoc __ret_0_sChunk;
[L7421]              havoc __ret_0_sPrice;
[L7422]              havoc _refer_s687;
[L7423]              havoc success_s687;
[L7424]              havoc _refer_s847;
[L7425]              havoc success_s847;
[L7426]              havoc StartBlock_s868;
[L7427]              havoc EndBlock_s868;
[L7428]              havoc DropCap_s868;
[L7429]              havoc DropCount_s868;
[L7430]              havoc DropAmount_s868;
[L7431]              havoc StartBlock_s892;
[L7432]              havoc EndBlock_s892;
[L7433]              havoc SaleCap_s892;
[L7434]              havoc SaleCount_s892;
[L7435]              havoc ChunkSize_s892;
[L7436]              havoc SalePrice_s892;
[L7437]              havoc _aSBlock_s926;
[L7438]              havoc _aEBlock_s926;
[L7439]              havoc _aAmt_s926;
[L7440]              havoc _aCap_s926;
[L7441]              havoc _sSBlock_s966;
[L7442]              havoc _sEBlock_s966;
[L7443]              havoc _sChunk_s966;
[L7444]              havoc _sPrice_s966;
[L7445]              havoc _sCap_s966;
[L7446]              havoc tmpNow;
[L7447]              havoc gas;
[L7448]              assume gas > 4000000 && gas <= 8000000;
[L7449]              tmpNow := now;
[L7450]              havoc now;
[L7451]              assume now > tmpNow;
[L7452]              assume msgsender_MSG != null;
[L7453]              assume DType[msgsender_MSG] != SafeMath;
[L7454]              assume DType[msgsender_MSG] != ERC20Interface;
[L7455]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L7456]              assume DType[msgsender_MSG] != Owned;
[L7457]              assume DType[msgsender_MSG] != TokenERC20;
[L7458]              assume DType[msgsender_MSG] != IDRC;
[L7459]              Alloc[msgsender_MSG] := true;
[L7460]  COND FALSE  !(choice == 32)
[L7466]  COND FALSE  !(choice == 31)
[L7472]  COND FALSE  !(choice == 30)
[L7478]  COND TRUE   choice == 29
[L7479]              gas := gas - 21000;
[L7480]  COND TRUE   gas >= 0
[L7481]              assume tokens_s381 >= 0 && tokens_s381 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7482]              assume msgvalue_MSG == 0;
[L7483]  CALL        call success_s381 := transfer~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, to_s381, tokens_s381);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((p1 != msgsender_MSG && p1 != to_s381) && msgsender_MSG != to_s381) && tokens_s381 <= balances_TokenERC20[this][msgsender_MSG]) && balances_TokenERC20[this][to_s381] + tokens_s381 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && tokens_s381 >= 0) && tokens_s381 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_TokenERC20[this][to_s381] >= 0) && balances_TokenERC20[this][to_s381] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_TokenERC20[this][msgsender_MSG] >= 0) && balances_TokenERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transfer_TokenERC200 := true;
[L3]                 call_transfer_TokenERC200 := false;
[L3]                 revert := revert_hold;
[L979]               havoc __exception;
[L980]               revert := false;
[L981]   COND FALSE  !(__exception)
[L1015]  CALL        call success_s381 := transfer~address~uint256_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s381, tokens_s381);
[L4479]  CALL        call __var_5 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_TokenERC20[this][msgsender_MSG], tokens_s381);
[L4118]  COND TRUE   !(b_s45 <= a_s45)
[L4119]              revert := true;
[L4479]  RET         call __var_5 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_TokenERC20[this][msgsender_MSG], tokens_s381);
[L4480]  COND TRUE   revert
[L1015]  RET         call success_s381 := transfer~address~uint256_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s381, tokens_s381);
[L1016]              assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !(((((((((((((((((((((success_s381 == true && balances_TokenERC20[this][msgsender_MSG] == old(balances_TokenERC20[this][msgsender_MSG]) - tokens_s381) && balances_TokenERC20[this][to_s381] == old(balances_TokenERC20[this][to_s381]) + tokens_s381) && _totalSupply_TokenERC20[this] == old(_totalSupply_TokenERC20[this])) && allowed_TokenERC20[this] == old(allowed_TokenERC20[this])) && balances_TokenERC20[this][p1] == old(balances_TokenERC20[this][p1])) && aSBlock_IDRC[this] == old(aSBlock_IDRC[this])) && aEBlock_IDRC[this] == old(aEBlock_IDRC[this])) && aCap_IDRC[this] == old(aCap_IDRC[this])) && aTot_IDRC[this] == old(aTot_IDRC[this])) && aAmt_IDRC[this] == old(aAmt_IDRC[this])) && sSBlock_IDRC[this] == old(sSBlock_IDRC[this])) && sEBlock_IDRC[this] == old(sEBlock_IDRC[this])) && sCap_IDRC[this] == old(sCap_IDRC[this])) && sTot_IDRC[this] == old(sTot_IDRC[this])) && sChunk_IDRC[this] == old(sChunk_IDRC[this])) && sPrice_IDRC[this] == old(sPrice_IDRC[this])) && symbol_TokenERC20[this] == old(symbol_TokenERC20[this])) && name_TokenERC20[this] == old(name_TokenERC20[this])) && decimals_TokenERC20[this] == old(decimals_TokenERC20[this])) && owner_Owned[this] == old(owner_Owned[this])) && newOwner_Owned[this] == old(newOwner_Owned[this]));
[L3]                 revert := revert_hold;
[L7483]  RET         call success_s381 := transfer~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, to_s381, tokens_s381);
[L7683]  RET         call CorralChoice_IDRC(this);

Loop:
[L7683]  CALL        call CorralChoice_IDRC(this);
[L7382]              havoc msgsender_MSG;
[L7383]              havoc msgvalue_MSG;
[L7384]              havoc choice;
[L7385]              havoc __ret_0_totalSupply;
[L7386]              havoc tokenOwner_s338;
[L7387]              havoc balance_s338;
[L7388]              havoc tokenOwner_s484;
[L7389]              havoc spender_s484;
[L7390]              havoc remaining_s484;
[L7391]              havoc to_s381;
[L7392]              havoc tokens_s381;
[L7393]              havoc success_s381;
[L7394]              havoc spender_s409;
[L7395]              havoc tokens_s409;
[L7396]              havoc success_s409;
[L7397]              havoc from_s468;
[L7398]              havoc to_s468;
[L7399]              havoc tokens_s468;
[L7400]              havoc success_s468;
[L7401]              havoc __ret_0_owner;
[L7402]              havoc __ret_0_newOwner;
[L7403]              havoc _newOwner_s217;
[L7404]              havoc __ret_0_symbol;
[L7405]              havoc __ret_0_name;
[L7406]              havoc __ret_0_decimals;
[L7407]              havoc spender_s527;
[L7408]              havoc tokens_s527;
[L7409]              havoc data_s527;
[L7410]              havoc success_s527;
[L7411]              havoc __ret_0_aSBlock;
[L7412]              havoc __ret_0_aEBlock;
[L7413]              havoc __ret_0_aCap;
[L7414]              havoc __ret_0_aTot;
[L7415]              havoc __ret_0_aAmt;
[L7416]              havoc __ret_0_sSBlock;
[L7417]              havoc __ret_0_sEBlock;
[L7418]              havoc __ret_0_sCap;
[L7419]              havoc __ret_0_sTot;
[L7420]              havoc __ret_0_sChunk;
[L7421]              havoc __ret_0_sPrice;
[L7422]              havoc _refer_s687;
[L7423]              havoc success_s687;
[L7424]              havoc _refer_s847;
[L7425]              havoc success_s847;
[L7426]              havoc StartBlock_s868;
[L7427]              havoc EndBlock_s868;
[L7428]              havoc DropCap_s868;
[L7429]              havoc DropCount_s868;
[L7430]              havoc DropAmount_s868;
[L7431]              havoc StartBlock_s892;
[L7432]              havoc EndBlock_s892;
[L7433]              havoc SaleCap_s892;
[L7434]              havoc SaleCount_s892;
[L7435]              havoc ChunkSize_s892;
[L7436]              havoc SalePrice_s892;
[L7437]              havoc _aSBlock_s926;
[L7438]              havoc _aEBlock_s926;
[L7439]              havoc _aAmt_s926;
[L7440]              havoc _aCap_s926;
[L7441]              havoc _sSBlock_s966;
[L7442]              havoc _sEBlock_s966;
[L7443]              havoc _sChunk_s966;
[L7444]              havoc _sPrice_s966;
[L7445]              havoc _sCap_s966;
[L7446]              havoc tmpNow;
[L7447]              havoc gas;
[L7448]              assume gas > 4000000 && gas <= 8000000;
[L7449]              tmpNow := now;
[L7450]              havoc now;
[L7451]              assume now > tmpNow;
[L7452]              assume msgsender_MSG != null;
[L7453]              assume DType[msgsender_MSG] != SafeMath;
[L7454]              assume DType[msgsender_MSG] != ERC20Interface;
[L7455]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L7456]              assume DType[msgsender_MSG] != Owned;
[L7457]              assume DType[msgsender_MSG] != TokenERC20;
[L7458]              assume DType[msgsender_MSG] != IDRC;
[L7459]              Alloc[msgsender_MSG] := true;
[L7460]  COND FALSE  !(choice == 32)
[L7466]  COND FALSE  !(choice == 31)
[L7472]  COND FALSE  !(choice == 30)
[L7478]  COND TRUE   choice == 29
[L7479]              gas := gas - 21000;
[L7480]  COND TRUE   gas >= 0
[L7481]              assume tokens_s381 >= 0 && tokens_s381 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7482]              assume msgvalue_MSG == 0;
[L7483]  CALL        call success_s381 := transfer~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, to_s381, tokens_s381);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((p1 != msgsender_MSG && p1 != to_s381) && msgsender_MSG != to_s381) && tokens_s381 <= balances_TokenERC20[this][msgsender_MSG]) && balances_TokenERC20[this][to_s381] + tokens_s381 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && tokens_s381 >= 0) && tokens_s381 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_TokenERC20[this][to_s381] >= 0) && balances_TokenERC20[this][to_s381] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_TokenERC20[this][msgsender_MSG] >= 0) && balances_TokenERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transfer_TokenERC200 := true;
[L3]                 call_transfer_TokenERC200 := false;
[L3]                 revert := revert_hold;
[L979]               havoc __exception;
[L980]               revert := false;
[L981]   COND FALSE  !(__exception)
[L1015]  CALL        call success_s381 := transfer~address~uint256_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s381, tokens_s381);
[L4479]  CALL        call __var_5 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_TokenERC20[this][msgsender_MSG], tokens_s381);
[L4118]  COND TRUE   !(b_s45 <= a_s45)
[L4119]              revert := true;
[L4479]  RET         call __var_5 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_TokenERC20[this][msgsender_MSG], tokens_s381);
[L4480]  COND TRUE   revert
[L1015]  RET         call success_s381 := transfer~address~uint256_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s381, tokens_s381);
[L1016]              assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !(((((((((((((((((((((success_s381 == true && balances_TokenERC20[this][msgsender_MSG] == old(balances_TokenERC20[this][msgsender_MSG]) - tokens_s381) && balances_TokenERC20[this][to_s381] == old(balances_TokenERC20[this][to_s381]) + tokens_s381) && _totalSupply_TokenERC20[this] == old(_totalSupply_TokenERC20[this])) && allowed_TokenERC20[this] == old(allowed_TokenERC20[this])) && balances_TokenERC20[this][p1] == old(balances_TokenERC20[this][p1])) && aSBlock_IDRC[this] == old(aSBlock_IDRC[this])) && aEBlock_IDRC[this] == old(aEBlock_IDRC[this])) && aCap_IDRC[this] == old(aCap_IDRC[this])) && aTot_IDRC[this] == old(aTot_IDRC[this])) && aAmt_IDRC[this] == old(aAmt_IDRC[this])) && sSBlock_IDRC[this] == old(sSBlock_IDRC[this])) && sEBlock_IDRC[this] == old(sEBlock_IDRC[this])) && sCap_IDRC[this] == old(sCap_IDRC[this])) && sTot_IDRC[this] == old(sTot_IDRC[this])) && sChunk_IDRC[this] == old(sChunk_IDRC[this])) && sPrice_IDRC[this] == old(sPrice_IDRC[this])) && symbol_TokenERC20[this] == old(symbol_TokenERC20[this])) && name_TokenERC20[this] == old(name_TokenERC20[this])) && decimals_TokenERC20[this] == old(decimals_TokenERC20[this])) && owner_Owned[this] == old(owner_Owned[this])) && newOwner_Owned[this] == old(newOwner_Owned[this]));
[L3]                 revert := revert_hold;
[L7483]  RET         call success_s381 := transfer~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, to_s381, tokens_s381);
[L7683]  RET         call CorralChoice_IDRC(this);

[2020-11-25 18:05:09,061 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 18:05:09,061 INFO  L82        PathProgramCache]: Analyzing trace with hash 435483359, now seen corresponding path program 1 times
[2020-11-25 18:05:09,062 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 18:05:09,073 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 18:05:09,100 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 18:05:09,101 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 18:05:09,101 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [3] imperfect sequences [] total 3
[2020-11-25 18:05:09,101 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 18:05:09,101 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-11-25 18:05:09,101 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-11-25 18:05:09,101 INFO  L87              Difference]: Start difference. First operand 7433 states and 8751 transitions. cyclomatic complexity: 1324 Second operand 3 states.
[2020-11-25 18:05:09,216 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 18:05:09,216 INFO  L93              Difference]: Finished difference Result 8377 states and 9747 transitions.
[2020-11-25 18:05:09,216 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-11-25 18:05:09,216 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 8377 states and 9747 transitions.
[2020-11-25 18:05:09,234 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 18:05:09,260 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 8377 states to 8073 states and 9379 transitions.
[2020-11-25 18:05:09,260 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 306
[2020-11-25 18:05:09,260 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 306
[2020-11-25 18:05:09,260 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 8073 states and 9379 transitions.
[2020-11-25 18:05:09,267 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 18:05:09,267 INFO  L728         BuchiCegarLoop]: Abstraction has 8073 states and 9379 transitions.
[2020-11-25 18:05:09,273 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 8073 states and 9379 transitions.
[2020-11-25 18:05:09,314 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 8073 to 7185.
[2020-11-25 18:05:09,315 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 7185 states.
[2020-11-25 18:05:09,321 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 7185 states to 7185 states and 8269 transitions.
[2020-11-25 18:05:09,321 INFO  L751         BuchiCegarLoop]: Abstraction has 7185 states and 8269 transitions.
[2020-11-25 18:05:09,321 INFO  L631         BuchiCegarLoop]: Abstraction has 7185 states and 8269 transitions.
[2020-11-25 18:05:09,321 INFO  L445         BuchiCegarLoop]: ======== Iteration 4============
[2020-11-25 18:05:09,321 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 7185 states and 8269 transitions.
[2020-11-25 18:05:09,327 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 18:05:09,327 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 18:05:09,327 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 18:05:09,329 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 18:05:09,329 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_transfer_TokenERC200 := false;
[L3]                 call_transfer_TokenERC200 := false;
[L3]     CALL        call main();
[L3]                 havoc p1;
[L7673]              assume null == 0;
[L7674]  CALL        call this := FreshRefGenerator__success();
[L4051]              havoc newRef;
[L4052]              assume Alloc[newRef] == false;
[L4053]              Alloc[newRef] := true;
[L4054]              assume newRef != null;
[L7674]  RET         call this := FreshRefGenerator__success();
[L7675]              assume now >= 0;
[L7676]              assume DType[this] == IDRC;
[L7677]              assume msgvalue_MSG == 0;
[L7678]              gas := gas - 53000;
[L7679]  CALL        call IDRC_IDRC__success(this, msgsender_MSG, msgvalue_MSG);
[L4741]  CALL        call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L4187]  CALL        call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4172]              assume msgsender_MSG != null;
[L4173]              Balance[this] := 0;
[L4187]  RET         call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4188]  COND FALSE  !(revert)
[L4741]  RET         call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L4742]  COND FALSE  !(revert)
[L4745]  CALL        call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L4257]  CALL        call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4239]              assume msgsender_MSG != null;
[L4240]              Balance[this] := 0;
[L4241]              owner_Owned[this] := null;
[L4242]              newOwner_Owned[this] := null;
[L4244]              owner_Owned[this] := msgsender_MSG;
[L4257]  RET         call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4258]  COND FALSE  !(revert)
[L4745]  RET         call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L4746]  COND FALSE  !(revert)
[L4749]  CALL        call TokenERC20_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4401]  CALL        call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L4187]  CALL        call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4172]              assume msgsender_MSG != null;
[L4173]              Balance[this] := 0;
[L4187]  RET         call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4188]  COND FALSE  !(revert)
[L4401]  RET         call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L4402]  COND FALSE  !(revert)
[L4405]  CALL        call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L4257]  CALL        call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4239]              assume msgsender_MSG != null;
[L4240]              Balance[this] := 0;
[L4241]              owner_Owned[this] := null;
[L4242]              newOwner_Owned[this] := null;
[L4244]              owner_Owned[this] := msgsender_MSG;
[L4257]  RET         call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4258]  COND FALSE  !(revert)
[L4405]  RET         call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L4406]  COND FALSE  !(revert)
[L4409]  CALL        call TokenERC20_TokenERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4359]              assume msgsender_MSG != null;
[L4360]              Balance[this] := 0;
[L4361]              symbol_TokenERC20[this] := -1901357083;
[L4362]              name_TokenERC20[this] := -1901357083;
[L4363]              decimals_TokenERC20[this] := 0;
[L4364]              _totalSupply_TokenERC20[this] := 0;
[L4365]              balances_TokenERC20[this] := zeroRefintArr();
[L4366]              sum_balances0[this] := 0;
[L4367]              allowed_TokenERC20[this] := zeroRefRefintArr();
[L4368]              sum_allowed1[this] := 0;
[L4370]              symbol_TokenERC20[this] := -892594266;
[L4371]              name_TokenERC20[this] := -1541073350;
[L4372]              decimals_TokenERC20[this] := 6;
[L4373]              __var_2 := decimals_TokenERC20[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4374]              _totalSupply_TokenERC20[this] := nonlinearMul(129746337890625 % 115792089237316195423570985008687907853269984665640564039457584007913129639936, nonlinearPow(10, decimals_TokenERC20[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4375]              sum_balances0[this] := sum_balances0[this] - balances_TokenERC20[this][owner_Owned[this]];
[L4376]              balances_TokenERC20[this][owner_Owned[this]] := _totalSupply_TokenERC20[this];
[L4377]              sum_balances0[this] := sum_balances0[this] + balances_TokenERC20[this][owner_Owned[this]];
[L4378]              assert { :EventEmitted "Transfer_TokenERC20" } true;
[L4409]  RET         call TokenERC20_TokenERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4410]  COND FALSE  !(revert)
[L4749]  RET         call TokenERC20_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4750]  COND FALSE  !(revert)
[L4753]  CALL        call IDRC_IDRC_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4703]              assume msgsender_MSG != null;
[L4704]              Balance[this] := 0;
[L4705]              aSBlock_IDRC[this] := 0;
[L4706]              aEBlock_IDRC[this] := 0;
[L4707]              aCap_IDRC[this] := 0;
[L4708]              aTot_IDRC[this] := 0;
[L4709]              aAmt_IDRC[this] := 0;
[L4710]              sSBlock_IDRC[this] := 0;
[L4711]              sEBlock_IDRC[this] := 0;
[L4712]              sCap_IDRC[this] := 0;
[L4713]              sTot_IDRC[this] := 0;
[L4714]              sChunk_IDRC[this] := 0;
[L4715]              sPrice_IDRC[this] := 0;
[L4753]  RET         call IDRC_IDRC_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4754]  COND FALSE  !(revert)
[L7679]  RET         call IDRC_IDRC__success(this, msgsender_MSG, msgvalue_MSG);
[L7680]              assume !revert && gas >= 0;
[L7683]  CALL        call CorralChoice_IDRC(this);
[L7382]              havoc msgsender_MSG;
[L7383]              havoc msgvalue_MSG;
[L7384]              havoc choice;
[L7385]              havoc __ret_0_totalSupply;
[L7386]              havoc tokenOwner_s338;
[L7387]              havoc balance_s338;
[L7388]              havoc tokenOwner_s484;
[L7389]              havoc spender_s484;
[L7390]              havoc remaining_s484;
[L7391]              havoc to_s381;
[L7392]              havoc tokens_s381;
[L7393]              havoc success_s381;
[L7394]              havoc spender_s409;
[L7395]              havoc tokens_s409;
[L7396]              havoc success_s409;
[L7397]              havoc from_s468;
[L7398]              havoc to_s468;
[L7399]              havoc tokens_s468;
[L7400]              havoc success_s468;
[L7401]              havoc __ret_0_owner;
[L7402]              havoc __ret_0_newOwner;
[L7403]              havoc _newOwner_s217;
[L7404]              havoc __ret_0_symbol;
[L7405]              havoc __ret_0_name;
[L7406]              havoc __ret_0_decimals;
[L7407]              havoc spender_s527;
[L7408]              havoc tokens_s527;
[L7409]              havoc data_s527;
[L7410]              havoc success_s527;
[L7411]              havoc __ret_0_aSBlock;
[L7412]              havoc __ret_0_aEBlock;
[L7413]              havoc __ret_0_aCap;
[L7414]              havoc __ret_0_aTot;
[L7415]              havoc __ret_0_aAmt;
[L7416]              havoc __ret_0_sSBlock;
[L7417]              havoc __ret_0_sEBlock;
[L7418]              havoc __ret_0_sCap;
[L7419]              havoc __ret_0_sTot;
[L7420]              havoc __ret_0_sChunk;
[L7421]              havoc __ret_0_sPrice;
[L7422]              havoc _refer_s687;
[L7423]              havoc success_s687;
[L7424]              havoc _refer_s847;
[L7425]              havoc success_s847;
[L7426]              havoc StartBlock_s868;
[L7427]              havoc EndBlock_s868;
[L7428]              havoc DropCap_s868;
[L7429]              havoc DropCount_s868;
[L7430]              havoc DropAmount_s868;
[L7431]              havoc StartBlock_s892;
[L7432]              havoc EndBlock_s892;
[L7433]              havoc SaleCap_s892;
[L7434]              havoc SaleCount_s892;
[L7435]              havoc ChunkSize_s892;
[L7436]              havoc SalePrice_s892;
[L7437]              havoc _aSBlock_s926;
[L7438]              havoc _aEBlock_s926;
[L7439]              havoc _aAmt_s926;
[L7440]              havoc _aCap_s926;
[L7441]              havoc _sSBlock_s966;
[L7442]              havoc _sEBlock_s966;
[L7443]              havoc _sChunk_s966;
[L7444]              havoc _sPrice_s966;
[L7445]              havoc _sCap_s966;
[L7446]              havoc tmpNow;
[L7447]              havoc gas;
[L7448]              assume gas > 4000000 && gas <= 8000000;
[L7449]              tmpNow := now;
[L7450]              havoc now;
[L7451]              assume now > tmpNow;
[L7452]              assume msgsender_MSG != null;
[L7453]              assume DType[msgsender_MSG] != SafeMath;
[L7454]              assume DType[msgsender_MSG] != ERC20Interface;
[L7455]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L7456]              assume DType[msgsender_MSG] != Owned;
[L7457]              assume DType[msgsender_MSG] != TokenERC20;
[L7458]              assume DType[msgsender_MSG] != IDRC;
[L7459]              Alloc[msgsender_MSG] := true;
[L7460]  COND FALSE  !(choice == 32)
[L7466]  COND FALSE  !(choice == 31)
[L7472]  COND FALSE  !(choice == 30)
[L7478]  COND TRUE   choice == 29
[L7479]              gas := gas - 21000;
[L7480]  COND TRUE   gas >= 0
[L7481]              assume tokens_s381 >= 0 && tokens_s381 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7482]              assume msgvalue_MSG == 0;
[L7483]  CALL        call success_s381 := transfer~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, to_s381, tokens_s381);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((p1 != msgsender_MSG && p1 != to_s381) && msgsender_MSG != to_s381) && tokens_s381 <= balances_TokenERC20[this][msgsender_MSG]) && balances_TokenERC20[this][to_s381] + tokens_s381 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && tokens_s381 >= 0) && tokens_s381 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_TokenERC20[this][to_s381] >= 0) && balances_TokenERC20[this][to_s381] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_TokenERC20[this][msgsender_MSG] >= 0) && balances_TokenERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transfer_TokenERC200 := true;
[L3]                 call_transfer_TokenERC200 := false;
[L3]                 revert := revert_hold;
[L979]               havoc __exception;
[L980]               revert := false;
[L981]   COND FALSE  !(__exception)
[L1015]  CALL        call success_s381 := transfer~address~uint256_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s381, tokens_s381);
[L4479]  CALL        call __var_5 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_TokenERC20[this][msgsender_MSG], tokens_s381);
[L4118]  COND FALSE  !(!(b_s45 <= a_s45))
[L4122]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4479]  RET         call __var_5 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_TokenERC20[this][msgsender_MSG], tokens_s381);
[L4480]  COND FALSE  !(revert)
[L4483]              sum_balances0[this] := sum_balances0[this] - balances_TokenERC20[this][msgsender_MSG];
[L4484]              balances_TokenERC20[this][msgsender_MSG] := __var_5;
[L4485]              sum_balances0[this] := sum_balances0[this] + balances_TokenERC20[this][msgsender_MSG];
[L4486]  CALL        call __var_6 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_TokenERC20[this][to_s381], tokens_s381);
[L4100]              c_s23 := (a_s23 + b_s23) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4101]  COND FALSE  !(!(c_s23 >= a_s23))
[L4486]  RET         call __var_6 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_TokenERC20[this][to_s381], tokens_s381);
[L4487]  COND FALSE  !(revert)
[L4490]              sum_balances0[this] := sum_balances0[this] - balances_TokenERC20[this][to_s381];
[L4491]              balances_TokenERC20[this][to_s381] := __var_6;
[L4492]              sum_balances0[this] := sum_balances0[this] + balances_TokenERC20[this][to_s381];
[L4493]              assert { :EventEmitted "Transfer_TokenERC20" } true;
[L4494]              success_s381 := true;
[L1015]  RET         call success_s381 := transfer~address~uint256_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s381, tokens_s381);
[L1016]              assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !(((((((((((((((((((((success_s381 == true && balances_TokenERC20[this][msgsender_MSG] == old(balances_TokenERC20[this][msgsender_MSG]) - tokens_s381) && balances_TokenERC20[this][to_s381] == old(balances_TokenERC20[this][to_s381]) + tokens_s381) && _totalSupply_TokenERC20[this] == old(_totalSupply_TokenERC20[this])) && allowed_TokenERC20[this] == old(allowed_TokenERC20[this])) && balances_TokenERC20[this][p1] == old(balances_TokenERC20[this][p1])) && aSBlock_IDRC[this] == old(aSBlock_IDRC[this])) && aEBlock_IDRC[this] == old(aEBlock_IDRC[this])) && aCap_IDRC[this] == old(aCap_IDRC[this])) && aTot_IDRC[this] == old(aTot_IDRC[this])) && aAmt_IDRC[this] == old(aAmt_IDRC[this])) && sSBlock_IDRC[this] == old(sSBlock_IDRC[this])) && sEBlock_IDRC[this] == old(sEBlock_IDRC[this])) && sCap_IDRC[this] == old(sCap_IDRC[this])) && sTot_IDRC[this] == old(sTot_IDRC[this])) && sChunk_IDRC[this] == old(sChunk_IDRC[this])) && sPrice_IDRC[this] == old(sPrice_IDRC[this])) && symbol_TokenERC20[this] == old(symbol_TokenERC20[this])) && name_TokenERC20[this] == old(name_TokenERC20[this])) && decimals_TokenERC20[this] == old(decimals_TokenERC20[this])) && owner_Owned[this] == old(owner_Owned[this])) && newOwner_Owned[this] == old(newOwner_Owned[this]));
[L3]                 revert := revert_hold;
[L7483]  RET         call success_s381 := transfer~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, to_s381, tokens_s381);
[L7683]  RET         call CorralChoice_IDRC(this);

Loop:
[L7683]  CALL        call CorralChoice_IDRC(this);
[L7382]              havoc msgsender_MSG;
[L7383]              havoc msgvalue_MSG;
[L7384]              havoc choice;
[L7385]              havoc __ret_0_totalSupply;
[L7386]              havoc tokenOwner_s338;
[L7387]              havoc balance_s338;
[L7388]              havoc tokenOwner_s484;
[L7389]              havoc spender_s484;
[L7390]              havoc remaining_s484;
[L7391]              havoc to_s381;
[L7392]              havoc tokens_s381;
[L7393]              havoc success_s381;
[L7394]              havoc spender_s409;
[L7395]              havoc tokens_s409;
[L7396]              havoc success_s409;
[L7397]              havoc from_s468;
[L7398]              havoc to_s468;
[L7399]              havoc tokens_s468;
[L7400]              havoc success_s468;
[L7401]              havoc __ret_0_owner;
[L7402]              havoc __ret_0_newOwner;
[L7403]              havoc _newOwner_s217;
[L7404]              havoc __ret_0_symbol;
[L7405]              havoc __ret_0_name;
[L7406]              havoc __ret_0_decimals;
[L7407]              havoc spender_s527;
[L7408]              havoc tokens_s527;
[L7409]              havoc data_s527;
[L7410]              havoc success_s527;
[L7411]              havoc __ret_0_aSBlock;
[L7412]              havoc __ret_0_aEBlock;
[L7413]              havoc __ret_0_aCap;
[L7414]              havoc __ret_0_aTot;
[L7415]              havoc __ret_0_aAmt;
[L7416]              havoc __ret_0_sSBlock;
[L7417]              havoc __ret_0_sEBlock;
[L7418]              havoc __ret_0_sCap;
[L7419]              havoc __ret_0_sTot;
[L7420]              havoc __ret_0_sChunk;
[L7421]              havoc __ret_0_sPrice;
[L7422]              havoc _refer_s687;
[L7423]              havoc success_s687;
[L7424]              havoc _refer_s847;
[L7425]              havoc success_s847;
[L7426]              havoc StartBlock_s868;
[L7427]              havoc EndBlock_s868;
[L7428]              havoc DropCap_s868;
[L7429]              havoc DropCount_s868;
[L7430]              havoc DropAmount_s868;
[L7431]              havoc StartBlock_s892;
[L7432]              havoc EndBlock_s892;
[L7433]              havoc SaleCap_s892;
[L7434]              havoc SaleCount_s892;
[L7435]              havoc ChunkSize_s892;
[L7436]              havoc SalePrice_s892;
[L7437]              havoc _aSBlock_s926;
[L7438]              havoc _aEBlock_s926;
[L7439]              havoc _aAmt_s926;
[L7440]              havoc _aCap_s926;
[L7441]              havoc _sSBlock_s966;
[L7442]              havoc _sEBlock_s966;
[L7443]              havoc _sChunk_s966;
[L7444]              havoc _sPrice_s966;
[L7445]              havoc _sCap_s966;
[L7446]              havoc tmpNow;
[L7447]              havoc gas;
[L7448]              assume gas > 4000000 && gas <= 8000000;
[L7449]              tmpNow := now;
[L7450]              havoc now;
[L7451]              assume now > tmpNow;
[L7452]              assume msgsender_MSG != null;
[L7453]              assume DType[msgsender_MSG] != SafeMath;
[L7454]              assume DType[msgsender_MSG] != ERC20Interface;
[L7455]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L7456]              assume DType[msgsender_MSG] != Owned;
[L7457]              assume DType[msgsender_MSG] != TokenERC20;
[L7458]              assume DType[msgsender_MSG] != IDRC;
[L7459]              Alloc[msgsender_MSG] := true;
[L7460]  COND FALSE  !(choice == 32)
[L7466]  COND FALSE  !(choice == 31)
[L7472]  COND FALSE  !(choice == 30)
[L7478]  COND TRUE   choice == 29
[L7479]              gas := gas - 21000;
[L7480]  COND TRUE   gas >= 0
[L7481]              assume tokens_s381 >= 0 && tokens_s381 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7482]              assume msgvalue_MSG == 0;
[L7483]  CALL        call success_s381 := transfer~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, to_s381, tokens_s381);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((p1 != msgsender_MSG && p1 != to_s381) && msgsender_MSG != to_s381) && tokens_s381 <= balances_TokenERC20[this][msgsender_MSG]) && balances_TokenERC20[this][to_s381] + tokens_s381 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && tokens_s381 >= 0) && tokens_s381 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_TokenERC20[this][to_s381] >= 0) && balances_TokenERC20[this][to_s381] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_TokenERC20[this][msgsender_MSG] >= 0) && balances_TokenERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transfer_TokenERC200 := true;
[L3]                 call_transfer_TokenERC200 := false;
[L3]                 revert := revert_hold;
[L979]               havoc __exception;
[L980]               revert := false;
[L981]   COND FALSE  !(__exception)
[L1015]  CALL        call success_s381 := transfer~address~uint256_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s381, tokens_s381);
[L4479]  CALL        call __var_5 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_TokenERC20[this][msgsender_MSG], tokens_s381);
[L4118]  COND FALSE  !(!(b_s45 <= a_s45))
[L4122]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4479]  RET         call __var_5 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_TokenERC20[this][msgsender_MSG], tokens_s381);
[L4480]  COND FALSE  !(revert)
[L4483]              sum_balances0[this] := sum_balances0[this] - balances_TokenERC20[this][msgsender_MSG];
[L4484]              balances_TokenERC20[this][msgsender_MSG] := __var_5;
[L4485]              sum_balances0[this] := sum_balances0[this] + balances_TokenERC20[this][msgsender_MSG];
[L4486]  CALL        call __var_6 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_TokenERC20[this][to_s381], tokens_s381);
[L4100]              c_s23 := (a_s23 + b_s23) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4101]  COND FALSE  !(!(c_s23 >= a_s23))
[L4486]  RET         call __var_6 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_TokenERC20[this][to_s381], tokens_s381);
[L4487]  COND FALSE  !(revert)
[L4490]              sum_balances0[this] := sum_balances0[this] - balances_TokenERC20[this][to_s381];
[L4491]              balances_TokenERC20[this][to_s381] := __var_6;
[L4492]              sum_balances0[this] := sum_balances0[this] + balances_TokenERC20[this][to_s381];
[L4493]              assert { :EventEmitted "Transfer_TokenERC20" } true;
[L4494]              success_s381 := true;
[L1015]  RET         call success_s381 := transfer~address~uint256_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s381, tokens_s381);
[L1016]              assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !(((((((((((((((((((((success_s381 == true && balances_TokenERC20[this][msgsender_MSG] == old(balances_TokenERC20[this][msgsender_MSG]) - tokens_s381) && balances_TokenERC20[this][to_s381] == old(balances_TokenERC20[this][to_s381]) + tokens_s381) && _totalSupply_TokenERC20[this] == old(_totalSupply_TokenERC20[this])) && allowed_TokenERC20[this] == old(allowed_TokenERC20[this])) && balances_TokenERC20[this][p1] == old(balances_TokenERC20[this][p1])) && aSBlock_IDRC[this] == old(aSBlock_IDRC[this])) && aEBlock_IDRC[this] == old(aEBlock_IDRC[this])) && aCap_IDRC[this] == old(aCap_IDRC[this])) && aTot_IDRC[this] == old(aTot_IDRC[this])) && aAmt_IDRC[this] == old(aAmt_IDRC[this])) && sSBlock_IDRC[this] == old(sSBlock_IDRC[this])) && sEBlock_IDRC[this] == old(sEBlock_IDRC[this])) && sCap_IDRC[this] == old(sCap_IDRC[this])) && sTot_IDRC[this] == old(sTot_IDRC[this])) && sChunk_IDRC[this] == old(sChunk_IDRC[this])) && sPrice_IDRC[this] == old(sPrice_IDRC[this])) && symbol_TokenERC20[this] == old(symbol_TokenERC20[this])) && name_TokenERC20[this] == old(name_TokenERC20[this])) && decimals_TokenERC20[this] == old(decimals_TokenERC20[this])) && owner_Owned[this] == old(owner_Owned[this])) && newOwner_Owned[this] == old(newOwner_Owned[this]));
[L3]                 revert := revert_hold;
[L7483]  RET         call success_s381 := transfer~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, to_s381, tokens_s381);
[L7683]  RET         call CorralChoice_IDRC(this);

[2020-11-25 18:05:09,333 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 18:05:09,333 INFO  L82        PathProgramCache]: Analyzing trace with hash 154172841, now seen corresponding path program 1 times
[2020-11-25 18:05:09,334 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 18:05:09,408 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 18:05:10,075 WARN  L250   erpolLogProxyWrapper]: Already inconsistent.
[2020-11-25 18:05:10,075 WARN  L250   erpolLogProxyWrapper]: Already inconsistent.
[2020-11-25 18:05:10,287 WARN  L188               SmtUtils]: Spent 126.00 ms on a formula simplification. DAG size of input: 110 DAG size of output: 56
[2020-11-25 18:05:10,928 INFO  L134       CoverageAnalysis]: Checked inductivity of 23 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 23 trivial. 0 not checked.
[2020-11-25 18:05:10,928 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 18:05:10,928 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [23] imperfect sequences [] total 23
[2020-11-25 18:05:10,929 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 18:05:10,929 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 24 interpolants.
[2020-11-25 18:05:10,929 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=54, Invalid=498, Unknown=0, NotChecked=0, Total=552
[2020-11-25 18:05:10,929 INFO  L87              Difference]: Start difference. First operand 7185 states and 8269 transitions. cyclomatic complexity: 1090 Second operand 24 states.
[2020-11-25 18:05:26,223 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 18:05:26,223 INFO  L93              Difference]: Finished difference Result 7394 states and 8500 transitions.
[2020-11-25 18:05:26,223 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 23 states. 
[2020-11-25 18:05:26,223 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 7394 states and 8500 transitions.
[2020-11-25 18:05:26,235 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 18:05:26,254 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 7394 states to 7394 states and 8500 transitions.
[2020-11-25 18:05:26,254 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 281
[2020-11-25 18:05:26,254 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 281
[2020-11-25 18:05:26,254 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 7394 states and 8500 transitions.
[2020-11-25 18:05:26,259 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 18:05:26,259 INFO  L728         BuchiCegarLoop]: Abstraction has 7394 states and 8500 transitions.
[2020-11-25 18:05:26,265 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 7394 states and 8500 transitions.
[2020-11-25 18:05:26,312 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 7394 to 7330.
[2020-11-25 18:05:26,312 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 7330 states.
[2020-11-25 18:05:26,319 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 7330 states to 7330 states and 8430 transitions.
[2020-11-25 18:05:26,319 INFO  L751         BuchiCegarLoop]: Abstraction has 7330 states and 8430 transitions.
[2020-11-25 18:05:26,319 INFO  L631         BuchiCegarLoop]: Abstraction has 7330 states and 8430 transitions.
[2020-11-25 18:05:26,319 INFO  L445         BuchiCegarLoop]: ======== Iteration 5============
[2020-11-25 18:05:26,320 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 7330 states and 8430 transitions.
[2020-11-25 18:05:26,326 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 18:05:26,326 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 18:05:26,326 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 18:05:26,328 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 18:05:26,328 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_transfer_TokenERC200 := false;
[L3]                 call_transfer_TokenERC200 := false;
[L3]     CALL        call main();
[L3]                 havoc p1;
[L7673]              assume null == 0;
[L7674]  CALL        call this := FreshRefGenerator__success();
[L4051]              havoc newRef;
[L4052]              assume Alloc[newRef] == false;
[L4053]              Alloc[newRef] := true;
[L4054]              assume newRef != null;
[L7674]  RET         call this := FreshRefGenerator__success();
[L7675]              assume now >= 0;
[L7676]              assume DType[this] == IDRC;
[L7677]              assume msgvalue_MSG == 0;
[L7678]              gas := gas - 53000;
[L7679]  CALL        call IDRC_IDRC__success(this, msgsender_MSG, msgvalue_MSG);
[L4741]  CALL        call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L4187]  CALL        call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4172]              assume msgsender_MSG != null;
[L4173]              Balance[this] := 0;
[L4187]  RET         call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4188]  COND FALSE  !(revert)
[L4741]  RET         call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L4742]  COND FALSE  !(revert)
[L4745]  CALL        call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L4257]  CALL        call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4239]              assume msgsender_MSG != null;
[L4240]              Balance[this] := 0;
[L4241]              owner_Owned[this] := null;
[L4242]              newOwner_Owned[this] := null;
[L4244]              owner_Owned[this] := msgsender_MSG;
[L4257]  RET         call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4258]  COND FALSE  !(revert)
[L4745]  RET         call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L4746]  COND FALSE  !(revert)
[L4749]  CALL        call TokenERC20_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4401]  CALL        call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L4187]  CALL        call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4172]              assume msgsender_MSG != null;
[L4173]              Balance[this] := 0;
[L4187]  RET         call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4188]  COND FALSE  !(revert)
[L4401]  RET         call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L4402]  COND FALSE  !(revert)
[L4405]  CALL        call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L4257]  CALL        call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4239]              assume msgsender_MSG != null;
[L4240]              Balance[this] := 0;
[L4241]              owner_Owned[this] := null;
[L4242]              newOwner_Owned[this] := null;
[L4244]              owner_Owned[this] := msgsender_MSG;
[L4257]  RET         call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4258]  COND FALSE  !(revert)
[L4405]  RET         call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L4406]  COND FALSE  !(revert)
[L4409]  CALL        call TokenERC20_TokenERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4359]              assume msgsender_MSG != null;
[L4360]              Balance[this] := 0;
[L4361]              symbol_TokenERC20[this] := -1901357083;
[L4362]              name_TokenERC20[this] := -1901357083;
[L4363]              decimals_TokenERC20[this] := 0;
[L4364]              _totalSupply_TokenERC20[this] := 0;
[L4365]              balances_TokenERC20[this] := zeroRefintArr();
[L4366]              sum_balances0[this] := 0;
[L4367]              allowed_TokenERC20[this] := zeroRefRefintArr();
[L4368]              sum_allowed1[this] := 0;
[L4370]              symbol_TokenERC20[this] := -892594266;
[L4371]              name_TokenERC20[this] := -1541073350;
[L4372]              decimals_TokenERC20[this] := 6;
[L4373]              __var_2 := decimals_TokenERC20[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4374]              _totalSupply_TokenERC20[this] := nonlinearMul(129746337890625 % 115792089237316195423570985008687907853269984665640564039457584007913129639936, nonlinearPow(10, decimals_TokenERC20[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4375]              sum_balances0[this] := sum_balances0[this] - balances_TokenERC20[this][owner_Owned[this]];
[L4376]              balances_TokenERC20[this][owner_Owned[this]] := _totalSupply_TokenERC20[this];
[L4377]              sum_balances0[this] := sum_balances0[this] + balances_TokenERC20[this][owner_Owned[this]];
[L4378]              assert { :EventEmitted "Transfer_TokenERC20" } true;
[L4409]  RET         call TokenERC20_TokenERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4410]  COND FALSE  !(revert)
[L4749]  RET         call TokenERC20_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4750]  COND FALSE  !(revert)
[L4753]  CALL        call IDRC_IDRC_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4703]              assume msgsender_MSG != null;
[L4704]              Balance[this] := 0;
[L4705]              aSBlock_IDRC[this] := 0;
[L4706]              aEBlock_IDRC[this] := 0;
[L4707]              aCap_IDRC[this] := 0;
[L4708]              aTot_IDRC[this] := 0;
[L4709]              aAmt_IDRC[this] := 0;
[L4710]              sSBlock_IDRC[this] := 0;
[L4711]              sEBlock_IDRC[this] := 0;
[L4712]              sCap_IDRC[this] := 0;
[L4713]              sTot_IDRC[this] := 0;
[L4714]              sChunk_IDRC[this] := 0;
[L4715]              sPrice_IDRC[this] := 0;
[L4753]  RET         call IDRC_IDRC_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4754]  COND FALSE  !(revert)
[L7679]  RET         call IDRC_IDRC__success(this, msgsender_MSG, msgvalue_MSG);
[L7680]              assume !revert && gas >= 0;
[L7683]  CALL        call CorralChoice_IDRC(this);
[L7382]              havoc msgsender_MSG;
[L7383]              havoc msgvalue_MSG;
[L7384]              havoc choice;
[L7385]              havoc __ret_0_totalSupply;
[L7386]              havoc tokenOwner_s338;
[L7387]              havoc balance_s338;
[L7388]              havoc tokenOwner_s484;
[L7389]              havoc spender_s484;
[L7390]              havoc remaining_s484;
[L7391]              havoc to_s381;
[L7392]              havoc tokens_s381;
[L7393]              havoc success_s381;
[L7394]              havoc spender_s409;
[L7395]              havoc tokens_s409;
[L7396]              havoc success_s409;
[L7397]              havoc from_s468;
[L7398]              havoc to_s468;
[L7399]              havoc tokens_s468;
[L7400]              havoc success_s468;
[L7401]              havoc __ret_0_owner;
[L7402]              havoc __ret_0_newOwner;
[L7403]              havoc _newOwner_s217;
[L7404]              havoc __ret_0_symbol;
[L7405]              havoc __ret_0_name;
[L7406]              havoc __ret_0_decimals;
[L7407]              havoc spender_s527;
[L7408]              havoc tokens_s527;
[L7409]              havoc data_s527;
[L7410]              havoc success_s527;
[L7411]              havoc __ret_0_aSBlock;
[L7412]              havoc __ret_0_aEBlock;
[L7413]              havoc __ret_0_aCap;
[L7414]              havoc __ret_0_aTot;
[L7415]              havoc __ret_0_aAmt;
[L7416]              havoc __ret_0_sSBlock;
[L7417]              havoc __ret_0_sEBlock;
[L7418]              havoc __ret_0_sCap;
[L7419]              havoc __ret_0_sTot;
[L7420]              havoc __ret_0_sChunk;
[L7421]              havoc __ret_0_sPrice;
[L7422]              havoc _refer_s687;
[L7423]              havoc success_s687;
[L7424]              havoc _refer_s847;
[L7425]              havoc success_s847;
[L7426]              havoc StartBlock_s868;
[L7427]              havoc EndBlock_s868;
[L7428]              havoc DropCap_s868;
[L7429]              havoc DropCount_s868;
[L7430]              havoc DropAmount_s868;
[L7431]              havoc StartBlock_s892;
[L7432]              havoc EndBlock_s892;
[L7433]              havoc SaleCap_s892;
[L7434]              havoc SaleCount_s892;
[L7435]              havoc ChunkSize_s892;
[L7436]              havoc SalePrice_s892;
[L7437]              havoc _aSBlock_s926;
[L7438]              havoc _aEBlock_s926;
[L7439]              havoc _aAmt_s926;
[L7440]              havoc _aCap_s926;
[L7441]              havoc _sSBlock_s966;
[L7442]              havoc _sEBlock_s966;
[L7443]              havoc _sChunk_s966;
[L7444]              havoc _sPrice_s966;
[L7445]              havoc _sCap_s966;
[L7446]              havoc tmpNow;
[L7447]              havoc gas;
[L7448]              assume gas > 4000000 && gas <= 8000000;
[L7449]              tmpNow := now;
[L7450]              havoc now;
[L7451]              assume now > tmpNow;
[L7452]              assume msgsender_MSG != null;
[L7453]              assume DType[msgsender_MSG] != SafeMath;
[L7454]              assume DType[msgsender_MSG] != ERC20Interface;
[L7455]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L7456]              assume DType[msgsender_MSG] != Owned;
[L7457]              assume DType[msgsender_MSG] != TokenERC20;
[L7458]              assume DType[msgsender_MSG] != IDRC;
[L7459]              Alloc[msgsender_MSG] := true;
[L7460]  COND FALSE  !(choice == 32)
[L7466]  COND FALSE  !(choice == 31)
[L7472]  COND FALSE  !(choice == 30)
[L7478]  COND TRUE   choice == 29
[L7479]              gas := gas - 21000;
[L7480]  COND TRUE   gas >= 0
[L7481]              assume tokens_s381 >= 0 && tokens_s381 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7482]              assume msgvalue_MSG == 0;
[L7483]  CALL        call success_s381 := transfer~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, to_s381, tokens_s381);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((p1 != msgsender_MSG && p1 != to_s381) && msgsender_MSG != to_s381) && tokens_s381 <= balances_TokenERC20[this][msgsender_MSG]) && balances_TokenERC20[this][to_s381] + tokens_s381 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && tokens_s381 >= 0) && tokens_s381 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_TokenERC20[this][to_s381] >= 0) && balances_TokenERC20[this][to_s381] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_TokenERC20[this][msgsender_MSG] >= 0) && balances_TokenERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transfer_TokenERC200 := true;
[L3]                 call_transfer_TokenERC200 := false;
[L3]                 revert := revert_hold;
[L979]               havoc __exception;
[L980]               revert := false;
[L981]   COND TRUE   __exception
[L982]               __tmp__Balance := Balance;
[L983]               __tmp__DType := DType;
[L984]               __tmp__Alloc := Alloc;
[L985]               __tmp__balance_ADDR := balance_ADDR;
[L986]               __tmp__M_Ref_int := M_Ref_int;
[L987]               __tmp__sum_balances0 := sum_balances0;
[L988]               __tmp__alloc_allowed_TokenERC20_lvl0 := alloc_allowed_TokenERC20_lvl0;
[L989]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L990]               __tmp__sum_allowed1 := sum_allowed1;
[L991]               __tmp__Length := Length;
[L992]               __tmp__now := now;
[L993]               __tmp__owner_Owned := owner_Owned;
[L994]               __tmp__newOwner_Owned := newOwner_Owned;
[L995]               __tmp__symbol_TokenERC20 := symbol_TokenERC20;
[L996]               __tmp__name_TokenERC20 := name_TokenERC20;
[L997]               __tmp__decimals_TokenERC20 := decimals_TokenERC20;
[L998]               __tmp___totalSupply_TokenERC20 := _totalSupply_TokenERC20;
[L999]               __tmp__balances_TokenERC20 := balances_TokenERC20;
[L1000]              __tmp__allowed_TokenERC20 := allowed_TokenERC20;
[L1001]              __tmp__aSBlock_IDRC := aSBlock_IDRC;
[L1002]              __tmp__aEBlock_IDRC := aEBlock_IDRC;
[L1003]              __tmp__aCap_IDRC := aCap_IDRC;
[L1004]              __tmp__aTot_IDRC := aTot_IDRC;
[L1005]              __tmp__aAmt_IDRC := aAmt_IDRC;
[L1006]              __tmp__sSBlock_IDRC := sSBlock_IDRC;
[L1007]              __tmp__sEBlock_IDRC := sEBlock_IDRC;
[L1008]              __tmp__sCap_IDRC := sCap_IDRC;
[L1009]              __tmp__sTot_IDRC := sTot_IDRC;
[L1010]              __tmp__sChunk_IDRC := sChunk_IDRC;
[L1011]              __tmp__sPrice_IDRC := sPrice_IDRC;
[L1012]  CALL        call success_s381 := transfer~address~uint256_TokenERC20__fail(this, msgsender_MSG, msgvalue_MSG, to_s381, tokens_s381);
[L4457]  CALL        call __var_5 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__balances_TokenERC20[this][msgsender_MSG], tokens_s381);
[L4109]  COND TRUE   !(b_s45 <= a_s45)
[L4110]              revert := true;
[L4457]  RET         call __var_5 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__balances_TokenERC20[this][msgsender_MSG], tokens_s381);
[L4458]  COND TRUE   revert
[L1012]  RET         call success_s381 := transfer~address~uint256_TokenERC20__fail(this, msgsender_MSG, msgvalue_MSG, to_s381, tokens_s381);
[L1013]              assume revert || gas < 0;
[L7483]  RET         call success_s381 := transfer~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, to_s381, tokens_s381);
[L7683]  RET         call CorralChoice_IDRC(this);

Loop:
[L7683]  CALL        call CorralChoice_IDRC(this);
[L7382]              havoc msgsender_MSG;
[L7383]              havoc msgvalue_MSG;
[L7384]              havoc choice;
[L7385]              havoc __ret_0_totalSupply;
[L7386]              havoc tokenOwner_s338;
[L7387]              havoc balance_s338;
[L7388]              havoc tokenOwner_s484;
[L7389]              havoc spender_s484;
[L7390]              havoc remaining_s484;
[L7391]              havoc to_s381;
[L7392]              havoc tokens_s381;
[L7393]              havoc success_s381;
[L7394]              havoc spender_s409;
[L7395]              havoc tokens_s409;
[L7396]              havoc success_s409;
[L7397]              havoc from_s468;
[L7398]              havoc to_s468;
[L7399]              havoc tokens_s468;
[L7400]              havoc success_s468;
[L7401]              havoc __ret_0_owner;
[L7402]              havoc __ret_0_newOwner;
[L7403]              havoc _newOwner_s217;
[L7404]              havoc __ret_0_symbol;
[L7405]              havoc __ret_0_name;
[L7406]              havoc __ret_0_decimals;
[L7407]              havoc spender_s527;
[L7408]              havoc tokens_s527;
[L7409]              havoc data_s527;
[L7410]              havoc success_s527;
[L7411]              havoc __ret_0_aSBlock;
[L7412]              havoc __ret_0_aEBlock;
[L7413]              havoc __ret_0_aCap;
[L7414]              havoc __ret_0_aTot;
[L7415]              havoc __ret_0_aAmt;
[L7416]              havoc __ret_0_sSBlock;
[L7417]              havoc __ret_0_sEBlock;
[L7418]              havoc __ret_0_sCap;
[L7419]              havoc __ret_0_sTot;
[L7420]              havoc __ret_0_sChunk;
[L7421]              havoc __ret_0_sPrice;
[L7422]              havoc _refer_s687;
[L7423]              havoc success_s687;
[L7424]              havoc _refer_s847;
[L7425]              havoc success_s847;
[L7426]              havoc StartBlock_s868;
[L7427]              havoc EndBlock_s868;
[L7428]              havoc DropCap_s868;
[L7429]              havoc DropCount_s868;
[L7430]              havoc DropAmount_s868;
[L7431]              havoc StartBlock_s892;
[L7432]              havoc EndBlock_s892;
[L7433]              havoc SaleCap_s892;
[L7434]              havoc SaleCount_s892;
[L7435]              havoc ChunkSize_s892;
[L7436]              havoc SalePrice_s892;
[L7437]              havoc _aSBlock_s926;
[L7438]              havoc _aEBlock_s926;
[L7439]              havoc _aAmt_s926;
[L7440]              havoc _aCap_s926;
[L7441]              havoc _sSBlock_s966;
[L7442]              havoc _sEBlock_s966;
[L7443]              havoc _sChunk_s966;
[L7444]              havoc _sPrice_s966;
[L7445]              havoc _sCap_s966;
[L7446]              havoc tmpNow;
[L7447]              havoc gas;
[L7448]              assume gas > 4000000 && gas <= 8000000;
[L7449]              tmpNow := now;
[L7450]              havoc now;
[L7451]              assume now > tmpNow;
[L7452]              assume msgsender_MSG != null;
[L7453]              assume DType[msgsender_MSG] != SafeMath;
[L7454]              assume DType[msgsender_MSG] != ERC20Interface;
[L7455]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L7456]              assume DType[msgsender_MSG] != Owned;
[L7457]              assume DType[msgsender_MSG] != TokenERC20;
[L7458]              assume DType[msgsender_MSG] != IDRC;
[L7459]              Alloc[msgsender_MSG] := true;
[L7460]  COND FALSE  !(choice == 32)
[L7466]  COND FALSE  !(choice == 31)
[L7472]  COND FALSE  !(choice == 30)
[L7478]  COND TRUE   choice == 29
[L7479]              gas := gas - 21000;
[L7480]  COND TRUE   gas >= 0
[L7481]              assume tokens_s381 >= 0 && tokens_s381 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7482]              assume msgvalue_MSG == 0;
[L7483]  CALL        call success_s381 := transfer~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, to_s381, tokens_s381);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((p1 != msgsender_MSG && p1 != to_s381) && msgsender_MSG != to_s381) && tokens_s381 <= balances_TokenERC20[this][msgsender_MSG]) && balances_TokenERC20[this][to_s381] + tokens_s381 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && tokens_s381 >= 0) && tokens_s381 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_TokenERC20[this][to_s381] >= 0) && balances_TokenERC20[this][to_s381] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_TokenERC20[this][msgsender_MSG] >= 0) && balances_TokenERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transfer_TokenERC200 := true;
[L3]                 call_transfer_TokenERC200 := false;
[L3]                 revert := revert_hold;
[L979]               havoc __exception;
[L980]               revert := false;
[L981]   COND TRUE   __exception
[L982]               __tmp__Balance := Balance;
[L983]               __tmp__DType := DType;
[L984]               __tmp__Alloc := Alloc;
[L985]               __tmp__balance_ADDR := balance_ADDR;
[L986]               __tmp__M_Ref_int := M_Ref_int;
[L987]               __tmp__sum_balances0 := sum_balances0;
[L988]               __tmp__alloc_allowed_TokenERC20_lvl0 := alloc_allowed_TokenERC20_lvl0;
[L989]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L990]               __tmp__sum_allowed1 := sum_allowed1;
[L991]               __tmp__Length := Length;
[L992]               __tmp__now := now;
[L993]               __tmp__owner_Owned := owner_Owned;
[L994]               __tmp__newOwner_Owned := newOwner_Owned;
[L995]               __tmp__symbol_TokenERC20 := symbol_TokenERC20;
[L996]               __tmp__name_TokenERC20 := name_TokenERC20;
[L997]               __tmp__decimals_TokenERC20 := decimals_TokenERC20;
[L998]               __tmp___totalSupply_TokenERC20 := _totalSupply_TokenERC20;
[L999]               __tmp__balances_TokenERC20 := balances_TokenERC20;
[L1000]              __tmp__allowed_TokenERC20 := allowed_TokenERC20;
[L1001]              __tmp__aSBlock_IDRC := aSBlock_IDRC;
[L1002]              __tmp__aEBlock_IDRC := aEBlock_IDRC;
[L1003]              __tmp__aCap_IDRC := aCap_IDRC;
[L1004]              __tmp__aTot_IDRC := aTot_IDRC;
[L1005]              __tmp__aAmt_IDRC := aAmt_IDRC;
[L1006]              __tmp__sSBlock_IDRC := sSBlock_IDRC;
[L1007]              __tmp__sEBlock_IDRC := sEBlock_IDRC;
[L1008]              __tmp__sCap_IDRC := sCap_IDRC;
[L1009]              __tmp__sTot_IDRC := sTot_IDRC;
[L1010]              __tmp__sChunk_IDRC := sChunk_IDRC;
[L1011]              __tmp__sPrice_IDRC := sPrice_IDRC;
[L1012]  CALL        call success_s381 := transfer~address~uint256_TokenERC20__fail(this, msgsender_MSG, msgvalue_MSG, to_s381, tokens_s381);
[L4457]  CALL        call __var_5 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__balances_TokenERC20[this][msgsender_MSG], tokens_s381);
[L4109]  COND TRUE   !(b_s45 <= a_s45)
[L4110]              revert := true;
[L4457]  RET         call __var_5 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__balances_TokenERC20[this][msgsender_MSG], tokens_s381);
[L4458]  COND TRUE   revert
[L1012]  RET         call success_s381 := transfer~address~uint256_TokenERC20__fail(this, msgsender_MSG, msgvalue_MSG, to_s381, tokens_s381);
[L1013]              assume revert || gas < 0;
[L7483]  RET         call success_s381 := transfer~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, to_s381, tokens_s381);
[L7683]  RET         call CorralChoice_IDRC(this);

[2020-11-25 18:05:26,332 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 18:05:26,332 INFO  L82        PathProgramCache]: Analyzing trace with hash -78606421, now seen corresponding path program 1 times
[2020-11-25 18:05:26,333 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 18:05:26,342 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 18:05:26,385 INFO  L134       CoverageAnalysis]: Checked inductivity of 23 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 23 trivial. 0 not checked.
[2020-11-25 18:05:26,385 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 18:05:26,385 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [7] imperfect sequences [] total 7
[2020-11-25 18:05:26,385 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 18:05:26,385 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 7 interpolants.
[2020-11-25 18:05:26,385 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=11, Invalid=31, Unknown=0, NotChecked=0, Total=42
[2020-11-25 18:05:26,385 INFO  L87              Difference]: Start difference. First operand 7330 states and 8430 transitions. cyclomatic complexity: 1108 Second operand 7 states.
[2020-11-25 18:05:27,599 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 18:05:27,599 INFO  L93              Difference]: Finished difference Result 7759 states and 8911 transitions.
[2020-11-25 18:05:27,599 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 8 states. 
[2020-11-25 18:05:27,600 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 7759 states and 8911 transitions.
[2020-11-25 18:05:27,612 INFO  L131   ngComponentsAnalysis]: Automaton has 3 accepting balls. 6
[2020-11-25 18:05:27,628 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 7759 states to 7759 states and 8911 transitions.
[2020-11-25 18:05:27,628 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 371
[2020-11-25 18:05:27,628 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 371
[2020-11-25 18:05:27,628 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 7759 states and 8911 transitions.
[2020-11-25 18:05:27,632 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 18:05:27,632 INFO  L728         BuchiCegarLoop]: Abstraction has 7759 states and 8911 transitions.
[2020-11-25 18:05:27,638 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 7759 states and 8911 transitions.
[2020-11-25 18:05:27,676 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 7759 to 7471.
[2020-11-25 18:05:27,676 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 7471 states.
[2020-11-25 18:05:27,683 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 7471 states to 7471 states and 8579 transitions.
[2020-11-25 18:05:27,683 INFO  L751         BuchiCegarLoop]: Abstraction has 7471 states and 8579 transitions.
[2020-11-25 18:05:27,683 INFO  L631         BuchiCegarLoop]: Abstraction has 7471 states and 8579 transitions.
[2020-11-25 18:05:27,683 INFO  L445         BuchiCegarLoop]: ======== Iteration 6============
[2020-11-25 18:05:27,683 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 7471 states and 8579 transitions.
[2020-11-25 18:05:27,690 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 18:05:27,690 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 18:05:27,690 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 18:05:27,691 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 18:05:27,691 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_transfer_TokenERC200 := false;
[L3]                 call_transfer_TokenERC200 := false;
[L3]     CALL        call main();
[L3]                 havoc p1;
[L7673]              assume null == 0;
[L7674]  CALL        call this := FreshRefGenerator__success();
[L4051]              havoc newRef;
[L4052]              assume Alloc[newRef] == false;
[L4053]              Alloc[newRef] := true;
[L4054]              assume newRef != null;
[L7674]  RET         call this := FreshRefGenerator__success();
[L7675]              assume now >= 0;
[L7676]              assume DType[this] == IDRC;
[L7677]              assume msgvalue_MSG == 0;
[L7678]              gas := gas - 53000;
[L7679]  CALL        call IDRC_IDRC__success(this, msgsender_MSG, msgvalue_MSG);
[L4741]  CALL        call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L4187]  CALL        call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4172]              assume msgsender_MSG != null;
[L4173]              Balance[this] := 0;
[L4187]  RET         call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4188]  COND FALSE  !(revert)
[L4741]  RET         call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L4742]  COND FALSE  !(revert)
[L4745]  CALL        call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L4257]  CALL        call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4239]              assume msgsender_MSG != null;
[L4240]              Balance[this] := 0;
[L4241]              owner_Owned[this] := null;
[L4242]              newOwner_Owned[this] := null;
[L4244]              owner_Owned[this] := msgsender_MSG;
[L4257]  RET         call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4258]  COND FALSE  !(revert)
[L4745]  RET         call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L4746]  COND FALSE  !(revert)
[L4749]  CALL        call TokenERC20_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4401]  CALL        call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L4187]  CALL        call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4172]              assume msgsender_MSG != null;
[L4173]              Balance[this] := 0;
[L4187]  RET         call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4188]  COND FALSE  !(revert)
[L4401]  RET         call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L4402]  COND FALSE  !(revert)
[L4405]  CALL        call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L4257]  CALL        call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4239]              assume msgsender_MSG != null;
[L4240]              Balance[this] := 0;
[L4241]              owner_Owned[this] := null;
[L4242]              newOwner_Owned[this] := null;
[L4244]              owner_Owned[this] := msgsender_MSG;
[L4257]  RET         call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4258]  COND FALSE  !(revert)
[L4405]  RET         call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L4406]  COND FALSE  !(revert)
[L4409]  CALL        call TokenERC20_TokenERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4359]              assume msgsender_MSG != null;
[L4360]              Balance[this] := 0;
[L4361]              symbol_TokenERC20[this] := -1901357083;
[L4362]              name_TokenERC20[this] := -1901357083;
[L4363]              decimals_TokenERC20[this] := 0;
[L4364]              _totalSupply_TokenERC20[this] := 0;
[L4365]              balances_TokenERC20[this] := zeroRefintArr();
[L4366]              sum_balances0[this] := 0;
[L4367]              allowed_TokenERC20[this] := zeroRefRefintArr();
[L4368]              sum_allowed1[this] := 0;
[L4370]              symbol_TokenERC20[this] := -892594266;
[L4371]              name_TokenERC20[this] := -1541073350;
[L4372]              decimals_TokenERC20[this] := 6;
[L4373]              __var_2 := decimals_TokenERC20[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4374]              _totalSupply_TokenERC20[this] := nonlinearMul(129746337890625 % 115792089237316195423570985008687907853269984665640564039457584007913129639936, nonlinearPow(10, decimals_TokenERC20[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4375]              sum_balances0[this] := sum_balances0[this] - balances_TokenERC20[this][owner_Owned[this]];
[L4376]              balances_TokenERC20[this][owner_Owned[this]] := _totalSupply_TokenERC20[this];
[L4377]              sum_balances0[this] := sum_balances0[this] + balances_TokenERC20[this][owner_Owned[this]];
[L4378]              assert { :EventEmitted "Transfer_TokenERC20" } true;
[L4409]  RET         call TokenERC20_TokenERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4410]  COND FALSE  !(revert)
[L4749]  RET         call TokenERC20_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4750]  COND FALSE  !(revert)
[L4753]  CALL        call IDRC_IDRC_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4703]              assume msgsender_MSG != null;
[L4704]              Balance[this] := 0;
[L4705]              aSBlock_IDRC[this] := 0;
[L4706]              aEBlock_IDRC[this] := 0;
[L4707]              aCap_IDRC[this] := 0;
[L4708]              aTot_IDRC[this] := 0;
[L4709]              aAmt_IDRC[this] := 0;
[L4710]              sSBlock_IDRC[this] := 0;
[L4711]              sEBlock_IDRC[this] := 0;
[L4712]              sCap_IDRC[this] := 0;
[L4713]              sTot_IDRC[this] := 0;
[L4714]              sChunk_IDRC[this] := 0;
[L4715]              sPrice_IDRC[this] := 0;
[L4753]  RET         call IDRC_IDRC_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4754]  COND FALSE  !(revert)
[L7679]  RET         call IDRC_IDRC__success(this, msgsender_MSG, msgvalue_MSG);
[L7680]              assume !revert && gas >= 0;
[L7683]  CALL        call CorralChoice_IDRC(this);
[L7382]              havoc msgsender_MSG;
[L7383]              havoc msgvalue_MSG;
[L7384]              havoc choice;
[L7385]              havoc __ret_0_totalSupply;
[L7386]              havoc tokenOwner_s338;
[L7387]              havoc balance_s338;
[L7388]              havoc tokenOwner_s484;
[L7389]              havoc spender_s484;
[L7390]              havoc remaining_s484;
[L7391]              havoc to_s381;
[L7392]              havoc tokens_s381;
[L7393]              havoc success_s381;
[L7394]              havoc spender_s409;
[L7395]              havoc tokens_s409;
[L7396]              havoc success_s409;
[L7397]              havoc from_s468;
[L7398]              havoc to_s468;
[L7399]              havoc tokens_s468;
[L7400]              havoc success_s468;
[L7401]              havoc __ret_0_owner;
[L7402]              havoc __ret_0_newOwner;
[L7403]              havoc _newOwner_s217;
[L7404]              havoc __ret_0_symbol;
[L7405]              havoc __ret_0_name;
[L7406]              havoc __ret_0_decimals;
[L7407]              havoc spender_s527;
[L7408]              havoc tokens_s527;
[L7409]              havoc data_s527;
[L7410]              havoc success_s527;
[L7411]              havoc __ret_0_aSBlock;
[L7412]              havoc __ret_0_aEBlock;
[L7413]              havoc __ret_0_aCap;
[L7414]              havoc __ret_0_aTot;
[L7415]              havoc __ret_0_aAmt;
[L7416]              havoc __ret_0_sSBlock;
[L7417]              havoc __ret_0_sEBlock;
[L7418]              havoc __ret_0_sCap;
[L7419]              havoc __ret_0_sTot;
[L7420]              havoc __ret_0_sChunk;
[L7421]              havoc __ret_0_sPrice;
[L7422]              havoc _refer_s687;
[L7423]              havoc success_s687;
[L7424]              havoc _refer_s847;
[L7425]              havoc success_s847;
[L7426]              havoc StartBlock_s868;
[L7427]              havoc EndBlock_s868;
[L7428]              havoc DropCap_s868;
[L7429]              havoc DropCount_s868;
[L7430]              havoc DropAmount_s868;
[L7431]              havoc StartBlock_s892;
[L7432]              havoc EndBlock_s892;
[L7433]              havoc SaleCap_s892;
[L7434]              havoc SaleCount_s892;
[L7435]              havoc ChunkSize_s892;
[L7436]              havoc SalePrice_s892;
[L7437]              havoc _aSBlock_s926;
[L7438]              havoc _aEBlock_s926;
[L7439]              havoc _aAmt_s926;
[L7440]              havoc _aCap_s926;
[L7441]              havoc _sSBlock_s966;
[L7442]              havoc _sEBlock_s966;
[L7443]              havoc _sChunk_s966;
[L7444]              havoc _sPrice_s966;
[L7445]              havoc _sCap_s966;
[L7446]              havoc tmpNow;
[L7447]              havoc gas;
[L7448]              assume gas > 4000000 && gas <= 8000000;
[L7449]              tmpNow := now;
[L7450]              havoc now;
[L7451]              assume now > tmpNow;
[L7452]              assume msgsender_MSG != null;
[L7453]              assume DType[msgsender_MSG] != SafeMath;
[L7454]              assume DType[msgsender_MSG] != ERC20Interface;
[L7455]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L7456]              assume DType[msgsender_MSG] != Owned;
[L7457]              assume DType[msgsender_MSG] != TokenERC20;
[L7458]              assume DType[msgsender_MSG] != IDRC;
[L7459]              Alloc[msgsender_MSG] := true;
[L7460]  COND FALSE  !(choice == 32)
[L7466]  COND FALSE  !(choice == 31)
[L7472]  COND FALSE  !(choice == 30)
[L7478]  COND TRUE   choice == 29
[L7479]              gas := gas - 21000;
[L7480]  COND TRUE   gas >= 0
[L7481]              assume tokens_s381 >= 0 && tokens_s381 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7482]              assume msgvalue_MSG == 0;
[L7483]  CALL        call success_s381 := transfer~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, to_s381, tokens_s381);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((p1 != msgsender_MSG && p1 != to_s381) && msgsender_MSG != to_s381) && tokens_s381 <= balances_TokenERC20[this][msgsender_MSG]) && balances_TokenERC20[this][to_s381] + tokens_s381 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && tokens_s381 >= 0) && tokens_s381 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_TokenERC20[this][to_s381] >= 0) && balances_TokenERC20[this][to_s381] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_TokenERC20[this][msgsender_MSG] >= 0) && balances_TokenERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transfer_TokenERC200 := true;
[L3]                 call_transfer_TokenERC200 := false;
[L3]                 revert := revert_hold;
[L979]               havoc __exception;
[L980]               revert := false;
[L981]   COND TRUE   __exception
[L982]               __tmp__Balance := Balance;
[L983]               __tmp__DType := DType;
[L984]               __tmp__Alloc := Alloc;
[L985]               __tmp__balance_ADDR := balance_ADDR;
[L986]               __tmp__M_Ref_int := M_Ref_int;
[L987]               __tmp__sum_balances0 := sum_balances0;
[L988]               __tmp__alloc_allowed_TokenERC20_lvl0 := alloc_allowed_TokenERC20_lvl0;
[L989]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L990]               __tmp__sum_allowed1 := sum_allowed1;
[L991]               __tmp__Length := Length;
[L992]               __tmp__now := now;
[L993]               __tmp__owner_Owned := owner_Owned;
[L994]               __tmp__newOwner_Owned := newOwner_Owned;
[L995]               __tmp__symbol_TokenERC20 := symbol_TokenERC20;
[L996]               __tmp__name_TokenERC20 := name_TokenERC20;
[L997]               __tmp__decimals_TokenERC20 := decimals_TokenERC20;
[L998]               __tmp___totalSupply_TokenERC20 := _totalSupply_TokenERC20;
[L999]               __tmp__balances_TokenERC20 := balances_TokenERC20;
[L1000]              __tmp__allowed_TokenERC20 := allowed_TokenERC20;
[L1001]              __tmp__aSBlock_IDRC := aSBlock_IDRC;
[L1002]              __tmp__aEBlock_IDRC := aEBlock_IDRC;
[L1003]              __tmp__aCap_IDRC := aCap_IDRC;
[L1004]              __tmp__aTot_IDRC := aTot_IDRC;
[L1005]              __tmp__aAmt_IDRC := aAmt_IDRC;
[L1006]              __tmp__sSBlock_IDRC := sSBlock_IDRC;
[L1007]              __tmp__sEBlock_IDRC := sEBlock_IDRC;
[L1008]              __tmp__sCap_IDRC := sCap_IDRC;
[L1009]              __tmp__sTot_IDRC := sTot_IDRC;
[L1010]              __tmp__sChunk_IDRC := sChunk_IDRC;
[L1011]              __tmp__sPrice_IDRC := sPrice_IDRC;
[L1012]  CALL        call success_s381 := transfer~address~uint256_TokenERC20__fail(this, msgsender_MSG, msgvalue_MSG, to_s381, tokens_s381);
[L4457]  CALL        call __var_5 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__balances_TokenERC20[this][msgsender_MSG], tokens_s381);
[L4109]  COND FALSE  !(!(b_s45 <= a_s45))
[L4113]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4457]  RET         call __var_5 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__balances_TokenERC20[this][msgsender_MSG], tokens_s381);
[L4458]  COND FALSE  !(revert)
[L4461]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] - __tmp__balances_TokenERC20[this][msgsender_MSG];
[L4462]              __tmp__balances_TokenERC20[this][msgsender_MSG] := __var_5;
[L4463]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] + __tmp__balances_TokenERC20[this][msgsender_MSG];
[L4464]  CALL        call __var_6 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__balances_TokenERC20[this][to_s381], tokens_s381);
[L4091]              c_s23 := (a_s23 + b_s23) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4092]  COND TRUE   !(c_s23 >= a_s23)
[L4093]              revert := true;
[L4464]  RET         call __var_6 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__balances_TokenERC20[this][to_s381], tokens_s381);
[L4465]  COND TRUE   revert
[L1012]  RET         call success_s381 := transfer~address~uint256_TokenERC20__fail(this, msgsender_MSG, msgvalue_MSG, to_s381, tokens_s381);
[L1013]              assume revert || gas < 0;
[L7483]  RET         call success_s381 := transfer~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, to_s381, tokens_s381);
[L7683]  RET         call CorralChoice_IDRC(this);

Loop:
[L7683]  CALL        call CorralChoice_IDRC(this);
[L7382]              havoc msgsender_MSG;
[L7383]              havoc msgvalue_MSG;
[L7384]              havoc choice;
[L7385]              havoc __ret_0_totalSupply;
[L7386]              havoc tokenOwner_s338;
[L7387]              havoc balance_s338;
[L7388]              havoc tokenOwner_s484;
[L7389]              havoc spender_s484;
[L7390]              havoc remaining_s484;
[L7391]              havoc to_s381;
[L7392]              havoc tokens_s381;
[L7393]              havoc success_s381;
[L7394]              havoc spender_s409;
[L7395]              havoc tokens_s409;
[L7396]              havoc success_s409;
[L7397]              havoc from_s468;
[L7398]              havoc to_s468;
[L7399]              havoc tokens_s468;
[L7400]              havoc success_s468;
[L7401]              havoc __ret_0_owner;
[L7402]              havoc __ret_0_newOwner;
[L7403]              havoc _newOwner_s217;
[L7404]              havoc __ret_0_symbol;
[L7405]              havoc __ret_0_name;
[L7406]              havoc __ret_0_decimals;
[L7407]              havoc spender_s527;
[L7408]              havoc tokens_s527;
[L7409]              havoc data_s527;
[L7410]              havoc success_s527;
[L7411]              havoc __ret_0_aSBlock;
[L7412]              havoc __ret_0_aEBlock;
[L7413]              havoc __ret_0_aCap;
[L7414]              havoc __ret_0_aTot;
[L7415]              havoc __ret_0_aAmt;
[L7416]              havoc __ret_0_sSBlock;
[L7417]              havoc __ret_0_sEBlock;
[L7418]              havoc __ret_0_sCap;
[L7419]              havoc __ret_0_sTot;
[L7420]              havoc __ret_0_sChunk;
[L7421]              havoc __ret_0_sPrice;
[L7422]              havoc _refer_s687;
[L7423]              havoc success_s687;
[L7424]              havoc _refer_s847;
[L7425]              havoc success_s847;
[L7426]              havoc StartBlock_s868;
[L7427]              havoc EndBlock_s868;
[L7428]              havoc DropCap_s868;
[L7429]              havoc DropCount_s868;
[L7430]              havoc DropAmount_s868;
[L7431]              havoc StartBlock_s892;
[L7432]              havoc EndBlock_s892;
[L7433]              havoc SaleCap_s892;
[L7434]              havoc SaleCount_s892;
[L7435]              havoc ChunkSize_s892;
[L7436]              havoc SalePrice_s892;
[L7437]              havoc _aSBlock_s926;
[L7438]              havoc _aEBlock_s926;
[L7439]              havoc _aAmt_s926;
[L7440]              havoc _aCap_s926;
[L7441]              havoc _sSBlock_s966;
[L7442]              havoc _sEBlock_s966;
[L7443]              havoc _sChunk_s966;
[L7444]              havoc _sPrice_s966;
[L7445]              havoc _sCap_s966;
[L7446]              havoc tmpNow;
[L7447]              havoc gas;
[L7448]              assume gas > 4000000 && gas <= 8000000;
[L7449]              tmpNow := now;
[L7450]              havoc now;
[L7451]              assume now > tmpNow;
[L7452]              assume msgsender_MSG != null;
[L7453]              assume DType[msgsender_MSG] != SafeMath;
[L7454]              assume DType[msgsender_MSG] != ERC20Interface;
[L7455]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L7456]              assume DType[msgsender_MSG] != Owned;
[L7457]              assume DType[msgsender_MSG] != TokenERC20;
[L7458]              assume DType[msgsender_MSG] != IDRC;
[L7459]              Alloc[msgsender_MSG] := true;
[L7460]  COND TRUE   choice == 32
[L7461]              gas := gas - 21000;
[L7462]  COND FALSE  !(gas >= 0)
[L7683]  RET         call CorralChoice_IDRC(this);

[2020-11-25 18:05:27,694 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 18:05:27,694 INFO  L82        PathProgramCache]: Analyzing trace with hash 1995981199, now seen corresponding path program 1 times
[2020-11-25 18:05:27,695 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 18:05:27,704 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 18:05:27,766 INFO  L134       CoverageAnalysis]: Checked inductivity of 23 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 23 trivial. 0 not checked.
[2020-11-25 18:05:27,766 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 18:05:27,766 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [9] imperfect sequences [] total 9
[2020-11-25 18:05:27,766 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 18:05:27,766 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 9 interpolants.
[2020-11-25 18:05:27,767 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=16, Invalid=56, Unknown=0, NotChecked=0, Total=72
[2020-11-25 18:05:27,767 INFO  L87              Difference]: Start difference. First operand 7471 states and 8579 transitions. cyclomatic complexity: 1116 Second operand 9 states.
[2020-11-25 18:05:30,939 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 18:05:30,940 INFO  L93              Difference]: Finished difference Result 7759 states and 8909 transitions.
[2020-11-25 18:05:30,940 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 10 states. 
[2020-11-25 18:05:30,940 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 7759 states and 8909 transitions.
[2020-11-25 18:05:30,987 INFO  L131   ngComponentsAnalysis]: Automaton has 3 accepting balls. 6
[2020-11-25 18:05:31,002 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 7759 states to 7759 states and 8909 transitions.
[2020-11-25 18:05:31,003 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 371
[2020-11-25 18:05:31,003 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 371
[2020-11-25 18:05:31,003 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 7759 states and 8909 transitions.
[2020-11-25 18:05:31,007 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 18:05:31,007 INFO  L728         BuchiCegarLoop]: Abstraction has 7759 states and 8909 transitions.
[2020-11-25 18:05:31,013 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 7759 states and 8909 transitions.
[2020-11-25 18:05:31,048 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 7759 to 7467.
[2020-11-25 18:05:31,048 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 7467 states.
[2020-11-25 18:05:31,055 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 7467 states to 7467 states and 8569 transitions.
[2020-11-25 18:05:31,055 INFO  L751         BuchiCegarLoop]: Abstraction has 7467 states and 8569 transitions.
[2020-11-25 18:05:31,055 INFO  L631         BuchiCegarLoop]: Abstraction has 7467 states and 8569 transitions.
[2020-11-25 18:05:31,055 INFO  L445         BuchiCegarLoop]: ======== Iteration 7============
[2020-11-25 18:05:31,055 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 7467 states and 8569 transitions.
[2020-11-25 18:05:31,061 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 18:05:31,061 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 18:05:31,061 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 18:05:31,062 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 18:05:31,063 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_transfer_TokenERC200 := false;
[L3]                 call_transfer_TokenERC200 := false;
[L3]     CALL        call main();
[L3]                 havoc p1;
[L7673]              assume null == 0;
[L7674]  CALL        call this := FreshRefGenerator__success();
[L4051]              havoc newRef;
[L4052]              assume Alloc[newRef] == false;
[L4053]              Alloc[newRef] := true;
[L4054]              assume newRef != null;
[L7674]  RET         call this := FreshRefGenerator__success();
[L7675]              assume now >= 0;
[L7676]              assume DType[this] == IDRC;
[L7677]              assume msgvalue_MSG == 0;
[L7678]              gas := gas - 53000;
[L7679]  CALL        call IDRC_IDRC__success(this, msgsender_MSG, msgvalue_MSG);
[L4741]  CALL        call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L4187]  CALL        call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4172]              assume msgsender_MSG != null;
[L4173]              Balance[this] := 0;
[L4187]  RET         call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4188]  COND FALSE  !(revert)
[L4741]  RET         call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L4742]  COND FALSE  !(revert)
[L4745]  CALL        call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L4257]  CALL        call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4239]              assume msgsender_MSG != null;
[L4240]              Balance[this] := 0;
[L4241]              owner_Owned[this] := null;
[L4242]              newOwner_Owned[this] := null;
[L4244]              owner_Owned[this] := msgsender_MSG;
[L4257]  RET         call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4258]  COND FALSE  !(revert)
[L4745]  RET         call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L4746]  COND FALSE  !(revert)
[L4749]  CALL        call TokenERC20_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4401]  CALL        call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L4187]  CALL        call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4172]              assume msgsender_MSG != null;
[L4173]              Balance[this] := 0;
[L4187]  RET         call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4188]  COND FALSE  !(revert)
[L4401]  RET         call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L4402]  COND FALSE  !(revert)
[L4405]  CALL        call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L4257]  CALL        call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4239]              assume msgsender_MSG != null;
[L4240]              Balance[this] := 0;
[L4241]              owner_Owned[this] := null;
[L4242]              newOwner_Owned[this] := null;
[L4244]              owner_Owned[this] := msgsender_MSG;
[L4257]  RET         call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4258]  COND FALSE  !(revert)
[L4405]  RET         call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L4406]  COND FALSE  !(revert)
[L4409]  CALL        call TokenERC20_TokenERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4359]              assume msgsender_MSG != null;
[L4360]              Balance[this] := 0;
[L4361]              symbol_TokenERC20[this] := -1901357083;
[L4362]              name_TokenERC20[this] := -1901357083;
[L4363]              decimals_TokenERC20[this] := 0;
[L4364]              _totalSupply_TokenERC20[this] := 0;
[L4365]              balances_TokenERC20[this] := zeroRefintArr();
[L4366]              sum_balances0[this] := 0;
[L4367]              allowed_TokenERC20[this] := zeroRefRefintArr();
[L4368]              sum_allowed1[this] := 0;
[L4370]              symbol_TokenERC20[this] := -892594266;
[L4371]              name_TokenERC20[this] := -1541073350;
[L4372]              decimals_TokenERC20[this] := 6;
[L4373]              __var_2 := decimals_TokenERC20[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4374]              _totalSupply_TokenERC20[this] := nonlinearMul(129746337890625 % 115792089237316195423570985008687907853269984665640564039457584007913129639936, nonlinearPow(10, decimals_TokenERC20[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4375]              sum_balances0[this] := sum_balances0[this] - balances_TokenERC20[this][owner_Owned[this]];
[L4376]              balances_TokenERC20[this][owner_Owned[this]] := _totalSupply_TokenERC20[this];
[L4377]              sum_balances0[this] := sum_balances0[this] + balances_TokenERC20[this][owner_Owned[this]];
[L4378]              assert { :EventEmitted "Transfer_TokenERC20" } true;
[L4409]  RET         call TokenERC20_TokenERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4410]  COND FALSE  !(revert)
[L4749]  RET         call TokenERC20_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4750]  COND FALSE  !(revert)
[L4753]  CALL        call IDRC_IDRC_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4703]              assume msgsender_MSG != null;
[L4704]              Balance[this] := 0;
[L4705]              aSBlock_IDRC[this] := 0;
[L4706]              aEBlock_IDRC[this] := 0;
[L4707]              aCap_IDRC[this] := 0;
[L4708]              aTot_IDRC[this] := 0;
[L4709]              aAmt_IDRC[this] := 0;
[L4710]              sSBlock_IDRC[this] := 0;
[L4711]              sEBlock_IDRC[this] := 0;
[L4712]              sCap_IDRC[this] := 0;
[L4713]              sTot_IDRC[this] := 0;
[L4714]              sChunk_IDRC[this] := 0;
[L4715]              sPrice_IDRC[this] := 0;
[L4753]  RET         call IDRC_IDRC_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4754]  COND FALSE  !(revert)
[L7679]  RET         call IDRC_IDRC__success(this, msgsender_MSG, msgvalue_MSG);
[L7680]              assume !revert && gas >= 0;
[L7683]  CALL        call CorralChoice_IDRC(this);
[L7382]              havoc msgsender_MSG;
[L7383]              havoc msgvalue_MSG;
[L7384]              havoc choice;
[L7385]              havoc __ret_0_totalSupply;
[L7386]              havoc tokenOwner_s338;
[L7387]              havoc balance_s338;
[L7388]              havoc tokenOwner_s484;
[L7389]              havoc spender_s484;
[L7390]              havoc remaining_s484;
[L7391]              havoc to_s381;
[L7392]              havoc tokens_s381;
[L7393]              havoc success_s381;
[L7394]              havoc spender_s409;
[L7395]              havoc tokens_s409;
[L7396]              havoc success_s409;
[L7397]              havoc from_s468;
[L7398]              havoc to_s468;
[L7399]              havoc tokens_s468;
[L7400]              havoc success_s468;
[L7401]              havoc __ret_0_owner;
[L7402]              havoc __ret_0_newOwner;
[L7403]              havoc _newOwner_s217;
[L7404]              havoc __ret_0_symbol;
[L7405]              havoc __ret_0_name;
[L7406]              havoc __ret_0_decimals;
[L7407]              havoc spender_s527;
[L7408]              havoc tokens_s527;
[L7409]              havoc data_s527;
[L7410]              havoc success_s527;
[L7411]              havoc __ret_0_aSBlock;
[L7412]              havoc __ret_0_aEBlock;
[L7413]              havoc __ret_0_aCap;
[L7414]              havoc __ret_0_aTot;
[L7415]              havoc __ret_0_aAmt;
[L7416]              havoc __ret_0_sSBlock;
[L7417]              havoc __ret_0_sEBlock;
[L7418]              havoc __ret_0_sCap;
[L7419]              havoc __ret_0_sTot;
[L7420]              havoc __ret_0_sChunk;
[L7421]              havoc __ret_0_sPrice;
[L7422]              havoc _refer_s687;
[L7423]              havoc success_s687;
[L7424]              havoc _refer_s847;
[L7425]              havoc success_s847;
[L7426]              havoc StartBlock_s868;
[L7427]              havoc EndBlock_s868;
[L7428]              havoc DropCap_s868;
[L7429]              havoc DropCount_s868;
[L7430]              havoc DropAmount_s868;
[L7431]              havoc StartBlock_s892;
[L7432]              havoc EndBlock_s892;
[L7433]              havoc SaleCap_s892;
[L7434]              havoc SaleCount_s892;
[L7435]              havoc ChunkSize_s892;
[L7436]              havoc SalePrice_s892;
[L7437]              havoc _aSBlock_s926;
[L7438]              havoc _aEBlock_s926;
[L7439]              havoc _aAmt_s926;
[L7440]              havoc _aCap_s926;
[L7441]              havoc _sSBlock_s966;
[L7442]              havoc _sEBlock_s966;
[L7443]              havoc _sChunk_s966;
[L7444]              havoc _sPrice_s966;
[L7445]              havoc _sCap_s966;
[L7446]              havoc tmpNow;
[L7447]              havoc gas;
[L7448]              assume gas > 4000000 && gas <= 8000000;
[L7449]              tmpNow := now;
[L7450]              havoc now;
[L7451]              assume now > tmpNow;
[L7452]              assume msgsender_MSG != null;
[L7453]              assume DType[msgsender_MSG] != SafeMath;
[L7454]              assume DType[msgsender_MSG] != ERC20Interface;
[L7455]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L7456]              assume DType[msgsender_MSG] != Owned;
[L7457]              assume DType[msgsender_MSG] != TokenERC20;
[L7458]              assume DType[msgsender_MSG] != IDRC;
[L7459]              Alloc[msgsender_MSG] := true;
[L7460]  COND FALSE  !(choice == 32)
[L7466]  COND FALSE  !(choice == 31)
[L7472]  COND FALSE  !(choice == 30)
[L7478]  COND TRUE   choice == 29
[L7479]              gas := gas - 21000;
[L7480]  COND TRUE   gas >= 0
[L7481]              assume tokens_s381 >= 0 && tokens_s381 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7482]              assume msgvalue_MSG == 0;
[L7483]  CALL        call success_s381 := transfer~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, to_s381, tokens_s381);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((p1 != msgsender_MSG && p1 != to_s381) && msgsender_MSG != to_s381) && tokens_s381 <= balances_TokenERC20[this][msgsender_MSG]) && balances_TokenERC20[this][to_s381] + tokens_s381 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && tokens_s381 >= 0) && tokens_s381 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_TokenERC20[this][to_s381] >= 0) && balances_TokenERC20[this][to_s381] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_TokenERC20[this][msgsender_MSG] >= 0) && balances_TokenERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transfer_TokenERC200 := true;
[L3]                 call_transfer_TokenERC200 := false;
[L3]                 revert := revert_hold;
[L979]               havoc __exception;
[L980]               revert := false;
[L981]   COND TRUE   __exception
[L982]               __tmp__Balance := Balance;
[L983]               __tmp__DType := DType;
[L984]               __tmp__Alloc := Alloc;
[L985]               __tmp__balance_ADDR := balance_ADDR;
[L986]               __tmp__M_Ref_int := M_Ref_int;
[L987]               __tmp__sum_balances0 := sum_balances0;
[L988]               __tmp__alloc_allowed_TokenERC20_lvl0 := alloc_allowed_TokenERC20_lvl0;
[L989]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L990]               __tmp__sum_allowed1 := sum_allowed1;
[L991]               __tmp__Length := Length;
[L992]               __tmp__now := now;
[L993]               __tmp__owner_Owned := owner_Owned;
[L994]               __tmp__newOwner_Owned := newOwner_Owned;
[L995]               __tmp__symbol_TokenERC20 := symbol_TokenERC20;
[L996]               __tmp__name_TokenERC20 := name_TokenERC20;
[L997]               __tmp__decimals_TokenERC20 := decimals_TokenERC20;
[L998]               __tmp___totalSupply_TokenERC20 := _totalSupply_TokenERC20;
[L999]               __tmp__balances_TokenERC20 := balances_TokenERC20;
[L1000]              __tmp__allowed_TokenERC20 := allowed_TokenERC20;
[L1001]              __tmp__aSBlock_IDRC := aSBlock_IDRC;
[L1002]              __tmp__aEBlock_IDRC := aEBlock_IDRC;
[L1003]              __tmp__aCap_IDRC := aCap_IDRC;
[L1004]              __tmp__aTot_IDRC := aTot_IDRC;
[L1005]              __tmp__aAmt_IDRC := aAmt_IDRC;
[L1006]              __tmp__sSBlock_IDRC := sSBlock_IDRC;
[L1007]              __tmp__sEBlock_IDRC := sEBlock_IDRC;
[L1008]              __tmp__sCap_IDRC := sCap_IDRC;
[L1009]              __tmp__sTot_IDRC := sTot_IDRC;
[L1010]              __tmp__sChunk_IDRC := sChunk_IDRC;
[L1011]              __tmp__sPrice_IDRC := sPrice_IDRC;
[L1012]  CALL        call success_s381 := transfer~address~uint256_TokenERC20__fail(this, msgsender_MSG, msgvalue_MSG, to_s381, tokens_s381);
[L4457]  CALL        call __var_5 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__balances_TokenERC20[this][msgsender_MSG], tokens_s381);
[L4109]  COND FALSE  !(!(b_s45 <= a_s45))
[L4113]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4457]  RET         call __var_5 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__balances_TokenERC20[this][msgsender_MSG], tokens_s381);
[L4458]  COND FALSE  !(revert)
[L4461]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] - __tmp__balances_TokenERC20[this][msgsender_MSG];
[L4462]              __tmp__balances_TokenERC20[this][msgsender_MSG] := __var_5;
[L4463]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] + __tmp__balances_TokenERC20[this][msgsender_MSG];
[L4464]  CALL        call __var_6 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__balances_TokenERC20[this][to_s381], tokens_s381);
[L4091]              c_s23 := (a_s23 + b_s23) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4092]  COND FALSE  !(!(c_s23 >= a_s23))
[L4464]  RET         call __var_6 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__balances_TokenERC20[this][to_s381], tokens_s381);
[L4465]  COND FALSE  !(revert)
[L4468]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] - __tmp__balances_TokenERC20[this][to_s381];
[L4469]              __tmp__balances_TokenERC20[this][to_s381] := __var_6;
[L4470]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] + __tmp__balances_TokenERC20[this][to_s381];
[L4471]              success_s381 := true;
[L1012]  RET         call success_s381 := transfer~address~uint256_TokenERC20__fail(this, msgsender_MSG, msgvalue_MSG, to_s381, tokens_s381);
[L1013]              assume revert || gas < 0;
[L7483]  RET         call success_s381 := transfer~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, to_s381, tokens_s381);
[L7683]  RET         call CorralChoice_IDRC(this);

Loop:
[L7683]  CALL        call CorralChoice_IDRC(this);
[L7382]              havoc msgsender_MSG;
[L7383]              havoc msgvalue_MSG;
[L7384]              havoc choice;
[L7385]              havoc __ret_0_totalSupply;
[L7386]              havoc tokenOwner_s338;
[L7387]              havoc balance_s338;
[L7388]              havoc tokenOwner_s484;
[L7389]              havoc spender_s484;
[L7390]              havoc remaining_s484;
[L7391]              havoc to_s381;
[L7392]              havoc tokens_s381;
[L7393]              havoc success_s381;
[L7394]              havoc spender_s409;
[L7395]              havoc tokens_s409;
[L7396]              havoc success_s409;
[L7397]              havoc from_s468;
[L7398]              havoc to_s468;
[L7399]              havoc tokens_s468;
[L7400]              havoc success_s468;
[L7401]              havoc __ret_0_owner;
[L7402]              havoc __ret_0_newOwner;
[L7403]              havoc _newOwner_s217;
[L7404]              havoc __ret_0_symbol;
[L7405]              havoc __ret_0_name;
[L7406]              havoc __ret_0_decimals;
[L7407]              havoc spender_s527;
[L7408]              havoc tokens_s527;
[L7409]              havoc data_s527;
[L7410]              havoc success_s527;
[L7411]              havoc __ret_0_aSBlock;
[L7412]              havoc __ret_0_aEBlock;
[L7413]              havoc __ret_0_aCap;
[L7414]              havoc __ret_0_aTot;
[L7415]              havoc __ret_0_aAmt;
[L7416]              havoc __ret_0_sSBlock;
[L7417]              havoc __ret_0_sEBlock;
[L7418]              havoc __ret_0_sCap;
[L7419]              havoc __ret_0_sTot;
[L7420]              havoc __ret_0_sChunk;
[L7421]              havoc __ret_0_sPrice;
[L7422]              havoc _refer_s687;
[L7423]              havoc success_s687;
[L7424]              havoc _refer_s847;
[L7425]              havoc success_s847;
[L7426]              havoc StartBlock_s868;
[L7427]              havoc EndBlock_s868;
[L7428]              havoc DropCap_s868;
[L7429]              havoc DropCount_s868;
[L7430]              havoc DropAmount_s868;
[L7431]              havoc StartBlock_s892;
[L7432]              havoc EndBlock_s892;
[L7433]              havoc SaleCap_s892;
[L7434]              havoc SaleCount_s892;
[L7435]              havoc ChunkSize_s892;
[L7436]              havoc SalePrice_s892;
[L7437]              havoc _aSBlock_s926;
[L7438]              havoc _aEBlock_s926;
[L7439]              havoc _aAmt_s926;
[L7440]              havoc _aCap_s926;
[L7441]              havoc _sSBlock_s966;
[L7442]              havoc _sEBlock_s966;
[L7443]              havoc _sChunk_s966;
[L7444]              havoc _sPrice_s966;
[L7445]              havoc _sCap_s966;
[L7446]              havoc tmpNow;
[L7447]              havoc gas;
[L7448]              assume gas > 4000000 && gas <= 8000000;
[L7449]              tmpNow := now;
[L7450]              havoc now;
[L7451]              assume now > tmpNow;
[L7452]              assume msgsender_MSG != null;
[L7453]              assume DType[msgsender_MSG] != SafeMath;
[L7454]              assume DType[msgsender_MSG] != ERC20Interface;
[L7455]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L7456]              assume DType[msgsender_MSG] != Owned;
[L7457]              assume DType[msgsender_MSG] != TokenERC20;
[L7458]              assume DType[msgsender_MSG] != IDRC;
[L7459]              Alloc[msgsender_MSG] := true;
[L7460]  COND TRUE   choice == 32
[L7461]              gas := gas - 21000;
[L7462]  COND FALSE  !(gas >= 0)
[L7683]  RET         call CorralChoice_IDRC(this);

[2020-11-25 18:05:31,104 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 18:05:31,104 INFO  L82        PathProgramCache]: Analyzing trace with hash 1520871131, now seen corresponding path program 1 times
[2020-11-25 18:05:31,104 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 18:05:31,113 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 18:05:31,143 INFO  L134       CoverageAnalysis]: Checked inductivity of 23 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 23 trivial. 0 not checked.
[2020-11-25 18:05:31,144 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 18:05:31,144 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [5] imperfect sequences [] total 5
[2020-11-25 18:05:31,145 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 18:05:31,145 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 5 interpolants.
[2020-11-25 18:05:31,145 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=7, Invalid=13, Unknown=0, NotChecked=0, Total=20
[2020-11-25 18:05:31,145 INFO  L87              Difference]: Start difference. First operand 7467 states and 8569 transitions. cyclomatic complexity: 1110 Second operand 5 states.
[2020-11-25 18:05:32,099 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 18:05:32,099 INFO  L93              Difference]: Finished difference Result 8794 states and 10128 transitions.
[2020-11-25 18:05:32,099 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 7 states. 
[2020-11-25 18:05:32,099 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 8794 states and 10128 transitions.
[2020-11-25 18:05:32,117 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 8
[2020-11-25 18:05:32,134 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 8794 states to 7162 states and 8333 transitions.
[2020-11-25 18:05:32,134 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 294
[2020-11-25 18:05:32,135 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 294
[2020-11-25 18:05:32,135 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 7162 states and 8333 transitions.
[2020-11-25 18:05:32,139 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 18:05:32,139 INFO  L728         BuchiCegarLoop]: Abstraction has 7162 states and 8333 transitions.
[2020-11-25 18:05:32,144 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 7162 states and 8333 transitions.
[2020-11-25 18:05:32,174 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 7162 to 5780.
[2020-11-25 18:05:32,174 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 5780 states.
[2020-11-25 18:05:32,180 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 5780 states to 5780 states and 6646 transitions.
[2020-11-25 18:05:32,180 INFO  L751         BuchiCegarLoop]: Abstraction has 5780 states and 6646 transitions.
[2020-11-25 18:05:32,180 INFO  L631         BuchiCegarLoop]: Abstraction has 5780 states and 6646 transitions.
[2020-11-25 18:05:32,180 INFO  L445         BuchiCegarLoop]: ======== Iteration 8============
[2020-11-25 18:05:32,180 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 5780 states and 6646 transitions.
[2020-11-25 18:05:32,185 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 18:05:32,185 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 18:05:32,185 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 18:05:32,187 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 18:05:32,187 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_transfer_TokenERC200 := false;
[L3]                 call_transfer_TokenERC200 := false;
[L3]     CALL        call main();
[L3]                 havoc p1;
[L7673]              assume null == 0;
[L7674]  CALL        call this := FreshRefGenerator__success();
[L4051]              havoc newRef;
[L4052]              assume Alloc[newRef] == false;
[L4053]              Alloc[newRef] := true;
[L4054]              assume newRef != null;
[L7674]  RET         call this := FreshRefGenerator__success();
[L7675]              assume now >= 0;
[L7676]              assume DType[this] == IDRC;
[L7677]              assume msgvalue_MSG == 0;
[L7678]              gas := gas - 53000;
[L7679]  CALL        call IDRC_IDRC__success(this, msgsender_MSG, msgvalue_MSG);
[L4741]  CALL        call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L4187]  CALL        call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4172]              assume msgsender_MSG != null;
[L4173]              Balance[this] := 0;
[L4187]  RET         call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4188]  COND FALSE  !(revert)
[L4741]  RET         call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L4742]  COND FALSE  !(revert)
[L4745]  CALL        call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L4257]  CALL        call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4239]              assume msgsender_MSG != null;
[L4240]              Balance[this] := 0;
[L4241]              owner_Owned[this] := null;
[L4242]              newOwner_Owned[this] := null;
[L4244]              owner_Owned[this] := msgsender_MSG;
[L4257]  RET         call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4258]  COND FALSE  !(revert)
[L4745]  RET         call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L4746]  COND FALSE  !(revert)
[L4749]  CALL        call TokenERC20_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4401]  CALL        call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L4187]  CALL        call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4172]              assume msgsender_MSG != null;
[L4173]              Balance[this] := 0;
[L4187]  RET         call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4188]  COND FALSE  !(revert)
[L4401]  RET         call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L4402]  COND FALSE  !(revert)
[L4405]  CALL        call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L4257]  CALL        call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4239]              assume msgsender_MSG != null;
[L4240]              Balance[this] := 0;
[L4241]              owner_Owned[this] := null;
[L4242]              newOwner_Owned[this] := null;
[L4244]              owner_Owned[this] := msgsender_MSG;
[L4257]  RET         call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4258]  COND FALSE  !(revert)
[L4405]  RET         call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L4406]  COND FALSE  !(revert)
[L4409]  CALL        call TokenERC20_TokenERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4359]              assume msgsender_MSG != null;
[L4360]              Balance[this] := 0;
[L4361]              symbol_TokenERC20[this] := -1901357083;
[L4362]              name_TokenERC20[this] := -1901357083;
[L4363]              decimals_TokenERC20[this] := 0;
[L4364]              _totalSupply_TokenERC20[this] := 0;
[L4365]              balances_TokenERC20[this] := zeroRefintArr();
[L4366]              sum_balances0[this] := 0;
[L4367]              allowed_TokenERC20[this] := zeroRefRefintArr();
[L4368]              sum_allowed1[this] := 0;
[L4370]              symbol_TokenERC20[this] := -892594266;
[L4371]              name_TokenERC20[this] := -1541073350;
[L4372]              decimals_TokenERC20[this] := 6;
[L4373]              __var_2 := decimals_TokenERC20[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4374]              _totalSupply_TokenERC20[this] := nonlinearMul(129746337890625 % 115792089237316195423570985008687907853269984665640564039457584007913129639936, nonlinearPow(10, decimals_TokenERC20[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4375]              sum_balances0[this] := sum_balances0[this] - balances_TokenERC20[this][owner_Owned[this]];
[L4376]              balances_TokenERC20[this][owner_Owned[this]] := _totalSupply_TokenERC20[this];
[L4377]              sum_balances0[this] := sum_balances0[this] + balances_TokenERC20[this][owner_Owned[this]];
[L4378]              assert { :EventEmitted "Transfer_TokenERC20" } true;
[L4409]  RET         call TokenERC20_TokenERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4410]  COND FALSE  !(revert)
[L4749]  RET         call TokenERC20_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4750]  COND FALSE  !(revert)
[L4753]  CALL        call IDRC_IDRC_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4703]              assume msgsender_MSG != null;
[L4704]              Balance[this] := 0;
[L4705]              aSBlock_IDRC[this] := 0;
[L4706]              aEBlock_IDRC[this] := 0;
[L4707]              aCap_IDRC[this] := 0;
[L4708]              aTot_IDRC[this] := 0;
[L4709]              aAmt_IDRC[this] := 0;
[L4710]              sSBlock_IDRC[this] := 0;
[L4711]              sEBlock_IDRC[this] := 0;
[L4712]              sCap_IDRC[this] := 0;
[L4713]              sTot_IDRC[this] := 0;
[L4714]              sChunk_IDRC[this] := 0;
[L4715]              sPrice_IDRC[this] := 0;
[L4753]  RET         call IDRC_IDRC_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4754]  COND FALSE  !(revert)
[L7679]  RET         call IDRC_IDRC__success(this, msgsender_MSG, msgvalue_MSG);
[L7680]              assume !revert && gas >= 0;
[L7683]  CALL        call CorralChoice_IDRC(this);
[L7382]              havoc msgsender_MSG;
[L7383]              havoc msgvalue_MSG;
[L7384]              havoc choice;
[L7385]              havoc __ret_0_totalSupply;
[L7386]              havoc tokenOwner_s338;
[L7387]              havoc balance_s338;
[L7388]              havoc tokenOwner_s484;
[L7389]              havoc spender_s484;
[L7390]              havoc remaining_s484;
[L7391]              havoc to_s381;
[L7392]              havoc tokens_s381;
[L7393]              havoc success_s381;
[L7394]              havoc spender_s409;
[L7395]              havoc tokens_s409;
[L7396]              havoc success_s409;
[L7397]              havoc from_s468;
[L7398]              havoc to_s468;
[L7399]              havoc tokens_s468;
[L7400]              havoc success_s468;
[L7401]              havoc __ret_0_owner;
[L7402]              havoc __ret_0_newOwner;
[L7403]              havoc _newOwner_s217;
[L7404]              havoc __ret_0_symbol;
[L7405]              havoc __ret_0_name;
[L7406]              havoc __ret_0_decimals;
[L7407]              havoc spender_s527;
[L7408]              havoc tokens_s527;
[L7409]              havoc data_s527;
[L7410]              havoc success_s527;
[L7411]              havoc __ret_0_aSBlock;
[L7412]              havoc __ret_0_aEBlock;
[L7413]              havoc __ret_0_aCap;
[L7414]              havoc __ret_0_aTot;
[L7415]              havoc __ret_0_aAmt;
[L7416]              havoc __ret_0_sSBlock;
[L7417]              havoc __ret_0_sEBlock;
[L7418]              havoc __ret_0_sCap;
[L7419]              havoc __ret_0_sTot;
[L7420]              havoc __ret_0_sChunk;
[L7421]              havoc __ret_0_sPrice;
[L7422]              havoc _refer_s687;
[L7423]              havoc success_s687;
[L7424]              havoc _refer_s847;
[L7425]              havoc success_s847;
[L7426]              havoc StartBlock_s868;
[L7427]              havoc EndBlock_s868;
[L7428]              havoc DropCap_s868;
[L7429]              havoc DropCount_s868;
[L7430]              havoc DropAmount_s868;
[L7431]              havoc StartBlock_s892;
[L7432]              havoc EndBlock_s892;
[L7433]              havoc SaleCap_s892;
[L7434]              havoc SaleCount_s892;
[L7435]              havoc ChunkSize_s892;
[L7436]              havoc SalePrice_s892;
[L7437]              havoc _aSBlock_s926;
[L7438]              havoc _aEBlock_s926;
[L7439]              havoc _aAmt_s926;
[L7440]              havoc _aCap_s926;
[L7441]              havoc _sSBlock_s966;
[L7442]              havoc _sEBlock_s966;
[L7443]              havoc _sChunk_s966;
[L7444]              havoc _sPrice_s966;
[L7445]              havoc _sCap_s966;
[L7446]              havoc tmpNow;
[L7447]              havoc gas;
[L7448]              assume gas > 4000000 && gas <= 8000000;
[L7449]              tmpNow := now;
[L7450]              havoc now;
[L7451]              assume now > tmpNow;
[L7452]              assume msgsender_MSG != null;
[L7453]              assume DType[msgsender_MSG] != SafeMath;
[L7454]              assume DType[msgsender_MSG] != ERC20Interface;
[L7455]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L7456]              assume DType[msgsender_MSG] != Owned;
[L7457]              assume DType[msgsender_MSG] != TokenERC20;
[L7458]              assume DType[msgsender_MSG] != IDRC;
[L7459]              Alloc[msgsender_MSG] := true;
[L7460]  COND FALSE  !(choice == 32)
[L7466]  COND FALSE  !(choice == 31)
[L7472]  COND FALSE  !(choice == 30)
[L7478]  COND TRUE   choice == 29
[L7479]              gas := gas - 21000;
[L7480]  COND TRUE   gas >= 0
[L7481]              assume tokens_s381 >= 0 && tokens_s381 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7482]              assume msgvalue_MSG == 0;
[L7483]  CALL        call success_s381 := transfer~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, to_s381, tokens_s381);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !((((((((((p1 != msgsender_MSG && p1 != to_s381) && msgsender_MSG != to_s381) && tokens_s381 <= balances_TokenERC20[this][msgsender_MSG]) && balances_TokenERC20[this][to_s381] + tokens_s381 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && tokens_s381 >= 0) && tokens_s381 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_TokenERC20[this][to_s381] >= 0) && balances_TokenERC20[this][to_s381] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_TokenERC20[this][msgsender_MSG] >= 0) && balances_TokenERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L3]                 revert := revert_hold;
[L979]               havoc __exception;
[L980]               revert := false;
[L981]   COND FALSE  !(__exception)
[L1015]  CALL        call success_s381 := transfer~address~uint256_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s381, tokens_s381);
[L4479]  CALL        call __var_5 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_TokenERC20[this][msgsender_MSG], tokens_s381);
[L4118]  COND FALSE  !(!(b_s45 <= a_s45))
[L4122]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4479]  RET         call __var_5 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_TokenERC20[this][msgsender_MSG], tokens_s381);
[L4480]  COND FALSE  !(revert)
[L4483]              sum_balances0[this] := sum_balances0[this] - balances_TokenERC20[this][msgsender_MSG];
[L4484]              balances_TokenERC20[this][msgsender_MSG] := __var_5;
[L4485]              sum_balances0[this] := sum_balances0[this] + balances_TokenERC20[this][msgsender_MSG];
[L4486]  CALL        call __var_6 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_TokenERC20[this][to_s381], tokens_s381);
[L4100]              c_s23 := (a_s23 + b_s23) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4101]  COND FALSE  !(!(c_s23 >= a_s23))
[L4486]  RET         call __var_6 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_TokenERC20[this][to_s381], tokens_s381);
[L4487]  COND FALSE  !(revert)
[L4490]              sum_balances0[this] := sum_balances0[this] - balances_TokenERC20[this][to_s381];
[L4491]              balances_TokenERC20[this][to_s381] := __var_6;
[L4492]              sum_balances0[this] := sum_balances0[this] + balances_TokenERC20[this][to_s381];
[L4493]              assert { :EventEmitted "Transfer_TokenERC20" } true;
[L4494]              success_s381 := true;
[L1015]  RET         call success_s381 := transfer~address~uint256_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s381, tokens_s381);
[L1016]              assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !(((((((((((((((((((((success_s381 == true && balances_TokenERC20[this][msgsender_MSG] == old(balances_TokenERC20[this][msgsender_MSG]) - tokens_s381) && balances_TokenERC20[this][to_s381] == old(balances_TokenERC20[this][to_s381]) + tokens_s381) && _totalSupply_TokenERC20[this] == old(_totalSupply_TokenERC20[this])) && allowed_TokenERC20[this] == old(allowed_TokenERC20[this])) && balances_TokenERC20[this][p1] == old(balances_TokenERC20[this][p1])) && aSBlock_IDRC[this] == old(aSBlock_IDRC[this])) && aEBlock_IDRC[this] == old(aEBlock_IDRC[this])) && aCap_IDRC[this] == old(aCap_IDRC[this])) && aTot_IDRC[this] == old(aTot_IDRC[this])) && aAmt_IDRC[this] == old(aAmt_IDRC[this])) && sSBlock_IDRC[this] == old(sSBlock_IDRC[this])) && sEBlock_IDRC[this] == old(sEBlock_IDRC[this])) && sCap_IDRC[this] == old(sCap_IDRC[this])) && sTot_IDRC[this] == old(sTot_IDRC[this])) && sChunk_IDRC[this] == old(sChunk_IDRC[this])) && sPrice_IDRC[this] == old(sPrice_IDRC[this])) && symbol_TokenERC20[this] == old(symbol_TokenERC20[this])) && name_TokenERC20[this] == old(name_TokenERC20[this])) && decimals_TokenERC20[this] == old(decimals_TokenERC20[this])) && owner_Owned[this] == old(owner_Owned[this])) && newOwner_Owned[this] == old(newOwner_Owned[this]));
[L3]                 revert := revert_hold;
[L7483]  RET         call success_s381 := transfer~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, to_s381, tokens_s381);
[L7683]  RET         call CorralChoice_IDRC(this);
[L7683]  CALL        call CorralChoice_IDRC(this);
[L7382]              havoc msgsender_MSG;
[L7383]              havoc msgvalue_MSG;
[L7384]              havoc choice;
[L7385]              havoc __ret_0_totalSupply;
[L7386]              havoc tokenOwner_s338;
[L7387]              havoc balance_s338;
[L7388]              havoc tokenOwner_s484;
[L7389]              havoc spender_s484;
[L7390]              havoc remaining_s484;
[L7391]              havoc to_s381;
[L7392]              havoc tokens_s381;
[L7393]              havoc success_s381;
[L7394]              havoc spender_s409;
[L7395]              havoc tokens_s409;
[L7396]              havoc success_s409;
[L7397]              havoc from_s468;
[L7398]              havoc to_s468;
[L7399]              havoc tokens_s468;
[L7400]              havoc success_s468;
[L7401]              havoc __ret_0_owner;
[L7402]              havoc __ret_0_newOwner;
[L7403]              havoc _newOwner_s217;
[L7404]              havoc __ret_0_symbol;
[L7405]              havoc __ret_0_name;
[L7406]              havoc __ret_0_decimals;
[L7407]              havoc spender_s527;
[L7408]              havoc tokens_s527;
[L7409]              havoc data_s527;
[L7410]              havoc success_s527;
[L7411]              havoc __ret_0_aSBlock;
[L7412]              havoc __ret_0_aEBlock;
[L7413]              havoc __ret_0_aCap;
[L7414]              havoc __ret_0_aTot;
[L7415]              havoc __ret_0_aAmt;
[L7416]              havoc __ret_0_sSBlock;
[L7417]              havoc __ret_0_sEBlock;
[L7418]              havoc __ret_0_sCap;
[L7419]              havoc __ret_0_sTot;
[L7420]              havoc __ret_0_sChunk;
[L7421]              havoc __ret_0_sPrice;
[L7422]              havoc _refer_s687;
[L7423]              havoc success_s687;
[L7424]              havoc _refer_s847;
[L7425]              havoc success_s847;
[L7426]              havoc StartBlock_s868;
[L7427]              havoc EndBlock_s868;
[L7428]              havoc DropCap_s868;
[L7429]              havoc DropCount_s868;
[L7430]              havoc DropAmount_s868;
[L7431]              havoc StartBlock_s892;
[L7432]              havoc EndBlock_s892;
[L7433]              havoc SaleCap_s892;
[L7434]              havoc SaleCount_s892;
[L7435]              havoc ChunkSize_s892;
[L7436]              havoc SalePrice_s892;
[L7437]              havoc _aSBlock_s926;
[L7438]              havoc _aEBlock_s926;
[L7439]              havoc _aAmt_s926;
[L7440]              havoc _aCap_s926;
[L7441]              havoc _sSBlock_s966;
[L7442]              havoc _sEBlock_s966;
[L7443]              havoc _sChunk_s966;
[L7444]              havoc _sPrice_s966;
[L7445]              havoc _sCap_s966;
[L7446]              havoc tmpNow;
[L7447]              havoc gas;
[L7448]              assume gas > 4000000 && gas <= 8000000;
[L7449]              tmpNow := now;
[L7450]              havoc now;
[L7451]              assume now > tmpNow;
[L7452]              assume msgsender_MSG != null;
[L7453]              assume DType[msgsender_MSG] != SafeMath;
[L7454]              assume DType[msgsender_MSG] != ERC20Interface;
[L7455]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L7456]              assume DType[msgsender_MSG] != Owned;
[L7457]              assume DType[msgsender_MSG] != TokenERC20;
[L7458]              assume DType[msgsender_MSG] != IDRC;
[L7459]              Alloc[msgsender_MSG] := true;
[L7460]  COND FALSE  !(choice == 32)
[L7466]  COND FALSE  !(choice == 31)
[L7472]  COND FALSE  !(choice == 30)
[L7478]  COND TRUE   choice == 29
[L7479]              gas := gas - 21000;
[L7480]  COND TRUE   gas >= 0
[L7481]              assume tokens_s381 >= 0 && tokens_s381 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7482]              assume msgvalue_MSG == 0;
[L7483]  CALL        call success_s381 := transfer~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, to_s381, tokens_s381);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((p1 != msgsender_MSG && p1 != to_s381) && msgsender_MSG != to_s381) && tokens_s381 <= balances_TokenERC20[this][msgsender_MSG]) && balances_TokenERC20[this][to_s381] + tokens_s381 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && tokens_s381 >= 0) && tokens_s381 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_TokenERC20[this][to_s381] >= 0) && balances_TokenERC20[this][to_s381] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_TokenERC20[this][msgsender_MSG] >= 0) && balances_TokenERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transfer_TokenERC200 := true;
[L3]                 call_transfer_TokenERC200 := false;
[L3]                 revert := revert_hold;
[L979]               havoc __exception;
[L980]               revert := false;
[L981]   COND FALSE  !(__exception)
[L1015]  CALL        call success_s381 := transfer~address~uint256_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s381, tokens_s381);
[L4479]  CALL        call __var_5 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_TokenERC20[this][msgsender_MSG], tokens_s381);
[L4118]  COND FALSE  !(!(b_s45 <= a_s45))
[L4122]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4479]  RET         call __var_5 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_TokenERC20[this][msgsender_MSG], tokens_s381);
[L4480]  COND FALSE  !(revert)
[L4483]              sum_balances0[this] := sum_balances0[this] - balances_TokenERC20[this][msgsender_MSG];
[L4484]              balances_TokenERC20[this][msgsender_MSG] := __var_5;
[L4485]              sum_balances0[this] := sum_balances0[this] + balances_TokenERC20[this][msgsender_MSG];
[L4486]  CALL        call __var_6 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_TokenERC20[this][to_s381], tokens_s381);
[L4100]              c_s23 := (a_s23 + b_s23) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4101]  COND FALSE  !(!(c_s23 >= a_s23))
[L4486]  RET         call __var_6 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_TokenERC20[this][to_s381], tokens_s381);
[L4487]  COND FALSE  !(revert)
[L4490]              sum_balances0[this] := sum_balances0[this] - balances_TokenERC20[this][to_s381];
[L4491]              balances_TokenERC20[this][to_s381] := __var_6;
[L4492]              sum_balances0[this] := sum_balances0[this] + balances_TokenERC20[this][to_s381];
[L4493]              assert { :EventEmitted "Transfer_TokenERC20" } true;
[L4494]              success_s381 := true;
[L1015]  RET         call success_s381 := transfer~address~uint256_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s381, tokens_s381);
[L1016]              assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !(((((((((((((((((((((success_s381 == true && balances_TokenERC20[this][msgsender_MSG] == old(balances_TokenERC20[this][msgsender_MSG]) - tokens_s381) && balances_TokenERC20[this][to_s381] == old(balances_TokenERC20[this][to_s381]) + tokens_s381) && _totalSupply_TokenERC20[this] == old(_totalSupply_TokenERC20[this])) && allowed_TokenERC20[this] == old(allowed_TokenERC20[this])) && balances_TokenERC20[this][p1] == old(balances_TokenERC20[this][p1])) && aSBlock_IDRC[this] == old(aSBlock_IDRC[this])) && aEBlock_IDRC[this] == old(aEBlock_IDRC[this])) && aCap_IDRC[this] == old(aCap_IDRC[this])) && aTot_IDRC[this] == old(aTot_IDRC[this])) && aAmt_IDRC[this] == old(aAmt_IDRC[this])) && sSBlock_IDRC[this] == old(sSBlock_IDRC[this])) && sEBlock_IDRC[this] == old(sEBlock_IDRC[this])) && sCap_IDRC[this] == old(sCap_IDRC[this])) && sTot_IDRC[this] == old(sTot_IDRC[this])) && sChunk_IDRC[this] == old(sChunk_IDRC[this])) && sPrice_IDRC[this] == old(sPrice_IDRC[this])) && symbol_TokenERC20[this] == old(symbol_TokenERC20[this])) && name_TokenERC20[this] == old(name_TokenERC20[this])) && decimals_TokenERC20[this] == old(decimals_TokenERC20[this])) && owner_Owned[this] == old(owner_Owned[this])) && newOwner_Owned[this] == old(newOwner_Owned[this]));
[L3]                 revert := revert_hold;
[L7483]  RET         call success_s381 := transfer~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, to_s381, tokens_s381);
[L7683]  RET         call CorralChoice_IDRC(this);

Loop:
[L7683]  CALL        call CorralChoice_IDRC(this);
[L7382]              havoc msgsender_MSG;
[L7383]              havoc msgvalue_MSG;
[L7384]              havoc choice;
[L7385]              havoc __ret_0_totalSupply;
[L7386]              havoc tokenOwner_s338;
[L7387]              havoc balance_s338;
[L7388]              havoc tokenOwner_s484;
[L7389]              havoc spender_s484;
[L7390]              havoc remaining_s484;
[L7391]              havoc to_s381;
[L7392]              havoc tokens_s381;
[L7393]              havoc success_s381;
[L7394]              havoc spender_s409;
[L7395]              havoc tokens_s409;
[L7396]              havoc success_s409;
[L7397]              havoc from_s468;
[L7398]              havoc to_s468;
[L7399]              havoc tokens_s468;
[L7400]              havoc success_s468;
[L7401]              havoc __ret_0_owner;
[L7402]              havoc __ret_0_newOwner;
[L7403]              havoc _newOwner_s217;
[L7404]              havoc __ret_0_symbol;
[L7405]              havoc __ret_0_name;
[L7406]              havoc __ret_0_decimals;
[L7407]              havoc spender_s527;
[L7408]              havoc tokens_s527;
[L7409]              havoc data_s527;
[L7410]              havoc success_s527;
[L7411]              havoc __ret_0_aSBlock;
[L7412]              havoc __ret_0_aEBlock;
[L7413]              havoc __ret_0_aCap;
[L7414]              havoc __ret_0_aTot;
[L7415]              havoc __ret_0_aAmt;
[L7416]              havoc __ret_0_sSBlock;
[L7417]              havoc __ret_0_sEBlock;
[L7418]              havoc __ret_0_sCap;
[L7419]              havoc __ret_0_sTot;
[L7420]              havoc __ret_0_sChunk;
[L7421]              havoc __ret_0_sPrice;
[L7422]              havoc _refer_s687;
[L7423]              havoc success_s687;
[L7424]              havoc _refer_s847;
[L7425]              havoc success_s847;
[L7426]              havoc StartBlock_s868;
[L7427]              havoc EndBlock_s868;
[L7428]              havoc DropCap_s868;
[L7429]              havoc DropCount_s868;
[L7430]              havoc DropAmount_s868;
[L7431]              havoc StartBlock_s892;
[L7432]              havoc EndBlock_s892;
[L7433]              havoc SaleCap_s892;
[L7434]              havoc SaleCount_s892;
[L7435]              havoc ChunkSize_s892;
[L7436]              havoc SalePrice_s892;
[L7437]              havoc _aSBlock_s926;
[L7438]              havoc _aEBlock_s926;
[L7439]              havoc _aAmt_s926;
[L7440]              havoc _aCap_s926;
[L7441]              havoc _sSBlock_s966;
[L7442]              havoc _sEBlock_s966;
[L7443]              havoc _sChunk_s966;
[L7444]              havoc _sPrice_s966;
[L7445]              havoc _sCap_s966;
[L7446]              havoc tmpNow;
[L7447]              havoc gas;
[L7448]              assume gas > 4000000 && gas <= 8000000;
[L7449]              tmpNow := now;
[L7450]              havoc now;
[L7451]              assume now > tmpNow;
[L7452]              assume msgsender_MSG != null;
[L7453]              assume DType[msgsender_MSG] != SafeMath;
[L7454]              assume DType[msgsender_MSG] != ERC20Interface;
[L7455]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L7456]              assume DType[msgsender_MSG] != Owned;
[L7457]              assume DType[msgsender_MSG] != TokenERC20;
[L7458]              assume DType[msgsender_MSG] != IDRC;
[L7459]              Alloc[msgsender_MSG] := true;
[L7460]  COND TRUE   choice == 32
[L7461]              gas := gas - 21000;
[L7462]  COND FALSE  !(gas >= 0)
[L7683]  RET         call CorralChoice_IDRC(this);

[2020-11-25 18:05:32,191 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 18:05:32,191 INFO  L82        PathProgramCache]: Analyzing trace with hash -1952818104, now seen corresponding path program 1 times
[2020-11-25 18:05:32,191 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 18:05:32,251 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 18:05:32,418 INFO  L134       CoverageAnalysis]: Checked inductivity of 116 backedges. 4 proven. 0 refuted. 0 times theorem prover too weak. 112 trivial. 0 not checked.
[2020-11-25 18:05:32,419 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 18:05:32,419 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [14] imperfect sequences [] total 14
[2020-11-25 18:05:32,419 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 18:05:32,419 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 14 interpolants.
[2020-11-25 18:05:32,419 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=30, Invalid=152, Unknown=0, NotChecked=0, Total=182
[2020-11-25 18:05:32,419 INFO  L87              Difference]: Start difference. First operand 5780 states and 6646 transitions. cyclomatic complexity: 873 Second operand 14 states.
[2020-11-25 18:05:35,728 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 18:05:35,728 INFO  L93              Difference]: Finished difference Result 3016 states and 3452 transitions.
[2020-11-25 18:05:35,728 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 14 states. 
[2020-11-25 18:05:35,728 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 3016 states and 3452 transitions.
[2020-11-25 18:05:35,733 INFO  L131   ngComponentsAnalysis]: Automaton has 0 accepting balls. 0
[2020-11-25 18:05:35,733 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 3016 states to 0 states and 0 transitions.
[2020-11-25 18:05:35,733 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 0
[2020-11-25 18:05:35,733 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 0
[2020-11-25 18:05:35,733 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 0 states and 0 transitions.
[2020-11-25 18:05:35,733 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 18:05:35,733 INFO  L728         BuchiCegarLoop]: Abstraction has 0 states and 0 transitions.
[2020-11-25 18:05:35,733 INFO  L751         BuchiCegarLoop]: Abstraction has 0 states and 0 transitions.
[2020-11-25 18:05:35,733 INFO  L631         BuchiCegarLoop]: Abstraction has 0 states and 0 transitions.
[2020-11-25 18:05:35,733 INFO  L445         BuchiCegarLoop]: ======== Iteration 9============
[2020-11-25 18:05:35,734 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 0 states and 0 transitions.
[2020-11-25 18:05:35,734 INFO  L131   ngComponentsAnalysis]: Automaton has 0 accepting balls. 0
[2020-11-25 18:05:35,734 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is true
[2020-11-25 18:05:35,736 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer CFG 25.11 06:05:35 BasicIcfg
[2020-11-25 18:05:35,737 INFO  L132        PluginConnector]: ------------------------ END BuchiAutomizer----------------------------
[2020-11-25 18:05:35,737 INFO  L168              Benchmark]: Toolchain (without parser) took 31766.01 ms. Allocated memory was 1.0 GB in the beginning and 2.5 GB in the end (delta: 1.5 GB). Free memory was 929.8 MB in the beginning and 846.0 MB in the end (delta: 83.8 MB). Peak memory consumption was 1.6 GB. Max. memory is 15.3 GB.
[2020-11-25 18:05:35,737 INFO  L168              Benchmark]: Boogie PL CUP Parser took 0.17 ms. Allocated memory is still 1.0 GB. Free memory is still 951.3 MB. There was no memory consumed. Max. memory is 15.3 GB.
[2020-11-25 18:05:35,738 INFO  L168              Benchmark]: Boogie Preprocessor took 124.78 ms. Allocated memory is still 1.0 GB. Free memory was 929.8 MB in the beginning and 913.7 MB in the end (delta: 16.1 MB). Peak memory consumption was 16.1 MB. Max. memory is 15.3 GB.
[2020-11-25 18:05:35,738 INFO  L168              Benchmark]: UtopiaSpecLang took 88.70 ms. Allocated memory is still 1.0 GB. Free memory was 913.7 MB in the beginning and 903.0 MB in the end (delta: 10.7 MB). Peak memory consumption was 10.7 MB. Max. memory is 15.3 GB.
[2020-11-25 18:05:35,738 INFO  L168              Benchmark]: Boogie Printer took 21.27 ms. Allocated memory is still 1.0 GB. Free memory was 903.0 MB in the beginning and 897.6 MB in the end (delta: 5.4 MB). Peak memory consumption was 5.4 MB. Max. memory is 15.3 GB.
[2020-11-25 18:05:35,738 INFO  L168              Benchmark]: RCFGBuilder took 1023.88 ms. Allocated memory was 1.0 GB in the beginning and 1.1 GB in the end (delta: 72.4 MB). Free memory was 897.6 MB in the beginning and 1.0 GB in the end (delta: -120.9 MB). Peak memory consumption was 187.7 MB. Max. memory is 15.3 GB.
[2020-11-25 18:05:35,739 INFO  L168              Benchmark]: UtopiaLTL2Aut took 38.95 ms. Allocated memory is still 1.1 GB. Free memory was 1.0 GB in the beginning and 1.0 GB in the end (delta: 13.8 MB). Peak memory consumption was 13.8 MB. Max. memory is 15.3 GB.
[2020-11-25 18:05:35,739 INFO  L168              Benchmark]: BÃ¼chi Program Product took 1823.90 ms. Allocated memory was 1.1 GB in the beginning and 1.3 GB in the end (delta: 152.0 MB). Free memory was 1.0 GB in the beginning and 935.6 MB in the end (delta: 69.0 MB). Peak memory consumption was 526.1 MB. Max. memory is 15.3 GB.
[2020-11-25 18:05:35,740 INFO  L168              Benchmark]: BlockEncodingV2 took 180.96 ms. Allocated memory is still 1.3 GB. Free memory was 935.6 MB in the beginning and 844.5 MB in the end (delta: 91.2 MB). Peak memory consumption was 91.2 MB. Max. memory is 15.3 GB.
[2020-11-25 18:05:35,740 INFO  L168              Benchmark]: BuchiAutomizer took 28460.56 ms. Allocated memory was 1.3 GB in the beginning and 2.5 GB in the end (delta: 1.2 GB). Free memory was 844.5 MB in the beginning and 846.0 MB in the end (delta: -1.6 MB). Peak memory consumption was 1.2 GB. Max. memory is 15.3 GB.
[2020-11-25 18:05:35,742 INFO  L337   ainManager$Toolchain]: #######################  End [Toolchain 1] #######################
 --- Results ---
 * Results from de.uni_freiburg.informatik.ultimate.plugins.blockencoding:
  - StatisticsResult: Initial Icfg
    8360 locations, 14614 edges
  - StatisticsResult: Encoded RCFG
    8304 locations, 14469 edges
 * Results from de.uni_freiburg.informatik.ultimate.core:
  - StatisticsResult: Toolchain Benchmarks
    Benchmark results are:
 * Boogie PL CUP Parser took 0.17 ms. Allocated memory is still 1.0 GB. Free memory is still 951.3 MB. There was no memory consumed. Max. memory is 15.3 GB.
 * Boogie Preprocessor took 124.78 ms. Allocated memory is still 1.0 GB. Free memory was 929.8 MB in the beginning and 913.7 MB in the end (delta: 16.1 MB). Peak memory consumption was 16.1 MB. Max. memory is 15.3 GB.
 * UtopiaSpecLang took 88.70 ms. Allocated memory is still 1.0 GB. Free memory was 913.7 MB in the beginning and 903.0 MB in the end (delta: 10.7 MB). Peak memory consumption was 10.7 MB. Max. memory is 15.3 GB.
 * Boogie Printer took 21.27 ms. Allocated memory is still 1.0 GB. Free memory was 903.0 MB in the beginning and 897.6 MB in the end (delta: 5.4 MB). Peak memory consumption was 5.4 MB. Max. memory is 15.3 GB.
 * RCFGBuilder took 1023.88 ms. Allocated memory was 1.0 GB in the beginning and 1.1 GB in the end (delta: 72.4 MB). Free memory was 897.6 MB in the beginning and 1.0 GB in the end (delta: -120.9 MB). Peak memory consumption was 187.7 MB. Max. memory is 15.3 GB.
 * UtopiaLTL2Aut took 38.95 ms. Allocated memory is still 1.1 GB. Free memory was 1.0 GB in the beginning and 1.0 GB in the end (delta: 13.8 MB). Peak memory consumption was 13.8 MB. Max. memory is 15.3 GB.
 * BÃ¼chi Program Product took 1823.90 ms. Allocated memory was 1.1 GB in the beginning and 1.3 GB in the end (delta: 152.0 MB). Free memory was 1.0 GB in the beginning and 935.6 MB in the end (delta: 69.0 MB). Peak memory consumption was 526.1 MB. Max. memory is 15.3 GB.
 * BlockEncodingV2 took 180.96 ms. Allocated memory is still 1.3 GB. Free memory was 935.6 MB in the beginning and 844.5 MB in the end (delta: 91.2 MB). Peak memory consumption was 91.2 MB. Max. memory is 15.3 GB.
 * BuchiAutomizer took 28460.56 ms. Allocated memory was 1.3 GB in the beginning and 2.5 GB in the end (delta: 1.2 GB). Free memory was 844.5 MB in the beginning and 846.0 MB in the end (delta: -1.6 MB). Peak memory consumption was 1.2 GB. Max. memory is 15.3 GB.
 * Results from de.uni_freiburg.informatik.ultimate.buchiprogramproduct:
  - StatisticsResult: Initial property automaton
    2 locations, 3 edges
  - StatisticsResult: Initial RCFG
    3567 locations, 4643 edges
  - StatisticsResult: BuchiProgram size
    8360 locations, 14614 edges
 * Results from de.uni_freiburg.informatik.ultimate.plugins.generator.traceabstraction:
  - StatisticsResult: Constructed decomposition of program
    Your program was decomposed into 8 terminating modules (8 trivial, 0 deterministic, 0 nondeterministic). 8 modules have a trivial ranking function, the largest among these consists of 24 locations.
  - StatisticsResult: Timing statistics
    BÃ¼chiAutomizer plugin needed 28.4s and 9 iterations.  TraceHistogramMax:2. Analysis of lassos took 2.6s. Construction of modules took 20.4s. BÃ¼chi inclusion checks took 4.1s. Highest rank in rank-based complementation 0. Minimization of det autom 8. Minimization of nondet autom 0. Automata minimization 0.4s AutomataMinimizationTime, 7 MinimizatonAttempts, 3862 StatesRemovedByMinimization, 6 NontrivialMinimizations. Non-live state removal took 0.3s Buchi closure took 0.0s. Biggest automaton had 7554 states and ocurred in iteration 1.	Nontrivial modules had stage [0, 0, 0, 0, 0].	InterpolantCoveringCapabilityFinite: 0/0	InterpolantCoveringCapabilityBuchi: 0/0	HoareTripleCheckerStatistics: 63542 SDtfs, 62460 SDslu, 130575 SDs, 0 SdLazy, 139319 SolverSat, 10690 SolverUnsat, 0 SolverUnknown, 0 SolverNotchecked, 20.4s Time	LassoAnalysisResults: nont0 unkn0 SFLI0 SFLT0 conc0 concLT0 SILN0 SILU8 SILI0 SILT0 lasso0 LassoPreprocessingBenchmarks: LassoTerminationAnalysisBenchmarks: not availableLassoTerminationAnalysisBenchmarks: LassoNonterminationAnalysisSatFixpoint: 0	LassoNonterminationAnalysisSatUnbounded: 0	LassoNonterminationAnalysisUnsat: 0	LassoNonterminationAnalysisUnknown: 0	LassoNonterminationAnalysisTime: 0.0s	
  - AllSpecificationsHoldResult: All specifications hold
    Buchi Automizer proved that the LTL property ! ( ( []( (call_transfer_TokenERC200) ==> ( <>(success_transfer_TokenERC200) ) ) )) holds
RESULT: Ultimate proved your program to be correct!
Received shutdown request...
