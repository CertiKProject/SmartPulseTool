This is Ultimate 0.1.24-f1553f5-m
[2020-11-25 07:50:15,047 INFO  L170        SettingsManager]: Resetting all preferences to default values...
[2020-11-25 07:50:15,049 INFO  L174        SettingsManager]: Resetting UltimateCore preferences to default values
[2020-11-25 07:50:15,062 INFO  L177        SettingsManager]: Ultimate Commandline Interface provides no preferences, ignoring...
[2020-11-25 07:50:15,062 INFO  L174        SettingsManager]: Resetting Boogie Preprocessor preferences to default values
[2020-11-25 07:50:15,063 INFO  L174        SettingsManager]: Resetting Boogie Procedure Inliner preferences to default values
[2020-11-25 07:50:15,064 INFO  L174        SettingsManager]: Resetting Abstract Interpretation preferences to default values
[2020-11-25 07:50:15,065 INFO  L174        SettingsManager]: Resetting LassoRanker preferences to default values
[2020-11-25 07:50:15,067 INFO  L174        SettingsManager]: Resetting Reaching Definitions preferences to default values
[2020-11-25 07:50:15,067 INFO  L174        SettingsManager]: Resetting SyntaxChecker preferences to default values
[2020-11-25 07:50:15,068 INFO  L177        SettingsManager]: BÃ¼chi Program Product provides no preferences, ignoring...
[2020-11-25 07:50:15,068 INFO  L174        SettingsManager]: Resetting LTL2Aut preferences to default values
[2020-11-25 07:50:15,069 INFO  L174        SettingsManager]: Resetting PEA to Boogie preferences to default values
[2020-11-25 07:50:15,070 INFO  L174        SettingsManager]: Resetting BlockEncodingV2 preferences to default values
[2020-11-25 07:50:15,071 INFO  L174        SettingsManager]: Resetting ChcToBoogie preferences to default values
[2020-11-25 07:50:15,072 INFO  L174        SettingsManager]: Resetting AutomataScriptInterpreter preferences to default values
[2020-11-25 07:50:15,073 INFO  L174        SettingsManager]: Resetting BuchiAutomizer preferences to default values
[2020-11-25 07:50:15,074 INFO  L174        SettingsManager]: Resetting CACSL2BoogieTranslator preferences to default values
[2020-11-25 07:50:15,076 INFO  L174        SettingsManager]: Resetting CodeCheck preferences to default values
[2020-11-25 07:50:15,077 INFO  L174        SettingsManager]: Resetting InvariantSynthesis preferences to default values
[2020-11-25 07:50:15,077 INFO  L174        SettingsManager]: Resetting RCFGBuilder preferences to default values
[2020-11-25 07:50:15,078 INFO  L174        SettingsManager]: Resetting TraceAbstraction preferences to default values
[2020-11-25 07:50:15,080 INFO  L177        SettingsManager]: TraceAbstractionConcurrent provides no preferences, ignoring...
[2020-11-25 07:50:15,080 INFO  L177        SettingsManager]: TraceAbstractionWithAFAs provides no preferences, ignoring...
[2020-11-25 07:50:15,080 INFO  L174        SettingsManager]: Resetting TreeAutomizer preferences to default values
[2020-11-25 07:50:15,081 INFO  L174        SettingsManager]: Resetting IcfgToChc preferences to default values
[2020-11-25 07:50:15,081 INFO  L174        SettingsManager]: Resetting IcfgTransformer preferences to default values
[2020-11-25 07:50:15,082 INFO  L177        SettingsManager]: ReqToTest provides no preferences, ignoring...
[2020-11-25 07:50:15,082 INFO  L174        SettingsManager]: Resetting UtopiaLTL2Aut preferences to default values
[2020-11-25 07:50:15,082 INFO  L174        SettingsManager]: Resetting UtopiaSpecLang preferences to default values
[2020-11-25 07:50:15,082 INFO  L174        SettingsManager]: Resetting Boogie Printer preferences to default values
[2020-11-25 07:50:15,083 INFO  L174        SettingsManager]: Resetting ChcSmtPrinter preferences to default values
[2020-11-25 07:50:15,083 INFO  L174        SettingsManager]: Resetting ReqPrinter preferences to default values
[2020-11-25 07:50:15,084 INFO  L174        SettingsManager]: Resetting Witness Printer preferences to default values
[2020-11-25 07:50:15,085 INFO  L177        SettingsManager]: Boogie PL CUP Parser provides no preferences, ignoring...
[2020-11-25 07:50:15,085 INFO  L174        SettingsManager]: Resetting CDTParser preferences to default values
[2020-11-25 07:50:15,085 INFO  L177        SettingsManager]: AutomataScriptParser provides no preferences, ignoring...
[2020-11-25 07:50:15,085 INFO  L177        SettingsManager]: ReqParser provides no preferences, ignoring...
[2020-11-25 07:50:15,086 INFO  L174        SettingsManager]: Resetting SmtParser preferences to default values
[2020-11-25 07:50:15,086 INFO  L174        SettingsManager]: Resetting Witness Parser preferences to default values
[2020-11-25 07:50:15,087 INFO  L181        SettingsManager]: Finished resetting all preferences to default values...
[2020-11-25 07:50:15,087 INFO  L98         SettingsManager]: Beginning loading settings from /mnt/data0/jon/SmartPulseTool/SmartPulse/settings.epf
[2020-11-25 07:50:15,095 INFO  L110        SettingsManager]: Loading preferences was successful
[2020-11-25 07:50:15,095 INFO  L112        SettingsManager]: Preferences different from defaults after loading the file:
[2020-11-25 07:50:15,096 INFO  L131        SettingsManager]: Preferences of LTL2Aut differ from their defaults:
[2020-11-25 07:50:15,097 INFO  L133        SettingsManager]:  * Read property from file=true
[2020-11-25 07:50:15,097 INFO  L133        SettingsManager]:  * Path to LTL*BA executable (LTL2BA, LTL3BA)=/mnt/data0/jon/SmartPulseTool/ltl2ba
[2020-11-25 07:50:15,097 INFO  L131        SettingsManager]: Preferences of BlockEncodingV2 differ from their defaults:
[2020-11-25 07:50:15,097 INFO  L133        SettingsManager]:  * Maximize final states=false
[2020-11-25 07:50:15,097 INFO  L133        SettingsManager]:  * Minimize states even if more edges are added than removed.=true
[2020-11-25 07:50:15,097 INFO  L133        SettingsManager]:  * Minimize states using LBE with the strategy=NONE
[2020-11-25 07:50:15,097 INFO  L131        SettingsManager]: Preferences of BuchiAutomizer differ from their defaults:
[2020-11-25 07:50:15,097 INFO  L133        SettingsManager]:  * Compute Interpolants along a Counterexample=Craig_TreeInterpolation
[2020-11-25 07:50:15,097 INFO  L133        SettingsManager]:  * Use old map elimination=false
[2020-11-25 07:50:15,098 INFO  L133        SettingsManager]:  * Try twofold refinement=false
[2020-11-25 07:50:15,098 INFO  L131        SettingsManager]: Preferences of CACSL2BoogieTranslator differ from their defaults:
[2020-11-25 07:50:15,098 INFO  L133        SettingsManager]:  * Check unreachability of error function in SV-COMP mode=false
[2020-11-25 07:50:15,098 INFO  L133        SettingsManager]:  * Overapproximate operations on floating types=true
[2020-11-25 07:50:15,098 INFO  L133        SettingsManager]:  * Check division by zero=IGNORE
[2020-11-25 07:50:15,098 INFO  L133        SettingsManager]:  * Pointer to allocated memory at dereference=ASSUME
[2020-11-25 07:50:15,098 INFO  L133        SettingsManager]:  * If two pointers are subtracted or compared they have the same base address=ASSUME
[2020-11-25 07:50:15,098 INFO  L133        SettingsManager]:  * Check array bounds for arrays that are off heap=ASSUME
[2020-11-25 07:50:15,098 INFO  L133        SettingsManager]:  * Check if freed pointer was valid=false
[2020-11-25 07:50:15,099 INFO  L133        SettingsManager]:  * Use constant arrays=true
[2020-11-25 07:50:15,099 INFO  L133        SettingsManager]:  * Pointer base address is valid at dereference=ASSUME
[2020-11-25 07:50:15,099 INFO  L131        SettingsManager]: Preferences of RCFGBuilder differ from their defaults:
[2020-11-25 07:50:15,099 INFO  L133        SettingsManager]:  * Size of a code block=SingleStatement
[2020-11-25 07:50:15,099 INFO  L133        SettingsManager]:  * SMT solver=Internal_SMTInterpol
[2020-11-25 07:50:15,122 INFO  L81    nceAwareModelManager]: Repository-Root is: /tmp
[2020-11-25 07:50:15,134 INFO  L259   ainManager$Toolchain]: [Toolchain 1]: Applicable parser(s) successfully (re)initialized
[2020-11-25 07:50:15,137 INFO  L215   ainManager$Toolchain]: [Toolchain 1]: Toolchain selected.
[2020-11-25 07:50:15,138 INFO  L271        PluginConnector]: Initializing Boogie PL CUP Parser...
[2020-11-25 07:50:15,139 INFO  L276        PluginConnector]: Boogie PL CUP Parser initialized
[2020-11-25 07:50:15,139 INFO  L430   ainManager$Toolchain]: [Toolchain 1]: Parsing single file: /mnt/data0/jon/SmartPulseTool/UPCToken_0x91c4b0cfc5eac8b8c5fd953ae9fbc707b520a7d6_transfer-self.bpl
[2020-11-25 07:50:15,139 INFO  L111           BoogieParser]: Parsing: '/mnt/data0/jon/SmartPulseTool/UPCToken_0x91c4b0cfc5eac8b8c5fd953ae9fbc707b520a7d6_transfer-self.bpl'
[2020-11-25 07:50:15,235 INFO  L297   ainManager$Toolchain]: ####################### [Toolchain 1] #######################
[2020-11-25 07:50:15,236 INFO  L131        ToolchainWalker]: Walking toolchain with 8 elements.
[2020-11-25 07:50:15,237 INFO  L113        PluginConnector]: ------------------------Boogie Preprocessor----------------------------
[2020-11-25 07:50:15,237 INFO  L271        PluginConnector]: Initializing Boogie Preprocessor...
[2020-11-25 07:50:15,237 INFO  L276        PluginConnector]: Boogie Preprocessor initialized
[2020-11-25 07:50:15,254 INFO  L185        PluginConnector]: Executing the observer EnsureBoogieModelObserver from plugin Boogie Preprocessor for "UPCToken_0x91c4b0cfc5eac8b8c5fd953ae9fbc707b520a7d6_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 07:50:15" (1/1) ...
[2020-11-25 07:50:15,256 INFO  L185        PluginConnector]: Executing the observer TypeChecker from plugin Boogie Preprocessor for "UPCToken_0x91c4b0cfc5eac8b8c5fd953ae9fbc707b520a7d6_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 07:50:15" (1/1) ...
[2020-11-25 07:50:15,296 INFO  L185        PluginConnector]: Executing the observer ConstExpander from plugin Boogie Preprocessor for "UPCToken_0x91c4b0cfc5eac8b8c5fd953ae9fbc707b520a7d6_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 07:50:15" (1/1) ...
[2020-11-25 07:50:15,297 INFO  L185        PluginConnector]: Executing the observer StructExpander from plugin Boogie Preprocessor for "UPCToken_0x91c4b0cfc5eac8b8c5fd953ae9fbc707b520a7d6_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 07:50:15" (1/1) ...
[2020-11-25 07:50:15,326 INFO  L185        PluginConnector]: Executing the observer UnstructureCode from plugin Boogie Preprocessor for "UPCToken_0x91c4b0cfc5eac8b8c5fd953ae9fbc707b520a7d6_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 07:50:15" (1/1) ...
[2020-11-25 07:50:15,339 INFO  L185        PluginConnector]: Executing the observer FunctionInliner from plugin Boogie Preprocessor for "UPCToken_0x91c4b0cfc5eac8b8c5fd953ae9fbc707b520a7d6_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 07:50:15" (1/1) ...
[2020-11-25 07:50:15,347 INFO  L185        PluginConnector]: Executing the observer BoogieSymbolTableConstructor from plugin Boogie Preprocessor for "UPCToken_0x91c4b0cfc5eac8b8c5fd953ae9fbc707b520a7d6_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 07:50:15" (1/1) ...
[2020-11-25 07:50:15,359 INFO  L132        PluginConnector]: ------------------------ END Boogie Preprocessor----------------------------
[2020-11-25 07:50:15,359 INFO  L113        PluginConnector]: ------------------------UtopiaSpecLang----------------------------
[2020-11-25 07:50:15,359 INFO  L271        PluginConnector]: Initializing UtopiaSpecLang...
[2020-11-25 07:50:15,362 INFO  L276        PluginConnector]: UtopiaSpecLang initialized
[2020-11-25 07:50:15,366 INFO  L185        PluginConnector]: Executing the observer UtopiaSpecLangObserver from plugin UtopiaSpecLang for "UPCToken_0x91c4b0cfc5eac8b8c5fd953ae9fbc707b520a7d6_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 07:50:15" (1/1) ...
[2020-11-25 07:50:15,383 INFO  L1012  opiaSpecLangObserver]: Parsing LTLPlus Formula to AstNode: [](started(ERC20Pausable.transfer(to, value), msg.sender == to && value <= _balances_ERC20[this][msg.sender] && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][to] >= 0 && _balances_ERC20[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][msg.sender] >= 0 &&  _balances_ERC20[this][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(finished(ERC20Pausable.transfer(to, value), return == true && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this]) && _balances_ERC20[this] == old(_balances_ERC20[this]) && _allowances_ERC20[this] == old(_allowances_ERC20[this]) && _paused_Pausable[this] == old(_paused_Pausable[this]) && owner_Ownable[this] == old(owner_Ownable[this]))))
[2020-11-25 07:50:15,390 INFO  L1016  opiaSpecLangObserver]: Successfully lexed: [](started(ERC20Pausable.transfer(to, value), msg.sender == to && value <= _balances_ERC20[this][msg.sender] && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][to] >= 0 && _balances_ERC20[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][msg.sender] >= 0 &&  _balances_ERC20[this][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(finished(ERC20Pausable.transfer(to, value), return == true && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this]) && _balances_ERC20[this] == old(_balances_ERC20[this]) && _allowances_ERC20[this] == old(_allowances_ERC20[this]) && _paused_Pausable[this] == old(_paused_Pausable[this]) && owner_Ownable[this] == old(owner_Ownable[this]))))
[2020-11-25 07:50:15,397 INFO  L1018  opiaSpecLangObserver]: Successfully parsed: [](started(ERC20Pausable.transfer(to, value), msg.sender == to && value <= _balances_ERC20[this][msg.sender] && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][to] >= 0 && _balances_ERC20[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][msg.sender] >= 0 &&  _balances_ERC20[this][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(finished(ERC20Pausable.transfer(to, value), return == true && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this]) && _balances_ERC20[this] == old(_balances_ERC20[this]) && _allowances_ERC20[this] == old(_allowances_ERC20[this]) && _paused_Pausable[this] == old(_paused_Pausable[this]) && owner_Ownable[this] == old(owner_Ownable[this]))))
[2020-11-25 07:50:15,408 INFO  L636   opiaSpecLangObserver]: Parsed ( ( ( ( ( ( ( msg.sender==to_s648 && value_s648<=_balances_ERC20[this][msg.sender] ) && value_s648>=0 ) && value_s648<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) && _balances_ERC20[this][to_s648]>=0 ) && _balances_ERC20[this][to_s648]<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) && _balances_ERC20[this][msg.sender]>=0 ) && _balances_ERC20[this][msg.sender]<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) to BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[COMPEQ,IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20Pausable>],IdentifierExpression[to_s648,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20Pausable>]],BinaryExpression[COMPLEQ,IdentifierExpression[value_s648,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20Pausable>],ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20Pausable>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20Pausable>]]]]],BinaryExpression[COMPGEQ,IdentifierExpression[value_s648,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20Pausable>],IntegerLiteral[0]]],BinaryExpression[COMPLT,IdentifierExpression[value_s648,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20Pausable>],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]],BinaryExpression[COMPGEQ,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20Pausable>]]],[IdentifierExpression[to_s648,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20Pausable>]]],IntegerLiteral[0]]],BinaryExpression[COMPLT,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20Pausable>]]],[IdentifierExpression[to_s648,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20Pausable>]]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]],BinaryExpression[COMPGEQ,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20Pausable>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20Pausable>]]],IntegerLiteral[0]]],BinaryExpression[COMPLT,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20Pausable>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20Pausable>]]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]]
[2020-11-25 07:50:15,410 INFO  L636   opiaSpecLangObserver]: Parsed ( ( ( ( ( __ret_0_==true && _totalSupply_ERC20[this]==( old(_totalSupply_ERC20[this]) ) ) && _balances_ERC20[this]==( old(_balances_ERC20[this]) ) ) && _allowances_ERC20[this]==( old(_allowances_ERC20[this]) ) ) && _paused_Pausable[this]==( old(_paused_Pausable[this]) ) ) && owner_Ownable[this]==( old(owner_Ownable[this]) ) ) to BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[COMPEQ,IdentifierExpression[__ret_0_,<IMPLEMENTATION_OUTPARAM,transfer~address~uint256_ERC20Pausable>],BooleanLiteral[true]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[_totalSupply_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20Pausable>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[_totalSupply_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20Pausable>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[_balances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20Pausable>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[_balances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20Pausable>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[_allowances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20Pausable>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[_allowances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20Pausable>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[_paused_Pausable,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20Pausable>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[_paused_Pausable,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20Pausable>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[owner_Ownable,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20Pausable>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[owner_Ownable,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20Pausable>]]]]]]
[2020-11-25 07:50:15,416 INFO  L1005  opiaSpecLangObserver]: Compiling: [](started(ERC20Pausable.transfer(to, value), msg.sender == to && value <= _balances_ERC20[this][msg.sender] && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][to] >= 0 && _balances_ERC20[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][msg.sender] >= 0 &&  _balances_ERC20[this][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(finished(ERC20Pausable.transfer(to, value), return == true && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this]) && _balances_ERC20[this] == old(_balances_ERC20[this]) && _allowances_ERC20[this] == old(_allowances_ERC20[this]) && _paused_Pausable[this] == old(_paused_Pausable[this]) && owner_Ownable[this] == old(owner_Ownable[this]))))
[2020-11-25 07:50:15,416 INFO  L1007  opiaSpecLangObserver]: Compiled to ( []( AP(call_transfer_ERC20Pausable0) ==> ( <>AP(success_transfer_ERC20Pausable0) ) ) )
Executed UtopiaSpecLang
[2020-11-25 07:50:15,430 INFO  L202        PluginConnector]: Adding new model Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 07:50:15 PropertyContainer
[2020-11-25 07:50:15,430 INFO  L132        PluginConnector]: ------------------------ END UtopiaSpecLang----------------------------
[2020-11-25 07:50:15,430 INFO  L113        PluginConnector]: ------------------------Boogie Printer----------------------------
[2020-11-25 07:50:15,430 INFO  L271        PluginConnector]: Initializing Boogie Printer...
[2020-11-25 07:50:15,431 INFO  L276        PluginConnector]: Boogie Printer initialized
[2020-11-25 07:50:15,432 INFO  L185        PluginConnector]: Executing the observer BoogiePrinterObserver from plugin Boogie Printer for "UPCToken_0x91c4b0cfc5eac8b8c5fd953ae9fbc707b520a7d6_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 07:50:15" (1/2) ...
[2020-11-25 07:50:15,432 INFO  L116   oogiePrinterObserver]: File already exists and will be overwritten: /tmp/boogiePrinter.bpl
[2020-11-25 07:50:15,432 INFO  L120   oogiePrinterObserver]: Writing to file /tmp/boogiePrinter.bpl
[2020-11-25 07:50:15,449 INFO  L185        PluginConnector]: Executing the observer BoogiePrinterObserver from plugin Boogie Printer for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 07:50:15" (2/2) ...
[2020-11-25 07:50:15,449 INFO  L132        PluginConnector]: ------------------------ END Boogie Printer----------------------------
[2020-11-25 07:50:15,450 INFO  L113        PluginConnector]: ------------------------RCFGBuilder----------------------------
[2020-11-25 07:50:15,450 INFO  L271        PluginConnector]: Initializing RCFGBuilder...
[2020-11-25 07:50:15,450 INFO  L276        PluginConnector]: RCFGBuilder initialized
[2020-11-25 07:50:15,451 INFO  L185        PluginConnector]: Executing the observer RCFGBuilderObserver from plugin RCFGBuilder for "UPCToken_0x91c4b0cfc5eac8b8c5fd953ae9fbc707b520a7d6_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 07:50:15" (1/2) ...
[2020-11-25 07:50:15,505 INFO  L130     BoogieDeclarations]: Found specification of procedure FreshRefGenerator__success
[2020-11-25 07:50:15,505 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath_NoBaseCtor__success
[2020-11-25 07:50:15,505 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath
[2020-11-25 07:50:15,505 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath
[2020-11-25 07:50:15,506 INFO  L130     BoogieDeclarations]: Found specification of procedure add~uint256~uint256_SafeMath__success
[2020-11-25 07:50:15,506 INFO  L130     BoogieDeclarations]: Found specification of procedure sub~uint256~uint256~string_SafeMath__success
[2020-11-25 07:50:15,506 INFO  L130     BoogieDeclarations]: Found specification of procedure mul~uint256~uint256_SafeMath__success
[2020-11-25 07:50:15,506 INFO  L130     BoogieDeclarations]: Found specification of procedure div~uint256~uint256~string_SafeMath__success
[2020-11-25 07:50:15,506 INFO  L130     BoogieDeclarations]: Found specification of procedure mod~uint256~uint256~string_SafeMath__success
[2020-11-25 07:50:15,506 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20_NoBaseCtor__success
[2020-11-25 07:50:15,506 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20
[2020-11-25 07:50:15,506 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20
[2020-11-25 07:50:15,506 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_IERC20
[2020-11-25 07:50:15,507 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_IERC20
[2020-11-25 07:50:15,507 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_IERC20
[2020-11-25 07:50:15,507 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_IERC20
[2020-11-25 07:50:15,508 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_IERC20
[2020-11-25 07:50:15,508 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_IERC20
[2020-11-25 07:50:15,508 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20_NoBaseCtor__success
[2020-11-25 07:50:15,508 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20
[2020-11-25 07:50:15,508 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20
[2020-11-25 07:50:15,508 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_ERC20
[2020-11-25 07:50:15,508 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_ERC20
[2020-11-25 07:50:15,508 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_ERC20
[2020-11-25 07:50:15,508 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_ERC20
[2020-11-25 07:50:15,508 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_ERC20
[2020-11-25 07:50:15,509 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_ERC20
[2020-11-25 07:50:15,509 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_ERC20
[2020-11-25 07:50:15,509 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_ERC20
[2020-11-25 07:50:15,509 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_ERC20
[2020-11-25 07:50:15,509 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_ERC20
[2020-11-25 07:50:15,509 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_ERC20
[2020-11-25 07:50:15,509 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_ERC20
[2020-11-25 07:50:15,509 INFO  L130     BoogieDeclarations]: Found specification of procedure increaseAllowance~address~uint256_ERC20
[2020-11-25 07:50:15,509 INFO  L138     BoogieDeclarations]: Found implementation of procedure increaseAllowance~address~uint256_ERC20
[2020-11-25 07:50:15,509 INFO  L130     BoogieDeclarations]: Found specification of procedure decreaseAllowance~address~uint256_ERC20
[2020-11-25 07:50:15,510 INFO  L138     BoogieDeclarations]: Found implementation of procedure decreaseAllowance~address~uint256_ERC20
[2020-11-25 07:50:15,510 INFO  L130     BoogieDeclarations]: Found specification of procedure _transfer~address~address~uint256_ERC20__success
[2020-11-25 07:50:15,510 INFO  L130     BoogieDeclarations]: Found specification of procedure _approve~address~address~uint256_ERC20__success
[2020-11-25 07:50:15,510 INFO  L130     BoogieDeclarations]: Found specification of procedure Ownable_Ownable_NoBaseCtor__success
[2020-11-25 07:50:15,510 INFO  L130     BoogieDeclarations]: Found specification of procedure Ownable_Ownable
[2020-11-25 07:50:15,510 INFO  L138     BoogieDeclarations]: Found implementation of procedure Ownable_Ownable
[2020-11-25 07:50:15,510 INFO  L130     BoogieDeclarations]: Found specification of procedure transferOwnership~address_Ownable
[2020-11-25 07:50:15,510 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferOwnership~address_Ownable
[2020-11-25 07:50:15,510 INFO  L130     BoogieDeclarations]: Found specification of procedure _transferOwnership~address_Ownable__success
[2020-11-25 07:50:15,510 INFO  L130     BoogieDeclarations]: Found specification of procedure owner_Ownable
[2020-11-25 07:50:15,510 INFO  L138     BoogieDeclarations]: Found implementation of procedure owner_Ownable
[2020-11-25 07:50:15,511 INFO  L130     BoogieDeclarations]: Found specification of procedure Pausable_Pausable_NoBaseCtor__success
[2020-11-25 07:50:15,511 INFO  L130     BoogieDeclarations]: Found specification of procedure Pausable_Pausable
[2020-11-25 07:50:15,511 INFO  L138     BoogieDeclarations]: Found implementation of procedure Pausable_Pausable
[2020-11-25 07:50:15,511 INFO  L130     BoogieDeclarations]: Found specification of procedure paused_Pausable
[2020-11-25 07:50:15,511 INFO  L138     BoogieDeclarations]: Found implementation of procedure paused_Pausable
[2020-11-25 07:50:15,511 INFO  L130     BoogieDeclarations]: Found specification of procedure pause_Pausable
[2020-11-25 07:50:15,511 INFO  L138     BoogieDeclarations]: Found implementation of procedure pause_Pausable
[2020-11-25 07:50:15,511 INFO  L130     BoogieDeclarations]: Found specification of procedure unpause_Pausable
[2020-11-25 07:50:15,511 INFO  L138     BoogieDeclarations]: Found implementation of procedure unpause_Pausable
[2020-11-25 07:50:15,512 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Pausable_ERC20Pausable_NoBaseCtor__success
[2020-11-25 07:50:15,512 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Pausable_ERC20Pausable
[2020-11-25 07:50:15,512 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Pausable_ERC20Pausable
[2020-11-25 07:50:15,512 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_ERC20Pausable
[2020-11-25 07:50:15,512 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_ERC20Pausable
[2020-11-25 07:50:15,512 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_ERC20Pausable
[2020-11-25 07:50:15,512 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_ERC20Pausable
[2020-11-25 07:50:15,512 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_ERC20Pausable
[2020-11-25 07:50:15,512 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_ERC20Pausable
[2020-11-25 07:50:15,512 INFO  L130     BoogieDeclarations]: Found specification of procedure increaseAllowance~address~uint256_ERC20Pausable
[2020-11-25 07:50:15,513 INFO  L138     BoogieDeclarations]: Found implementation of procedure increaseAllowance~address~uint256_ERC20Pausable
[2020-11-25 07:50:15,513 INFO  L130     BoogieDeclarations]: Found specification of procedure decreaseAllowance~address~uint256_ERC20Pausable
[2020-11-25 07:50:15,513 INFO  L138     BoogieDeclarations]: Found implementation of procedure decreaseAllowance~address~uint256_ERC20Pausable
[2020-11-25 07:50:15,513 INFO  L130     BoogieDeclarations]: Found specification of procedure UPCToken_UPCToken_NoBaseCtor__success
[2020-11-25 07:50:15,513 INFO  L130     BoogieDeclarations]: Found specification of procedure UPCToken_UPCToken
[2020-11-25 07:50:15,513 INFO  L138     BoogieDeclarations]: Found implementation of procedure UPCToken_UPCToken
[2020-11-25 07:50:15,513 INFO  L130     BoogieDeclarations]: Found specification of procedure name_UPCToken
[2020-11-25 07:50:15,513 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_UPCToken
[2020-11-25 07:50:15,513 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_UPCToken
[2020-11-25 07:50:15,514 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_UPCToken
[2020-11-25 07:50:15,514 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_UPCToken
[2020-11-25 07:50:15,514 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_UPCToken
[2020-11-25 07:50:15,514 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackDispatch__success
[2020-11-25 07:50:15,514 INFO  L130     BoogieDeclarations]: Found specification of procedure Fallback_UnknownType__success
[2020-11-25 07:50:15,514 INFO  L130     BoogieDeclarations]: Found specification of procedure send__success
[2020-11-25 07:50:15,514 INFO  L130     BoogieDeclarations]: Found specification of procedure onlyOwner_pre__success
[2020-11-25 07:50:15,514 INFO  L130     BoogieDeclarations]: Found specification of procedure whenNotPaused_pre__success
[2020-11-25 07:50:15,514 INFO  L130     BoogieDeclarations]: Found specification of procedure whenPaused_pre__success
[2020-11-25 07:50:15,514 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_SafeMath
[2020-11-25 07:50:15,515 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_SafeMath
[2020-11-25 07:50:15,515 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_IERC20
[2020-11-25 07:50:15,515 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_IERC20
[2020-11-25 07:50:15,515 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_ERC20
[2020-11-25 07:50:15,515 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_ERC20
[2020-11-25 07:50:15,515 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_Ownable
[2020-11-25 07:50:15,515 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_Ownable
[2020-11-25 07:50:15,515 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_Pausable
[2020-11-25 07:50:15,515 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_Pausable
[2020-11-25 07:50:15,515 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_ERC20Pausable
[2020-11-25 07:50:15,516 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_ERC20Pausable
[2020-11-25 07:50:15,516 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_UPCToken
[2020-11-25 07:50:15,516 INFO  L130     BoogieDeclarations]: Found specification of procedure main
[2020-11-25 07:50:15,516 INFO  L130     BoogieDeclarations]: Found specification of procedure FreshRefGenerator__fail
[2020-11-25 07:50:15,516 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath_NoBaseCtor__fail
[2020-11-25 07:50:15,516 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath__success
[2020-11-25 07:50:15,516 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath__fail
[2020-11-25 07:50:15,516 INFO  L130     BoogieDeclarations]: Found specification of procedure add~uint256~uint256_SafeMath__fail
[2020-11-25 07:50:15,516 INFO  L130     BoogieDeclarations]: Found specification of procedure sub~uint256~uint256~string_SafeMath__fail
[2020-11-25 07:50:15,516 INFO  L130     BoogieDeclarations]: Found specification of procedure mul~uint256~uint256_SafeMath__fail
[2020-11-25 07:50:15,517 INFO  L130     BoogieDeclarations]: Found specification of procedure div~uint256~uint256~string_SafeMath__fail
[2020-11-25 07:50:15,517 INFO  L130     BoogieDeclarations]: Found specification of procedure mod~uint256~uint256~string_SafeMath__fail
[2020-11-25 07:50:15,517 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20_NoBaseCtor__fail
[2020-11-25 07:50:15,517 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20__success
[2020-11-25 07:50:15,517 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20__fail
[2020-11-25 07:50:15,517 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20_NoBaseCtor__fail
[2020-11-25 07:50:15,517 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20__success
[2020-11-25 07:50:15,517 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20__fail
[2020-11-25 07:50:15,517 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_ERC20__success
[2020-11-25 07:50:15,517 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_ERC20__fail
[2020-11-25 07:50:15,518 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_ERC20__success
[2020-11-25 07:50:15,518 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_ERC20__fail
[2020-11-25 07:50:15,518 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_ERC20__success
[2020-11-25 07:50:15,519 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_ERC20__fail
[2020-11-25 07:50:15,519 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_ERC20__success
[2020-11-25 07:50:15,519 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_ERC20__fail
[2020-11-25 07:50:15,519 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_ERC20__success
[2020-11-25 07:50:15,520 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_ERC20__fail
[2020-11-25 07:50:15,520 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_ERC20__success
[2020-11-25 07:50:15,520 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_ERC20__fail
[2020-11-25 07:50:15,520 INFO  L130     BoogieDeclarations]: Found specification of procedure increaseAllowance~address~uint256_ERC20__success
[2020-11-25 07:50:15,520 INFO  L130     BoogieDeclarations]: Found specification of procedure increaseAllowance~address~uint256_ERC20__fail
[2020-11-25 07:50:15,521 INFO  L130     BoogieDeclarations]: Found specification of procedure decreaseAllowance~address~uint256_ERC20__success
[2020-11-25 07:50:15,521 INFO  L130     BoogieDeclarations]: Found specification of procedure decreaseAllowance~address~uint256_ERC20__fail
[2020-11-25 07:50:15,521 INFO  L130     BoogieDeclarations]: Found specification of procedure _transfer~address~address~uint256_ERC20__fail
[2020-11-25 07:50:15,521 INFO  L130     BoogieDeclarations]: Found specification of procedure _approve~address~address~uint256_ERC20__fail
[2020-11-25 07:50:15,521 INFO  L130     BoogieDeclarations]: Found specification of procedure Ownable_Ownable_NoBaseCtor__fail
[2020-11-25 07:50:15,522 INFO  L130     BoogieDeclarations]: Found specification of procedure Ownable_Ownable__success
[2020-11-25 07:50:15,522 INFO  L130     BoogieDeclarations]: Found specification of procedure Ownable_Ownable__fail
[2020-11-25 07:50:15,522 INFO  L130     BoogieDeclarations]: Found specification of procedure transferOwnership~address_Ownable__success
[2020-11-25 07:50:15,522 INFO  L130     BoogieDeclarations]: Found specification of procedure transferOwnership~address_Ownable__fail
[2020-11-25 07:50:15,522 INFO  L130     BoogieDeclarations]: Found specification of procedure _transferOwnership~address_Ownable__fail
[2020-11-25 07:50:15,523 INFO  L130     BoogieDeclarations]: Found specification of procedure owner_Ownable__success
[2020-11-25 07:50:15,523 INFO  L130     BoogieDeclarations]: Found specification of procedure owner_Ownable__fail
[2020-11-25 07:50:15,523 INFO  L130     BoogieDeclarations]: Found specification of procedure Pausable_Pausable_NoBaseCtor__fail
[2020-11-25 07:50:15,523 INFO  L130     BoogieDeclarations]: Found specification of procedure Pausable_Pausable__success
[2020-11-25 07:50:15,523 INFO  L130     BoogieDeclarations]: Found specification of procedure Pausable_Pausable__fail
[2020-11-25 07:50:15,524 INFO  L130     BoogieDeclarations]: Found specification of procedure paused_Pausable__success
[2020-11-25 07:50:15,524 INFO  L130     BoogieDeclarations]: Found specification of procedure paused_Pausable__fail
[2020-11-25 07:50:15,524 INFO  L130     BoogieDeclarations]: Found specification of procedure pause_Pausable__success
[2020-11-25 07:50:15,524 INFO  L130     BoogieDeclarations]: Found specification of procedure pause_Pausable__fail
[2020-11-25 07:50:15,525 INFO  L130     BoogieDeclarations]: Found specification of procedure unpause_Pausable__success
[2020-11-25 07:50:15,525 INFO  L130     BoogieDeclarations]: Found specification of procedure unpause_Pausable__fail
[2020-11-25 07:50:15,525 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Pausable_ERC20Pausable_NoBaseCtor__fail
[2020-11-25 07:50:15,525 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Pausable_ERC20Pausable__success
[2020-11-25 07:50:15,525 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Pausable_ERC20Pausable__fail
[2020-11-25 07:50:15,525 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_ERC20Pausable__success
[2020-11-25 07:50:15,526 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_ERC20Pausable__fail
[2020-11-25 07:50:15,526 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_ERC20Pausable__success
[2020-11-25 07:50:15,526 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_ERC20Pausable__fail
[2020-11-25 07:50:15,526 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_ERC20Pausable__success
[2020-11-25 07:50:15,526 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_ERC20Pausable__fail
[2020-11-25 07:50:15,527 INFO  L130     BoogieDeclarations]: Found specification of procedure increaseAllowance~address~uint256_ERC20Pausable__success
[2020-11-25 07:50:15,527 INFO  L130     BoogieDeclarations]: Found specification of procedure increaseAllowance~address~uint256_ERC20Pausable__fail
[2020-11-25 07:50:15,527 INFO  L130     BoogieDeclarations]: Found specification of procedure decreaseAllowance~address~uint256_ERC20Pausable__success
[2020-11-25 07:50:15,527 INFO  L130     BoogieDeclarations]: Found specification of procedure decreaseAllowance~address~uint256_ERC20Pausable__fail
[2020-11-25 07:50:15,527 INFO  L130     BoogieDeclarations]: Found specification of procedure UPCToken_UPCToken_NoBaseCtor__fail
[2020-11-25 07:50:15,527 INFO  L130     BoogieDeclarations]: Found specification of procedure UPCToken_UPCToken__success
[2020-11-25 07:50:15,528 INFO  L130     BoogieDeclarations]: Found specification of procedure UPCToken_UPCToken__fail
[2020-11-25 07:50:15,528 INFO  L130     BoogieDeclarations]: Found specification of procedure name_UPCToken__success
[2020-11-25 07:50:15,528 INFO  L130     BoogieDeclarations]: Found specification of procedure name_UPCToken__fail
[2020-11-25 07:50:15,528 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_UPCToken__success
[2020-11-25 07:50:15,528 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_UPCToken__fail
[2020-11-25 07:50:15,528 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_UPCToken__success
[2020-11-25 07:50:15,528 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_UPCToken__fail
[2020-11-25 07:50:15,528 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackDispatch__fail
[2020-11-25 07:50:15,528 INFO  L130     BoogieDeclarations]: Found specification of procedure Fallback_UnknownType__fail
[2020-11-25 07:50:15,528 INFO  L130     BoogieDeclarations]: Found specification of procedure send__fail
[2020-11-25 07:50:15,528 INFO  L130     BoogieDeclarations]: Found specification of procedure onlyOwner_pre__fail
[2020-11-25 07:50:15,528 INFO  L130     BoogieDeclarations]: Found specification of procedure whenNotPaused_pre__fail
[2020-11-25 07:50:15,528 INFO  L130     BoogieDeclarations]: Found specification of procedure whenPaused_pre__fail
[2020-11-25 07:50:15,528 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreshRefGenerator__fail
[2020-11-25 07:50:15,529 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreshRefGenerator__success
[2020-11-25 07:50:15,529 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath_NoBaseCtor__fail
[2020-11-25 07:50:15,529 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath_NoBaseCtor__success
[2020-11-25 07:50:15,529 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath__fail
[2020-11-25 07:50:15,529 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath__success
[2020-11-25 07:50:15,529 INFO  L138     BoogieDeclarations]: Found implementation of procedure add~uint256~uint256_SafeMath__fail
[2020-11-25 07:50:15,529 INFO  L138     BoogieDeclarations]: Found implementation of procedure add~uint256~uint256_SafeMath__success
[2020-11-25 07:50:15,529 INFO  L138     BoogieDeclarations]: Found implementation of procedure sub~uint256~uint256~string_SafeMath__fail
[2020-11-25 07:50:15,529 INFO  L138     BoogieDeclarations]: Found implementation of procedure sub~uint256~uint256~string_SafeMath__success
[2020-11-25 07:50:15,529 INFO  L138     BoogieDeclarations]: Found implementation of procedure mul~uint256~uint256_SafeMath__fail
[2020-11-25 07:50:15,529 INFO  L138     BoogieDeclarations]: Found implementation of procedure mul~uint256~uint256_SafeMath__success
[2020-11-25 07:50:15,529 INFO  L138     BoogieDeclarations]: Found implementation of procedure div~uint256~uint256~string_SafeMath__fail
[2020-11-25 07:50:15,530 INFO  L138     BoogieDeclarations]: Found implementation of procedure div~uint256~uint256~string_SafeMath__success
[2020-11-25 07:50:15,530 INFO  L138     BoogieDeclarations]: Found implementation of procedure mod~uint256~uint256~string_SafeMath__fail
[2020-11-25 07:50:15,530 INFO  L138     BoogieDeclarations]: Found implementation of procedure mod~uint256~uint256~string_SafeMath__success
[2020-11-25 07:50:15,530 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20_NoBaseCtor__fail
[2020-11-25 07:50:15,530 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20_NoBaseCtor__success
[2020-11-25 07:50:15,530 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20__fail
[2020-11-25 07:50:15,530 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20__success
[2020-11-25 07:50:15,530 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20_NoBaseCtor__fail
[2020-11-25 07:50:15,530 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20_NoBaseCtor__success
[2020-11-25 07:50:15,530 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20__fail
[2020-11-25 07:50:15,530 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20__success
[2020-11-25 07:50:15,530 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_ERC20__fail
[2020-11-25 07:50:15,531 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_ERC20__success
[2020-11-25 07:50:15,531 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_ERC20__fail
[2020-11-25 07:50:15,531 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_ERC20__success
[2020-11-25 07:50:15,531 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_ERC20__fail
[2020-11-25 07:50:15,531 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_ERC20__success
[2020-11-25 07:50:15,531 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_ERC20__fail
[2020-11-25 07:50:15,531 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_ERC20__success
[2020-11-25 07:50:15,531 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_ERC20__fail
[2020-11-25 07:50:15,531 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_ERC20__success
[2020-11-25 07:50:15,531 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_ERC20__fail
[2020-11-25 07:50:15,531 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_ERC20__success
[2020-11-25 07:50:15,532 INFO  L138     BoogieDeclarations]: Found implementation of procedure increaseAllowance~address~uint256_ERC20__fail
[2020-11-25 07:50:15,532 INFO  L138     BoogieDeclarations]: Found implementation of procedure increaseAllowance~address~uint256_ERC20__success
[2020-11-25 07:50:15,532 INFO  L138     BoogieDeclarations]: Found implementation of procedure decreaseAllowance~address~uint256_ERC20__fail
[2020-11-25 07:50:15,532 INFO  L138     BoogieDeclarations]: Found implementation of procedure decreaseAllowance~address~uint256_ERC20__success
[2020-11-25 07:50:15,532 INFO  L138     BoogieDeclarations]: Found implementation of procedure _transfer~address~address~uint256_ERC20__fail
[2020-11-25 07:50:15,532 INFO  L138     BoogieDeclarations]: Found implementation of procedure _transfer~address~address~uint256_ERC20__success
[2020-11-25 07:50:15,532 INFO  L138     BoogieDeclarations]: Found implementation of procedure _approve~address~address~uint256_ERC20__fail
[2020-11-25 07:50:15,532 INFO  L138     BoogieDeclarations]: Found implementation of procedure _approve~address~address~uint256_ERC20__success
[2020-11-25 07:50:15,532 INFO  L138     BoogieDeclarations]: Found implementation of procedure Ownable_Ownable_NoBaseCtor__fail
[2020-11-25 07:50:15,532 INFO  L138     BoogieDeclarations]: Found implementation of procedure Ownable_Ownable_NoBaseCtor__success
[2020-11-25 07:50:15,532 INFO  L138     BoogieDeclarations]: Found implementation of procedure Ownable_Ownable__fail
[2020-11-25 07:50:15,532 INFO  L138     BoogieDeclarations]: Found implementation of procedure Ownable_Ownable__success
[2020-11-25 07:50:15,533 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferOwnership~address_Ownable__fail
[2020-11-25 07:50:15,533 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferOwnership~address_Ownable__success
[2020-11-25 07:50:15,533 INFO  L138     BoogieDeclarations]: Found implementation of procedure _transferOwnership~address_Ownable__fail
[2020-11-25 07:50:15,533 INFO  L138     BoogieDeclarations]: Found implementation of procedure _transferOwnership~address_Ownable__success
[2020-11-25 07:50:15,533 INFO  L138     BoogieDeclarations]: Found implementation of procedure owner_Ownable__fail
[2020-11-25 07:50:15,533 INFO  L138     BoogieDeclarations]: Found implementation of procedure owner_Ownable__success
[2020-11-25 07:50:15,533 INFO  L138     BoogieDeclarations]: Found implementation of procedure Pausable_Pausable_NoBaseCtor__fail
[2020-11-25 07:50:15,533 INFO  L138     BoogieDeclarations]: Found implementation of procedure Pausable_Pausable_NoBaseCtor__success
[2020-11-25 07:50:15,533 INFO  L138     BoogieDeclarations]: Found implementation of procedure Pausable_Pausable__fail
[2020-11-25 07:50:15,533 INFO  L138     BoogieDeclarations]: Found implementation of procedure Pausable_Pausable__success
[2020-11-25 07:50:15,533 INFO  L138     BoogieDeclarations]: Found implementation of procedure paused_Pausable__fail
[2020-11-25 07:50:15,533 INFO  L138     BoogieDeclarations]: Found implementation of procedure paused_Pausable__success
[2020-11-25 07:50:15,533 INFO  L138     BoogieDeclarations]: Found implementation of procedure pause_Pausable__fail
[2020-11-25 07:50:15,534 INFO  L138     BoogieDeclarations]: Found implementation of procedure pause_Pausable__success
[2020-11-25 07:50:15,534 INFO  L138     BoogieDeclarations]: Found implementation of procedure unpause_Pausable__fail
[2020-11-25 07:50:15,534 INFO  L138     BoogieDeclarations]: Found implementation of procedure unpause_Pausable__success
[2020-11-25 07:50:15,534 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Pausable_ERC20Pausable_NoBaseCtor__fail
[2020-11-25 07:50:15,534 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Pausable_ERC20Pausable_NoBaseCtor__success
[2020-11-25 07:50:15,534 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Pausable_ERC20Pausable__fail
[2020-11-25 07:50:15,534 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Pausable_ERC20Pausable__success
[2020-11-25 07:50:15,534 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_ERC20Pausable__fail
[2020-11-25 07:50:15,534 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_ERC20Pausable__success
[2020-11-25 07:50:15,534 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_ERC20Pausable__fail
[2020-11-25 07:50:15,534 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_ERC20Pausable__success
[2020-11-25 07:50:15,535 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_ERC20Pausable__fail
[2020-11-25 07:50:15,535 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_ERC20Pausable__success
[2020-11-25 07:50:15,535 INFO  L138     BoogieDeclarations]: Found implementation of procedure increaseAllowance~address~uint256_ERC20Pausable__fail
[2020-11-25 07:50:15,535 INFO  L138     BoogieDeclarations]: Found implementation of procedure increaseAllowance~address~uint256_ERC20Pausable__success
[2020-11-25 07:50:15,535 INFO  L138     BoogieDeclarations]: Found implementation of procedure decreaseAllowance~address~uint256_ERC20Pausable__fail
[2020-11-25 07:50:15,535 INFO  L138     BoogieDeclarations]: Found implementation of procedure decreaseAllowance~address~uint256_ERC20Pausable__success
[2020-11-25 07:50:15,535 INFO  L138     BoogieDeclarations]: Found implementation of procedure UPCToken_UPCToken_NoBaseCtor__fail
[2020-11-25 07:50:15,535 INFO  L138     BoogieDeclarations]: Found implementation of procedure UPCToken_UPCToken_NoBaseCtor__success
[2020-11-25 07:50:15,535 INFO  L138     BoogieDeclarations]: Found implementation of procedure UPCToken_UPCToken__fail
[2020-11-25 07:50:15,535 INFO  L138     BoogieDeclarations]: Found implementation of procedure UPCToken_UPCToken__success
[2020-11-25 07:50:15,535 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_UPCToken__fail
[2020-11-25 07:50:15,535 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_UPCToken__success
[2020-11-25 07:50:15,536 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_UPCToken__fail
[2020-11-25 07:50:15,536 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_UPCToken__success
[2020-11-25 07:50:15,536 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_UPCToken__fail
[2020-11-25 07:50:15,536 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_UPCToken__success
[2020-11-25 07:50:15,536 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackDispatch__fail
[2020-11-25 07:50:15,536 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackDispatch__success
[2020-11-25 07:50:15,536 INFO  L138     BoogieDeclarations]: Found implementation of procedure Fallback_UnknownType__fail
[2020-11-25 07:50:15,536 INFO  L138     BoogieDeclarations]: Found implementation of procedure Fallback_UnknownType__success
[2020-11-25 07:50:15,536 INFO  L138     BoogieDeclarations]: Found implementation of procedure send__fail
[2020-11-25 07:50:15,536 INFO  L138     BoogieDeclarations]: Found implementation of procedure send__success
[2020-11-25 07:50:15,536 INFO  L138     BoogieDeclarations]: Found implementation of procedure onlyOwner_pre__fail
[2020-11-25 07:50:15,536 INFO  L138     BoogieDeclarations]: Found implementation of procedure onlyOwner_pre__success
[2020-11-25 07:50:15,537 INFO  L138     BoogieDeclarations]: Found implementation of procedure whenNotPaused_pre__fail
[2020-11-25 07:50:15,537 INFO  L138     BoogieDeclarations]: Found implementation of procedure whenNotPaused_pre__success
[2020-11-25 07:50:15,537 INFO  L138     BoogieDeclarations]: Found implementation of procedure whenPaused_pre__fail
[2020-11-25 07:50:15,537 INFO  L138     BoogieDeclarations]: Found implementation of procedure whenPaused_pre__success
[2020-11-25 07:50:15,537 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_SafeMath
[2020-11-25 07:50:15,537 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_SafeMath
[2020-11-25 07:50:15,538 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_IERC20
[2020-11-25 07:50:15,538 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_IERC20
[2020-11-25 07:50:15,538 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_ERC20
[2020-11-25 07:50:15,538 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_ERC20
[2020-11-25 07:50:15,538 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_Ownable
[2020-11-25 07:50:15,538 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_Ownable
[2020-11-25 07:50:15,538 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_Pausable
[2020-11-25 07:50:15,538 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_Pausable
[2020-11-25 07:50:15,538 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_ERC20Pausable
[2020-11-25 07:50:15,538 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_ERC20Pausable
[2020-11-25 07:50:15,538 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_UPCToken
[2020-11-25 07:50:15,539 INFO  L138     BoogieDeclarations]: Found implementation of procedure main
[2020-11-25 07:50:15,539 INFO  L130     BoogieDeclarations]: Found specification of procedure ULTIMATE.start
[2020-11-25 07:50:15,539 INFO  L138     BoogieDeclarations]: Found implementation of procedure ULTIMATE.start
[2020-11-25 07:50:16,106 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 07:50:16,106 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 07:50:16,106 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 07:50:16,371 INFO  L281             CfgBuilder]: Using the 1 location(s) as analysis (start of procedure ULTIMATE.start)
[2020-11-25 07:50:16,371 INFO  L286             CfgBuilder]: Removed 7 assue(true) statements.
[2020-11-25 07:50:16,373 INFO  L202        PluginConnector]: Adding new model UPCToken_0x91c4b0cfc5eac8b8c5fd953ae9fbc707b520a7d6_transfer-self.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 07:50:16 BoogieIcfgContainer
[2020-11-25 07:50:16,373 INFO  L185        PluginConnector]: Executing the observer RCFGBuilderObserver from plugin RCFGBuilder for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 07:50:15" (2/2) ...
[2020-11-25 07:50:16,374 INFO  L85     RCFGBuilderObserver]: No WrapperNode. Let Ultimate process with next node
[2020-11-25 07:50:16,374 INFO  L205        PluginConnector]: Invalid model from RCFGBuilder for observer de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder.RCFGBuilderObserver@10069a9b and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 07:50:16, skipping insertion in model container
[2020-11-25 07:50:16,374 INFO  L132        PluginConnector]: ------------------------ END RCFGBuilder----------------------------
[2020-11-25 07:50:16,374 INFO  L113        PluginConnector]: ------------------------UtopiaLTL2Aut----------------------------
[2020-11-25 07:50:16,374 INFO  L271        PluginConnector]: Initializing UtopiaLTL2Aut...
[2020-11-25 07:50:16,376 INFO  L276        PluginConnector]: UtopiaLTL2Aut initialized
[2020-11-25 07:50:16,376 INFO  L185        PluginConnector]: Executing the observer UtopiaLTL2AutObserver from plugin UtopiaLTL2Aut for "UPCToken_0x91c4b0cfc5eac8b8c5fd953ae9fbc707b520a7d6_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 07:50:15" (1/3) ...
[2020-11-25 07:50:16,376 INFO  L205        PluginConnector]: Invalid model from UtopiaLTL2Aut for observer edu.utexas.cs.utopia.ltl2aut.UtopiaLTL2AutObserver@50b62533 and model type Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 07:50:16, skipping insertion in model container
[2020-11-25 07:50:16,377 INFO  L185        PluginConnector]: Executing the observer UtopiaLTL2AutObserver from plugin UtopiaLTL2Aut for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 07:50:15" (2/3) ...
No working directory specified, using /mnt/data0/jon/SmartPulseTool/ltl2ba
Starting monitored process 1 with /mnt/data0/jon/SmartPulseTool/ltl2ba -f ! ( ( [] ( a -> ( <>b ) ) ) )  (exit command is null, workingDir is null)
[2020-11-25 07:50:16,436 INFO  L202        PluginConnector]: Adding new model Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 07:50:16 NWAContainer
[2020-11-25 07:50:16,436 INFO  L132        PluginConnector]: ------------------------ END UtopiaLTL2Aut----------------------------
[2020-11-25 07:50:16,436 INFO  L113        PluginConnector]: ------------------------BÃ¼chi Program Product----------------------------
[2020-11-25 07:50:16,436 INFO  L271        PluginConnector]: Initializing BÃ¼chi Program Product...
[2020-11-25 07:50:16,437 INFO  L276        PluginConnector]: BÃ¼chi Program Product initialized
[2020-11-25 07:50:16,438 INFO  L185        PluginConnector]: Executing the observer BuchiProductObserver from plugin BÃ¼chi Program Product for "UPCToken_0x91c4b0cfc5eac8b8c5fd953ae9fbc707b520a7d6_transfer-self.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 07:50:16" (3/4) ...
[2020-11-25 07:50:16,438 INFO  L205        PluginConnector]: Invalid model from BÃ¼chi Program Product for observer de.uni_freiburg.informatik.ultimate.buchiprogramproduct.BuchiProductObserver@7655f05e and model type LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 07:50:16, skipping insertion in model container
[2020-11-25 07:50:16,439 INFO  L185        PluginConnector]: Executing the observer BuchiProductObserver from plugin BÃ¼chi Program Product for "Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 07:50:16" (4/4) ...
[2020-11-25 07:50:16,442 INFO  L104   BuchiProductObserver]: Initial property automaton 2 locations, 3 edges
[2020-11-25 07:50:16,446 INFO  L110   BuchiProductObserver]: Initial RCFG 2065 locations, 2933 edges
[2020-11-25 07:50:16,446 INFO  L93    BuchiProductObserver]: Beginning generation of product automaton
[2020-11-25 07:50:16,458 INFO  L136       ProductGenerator]: The program has no step specification, so we assume maximum atomicity
[2020-11-25 07:50:17,830 INFO  L97    BuchiProductObserver]: Finished generation of product automaton successfully
[2020-11-25 07:50:17,838 INFO  L110   BuchiProductObserver]: BuchiProgram size 5278 locations, 9639 edges
[2020-11-25 07:50:17,838 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 07:50:17 BoogieIcfgContainer
[2020-11-25 07:50:17,838 INFO  L132        PluginConnector]: ------------------------ END BÃ¼chi Program Product----------------------------
[2020-11-25 07:50:17,839 INFO  L113        PluginConnector]: ------------------------BlockEncodingV2----------------------------
[2020-11-25 07:50:17,839 INFO  L271        PluginConnector]: Initializing BlockEncodingV2...
[2020-11-25 07:50:17,840 INFO  L276        PluginConnector]: BlockEncodingV2 initialized
[2020-11-25 07:50:17,841 INFO  L185        PluginConnector]: Executing the observer BlockEncodingObserver from plugin BlockEncodingV2 for "LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 07:50:17" (1/1) ...
[2020-11-25 07:50:18,000 INFO  L313           BlockEncoder]: Initial Icfg 5278 locations, 9639 edges
[2020-11-25 07:50:18,000 INFO  L258           BlockEncoder]: Using Remove infeasible edges
[2020-11-25 07:50:18,001 INFO  L270           BlockEncoder]: Using Minimize states even if more edges are added than removed.=true
[2020-11-25 07:50:18,001 INFO  L296           BlockEncoder]: Using Remove sink states
[2020-11-25 07:50:18,001 INFO  L171           BlockEncoder]: Using Apply optimizations until nothing changes=true
[2020-11-25 07:50:18,013 INFO  L70    emoveInfeasibleEdges]: Removed 138 edges and 17 locations because of local infeasibility
[2020-11-25 07:50:18,023 INFO  L70        RemoveSinkStates]: Removed 74 edges and 49 locations by removing sink states
[2020-11-25 07:50:18,036 INFO  L70    emoveInfeasibleEdges]: Removed 0 edges and 0 locations because of local infeasibility
[2020-11-25 07:50:18,039 INFO  L70        RemoveSinkStates]: Removed 0 edges and 0 locations by removing sink states
[2020-11-25 07:50:18,042 INFO  L237           BlockEncoder]: Using Create parallel compositions if possible
[2020-11-25 07:50:18,042 INFO  L66        ParallelComposer]: Creating parallel compositions
[2020-11-25 07:50:18,045 INFO  L313           BlockEncoder]: Encoded RCFG 5186 locations, 9389 edges
[2020-11-25 07:50:18,045 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.blockencoding CFG 25.11 07:50:18 BasicIcfg
[2020-11-25 07:50:18,045 INFO  L132        PluginConnector]: ------------------------ END BlockEncodingV2----------------------------
[2020-11-25 07:50:18,045 INFO  L113        PluginConnector]: ------------------------BuchiAutomizer----------------------------
[2020-11-25 07:50:18,045 INFO  L271        PluginConnector]: Initializing BuchiAutomizer...
[2020-11-25 07:50:18,047 INFO  L276        PluginConnector]: BuchiAutomizer initialized
[2020-11-25 07:50:18,047 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 07:50:18,047 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "UPCToken_0x91c4b0cfc5eac8b8c5fd953ae9fbc707b520a7d6_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 07:50:15" (1/6) ...
[2020-11-25 07:50:18,049 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@5e2bdd62 and model type UPCToken_0x91c4b0cfc5eac8b8c5fd953ae9fbc707b520a7d6_transfer-self.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 07:50:18, skipping insertion in model container
[2020-11-25 07:50:18,049 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 07:50:18,049 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 07:50:15" (2/6) ...
[2020-11-25 07:50:18,049 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@5e2bdd62 and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 07:50:18, skipping insertion in model container
[2020-11-25 07:50:18,049 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 07:50:18,049 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "UPCToken_0x91c4b0cfc5eac8b8c5fd953ae9fbc707b520a7d6_transfer-self.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 07:50:16" (3/6) ...
[2020-11-25 07:50:18,050 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@5e2bdd62 and model type UPCToken_0x91c4b0cfc5eac8b8c5fd953ae9fbc707b520a7d6_transfer-self.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer CFG 25.11 07:50:18, skipping insertion in model container
[2020-11-25 07:50:18,050 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 07:50:18,050 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 07:50:16" (4/6) ...
[2020-11-25 07:50:18,050 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@5e2bdd62 and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 07:50:18, skipping insertion in model container
[2020-11-25 07:50:18,050 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 07:50:18,050 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 07:50:17" (5/6) ...
[2020-11-25 07:50:18,050 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@5e2bdd62 and model type LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer OTHER 25.11 07:50:18, skipping insertion in model container
[2020-11-25 07:50:18,050 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 07:50:18,050 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.blockencoding CFG 25.11 07:50:18" (6/6) ...
[2020-11-25 07:50:18,051 INFO  L404   chiAutomizerObserver]: Analyzing ICFG UPCToken_0x91c4b0cfc5eac8b8c5fd953ae9fbc707b520a7d6_transfer-self.bpl_BEv2
[2020-11-25 07:50:18,084 INFO  L133   ementStrategyFactory]: Using default assertion order modulation
[2020-11-25 07:50:18,085 INFO  L377         BuchiCegarLoop]: Interprodecural is true
[2020-11-25 07:50:18,085 INFO  L378         BuchiCegarLoop]: Hoare is false
[2020-11-25 07:50:18,085 INFO  L379         BuchiCegarLoop]: Compute interpolants for Craig_TreeInterpolation
[2020-11-25 07:50:18,085 INFO  L380         BuchiCegarLoop]: Backedges is STRAIGHT_LINE
[2020-11-25 07:50:18,085 INFO  L381         BuchiCegarLoop]: Determinization is PREDICATE_ABSTRACTION
[2020-11-25 07:50:18,085 INFO  L382         BuchiCegarLoop]: Difference is false
[2020-11-25 07:50:18,085 INFO  L383         BuchiCegarLoop]: Minimize is MINIMIZE_SEVPA
[2020-11-25 07:50:18,085 INFO  L386         BuchiCegarLoop]: ======== Iteration 0==of CEGAR loop == BuchiCegarLoop========
[2020-11-25 07:50:18,124 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 5186 states.
[2020-11-25 07:50:18,177 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 07:50:18,178 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 07:50:18,178 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 07:50:18,185 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 07:50:18,185 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 07:50:18,185 INFO  L445         BuchiCegarLoop]: ======== Iteration 1============
[2020-11-25 07:50:18,185 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 5186 states.
[2020-11-25 07:50:18,218 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 07:50:18,218 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 07:50:18,221 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 07:50:18,223 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 07:50:18,223 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_ERC20Pausable0 := false;
[L2]                 call_transfer_ERC20Pausable0 := false;
[L2]     CALL        call main();
[L5738]              assume null == 0;
[L5739]  CALL        call this := FreshRefGenerator__success();
[L2443]              havoc newRef;
[L2444]              assume Alloc[newRef] == false;
[L2445]              Alloc[newRef] := true;
[L2446]              assume newRef != null;
[L5739]  RET         call this := FreshRefGenerator__success();
[L5740]              assume now >= 0;
[L5741]              assume DType[this] == UPCToken;
[L5742]              assume msgvalue_MSG == 0;
[L5743]              gas := gas - 53000;
[L5744]  CALL        call UPCToken_UPCToken(this, msgsender_MSG, msgvalue_MSG);
[L1537]              havoc __exception;
[L1538]              revert := false;
[L1539]  COND FALSE  !(__exception)
[L1563]  CALL        call UPCToken_UPCToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3753]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2631]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2616]              assume msgsender_MSG != null;
[L2617]              Balance[this] := 0;
[L2631]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2632]  COND FALSE  !(revert)
[L3753]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3754]  COND TRUE   revert
[L1563]  RET         call UPCToken_UPCToken__success(this, msgsender_MSG, msgvalue_MSG);
[L1564]              assume !revert && gas >= 0;
[L5744]  RET         call UPCToken_UPCToken(this, msgsender_MSG, msgvalue_MSG);
[L5745]              assume !revert && gas >= 0;

Loop:
[L5748]  CALL        call CorralChoice_UPCToken(this);
[L5583]              havoc msgsender_MSG;
[L5584]              havoc msgvalue_MSG;
[L5585]              havoc choice;
[L5586]              havoc __ret_0_totalSupply;
[L5587]              havoc account_s242;
[L5588]              havoc __ret_0_balanceOf;
[L5589]              havoc to_s648;
[L5590]              havoc value_s648;
[L5591]              havoc __ret_0_transfer;
[L5592]              havoc owner_s277;
[L5593]              havoc spender_s277;
[L5594]              havoc __ret_0_allowance;
[L5595]              havoc spender_s687;
[L5596]              havoc value_s687;
[L5597]              havoc __ret_0_approve;
[L5598]              havoc from_s669;
[L5599]              havoc to_s669;
[L5600]              havoc value_s669;
[L5601]              havoc __ret_0_transferFrom;
[L5602]              havoc spender_s705;
[L5603]              havoc addedValue_s705;
[L5604]              havoc __ret_0_increaseAllowance;
[L5605]              havoc spender_s723;
[L5606]              havoc subtractedValue_s723;
[L5607]              havoc __ret_0_decreaseAllowance;
[L5608]              havoc __ret_0_owner;
[L5609]              havoc _newOwner_s519;
[L5610]              havoc __ret_0_paused;
[L5611]              havoc __ret_0_name;
[L5612]              havoc __ret_0_symbol;
[L5613]              havoc __ret_0_decimals;
[L5614]              havoc tmpNow;
[L5615]              havoc gas;
[L5616]              assume gas > 4000000 && gas <= 8000000;
[L5617]              tmpNow := now;
[L5618]              havoc now;
[L5619]              assume now > tmpNow;
[L5620]              assume msgsender_MSG != null;
[L5621]              assume DType[msgsender_MSG] != SafeMath;
[L5622]              assume DType[msgsender_MSG] != IERC20;
[L5623]              assume DType[msgsender_MSG] != ERC20;
[L5624]              assume DType[msgsender_MSG] != Ownable;
[L5625]              assume DType[msgsender_MSG] != Pausable;
[L5626]              assume DType[msgsender_MSG] != ERC20Pausable;
[L5627]              assume DType[msgsender_MSG] != UPCToken;
[L5628]              Alloc[msgsender_MSG] := true;
[L5629]  COND TRUE   choice == 16
[L5630]              gas := gas - 21000;
[L5631]  COND FALSE  !(gas >= 0)
[L5748]  RET         call CorralChoice_UPCToken(this);

[2020-11-25 07:50:18,242 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 07:50:18,242 INFO  L82        PathProgramCache]: Analyzing trace with hash -865220555, now seen corresponding path program 1 times
[2020-11-25 07:50:18,248 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 07:50:18,269 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 07:50:18,304 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 07:50:18,306 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 07:50:18,306 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [3] imperfect sequences [] total 3
[2020-11-25 07:50:18,590 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 07:50:18,598 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-11-25 07:50:18,599 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-11-25 07:50:18,600 INFO  L87              Difference]: Start difference. First operand 5186 states. Second operand 3 states.
[2020-11-25 07:50:18,838 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 07:50:18,838 INFO  L93              Difference]: Finished difference Result 3069 states and 3662 transitions.
[2020-11-25 07:50:18,838 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-11-25 07:50:18,840 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 3069 states and 3662 transitions.
[2020-11-25 07:50:18,856 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 07:50:18,878 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 3069 states to 3069 states and 3662 transitions.
[2020-11-25 07:50:18,879 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 4
[2020-11-25 07:50:18,881 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 821
[2020-11-25 07:50:18,881 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 3069 states and 3662 transitions.
[2020-11-25 07:50:18,889 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 07:50:18,889 INFO  L728         BuchiCegarLoop]: Abstraction has 3069 states and 3662 transitions.
[2020-11-25 07:50:18,903 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 3069 states and 3662 transitions.
[2020-11-25 07:50:18,953 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 3069 to 3069.
[2020-11-25 07:50:18,954 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 3069 states.
[2020-11-25 07:50:18,960 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 3069 states to 3069 states and 3662 transitions.
[2020-11-25 07:50:18,961 INFO  L751         BuchiCegarLoop]: Abstraction has 3069 states and 3662 transitions.
[2020-11-25 07:50:18,961 INFO  L631         BuchiCegarLoop]: Abstraction has 3069 states and 3662 transitions.
[2020-11-25 07:50:18,961 INFO  L445         BuchiCegarLoop]: ======== Iteration 2============
[2020-11-25 07:50:18,961 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 3069 states and 3662 transitions.
[2020-11-25 07:50:18,969 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 07:50:18,970 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 07:50:18,970 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 07:50:18,971 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 07:50:18,971 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_ERC20Pausable0 := false;
[L2]                 call_transfer_ERC20Pausable0 := false;
[L2]     CALL        call main();
[L5738]              assume null == 0;
[L5739]  CALL        call this := FreshRefGenerator__success();
[L2443]              havoc newRef;
[L2444]              assume Alloc[newRef] == false;
[L2445]              Alloc[newRef] := true;
[L2446]              assume newRef != null;
[L5739]  RET         call this := FreshRefGenerator__success();
[L5740]              assume now >= 0;
[L5741]              assume DType[this] == UPCToken;
[L5742]              assume msgvalue_MSG == 0;
[L5743]              gas := gas - 53000;
[L5744]  CALL        call UPCToken_UPCToken(this, msgsender_MSG, msgvalue_MSG);
[L1537]              havoc __exception;
[L1538]              revert := false;
[L1539]  COND FALSE  !(__exception)
[L1563]  CALL        call UPCToken_UPCToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3753]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2631]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2616]              assume msgsender_MSG != null;
[L2617]              Balance[this] := 0;
[L2631]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2632]  COND FALSE  !(revert)
[L3753]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3754]  COND TRUE   revert
[L1563]  RET         call UPCToken_UPCToken__success(this, msgsender_MSG, msgvalue_MSG);
[L1564]              assume !revert && gas >= 0;
[L5744]  RET         call UPCToken_UPCToken(this, msgsender_MSG, msgvalue_MSG);
[L5745]              assume !revert && gas >= 0;
[L5748]  CALL        call CorralChoice_UPCToken(this);
[L5583]              havoc msgsender_MSG;
[L5584]              havoc msgvalue_MSG;
[L5585]              havoc choice;
[L5586]              havoc __ret_0_totalSupply;
[L5587]              havoc account_s242;
[L5588]              havoc __ret_0_balanceOf;
[L5589]              havoc to_s648;
[L5590]              havoc value_s648;
[L5591]              havoc __ret_0_transfer;
[L5592]              havoc owner_s277;
[L5593]              havoc spender_s277;
[L5594]              havoc __ret_0_allowance;
[L5595]              havoc spender_s687;
[L5596]              havoc value_s687;
[L5597]              havoc __ret_0_approve;
[L5598]              havoc from_s669;
[L5599]              havoc to_s669;
[L5600]              havoc value_s669;
[L5601]              havoc __ret_0_transferFrom;
[L5602]              havoc spender_s705;
[L5603]              havoc addedValue_s705;
[L5604]              havoc __ret_0_increaseAllowance;
[L5605]              havoc spender_s723;
[L5606]              havoc subtractedValue_s723;
[L5607]              havoc __ret_0_decreaseAllowance;
[L5608]              havoc __ret_0_owner;
[L5609]              havoc _newOwner_s519;
[L5610]              havoc __ret_0_paused;
[L5611]              havoc __ret_0_name;
[L5612]              havoc __ret_0_symbol;
[L5613]              havoc __ret_0_decimals;
[L5614]              havoc tmpNow;
[L5615]              havoc gas;
[L5616]              assume gas > 4000000 && gas <= 8000000;
[L5617]              tmpNow := now;
[L5618]              havoc now;
[L5619]              assume now > tmpNow;
[L5620]              assume msgsender_MSG != null;
[L5621]              assume DType[msgsender_MSG] != SafeMath;
[L5622]              assume DType[msgsender_MSG] != IERC20;
[L5623]              assume DType[msgsender_MSG] != ERC20;
[L5624]              assume DType[msgsender_MSG] != Ownable;
[L5625]              assume DType[msgsender_MSG] != Pausable;
[L5626]              assume DType[msgsender_MSG] != ERC20Pausable;
[L5627]              assume DType[msgsender_MSG] != UPCToken;
[L5628]              Alloc[msgsender_MSG] := true;
[L5629]  COND FALSE  !(choice == 16)
[L5635]  COND FALSE  !(choice == 15)
[L5641]  COND TRUE   choice == 14
[L5642]              gas := gas - 21000;
[L5643]  COND TRUE   gas >= 0
[L5644]              assume value_s648 >= 0 && value_s648 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5645]              assume msgvalue_MSG == 0;
[L5646]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s648, value_s648);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == to_s648 && value_s648 <= _balances_ERC20[this][msgsender_MSG]) && value_s648 >= 0) && value_s648 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s648] >= 0) && _balances_ERC20[this][to_s648] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC20Pausable0 := true;
[L2]                 call_transfer_ERC20Pausable0 := false;
[L2]                 revert := revert_hold;
[L1221]              havoc __exception;
[L1222]              revert := false;
[L1223]  COND FALSE  !(__exception)
[L1247]  CALL        call __ret_0_ := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s648, value_s648);
[L3467]  CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4971]  COND FALSE  !(!!_paused_Pausable[this])
[L3467]  RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3468]  COND TRUE   revert
[L1247]  RET         call __ret_0_ := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s648, value_s648);
[L1248]              assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((__ret_0_ == true && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowances_ERC20[this] == old(_allowances_ERC20[this])) && _paused_Pausable[this] == old(_paused_Pausable[this])) && owner_Ownable[this] == old(owner_Ownable[this]));
[L2]                 revert := revert_hold;
[L5646]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s648, value_s648);
[L5748]  RET         call CorralChoice_UPCToken(this);

Loop:
[L5748]  CALL        call CorralChoice_UPCToken(this);
[L5583]              havoc msgsender_MSG;
[L5584]              havoc msgvalue_MSG;
[L5585]              havoc choice;
[L5586]              havoc __ret_0_totalSupply;
[L5587]              havoc account_s242;
[L5588]              havoc __ret_0_balanceOf;
[L5589]              havoc to_s648;
[L5590]              havoc value_s648;
[L5591]              havoc __ret_0_transfer;
[L5592]              havoc owner_s277;
[L5593]              havoc spender_s277;
[L5594]              havoc __ret_0_allowance;
[L5595]              havoc spender_s687;
[L5596]              havoc value_s687;
[L5597]              havoc __ret_0_approve;
[L5598]              havoc from_s669;
[L5599]              havoc to_s669;
[L5600]              havoc value_s669;
[L5601]              havoc __ret_0_transferFrom;
[L5602]              havoc spender_s705;
[L5603]              havoc addedValue_s705;
[L5604]              havoc __ret_0_increaseAllowance;
[L5605]              havoc spender_s723;
[L5606]              havoc subtractedValue_s723;
[L5607]              havoc __ret_0_decreaseAllowance;
[L5608]              havoc __ret_0_owner;
[L5609]              havoc _newOwner_s519;
[L5610]              havoc __ret_0_paused;
[L5611]              havoc __ret_0_name;
[L5612]              havoc __ret_0_symbol;
[L5613]              havoc __ret_0_decimals;
[L5614]              havoc tmpNow;
[L5615]              havoc gas;
[L5616]              assume gas > 4000000 && gas <= 8000000;
[L5617]              tmpNow := now;
[L5618]              havoc now;
[L5619]              assume now > tmpNow;
[L5620]              assume msgsender_MSG != null;
[L5621]              assume DType[msgsender_MSG] != SafeMath;
[L5622]              assume DType[msgsender_MSG] != IERC20;
[L5623]              assume DType[msgsender_MSG] != ERC20;
[L5624]              assume DType[msgsender_MSG] != Ownable;
[L5625]              assume DType[msgsender_MSG] != Pausable;
[L5626]              assume DType[msgsender_MSG] != ERC20Pausable;
[L5627]              assume DType[msgsender_MSG] != UPCToken;
[L5628]              Alloc[msgsender_MSG] := true;
[L5629]  COND FALSE  !(choice == 16)
[L5635]  COND FALSE  !(choice == 15)
[L5641]  COND TRUE   choice == 14
[L5642]              gas := gas - 21000;
[L5643]  COND TRUE   gas >= 0
[L5644]              assume value_s648 >= 0 && value_s648 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5645]              assume msgvalue_MSG == 0;
[L5646]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s648, value_s648);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == to_s648 && value_s648 <= _balances_ERC20[this][msgsender_MSG]) && value_s648 >= 0) && value_s648 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s648] >= 0) && _balances_ERC20[this][to_s648] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC20Pausable0 := true;
[L2]                 call_transfer_ERC20Pausable0 := false;
[L2]                 revert := revert_hold;
[L1221]              havoc __exception;
[L1222]              revert := false;
[L1223]  COND FALSE  !(__exception)
[L1247]  CALL        call __ret_0_ := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s648, value_s648);
[L3467]  CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4971]  COND FALSE  !(!!_paused_Pausable[this])
[L3467]  RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3468]  COND TRUE   revert
[L1247]  RET         call __ret_0_ := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s648, value_s648);
[L1248]              assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((__ret_0_ == true && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowances_ERC20[this] == old(_allowances_ERC20[this])) && _paused_Pausable[this] == old(_paused_Pausable[this])) && owner_Ownable[this] == old(owner_Ownable[this]));
[L2]                 revert := revert_hold;
[L5646]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s648, value_s648);
[L5748]  RET         call CorralChoice_UPCToken(this);

[2020-11-25 07:50:18,975 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 07:50:18,975 INFO  L82        PathProgramCache]: Analyzing trace with hash 1444794732, now seen corresponding path program 1 times
[2020-11-25 07:50:18,976 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 07:50:18,988 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 07:50:19,008 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 07:50:19,009 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 07:50:19,009 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [4] imperfect sequences [] total 4
[2020-11-25 07:50:19,010 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 07:50:19,010 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-11-25 07:50:19,010 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=5, Invalid=7, Unknown=0, NotChecked=0, Total=12
[2020-11-25 07:50:19,010 INFO  L87              Difference]: Start difference. First operand 3069 states and 3662 transitions. cyclomatic complexity: 595 Second operand 4 states.
[2020-11-25 07:50:19,736 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 07:50:19,736 INFO  L93              Difference]: Finished difference Result 4467 states and 5214 transitions.
[2020-11-25 07:50:19,736 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 4 states. 
[2020-11-25 07:50:19,737 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 4467 states and 5214 transitions.
[2020-11-25 07:50:19,753 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 6
[2020-11-25 07:50:19,770 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 4467 states to 4143 states and 4818 transitions.
[2020-11-25 07:50:19,770 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1108
[2020-11-25 07:50:19,771 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1144
[2020-11-25 07:50:19,772 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 4143 states and 4818 transitions.
[2020-11-25 07:50:19,778 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 07:50:19,778 INFO  L728         BuchiCegarLoop]: Abstraction has 4143 states and 4818 transitions.
[2020-11-25 07:50:19,781 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 4143 states and 4818 transitions.
[2020-11-25 07:50:19,816 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 4143 to 3289.
[2020-11-25 07:50:19,817 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 3289 states.
[2020-11-25 07:50:19,820 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 3289 states to 3289 states and 3708 transitions.
[2020-11-25 07:50:19,821 INFO  L751         BuchiCegarLoop]: Abstraction has 3289 states and 3708 transitions.
[2020-11-25 07:50:19,821 INFO  L631         BuchiCegarLoop]: Abstraction has 3289 states and 3708 transitions.
[2020-11-25 07:50:19,821 INFO  L445         BuchiCegarLoop]: ======== Iteration 3============
[2020-11-25 07:50:19,821 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 3289 states and 3708 transitions.
[2020-11-25 07:50:19,827 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 07:50:19,827 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 07:50:19,827 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 07:50:19,830 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 07:50:19,830 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_ERC20Pausable0 := false;
[L2]                 call_transfer_ERC20Pausable0 := false;
[L2]     CALL        call main();
[L5738]              assume null == 0;
[L5739]  CALL        call this := FreshRefGenerator__success();
[L2443]              havoc newRef;
[L2444]              assume Alloc[newRef] == false;
[L2445]              Alloc[newRef] := true;
[L2446]              assume newRef != null;
[L5739]  RET         call this := FreshRefGenerator__success();
[L5740]              assume now >= 0;
[L5741]              assume DType[this] == UPCToken;
[L5742]              assume msgvalue_MSG == 0;
[L5743]              gas := gas - 53000;
[L5744]  CALL        call UPCToken_UPCToken(this, msgsender_MSG, msgvalue_MSG);
[L1537]              havoc __exception;
[L1538]              revert := false;
[L1539]  COND FALSE  !(__exception)
[L1563]  CALL        call UPCToken_UPCToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3753]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2631]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2616]              assume msgsender_MSG != null;
[L2617]              Balance[this] := 0;
[L2631]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2632]  COND FALSE  !(revert)
[L3753]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3754]  COND FALSE  !(revert)
[L3757]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2677]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2631]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2616]              assume msgsender_MSG != null;
[L2617]              Balance[this] := 0;
[L2631]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2632]  COND FALSE  !(revert)
[L2677]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2678]  COND FALSE  !(revert)
[L2681]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2653]              assume msgsender_MSG != null;
[L2654]              Balance[this] := 0;
[L2655]              _balances_ERC20[this] := zeroRefintArr();
[L2656]              sum__balances0[this] := 0;
[L2657]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2658]              sum__allowances1[this] := 0;
[L2659]              _totalSupply_ERC20[this] := 0;
[L2681]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2682]  COND FALSE  !(revert)
[L3757]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3758]  COND FALSE  !(revert)
[L3761]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3161]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3145]              assume msgsender_MSG != null;
[L3146]              Balance[this] := 0;
[L3147]              owner_Ownable[this] := null;
[L3161]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3162]  COND FALSE  !(revert)
[L3761]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3762]  COND FALSE  !(revert)
[L3765]  CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L3298]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3161]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3145]              assume msgsender_MSG != null;
[L3146]              Balance[this] := 0;
[L3147]              owner_Ownable[this] := null;
[L3161]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3162]  COND FALSE  !(revert)
[L3298]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3299]  COND FALSE  !(revert)
[L3302]  CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3277]              assume msgsender_MSG != null;
[L3278]              Balance[this] := 0;
[L3279]              _paused_Pausable[this] := false;
[L3281]              _paused_Pausable[this] := false;
[L3302]  RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3303]  COND FALSE  !(revert)
[L3765]  RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L3766]  COND FALSE  !(revert)
[L3769]  CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L3416]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2631]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2616]              assume msgsender_MSG != null;
[L2617]              Balance[this] := 0;
[L2631]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2632]  COND FALSE  !(revert)
[L3416]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3417]  COND FALSE  !(revert)
[L3420]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2677]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2631]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2616]              assume msgsender_MSG != null;
[L2617]              Balance[this] := 0;
[L2631]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2632]  COND FALSE  !(revert)
[L2677]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2678]  COND FALSE  !(revert)
[L2681]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2653]              assume msgsender_MSG != null;
[L2654]              Balance[this] := 0;
[L2655]              _balances_ERC20[this] := zeroRefintArr();
[L2656]              sum__balances0[this] := 0;
[L2657]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2658]              sum__allowances1[this] := 0;
[L2659]              _totalSupply_ERC20[this] := 0;
[L2681]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2682]  COND FALSE  !(revert)
[L3420]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3421]  COND FALSE  !(revert)
[L3424]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3161]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3145]              assume msgsender_MSG != null;
[L3146]              Balance[this] := 0;
[L3147]              owner_Ownable[this] := null;
[L3161]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3162]  COND FALSE  !(revert)
[L3424]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3425]  COND FALSE  !(revert)
[L3428]  CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L3298]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3161]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3145]              assume msgsender_MSG != null;
[L3146]              Balance[this] := 0;
[L3147]              owner_Ownable[this] := null;
[L3161]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3162]  COND FALSE  !(revert)
[L3298]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3299]  COND FALSE  !(revert)
[L3302]  CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3277]              assume msgsender_MSG != null;
[L3278]              Balance[this] := 0;
[L3279]              _paused_Pausable[this] := false;
[L3281]              _paused_Pausable[this] := false;
[L3302]  RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3303]  COND FALSE  !(revert)
[L3428]  RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L3429]  COND FALSE  !(revert)
[L3432]  CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3385]              assume msgsender_MSG != null;
[L3386]              Balance[this] := 0;
[L3432]  RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3433]  COND FALSE  !(revert)
[L3769]  RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L3770]  COND FALSE  !(revert)
[L3773]  CALL        call UPCToken_UPCToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3708]              assume msgsender_MSG != null;
[L3709]              Balance[this] := 0;
[L3710]              name_UPCToken[this] := 995162267;
[L3711]              symbol_UPCToken[this] := 189219111;
[L3712]              decimals_UPCToken[this] := 18;
[L3713]              INIT_TOTALSUPPLY_UPCToken[this] := 1000000000;
[L3715]              owner_Ownable[this] := msgsender_MSG;
[L3716]              _totalSupply_ERC20[this] := INIT_TOTALSUPPLY_UPCToken[this];
[L3717]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][owner_Ownable[this]];
[L3718]              _balances_ERC20[this][owner_Ownable[this]] := _totalSupply_ERC20[this];
[L3719]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][owner_Ownable[this]];
[L3720]              assert { :EventEmitted "Transfer_UPCToken" } true;
[L3773]  RET         call UPCToken_UPCToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3774]  COND FALSE  !(revert)
[L1563]  RET         call UPCToken_UPCToken__success(this, msgsender_MSG, msgvalue_MSG);
[L1564]              assume !revert && gas >= 0;
[L5744]  RET         call UPCToken_UPCToken(this, msgsender_MSG, msgvalue_MSG);
[L5745]              assume !revert && gas >= 0;
[L5748]  CALL        call CorralChoice_UPCToken(this);
[L5583]              havoc msgsender_MSG;
[L5584]              havoc msgvalue_MSG;
[L5585]              havoc choice;
[L5586]              havoc __ret_0_totalSupply;
[L5587]              havoc account_s242;
[L5588]              havoc __ret_0_balanceOf;
[L5589]              havoc to_s648;
[L5590]              havoc value_s648;
[L5591]              havoc __ret_0_transfer;
[L5592]              havoc owner_s277;
[L5593]              havoc spender_s277;
[L5594]              havoc __ret_0_allowance;
[L5595]              havoc spender_s687;
[L5596]              havoc value_s687;
[L5597]              havoc __ret_0_approve;
[L5598]              havoc from_s669;
[L5599]              havoc to_s669;
[L5600]              havoc value_s669;
[L5601]              havoc __ret_0_transferFrom;
[L5602]              havoc spender_s705;
[L5603]              havoc addedValue_s705;
[L5604]              havoc __ret_0_increaseAllowance;
[L5605]              havoc spender_s723;
[L5606]              havoc subtractedValue_s723;
[L5607]              havoc __ret_0_decreaseAllowance;
[L5608]              havoc __ret_0_owner;
[L5609]              havoc _newOwner_s519;
[L5610]              havoc __ret_0_paused;
[L5611]              havoc __ret_0_name;
[L5612]              havoc __ret_0_symbol;
[L5613]              havoc __ret_0_decimals;
[L5614]              havoc tmpNow;
[L5615]              havoc gas;
[L5616]              assume gas > 4000000 && gas <= 8000000;
[L5617]              tmpNow := now;
[L5618]              havoc now;
[L5619]              assume now > tmpNow;
[L5620]              assume msgsender_MSG != null;
[L5621]              assume DType[msgsender_MSG] != SafeMath;
[L5622]              assume DType[msgsender_MSG] != IERC20;
[L5623]              assume DType[msgsender_MSG] != ERC20;
[L5624]              assume DType[msgsender_MSG] != Ownable;
[L5625]              assume DType[msgsender_MSG] != Pausable;
[L5626]              assume DType[msgsender_MSG] != ERC20Pausable;
[L5627]              assume DType[msgsender_MSG] != UPCToken;
[L5628]              Alloc[msgsender_MSG] := true;
[L5629]  COND FALSE  !(choice == 16)
[L5635]  COND FALSE  !(choice == 15)
[L5641]  COND TRUE   choice == 14
[L5642]              gas := gas - 21000;
[L5643]  COND TRUE   gas >= 0
[L5644]              assume value_s648 >= 0 && value_s648 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5645]              assume msgvalue_MSG == 0;
[L5646]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s648, value_s648);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == to_s648 && value_s648 <= _balances_ERC20[this][msgsender_MSG]) && value_s648 >= 0) && value_s648 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s648] >= 0) && _balances_ERC20[this][to_s648] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC20Pausable0 := true;
[L2]                 call_transfer_ERC20Pausable0 := false;
[L2]                 revert := revert_hold;
[L1221]              havoc __exception;
[L1222]              revert := false;
[L1223]  COND TRUE   __exception
[L1224]              __tmp__Balance := Balance;
[L1225]              __tmp__DType := DType;
[L1226]              __tmp__Alloc := Alloc;
[L1227]              __tmp__balance_ADDR := balance_ADDR;
[L1228]              __tmp__M_Ref_int := M_Ref_int;
[L1229]              __tmp__sum__balances0 := sum__balances0;
[L1230]              __tmp__alloc__allowances_ERC20_lvl0 := alloc__allowances_ERC20_lvl0;
[L1231]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L1232]              __tmp__sum__allowances1 := sum__allowances1;
[L1233]              __tmp__Length := Length;
[L1234]              __tmp__now := now;
[L1235]              __tmp___balances_ERC20 := _balances_ERC20;
[L1236]              __tmp___allowances_ERC20 := _allowances_ERC20;
[L1237]              __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L1238]              __tmp__owner_Ownable := owner_Ownable;
[L1239]              __tmp___paused_Pausable := _paused_Pausable;
[L1240]              __tmp__name_UPCToken := name_UPCToken;
[L1241]              __tmp__symbol_UPCToken := symbol_UPCToken;
[L1242]              __tmp__decimals_UPCToken := decimals_UPCToken;
[L1243]              __tmp__INIT_TOTALSUPPLY_UPCToken := INIT_TOTALSUPPLY_UPCToken;
[L1244]  CALL        call __ret_0_ := transfer~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, to_s648, value_s648);
[L3442]  CALL        call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L4963]  COND TRUE   !!__tmp___paused_Pausable[this]
[L4964]              revert := true;
[L3442]  RET         call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L3443]  COND TRUE   revert
[L1244]  RET         call __ret_0_ := transfer~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, to_s648, value_s648);
[L1245]              assume revert || gas < 0;
[L5646]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s648, value_s648);
[L5748]  RET         call CorralChoice_UPCToken(this);

Loop:
[L5748]  CALL        call CorralChoice_UPCToken(this);
[L5583]              havoc msgsender_MSG;
[L5584]              havoc msgvalue_MSG;
[L5585]              havoc choice;
[L5586]              havoc __ret_0_totalSupply;
[L5587]              havoc account_s242;
[L5588]              havoc __ret_0_balanceOf;
[L5589]              havoc to_s648;
[L5590]              havoc value_s648;
[L5591]              havoc __ret_0_transfer;
[L5592]              havoc owner_s277;
[L5593]              havoc spender_s277;
[L5594]              havoc __ret_0_allowance;
[L5595]              havoc spender_s687;
[L5596]              havoc value_s687;
[L5597]              havoc __ret_0_approve;
[L5598]              havoc from_s669;
[L5599]              havoc to_s669;
[L5600]              havoc value_s669;
[L5601]              havoc __ret_0_transferFrom;
[L5602]              havoc spender_s705;
[L5603]              havoc addedValue_s705;
[L5604]              havoc __ret_0_increaseAllowance;
[L5605]              havoc spender_s723;
[L5606]              havoc subtractedValue_s723;
[L5607]              havoc __ret_0_decreaseAllowance;
[L5608]              havoc __ret_0_owner;
[L5609]              havoc _newOwner_s519;
[L5610]              havoc __ret_0_paused;
[L5611]              havoc __ret_0_name;
[L5612]              havoc __ret_0_symbol;
[L5613]              havoc __ret_0_decimals;
[L5614]              havoc tmpNow;
[L5615]              havoc gas;
[L5616]              assume gas > 4000000 && gas <= 8000000;
[L5617]              tmpNow := now;
[L5618]              havoc now;
[L5619]              assume now > tmpNow;
[L5620]              assume msgsender_MSG != null;
[L5621]              assume DType[msgsender_MSG] != SafeMath;
[L5622]              assume DType[msgsender_MSG] != IERC20;
[L5623]              assume DType[msgsender_MSG] != ERC20;
[L5624]              assume DType[msgsender_MSG] != Ownable;
[L5625]              assume DType[msgsender_MSG] != Pausable;
[L5626]              assume DType[msgsender_MSG] != ERC20Pausable;
[L5627]              assume DType[msgsender_MSG] != UPCToken;
[L5628]              Alloc[msgsender_MSG] := true;
[L5629]  COND FALSE  !(choice == 16)
[L5635]  COND FALSE  !(choice == 15)
[L5641]  COND TRUE   choice == 14
[L5642]              gas := gas - 21000;
[L5643]  COND TRUE   gas >= 0
[L5644]              assume value_s648 >= 0 && value_s648 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5645]              assume msgvalue_MSG == 0;
[L5646]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s648, value_s648);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == to_s648 && value_s648 <= _balances_ERC20[this][msgsender_MSG]) && value_s648 >= 0) && value_s648 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s648] >= 0) && _balances_ERC20[this][to_s648] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC20Pausable0 := true;
[L2]                 call_transfer_ERC20Pausable0 := false;
[L2]                 revert := revert_hold;
[L1221]              havoc __exception;
[L1222]              revert := false;
[L1223]  COND TRUE   __exception
[L1224]              __tmp__Balance := Balance;
[L1225]              __tmp__DType := DType;
[L1226]              __tmp__Alloc := Alloc;
[L1227]              __tmp__balance_ADDR := balance_ADDR;
[L1228]              __tmp__M_Ref_int := M_Ref_int;
[L1229]              __tmp__sum__balances0 := sum__balances0;
[L1230]              __tmp__alloc__allowances_ERC20_lvl0 := alloc__allowances_ERC20_lvl0;
[L1231]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L1232]              __tmp__sum__allowances1 := sum__allowances1;
[L1233]              __tmp__Length := Length;
[L1234]              __tmp__now := now;
[L1235]              __tmp___balances_ERC20 := _balances_ERC20;
[L1236]              __tmp___allowances_ERC20 := _allowances_ERC20;
[L1237]              __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L1238]              __tmp__owner_Ownable := owner_Ownable;
[L1239]              __tmp___paused_Pausable := _paused_Pausable;
[L1240]              __tmp__name_UPCToken := name_UPCToken;
[L1241]              __tmp__symbol_UPCToken := symbol_UPCToken;
[L1242]              __tmp__decimals_UPCToken := decimals_UPCToken;
[L1243]              __tmp__INIT_TOTALSUPPLY_UPCToken := INIT_TOTALSUPPLY_UPCToken;
[L1244]  CALL        call __ret_0_ := transfer~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, to_s648, value_s648);
[L3442]  CALL        call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L4963]  COND TRUE   !!__tmp___paused_Pausable[this]
[L4964]              revert := true;
[L3442]  RET         call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L3443]  COND TRUE   revert
[L1244]  RET         call __ret_0_ := transfer~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, to_s648, value_s648);
[L1245]              assume revert || gas < 0;
[L5646]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s648, value_s648);
[L5748]  RET         call CorralChoice_UPCToken(this);

[2020-11-25 07:50:19,834 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 07:50:19,834 INFO  L82        PathProgramCache]: Analyzing trace with hash 64363953, now seen corresponding path program 1 times
[2020-11-25 07:50:19,835 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 07:50:19,850 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 07:50:19,967 INFO  L134       CoverageAnalysis]: Checked inductivity of 161 backedges. 6 proven. 0 refuted. 0 times theorem prover too weak. 155 trivial. 0 not checked.
[2020-11-25 07:50:19,968 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 07:50:19,968 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [13] imperfect sequences [] total 13
[2020-11-25 07:50:19,968 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 07:50:19,968 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 14 interpolants.
[2020-11-25 07:50:19,968 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=25, Invalid=157, Unknown=0, NotChecked=0, Total=182
[2020-11-25 07:50:19,969 INFO  L87              Difference]: Start difference. First operand 3289 states and 3708 transitions. cyclomatic complexity: 421 Second operand 14 states.
[2020-11-25 07:50:22,587 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 07:50:22,587 INFO  L93              Difference]: Finished difference Result 5225 states and 5950 transitions.
[2020-11-25 07:50:22,588 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 18 states. 
[2020-11-25 07:50:22,588 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 5225 states and 5950 transitions.
[2020-11-25 07:50:22,599 INFO  L131   ngComponentsAnalysis]: Automaton has 3 accepting balls. 12
[2020-11-25 07:50:22,615 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 5225 states to 5225 states and 5950 transitions.
[2020-11-25 07:50:22,615 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1490
[2020-11-25 07:50:22,616 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1490
[2020-11-25 07:50:22,616 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 5225 states and 5950 transitions.
[2020-11-25 07:50:22,621 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 07:50:22,621 INFO  L728         BuchiCegarLoop]: Abstraction has 5225 states and 5950 transitions.
[2020-11-25 07:50:22,624 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 5225 states and 5950 transitions.
[2020-11-25 07:50:22,658 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 5225 to 3388.
[2020-11-25 07:50:22,658 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 3388 states.
[2020-11-25 07:50:22,662 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 3388 states to 3388 states and 3813 transitions.
[2020-11-25 07:50:22,662 INFO  L751         BuchiCegarLoop]: Abstraction has 3388 states and 3813 transitions.
[2020-11-25 07:50:22,662 INFO  L631         BuchiCegarLoop]: Abstraction has 3388 states and 3813 transitions.
[2020-11-25 07:50:22,662 INFO  L445         BuchiCegarLoop]: ======== Iteration 4============
[2020-11-25 07:50:22,662 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 3388 states and 3813 transitions.
[2020-11-25 07:50:22,666 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 07:50:22,666 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 07:50:22,666 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 07:50:22,669 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 07:50:22,669 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_ERC20Pausable0 := false;
[L2]                 call_transfer_ERC20Pausable0 := false;
[L2]     CALL        call main();
[L5738]              assume null == 0;
[L5739]  CALL        call this := FreshRefGenerator__success();
[L2443]              havoc newRef;
[L2444]              assume Alloc[newRef] == false;
[L2445]              Alloc[newRef] := true;
[L2446]              assume newRef != null;
[L5739]  RET         call this := FreshRefGenerator__success();
[L5740]              assume now >= 0;
[L5741]              assume DType[this] == UPCToken;
[L5742]              assume msgvalue_MSG == 0;
[L5743]              gas := gas - 53000;
[L5744]  CALL        call UPCToken_UPCToken(this, msgsender_MSG, msgvalue_MSG);
[L1537]              havoc __exception;
[L1538]              revert := false;
[L1539]  COND TRUE   __exception
[L1540]              __tmp__Balance := Balance;
[L1541]              __tmp__DType := DType;
[L1542]              __tmp__Alloc := Alloc;
[L1543]              __tmp__balance_ADDR := balance_ADDR;
[L1544]              __tmp__M_Ref_int := M_Ref_int;
[L1545]              __tmp__sum__balances0 := sum__balances0;
[L1546]              __tmp__alloc__allowances_ERC20_lvl0 := alloc__allowances_ERC20_lvl0;
[L1547]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L1548]              __tmp__sum__allowances1 := sum__allowances1;
[L1549]              __tmp__Length := Length;
[L1550]              __tmp__now := now;
[L1551]              __tmp___balances_ERC20 := _balances_ERC20;
[L1552]              __tmp___allowances_ERC20 := _allowances_ERC20;
[L1553]              __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L1554]              __tmp__owner_Ownable := owner_Ownable;
[L1555]              __tmp___paused_Pausable := _paused_Pausable;
[L1556]              __tmp__name_UPCToken := name_UPCToken;
[L1557]              __tmp__symbol_UPCToken := symbol_UPCToken;
[L1558]              __tmp__decimals_UPCToken := decimals_UPCToken;
[L1559]              __tmp__INIT_TOTALSUPPLY_UPCToken := INIT_TOTALSUPPLY_UPCToken;
[L1560]  CALL        call UPCToken_UPCToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L3725]  CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L2623]  CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2608]              assume msgsender_MSG != null;
[L2609]              __tmp__Balance[this] := 0;
[L2623]  RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2624]  COND FALSE  !(revert)
[L3725]  RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L3726]  COND FALSE  !(revert)
[L3729]  CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L2665]  CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L2623]  CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2608]              assume msgsender_MSG != null;
[L2609]              __tmp__Balance[this] := 0;
[L2623]  RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2624]  COND FALSE  !(revert)
[L2665]  RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L2666]  COND FALSE  !(revert)
[L2669]  CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2640]              assume msgsender_MSG != null;
[L2641]              __tmp__Balance[this] := 0;
[L2642]              __tmp___balances_ERC20[this] := zeroRefintArr();
[L2643]              __tmp__sum__balances0[this] := 0;
[L2644]              __tmp___allowances_ERC20[this] := zeroRefRefintArr();
[L2645]              __tmp__sum__allowances1[this] := 0;
[L2646]              __tmp___totalSupply_ERC20[this] := 0;
[L2669]  RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2670]  COND FALSE  !(revert)
[L3729]  RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L3730]  COND FALSE  !(revert)
[L3733]  CALL        call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L3153]  CALL        call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3136]              assume msgsender_MSG != null;
[L3137]              __tmp__Balance[this] := 0;
[L3138]              __tmp__owner_Ownable[this] := null;
[L3153]  RET         call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3154]  COND FALSE  !(revert)
[L3733]  RET         call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L3734]  COND FALSE  !(revert)
[L3737]  CALL        call Pausable_Pausable__fail(this, msgsender_MSG, msgvalue_MSG);
[L3286]  CALL        call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L3153]  CALL        call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3136]              assume msgsender_MSG != null;
[L3137]              __tmp__Balance[this] := 0;
[L3138]              __tmp__owner_Ownable[this] := null;
[L3153]  RET         call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3154]  COND FALSE  !(revert)
[L3286]  RET         call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L3287]  COND FALSE  !(revert)
[L3290]  CALL        call Pausable_Pausable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3267]              assume msgsender_MSG != null;
[L3268]              __tmp__Balance[this] := 0;
[L3269]              __tmp___paused_Pausable[this] := false;
[L3271]              __tmp___paused_Pausable[this] := false;
[L3290]  RET         call Pausable_Pausable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3291]  COND FALSE  !(revert)
[L3737]  RET         call Pausable_Pausable__fail(this, msgsender_MSG, msgvalue_MSG);
[L3738]  COND FALSE  !(revert)
[L3741]  CALL        call ERC20Pausable_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG);
[L3392]  CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L2623]  CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2608]              assume msgsender_MSG != null;
[L2609]              __tmp__Balance[this] := 0;
[L2623]  RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2624]  COND FALSE  !(revert)
[L3392]  RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L3393]  COND FALSE  !(revert)
[L3396]  CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L2665]  CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L2623]  CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2608]              assume msgsender_MSG != null;
[L2609]              __tmp__Balance[this] := 0;
[L2623]  RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2624]  COND FALSE  !(revert)
[L2665]  RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L2666]  COND FALSE  !(revert)
[L2669]  CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2640]              assume msgsender_MSG != null;
[L2641]              __tmp__Balance[this] := 0;
[L2642]              __tmp___balances_ERC20[this] := zeroRefintArr();
[L2643]              __tmp__sum__balances0[this] := 0;
[L2644]              __tmp___allowances_ERC20[this] := zeroRefRefintArr();
[L2645]              __tmp__sum__allowances1[this] := 0;
[L2646]              __tmp___totalSupply_ERC20[this] := 0;
[L2669]  RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2670]  COND FALSE  !(revert)
[L3396]  RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L3397]  COND FALSE  !(revert)
[L3400]  CALL        call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L3153]  CALL        call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3136]              assume msgsender_MSG != null;
[L3137]              __tmp__Balance[this] := 0;
[L3138]              __tmp__owner_Ownable[this] := null;
[L3153]  RET         call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3154]  COND FALSE  !(revert)
[L3400]  RET         call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L3401]  COND FALSE  !(revert)
[L3404]  CALL        call Pausable_Pausable__fail(this, msgsender_MSG, msgvalue_MSG);
[L3286]  CALL        call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L3153]  CALL        call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3136]              assume msgsender_MSG != null;
[L3137]              __tmp__Balance[this] := 0;
[L3138]              __tmp__owner_Ownable[this] := null;
[L3153]  RET         call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3154]  COND FALSE  !(revert)
[L3286]  RET         call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L3287]  COND FALSE  !(revert)
[L3290]  CALL        call Pausable_Pausable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3267]              assume msgsender_MSG != null;
[L3268]              __tmp__Balance[this] := 0;
[L3269]              __tmp___paused_Pausable[this] := false;
[L3271]              __tmp___paused_Pausable[this] := false;
[L3290]  RET         call Pausable_Pausable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3291]  COND FALSE  !(revert)
[L3404]  RET         call Pausable_Pausable__fail(this, msgsender_MSG, msgvalue_MSG);
[L3405]  COND FALSE  !(revert)
[L3408]  CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3377]              assume msgsender_MSG != null;
[L3378]              __tmp__Balance[this] := 0;
[L3408]  RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3409]  COND FALSE  !(revert)
[L3741]  RET         call ERC20Pausable_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG);
[L3742]  COND FALSE  !(revert)
[L3745]  CALL        call UPCToken_UPCToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3691]              assume msgsender_MSG != null;
[L3692]              __tmp__Balance[this] := 0;
[L3693]              __tmp__name_UPCToken[this] := 995162267;
[L3694]              __tmp__symbol_UPCToken[this] := 189219111;
[L3695]              __tmp__decimals_UPCToken[this] := 18;
[L3696]              __tmp__INIT_TOTALSUPPLY_UPCToken[this] := 1000000000;
[L3698]              __tmp__owner_Ownable[this] := msgsender_MSG;
[L3699]              __tmp___totalSupply_ERC20[this] := __tmp__INIT_TOTALSUPPLY_UPCToken[this];
[L3700]              __tmp__sum__balances0[this] := __tmp__sum__balances0[this] - __tmp___balances_ERC20[this][__tmp__owner_Ownable[this]];
[L3701]              __tmp___balances_ERC20[this][__tmp__owner_Ownable[this]] := __tmp___totalSupply_ERC20[this];
[L3702]              __tmp__sum__balances0[this] := __tmp__sum__balances0[this] + __tmp___balances_ERC20[this][__tmp__owner_Ownable[this]];
[L3745]  RET         call UPCToken_UPCToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3746]  COND FALSE  !(revert)
[L1560]  RET         call UPCToken_UPCToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L1561]              assume revert || gas < 0;
[L5744]  RET         call UPCToken_UPCToken(this, msgsender_MSG, msgvalue_MSG);
[L5745]              assume !revert && gas >= 0;
[L5748]  CALL        call CorralChoice_UPCToken(this);
[L5583]              havoc msgsender_MSG;
[L5584]              havoc msgvalue_MSG;
[L5585]              havoc choice;
[L5586]              havoc __ret_0_totalSupply;
[L5587]              havoc account_s242;
[L5588]              havoc __ret_0_balanceOf;
[L5589]              havoc to_s648;
[L5590]              havoc value_s648;
[L5591]              havoc __ret_0_transfer;
[L5592]              havoc owner_s277;
[L5593]              havoc spender_s277;
[L5594]              havoc __ret_0_allowance;
[L5595]              havoc spender_s687;
[L5596]              havoc value_s687;
[L5597]              havoc __ret_0_approve;
[L5598]              havoc from_s669;
[L5599]              havoc to_s669;
[L5600]              havoc value_s669;
[L5601]              havoc __ret_0_transferFrom;
[L5602]              havoc spender_s705;
[L5603]              havoc addedValue_s705;
[L5604]              havoc __ret_0_increaseAllowance;
[L5605]              havoc spender_s723;
[L5606]              havoc subtractedValue_s723;
[L5607]              havoc __ret_0_decreaseAllowance;
[L5608]              havoc __ret_0_owner;
[L5609]              havoc _newOwner_s519;
[L5610]              havoc __ret_0_paused;
[L5611]              havoc __ret_0_name;
[L5612]              havoc __ret_0_symbol;
[L5613]              havoc __ret_0_decimals;
[L5614]              havoc tmpNow;
[L5615]              havoc gas;
[L5616]              assume gas > 4000000 && gas <= 8000000;
[L5617]              tmpNow := now;
[L5618]              havoc now;
[L5619]              assume now > tmpNow;
[L5620]              assume msgsender_MSG != null;
[L5621]              assume DType[msgsender_MSG] != SafeMath;
[L5622]              assume DType[msgsender_MSG] != IERC20;
[L5623]              assume DType[msgsender_MSG] != ERC20;
[L5624]              assume DType[msgsender_MSG] != Ownable;
[L5625]              assume DType[msgsender_MSG] != Pausable;
[L5626]              assume DType[msgsender_MSG] != ERC20Pausable;
[L5627]              assume DType[msgsender_MSG] != UPCToken;
[L5628]              Alloc[msgsender_MSG] := true;
[L5629]  COND FALSE  !(choice == 16)
[L5635]  COND FALSE  !(choice == 15)
[L5641]  COND TRUE   choice == 14
[L5642]              gas := gas - 21000;
[L5643]  COND TRUE   gas >= 0
[L5644]              assume value_s648 >= 0 && value_s648 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5645]              assume msgvalue_MSG == 0;
[L5646]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s648, value_s648);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == to_s648 && value_s648 <= _balances_ERC20[this][msgsender_MSG]) && value_s648 >= 0) && value_s648 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s648] >= 0) && _balances_ERC20[this][to_s648] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC20Pausable0 := true;
[L2]                 call_transfer_ERC20Pausable0 := false;
[L2]                 revert := revert_hold;
[L1221]              havoc __exception;
[L1222]              revert := false;
[L1223]  COND TRUE   __exception
[L1224]              __tmp__Balance := Balance;
[L1225]              __tmp__DType := DType;
[L1226]              __tmp__Alloc := Alloc;
[L1227]              __tmp__balance_ADDR := balance_ADDR;
[L1228]              __tmp__M_Ref_int := M_Ref_int;
[L1229]              __tmp__sum__balances0 := sum__balances0;
[L1230]              __tmp__alloc__allowances_ERC20_lvl0 := alloc__allowances_ERC20_lvl0;
[L1231]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L1232]              __tmp__sum__allowances1 := sum__allowances1;
[L1233]              __tmp__Length := Length;
[L1234]              __tmp__now := now;
[L1235]              __tmp___balances_ERC20 := _balances_ERC20;
[L1236]              __tmp___allowances_ERC20 := _allowances_ERC20;
[L1237]              __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L1238]              __tmp__owner_Ownable := owner_Ownable;
[L1239]              __tmp___paused_Pausable := _paused_Pausable;
[L1240]              __tmp__name_UPCToken := name_UPCToken;
[L1241]              __tmp__symbol_UPCToken := symbol_UPCToken;
[L1242]              __tmp__decimals_UPCToken := decimals_UPCToken;
[L1243]              __tmp__INIT_TOTALSUPPLY_UPCToken := INIT_TOTALSUPPLY_UPCToken;
[L1244]  CALL        call __ret_0_ := transfer~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, to_s648, value_s648);
[L3442]  CALL        call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L4963]  COND TRUE   !!__tmp___paused_Pausable[this]
[L4964]              revert := true;
[L3442]  RET         call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L3443]  COND TRUE   revert
[L1244]  RET         call __ret_0_ := transfer~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, to_s648, value_s648);
[L1245]              assume revert || gas < 0;
[L5646]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s648, value_s648);
[L5748]  RET         call CorralChoice_UPCToken(this);

Loop:
[L5748]  CALL        call CorralChoice_UPCToken(this);
[L5583]              havoc msgsender_MSG;
[L5584]              havoc msgvalue_MSG;
[L5585]              havoc choice;
[L5586]              havoc __ret_0_totalSupply;
[L5587]              havoc account_s242;
[L5588]              havoc __ret_0_balanceOf;
[L5589]              havoc to_s648;
[L5590]              havoc value_s648;
[L5591]              havoc __ret_0_transfer;
[L5592]              havoc owner_s277;
[L5593]              havoc spender_s277;
[L5594]              havoc __ret_0_allowance;
[L5595]              havoc spender_s687;
[L5596]              havoc value_s687;
[L5597]              havoc __ret_0_approve;
[L5598]              havoc from_s669;
[L5599]              havoc to_s669;
[L5600]              havoc value_s669;
[L5601]              havoc __ret_0_transferFrom;
[L5602]              havoc spender_s705;
[L5603]              havoc addedValue_s705;
[L5604]              havoc __ret_0_increaseAllowance;
[L5605]              havoc spender_s723;
[L5606]              havoc subtractedValue_s723;
[L5607]              havoc __ret_0_decreaseAllowance;
[L5608]              havoc __ret_0_owner;
[L5609]              havoc _newOwner_s519;
[L5610]              havoc __ret_0_paused;
[L5611]              havoc __ret_0_name;
[L5612]              havoc __ret_0_symbol;
[L5613]              havoc __ret_0_decimals;
[L5614]              havoc tmpNow;
[L5615]              havoc gas;
[L5616]              assume gas > 4000000 && gas <= 8000000;
[L5617]              tmpNow := now;
[L5618]              havoc now;
[L5619]              assume now > tmpNow;
[L5620]              assume msgsender_MSG != null;
[L5621]              assume DType[msgsender_MSG] != SafeMath;
[L5622]              assume DType[msgsender_MSG] != IERC20;
[L5623]              assume DType[msgsender_MSG] != ERC20;
[L5624]              assume DType[msgsender_MSG] != Ownable;
[L5625]              assume DType[msgsender_MSG] != Pausable;
[L5626]              assume DType[msgsender_MSG] != ERC20Pausable;
[L5627]              assume DType[msgsender_MSG] != UPCToken;
[L5628]              Alloc[msgsender_MSG] := true;
[L5629]  COND FALSE  !(choice == 16)
[L5635]  COND FALSE  !(choice == 15)
[L5641]  COND FALSE  !(choice == 14)
[L5648]  COND FALSE  !(choice == 13)
[L5654]  COND FALSE  !(choice == 12)
[L5661]  COND FALSE  !(choice == 11)
[L5668]  COND FALSE  !(choice == 10)
[L5675]  COND FALSE  !(choice == 9)
[L5682]  COND FALSE  !(choice == 8)
[L5688]  COND FALSE  !(choice == 7)
[L5694]  COND FALSE  !(choice == 6)
[L5700]  COND FALSE  !(choice == 5)
[L5706]  COND TRUE   choice == 4
[L5707]              gas := gas - 21000;
[L5708]  COND TRUE   gas >= 0
[L5709]              assume msgvalue_MSG == 0;
[L5710]  CALL        call unpause_Pausable(this, msgsender_MSG, msgvalue_MSG);
[L1097]              havoc __exception;
[L1098]              revert := false;
[L1099]  COND FALSE  !(__exception)
[L1123]  CALL        call unpause_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L3362]  CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4955]  COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L3362]  RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3363]  COND FALSE  !(revert)
[L3366]  CALL        call whenPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4987]  COND FALSE  !(!_paused_Pausable[this])
[L3366]  RET         call whenPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3367]  COND FALSE  !(revert)
[L3370]              _paused_Pausable[this] := false;
[L3371]              assert { :EventEmitted "Unpaused_Pausable" } true;
[L1123]  RET         call unpause_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L1124]              assume !revert && gas >= 0;
[L5710]  RET         call unpause_Pausable(this, msgsender_MSG, msgvalue_MSG);
[L5748]  RET         call CorralChoice_UPCToken(this);

[2020-11-25 07:50:22,672 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 07:50:22,672 INFO  L82        PathProgramCache]: Analyzing trace with hash -1889358325, now seen corresponding path program 1 times
[2020-11-25 07:50:22,673 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 07:50:22,684 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 07:50:22,732 INFO  L134       CoverageAnalysis]: Checked inductivity of 161 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 161 trivial. 0 not checked.
[2020-11-25 07:50:22,732 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 07:50:22,732 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [4] imperfect sequences [] total 4
[2020-11-25 07:50:22,732 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 07:50:22,732 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-11-25 07:50:22,733 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=6, Invalid=6, Unknown=0, NotChecked=0, Total=12
[2020-11-25 07:50:22,733 INFO  L87              Difference]: Start difference. First operand 3388 states and 3813 transitions. cyclomatic complexity: 429 Second operand 4 states.
[2020-11-25 07:50:23,187 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 07:50:23,188 INFO  L93              Difference]: Finished difference Result 4030 states and 4654 transitions.
[2020-11-25 07:50:23,188 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 4 states. 
[2020-11-25 07:50:23,188 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 4030 states and 4654 transitions.
[2020-11-25 07:50:23,201 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 12
[2020-11-25 07:50:23,215 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 4030 states to 3839 states and 4458 transitions.
[2020-11-25 07:50:23,215 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1136
[2020-11-25 07:50:23,216 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1136
[2020-11-25 07:50:23,216 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 3839 states and 4458 transitions.
[2020-11-25 07:50:23,227 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 07:50:23,228 INFO  L728         BuchiCegarLoop]: Abstraction has 3839 states and 4458 transitions.
[2020-11-25 07:50:23,232 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 3839 states and 4458 transitions.
[2020-11-25 07:50:23,281 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 3839 to 3395.
[2020-11-25 07:50:23,281 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 3395 states.
[2020-11-25 07:50:23,288 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 3395 states to 3395 states and 3860 transitions.
[2020-11-25 07:50:23,288 INFO  L751         BuchiCegarLoop]: Abstraction has 3395 states and 3860 transitions.
[2020-11-25 07:50:23,288 INFO  L631         BuchiCegarLoop]: Abstraction has 3395 states and 3860 transitions.
[2020-11-25 07:50:23,288 INFO  L445         BuchiCegarLoop]: ======== Iteration 5============
[2020-11-25 07:50:23,289 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 3395 states and 3860 transitions.
[2020-11-25 07:50:23,297 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 8
[2020-11-25 07:50:23,297 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 07:50:23,297 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 07:50:23,300 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 07:50:23,300 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_ERC20Pausable0 := false;
[L2]                 call_transfer_ERC20Pausable0 := false;
[L2]     CALL        call main();
[L5738]              assume null == 0;
[L5739]  CALL        call this := FreshRefGenerator__success();
[L2443]              havoc newRef;
[L2444]              assume Alloc[newRef] == false;
[L2445]              Alloc[newRef] := true;
[L2446]              assume newRef != null;
[L5739]  RET         call this := FreshRefGenerator__success();
[L5740]              assume now >= 0;
[L5741]              assume DType[this] == UPCToken;
[L5742]              assume msgvalue_MSG == 0;
[L5743]              gas := gas - 53000;
[L5744]  CALL        call UPCToken_UPCToken(this, msgsender_MSG, msgvalue_MSG);
[L1537]              havoc __exception;
[L1538]              revert := false;
[L1539]  COND FALSE  !(__exception)
[L1563]  CALL        call UPCToken_UPCToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3753]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2631]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2616]              assume msgsender_MSG != null;
[L2617]              Balance[this] := 0;
[L2631]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2632]  COND FALSE  !(revert)
[L3753]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3754]  COND FALSE  !(revert)
[L3757]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2677]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2631]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2616]              assume msgsender_MSG != null;
[L2617]              Balance[this] := 0;
[L2631]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2632]  COND FALSE  !(revert)
[L2677]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2678]  COND FALSE  !(revert)
[L2681]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2653]              assume msgsender_MSG != null;
[L2654]              Balance[this] := 0;
[L2655]              _balances_ERC20[this] := zeroRefintArr();
[L2656]              sum__balances0[this] := 0;
[L2657]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2658]              sum__allowances1[this] := 0;
[L2659]              _totalSupply_ERC20[this] := 0;
[L2681]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2682]  COND FALSE  !(revert)
[L3757]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3758]  COND FALSE  !(revert)
[L3761]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3161]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3145]              assume msgsender_MSG != null;
[L3146]              Balance[this] := 0;
[L3147]              owner_Ownable[this] := null;
[L3161]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3162]  COND FALSE  !(revert)
[L3761]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3762]  COND FALSE  !(revert)
[L3765]  CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L3298]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3161]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3145]              assume msgsender_MSG != null;
[L3146]              Balance[this] := 0;
[L3147]              owner_Ownable[this] := null;
[L3161]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3162]  COND FALSE  !(revert)
[L3298]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3299]  COND FALSE  !(revert)
[L3302]  CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3277]              assume msgsender_MSG != null;
[L3278]              Balance[this] := 0;
[L3279]              _paused_Pausable[this] := false;
[L3281]              _paused_Pausable[this] := false;
[L3302]  RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3303]  COND FALSE  !(revert)
[L3765]  RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L3766]  COND FALSE  !(revert)
[L3769]  CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L3416]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2631]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2616]              assume msgsender_MSG != null;
[L2617]              Balance[this] := 0;
[L2631]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2632]  COND FALSE  !(revert)
[L3416]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3417]  COND FALSE  !(revert)
[L3420]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2677]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2631]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2616]              assume msgsender_MSG != null;
[L2617]              Balance[this] := 0;
[L2631]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2632]  COND FALSE  !(revert)
[L2677]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2678]  COND FALSE  !(revert)
[L2681]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2653]              assume msgsender_MSG != null;
[L2654]              Balance[this] := 0;
[L2655]              _balances_ERC20[this] := zeroRefintArr();
[L2656]              sum__balances0[this] := 0;
[L2657]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2658]              sum__allowances1[this] := 0;
[L2659]              _totalSupply_ERC20[this] := 0;
[L2681]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2682]  COND FALSE  !(revert)
[L3420]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3421]  COND FALSE  !(revert)
[L3424]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3161]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3145]              assume msgsender_MSG != null;
[L3146]              Balance[this] := 0;
[L3147]              owner_Ownable[this] := null;
[L3161]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3162]  COND FALSE  !(revert)
[L3424]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3425]  COND FALSE  !(revert)
[L3428]  CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L3298]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3161]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3145]              assume msgsender_MSG != null;
[L3146]              Balance[this] := 0;
[L3147]              owner_Ownable[this] := null;
[L3161]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3162]  COND FALSE  !(revert)
[L3298]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3299]  COND FALSE  !(revert)
[L3302]  CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3277]              assume msgsender_MSG != null;
[L3278]              Balance[this] := 0;
[L3279]              _paused_Pausable[this] := false;
[L3281]              _paused_Pausable[this] := false;
[L3302]  RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3303]  COND FALSE  !(revert)
[L3428]  RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L3429]  COND FALSE  !(revert)
[L3432]  CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3385]              assume msgsender_MSG != null;
[L3386]              Balance[this] := 0;
[L3432]  RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3433]  COND FALSE  !(revert)
[L3769]  RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L3770]  COND FALSE  !(revert)
[L3773]  CALL        call UPCToken_UPCToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3708]              assume msgsender_MSG != null;
[L3709]              Balance[this] := 0;
[L3710]              name_UPCToken[this] := 995162267;
[L3711]              symbol_UPCToken[this] := 189219111;
[L3712]              decimals_UPCToken[this] := 18;
[L3713]              INIT_TOTALSUPPLY_UPCToken[this] := 1000000000;
[L3715]              owner_Ownable[this] := msgsender_MSG;
[L3716]              _totalSupply_ERC20[this] := INIT_TOTALSUPPLY_UPCToken[this];
[L3717]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][owner_Ownable[this]];
[L3718]              _balances_ERC20[this][owner_Ownable[this]] := _totalSupply_ERC20[this];
[L3719]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][owner_Ownable[this]];
[L3720]              assert { :EventEmitted "Transfer_UPCToken" } true;
[L3773]  RET         call UPCToken_UPCToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3774]  COND FALSE  !(revert)
[L1563]  RET         call UPCToken_UPCToken__success(this, msgsender_MSG, msgvalue_MSG);
[L1564]              assume !revert && gas >= 0;
[L5744]  RET         call UPCToken_UPCToken(this, msgsender_MSG, msgvalue_MSG);
[L5745]              assume !revert && gas >= 0;
[L5748]  CALL        call CorralChoice_UPCToken(this);
[L5583]              havoc msgsender_MSG;
[L5584]              havoc msgvalue_MSG;
[L5585]              havoc choice;
[L5586]              havoc __ret_0_totalSupply;
[L5587]              havoc account_s242;
[L5588]              havoc __ret_0_balanceOf;
[L5589]              havoc to_s648;
[L5590]              havoc value_s648;
[L5591]              havoc __ret_0_transfer;
[L5592]              havoc owner_s277;
[L5593]              havoc spender_s277;
[L5594]              havoc __ret_0_allowance;
[L5595]              havoc spender_s687;
[L5596]              havoc value_s687;
[L5597]              havoc __ret_0_approve;
[L5598]              havoc from_s669;
[L5599]              havoc to_s669;
[L5600]              havoc value_s669;
[L5601]              havoc __ret_0_transferFrom;
[L5602]              havoc spender_s705;
[L5603]              havoc addedValue_s705;
[L5604]              havoc __ret_0_increaseAllowance;
[L5605]              havoc spender_s723;
[L5606]              havoc subtractedValue_s723;
[L5607]              havoc __ret_0_decreaseAllowance;
[L5608]              havoc __ret_0_owner;
[L5609]              havoc _newOwner_s519;
[L5610]              havoc __ret_0_paused;
[L5611]              havoc __ret_0_name;
[L5612]              havoc __ret_0_symbol;
[L5613]              havoc __ret_0_decimals;
[L5614]              havoc tmpNow;
[L5615]              havoc gas;
[L5616]              assume gas > 4000000 && gas <= 8000000;
[L5617]              tmpNow := now;
[L5618]              havoc now;
[L5619]              assume now > tmpNow;
[L5620]              assume msgsender_MSG != null;
[L5621]              assume DType[msgsender_MSG] != SafeMath;
[L5622]              assume DType[msgsender_MSG] != IERC20;
[L5623]              assume DType[msgsender_MSG] != ERC20;
[L5624]              assume DType[msgsender_MSG] != Ownable;
[L5625]              assume DType[msgsender_MSG] != Pausable;
[L5626]              assume DType[msgsender_MSG] != ERC20Pausable;
[L5627]              assume DType[msgsender_MSG] != UPCToken;
[L5628]              Alloc[msgsender_MSG] := true;
[L5629]  COND FALSE  !(choice == 16)
[L5635]  COND FALSE  !(choice == 15)
[L5641]  COND TRUE   choice == 14
[L5642]              gas := gas - 21000;
[L5643]  COND TRUE   gas >= 0
[L5644]              assume value_s648 >= 0 && value_s648 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5645]              assume msgvalue_MSG == 0;
[L5646]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s648, value_s648);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == to_s648 && value_s648 <= _balances_ERC20[this][msgsender_MSG]) && value_s648 >= 0) && value_s648 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s648] >= 0) && _balances_ERC20[this][to_s648] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC20Pausable0 := true;
[L2]                 call_transfer_ERC20Pausable0 := false;
[L2]                 revert := revert_hold;
[L1221]              havoc __exception;
[L1222]              revert := false;
[L1223]  COND TRUE   __exception
[L1224]              __tmp__Balance := Balance;
[L1225]              __tmp__DType := DType;
[L1226]              __tmp__Alloc := Alloc;
[L1227]              __tmp__balance_ADDR := balance_ADDR;
[L1228]              __tmp__M_Ref_int := M_Ref_int;
[L1229]              __tmp__sum__balances0 := sum__balances0;
[L1230]              __tmp__alloc__allowances_ERC20_lvl0 := alloc__allowances_ERC20_lvl0;
[L1231]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L1232]              __tmp__sum__allowances1 := sum__allowances1;
[L1233]              __tmp__Length := Length;
[L1234]              __tmp__now := now;
[L1235]              __tmp___balances_ERC20 := _balances_ERC20;
[L1236]              __tmp___allowances_ERC20 := _allowances_ERC20;
[L1237]              __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L1238]              __tmp__owner_Ownable := owner_Ownable;
[L1239]              __tmp___paused_Pausable := _paused_Pausable;
[L1240]              __tmp__name_UPCToken := name_UPCToken;
[L1241]              __tmp__symbol_UPCToken := symbol_UPCToken;
[L1242]              __tmp__decimals_UPCToken := decimals_UPCToken;
[L1243]              __tmp__INIT_TOTALSUPPLY_UPCToken := INIT_TOTALSUPPLY_UPCToken;
[L1244]  CALL        call __ret_0_ := transfer~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, to_s648, value_s648);
[L3442]  CALL        call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L4963]  COND FALSE  !(!!__tmp___paused_Pausable[this])
[L3442]  RET         call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L3443]  COND FALSE  !(revert)
[L3446]  COND TRUE   __tmp__DType[this] == UPCToken
[L3447]  CALL        call __var_11 := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, to_s648, value_s648);
[L2713]  COND TRUE   __tmp__DType[this] == UPCToken
[L2714]  CALL        call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, recipient_s261, amount_s261);
[L3035]              __var_4 := null;
[L3036]  COND TRUE   !(sender_s444 != null)
[L3037]              revert := true;
[L2714]  RET         call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, recipient_s261, amount_s261);
[L2715]  COND TRUE   revert
[L3447]  RET         call __var_11 := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, to_s648, value_s648);
[L3448]  COND TRUE   revert
[L1244]  RET         call __ret_0_ := transfer~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, to_s648, value_s648);
[L1245]              assume revert || gas < 0;
[L5646]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s648, value_s648);
[L5748]  RET         call CorralChoice_UPCToken(this);

Loop:
[L5748]  CALL        call CorralChoice_UPCToken(this);
[L5583]              havoc msgsender_MSG;
[L5584]              havoc msgvalue_MSG;
[L5585]              havoc choice;
[L5586]              havoc __ret_0_totalSupply;
[L5587]              havoc account_s242;
[L5588]              havoc __ret_0_balanceOf;
[L5589]              havoc to_s648;
[L5590]              havoc value_s648;
[L5591]              havoc __ret_0_transfer;
[L5592]              havoc owner_s277;
[L5593]              havoc spender_s277;
[L5594]              havoc __ret_0_allowance;
[L5595]              havoc spender_s687;
[L5596]              havoc value_s687;
[L5597]              havoc __ret_0_approve;
[L5598]              havoc from_s669;
[L5599]              havoc to_s669;
[L5600]              havoc value_s669;
[L5601]              havoc __ret_0_transferFrom;
[L5602]              havoc spender_s705;
[L5603]              havoc addedValue_s705;
[L5604]              havoc __ret_0_increaseAllowance;
[L5605]              havoc spender_s723;
[L5606]              havoc subtractedValue_s723;
[L5607]              havoc __ret_0_decreaseAllowance;
[L5608]              havoc __ret_0_owner;
[L5609]              havoc _newOwner_s519;
[L5610]              havoc __ret_0_paused;
[L5611]              havoc __ret_0_name;
[L5612]              havoc __ret_0_symbol;
[L5613]              havoc __ret_0_decimals;
[L5614]              havoc tmpNow;
[L5615]              havoc gas;
[L5616]              assume gas > 4000000 && gas <= 8000000;
[L5617]              tmpNow := now;
[L5618]              havoc now;
[L5619]              assume now > tmpNow;
[L5620]              assume msgsender_MSG != null;
[L5621]              assume DType[msgsender_MSG] != SafeMath;
[L5622]              assume DType[msgsender_MSG] != IERC20;
[L5623]              assume DType[msgsender_MSG] != ERC20;
[L5624]              assume DType[msgsender_MSG] != Ownable;
[L5625]              assume DType[msgsender_MSG] != Pausable;
[L5626]              assume DType[msgsender_MSG] != ERC20Pausable;
[L5627]              assume DType[msgsender_MSG] != UPCToken;
[L5628]              Alloc[msgsender_MSG] := true;
[L5629]  COND FALSE  !(choice == 16)
[L5635]  COND FALSE  !(choice == 15)
[L5641]  COND TRUE   choice == 14
[L5642]              gas := gas - 21000;
[L5643]  COND TRUE   gas >= 0
[L5644]              assume value_s648 >= 0 && value_s648 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5645]              assume msgvalue_MSG == 0;
[L5646]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s648, value_s648);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == to_s648 && value_s648 <= _balances_ERC20[this][msgsender_MSG]) && value_s648 >= 0) && value_s648 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s648] >= 0) && _balances_ERC20[this][to_s648] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC20Pausable0 := true;
[L2]                 call_transfer_ERC20Pausable0 := false;
[L2]                 revert := revert_hold;
[L1221]              havoc __exception;
[L1222]              revert := false;
[L1223]  COND TRUE   __exception
[L1224]              __tmp__Balance := Balance;
[L1225]              __tmp__DType := DType;
[L1226]              __tmp__Alloc := Alloc;
[L1227]              __tmp__balance_ADDR := balance_ADDR;
[L1228]              __tmp__M_Ref_int := M_Ref_int;
[L1229]              __tmp__sum__balances0 := sum__balances0;
[L1230]              __tmp__alloc__allowances_ERC20_lvl0 := alloc__allowances_ERC20_lvl0;
[L1231]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L1232]              __tmp__sum__allowances1 := sum__allowances1;
[L1233]              __tmp__Length := Length;
[L1234]              __tmp__now := now;
[L1235]              __tmp___balances_ERC20 := _balances_ERC20;
[L1236]              __tmp___allowances_ERC20 := _allowances_ERC20;
[L1237]              __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L1238]              __tmp__owner_Ownable := owner_Ownable;
[L1239]              __tmp___paused_Pausable := _paused_Pausable;
[L1240]              __tmp__name_UPCToken := name_UPCToken;
[L1241]              __tmp__symbol_UPCToken := symbol_UPCToken;
[L1242]              __tmp__decimals_UPCToken := decimals_UPCToken;
[L1243]              __tmp__INIT_TOTALSUPPLY_UPCToken := INIT_TOTALSUPPLY_UPCToken;
[L1244]  CALL        call __ret_0_ := transfer~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, to_s648, value_s648);
[L3442]  CALL        call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L4963]  COND FALSE  !(!!__tmp___paused_Pausable[this])
[L3442]  RET         call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L3443]  COND FALSE  !(revert)
[L3446]  COND TRUE   __tmp__DType[this] == UPCToken
[L3447]  CALL        call __var_11 := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, to_s648, value_s648);
[L2713]  COND TRUE   __tmp__DType[this] == UPCToken
[L2714]  CALL        call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, recipient_s261, amount_s261);
[L3035]              __var_4 := null;
[L3036]  COND TRUE   !(sender_s444 != null)
[L3037]              revert := true;
[L2714]  RET         call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, recipient_s261, amount_s261);
[L2715]  COND TRUE   revert
[L3447]  RET         call __var_11 := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, to_s648, value_s648);
[L3448]  COND TRUE   revert
[L1244]  RET         call __ret_0_ := transfer~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, to_s648, value_s648);
[L1245]              assume revert || gas < 0;
[L5646]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s648, value_s648);
[L5748]  RET         call CorralChoice_UPCToken(this);

[2020-11-25 07:50:23,305 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 07:50:23,306 INFO  L82        PathProgramCache]: Analyzing trace with hash -1117088960, now seen corresponding path program 1 times
[2020-11-25 07:50:23,306 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 07:50:23,324 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 07:50:23,425 INFO  L134       CoverageAnalysis]: Checked inductivity of 161 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 161 trivial. 0 not checked.
[2020-11-25 07:50:23,425 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 07:50:23,425 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [7] imperfect sequences [] total 7
[2020-11-25 07:50:23,426 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 07:50:23,426 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 7 interpolants.
[2020-11-25 07:50:23,426 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=11, Invalid=31, Unknown=0, NotChecked=0, Total=42
[2020-11-25 07:50:23,426 INFO  L87              Difference]: Start difference. First operand 3395 states and 3860 transitions. cyclomatic complexity: 469 Second operand 7 states.
[2020-11-25 07:50:23,474 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 07:50:23,474 INFO  L93              Difference]: Finished difference Result 3435 states and 3910 transitions.
[2020-11-25 07:50:23,474 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 7 states. 
[2020-11-25 07:50:23,474 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 3435 states and 3910 transitions.
[2020-11-25 07:50:23,481 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 8
[2020-11-25 07:50:23,490 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 3435 states to 3399 states and 3868 transitions.
[2020-11-25 07:50:23,490 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1088
[2020-11-25 07:50:23,490 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1088
[2020-11-25 07:50:23,490 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 3399 states and 3868 transitions.
[2020-11-25 07:50:23,493 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 07:50:23,493 INFO  L728         BuchiCegarLoop]: Abstraction has 3399 states and 3868 transitions.
[2020-11-25 07:50:23,496 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 3399 states and 3868 transitions.
[2020-11-25 07:50:23,518 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 3399 to 3399.
[2020-11-25 07:50:23,518 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 3399 states.
[2020-11-25 07:50:23,522 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 3399 states to 3399 states and 3868 transitions.
[2020-11-25 07:50:23,522 INFO  L751         BuchiCegarLoop]: Abstraction has 3399 states and 3868 transitions.
[2020-11-25 07:50:23,522 INFO  L631         BuchiCegarLoop]: Abstraction has 3399 states and 3868 transitions.
[2020-11-25 07:50:23,522 INFO  L445         BuchiCegarLoop]: ======== Iteration 6============
[2020-11-25 07:50:23,522 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 3399 states and 3868 transitions.
[2020-11-25 07:50:23,526 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 8
[2020-11-25 07:50:23,526 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 07:50:23,526 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 07:50:23,527 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 07:50:23,527 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_ERC20Pausable0 := false;
[L2]                 call_transfer_ERC20Pausable0 := false;
[L2]     CALL        call main();
[L5738]              assume null == 0;
[L5739]  CALL        call this := FreshRefGenerator__success();
[L2443]              havoc newRef;
[L2444]              assume Alloc[newRef] == false;
[L2445]              Alloc[newRef] := true;
[L2446]              assume newRef != null;
[L5739]  RET         call this := FreshRefGenerator__success();
[L5740]              assume now >= 0;
[L5741]              assume DType[this] == UPCToken;
[L5742]              assume msgvalue_MSG == 0;
[L5743]              gas := gas - 53000;
[L5744]  CALL        call UPCToken_UPCToken(this, msgsender_MSG, msgvalue_MSG);
[L1537]              havoc __exception;
[L1538]              revert := false;
[L1539]  COND FALSE  !(__exception)
[L1563]  CALL        call UPCToken_UPCToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3753]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2631]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2616]              assume msgsender_MSG != null;
[L2617]              Balance[this] := 0;
[L2631]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2632]  COND FALSE  !(revert)
[L3753]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3754]  COND FALSE  !(revert)
[L3757]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2677]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2631]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2616]              assume msgsender_MSG != null;
[L2617]              Balance[this] := 0;
[L2631]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2632]  COND FALSE  !(revert)
[L2677]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2678]  COND FALSE  !(revert)
[L2681]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2653]              assume msgsender_MSG != null;
[L2654]              Balance[this] := 0;
[L2655]              _balances_ERC20[this] := zeroRefintArr();
[L2656]              sum__balances0[this] := 0;
[L2657]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2658]              sum__allowances1[this] := 0;
[L2659]              _totalSupply_ERC20[this] := 0;
[L2681]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2682]  COND FALSE  !(revert)
[L3757]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3758]  COND FALSE  !(revert)
[L3761]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3161]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3145]              assume msgsender_MSG != null;
[L3146]              Balance[this] := 0;
[L3147]              owner_Ownable[this] := null;
[L3161]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3162]  COND FALSE  !(revert)
[L3761]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3762]  COND FALSE  !(revert)
[L3765]  CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L3298]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3161]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3145]              assume msgsender_MSG != null;
[L3146]              Balance[this] := 0;
[L3147]              owner_Ownable[this] := null;
[L3161]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3162]  COND FALSE  !(revert)
[L3298]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3299]  COND FALSE  !(revert)
[L3302]  CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3277]              assume msgsender_MSG != null;
[L3278]              Balance[this] := 0;
[L3279]              _paused_Pausable[this] := false;
[L3281]              _paused_Pausable[this] := false;
[L3302]  RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3303]  COND FALSE  !(revert)
[L3765]  RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L3766]  COND FALSE  !(revert)
[L3769]  CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L3416]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2631]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2616]              assume msgsender_MSG != null;
[L2617]              Balance[this] := 0;
[L2631]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2632]  COND FALSE  !(revert)
[L3416]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3417]  COND FALSE  !(revert)
[L3420]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2677]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2631]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2616]              assume msgsender_MSG != null;
[L2617]              Balance[this] := 0;
[L2631]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2632]  COND FALSE  !(revert)
[L2677]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2678]  COND FALSE  !(revert)
[L2681]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2653]              assume msgsender_MSG != null;
[L2654]              Balance[this] := 0;
[L2655]              _balances_ERC20[this] := zeroRefintArr();
[L2656]              sum__balances0[this] := 0;
[L2657]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2658]              sum__allowances1[this] := 0;
[L2659]              _totalSupply_ERC20[this] := 0;
[L2681]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2682]  COND FALSE  !(revert)
[L3420]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3421]  COND FALSE  !(revert)
[L3424]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3161]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3145]              assume msgsender_MSG != null;
[L3146]              Balance[this] := 0;
[L3147]              owner_Ownable[this] := null;
[L3161]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3162]  COND FALSE  !(revert)
[L3424]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3425]  COND FALSE  !(revert)
[L3428]  CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L3298]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3161]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3145]              assume msgsender_MSG != null;
[L3146]              Balance[this] := 0;
[L3147]              owner_Ownable[this] := null;
[L3161]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3162]  COND FALSE  !(revert)
[L3298]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3299]  COND FALSE  !(revert)
[L3302]  CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3277]              assume msgsender_MSG != null;
[L3278]              Balance[this] := 0;
[L3279]              _paused_Pausable[this] := false;
[L3281]              _paused_Pausable[this] := false;
[L3302]  RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3303]  COND FALSE  !(revert)
[L3428]  RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L3429]  COND FALSE  !(revert)
[L3432]  CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3385]              assume msgsender_MSG != null;
[L3386]              Balance[this] := 0;
[L3432]  RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3433]  COND FALSE  !(revert)
[L3769]  RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L3770]  COND FALSE  !(revert)
[L3773]  CALL        call UPCToken_UPCToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3708]              assume msgsender_MSG != null;
[L3709]              Balance[this] := 0;
[L3710]              name_UPCToken[this] := 995162267;
[L3711]              symbol_UPCToken[this] := 189219111;
[L3712]              decimals_UPCToken[this] := 18;
[L3713]              INIT_TOTALSUPPLY_UPCToken[this] := 1000000000;
[L3715]              owner_Ownable[this] := msgsender_MSG;
[L3716]              _totalSupply_ERC20[this] := INIT_TOTALSUPPLY_UPCToken[this];
[L3717]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][owner_Ownable[this]];
[L3718]              _balances_ERC20[this][owner_Ownable[this]] := _totalSupply_ERC20[this];
[L3719]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][owner_Ownable[this]];
[L3720]              assert { :EventEmitted "Transfer_UPCToken" } true;
[L3773]  RET         call UPCToken_UPCToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3774]  COND FALSE  !(revert)
[L1563]  RET         call UPCToken_UPCToken__success(this, msgsender_MSG, msgvalue_MSG);
[L1564]              assume !revert && gas >= 0;
[L5744]  RET         call UPCToken_UPCToken(this, msgsender_MSG, msgvalue_MSG);
[L5745]              assume !revert && gas >= 0;
[L5748]  CALL        call CorralChoice_UPCToken(this);
[L5583]              havoc msgsender_MSG;
[L5584]              havoc msgvalue_MSG;
[L5585]              havoc choice;
[L5586]              havoc __ret_0_totalSupply;
[L5587]              havoc account_s242;
[L5588]              havoc __ret_0_balanceOf;
[L5589]              havoc to_s648;
[L5590]              havoc value_s648;
[L5591]              havoc __ret_0_transfer;
[L5592]              havoc owner_s277;
[L5593]              havoc spender_s277;
[L5594]              havoc __ret_0_allowance;
[L5595]              havoc spender_s687;
[L5596]              havoc value_s687;
[L5597]              havoc __ret_0_approve;
[L5598]              havoc from_s669;
[L5599]              havoc to_s669;
[L5600]              havoc value_s669;
[L5601]              havoc __ret_0_transferFrom;
[L5602]              havoc spender_s705;
[L5603]              havoc addedValue_s705;
[L5604]              havoc __ret_0_increaseAllowance;
[L5605]              havoc spender_s723;
[L5606]              havoc subtractedValue_s723;
[L5607]              havoc __ret_0_decreaseAllowance;
[L5608]              havoc __ret_0_owner;
[L5609]              havoc _newOwner_s519;
[L5610]              havoc __ret_0_paused;
[L5611]              havoc __ret_0_name;
[L5612]              havoc __ret_0_symbol;
[L5613]              havoc __ret_0_decimals;
[L5614]              havoc tmpNow;
[L5615]              havoc gas;
[L5616]              assume gas > 4000000 && gas <= 8000000;
[L5617]              tmpNow := now;
[L5618]              havoc now;
[L5619]              assume now > tmpNow;
[L5620]              assume msgsender_MSG != null;
[L5621]              assume DType[msgsender_MSG] != SafeMath;
[L5622]              assume DType[msgsender_MSG] != IERC20;
[L5623]              assume DType[msgsender_MSG] != ERC20;
[L5624]              assume DType[msgsender_MSG] != Ownable;
[L5625]              assume DType[msgsender_MSG] != Pausable;
[L5626]              assume DType[msgsender_MSG] != ERC20Pausable;
[L5627]              assume DType[msgsender_MSG] != UPCToken;
[L5628]              Alloc[msgsender_MSG] := true;
[L5629]  COND FALSE  !(choice == 16)
[L5635]  COND FALSE  !(choice == 15)
[L5641]  COND TRUE   choice == 14
[L5642]              gas := gas - 21000;
[L5643]  COND TRUE   gas >= 0
[L5644]              assume value_s648 >= 0 && value_s648 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5645]              assume msgvalue_MSG == 0;
[L5646]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s648, value_s648);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == to_s648 && value_s648 <= _balances_ERC20[this][msgsender_MSG]) && value_s648 >= 0) && value_s648 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s648] >= 0) && _balances_ERC20[this][to_s648] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC20Pausable0 := true;
[L2]                 call_transfer_ERC20Pausable0 := false;
[L2]                 revert := revert_hold;
[L1221]              havoc __exception;
[L1222]              revert := false;
[L1223]  COND TRUE   __exception
[L1224]              __tmp__Balance := Balance;
[L1225]              __tmp__DType := DType;
[L1226]              __tmp__Alloc := Alloc;
[L1227]              __tmp__balance_ADDR := balance_ADDR;
[L1228]              __tmp__M_Ref_int := M_Ref_int;
[L1229]              __tmp__sum__balances0 := sum__balances0;
[L1230]              __tmp__alloc__allowances_ERC20_lvl0 := alloc__allowances_ERC20_lvl0;
[L1231]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L1232]              __tmp__sum__allowances1 := sum__allowances1;
[L1233]              __tmp__Length := Length;
[L1234]              __tmp__now := now;
[L1235]              __tmp___balances_ERC20 := _balances_ERC20;
[L1236]              __tmp___allowances_ERC20 := _allowances_ERC20;
[L1237]              __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L1238]              __tmp__owner_Ownable := owner_Ownable;
[L1239]              __tmp___paused_Pausable := _paused_Pausable;
[L1240]              __tmp__name_UPCToken := name_UPCToken;
[L1241]              __tmp__symbol_UPCToken := symbol_UPCToken;
[L1242]              __tmp__decimals_UPCToken := decimals_UPCToken;
[L1243]              __tmp__INIT_TOTALSUPPLY_UPCToken := INIT_TOTALSUPPLY_UPCToken;
[L1244]  CALL        call __ret_0_ := transfer~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, to_s648, value_s648);
[L3442]  CALL        call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L4963]  COND FALSE  !(!!__tmp___paused_Pausable[this])
[L3442]  RET         call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L3443]  COND FALSE  !(revert)
[L3446]  COND TRUE   __tmp__DType[this] == UPCToken
[L3447]  CALL        call __var_11 := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, to_s648, value_s648);
[L2713]  COND TRUE   __tmp__DType[this] == UPCToken
[L2714]  CALL        call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, recipient_s261, amount_s261);
[L3035]              __var_4 := null;
[L3036]  COND FALSE  !(!(sender_s444 != null))
[L3040]              __var_5 := null;
[L3041]  COND TRUE   !(recipient_s444 != null)
[L3042]              revert := true;
[L2714]  RET         call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, recipient_s261, amount_s261);
[L2715]  COND TRUE   revert
[L3447]  RET         call __var_11 := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, to_s648, value_s648);
[L3448]  COND TRUE   revert
[L1244]  RET         call __ret_0_ := transfer~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, to_s648, value_s648);
[L1245]              assume revert || gas < 0;
[L5646]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s648, value_s648);
[L5748]  RET         call CorralChoice_UPCToken(this);

Loop:
[L5748]  CALL        call CorralChoice_UPCToken(this);
[L5583]              havoc msgsender_MSG;
[L5584]              havoc msgvalue_MSG;
[L5585]              havoc choice;
[L5586]              havoc __ret_0_totalSupply;
[L5587]              havoc account_s242;
[L5588]              havoc __ret_0_balanceOf;
[L5589]              havoc to_s648;
[L5590]              havoc value_s648;
[L5591]              havoc __ret_0_transfer;
[L5592]              havoc owner_s277;
[L5593]              havoc spender_s277;
[L5594]              havoc __ret_0_allowance;
[L5595]              havoc spender_s687;
[L5596]              havoc value_s687;
[L5597]              havoc __ret_0_approve;
[L5598]              havoc from_s669;
[L5599]              havoc to_s669;
[L5600]              havoc value_s669;
[L5601]              havoc __ret_0_transferFrom;
[L5602]              havoc spender_s705;
[L5603]              havoc addedValue_s705;
[L5604]              havoc __ret_0_increaseAllowance;
[L5605]              havoc spender_s723;
[L5606]              havoc subtractedValue_s723;
[L5607]              havoc __ret_0_decreaseAllowance;
[L5608]              havoc __ret_0_owner;
[L5609]              havoc _newOwner_s519;
[L5610]              havoc __ret_0_paused;
[L5611]              havoc __ret_0_name;
[L5612]              havoc __ret_0_symbol;
[L5613]              havoc __ret_0_decimals;
[L5614]              havoc tmpNow;
[L5615]              havoc gas;
[L5616]              assume gas > 4000000 && gas <= 8000000;
[L5617]              tmpNow := now;
[L5618]              havoc now;
[L5619]              assume now > tmpNow;
[L5620]              assume msgsender_MSG != null;
[L5621]              assume DType[msgsender_MSG] != SafeMath;
[L5622]              assume DType[msgsender_MSG] != IERC20;
[L5623]              assume DType[msgsender_MSG] != ERC20;
[L5624]              assume DType[msgsender_MSG] != Ownable;
[L5625]              assume DType[msgsender_MSG] != Pausable;
[L5626]              assume DType[msgsender_MSG] != ERC20Pausable;
[L5627]              assume DType[msgsender_MSG] != UPCToken;
[L5628]              Alloc[msgsender_MSG] := true;
[L5629]  COND FALSE  !(choice == 16)
[L5635]  COND FALSE  !(choice == 15)
[L5641]  COND TRUE   choice == 14
[L5642]              gas := gas - 21000;
[L5643]  COND TRUE   gas >= 0
[L5644]              assume value_s648 >= 0 && value_s648 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5645]              assume msgvalue_MSG == 0;
[L5646]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s648, value_s648);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == to_s648 && value_s648 <= _balances_ERC20[this][msgsender_MSG]) && value_s648 >= 0) && value_s648 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s648] >= 0) && _balances_ERC20[this][to_s648] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC20Pausable0 := true;
[L2]                 call_transfer_ERC20Pausable0 := false;
[L2]                 revert := revert_hold;
[L1221]              havoc __exception;
[L1222]              revert := false;
[L1223]  COND TRUE   __exception
[L1224]              __tmp__Balance := Balance;
[L1225]              __tmp__DType := DType;
[L1226]              __tmp__Alloc := Alloc;
[L1227]              __tmp__balance_ADDR := balance_ADDR;
[L1228]              __tmp__M_Ref_int := M_Ref_int;
[L1229]              __tmp__sum__balances0 := sum__balances0;
[L1230]              __tmp__alloc__allowances_ERC20_lvl0 := alloc__allowances_ERC20_lvl0;
[L1231]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L1232]              __tmp__sum__allowances1 := sum__allowances1;
[L1233]              __tmp__Length := Length;
[L1234]              __tmp__now := now;
[L1235]              __tmp___balances_ERC20 := _balances_ERC20;
[L1236]              __tmp___allowances_ERC20 := _allowances_ERC20;
[L1237]              __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L1238]              __tmp__owner_Ownable := owner_Ownable;
[L1239]              __tmp___paused_Pausable := _paused_Pausable;
[L1240]              __tmp__name_UPCToken := name_UPCToken;
[L1241]              __tmp__symbol_UPCToken := symbol_UPCToken;
[L1242]              __tmp__decimals_UPCToken := decimals_UPCToken;
[L1243]              __tmp__INIT_TOTALSUPPLY_UPCToken := INIT_TOTALSUPPLY_UPCToken;
[L1244]  CALL        call __ret_0_ := transfer~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, to_s648, value_s648);
[L3442]  CALL        call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L4963]  COND FALSE  !(!!__tmp___paused_Pausable[this])
[L3442]  RET         call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L3443]  COND FALSE  !(revert)
[L3446]  COND TRUE   __tmp__DType[this] == UPCToken
[L3447]  CALL        call __var_11 := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, to_s648, value_s648);
[L2713]  COND TRUE   __tmp__DType[this] == UPCToken
[L2714]  CALL        call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, recipient_s261, amount_s261);
[L3035]              __var_4 := null;
[L3036]  COND FALSE  !(!(sender_s444 != null))
[L3040]              __var_5 := null;
[L3041]  COND TRUE   !(recipient_s444 != null)
[L3042]              revert := true;
[L2714]  RET         call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, recipient_s261, amount_s261);
[L2715]  COND TRUE   revert
[L3447]  RET         call __var_11 := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, to_s648, value_s648);
[L3448]  COND TRUE   revert
[L1244]  RET         call __ret_0_ := transfer~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, to_s648, value_s648);
[L1245]              assume revert || gas < 0;
[L5646]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s648, value_s648);
[L5748]  RET         call CorralChoice_UPCToken(this);

[2020-11-25 07:50:23,531 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 07:50:23,531 INFO  L82        PathProgramCache]: Analyzing trace with hash 1025863816, now seen corresponding path program 1 times
[2020-11-25 07:50:23,531 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 07:50:23,541 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 07:50:23,589 INFO  L134       CoverageAnalysis]: Checked inductivity of 161 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 161 trivial. 0 not checked.
[2020-11-25 07:50:23,589 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 07:50:23,589 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [8] imperfect sequences [] total 8
[2020-11-25 07:50:23,590 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 07:50:23,590 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 8 interpolants.
[2020-11-25 07:50:23,590 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=13, Invalid=43, Unknown=0, NotChecked=0, Total=56
[2020-11-25 07:50:23,590 INFO  L87              Difference]: Start difference. First operand 3399 states and 3868 transitions. cyclomatic complexity: 473 Second operand 8 states.
[2020-11-25 07:50:23,639 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 07:50:23,639 INFO  L93              Difference]: Finished difference Result 3525 states and 4016 transitions.
[2020-11-25 07:50:23,640 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 8 states. 
[2020-11-25 07:50:23,640 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 3525 states and 4016 transitions.
[2020-11-25 07:50:23,646 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 8
[2020-11-25 07:50:23,655 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 3525 states to 3517 states and 4008 transitions.
[2020-11-25 07:50:23,655 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1123
[2020-11-25 07:50:23,655 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1123
[2020-11-25 07:50:23,655 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 3517 states and 4008 transitions.
[2020-11-25 07:50:23,659 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 07:50:23,659 INFO  L728         BuchiCegarLoop]: Abstraction has 3517 states and 4008 transitions.
[2020-11-25 07:50:23,661 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 3517 states and 4008 transitions.
[2020-11-25 07:50:23,683 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 3517 to 3500.
[2020-11-25 07:50:23,683 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 3500 states.
[2020-11-25 07:50:23,687 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 3500 states to 3500 states and 3989 transitions.
[2020-11-25 07:50:23,687 INFO  L751         BuchiCegarLoop]: Abstraction has 3500 states and 3989 transitions.
[2020-11-25 07:50:23,687 INFO  L631         BuchiCegarLoop]: Abstraction has 3500 states and 3989 transitions.
[2020-11-25 07:50:23,687 INFO  L445         BuchiCegarLoop]: ======== Iteration 7============
[2020-11-25 07:50:23,687 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 3500 states and 3989 transitions.
[2020-11-25 07:50:23,691 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 8
[2020-11-25 07:50:23,691 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 07:50:23,691 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 07:50:23,692 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 07:50:23,692 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_ERC20Pausable0 := false;
[L2]                 call_transfer_ERC20Pausable0 := false;
[L2]     CALL        call main();
[L5738]              assume null == 0;
[L5739]  CALL        call this := FreshRefGenerator__success();
[L2443]              havoc newRef;
[L2444]              assume Alloc[newRef] == false;
[L2445]              Alloc[newRef] := true;
[L2446]              assume newRef != null;
[L5739]  RET         call this := FreshRefGenerator__success();
[L5740]              assume now >= 0;
[L5741]              assume DType[this] == UPCToken;
[L5742]              assume msgvalue_MSG == 0;
[L5743]              gas := gas - 53000;
[L5744]  CALL        call UPCToken_UPCToken(this, msgsender_MSG, msgvalue_MSG);
[L1537]              havoc __exception;
[L1538]              revert := false;
[L1539]  COND FALSE  !(__exception)
[L1563]  CALL        call UPCToken_UPCToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3753]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2631]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2616]              assume msgsender_MSG != null;
[L2617]              Balance[this] := 0;
[L2631]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2632]  COND FALSE  !(revert)
[L3753]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3754]  COND FALSE  !(revert)
[L3757]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2677]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2631]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2616]              assume msgsender_MSG != null;
[L2617]              Balance[this] := 0;
[L2631]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2632]  COND FALSE  !(revert)
[L2677]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2678]  COND FALSE  !(revert)
[L2681]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2653]              assume msgsender_MSG != null;
[L2654]              Balance[this] := 0;
[L2655]              _balances_ERC20[this] := zeroRefintArr();
[L2656]              sum__balances0[this] := 0;
[L2657]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2658]              sum__allowances1[this] := 0;
[L2659]              _totalSupply_ERC20[this] := 0;
[L2681]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2682]  COND FALSE  !(revert)
[L3757]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3758]  COND FALSE  !(revert)
[L3761]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3161]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3145]              assume msgsender_MSG != null;
[L3146]              Balance[this] := 0;
[L3147]              owner_Ownable[this] := null;
[L3161]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3162]  COND FALSE  !(revert)
[L3761]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3762]  COND FALSE  !(revert)
[L3765]  CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L3298]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3161]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3145]              assume msgsender_MSG != null;
[L3146]              Balance[this] := 0;
[L3147]              owner_Ownable[this] := null;
[L3161]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3162]  COND FALSE  !(revert)
[L3298]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3299]  COND FALSE  !(revert)
[L3302]  CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3277]              assume msgsender_MSG != null;
[L3278]              Balance[this] := 0;
[L3279]              _paused_Pausable[this] := false;
[L3281]              _paused_Pausable[this] := false;
[L3302]  RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3303]  COND FALSE  !(revert)
[L3765]  RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L3766]  COND FALSE  !(revert)
[L3769]  CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L3416]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2631]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2616]              assume msgsender_MSG != null;
[L2617]              Balance[this] := 0;
[L2631]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2632]  COND FALSE  !(revert)
[L3416]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3417]  COND FALSE  !(revert)
[L3420]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2677]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2631]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2616]              assume msgsender_MSG != null;
[L2617]              Balance[this] := 0;
[L2631]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2632]  COND FALSE  !(revert)
[L2677]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2678]  COND FALSE  !(revert)
[L2681]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2653]              assume msgsender_MSG != null;
[L2654]              Balance[this] := 0;
[L2655]              _balances_ERC20[this] := zeroRefintArr();
[L2656]              sum__balances0[this] := 0;
[L2657]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2658]              sum__allowances1[this] := 0;
[L2659]              _totalSupply_ERC20[this] := 0;
[L2681]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2682]  COND FALSE  !(revert)
[L3420]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3421]  COND FALSE  !(revert)
[L3424]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3161]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3145]              assume msgsender_MSG != null;
[L3146]              Balance[this] := 0;
[L3147]              owner_Ownable[this] := null;
[L3161]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3162]  COND FALSE  !(revert)
[L3424]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3425]  COND FALSE  !(revert)
[L3428]  CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L3298]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3161]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3145]              assume msgsender_MSG != null;
[L3146]              Balance[this] := 0;
[L3147]              owner_Ownable[this] := null;
[L3161]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3162]  COND FALSE  !(revert)
[L3298]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3299]  COND FALSE  !(revert)
[L3302]  CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3277]              assume msgsender_MSG != null;
[L3278]              Balance[this] := 0;
[L3279]              _paused_Pausable[this] := false;
[L3281]              _paused_Pausable[this] := false;
[L3302]  RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3303]  COND FALSE  !(revert)
[L3428]  RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L3429]  COND FALSE  !(revert)
[L3432]  CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3385]              assume msgsender_MSG != null;
[L3386]              Balance[this] := 0;
[L3432]  RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3433]  COND FALSE  !(revert)
[L3769]  RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L3770]  COND FALSE  !(revert)
[L3773]  CALL        call UPCToken_UPCToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3708]              assume msgsender_MSG != null;
[L3709]              Balance[this] := 0;
[L3710]              name_UPCToken[this] := 995162267;
[L3711]              symbol_UPCToken[this] := 189219111;
[L3712]              decimals_UPCToken[this] := 18;
[L3713]              INIT_TOTALSUPPLY_UPCToken[this] := 1000000000;
[L3715]              owner_Ownable[this] := msgsender_MSG;
[L3716]              _totalSupply_ERC20[this] := INIT_TOTALSUPPLY_UPCToken[this];
[L3717]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][owner_Ownable[this]];
[L3718]              _balances_ERC20[this][owner_Ownable[this]] := _totalSupply_ERC20[this];
[L3719]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][owner_Ownable[this]];
[L3720]              assert { :EventEmitted "Transfer_UPCToken" } true;
[L3773]  RET         call UPCToken_UPCToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3774]  COND FALSE  !(revert)
[L1563]  RET         call UPCToken_UPCToken__success(this, msgsender_MSG, msgvalue_MSG);
[L1564]              assume !revert && gas >= 0;
[L5744]  RET         call UPCToken_UPCToken(this, msgsender_MSG, msgvalue_MSG);
[L5745]              assume !revert && gas >= 0;
[L5748]  CALL        call CorralChoice_UPCToken(this);
[L5583]              havoc msgsender_MSG;
[L5584]              havoc msgvalue_MSG;
[L5585]              havoc choice;
[L5586]              havoc __ret_0_totalSupply;
[L5587]              havoc account_s242;
[L5588]              havoc __ret_0_balanceOf;
[L5589]              havoc to_s648;
[L5590]              havoc value_s648;
[L5591]              havoc __ret_0_transfer;
[L5592]              havoc owner_s277;
[L5593]              havoc spender_s277;
[L5594]              havoc __ret_0_allowance;
[L5595]              havoc spender_s687;
[L5596]              havoc value_s687;
[L5597]              havoc __ret_0_approve;
[L5598]              havoc from_s669;
[L5599]              havoc to_s669;
[L5600]              havoc value_s669;
[L5601]              havoc __ret_0_transferFrom;
[L5602]              havoc spender_s705;
[L5603]              havoc addedValue_s705;
[L5604]              havoc __ret_0_increaseAllowance;
[L5605]              havoc spender_s723;
[L5606]              havoc subtractedValue_s723;
[L5607]              havoc __ret_0_decreaseAllowance;
[L5608]              havoc __ret_0_owner;
[L5609]              havoc _newOwner_s519;
[L5610]              havoc __ret_0_paused;
[L5611]              havoc __ret_0_name;
[L5612]              havoc __ret_0_symbol;
[L5613]              havoc __ret_0_decimals;
[L5614]              havoc tmpNow;
[L5615]              havoc gas;
[L5616]              assume gas > 4000000 && gas <= 8000000;
[L5617]              tmpNow := now;
[L5618]              havoc now;
[L5619]              assume now > tmpNow;
[L5620]              assume msgsender_MSG != null;
[L5621]              assume DType[msgsender_MSG] != SafeMath;
[L5622]              assume DType[msgsender_MSG] != IERC20;
[L5623]              assume DType[msgsender_MSG] != ERC20;
[L5624]              assume DType[msgsender_MSG] != Ownable;
[L5625]              assume DType[msgsender_MSG] != Pausable;
[L5626]              assume DType[msgsender_MSG] != ERC20Pausable;
[L5627]              assume DType[msgsender_MSG] != UPCToken;
[L5628]              Alloc[msgsender_MSG] := true;
[L5629]  COND FALSE  !(choice == 16)
[L5635]  COND FALSE  !(choice == 15)
[L5641]  COND TRUE   choice == 14
[L5642]              gas := gas - 21000;
[L5643]  COND TRUE   gas >= 0
[L5644]              assume value_s648 >= 0 && value_s648 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5645]              assume msgvalue_MSG == 0;
[L5646]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s648, value_s648);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == to_s648 && value_s648 <= _balances_ERC20[this][msgsender_MSG]) && value_s648 >= 0) && value_s648 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s648] >= 0) && _balances_ERC20[this][to_s648] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC20Pausable0 := true;
[L2]                 call_transfer_ERC20Pausable0 := false;
[L2]                 revert := revert_hold;
[L1221]              havoc __exception;
[L1222]              revert := false;
[L1223]  COND TRUE   __exception
[L1224]              __tmp__Balance := Balance;
[L1225]              __tmp__DType := DType;
[L1226]              __tmp__Alloc := Alloc;
[L1227]              __tmp__balance_ADDR := balance_ADDR;
[L1228]              __tmp__M_Ref_int := M_Ref_int;
[L1229]              __tmp__sum__balances0 := sum__balances0;
[L1230]              __tmp__alloc__allowances_ERC20_lvl0 := alloc__allowances_ERC20_lvl0;
[L1231]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L1232]              __tmp__sum__allowances1 := sum__allowances1;
[L1233]              __tmp__Length := Length;
[L1234]              __tmp__now := now;
[L1235]              __tmp___balances_ERC20 := _balances_ERC20;
[L1236]              __tmp___allowances_ERC20 := _allowances_ERC20;
[L1237]              __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L1238]              __tmp__owner_Ownable := owner_Ownable;
[L1239]              __tmp___paused_Pausable := _paused_Pausable;
[L1240]              __tmp__name_UPCToken := name_UPCToken;
[L1241]              __tmp__symbol_UPCToken := symbol_UPCToken;
[L1242]              __tmp__decimals_UPCToken := decimals_UPCToken;
[L1243]              __tmp__INIT_TOTALSUPPLY_UPCToken := INIT_TOTALSUPPLY_UPCToken;
[L1244]  CALL        call __ret_0_ := transfer~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, to_s648, value_s648);
[L3442]  CALL        call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L4963]  COND FALSE  !(!!__tmp___paused_Pausable[this])
[L3442]  RET         call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L3443]  COND FALSE  !(revert)
[L3446]  COND TRUE   __tmp__DType[this] == UPCToken
[L3447]  CALL        call __var_11 := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, to_s648, value_s648);
[L2713]  COND TRUE   __tmp__DType[this] == UPCToken
[L2714]  CALL        call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, recipient_s261, amount_s261);
[L3035]              __var_4 := null;
[L3036]  COND FALSE  !(!(sender_s444 != null))
[L3040]              __var_5 := null;
[L3041]  COND FALSE  !(!(recipient_s444 != null))
[L3045]  CALL        call __var_6 := sub~uint256~uint256~string_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][sender_s444], amount_s444, -412855710);
[L2508]  COND TRUE   !(b_s53 <= a_s53)
[L2509]              revert := true;
[L3045]  RET         call __var_6 := sub~uint256~uint256~string_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][sender_s444], amount_s444, -412855710);
[L3046]  COND TRUE   revert
[L2714]  RET         call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, recipient_s261, amount_s261);
[L2715]  COND TRUE   revert
[L3447]  RET         call __var_11 := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, to_s648, value_s648);
[L3448]  COND TRUE   revert
[L1244]  RET         call __ret_0_ := transfer~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, to_s648, value_s648);
[L1245]              assume revert || gas < 0;
[L5646]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s648, value_s648);
[L5748]  RET         call CorralChoice_UPCToken(this);

Loop:
[L5748]  CALL        call CorralChoice_UPCToken(this);
[L5583]              havoc msgsender_MSG;
[L5584]              havoc msgvalue_MSG;
[L5585]              havoc choice;
[L5586]              havoc __ret_0_totalSupply;
[L5587]              havoc account_s242;
[L5588]              havoc __ret_0_balanceOf;
[L5589]              havoc to_s648;
[L5590]              havoc value_s648;
[L5591]              havoc __ret_0_transfer;
[L5592]              havoc owner_s277;
[L5593]              havoc spender_s277;
[L5594]              havoc __ret_0_allowance;
[L5595]              havoc spender_s687;
[L5596]              havoc value_s687;
[L5597]              havoc __ret_0_approve;
[L5598]              havoc from_s669;
[L5599]              havoc to_s669;
[L5600]              havoc value_s669;
[L5601]              havoc __ret_0_transferFrom;
[L5602]              havoc spender_s705;
[L5603]              havoc addedValue_s705;
[L5604]              havoc __ret_0_increaseAllowance;
[L5605]              havoc spender_s723;
[L5606]              havoc subtractedValue_s723;
[L5607]              havoc __ret_0_decreaseAllowance;
[L5608]              havoc __ret_0_owner;
[L5609]              havoc _newOwner_s519;
[L5610]              havoc __ret_0_paused;
[L5611]              havoc __ret_0_name;
[L5612]              havoc __ret_0_symbol;
[L5613]              havoc __ret_0_decimals;
[L5614]              havoc tmpNow;
[L5615]              havoc gas;
[L5616]              assume gas > 4000000 && gas <= 8000000;
[L5617]              tmpNow := now;
[L5618]              havoc now;
[L5619]              assume now > tmpNow;
[L5620]              assume msgsender_MSG != null;
[L5621]              assume DType[msgsender_MSG] != SafeMath;
[L5622]              assume DType[msgsender_MSG] != IERC20;
[L5623]              assume DType[msgsender_MSG] != ERC20;
[L5624]              assume DType[msgsender_MSG] != Ownable;
[L5625]              assume DType[msgsender_MSG] != Pausable;
[L5626]              assume DType[msgsender_MSG] != ERC20Pausable;
[L5627]              assume DType[msgsender_MSG] != UPCToken;
[L5628]              Alloc[msgsender_MSG] := true;
[L5629]  COND FALSE  !(choice == 16)
[L5635]  COND FALSE  !(choice == 15)
[L5641]  COND TRUE   choice == 14
[L5642]              gas := gas - 21000;
[L5643]  COND TRUE   gas >= 0
[L5644]              assume value_s648 >= 0 && value_s648 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5645]              assume msgvalue_MSG == 0;
[L5646]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s648, value_s648);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == to_s648 && value_s648 <= _balances_ERC20[this][msgsender_MSG]) && value_s648 >= 0) && value_s648 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s648] >= 0) && _balances_ERC20[this][to_s648] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC20Pausable0 := true;
[L2]                 call_transfer_ERC20Pausable0 := false;
[L2]                 revert := revert_hold;
[L1221]              havoc __exception;
[L1222]              revert := false;
[L1223]  COND TRUE   __exception
[L1224]              __tmp__Balance := Balance;
[L1225]              __tmp__DType := DType;
[L1226]              __tmp__Alloc := Alloc;
[L1227]              __tmp__balance_ADDR := balance_ADDR;
[L1228]              __tmp__M_Ref_int := M_Ref_int;
[L1229]              __tmp__sum__balances0 := sum__balances0;
[L1230]              __tmp__alloc__allowances_ERC20_lvl0 := alloc__allowances_ERC20_lvl0;
[L1231]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L1232]              __tmp__sum__allowances1 := sum__allowances1;
[L1233]              __tmp__Length := Length;
[L1234]              __tmp__now := now;
[L1235]              __tmp___balances_ERC20 := _balances_ERC20;
[L1236]              __tmp___allowances_ERC20 := _allowances_ERC20;
[L1237]              __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L1238]              __tmp__owner_Ownable := owner_Ownable;
[L1239]              __tmp___paused_Pausable := _paused_Pausable;
[L1240]              __tmp__name_UPCToken := name_UPCToken;
[L1241]              __tmp__symbol_UPCToken := symbol_UPCToken;
[L1242]              __tmp__decimals_UPCToken := decimals_UPCToken;
[L1243]              __tmp__INIT_TOTALSUPPLY_UPCToken := INIT_TOTALSUPPLY_UPCToken;
[L1244]  CALL        call __ret_0_ := transfer~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, to_s648, value_s648);
[L3442]  CALL        call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L4963]  COND FALSE  !(!!__tmp___paused_Pausable[this])
[L3442]  RET         call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L3443]  COND FALSE  !(revert)
[L3446]  COND TRUE   __tmp__DType[this] == UPCToken
[L3447]  CALL        call __var_11 := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, to_s648, value_s648);
[L2713]  COND TRUE   __tmp__DType[this] == UPCToken
[L2714]  CALL        call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, recipient_s261, amount_s261);
[L3035]              __var_4 := null;
[L3036]  COND FALSE  !(!(sender_s444 != null))
[L3040]              __var_5 := null;
[L3041]  COND FALSE  !(!(recipient_s444 != null))
[L3045]  CALL        call __var_6 := sub~uint256~uint256~string_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][sender_s444], amount_s444, -412855710);
[L2508]  COND TRUE   !(b_s53 <= a_s53)
[L2509]              revert := true;
[L3045]  RET         call __var_6 := sub~uint256~uint256~string_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][sender_s444], amount_s444, -412855710);
[L3046]  COND TRUE   revert
[L2714]  RET         call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, recipient_s261, amount_s261);
[L2715]  COND TRUE   revert
[L3447]  RET         call __var_11 := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, to_s648, value_s648);
[L3448]  COND TRUE   revert
[L1244]  RET         call __ret_0_ := transfer~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, to_s648, value_s648);
[L1245]              assume revert || gas < 0;
[L5646]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s648, value_s648);
[L5748]  RET         call CorralChoice_UPCToken(this);

[2020-11-25 07:50:23,695 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 07:50:23,696 INFO  L82        PathProgramCache]: Analyzing trace with hash -2002981948, now seen corresponding path program 1 times
[2020-11-25 07:50:23,696 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 07:50:23,707 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 07:50:23,808 INFO  L134       CoverageAnalysis]: Checked inductivity of 161 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 161 trivial. 0 not checked.
[2020-11-25 07:50:23,809 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 07:50:23,809 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [9] imperfect sequences [] total 9
[2020-11-25 07:50:23,809 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 07:50:23,809 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 9 interpolants.
[2020-11-25 07:50:23,809 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=15, Invalid=57, Unknown=0, NotChecked=0, Total=72
[2020-11-25 07:50:23,809 INFO  L87              Difference]: Start difference. First operand 3500 states and 3989 transitions. cyclomatic complexity: 493 Second operand 9 states.
[2020-11-25 07:50:24,880 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 07:50:24,880 INFO  L93              Difference]: Finished difference Result 3634 states and 4184 transitions.
[2020-11-25 07:50:24,880 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 10 states. 
[2020-11-25 07:50:24,880 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 3634 states and 4184 transitions.
[2020-11-25 07:50:24,888 INFO  L131   ngComponentsAnalysis]: Automaton has 4 accepting balls. 16
[2020-11-25 07:50:24,896 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 3634 states to 3634 states and 4184 transitions.
[2020-11-25 07:50:24,896 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1170
[2020-11-25 07:50:24,897 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1170
[2020-11-25 07:50:24,897 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 3634 states and 4184 transitions.
[2020-11-25 07:50:24,899 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 07:50:24,899 INFO  L728         BuchiCegarLoop]: Abstraction has 3634 states and 4184 transitions.
[2020-11-25 07:50:24,902 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 3634 states and 4184 transitions.
[2020-11-25 07:50:24,925 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 3634 to 3502.
[2020-11-25 07:50:24,925 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 3502 states.
[2020-11-25 07:50:24,929 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 3502 states to 3502 states and 3992 transitions.
[2020-11-25 07:50:24,929 INFO  L751         BuchiCegarLoop]: Abstraction has 3502 states and 3992 transitions.
[2020-11-25 07:50:24,929 INFO  L631         BuchiCegarLoop]: Abstraction has 3502 states and 3992 transitions.
[2020-11-25 07:50:24,929 INFO  L445         BuchiCegarLoop]: ======== Iteration 8============
[2020-11-25 07:50:24,929 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 3502 states and 3992 transitions.
[2020-11-25 07:50:24,933 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 8
[2020-11-25 07:50:24,934 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 07:50:24,934 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 07:50:24,935 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 07:50:24,935 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_ERC20Pausable0 := false;
[L2]                 call_transfer_ERC20Pausable0 := false;
[L2]     CALL        call main();
[L5738]              assume null == 0;
[L5739]  CALL        call this := FreshRefGenerator__success();
[L2443]              havoc newRef;
[L2444]              assume Alloc[newRef] == false;
[L2445]              Alloc[newRef] := true;
[L2446]              assume newRef != null;
[L5739]  RET         call this := FreshRefGenerator__success();
[L5740]              assume now >= 0;
[L5741]              assume DType[this] == UPCToken;
[L5742]              assume msgvalue_MSG == 0;
[L5743]              gas := gas - 53000;
[L5744]  CALL        call UPCToken_UPCToken(this, msgsender_MSG, msgvalue_MSG);
[L1537]              havoc __exception;
[L1538]              revert := false;
[L1539]  COND FALSE  !(__exception)
[L1563]  CALL        call UPCToken_UPCToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3753]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2631]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2616]              assume msgsender_MSG != null;
[L2617]              Balance[this] := 0;
[L2631]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2632]  COND FALSE  !(revert)
[L3753]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3754]  COND FALSE  !(revert)
[L3757]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2677]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2631]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2616]              assume msgsender_MSG != null;
[L2617]              Balance[this] := 0;
[L2631]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2632]  COND FALSE  !(revert)
[L2677]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2678]  COND FALSE  !(revert)
[L2681]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2653]              assume msgsender_MSG != null;
[L2654]              Balance[this] := 0;
[L2655]              _balances_ERC20[this] := zeroRefintArr();
[L2656]              sum__balances0[this] := 0;
[L2657]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2658]              sum__allowances1[this] := 0;
[L2659]              _totalSupply_ERC20[this] := 0;
[L2681]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2682]  COND FALSE  !(revert)
[L3757]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3758]  COND FALSE  !(revert)
[L3761]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3161]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3145]              assume msgsender_MSG != null;
[L3146]              Balance[this] := 0;
[L3147]              owner_Ownable[this] := null;
[L3161]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3162]  COND FALSE  !(revert)
[L3761]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3762]  COND FALSE  !(revert)
[L3765]  CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L3298]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3161]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3145]              assume msgsender_MSG != null;
[L3146]              Balance[this] := 0;
[L3147]              owner_Ownable[this] := null;
[L3161]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3162]  COND FALSE  !(revert)
[L3298]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3299]  COND FALSE  !(revert)
[L3302]  CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3277]              assume msgsender_MSG != null;
[L3278]              Balance[this] := 0;
[L3279]              _paused_Pausable[this] := false;
[L3281]              _paused_Pausable[this] := false;
[L3302]  RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3303]  COND FALSE  !(revert)
[L3765]  RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L3766]  COND FALSE  !(revert)
[L3769]  CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L3416]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2631]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2616]              assume msgsender_MSG != null;
[L2617]              Balance[this] := 0;
[L2631]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2632]  COND FALSE  !(revert)
[L3416]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3417]  COND FALSE  !(revert)
[L3420]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2677]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2631]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2616]              assume msgsender_MSG != null;
[L2617]              Balance[this] := 0;
[L2631]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2632]  COND FALSE  !(revert)
[L2677]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2678]  COND FALSE  !(revert)
[L2681]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2653]              assume msgsender_MSG != null;
[L2654]              Balance[this] := 0;
[L2655]              _balances_ERC20[this] := zeroRefintArr();
[L2656]              sum__balances0[this] := 0;
[L2657]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2658]              sum__allowances1[this] := 0;
[L2659]              _totalSupply_ERC20[this] := 0;
[L2681]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2682]  COND FALSE  !(revert)
[L3420]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3421]  COND FALSE  !(revert)
[L3424]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3161]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3145]              assume msgsender_MSG != null;
[L3146]              Balance[this] := 0;
[L3147]              owner_Ownable[this] := null;
[L3161]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3162]  COND FALSE  !(revert)
[L3424]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3425]  COND FALSE  !(revert)
[L3428]  CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L3298]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3161]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3145]              assume msgsender_MSG != null;
[L3146]              Balance[this] := 0;
[L3147]              owner_Ownable[this] := null;
[L3161]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3162]  COND FALSE  !(revert)
[L3298]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3299]  COND FALSE  !(revert)
[L3302]  CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3277]              assume msgsender_MSG != null;
[L3278]              Balance[this] := 0;
[L3279]              _paused_Pausable[this] := false;
[L3281]              _paused_Pausable[this] := false;
[L3302]  RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3303]  COND FALSE  !(revert)
[L3428]  RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L3429]  COND FALSE  !(revert)
[L3432]  CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3385]              assume msgsender_MSG != null;
[L3386]              Balance[this] := 0;
[L3432]  RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3433]  COND FALSE  !(revert)
[L3769]  RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L3770]  COND FALSE  !(revert)
[L3773]  CALL        call UPCToken_UPCToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3708]              assume msgsender_MSG != null;
[L3709]              Balance[this] := 0;
[L3710]              name_UPCToken[this] := 995162267;
[L3711]              symbol_UPCToken[this] := 189219111;
[L3712]              decimals_UPCToken[this] := 18;
[L3713]              INIT_TOTALSUPPLY_UPCToken[this] := 1000000000;
[L3715]              owner_Ownable[this] := msgsender_MSG;
[L3716]              _totalSupply_ERC20[this] := INIT_TOTALSUPPLY_UPCToken[this];
[L3717]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][owner_Ownable[this]];
[L3718]              _balances_ERC20[this][owner_Ownable[this]] := _totalSupply_ERC20[this];
[L3719]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][owner_Ownable[this]];
[L3720]              assert { :EventEmitted "Transfer_UPCToken" } true;
[L3773]  RET         call UPCToken_UPCToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3774]  COND FALSE  !(revert)
[L1563]  RET         call UPCToken_UPCToken__success(this, msgsender_MSG, msgvalue_MSG);
[L1564]              assume !revert && gas >= 0;
[L5744]  RET         call UPCToken_UPCToken(this, msgsender_MSG, msgvalue_MSG);
[L5745]              assume !revert && gas >= 0;
[L5748]  CALL        call CorralChoice_UPCToken(this);
[L5583]              havoc msgsender_MSG;
[L5584]              havoc msgvalue_MSG;
[L5585]              havoc choice;
[L5586]              havoc __ret_0_totalSupply;
[L5587]              havoc account_s242;
[L5588]              havoc __ret_0_balanceOf;
[L5589]              havoc to_s648;
[L5590]              havoc value_s648;
[L5591]              havoc __ret_0_transfer;
[L5592]              havoc owner_s277;
[L5593]              havoc spender_s277;
[L5594]              havoc __ret_0_allowance;
[L5595]              havoc spender_s687;
[L5596]              havoc value_s687;
[L5597]              havoc __ret_0_approve;
[L5598]              havoc from_s669;
[L5599]              havoc to_s669;
[L5600]              havoc value_s669;
[L5601]              havoc __ret_0_transferFrom;
[L5602]              havoc spender_s705;
[L5603]              havoc addedValue_s705;
[L5604]              havoc __ret_0_increaseAllowance;
[L5605]              havoc spender_s723;
[L5606]              havoc subtractedValue_s723;
[L5607]              havoc __ret_0_decreaseAllowance;
[L5608]              havoc __ret_0_owner;
[L5609]              havoc _newOwner_s519;
[L5610]              havoc __ret_0_paused;
[L5611]              havoc __ret_0_name;
[L5612]              havoc __ret_0_symbol;
[L5613]              havoc __ret_0_decimals;
[L5614]              havoc tmpNow;
[L5615]              havoc gas;
[L5616]              assume gas > 4000000 && gas <= 8000000;
[L5617]              tmpNow := now;
[L5618]              havoc now;
[L5619]              assume now > tmpNow;
[L5620]              assume msgsender_MSG != null;
[L5621]              assume DType[msgsender_MSG] != SafeMath;
[L5622]              assume DType[msgsender_MSG] != IERC20;
[L5623]              assume DType[msgsender_MSG] != ERC20;
[L5624]              assume DType[msgsender_MSG] != Ownable;
[L5625]              assume DType[msgsender_MSG] != Pausable;
[L5626]              assume DType[msgsender_MSG] != ERC20Pausable;
[L5627]              assume DType[msgsender_MSG] != UPCToken;
[L5628]              Alloc[msgsender_MSG] := true;
[L5629]  COND FALSE  !(choice == 16)
[L5635]  COND FALSE  !(choice == 15)
[L5641]  COND TRUE   choice == 14
[L5642]              gas := gas - 21000;
[L5643]  COND TRUE   gas >= 0
[L5644]              assume value_s648 >= 0 && value_s648 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5645]              assume msgvalue_MSG == 0;
[L5646]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s648, value_s648);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == to_s648 && value_s648 <= _balances_ERC20[this][msgsender_MSG]) && value_s648 >= 0) && value_s648 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s648] >= 0) && _balances_ERC20[this][to_s648] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC20Pausable0 := true;
[L2]                 call_transfer_ERC20Pausable0 := false;
[L2]                 revert := revert_hold;
[L1221]              havoc __exception;
[L1222]              revert := false;
[L1223]  COND FALSE  !(__exception)
[L1247]  CALL        call __ret_0_ := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s648, value_s648);
[L3467]  CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4971]  COND FALSE  !(!!_paused_Pausable[this])
[L3467]  RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3468]  COND FALSE  !(revert)
[L3471]  COND TRUE   DType[this] == UPCToken
[L3472]  CALL        call __var_11 := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s648, value_s648);
[L2737]  COND TRUE   DType[this] == UPCToken
[L2738]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, recipient_s261, amount_s261);
[L3067]              __var_4 := null;
[L3068]  COND FALSE  !(!(sender_s444 != null))
[L3072]              __var_5 := null;
[L3073]  COND FALSE  !(!(recipient_s444 != null))
[L3077]  CALL        call __var_6 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s444], amount_s444, -412855710);
[L2520]  COND FALSE  !(!(b_s53 <= a_s53))
[L2524]              c_s53 := (a_s53 - b_s53) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2525]              __ret_0_ := c_s53;
[L3077]  RET         call __var_6 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s444], amount_s444, -412855710);
[L3078]  COND FALSE  !(revert)
[L3081]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s444];
[L3082]              _balances_ERC20[this][sender_s444] := __var_6;
[L3083]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s444];
[L3084]  CALL        call __var_7 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s444], amount_s444);
[L2496]              c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2497]  COND FALSE  !(!(c_s26 >= a_s26))
[L2501]              __ret_0_ := c_s26;
[L3084]  RET         call __var_7 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s444], amount_s444);
[L3085]  COND FALSE  !(revert)
[L3088]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s444];
[L3089]              _balances_ERC20[this][recipient_s444] := __var_7;
[L3090]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s444];
[L3091]              assert { :EventEmitted "Transfer_ERC20" } true;
[L2738]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, recipient_s261, amount_s261);
[L2739]  COND FALSE  !(revert)
[L2755]              __ret_0_ := true;
[L3472]  RET         call __var_11 := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s648, value_s648);
[L3473]  COND FALSE  !(revert)
[L3484]              __ret_0_ := __var_11;
[L1247]  RET         call __ret_0_ := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s648, value_s648);
[L1248]              assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((__ret_0_ == true && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowances_ERC20[this] == old(_allowances_ERC20[this])) && _paused_Pausable[this] == old(_paused_Pausable[this])) && owner_Ownable[this] == old(owner_Ownable[this]));
[L2]                 revert := revert_hold;
[L5646]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s648, value_s648);
[L5748]  RET         call CorralChoice_UPCToken(this);

Loop:
[L5748]  CALL        call CorralChoice_UPCToken(this);
[L5583]              havoc msgsender_MSG;
[L5584]              havoc msgvalue_MSG;
[L5585]              havoc choice;
[L5586]              havoc __ret_0_totalSupply;
[L5587]              havoc account_s242;
[L5588]              havoc __ret_0_balanceOf;
[L5589]              havoc to_s648;
[L5590]              havoc value_s648;
[L5591]              havoc __ret_0_transfer;
[L5592]              havoc owner_s277;
[L5593]              havoc spender_s277;
[L5594]              havoc __ret_0_allowance;
[L5595]              havoc spender_s687;
[L5596]              havoc value_s687;
[L5597]              havoc __ret_0_approve;
[L5598]              havoc from_s669;
[L5599]              havoc to_s669;
[L5600]              havoc value_s669;
[L5601]              havoc __ret_0_transferFrom;
[L5602]              havoc spender_s705;
[L5603]              havoc addedValue_s705;
[L5604]              havoc __ret_0_increaseAllowance;
[L5605]              havoc spender_s723;
[L5606]              havoc subtractedValue_s723;
[L5607]              havoc __ret_0_decreaseAllowance;
[L5608]              havoc __ret_0_owner;
[L5609]              havoc _newOwner_s519;
[L5610]              havoc __ret_0_paused;
[L5611]              havoc __ret_0_name;
[L5612]              havoc __ret_0_symbol;
[L5613]              havoc __ret_0_decimals;
[L5614]              havoc tmpNow;
[L5615]              havoc gas;
[L5616]              assume gas > 4000000 && gas <= 8000000;
[L5617]              tmpNow := now;
[L5618]              havoc now;
[L5619]              assume now > tmpNow;
[L5620]              assume msgsender_MSG != null;
[L5621]              assume DType[msgsender_MSG] != SafeMath;
[L5622]              assume DType[msgsender_MSG] != IERC20;
[L5623]              assume DType[msgsender_MSG] != ERC20;
[L5624]              assume DType[msgsender_MSG] != Ownable;
[L5625]              assume DType[msgsender_MSG] != Pausable;
[L5626]              assume DType[msgsender_MSG] != ERC20Pausable;
[L5627]              assume DType[msgsender_MSG] != UPCToken;
[L5628]              Alloc[msgsender_MSG] := true;
[L5629]  COND FALSE  !(choice == 16)
[L5635]  COND FALSE  !(choice == 15)
[L5641]  COND TRUE   choice == 14
[L5642]              gas := gas - 21000;
[L5643]  COND TRUE   gas >= 0
[L5644]              assume value_s648 >= 0 && value_s648 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5645]              assume msgvalue_MSG == 0;
[L5646]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s648, value_s648);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == to_s648 && value_s648 <= _balances_ERC20[this][msgsender_MSG]) && value_s648 >= 0) && value_s648 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s648] >= 0) && _balances_ERC20[this][to_s648] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC20Pausable0 := true;
[L2]                 call_transfer_ERC20Pausable0 := false;
[L2]                 revert := revert_hold;
[L1221]              havoc __exception;
[L1222]              revert := false;
[L1223]  COND FALSE  !(__exception)
[L1247]  CALL        call __ret_0_ := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s648, value_s648);
[L3467]  CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4971]  COND FALSE  !(!!_paused_Pausable[this])
[L3467]  RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3468]  COND FALSE  !(revert)
[L3471]  COND TRUE   DType[this] == UPCToken
[L3472]  CALL        call __var_11 := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s648, value_s648);
[L2737]  COND TRUE   DType[this] == UPCToken
[L2738]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, recipient_s261, amount_s261);
[L3067]              __var_4 := null;
[L3068]  COND FALSE  !(!(sender_s444 != null))
[L3072]              __var_5 := null;
[L3073]  COND FALSE  !(!(recipient_s444 != null))
[L3077]  CALL        call __var_6 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s444], amount_s444, -412855710);
[L2520]  COND FALSE  !(!(b_s53 <= a_s53))
[L2524]              c_s53 := (a_s53 - b_s53) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2525]              __ret_0_ := c_s53;
[L3077]  RET         call __var_6 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s444], amount_s444, -412855710);
[L3078]  COND FALSE  !(revert)
[L3081]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s444];
[L3082]              _balances_ERC20[this][sender_s444] := __var_6;
[L3083]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s444];
[L3084]  CALL        call __var_7 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s444], amount_s444);
[L2496]              c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2497]  COND FALSE  !(!(c_s26 >= a_s26))
[L2501]              __ret_0_ := c_s26;
[L3084]  RET         call __var_7 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s444], amount_s444);
[L3085]  COND FALSE  !(revert)
[L3088]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s444];
[L3089]              _balances_ERC20[this][recipient_s444] := __var_7;
[L3090]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s444];
[L3091]              assert { :EventEmitted "Transfer_ERC20" } true;
[L2738]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, recipient_s261, amount_s261);
[L2739]  COND FALSE  !(revert)
[L2755]              __ret_0_ := true;
[L3472]  RET         call __var_11 := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s648, value_s648);
[L3473]  COND FALSE  !(revert)
[L3484]              __ret_0_ := __var_11;
[L1247]  RET         call __ret_0_ := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s648, value_s648);
[L1248]              assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((__ret_0_ == true && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowances_ERC20[this] == old(_allowances_ERC20[this])) && _paused_Pausable[this] == old(_paused_Pausable[this])) && owner_Ownable[this] == old(owner_Ownable[this]));
[L2]                 revert := revert_hold;
[L5646]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s648, value_s648);
[L5748]  RET         call CorralChoice_UPCToken(this);

[2020-11-25 07:50:24,938 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 07:50:24,939 INFO  L82        PathProgramCache]: Analyzing trace with hash -1108453225, now seen corresponding path program 1 times
[2020-11-25 07:50:24,939 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 07:50:24,983 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 07:50:25,804 INFO  L134       CoverageAnalysis]: Checked inductivity of 161 backedges. 10 proven. 0 refuted. 0 times theorem prover too weak. 151 trivial. 0 not checked.
[2020-11-25 07:50:25,805 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 07:50:25,805 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [30] imperfect sequences [] total 30
[2020-11-25 07:50:25,805 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 07:50:25,806 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 31 interpolants.
[2020-11-25 07:50:25,806 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=77, Invalid=853, Unknown=0, NotChecked=0, Total=930
[2020-11-25 07:50:25,806 INFO  L87              Difference]: Start difference. First operand 3502 states and 3992 transitions. cyclomatic complexity: 494 Second operand 31 states.
[2020-11-25 07:50:32,759 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 07:50:32,759 INFO  L93              Difference]: Finished difference Result 3575 states and 4121 transitions.
[2020-11-25 07:50:32,759 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 33 states. 
[2020-11-25 07:50:32,759 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 3575 states and 4121 transitions.
[2020-11-25 07:50:32,766 INFO  L131   ngComponentsAnalysis]: Automaton has 4 accepting balls. 16
[2020-11-25 07:50:32,774 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 3575 states to 3575 states and 4121 transitions.
[2020-11-25 07:50:32,774 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1145
[2020-11-25 07:50:32,775 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1145
[2020-11-25 07:50:32,776 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 3575 states and 4121 transitions.
[2020-11-25 07:50:32,778 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 07:50:32,778 INFO  L728         BuchiCegarLoop]: Abstraction has 3575 states and 4121 transitions.
[2020-11-25 07:50:32,781 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 3575 states and 4121 transitions.
[2020-11-25 07:50:32,807 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 3575 to 3564.
[2020-11-25 07:50:32,808 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 3564 states.
[2020-11-25 07:50:32,811 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 3564 states to 3564 states and 4110 transitions.
[2020-11-25 07:50:32,811 INFO  L751         BuchiCegarLoop]: Abstraction has 3564 states and 4110 transitions.
[2020-11-25 07:50:32,812 INFO  L631         BuchiCegarLoop]: Abstraction has 3564 states and 4110 transitions.
[2020-11-25 07:50:32,812 INFO  L445         BuchiCegarLoop]: ======== Iteration 9============
[2020-11-25 07:50:32,812 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 3564 states and 4110 transitions.
[2020-11-25 07:50:32,815 INFO  L131   ngComponentsAnalysis]: Automaton has 4 accepting balls. 16
[2020-11-25 07:50:32,815 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 07:50:32,815 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 07:50:32,816 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 07:50:32,816 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_ERC20Pausable0 := false;
[L2]                 call_transfer_ERC20Pausable0 := false;
[L2]     CALL        call main();
[L5738]              assume null == 0;
[L5739]  CALL        call this := FreshRefGenerator__success();
[L2443]              havoc newRef;
[L2444]              assume Alloc[newRef] == false;
[L2445]              Alloc[newRef] := true;
[L2446]              assume newRef != null;
[L5739]  RET         call this := FreshRefGenerator__success();
[L5740]              assume now >= 0;
[L5741]              assume DType[this] == UPCToken;
[L5742]              assume msgvalue_MSG == 0;
[L5743]              gas := gas - 53000;
[L5744]  CALL        call UPCToken_UPCToken(this, msgsender_MSG, msgvalue_MSG);
[L1537]              havoc __exception;
[L1538]              revert := false;
[L1539]  COND FALSE  !(__exception)
[L1563]  CALL        call UPCToken_UPCToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3753]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2631]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2616]              assume msgsender_MSG != null;
[L2617]              Balance[this] := 0;
[L2631]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2632]  COND FALSE  !(revert)
[L3753]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3754]  COND FALSE  !(revert)
[L3757]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2677]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2631]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2616]              assume msgsender_MSG != null;
[L2617]              Balance[this] := 0;
[L2631]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2632]  COND FALSE  !(revert)
[L2677]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2678]  COND FALSE  !(revert)
[L2681]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2653]              assume msgsender_MSG != null;
[L2654]              Balance[this] := 0;
[L2655]              _balances_ERC20[this] := zeroRefintArr();
[L2656]              sum__balances0[this] := 0;
[L2657]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2658]              sum__allowances1[this] := 0;
[L2659]              _totalSupply_ERC20[this] := 0;
[L2681]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2682]  COND FALSE  !(revert)
[L3757]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3758]  COND FALSE  !(revert)
[L3761]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3161]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3145]              assume msgsender_MSG != null;
[L3146]              Balance[this] := 0;
[L3147]              owner_Ownable[this] := null;
[L3161]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3162]  COND FALSE  !(revert)
[L3761]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3762]  COND FALSE  !(revert)
[L3765]  CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L3298]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3161]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3145]              assume msgsender_MSG != null;
[L3146]              Balance[this] := 0;
[L3147]              owner_Ownable[this] := null;
[L3161]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3162]  COND FALSE  !(revert)
[L3298]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3299]  COND FALSE  !(revert)
[L3302]  CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3277]              assume msgsender_MSG != null;
[L3278]              Balance[this] := 0;
[L3279]              _paused_Pausable[this] := false;
[L3281]              _paused_Pausable[this] := false;
[L3302]  RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3303]  COND FALSE  !(revert)
[L3765]  RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L3766]  COND FALSE  !(revert)
[L3769]  CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L3416]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2631]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2616]              assume msgsender_MSG != null;
[L2617]              Balance[this] := 0;
[L2631]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2632]  COND FALSE  !(revert)
[L3416]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3417]  COND FALSE  !(revert)
[L3420]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2677]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2631]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2616]              assume msgsender_MSG != null;
[L2617]              Balance[this] := 0;
[L2631]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2632]  COND FALSE  !(revert)
[L2677]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2678]  COND FALSE  !(revert)
[L2681]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2653]              assume msgsender_MSG != null;
[L2654]              Balance[this] := 0;
[L2655]              _balances_ERC20[this] := zeroRefintArr();
[L2656]              sum__balances0[this] := 0;
[L2657]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2658]              sum__allowances1[this] := 0;
[L2659]              _totalSupply_ERC20[this] := 0;
[L2681]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2682]  COND FALSE  !(revert)
[L3420]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3421]  COND FALSE  !(revert)
[L3424]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3161]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3145]              assume msgsender_MSG != null;
[L3146]              Balance[this] := 0;
[L3147]              owner_Ownable[this] := null;
[L3161]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3162]  COND FALSE  !(revert)
[L3424]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3425]  COND FALSE  !(revert)
[L3428]  CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L3298]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3161]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3145]              assume msgsender_MSG != null;
[L3146]              Balance[this] := 0;
[L3147]              owner_Ownable[this] := null;
[L3161]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3162]  COND FALSE  !(revert)
[L3298]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3299]  COND FALSE  !(revert)
[L3302]  CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3277]              assume msgsender_MSG != null;
[L3278]              Balance[this] := 0;
[L3279]              _paused_Pausable[this] := false;
[L3281]              _paused_Pausable[this] := false;
[L3302]  RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3303]  COND FALSE  !(revert)
[L3428]  RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L3429]  COND FALSE  !(revert)
[L3432]  CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3385]              assume msgsender_MSG != null;
[L3386]              Balance[this] := 0;
[L3432]  RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3433]  COND FALSE  !(revert)
[L3769]  RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L3770]  COND FALSE  !(revert)
[L3773]  CALL        call UPCToken_UPCToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3708]              assume msgsender_MSG != null;
[L3709]              Balance[this] := 0;
[L3710]              name_UPCToken[this] := 995162267;
[L3711]              symbol_UPCToken[this] := 189219111;
[L3712]              decimals_UPCToken[this] := 18;
[L3713]              INIT_TOTALSUPPLY_UPCToken[this] := 1000000000;
[L3715]              owner_Ownable[this] := msgsender_MSG;
[L3716]              _totalSupply_ERC20[this] := INIT_TOTALSUPPLY_UPCToken[this];
[L3717]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][owner_Ownable[this]];
[L3718]              _balances_ERC20[this][owner_Ownable[this]] := _totalSupply_ERC20[this];
[L3719]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][owner_Ownable[this]];
[L3720]              assert { :EventEmitted "Transfer_UPCToken" } true;
[L3773]  RET         call UPCToken_UPCToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3774]  COND FALSE  !(revert)
[L1563]  RET         call UPCToken_UPCToken__success(this, msgsender_MSG, msgvalue_MSG);
[L1564]              assume !revert && gas >= 0;
[L5744]  RET         call UPCToken_UPCToken(this, msgsender_MSG, msgvalue_MSG);
[L5745]              assume !revert && gas >= 0;
[L5748]  CALL        call CorralChoice_UPCToken(this);
[L5583]              havoc msgsender_MSG;
[L5584]              havoc msgvalue_MSG;
[L5585]              havoc choice;
[L5586]              havoc __ret_0_totalSupply;
[L5587]              havoc account_s242;
[L5588]              havoc __ret_0_balanceOf;
[L5589]              havoc to_s648;
[L5590]              havoc value_s648;
[L5591]              havoc __ret_0_transfer;
[L5592]              havoc owner_s277;
[L5593]              havoc spender_s277;
[L5594]              havoc __ret_0_allowance;
[L5595]              havoc spender_s687;
[L5596]              havoc value_s687;
[L5597]              havoc __ret_0_approve;
[L5598]              havoc from_s669;
[L5599]              havoc to_s669;
[L5600]              havoc value_s669;
[L5601]              havoc __ret_0_transferFrom;
[L5602]              havoc spender_s705;
[L5603]              havoc addedValue_s705;
[L5604]              havoc __ret_0_increaseAllowance;
[L5605]              havoc spender_s723;
[L5606]              havoc subtractedValue_s723;
[L5607]              havoc __ret_0_decreaseAllowance;
[L5608]              havoc __ret_0_owner;
[L5609]              havoc _newOwner_s519;
[L5610]              havoc __ret_0_paused;
[L5611]              havoc __ret_0_name;
[L5612]              havoc __ret_0_symbol;
[L5613]              havoc __ret_0_decimals;
[L5614]              havoc tmpNow;
[L5615]              havoc gas;
[L5616]              assume gas > 4000000 && gas <= 8000000;
[L5617]              tmpNow := now;
[L5618]              havoc now;
[L5619]              assume now > tmpNow;
[L5620]              assume msgsender_MSG != null;
[L5621]              assume DType[msgsender_MSG] != SafeMath;
[L5622]              assume DType[msgsender_MSG] != IERC20;
[L5623]              assume DType[msgsender_MSG] != ERC20;
[L5624]              assume DType[msgsender_MSG] != Ownable;
[L5625]              assume DType[msgsender_MSG] != Pausable;
[L5626]              assume DType[msgsender_MSG] != ERC20Pausable;
[L5627]              assume DType[msgsender_MSG] != UPCToken;
[L5628]              Alloc[msgsender_MSG] := true;
[L5629]  COND FALSE  !(choice == 16)
[L5635]  COND FALSE  !(choice == 15)
[L5641]  COND TRUE   choice == 14
[L5642]              gas := gas - 21000;
[L5643]  COND TRUE   gas >= 0
[L5644]              assume value_s648 >= 0 && value_s648 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5645]              assume msgvalue_MSG == 0;
[L5646]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s648, value_s648);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == to_s648 && value_s648 <= _balances_ERC20[this][msgsender_MSG]) && value_s648 >= 0) && value_s648 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s648] >= 0) && _balances_ERC20[this][to_s648] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC20Pausable0 := true;
[L2]                 call_transfer_ERC20Pausable0 := false;
[L2]                 revert := revert_hold;
[L1221]              havoc __exception;
[L1222]              revert := false;
[L1223]  COND TRUE   __exception
[L1224]              __tmp__Balance := Balance;
[L1225]              __tmp__DType := DType;
[L1226]              __tmp__Alloc := Alloc;
[L1227]              __tmp__balance_ADDR := balance_ADDR;
[L1228]              __tmp__M_Ref_int := M_Ref_int;
[L1229]              __tmp__sum__balances0 := sum__balances0;
[L1230]              __tmp__alloc__allowances_ERC20_lvl0 := alloc__allowances_ERC20_lvl0;
[L1231]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L1232]              __tmp__sum__allowances1 := sum__allowances1;
[L1233]              __tmp__Length := Length;
[L1234]              __tmp__now := now;
[L1235]              __tmp___balances_ERC20 := _balances_ERC20;
[L1236]              __tmp___allowances_ERC20 := _allowances_ERC20;
[L1237]              __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L1238]              __tmp__owner_Ownable := owner_Ownable;
[L1239]              __tmp___paused_Pausable := _paused_Pausable;
[L1240]              __tmp__name_UPCToken := name_UPCToken;
[L1241]              __tmp__symbol_UPCToken := symbol_UPCToken;
[L1242]              __tmp__decimals_UPCToken := decimals_UPCToken;
[L1243]              __tmp__INIT_TOTALSUPPLY_UPCToken := INIT_TOTALSUPPLY_UPCToken;
[L1244]  CALL        call __ret_0_ := transfer~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, to_s648, value_s648);
[L3442]  CALL        call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L4963]  COND FALSE  !(!!__tmp___paused_Pausable[this])
[L3442]  RET         call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L3443]  COND FALSE  !(revert)
[L3446]  COND TRUE   __tmp__DType[this] == UPCToken
[L3447]  CALL        call __var_11 := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, to_s648, value_s648);
[L2713]  COND TRUE   __tmp__DType[this] == UPCToken
[L2714]  CALL        call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, recipient_s261, amount_s261);
[L3035]              __var_4 := null;
[L3036]  COND FALSE  !(!(sender_s444 != null))
[L3040]              __var_5 := null;
[L3041]  COND FALSE  !(!(recipient_s444 != null))
[L3045]  CALL        call __var_6 := sub~uint256~uint256~string_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][sender_s444], amount_s444, -412855710);
[L2508]  COND FALSE  !(!(b_s53 <= a_s53))
[L2512]              c_s53 := (a_s53 - b_s53) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2513]              __ret_0_ := c_s53;
[L3045]  RET         call __var_6 := sub~uint256~uint256~string_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][sender_s444], amount_s444, -412855710);
[L3046]  COND FALSE  !(revert)
[L3049]              __tmp__sum__balances0[this] := __tmp__sum__balances0[this] - __tmp___balances_ERC20[this][sender_s444];
[L3050]              __tmp___balances_ERC20[this][sender_s444] := __var_6;
[L3051]              __tmp__sum__balances0[this] := __tmp__sum__balances0[this] + __tmp___balances_ERC20[this][sender_s444];
[L3052]  CALL        call __var_7 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][recipient_s444], amount_s444);
[L2484]              c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2485]  COND TRUE   !(c_s26 >= a_s26)
[L2486]              revert := true;
[L3052]  RET         call __var_7 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][recipient_s444], amount_s444);
[L3053]  COND TRUE   revert
[L2714]  RET         call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, recipient_s261, amount_s261);
[L2715]  COND TRUE   revert
[L3447]  RET         call __var_11 := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, to_s648, value_s648);
[L3448]  COND TRUE   revert
[L1244]  RET         call __ret_0_ := transfer~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, to_s648, value_s648);
[L1245]              assume revert || gas < 0;
[L5646]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s648, value_s648);
[L5748]  RET         call CorralChoice_UPCToken(this);

Loop:
[L5748]  CALL        call CorralChoice_UPCToken(this);
[L5583]              havoc msgsender_MSG;
[L5584]              havoc msgvalue_MSG;
[L5585]              havoc choice;
[L5586]              havoc __ret_0_totalSupply;
[L5587]              havoc account_s242;
[L5588]              havoc __ret_0_balanceOf;
[L5589]              havoc to_s648;
[L5590]              havoc value_s648;
[L5591]              havoc __ret_0_transfer;
[L5592]              havoc owner_s277;
[L5593]              havoc spender_s277;
[L5594]              havoc __ret_0_allowance;
[L5595]              havoc spender_s687;
[L5596]              havoc value_s687;
[L5597]              havoc __ret_0_approve;
[L5598]              havoc from_s669;
[L5599]              havoc to_s669;
[L5600]              havoc value_s669;
[L5601]              havoc __ret_0_transferFrom;
[L5602]              havoc spender_s705;
[L5603]              havoc addedValue_s705;
[L5604]              havoc __ret_0_increaseAllowance;
[L5605]              havoc spender_s723;
[L5606]              havoc subtractedValue_s723;
[L5607]              havoc __ret_0_decreaseAllowance;
[L5608]              havoc __ret_0_owner;
[L5609]              havoc _newOwner_s519;
[L5610]              havoc __ret_0_paused;
[L5611]              havoc __ret_0_name;
[L5612]              havoc __ret_0_symbol;
[L5613]              havoc __ret_0_decimals;
[L5614]              havoc tmpNow;
[L5615]              havoc gas;
[L5616]              assume gas > 4000000 && gas <= 8000000;
[L5617]              tmpNow := now;
[L5618]              havoc now;
[L5619]              assume now > tmpNow;
[L5620]              assume msgsender_MSG != null;
[L5621]              assume DType[msgsender_MSG] != SafeMath;
[L5622]              assume DType[msgsender_MSG] != IERC20;
[L5623]              assume DType[msgsender_MSG] != ERC20;
[L5624]              assume DType[msgsender_MSG] != Ownable;
[L5625]              assume DType[msgsender_MSG] != Pausable;
[L5626]              assume DType[msgsender_MSG] != ERC20Pausable;
[L5627]              assume DType[msgsender_MSG] != UPCToken;
[L5628]              Alloc[msgsender_MSG] := true;
[L5629]  COND FALSE  !(choice == 16)
[L5635]  COND FALSE  !(choice == 15)
[L5641]  COND TRUE   choice == 14
[L5642]              gas := gas - 21000;
[L5643]  COND TRUE   gas >= 0
[L5644]              assume value_s648 >= 0 && value_s648 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5645]              assume msgvalue_MSG == 0;
[L5646]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s648, value_s648);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == to_s648 && value_s648 <= _balances_ERC20[this][msgsender_MSG]) && value_s648 >= 0) && value_s648 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s648] >= 0) && _balances_ERC20[this][to_s648] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC20Pausable0 := true;
[L2]                 call_transfer_ERC20Pausable0 := false;
[L2]                 revert := revert_hold;
[L1221]              havoc __exception;
[L1222]              revert := false;
[L1223]  COND TRUE   __exception
[L1224]              __tmp__Balance := Balance;
[L1225]              __tmp__DType := DType;
[L1226]              __tmp__Alloc := Alloc;
[L1227]              __tmp__balance_ADDR := balance_ADDR;
[L1228]              __tmp__M_Ref_int := M_Ref_int;
[L1229]              __tmp__sum__balances0 := sum__balances0;
[L1230]              __tmp__alloc__allowances_ERC20_lvl0 := alloc__allowances_ERC20_lvl0;
[L1231]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L1232]              __tmp__sum__allowances1 := sum__allowances1;
[L1233]              __tmp__Length := Length;
[L1234]              __tmp__now := now;
[L1235]              __tmp___balances_ERC20 := _balances_ERC20;
[L1236]              __tmp___allowances_ERC20 := _allowances_ERC20;
[L1237]              __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L1238]              __tmp__owner_Ownable := owner_Ownable;
[L1239]              __tmp___paused_Pausable := _paused_Pausable;
[L1240]              __tmp__name_UPCToken := name_UPCToken;
[L1241]              __tmp__symbol_UPCToken := symbol_UPCToken;
[L1242]              __tmp__decimals_UPCToken := decimals_UPCToken;
[L1243]              __tmp__INIT_TOTALSUPPLY_UPCToken := INIT_TOTALSUPPLY_UPCToken;
[L1244]  CALL        call __ret_0_ := transfer~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, to_s648, value_s648);
[L3442]  CALL        call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L4963]  COND FALSE  !(!!__tmp___paused_Pausable[this])
[L3442]  RET         call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L3443]  COND FALSE  !(revert)
[L3446]  COND TRUE   __tmp__DType[this] == UPCToken
[L3447]  CALL        call __var_11 := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, to_s648, value_s648);
[L2713]  COND TRUE   __tmp__DType[this] == UPCToken
[L2714]  CALL        call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, recipient_s261, amount_s261);
[L3035]              __var_4 := null;
[L3036]  COND FALSE  !(!(sender_s444 != null))
[L3040]              __var_5 := null;
[L3041]  COND FALSE  !(!(recipient_s444 != null))
[L3045]  CALL        call __var_6 := sub~uint256~uint256~string_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][sender_s444], amount_s444, -412855710);
[L2508]  COND FALSE  !(!(b_s53 <= a_s53))
[L2512]              c_s53 := (a_s53 - b_s53) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2513]              __ret_0_ := c_s53;
[L3045]  RET         call __var_6 := sub~uint256~uint256~string_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][sender_s444], amount_s444, -412855710);
[L3046]  COND FALSE  !(revert)
[L3049]              __tmp__sum__balances0[this] := __tmp__sum__balances0[this] - __tmp___balances_ERC20[this][sender_s444];
[L3050]              __tmp___balances_ERC20[this][sender_s444] := __var_6;
[L3051]              __tmp__sum__balances0[this] := __tmp__sum__balances0[this] + __tmp___balances_ERC20[this][sender_s444];
[L3052]  CALL        call __var_7 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][recipient_s444], amount_s444);
[L2484]              c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2485]  COND TRUE   !(c_s26 >= a_s26)
[L2486]              revert := true;
[L3052]  RET         call __var_7 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][recipient_s444], amount_s444);
[L3053]  COND TRUE   revert
[L2714]  RET         call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, recipient_s261, amount_s261);
[L2715]  COND TRUE   revert
[L3447]  RET         call __var_11 := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, to_s648, value_s648);
[L3448]  COND TRUE   revert
[L1244]  RET         call __ret_0_ := transfer~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, to_s648, value_s648);
[L1245]              assume revert || gas < 0;
[L5646]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s648, value_s648);
[L5748]  RET         call CorralChoice_UPCToken(this);

[2020-11-25 07:50:32,821 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 07:50:32,821 INFO  L82        PathProgramCache]: Analyzing trace with hash 2003958203, now seen corresponding path program 1 times
[2020-11-25 07:50:32,822 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 07:50:32,837 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 07:50:33,099 INFO  L134       CoverageAnalysis]: Checked inductivity of 161 backedges. 10 proven. 0 refuted. 0 times theorem prover too weak. 151 trivial. 0 not checked.
[2020-11-25 07:50:33,100 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 07:50:33,100 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [27] imperfect sequences [] total 27
[2020-11-25 07:50:33,100 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 07:50:33,100 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 28 interpolants.
[2020-11-25 07:50:33,100 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=59, Invalid=697, Unknown=0, NotChecked=0, Total=756
[2020-11-25 07:50:33,101 INFO  L87              Difference]: Start difference. First operand 3564 states and 4110 transitions. cyclomatic complexity: 554 Second operand 28 states.
[2020-11-25 07:50:40,618 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 07:50:40,618 INFO  L93              Difference]: Finished difference Result 3668 states and 4295 transitions.
[2020-11-25 07:50:40,618 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 33 states. 
[2020-11-25 07:50:40,618 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 3668 states and 4295 transitions.
[2020-11-25 07:50:40,626 INFO  L131   ngComponentsAnalysis]: Automaton has 6 accepting balls. 24
[2020-11-25 07:50:40,635 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 3668 states to 3668 states and 4295 transitions.
[2020-11-25 07:50:40,635 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1172
[2020-11-25 07:50:40,635 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1172
[2020-11-25 07:50:40,635 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 3668 states and 4295 transitions.
[2020-11-25 07:50:40,638 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 07:50:40,638 INFO  L728         BuchiCegarLoop]: Abstraction has 3668 states and 4295 transitions.
[2020-11-25 07:50:40,640 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 3668 states and 4295 transitions.
[2020-11-25 07:50:40,660 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 3668 to 3445.
[2020-11-25 07:50:40,660 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 3445 states.
[2020-11-25 07:50:40,664 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 3445 states to 3445 states and 3918 transitions.
[2020-11-25 07:50:40,664 INFO  L751         BuchiCegarLoop]: Abstraction has 3445 states and 3918 transitions.
[2020-11-25 07:50:40,664 INFO  L631         BuchiCegarLoop]: Abstraction has 3445 states and 3918 transitions.
[2020-11-25 07:50:40,664 INFO  L445         BuchiCegarLoop]: ======== Iteration 10============
[2020-11-25 07:50:40,664 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 3445 states and 3918 transitions.
[2020-11-25 07:50:40,667 INFO  L131   ngComponentsAnalysis]: Automaton has 4 accepting balls. 8
[2020-11-25 07:50:40,667 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 07:50:40,667 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 07:50:40,668 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 07:50:40,668 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_ERC20Pausable0 := false;
[L2]                 call_transfer_ERC20Pausable0 := false;
[L2]     CALL        call main();
[L5738]              assume null == 0;
[L5739]  CALL        call this := FreshRefGenerator__success();
[L2443]              havoc newRef;
[L2444]              assume Alloc[newRef] == false;
[L2445]              Alloc[newRef] := true;
[L2446]              assume newRef != null;
[L5739]  RET         call this := FreshRefGenerator__success();
[L5740]              assume now >= 0;
[L5741]              assume DType[this] == UPCToken;
[L5742]              assume msgvalue_MSG == 0;
[L5743]              gas := gas - 53000;
[L5744]  CALL        call UPCToken_UPCToken(this, msgsender_MSG, msgvalue_MSG);
[L1537]              havoc __exception;
[L1538]              revert := false;
[L1539]  COND FALSE  !(__exception)
[L1563]  CALL        call UPCToken_UPCToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3753]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2631]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2616]              assume msgsender_MSG != null;
[L2617]              Balance[this] := 0;
[L2631]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2632]  COND FALSE  !(revert)
[L3753]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3754]  COND FALSE  !(revert)
[L3757]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2677]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2631]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2616]              assume msgsender_MSG != null;
[L2617]              Balance[this] := 0;
[L2631]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2632]  COND FALSE  !(revert)
[L2677]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2678]  COND FALSE  !(revert)
[L2681]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2653]              assume msgsender_MSG != null;
[L2654]              Balance[this] := 0;
[L2655]              _balances_ERC20[this] := zeroRefintArr();
[L2656]              sum__balances0[this] := 0;
[L2657]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2658]              sum__allowances1[this] := 0;
[L2659]              _totalSupply_ERC20[this] := 0;
[L2681]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2682]  COND FALSE  !(revert)
[L3757]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3758]  COND FALSE  !(revert)
[L3761]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3161]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3145]              assume msgsender_MSG != null;
[L3146]              Balance[this] := 0;
[L3147]              owner_Ownable[this] := null;
[L3161]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3162]  COND FALSE  !(revert)
[L3761]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3762]  COND FALSE  !(revert)
[L3765]  CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L3298]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3161]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3145]              assume msgsender_MSG != null;
[L3146]              Balance[this] := 0;
[L3147]              owner_Ownable[this] := null;
[L3161]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3162]  COND FALSE  !(revert)
[L3298]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3299]  COND FALSE  !(revert)
[L3302]  CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3277]              assume msgsender_MSG != null;
[L3278]              Balance[this] := 0;
[L3279]              _paused_Pausable[this] := false;
[L3281]              _paused_Pausable[this] := false;
[L3302]  RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3303]  COND FALSE  !(revert)
[L3765]  RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L3766]  COND FALSE  !(revert)
[L3769]  CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L3416]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2631]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2616]              assume msgsender_MSG != null;
[L2617]              Balance[this] := 0;
[L2631]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2632]  COND FALSE  !(revert)
[L3416]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3417]  COND FALSE  !(revert)
[L3420]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2677]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2631]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2616]              assume msgsender_MSG != null;
[L2617]              Balance[this] := 0;
[L2631]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2632]  COND FALSE  !(revert)
[L2677]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2678]  COND FALSE  !(revert)
[L2681]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2653]              assume msgsender_MSG != null;
[L2654]              Balance[this] := 0;
[L2655]              _balances_ERC20[this] := zeroRefintArr();
[L2656]              sum__balances0[this] := 0;
[L2657]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2658]              sum__allowances1[this] := 0;
[L2659]              _totalSupply_ERC20[this] := 0;
[L2681]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2682]  COND FALSE  !(revert)
[L3420]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3421]  COND FALSE  !(revert)
[L3424]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3161]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3145]              assume msgsender_MSG != null;
[L3146]              Balance[this] := 0;
[L3147]              owner_Ownable[this] := null;
[L3161]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3162]  COND FALSE  !(revert)
[L3424]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3425]  COND FALSE  !(revert)
[L3428]  CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L3298]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3161]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3145]              assume msgsender_MSG != null;
[L3146]              Balance[this] := 0;
[L3147]              owner_Ownable[this] := null;
[L3161]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3162]  COND FALSE  !(revert)
[L3298]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3299]  COND FALSE  !(revert)
[L3302]  CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3277]              assume msgsender_MSG != null;
[L3278]              Balance[this] := 0;
[L3279]              _paused_Pausable[this] := false;
[L3281]              _paused_Pausable[this] := false;
[L3302]  RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3303]  COND FALSE  !(revert)
[L3428]  RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L3429]  COND FALSE  !(revert)
[L3432]  CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3385]              assume msgsender_MSG != null;
[L3386]              Balance[this] := 0;
[L3432]  RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3433]  COND FALSE  !(revert)
[L3769]  RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L3770]  COND FALSE  !(revert)
[L3773]  CALL        call UPCToken_UPCToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3708]              assume msgsender_MSG != null;
[L3709]              Balance[this] := 0;
[L3710]              name_UPCToken[this] := 995162267;
[L3711]              symbol_UPCToken[this] := 189219111;
[L3712]              decimals_UPCToken[this] := 18;
[L3713]              INIT_TOTALSUPPLY_UPCToken[this] := 1000000000;
[L3715]              owner_Ownable[this] := msgsender_MSG;
[L3716]              _totalSupply_ERC20[this] := INIT_TOTALSUPPLY_UPCToken[this];
[L3717]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][owner_Ownable[this]];
[L3718]              _balances_ERC20[this][owner_Ownable[this]] := _totalSupply_ERC20[this];
[L3719]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][owner_Ownable[this]];
[L3720]              assert { :EventEmitted "Transfer_UPCToken" } true;
[L3773]  RET         call UPCToken_UPCToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3774]  COND FALSE  !(revert)
[L1563]  RET         call UPCToken_UPCToken__success(this, msgsender_MSG, msgvalue_MSG);
[L1564]              assume !revert && gas >= 0;
[L5744]  RET         call UPCToken_UPCToken(this, msgsender_MSG, msgvalue_MSG);
[L5745]              assume !revert && gas >= 0;
[L5748]  CALL        call CorralChoice_UPCToken(this);
[L5583]              havoc msgsender_MSG;
[L5584]              havoc msgvalue_MSG;
[L5585]              havoc choice;
[L5586]              havoc __ret_0_totalSupply;
[L5587]              havoc account_s242;
[L5588]              havoc __ret_0_balanceOf;
[L5589]              havoc to_s648;
[L5590]              havoc value_s648;
[L5591]              havoc __ret_0_transfer;
[L5592]              havoc owner_s277;
[L5593]              havoc spender_s277;
[L5594]              havoc __ret_0_allowance;
[L5595]              havoc spender_s687;
[L5596]              havoc value_s687;
[L5597]              havoc __ret_0_approve;
[L5598]              havoc from_s669;
[L5599]              havoc to_s669;
[L5600]              havoc value_s669;
[L5601]              havoc __ret_0_transferFrom;
[L5602]              havoc spender_s705;
[L5603]              havoc addedValue_s705;
[L5604]              havoc __ret_0_increaseAllowance;
[L5605]              havoc spender_s723;
[L5606]              havoc subtractedValue_s723;
[L5607]              havoc __ret_0_decreaseAllowance;
[L5608]              havoc __ret_0_owner;
[L5609]              havoc _newOwner_s519;
[L5610]              havoc __ret_0_paused;
[L5611]              havoc __ret_0_name;
[L5612]              havoc __ret_0_symbol;
[L5613]              havoc __ret_0_decimals;
[L5614]              havoc tmpNow;
[L5615]              havoc gas;
[L5616]              assume gas > 4000000 && gas <= 8000000;
[L5617]              tmpNow := now;
[L5618]              havoc now;
[L5619]              assume now > tmpNow;
[L5620]              assume msgsender_MSG != null;
[L5621]              assume DType[msgsender_MSG] != SafeMath;
[L5622]              assume DType[msgsender_MSG] != IERC20;
[L5623]              assume DType[msgsender_MSG] != ERC20;
[L5624]              assume DType[msgsender_MSG] != Ownable;
[L5625]              assume DType[msgsender_MSG] != Pausable;
[L5626]              assume DType[msgsender_MSG] != ERC20Pausable;
[L5627]              assume DType[msgsender_MSG] != UPCToken;
[L5628]              Alloc[msgsender_MSG] := true;
[L5629]  COND FALSE  !(choice == 16)
[L5635]  COND FALSE  !(choice == 15)
[L5641]  COND TRUE   choice == 14
[L5642]              gas := gas - 21000;
[L5643]  COND TRUE   gas >= 0
[L5644]              assume value_s648 >= 0 && value_s648 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5645]              assume msgvalue_MSG == 0;
[L5646]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s648, value_s648);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == to_s648 && value_s648 <= _balances_ERC20[this][msgsender_MSG]) && value_s648 >= 0) && value_s648 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s648] >= 0) && _balances_ERC20[this][to_s648] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC20Pausable0 := true;
[L2]                 call_transfer_ERC20Pausable0 := false;
[L2]                 revert := revert_hold;
[L1221]              havoc __exception;
[L1222]              revert := false;
[L1223]  COND TRUE   __exception
[L1224]              __tmp__Balance := Balance;
[L1225]              __tmp__DType := DType;
[L1226]              __tmp__Alloc := Alloc;
[L1227]              __tmp__balance_ADDR := balance_ADDR;
[L1228]              __tmp__M_Ref_int := M_Ref_int;
[L1229]              __tmp__sum__balances0 := sum__balances0;
[L1230]              __tmp__alloc__allowances_ERC20_lvl0 := alloc__allowances_ERC20_lvl0;
[L1231]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L1232]              __tmp__sum__allowances1 := sum__allowances1;
[L1233]              __tmp__Length := Length;
[L1234]              __tmp__now := now;
[L1235]              __tmp___balances_ERC20 := _balances_ERC20;
[L1236]              __tmp___allowances_ERC20 := _allowances_ERC20;
[L1237]              __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L1238]              __tmp__owner_Ownable := owner_Ownable;
[L1239]              __tmp___paused_Pausable := _paused_Pausable;
[L1240]              __tmp__name_UPCToken := name_UPCToken;
[L1241]              __tmp__symbol_UPCToken := symbol_UPCToken;
[L1242]              __tmp__decimals_UPCToken := decimals_UPCToken;
[L1243]              __tmp__INIT_TOTALSUPPLY_UPCToken := INIT_TOTALSUPPLY_UPCToken;
[L1244]  CALL        call __ret_0_ := transfer~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, to_s648, value_s648);
[L3442]  CALL        call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L4963]  COND FALSE  !(!!__tmp___paused_Pausable[this])
[L3442]  RET         call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L3443]  COND FALSE  !(revert)
[L3446]  COND TRUE   __tmp__DType[this] == UPCToken
[L3447]  CALL        call __var_11 := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, to_s648, value_s648);
[L2713]  COND TRUE   __tmp__DType[this] == UPCToken
[L2714]  CALL        call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, recipient_s261, amount_s261);
[L3035]              __var_4 := null;
[L3036]  COND FALSE  !(!(sender_s444 != null))
[L3040]              __var_5 := null;
[L3041]  COND FALSE  !(!(recipient_s444 != null))
[L3045]  CALL        call __var_6 := sub~uint256~uint256~string_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][sender_s444], amount_s444, -412855710);
[L2508]  COND FALSE  !(!(b_s53 <= a_s53))
[L2512]              c_s53 := (a_s53 - b_s53) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2513]              __ret_0_ := c_s53;
[L3045]  RET         call __var_6 := sub~uint256~uint256~string_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][sender_s444], amount_s444, -412855710);
[L3046]  COND FALSE  !(revert)
[L3049]              __tmp__sum__balances0[this] := __tmp__sum__balances0[this] - __tmp___balances_ERC20[this][sender_s444];
[L3050]              __tmp___balances_ERC20[this][sender_s444] := __var_6;
[L3051]              __tmp__sum__balances0[this] := __tmp__sum__balances0[this] + __tmp___balances_ERC20[this][sender_s444];
[L3052]  CALL        call __var_7 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][recipient_s444], amount_s444);
[L2484]              c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2485]  COND FALSE  !(!(c_s26 >= a_s26))
[L2489]              __ret_0_ := c_s26;
[L3052]  RET         call __var_7 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][recipient_s444], amount_s444);
[L3053]  COND FALSE  !(revert)
[L3056]              __tmp__sum__balances0[this] := __tmp__sum__balances0[this] - __tmp___balances_ERC20[this][recipient_s444];
[L3057]              __tmp___balances_ERC20[this][recipient_s444] := __var_7;
[L3058]              __tmp__sum__balances0[this] := __tmp__sum__balances0[this] + __tmp___balances_ERC20[this][recipient_s444];
[L2714]  RET         call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, recipient_s261, amount_s261);
[L2715]  COND FALSE  !(revert)
[L2731]              __ret_0_ := true;
[L3447]  RET         call __var_11 := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, to_s648, value_s648);
[L3448]  COND FALSE  !(revert)
[L3459]              __ret_0_ := __var_11;
[L1244]  RET         call __ret_0_ := transfer~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, to_s648, value_s648);
[L1245]              assume revert || gas < 0;
[L5646]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s648, value_s648);
[L5748]  RET         call CorralChoice_UPCToken(this);

Loop:
[L5748]  CALL        call CorralChoice_UPCToken(this);
[L5583]              havoc msgsender_MSG;
[L5584]              havoc msgvalue_MSG;
[L5585]              havoc choice;
[L5586]              havoc __ret_0_totalSupply;
[L5587]              havoc account_s242;
[L5588]              havoc __ret_0_balanceOf;
[L5589]              havoc to_s648;
[L5590]              havoc value_s648;
[L5591]              havoc __ret_0_transfer;
[L5592]              havoc owner_s277;
[L5593]              havoc spender_s277;
[L5594]              havoc __ret_0_allowance;
[L5595]              havoc spender_s687;
[L5596]              havoc value_s687;
[L5597]              havoc __ret_0_approve;
[L5598]              havoc from_s669;
[L5599]              havoc to_s669;
[L5600]              havoc value_s669;
[L5601]              havoc __ret_0_transferFrom;
[L5602]              havoc spender_s705;
[L5603]              havoc addedValue_s705;
[L5604]              havoc __ret_0_increaseAllowance;
[L5605]              havoc spender_s723;
[L5606]              havoc subtractedValue_s723;
[L5607]              havoc __ret_0_decreaseAllowance;
[L5608]              havoc __ret_0_owner;
[L5609]              havoc _newOwner_s519;
[L5610]              havoc __ret_0_paused;
[L5611]              havoc __ret_0_name;
[L5612]              havoc __ret_0_symbol;
[L5613]              havoc __ret_0_decimals;
[L5614]              havoc tmpNow;
[L5615]              havoc gas;
[L5616]              assume gas > 4000000 && gas <= 8000000;
[L5617]              tmpNow := now;
[L5618]              havoc now;
[L5619]              assume now > tmpNow;
[L5620]              assume msgsender_MSG != null;
[L5621]              assume DType[msgsender_MSG] != SafeMath;
[L5622]              assume DType[msgsender_MSG] != IERC20;
[L5623]              assume DType[msgsender_MSG] != ERC20;
[L5624]              assume DType[msgsender_MSG] != Ownable;
[L5625]              assume DType[msgsender_MSG] != Pausable;
[L5626]              assume DType[msgsender_MSG] != ERC20Pausable;
[L5627]              assume DType[msgsender_MSG] != UPCToken;
[L5628]              Alloc[msgsender_MSG] := true;
[L5629]  COND TRUE   choice == 16
[L5630]              gas := gas - 21000;
[L5631]  COND FALSE  !(gas >= 0)
[L5748]  RET         call CorralChoice_UPCToken(this);

[2020-11-25 07:50:40,671 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 07:50:40,671 INFO  L82        PathProgramCache]: Analyzing trace with hash -607202703, now seen corresponding path program 1 times
[2020-11-25 07:50:40,672 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 07:50:40,681 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 07:50:40,726 INFO  L134       CoverageAnalysis]: Checked inductivity of 161 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 161 trivial. 0 not checked.
[2020-11-25 07:50:40,726 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 07:50:40,726 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [5] imperfect sequences [] total 5
[2020-11-25 07:50:40,727 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 07:50:40,727 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 5 interpolants.
[2020-11-25 07:50:40,727 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=7, Invalid=13, Unknown=0, NotChecked=0, Total=20
[2020-11-25 07:50:40,727 INFO  L87              Difference]: Start difference. First operand 3445 states and 3918 transitions. cyclomatic complexity: 481 Second operand 5 states.
[2020-11-25 07:50:41,225 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 07:50:41,225 INFO  L93              Difference]: Finished difference Result 3999 states and 4722 transitions.
[2020-11-25 07:50:41,225 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 7 states. 
[2020-11-25 07:50:41,225 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 3999 states and 4722 transitions.
[2020-11-25 07:50:41,234 INFO  L131   ngComponentsAnalysis]: Automaton has 3 accepting balls. 24
[2020-11-25 07:50:41,244 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 3999 states to 3313 states and 3999 transitions.
[2020-11-25 07:50:41,244 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 803
[2020-11-25 07:50:41,244 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 803
[2020-11-25 07:50:41,244 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 3313 states and 3999 transitions.
[2020-11-25 07:50:41,247 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 07:50:41,247 INFO  L728         BuchiCegarLoop]: Abstraction has 3313 states and 3999 transitions.
[2020-11-25 07:50:41,249 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 3313 states and 3999 transitions.
[2020-11-25 07:50:41,266 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 3313 to 2735.
[2020-11-25 07:50:41,266 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 2735 states.
[2020-11-25 07:50:41,269 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 2735 states to 2735 states and 3127 transitions.
[2020-11-25 07:50:41,269 INFO  L751         BuchiCegarLoop]: Abstraction has 2735 states and 3127 transitions.
[2020-11-25 07:50:41,269 INFO  L631         BuchiCegarLoop]: Abstraction has 2735 states and 3127 transitions.
[2020-11-25 07:50:41,269 INFO  L445         BuchiCegarLoop]: ======== Iteration 11============
[2020-11-25 07:50:41,269 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2735 states and 3127 transitions.
[2020-11-25 07:50:41,272 INFO  L131   ngComponentsAnalysis]: Automaton has 3 accepting balls. 6
[2020-11-25 07:50:41,272 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 07:50:41,272 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 07:50:41,273 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 07:50:41,273 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_ERC20Pausable0 := false;
[L2]                 call_transfer_ERC20Pausable0 := false;
[L2]     CALL        call main();
[L5738]              assume null == 0;
[L5739]  CALL        call this := FreshRefGenerator__success();
[L2443]              havoc newRef;
[L2444]              assume Alloc[newRef] == false;
[L2445]              Alloc[newRef] := true;
[L2446]              assume newRef != null;
[L5739]  RET         call this := FreshRefGenerator__success();
[L5740]              assume now >= 0;
[L5741]              assume DType[this] == UPCToken;
[L5742]              assume msgvalue_MSG == 0;
[L5743]              gas := gas - 53000;
[L5744]  CALL        call UPCToken_UPCToken(this, msgsender_MSG, msgvalue_MSG);
[L1537]              havoc __exception;
[L1538]              revert := false;
[L1539]  COND FALSE  !(__exception)
[L1563]  CALL        call UPCToken_UPCToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3753]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2631]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2616]              assume msgsender_MSG != null;
[L2617]              Balance[this] := 0;
[L2631]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2632]  COND FALSE  !(revert)
[L3753]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3754]  COND FALSE  !(revert)
[L3757]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2677]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2631]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2616]              assume msgsender_MSG != null;
[L2617]              Balance[this] := 0;
[L2631]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2632]  COND FALSE  !(revert)
[L2677]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2678]  COND FALSE  !(revert)
[L2681]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2653]              assume msgsender_MSG != null;
[L2654]              Balance[this] := 0;
[L2655]              _balances_ERC20[this] := zeroRefintArr();
[L2656]              sum__balances0[this] := 0;
[L2657]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2658]              sum__allowances1[this] := 0;
[L2659]              _totalSupply_ERC20[this] := 0;
[L2681]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2682]  COND FALSE  !(revert)
[L3757]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3758]  COND FALSE  !(revert)
[L3761]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3161]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3145]              assume msgsender_MSG != null;
[L3146]              Balance[this] := 0;
[L3147]              owner_Ownable[this] := null;
[L3161]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3162]  COND FALSE  !(revert)
[L3761]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3762]  COND FALSE  !(revert)
[L3765]  CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L3298]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3161]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3145]              assume msgsender_MSG != null;
[L3146]              Balance[this] := 0;
[L3147]              owner_Ownable[this] := null;
[L3161]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3162]  COND FALSE  !(revert)
[L3298]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3299]  COND FALSE  !(revert)
[L3302]  CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3277]              assume msgsender_MSG != null;
[L3278]              Balance[this] := 0;
[L3279]              _paused_Pausable[this] := false;
[L3281]              _paused_Pausable[this] := false;
[L3302]  RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3303]  COND FALSE  !(revert)
[L3765]  RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L3766]  COND FALSE  !(revert)
[L3769]  CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L3416]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2631]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2616]              assume msgsender_MSG != null;
[L2617]              Balance[this] := 0;
[L2631]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2632]  COND FALSE  !(revert)
[L3416]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3417]  COND FALSE  !(revert)
[L3420]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2677]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2631]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2616]              assume msgsender_MSG != null;
[L2617]              Balance[this] := 0;
[L2631]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2632]  COND FALSE  !(revert)
[L2677]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2678]  COND FALSE  !(revert)
[L2681]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2653]              assume msgsender_MSG != null;
[L2654]              Balance[this] := 0;
[L2655]              _balances_ERC20[this] := zeroRefintArr();
[L2656]              sum__balances0[this] := 0;
[L2657]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2658]              sum__allowances1[this] := 0;
[L2659]              _totalSupply_ERC20[this] := 0;
[L2681]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2682]  COND FALSE  !(revert)
[L3420]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3421]  COND FALSE  !(revert)
[L3424]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3161]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3145]              assume msgsender_MSG != null;
[L3146]              Balance[this] := 0;
[L3147]              owner_Ownable[this] := null;
[L3161]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3162]  COND FALSE  !(revert)
[L3424]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3425]  COND FALSE  !(revert)
[L3428]  CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L3298]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3161]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3145]              assume msgsender_MSG != null;
[L3146]              Balance[this] := 0;
[L3147]              owner_Ownable[this] := null;
[L3161]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3162]  COND FALSE  !(revert)
[L3298]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3299]  COND FALSE  !(revert)
[L3302]  CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3277]              assume msgsender_MSG != null;
[L3278]              Balance[this] := 0;
[L3279]              _paused_Pausable[this] := false;
[L3281]              _paused_Pausable[this] := false;
[L3302]  RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3303]  COND FALSE  !(revert)
[L3428]  RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L3429]  COND FALSE  !(revert)
[L3432]  CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3385]              assume msgsender_MSG != null;
[L3386]              Balance[this] := 0;
[L3432]  RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3433]  COND FALSE  !(revert)
[L3769]  RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L3770]  COND FALSE  !(revert)
[L3773]  CALL        call UPCToken_UPCToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3708]              assume msgsender_MSG != null;
[L3709]              Balance[this] := 0;
[L3710]              name_UPCToken[this] := 995162267;
[L3711]              symbol_UPCToken[this] := 189219111;
[L3712]              decimals_UPCToken[this] := 18;
[L3713]              INIT_TOTALSUPPLY_UPCToken[this] := 1000000000;
[L3715]              owner_Ownable[this] := msgsender_MSG;
[L3716]              _totalSupply_ERC20[this] := INIT_TOTALSUPPLY_UPCToken[this];
[L3717]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][owner_Ownable[this]];
[L3718]              _balances_ERC20[this][owner_Ownable[this]] := _totalSupply_ERC20[this];
[L3719]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][owner_Ownable[this]];
[L3720]              assert { :EventEmitted "Transfer_UPCToken" } true;
[L3773]  RET         call UPCToken_UPCToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3774]  COND FALSE  !(revert)
[L1563]  RET         call UPCToken_UPCToken__success(this, msgsender_MSG, msgvalue_MSG);
[L1564]              assume !revert && gas >= 0;
[L5744]  RET         call UPCToken_UPCToken(this, msgsender_MSG, msgvalue_MSG);
[L5745]              assume !revert && gas >= 0;
[L5748]  CALL        call CorralChoice_UPCToken(this);
[L5583]              havoc msgsender_MSG;
[L5584]              havoc msgvalue_MSG;
[L5585]              havoc choice;
[L5586]              havoc __ret_0_totalSupply;
[L5587]              havoc account_s242;
[L5588]              havoc __ret_0_balanceOf;
[L5589]              havoc to_s648;
[L5590]              havoc value_s648;
[L5591]              havoc __ret_0_transfer;
[L5592]              havoc owner_s277;
[L5593]              havoc spender_s277;
[L5594]              havoc __ret_0_allowance;
[L5595]              havoc spender_s687;
[L5596]              havoc value_s687;
[L5597]              havoc __ret_0_approve;
[L5598]              havoc from_s669;
[L5599]              havoc to_s669;
[L5600]              havoc value_s669;
[L5601]              havoc __ret_0_transferFrom;
[L5602]              havoc spender_s705;
[L5603]              havoc addedValue_s705;
[L5604]              havoc __ret_0_increaseAllowance;
[L5605]              havoc spender_s723;
[L5606]              havoc subtractedValue_s723;
[L5607]              havoc __ret_0_decreaseAllowance;
[L5608]              havoc __ret_0_owner;
[L5609]              havoc _newOwner_s519;
[L5610]              havoc __ret_0_paused;
[L5611]              havoc __ret_0_name;
[L5612]              havoc __ret_0_symbol;
[L5613]              havoc __ret_0_decimals;
[L5614]              havoc tmpNow;
[L5615]              havoc gas;
[L5616]              assume gas > 4000000 && gas <= 8000000;
[L5617]              tmpNow := now;
[L5618]              havoc now;
[L5619]              assume now > tmpNow;
[L5620]              assume msgsender_MSG != null;
[L5621]              assume DType[msgsender_MSG] != SafeMath;
[L5622]              assume DType[msgsender_MSG] != IERC20;
[L5623]              assume DType[msgsender_MSG] != ERC20;
[L5624]              assume DType[msgsender_MSG] != Ownable;
[L5625]              assume DType[msgsender_MSG] != Pausable;
[L5626]              assume DType[msgsender_MSG] != ERC20Pausable;
[L5627]              assume DType[msgsender_MSG] != UPCToken;
[L5628]              Alloc[msgsender_MSG] := true;
[L5629]  COND FALSE  !(choice == 16)
[L5635]  COND FALSE  !(choice == 15)
[L5641]  COND FALSE  !(choice == 14)
[L5648]  COND FALSE  !(choice == 13)
[L5654]  COND FALSE  !(choice == 12)
[L5661]  COND FALSE  !(choice == 11)
[L5668]  COND FALSE  !(choice == 10)
[L5675]  COND FALSE  !(choice == 9)
[L5682]  COND FALSE  !(choice == 8)
[L5688]  COND FALSE  !(choice == 7)
[L5694]  COND FALSE  !(choice == 6)
[L5700]  COND FALSE  !(choice == 5)
[L5706]  COND TRUE   choice == 4
[L5707]              gas := gas - 21000;
[L5708]  COND TRUE   gas >= 0
[L5709]              assume msgvalue_MSG == 0;
[L5710]  CALL        call unpause_Pausable(this, msgsender_MSG, msgvalue_MSG);
[L1097]              havoc __exception;
[L1098]              revert := false;
[L1099]  COND FALSE  !(__exception)
[L1123]  CALL        call unpause_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L3362]  CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4955]  COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L3362]  RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3363]  COND FALSE  !(revert)
[L3366]  CALL        call whenPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4987]  COND FALSE  !(!_paused_Pausable[this])
[L3366]  RET         call whenPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3367]  COND FALSE  !(revert)
[L3370]              _paused_Pausable[this] := false;
[L3371]              assert { :EventEmitted "Unpaused_Pausable" } true;
[L1123]  RET         call unpause_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L1124]              assume !revert && gas >= 0;
[L5710]  RET         call unpause_Pausable(this, msgsender_MSG, msgvalue_MSG);
[L5748]  RET         call CorralChoice_UPCToken(this);
[L5748]  CALL        call CorralChoice_UPCToken(this);
[L5583]              havoc msgsender_MSG;
[L5584]              havoc msgvalue_MSG;
[L5585]              havoc choice;
[L5586]              havoc __ret_0_totalSupply;
[L5587]              havoc account_s242;
[L5588]              havoc __ret_0_balanceOf;
[L5589]              havoc to_s648;
[L5590]              havoc value_s648;
[L5591]              havoc __ret_0_transfer;
[L5592]              havoc owner_s277;
[L5593]              havoc spender_s277;
[L5594]              havoc __ret_0_allowance;
[L5595]              havoc spender_s687;
[L5596]              havoc value_s687;
[L5597]              havoc __ret_0_approve;
[L5598]              havoc from_s669;
[L5599]              havoc to_s669;
[L5600]              havoc value_s669;
[L5601]              havoc __ret_0_transferFrom;
[L5602]              havoc spender_s705;
[L5603]              havoc addedValue_s705;
[L5604]              havoc __ret_0_increaseAllowance;
[L5605]              havoc spender_s723;
[L5606]              havoc subtractedValue_s723;
[L5607]              havoc __ret_0_decreaseAllowance;
[L5608]              havoc __ret_0_owner;
[L5609]              havoc _newOwner_s519;
[L5610]              havoc __ret_0_paused;
[L5611]              havoc __ret_0_name;
[L5612]              havoc __ret_0_symbol;
[L5613]              havoc __ret_0_decimals;
[L5614]              havoc tmpNow;
[L5615]              havoc gas;
[L5616]              assume gas > 4000000 && gas <= 8000000;
[L5617]              tmpNow := now;
[L5618]              havoc now;
[L5619]              assume now > tmpNow;
[L5620]              assume msgsender_MSG != null;
[L5621]              assume DType[msgsender_MSG] != SafeMath;
[L5622]              assume DType[msgsender_MSG] != IERC20;
[L5623]              assume DType[msgsender_MSG] != ERC20;
[L5624]              assume DType[msgsender_MSG] != Ownable;
[L5625]              assume DType[msgsender_MSG] != Pausable;
[L5626]              assume DType[msgsender_MSG] != ERC20Pausable;
[L5627]              assume DType[msgsender_MSG] != UPCToken;
[L5628]              Alloc[msgsender_MSG] := true;
[L5629]  COND FALSE  !(choice == 16)
[L5635]  COND FALSE  !(choice == 15)
[L5641]  COND TRUE   choice == 14
[L5642]              gas := gas - 21000;
[L5643]  COND TRUE   gas >= 0
[L5644]              assume value_s648 >= 0 && value_s648 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5645]              assume msgvalue_MSG == 0;
[L5646]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s648, value_s648);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == to_s648 && value_s648 <= _balances_ERC20[this][msgsender_MSG]) && value_s648 >= 0) && value_s648 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s648] >= 0) && _balances_ERC20[this][to_s648] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC20Pausable0 := true;
[L2]                 call_transfer_ERC20Pausable0 := false;
[L2]                 revert := revert_hold;
[L1221]              havoc __exception;
[L1222]              revert := false;
[L1223]  COND TRUE   __exception
[L1224]              __tmp__Balance := Balance;
[L1225]              __tmp__DType := DType;
[L1226]              __tmp__Alloc := Alloc;
[L1227]              __tmp__balance_ADDR := balance_ADDR;
[L1228]              __tmp__M_Ref_int := M_Ref_int;
[L1229]              __tmp__sum__balances0 := sum__balances0;
[L1230]              __tmp__alloc__allowances_ERC20_lvl0 := alloc__allowances_ERC20_lvl0;
[L1231]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L1232]              __tmp__sum__allowances1 := sum__allowances1;
[L1233]              __tmp__Length := Length;
[L1234]              __tmp__now := now;
[L1235]              __tmp___balances_ERC20 := _balances_ERC20;
[L1236]              __tmp___allowances_ERC20 := _allowances_ERC20;
[L1237]              __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L1238]              __tmp__owner_Ownable := owner_Ownable;
[L1239]              __tmp___paused_Pausable := _paused_Pausable;
[L1240]              __tmp__name_UPCToken := name_UPCToken;
[L1241]              __tmp__symbol_UPCToken := symbol_UPCToken;
[L1242]              __tmp__decimals_UPCToken := decimals_UPCToken;
[L1243]              __tmp__INIT_TOTALSUPPLY_UPCToken := INIT_TOTALSUPPLY_UPCToken;
[L1244]  CALL        call __ret_0_ := transfer~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, to_s648, value_s648);
[L3442]  CALL        call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L4963]  COND TRUE   !!__tmp___paused_Pausable[this]
[L4964]              revert := true;
[L3442]  RET         call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L3443]  COND TRUE   revert
[L1244]  RET         call __ret_0_ := transfer~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, to_s648, value_s648);
[L1245]              assume revert || gas < 0;
[L5646]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s648, value_s648);
[L5748]  RET         call CorralChoice_UPCToken(this);

Loop:
[L5748]  CALL        call CorralChoice_UPCToken(this);
[L5583]              havoc msgsender_MSG;
[L5584]              havoc msgvalue_MSG;
[L5585]              havoc choice;
[L5586]              havoc __ret_0_totalSupply;
[L5587]              havoc account_s242;
[L5588]              havoc __ret_0_balanceOf;
[L5589]              havoc to_s648;
[L5590]              havoc value_s648;
[L5591]              havoc __ret_0_transfer;
[L5592]              havoc owner_s277;
[L5593]              havoc spender_s277;
[L5594]              havoc __ret_0_allowance;
[L5595]              havoc spender_s687;
[L5596]              havoc value_s687;
[L5597]              havoc __ret_0_approve;
[L5598]              havoc from_s669;
[L5599]              havoc to_s669;
[L5600]              havoc value_s669;
[L5601]              havoc __ret_0_transferFrom;
[L5602]              havoc spender_s705;
[L5603]              havoc addedValue_s705;
[L5604]              havoc __ret_0_increaseAllowance;
[L5605]              havoc spender_s723;
[L5606]              havoc subtractedValue_s723;
[L5607]              havoc __ret_0_decreaseAllowance;
[L5608]              havoc __ret_0_owner;
[L5609]              havoc _newOwner_s519;
[L5610]              havoc __ret_0_paused;
[L5611]              havoc __ret_0_name;
[L5612]              havoc __ret_0_symbol;
[L5613]              havoc __ret_0_decimals;
[L5614]              havoc tmpNow;
[L5615]              havoc gas;
[L5616]              assume gas > 4000000 && gas <= 8000000;
[L5617]              tmpNow := now;
[L5618]              havoc now;
[L5619]              assume now > tmpNow;
[L5620]              assume msgsender_MSG != null;
[L5621]              assume DType[msgsender_MSG] != SafeMath;
[L5622]              assume DType[msgsender_MSG] != IERC20;
[L5623]              assume DType[msgsender_MSG] != ERC20;
[L5624]              assume DType[msgsender_MSG] != Ownable;
[L5625]              assume DType[msgsender_MSG] != Pausable;
[L5626]              assume DType[msgsender_MSG] != ERC20Pausable;
[L5627]              assume DType[msgsender_MSG] != UPCToken;
[L5628]              Alloc[msgsender_MSG] := true;
[L5629]  COND FALSE  !(choice == 16)
[L5635]  COND FALSE  !(choice == 15)
[L5641]  COND FALSE  !(choice == 14)
[L5648]  COND FALSE  !(choice == 13)
[L5654]  COND FALSE  !(choice == 12)
[L5661]  COND FALSE  !(choice == 11)
[L5668]  COND FALSE  !(choice == 10)
[L5675]  COND FALSE  !(choice == 9)
[L5682]  COND FALSE  !(choice == 8)
[L5688]  COND FALSE  !(choice == 7)
[L5694]  COND FALSE  !(choice == 6)
[L5700]  COND FALSE  !(choice == 5)
[L5706]  COND TRUE   choice == 4
[L5707]              gas := gas - 21000;
[L5708]  COND TRUE   gas >= 0
[L5709]              assume msgvalue_MSG == 0;
[L5710]  CALL        call unpause_Pausable(this, msgsender_MSG, msgvalue_MSG);
[L1097]              havoc __exception;
[L1098]              revert := false;
[L1099]  COND FALSE  !(__exception)
[L1123]  CALL        call unpause_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L3362]  CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4955]  COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L3362]  RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3363]  COND FALSE  !(revert)
[L3366]  CALL        call whenPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4987]  COND FALSE  !(!_paused_Pausable[this])
[L3366]  RET         call whenPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3367]  COND FALSE  !(revert)
[L3370]              _paused_Pausable[this] := false;
[L3371]              assert { :EventEmitted "Unpaused_Pausable" } true;
[L1123]  RET         call unpause_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L1124]              assume !revert && gas >= 0;
[L5710]  RET         call unpause_Pausable(this, msgsender_MSG, msgvalue_MSG);
[L5748]  RET         call CorralChoice_UPCToken(this);

[2020-11-25 07:50:41,276 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 07:50:41,276 INFO  L82        PathProgramCache]: Analyzing trace with hash 827371035, now seen corresponding path program 1 times
[2020-11-25 07:50:41,276 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 07:50:41,287 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 07:50:41,360 INFO  L134       CoverageAnalysis]: Checked inductivity of 212 backedges. 7 proven. 50 refuted. 0 times theorem prover too weak. 155 trivial. 0 not checked.
[2020-11-25 07:50:41,360 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 07:50:41,360 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [14] total 14
[2020-11-25 07:50:41,361 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 07:50:41,361 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 14 interpolants.
[2020-11-25 07:50:41,361 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=27, Invalid=155, Unknown=0, NotChecked=0, Total=182
[2020-11-25 07:50:41,361 INFO  L87              Difference]: Start difference. First operand 2735 states and 3127 transitions. cyclomatic complexity: 399 Second operand 14 states.
[2020-11-25 07:50:42,567 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 07:50:42,567 INFO  L93              Difference]: Finished difference Result 2739 states and 3133 transitions.
[2020-11-25 07:50:42,567 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 16 states. 
[2020-11-25 07:50:42,567 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2739 states and 3133 transitions.
[2020-11-25 07:50:42,572 INFO  L131   ngComponentsAnalysis]: Automaton has 3 accepting balls. 6
[2020-11-25 07:50:42,578 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2739 states to 2739 states and 3133 transitions.
[2020-11-25 07:50:42,578 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 700
[2020-11-25 07:50:42,578 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 700
[2020-11-25 07:50:42,578 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 2739 states and 3133 transitions.
[2020-11-25 07:50:42,580 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 07:50:42,580 INFO  L728         BuchiCegarLoop]: Abstraction has 2739 states and 3133 transitions.
[2020-11-25 07:50:42,582 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 2739 states and 3133 transitions.
[2020-11-25 07:50:42,595 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 2739 to 2737.
[2020-11-25 07:50:42,595 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 2737 states.
[2020-11-25 07:50:42,598 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 2737 states to 2737 states and 3130 transitions.
[2020-11-25 07:50:42,598 INFO  L751         BuchiCegarLoop]: Abstraction has 2737 states and 3130 transitions.
[2020-11-25 07:50:42,598 INFO  L631         BuchiCegarLoop]: Abstraction has 2737 states and 3130 transitions.
[2020-11-25 07:50:42,598 INFO  L445         BuchiCegarLoop]: ======== Iteration 12============
[2020-11-25 07:50:42,598 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2737 states and 3130 transitions.
[2020-11-25 07:50:42,601 INFO  L131   ngComponentsAnalysis]: Automaton has 3 accepting balls. 6
[2020-11-25 07:50:42,601 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 07:50:42,601 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 07:50:42,602 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 07:50:42,602 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_ERC20Pausable0 := false;
[L2]                 call_transfer_ERC20Pausable0 := false;
[L2]     CALL        call main();
[L5738]              assume null == 0;
[L5739]  CALL        call this := FreshRefGenerator__success();
[L2443]              havoc newRef;
[L2444]              assume Alloc[newRef] == false;
[L2445]              Alloc[newRef] := true;
[L2446]              assume newRef != null;
[L5739]  RET         call this := FreshRefGenerator__success();
[L5740]              assume now >= 0;
[L5741]              assume DType[this] == UPCToken;
[L5742]              assume msgvalue_MSG == 0;
[L5743]              gas := gas - 53000;
[L5744]  CALL        call UPCToken_UPCToken(this, msgsender_MSG, msgvalue_MSG);
[L1537]              havoc __exception;
[L1538]              revert := false;
[L1539]  COND FALSE  !(__exception)
[L1563]  CALL        call UPCToken_UPCToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3753]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2631]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2616]              assume msgsender_MSG != null;
[L2617]              Balance[this] := 0;
[L2631]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2632]  COND FALSE  !(revert)
[L3753]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3754]  COND FALSE  !(revert)
[L3757]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2677]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2631]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2616]              assume msgsender_MSG != null;
[L2617]              Balance[this] := 0;
[L2631]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2632]  COND FALSE  !(revert)
[L2677]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2678]  COND FALSE  !(revert)
[L2681]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2653]              assume msgsender_MSG != null;
[L2654]              Balance[this] := 0;
[L2655]              _balances_ERC20[this] := zeroRefintArr();
[L2656]              sum__balances0[this] := 0;
[L2657]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2658]              sum__allowances1[this] := 0;
[L2659]              _totalSupply_ERC20[this] := 0;
[L2681]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2682]  COND FALSE  !(revert)
[L3757]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3758]  COND FALSE  !(revert)
[L3761]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3161]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3145]              assume msgsender_MSG != null;
[L3146]              Balance[this] := 0;
[L3147]              owner_Ownable[this] := null;
[L3161]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3162]  COND FALSE  !(revert)
[L3761]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3762]  COND FALSE  !(revert)
[L3765]  CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L3298]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3161]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3145]              assume msgsender_MSG != null;
[L3146]              Balance[this] := 0;
[L3147]              owner_Ownable[this] := null;
[L3161]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3162]  COND FALSE  !(revert)
[L3298]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3299]  COND FALSE  !(revert)
[L3302]  CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3277]              assume msgsender_MSG != null;
[L3278]              Balance[this] := 0;
[L3279]              _paused_Pausable[this] := false;
[L3281]              _paused_Pausable[this] := false;
[L3302]  RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3303]  COND FALSE  !(revert)
[L3765]  RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L3766]  COND FALSE  !(revert)
[L3769]  CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L3416]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2631]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2616]              assume msgsender_MSG != null;
[L2617]              Balance[this] := 0;
[L2631]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2632]  COND FALSE  !(revert)
[L3416]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3417]  COND FALSE  !(revert)
[L3420]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2677]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2631]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2616]              assume msgsender_MSG != null;
[L2617]              Balance[this] := 0;
[L2631]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2632]  COND FALSE  !(revert)
[L2677]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2678]  COND FALSE  !(revert)
[L2681]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2653]              assume msgsender_MSG != null;
[L2654]              Balance[this] := 0;
[L2655]              _balances_ERC20[this] := zeroRefintArr();
[L2656]              sum__balances0[this] := 0;
[L2657]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2658]              sum__allowances1[this] := 0;
[L2659]              _totalSupply_ERC20[this] := 0;
[L2681]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2682]  COND FALSE  !(revert)
[L3420]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3421]  COND FALSE  !(revert)
[L3424]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3161]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3145]              assume msgsender_MSG != null;
[L3146]              Balance[this] := 0;
[L3147]              owner_Ownable[this] := null;
[L3161]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3162]  COND FALSE  !(revert)
[L3424]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3425]  COND FALSE  !(revert)
[L3428]  CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L3298]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3161]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3145]              assume msgsender_MSG != null;
[L3146]              Balance[this] := 0;
[L3147]              owner_Ownable[this] := null;
[L3161]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3162]  COND FALSE  !(revert)
[L3298]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3299]  COND FALSE  !(revert)
[L3302]  CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3277]              assume msgsender_MSG != null;
[L3278]              Balance[this] := 0;
[L3279]              _paused_Pausable[this] := false;
[L3281]              _paused_Pausable[this] := false;
[L3302]  RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3303]  COND FALSE  !(revert)
[L3428]  RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L3429]  COND FALSE  !(revert)
[L3432]  CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3385]              assume msgsender_MSG != null;
[L3386]              Balance[this] := 0;
[L3432]  RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3433]  COND FALSE  !(revert)
[L3769]  RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L3770]  COND FALSE  !(revert)
[L3773]  CALL        call UPCToken_UPCToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3708]              assume msgsender_MSG != null;
[L3709]              Balance[this] := 0;
[L3710]              name_UPCToken[this] := 995162267;
[L3711]              symbol_UPCToken[this] := 189219111;
[L3712]              decimals_UPCToken[this] := 18;
[L3713]              INIT_TOTALSUPPLY_UPCToken[this] := 1000000000;
[L3715]              owner_Ownable[this] := msgsender_MSG;
[L3716]              _totalSupply_ERC20[this] := INIT_TOTALSUPPLY_UPCToken[this];
[L3717]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][owner_Ownable[this]];
[L3718]              _balances_ERC20[this][owner_Ownable[this]] := _totalSupply_ERC20[this];
[L3719]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][owner_Ownable[this]];
[L3720]              assert { :EventEmitted "Transfer_UPCToken" } true;
[L3773]  RET         call UPCToken_UPCToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3774]  COND FALSE  !(revert)
[L1563]  RET         call UPCToken_UPCToken__success(this, msgsender_MSG, msgvalue_MSG);
[L1564]              assume !revert && gas >= 0;
[L5744]  RET         call UPCToken_UPCToken(this, msgsender_MSG, msgvalue_MSG);
[L5745]              assume !revert && gas >= 0;
[L5748]  CALL        call CorralChoice_UPCToken(this);
[L5583]              havoc msgsender_MSG;
[L5584]              havoc msgvalue_MSG;
[L5585]              havoc choice;
[L5586]              havoc __ret_0_totalSupply;
[L5587]              havoc account_s242;
[L5588]              havoc __ret_0_balanceOf;
[L5589]              havoc to_s648;
[L5590]              havoc value_s648;
[L5591]              havoc __ret_0_transfer;
[L5592]              havoc owner_s277;
[L5593]              havoc spender_s277;
[L5594]              havoc __ret_0_allowance;
[L5595]              havoc spender_s687;
[L5596]              havoc value_s687;
[L5597]              havoc __ret_0_approve;
[L5598]              havoc from_s669;
[L5599]              havoc to_s669;
[L5600]              havoc value_s669;
[L5601]              havoc __ret_0_transferFrom;
[L5602]              havoc spender_s705;
[L5603]              havoc addedValue_s705;
[L5604]              havoc __ret_0_increaseAllowance;
[L5605]              havoc spender_s723;
[L5606]              havoc subtractedValue_s723;
[L5607]              havoc __ret_0_decreaseAllowance;
[L5608]              havoc __ret_0_owner;
[L5609]              havoc _newOwner_s519;
[L5610]              havoc __ret_0_paused;
[L5611]              havoc __ret_0_name;
[L5612]              havoc __ret_0_symbol;
[L5613]              havoc __ret_0_decimals;
[L5614]              havoc tmpNow;
[L5615]              havoc gas;
[L5616]              assume gas > 4000000 && gas <= 8000000;
[L5617]              tmpNow := now;
[L5618]              havoc now;
[L5619]              assume now > tmpNow;
[L5620]              assume msgsender_MSG != null;
[L5621]              assume DType[msgsender_MSG] != SafeMath;
[L5622]              assume DType[msgsender_MSG] != IERC20;
[L5623]              assume DType[msgsender_MSG] != ERC20;
[L5624]              assume DType[msgsender_MSG] != Ownable;
[L5625]              assume DType[msgsender_MSG] != Pausable;
[L5626]              assume DType[msgsender_MSG] != ERC20Pausable;
[L5627]              assume DType[msgsender_MSG] != UPCToken;
[L5628]              Alloc[msgsender_MSG] := true;
[L5629]  COND FALSE  !(choice == 16)
[L5635]  COND FALSE  !(choice == 15)
[L5641]  COND FALSE  !(choice == 14)
[L5648]  COND FALSE  !(choice == 13)
[L5654]  COND FALSE  !(choice == 12)
[L5661]  COND FALSE  !(choice == 11)
[L5668]  COND FALSE  !(choice == 10)
[L5675]  COND FALSE  !(choice == 9)
[L5682]  COND FALSE  !(choice == 8)
[L5688]  COND FALSE  !(choice == 7)
[L5694]  COND FALSE  !(choice == 6)
[L5700]  COND TRUE   choice == 5
[L5701]              gas := gas - 21000;
[L5702]  COND TRUE   gas >= 0
[L5703]              assume msgvalue_MSG == 0;
[L5704]  CALL        call pause_Pausable(this, msgsender_MSG, msgvalue_MSG);
[L1040]              havoc __exception;
[L1041]              revert := false;
[L1042]  COND FALSE  !(__exception)
[L1066]  CALL        call pause_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L3335]  CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4955]  COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L3335]  RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3336]  COND FALSE  !(revert)
[L3339]  CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4971]  COND FALSE  !(!!_paused_Pausable[this])
[L3339]  RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3340]  COND FALSE  !(revert)
[L3343]              _paused_Pausable[this] := true;
[L3344]              assert { :EventEmitted "Paused_Pausable" } true;
[L1066]  RET         call pause_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L1067]              assume !revert && gas >= 0;
[L5704]  RET         call pause_Pausable(this, msgsender_MSG, msgvalue_MSG);
[L5748]  RET         call CorralChoice_UPCToken(this);
[L5748]  CALL        call CorralChoice_UPCToken(this);
[L5583]              havoc msgsender_MSG;
[L5584]              havoc msgvalue_MSG;
[L5585]              havoc choice;
[L5586]              havoc __ret_0_totalSupply;
[L5587]              havoc account_s242;
[L5588]              havoc __ret_0_balanceOf;
[L5589]              havoc to_s648;
[L5590]              havoc value_s648;
[L5591]              havoc __ret_0_transfer;
[L5592]              havoc owner_s277;
[L5593]              havoc spender_s277;
[L5594]              havoc __ret_0_allowance;
[L5595]              havoc spender_s687;
[L5596]              havoc value_s687;
[L5597]              havoc __ret_0_approve;
[L5598]              havoc from_s669;
[L5599]              havoc to_s669;
[L5600]              havoc value_s669;
[L5601]              havoc __ret_0_transferFrom;
[L5602]              havoc spender_s705;
[L5603]              havoc addedValue_s705;
[L5604]              havoc __ret_0_increaseAllowance;
[L5605]              havoc spender_s723;
[L5606]              havoc subtractedValue_s723;
[L5607]              havoc __ret_0_decreaseAllowance;
[L5608]              havoc __ret_0_owner;
[L5609]              havoc _newOwner_s519;
[L5610]              havoc __ret_0_paused;
[L5611]              havoc __ret_0_name;
[L5612]              havoc __ret_0_symbol;
[L5613]              havoc __ret_0_decimals;
[L5614]              havoc tmpNow;
[L5615]              havoc gas;
[L5616]              assume gas > 4000000 && gas <= 8000000;
[L5617]              tmpNow := now;
[L5618]              havoc now;
[L5619]              assume now > tmpNow;
[L5620]              assume msgsender_MSG != null;
[L5621]              assume DType[msgsender_MSG] != SafeMath;
[L5622]              assume DType[msgsender_MSG] != IERC20;
[L5623]              assume DType[msgsender_MSG] != ERC20;
[L5624]              assume DType[msgsender_MSG] != Ownable;
[L5625]              assume DType[msgsender_MSG] != Pausable;
[L5626]              assume DType[msgsender_MSG] != ERC20Pausable;
[L5627]              assume DType[msgsender_MSG] != UPCToken;
[L5628]              Alloc[msgsender_MSG] := true;
[L5629]  COND FALSE  !(choice == 16)
[L5635]  COND FALSE  !(choice == 15)
[L5641]  COND TRUE   choice == 14
[L5642]              gas := gas - 21000;
[L5643]  COND TRUE   gas >= 0
[L5644]              assume value_s648 >= 0 && value_s648 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5645]              assume msgvalue_MSG == 0;
[L5646]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s648, value_s648);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == to_s648 && value_s648 <= _balances_ERC20[this][msgsender_MSG]) && value_s648 >= 0) && value_s648 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s648] >= 0) && _balances_ERC20[this][to_s648] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC20Pausable0 := true;
[L2]                 call_transfer_ERC20Pausable0 := false;
[L2]                 revert := revert_hold;
[L1221]              havoc __exception;
[L1222]              revert := false;
[L1223]  COND TRUE   __exception
[L1224]              __tmp__Balance := Balance;
[L1225]              __tmp__DType := DType;
[L1226]              __tmp__Alloc := Alloc;
[L1227]              __tmp__balance_ADDR := balance_ADDR;
[L1228]              __tmp__M_Ref_int := M_Ref_int;
[L1229]              __tmp__sum__balances0 := sum__balances0;
[L1230]              __tmp__alloc__allowances_ERC20_lvl0 := alloc__allowances_ERC20_lvl0;
[L1231]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L1232]              __tmp__sum__allowances1 := sum__allowances1;
[L1233]              __tmp__Length := Length;
[L1234]              __tmp__now := now;
[L1235]              __tmp___balances_ERC20 := _balances_ERC20;
[L1236]              __tmp___allowances_ERC20 := _allowances_ERC20;
[L1237]              __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L1238]              __tmp__owner_Ownable := owner_Ownable;
[L1239]              __tmp___paused_Pausable := _paused_Pausable;
[L1240]              __tmp__name_UPCToken := name_UPCToken;
[L1241]              __tmp__symbol_UPCToken := symbol_UPCToken;
[L1242]              __tmp__decimals_UPCToken := decimals_UPCToken;
[L1243]              __tmp__INIT_TOTALSUPPLY_UPCToken := INIT_TOTALSUPPLY_UPCToken;
[L1244]  CALL        call __ret_0_ := transfer~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, to_s648, value_s648);
[L3442]  CALL        call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L4963]  COND TRUE   !!__tmp___paused_Pausable[this]
[L4964]              revert := true;
[L3442]  RET         call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L3443]  COND TRUE   revert
[L1244]  RET         call __ret_0_ := transfer~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, to_s648, value_s648);
[L1245]              assume revert || gas < 0;
[L5646]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s648, value_s648);
[L5748]  RET         call CorralChoice_UPCToken(this);

Loop:
[L5748]  CALL        call CorralChoice_UPCToken(this);
[L5583]              havoc msgsender_MSG;
[L5584]              havoc msgvalue_MSG;
[L5585]              havoc choice;
[L5586]              havoc __ret_0_totalSupply;
[L5587]              havoc account_s242;
[L5588]              havoc __ret_0_balanceOf;
[L5589]              havoc to_s648;
[L5590]              havoc value_s648;
[L5591]              havoc __ret_0_transfer;
[L5592]              havoc owner_s277;
[L5593]              havoc spender_s277;
[L5594]              havoc __ret_0_allowance;
[L5595]              havoc spender_s687;
[L5596]              havoc value_s687;
[L5597]              havoc __ret_0_approve;
[L5598]              havoc from_s669;
[L5599]              havoc to_s669;
[L5600]              havoc value_s669;
[L5601]              havoc __ret_0_transferFrom;
[L5602]              havoc spender_s705;
[L5603]              havoc addedValue_s705;
[L5604]              havoc __ret_0_increaseAllowance;
[L5605]              havoc spender_s723;
[L5606]              havoc subtractedValue_s723;
[L5607]              havoc __ret_0_decreaseAllowance;
[L5608]              havoc __ret_0_owner;
[L5609]              havoc _newOwner_s519;
[L5610]              havoc __ret_0_paused;
[L5611]              havoc __ret_0_name;
[L5612]              havoc __ret_0_symbol;
[L5613]              havoc __ret_0_decimals;
[L5614]              havoc tmpNow;
[L5615]              havoc gas;
[L5616]              assume gas > 4000000 && gas <= 8000000;
[L5617]              tmpNow := now;
[L5618]              havoc now;
[L5619]              assume now > tmpNow;
[L5620]              assume msgsender_MSG != null;
[L5621]              assume DType[msgsender_MSG] != SafeMath;
[L5622]              assume DType[msgsender_MSG] != IERC20;
[L5623]              assume DType[msgsender_MSG] != ERC20;
[L5624]              assume DType[msgsender_MSG] != Ownable;
[L5625]              assume DType[msgsender_MSG] != Pausable;
[L5626]              assume DType[msgsender_MSG] != ERC20Pausable;
[L5627]              assume DType[msgsender_MSG] != UPCToken;
[L5628]              Alloc[msgsender_MSG] := true;
[L5629]  COND TRUE   choice == 16
[L5630]              gas := gas - 21000;
[L5631]  COND FALSE  !(gas >= 0)
[L5748]  RET         call CorralChoice_UPCToken(this);

[2020-11-25 07:50:42,605 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 07:50:42,605 INFO  L82        PathProgramCache]: Analyzing trace with hash 630336325, now seen corresponding path program 1 times
[2020-11-25 07:50:42,606 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 07:50:42,617 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-25 07:50:42,630 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-25 07:50:42,708 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 07:50:42,708 INFO  L82        PathProgramCache]: Analyzing trace with hash -1980040366, now seen corresponding path program 1 times
[2020-11-25 07:50:42,709 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 07:50:42,710 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 07:50:42,714 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 07:50:42,715 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 07:50:42,715 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [4] imperfect sequences [] total 4
[2020-11-25 07:50:42,715 INFO  L1008  eck$LassoCheckResult]: loop already infeasible
[2020-11-25 07:50:42,715 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-11-25 07:50:42,715 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=6, Invalid=6, Unknown=0, NotChecked=0, Total=12
[2020-11-25 07:50:42,715 INFO  L87              Difference]: Start difference. First operand 2737 states and 3130 transitions. cyclomatic complexity: 400 Second operand 4 states.
[2020-11-25 07:50:43,039 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 07:50:43,039 INFO  L93              Difference]: Finished difference Result 2858 states and 3270 transitions.
[2020-11-25 07:50:43,039 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 4 states. 
[2020-11-25 07:50:43,039 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2858 states and 3270 transitions.
[2020-11-25 07:50:43,049 INFO  L131   ngComponentsAnalysis]: Automaton has 3 accepting balls. 12
[2020-11-25 07:50:43,055 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2858 states to 2858 states and 3270 transitions.
[2020-11-25 07:50:43,056 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 708
[2020-11-25 07:50:43,056 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 708
[2020-11-25 07:50:43,056 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 2858 states and 3270 transitions.
[2020-11-25 07:50:43,058 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 07:50:43,058 INFO  L728         BuchiCegarLoop]: Abstraction has 2858 states and 3270 transitions.
[2020-11-25 07:50:43,060 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 2858 states and 3270 transitions.
[2020-11-25 07:50:43,074 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 2858 to 2737.
[2020-11-25 07:50:43,074 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 2737 states.
[2020-11-25 07:50:43,077 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 2737 states to 2737 states and 3098 transitions.
[2020-11-25 07:50:43,077 INFO  L751         BuchiCegarLoop]: Abstraction has 2737 states and 3098 transitions.
[2020-11-25 07:50:43,077 INFO  L631         BuchiCegarLoop]: Abstraction has 2737 states and 3098 transitions.
[2020-11-25 07:50:43,077 INFO  L445         BuchiCegarLoop]: ======== Iteration 13============
[2020-11-25 07:50:43,077 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2737 states and 3098 transitions.
[2020-11-25 07:50:43,081 INFO  L131   ngComponentsAnalysis]: Automaton has 3 accepting balls. 6
[2020-11-25 07:50:43,081 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 07:50:43,081 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 07:50:43,082 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 07:50:43,082 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_ERC20Pausable0 := false;
[L2]                 call_transfer_ERC20Pausable0 := false;
[L2]     CALL        call main();
[L5738]              assume null == 0;
[L5739]  CALL        call this := FreshRefGenerator__success();
[L2443]              havoc newRef;
[L2444]              assume Alloc[newRef] == false;
[L2445]              Alloc[newRef] := true;
[L2446]              assume newRef != null;
[L5739]  RET         call this := FreshRefGenerator__success();
[L5740]              assume now >= 0;
[L5741]              assume DType[this] == UPCToken;
[L5742]              assume msgvalue_MSG == 0;
[L5743]              gas := gas - 53000;
[L5744]  CALL        call UPCToken_UPCToken(this, msgsender_MSG, msgvalue_MSG);
[L1537]              havoc __exception;
[L1538]              revert := false;
[L1539]  COND FALSE  !(__exception)
[L1563]  CALL        call UPCToken_UPCToken__success(this, msgsender_MSG, msgvalue_MSG);
[L3753]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2631]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2616]              assume msgsender_MSG != null;
[L2617]              Balance[this] := 0;
[L2631]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2632]  COND FALSE  !(revert)
[L3753]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3754]  COND FALSE  !(revert)
[L3757]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2677]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2631]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2616]              assume msgsender_MSG != null;
[L2617]              Balance[this] := 0;
[L2631]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2632]  COND FALSE  !(revert)
[L2677]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2678]  COND FALSE  !(revert)
[L2681]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2653]              assume msgsender_MSG != null;
[L2654]              Balance[this] := 0;
[L2655]              _balances_ERC20[this] := zeroRefintArr();
[L2656]              sum__balances0[this] := 0;
[L2657]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2658]              sum__allowances1[this] := 0;
[L2659]              _totalSupply_ERC20[this] := 0;
[L2681]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2682]  COND FALSE  !(revert)
[L3757]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3758]  COND FALSE  !(revert)
[L3761]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3161]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3145]              assume msgsender_MSG != null;
[L3146]              Balance[this] := 0;
[L3147]              owner_Ownable[this] := null;
[L3161]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3162]  COND FALSE  !(revert)
[L3761]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3762]  COND FALSE  !(revert)
[L3765]  CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L3298]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3161]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3145]              assume msgsender_MSG != null;
[L3146]              Balance[this] := 0;
[L3147]              owner_Ownable[this] := null;
[L3161]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3162]  COND FALSE  !(revert)
[L3298]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3299]  COND FALSE  !(revert)
[L3302]  CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3277]              assume msgsender_MSG != null;
[L3278]              Balance[this] := 0;
[L3279]              _paused_Pausable[this] := false;
[L3281]              _paused_Pausable[this] := false;
[L3302]  RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3303]  COND FALSE  !(revert)
[L3765]  RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L3766]  COND FALSE  !(revert)
[L3769]  CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L3416]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2631]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2616]              assume msgsender_MSG != null;
[L2617]              Balance[this] := 0;
[L2631]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2632]  COND FALSE  !(revert)
[L3416]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3417]  COND FALSE  !(revert)
[L3420]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2677]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2631]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2616]              assume msgsender_MSG != null;
[L2617]              Balance[this] := 0;
[L2631]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2632]  COND FALSE  !(revert)
[L2677]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2678]  COND FALSE  !(revert)
[L2681]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2653]              assume msgsender_MSG != null;
[L2654]              Balance[this] := 0;
[L2655]              _balances_ERC20[this] := zeroRefintArr();
[L2656]              sum__balances0[this] := 0;
[L2657]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2658]              sum__allowances1[this] := 0;
[L2659]              _totalSupply_ERC20[this] := 0;
[L2681]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2682]  COND FALSE  !(revert)
[L3420]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3421]  COND FALSE  !(revert)
[L3424]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3161]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3145]              assume msgsender_MSG != null;
[L3146]              Balance[this] := 0;
[L3147]              owner_Ownable[this] := null;
[L3161]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3162]  COND FALSE  !(revert)
[L3424]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3425]  COND FALSE  !(revert)
[L3428]  CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L3298]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3161]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3145]              assume msgsender_MSG != null;
[L3146]              Balance[this] := 0;
[L3147]              owner_Ownable[this] := null;
[L3161]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3162]  COND FALSE  !(revert)
[L3298]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3299]  COND FALSE  !(revert)
[L3302]  CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3277]              assume msgsender_MSG != null;
[L3278]              Balance[this] := 0;
[L3279]              _paused_Pausable[this] := false;
[L3281]              _paused_Pausable[this] := false;
[L3302]  RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3303]  COND FALSE  !(revert)
[L3428]  RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L3429]  COND FALSE  !(revert)
[L3432]  CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3385]              assume msgsender_MSG != null;
[L3386]              Balance[this] := 0;
[L3432]  RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3433]  COND FALSE  !(revert)
[L3769]  RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L3770]  COND FALSE  !(revert)
[L3773]  CALL        call UPCToken_UPCToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3708]              assume msgsender_MSG != null;
[L3709]              Balance[this] := 0;
[L3710]              name_UPCToken[this] := 995162267;
[L3711]              symbol_UPCToken[this] := 189219111;
[L3712]              decimals_UPCToken[this] := 18;
[L3713]              INIT_TOTALSUPPLY_UPCToken[this] := 1000000000;
[L3715]              owner_Ownable[this] := msgsender_MSG;
[L3716]              _totalSupply_ERC20[this] := INIT_TOTALSUPPLY_UPCToken[this];
[L3717]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][owner_Ownable[this]];
[L3718]              _balances_ERC20[this][owner_Ownable[this]] := _totalSupply_ERC20[this];
[L3719]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][owner_Ownable[this]];
[L3720]              assert { :EventEmitted "Transfer_UPCToken" } true;
[L3773]  RET         call UPCToken_UPCToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3774]  COND FALSE  !(revert)
[L1563]  RET         call UPCToken_UPCToken__success(this, msgsender_MSG, msgvalue_MSG);
[L1564]              assume !revert && gas >= 0;
[L5744]  RET         call UPCToken_UPCToken(this, msgsender_MSG, msgvalue_MSG);
[L5745]              assume !revert && gas >= 0;
[L5748]  CALL        call CorralChoice_UPCToken(this);
[L5583]              havoc msgsender_MSG;
[L5584]              havoc msgvalue_MSG;
[L5585]              havoc choice;
[L5586]              havoc __ret_0_totalSupply;
[L5587]              havoc account_s242;
[L5588]              havoc __ret_0_balanceOf;
[L5589]              havoc to_s648;
[L5590]              havoc value_s648;
[L5591]              havoc __ret_0_transfer;
[L5592]              havoc owner_s277;
[L5593]              havoc spender_s277;
[L5594]              havoc __ret_0_allowance;
[L5595]              havoc spender_s687;
[L5596]              havoc value_s687;
[L5597]              havoc __ret_0_approve;
[L5598]              havoc from_s669;
[L5599]              havoc to_s669;
[L5600]              havoc value_s669;
[L5601]              havoc __ret_0_transferFrom;
[L5602]              havoc spender_s705;
[L5603]              havoc addedValue_s705;
[L5604]              havoc __ret_0_increaseAllowance;
[L5605]              havoc spender_s723;
[L5606]              havoc subtractedValue_s723;
[L5607]              havoc __ret_0_decreaseAllowance;
[L5608]              havoc __ret_0_owner;
[L5609]              havoc _newOwner_s519;
[L5610]              havoc __ret_0_paused;
[L5611]              havoc __ret_0_name;
[L5612]              havoc __ret_0_symbol;
[L5613]              havoc __ret_0_decimals;
[L5614]              havoc tmpNow;
[L5615]              havoc gas;
[L5616]              assume gas > 4000000 && gas <= 8000000;
[L5617]              tmpNow := now;
[L5618]              havoc now;
[L5619]              assume now > tmpNow;
[L5620]              assume msgsender_MSG != null;
[L5621]              assume DType[msgsender_MSG] != SafeMath;
[L5622]              assume DType[msgsender_MSG] != IERC20;
[L5623]              assume DType[msgsender_MSG] != ERC20;
[L5624]              assume DType[msgsender_MSG] != Ownable;
[L5625]              assume DType[msgsender_MSG] != Pausable;
[L5626]              assume DType[msgsender_MSG] != ERC20Pausable;
[L5627]              assume DType[msgsender_MSG] != UPCToken;
[L5628]              Alloc[msgsender_MSG] := true;
[L5629]  COND FALSE  !(choice == 16)
[L5635]  COND FALSE  !(choice == 15)
[L5641]  COND FALSE  !(choice == 14)
[L5648]  COND FALSE  !(choice == 13)
[L5654]  COND FALSE  !(choice == 12)
[L5661]  COND FALSE  !(choice == 11)
[L5668]  COND FALSE  !(choice == 10)
[L5675]  COND FALSE  !(choice == 9)
[L5682]  COND FALSE  !(choice == 8)
[L5688]  COND FALSE  !(choice == 7)
[L5694]  COND FALSE  !(choice == 6)
[L5700]  COND TRUE   choice == 5
[L5701]              gas := gas - 21000;
[L5702]  COND TRUE   gas >= 0
[L5703]              assume msgvalue_MSG == 0;
[L5704]  CALL        call pause_Pausable(this, msgsender_MSG, msgvalue_MSG);
[L1040]              havoc __exception;
[L1041]              revert := false;
[L1042]  COND FALSE  !(__exception)
[L1066]  CALL        call pause_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L3335]  CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4955]  COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L3335]  RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3336]  COND FALSE  !(revert)
[L3339]  CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4971]  COND FALSE  !(!!_paused_Pausable[this])
[L3339]  RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3340]  COND FALSE  !(revert)
[L3343]              _paused_Pausable[this] := true;
[L3344]              assert { :EventEmitted "Paused_Pausable" } true;
[L1066]  RET         call pause_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L1067]              assume !revert && gas >= 0;
[L5704]  RET         call pause_Pausable(this, msgsender_MSG, msgvalue_MSG);
[L5748]  RET         call CorralChoice_UPCToken(this);
[L5748]  CALL        call CorralChoice_UPCToken(this);
[L5583]              havoc msgsender_MSG;
[L5584]              havoc msgvalue_MSG;
[L5585]              havoc choice;
[L5586]              havoc __ret_0_totalSupply;
[L5587]              havoc account_s242;
[L5588]              havoc __ret_0_balanceOf;
[L5589]              havoc to_s648;
[L5590]              havoc value_s648;
[L5591]              havoc __ret_0_transfer;
[L5592]              havoc owner_s277;
[L5593]              havoc spender_s277;
[L5594]              havoc __ret_0_allowance;
[L5595]              havoc spender_s687;
[L5596]              havoc value_s687;
[L5597]              havoc __ret_0_approve;
[L5598]              havoc from_s669;
[L5599]              havoc to_s669;
[L5600]              havoc value_s669;
[L5601]              havoc __ret_0_transferFrom;
[L5602]              havoc spender_s705;
[L5603]              havoc addedValue_s705;
[L5604]              havoc __ret_0_increaseAllowance;
[L5605]              havoc spender_s723;
[L5606]              havoc subtractedValue_s723;
[L5607]              havoc __ret_0_decreaseAllowance;
[L5608]              havoc __ret_0_owner;
[L5609]              havoc _newOwner_s519;
[L5610]              havoc __ret_0_paused;
[L5611]              havoc __ret_0_name;
[L5612]              havoc __ret_0_symbol;
[L5613]              havoc __ret_0_decimals;
[L5614]              havoc tmpNow;
[L5615]              havoc gas;
[L5616]              assume gas > 4000000 && gas <= 8000000;
[L5617]              tmpNow := now;
[L5618]              havoc now;
[L5619]              assume now > tmpNow;
[L5620]              assume msgsender_MSG != null;
[L5621]              assume DType[msgsender_MSG] != SafeMath;
[L5622]              assume DType[msgsender_MSG] != IERC20;
[L5623]              assume DType[msgsender_MSG] != ERC20;
[L5624]              assume DType[msgsender_MSG] != Ownable;
[L5625]              assume DType[msgsender_MSG] != Pausable;
[L5626]              assume DType[msgsender_MSG] != ERC20Pausable;
[L5627]              assume DType[msgsender_MSG] != UPCToken;
[L5628]              Alloc[msgsender_MSG] := true;
[L5629]  COND FALSE  !(choice == 16)
[L5635]  COND FALSE  !(choice == 15)
[L5641]  COND TRUE   choice == 14
[L5642]              gas := gas - 21000;
[L5643]  COND TRUE   gas >= 0
[L5644]              assume value_s648 >= 0 && value_s648 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5645]              assume msgvalue_MSG == 0;
[L5646]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s648, value_s648);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == to_s648 && value_s648 <= _balances_ERC20[this][msgsender_MSG]) && value_s648 >= 0) && value_s648 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s648] >= 0) && _balances_ERC20[this][to_s648] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC20Pausable0 := true;
[L2]                 call_transfer_ERC20Pausable0 := false;
[L2]                 revert := revert_hold;
[L1221]              havoc __exception;
[L1222]              revert := false;
[L1223]  COND TRUE   __exception
[L1224]              __tmp__Balance := Balance;
[L1225]              __tmp__DType := DType;
[L1226]              __tmp__Alloc := Alloc;
[L1227]              __tmp__balance_ADDR := balance_ADDR;
[L1228]              __tmp__M_Ref_int := M_Ref_int;
[L1229]              __tmp__sum__balances0 := sum__balances0;
[L1230]              __tmp__alloc__allowances_ERC20_lvl0 := alloc__allowances_ERC20_lvl0;
[L1231]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L1232]              __tmp__sum__allowances1 := sum__allowances1;
[L1233]              __tmp__Length := Length;
[L1234]              __tmp__now := now;
[L1235]              __tmp___balances_ERC20 := _balances_ERC20;
[L1236]              __tmp___allowances_ERC20 := _allowances_ERC20;
[L1237]              __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L1238]              __tmp__owner_Ownable := owner_Ownable;
[L1239]              __tmp___paused_Pausable := _paused_Pausable;
[L1240]              __tmp__name_UPCToken := name_UPCToken;
[L1241]              __tmp__symbol_UPCToken := symbol_UPCToken;
[L1242]              __tmp__decimals_UPCToken := decimals_UPCToken;
[L1243]              __tmp__INIT_TOTALSUPPLY_UPCToken := INIT_TOTALSUPPLY_UPCToken;
[L1244]  CALL        call __ret_0_ := transfer~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, to_s648, value_s648);
[L3442]  CALL        call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L4963]  COND TRUE   !!__tmp___paused_Pausable[this]
[L4964]              revert := true;
[L3442]  RET         call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L3443]  COND TRUE   revert
[L1244]  RET         call __ret_0_ := transfer~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, to_s648, value_s648);
[L1245]              assume revert || gas < 0;
[L5646]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s648, value_s648);
[L5748]  RET         call CorralChoice_UPCToken(this);

Loop:
[L5748]  CALL        call CorralChoice_UPCToken(this);
[L5583]              havoc msgsender_MSG;
[L5584]              havoc msgvalue_MSG;
[L5585]              havoc choice;
[L5586]              havoc __ret_0_totalSupply;
[L5587]              havoc account_s242;
[L5588]              havoc __ret_0_balanceOf;
[L5589]              havoc to_s648;
[L5590]              havoc value_s648;
[L5591]              havoc __ret_0_transfer;
[L5592]              havoc owner_s277;
[L5593]              havoc spender_s277;
[L5594]              havoc __ret_0_allowance;
[L5595]              havoc spender_s687;
[L5596]              havoc value_s687;
[L5597]              havoc __ret_0_approve;
[L5598]              havoc from_s669;
[L5599]              havoc to_s669;
[L5600]              havoc value_s669;
[L5601]              havoc __ret_0_transferFrom;
[L5602]              havoc spender_s705;
[L5603]              havoc addedValue_s705;
[L5604]              havoc __ret_0_increaseAllowance;
[L5605]              havoc spender_s723;
[L5606]              havoc subtractedValue_s723;
[L5607]              havoc __ret_0_decreaseAllowance;
[L5608]              havoc __ret_0_owner;
[L5609]              havoc _newOwner_s519;
[L5610]              havoc __ret_0_paused;
[L5611]              havoc __ret_0_name;
[L5612]              havoc __ret_0_symbol;
[L5613]              havoc __ret_0_decimals;
[L5614]              havoc tmpNow;
[L5615]              havoc gas;
[L5616]              assume gas > 4000000 && gas <= 8000000;
[L5617]              tmpNow := now;
[L5618]              havoc now;
[L5619]              assume now > tmpNow;
[L5620]              assume msgsender_MSG != null;
[L5621]              assume DType[msgsender_MSG] != SafeMath;
[L5622]              assume DType[msgsender_MSG] != IERC20;
[L5623]              assume DType[msgsender_MSG] != ERC20;
[L5624]              assume DType[msgsender_MSG] != Ownable;
[L5625]              assume DType[msgsender_MSG] != Pausable;
[L5626]              assume DType[msgsender_MSG] != ERC20Pausable;
[L5627]              assume DType[msgsender_MSG] != UPCToken;
[L5628]              Alloc[msgsender_MSG] := true;
[L5629]  COND FALSE  !(choice == 16)
[L5635]  COND FALSE  !(choice == 15)
[L5641]  COND FALSE  !(choice == 14)
[L5648]  COND FALSE  !(choice == 13)
[L5654]  COND FALSE  !(choice == 12)
[L5661]  COND FALSE  !(choice == 11)
[L5668]  COND FALSE  !(choice == 10)
[L5675]  COND FALSE  !(choice == 9)
[L5682]  COND FALSE  !(choice == 8)
[L5688]  COND FALSE  !(choice == 7)
[L5694]  COND FALSE  !(choice == 6)
[L5700]  COND FALSE  !(choice == 5)
[L5706]  COND TRUE   choice == 4
[L5707]              gas := gas - 21000;
[L5708]  COND TRUE   gas >= 0
[L5709]              assume msgvalue_MSG == 0;
[L5710]  CALL        call unpause_Pausable(this, msgsender_MSG, msgvalue_MSG);
[L1097]              havoc __exception;
[L1098]              revert := false;
[L1099]  COND FALSE  !(__exception)
[L1123]  CALL        call unpause_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L3362]  CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4955]  COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L3362]  RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3363]  COND FALSE  !(revert)
[L3366]  CALL        call whenPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4987]  COND FALSE  !(!_paused_Pausable[this])
[L3366]  RET         call whenPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3367]  COND FALSE  !(revert)
[L3370]              _paused_Pausable[this] := false;
[L3371]              assert { :EventEmitted "Unpaused_Pausable" } true;
[L1123]  RET         call unpause_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L1124]              assume !revert && gas >= 0;
[L5710]  RET         call unpause_Pausable(this, msgsender_MSG, msgvalue_MSG);
[L5748]  RET         call CorralChoice_UPCToken(this);

[2020-11-25 07:50:43,086 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 07:50:43,086 INFO  L82        PathProgramCache]: Analyzing trace with hash 630336325, now seen corresponding path program 2 times
[2020-11-25 07:50:43,087 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 07:50:43,098 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-25 07:50:43,111 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-25 07:50:43,142 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 07:50:43,142 INFO  L82        PathProgramCache]: Analyzing trace with hash 1077990149, now seen corresponding path program 1 times
[2020-11-25 07:50:43,143 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 07:50:43,146 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-25 07:50:43,148 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-25 07:50:43,154 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 07:50:43,154 INFO  L82        PathProgramCache]: Analyzing trace with hash -12042175, now seen corresponding path program 1 times
[2020-11-25 07:50:43,155 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 07:50:43,168 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-25 07:50:43,184 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 59 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 59 to 113
Garbage collection #2: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #3: 223 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 223 to 443
Garbage collection #4: 443 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 443 to 883
Garbage collection #5: 883 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 883 to 1759
Garbage collection #1: 71 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 71 to 139
Garbage collection #2: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #3: 277 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 277 to 547
Garbage collection #4: 547 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 547 to 1093
Garbage collection #5: 1093 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 1093 to 2179
Garbage collection #6: 2179 nodes / 0 free / 0.001s / 0.002s total
Resizing node table from 2179 to 4357
Garbage collection #1: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #2: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #3: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #4: 317 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 317 to 631
Garbage collection #5: 631 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 631 to 1259
Garbage collection #1: 109 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 109 to 211
Garbage collection #2: 211 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 211 to 421
Garbage collection #3: 421 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 421 to 839
Garbage collection #4: 839 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 839 to 1669
Garbage collection #5: 1669 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 1669 to 3331
Garbage collection #6: 3331 nodes / 0 free / 0.001s / 0.002s total
Resizing node table from 3331 to 6661
Garbage collection #1: 89 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 89 to 173
Garbage collection #2: 173 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 173 to 337
Garbage collection #3: 337 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 337 to 673
Garbage collection #4: 673 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 673 to 1327
Garbage collection #5: 1327 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1327 to 2647
Garbage collection #6: 2647 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 2647 to 5281
[2020-11-25 07:50:43,578 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #2: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #3: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #2: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #3: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #1: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #2: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #3: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #2: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #3: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #1: 7 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 7 to 13
Garbage collection #2: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #1: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #2: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #3: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #2: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #3: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #2: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #3: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #1: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #2: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #3: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #2: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #3: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #1: 7 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 7 to 13
Garbage collection #2: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #1: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #2: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #3: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 47 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 47 to 89
Garbage collection #2: 89 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 89 to 173
Garbage collection #3: 173 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 173 to 337
Garbage collection #4: 337 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 337 to 673
Garbage collection #5: 673 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 673 to 1327
Garbage collection #1: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #2: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #3: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #4: 223 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 223 to 443
Garbage collection #5: 443 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 443 to 883
Garbage collection #1: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #2: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #3: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #1: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #2: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #3: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #4: 277 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 277 to 547
[2020-11-25 07:50:44,038 WARN  L188               SmtUtils]: Spent 248.00 ms on a formula simplification. DAG size of input: 232 DAG size of output: 222
Garbage collection #1: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #2: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #3: 317 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 317 to 631
Garbage collection #4: 631 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 631 to 1259
Garbage collection #5: 1259 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1259 to 2503
Garbage collection #6: 2503 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2503 to 5003
Garbage collection #1: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #2: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #3: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #4: 317 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 317 to 631
Garbage collection #5: 631 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 631 to 1259
Garbage collection #1: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #2: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #3: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #4: 277 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 277 to 547
Garbage collection #1: 89 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 89 to 173
Garbage collection #2: 173 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 173 to 337
Garbage collection #3: 337 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 337 to 673
Garbage collection #4: 673 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 673 to 1327
Garbage collection #5: 1327 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1327 to 2647
Garbage collection #6: 2647 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2647 to 5281
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 59 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 59 to 113
Garbage collection #2: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #3: 223 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 223 to 443
Garbage collection #4: 443 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 443 to 883
Garbage collection #5: 883 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 883 to 1759
Garbage collection #1: 71 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 71 to 139
Garbage collection #2: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #3: 277 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 277 to 547
Garbage collection #4: 547 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 547 to 1093
Garbage collection #5: 1093 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1093 to 2179
Garbage collection #6: 2179 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 2179 to 4357
Garbage collection #1: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #2: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #3: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #4: 317 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 317 to 631
Garbage collection #5: 631 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 631 to 1259
Garbage collection #1: 109 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 109 to 211
Garbage collection #2: 211 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 211 to 421
Garbage collection #3: 421 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 421 to 839
Garbage collection #4: 839 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 839 to 1669
Garbage collection #5: 1669 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 1669 to 3331
Garbage collection #6: 3331 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 3331 to 6661
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #1: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #2: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #3: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #4: 397 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 397 to 787
Garbage collection #5: 787 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 787 to 1571
Garbage collection #1: 41 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 41 to 79
Garbage collection #2: 79 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 79 to 157
Garbage collection #3: 157 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 157 to 313
Garbage collection #4: 313 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 313 to 619
Garbage collection #5: 619 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 619 to 1237
Garbage collection #6: 1237 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1237 to 2473
Garbage collection #1: 97 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 97 to 193
Garbage collection #2: 193 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 193 to 383
Garbage collection #3: 383 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 383 to 761
Garbage collection #4: 761 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 761 to 1511
Garbage collection #5: 1511 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1511 to 3019
Garbage collection #6: 3019 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3019 to 6037
[2020-11-25 07:50:44,940 WARN  L188               SmtUtils]: Spent 296.00 ms on a formula simplification. DAG size of input: 240 DAG size of output: 231
Garbage collection #1: 89 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 89 to 173
Garbage collection #2: 173 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 173 to 337
Garbage collection #3: 337 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 337 to 673
Garbage collection #4: 673 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 673 to 1327
Garbage collection #5: 1327 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1327 to 2647
Garbage collection #6: 2647 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 2647 to 5281
Garbage collection #7: 5281 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 5281 to 10559
Garbage collection #1: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #2: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #3: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #4: 397 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 397 to 787
Garbage collection #5: 787 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 787 to 1571
Garbage collection #6: 1571 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1571 to 3137
Garbage collection #7: 3137 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3137 to 6271
[2020-11-25 07:50:45,128 WARN  L188               SmtUtils]: Spent 113.00 ms on a formula simplification that was a NOOP. DAG size: 292
Garbage collection #1: 127 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 127 to 251
Garbage collection #2: 251 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 251 to 499
Garbage collection #3: 499 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 499 to 997
Garbage collection #4: 997 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 997 to 1993
Garbage collection #5: 1993 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1993 to 3967
Garbage collection #6: 3967 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3967 to 7933
[2020-11-25 07:50:46,218 WARN  L188               SmtUtils]: Spent 998.00 ms on a formula simplification. DAG size of input: 594 DAG size of output: 584
Garbage collection #1: 251 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 251 to 499
Garbage collection #2: 499 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 499 to 997
Garbage collection #3: 997 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 997 to 1993
Garbage collection #4: 1993 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1993 to 3967
Garbage collection #5: 3967 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3967 to 7933
Garbage collection #6: 7933 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 7933 to 15859
Garbage collection #7: 15859 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 15859 to 31699
Garbage collection #1: 71 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 71 to 139
Garbage collection #2: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #3: 277 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 277 to 547
Garbage collection #4: 547 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 547 to 1093
Garbage collection #5: 1093 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 1093 to 2179
Garbage collection #6: 2179 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 2179 to 4357
Garbage collection #1: 107 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 107 to 211
Garbage collection #2: 211 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 211 to 421
Garbage collection #3: 421 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 421 to 839
Garbage collection #4: 839 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 839 to 1669
Garbage collection #5: 1669 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1669 to 3331
Garbage collection #6: 3331 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3331 to 6661
Garbage collection #1: 67 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 67 to 131
Garbage collection #2: 131 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 131 to 257
Garbage collection #3: 257 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 257 to 509
Garbage collection #4: 509 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 509 to 1013
Garbage collection #5: 1013 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1013 to 2017
Garbage collection #6: 2017 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2017 to 4027
[2020-11-25 07:50:46,638 WARN  L188               SmtUtils]: Spent 163.00 ms on a formula simplification. DAG size of input: 296 DAG size of output: 295
Garbage collection #1: 107 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 107 to 211
Garbage collection #2: 211 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 211 to 421
Garbage collection #3: 421 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 421 to 839
Garbage collection #4: 839 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 839 to 1669
Garbage collection #5: 1669 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1669 to 3331
Garbage collection #6: 3331 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3331 to 6661
Garbage collection #1: 107 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 107 to 211
Garbage collection #2: 211 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 211 to 421
Garbage collection #3: 421 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 421 to 839
Garbage collection #4: 839 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 839 to 1669
Garbage collection #5: 1669 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1669 to 3331
Garbage collection #6: 3331 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3331 to 6661
[2020-11-25 07:50:46,732 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 07:50:46,739 INFO  L216          LassoAnalysis]: Preferences:
[2020-11-25 07:50:46,740 INFO  L124   ssoRankerPreferences]: Compute integeral hull: false
[2020-11-25 07:50:46,740 INFO  L125   ssoRankerPreferences]: Enable LassoPartitioneer: true
[2020-11-25 07:50:46,740 INFO  L126   ssoRankerPreferences]: Term annotations enabled: false
[2020-11-25 07:50:46,740 INFO  L127   ssoRankerPreferences]: Use exernal solver: true
[2020-11-25 07:50:46,740 INFO  L128   ssoRankerPreferences]: SMT solver command: z3 SMTLIB2_COMPLIANT=true -memory:1024 -smt2 -in -t:12000
[2020-11-25 07:50:46,740 INFO  L129   ssoRankerPreferences]: Dump SMT script to file: false
[2020-11-25 07:50:46,740 INFO  L130   ssoRankerPreferences]: Path of dumped script: 
[2020-11-25 07:50:46,740 INFO  L131   ssoRankerPreferences]: Filename of dumped script: UPCToken_0x91c4b0cfc5eac8b8c5fd953ae9fbc707b520a7d6_transfer-self.bpl_BEv2_Iteration13_Lasso
[2020-11-25 07:50:46,740 INFO  L132   ssoRankerPreferences]: MapElimAlgo: Frank
[2020-11-25 07:50:46,740 INFO  L282          LassoAnalysis]: Starting lasso preprocessing...
Garbage collection #1: 127 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 127 to 251
Garbage collection #2: 251 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 251 to 499
Garbage collection #3: 499 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 499 to 997
Garbage collection #4: 997 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 997 to 1993
Garbage collection #5: 1993 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1993 to 3967
Garbage collection #6: 3967 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3967 to 7933
Garbage collection #1: 67 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 67 to 131
Garbage collection #2: 131 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 131 to 257
Garbage collection #3: 257 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 257 to 509
Garbage collection #4: 509 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 509 to 1013
Garbage collection #5: 1013 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1013 to 2017
Garbage collection #6: 2017 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2017 to 4027
[2020-11-25 07:50:46,842 INFO  L141          MapEliminator]: Using MapEliminator with SimplificationTechnique=SIMPLIFY_DDA XnfConversionTechnique=BDD_BASED AddInequalities=false OnlyTrivialImplicationsArrayWrite=false OnlyTrivialImplicationsForModifiedArguments=true OnlyArgumentsInFormula=true
[2020-11-25 07:50:46,858 FATAL L292        ToolchainWalker]: The Plugin de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer has thrown an exception:
java.lang.UnsupportedOperationException: Only formulae in NNF are supported
	at de.uni_freiburg.informatik.ultimate.modelcheckerutils.smt.mapelimination.MapEliminator.getRewrittenTransFormula(MapEliminator.java:323)
	at de.uni_freiburg.informatik.ultimate.lassoranker.preprocessors.MapEliminationLassoPreprocessor.process(MapEliminationLassoPreprocessor.java:109)
	at de.uni_freiburg.informatik.ultimate.lassoranker.variables.LassoBuilder.applyPreprocessor(LassoBuilder.java:154)
	at de.uni_freiburg.informatik.ultimate.lassoranker.variables.LassoBuilder.preprocess(LassoBuilder.java:262)
	at de.uni_freiburg.informatik.ultimate.lassoranker.LassoAnalysis.preprocess(LassoAnalysis.java:286)
	at de.uni_freiburg.informatik.ultimate.lassoranker.LassoAnalysis.<init>(LassoAnalysis.java:235)
	at de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.LassoCheck.synthesize(LassoCheck.java:788)
	at de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.LassoCheck.access$18(LassoCheck.java:715)
	at de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.LassoCheck$LassoCheckResult.checkLassoTermination(LassoCheck.java:1163)
	at de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.LassoCheck$LassoCheckResult.<init>(LassoCheck.java:1062)
	at de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.LassoCheck.<init>(LassoCheck.java:276)
	at de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiCegarLoop.iterate(BuchiCegarLoop.java:479)
	at de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver.doTerminationAnalysis(BuchiAutomizerObserver.java:153)
	at de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver.finish(BuchiAutomizerObserver.java:413)
	at de.uni_freiburg.informatik.ultimate.core.coreplugin.PluginConnector.runObserver(PluginConnector.java:168)
	at de.uni_freiburg.informatik.ultimate.core.coreplugin.PluginConnector.runTool(PluginConnector.java:151)
	at de.uni_freiburg.informatik.ultimate.core.coreplugin.PluginConnector.run(PluginConnector.java:128)
	at de.uni_freiburg.informatik.ultimate.core.coreplugin.ToolchainWalker.executePluginConnector(ToolchainWalker.java:232)
	at de.uni_freiburg.informatik.ultimate.core.coreplugin.ToolchainWalker.processPlugin(ToolchainWalker.java:226)
	at de.uni_freiburg.informatik.ultimate.core.coreplugin.ToolchainWalker.walkUnprotected(ToolchainWalker.java:142)
	at de.uni_freiburg.informatik.ultimate.core.coreplugin.ToolchainWalker.walk(ToolchainWalker.java:104)
	at de.uni_freiburg.informatik.ultimate.core.coreplugin.ToolchainManager$Toolchain.processToolchain(ToolchainManager.java:317)
	at de.uni_freiburg.informatik.ultimate.core.coreplugin.toolchain.DefaultToolchainJob.run(DefaultToolchainJob.java:145)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:55)
[2020-11-25 07:50:46,859 INFO  L168              Benchmark]: Toolchain (without parser) took 31624.19 ms. Allocated memory was 1.0 GB in the beginning and 2.6 GB in the end (delta: 1.5 GB). Free memory was 940.6 MB in the beginning and 1.3 GB in the end (delta: -311.5 MB). Peak memory consumption was 1.5 GB. Max. memory is 15.3 GB.
[2020-11-25 07:50:46,860 INFO  L168              Benchmark]: Boogie PL CUP Parser took 0.15 ms. Allocated memory is still 1.0 GB. Free memory is still 956.7 MB. There was no memory consumed. Max. memory is 15.3 GB.
[2020-11-25 07:50:46,860 INFO  L168              Benchmark]: Boogie Preprocessor took 122.15 ms. Allocated memory is still 1.0 GB. Free memory was 940.6 MB in the beginning and 919.1 MB in the end (delta: 21.5 MB). Peak memory consumption was 21.5 MB. Max. memory is 15.3 GB.
[2020-11-25 07:50:46,860 INFO  L168              Benchmark]: UtopiaSpecLang took 70.77 ms. Allocated memory is still 1.0 GB. Free memory was 919.1 MB in the beginning and 913.7 MB in the end (delta: 5.4 MB). Peak memory consumption was 5.4 MB. Max. memory is 15.3 GB.
[2020-11-25 07:50:46,861 INFO  L168              Benchmark]: Boogie Printer took 19.20 ms. Allocated memory is still 1.0 GB. Free memory was 913.7 MB in the beginning and 908.3 MB in the end (delta: 5.5 MB). Peak memory consumption was 5.5 MB. Max. memory is 15.3 GB.
[2020-11-25 07:50:46,861 INFO  L168              Benchmark]: RCFGBuilder took 924.23 ms. Allocated memory is still 1.0 GB. Free memory was 908.3 MB in the beginning and 741.9 MB in the end (delta: 166.3 MB). Peak memory consumption was 166.3 MB. Max. memory is 15.3 GB.
[2020-11-25 07:50:46,861 INFO  L168              Benchmark]: UtopiaLTL2Aut took 61.78 ms. Allocated memory was 1.0 GB in the beginning and 1.1 GB in the end (delta: 62.4 MB). Free memory was 741.9 MB in the beginning and 1.0 GB in the end (delta: -284.9 MB). Peak memory consumption was 29.3 MB. Max. memory is 15.3 GB.
[2020-11-25 07:50:46,862 INFO  L168              Benchmark]: BÃ¼chi Program Product took 1402.24 ms. Allocated memory was 1.1 GB in the beginning and 1.2 GB in the end (delta: 135.3 MB). Free memory was 1.0 GB in the beginning and 730.3 MB in the end (delta: 296.5 MB). Peak memory consumption was 431.8 MB. Max. memory is 15.3 GB.
[2020-11-25 07:50:46,862 INFO  L168              Benchmark]: BlockEncodingV2 took 206.28 ms. Allocated memory was 1.2 GB in the beginning and 1.3 GB in the end (delta: 26.7 MB). Free memory was 730.3 MB in the beginning and 1.1 GB in the end (delta: -369.6 MB). Peak memory consumption was 115.5 MB. Max. memory is 15.3 GB.
[2020-11-25 07:50:46,862 INFO  L168              Benchmark]: BuchiAutomizer took 28814.03 ms. Allocated memory was 1.3 GB in the beginning and 2.6 GB in the end (delta: 1.3 GB). Free memory was 1.1 GB in the beginning and 1.3 GB in the end (delta: -152.2 MB). Peak memory consumption was 1.5 GB. Max. memory is 15.3 GB.
[2020-11-25 07:50:46,865 INFO  L337   ainManager$Toolchain]: #######################  End [Toolchain 1] #######################
 --- Results ---
 * Results from de.uni_freiburg.informatik.ultimate.plugins.blockencoding:
  - StatisticsResult: Initial Icfg
    5278 locations, 9639 edges
  - StatisticsResult: Encoded RCFG
    5186 locations, 9389 edges
 * Results from de.uni_freiburg.informatik.ultimate.core:
  - StatisticsResult: Toolchain Benchmarks
    Benchmark results are:
 * Boogie PL CUP Parser took 0.15 ms. Allocated memory is still 1.0 GB. Free memory is still 956.7 MB. There was no memory consumed. Max. memory is 15.3 GB.
 * Boogie Preprocessor took 122.15 ms. Allocated memory is still 1.0 GB. Free memory was 940.6 MB in the beginning and 919.1 MB in the end (delta: 21.5 MB). Peak memory consumption was 21.5 MB. Max. memory is 15.3 GB.
 * UtopiaSpecLang took 70.77 ms. Allocated memory is still 1.0 GB. Free memory was 919.1 MB in the beginning and 913.7 MB in the end (delta: 5.4 MB). Peak memory consumption was 5.4 MB. Max. memory is 15.3 GB.
 * Boogie Printer took 19.20 ms. Allocated memory is still 1.0 GB. Free memory was 913.7 MB in the beginning and 908.3 MB in the end (delta: 5.5 MB). Peak memory consumption was 5.5 MB. Max. memory is 15.3 GB.
 * RCFGBuilder took 924.23 ms. Allocated memory is still 1.0 GB. Free memory was 908.3 MB in the beginning and 741.9 MB in the end (delta: 166.3 MB). Peak memory consumption was 166.3 MB. Max. memory is 15.3 GB.
 * UtopiaLTL2Aut took 61.78 ms. Allocated memory was 1.0 GB in the beginning and 1.1 GB in the end (delta: 62.4 MB). Free memory was 741.9 MB in the beginning and 1.0 GB in the end (delta: -284.9 MB). Peak memory consumption was 29.3 MB. Max. memory is 15.3 GB.
 * BÃ¼chi Program Product took 1402.24 ms. Allocated memory was 1.1 GB in the beginning and 1.2 GB in the end (delta: 135.3 MB). Free memory was 1.0 GB in the beginning and 730.3 MB in the end (delta: 296.5 MB). Peak memory consumption was 431.8 MB. Max. memory is 15.3 GB.
 * BlockEncodingV2 took 206.28 ms. Allocated memory was 1.2 GB in the beginning and 1.3 GB in the end (delta: 26.7 MB). Free memory was 730.3 MB in the beginning and 1.1 GB in the end (delta: -369.6 MB). Peak memory consumption was 115.5 MB. Max. memory is 15.3 GB.
 * BuchiAutomizer took 28814.03 ms. Allocated memory was 1.3 GB in the beginning and 2.6 GB in the end (delta: 1.3 GB). Free memory was 1.1 GB in the beginning and 1.3 GB in the end (delta: -152.2 MB). Peak memory consumption was 1.5 GB. Max. memory is 15.3 GB.
 * Results from de.uni_freiburg.informatik.ultimate.buchiprogramproduct:
  - StatisticsResult: Initial property automaton
    2 locations, 3 edges
  - StatisticsResult: Initial RCFG
    2065 locations, 2933 edges
  - StatisticsResult: BuchiProgram size
    5278 locations, 9639 edges
 * Results from de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer:
  - ExceptionOrErrorResult: UnsupportedOperationException: Only formulae in NNF are supported
    de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer: UnsupportedOperationException: Only formulae in NNF are supported: de.uni_freiburg.informatik.ultimate.modelcheckerutils.smt.mapelimination.MapEliminator.getRewrittenTransFormula(MapEliminator.java:323)
RESULT: Ultimate could not prove your program: Toolchain returned no result.
Received shutdown request...
