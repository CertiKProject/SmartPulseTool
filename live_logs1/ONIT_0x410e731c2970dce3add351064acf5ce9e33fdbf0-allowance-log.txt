This is Ultimate 0.1.24-f1553f5-m
[2020-11-25 02:43:34,325 INFO  L170        SettingsManager]: Resetting all preferences to default values...
[2020-11-25 02:43:34,327 INFO  L174        SettingsManager]: Resetting UltimateCore preferences to default values
[2020-11-25 02:43:34,339 INFO  L177        SettingsManager]: Ultimate Commandline Interface provides no preferences, ignoring...
[2020-11-25 02:43:34,339 INFO  L174        SettingsManager]: Resetting Boogie Preprocessor preferences to default values
[2020-11-25 02:43:34,340 INFO  L174        SettingsManager]: Resetting Boogie Procedure Inliner preferences to default values
[2020-11-25 02:43:34,341 INFO  L174        SettingsManager]: Resetting Abstract Interpretation preferences to default values
[2020-11-25 02:43:34,343 INFO  L174        SettingsManager]: Resetting LassoRanker preferences to default values
[2020-11-25 02:43:34,344 INFO  L174        SettingsManager]: Resetting Reaching Definitions preferences to default values
[2020-11-25 02:43:34,345 INFO  L174        SettingsManager]: Resetting SyntaxChecker preferences to default values
[2020-11-25 02:43:34,346 INFO  L177        SettingsManager]: BÃ¼chi Program Product provides no preferences, ignoring...
[2020-11-25 02:43:34,346 INFO  L174        SettingsManager]: Resetting LTL2Aut preferences to default values
[2020-11-25 02:43:34,347 INFO  L174        SettingsManager]: Resetting PEA to Boogie preferences to default values
[2020-11-25 02:43:34,347 INFO  L174        SettingsManager]: Resetting BlockEncodingV2 preferences to default values
[2020-11-25 02:43:34,348 INFO  L174        SettingsManager]: Resetting ChcToBoogie preferences to default values
[2020-11-25 02:43:34,349 INFO  L174        SettingsManager]: Resetting AutomataScriptInterpreter preferences to default values
[2020-11-25 02:43:34,349 INFO  L174        SettingsManager]: Resetting BuchiAutomizer preferences to default values
[2020-11-25 02:43:34,351 INFO  L174        SettingsManager]: Resetting CACSL2BoogieTranslator preferences to default values
[2020-11-25 02:43:34,352 INFO  L174        SettingsManager]: Resetting CodeCheck preferences to default values
[2020-11-25 02:43:34,354 INFO  L174        SettingsManager]: Resetting InvariantSynthesis preferences to default values
[2020-11-25 02:43:34,355 INFO  L174        SettingsManager]: Resetting RCFGBuilder preferences to default values
[2020-11-25 02:43:34,355 INFO  L174        SettingsManager]: Resetting TraceAbstraction preferences to default values
[2020-11-25 02:43:34,357 INFO  L177        SettingsManager]: TraceAbstractionConcurrent provides no preferences, ignoring...
[2020-11-25 02:43:34,357 INFO  L177        SettingsManager]: TraceAbstractionWithAFAs provides no preferences, ignoring...
[2020-11-25 02:43:34,357 INFO  L174        SettingsManager]: Resetting TreeAutomizer preferences to default values
[2020-11-25 02:43:34,358 INFO  L174        SettingsManager]: Resetting IcfgToChc preferences to default values
[2020-11-25 02:43:34,358 INFO  L174        SettingsManager]: Resetting IcfgTransformer preferences to default values
[2020-11-25 02:43:34,359 INFO  L177        SettingsManager]: ReqToTest provides no preferences, ignoring...
[2020-11-25 02:43:34,359 INFO  L174        SettingsManager]: Resetting UtopiaLTL2Aut preferences to default values
[2020-11-25 02:43:34,359 INFO  L174        SettingsManager]: Resetting UtopiaSpecLang preferences to default values
[2020-11-25 02:43:34,360 INFO  L174        SettingsManager]: Resetting Boogie Printer preferences to default values
[2020-11-25 02:43:34,360 INFO  L174        SettingsManager]: Resetting ChcSmtPrinter preferences to default values
[2020-11-25 02:43:34,361 INFO  L174        SettingsManager]: Resetting ReqPrinter preferences to default values
[2020-11-25 02:43:34,361 INFO  L174        SettingsManager]: Resetting Witness Printer preferences to default values
[2020-11-25 02:43:34,362 INFO  L177        SettingsManager]: Boogie PL CUP Parser provides no preferences, ignoring...
[2020-11-25 02:43:34,362 INFO  L174        SettingsManager]: Resetting CDTParser preferences to default values
[2020-11-25 02:43:34,363 INFO  L177        SettingsManager]: AutomataScriptParser provides no preferences, ignoring...
[2020-11-25 02:43:34,363 INFO  L177        SettingsManager]: ReqParser provides no preferences, ignoring...
[2020-11-25 02:43:34,363 INFO  L174        SettingsManager]: Resetting SmtParser preferences to default values
[2020-11-25 02:43:34,364 INFO  L174        SettingsManager]: Resetting Witness Parser preferences to default values
[2020-11-25 02:43:34,364 INFO  L181        SettingsManager]: Finished resetting all preferences to default values...
[2020-11-25 02:43:34,364 INFO  L98         SettingsManager]: Beginning loading settings from /mnt/data0/jon/SmartPulseTool/SmartPulse/settings.epf
[2020-11-25 02:43:34,372 INFO  L110        SettingsManager]: Loading preferences was successful
[2020-11-25 02:43:34,373 INFO  L112        SettingsManager]: Preferences different from defaults after loading the file:
[2020-11-25 02:43:34,373 INFO  L131        SettingsManager]: Preferences of LTL2Aut differ from their defaults:
[2020-11-25 02:43:34,374 INFO  L133        SettingsManager]:  * Read property from file=true
[2020-11-25 02:43:34,374 INFO  L133        SettingsManager]:  * Path to LTL*BA executable (LTL2BA, LTL3BA)=/mnt/data0/jon/SmartPulseTool/ltl2ba
[2020-11-25 02:43:34,374 INFO  L131        SettingsManager]: Preferences of BlockEncodingV2 differ from their defaults:
[2020-11-25 02:43:34,374 INFO  L133        SettingsManager]:  * Maximize final states=false
[2020-11-25 02:43:34,374 INFO  L133        SettingsManager]:  * Minimize states even if more edges are added than removed.=true
[2020-11-25 02:43:34,374 INFO  L133        SettingsManager]:  * Minimize states using LBE with the strategy=NONE
[2020-11-25 02:43:34,374 INFO  L131        SettingsManager]: Preferences of BuchiAutomizer differ from their defaults:
[2020-11-25 02:43:34,375 INFO  L133        SettingsManager]:  * Compute Interpolants along a Counterexample=Craig_TreeInterpolation
[2020-11-25 02:43:34,375 INFO  L133        SettingsManager]:  * Use old map elimination=false
[2020-11-25 02:43:34,375 INFO  L133        SettingsManager]:  * Try twofold refinement=false
[2020-11-25 02:43:34,375 INFO  L131        SettingsManager]: Preferences of CACSL2BoogieTranslator differ from their defaults:
[2020-11-25 02:43:34,375 INFO  L133        SettingsManager]:  * Check unreachability of error function in SV-COMP mode=false
[2020-11-25 02:43:34,375 INFO  L133        SettingsManager]:  * Overapproximate operations on floating types=true
[2020-11-25 02:43:34,376 INFO  L133        SettingsManager]:  * Check division by zero=IGNORE
[2020-11-25 02:43:34,376 INFO  L133        SettingsManager]:  * Pointer to allocated memory at dereference=ASSUME
[2020-11-25 02:43:34,376 INFO  L133        SettingsManager]:  * If two pointers are subtracted or compared they have the same base address=ASSUME
[2020-11-25 02:43:34,376 INFO  L133        SettingsManager]:  * Check array bounds for arrays that are off heap=ASSUME
[2020-11-25 02:43:34,376 INFO  L133        SettingsManager]:  * Check if freed pointer was valid=false
[2020-11-25 02:43:34,376 INFO  L133        SettingsManager]:  * Use constant arrays=true
[2020-11-25 02:43:34,376 INFO  L133        SettingsManager]:  * Pointer base address is valid at dereference=ASSUME
[2020-11-25 02:43:34,376 INFO  L131        SettingsManager]: Preferences of RCFGBuilder differ from their defaults:
[2020-11-25 02:43:34,377 INFO  L133        SettingsManager]:  * Size of a code block=SingleStatement
[2020-11-25 02:43:34,377 INFO  L133        SettingsManager]:  * SMT solver=Internal_SMTInterpol
[2020-11-25 02:43:34,398 INFO  L81    nceAwareModelManager]: Repository-Root is: /tmp
[2020-11-25 02:43:34,408 INFO  L259   ainManager$Toolchain]: [Toolchain 1]: Applicable parser(s) successfully (re)initialized
[2020-11-25 02:43:34,411 INFO  L215   ainManager$Toolchain]: [Toolchain 1]: Toolchain selected.
[2020-11-25 02:43:34,412 INFO  L271        PluginConnector]: Initializing Boogie PL CUP Parser...
[2020-11-25 02:43:34,412 INFO  L276        PluginConnector]: Boogie PL CUP Parser initialized
[2020-11-25 02:43:34,413 INFO  L430   ainManager$Toolchain]: [Toolchain 1]: Parsing single file: /mnt/data0/jon/SmartPulseTool/ONIT_0x410e731c2970dce3add351064acf5ce9e33fdbf0_allowance.bpl
[2020-11-25 02:43:34,413 INFO  L111           BoogieParser]: Parsing: '/mnt/data0/jon/SmartPulseTool/ONIT_0x410e731c2970dce3add351064acf5ce9e33fdbf0_allowance.bpl'
[2020-11-25 02:43:34,541 INFO  L297   ainManager$Toolchain]: ####################### [Toolchain 1] #######################
[2020-11-25 02:43:34,542 INFO  L131        ToolchainWalker]: Walking toolchain with 8 elements.
[2020-11-25 02:43:34,543 INFO  L113        PluginConnector]: ------------------------Boogie Preprocessor----------------------------
[2020-11-25 02:43:34,543 INFO  L271        PluginConnector]: Initializing Boogie Preprocessor...
[2020-11-25 02:43:34,543 INFO  L276        PluginConnector]: Boogie Preprocessor initialized
[2020-11-25 02:43:34,560 INFO  L185        PluginConnector]: Executing the observer EnsureBoogieModelObserver from plugin Boogie Preprocessor for "ONIT_0x410e731c2970dce3add351064acf5ce9e33fdbf0_allowance.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 02:43:34" (1/1) ...
[2020-11-25 02:43:34,562 INFO  L185        PluginConnector]: Executing the observer TypeChecker from plugin Boogie Preprocessor for "ONIT_0x410e731c2970dce3add351064acf5ce9e33fdbf0_allowance.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 02:43:34" (1/1) ...
[2020-11-25 02:43:34,611 INFO  L185        PluginConnector]: Executing the observer ConstExpander from plugin Boogie Preprocessor for "ONIT_0x410e731c2970dce3add351064acf5ce9e33fdbf0_allowance.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 02:43:34" (1/1) ...
[2020-11-25 02:43:34,612 INFO  L185        PluginConnector]: Executing the observer StructExpander from plugin Boogie Preprocessor for "ONIT_0x410e731c2970dce3add351064acf5ce9e33fdbf0_allowance.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 02:43:34" (1/1) ...
[2020-11-25 02:43:34,657 INFO  L185        PluginConnector]: Executing the observer UnstructureCode from plugin Boogie Preprocessor for "ONIT_0x410e731c2970dce3add351064acf5ce9e33fdbf0_allowance.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 02:43:34" (1/1) ...
[2020-11-25 02:43:34,682 INFO  L185        PluginConnector]: Executing the observer FunctionInliner from plugin Boogie Preprocessor for "ONIT_0x410e731c2970dce3add351064acf5ce9e33fdbf0_allowance.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 02:43:34" (1/1) ...
[2020-11-25 02:43:34,698 INFO  L185        PluginConnector]: Executing the observer BoogieSymbolTableConstructor from plugin Boogie Preprocessor for "ONIT_0x410e731c2970dce3add351064acf5ce9e33fdbf0_allowance.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 02:43:34" (1/1) ...
[2020-11-25 02:43:34,720 INFO  L132        PluginConnector]: ------------------------ END Boogie Preprocessor----------------------------
[2020-11-25 02:43:34,720 INFO  L113        PluginConnector]: ------------------------UtopiaSpecLang----------------------------
[2020-11-25 02:43:34,721 INFO  L271        PluginConnector]: Initializing UtopiaSpecLang...
[2020-11-25 02:43:34,723 INFO  L276        PluginConnector]: UtopiaSpecLang initialized
[2020-11-25 02:43:34,727 INFO  L185        PluginConnector]: Executing the observer UtopiaSpecLangObserver from plugin UtopiaSpecLang for "ONIT_0x410e731c2970dce3add351064acf5ce9e33fdbf0_allowance.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 02:43:34" (1/1) ...
[2020-11-25 02:43:34,755 INFO  L1012  opiaSpecLangObserver]: Parsing LTLPlus Formula to AstNode: [](started(ERC20.allowance(owner, spender), _allowed_ERC20[this][owner][spender] >= 0 && _allowed_ERC20[this][owner][spender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(finished(ERC20.allowance(owner, spender), return == _allowed_ERC20[this][owner][spender] &&  _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this]) && _balances_ERC20[this] == old(_balances_ERC20[this]) && _allowed_ERC20[this] == old(_allowed_ERC20[this]) && implementation_ONIT[this] == old(implementation_ONIT[this]) && M_Ref_Ref[timelockList_ONIT[this]] == old(M_Ref_Ref[timelockList_ONIT[this]]) && frozenAccount_ONIT[this] == old(frozenAccount_ONIT[this]) && _paused_Pausable[this] == old(_paused_Pausable[this]) && _pausers_PauserRole[this] == old(_pausers_PauserRole[this]) && owner_Ownable[this] == old(owner_Ownable[this]) && newOwner_Ownable[this] == old(newOwner_Ownable[this]) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this]) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this]) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]))))
[2020-11-25 02:43:34,761 INFO  L1016  opiaSpecLangObserver]: Successfully lexed: [](started(ERC20.allowance(owner, spender), _allowed_ERC20[this][owner][spender] >= 0 && _allowed_ERC20[this][owner][spender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(finished(ERC20.allowance(owner, spender), return == _allowed_ERC20[this][owner][spender] &&  _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this]) && _balances_ERC20[this] == old(_balances_ERC20[this]) && _allowed_ERC20[this] == old(_allowed_ERC20[this]) && implementation_ONIT[this] == old(implementation_ONIT[this]) && M_Ref_Ref[timelockList_ONIT[this]] == old(M_Ref_Ref[timelockList_ONIT[this]]) && frozenAccount_ONIT[this] == old(frozenAccount_ONIT[this]) && _paused_Pausable[this] == old(_paused_Pausable[this]) && _pausers_PauserRole[this] == old(_pausers_PauserRole[this]) && owner_Ownable[this] == old(owner_Ownable[this]) && newOwner_Ownable[this] == old(newOwner_Ownable[this]) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this]) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this]) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]))))
[2020-11-25 02:43:34,768 INFO  L1018  opiaSpecLangObserver]: Successfully parsed: [](started(ERC20.allowance(owner, spender), _allowed_ERC20[this][owner][spender] >= 0 && _allowed_ERC20[this][owner][spender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(finished(ERC20.allowance(owner, spender), return == _allowed_ERC20[this][owner][spender] &&  _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this]) && _balances_ERC20[this] == old(_balances_ERC20[this]) && _allowed_ERC20[this] == old(_allowed_ERC20[this]) && implementation_ONIT[this] == old(implementation_ONIT[this]) && M_Ref_Ref[timelockList_ONIT[this]] == old(M_Ref_Ref[timelockList_ONIT[this]]) && frozenAccount_ONIT[this] == old(frozenAccount_ONIT[this]) && _paused_Pausable[this] == old(_paused_Pausable[this]) && _pausers_PauserRole[this] == old(_pausers_PauserRole[this]) && owner_Ownable[this] == old(owner_Ownable[this]) && newOwner_Ownable[this] == old(newOwner_Ownable[this]) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this]) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this]) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]))))
[2020-11-25 02:43:34,778 INFO  L636   opiaSpecLangObserver]: Parsed ( _allowed_ERC20[this][owner_s656][spender_s656]>=0 && _allowed_ERC20[this][owner_s656][spender_s656]<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) to BinaryExpression[LOGICAND,BinaryExpression[COMPGEQ,ArrayAccessExpression[ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_allowed_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,allowance~address~address_ERC20>]]],[IdentifierExpression[owner_s656,<IMPLEMENTATION_INPARAM,allowance~address~address_ERC20>]]],[IdentifierExpression[spender_s656,<IMPLEMENTATION_INPARAM,allowance~address~address_ERC20>]]],IntegerLiteral[0]],BinaryExpression[COMPLT,ArrayAccessExpression[ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_allowed_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,allowance~address~address_ERC20>]]],[IdentifierExpression[owner_s656,<IMPLEMENTATION_INPARAM,allowance~address~address_ERC20>]]],[IdentifierExpression[spender_s656,<IMPLEMENTATION_INPARAM,allowance~address~address_ERC20>]]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]]
[2020-11-25 02:43:34,783 INFO  L636   opiaSpecLangObserver]: Parsed ( ( ( ( ( ( ( ( ( ( ( ( ( __ret_0_==_allowed_ERC20[this][owner_s656][spender_s656] && _totalSupply_ERC20[this]==( old(_totalSupply_ERC20[this]) ) ) && _balances_ERC20[this]==( old(_balances_ERC20[this]) ) ) && _allowed_ERC20[this]==( old(_allowed_ERC20[this]) ) ) && implementation_ONIT[this]==( old(implementation_ONIT[this]) ) ) && M_Ref_Ref[timelockList_ONIT[this]]==( old(M_Ref_Ref[timelockList_ONIT[this]]) ) ) && frozenAccount_ONIT[this]==( old(frozenAccount_ONIT[this]) ) ) && _paused_Pausable[this]==( old(_paused_Pausable[this]) ) ) && _pausers_PauserRole[this]==( old(_pausers_PauserRole[this]) ) ) && owner_Ownable[this]==( old(owner_Ownable[this]) ) ) && newOwner_Ownable[this]==( old(newOwner_Ownable[this]) ) ) && _name_ERC20Detailed[this]==( old(_name_ERC20Detailed[this]) ) ) && _symbol_ERC20Detailed[this]==( old(_symbol_ERC20Detailed[this]) ) ) && _decimals_ERC20Detailed[this]==( old(_decimals_ERC20Detailed[this]) ) ) to BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[COMPEQ,IdentifierExpression[__ret_0_,<IMPLEMENTATION_OUTPARAM,allowance~address~address_ERC20>],ArrayAccessExpression[ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_allowed_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,allowance~address~address_ERC20>]]],[IdentifierExpression[owner_s656,<IMPLEMENTATION_INPARAM,allowance~address~address_ERC20>]]],[IdentifierExpression[spender_s656,<IMPLEMENTATION_INPARAM,allowance~address~address_ERC20>]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[_totalSupply_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,allowance~address~address_ERC20>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[_totalSupply_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,allowance~address~address_ERC20>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[_balances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,allowance~address~address_ERC20>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[_balances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,allowance~address~address_ERC20>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[_allowed_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,allowance~address~address_ERC20>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[_allowed_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,allowance~address~address_ERC20>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[implementation_ONIT,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,allowance~address~address_ERC20>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[implementation_ONIT,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,allowance~address~address_ERC20>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[M_Ref_Ref,GLOBAL],[ArrayAccessExpression[IdentifierExpression[timelockList_ONIT,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,allowance~address~address_ERC20>]]]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[M_Ref_Ref,GLOBAL],[ArrayAccessExpression[IdentifierExpression[timelockList_ONIT,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,allowance~address~address_ERC20>]]]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[frozenAccount_ONIT,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,allowance~address~address_ERC20>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[frozenAccount_ONIT,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,allowance~address~address_ERC20>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[_paused_Pausable,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,allowance~address~address_ERC20>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[_paused_Pausable,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,allowance~address~address_ERC20>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[_pausers_PauserRole,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,allowance~address~address_ERC20>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[_pausers_PauserRole,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,allowance~address~address_ERC20>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[owner_Ownable,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,allowance~address~address_ERC20>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[owner_Ownable,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,allowance~address~address_ERC20>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[newOwner_Ownable,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,allowance~address~address_ERC20>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[newOwner_Ownable,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,allowance~address~address_ERC20>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[_name_ERC20Detailed,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,allowance~address~address_ERC20>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[_name_ERC20Detailed,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,allowance~address~address_ERC20>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[_symbol_ERC20Detailed,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,allowance~address~address_ERC20>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[_symbol_ERC20Detailed,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,allowance~address~address_ERC20>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[_decimals_ERC20Detailed,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,allowance~address~address_ERC20>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[_decimals_ERC20Detailed,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,allowance~address~address_ERC20>]]]]]]
[2020-11-25 02:43:34,791 INFO  L1005  opiaSpecLangObserver]: Compiling: [](started(ERC20.allowance(owner, spender), _allowed_ERC20[this][owner][spender] >= 0 && _allowed_ERC20[this][owner][spender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(finished(ERC20.allowance(owner, spender), return == _allowed_ERC20[this][owner][spender] &&  _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this]) && _balances_ERC20[this] == old(_balances_ERC20[this]) && _allowed_ERC20[this] == old(_allowed_ERC20[this]) && implementation_ONIT[this] == old(implementation_ONIT[this]) && M_Ref_Ref[timelockList_ONIT[this]] == old(M_Ref_Ref[timelockList_ONIT[this]]) && frozenAccount_ONIT[this] == old(frozenAccount_ONIT[this]) && _paused_Pausable[this] == old(_paused_Pausable[this]) && _pausers_PauserRole[this] == old(_pausers_PauserRole[this]) && owner_Ownable[this] == old(owner_Ownable[this]) && newOwner_Ownable[this] == old(newOwner_Ownable[this]) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this]) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this]) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]))))
[2020-11-25 02:43:34,792 INFO  L1007  opiaSpecLangObserver]: Compiled to ( []( AP(call_allowance_ERC200) ==> ( <>AP(success_allowance_ERC200) ) ) )
Executed UtopiaSpecLang
[2020-11-25 02:43:34,814 INFO  L202        PluginConnector]: Adding new model Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 02:43:34 PropertyContainer
[2020-11-25 02:43:34,814 INFO  L132        PluginConnector]: ------------------------ END UtopiaSpecLang----------------------------
[2020-11-25 02:43:34,814 INFO  L113        PluginConnector]: ------------------------Boogie Printer----------------------------
[2020-11-25 02:43:34,815 INFO  L271        PluginConnector]: Initializing Boogie Printer...
[2020-11-25 02:43:34,815 INFO  L276        PluginConnector]: Boogie Printer initialized
[2020-11-25 02:43:34,816 INFO  L185        PluginConnector]: Executing the observer BoogiePrinterObserver from plugin Boogie Printer for "ONIT_0x410e731c2970dce3add351064acf5ce9e33fdbf0_allowance.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 02:43:34" (1/2) ...
[2020-11-25 02:43:34,817 INFO  L116   oogiePrinterObserver]: File already exists and will be overwritten: /tmp/boogiePrinter.bpl
[2020-11-25 02:43:34,817 INFO  L120   oogiePrinterObserver]: Writing to file /tmp/boogiePrinter.bpl
[2020-11-25 02:43:34,850 INFO  L185        PluginConnector]: Executing the observer BoogiePrinterObserver from plugin Boogie Printer for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 02:43:34" (2/2) ...
[2020-11-25 02:43:34,851 INFO  L132        PluginConnector]: ------------------------ END Boogie Printer----------------------------
[2020-11-25 02:43:34,851 INFO  L113        PluginConnector]: ------------------------RCFGBuilder----------------------------
[2020-11-25 02:43:34,851 INFO  L271        PluginConnector]: Initializing RCFGBuilder...
[2020-11-25 02:43:34,851 INFO  L276        PluginConnector]: RCFGBuilder initialized
[2020-11-25 02:43:34,852 INFO  L185        PluginConnector]: Executing the observer RCFGBuilderObserver from plugin RCFGBuilder for "ONIT_0x410e731c2970dce3add351064acf5ce9e33fdbf0_allowance.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 02:43:34" (1/2) ...
[2020-11-25 02:43:34,908 INFO  L130     BoogieDeclarations]: Found specification of procedure FreshRefGenerator__success
[2020-11-25 02:43:34,908 INFO  L130     BoogieDeclarations]: Found specification of procedure Roles.Role_ctor__success
[2020-11-25 02:43:34,908 INFO  L130     BoogieDeclarations]: Found specification of procedure ONIT.LockInfo_ctor__success
[2020-11-25 02:43:34,908 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath_NoBaseCtor__success
[2020-11-25 02:43:34,909 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath
[2020-11-25 02:43:34,909 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath
[2020-11-25 02:43:34,909 INFO  L130     BoogieDeclarations]: Found specification of procedure mul~uint256~uint256_SafeMath__success
[2020-11-25 02:43:34,909 INFO  L130     BoogieDeclarations]: Found specification of procedure div~uint256~uint256_SafeMath__success
[2020-11-25 02:43:34,909 INFO  L130     BoogieDeclarations]: Found specification of procedure sub~uint256~uint256_SafeMath__success
[2020-11-25 02:43:34,909 INFO  L130     BoogieDeclarations]: Found specification of procedure add~uint256~uint256_SafeMath__success
[2020-11-25 02:43:34,909 INFO  L130     BoogieDeclarations]: Found specification of procedure mod~uint256~uint256_SafeMath__success
[2020-11-25 02:43:34,909 INFO  L130     BoogieDeclarations]: Found specification of procedure Roles_Roles_NoBaseCtor__success
[2020-11-25 02:43:34,909 INFO  L130     BoogieDeclarations]: Found specification of procedure Roles_Roles
[2020-11-25 02:43:34,910 INFO  L138     BoogieDeclarations]: Found implementation of procedure Roles_Roles
[2020-11-25 02:43:34,910 INFO  L130     BoogieDeclarations]: Found specification of procedure add~Role~address_Roles__success
[2020-11-25 02:43:34,910 INFO  L130     BoogieDeclarations]: Found specification of procedure remove~Role~address_Roles__success
[2020-11-25 02:43:34,910 INFO  L130     BoogieDeclarations]: Found specification of procedure has~Role~address_Roles__success
[2020-11-25 02:43:34,910 INFO  L130     BoogieDeclarations]: Found specification of procedure Ownable_Ownable_NoBaseCtor__success
[2020-11-25 02:43:34,910 INFO  L130     BoogieDeclarations]: Found specification of procedure Ownable_Ownable
[2020-11-25 02:43:34,910 INFO  L138     BoogieDeclarations]: Found implementation of procedure Ownable_Ownable
[2020-11-25 02:43:34,910 INFO  L130     BoogieDeclarations]: Found specification of procedure isOwner~address_Ownable
[2020-11-25 02:43:34,911 INFO  L138     BoogieDeclarations]: Found implementation of procedure isOwner~address_Ownable
[2020-11-25 02:43:34,911 INFO  L130     BoogieDeclarations]: Found specification of procedure transferOwnership~address_Ownable
[2020-11-25 02:43:34,911 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferOwnership~address_Ownable
[2020-11-25 02:43:34,911 INFO  L130     BoogieDeclarations]: Found specification of procedure acceptOwnership_Ownable
[2020-11-25 02:43:34,911 INFO  L138     BoogieDeclarations]: Found implementation of procedure acceptOwnership_Ownable
[2020-11-25 02:43:34,911 INFO  L130     BoogieDeclarations]: Found specification of procedure owner_Ownable
[2020-11-25 02:43:34,911 INFO  L138     BoogieDeclarations]: Found implementation of procedure owner_Ownable
[2020-11-25 02:43:34,912 INFO  L130     BoogieDeclarations]: Found specification of procedure newOwner_Ownable
[2020-11-25 02:43:34,912 INFO  L138     BoogieDeclarations]: Found implementation of procedure newOwner_Ownable
[2020-11-25 02:43:34,912 INFO  L130     BoogieDeclarations]: Found specification of procedure PauserRole_PauserRole_NoBaseCtor__success
[2020-11-25 02:43:34,912 INFO  L130     BoogieDeclarations]: Found specification of procedure PauserRole_PauserRole
[2020-11-25 02:43:34,913 INFO  L138     BoogieDeclarations]: Found implementation of procedure PauserRole_PauserRole
[2020-11-25 02:43:34,913 INFO  L130     BoogieDeclarations]: Found specification of procedure isPauser~address_PauserRole
[2020-11-25 02:43:34,913 INFO  L138     BoogieDeclarations]: Found implementation of procedure isPauser~address_PauserRole
[2020-11-25 02:43:34,913 INFO  L130     BoogieDeclarations]: Found specification of procedure addPauser~address_PauserRole
[2020-11-25 02:43:34,913 INFO  L138     BoogieDeclarations]: Found implementation of procedure addPauser~address_PauserRole
[2020-11-25 02:43:34,913 INFO  L130     BoogieDeclarations]: Found specification of procedure removePauser~address_PauserRole
[2020-11-25 02:43:34,913 INFO  L138     BoogieDeclarations]: Found implementation of procedure removePauser~address_PauserRole
[2020-11-25 02:43:34,913 INFO  L130     BoogieDeclarations]: Found specification of procedure renouncePauser_PauserRole
[2020-11-25 02:43:34,913 INFO  L138     BoogieDeclarations]: Found implementation of procedure renouncePauser_PauserRole
[2020-11-25 02:43:34,913 INFO  L130     BoogieDeclarations]: Found specification of procedure _addPauser~address_PauserRole__success
[2020-11-25 02:43:34,914 INFO  L130     BoogieDeclarations]: Found specification of procedure _removePauser~address_PauserRole__success
[2020-11-25 02:43:34,914 INFO  L130     BoogieDeclarations]: Found specification of procedure Pausable_Pausable_NoBaseCtor__success
[2020-11-25 02:43:34,914 INFO  L130     BoogieDeclarations]: Found specification of procedure Pausable_Pausable
[2020-11-25 02:43:34,914 INFO  L138     BoogieDeclarations]: Found implementation of procedure Pausable_Pausable
[2020-11-25 02:43:34,914 INFO  L130     BoogieDeclarations]: Found specification of procedure paused_Pausable
[2020-11-25 02:43:34,914 INFO  L138     BoogieDeclarations]: Found implementation of procedure paused_Pausable
[2020-11-25 02:43:34,914 INFO  L130     BoogieDeclarations]: Found specification of procedure pause_Pausable
[2020-11-25 02:43:34,914 INFO  L138     BoogieDeclarations]: Found implementation of procedure pause_Pausable
[2020-11-25 02:43:34,914 INFO  L130     BoogieDeclarations]: Found specification of procedure unpause_Pausable
[2020-11-25 02:43:34,914 INFO  L138     BoogieDeclarations]: Found implementation of procedure unpause_Pausable
[2020-11-25 02:43:34,915 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20_NoBaseCtor__success
[2020-11-25 02:43:34,915 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20
[2020-11-25 02:43:34,915 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20
[2020-11-25 02:43:34,915 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_IERC20
[2020-11-25 02:43:34,915 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_IERC20
[2020-11-25 02:43:34,915 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_IERC20
[2020-11-25 02:43:34,915 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_IERC20
[2020-11-25 02:43:34,915 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_IERC20
[2020-11-25 02:43:34,915 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_IERC20
[2020-11-25 02:43:34,915 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20_NoBaseCtor__success
[2020-11-25 02:43:34,916 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20
[2020-11-25 02:43:34,916 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20
[2020-11-25 02:43:34,916 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_ERC20
[2020-11-25 02:43:34,916 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_ERC20
[2020-11-25 02:43:34,916 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_ERC20
[2020-11-25 02:43:34,916 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_ERC20
[2020-11-25 02:43:34,916 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_ERC20
[2020-11-25 02:43:34,916 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_ERC20
[2020-11-25 02:43:34,916 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_ERC20
[2020-11-25 02:43:34,916 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_ERC20
[2020-11-25 02:43:34,916 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_ERC20
[2020-11-25 02:43:34,917 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_ERC20
[2020-11-25 02:43:34,917 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_ERC20
[2020-11-25 02:43:34,917 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_ERC20
[2020-11-25 02:43:34,917 INFO  L130     BoogieDeclarations]: Found specification of procedure increaseAllowance~address~uint256_ERC20
[2020-11-25 02:43:34,917 INFO  L138     BoogieDeclarations]: Found implementation of procedure increaseAllowance~address~uint256_ERC20
[2020-11-25 02:43:34,917 INFO  L130     BoogieDeclarations]: Found specification of procedure decreaseAllowance~address~uint256_ERC20
[2020-11-25 02:43:34,917 INFO  L138     BoogieDeclarations]: Found implementation of procedure decreaseAllowance~address~uint256_ERC20
[2020-11-25 02:43:34,917 INFO  L130     BoogieDeclarations]: Found specification of procedure _transfer~address~address~uint256_ERC20__success
[2020-11-25 02:43:34,917 INFO  L130     BoogieDeclarations]: Found specification of procedure _mint~address~uint256_ERC20__success
[2020-11-25 02:43:34,917 INFO  L130     BoogieDeclarations]: Found specification of procedure _burn~address~uint256_ERC20__success
[2020-11-25 02:43:34,918 INFO  L130     BoogieDeclarations]: Found specification of procedure _burnFrom~address~uint256_ERC20__success
[2020-11-25 02:43:34,918 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Pausable_ERC20Pausable_NoBaseCtor__success
[2020-11-25 02:43:34,918 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Pausable_ERC20Pausable
[2020-11-25 02:43:34,918 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Pausable_ERC20Pausable
[2020-11-25 02:43:34,918 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_ERC20Pausable
[2020-11-25 02:43:34,918 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_ERC20Pausable
[2020-11-25 02:43:34,918 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_ERC20Pausable
[2020-11-25 02:43:34,918 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_ERC20Pausable
[2020-11-25 02:43:34,918 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Detailed_ERC20Detailed_NoBaseCtor__success
[2020-11-25 02:43:34,919 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Detailed_ERC20Detailed
[2020-11-25 02:43:34,919 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Detailed_ERC20Detailed
[2020-11-25 02:43:34,919 INFO  L130     BoogieDeclarations]: Found specification of procedure name_ERC20Detailed
[2020-11-25 02:43:34,919 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_ERC20Detailed
[2020-11-25 02:43:34,919 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_ERC20Detailed
[2020-11-25 02:43:34,919 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_ERC20Detailed
[2020-11-25 02:43:34,919 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_ERC20Detailed
[2020-11-25 02:43:34,919 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_ERC20Detailed
[2020-11-25 02:43:34,919 INFO  L130     BoogieDeclarations]: Found specification of procedure ONIT_ONIT_NoBaseCtor__success
[2020-11-25 02:43:34,919 INFO  L130     BoogieDeclarations]: Found specification of procedure ONIT_ONIT
[2020-11-25 02:43:34,920 INFO  L138     BoogieDeclarations]: Found implementation of procedure ONIT_ONIT
[2020-11-25 02:43:34,920 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_ONIT
[2020-11-25 02:43:34,920 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_ONIT
[2020-11-25 02:43:34,920 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_ONIT
[2020-11-25 02:43:34,920 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_ONIT
[2020-11-25 02:43:34,920 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_ONIT
[2020-11-25 02:43:34,920 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_ONIT
[2020-11-25 02:43:34,920 INFO  L130     BoogieDeclarations]: Found specification of procedure freezeAccount~address_ONIT
[2020-11-25 02:43:34,920 INFO  L138     BoogieDeclarations]: Found implementation of procedure freezeAccount~address_ONIT
[2020-11-25 02:43:34,920 INFO  L130     BoogieDeclarations]: Found specification of procedure unfreezeAccount~address_ONIT
[2020-11-25 02:43:34,921 INFO  L138     BoogieDeclarations]: Found implementation of procedure unfreezeAccount~address_ONIT
[2020-11-25 02:43:34,921 INFO  L130     BoogieDeclarations]: Found specification of procedure lock~address~uint256~uint256_ONIT
[2020-11-25 02:43:34,921 INFO  L138     BoogieDeclarations]: Found implementation of procedure lock~address~uint256~uint256_ONIT
[2020-11-25 02:43:34,921 INFO  L130     BoogieDeclarations]: Found specification of procedure transferWithLock~address~uint256~uint256_ONIT
[2020-11-25 02:43:34,921 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferWithLock~address~uint256~uint256_ONIT
[2020-11-25 02:43:34,921 INFO  L130     BoogieDeclarations]: Found specification of procedure unlock~address~uint256_ONIT
[2020-11-25 02:43:34,921 INFO  L138     BoogieDeclarations]: Found implementation of procedure unlock~address~uint256_ONIT
[2020-11-25 02:43:34,922 INFO  L130     BoogieDeclarations]: Found specification of procedure upgradeTo~address_ONIT
[2020-11-25 02:43:34,922 INFO  L138     BoogieDeclarations]: Found implementation of procedure upgradeTo~address_ONIT
[2020-11-25 02:43:34,922 INFO  L130     BoogieDeclarations]: Found specification of procedure _lock~address~uint256~uint256_ONIT__success
[2020-11-25 02:43:34,922 INFO  L130     BoogieDeclarations]: Found specification of procedure _unlock~address~uint256_ONIT__success
[2020-11-25 02:43:34,922 INFO  L130     BoogieDeclarations]: Found specification of procedure _autoUnlock~address_ONIT__success
[2020-11-25 02:43:34,923 INFO  L130     BoogieDeclarations]: Found specification of procedure mint~uint256_ONIT
[2020-11-25 02:43:34,923 INFO  L138     BoogieDeclarations]: Found implementation of procedure mint~uint256_ONIT
[2020-11-25 02:43:34,923 INFO  L130     BoogieDeclarations]: Found specification of procedure _setImplementation~address_ONIT__success
[2020-11-25 02:43:34,923 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackMethod_ONIT__success
[2020-11-25 02:43:34,923 INFO  L130     BoogieDeclarations]: Found specification of procedure implementation_ONIT
[2020-11-25 02:43:34,924 INFO  L138     BoogieDeclarations]: Found implementation of procedure implementation_ONIT
[2020-11-25 02:43:34,924 INFO  L130     BoogieDeclarations]: Found specification of procedure timelockList~address~uint256_ONIT
[2020-11-25 02:43:34,924 INFO  L138     BoogieDeclarations]: Found implementation of procedure timelockList~address~uint256_ONIT
[2020-11-25 02:43:34,924 INFO  L130     BoogieDeclarations]: Found specification of procedure frozenAccount~address_ONIT
[2020-11-25 02:43:34,924 INFO  L138     BoogieDeclarations]: Found implementation of procedure frozenAccount~address_ONIT
[2020-11-25 02:43:34,925 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackDispatch__success
[2020-11-25 02:43:34,925 INFO  L130     BoogieDeclarations]: Found specification of procedure Fallback_UnknownType__success
[2020-11-25 02:43:34,925 INFO  L130     BoogieDeclarations]: Found specification of procedure send__success
[2020-11-25 02:43:34,925 INFO  L130     BoogieDeclarations]: Found specification of procedure onlyOwner_pre__success
[2020-11-25 02:43:34,925 INFO  L130     BoogieDeclarations]: Found specification of procedure onlyNewOwner_pre__success
[2020-11-25 02:43:34,926 INFO  L130     BoogieDeclarations]: Found specification of procedure onlyPauser_pre__success
[2020-11-25 02:43:34,926 INFO  L130     BoogieDeclarations]: Found specification of procedure whenNotPaused_pre__success
[2020-11-25 02:43:34,926 INFO  L130     BoogieDeclarations]: Found specification of procedure whenPaused_pre__success
[2020-11-25 02:43:34,926 INFO  L130     BoogieDeclarations]: Found specification of procedure notFrozen_pre__success
[2020-11-25 02:43:34,926 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_SafeMath
[2020-11-25 02:43:34,927 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_SafeMath
[2020-11-25 02:43:34,927 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_Roles
[2020-11-25 02:43:34,927 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_Roles
[2020-11-25 02:43:34,927 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_Ownable
[2020-11-25 02:43:34,927 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_Ownable
[2020-11-25 02:43:34,928 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_PauserRole
[2020-11-25 02:43:34,928 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_PauserRole
[2020-11-25 02:43:34,928 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_Pausable
[2020-11-25 02:43:34,928 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_Pausable
[2020-11-25 02:43:34,928 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_IERC20
[2020-11-25 02:43:34,928 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_IERC20
[2020-11-25 02:43:34,929 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_ERC20
[2020-11-25 02:43:34,929 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_ERC20
[2020-11-25 02:43:34,929 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_ERC20Pausable
[2020-11-25 02:43:34,929 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_ERC20Pausable
[2020-11-25 02:43:34,929 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_ERC20Detailed
[2020-11-25 02:43:34,930 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_ERC20Detailed
[2020-11-25 02:43:34,930 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_ONIT
[2020-11-25 02:43:34,930 INFO  L130     BoogieDeclarations]: Found specification of procedure main
[2020-11-25 02:43:34,930 INFO  L130     BoogieDeclarations]: Found specification of procedure FreshRefGenerator__fail
[2020-11-25 02:43:34,930 INFO  L130     BoogieDeclarations]: Found specification of procedure Roles.Role_ctor__fail
[2020-11-25 02:43:34,930 INFO  L130     BoogieDeclarations]: Found specification of procedure ONIT.LockInfo_ctor__fail
[2020-11-25 02:43:34,931 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath_NoBaseCtor__fail
[2020-11-25 02:43:34,931 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath__success
[2020-11-25 02:43:34,931 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath__fail
[2020-11-25 02:43:34,931 INFO  L130     BoogieDeclarations]: Found specification of procedure mul~uint256~uint256_SafeMath__fail
[2020-11-25 02:43:34,931 INFO  L130     BoogieDeclarations]: Found specification of procedure div~uint256~uint256_SafeMath__fail
[2020-11-25 02:43:34,931 INFO  L130     BoogieDeclarations]: Found specification of procedure sub~uint256~uint256_SafeMath__fail
[2020-11-25 02:43:34,932 INFO  L130     BoogieDeclarations]: Found specification of procedure add~uint256~uint256_SafeMath__fail
[2020-11-25 02:43:34,932 INFO  L130     BoogieDeclarations]: Found specification of procedure mod~uint256~uint256_SafeMath__fail
[2020-11-25 02:43:34,932 INFO  L130     BoogieDeclarations]: Found specification of procedure Roles_Roles_NoBaseCtor__fail
[2020-11-25 02:43:34,932 INFO  L130     BoogieDeclarations]: Found specification of procedure Roles_Roles__success
[2020-11-25 02:43:34,932 INFO  L130     BoogieDeclarations]: Found specification of procedure Roles_Roles__fail
[2020-11-25 02:43:34,932 INFO  L130     BoogieDeclarations]: Found specification of procedure add~Role~address_Roles__fail
[2020-11-25 02:43:34,932 INFO  L130     BoogieDeclarations]: Found specification of procedure remove~Role~address_Roles__fail
[2020-11-25 02:43:34,932 INFO  L130     BoogieDeclarations]: Found specification of procedure has~Role~address_Roles__fail
[2020-11-25 02:43:34,932 INFO  L130     BoogieDeclarations]: Found specification of procedure Ownable_Ownable_NoBaseCtor__fail
[2020-11-25 02:43:34,932 INFO  L130     BoogieDeclarations]: Found specification of procedure Ownable_Ownable__success
[2020-11-25 02:43:34,933 INFO  L130     BoogieDeclarations]: Found specification of procedure Ownable_Ownable__fail
[2020-11-25 02:43:34,933 INFO  L130     BoogieDeclarations]: Found specification of procedure isOwner~address_Ownable__success
[2020-11-25 02:43:34,933 INFO  L130     BoogieDeclarations]: Found specification of procedure isOwner~address_Ownable__fail
[2020-11-25 02:43:34,933 INFO  L130     BoogieDeclarations]: Found specification of procedure transferOwnership~address_Ownable__success
[2020-11-25 02:43:34,933 INFO  L130     BoogieDeclarations]: Found specification of procedure transferOwnership~address_Ownable__fail
[2020-11-25 02:43:34,933 INFO  L130     BoogieDeclarations]: Found specification of procedure acceptOwnership_Ownable__success
[2020-11-25 02:43:34,933 INFO  L130     BoogieDeclarations]: Found specification of procedure acceptOwnership_Ownable__fail
[2020-11-25 02:43:34,933 INFO  L130     BoogieDeclarations]: Found specification of procedure owner_Ownable__success
[2020-11-25 02:43:34,933 INFO  L130     BoogieDeclarations]: Found specification of procedure owner_Ownable__fail
[2020-11-25 02:43:34,933 INFO  L130     BoogieDeclarations]: Found specification of procedure newOwner_Ownable__success
[2020-11-25 02:43:34,933 INFO  L130     BoogieDeclarations]: Found specification of procedure newOwner_Ownable__fail
[2020-11-25 02:43:34,934 INFO  L130     BoogieDeclarations]: Found specification of procedure PauserRole_PauserRole_NoBaseCtor__fail
[2020-11-25 02:43:34,934 INFO  L130     BoogieDeclarations]: Found specification of procedure PauserRole_PauserRole__success
[2020-11-25 02:43:34,934 INFO  L130     BoogieDeclarations]: Found specification of procedure PauserRole_PauserRole__fail
[2020-11-25 02:43:34,934 INFO  L130     BoogieDeclarations]: Found specification of procedure isPauser~address_PauserRole__success
[2020-11-25 02:43:34,934 INFO  L130     BoogieDeclarations]: Found specification of procedure isPauser~address_PauserRole__fail
[2020-11-25 02:43:34,934 INFO  L130     BoogieDeclarations]: Found specification of procedure addPauser~address_PauserRole__success
[2020-11-25 02:43:34,934 INFO  L130     BoogieDeclarations]: Found specification of procedure addPauser~address_PauserRole__fail
[2020-11-25 02:43:34,934 INFO  L130     BoogieDeclarations]: Found specification of procedure removePauser~address_PauserRole__success
[2020-11-25 02:43:34,934 INFO  L130     BoogieDeclarations]: Found specification of procedure removePauser~address_PauserRole__fail
[2020-11-25 02:43:34,934 INFO  L130     BoogieDeclarations]: Found specification of procedure renouncePauser_PauserRole__success
[2020-11-25 02:43:34,934 INFO  L130     BoogieDeclarations]: Found specification of procedure renouncePauser_PauserRole__fail
[2020-11-25 02:43:34,934 INFO  L130     BoogieDeclarations]: Found specification of procedure _addPauser~address_PauserRole__fail
[2020-11-25 02:43:34,935 INFO  L130     BoogieDeclarations]: Found specification of procedure _removePauser~address_PauserRole__fail
[2020-11-25 02:43:34,935 INFO  L130     BoogieDeclarations]: Found specification of procedure Pausable_Pausable_NoBaseCtor__fail
[2020-11-25 02:43:34,935 INFO  L130     BoogieDeclarations]: Found specification of procedure Pausable_Pausable__success
[2020-11-25 02:43:34,935 INFO  L130     BoogieDeclarations]: Found specification of procedure Pausable_Pausable__fail
[2020-11-25 02:43:34,935 INFO  L130     BoogieDeclarations]: Found specification of procedure paused_Pausable__success
[2020-11-25 02:43:34,935 INFO  L130     BoogieDeclarations]: Found specification of procedure paused_Pausable__fail
[2020-11-25 02:43:34,935 INFO  L130     BoogieDeclarations]: Found specification of procedure pause_Pausable__success
[2020-11-25 02:43:34,935 INFO  L130     BoogieDeclarations]: Found specification of procedure pause_Pausable__fail
[2020-11-25 02:43:34,935 INFO  L130     BoogieDeclarations]: Found specification of procedure unpause_Pausable__success
[2020-11-25 02:43:34,935 INFO  L130     BoogieDeclarations]: Found specification of procedure unpause_Pausable__fail
[2020-11-25 02:43:34,935 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20_NoBaseCtor__fail
[2020-11-25 02:43:34,936 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20__success
[2020-11-25 02:43:34,936 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20__fail
[2020-11-25 02:43:34,936 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20_NoBaseCtor__fail
[2020-11-25 02:43:34,936 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20__success
[2020-11-25 02:43:34,936 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20__fail
[2020-11-25 02:43:34,936 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_ERC20__success
[2020-11-25 02:43:34,936 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_ERC20__fail
[2020-11-25 02:43:34,936 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_ERC20__success
[2020-11-25 02:43:34,936 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_ERC20__fail
[2020-11-25 02:43:34,936 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_ERC20__success
[2020-11-25 02:43:34,936 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_ERC20__fail
[2020-11-25 02:43:34,937 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_ERC20__success
[2020-11-25 02:43:34,937 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_ERC20__fail
[2020-11-25 02:43:34,937 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_ERC20__success
[2020-11-25 02:43:34,937 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_ERC20__fail
[2020-11-25 02:43:34,937 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_ERC20__success
[2020-11-25 02:43:34,937 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_ERC20__fail
[2020-11-25 02:43:34,937 INFO  L130     BoogieDeclarations]: Found specification of procedure increaseAllowance~address~uint256_ERC20__success
[2020-11-25 02:43:34,937 INFO  L130     BoogieDeclarations]: Found specification of procedure increaseAllowance~address~uint256_ERC20__fail
[2020-11-25 02:43:34,937 INFO  L130     BoogieDeclarations]: Found specification of procedure decreaseAllowance~address~uint256_ERC20__success
[2020-11-25 02:43:34,937 INFO  L130     BoogieDeclarations]: Found specification of procedure decreaseAllowance~address~uint256_ERC20__fail
[2020-11-25 02:43:34,937 INFO  L130     BoogieDeclarations]: Found specification of procedure _transfer~address~address~uint256_ERC20__fail
[2020-11-25 02:43:34,938 INFO  L130     BoogieDeclarations]: Found specification of procedure _mint~address~uint256_ERC20__fail
[2020-11-25 02:43:34,938 INFO  L130     BoogieDeclarations]: Found specification of procedure _burn~address~uint256_ERC20__fail
[2020-11-25 02:43:34,938 INFO  L130     BoogieDeclarations]: Found specification of procedure _burnFrom~address~uint256_ERC20__fail
[2020-11-25 02:43:34,938 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Pausable_ERC20Pausable_NoBaseCtor__fail
[2020-11-25 02:43:34,938 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Pausable_ERC20Pausable__success
[2020-11-25 02:43:34,938 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Pausable_ERC20Pausable__fail
[2020-11-25 02:43:34,938 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_ERC20Pausable__success
[2020-11-25 02:43:34,938 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_ERC20Pausable__fail
[2020-11-25 02:43:34,938 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_ERC20Pausable__success
[2020-11-25 02:43:34,938 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_ERC20Pausable__fail
[2020-11-25 02:43:34,938 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Detailed_ERC20Detailed_NoBaseCtor__fail
[2020-11-25 02:43:34,939 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Detailed_ERC20Detailed__success
[2020-11-25 02:43:34,939 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Detailed_ERC20Detailed__fail
[2020-11-25 02:43:34,939 INFO  L130     BoogieDeclarations]: Found specification of procedure name_ERC20Detailed__success
[2020-11-25 02:43:34,939 INFO  L130     BoogieDeclarations]: Found specification of procedure name_ERC20Detailed__fail
[2020-11-25 02:43:34,939 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_ERC20Detailed__success
[2020-11-25 02:43:34,939 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_ERC20Detailed__fail
[2020-11-25 02:43:34,939 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_ERC20Detailed__success
[2020-11-25 02:43:34,939 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_ERC20Detailed__fail
[2020-11-25 02:43:34,939 INFO  L130     BoogieDeclarations]: Found specification of procedure ONIT_ONIT_NoBaseCtor__fail
[2020-11-25 02:43:34,939 INFO  L130     BoogieDeclarations]: Found specification of procedure ONIT_ONIT__success
[2020-11-25 02:43:34,939 INFO  L130     BoogieDeclarations]: Found specification of procedure ONIT_ONIT__fail
[2020-11-25 02:43:34,939 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_ONIT__success
[2020-11-25 02:43:34,940 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_ONIT__fail
[2020-11-25 02:43:34,940 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_ONIT__success
[2020-11-25 02:43:34,940 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_ONIT__fail
[2020-11-25 02:43:34,940 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_ONIT__success
[2020-11-25 02:43:34,940 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_ONIT__fail
[2020-11-25 02:43:34,940 INFO  L130     BoogieDeclarations]: Found specification of procedure freezeAccount~address_ONIT__success
[2020-11-25 02:43:34,940 INFO  L130     BoogieDeclarations]: Found specification of procedure freezeAccount~address_ONIT__fail
[2020-11-25 02:43:34,940 INFO  L130     BoogieDeclarations]: Found specification of procedure unfreezeAccount~address_ONIT__success
[2020-11-25 02:43:34,940 INFO  L130     BoogieDeclarations]: Found specification of procedure unfreezeAccount~address_ONIT__fail
[2020-11-25 02:43:34,940 INFO  L130     BoogieDeclarations]: Found specification of procedure lock~address~uint256~uint256_ONIT__success
[2020-11-25 02:43:34,940 INFO  L130     BoogieDeclarations]: Found specification of procedure lock~address~uint256~uint256_ONIT__fail
[2020-11-25 02:43:34,941 INFO  L130     BoogieDeclarations]: Found specification of procedure transferWithLock~address~uint256~uint256_ONIT__success
[2020-11-25 02:43:34,941 INFO  L130     BoogieDeclarations]: Found specification of procedure transferWithLock~address~uint256~uint256_ONIT__fail
[2020-11-25 02:43:34,941 INFO  L130     BoogieDeclarations]: Found specification of procedure unlock~address~uint256_ONIT__success
[2020-11-25 02:43:34,941 INFO  L130     BoogieDeclarations]: Found specification of procedure unlock~address~uint256_ONIT__fail
[2020-11-25 02:43:34,941 INFO  L130     BoogieDeclarations]: Found specification of procedure upgradeTo~address_ONIT__success
[2020-11-25 02:43:34,941 INFO  L130     BoogieDeclarations]: Found specification of procedure upgradeTo~address_ONIT__fail
[2020-11-25 02:43:34,941 INFO  L130     BoogieDeclarations]: Found specification of procedure _lock~address~uint256~uint256_ONIT__fail
[2020-11-25 02:43:34,941 INFO  L130     BoogieDeclarations]: Found specification of procedure _unlock~address~uint256_ONIT__fail
[2020-11-25 02:43:34,941 INFO  L130     BoogieDeclarations]: Found specification of procedure _autoUnlock~address_ONIT__fail
[2020-11-25 02:43:34,941 INFO  L130     BoogieDeclarations]: Found specification of procedure mint~uint256_ONIT__success
[2020-11-25 02:43:34,941 INFO  L130     BoogieDeclarations]: Found specification of procedure mint~uint256_ONIT__fail
[2020-11-25 02:43:34,942 INFO  L130     BoogieDeclarations]: Found specification of procedure _setImplementation~address_ONIT__fail
[2020-11-25 02:43:34,942 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackMethod_ONIT__fail
[2020-11-25 02:43:34,942 INFO  L130     BoogieDeclarations]: Found specification of procedure implementation_ONIT__success
[2020-11-25 02:43:34,942 INFO  L130     BoogieDeclarations]: Found specification of procedure implementation_ONIT__fail
[2020-11-25 02:43:34,942 INFO  L130     BoogieDeclarations]: Found specification of procedure timelockList~address~uint256_ONIT__success
[2020-11-25 02:43:34,942 INFO  L130     BoogieDeclarations]: Found specification of procedure timelockList~address~uint256_ONIT__fail
[2020-11-25 02:43:34,942 INFO  L130     BoogieDeclarations]: Found specification of procedure frozenAccount~address_ONIT__success
[2020-11-25 02:43:34,942 INFO  L130     BoogieDeclarations]: Found specification of procedure frozenAccount~address_ONIT__fail
[2020-11-25 02:43:34,942 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackDispatch__fail
[2020-11-25 02:43:34,942 INFO  L130     BoogieDeclarations]: Found specification of procedure Fallback_UnknownType__fail
[2020-11-25 02:43:34,942 INFO  L130     BoogieDeclarations]: Found specification of procedure send__fail
[2020-11-25 02:43:34,943 INFO  L130     BoogieDeclarations]: Found specification of procedure onlyOwner_pre__fail
[2020-11-25 02:43:34,943 INFO  L130     BoogieDeclarations]: Found specification of procedure onlyNewOwner_pre__fail
[2020-11-25 02:43:34,943 INFO  L130     BoogieDeclarations]: Found specification of procedure onlyPauser_pre__fail
[2020-11-25 02:43:34,943 INFO  L130     BoogieDeclarations]: Found specification of procedure whenNotPaused_pre__fail
[2020-11-25 02:43:34,943 INFO  L130     BoogieDeclarations]: Found specification of procedure whenPaused_pre__fail
[2020-11-25 02:43:34,943 INFO  L130     BoogieDeclarations]: Found specification of procedure notFrozen_pre__fail
[2020-11-25 02:43:34,943 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreshRefGenerator__fail
[2020-11-25 02:43:34,943 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreshRefGenerator__success
[2020-11-25 02:43:34,943 INFO  L138     BoogieDeclarations]: Found implementation of procedure Roles.Role_ctor__fail
[2020-11-25 02:43:34,943 INFO  L138     BoogieDeclarations]: Found implementation of procedure Roles.Role_ctor__success
[2020-11-25 02:43:34,943 INFO  L138     BoogieDeclarations]: Found implementation of procedure ONIT.LockInfo_ctor__fail
[2020-11-25 02:43:34,944 INFO  L138     BoogieDeclarations]: Found implementation of procedure ONIT.LockInfo_ctor__success
[2020-11-25 02:43:34,944 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath_NoBaseCtor__fail
[2020-11-25 02:43:34,944 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath_NoBaseCtor__success
[2020-11-25 02:43:34,944 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath__fail
[2020-11-25 02:43:34,944 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath__success
[2020-11-25 02:43:34,944 INFO  L138     BoogieDeclarations]: Found implementation of procedure mul~uint256~uint256_SafeMath__fail
[2020-11-25 02:43:34,944 INFO  L138     BoogieDeclarations]: Found implementation of procedure mul~uint256~uint256_SafeMath__success
[2020-11-25 02:43:34,944 INFO  L138     BoogieDeclarations]: Found implementation of procedure div~uint256~uint256_SafeMath__fail
[2020-11-25 02:43:34,944 INFO  L138     BoogieDeclarations]: Found implementation of procedure div~uint256~uint256_SafeMath__success
[2020-11-25 02:43:34,944 INFO  L138     BoogieDeclarations]: Found implementation of procedure sub~uint256~uint256_SafeMath__fail
[2020-11-25 02:43:34,944 INFO  L138     BoogieDeclarations]: Found implementation of procedure sub~uint256~uint256_SafeMath__success
[2020-11-25 02:43:34,944 INFO  L138     BoogieDeclarations]: Found implementation of procedure add~uint256~uint256_SafeMath__fail
[2020-11-25 02:43:34,945 INFO  L138     BoogieDeclarations]: Found implementation of procedure add~uint256~uint256_SafeMath__success
[2020-11-25 02:43:34,945 INFO  L138     BoogieDeclarations]: Found implementation of procedure mod~uint256~uint256_SafeMath__fail
[2020-11-25 02:43:34,945 INFO  L138     BoogieDeclarations]: Found implementation of procedure mod~uint256~uint256_SafeMath__success
[2020-11-25 02:43:34,945 INFO  L138     BoogieDeclarations]: Found implementation of procedure Roles_Roles_NoBaseCtor__fail
[2020-11-25 02:43:34,945 INFO  L138     BoogieDeclarations]: Found implementation of procedure Roles_Roles_NoBaseCtor__success
[2020-11-25 02:43:34,945 INFO  L138     BoogieDeclarations]: Found implementation of procedure Roles_Roles__fail
[2020-11-25 02:43:34,945 INFO  L138     BoogieDeclarations]: Found implementation of procedure Roles_Roles__success
[2020-11-25 02:43:34,945 INFO  L138     BoogieDeclarations]: Found implementation of procedure add~Role~address_Roles__fail
[2020-11-25 02:43:34,945 INFO  L138     BoogieDeclarations]: Found implementation of procedure add~Role~address_Roles__success
[2020-11-25 02:43:34,945 INFO  L138     BoogieDeclarations]: Found implementation of procedure remove~Role~address_Roles__fail
[2020-11-25 02:43:34,945 INFO  L138     BoogieDeclarations]: Found implementation of procedure remove~Role~address_Roles__success
[2020-11-25 02:43:34,945 INFO  L138     BoogieDeclarations]: Found implementation of procedure has~Role~address_Roles__fail
[2020-11-25 02:43:34,946 INFO  L138     BoogieDeclarations]: Found implementation of procedure has~Role~address_Roles__success
[2020-11-25 02:43:34,946 INFO  L138     BoogieDeclarations]: Found implementation of procedure Ownable_Ownable_NoBaseCtor__fail
[2020-11-25 02:43:34,946 INFO  L138     BoogieDeclarations]: Found implementation of procedure Ownable_Ownable_NoBaseCtor__success
[2020-11-25 02:43:34,946 INFO  L138     BoogieDeclarations]: Found implementation of procedure Ownable_Ownable__fail
[2020-11-25 02:43:34,946 INFO  L138     BoogieDeclarations]: Found implementation of procedure Ownable_Ownable__success
[2020-11-25 02:43:34,946 INFO  L138     BoogieDeclarations]: Found implementation of procedure isOwner~address_Ownable__fail
[2020-11-25 02:43:34,946 INFO  L138     BoogieDeclarations]: Found implementation of procedure isOwner~address_Ownable__success
[2020-11-25 02:43:34,946 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferOwnership~address_Ownable__fail
[2020-11-25 02:43:34,946 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferOwnership~address_Ownable__success
[2020-11-25 02:43:34,946 INFO  L138     BoogieDeclarations]: Found implementation of procedure acceptOwnership_Ownable__fail
[2020-11-25 02:43:34,946 INFO  L138     BoogieDeclarations]: Found implementation of procedure acceptOwnership_Ownable__success
[2020-11-25 02:43:34,946 INFO  L138     BoogieDeclarations]: Found implementation of procedure owner_Ownable__fail
[2020-11-25 02:43:34,947 INFO  L138     BoogieDeclarations]: Found implementation of procedure owner_Ownable__success
[2020-11-25 02:43:34,947 INFO  L138     BoogieDeclarations]: Found implementation of procedure newOwner_Ownable__fail
[2020-11-25 02:43:34,947 INFO  L138     BoogieDeclarations]: Found implementation of procedure newOwner_Ownable__success
[2020-11-25 02:43:34,947 INFO  L138     BoogieDeclarations]: Found implementation of procedure PauserRole_PauserRole_NoBaseCtor__fail
[2020-11-25 02:43:34,947 INFO  L138     BoogieDeclarations]: Found implementation of procedure PauserRole_PauserRole_NoBaseCtor__success
[2020-11-25 02:43:34,947 INFO  L138     BoogieDeclarations]: Found implementation of procedure PauserRole_PauserRole__fail
[2020-11-25 02:43:34,947 INFO  L138     BoogieDeclarations]: Found implementation of procedure PauserRole_PauserRole__success
[2020-11-25 02:43:34,947 INFO  L138     BoogieDeclarations]: Found implementation of procedure isPauser~address_PauserRole__fail
[2020-11-25 02:43:34,947 INFO  L138     BoogieDeclarations]: Found implementation of procedure isPauser~address_PauserRole__success
[2020-11-25 02:43:34,947 INFO  L138     BoogieDeclarations]: Found implementation of procedure addPauser~address_PauserRole__fail
[2020-11-25 02:43:34,947 INFO  L138     BoogieDeclarations]: Found implementation of procedure addPauser~address_PauserRole__success
[2020-11-25 02:43:34,947 INFO  L138     BoogieDeclarations]: Found implementation of procedure removePauser~address_PauserRole__fail
[2020-11-25 02:43:34,947 INFO  L138     BoogieDeclarations]: Found implementation of procedure removePauser~address_PauserRole__success
[2020-11-25 02:43:34,948 INFO  L138     BoogieDeclarations]: Found implementation of procedure renouncePauser_PauserRole__fail
[2020-11-25 02:43:34,948 INFO  L138     BoogieDeclarations]: Found implementation of procedure renouncePauser_PauserRole__success
[2020-11-25 02:43:34,948 INFO  L138     BoogieDeclarations]: Found implementation of procedure _addPauser~address_PauserRole__fail
[2020-11-25 02:43:34,948 INFO  L138     BoogieDeclarations]: Found implementation of procedure _addPauser~address_PauserRole__success
[2020-11-25 02:43:34,948 INFO  L138     BoogieDeclarations]: Found implementation of procedure _removePauser~address_PauserRole__fail
[2020-11-25 02:43:34,948 INFO  L138     BoogieDeclarations]: Found implementation of procedure _removePauser~address_PauserRole__success
[2020-11-25 02:43:34,948 INFO  L138     BoogieDeclarations]: Found implementation of procedure Pausable_Pausable_NoBaseCtor__fail
[2020-11-25 02:43:34,948 INFO  L138     BoogieDeclarations]: Found implementation of procedure Pausable_Pausable_NoBaseCtor__success
[2020-11-25 02:43:34,948 INFO  L138     BoogieDeclarations]: Found implementation of procedure Pausable_Pausable__fail
[2020-11-25 02:43:34,948 INFO  L138     BoogieDeclarations]: Found implementation of procedure Pausable_Pausable__success
[2020-11-25 02:43:34,948 INFO  L138     BoogieDeclarations]: Found implementation of procedure paused_Pausable__fail
[2020-11-25 02:43:34,948 INFO  L138     BoogieDeclarations]: Found implementation of procedure paused_Pausable__success
[2020-11-25 02:43:34,949 INFO  L138     BoogieDeclarations]: Found implementation of procedure pause_Pausable__fail
[2020-11-25 02:43:34,949 INFO  L138     BoogieDeclarations]: Found implementation of procedure pause_Pausable__success
[2020-11-25 02:43:34,949 INFO  L138     BoogieDeclarations]: Found implementation of procedure unpause_Pausable__fail
[2020-11-25 02:43:34,949 INFO  L138     BoogieDeclarations]: Found implementation of procedure unpause_Pausable__success
[2020-11-25 02:43:34,949 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20_NoBaseCtor__fail
[2020-11-25 02:43:34,949 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20_NoBaseCtor__success
[2020-11-25 02:43:34,949 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20__fail
[2020-11-25 02:43:34,949 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20__success
[2020-11-25 02:43:34,949 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20_NoBaseCtor__fail
[2020-11-25 02:43:34,949 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20_NoBaseCtor__success
[2020-11-25 02:43:34,949 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20__fail
[2020-11-25 02:43:34,949 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20__success
[2020-11-25 02:43:34,950 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_ERC20__fail
[2020-11-25 02:43:34,950 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_ERC20__success
[2020-11-25 02:43:34,950 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_ERC20__fail
[2020-11-25 02:43:34,950 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_ERC20__success
[2020-11-25 02:43:34,950 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_ERC20__fail
[2020-11-25 02:43:34,950 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_ERC20__success
[2020-11-25 02:43:34,950 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_ERC20__fail
[2020-11-25 02:43:34,950 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_ERC20__success
[2020-11-25 02:43:34,950 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_ERC20__fail
[2020-11-25 02:43:34,950 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_ERC20__success
[2020-11-25 02:43:34,950 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_ERC20__fail
[2020-11-25 02:43:34,950 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_ERC20__success
[2020-11-25 02:43:34,951 INFO  L138     BoogieDeclarations]: Found implementation of procedure increaseAllowance~address~uint256_ERC20__fail
[2020-11-25 02:43:34,951 INFO  L138     BoogieDeclarations]: Found implementation of procedure increaseAllowance~address~uint256_ERC20__success
[2020-11-25 02:43:34,951 INFO  L138     BoogieDeclarations]: Found implementation of procedure decreaseAllowance~address~uint256_ERC20__fail
[2020-11-25 02:43:34,951 INFO  L138     BoogieDeclarations]: Found implementation of procedure decreaseAllowance~address~uint256_ERC20__success
[2020-11-25 02:43:34,951 INFO  L138     BoogieDeclarations]: Found implementation of procedure _transfer~address~address~uint256_ERC20__fail
[2020-11-25 02:43:34,951 INFO  L138     BoogieDeclarations]: Found implementation of procedure _transfer~address~address~uint256_ERC20__success
[2020-11-25 02:43:34,951 INFO  L138     BoogieDeclarations]: Found implementation of procedure _mint~address~uint256_ERC20__fail
[2020-11-25 02:43:34,951 INFO  L138     BoogieDeclarations]: Found implementation of procedure _mint~address~uint256_ERC20__success
[2020-11-25 02:43:34,951 INFO  L138     BoogieDeclarations]: Found implementation of procedure _burn~address~uint256_ERC20__fail
[2020-11-25 02:43:34,951 INFO  L138     BoogieDeclarations]: Found implementation of procedure _burn~address~uint256_ERC20__success
[2020-11-25 02:43:34,951 INFO  L138     BoogieDeclarations]: Found implementation of procedure _burnFrom~address~uint256_ERC20__fail
[2020-11-25 02:43:34,951 INFO  L138     BoogieDeclarations]: Found implementation of procedure _burnFrom~address~uint256_ERC20__success
[2020-11-25 02:43:34,952 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Pausable_ERC20Pausable_NoBaseCtor__fail
[2020-11-25 02:43:34,952 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Pausable_ERC20Pausable_NoBaseCtor__success
[2020-11-25 02:43:34,952 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Pausable_ERC20Pausable__fail
[2020-11-25 02:43:34,952 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Pausable_ERC20Pausable__success
[2020-11-25 02:43:34,952 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_ERC20Pausable__fail
[2020-11-25 02:43:34,952 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_ERC20Pausable__success
[2020-11-25 02:43:34,952 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_ERC20Pausable__fail
[2020-11-25 02:43:34,952 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_ERC20Pausable__success
[2020-11-25 02:43:34,952 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Detailed_ERC20Detailed_NoBaseCtor__fail
[2020-11-25 02:43:34,952 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Detailed_ERC20Detailed_NoBaseCtor__success
[2020-11-25 02:43:34,952 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Detailed_ERC20Detailed__fail
[2020-11-25 02:43:34,952 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Detailed_ERC20Detailed__success
[2020-11-25 02:43:34,952 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_ERC20Detailed__fail
[2020-11-25 02:43:34,953 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_ERC20Detailed__success
[2020-11-25 02:43:34,953 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_ERC20Detailed__fail
[2020-11-25 02:43:34,953 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_ERC20Detailed__success
[2020-11-25 02:43:34,953 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_ERC20Detailed__fail
[2020-11-25 02:43:34,953 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_ERC20Detailed__success
[2020-11-25 02:43:34,953 INFO  L138     BoogieDeclarations]: Found implementation of procedure ONIT_ONIT_NoBaseCtor__fail
[2020-11-25 02:43:34,953 INFO  L138     BoogieDeclarations]: Found implementation of procedure ONIT_ONIT_NoBaseCtor__success
[2020-11-25 02:43:34,953 INFO  L138     BoogieDeclarations]: Found implementation of procedure ONIT_ONIT__fail
[2020-11-25 02:43:34,953 INFO  L138     BoogieDeclarations]: Found implementation of procedure ONIT_ONIT__success
[2020-11-25 02:43:34,953 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_ONIT__fail
[2020-11-25 02:43:34,953 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_ONIT__success
[2020-11-25 02:43:34,953 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_ONIT__fail
[2020-11-25 02:43:34,953 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_ONIT__success
[2020-11-25 02:43:34,954 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_ONIT__fail
[2020-11-25 02:43:34,954 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_ONIT__success
[2020-11-25 02:43:34,954 INFO  L138     BoogieDeclarations]: Found implementation of procedure freezeAccount~address_ONIT__fail
[2020-11-25 02:43:34,954 INFO  L138     BoogieDeclarations]: Found implementation of procedure freezeAccount~address_ONIT__success
[2020-11-25 02:43:34,954 INFO  L138     BoogieDeclarations]: Found implementation of procedure unfreezeAccount~address_ONIT__fail
[2020-11-25 02:43:34,954 INFO  L138     BoogieDeclarations]: Found implementation of procedure unfreezeAccount~address_ONIT__success
[2020-11-25 02:43:34,954 INFO  L138     BoogieDeclarations]: Found implementation of procedure lock~address~uint256~uint256_ONIT__fail
[2020-11-25 02:43:34,954 INFO  L138     BoogieDeclarations]: Found implementation of procedure lock~address~uint256~uint256_ONIT__success
[2020-11-25 02:43:34,954 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferWithLock~address~uint256~uint256_ONIT__fail
[2020-11-25 02:43:34,954 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferWithLock~address~uint256~uint256_ONIT__success
[2020-11-25 02:43:34,954 INFO  L138     BoogieDeclarations]: Found implementation of procedure unlock~address~uint256_ONIT__fail
[2020-11-25 02:43:34,954 INFO  L138     BoogieDeclarations]: Found implementation of procedure unlock~address~uint256_ONIT__success
[2020-11-25 02:43:34,954 INFO  L138     BoogieDeclarations]: Found implementation of procedure upgradeTo~address_ONIT__fail
[2020-11-25 02:43:34,954 INFO  L138     BoogieDeclarations]: Found implementation of procedure upgradeTo~address_ONIT__success
[2020-11-25 02:43:34,955 INFO  L138     BoogieDeclarations]: Found implementation of procedure _lock~address~uint256~uint256_ONIT__fail
[2020-11-25 02:43:34,955 INFO  L138     BoogieDeclarations]: Found implementation of procedure _lock~address~uint256~uint256_ONIT__success
[2020-11-25 02:43:34,955 INFO  L138     BoogieDeclarations]: Found implementation of procedure _unlock~address~uint256_ONIT__fail
[2020-11-25 02:43:34,955 INFO  L138     BoogieDeclarations]: Found implementation of procedure _unlock~address~uint256_ONIT__success
[2020-11-25 02:43:34,955 INFO  L138     BoogieDeclarations]: Found implementation of procedure _autoUnlock~address_ONIT__fail
[2020-11-25 02:43:34,955 INFO  L138     BoogieDeclarations]: Found implementation of procedure _autoUnlock~address_ONIT__success
[2020-11-25 02:43:34,955 INFO  L138     BoogieDeclarations]: Found implementation of procedure mint~uint256_ONIT__fail
[2020-11-25 02:43:34,955 INFO  L138     BoogieDeclarations]: Found implementation of procedure mint~uint256_ONIT__success
[2020-11-25 02:43:34,955 INFO  L138     BoogieDeclarations]: Found implementation of procedure _setImplementation~address_ONIT__fail
[2020-11-25 02:43:34,955 INFO  L138     BoogieDeclarations]: Found implementation of procedure _setImplementation~address_ONIT__success
[2020-11-25 02:43:34,955 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackMethod_ONIT__fail
[2020-11-25 02:43:34,955 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackMethod_ONIT__success
[2020-11-25 02:43:34,955 INFO  L138     BoogieDeclarations]: Found implementation of procedure implementation_ONIT__fail
[2020-11-25 02:43:34,956 INFO  L138     BoogieDeclarations]: Found implementation of procedure implementation_ONIT__success
[2020-11-25 02:43:34,956 INFO  L138     BoogieDeclarations]: Found implementation of procedure timelockList~address~uint256_ONIT__fail
[2020-11-25 02:43:34,956 INFO  L138     BoogieDeclarations]: Found implementation of procedure timelockList~address~uint256_ONIT__success
[2020-11-25 02:43:34,956 INFO  L138     BoogieDeclarations]: Found implementation of procedure frozenAccount~address_ONIT__fail
[2020-11-25 02:43:34,956 INFO  L138     BoogieDeclarations]: Found implementation of procedure frozenAccount~address_ONIT__success
[2020-11-25 02:43:34,956 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackDispatch__fail
[2020-11-25 02:43:34,956 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackDispatch__success
[2020-11-25 02:43:34,956 INFO  L138     BoogieDeclarations]: Found implementation of procedure Fallback_UnknownType__fail
[2020-11-25 02:43:34,956 INFO  L138     BoogieDeclarations]: Found implementation of procedure Fallback_UnknownType__success
[2020-11-25 02:43:34,956 INFO  L138     BoogieDeclarations]: Found implementation of procedure send__fail
[2020-11-25 02:43:34,956 INFO  L138     BoogieDeclarations]: Found implementation of procedure send__success
[2020-11-25 02:43:34,956 INFO  L138     BoogieDeclarations]: Found implementation of procedure onlyOwner_pre__fail
[2020-11-25 02:43:34,956 INFO  L138     BoogieDeclarations]: Found implementation of procedure onlyOwner_pre__success
[2020-11-25 02:43:34,956 INFO  L138     BoogieDeclarations]: Found implementation of procedure onlyNewOwner_pre__fail
[2020-11-25 02:43:34,957 INFO  L138     BoogieDeclarations]: Found implementation of procedure onlyNewOwner_pre__success
[2020-11-25 02:43:34,957 INFO  L138     BoogieDeclarations]: Found implementation of procedure onlyPauser_pre__fail
[2020-11-25 02:43:34,957 INFO  L138     BoogieDeclarations]: Found implementation of procedure onlyPauser_pre__success
[2020-11-25 02:43:34,957 INFO  L138     BoogieDeclarations]: Found implementation of procedure whenNotPaused_pre__fail
[2020-11-25 02:43:34,957 INFO  L138     BoogieDeclarations]: Found implementation of procedure whenNotPaused_pre__success
[2020-11-25 02:43:34,957 INFO  L138     BoogieDeclarations]: Found implementation of procedure whenPaused_pre__fail
[2020-11-25 02:43:34,957 INFO  L138     BoogieDeclarations]: Found implementation of procedure whenPaused_pre__success
[2020-11-25 02:43:34,957 INFO  L138     BoogieDeclarations]: Found implementation of procedure notFrozen_pre__fail
[2020-11-25 02:43:34,957 INFO  L138     BoogieDeclarations]: Found implementation of procedure notFrozen_pre__success
[2020-11-25 02:43:34,957 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_SafeMath
[2020-11-25 02:43:34,957 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_SafeMath
[2020-11-25 02:43:34,957 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_Roles
[2020-11-25 02:43:34,957 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_Roles
[2020-11-25 02:43:34,957 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_Ownable
[2020-11-25 02:43:34,958 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_Ownable
[2020-11-25 02:43:34,958 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_PauserRole
[2020-11-25 02:43:34,958 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_PauserRole
[2020-11-25 02:43:34,958 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_Pausable
[2020-11-25 02:43:34,958 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_Pausable
[2020-11-25 02:43:34,958 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_IERC20
[2020-11-25 02:43:34,958 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_IERC20
[2020-11-25 02:43:34,958 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_ERC20
[2020-11-25 02:43:34,958 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_ERC20
[2020-11-25 02:43:34,958 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_ERC20Pausable
[2020-11-25 02:43:34,958 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_ERC20Pausable
[2020-11-25 02:43:34,958 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_ERC20Detailed
[2020-11-25 02:43:34,958 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_ERC20Detailed
[2020-11-25 02:43:34,958 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_ONIT
[2020-11-25 02:43:34,959 INFO  L138     BoogieDeclarations]: Found implementation of procedure main
[2020-11-25 02:43:34,959 INFO  L130     BoogieDeclarations]: Found specification of procedure ULTIMATE.start
[2020-11-25 02:43:34,959 INFO  L138     BoogieDeclarations]: Found implementation of procedure ULTIMATE.start
[2020-11-25 02:43:36,112 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 02:43:36,112 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 02:43:36,112 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 02:43:36,293 INFO  L281             CfgBuilder]: Using the 1 location(s) as analysis (start of procedure ULTIMATE.start)
[2020-11-25 02:43:36,293 INFO  L286             CfgBuilder]: Removed 10 assue(true) statements.
[2020-11-25 02:43:36,296 INFO  L202        PluginConnector]: Adding new model ONIT_0x410e731c2970dce3add351064acf5ce9e33fdbf0_allowance.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 02:43:36 BoogieIcfgContainer
[2020-11-25 02:43:36,296 INFO  L185        PluginConnector]: Executing the observer RCFGBuilderObserver from plugin RCFGBuilder for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 02:43:34" (2/2) ...
[2020-11-25 02:43:36,296 INFO  L85     RCFGBuilderObserver]: No WrapperNode. Let Ultimate process with next node
[2020-11-25 02:43:36,296 INFO  L205        PluginConnector]: Invalid model from RCFGBuilder for observer de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder.RCFGBuilderObserver@1992b7f4 and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 02:43:36, skipping insertion in model container
[2020-11-25 02:43:36,296 INFO  L132        PluginConnector]: ------------------------ END RCFGBuilder----------------------------
[2020-11-25 02:43:36,296 INFO  L113        PluginConnector]: ------------------------UtopiaLTL2Aut----------------------------
[2020-11-25 02:43:36,297 INFO  L271        PluginConnector]: Initializing UtopiaLTL2Aut...
[2020-11-25 02:43:36,298 INFO  L276        PluginConnector]: UtopiaLTL2Aut initialized
[2020-11-25 02:43:36,298 INFO  L185        PluginConnector]: Executing the observer UtopiaLTL2AutObserver from plugin UtopiaLTL2Aut for "ONIT_0x410e731c2970dce3add351064acf5ce9e33fdbf0_allowance.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 02:43:34" (1/3) ...
[2020-11-25 02:43:36,298 INFO  L205        PluginConnector]: Invalid model from UtopiaLTL2Aut for observer edu.utexas.cs.utopia.ltl2aut.UtopiaLTL2AutObserver@6c15380 and model type Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 02:43:36, skipping insertion in model container
[2020-11-25 02:43:36,298 INFO  L185        PluginConnector]: Executing the observer UtopiaLTL2AutObserver from plugin UtopiaLTL2Aut for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 02:43:34" (2/3) ...
No working directory specified, using /mnt/data0/jon/SmartPulseTool/ltl2ba
Starting monitored process 1 with /mnt/data0/jon/SmartPulseTool/ltl2ba -f ! ( ( [] ( a -> ( <>b ) ) ) )  (exit command is null, workingDir is null)
[2020-11-25 02:43:36,330 INFO  L202        PluginConnector]: Adding new model Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 02:43:36 NWAContainer
[2020-11-25 02:43:36,330 INFO  L132        PluginConnector]: ------------------------ END UtopiaLTL2Aut----------------------------
[2020-11-25 02:43:36,330 INFO  L113        PluginConnector]: ------------------------BÃ¼chi Program Product----------------------------
[2020-11-25 02:43:36,330 INFO  L271        PluginConnector]: Initializing BÃ¼chi Program Product...
[2020-11-25 02:43:36,330 INFO  L276        PluginConnector]: BÃ¼chi Program Product initialized
[2020-11-25 02:43:36,331 INFO  L185        PluginConnector]: Executing the observer BuchiProductObserver from plugin BÃ¼chi Program Product for "ONIT_0x410e731c2970dce3add351064acf5ce9e33fdbf0_allowance.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 02:43:36" (3/4) ...
[2020-11-25 02:43:36,332 INFO  L205        PluginConnector]: Invalid model from BÃ¼chi Program Product for observer de.uni_freiburg.informatik.ultimate.buchiprogramproduct.BuchiProductObserver@7fbae13c and model type LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 02:43:36, skipping insertion in model container
[2020-11-25 02:43:36,332 INFO  L185        PluginConnector]: Executing the observer BuchiProductObserver from plugin BÃ¼chi Program Product for "Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 02:43:36" (4/4) ...
[2020-11-25 02:43:36,334 INFO  L104   BuchiProductObserver]: Initial property automaton 2 locations, 3 edges
[2020-11-25 02:43:36,342 INFO  L110   BuchiProductObserver]: Initial RCFG 4668 locations, 6455 edges
[2020-11-25 02:43:36,342 INFO  L93    BuchiProductObserver]: Beginning generation of product automaton
[2020-11-25 02:43:36,356 INFO  L136       ProductGenerator]: The program has no step specification, so we assume maximum atomicity
[2020-11-25 02:43:39,930 INFO  L97    BuchiProductObserver]: Finished generation of product automaton successfully
[2020-11-25 02:43:39,944 INFO  L110   BuchiProductObserver]: BuchiProgram size 11592 locations, 20999 edges
[2020-11-25 02:43:39,944 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 02:43:39 BoogieIcfgContainer
[2020-11-25 02:43:39,944 INFO  L132        PluginConnector]: ------------------------ END BÃ¼chi Program Product----------------------------
[2020-11-25 02:43:39,944 INFO  L113        PluginConnector]: ------------------------BlockEncodingV2----------------------------
[2020-11-25 02:43:39,944 INFO  L271        PluginConnector]: Initializing BlockEncodingV2...
[2020-11-25 02:43:39,946 INFO  L276        PluginConnector]: BlockEncodingV2 initialized
[2020-11-25 02:43:39,946 INFO  L185        PluginConnector]: Executing the observer BlockEncodingObserver from plugin BlockEncodingV2 for "LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 02:43:39" (1/1) ...
[2020-11-25 02:43:40,139 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call __var_29 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowed_ERC20[this][account_s1030][msgsender_MSG], value_s1030);
[2020-11-25 02:43:40,141 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call __var_29 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___allowed_ERC20[this][account_s1030][msgsender_MSG], value_s1030);
[2020-11-25 02:43:40,163 INFO  L313           BlockEncoder]: Initial Icfg 11592 locations, 20999 edges
[2020-11-25 02:43:40,163 INFO  L258           BlockEncoder]: Using Remove infeasible edges
[2020-11-25 02:43:40,164 INFO  L270           BlockEncoder]: Using Minimize states even if more edges are added than removed.=true
[2020-11-25 02:43:40,164 INFO  L296           BlockEncoder]: Using Remove sink states
[2020-11-25 02:43:40,164 INFO  L171           BlockEncoder]: Using Apply optimizations until nothing changes=true
[2020-11-25 02:43:40,184 INFO  L70    emoveInfeasibleEdges]: Removed 219 edges and 23 locations because of local infeasibility
[2020-11-25 02:43:40,205 INFO  L70        RemoveSinkStates]: Removed 104 edges and 69 locations by removing sink states
[2020-11-25 02:43:40,231 INFO  L70    emoveInfeasibleEdges]: Removed 0 edges and 0 locations because of local infeasibility
[2020-11-25 02:43:40,285 INFO  L70        RemoveSinkStates]: Removed 0 edges and 0 locations by removing sink states
[2020-11-25 02:43:40,298 INFO  L237           BlockEncoder]: Using Create parallel compositions if possible
[2020-11-25 02:43:40,299 INFO  L66        ParallelComposer]: Creating parallel compositions
[2020-11-25 02:43:40,303 INFO  L313           BlockEncoder]: Encoded RCFG 11446 locations, 20596 edges
[2020-11-25 02:43:40,304 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.blockencoding CFG 25.11 02:43:40 BasicIcfg
[2020-11-25 02:43:40,304 INFO  L132        PluginConnector]: ------------------------ END BlockEncodingV2----------------------------
[2020-11-25 02:43:40,304 INFO  L113        PluginConnector]: ------------------------BuchiAutomizer----------------------------
[2020-11-25 02:43:40,304 INFO  L271        PluginConnector]: Initializing BuchiAutomizer...
[2020-11-25 02:43:40,306 INFO  L276        PluginConnector]: BuchiAutomizer initialized
[2020-11-25 02:43:40,306 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 02:43:40,306 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "ONIT_0x410e731c2970dce3add351064acf5ce9e33fdbf0_allowance.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 02:43:34" (1/6) ...
[2020-11-25 02:43:40,307 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@7e9c8985 and model type ONIT_0x410e731c2970dce3add351064acf5ce9e33fdbf0_allowance.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 02:43:40, skipping insertion in model container
[2020-11-25 02:43:40,307 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 02:43:40,307 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 02:43:34" (2/6) ...
[2020-11-25 02:43:40,308 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@7e9c8985 and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 02:43:40, skipping insertion in model container
[2020-11-25 02:43:40,308 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 02:43:40,308 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "ONIT_0x410e731c2970dce3add351064acf5ce9e33fdbf0_allowance.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 02:43:36" (3/6) ...
[2020-11-25 02:43:40,308 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@7e9c8985 and model type ONIT_0x410e731c2970dce3add351064acf5ce9e33fdbf0_allowance.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer CFG 25.11 02:43:40, skipping insertion in model container
[2020-11-25 02:43:40,308 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 02:43:40,308 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 02:43:36" (4/6) ...
[2020-11-25 02:43:40,308 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@7e9c8985 and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 02:43:40, skipping insertion in model container
[2020-11-25 02:43:40,308 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 02:43:40,308 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 02:43:39" (5/6) ...
[2020-11-25 02:43:40,309 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@7e9c8985 and model type LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer OTHER 25.11 02:43:40, skipping insertion in model container
[2020-11-25 02:43:40,309 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 02:43:40,309 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.blockencoding CFG 25.11 02:43:40" (6/6) ...
[2020-11-25 02:43:40,309 INFO  L404   chiAutomizerObserver]: Analyzing ICFG ONIT_0x410e731c2970dce3add351064acf5ce9e33fdbf0_allowance.bpl_BEv2
[2020-11-25 02:43:40,339 INFO  L133   ementStrategyFactory]: Using default assertion order modulation
[2020-11-25 02:43:40,340 INFO  L377         BuchiCegarLoop]: Interprodecural is true
[2020-11-25 02:43:40,340 INFO  L378         BuchiCegarLoop]: Hoare is false
[2020-11-25 02:43:40,340 INFO  L379         BuchiCegarLoop]: Compute interpolants for Craig_TreeInterpolation
[2020-11-25 02:43:40,340 INFO  L380         BuchiCegarLoop]: Backedges is STRAIGHT_LINE
[2020-11-25 02:43:40,340 INFO  L381         BuchiCegarLoop]: Determinization is PREDICATE_ABSTRACTION
[2020-11-25 02:43:40,340 INFO  L382         BuchiCegarLoop]: Difference is false
[2020-11-25 02:43:40,340 INFO  L383         BuchiCegarLoop]: Minimize is MINIMIZE_SEVPA
[2020-11-25 02:43:40,340 INFO  L386         BuchiCegarLoop]: ======== Iteration 0==of CEGAR loop == BuchiCegarLoop========
[2020-11-25 02:43:40,409 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 11446 states.
[2020-11-25 02:43:40,481 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 02:43:40,481 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 02:43:40,481 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 02:43:40,488 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 02:43:40,488 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 02:43:40,488 INFO  L445         BuchiCegarLoop]: ======== Iteration 1============
[2020-11-25 02:43:40,489 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 11446 states.
[2020-11-25 02:43:40,527 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 02:43:40,527 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 02:43:40,527 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 02:43:40,528 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 02:43:40,528 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  success_allowance_ERC200 := false;
[L2]                  call_allowance_ERC200 := false;
[L2]      CALL        call main();
[L12348]              assume null == 0;
[L12349]  CALL        call this := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L12349]  RET         call this := FreshRefGenerator__success();
[L12350]              assume now >= 0;
[L12351]              assume DType[this] == ONIT;
[L12352]              assume msgvalue_MSG == 0;
[L12353]              gas := gas - 53000;
[L12354]  CALL        call ONIT_ONIT(this, msgsender_MSG, msgvalue_MSG);
[L3014]               havoc __exception;
[L3015]               revert := false;
[L3016]   COND FALSE  !(__exception)
[L3052]   CALL        call ONIT_ONIT__success(this, msgsender_MSG, msgvalue_MSG);
[L7433]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L7433]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7434]   COND TRUE   revert
[L3052]   RET         call ONIT_ONIT__success(this, msgsender_MSG, msgvalue_MSG);
[L3053]               assume !revert && gas >= 0;
[L12354]  RET         call ONIT_ONIT(this, msgsender_MSG, msgvalue_MSG);
[L12355]              assume !revert && gas >= 0;

Loop:
[L12358]  CALL        call CorralChoice_ONIT(this);
[L12046]              havoc msgsender_MSG;
[L12047]              havoc msgvalue_MSG;
[L12048]              havoc choice;
[L12049]              havoc __ret_0_owner;
[L12050]              havoc __ret_0_newOwner;
[L12051]              havoc account_s293;
[L12052]              havoc __ret_0_isOwner;
[L12053]              havoc _newOwner_s313;
[L12054]              havoc __ret_0_acceptOwnership;
[L12055]              havoc account_s390;
[L12056]              havoc __ret_0_isPauser;
[L12057]              havoc account_s402;
[L12058]              havoc account_s414;
[L12059]              havoc __ret_0_paused;
[L12060]              havoc to_s1288;
[L12061]              havoc value_s1288;
[L12062]              havoc __ret_0_transfer;
[L12063]              havoc spender_s711;
[L12064]              havoc value_s711;
[L12065]              havoc __ret_0_approve;
[L12066]              havoc from_s1322;
[L12067]              havoc to_s1322;
[L12068]              havoc value_s1322;
[L12069]              havoc __ret_0_transferFrom;
[L12070]              havoc __ret_0_totalSupply;
[L12071]              havoc owner_s1254;
[L12072]              havoc __ret_0_balanceOf;
[L12073]              havoc owner_s656;
[L12074]              havoc spender_s656;
[L12075]              havoc __ret_0_allowance;
[L12076]              havoc spender_s809;
[L12077]              havoc addedValue_s809;
[L12078]              havoc __ret_0_increaseAllowance;
[L12079]              havoc spender_s858;
[L12080]              havoc subtractedValue_s858;
[L12081]              havoc __ret_0_decreaseAllowance;
[L12082]              havoc name_s1105;
[L12083]              havoc symbol_s1105;
[L12084]              havoc decimals_s1105;
[L12085]              havoc __ret_0_name;
[L12086]              havoc __ret_0_symbol;
[L12087]              havoc __ret_0_decimals;
[L12088]              havoc __ret_0_implementation;
[L12089]              havoc arg1693_s0;
[L12090]              havoc arg1694_s0;
[L12091]              havoc __ret_0_timelockList;
[L12092]              havoc arg1695_s0;
[L12093]              havoc __ret_0_frozenAccount;
[L12094]              havoc holder_s1351;
[L12095]              havoc __ret_0_freezeAccount;
[L12096]              havoc holder_s1379;
[L12097]              havoc __ret_0_unfreezeAccount;
[L12098]              havoc holder_s1410;
[L12099]              havoc value_s1410;
[L12100]              havoc releaseTime_s1410;
[L12101]              havoc __ret_0_lock;
[L12102]              havoc holder_s1439;
[L12103]              havoc value_s1439;
[L12104]              havoc releaseTime_s1439;
[L12105]              havoc __ret_0_transferWithLock;
[L12106]              havoc holder_s1468;
[L12107]              havoc idx_s1468;
[L12108]              havoc __ret_0_unlock;
[L12109]              havoc _newImplementation_s1486;
[L12110]              havoc value_s1663;
[L12111]              havoc __ret_0_mint;
[L12112]              havoc tmpNow;
[L12113]              havoc gas;
[L12114]              assume gas > 4000000 && gas <= 8000000;
[L12115]              tmpNow := now;
[L12116]              havoc now;
[L12117]              assume now > tmpNow;
[L12118]              assume msgsender_MSG != null;
[L12119]              assume DType[msgsender_MSG] != SafeMath;
[L12120]              assume DType[msgsender_MSG] != Roles;
[L12121]              assume DType[msgsender_MSG] != Ownable;
[L12122]              assume DType[msgsender_MSG] != PauserRole;
[L12123]              assume DType[msgsender_MSG] != Pausable;
[L12124]              assume DType[msgsender_MSG] != IERC20;
[L12125]              assume DType[msgsender_MSG] != ERC20;
[L12126]              assume DType[msgsender_MSG] != ERC20Pausable;
[L12127]              assume DType[msgsender_MSG] != ERC20Detailed;
[L12128]              assume DType[msgsender_MSG] != ONIT;
[L12129]              Alloc[msgsender_MSG] := true;
[L12130]  COND TRUE   choice == 33
[L12131]              gas := gas - 21000;
[L12132]  COND FALSE  !(gas >= 0)
[L12358]  RET         call CorralChoice_ONIT(this);

[2020-11-25 02:43:40,542 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 02:43:40,542 INFO  L82        PathProgramCache]: Analyzing trace with hash -1234242149, now seen corresponding path program 1 times
[2020-11-25 02:43:40,547 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 02:43:40,570 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 02:43:40,603 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 02:43:40,604 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 02:43:40,604 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [3] imperfect sequences [] total 3
[2020-11-25 02:43:41,091 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 02:43:41,100 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-11-25 02:43:41,100 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-11-25 02:43:41,102 INFO  L87              Difference]: Start difference. First operand 11446 states. Second operand 3 states.
[2020-11-25 02:43:41,565 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 02:43:41,565 INFO  L93              Difference]: Finished difference Result 7352 states and 8606 transitions.
[2020-11-25 02:43:41,565 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-11-25 02:43:41,566 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 7352 states and 8606 transitions.
[2020-11-25 02:43:41,601 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 02:43:41,642 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 7352 states to 7352 states and 8606 transitions.
[2020-11-25 02:43:41,643 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 4
[2020-11-25 02:43:41,646 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1357
[2020-11-25 02:43:41,646 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 7352 states and 8606 transitions.
[2020-11-25 02:43:41,662 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 02:43:41,662 INFO  L728         BuchiCegarLoop]: Abstraction has 7352 states and 8606 transitions.
[2020-11-25 02:43:41,685 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 7352 states and 8606 transitions.
[2020-11-25 02:43:41,773 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 7352 to 7352.
[2020-11-25 02:43:41,774 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 7352 states.
[2020-11-25 02:43:41,785 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 7352 states to 7352 states and 8606 transitions.
[2020-11-25 02:43:41,786 INFO  L751         BuchiCegarLoop]: Abstraction has 7352 states and 8606 transitions.
[2020-11-25 02:43:41,786 INFO  L631         BuchiCegarLoop]: Abstraction has 7352 states and 8606 transitions.
[2020-11-25 02:43:41,786 INFO  L445         BuchiCegarLoop]: ======== Iteration 2============
[2020-11-25 02:43:41,786 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 7352 states and 8606 transitions.
[2020-11-25 02:43:41,798 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 02:43:41,798 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 02:43:41,798 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 02:43:41,800 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 02:43:41,800 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  success_allowance_ERC200 := false;
[L2]                  call_allowance_ERC200 := false;
[L2]      CALL        call main();
[L12348]              assume null == 0;
[L12349]  CALL        call this := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L12349]  RET         call this := FreshRefGenerator__success();
[L12350]              assume now >= 0;
[L12351]              assume DType[this] == ONIT;
[L12352]              assume msgvalue_MSG == 0;
[L12353]              gas := gas - 53000;
[L12354]  CALL        call ONIT_ONIT(this, msgsender_MSG, msgvalue_MSG);
[L3014]               havoc __exception;
[L3015]               revert := false;
[L3016]   COND FALSE  !(__exception)
[L3052]   CALL        call ONIT_ONIT__success(this, msgsender_MSG, msgvalue_MSG);
[L7433]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L7433]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7434]   COND TRUE   revert
[L3052]   RET         call ONIT_ONIT__success(this, msgsender_MSG, msgvalue_MSG);
[L3053]               assume !revert && gas >= 0;
[L12354]  RET         call ONIT_ONIT(this, msgsender_MSG, msgvalue_MSG);
[L12355]              assume !revert && gas >= 0;
[L12358]  CALL        call CorralChoice_ONIT(this);
[L12046]              havoc msgsender_MSG;
[L12047]              havoc msgvalue_MSG;
[L12048]              havoc choice;
[L12049]              havoc __ret_0_owner;
[L12050]              havoc __ret_0_newOwner;
[L12051]              havoc account_s293;
[L12052]              havoc __ret_0_isOwner;
[L12053]              havoc _newOwner_s313;
[L12054]              havoc __ret_0_acceptOwnership;
[L12055]              havoc account_s390;
[L12056]              havoc __ret_0_isPauser;
[L12057]              havoc account_s402;
[L12058]              havoc account_s414;
[L12059]              havoc __ret_0_paused;
[L12060]              havoc to_s1288;
[L12061]              havoc value_s1288;
[L12062]              havoc __ret_0_transfer;
[L12063]              havoc spender_s711;
[L12064]              havoc value_s711;
[L12065]              havoc __ret_0_approve;
[L12066]              havoc from_s1322;
[L12067]              havoc to_s1322;
[L12068]              havoc value_s1322;
[L12069]              havoc __ret_0_transferFrom;
[L12070]              havoc __ret_0_totalSupply;
[L12071]              havoc owner_s1254;
[L12072]              havoc __ret_0_balanceOf;
[L12073]              havoc owner_s656;
[L12074]              havoc spender_s656;
[L12075]              havoc __ret_0_allowance;
[L12076]              havoc spender_s809;
[L12077]              havoc addedValue_s809;
[L12078]              havoc __ret_0_increaseAllowance;
[L12079]              havoc spender_s858;
[L12080]              havoc subtractedValue_s858;
[L12081]              havoc __ret_0_decreaseAllowance;
[L12082]              havoc name_s1105;
[L12083]              havoc symbol_s1105;
[L12084]              havoc decimals_s1105;
[L12085]              havoc __ret_0_name;
[L12086]              havoc __ret_0_symbol;
[L12087]              havoc __ret_0_decimals;
[L12088]              havoc __ret_0_implementation;
[L12089]              havoc arg1693_s0;
[L12090]              havoc arg1694_s0;
[L12091]              havoc __ret_0_timelockList;
[L12092]              havoc arg1695_s0;
[L12093]              havoc __ret_0_frozenAccount;
[L12094]              havoc holder_s1351;
[L12095]              havoc __ret_0_freezeAccount;
[L12096]              havoc holder_s1379;
[L12097]              havoc __ret_0_unfreezeAccount;
[L12098]              havoc holder_s1410;
[L12099]              havoc value_s1410;
[L12100]              havoc releaseTime_s1410;
[L12101]              havoc __ret_0_lock;
[L12102]              havoc holder_s1439;
[L12103]              havoc value_s1439;
[L12104]              havoc releaseTime_s1439;
[L12105]              havoc __ret_0_transferWithLock;
[L12106]              havoc holder_s1468;
[L12107]              havoc idx_s1468;
[L12108]              havoc __ret_0_unlock;
[L12109]              havoc _newImplementation_s1486;
[L12110]              havoc value_s1663;
[L12111]              havoc __ret_0_mint;
[L12112]              havoc tmpNow;
[L12113]              havoc gas;
[L12114]              assume gas > 4000000 && gas <= 8000000;
[L12115]              tmpNow := now;
[L12116]              havoc now;
[L12117]              assume now > tmpNow;
[L12118]              assume msgsender_MSG != null;
[L12119]              assume DType[msgsender_MSG] != SafeMath;
[L12120]              assume DType[msgsender_MSG] != Roles;
[L12121]              assume DType[msgsender_MSG] != Ownable;
[L12122]              assume DType[msgsender_MSG] != PauserRole;
[L12123]              assume DType[msgsender_MSG] != Pausable;
[L12124]              assume DType[msgsender_MSG] != IERC20;
[L12125]              assume DType[msgsender_MSG] != ERC20;
[L12126]              assume DType[msgsender_MSG] != ERC20Pausable;
[L12127]              assume DType[msgsender_MSG] != ERC20Detailed;
[L12128]              assume DType[msgsender_MSG] != ONIT;
[L12129]              Alloc[msgsender_MSG] := true;
[L12130]  COND FALSE  !(choice == 33)
[L12136]  COND FALSE  !(choice == 32)
[L12142]  COND FALSE  !(choice == 31)
[L12148]  COND FALSE  !(choice == 30)
[L12154]  COND FALSE  !(choice == 29)
[L12160]  COND FALSE  !(choice == 28)
[L12166]  COND FALSE  !(choice == 27)
[L12172]  COND FALSE  !(choice == 26)
[L12178]  COND FALSE  !(choice == 25)
[L12184]  COND FALSE  !(choice == 24)
[L12190]  COND FALSE  !(choice == 23)
[L12196]  COND FALSE  !(choice == 22)
[L12202]  COND FALSE  !(choice == 21)
[L12209]  COND FALSE  !(choice == 20)
[L12216]  COND FALSE  !(choice == 19)
[L12223]  COND FALSE  !(choice == 18)
[L12229]  COND FALSE  !(choice == 17)
[L12235]  COND TRUE   choice == 16
[L12236]              gas := gas - 21000;
[L12237]  COND TRUE   gas >= 0
[L12238]              assume msgvalue_MSG == 0;
[L12239]  CALL        call __ret_0_allowance := allowance~address~address_ERC20(this, msgsender_MSG, msgvalue_MSG, owner_s656, spender_s656);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume _allowed_ERC20[this][owner_s656][spender_s656] >= 0 && _allowed_ERC20[this][owner_s656][spender_s656] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_allowance_ERC200 := true;
[L2]                  call_allowance_ERC200 := false;
[L2]                  revert := revert_hold;
[L1874]               havoc __exception;
[L1875]               revert := false;
[L1876]   COND FALSE  !(__exception)
[L1912]   CALL        call __ret_0_ := allowance~address~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, owner_s656, spender_s656);
[L6631]               __ret_0_ := _allowed_ERC20[this][owner_s656][spender_s656];
[L1912]   RET         call __ret_0_ := allowance~address~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, owner_s656, spender_s656);
[L1913]               assume !revert && gas >= 0;
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume !(((((((((((((__ret_0_ == _allowed_ERC20[this][owner_s656][spender_s656] && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowed_ERC20[this] == old(_allowed_ERC20[this])) && implementation_ONIT[this] == old(implementation_ONIT[this])) && M_Ref_Ref[timelockList_ONIT[this]] == old(M_Ref_Ref[timelockList_ONIT[this]])) && frozenAccount_ONIT[this] == old(frozenAccount_ONIT[this])) && _paused_Pausable[this] == old(_paused_Pausable[this])) && _pausers_PauserRole[this] == old(_pausers_PauserRole[this])) && owner_Ownable[this] == old(owner_Ownable[this])) && newOwner_Ownable[this] == old(newOwner_Ownable[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]));
[L2]                  revert := revert_hold;
[L12239]  RET         call __ret_0_allowance := allowance~address~address_ERC20(this, msgsender_MSG, msgvalue_MSG, owner_s656, spender_s656);
[L12358]  RET         call CorralChoice_ONIT(this);

Loop:
[L12358]  CALL        call CorralChoice_ONIT(this);
[L12046]              havoc msgsender_MSG;
[L12047]              havoc msgvalue_MSG;
[L12048]              havoc choice;
[L12049]              havoc __ret_0_owner;
[L12050]              havoc __ret_0_newOwner;
[L12051]              havoc account_s293;
[L12052]              havoc __ret_0_isOwner;
[L12053]              havoc _newOwner_s313;
[L12054]              havoc __ret_0_acceptOwnership;
[L12055]              havoc account_s390;
[L12056]              havoc __ret_0_isPauser;
[L12057]              havoc account_s402;
[L12058]              havoc account_s414;
[L12059]              havoc __ret_0_paused;
[L12060]              havoc to_s1288;
[L12061]              havoc value_s1288;
[L12062]              havoc __ret_0_transfer;
[L12063]              havoc spender_s711;
[L12064]              havoc value_s711;
[L12065]              havoc __ret_0_approve;
[L12066]              havoc from_s1322;
[L12067]              havoc to_s1322;
[L12068]              havoc value_s1322;
[L12069]              havoc __ret_0_transferFrom;
[L12070]              havoc __ret_0_totalSupply;
[L12071]              havoc owner_s1254;
[L12072]              havoc __ret_0_balanceOf;
[L12073]              havoc owner_s656;
[L12074]              havoc spender_s656;
[L12075]              havoc __ret_0_allowance;
[L12076]              havoc spender_s809;
[L12077]              havoc addedValue_s809;
[L12078]              havoc __ret_0_increaseAllowance;
[L12079]              havoc spender_s858;
[L12080]              havoc subtractedValue_s858;
[L12081]              havoc __ret_0_decreaseAllowance;
[L12082]              havoc name_s1105;
[L12083]              havoc symbol_s1105;
[L12084]              havoc decimals_s1105;
[L12085]              havoc __ret_0_name;
[L12086]              havoc __ret_0_symbol;
[L12087]              havoc __ret_0_decimals;
[L12088]              havoc __ret_0_implementation;
[L12089]              havoc arg1693_s0;
[L12090]              havoc arg1694_s0;
[L12091]              havoc __ret_0_timelockList;
[L12092]              havoc arg1695_s0;
[L12093]              havoc __ret_0_frozenAccount;
[L12094]              havoc holder_s1351;
[L12095]              havoc __ret_0_freezeAccount;
[L12096]              havoc holder_s1379;
[L12097]              havoc __ret_0_unfreezeAccount;
[L12098]              havoc holder_s1410;
[L12099]              havoc value_s1410;
[L12100]              havoc releaseTime_s1410;
[L12101]              havoc __ret_0_lock;
[L12102]              havoc holder_s1439;
[L12103]              havoc value_s1439;
[L12104]              havoc releaseTime_s1439;
[L12105]              havoc __ret_0_transferWithLock;
[L12106]              havoc holder_s1468;
[L12107]              havoc idx_s1468;
[L12108]              havoc __ret_0_unlock;
[L12109]              havoc _newImplementation_s1486;
[L12110]              havoc value_s1663;
[L12111]              havoc __ret_0_mint;
[L12112]              havoc tmpNow;
[L12113]              havoc gas;
[L12114]              assume gas > 4000000 && gas <= 8000000;
[L12115]              tmpNow := now;
[L12116]              havoc now;
[L12117]              assume now > tmpNow;
[L12118]              assume msgsender_MSG != null;
[L12119]              assume DType[msgsender_MSG] != SafeMath;
[L12120]              assume DType[msgsender_MSG] != Roles;
[L12121]              assume DType[msgsender_MSG] != Ownable;
[L12122]              assume DType[msgsender_MSG] != PauserRole;
[L12123]              assume DType[msgsender_MSG] != Pausable;
[L12124]              assume DType[msgsender_MSG] != IERC20;
[L12125]              assume DType[msgsender_MSG] != ERC20;
[L12126]              assume DType[msgsender_MSG] != ERC20Pausable;
[L12127]              assume DType[msgsender_MSG] != ERC20Detailed;
[L12128]              assume DType[msgsender_MSG] != ONIT;
[L12129]              Alloc[msgsender_MSG] := true;
[L12130]  COND FALSE  !(choice == 33)
[L12136]  COND FALSE  !(choice == 32)
[L12142]  COND FALSE  !(choice == 31)
[L12148]  COND FALSE  !(choice == 30)
[L12154]  COND FALSE  !(choice == 29)
[L12160]  COND FALSE  !(choice == 28)
[L12166]  COND FALSE  !(choice == 27)
[L12172]  COND FALSE  !(choice == 26)
[L12178]  COND FALSE  !(choice == 25)
[L12184]  COND FALSE  !(choice == 24)
[L12190]  COND FALSE  !(choice == 23)
[L12196]  COND FALSE  !(choice == 22)
[L12202]  COND FALSE  !(choice == 21)
[L12209]  COND FALSE  !(choice == 20)
[L12216]  COND FALSE  !(choice == 19)
[L12223]  COND FALSE  !(choice == 18)
[L12229]  COND FALSE  !(choice == 17)
[L12235]  COND TRUE   choice == 16
[L12236]              gas := gas - 21000;
[L12237]  COND TRUE   gas >= 0
[L12238]              assume msgvalue_MSG == 0;
[L12239]  CALL        call __ret_0_allowance := allowance~address~address_ERC20(this, msgsender_MSG, msgvalue_MSG, owner_s656, spender_s656);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume _allowed_ERC20[this][owner_s656][spender_s656] >= 0 && _allowed_ERC20[this][owner_s656][spender_s656] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_allowance_ERC200 := true;
[L2]                  call_allowance_ERC200 := false;
[L2]                  revert := revert_hold;
[L1874]               havoc __exception;
[L1875]               revert := false;
[L1876]   COND FALSE  !(__exception)
[L1912]   CALL        call __ret_0_ := allowance~address~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, owner_s656, spender_s656);
[L6631]               __ret_0_ := _allowed_ERC20[this][owner_s656][spender_s656];
[L1912]   RET         call __ret_0_ := allowance~address~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, owner_s656, spender_s656);
[L1913]               assume !revert && gas >= 0;
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume !(((((((((((((__ret_0_ == _allowed_ERC20[this][owner_s656][spender_s656] && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowed_ERC20[this] == old(_allowed_ERC20[this])) && implementation_ONIT[this] == old(implementation_ONIT[this])) && M_Ref_Ref[timelockList_ONIT[this]] == old(M_Ref_Ref[timelockList_ONIT[this]])) && frozenAccount_ONIT[this] == old(frozenAccount_ONIT[this])) && _paused_Pausable[this] == old(_paused_Pausable[this])) && _pausers_PauserRole[this] == old(_pausers_PauserRole[this])) && owner_Ownable[this] == old(owner_Ownable[this])) && newOwner_Ownable[this] == old(newOwner_Ownable[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]));
[L2]                  revert := revert_hold;
[L12239]  RET         call __ret_0_allowance := allowance~address~address_ERC20(this, msgsender_MSG, msgvalue_MSG, owner_s656, spender_s656);
[L12358]  RET         call CorralChoice_ONIT(this);

[2020-11-25 02:43:41,804 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 02:43:41,805 INFO  L82        PathProgramCache]: Analyzing trace with hash 517962409, now seen corresponding path program 1 times
[2020-11-25 02:43:41,806 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 02:43:41,820 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 02:43:41,848 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 02:43:41,848 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 02:43:41,848 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [3] imperfect sequences [] total 3
[2020-11-25 02:43:41,849 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 02:43:41,850 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-11-25 02:43:41,850 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-11-25 02:43:41,850 INFO  L87              Difference]: Start difference. First operand 7352 states and 8606 transitions. cyclomatic complexity: 1264 Second operand 3 states.
[2020-11-25 02:43:42,058 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 02:43:42,058 INFO  L93              Difference]: Finished difference Result 9384 states and 10967 transitions.
[2020-11-25 02:43:42,059 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-11-25 02:43:42,059 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 9384 states and 10967 transitions.
[2020-11-25 02:43:42,085 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 02:43:42,127 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 9384 states to 9384 states and 10967 transitions.
[2020-11-25 02:43:42,127 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1896
[2020-11-25 02:43:42,129 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1896
[2020-11-25 02:43:42,129 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 9384 states and 10967 transitions.
[2020-11-25 02:43:42,138 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 02:43:42,139 INFO  L728         BuchiCegarLoop]: Abstraction has 9384 states and 10967 transitions.
[2020-11-25 02:43:42,148 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 9384 states and 10967 transitions.
[2020-11-25 02:43:42,233 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 9384 to 8182.
[2020-11-25 02:43:42,233 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 8182 states.
[2020-11-25 02:43:42,244 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 8182 states to 8182 states and 9513 transitions.
[2020-11-25 02:43:42,244 INFO  L751         BuchiCegarLoop]: Abstraction has 8182 states and 9513 transitions.
[2020-11-25 02:43:42,244 INFO  L631         BuchiCegarLoop]: Abstraction has 8182 states and 9513 transitions.
[2020-11-25 02:43:42,244 INFO  L445         BuchiCegarLoop]: ======== Iteration 3============
[2020-11-25 02:43:42,244 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 8182 states and 9513 transitions.
[2020-11-25 02:43:42,256 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 02:43:42,256 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 02:43:42,256 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 02:43:42,258 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 02:43:42,258 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  success_allowance_ERC200 := false;
[L2]                  call_allowance_ERC200 := false;
[L2]      CALL        call main();
[L12348]              assume null == 0;
[L12349]  CALL        call this := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L12349]  RET         call this := FreshRefGenerator__success();
[L12350]              assume now >= 0;
[L12351]              assume DType[this] == ONIT;
[L12352]              assume msgvalue_MSG == 0;
[L12353]              gas := gas - 53000;
[L12354]  CALL        call ONIT_ONIT(this, msgsender_MSG, msgvalue_MSG);
[L3014]               havoc __exception;
[L3015]               revert := false;
[L3016]   COND FALSE  !(__exception)
[L3052]   CALL        call ONIT_ONIT__success(this, msgsender_MSG, msgvalue_MSG);
[L7433]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L7433]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7434]   COND FALSE  !(revert)
[L7437]   CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -1901915118, -1174776732, 18);
[L7287]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L7287]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7288]   COND FALSE  !(revert)
[L7291]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7262]               assume msgsender_MSG != null;
[L7263]               Balance[this] := 0;
[L7264]               _name_ERC20Detailed[this] := -1540954157;
[L7265]               _symbol_ERC20Detailed[this] := -1540954157;
[L7266]               _decimals_ERC20Detailed[this] := 0;
[L7268]               _name_ERC20Detailed[this] := name_s1105;
[L7269]               _symbol_ERC20Detailed[this] := symbol_s1105;
[L7270]               _decimals_ERC20Detailed[this] := decimals_s1105;
[L7291]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7292]   COND FALSE  !(revert)
[L7437]   RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -1901915118, -1174776732, 18);
[L7438]   COND FALSE  !(revert)
[L7441]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6589]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L6589]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6590]   COND FALSE  !(revert)
[L6593]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]               assume msgsender_MSG != null;
[L6566]               Balance[this] := 0;
[L6567]               _balances_ERC20[this] := zeroRefintArr();
[L6568]               sum__balances0[this] := 0;
[L6569]               _allowed_ERC20[this] := zeroRefRefintArr();
[L6570]               sum__allowed1[this] := 0;
[L6571]               _totalSupply_ERC20[this] := 0;
[L6593]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6594]   COND FALSE  !(revert)
[L7441]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7442]   COND FALSE  !(revert)
[L7445]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L7445]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7446]   COND FALSE  !(revert)
[L7449]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6155]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6155]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   COND FALSE  !(revert)
[L6159]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6105]               assume msgsender_MSG != null;
[L6106]               Balance[this] := 0;
[L6108]   CALL        call __var_10 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L6108]   RET         call __var_10 := FreshRefGenerator__success();
[L6109]   COND FALSE  !(revert)
[L6112]               _pausers_PauserRole[this] := __var_10;
[L6114]   COND FALSE  !(DType[this] == ONIT)
[L6119]   COND FALSE  !(DType[this] == ERC20Pausable)
[L6124]   COND TRUE   DType[this] == Pausable
[L6125]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6375]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5836]               __var_1 := null;
[L5837]   COND TRUE   !(account_s164 != null)
[L5838]               revert := true;
[L6375]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6376]   COND TRUE   revert
[L6125]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6126]   COND TRUE   revert
[L6159]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6160]   COND TRUE   revert
[L7449]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7450]   COND TRUE   revert
[L3052]   RET         call ONIT_ONIT__success(this, msgsender_MSG, msgvalue_MSG);
[L3053]               assume !revert && gas >= 0;
[L12354]  RET         call ONIT_ONIT(this, msgsender_MSG, msgvalue_MSG);
[L12355]              assume !revert && gas >= 0;
[L12358]  CALL        call CorralChoice_ONIT(this);
[L12046]              havoc msgsender_MSG;
[L12047]              havoc msgvalue_MSG;
[L12048]              havoc choice;
[L12049]              havoc __ret_0_owner;
[L12050]              havoc __ret_0_newOwner;
[L12051]              havoc account_s293;
[L12052]              havoc __ret_0_isOwner;
[L12053]              havoc _newOwner_s313;
[L12054]              havoc __ret_0_acceptOwnership;
[L12055]              havoc account_s390;
[L12056]              havoc __ret_0_isPauser;
[L12057]              havoc account_s402;
[L12058]              havoc account_s414;
[L12059]              havoc __ret_0_paused;
[L12060]              havoc to_s1288;
[L12061]              havoc value_s1288;
[L12062]              havoc __ret_0_transfer;
[L12063]              havoc spender_s711;
[L12064]              havoc value_s711;
[L12065]              havoc __ret_0_approve;
[L12066]              havoc from_s1322;
[L12067]              havoc to_s1322;
[L12068]              havoc value_s1322;
[L12069]              havoc __ret_0_transferFrom;
[L12070]              havoc __ret_0_totalSupply;
[L12071]              havoc owner_s1254;
[L12072]              havoc __ret_0_balanceOf;
[L12073]              havoc owner_s656;
[L12074]              havoc spender_s656;
[L12075]              havoc __ret_0_allowance;
[L12076]              havoc spender_s809;
[L12077]              havoc addedValue_s809;
[L12078]              havoc __ret_0_increaseAllowance;
[L12079]              havoc spender_s858;
[L12080]              havoc subtractedValue_s858;
[L12081]              havoc __ret_0_decreaseAllowance;
[L12082]              havoc name_s1105;
[L12083]              havoc symbol_s1105;
[L12084]              havoc decimals_s1105;
[L12085]              havoc __ret_0_name;
[L12086]              havoc __ret_0_symbol;
[L12087]              havoc __ret_0_decimals;
[L12088]              havoc __ret_0_implementation;
[L12089]              havoc arg1693_s0;
[L12090]              havoc arg1694_s0;
[L12091]              havoc __ret_0_timelockList;
[L12092]              havoc arg1695_s0;
[L12093]              havoc __ret_0_frozenAccount;
[L12094]              havoc holder_s1351;
[L12095]              havoc __ret_0_freezeAccount;
[L12096]              havoc holder_s1379;
[L12097]              havoc __ret_0_unfreezeAccount;
[L12098]              havoc holder_s1410;
[L12099]              havoc value_s1410;
[L12100]              havoc releaseTime_s1410;
[L12101]              havoc __ret_0_lock;
[L12102]              havoc holder_s1439;
[L12103]              havoc value_s1439;
[L12104]              havoc releaseTime_s1439;
[L12105]              havoc __ret_0_transferWithLock;
[L12106]              havoc holder_s1468;
[L12107]              havoc idx_s1468;
[L12108]              havoc __ret_0_unlock;
[L12109]              havoc _newImplementation_s1486;
[L12110]              havoc value_s1663;
[L12111]              havoc __ret_0_mint;
[L12112]              havoc tmpNow;
[L12113]              havoc gas;
[L12114]              assume gas > 4000000 && gas <= 8000000;
[L12115]              tmpNow := now;
[L12116]              havoc now;
[L12117]              assume now > tmpNow;
[L12118]              assume msgsender_MSG != null;
[L12119]              assume DType[msgsender_MSG] != SafeMath;
[L12120]              assume DType[msgsender_MSG] != Roles;
[L12121]              assume DType[msgsender_MSG] != Ownable;
[L12122]              assume DType[msgsender_MSG] != PauserRole;
[L12123]              assume DType[msgsender_MSG] != Pausable;
[L12124]              assume DType[msgsender_MSG] != IERC20;
[L12125]              assume DType[msgsender_MSG] != ERC20;
[L12126]              assume DType[msgsender_MSG] != ERC20Pausable;
[L12127]              assume DType[msgsender_MSG] != ERC20Detailed;
[L12128]              assume DType[msgsender_MSG] != ONIT;
[L12129]              Alloc[msgsender_MSG] := true;
[L12130]  COND FALSE  !(choice == 33)
[L12136]  COND FALSE  !(choice == 32)
[L12142]  COND FALSE  !(choice == 31)
[L12148]  COND FALSE  !(choice == 30)
[L12154]  COND FALSE  !(choice == 29)
[L12160]  COND FALSE  !(choice == 28)
[L12166]  COND FALSE  !(choice == 27)
[L12172]  COND FALSE  !(choice == 26)
[L12178]  COND FALSE  !(choice == 25)
[L12184]  COND FALSE  !(choice == 24)
[L12190]  COND FALSE  !(choice == 23)
[L12196]  COND FALSE  !(choice == 22)
[L12202]  COND FALSE  !(choice == 21)
[L12209]  COND FALSE  !(choice == 20)
[L12216]  COND FALSE  !(choice == 19)
[L12223]  COND FALSE  !(choice == 18)
[L12229]  COND FALSE  !(choice == 17)
[L12235]  COND TRUE   choice == 16
[L12236]              gas := gas - 21000;
[L12237]  COND TRUE   gas >= 0
[L12238]              assume msgvalue_MSG == 0;
[L12239]  CALL        call __ret_0_allowance := allowance~address~address_ERC20(this, msgsender_MSG, msgvalue_MSG, owner_s656, spender_s656);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume _allowed_ERC20[this][owner_s656][spender_s656] >= 0 && _allowed_ERC20[this][owner_s656][spender_s656] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_allowance_ERC200 := true;
[L2]                  call_allowance_ERC200 := false;
[L2]                  revert := revert_hold;
[L1874]               havoc __exception;
[L1875]               revert := false;
[L1876]   COND FALSE  !(__exception)
[L1912]   CALL        call __ret_0_ := allowance~address~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, owner_s656, spender_s656);
[L6631]               __ret_0_ := _allowed_ERC20[this][owner_s656][spender_s656];
[L1912]   RET         call __ret_0_ := allowance~address~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, owner_s656, spender_s656);
[L1913]               assume !revert && gas >= 0;
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume !(((((((((((((__ret_0_ == _allowed_ERC20[this][owner_s656][spender_s656] && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowed_ERC20[this] == old(_allowed_ERC20[this])) && implementation_ONIT[this] == old(implementation_ONIT[this])) && M_Ref_Ref[timelockList_ONIT[this]] == old(M_Ref_Ref[timelockList_ONIT[this]])) && frozenAccount_ONIT[this] == old(frozenAccount_ONIT[this])) && _paused_Pausable[this] == old(_paused_Pausable[this])) && _pausers_PauserRole[this] == old(_pausers_PauserRole[this])) && owner_Ownable[this] == old(owner_Ownable[this])) && newOwner_Ownable[this] == old(newOwner_Ownable[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]));
[L2]                  revert := revert_hold;
[L12239]  RET         call __ret_0_allowance := allowance~address~address_ERC20(this, msgsender_MSG, msgvalue_MSG, owner_s656, spender_s656);
[L12358]  RET         call CorralChoice_ONIT(this);

Loop:
[L12358]  CALL        call CorralChoice_ONIT(this);
[L12046]              havoc msgsender_MSG;
[L12047]              havoc msgvalue_MSG;
[L12048]              havoc choice;
[L12049]              havoc __ret_0_owner;
[L12050]              havoc __ret_0_newOwner;
[L12051]              havoc account_s293;
[L12052]              havoc __ret_0_isOwner;
[L12053]              havoc _newOwner_s313;
[L12054]              havoc __ret_0_acceptOwnership;
[L12055]              havoc account_s390;
[L12056]              havoc __ret_0_isPauser;
[L12057]              havoc account_s402;
[L12058]              havoc account_s414;
[L12059]              havoc __ret_0_paused;
[L12060]              havoc to_s1288;
[L12061]              havoc value_s1288;
[L12062]              havoc __ret_0_transfer;
[L12063]              havoc spender_s711;
[L12064]              havoc value_s711;
[L12065]              havoc __ret_0_approve;
[L12066]              havoc from_s1322;
[L12067]              havoc to_s1322;
[L12068]              havoc value_s1322;
[L12069]              havoc __ret_0_transferFrom;
[L12070]              havoc __ret_0_totalSupply;
[L12071]              havoc owner_s1254;
[L12072]              havoc __ret_0_balanceOf;
[L12073]              havoc owner_s656;
[L12074]              havoc spender_s656;
[L12075]              havoc __ret_0_allowance;
[L12076]              havoc spender_s809;
[L12077]              havoc addedValue_s809;
[L12078]              havoc __ret_0_increaseAllowance;
[L12079]              havoc spender_s858;
[L12080]              havoc subtractedValue_s858;
[L12081]              havoc __ret_0_decreaseAllowance;
[L12082]              havoc name_s1105;
[L12083]              havoc symbol_s1105;
[L12084]              havoc decimals_s1105;
[L12085]              havoc __ret_0_name;
[L12086]              havoc __ret_0_symbol;
[L12087]              havoc __ret_0_decimals;
[L12088]              havoc __ret_0_implementation;
[L12089]              havoc arg1693_s0;
[L12090]              havoc arg1694_s0;
[L12091]              havoc __ret_0_timelockList;
[L12092]              havoc arg1695_s0;
[L12093]              havoc __ret_0_frozenAccount;
[L12094]              havoc holder_s1351;
[L12095]              havoc __ret_0_freezeAccount;
[L12096]              havoc holder_s1379;
[L12097]              havoc __ret_0_unfreezeAccount;
[L12098]              havoc holder_s1410;
[L12099]              havoc value_s1410;
[L12100]              havoc releaseTime_s1410;
[L12101]              havoc __ret_0_lock;
[L12102]              havoc holder_s1439;
[L12103]              havoc value_s1439;
[L12104]              havoc releaseTime_s1439;
[L12105]              havoc __ret_0_transferWithLock;
[L12106]              havoc holder_s1468;
[L12107]              havoc idx_s1468;
[L12108]              havoc __ret_0_unlock;
[L12109]              havoc _newImplementation_s1486;
[L12110]              havoc value_s1663;
[L12111]              havoc __ret_0_mint;
[L12112]              havoc tmpNow;
[L12113]              havoc gas;
[L12114]              assume gas > 4000000 && gas <= 8000000;
[L12115]              tmpNow := now;
[L12116]              havoc now;
[L12117]              assume now > tmpNow;
[L12118]              assume msgsender_MSG != null;
[L12119]              assume DType[msgsender_MSG] != SafeMath;
[L12120]              assume DType[msgsender_MSG] != Roles;
[L12121]              assume DType[msgsender_MSG] != Ownable;
[L12122]              assume DType[msgsender_MSG] != PauserRole;
[L12123]              assume DType[msgsender_MSG] != Pausable;
[L12124]              assume DType[msgsender_MSG] != IERC20;
[L12125]              assume DType[msgsender_MSG] != ERC20;
[L12126]              assume DType[msgsender_MSG] != ERC20Pausable;
[L12127]              assume DType[msgsender_MSG] != ERC20Detailed;
[L12128]              assume DType[msgsender_MSG] != ONIT;
[L12129]              Alloc[msgsender_MSG] := true;
[L12130]  COND FALSE  !(choice == 33)
[L12136]  COND FALSE  !(choice == 32)
[L12142]  COND FALSE  !(choice == 31)
[L12148]  COND FALSE  !(choice == 30)
[L12154]  COND FALSE  !(choice == 29)
[L12160]  COND FALSE  !(choice == 28)
[L12166]  COND FALSE  !(choice == 27)
[L12172]  COND FALSE  !(choice == 26)
[L12178]  COND FALSE  !(choice == 25)
[L12184]  COND FALSE  !(choice == 24)
[L12190]  COND FALSE  !(choice == 23)
[L12196]  COND FALSE  !(choice == 22)
[L12202]  COND FALSE  !(choice == 21)
[L12209]  COND FALSE  !(choice == 20)
[L12216]  COND FALSE  !(choice == 19)
[L12223]  COND FALSE  !(choice == 18)
[L12229]  COND FALSE  !(choice == 17)
[L12235]  COND TRUE   choice == 16
[L12236]              gas := gas - 21000;
[L12237]  COND TRUE   gas >= 0
[L12238]              assume msgvalue_MSG == 0;
[L12239]  CALL        call __ret_0_allowance := allowance~address~address_ERC20(this, msgsender_MSG, msgvalue_MSG, owner_s656, spender_s656);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume _allowed_ERC20[this][owner_s656][spender_s656] >= 0 && _allowed_ERC20[this][owner_s656][spender_s656] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_allowance_ERC200 := true;
[L2]                  call_allowance_ERC200 := false;
[L2]                  revert := revert_hold;
[L1874]               havoc __exception;
[L1875]               revert := false;
[L1876]   COND FALSE  !(__exception)
[L1912]   CALL        call __ret_0_ := allowance~address~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, owner_s656, spender_s656);
[L6631]               __ret_0_ := _allowed_ERC20[this][owner_s656][spender_s656];
[L1912]   RET         call __ret_0_ := allowance~address~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, owner_s656, spender_s656);
[L1913]               assume !revert && gas >= 0;
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume !(((((((((((((__ret_0_ == _allowed_ERC20[this][owner_s656][spender_s656] && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowed_ERC20[this] == old(_allowed_ERC20[this])) && implementation_ONIT[this] == old(implementation_ONIT[this])) && M_Ref_Ref[timelockList_ONIT[this]] == old(M_Ref_Ref[timelockList_ONIT[this]])) && frozenAccount_ONIT[this] == old(frozenAccount_ONIT[this])) && _paused_Pausable[this] == old(_paused_Pausable[this])) && _pausers_PauserRole[this] == old(_pausers_PauserRole[this])) && owner_Ownable[this] == old(owner_Ownable[this])) && newOwner_Ownable[this] == old(newOwner_Ownable[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]));
[L2]                  revert := revert_hold;
[L12239]  RET         call __ret_0_allowance := allowance~address~address_ERC20(this, msgsender_MSG, msgvalue_MSG, owner_s656, spender_s656);
[L12358]  RET         call CorralChoice_ONIT(this);

[2020-11-25 02:43:42,262 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 02:43:42,263 INFO  L82        PathProgramCache]: Analyzing trace with hash 2004928744, now seen corresponding path program 1 times
[2020-11-25 02:43:42,263 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 02:43:42,275 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 02:43:42,350 INFO  L134       CoverageAnalysis]: Checked inductivity of 51 backedges. 0 proven. 14 refuted. 0 times theorem prover too weak. 37 trivial. 0 not checked.
[2020-11-25 02:43:42,350 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 02:43:42,350 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [9] total 9
[2020-11-25 02:43:42,351 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 02:43:42,351 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 9 interpolants.
[2020-11-25 02:43:42,351 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=15, Invalid=57, Unknown=0, NotChecked=0, Total=72
[2020-11-25 02:43:42,351 INFO  L87              Difference]: Start difference. First operand 8182 states and 9513 transitions. cyclomatic complexity: 1341 Second operand 9 states.
[2020-11-25 02:43:42,478 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 02:43:42,479 INFO  L93              Difference]: Finished difference Result 8228 states and 9588 transitions.
[2020-11-25 02:43:42,479 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 9 states. 
[2020-11-25 02:43:42,479 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 8228 states and 9588 transitions.
[2020-11-25 02:43:42,499 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 02:43:42,528 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 8228 states to 8228 states and 9588 transitions.
[2020-11-25 02:43:42,528 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1586
[2020-11-25 02:43:42,529 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1586
[2020-11-25 02:43:42,529 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 8228 states and 9588 transitions.
[2020-11-25 02:43:42,538 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 02:43:42,538 INFO  L728         BuchiCegarLoop]: Abstraction has 8228 states and 9588 transitions.
[2020-11-25 02:43:42,546 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 8228 states and 9588 transitions.
[2020-11-25 02:43:42,614 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 8228 to 8219.
[2020-11-25 02:43:42,614 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 8219 states.
[2020-11-25 02:43:42,625 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 8219 states to 8219 states and 9572 transitions.
[2020-11-25 02:43:42,625 INFO  L751         BuchiCegarLoop]: Abstraction has 8219 states and 9572 transitions.
[2020-11-25 02:43:42,625 INFO  L631         BuchiCegarLoop]: Abstraction has 8219 states and 9572 transitions.
[2020-11-25 02:43:42,625 INFO  L445         BuchiCegarLoop]: ======== Iteration 4============
[2020-11-25 02:43:42,625 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 8219 states and 9572 transitions.
[2020-11-25 02:43:42,635 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 02:43:42,636 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 02:43:42,636 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 02:43:42,638 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 02:43:42,638 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  success_allowance_ERC200 := false;
[L2]                  call_allowance_ERC200 := false;
[L2]      CALL        call main();
[L12348]              assume null == 0;
[L12349]  CALL        call this := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L12349]  RET         call this := FreshRefGenerator__success();
[L12350]              assume now >= 0;
[L12351]              assume DType[this] == ONIT;
[L12352]              assume msgvalue_MSG == 0;
[L12353]              gas := gas - 53000;
[L12354]  CALL        call ONIT_ONIT(this, msgsender_MSG, msgvalue_MSG);
[L3014]               havoc __exception;
[L3015]               revert := false;
[L3016]   COND FALSE  !(__exception)
[L3052]   CALL        call ONIT_ONIT__success(this, msgsender_MSG, msgvalue_MSG);
[L7433]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L7433]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7434]   COND FALSE  !(revert)
[L7437]   CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -1901915118, -1174776732, 18);
[L7287]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L7287]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7288]   COND FALSE  !(revert)
[L7291]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7262]               assume msgsender_MSG != null;
[L7263]               Balance[this] := 0;
[L7264]               _name_ERC20Detailed[this] := -1540954157;
[L7265]               _symbol_ERC20Detailed[this] := -1540954157;
[L7266]               _decimals_ERC20Detailed[this] := 0;
[L7268]               _name_ERC20Detailed[this] := name_s1105;
[L7269]               _symbol_ERC20Detailed[this] := symbol_s1105;
[L7270]               _decimals_ERC20Detailed[this] := decimals_s1105;
[L7291]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7292]   COND FALSE  !(revert)
[L7437]   RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -1901915118, -1174776732, 18);
[L7438]   COND FALSE  !(revert)
[L7441]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6589]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L6589]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6590]   COND FALSE  !(revert)
[L6593]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]               assume msgsender_MSG != null;
[L6566]               Balance[this] := 0;
[L6567]               _balances_ERC20[this] := zeroRefintArr();
[L6568]               sum__balances0[this] := 0;
[L6569]               _allowed_ERC20[this] := zeroRefRefintArr();
[L6570]               sum__allowed1[this] := 0;
[L6571]               _totalSupply_ERC20[this] := 0;
[L6593]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6594]   COND FALSE  !(revert)
[L7441]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7442]   COND FALSE  !(revert)
[L7445]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L7445]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7446]   COND FALSE  !(revert)
[L7449]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6155]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6155]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   COND FALSE  !(revert)
[L6159]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6105]               assume msgsender_MSG != null;
[L6106]               Balance[this] := 0;
[L6108]   CALL        call __var_10 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L6108]   RET         call __var_10 := FreshRefGenerator__success();
[L6109]   COND FALSE  !(revert)
[L6112]               _pausers_PauserRole[this] := __var_10;
[L6114]   COND FALSE  !(DType[this] == ONIT)
[L6119]   COND TRUE   DType[this] == ERC20Pausable
[L6120]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6375]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5836]               __var_1 := null;
[L5837]   COND FALSE  !(!(account_s164 != null))
[L5841]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5907]               __var_5 := null;
[L5908]   COND TRUE   !(account_s218 != null)
[L5909]               revert := true;
[L5841]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5842]   COND TRUE   revert
[L6375]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6376]   COND TRUE   revert
[L6120]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6121]   COND TRUE   revert
[L6159]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6160]   COND TRUE   revert
[L7449]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7450]   COND TRUE   revert
[L3052]   RET         call ONIT_ONIT__success(this, msgsender_MSG, msgvalue_MSG);
[L3053]               assume !revert && gas >= 0;
[L12354]  RET         call ONIT_ONIT(this, msgsender_MSG, msgvalue_MSG);
[L12355]              assume !revert && gas >= 0;
[L12358]  CALL        call CorralChoice_ONIT(this);
[L12046]              havoc msgsender_MSG;
[L12047]              havoc msgvalue_MSG;
[L12048]              havoc choice;
[L12049]              havoc __ret_0_owner;
[L12050]              havoc __ret_0_newOwner;
[L12051]              havoc account_s293;
[L12052]              havoc __ret_0_isOwner;
[L12053]              havoc _newOwner_s313;
[L12054]              havoc __ret_0_acceptOwnership;
[L12055]              havoc account_s390;
[L12056]              havoc __ret_0_isPauser;
[L12057]              havoc account_s402;
[L12058]              havoc account_s414;
[L12059]              havoc __ret_0_paused;
[L12060]              havoc to_s1288;
[L12061]              havoc value_s1288;
[L12062]              havoc __ret_0_transfer;
[L12063]              havoc spender_s711;
[L12064]              havoc value_s711;
[L12065]              havoc __ret_0_approve;
[L12066]              havoc from_s1322;
[L12067]              havoc to_s1322;
[L12068]              havoc value_s1322;
[L12069]              havoc __ret_0_transferFrom;
[L12070]              havoc __ret_0_totalSupply;
[L12071]              havoc owner_s1254;
[L12072]              havoc __ret_0_balanceOf;
[L12073]              havoc owner_s656;
[L12074]              havoc spender_s656;
[L12075]              havoc __ret_0_allowance;
[L12076]              havoc spender_s809;
[L12077]              havoc addedValue_s809;
[L12078]              havoc __ret_0_increaseAllowance;
[L12079]              havoc spender_s858;
[L12080]              havoc subtractedValue_s858;
[L12081]              havoc __ret_0_decreaseAllowance;
[L12082]              havoc name_s1105;
[L12083]              havoc symbol_s1105;
[L12084]              havoc decimals_s1105;
[L12085]              havoc __ret_0_name;
[L12086]              havoc __ret_0_symbol;
[L12087]              havoc __ret_0_decimals;
[L12088]              havoc __ret_0_implementation;
[L12089]              havoc arg1693_s0;
[L12090]              havoc arg1694_s0;
[L12091]              havoc __ret_0_timelockList;
[L12092]              havoc arg1695_s0;
[L12093]              havoc __ret_0_frozenAccount;
[L12094]              havoc holder_s1351;
[L12095]              havoc __ret_0_freezeAccount;
[L12096]              havoc holder_s1379;
[L12097]              havoc __ret_0_unfreezeAccount;
[L12098]              havoc holder_s1410;
[L12099]              havoc value_s1410;
[L12100]              havoc releaseTime_s1410;
[L12101]              havoc __ret_0_lock;
[L12102]              havoc holder_s1439;
[L12103]              havoc value_s1439;
[L12104]              havoc releaseTime_s1439;
[L12105]              havoc __ret_0_transferWithLock;
[L12106]              havoc holder_s1468;
[L12107]              havoc idx_s1468;
[L12108]              havoc __ret_0_unlock;
[L12109]              havoc _newImplementation_s1486;
[L12110]              havoc value_s1663;
[L12111]              havoc __ret_0_mint;
[L12112]              havoc tmpNow;
[L12113]              havoc gas;
[L12114]              assume gas > 4000000 && gas <= 8000000;
[L12115]              tmpNow := now;
[L12116]              havoc now;
[L12117]              assume now > tmpNow;
[L12118]              assume msgsender_MSG != null;
[L12119]              assume DType[msgsender_MSG] != SafeMath;
[L12120]              assume DType[msgsender_MSG] != Roles;
[L12121]              assume DType[msgsender_MSG] != Ownable;
[L12122]              assume DType[msgsender_MSG] != PauserRole;
[L12123]              assume DType[msgsender_MSG] != Pausable;
[L12124]              assume DType[msgsender_MSG] != IERC20;
[L12125]              assume DType[msgsender_MSG] != ERC20;
[L12126]              assume DType[msgsender_MSG] != ERC20Pausable;
[L12127]              assume DType[msgsender_MSG] != ERC20Detailed;
[L12128]              assume DType[msgsender_MSG] != ONIT;
[L12129]              Alloc[msgsender_MSG] := true;
[L12130]  COND FALSE  !(choice == 33)
[L12136]  COND FALSE  !(choice == 32)
[L12142]  COND FALSE  !(choice == 31)
[L12148]  COND FALSE  !(choice == 30)
[L12154]  COND FALSE  !(choice == 29)
[L12160]  COND FALSE  !(choice == 28)
[L12166]  COND FALSE  !(choice == 27)
[L12172]  COND FALSE  !(choice == 26)
[L12178]  COND FALSE  !(choice == 25)
[L12184]  COND FALSE  !(choice == 24)
[L12190]  COND FALSE  !(choice == 23)
[L12196]  COND FALSE  !(choice == 22)
[L12202]  COND FALSE  !(choice == 21)
[L12209]  COND FALSE  !(choice == 20)
[L12216]  COND FALSE  !(choice == 19)
[L12223]  COND FALSE  !(choice == 18)
[L12229]  COND FALSE  !(choice == 17)
[L12235]  COND TRUE   choice == 16
[L12236]              gas := gas - 21000;
[L12237]  COND TRUE   gas >= 0
[L12238]              assume msgvalue_MSG == 0;
[L12239]  CALL        call __ret_0_allowance := allowance~address~address_ERC20(this, msgsender_MSG, msgvalue_MSG, owner_s656, spender_s656);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume _allowed_ERC20[this][owner_s656][spender_s656] >= 0 && _allowed_ERC20[this][owner_s656][spender_s656] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_allowance_ERC200 := true;
[L2]                  call_allowance_ERC200 := false;
[L2]                  revert := revert_hold;
[L1874]               havoc __exception;
[L1875]               revert := false;
[L1876]   COND FALSE  !(__exception)
[L1912]   CALL        call __ret_0_ := allowance~address~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, owner_s656, spender_s656);
[L6631]               __ret_0_ := _allowed_ERC20[this][owner_s656][spender_s656];
[L1912]   RET         call __ret_0_ := allowance~address~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, owner_s656, spender_s656);
[L1913]               assume !revert && gas >= 0;
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume !(((((((((((((__ret_0_ == _allowed_ERC20[this][owner_s656][spender_s656] && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowed_ERC20[this] == old(_allowed_ERC20[this])) && implementation_ONIT[this] == old(implementation_ONIT[this])) && M_Ref_Ref[timelockList_ONIT[this]] == old(M_Ref_Ref[timelockList_ONIT[this]])) && frozenAccount_ONIT[this] == old(frozenAccount_ONIT[this])) && _paused_Pausable[this] == old(_paused_Pausable[this])) && _pausers_PauserRole[this] == old(_pausers_PauserRole[this])) && owner_Ownable[this] == old(owner_Ownable[this])) && newOwner_Ownable[this] == old(newOwner_Ownable[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]));
[L2]                  revert := revert_hold;
[L12239]  RET         call __ret_0_allowance := allowance~address~address_ERC20(this, msgsender_MSG, msgvalue_MSG, owner_s656, spender_s656);
[L12358]  RET         call CorralChoice_ONIT(this);

Loop:
[L12358]  CALL        call CorralChoice_ONIT(this);
[L12046]              havoc msgsender_MSG;
[L12047]              havoc msgvalue_MSG;
[L12048]              havoc choice;
[L12049]              havoc __ret_0_owner;
[L12050]              havoc __ret_0_newOwner;
[L12051]              havoc account_s293;
[L12052]              havoc __ret_0_isOwner;
[L12053]              havoc _newOwner_s313;
[L12054]              havoc __ret_0_acceptOwnership;
[L12055]              havoc account_s390;
[L12056]              havoc __ret_0_isPauser;
[L12057]              havoc account_s402;
[L12058]              havoc account_s414;
[L12059]              havoc __ret_0_paused;
[L12060]              havoc to_s1288;
[L12061]              havoc value_s1288;
[L12062]              havoc __ret_0_transfer;
[L12063]              havoc spender_s711;
[L12064]              havoc value_s711;
[L12065]              havoc __ret_0_approve;
[L12066]              havoc from_s1322;
[L12067]              havoc to_s1322;
[L12068]              havoc value_s1322;
[L12069]              havoc __ret_0_transferFrom;
[L12070]              havoc __ret_0_totalSupply;
[L12071]              havoc owner_s1254;
[L12072]              havoc __ret_0_balanceOf;
[L12073]              havoc owner_s656;
[L12074]              havoc spender_s656;
[L12075]              havoc __ret_0_allowance;
[L12076]              havoc spender_s809;
[L12077]              havoc addedValue_s809;
[L12078]              havoc __ret_0_increaseAllowance;
[L12079]              havoc spender_s858;
[L12080]              havoc subtractedValue_s858;
[L12081]              havoc __ret_0_decreaseAllowance;
[L12082]              havoc name_s1105;
[L12083]              havoc symbol_s1105;
[L12084]              havoc decimals_s1105;
[L12085]              havoc __ret_0_name;
[L12086]              havoc __ret_0_symbol;
[L12087]              havoc __ret_0_decimals;
[L12088]              havoc __ret_0_implementation;
[L12089]              havoc arg1693_s0;
[L12090]              havoc arg1694_s0;
[L12091]              havoc __ret_0_timelockList;
[L12092]              havoc arg1695_s0;
[L12093]              havoc __ret_0_frozenAccount;
[L12094]              havoc holder_s1351;
[L12095]              havoc __ret_0_freezeAccount;
[L12096]              havoc holder_s1379;
[L12097]              havoc __ret_0_unfreezeAccount;
[L12098]              havoc holder_s1410;
[L12099]              havoc value_s1410;
[L12100]              havoc releaseTime_s1410;
[L12101]              havoc __ret_0_lock;
[L12102]              havoc holder_s1439;
[L12103]              havoc value_s1439;
[L12104]              havoc releaseTime_s1439;
[L12105]              havoc __ret_0_transferWithLock;
[L12106]              havoc holder_s1468;
[L12107]              havoc idx_s1468;
[L12108]              havoc __ret_0_unlock;
[L12109]              havoc _newImplementation_s1486;
[L12110]              havoc value_s1663;
[L12111]              havoc __ret_0_mint;
[L12112]              havoc tmpNow;
[L12113]              havoc gas;
[L12114]              assume gas > 4000000 && gas <= 8000000;
[L12115]              tmpNow := now;
[L12116]              havoc now;
[L12117]              assume now > tmpNow;
[L12118]              assume msgsender_MSG != null;
[L12119]              assume DType[msgsender_MSG] != SafeMath;
[L12120]              assume DType[msgsender_MSG] != Roles;
[L12121]              assume DType[msgsender_MSG] != Ownable;
[L12122]              assume DType[msgsender_MSG] != PauserRole;
[L12123]              assume DType[msgsender_MSG] != Pausable;
[L12124]              assume DType[msgsender_MSG] != IERC20;
[L12125]              assume DType[msgsender_MSG] != ERC20;
[L12126]              assume DType[msgsender_MSG] != ERC20Pausable;
[L12127]              assume DType[msgsender_MSG] != ERC20Detailed;
[L12128]              assume DType[msgsender_MSG] != ONIT;
[L12129]              Alloc[msgsender_MSG] := true;
[L12130]  COND FALSE  !(choice == 33)
[L12136]  COND FALSE  !(choice == 32)
[L12142]  COND FALSE  !(choice == 31)
[L12148]  COND FALSE  !(choice == 30)
[L12154]  COND FALSE  !(choice == 29)
[L12160]  COND FALSE  !(choice == 28)
[L12166]  COND FALSE  !(choice == 27)
[L12172]  COND FALSE  !(choice == 26)
[L12178]  COND FALSE  !(choice == 25)
[L12184]  COND FALSE  !(choice == 24)
[L12190]  COND FALSE  !(choice == 23)
[L12196]  COND FALSE  !(choice == 22)
[L12202]  COND FALSE  !(choice == 21)
[L12209]  COND FALSE  !(choice == 20)
[L12216]  COND FALSE  !(choice == 19)
[L12223]  COND FALSE  !(choice == 18)
[L12229]  COND FALSE  !(choice == 17)
[L12235]  COND TRUE   choice == 16
[L12236]              gas := gas - 21000;
[L12237]  COND TRUE   gas >= 0
[L12238]              assume msgvalue_MSG == 0;
[L12239]  CALL        call __ret_0_allowance := allowance~address~address_ERC20(this, msgsender_MSG, msgvalue_MSG, owner_s656, spender_s656);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume _allowed_ERC20[this][owner_s656][spender_s656] >= 0 && _allowed_ERC20[this][owner_s656][spender_s656] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_allowance_ERC200 := true;
[L2]                  call_allowance_ERC200 := false;
[L2]                  revert := revert_hold;
[L1874]               havoc __exception;
[L1875]               revert := false;
[L1876]   COND FALSE  !(__exception)
[L1912]   CALL        call __ret_0_ := allowance~address~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, owner_s656, spender_s656);
[L6631]               __ret_0_ := _allowed_ERC20[this][owner_s656][spender_s656];
[L1912]   RET         call __ret_0_ := allowance~address~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, owner_s656, spender_s656);
[L1913]               assume !revert && gas >= 0;
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume !(((((((((((((__ret_0_ == _allowed_ERC20[this][owner_s656][spender_s656] && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowed_ERC20[this] == old(_allowed_ERC20[this])) && implementation_ONIT[this] == old(implementation_ONIT[this])) && M_Ref_Ref[timelockList_ONIT[this]] == old(M_Ref_Ref[timelockList_ONIT[this]])) && frozenAccount_ONIT[this] == old(frozenAccount_ONIT[this])) && _paused_Pausable[this] == old(_paused_Pausable[this])) && _pausers_PauserRole[this] == old(_pausers_PauserRole[this])) && owner_Ownable[this] == old(owner_Ownable[this])) && newOwner_Ownable[this] == old(newOwner_Ownable[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]));
[L2]                  revert := revert_hold;
[L12239]  RET         call __ret_0_allowance := allowance~address~address_ERC20(this, msgsender_MSG, msgvalue_MSG, owner_s656, spender_s656);
[L12358]  RET         call CorralChoice_ONIT(this);

[2020-11-25 02:43:42,642 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 02:43:42,643 INFO  L82        PathProgramCache]: Analyzing trace with hash -1291059525, now seen corresponding path program 1 times
[2020-11-25 02:43:42,644 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 02:43:42,655 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 02:43:42,783 INFO  L134       CoverageAnalysis]: Checked inductivity of 51 backedges. 0 proven. 14 refuted. 0 times theorem prover too weak. 37 trivial. 0 not checked.
[2020-11-25 02:43:42,784 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 02:43:42,784 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [10] total 10
[2020-11-25 02:43:42,784 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 02:43:42,785 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 10 interpolants.
[2020-11-25 02:43:42,785 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=17, Invalid=73, Unknown=0, NotChecked=0, Total=90
[2020-11-25 02:43:42,785 INFO  L87              Difference]: Start difference. First operand 8219 states and 9572 transitions. cyclomatic complexity: 1363 Second operand 10 states.
[2020-11-25 02:43:42,960 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 02:43:42,960 INFO  L93              Difference]: Finished difference Result 8279 states and 9663 transitions.
[2020-11-25 02:43:42,961 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 10 states. 
[2020-11-25 02:43:42,961 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 8279 states and 9663 transitions.
[2020-11-25 02:43:42,989 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 02:43:43,026 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 8279 states to 8279 states and 9663 transitions.
[2020-11-25 02:43:43,026 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1593
[2020-11-25 02:43:43,028 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1593
[2020-11-25 02:43:43,028 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 8279 states and 9663 transitions.
[2020-11-25 02:43:43,037 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 02:43:43,037 INFO  L728         BuchiCegarLoop]: Abstraction has 8279 states and 9663 transitions.
[2020-11-25 02:43:43,048 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 8279 states and 9663 transitions.
[2020-11-25 02:43:43,124 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 8279 to 8226.
[2020-11-25 02:43:43,124 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 8226 states.
[2020-11-25 02:43:43,136 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 8226 states to 8226 states and 9580 transitions.
[2020-11-25 02:43:43,136 INFO  L751         BuchiCegarLoop]: Abstraction has 8226 states and 9580 transitions.
[2020-11-25 02:43:43,136 INFO  L631         BuchiCegarLoop]: Abstraction has 8226 states and 9580 transitions.
[2020-11-25 02:43:43,136 INFO  L445         BuchiCegarLoop]: ======== Iteration 5============
[2020-11-25 02:43:43,136 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 8226 states and 9580 transitions.
[2020-11-25 02:43:43,151 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 02:43:43,151 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 02:43:43,151 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 02:43:43,154 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 02:43:43,154 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  success_allowance_ERC200 := false;
[L2]                  call_allowance_ERC200 := false;
[L2]      CALL        call main();
[L12348]              assume null == 0;
[L12349]  CALL        call this := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L12349]  RET         call this := FreshRefGenerator__success();
[L12350]              assume now >= 0;
[L12351]              assume DType[this] == ONIT;
[L12352]              assume msgvalue_MSG == 0;
[L12353]              gas := gas - 53000;
[L12354]  CALL        call ONIT_ONIT(this, msgsender_MSG, msgvalue_MSG);
[L3014]               havoc __exception;
[L3015]               revert := false;
[L3016]   COND FALSE  !(__exception)
[L3052]   CALL        call ONIT_ONIT__success(this, msgsender_MSG, msgvalue_MSG);
[L7433]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L7433]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7434]   COND FALSE  !(revert)
[L7437]   CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -1901915118, -1174776732, 18);
[L7287]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L7287]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7288]   COND FALSE  !(revert)
[L7291]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7262]               assume msgsender_MSG != null;
[L7263]               Balance[this] := 0;
[L7264]               _name_ERC20Detailed[this] := -1540954157;
[L7265]               _symbol_ERC20Detailed[this] := -1540954157;
[L7266]               _decimals_ERC20Detailed[this] := 0;
[L7268]               _name_ERC20Detailed[this] := name_s1105;
[L7269]               _symbol_ERC20Detailed[this] := symbol_s1105;
[L7270]               _decimals_ERC20Detailed[this] := decimals_s1105;
[L7291]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7292]   COND FALSE  !(revert)
[L7437]   RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -1901915118, -1174776732, 18);
[L7438]   COND FALSE  !(revert)
[L7441]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6589]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L6589]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6590]   COND FALSE  !(revert)
[L6593]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]               assume msgsender_MSG != null;
[L6566]               Balance[this] := 0;
[L6567]               _balances_ERC20[this] := zeroRefintArr();
[L6568]               sum__balances0[this] := 0;
[L6569]               _allowed_ERC20[this] := zeroRefRefintArr();
[L6570]               sum__allowed1[this] := 0;
[L6571]               _totalSupply_ERC20[this] := 0;
[L6593]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6594]   COND FALSE  !(revert)
[L7441]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7442]   COND FALSE  !(revert)
[L7445]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L7445]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7446]   COND FALSE  !(revert)
[L7449]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6155]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6155]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   COND FALSE  !(revert)
[L6159]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6105]               assume msgsender_MSG != null;
[L6106]               Balance[this] := 0;
[L6108]   CALL        call __var_10 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L6108]   RET         call __var_10 := FreshRefGenerator__success();
[L6109]   COND FALSE  !(revert)
[L6112]               _pausers_PauserRole[this] := __var_10;
[L6114]   COND FALSE  !(DType[this] == ONIT)
[L6119]   COND FALSE  !(DType[this] == ERC20Pausable)
[L6124]   COND FALSE  !(DType[this] == Pausable)
[L6129]   COND TRUE   DType[this] == PauserRole
[L6130]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6375]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5836]               __var_1 := null;
[L5837]   COND FALSE  !(!(account_s164 != null))
[L5841]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5841]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5842]   COND FALSE  !(revert)
[L5845]   COND TRUE   !!__var_2
[L5846]               revert := true;
[L6375]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6376]   COND TRUE   revert
[L6130]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6131]   COND TRUE   revert
[L6159]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6160]   COND TRUE   revert
[L7449]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7450]   COND TRUE   revert
[L3052]   RET         call ONIT_ONIT__success(this, msgsender_MSG, msgvalue_MSG);
[L3053]               assume !revert && gas >= 0;
[L12354]  RET         call ONIT_ONIT(this, msgsender_MSG, msgvalue_MSG);
[L12355]              assume !revert && gas >= 0;
[L12358]  CALL        call CorralChoice_ONIT(this);
[L12046]              havoc msgsender_MSG;
[L12047]              havoc msgvalue_MSG;
[L12048]              havoc choice;
[L12049]              havoc __ret_0_owner;
[L12050]              havoc __ret_0_newOwner;
[L12051]              havoc account_s293;
[L12052]              havoc __ret_0_isOwner;
[L12053]              havoc _newOwner_s313;
[L12054]              havoc __ret_0_acceptOwnership;
[L12055]              havoc account_s390;
[L12056]              havoc __ret_0_isPauser;
[L12057]              havoc account_s402;
[L12058]              havoc account_s414;
[L12059]              havoc __ret_0_paused;
[L12060]              havoc to_s1288;
[L12061]              havoc value_s1288;
[L12062]              havoc __ret_0_transfer;
[L12063]              havoc spender_s711;
[L12064]              havoc value_s711;
[L12065]              havoc __ret_0_approve;
[L12066]              havoc from_s1322;
[L12067]              havoc to_s1322;
[L12068]              havoc value_s1322;
[L12069]              havoc __ret_0_transferFrom;
[L12070]              havoc __ret_0_totalSupply;
[L12071]              havoc owner_s1254;
[L12072]              havoc __ret_0_balanceOf;
[L12073]              havoc owner_s656;
[L12074]              havoc spender_s656;
[L12075]              havoc __ret_0_allowance;
[L12076]              havoc spender_s809;
[L12077]              havoc addedValue_s809;
[L12078]              havoc __ret_0_increaseAllowance;
[L12079]              havoc spender_s858;
[L12080]              havoc subtractedValue_s858;
[L12081]              havoc __ret_0_decreaseAllowance;
[L12082]              havoc name_s1105;
[L12083]              havoc symbol_s1105;
[L12084]              havoc decimals_s1105;
[L12085]              havoc __ret_0_name;
[L12086]              havoc __ret_0_symbol;
[L12087]              havoc __ret_0_decimals;
[L12088]              havoc __ret_0_implementation;
[L12089]              havoc arg1693_s0;
[L12090]              havoc arg1694_s0;
[L12091]              havoc __ret_0_timelockList;
[L12092]              havoc arg1695_s0;
[L12093]              havoc __ret_0_frozenAccount;
[L12094]              havoc holder_s1351;
[L12095]              havoc __ret_0_freezeAccount;
[L12096]              havoc holder_s1379;
[L12097]              havoc __ret_0_unfreezeAccount;
[L12098]              havoc holder_s1410;
[L12099]              havoc value_s1410;
[L12100]              havoc releaseTime_s1410;
[L12101]              havoc __ret_0_lock;
[L12102]              havoc holder_s1439;
[L12103]              havoc value_s1439;
[L12104]              havoc releaseTime_s1439;
[L12105]              havoc __ret_0_transferWithLock;
[L12106]              havoc holder_s1468;
[L12107]              havoc idx_s1468;
[L12108]              havoc __ret_0_unlock;
[L12109]              havoc _newImplementation_s1486;
[L12110]              havoc value_s1663;
[L12111]              havoc __ret_0_mint;
[L12112]              havoc tmpNow;
[L12113]              havoc gas;
[L12114]              assume gas > 4000000 && gas <= 8000000;
[L12115]              tmpNow := now;
[L12116]              havoc now;
[L12117]              assume now > tmpNow;
[L12118]              assume msgsender_MSG != null;
[L12119]              assume DType[msgsender_MSG] != SafeMath;
[L12120]              assume DType[msgsender_MSG] != Roles;
[L12121]              assume DType[msgsender_MSG] != Ownable;
[L12122]              assume DType[msgsender_MSG] != PauserRole;
[L12123]              assume DType[msgsender_MSG] != Pausable;
[L12124]              assume DType[msgsender_MSG] != IERC20;
[L12125]              assume DType[msgsender_MSG] != ERC20;
[L12126]              assume DType[msgsender_MSG] != ERC20Pausable;
[L12127]              assume DType[msgsender_MSG] != ERC20Detailed;
[L12128]              assume DType[msgsender_MSG] != ONIT;
[L12129]              Alloc[msgsender_MSG] := true;
[L12130]  COND FALSE  !(choice == 33)
[L12136]  COND FALSE  !(choice == 32)
[L12142]  COND FALSE  !(choice == 31)
[L12148]  COND FALSE  !(choice == 30)
[L12154]  COND FALSE  !(choice == 29)
[L12160]  COND FALSE  !(choice == 28)
[L12166]  COND FALSE  !(choice == 27)
[L12172]  COND FALSE  !(choice == 26)
[L12178]  COND FALSE  !(choice == 25)
[L12184]  COND FALSE  !(choice == 24)
[L12190]  COND FALSE  !(choice == 23)
[L12196]  COND FALSE  !(choice == 22)
[L12202]  COND FALSE  !(choice == 21)
[L12209]  COND FALSE  !(choice == 20)
[L12216]  COND FALSE  !(choice == 19)
[L12223]  COND FALSE  !(choice == 18)
[L12229]  COND FALSE  !(choice == 17)
[L12235]  COND TRUE   choice == 16
[L12236]              gas := gas - 21000;
[L12237]  COND TRUE   gas >= 0
[L12238]              assume msgvalue_MSG == 0;
[L12239]  CALL        call __ret_0_allowance := allowance~address~address_ERC20(this, msgsender_MSG, msgvalue_MSG, owner_s656, spender_s656);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume _allowed_ERC20[this][owner_s656][spender_s656] >= 0 && _allowed_ERC20[this][owner_s656][spender_s656] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_allowance_ERC200 := true;
[L2]                  call_allowance_ERC200 := false;
[L2]                  revert := revert_hold;
[L1874]               havoc __exception;
[L1875]               revert := false;
[L1876]   COND FALSE  !(__exception)
[L1912]   CALL        call __ret_0_ := allowance~address~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, owner_s656, spender_s656);
[L6631]               __ret_0_ := _allowed_ERC20[this][owner_s656][spender_s656];
[L1912]   RET         call __ret_0_ := allowance~address~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, owner_s656, spender_s656);
[L1913]               assume !revert && gas >= 0;
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume !(((((((((((((__ret_0_ == _allowed_ERC20[this][owner_s656][spender_s656] && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowed_ERC20[this] == old(_allowed_ERC20[this])) && implementation_ONIT[this] == old(implementation_ONIT[this])) && M_Ref_Ref[timelockList_ONIT[this]] == old(M_Ref_Ref[timelockList_ONIT[this]])) && frozenAccount_ONIT[this] == old(frozenAccount_ONIT[this])) && _paused_Pausable[this] == old(_paused_Pausable[this])) && _pausers_PauserRole[this] == old(_pausers_PauserRole[this])) && owner_Ownable[this] == old(owner_Ownable[this])) && newOwner_Ownable[this] == old(newOwner_Ownable[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]));
[L2]                  revert := revert_hold;
[L12239]  RET         call __ret_0_allowance := allowance~address~address_ERC20(this, msgsender_MSG, msgvalue_MSG, owner_s656, spender_s656);
[L12358]  RET         call CorralChoice_ONIT(this);

Loop:
[L12358]  CALL        call CorralChoice_ONIT(this);
[L12046]              havoc msgsender_MSG;
[L12047]              havoc msgvalue_MSG;
[L12048]              havoc choice;
[L12049]              havoc __ret_0_owner;
[L12050]              havoc __ret_0_newOwner;
[L12051]              havoc account_s293;
[L12052]              havoc __ret_0_isOwner;
[L12053]              havoc _newOwner_s313;
[L12054]              havoc __ret_0_acceptOwnership;
[L12055]              havoc account_s390;
[L12056]              havoc __ret_0_isPauser;
[L12057]              havoc account_s402;
[L12058]              havoc account_s414;
[L12059]              havoc __ret_0_paused;
[L12060]              havoc to_s1288;
[L12061]              havoc value_s1288;
[L12062]              havoc __ret_0_transfer;
[L12063]              havoc spender_s711;
[L12064]              havoc value_s711;
[L12065]              havoc __ret_0_approve;
[L12066]              havoc from_s1322;
[L12067]              havoc to_s1322;
[L12068]              havoc value_s1322;
[L12069]              havoc __ret_0_transferFrom;
[L12070]              havoc __ret_0_totalSupply;
[L12071]              havoc owner_s1254;
[L12072]              havoc __ret_0_balanceOf;
[L12073]              havoc owner_s656;
[L12074]              havoc spender_s656;
[L12075]              havoc __ret_0_allowance;
[L12076]              havoc spender_s809;
[L12077]              havoc addedValue_s809;
[L12078]              havoc __ret_0_increaseAllowance;
[L12079]              havoc spender_s858;
[L12080]              havoc subtractedValue_s858;
[L12081]              havoc __ret_0_decreaseAllowance;
[L12082]              havoc name_s1105;
[L12083]              havoc symbol_s1105;
[L12084]              havoc decimals_s1105;
[L12085]              havoc __ret_0_name;
[L12086]              havoc __ret_0_symbol;
[L12087]              havoc __ret_0_decimals;
[L12088]              havoc __ret_0_implementation;
[L12089]              havoc arg1693_s0;
[L12090]              havoc arg1694_s0;
[L12091]              havoc __ret_0_timelockList;
[L12092]              havoc arg1695_s0;
[L12093]              havoc __ret_0_frozenAccount;
[L12094]              havoc holder_s1351;
[L12095]              havoc __ret_0_freezeAccount;
[L12096]              havoc holder_s1379;
[L12097]              havoc __ret_0_unfreezeAccount;
[L12098]              havoc holder_s1410;
[L12099]              havoc value_s1410;
[L12100]              havoc releaseTime_s1410;
[L12101]              havoc __ret_0_lock;
[L12102]              havoc holder_s1439;
[L12103]              havoc value_s1439;
[L12104]              havoc releaseTime_s1439;
[L12105]              havoc __ret_0_transferWithLock;
[L12106]              havoc holder_s1468;
[L12107]              havoc idx_s1468;
[L12108]              havoc __ret_0_unlock;
[L12109]              havoc _newImplementation_s1486;
[L12110]              havoc value_s1663;
[L12111]              havoc __ret_0_mint;
[L12112]              havoc tmpNow;
[L12113]              havoc gas;
[L12114]              assume gas > 4000000 && gas <= 8000000;
[L12115]              tmpNow := now;
[L12116]              havoc now;
[L12117]              assume now > tmpNow;
[L12118]              assume msgsender_MSG != null;
[L12119]              assume DType[msgsender_MSG] != SafeMath;
[L12120]              assume DType[msgsender_MSG] != Roles;
[L12121]              assume DType[msgsender_MSG] != Ownable;
[L12122]              assume DType[msgsender_MSG] != PauserRole;
[L12123]              assume DType[msgsender_MSG] != Pausable;
[L12124]              assume DType[msgsender_MSG] != IERC20;
[L12125]              assume DType[msgsender_MSG] != ERC20;
[L12126]              assume DType[msgsender_MSG] != ERC20Pausable;
[L12127]              assume DType[msgsender_MSG] != ERC20Detailed;
[L12128]              assume DType[msgsender_MSG] != ONIT;
[L12129]              Alloc[msgsender_MSG] := true;
[L12130]  COND FALSE  !(choice == 33)
[L12136]  COND FALSE  !(choice == 32)
[L12142]  COND FALSE  !(choice == 31)
[L12148]  COND FALSE  !(choice == 30)
[L12154]  COND FALSE  !(choice == 29)
[L12160]  COND FALSE  !(choice == 28)
[L12166]  COND FALSE  !(choice == 27)
[L12172]  COND FALSE  !(choice == 26)
[L12178]  COND FALSE  !(choice == 25)
[L12184]  COND FALSE  !(choice == 24)
[L12190]  COND FALSE  !(choice == 23)
[L12196]  COND FALSE  !(choice == 22)
[L12202]  COND FALSE  !(choice == 21)
[L12209]  COND FALSE  !(choice == 20)
[L12216]  COND FALSE  !(choice == 19)
[L12223]  COND FALSE  !(choice == 18)
[L12229]  COND FALSE  !(choice == 17)
[L12235]  COND TRUE   choice == 16
[L12236]              gas := gas - 21000;
[L12237]  COND TRUE   gas >= 0
[L12238]              assume msgvalue_MSG == 0;
[L12239]  CALL        call __ret_0_allowance := allowance~address~address_ERC20(this, msgsender_MSG, msgvalue_MSG, owner_s656, spender_s656);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume _allowed_ERC20[this][owner_s656][spender_s656] >= 0 && _allowed_ERC20[this][owner_s656][spender_s656] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_allowance_ERC200 := true;
[L2]                  call_allowance_ERC200 := false;
[L2]                  revert := revert_hold;
[L1874]               havoc __exception;
[L1875]               revert := false;
[L1876]   COND FALSE  !(__exception)
[L1912]   CALL        call __ret_0_ := allowance~address~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, owner_s656, spender_s656);
[L6631]               __ret_0_ := _allowed_ERC20[this][owner_s656][spender_s656];
[L1912]   RET         call __ret_0_ := allowance~address~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, owner_s656, spender_s656);
[L1913]               assume !revert && gas >= 0;
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume !(((((((((((((__ret_0_ == _allowed_ERC20[this][owner_s656][spender_s656] && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowed_ERC20[this] == old(_allowed_ERC20[this])) && implementation_ONIT[this] == old(implementation_ONIT[this])) && M_Ref_Ref[timelockList_ONIT[this]] == old(M_Ref_Ref[timelockList_ONIT[this]])) && frozenAccount_ONIT[this] == old(frozenAccount_ONIT[this])) && _paused_Pausable[this] == old(_paused_Pausable[this])) && _pausers_PauserRole[this] == old(_pausers_PauserRole[this])) && owner_Ownable[this] == old(owner_Ownable[this])) && newOwner_Ownable[this] == old(newOwner_Ownable[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]));
[L2]                  revert := revert_hold;
[L12239]  RET         call __ret_0_allowance := allowance~address~address_ERC20(this, msgsender_MSG, msgvalue_MSG, owner_s656, spender_s656);
[L12358]  RET         call CorralChoice_ONIT(this);

[2020-11-25 02:43:43,160 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 02:43:43,160 INFO  L82        PathProgramCache]: Analyzing trace with hash -221951306, now seen corresponding path program 1 times
[2020-11-25 02:43:43,161 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 02:43:43,174 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 02:43:43,217 INFO  L134       CoverageAnalysis]: Checked inductivity of 51 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 51 trivial. 0 not checked.
[2020-11-25 02:43:43,217 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 02:43:43,217 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [3] imperfect sequences [] total 3
[2020-11-25 02:43:43,217 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 02:43:43,218 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-11-25 02:43:43,218 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-11-25 02:43:43,218 INFO  L87              Difference]: Start difference. First operand 8226 states and 9580 transitions. cyclomatic complexity: 1364 Second operand 3 states.
[2020-11-25 02:43:43,349 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 02:43:43,349 INFO  L93              Difference]: Finished difference Result 9398 states and 10629 transitions.
[2020-11-25 02:43:43,349 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-11-25 02:43:43,349 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 9398 states and 10629 transitions.
[2020-11-25 02:43:43,370 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 02:43:43,394 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 9398 states to 8704 states and 9807 transitions.
[2020-11-25 02:43:43,394 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1684
[2020-11-25 02:43:43,395 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1770
[2020-11-25 02:43:43,395 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 8704 states and 9807 transitions.
[2020-11-25 02:43:43,402 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 02:43:43,402 INFO  L728         BuchiCegarLoop]: Abstraction has 8704 states and 9807 transitions.
[2020-11-25 02:43:43,409 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 8704 states and 9807 transitions.
[2020-11-25 02:43:43,454 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 8704 to 8017.
[2020-11-25 02:43:43,454 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 8017 states.
[2020-11-25 02:43:43,462 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 8017 states to 8017 states and 8942 transitions.
[2020-11-25 02:43:43,462 INFO  L751         BuchiCegarLoop]: Abstraction has 8017 states and 8942 transitions.
[2020-11-25 02:43:43,462 INFO  L631         BuchiCegarLoop]: Abstraction has 8017 states and 8942 transitions.
[2020-11-25 02:43:43,462 INFO  L445         BuchiCegarLoop]: ======== Iteration 6============
[2020-11-25 02:43:43,462 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 8017 states and 8942 transitions.
[2020-11-25 02:43:43,470 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 02:43:43,470 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 02:43:43,470 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 02:43:43,474 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 02:43:43,474 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  success_allowance_ERC200 := false;
[L2]                  call_allowance_ERC200 := false;
[L2]      CALL        call main();
[L12348]              assume null == 0;
[L12349]  CALL        call this := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L12349]  RET         call this := FreshRefGenerator__success();
[L12350]              assume now >= 0;
[L12351]              assume DType[this] == ONIT;
[L12352]              assume msgvalue_MSG == 0;
[L12353]              gas := gas - 53000;
[L12354]  CALL        call ONIT_ONIT(this, msgsender_MSG, msgvalue_MSG);
[L3014]               havoc __exception;
[L3015]               revert := false;
[L3016]   COND FALSE  !(__exception)
[L3052]   CALL        call ONIT_ONIT__success(this, msgsender_MSG, msgvalue_MSG);
[L7433]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L7433]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7434]   COND FALSE  !(revert)
[L7437]   CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -1901915118, -1174776732, 18);
[L7287]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L7287]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7288]   COND FALSE  !(revert)
[L7291]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7262]               assume msgsender_MSG != null;
[L7263]               Balance[this] := 0;
[L7264]               _name_ERC20Detailed[this] := -1540954157;
[L7265]               _symbol_ERC20Detailed[this] := -1540954157;
[L7266]               _decimals_ERC20Detailed[this] := 0;
[L7268]               _name_ERC20Detailed[this] := name_s1105;
[L7269]               _symbol_ERC20Detailed[this] := symbol_s1105;
[L7270]               _decimals_ERC20Detailed[this] := decimals_s1105;
[L7291]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7292]   COND FALSE  !(revert)
[L7437]   RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -1901915118, -1174776732, 18);
[L7438]   COND FALSE  !(revert)
[L7441]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6589]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L6589]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6590]   COND FALSE  !(revert)
[L6593]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]               assume msgsender_MSG != null;
[L6566]               Balance[this] := 0;
[L6567]               _balances_ERC20[this] := zeroRefintArr();
[L6568]               sum__balances0[this] := 0;
[L6569]               _allowed_ERC20[this] := zeroRefRefintArr();
[L6570]               sum__allowed1[this] := 0;
[L6571]               _totalSupply_ERC20[this] := 0;
[L6593]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6594]   COND FALSE  !(revert)
[L7441]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7442]   COND FALSE  !(revert)
[L7445]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L7445]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7446]   COND FALSE  !(revert)
[L7449]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6155]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6155]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   COND FALSE  !(revert)
[L6159]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6105]               assume msgsender_MSG != null;
[L6106]               Balance[this] := 0;
[L6108]   CALL        call __var_10 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L6108]   RET         call __var_10 := FreshRefGenerator__success();
[L6109]   COND FALSE  !(revert)
[L6112]               _pausers_PauserRole[this] := __var_10;
[L6114]   COND TRUE   DType[this] == ONIT
[L6115]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6375]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5836]               __var_1 := null;
[L5837]   COND FALSE  !(!(account_s164 != null))
[L5841]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5841]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5842]   COND FALSE  !(revert)
[L5845]   COND FALSE  !(!!__var_2)
[L5849]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6375]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6376]   COND FALSE  !(revert)
[L6379]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6115]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6116]   COND FALSE  !(revert)
[L6159]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6160]   COND FALSE  !(revert)
[L7449]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7450]   COND FALSE  !(revert)
[L7453]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6437]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6437]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6438]   COND FALSE  !(revert)
[L6441]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6155]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6155]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   COND FALSE  !(revert)
[L6159]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6105]               assume msgsender_MSG != null;
[L6106]               Balance[this] := 0;
[L6108]   CALL        call __var_10 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L6108]   RET         call __var_10 := FreshRefGenerator__success();
[L6109]   COND FALSE  !(revert)
[L6112]               _pausers_PauserRole[this] := __var_10;
[L6114]   COND TRUE   DType[this] == ONIT
[L6115]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6375]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5836]               __var_1 := null;
[L5837]   COND FALSE  !(!(account_s164 != null))
[L5841]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5841]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5842]   COND FALSE  !(revert)
[L5845]   COND FALSE  !(!!__var_2)
[L5849]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6375]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6376]   COND FALSE  !(revert)
[L6379]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6115]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6116]   COND FALSE  !(revert)
[L6159]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6160]   COND FALSE  !(revert)
[L6441]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6442]   COND FALSE  !(revert)
[L6445]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6412]               assume msgsender_MSG != null;
[L6413]               Balance[this] := 0;
[L6414]               _paused_Pausable[this] := false;
[L6416]               _paused_Pausable[this] := false;
[L6445]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6446]   COND FALSE  !(revert)
[L7453]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7454]   COND FALSE  !(revert)
[L7457]   CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7119]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L7119]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7120]   COND FALSE  !(revert)
[L7123]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6589]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L6589]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6590]   COND FALSE  !(revert)
[L6593]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]               assume msgsender_MSG != null;
[L6566]               Balance[this] := 0;
[L6567]               _balances_ERC20[this] := zeroRefintArr();
[L6568]               sum__balances0[this] := 0;
[L6569]               _allowed_ERC20[this] := zeroRefRefintArr();
[L6570]               sum__allowed1[this] := 0;
[L6571]               _totalSupply_ERC20[this] := 0;
[L6593]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6594]   COND FALSE  !(revert)
[L7123]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7124]   COND FALSE  !(revert)
[L7127]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L7127]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7128]   COND FALSE  !(revert)
[L7131]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6155]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6155]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   COND FALSE  !(revert)
[L6159]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6105]               assume msgsender_MSG != null;
[L6106]               Balance[this] := 0;
[L6108]   CALL        call __var_10 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L6108]   RET         call __var_10 := FreshRefGenerator__success();
[L6109]   COND FALSE  !(revert)
[L6112]               _pausers_PauserRole[this] := __var_10;
[L6114]   COND TRUE   DType[this] == ONIT
[L6115]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6375]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5836]               __var_1 := null;
[L5837]   COND FALSE  !(!(account_s164 != null))
[L5841]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5841]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5842]   COND FALSE  !(revert)
[L5845]   COND FALSE  !(!!__var_2)
[L5849]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6375]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6376]   COND FALSE  !(revert)
[L6379]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6115]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6116]   COND FALSE  !(revert)
[L6159]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6160]   COND FALSE  !(revert)
[L7131]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7132]   COND FALSE  !(revert)
[L7135]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6437]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6437]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6438]   COND FALSE  !(revert)
[L6441]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6155]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6155]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   COND FALSE  !(revert)
[L6159]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6105]               assume msgsender_MSG != null;
[L6106]               Balance[this] := 0;
[L6108]   CALL        call __var_10 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L6108]   RET         call __var_10 := FreshRefGenerator__success();
[L6109]   COND FALSE  !(revert)
[L6112]               _pausers_PauserRole[this] := __var_10;
[L6114]   COND TRUE   DType[this] == ONIT
[L6115]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6375]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5836]               __var_1 := null;
[L5837]   COND FALSE  !(!(account_s164 != null))
[L5841]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5841]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5842]   COND FALSE  !(revert)
[L5845]   COND FALSE  !(!!__var_2)
[L5849]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6375]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6376]   COND FALSE  !(revert)
[L6379]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6115]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6116]   COND FALSE  !(revert)
[L6159]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6160]   COND FALSE  !(revert)
[L6441]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6442]   COND FALSE  !(revert)
[L6445]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6412]               assume msgsender_MSG != null;
[L6413]               Balance[this] := 0;
[L6414]               _paused_Pausable[this] := false;
[L6416]               _paused_Pausable[this] := false;
[L6445]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6446]   COND FALSE  !(revert)
[L7135]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7136]   COND FALSE  !(revert)
[L7139]   CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7084]               assume msgsender_MSG != null;
[L7085]               Balance[this] := 0;
[L7139]   RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7140]   COND FALSE  !(revert)
[L7457]   RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7458]   COND FALSE  !(revert)
[L7461]   CALL        call ONIT_ONIT_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7367]               assume msgsender_MSG != null;
[L7368]               Balance[this] := 0;
[L7369]               implementation_ONIT[this] := null;
[L7371]   CALL        call __var_36 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L7371]   RET         call __var_36 := FreshRefGenerator__success();
[L7372]   COND FALSE  !(revert)
[L7375]               timelockList_ONIT[this] := __var_36;
[L7377]               alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]] := zeroRefboolArr();
[L7378]               frozenAccount_ONIT[this] := zeroRefboolArr();
[L7380]               __var_35 := 789885600000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7381]   COND TRUE   DType[this] == ONIT
[L7382]   CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 789885600000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L6943]               __var_23 := null;
[L6944]   COND FALSE  !(!(account_s946 != null))
[L6948]   CALL        call __var_24 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], value_s946);
[L5751]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5752]   COND FALSE  !(!(c_s106 >= a_s106))
[L5756]               __ret_0_ := c_s106;
[L6948]   RET         call __var_24 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], value_s946);
[L6949]   COND FALSE  !(revert)
[L6952]               _totalSupply_ERC20[this] := __var_24;
[L6953]   CALL        call __var_25 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s946], value_s946);
[L5751]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5752]   COND FALSE  !(!(c_s106 >= a_s106))
[L5756]               __ret_0_ := c_s106;
[L6953]   RET         call __var_25 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s946], value_s946);
[L6954]   COND FALSE  !(revert)
[L6957]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s946];
[L6958]               _balances_ERC20[this][account_s946] := __var_25;
[L6959]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s946];
[L6960]               assert { :EventEmitted "Transfer_ERC20" } true;
[L7382]   RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 789885600000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L7383]   COND FALSE  !(revert)
[L7461]   RET         call ONIT_ONIT_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7462]   COND FALSE  !(revert)
[L3052]   RET         call ONIT_ONIT__success(this, msgsender_MSG, msgvalue_MSG);
[L3053]               assume !revert && gas >= 0;
[L12354]  RET         call ONIT_ONIT(this, msgsender_MSG, msgvalue_MSG);
[L12355]              assume !revert && gas >= 0;
[L12358]  CALL        call CorralChoice_ONIT(this);
[L12046]              havoc msgsender_MSG;
[L12047]              havoc msgvalue_MSG;
[L12048]              havoc choice;
[L12049]              havoc __ret_0_owner;
[L12050]              havoc __ret_0_newOwner;
[L12051]              havoc account_s293;
[L12052]              havoc __ret_0_isOwner;
[L12053]              havoc _newOwner_s313;
[L12054]              havoc __ret_0_acceptOwnership;
[L12055]              havoc account_s390;
[L12056]              havoc __ret_0_isPauser;
[L12057]              havoc account_s402;
[L12058]              havoc account_s414;
[L12059]              havoc __ret_0_paused;
[L12060]              havoc to_s1288;
[L12061]              havoc value_s1288;
[L12062]              havoc __ret_0_transfer;
[L12063]              havoc spender_s711;
[L12064]              havoc value_s711;
[L12065]              havoc __ret_0_approve;
[L12066]              havoc from_s1322;
[L12067]              havoc to_s1322;
[L12068]              havoc value_s1322;
[L12069]              havoc __ret_0_transferFrom;
[L12070]              havoc __ret_0_totalSupply;
[L12071]              havoc owner_s1254;
[L12072]              havoc __ret_0_balanceOf;
[L12073]              havoc owner_s656;
[L12074]              havoc spender_s656;
[L12075]              havoc __ret_0_allowance;
[L12076]              havoc spender_s809;
[L12077]              havoc addedValue_s809;
[L12078]              havoc __ret_0_increaseAllowance;
[L12079]              havoc spender_s858;
[L12080]              havoc subtractedValue_s858;
[L12081]              havoc __ret_0_decreaseAllowance;
[L12082]              havoc name_s1105;
[L12083]              havoc symbol_s1105;
[L12084]              havoc decimals_s1105;
[L12085]              havoc __ret_0_name;
[L12086]              havoc __ret_0_symbol;
[L12087]              havoc __ret_0_decimals;
[L12088]              havoc __ret_0_implementation;
[L12089]              havoc arg1693_s0;
[L12090]              havoc arg1694_s0;
[L12091]              havoc __ret_0_timelockList;
[L12092]              havoc arg1695_s0;
[L12093]              havoc __ret_0_frozenAccount;
[L12094]              havoc holder_s1351;
[L12095]              havoc __ret_0_freezeAccount;
[L12096]              havoc holder_s1379;
[L12097]              havoc __ret_0_unfreezeAccount;
[L12098]              havoc holder_s1410;
[L12099]              havoc value_s1410;
[L12100]              havoc releaseTime_s1410;
[L12101]              havoc __ret_0_lock;
[L12102]              havoc holder_s1439;
[L12103]              havoc value_s1439;
[L12104]              havoc releaseTime_s1439;
[L12105]              havoc __ret_0_transferWithLock;
[L12106]              havoc holder_s1468;
[L12107]              havoc idx_s1468;
[L12108]              havoc __ret_0_unlock;
[L12109]              havoc _newImplementation_s1486;
[L12110]              havoc value_s1663;
[L12111]              havoc __ret_0_mint;
[L12112]              havoc tmpNow;
[L12113]              havoc gas;
[L12114]              assume gas > 4000000 && gas <= 8000000;
[L12115]              tmpNow := now;
[L12116]              havoc now;
[L12117]              assume now > tmpNow;
[L12118]              assume msgsender_MSG != null;
[L12119]              assume DType[msgsender_MSG] != SafeMath;
[L12120]              assume DType[msgsender_MSG] != Roles;
[L12121]              assume DType[msgsender_MSG] != Ownable;
[L12122]              assume DType[msgsender_MSG] != PauserRole;
[L12123]              assume DType[msgsender_MSG] != Pausable;
[L12124]              assume DType[msgsender_MSG] != IERC20;
[L12125]              assume DType[msgsender_MSG] != ERC20;
[L12126]              assume DType[msgsender_MSG] != ERC20Pausable;
[L12127]              assume DType[msgsender_MSG] != ERC20Detailed;
[L12128]              assume DType[msgsender_MSG] != ONIT;
[L12129]              Alloc[msgsender_MSG] := true;
[L12130]  COND FALSE  !(choice == 33)
[L12136]  COND FALSE  !(choice == 32)
[L12142]  COND FALSE  !(choice == 31)
[L12148]  COND FALSE  !(choice == 30)
[L12154]  COND FALSE  !(choice == 29)
[L12160]  COND FALSE  !(choice == 28)
[L12166]  COND FALSE  !(choice == 27)
[L12172]  COND FALSE  !(choice == 26)
[L12178]  COND FALSE  !(choice == 25)
[L12184]  COND FALSE  !(choice == 24)
[L12190]  COND FALSE  !(choice == 23)
[L12196]  COND FALSE  !(choice == 22)
[L12202]  COND FALSE  !(choice == 21)
[L12209]  COND FALSE  !(choice == 20)
[L12216]  COND FALSE  !(choice == 19)
[L12223]  COND FALSE  !(choice == 18)
[L12229]  COND FALSE  !(choice == 17)
[L12235]  COND TRUE   choice == 16
[L12236]              gas := gas - 21000;
[L12237]  COND TRUE   gas >= 0
[L12238]              assume msgvalue_MSG == 0;
[L12239]  CALL        call __ret_0_allowance := allowance~address~address_ERC20(this, msgsender_MSG, msgvalue_MSG, owner_s656, spender_s656);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume _allowed_ERC20[this][owner_s656][spender_s656] >= 0 && _allowed_ERC20[this][owner_s656][spender_s656] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_allowance_ERC200 := true;
[L2]                  call_allowance_ERC200 := false;
[L2]                  revert := revert_hold;
[L1874]               havoc __exception;
[L1875]               revert := false;
[L1876]   COND FALSE  !(__exception)
[L1912]   CALL        call __ret_0_ := allowance~address~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, owner_s656, spender_s656);
[L6631]               __ret_0_ := _allowed_ERC20[this][owner_s656][spender_s656];
[L1912]   RET         call __ret_0_ := allowance~address~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, owner_s656, spender_s656);
[L1913]               assume !revert && gas >= 0;
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume !(((((((((((((__ret_0_ == _allowed_ERC20[this][owner_s656][spender_s656] && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowed_ERC20[this] == old(_allowed_ERC20[this])) && implementation_ONIT[this] == old(implementation_ONIT[this])) && M_Ref_Ref[timelockList_ONIT[this]] == old(M_Ref_Ref[timelockList_ONIT[this]])) && frozenAccount_ONIT[this] == old(frozenAccount_ONIT[this])) && _paused_Pausable[this] == old(_paused_Pausable[this])) && _pausers_PauserRole[this] == old(_pausers_PauserRole[this])) && owner_Ownable[this] == old(owner_Ownable[this])) && newOwner_Ownable[this] == old(newOwner_Ownable[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]));
[L2]                  revert := revert_hold;
[L12239]  RET         call __ret_0_allowance := allowance~address~address_ERC20(this, msgsender_MSG, msgvalue_MSG, owner_s656, spender_s656);
[L12358]  RET         call CorralChoice_ONIT(this);

Loop:
[L12358]  CALL        call CorralChoice_ONIT(this);
[L12046]              havoc msgsender_MSG;
[L12047]              havoc msgvalue_MSG;
[L12048]              havoc choice;
[L12049]              havoc __ret_0_owner;
[L12050]              havoc __ret_0_newOwner;
[L12051]              havoc account_s293;
[L12052]              havoc __ret_0_isOwner;
[L12053]              havoc _newOwner_s313;
[L12054]              havoc __ret_0_acceptOwnership;
[L12055]              havoc account_s390;
[L12056]              havoc __ret_0_isPauser;
[L12057]              havoc account_s402;
[L12058]              havoc account_s414;
[L12059]              havoc __ret_0_paused;
[L12060]              havoc to_s1288;
[L12061]              havoc value_s1288;
[L12062]              havoc __ret_0_transfer;
[L12063]              havoc spender_s711;
[L12064]              havoc value_s711;
[L12065]              havoc __ret_0_approve;
[L12066]              havoc from_s1322;
[L12067]              havoc to_s1322;
[L12068]              havoc value_s1322;
[L12069]              havoc __ret_0_transferFrom;
[L12070]              havoc __ret_0_totalSupply;
[L12071]              havoc owner_s1254;
[L12072]              havoc __ret_0_balanceOf;
[L12073]              havoc owner_s656;
[L12074]              havoc spender_s656;
[L12075]              havoc __ret_0_allowance;
[L12076]              havoc spender_s809;
[L12077]              havoc addedValue_s809;
[L12078]              havoc __ret_0_increaseAllowance;
[L12079]              havoc spender_s858;
[L12080]              havoc subtractedValue_s858;
[L12081]              havoc __ret_0_decreaseAllowance;
[L12082]              havoc name_s1105;
[L12083]              havoc symbol_s1105;
[L12084]              havoc decimals_s1105;
[L12085]              havoc __ret_0_name;
[L12086]              havoc __ret_0_symbol;
[L12087]              havoc __ret_0_decimals;
[L12088]              havoc __ret_0_implementation;
[L12089]              havoc arg1693_s0;
[L12090]              havoc arg1694_s0;
[L12091]              havoc __ret_0_timelockList;
[L12092]              havoc arg1695_s0;
[L12093]              havoc __ret_0_frozenAccount;
[L12094]              havoc holder_s1351;
[L12095]              havoc __ret_0_freezeAccount;
[L12096]              havoc holder_s1379;
[L12097]              havoc __ret_0_unfreezeAccount;
[L12098]              havoc holder_s1410;
[L12099]              havoc value_s1410;
[L12100]              havoc releaseTime_s1410;
[L12101]              havoc __ret_0_lock;
[L12102]              havoc holder_s1439;
[L12103]              havoc value_s1439;
[L12104]              havoc releaseTime_s1439;
[L12105]              havoc __ret_0_transferWithLock;
[L12106]              havoc holder_s1468;
[L12107]              havoc idx_s1468;
[L12108]              havoc __ret_0_unlock;
[L12109]              havoc _newImplementation_s1486;
[L12110]              havoc value_s1663;
[L12111]              havoc __ret_0_mint;
[L12112]              havoc tmpNow;
[L12113]              havoc gas;
[L12114]              assume gas > 4000000 && gas <= 8000000;
[L12115]              tmpNow := now;
[L12116]              havoc now;
[L12117]              assume now > tmpNow;
[L12118]              assume msgsender_MSG != null;
[L12119]              assume DType[msgsender_MSG] != SafeMath;
[L12120]              assume DType[msgsender_MSG] != Roles;
[L12121]              assume DType[msgsender_MSG] != Ownable;
[L12122]              assume DType[msgsender_MSG] != PauserRole;
[L12123]              assume DType[msgsender_MSG] != Pausable;
[L12124]              assume DType[msgsender_MSG] != IERC20;
[L12125]              assume DType[msgsender_MSG] != ERC20;
[L12126]              assume DType[msgsender_MSG] != ERC20Pausable;
[L12127]              assume DType[msgsender_MSG] != ERC20Detailed;
[L12128]              assume DType[msgsender_MSG] != ONIT;
[L12129]              Alloc[msgsender_MSG] := true;
[L12130]  COND FALSE  !(choice == 33)
[L12136]  COND FALSE  !(choice == 32)
[L12142]  COND FALSE  !(choice == 31)
[L12148]  COND FALSE  !(choice == 30)
[L12154]  COND FALSE  !(choice == 29)
[L12160]  COND FALSE  !(choice == 28)
[L12166]  COND FALSE  !(choice == 27)
[L12172]  COND FALSE  !(choice == 26)
[L12178]  COND FALSE  !(choice == 25)
[L12184]  COND FALSE  !(choice == 24)
[L12190]  COND FALSE  !(choice == 23)
[L12196]  COND FALSE  !(choice == 22)
[L12202]  COND FALSE  !(choice == 21)
[L12209]  COND FALSE  !(choice == 20)
[L12216]  COND FALSE  !(choice == 19)
[L12223]  COND FALSE  !(choice == 18)
[L12229]  COND FALSE  !(choice == 17)
[L12235]  COND TRUE   choice == 16
[L12236]              gas := gas - 21000;
[L12237]  COND TRUE   gas >= 0
[L12238]              assume msgvalue_MSG == 0;
[L12239]  CALL        call __ret_0_allowance := allowance~address~address_ERC20(this, msgsender_MSG, msgvalue_MSG, owner_s656, spender_s656);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume _allowed_ERC20[this][owner_s656][spender_s656] >= 0 && _allowed_ERC20[this][owner_s656][spender_s656] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_allowance_ERC200 := true;
[L2]                  call_allowance_ERC200 := false;
[L2]                  revert := revert_hold;
[L1874]               havoc __exception;
[L1875]               revert := false;
[L1876]   COND FALSE  !(__exception)
[L1912]   CALL        call __ret_0_ := allowance~address~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, owner_s656, spender_s656);
[L6631]               __ret_0_ := _allowed_ERC20[this][owner_s656][spender_s656];
[L1912]   RET         call __ret_0_ := allowance~address~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, owner_s656, spender_s656);
[L1913]               assume !revert && gas >= 0;
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume !(((((((((((((__ret_0_ == _allowed_ERC20[this][owner_s656][spender_s656] && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowed_ERC20[this] == old(_allowed_ERC20[this])) && implementation_ONIT[this] == old(implementation_ONIT[this])) && M_Ref_Ref[timelockList_ONIT[this]] == old(M_Ref_Ref[timelockList_ONIT[this]])) && frozenAccount_ONIT[this] == old(frozenAccount_ONIT[this])) && _paused_Pausable[this] == old(_paused_Pausable[this])) && _pausers_PauserRole[this] == old(_pausers_PauserRole[this])) && owner_Ownable[this] == old(owner_Ownable[this])) && newOwner_Ownable[this] == old(newOwner_Ownable[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]));
[L2]                  revert := revert_hold;
[L12239]  RET         call __ret_0_allowance := allowance~address~address_ERC20(this, msgsender_MSG, msgvalue_MSG, owner_s656, spender_s656);
[L12358]  RET         call CorralChoice_ONIT(this);

[2020-11-25 02:43:43,480 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 02:43:43,480 INFO  L82        PathProgramCache]: Analyzing trace with hash 902104485, now seen corresponding path program 1 times
[2020-11-25 02:43:43,481 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 02:43:43,505 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 02:43:43,675 INFO  L134       CoverageAnalysis]: Checked inductivity of 930 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 930 trivial. 0 not checked.
[2020-11-25 02:43:43,675 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 02:43:43,675 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [4] imperfect sequences [] total 4
[2020-11-25 02:43:43,676 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 02:43:43,676 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-11-25 02:43:43,676 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=5, Invalid=7, Unknown=0, NotChecked=0, Total=12
[2020-11-25 02:43:43,676 INFO  L87              Difference]: Start difference. First operand 8017 states and 8942 transitions. cyclomatic complexity: 935 Second operand 4 states.
[2020-11-25 02:43:43,745 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 02:43:43,745 INFO  L93              Difference]: Finished difference Result 8018 states and 8941 transitions.
[2020-11-25 02:43:43,745 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 4 states. 
[2020-11-25 02:43:43,746 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 8018 states and 8941 transitions.
[2020-11-25 02:43:43,760 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 02:43:43,776 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 8018 states to 8008 states and 8931 transitions.
[2020-11-25 02:43:43,776 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1698
[2020-11-25 02:43:43,776 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1698
[2020-11-25 02:43:43,776 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 8008 states and 8931 transitions.
[2020-11-25 02:43:43,781 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 02:43:43,782 INFO  L728         BuchiCegarLoop]: Abstraction has 8008 states and 8931 transitions.
[2020-11-25 02:43:43,787 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 8008 states and 8931 transitions.
[2020-11-25 02:43:43,829 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 8008 to 8006.
[2020-11-25 02:43:43,829 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 8006 states.
[2020-11-25 02:43:43,837 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 8006 states to 8006 states and 8929 transitions.
[2020-11-25 02:43:43,837 INFO  L751         BuchiCegarLoop]: Abstraction has 8006 states and 8929 transitions.
[2020-11-25 02:43:43,837 INFO  L631         BuchiCegarLoop]: Abstraction has 8006 states and 8929 transitions.
[2020-11-25 02:43:43,837 INFO  L445         BuchiCegarLoop]: ======== Iteration 7============
[2020-11-25 02:43:43,838 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 8006 states and 8929 transitions.
[2020-11-25 02:43:43,846 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 02:43:43,846 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 02:43:43,846 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 02:43:43,848 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 02:43:43,848 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  success_allowance_ERC200 := false;
[L2]                  call_allowance_ERC200 := false;
[L2]      CALL        call main();
[L12348]              assume null == 0;
[L12349]  CALL        call this := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L12349]  RET         call this := FreshRefGenerator__success();
[L12350]              assume now >= 0;
[L12351]              assume DType[this] == ONIT;
[L12352]              assume msgvalue_MSG == 0;
[L12353]              gas := gas - 53000;
[L12354]  CALL        call ONIT_ONIT(this, msgsender_MSG, msgvalue_MSG);
[L3014]               havoc __exception;
[L3015]               revert := false;
[L3016]   COND FALSE  !(__exception)
[L3052]   CALL        call ONIT_ONIT__success(this, msgsender_MSG, msgvalue_MSG);
[L7433]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L7433]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7434]   COND FALSE  !(revert)
[L7437]   CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -1901915118, -1174776732, 18);
[L7287]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L7287]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7288]   COND FALSE  !(revert)
[L7291]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7262]               assume msgsender_MSG != null;
[L7263]               Balance[this] := 0;
[L7264]               _name_ERC20Detailed[this] := -1540954157;
[L7265]               _symbol_ERC20Detailed[this] := -1540954157;
[L7266]               _decimals_ERC20Detailed[this] := 0;
[L7268]               _name_ERC20Detailed[this] := name_s1105;
[L7269]               _symbol_ERC20Detailed[this] := symbol_s1105;
[L7270]               _decimals_ERC20Detailed[this] := decimals_s1105;
[L7291]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7292]   COND FALSE  !(revert)
[L7437]   RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -1901915118, -1174776732, 18);
[L7438]   COND FALSE  !(revert)
[L7441]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6589]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L6589]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6590]   COND FALSE  !(revert)
[L6593]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]               assume msgsender_MSG != null;
[L6566]               Balance[this] := 0;
[L6567]               _balances_ERC20[this] := zeroRefintArr();
[L6568]               sum__balances0[this] := 0;
[L6569]               _allowed_ERC20[this] := zeroRefRefintArr();
[L6570]               sum__allowed1[this] := 0;
[L6571]               _totalSupply_ERC20[this] := 0;
[L6593]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6594]   COND FALSE  !(revert)
[L7441]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7442]   COND FALSE  !(revert)
[L7445]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L7445]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7446]   COND FALSE  !(revert)
[L7449]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6155]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6155]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   COND FALSE  !(revert)
[L6159]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6105]               assume msgsender_MSG != null;
[L6106]               Balance[this] := 0;
[L6108]   CALL        call __var_10 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L6108]   RET         call __var_10 := FreshRefGenerator__success();
[L6109]   COND FALSE  !(revert)
[L6112]               _pausers_PauserRole[this] := __var_10;
[L6114]   COND FALSE  !(DType[this] == ONIT)
[L6119]   COND FALSE  !(DType[this] == ERC20Pausable)
[L6124]   COND FALSE  !(DType[this] == Pausable)
[L6129]   COND TRUE   DType[this] == PauserRole
[L6130]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6375]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5836]               __var_1 := null;
[L5837]   COND FALSE  !(!(account_s164 != null))
[L5841]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5841]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5842]   COND FALSE  !(revert)
[L5845]   COND FALSE  !(!!__var_2)
[L5849]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6375]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6376]   COND FALSE  !(revert)
[L6379]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6130]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6131]   COND FALSE  !(revert)
[L6159]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6160]   COND FALSE  !(revert)
[L7449]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7450]   COND FALSE  !(revert)
[L7453]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6437]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6437]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6438]   COND FALSE  !(revert)
[L6441]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6155]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6155]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   COND FALSE  !(revert)
[L6159]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6105]               assume msgsender_MSG != null;
[L6106]               Balance[this] := 0;
[L6108]   CALL        call __var_10 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L6108]   RET         call __var_10 := FreshRefGenerator__success();
[L6109]   COND FALSE  !(revert)
[L6112]               _pausers_PauserRole[this] := __var_10;
[L6114]   COND FALSE  !(DType[this] == ONIT)
[L6119]   COND FALSE  !(DType[this] == ERC20Pausable)
[L6124]   COND FALSE  !(DType[this] == Pausable)
[L6129]   COND TRUE   DType[this] == PauserRole
[L6130]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6375]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5836]               __var_1 := null;
[L5837]   COND FALSE  !(!(account_s164 != null))
[L5841]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5841]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5842]   COND FALSE  !(revert)
[L5845]   COND FALSE  !(!!__var_2)
[L5849]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6375]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6376]   COND FALSE  !(revert)
[L6379]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6130]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6131]   COND FALSE  !(revert)
[L6159]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6160]   COND FALSE  !(revert)
[L6441]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6442]   COND FALSE  !(revert)
[L6445]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6412]               assume msgsender_MSG != null;
[L6413]               Balance[this] := 0;
[L6414]               _paused_Pausable[this] := false;
[L6416]               _paused_Pausable[this] := false;
[L6445]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6446]   COND FALSE  !(revert)
[L7453]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7454]   COND FALSE  !(revert)
[L7457]   CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7119]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L7119]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7120]   COND FALSE  !(revert)
[L7123]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6589]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L6589]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6590]   COND FALSE  !(revert)
[L6593]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]               assume msgsender_MSG != null;
[L6566]               Balance[this] := 0;
[L6567]               _balances_ERC20[this] := zeroRefintArr();
[L6568]               sum__balances0[this] := 0;
[L6569]               _allowed_ERC20[this] := zeroRefRefintArr();
[L6570]               sum__allowed1[this] := 0;
[L6571]               _totalSupply_ERC20[this] := 0;
[L6593]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6594]   COND FALSE  !(revert)
[L7123]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7124]   COND FALSE  !(revert)
[L7127]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L7127]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7128]   COND FALSE  !(revert)
[L7131]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6155]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6155]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   COND FALSE  !(revert)
[L6159]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6105]               assume msgsender_MSG != null;
[L6106]               Balance[this] := 0;
[L6108]   CALL        call __var_10 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L6108]   RET         call __var_10 := FreshRefGenerator__success();
[L6109]   COND FALSE  !(revert)
[L6112]               _pausers_PauserRole[this] := __var_10;
[L6114]   COND FALSE  !(DType[this] == ONIT)
[L6119]   COND FALSE  !(DType[this] == ERC20Pausable)
[L6124]   COND FALSE  !(DType[this] == Pausable)
[L6129]   COND TRUE   DType[this] == PauserRole
[L6130]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6375]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5836]               __var_1 := null;
[L5837]   COND FALSE  !(!(account_s164 != null))
[L5841]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5841]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5842]   COND FALSE  !(revert)
[L5845]   COND FALSE  !(!!__var_2)
[L5849]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6375]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6376]   COND FALSE  !(revert)
[L6379]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6130]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6131]   COND FALSE  !(revert)
[L6159]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6160]   COND FALSE  !(revert)
[L7131]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7132]   COND FALSE  !(revert)
[L7135]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6437]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6437]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6438]   COND FALSE  !(revert)
[L6441]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6155]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6155]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   COND FALSE  !(revert)
[L6159]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6105]               assume msgsender_MSG != null;
[L6106]               Balance[this] := 0;
[L6108]   CALL        call __var_10 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L6108]   RET         call __var_10 := FreshRefGenerator__success();
[L6109]   COND FALSE  !(revert)
[L6112]               _pausers_PauserRole[this] := __var_10;
[L6114]   COND FALSE  !(DType[this] == ONIT)
[L6119]   COND FALSE  !(DType[this] == ERC20Pausable)
[L6124]   COND FALSE  !(DType[this] == Pausable)
[L6129]   COND TRUE   DType[this] == PauserRole
[L6130]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6375]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5836]               __var_1 := null;
[L5837]   COND FALSE  !(!(account_s164 != null))
[L5841]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5841]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5842]   COND FALSE  !(revert)
[L5845]   COND FALSE  !(!!__var_2)
[L5849]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6375]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6376]   COND FALSE  !(revert)
[L6379]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6130]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6131]   COND FALSE  !(revert)
[L6159]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6160]   COND FALSE  !(revert)
[L6441]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6442]   COND FALSE  !(revert)
[L6445]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6412]               assume msgsender_MSG != null;
[L6413]               Balance[this] := 0;
[L6414]               _paused_Pausable[this] := false;
[L6416]               _paused_Pausable[this] := false;
[L6445]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6446]   COND FALSE  !(revert)
[L7135]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7136]   COND FALSE  !(revert)
[L7139]   CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7084]               assume msgsender_MSG != null;
[L7085]               Balance[this] := 0;
[L7139]   RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7140]   COND FALSE  !(revert)
[L7457]   RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7458]   COND FALSE  !(revert)
[L7461]   CALL        call ONIT_ONIT_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7367]               assume msgsender_MSG != null;
[L7368]               Balance[this] := 0;
[L7369]               implementation_ONIT[this] := null;
[L7371]   CALL        call __var_36 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L7371]   RET         call __var_36 := FreshRefGenerator__success();
[L7372]   COND FALSE  !(revert)
[L7375]               timelockList_ONIT[this] := __var_36;
[L7377]               alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]] := zeroRefboolArr();
[L7378]               frozenAccount_ONIT[this] := zeroRefboolArr();
[L7380]               __var_35 := 789885600000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7381]   COND TRUE   DType[this] == ONIT
[L7382]   CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 789885600000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L6943]               __var_23 := null;
[L6944]   COND FALSE  !(!(account_s946 != null))
[L6948]   CALL        call __var_24 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], value_s946);
[L5751]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5752]   COND FALSE  !(!(c_s106 >= a_s106))
[L5756]               __ret_0_ := c_s106;
[L6948]   RET         call __var_24 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], value_s946);
[L6949]   COND FALSE  !(revert)
[L6952]               _totalSupply_ERC20[this] := __var_24;
[L6953]   CALL        call __var_25 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s946], value_s946);
[L5751]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5752]   COND FALSE  !(!(c_s106 >= a_s106))
[L5756]               __ret_0_ := c_s106;
[L6953]   RET         call __var_25 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s946], value_s946);
[L6954]   COND FALSE  !(revert)
[L6957]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s946];
[L6958]               _balances_ERC20[this][account_s946] := __var_25;
[L6959]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s946];
[L6960]               assert { :EventEmitted "Transfer_ERC20" } true;
[L7382]   RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 789885600000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L7383]   COND FALSE  !(revert)
[L7461]   RET         call ONIT_ONIT_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7462]   COND FALSE  !(revert)
[L3052]   RET         call ONIT_ONIT__success(this, msgsender_MSG, msgvalue_MSG);
[L3053]               assume !revert && gas >= 0;
[L12354]  RET         call ONIT_ONIT(this, msgsender_MSG, msgvalue_MSG);
[L12355]              assume !revert && gas >= 0;
[L12358]  CALL        call CorralChoice_ONIT(this);
[L12046]              havoc msgsender_MSG;
[L12047]              havoc msgvalue_MSG;
[L12048]              havoc choice;
[L12049]              havoc __ret_0_owner;
[L12050]              havoc __ret_0_newOwner;
[L12051]              havoc account_s293;
[L12052]              havoc __ret_0_isOwner;
[L12053]              havoc _newOwner_s313;
[L12054]              havoc __ret_0_acceptOwnership;
[L12055]              havoc account_s390;
[L12056]              havoc __ret_0_isPauser;
[L12057]              havoc account_s402;
[L12058]              havoc account_s414;
[L12059]              havoc __ret_0_paused;
[L12060]              havoc to_s1288;
[L12061]              havoc value_s1288;
[L12062]              havoc __ret_0_transfer;
[L12063]              havoc spender_s711;
[L12064]              havoc value_s711;
[L12065]              havoc __ret_0_approve;
[L12066]              havoc from_s1322;
[L12067]              havoc to_s1322;
[L12068]              havoc value_s1322;
[L12069]              havoc __ret_0_transferFrom;
[L12070]              havoc __ret_0_totalSupply;
[L12071]              havoc owner_s1254;
[L12072]              havoc __ret_0_balanceOf;
[L12073]              havoc owner_s656;
[L12074]              havoc spender_s656;
[L12075]              havoc __ret_0_allowance;
[L12076]              havoc spender_s809;
[L12077]              havoc addedValue_s809;
[L12078]              havoc __ret_0_increaseAllowance;
[L12079]              havoc spender_s858;
[L12080]              havoc subtractedValue_s858;
[L12081]              havoc __ret_0_decreaseAllowance;
[L12082]              havoc name_s1105;
[L12083]              havoc symbol_s1105;
[L12084]              havoc decimals_s1105;
[L12085]              havoc __ret_0_name;
[L12086]              havoc __ret_0_symbol;
[L12087]              havoc __ret_0_decimals;
[L12088]              havoc __ret_0_implementation;
[L12089]              havoc arg1693_s0;
[L12090]              havoc arg1694_s0;
[L12091]              havoc __ret_0_timelockList;
[L12092]              havoc arg1695_s0;
[L12093]              havoc __ret_0_frozenAccount;
[L12094]              havoc holder_s1351;
[L12095]              havoc __ret_0_freezeAccount;
[L12096]              havoc holder_s1379;
[L12097]              havoc __ret_0_unfreezeAccount;
[L12098]              havoc holder_s1410;
[L12099]              havoc value_s1410;
[L12100]              havoc releaseTime_s1410;
[L12101]              havoc __ret_0_lock;
[L12102]              havoc holder_s1439;
[L12103]              havoc value_s1439;
[L12104]              havoc releaseTime_s1439;
[L12105]              havoc __ret_0_transferWithLock;
[L12106]              havoc holder_s1468;
[L12107]              havoc idx_s1468;
[L12108]              havoc __ret_0_unlock;
[L12109]              havoc _newImplementation_s1486;
[L12110]              havoc value_s1663;
[L12111]              havoc __ret_0_mint;
[L12112]              havoc tmpNow;
[L12113]              havoc gas;
[L12114]              assume gas > 4000000 && gas <= 8000000;
[L12115]              tmpNow := now;
[L12116]              havoc now;
[L12117]              assume now > tmpNow;
[L12118]              assume msgsender_MSG != null;
[L12119]              assume DType[msgsender_MSG] != SafeMath;
[L12120]              assume DType[msgsender_MSG] != Roles;
[L12121]              assume DType[msgsender_MSG] != Ownable;
[L12122]              assume DType[msgsender_MSG] != PauserRole;
[L12123]              assume DType[msgsender_MSG] != Pausable;
[L12124]              assume DType[msgsender_MSG] != IERC20;
[L12125]              assume DType[msgsender_MSG] != ERC20;
[L12126]              assume DType[msgsender_MSG] != ERC20Pausable;
[L12127]              assume DType[msgsender_MSG] != ERC20Detailed;
[L12128]              assume DType[msgsender_MSG] != ONIT;
[L12129]              Alloc[msgsender_MSG] := true;
[L12130]  COND FALSE  !(choice == 33)
[L12136]  COND FALSE  !(choice == 32)
[L12142]  COND FALSE  !(choice == 31)
[L12148]  COND FALSE  !(choice == 30)
[L12154]  COND FALSE  !(choice == 29)
[L12160]  COND FALSE  !(choice == 28)
[L12166]  COND FALSE  !(choice == 27)
[L12172]  COND FALSE  !(choice == 26)
[L12178]  COND FALSE  !(choice == 25)
[L12184]  COND FALSE  !(choice == 24)
[L12190]  COND FALSE  !(choice == 23)
[L12196]  COND FALSE  !(choice == 22)
[L12202]  COND FALSE  !(choice == 21)
[L12209]  COND FALSE  !(choice == 20)
[L12216]  COND FALSE  !(choice == 19)
[L12223]  COND FALSE  !(choice == 18)
[L12229]  COND FALSE  !(choice == 17)
[L12235]  COND TRUE   choice == 16
[L12236]              gas := gas - 21000;
[L12237]  COND TRUE   gas >= 0
[L12238]              assume msgvalue_MSG == 0;
[L12239]  CALL        call __ret_0_allowance := allowance~address~address_ERC20(this, msgsender_MSG, msgvalue_MSG, owner_s656, spender_s656);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume _allowed_ERC20[this][owner_s656][spender_s656] >= 0 && _allowed_ERC20[this][owner_s656][spender_s656] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_allowance_ERC200 := true;
[L2]                  call_allowance_ERC200 := false;
[L2]                  revert := revert_hold;
[L1874]               havoc __exception;
[L1875]               revert := false;
[L1876]   COND TRUE   __exception
[L1877]               __tmp__Balance := Balance;
[L1878]               __tmp__DType := DType;
[L1879]               __tmp__Alloc := Alloc;
[L1880]               __tmp__balance_ADDR := balance_ADDR;
[L1881]               __tmp__M_Ref_bool := M_Ref_bool;
[L1882]               __tmp__sum := sum;
[L1883]               __tmp__M_Ref_int := M_Ref_int;
[L1884]               __tmp__sum__balances0 := sum__balances0;
[L1885]               __tmp__alloc__allowed_ERC20_lvl0 := alloc__allowed_ERC20_lvl0;
[L1886]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L1887]               __tmp__sum__allowed1 := sum__allowed1;
[L1888]               __tmp__M_int_Ref := M_int_Ref;
[L1889]               __tmp__alloc_timelockList_ONIT_lvl0 := alloc_timelockList_ONIT_lvl0;
[L1890]               __tmp__sum_frozenAccount2 := sum_frozenAccount2;
[L1891]               __tmp__Length := Length;
[L1892]               __tmp__now := now;
[L1893]               __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L1894]               __tmp__owner_Ownable := owner_Ownable;
[L1895]               __tmp__newOwner_Ownable := newOwner_Ownable;
[L1896]               __tmp___pausers_PauserRole := _pausers_PauserRole;
[L1897]               __tmp___paused_Pausable := _paused_Pausable;
[L1898]               __tmp___balances_ERC20 := _balances_ERC20;
[L1899]               __tmp___allowed_ERC20 := _allowed_ERC20;
[L1900]               __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L1901]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L1902]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L1903]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L1904]               __tmp___releaseTime_ONIT.LockInfo := _releaseTime_ONIT.LockInfo;
[L1905]               __tmp___amount_ONIT.LockInfo := _amount_ONIT.LockInfo;
[L1906]               __tmp__implementation_ONIT := implementation_ONIT;
[L1907]               __tmp__timelockList_ONIT := timelockList_ONIT;
[L1908]               __tmp__frozenAccount_ONIT := frozenAccount_ONIT;
[L1909]   CALL        call __ret_0_ := allowance~address~address_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, owner_s656, spender_s656);
[L6625]               __ret_0_ := __tmp___allowed_ERC20[this][owner_s656][spender_s656];
[L1909]   RET         call __ret_0_ := allowance~address~address_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, owner_s656, spender_s656);
[L1910]               assume revert || gas < 0;
[L12239]  RET         call __ret_0_allowance := allowance~address~address_ERC20(this, msgsender_MSG, msgvalue_MSG, owner_s656, spender_s656);
[L12358]  RET         call CorralChoice_ONIT(this);

Loop:
[L12358]  CALL        call CorralChoice_ONIT(this);
[L12046]              havoc msgsender_MSG;
[L12047]              havoc msgvalue_MSG;
[L12048]              havoc choice;
[L12049]              havoc __ret_0_owner;
[L12050]              havoc __ret_0_newOwner;
[L12051]              havoc account_s293;
[L12052]              havoc __ret_0_isOwner;
[L12053]              havoc _newOwner_s313;
[L12054]              havoc __ret_0_acceptOwnership;
[L12055]              havoc account_s390;
[L12056]              havoc __ret_0_isPauser;
[L12057]              havoc account_s402;
[L12058]              havoc account_s414;
[L12059]              havoc __ret_0_paused;
[L12060]              havoc to_s1288;
[L12061]              havoc value_s1288;
[L12062]              havoc __ret_0_transfer;
[L12063]              havoc spender_s711;
[L12064]              havoc value_s711;
[L12065]              havoc __ret_0_approve;
[L12066]              havoc from_s1322;
[L12067]              havoc to_s1322;
[L12068]              havoc value_s1322;
[L12069]              havoc __ret_0_transferFrom;
[L12070]              havoc __ret_0_totalSupply;
[L12071]              havoc owner_s1254;
[L12072]              havoc __ret_0_balanceOf;
[L12073]              havoc owner_s656;
[L12074]              havoc spender_s656;
[L12075]              havoc __ret_0_allowance;
[L12076]              havoc spender_s809;
[L12077]              havoc addedValue_s809;
[L12078]              havoc __ret_0_increaseAllowance;
[L12079]              havoc spender_s858;
[L12080]              havoc subtractedValue_s858;
[L12081]              havoc __ret_0_decreaseAllowance;
[L12082]              havoc name_s1105;
[L12083]              havoc symbol_s1105;
[L12084]              havoc decimals_s1105;
[L12085]              havoc __ret_0_name;
[L12086]              havoc __ret_0_symbol;
[L12087]              havoc __ret_0_decimals;
[L12088]              havoc __ret_0_implementation;
[L12089]              havoc arg1693_s0;
[L12090]              havoc arg1694_s0;
[L12091]              havoc __ret_0_timelockList;
[L12092]              havoc arg1695_s0;
[L12093]              havoc __ret_0_frozenAccount;
[L12094]              havoc holder_s1351;
[L12095]              havoc __ret_0_freezeAccount;
[L12096]              havoc holder_s1379;
[L12097]              havoc __ret_0_unfreezeAccount;
[L12098]              havoc holder_s1410;
[L12099]              havoc value_s1410;
[L12100]              havoc releaseTime_s1410;
[L12101]              havoc __ret_0_lock;
[L12102]              havoc holder_s1439;
[L12103]              havoc value_s1439;
[L12104]              havoc releaseTime_s1439;
[L12105]              havoc __ret_0_transferWithLock;
[L12106]              havoc holder_s1468;
[L12107]              havoc idx_s1468;
[L12108]              havoc __ret_0_unlock;
[L12109]              havoc _newImplementation_s1486;
[L12110]              havoc value_s1663;
[L12111]              havoc __ret_0_mint;
[L12112]              havoc tmpNow;
[L12113]              havoc gas;
[L12114]              assume gas > 4000000 && gas <= 8000000;
[L12115]              tmpNow := now;
[L12116]              havoc now;
[L12117]              assume now > tmpNow;
[L12118]              assume msgsender_MSG != null;
[L12119]              assume DType[msgsender_MSG] != SafeMath;
[L12120]              assume DType[msgsender_MSG] != Roles;
[L12121]              assume DType[msgsender_MSG] != Ownable;
[L12122]              assume DType[msgsender_MSG] != PauserRole;
[L12123]              assume DType[msgsender_MSG] != Pausable;
[L12124]              assume DType[msgsender_MSG] != IERC20;
[L12125]              assume DType[msgsender_MSG] != ERC20;
[L12126]              assume DType[msgsender_MSG] != ERC20Pausable;
[L12127]              assume DType[msgsender_MSG] != ERC20Detailed;
[L12128]              assume DType[msgsender_MSG] != ONIT;
[L12129]              Alloc[msgsender_MSG] := true;
[L12130]  COND FALSE  !(choice == 33)
[L12136]  COND FALSE  !(choice == 32)
[L12142]  COND FALSE  !(choice == 31)
[L12148]  COND FALSE  !(choice == 30)
[L12154]  COND FALSE  !(choice == 29)
[L12160]  COND FALSE  !(choice == 28)
[L12166]  COND FALSE  !(choice == 27)
[L12172]  COND FALSE  !(choice == 26)
[L12178]  COND FALSE  !(choice == 25)
[L12184]  COND FALSE  !(choice == 24)
[L12190]  COND FALSE  !(choice == 23)
[L12196]  COND FALSE  !(choice == 22)
[L12202]  COND FALSE  !(choice == 21)
[L12209]  COND FALSE  !(choice == 20)
[L12216]  COND FALSE  !(choice == 19)
[L12223]  COND FALSE  !(choice == 18)
[L12229]  COND FALSE  !(choice == 17)
[L12235]  COND TRUE   choice == 16
[L12236]              gas := gas - 21000;
[L12237]  COND TRUE   gas >= 0
[L12238]              assume msgvalue_MSG == 0;
[L12239]  CALL        call __ret_0_allowance := allowance~address~address_ERC20(this, msgsender_MSG, msgvalue_MSG, owner_s656, spender_s656);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume _allowed_ERC20[this][owner_s656][spender_s656] >= 0 && _allowed_ERC20[this][owner_s656][spender_s656] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_allowance_ERC200 := true;
[L2]                  call_allowance_ERC200 := false;
[L2]                  revert := revert_hold;
[L1874]               havoc __exception;
[L1875]               revert := false;
[L1876]   COND TRUE   __exception
[L1877]               __tmp__Balance := Balance;
[L1878]               __tmp__DType := DType;
[L1879]               __tmp__Alloc := Alloc;
[L1880]               __tmp__balance_ADDR := balance_ADDR;
[L1881]               __tmp__M_Ref_bool := M_Ref_bool;
[L1882]               __tmp__sum := sum;
[L1883]               __tmp__M_Ref_int := M_Ref_int;
[L1884]               __tmp__sum__balances0 := sum__balances0;
[L1885]               __tmp__alloc__allowed_ERC20_lvl0 := alloc__allowed_ERC20_lvl0;
[L1886]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L1887]               __tmp__sum__allowed1 := sum__allowed1;
[L1888]               __tmp__M_int_Ref := M_int_Ref;
[L1889]               __tmp__alloc_timelockList_ONIT_lvl0 := alloc_timelockList_ONIT_lvl0;
[L1890]               __tmp__sum_frozenAccount2 := sum_frozenAccount2;
[L1891]               __tmp__Length := Length;
[L1892]               __tmp__now := now;
[L1893]               __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L1894]               __tmp__owner_Ownable := owner_Ownable;
[L1895]               __tmp__newOwner_Ownable := newOwner_Ownable;
[L1896]               __tmp___pausers_PauserRole := _pausers_PauserRole;
[L1897]               __tmp___paused_Pausable := _paused_Pausable;
[L1898]               __tmp___balances_ERC20 := _balances_ERC20;
[L1899]               __tmp___allowed_ERC20 := _allowed_ERC20;
[L1900]               __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L1901]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L1902]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L1903]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L1904]               __tmp___releaseTime_ONIT.LockInfo := _releaseTime_ONIT.LockInfo;
[L1905]               __tmp___amount_ONIT.LockInfo := _amount_ONIT.LockInfo;
[L1906]               __tmp__implementation_ONIT := implementation_ONIT;
[L1907]               __tmp__timelockList_ONIT := timelockList_ONIT;
[L1908]               __tmp__frozenAccount_ONIT := frozenAccount_ONIT;
[L1909]   CALL        call __ret_0_ := allowance~address~address_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, owner_s656, spender_s656);
[L6625]               __ret_0_ := __tmp___allowed_ERC20[this][owner_s656][spender_s656];
[L1909]   RET         call __ret_0_ := allowance~address~address_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, owner_s656, spender_s656);
[L1910]               assume revert || gas < 0;
[L12239]  RET         call __ret_0_allowance := allowance~address~address_ERC20(this, msgsender_MSG, msgvalue_MSG, owner_s656, spender_s656);
[L12358]  RET         call CorralChoice_ONIT(this);

[2020-11-25 02:43:43,854 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 02:43:43,854 INFO  L82        PathProgramCache]: Analyzing trace with hash 1303112196, now seen corresponding path program 1 times
[2020-11-25 02:43:43,855 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 02:43:43,868 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 02:43:44,031 INFO  L134       CoverageAnalysis]: Checked inductivity of 948 backedges. 0 proven. 36 refuted. 0 times theorem prover too weak. 912 trivial. 0 not checked.
[2020-11-25 02:43:44,031 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 02:43:44,031 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [7] total 7
[2020-11-25 02:43:44,032 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 02:43:44,032 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 7 interpolants.
[2020-11-25 02:43:44,032 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=11, Invalid=31, Unknown=0, NotChecked=0, Total=42
[2020-11-25 02:43:44,032 INFO  L87              Difference]: Start difference. First operand 8006 states and 8929 transitions. cyclomatic complexity: 933 Second operand 7 states.
[2020-11-25 02:43:44,158 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 02:43:44,158 INFO  L93              Difference]: Finished difference Result 8029 states and 8956 transitions.
[2020-11-25 02:43:44,158 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 7 states. 
[2020-11-25 02:43:44,158 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 8029 states and 8956 transitions.
[2020-11-25 02:43:44,177 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 02:43:44,201 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 8029 states to 8012 states and 8936 transitions.
[2020-11-25 02:43:44,201 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1698
[2020-11-25 02:43:44,202 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1698
[2020-11-25 02:43:44,202 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 8012 states and 8936 transitions.
[2020-11-25 02:43:44,207 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 02:43:44,207 INFO  L728         BuchiCegarLoop]: Abstraction has 8012 states and 8936 transitions.
[2020-11-25 02:43:44,214 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 8012 states and 8936 transitions.
[2020-11-25 02:43:44,273 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 8012 to 8012.
[2020-11-25 02:43:44,274 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 8012 states.
[2020-11-25 02:43:44,284 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 8012 states to 8012 states and 8936 transitions.
[2020-11-25 02:43:44,284 INFO  L751         BuchiCegarLoop]: Abstraction has 8012 states and 8936 transitions.
[2020-11-25 02:43:44,284 INFO  L631         BuchiCegarLoop]: Abstraction has 8012 states and 8936 transitions.
[2020-11-25 02:43:44,285 INFO  L445         BuchiCegarLoop]: ======== Iteration 8============
[2020-11-25 02:43:44,285 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 8012 states and 8936 transitions.
[2020-11-25 02:43:44,297 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 02:43:44,297 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 02:43:44,297 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 02:43:44,300 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 02:43:44,300 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  success_allowance_ERC200 := false;
[L2]                  call_allowance_ERC200 := false;
[L2]      CALL        call main();
[L12348]              assume null == 0;
[L12349]  CALL        call this := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L12349]  RET         call this := FreshRefGenerator__success();
[L12350]              assume now >= 0;
[L12351]              assume DType[this] == ONIT;
[L12352]              assume msgvalue_MSG == 0;
[L12353]              gas := gas - 53000;
[L12354]  CALL        call ONIT_ONIT(this, msgsender_MSG, msgvalue_MSG);
[L3014]               havoc __exception;
[L3015]               revert := false;
[L3016]   COND FALSE  !(__exception)
[L3052]   CALL        call ONIT_ONIT__success(this, msgsender_MSG, msgvalue_MSG);
[L7433]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L7433]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7434]   COND FALSE  !(revert)
[L7437]   CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -1901915118, -1174776732, 18);
[L7287]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L7287]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7288]   COND FALSE  !(revert)
[L7291]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7262]               assume msgsender_MSG != null;
[L7263]               Balance[this] := 0;
[L7264]               _name_ERC20Detailed[this] := -1540954157;
[L7265]               _symbol_ERC20Detailed[this] := -1540954157;
[L7266]               _decimals_ERC20Detailed[this] := 0;
[L7268]               _name_ERC20Detailed[this] := name_s1105;
[L7269]               _symbol_ERC20Detailed[this] := symbol_s1105;
[L7270]               _decimals_ERC20Detailed[this] := decimals_s1105;
[L7291]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7292]   COND FALSE  !(revert)
[L7437]   RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -1901915118, -1174776732, 18);
[L7438]   COND FALSE  !(revert)
[L7441]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6589]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L6589]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6590]   COND FALSE  !(revert)
[L6593]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]               assume msgsender_MSG != null;
[L6566]               Balance[this] := 0;
[L6567]               _balances_ERC20[this] := zeroRefintArr();
[L6568]               sum__balances0[this] := 0;
[L6569]               _allowed_ERC20[this] := zeroRefRefintArr();
[L6570]               sum__allowed1[this] := 0;
[L6571]               _totalSupply_ERC20[this] := 0;
[L6593]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6594]   COND FALSE  !(revert)
[L7441]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7442]   COND FALSE  !(revert)
[L7445]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L7445]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7446]   COND FALSE  !(revert)
[L7449]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6155]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6155]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   COND FALSE  !(revert)
[L6159]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6105]               assume msgsender_MSG != null;
[L6106]               Balance[this] := 0;
[L6108]   CALL        call __var_10 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L6108]   RET         call __var_10 := FreshRefGenerator__success();
[L6109]   COND FALSE  !(revert)
[L6112]               _pausers_PauserRole[this] := __var_10;
[L6114]   COND TRUE   DType[this] == ONIT
[L6115]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6375]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5836]               __var_1 := null;
[L5837]   COND FALSE  !(!(account_s164 != null))
[L5841]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5841]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5842]   COND FALSE  !(revert)
[L5845]   COND FALSE  !(!!__var_2)
[L5849]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6375]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6376]   COND FALSE  !(revert)
[L6379]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6115]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6116]   COND FALSE  !(revert)
[L6159]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6160]   COND FALSE  !(revert)
[L7449]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7450]   COND FALSE  !(revert)
[L7453]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6437]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6437]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6438]   COND FALSE  !(revert)
[L6441]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6155]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6155]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   COND FALSE  !(revert)
[L6159]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6105]               assume msgsender_MSG != null;
[L6106]               Balance[this] := 0;
[L6108]   CALL        call __var_10 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L6108]   RET         call __var_10 := FreshRefGenerator__success();
[L6109]   COND FALSE  !(revert)
[L6112]               _pausers_PauserRole[this] := __var_10;
[L6114]   COND TRUE   DType[this] == ONIT
[L6115]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6375]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5836]               __var_1 := null;
[L5837]   COND FALSE  !(!(account_s164 != null))
[L5841]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5841]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5842]   COND FALSE  !(revert)
[L5845]   COND FALSE  !(!!__var_2)
[L5849]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6375]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6376]   COND FALSE  !(revert)
[L6379]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6115]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6116]   COND FALSE  !(revert)
[L6159]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6160]   COND FALSE  !(revert)
[L6441]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6442]   COND FALSE  !(revert)
[L6445]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6412]               assume msgsender_MSG != null;
[L6413]               Balance[this] := 0;
[L6414]               _paused_Pausable[this] := false;
[L6416]               _paused_Pausable[this] := false;
[L6445]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6446]   COND FALSE  !(revert)
[L7453]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7454]   COND FALSE  !(revert)
[L7457]   CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7119]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L7119]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7120]   COND FALSE  !(revert)
[L7123]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6589]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6543]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6528]               assume msgsender_MSG != null;
[L6529]               Balance[this] := 0;
[L6543]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   COND FALSE  !(revert)
[L6589]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6590]   COND FALSE  !(revert)
[L6593]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6565]               assume msgsender_MSG != null;
[L6566]               Balance[this] := 0;
[L6567]               _balances_ERC20[this] := zeroRefintArr();
[L6568]               sum__balances0[this] := 0;
[L6569]               _allowed_ERC20[this] := zeroRefRefintArr();
[L6570]               sum__allowed1[this] := 0;
[L6571]               _totalSupply_ERC20[this] := 0;
[L6593]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6594]   COND FALSE  !(revert)
[L7123]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7124]   COND FALSE  !(revert)
[L7127]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L7127]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7128]   COND FALSE  !(revert)
[L7131]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6155]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6155]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   COND FALSE  !(revert)
[L6159]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6105]               assume msgsender_MSG != null;
[L6106]               Balance[this] := 0;
[L6108]   CALL        call __var_10 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L6108]   RET         call __var_10 := FreshRefGenerator__success();
[L6109]   COND FALSE  !(revert)
[L6112]               _pausers_PauserRole[this] := __var_10;
[L6114]   COND TRUE   DType[this] == ONIT
[L6115]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6375]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5836]               __var_1 := null;
[L5837]   COND FALSE  !(!(account_s164 != null))
[L5841]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5841]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5842]   COND FALSE  !(revert)
[L5845]   COND FALSE  !(!!__var_2)
[L5849]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6375]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6376]   COND FALSE  !(revert)
[L6379]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6115]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6116]   COND FALSE  !(revert)
[L6159]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6160]   COND FALSE  !(revert)
[L7131]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7132]   COND FALSE  !(revert)
[L7135]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6437]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6437]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6438]   COND FALSE  !(revert)
[L6441]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6155]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5956]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5934]               assume msgsender_MSG != null;
[L5935]               Balance[this] := 0;
[L5936]               owner_Ownable[this] := null;
[L5937]               newOwner_Ownable[this] := null;
[L5939]               owner_Ownable[this] := msgsender_MSG;
[L5940]               __var_6 := null;
[L5941]               newOwner_Ownable[this] := __var_6;
[L5956]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   COND FALSE  !(revert)
[L6155]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   COND FALSE  !(revert)
[L6159]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6105]               assume msgsender_MSG != null;
[L6106]               Balance[this] := 0;
[L6108]   CALL        call __var_10 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L6108]   RET         call __var_10 := FreshRefGenerator__success();
[L6109]   COND FALSE  !(revert)
[L6112]               _pausers_PauserRole[this] := __var_10;
[L6114]   COND TRUE   DType[this] == ONIT
[L6115]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6375]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5836]               __var_1 := null;
[L5837]   COND FALSE  !(!(account_s164 != null))
[L5841]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5907]               __var_5 := null;
[L5908]   COND FALSE  !(!(account_s218 != null))
[L5912]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5841]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5842]   COND FALSE  !(revert)
[L5845]   COND FALSE  !(!!__var_2)
[L5849]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6375]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6376]   COND FALSE  !(revert)
[L6379]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6115]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6116]   COND FALSE  !(revert)
[L6159]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6160]   COND FALSE  !(revert)
[L6441]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6442]   COND FALSE  !(revert)
[L6445]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6412]               assume msgsender_MSG != null;
[L6413]               Balance[this] := 0;
[L6414]               _paused_Pausable[this] := false;
[L6416]               _paused_Pausable[this] := false;
[L6445]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6446]   COND FALSE  !(revert)
[L7135]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7136]   COND FALSE  !(revert)
[L7139]   CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7084]               assume msgsender_MSG != null;
[L7085]               Balance[this] := 0;
[L7139]   RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7140]   COND FALSE  !(revert)
[L7457]   RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7458]   COND FALSE  !(revert)
[L7461]   CALL        call ONIT_ONIT_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7367]               assume msgsender_MSG != null;
[L7368]               Balance[this] := 0;
[L7369]               implementation_ONIT[this] := null;
[L7371]   CALL        call __var_36 := FreshRefGenerator__success();
[L5596]               havoc newRef;
[L5597]               assume Alloc[newRef] == false;
[L5598]               Alloc[newRef] := true;
[L5599]               assume newRef != null;
[L7371]   RET         call __var_36 := FreshRefGenerator__success();
[L7372]   COND FALSE  !(revert)
[L7375]               timelockList_ONIT[this] := __var_36;
[L7377]               alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]] := zeroRefboolArr();
[L7378]               frozenAccount_ONIT[this] := zeroRefboolArr();
[L7380]               __var_35 := 789885600000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7381]   COND TRUE   DType[this] == ONIT
[L7382]   CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 789885600000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L6943]               __var_23 := null;
[L6944]   COND FALSE  !(!(account_s946 != null))
[L6948]   CALL        call __var_24 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], value_s946);
[L5751]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5752]   COND FALSE  !(!(c_s106 >= a_s106))
[L5756]               __ret_0_ := c_s106;
[L6948]   RET         call __var_24 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], value_s946);
[L6949]   COND FALSE  !(revert)
[L6952]               _totalSupply_ERC20[this] := __var_24;
[L6953]   CALL        call __var_25 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s946], value_s946);
[L5751]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5752]   COND FALSE  !(!(c_s106 >= a_s106))
[L5756]               __ret_0_ := c_s106;
[L6953]   RET         call __var_25 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s946], value_s946);
[L6954]   COND FALSE  !(revert)
[L6957]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s946];
[L6958]               _balances_ERC20[this][account_s946] := __var_25;
[L6959]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s946];
[L6960]               assert { :EventEmitted "Transfer_ERC20" } true;
[L7382]   RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 789885600000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L7383]   COND FALSE  !(revert)
[L7461]   RET         call ONIT_ONIT_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7462]   COND FALSE  !(revert)
[L3052]   RET         call ONIT_ONIT__success(this, msgsender_MSG, msgvalue_MSG);
[L3053]               assume !revert && gas >= 0;
[L12354]  RET         call ONIT_ONIT(this, msgsender_MSG, msgvalue_MSG);
[L12355]              assume !revert && gas >= 0;
[L12358]  CALL        call CorralChoice_ONIT(this);
[L12046]              havoc msgsender_MSG;
[L12047]              havoc msgvalue_MSG;
[L12048]              havoc choice;
[L12049]              havoc __ret_0_owner;
[L12050]              havoc __ret_0_newOwner;
[L12051]              havoc account_s293;
[L12052]              havoc __ret_0_isOwner;
[L12053]              havoc _newOwner_s313;
[L12054]              havoc __ret_0_acceptOwnership;
[L12055]              havoc account_s390;
[L12056]              havoc __ret_0_isPauser;
[L12057]              havoc account_s402;
[L12058]              havoc account_s414;
[L12059]              havoc __ret_0_paused;
[L12060]              havoc to_s1288;
[L12061]              havoc value_s1288;
[L12062]              havoc __ret_0_transfer;
[L12063]              havoc spender_s711;
[L12064]              havoc value_s711;
[L12065]              havoc __ret_0_approve;
[L12066]              havoc from_s1322;
[L12067]              havoc to_s1322;
[L12068]              havoc value_s1322;
[L12069]              havoc __ret_0_transferFrom;
[L12070]              havoc __ret_0_totalSupply;
[L12071]              havoc owner_s1254;
[L12072]              havoc __ret_0_balanceOf;
[L12073]              havoc owner_s656;
[L12074]              havoc spender_s656;
[L12075]              havoc __ret_0_allowance;
[L12076]              havoc spender_s809;
[L12077]              havoc addedValue_s809;
[L12078]              havoc __ret_0_increaseAllowance;
[L12079]              havoc spender_s858;
[L12080]              havoc subtractedValue_s858;
[L12081]              havoc __ret_0_decreaseAllowance;
[L12082]              havoc name_s1105;
[L12083]              havoc symbol_s1105;
[L12084]              havoc decimals_s1105;
[L12085]              havoc __ret_0_name;
[L12086]              havoc __ret_0_symbol;
[L12087]              havoc __ret_0_decimals;
[L12088]              havoc __ret_0_implementation;
[L12089]              havoc arg1693_s0;
[L12090]              havoc arg1694_s0;
[L12091]              havoc __ret_0_timelockList;
[L12092]              havoc arg1695_s0;
[L12093]              havoc __ret_0_frozenAccount;
[L12094]              havoc holder_s1351;
[L12095]              havoc __ret_0_freezeAccount;
[L12096]              havoc holder_s1379;
[L12097]              havoc __ret_0_unfreezeAccount;
[L12098]              havoc holder_s1410;
[L12099]              havoc value_s1410;
[L12100]              havoc releaseTime_s1410;
[L12101]              havoc __ret_0_lock;
[L12102]              havoc holder_s1439;
[L12103]              havoc value_s1439;
[L12104]              havoc releaseTime_s1439;
[L12105]              havoc __ret_0_transferWithLock;
[L12106]              havoc holder_s1468;
[L12107]              havoc idx_s1468;
[L12108]              havoc __ret_0_unlock;
[L12109]              havoc _newImplementation_s1486;
[L12110]              havoc value_s1663;
[L12111]              havoc __ret_0_mint;
[L12112]              havoc tmpNow;
[L12113]              havoc gas;
[L12114]              assume gas > 4000000 && gas <= 8000000;
[L12115]              tmpNow := now;
[L12116]              havoc now;
[L12117]              assume now > tmpNow;
[L12118]              assume msgsender_MSG != null;
[L12119]              assume DType[msgsender_MSG] != SafeMath;
[L12120]              assume DType[msgsender_MSG] != Roles;
[L12121]              assume DType[msgsender_MSG] != Ownable;
[L12122]              assume DType[msgsender_MSG] != PauserRole;
[L12123]              assume DType[msgsender_MSG] != Pausable;
[L12124]              assume DType[msgsender_MSG] != IERC20;
[L12125]              assume DType[msgsender_MSG] != ERC20;
[L12126]              assume DType[msgsender_MSG] != ERC20Pausable;
[L12127]              assume DType[msgsender_MSG] != ERC20Detailed;
[L12128]              assume DType[msgsender_MSG] != ONIT;
[L12129]              Alloc[msgsender_MSG] := true;
[L12130]  COND FALSE  !(choice == 33)
[L12136]  COND FALSE  !(choice == 32)
[L12142]  COND FALSE  !(choice == 31)
[L12148]  COND FALSE  !(choice == 30)
[L12154]  COND FALSE  !(choice == 29)
[L12160]  COND FALSE  !(choice == 28)
[L12166]  COND FALSE  !(choice == 27)
[L12172]  COND FALSE  !(choice == 26)
[L12178]  COND FALSE  !(choice == 25)
[L12184]  COND FALSE  !(choice == 24)
[L12190]  COND FALSE  !(choice == 23)
[L12196]  COND FALSE  !(choice == 22)
[L12202]  COND FALSE  !(choice == 21)
[L12209]  COND FALSE  !(choice == 20)
[L12216]  COND FALSE  !(choice == 19)
[L12223]  COND FALSE  !(choice == 18)
[L12229]  COND FALSE  !(choice == 17)
[L12235]  COND TRUE   choice == 16
[L12236]              gas := gas - 21000;
[L12237]  COND TRUE   gas >= 0
[L12238]              assume msgvalue_MSG == 0;
[L12239]  CALL        call __ret_0_allowance := allowance~address~address_ERC20(this, msgsender_MSG, msgvalue_MSG, owner_s656, spender_s656);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume _allowed_ERC20[this][owner_s656][spender_s656] >= 0 && _allowed_ERC20[this][owner_s656][spender_s656] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_allowance_ERC200 := true;
[L2]                  call_allowance_ERC200 := false;
[L2]                  revert := revert_hold;
[L1874]               havoc __exception;
[L1875]               revert := false;
[L1876]   COND TRUE   __exception
[L1877]               __tmp__Balance := Balance;
[L1878]               __tmp__DType := DType;
[L1879]               __tmp__Alloc := Alloc;
[L1880]               __tmp__balance_ADDR := balance_ADDR;
[L1881]               __tmp__M_Ref_bool := M_Ref_bool;
[L1882]               __tmp__sum := sum;
[L1883]               __tmp__M_Ref_int := M_Ref_int;
[L1884]               __tmp__sum__balances0 := sum__balances0;
[L1885]               __tmp__alloc__allowed_ERC20_lvl0 := alloc__allowed_ERC20_lvl0;
[L1886]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L1887]               __tmp__sum__allowed1 := sum__allowed1;
[L1888]               __tmp__M_int_Ref := M_int_Ref;
[L1889]               __tmp__alloc_timelockList_ONIT_lvl0 := alloc_timelockList_ONIT_lvl0;
[L1890]               __tmp__sum_frozenAccount2 := sum_frozenAccount2;
[L1891]               __tmp__Length := Length;
[L1892]               __tmp__now := now;
[L1893]               __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L1894]               __tmp__owner_Ownable := owner_Ownable;
[L1895]               __tmp__newOwner_Ownable := newOwner_Ownable;
[L1896]               __tmp___pausers_PauserRole := _pausers_PauserRole;
[L1897]               __tmp___paused_Pausable := _paused_Pausable;
[L1898]               __tmp___balances_ERC20 := _balances_ERC20;
[L1899]               __tmp___allowed_ERC20 := _allowed_ERC20;
[L1900]               __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L1901]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L1902]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L1903]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L1904]               __tmp___releaseTime_ONIT.LockInfo := _releaseTime_ONIT.LockInfo;
[L1905]               __tmp___amount_ONIT.LockInfo := _amount_ONIT.LockInfo;
[L1906]               __tmp__implementation_ONIT := implementation_ONIT;
[L1907]               __tmp__timelockList_ONIT := timelockList_ONIT;
[L1908]               __tmp__frozenAccount_ONIT := frozenAccount_ONIT;
[L1909]   CALL        call __ret_0_ := allowance~address~address_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, owner_s656, spender_s656);
[L6625]               __ret_0_ := __tmp___allowed_ERC20[this][owner_s656][spender_s656];
[L1909]   RET         call __ret_0_ := allowance~address~address_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, owner_s656, spender_s656);
[L1910]               assume revert || gas < 0;
[L12239]  RET         call __ret_0_allowance := allowance~address~address_ERC20(this, msgsender_MSG, msgvalue_MSG, owner_s656, spender_s656);
[L12358]  RET         call CorralChoice_ONIT(this);

Loop:
[L12358]  CALL        call CorralChoice_ONIT(this);
[L12046]              havoc msgsender_MSG;
[L12047]              havoc msgvalue_MSG;
[L12048]              havoc choice;
[L12049]              havoc __ret_0_owner;
[L12050]              havoc __ret_0_newOwner;
[L12051]              havoc account_s293;
[L12052]              havoc __ret_0_isOwner;
[L12053]              havoc _newOwner_s313;
[L12054]              havoc __ret_0_acceptOwnership;
[L12055]              havoc account_s390;
[L12056]              havoc __ret_0_isPauser;
[L12057]              havoc account_s402;
[L12058]              havoc account_s414;
[L12059]              havoc __ret_0_paused;
[L12060]              havoc to_s1288;
[L12061]              havoc value_s1288;
[L12062]              havoc __ret_0_transfer;
[L12063]              havoc spender_s711;
[L12064]              havoc value_s711;
[L12065]              havoc __ret_0_approve;
[L12066]              havoc from_s1322;
[L12067]              havoc to_s1322;
[L12068]              havoc value_s1322;
[L12069]              havoc __ret_0_transferFrom;
[L12070]              havoc __ret_0_totalSupply;
[L12071]              havoc owner_s1254;
[L12072]              havoc __ret_0_balanceOf;
[L12073]              havoc owner_s656;
[L12074]              havoc spender_s656;
[L12075]              havoc __ret_0_allowance;
[L12076]              havoc spender_s809;
[L12077]              havoc addedValue_s809;
[L12078]              havoc __ret_0_increaseAllowance;
[L12079]              havoc spender_s858;
[L12080]              havoc subtractedValue_s858;
[L12081]              havoc __ret_0_decreaseAllowance;
[L12082]              havoc name_s1105;
[L12083]              havoc symbol_s1105;
[L12084]              havoc decimals_s1105;
[L12085]              havoc __ret_0_name;
[L12086]              havoc __ret_0_symbol;
[L12087]              havoc __ret_0_decimals;
[L12088]              havoc __ret_0_implementation;
[L12089]              havoc arg1693_s0;
[L12090]              havoc arg1694_s0;
[L12091]              havoc __ret_0_timelockList;
[L12092]              havoc arg1695_s0;
[L12093]              havoc __ret_0_frozenAccount;
[L12094]              havoc holder_s1351;
[L12095]              havoc __ret_0_freezeAccount;
[L12096]              havoc holder_s1379;
[L12097]              havoc __ret_0_unfreezeAccount;
[L12098]              havoc holder_s1410;
[L12099]              havoc value_s1410;
[L12100]              havoc releaseTime_s1410;
[L12101]              havoc __ret_0_lock;
[L12102]              havoc holder_s1439;
[L12103]              havoc value_s1439;
[L12104]              havoc releaseTime_s1439;
[L12105]              havoc __ret_0_transferWithLock;
[L12106]              havoc holder_s1468;
[L12107]              havoc idx_s1468;
[L12108]              havoc __ret_0_unlock;
[L12109]              havoc _newImplementation_s1486;
[L12110]              havoc value_s1663;
[L12111]              havoc __ret_0_mint;
[L12112]              havoc tmpNow;
[L12113]              havoc gas;
[L12114]              assume gas > 4000000 && gas <= 8000000;
[L12115]              tmpNow := now;
[L12116]              havoc now;
[L12117]              assume now > tmpNow;
[L12118]              assume msgsender_MSG != null;
[L12119]              assume DType[msgsender_MSG] != SafeMath;
[L12120]              assume DType[msgsender_MSG] != Roles;
[L12121]              assume DType[msgsender_MSG] != Ownable;
[L12122]              assume DType[msgsender_MSG] != PauserRole;
[L12123]              assume DType[msgsender_MSG] != Pausable;
[L12124]              assume DType[msgsender_MSG] != IERC20;
[L12125]              assume DType[msgsender_MSG] != ERC20;
[L12126]              assume DType[msgsender_MSG] != ERC20Pausable;
[L12127]              assume DType[msgsender_MSG] != ERC20Detailed;
[L12128]              assume DType[msgsender_MSG] != ONIT;
[L12129]              Alloc[msgsender_MSG] := true;
[L12130]  COND FALSE  !(choice == 33)
[L12136]  COND FALSE  !(choice == 32)
[L12142]  COND FALSE  !(choice == 31)
[L12148]  COND FALSE  !(choice == 30)
[L12154]  COND FALSE  !(choice == 29)
[L12160]  COND FALSE  !(choice == 28)
[L12166]  COND FALSE  !(choice == 27)
[L12172]  COND FALSE  !(choice == 26)
[L12178]  COND FALSE  !(choice == 25)
[L12184]  COND FALSE  !(choice == 24)
[L12190]  COND FALSE  !(choice == 23)
[L12196]  COND FALSE  !(choice == 22)
[L12202]  COND FALSE  !(choice == 21)
[L12209]  COND FALSE  !(choice == 20)
[L12216]  COND FALSE  !(choice == 19)
[L12223]  COND FALSE  !(choice == 18)
[L12229]  COND FALSE  !(choice == 17)
[L12235]  COND TRUE   choice == 16
[L12236]              gas := gas - 21000;
[L12237]  COND TRUE   gas >= 0
[L12238]              assume msgvalue_MSG == 0;
[L12239]  CALL        call __ret_0_allowance := allowance~address~address_ERC20(this, msgsender_MSG, msgvalue_MSG, owner_s656, spender_s656);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume _allowed_ERC20[this][owner_s656][spender_s656] >= 0 && _allowed_ERC20[this][owner_s656][spender_s656] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_allowance_ERC200 := true;
[L2]                  call_allowance_ERC200 := false;
[L2]                  revert := revert_hold;
[L1874]               havoc __exception;
[L1875]               revert := false;
[L1876]   COND TRUE   __exception
[L1877]               __tmp__Balance := Balance;
[L1878]               __tmp__DType := DType;
[L1879]               __tmp__Alloc := Alloc;
[L1880]               __tmp__balance_ADDR := balance_ADDR;
[L1881]               __tmp__M_Ref_bool := M_Ref_bool;
[L1882]               __tmp__sum := sum;
[L1883]               __tmp__M_Ref_int := M_Ref_int;
[L1884]               __tmp__sum__balances0 := sum__balances0;
[L1885]               __tmp__alloc__allowed_ERC20_lvl0 := alloc__allowed_ERC20_lvl0;
[L1886]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L1887]               __tmp__sum__allowed1 := sum__allowed1;
[L1888]               __tmp__M_int_Ref := M_int_Ref;
[L1889]               __tmp__alloc_timelockList_ONIT_lvl0 := alloc_timelockList_ONIT_lvl0;
[L1890]               __tmp__sum_frozenAccount2 := sum_frozenAccount2;
[L1891]               __tmp__Length := Length;
[L1892]               __tmp__now := now;
[L1893]               __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L1894]               __tmp__owner_Ownable := owner_Ownable;
[L1895]               __tmp__newOwner_Ownable := newOwner_Ownable;
[L1896]               __tmp___pausers_PauserRole := _pausers_PauserRole;
[L1897]               __tmp___paused_Pausable := _paused_Pausable;
[L1898]               __tmp___balances_ERC20 := _balances_ERC20;
[L1899]               __tmp___allowed_ERC20 := _allowed_ERC20;
[L1900]               __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L1901]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L1902]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L1903]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L1904]               __tmp___releaseTime_ONIT.LockInfo := _releaseTime_ONIT.LockInfo;
[L1905]               __tmp___amount_ONIT.LockInfo := _amount_ONIT.LockInfo;
[L1906]               __tmp__implementation_ONIT := implementation_ONIT;
[L1907]               __tmp__timelockList_ONIT := timelockList_ONIT;
[L1908]               __tmp__frozenAccount_ONIT := frozenAccount_ONIT;
[L1909]   CALL        call __ret_0_ := allowance~address~address_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, owner_s656, spender_s656);
[L6625]               __ret_0_ := __tmp___allowed_ERC20[this][owner_s656][spender_s656];
[L1909]   RET         call __ret_0_ := allowance~address~address_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, owner_s656, spender_s656);
[L1910]               assume revert || gas < 0;
[L12239]  RET         call __ret_0_allowance := allowance~address~address_ERC20(this, msgsender_MSG, msgvalue_MSG, owner_s656, spender_s656);
[L12358]  RET         call CorralChoice_ONIT(this);

[2020-11-25 02:43:44,306 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 02:43:44,306 INFO  L82        PathProgramCache]: Analyzing trace with hash -1201372056, now seen corresponding path program 1 times
[2020-11-25 02:43:44,307 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 02:43:44,328 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 02:43:44,500 INFO  L134       CoverageAnalysis]: Checked inductivity of 930 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 930 trivial. 0 not checked.
[2020-11-25 02:43:44,500 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 02:43:44,500 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [5] imperfect sequences [] total 5
[2020-11-25 02:43:44,501 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 02:43:44,501 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 5 interpolants.
[2020-11-25 02:43:44,501 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=7, Invalid=13, Unknown=0, NotChecked=0, Total=20
[2020-11-25 02:43:44,501 INFO  L87              Difference]: Start difference. First operand 8012 states and 8936 transitions. cyclomatic complexity: 934 Second operand 5 states.
[2020-11-25 02:43:45,065 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 02:43:45,065 INFO  L93              Difference]: Finished difference Result 4912 states and 5450 transitions.
[2020-11-25 02:43:45,065 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 7 states. 
[2020-11-25 02:43:45,066 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 4912 states and 5450 transitions.
[2020-11-25 02:43:45,074 INFO  L131   ngComponentsAnalysis]: Automaton has 0 accepting balls. 0
[2020-11-25 02:43:45,074 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 4912 states to 0 states and 0 transitions.
[2020-11-25 02:43:45,074 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 0
[2020-11-25 02:43:45,074 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 0
[2020-11-25 02:43:45,074 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 0 states and 0 transitions.
[2020-11-25 02:43:45,075 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 02:43:45,075 INFO  L728         BuchiCegarLoop]: Abstraction has 0 states and 0 transitions.
[2020-11-25 02:43:45,075 INFO  L751         BuchiCegarLoop]: Abstraction has 0 states and 0 transitions.
[2020-11-25 02:43:45,075 INFO  L631         BuchiCegarLoop]: Abstraction has 0 states and 0 transitions.
[2020-11-25 02:43:45,075 INFO  L445         BuchiCegarLoop]: ======== Iteration 9============
[2020-11-25 02:43:45,075 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 0 states and 0 transitions.
[2020-11-25 02:43:45,075 INFO  L131   ngComponentsAnalysis]: Automaton has 0 accepting balls. 0
[2020-11-25 02:43:45,075 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is true
[2020-11-25 02:43:45,078 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer CFG 25.11 02:43:45 BasicIcfg
[2020-11-25 02:43:45,078 INFO  L132        PluginConnector]: ------------------------ END BuchiAutomizer----------------------------
[2020-11-25 02:43:45,078 INFO  L168              Benchmark]: Toolchain (without parser) took 10536.62 ms. Allocated memory was 1.0 GB in the beginning and 2.4 GB in the end (delta: 1.4 GB). Free memory was 919.1 MB in the beginning and 1.3 GB in the end (delta: -360.2 MB). Peak memory consumption was 1.0 GB. Max. memory is 15.3 GB.
[2020-11-25 02:43:45,079 INFO  L168              Benchmark]: Boogie PL CUP Parser took 0.15 ms. Allocated memory is still 1.0 GB. Free memory is still 951.3 MB. There was no memory consumed. Max. memory is 15.3 GB.
[2020-11-25 02:43:45,079 INFO  L168              Benchmark]: Boogie Preprocessor took 177.31 ms. Allocated memory is still 1.0 GB. Free memory was 919.1 MB in the beginning and 892.0 MB in the end (delta: 27.1 MB). Peak memory consumption was 27.1 MB. Max. memory is 15.3 GB.
[2020-11-25 02:43:45,080 INFO  L168              Benchmark]: UtopiaSpecLang took 93.79 ms. Allocated memory is still 1.0 GB. Free memory was 892.0 MB in the beginning and 881.2 MB in the end (delta: 10.7 MB). Peak memory consumption was 10.7 MB. Max. memory is 15.3 GB.
[2020-11-25 02:43:45,080 INFO  L168              Benchmark]: Boogie Printer took 36.20 ms. Allocated memory is still 1.0 GB. Free memory was 881.2 MB in the beginning and 870.5 MB in the end (delta: 10.8 MB). Peak memory consumption was 10.8 MB. Max. memory is 15.3 GB.
[2020-11-25 02:43:45,080 INFO  L168              Benchmark]: RCFGBuilder took 1445.34 ms. Allocated memory was 1.0 GB in the beginning and 1.1 GB in the end (delta: 64.5 MB). Free memory was 870.5 MB in the beginning and 745.5 MB in the end (delta: 125.0 MB). Peak memory consumption was 189.5 MB. Max. memory is 15.3 GB.
[2020-11-25 02:43:45,080 INFO  L168              Benchmark]: UtopiaLTL2Aut took 33.27 ms. Allocated memory is still 1.1 GB. Free memory was 745.5 MB in the beginning and 742.1 MB in the end (delta: 3.4 MB). Peak memory consumption was 3.4 MB. Max. memory is 15.3 GB.
[2020-11-25 02:43:45,081 INFO  L168              Benchmark]: BÃ¼chi Program Product took 3614.20 ms. Allocated memory was 1.1 GB in the beginning and 1.5 GB in the end (delta: 441.5 MB). Free memory was 742.1 MB in the beginning and 786.5 MB in the end (delta: -44.5 MB). Peak memory consumption was 397.0 MB. Max. memory is 15.3 GB.
[2020-11-25 02:43:45,081 INFO  L168              Benchmark]: BlockEncodingV2 took 359.49 ms. Allocated memory was 1.5 GB in the beginning and 1.5 GB in the end (delta: 2.6 MB). Free memory was 786.5 MB in the beginning and 1.3 GB in the end (delta: -510.5 MB). Peak memory consumption was 209.8 MB. Max. memory is 15.3 GB.
[2020-11-25 02:43:45,082 INFO  L168              Benchmark]: BuchiAutomizer took 4773.94 ms. Allocated memory was 1.5 GB in the beginning and 2.4 GB in the end (delta: 865.6 MB). Free memory was 1.3 GB in the beginning and 1.3 GB in the end (delta: 17.7 MB). Peak memory consumption was 883.3 MB. Max. memory is 15.3 GB.
[2020-11-25 02:43:45,084 INFO  L337   ainManager$Toolchain]: #######################  End [Toolchain 1] #######################
 --- Results ---
 * Results from de.uni_freiburg.informatik.ultimate.plugins.blockencoding:
  - StatisticsResult: Initial Icfg
    11592 locations, 20999 edges
  - StatisticsResult: Encoded RCFG
    11446 locations, 20596 edges
 * Results from de.uni_freiburg.informatik.ultimate.core:
  - StatisticsResult: Toolchain Benchmarks
    Benchmark results are:
 * Boogie PL CUP Parser took 0.15 ms. Allocated memory is still 1.0 GB. Free memory is still 951.3 MB. There was no memory consumed. Max. memory is 15.3 GB.
 * Boogie Preprocessor took 177.31 ms. Allocated memory is still 1.0 GB. Free memory was 919.1 MB in the beginning and 892.0 MB in the end (delta: 27.1 MB). Peak memory consumption was 27.1 MB. Max. memory is 15.3 GB.
 * UtopiaSpecLang took 93.79 ms. Allocated memory is still 1.0 GB. Free memory was 892.0 MB in the beginning and 881.2 MB in the end (delta: 10.7 MB). Peak memory consumption was 10.7 MB. Max. memory is 15.3 GB.
 * Boogie Printer took 36.20 ms. Allocated memory is still 1.0 GB. Free memory was 881.2 MB in the beginning and 870.5 MB in the end (delta: 10.8 MB). Peak memory consumption was 10.8 MB. Max. memory is 15.3 GB.
 * RCFGBuilder took 1445.34 ms. Allocated memory was 1.0 GB in the beginning and 1.1 GB in the end (delta: 64.5 MB). Free memory was 870.5 MB in the beginning and 745.5 MB in the end (delta: 125.0 MB). Peak memory consumption was 189.5 MB. Max. memory is 15.3 GB.
 * UtopiaLTL2Aut took 33.27 ms. Allocated memory is still 1.1 GB. Free memory was 745.5 MB in the beginning and 742.1 MB in the end (delta: 3.4 MB). Peak memory consumption was 3.4 MB. Max. memory is 15.3 GB.
 * BÃ¼chi Program Product took 3614.20 ms. Allocated memory was 1.1 GB in the beginning and 1.5 GB in the end (delta: 441.5 MB). Free memory was 742.1 MB in the beginning and 786.5 MB in the end (delta: -44.5 MB). Peak memory consumption was 397.0 MB. Max. memory is 15.3 GB.
 * BlockEncodingV2 took 359.49 ms. Allocated memory was 1.5 GB in the beginning and 1.5 GB in the end (delta: 2.6 MB). Free memory was 786.5 MB in the beginning and 1.3 GB in the end (delta: -510.5 MB). Peak memory consumption was 209.8 MB. Max. memory is 15.3 GB.
 * BuchiAutomizer took 4773.94 ms. Allocated memory was 1.5 GB in the beginning and 2.4 GB in the end (delta: 865.6 MB). Free memory was 1.3 GB in the beginning and 1.3 GB in the end (delta: 17.7 MB). Peak memory consumption was 883.3 MB. Max. memory is 15.3 GB.
 * Results from de.uni_freiburg.informatik.ultimate.buchiprogramproduct:
  - StatisticsResult: Initial property automaton
    2 locations, 3 edges
  - StatisticsResult: Initial RCFG
    4668 locations, 6455 edges
  - StatisticsResult: BuchiProgram size
    11592 locations, 20999 edges
 * Results from de.uni_freiburg.informatik.ultimate.plugins.generator.traceabstraction:
  - StatisticsResult: Constructed decomposition of program
    Your program was decomposed into 8 terminating modules (8 trivial, 0 deterministic, 0 nondeterministic). 8 modules have a trivial ranking function, the largest among these consists of 10 locations.
  - StatisticsResult: Timing statistics
    BÃ¼chiAutomizer plugin needed 4.7s and 9 iterations.  TraceHistogramMax:8. Analysis of lassos took 1.5s. Construction of modules took 0.9s. BÃ¼chi inclusion checks took 0.9s. Highest rank in rank-based complementation 0. Minimization of det autom 8. Minimization of nondet autom 0. Automata minimization 0.5s AutomataMinimizationTime, 7 MinimizatonAttempts, 1953 StatesRemovedByMinimization, 5 NontrivialMinimizations. Non-live state removal took 0.3s Buchi closure took 0.0s. Biggest automaton had 8226 states and ocurred in iteration 4.	Nontrivial modules had stage [0, 0, 0, 0, 0].	InterpolantCoveringCapabilityFinite: 0/0	InterpolantCoveringCapabilityBuchi: 0/0	HoareTripleCheckerStatistics: 65132 SDtfs, 26227 SDslu, 197030 SDs, 0 SdLazy, 5982 SolverSat, 6267 SolverUnsat, 0 SolverUnknown, 0 SolverNotchecked, 0.9s Time	LassoAnalysisResults: nont0 unkn0 SFLI0 SFLT0 conc0 concLT0 SILN0 SILU8 SILI0 SILT0 lasso0 LassoPreprocessingBenchmarks: LassoTerminationAnalysisBenchmarks: not availableLassoTerminationAnalysisBenchmarks: LassoNonterminationAnalysisSatFixpoint: 0	LassoNonterminationAnalysisSatUnbounded: 0	LassoNonterminationAnalysisUnsat: 0	LassoNonterminationAnalysisUnknown: 0	LassoNonterminationAnalysisTime: 0.0s	
  - AllSpecificationsHoldResult: All specifications hold
    Buchi Automizer proved that the LTL property ! ( ( []( (call_allowance_ERC200) ==> ( <>(success_allowance_ERC200) ) ) )) holds
RESULT: Ultimate proved your program to be correct!
Received shutdown request...
