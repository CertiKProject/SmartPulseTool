This is Ultimate 0.1.24-f1553f5-m
[2020-11-25 09:36:52,580 INFO  L170        SettingsManager]: Resetting all preferences to default values...
[2020-11-25 09:36:52,581 INFO  L174        SettingsManager]: Resetting UltimateCore preferences to default values
[2020-11-25 09:36:52,593 INFO  L177        SettingsManager]: Ultimate Commandline Interface provides no preferences, ignoring...
[2020-11-25 09:36:52,593 INFO  L174        SettingsManager]: Resetting Boogie Preprocessor preferences to default values
[2020-11-25 09:36:52,594 INFO  L174        SettingsManager]: Resetting Boogie Procedure Inliner preferences to default values
[2020-11-25 09:36:52,595 INFO  L174        SettingsManager]: Resetting Abstract Interpretation preferences to default values
[2020-11-25 09:36:52,598 INFO  L174        SettingsManager]: Resetting LassoRanker preferences to default values
[2020-11-25 09:36:52,599 INFO  L174        SettingsManager]: Resetting Reaching Definitions preferences to default values
[2020-11-25 09:36:52,600 INFO  L174        SettingsManager]: Resetting SyntaxChecker preferences to default values
[2020-11-25 09:36:52,601 INFO  L177        SettingsManager]: BÃ¼chi Program Product provides no preferences, ignoring...
[2020-11-25 09:36:52,601 INFO  L174        SettingsManager]: Resetting LTL2Aut preferences to default values
[2020-11-25 09:36:52,602 INFO  L174        SettingsManager]: Resetting PEA to Boogie preferences to default values
[2020-11-25 09:36:52,603 INFO  L174        SettingsManager]: Resetting BlockEncodingV2 preferences to default values
[2020-11-25 09:36:52,604 INFO  L174        SettingsManager]: Resetting ChcToBoogie preferences to default values
[2020-11-25 09:36:52,605 INFO  L174        SettingsManager]: Resetting AutomataScriptInterpreter preferences to default values
[2020-11-25 09:36:52,605 INFO  L174        SettingsManager]: Resetting BuchiAutomizer preferences to default values
[2020-11-25 09:36:52,607 INFO  L174        SettingsManager]: Resetting CACSL2BoogieTranslator preferences to default values
[2020-11-25 09:36:52,608 INFO  L174        SettingsManager]: Resetting CodeCheck preferences to default values
[2020-11-25 09:36:52,610 INFO  L174        SettingsManager]: Resetting InvariantSynthesis preferences to default values
[2020-11-25 09:36:52,610 INFO  L174        SettingsManager]: Resetting RCFGBuilder preferences to default values
[2020-11-25 09:36:52,611 INFO  L174        SettingsManager]: Resetting TraceAbstraction preferences to default values
[2020-11-25 09:36:52,613 INFO  L177        SettingsManager]: TraceAbstractionConcurrent provides no preferences, ignoring...
[2020-11-25 09:36:52,613 INFO  L177        SettingsManager]: TraceAbstractionWithAFAs provides no preferences, ignoring...
[2020-11-25 09:36:52,614 INFO  L174        SettingsManager]: Resetting TreeAutomizer preferences to default values
[2020-11-25 09:36:52,614 INFO  L174        SettingsManager]: Resetting IcfgToChc preferences to default values
[2020-11-25 09:36:52,615 INFO  L174        SettingsManager]: Resetting IcfgTransformer preferences to default values
[2020-11-25 09:36:52,615 INFO  L177        SettingsManager]: ReqToTest provides no preferences, ignoring...
[2020-11-25 09:36:52,615 INFO  L174        SettingsManager]: Resetting UtopiaLTL2Aut preferences to default values
[2020-11-25 09:36:52,616 INFO  L174        SettingsManager]: Resetting UtopiaSpecLang preferences to default values
[2020-11-25 09:36:52,616 INFO  L174        SettingsManager]: Resetting Boogie Printer preferences to default values
[2020-11-25 09:36:52,617 INFO  L174        SettingsManager]: Resetting ChcSmtPrinter preferences to default values
[2020-11-25 09:36:52,617 INFO  L174        SettingsManager]: Resetting ReqPrinter preferences to default values
[2020-11-25 09:36:52,618 INFO  L174        SettingsManager]: Resetting Witness Printer preferences to default values
[2020-11-25 09:36:52,619 INFO  L177        SettingsManager]: Boogie PL CUP Parser provides no preferences, ignoring...
[2020-11-25 09:36:52,619 INFO  L174        SettingsManager]: Resetting CDTParser preferences to default values
[2020-11-25 09:36:52,620 INFO  L177        SettingsManager]: AutomataScriptParser provides no preferences, ignoring...
[2020-11-25 09:36:52,620 INFO  L177        SettingsManager]: ReqParser provides no preferences, ignoring...
[2020-11-25 09:36:52,620 INFO  L174        SettingsManager]: Resetting SmtParser preferences to default values
[2020-11-25 09:36:52,621 INFO  L174        SettingsManager]: Resetting Witness Parser preferences to default values
[2020-11-25 09:36:52,621 INFO  L181        SettingsManager]: Finished resetting all preferences to default values...
[2020-11-25 09:36:52,621 INFO  L98         SettingsManager]: Beginning loading settings from /mnt/data0/jon/SmartPulseTool/SmartPulse/settings.epf
[2020-11-25 09:36:52,629 INFO  L110        SettingsManager]: Loading preferences was successful
[2020-11-25 09:36:52,630 INFO  L112        SettingsManager]: Preferences different from defaults after loading the file:
[2020-11-25 09:36:52,630 INFO  L131        SettingsManager]: Preferences of LTL2Aut differ from their defaults:
[2020-11-25 09:36:52,631 INFO  L133        SettingsManager]:  * Read property from file=true
[2020-11-25 09:36:52,631 INFO  L133        SettingsManager]:  * Path to LTL*BA executable (LTL2BA, LTL3BA)=/mnt/data0/jon/SmartPulseTool/ltl2ba
[2020-11-25 09:36:52,631 INFO  L131        SettingsManager]: Preferences of BlockEncodingV2 differ from their defaults:
[2020-11-25 09:36:52,631 INFO  L133        SettingsManager]:  * Maximize final states=false
[2020-11-25 09:36:52,631 INFO  L133        SettingsManager]:  * Minimize states even if more edges are added than removed.=true
[2020-11-25 09:36:52,631 INFO  L133        SettingsManager]:  * Minimize states using LBE with the strategy=NONE
[2020-11-25 09:36:52,631 INFO  L131        SettingsManager]: Preferences of BuchiAutomizer differ from their defaults:
[2020-11-25 09:36:52,631 INFO  L133        SettingsManager]:  * Compute Interpolants along a Counterexample=Craig_TreeInterpolation
[2020-11-25 09:36:52,631 INFO  L133        SettingsManager]:  * Use old map elimination=false
[2020-11-25 09:36:52,631 INFO  L133        SettingsManager]:  * Try twofold refinement=false
[2020-11-25 09:36:52,632 INFO  L131        SettingsManager]: Preferences of CACSL2BoogieTranslator differ from their defaults:
[2020-11-25 09:36:52,632 INFO  L133        SettingsManager]:  * Check unreachability of error function in SV-COMP mode=false
[2020-11-25 09:36:52,632 INFO  L133        SettingsManager]:  * Overapproximate operations on floating types=true
[2020-11-25 09:36:52,632 INFO  L133        SettingsManager]:  * Check division by zero=IGNORE
[2020-11-25 09:36:52,632 INFO  L133        SettingsManager]:  * Pointer to allocated memory at dereference=ASSUME
[2020-11-25 09:36:52,632 INFO  L133        SettingsManager]:  * If two pointers are subtracted or compared they have the same base address=ASSUME
[2020-11-25 09:36:52,632 INFO  L133        SettingsManager]:  * Check array bounds for arrays that are off heap=ASSUME
[2020-11-25 09:36:52,632 INFO  L133        SettingsManager]:  * Check if freed pointer was valid=false
[2020-11-25 09:36:52,632 INFO  L133        SettingsManager]:  * Use constant arrays=true
[2020-11-25 09:36:52,632 INFO  L133        SettingsManager]:  * Pointer base address is valid at dereference=ASSUME
[2020-11-25 09:36:52,633 INFO  L131        SettingsManager]: Preferences of RCFGBuilder differ from their defaults:
[2020-11-25 09:36:52,633 INFO  L133        SettingsManager]:  * Size of a code block=SingleStatement
[2020-11-25 09:36:52,633 INFO  L133        SettingsManager]:  * SMT solver=Internal_SMTInterpol
[2020-11-25 09:36:52,658 INFO  L81    nceAwareModelManager]: Repository-Root is: /tmp
[2020-11-25 09:36:52,671 INFO  L259   ainManager$Toolchain]: [Toolchain 1]: Applicable parser(s) successfully (re)initialized
[2020-11-25 09:36:52,674 INFO  L215   ainManager$Toolchain]: [Toolchain 1]: Toolchain selected.
[2020-11-25 09:36:52,675 INFO  L271        PluginConnector]: Initializing Boogie PL CUP Parser...
[2020-11-25 09:36:52,675 INFO  L276        PluginConnector]: Boogie PL CUP Parser initialized
[2020-11-25 09:36:52,676 INFO  L430   ainManager$Toolchain]: [Toolchain 1]: Parsing single file: /mnt/data0/jon/SmartPulseTool/YFV_0x45f24baeef268bb6d63aee5129015d69702bcdfa_transfer-self.bpl
[2020-11-25 09:36:52,676 INFO  L111           BoogieParser]: Parsing: '/mnt/data0/jon/SmartPulseTool/YFV_0x45f24baeef268bb6d63aee5129015d69702bcdfa_transfer-self.bpl'
[2020-11-25 09:36:52,763 INFO  L297   ainManager$Toolchain]: ####################### [Toolchain 1] #######################
[2020-11-25 09:36:52,764 INFO  L131        ToolchainWalker]: Walking toolchain with 8 elements.
[2020-11-25 09:36:52,765 INFO  L113        PluginConnector]: ------------------------Boogie Preprocessor----------------------------
[2020-11-25 09:36:52,765 INFO  L271        PluginConnector]: Initializing Boogie Preprocessor...
[2020-11-25 09:36:52,765 INFO  L276        PluginConnector]: Boogie Preprocessor initialized
[2020-11-25 09:36:52,781 INFO  L185        PluginConnector]: Executing the observer EnsureBoogieModelObserver from plugin Boogie Preprocessor for "YFV_0x45f24baeef268bb6d63aee5129015d69702bcdfa_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 09:36:52" (1/1) ...
[2020-11-25 09:36:52,783 INFO  L185        PluginConnector]: Executing the observer TypeChecker from plugin Boogie Preprocessor for "YFV_0x45f24baeef268bb6d63aee5129015d69702bcdfa_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 09:36:52" (1/1) ...
[2020-11-25 09:36:52,820 INFO  L185        PluginConnector]: Executing the observer ConstExpander from plugin Boogie Preprocessor for "YFV_0x45f24baeef268bb6d63aee5129015d69702bcdfa_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 09:36:52" (1/1) ...
[2020-11-25 09:36:52,821 INFO  L185        PluginConnector]: Executing the observer StructExpander from plugin Boogie Preprocessor for "YFV_0x45f24baeef268bb6d63aee5129015d69702bcdfa_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 09:36:52" (1/1) ...
[2020-11-25 09:36:52,843 INFO  L185        PluginConnector]: Executing the observer UnstructureCode from plugin Boogie Preprocessor for "YFV_0x45f24baeef268bb6d63aee5129015d69702bcdfa_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 09:36:52" (1/1) ...
[2020-11-25 09:36:52,859 INFO  L185        PluginConnector]: Executing the observer FunctionInliner from plugin Boogie Preprocessor for "YFV_0x45f24baeef268bb6d63aee5129015d69702bcdfa_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 09:36:52" (1/1) ...
[2020-11-25 09:36:52,868 INFO  L185        PluginConnector]: Executing the observer BoogieSymbolTableConstructor from plugin Boogie Preprocessor for "YFV_0x45f24baeef268bb6d63aee5129015d69702bcdfa_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 09:36:52" (1/1) ...
[2020-11-25 09:36:52,877 INFO  L132        PluginConnector]: ------------------------ END Boogie Preprocessor----------------------------
[2020-11-25 09:36:52,878 INFO  L113        PluginConnector]: ------------------------UtopiaSpecLang----------------------------
[2020-11-25 09:36:52,878 INFO  L271        PluginConnector]: Initializing UtopiaSpecLang...
[2020-11-25 09:36:52,880 INFO  L276        PluginConnector]: UtopiaSpecLang initialized
[2020-11-25 09:36:52,883 INFO  L185        PluginConnector]: Executing the observer UtopiaSpecLangObserver from plugin UtopiaSpecLang for "YFV_0x45f24baeef268bb6d63aee5129015d69702bcdfa_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 09:36:52" (1/1) ...
[2020-11-25 09:36:52,903 INFO  L1012  opiaSpecLangObserver]: Parsing LTLPlus Formula to AstNode: [](started(ERC20.transfer(to, value), msg.sender == to && value <= _balances_ERC20[this][msg.sender] && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][to] >= 0 && _balances_ERC20[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][msg.sender] >= 0 &&  _balances_ERC20[this][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(finished(ERC20.transfer(to, value), return == true && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this]) && _balances_ERC20[this] == old(_balances_ERC20[this]) && _allowances_ERC20[this] == old(_allowances_ERC20[this]) && governance_YFV[this] == old(governance_YFV[this]) && minters_YFV[this] == old(minters_YFV[this]) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this]) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this]) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]))))
[2020-11-25 09:36:52,909 INFO  L1016  opiaSpecLangObserver]: Successfully lexed: [](started(ERC20.transfer(to, value), msg.sender == to && value <= _balances_ERC20[this][msg.sender] && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][to] >= 0 && _balances_ERC20[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][msg.sender] >= 0 &&  _balances_ERC20[this][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(finished(ERC20.transfer(to, value), return == true && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this]) && _balances_ERC20[this] == old(_balances_ERC20[this]) && _allowances_ERC20[this] == old(_allowances_ERC20[this]) && governance_YFV[this] == old(governance_YFV[this]) && minters_YFV[this] == old(minters_YFV[this]) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this]) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this]) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]))))
[2020-11-25 09:36:52,916 INFO  L1018  opiaSpecLangObserver]: Successfully parsed: [](started(ERC20.transfer(to, value), msg.sender == to && value <= _balances_ERC20[this][msg.sender] && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][to] >= 0 && _balances_ERC20[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][msg.sender] >= 0 &&  _balances_ERC20[this][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(finished(ERC20.transfer(to, value), return == true && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this]) && _balances_ERC20[this] == old(_balances_ERC20[this]) && _allowances_ERC20[this] == old(_allowances_ERC20[this]) && governance_YFV[this] == old(governance_YFV[this]) && minters_YFV[this] == old(minters_YFV[this]) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this]) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this]) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]))))
[2020-11-25 09:36:52,922 INFO  L636   opiaSpecLangObserver]: Parsed ( ( ( ( ( ( ( msg.sender==recipient_s140 && amount_s140<=_balances_ERC20[this][msg.sender] ) && amount_s140>=0 ) && amount_s140<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) && _balances_ERC20[this][recipient_s140]>=0 ) && _balances_ERC20[this][recipient_s140]<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) && _balances_ERC20[this][msg.sender]>=0 ) && _balances_ERC20[this][msg.sender]<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) to BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[COMPEQ,IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>],IdentifierExpression[recipient_s140,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>]],BinaryExpression[COMPLEQ,IdentifierExpression[amount_s140,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>],ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>]]]]],BinaryExpression[COMPGEQ,IdentifierExpression[amount_s140,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>],IntegerLiteral[0]]],BinaryExpression[COMPLT,IdentifierExpression[amount_s140,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]],BinaryExpression[COMPGEQ,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>]]],[IdentifierExpression[recipient_s140,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>]]],IntegerLiteral[0]]],BinaryExpression[COMPLT,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>]]],[IdentifierExpression[recipient_s140,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>]]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]],BinaryExpression[COMPGEQ,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>]]],IntegerLiteral[0]]],BinaryExpression[COMPLT,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>]]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]]
[2020-11-25 09:36:52,924 INFO  L636   opiaSpecLangObserver]: Parsed ( ( ( ( ( ( ( ( __ret_0_==true && _totalSupply_ERC20[this]==( old(_totalSupply_ERC20[this]) ) ) && _balances_ERC20[this]==( old(_balances_ERC20[this]) ) ) && _allowances_ERC20[this]==( old(_allowances_ERC20[this]) ) ) && governance_YFV[this]==( old(governance_YFV[this]) ) ) && minters_YFV[this]==( old(minters_YFV[this]) ) ) && _name_ERC20Detailed[this]==( old(_name_ERC20Detailed[this]) ) ) && _symbol_ERC20Detailed[this]==( old(_symbol_ERC20Detailed[this]) ) ) && _decimals_ERC20Detailed[this]==( old(_decimals_ERC20Detailed[this]) ) ) to BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[COMPEQ,IdentifierExpression[__ret_0_,<IMPLEMENTATION_OUTPARAM,transfer~address~uint256_ERC20>],BooleanLiteral[true]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[_totalSupply_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[_totalSupply_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[_balances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[_balances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[_allowances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[_allowances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[governance_YFV,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[governance_YFV,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[minters_YFV,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[minters_YFV,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[_name_ERC20Detailed,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[_name_ERC20Detailed,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[_symbol_ERC20Detailed,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[_symbol_ERC20Detailed,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[_decimals_ERC20Detailed,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[_decimals_ERC20Detailed,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>]]]]]]
[2020-11-25 09:36:52,930 INFO  L1005  opiaSpecLangObserver]: Compiling: [](started(ERC20.transfer(to, value), msg.sender == to && value <= _balances_ERC20[this][msg.sender] && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][to] >= 0 && _balances_ERC20[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][msg.sender] >= 0 &&  _balances_ERC20[this][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(finished(ERC20.transfer(to, value), return == true && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this]) && _balances_ERC20[this] == old(_balances_ERC20[this]) && _allowances_ERC20[this] == old(_allowances_ERC20[this]) && governance_YFV[this] == old(governance_YFV[this]) && minters_YFV[this] == old(minters_YFV[this]) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this]) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this]) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]))))
[2020-11-25 09:36:52,930 INFO  L1007  opiaSpecLangObserver]: Compiled to ( []( AP(call_transfer_ERC200) ==> ( <>AP(success_transfer_ERC200) ) ) )
Executed UtopiaSpecLang
[2020-11-25 09:36:52,939 INFO  L202        PluginConnector]: Adding new model Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 09:36:52 PropertyContainer
[2020-11-25 09:36:52,939 INFO  L132        PluginConnector]: ------------------------ END UtopiaSpecLang----------------------------
[2020-11-25 09:36:52,940 INFO  L113        PluginConnector]: ------------------------Boogie Printer----------------------------
[2020-11-25 09:36:52,940 INFO  L271        PluginConnector]: Initializing Boogie Printer...
[2020-11-25 09:36:52,940 INFO  L276        PluginConnector]: Boogie Printer initialized
[2020-11-25 09:36:52,941 INFO  L185        PluginConnector]: Executing the observer BoogiePrinterObserver from plugin Boogie Printer for "YFV_0x45f24baeef268bb6d63aee5129015d69702bcdfa_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 09:36:52" (1/2) ...
[2020-11-25 09:36:52,941 INFO  L116   oogiePrinterObserver]: File already exists and will be overwritten: /tmp/boogiePrinter.bpl
[2020-11-25 09:36:52,941 INFO  L120   oogiePrinterObserver]: Writing to file /tmp/boogiePrinter.bpl
[2020-11-25 09:36:52,955 INFO  L185        PluginConnector]: Executing the observer BoogiePrinterObserver from plugin Boogie Printer for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 09:36:52" (2/2) ...
[2020-11-25 09:36:52,956 INFO  L132        PluginConnector]: ------------------------ END Boogie Printer----------------------------
[2020-11-25 09:36:52,956 INFO  L113        PluginConnector]: ------------------------RCFGBuilder----------------------------
[2020-11-25 09:36:52,956 INFO  L271        PluginConnector]: Initializing RCFGBuilder...
[2020-11-25 09:36:52,956 INFO  L276        PluginConnector]: RCFGBuilder initialized
[2020-11-25 09:36:52,957 INFO  L185        PluginConnector]: Executing the observer RCFGBuilderObserver from plugin RCFGBuilder for "YFV_0x45f24baeef268bb6d63aee5129015d69702bcdfa_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 09:36:52" (1/2) ...
[2020-11-25 09:36:53,006 INFO  L130     BoogieDeclarations]: Found specification of procedure FreshRefGenerator__success
[2020-11-25 09:36:53,006 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20_NoBaseCtor__success
[2020-11-25 09:36:53,007 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20
[2020-11-25 09:36:53,007 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20
[2020-11-25 09:36:53,007 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_IERC20
[2020-11-25 09:36:53,007 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_IERC20
[2020-11-25 09:36:53,007 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_IERC20
[2020-11-25 09:36:53,007 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_IERC20
[2020-11-25 09:36:53,007 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_IERC20
[2020-11-25 09:36:53,007 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_IERC20
[2020-11-25 09:36:53,007 INFO  L130     BoogieDeclarations]: Found specification of procedure Context_Context_NoBaseCtor__success
[2020-11-25 09:36:53,008 INFO  L130     BoogieDeclarations]: Found specification of procedure Context_Context
[2020-11-25 09:36:53,008 INFO  L138     BoogieDeclarations]: Found implementation of procedure Context_Context
[2020-11-25 09:36:53,008 INFO  L130     BoogieDeclarations]: Found specification of procedure _msgSender_Context__success
[2020-11-25 09:36:53,008 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20_NoBaseCtor__success
[2020-11-25 09:36:53,008 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20
[2020-11-25 09:36:53,008 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20
[2020-11-25 09:36:53,008 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_ERC20
[2020-11-25 09:36:53,008 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_ERC20
[2020-11-25 09:36:53,008 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_ERC20
[2020-11-25 09:36:53,009 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_ERC20
[2020-11-25 09:36:53,009 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_ERC20
[2020-11-25 09:36:53,009 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_ERC20
[2020-11-25 09:36:53,009 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_ERC20
[2020-11-25 09:36:53,009 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_ERC20
[2020-11-25 09:36:53,009 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_ERC20
[2020-11-25 09:36:53,009 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_ERC20
[2020-11-25 09:36:53,009 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_ERC20
[2020-11-25 09:36:53,009 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_ERC20
[2020-11-25 09:36:53,010 INFO  L130     BoogieDeclarations]: Found specification of procedure increaseAllowance~address~uint256_ERC20
[2020-11-25 09:36:53,010 INFO  L138     BoogieDeclarations]: Found implementation of procedure increaseAllowance~address~uint256_ERC20
[2020-11-25 09:36:53,010 INFO  L130     BoogieDeclarations]: Found specification of procedure decreaseAllowance~address~uint256_ERC20
[2020-11-25 09:36:53,010 INFO  L138     BoogieDeclarations]: Found implementation of procedure decreaseAllowance~address~uint256_ERC20
[2020-11-25 09:36:53,010 INFO  L130     BoogieDeclarations]: Found specification of procedure _transfer~address~address~uint256_ERC20__success
[2020-11-25 09:36:53,010 INFO  L130     BoogieDeclarations]: Found specification of procedure _mint~address~uint256_ERC20__success
[2020-11-25 09:36:53,010 INFO  L130     BoogieDeclarations]: Found specification of procedure _burn~address~uint256_ERC20__success
[2020-11-25 09:36:53,010 INFO  L130     BoogieDeclarations]: Found specification of procedure _approve~address~address~uint256_ERC20__success
[2020-11-25 09:36:53,010 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Detailed_ERC20Detailed_NoBaseCtor__success
[2020-11-25 09:36:53,010 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Detailed_ERC20Detailed
[2020-11-25 09:36:53,010 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Detailed_ERC20Detailed
[2020-11-25 09:36:53,011 INFO  L130     BoogieDeclarations]: Found specification of procedure name_ERC20Detailed
[2020-11-25 09:36:53,011 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_ERC20Detailed
[2020-11-25 09:36:53,011 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_ERC20Detailed
[2020-11-25 09:36:53,011 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_ERC20Detailed
[2020-11-25 09:36:53,011 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_ERC20Detailed
[2020-11-25 09:36:53,011 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_ERC20Detailed
[2020-11-25 09:36:53,011 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath_NoBaseCtor__success
[2020-11-25 09:36:53,011 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath
[2020-11-25 09:36:53,011 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath
[2020-11-25 09:36:53,011 INFO  L130     BoogieDeclarations]: Found specification of procedure add~uint256~uint256_SafeMath__success
[2020-11-25 09:36:53,012 INFO  L130     BoogieDeclarations]: Found specification of procedure sub~uint256~uint256~string_SafeMath__success
[2020-11-25 09:36:53,012 INFO  L130     BoogieDeclarations]: Found specification of procedure mul~uint256~uint256_SafeMath__success
[2020-11-25 09:36:53,012 INFO  L130     BoogieDeclarations]: Found specification of procedure div~uint256~uint256~string_SafeMath__success
[2020-11-25 09:36:53,012 INFO  L130     BoogieDeclarations]: Found specification of procedure YFV_YFV_NoBaseCtor__success
[2020-11-25 09:36:53,012 INFO  L130     BoogieDeclarations]: Found specification of procedure YFV_YFV
[2020-11-25 09:36:53,012 INFO  L138     BoogieDeclarations]: Found implementation of procedure YFV_YFV
[2020-11-25 09:36:53,012 INFO  L130     BoogieDeclarations]: Found specification of procedure mint~address~uint256_YFV
[2020-11-25 09:36:53,012 INFO  L138     BoogieDeclarations]: Found implementation of procedure mint~address~uint256_YFV
[2020-11-25 09:36:53,012 INFO  L130     BoogieDeclarations]: Found specification of procedure burn~uint256_YFV
[2020-11-25 09:36:53,012 INFO  L138     BoogieDeclarations]: Found implementation of procedure burn~uint256_YFV
[2020-11-25 09:36:53,012 INFO  L130     BoogieDeclarations]: Found specification of procedure setGovernance~address_YFV
[2020-11-25 09:36:53,013 INFO  L138     BoogieDeclarations]: Found implementation of procedure setGovernance~address_YFV
[2020-11-25 09:36:53,013 INFO  L130     BoogieDeclarations]: Found specification of procedure addMinter~address_YFV
[2020-11-25 09:36:53,013 INFO  L138     BoogieDeclarations]: Found implementation of procedure addMinter~address_YFV
[2020-11-25 09:36:53,013 INFO  L130     BoogieDeclarations]: Found specification of procedure removeMinter~address_YFV
[2020-11-25 09:36:53,013 INFO  L138     BoogieDeclarations]: Found implementation of procedure removeMinter~address_YFV
[2020-11-25 09:36:53,013 INFO  L130     BoogieDeclarations]: Found specification of procedure governance_YFV
[2020-11-25 09:36:53,013 INFO  L138     BoogieDeclarations]: Found implementation of procedure governance_YFV
[2020-11-25 09:36:53,013 INFO  L130     BoogieDeclarations]: Found specification of procedure minters~address_YFV
[2020-11-25 09:36:53,013 INFO  L138     BoogieDeclarations]: Found implementation of procedure minters~address_YFV
[2020-11-25 09:36:53,013 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackDispatch__success
[2020-11-25 09:36:53,013 INFO  L130     BoogieDeclarations]: Found specification of procedure Fallback_UnknownType__success
[2020-11-25 09:36:53,014 INFO  L130     BoogieDeclarations]: Found specification of procedure send__success
[2020-11-25 09:36:53,014 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_IERC20
[2020-11-25 09:36:53,014 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_IERC20
[2020-11-25 09:36:53,014 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_Context
[2020-11-25 09:36:53,014 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_Context
[2020-11-25 09:36:53,014 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_ERC20
[2020-11-25 09:36:53,014 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_ERC20
[2020-11-25 09:36:53,014 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_ERC20Detailed
[2020-11-25 09:36:53,014 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_ERC20Detailed
[2020-11-25 09:36:53,015 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_SafeMath
[2020-11-25 09:36:53,015 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_SafeMath
[2020-11-25 09:36:53,015 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_YFV
[2020-11-25 09:36:53,015 INFO  L130     BoogieDeclarations]: Found specification of procedure main
[2020-11-25 09:36:53,015 INFO  L130     BoogieDeclarations]: Found specification of procedure FreshRefGenerator__fail
[2020-11-25 09:36:53,015 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20_NoBaseCtor__fail
[2020-11-25 09:36:53,015 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20__success
[2020-11-25 09:36:53,015 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20__fail
[2020-11-25 09:36:53,015 INFO  L130     BoogieDeclarations]: Found specification of procedure Context_Context_NoBaseCtor__fail
[2020-11-25 09:36:53,015 INFO  L130     BoogieDeclarations]: Found specification of procedure Context_Context__success
[2020-11-25 09:36:53,015 INFO  L130     BoogieDeclarations]: Found specification of procedure Context_Context__fail
[2020-11-25 09:36:53,016 INFO  L130     BoogieDeclarations]: Found specification of procedure _msgSender_Context__fail
[2020-11-25 09:36:53,016 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20_NoBaseCtor__fail
[2020-11-25 09:36:53,016 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20__success
[2020-11-25 09:36:53,016 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20__fail
[2020-11-25 09:36:53,016 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_ERC20__success
[2020-11-25 09:36:53,016 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_ERC20__fail
[2020-11-25 09:36:53,016 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_ERC20__success
[2020-11-25 09:36:53,016 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_ERC20__fail
[2020-11-25 09:36:53,016 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_ERC20__success
[2020-11-25 09:36:53,016 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_ERC20__fail
[2020-11-25 09:36:53,016 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_ERC20__success
[2020-11-25 09:36:53,017 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_ERC20__fail
[2020-11-25 09:36:53,017 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_ERC20__success
[2020-11-25 09:36:53,017 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_ERC20__fail
[2020-11-25 09:36:53,017 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_ERC20__success
[2020-11-25 09:36:53,017 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_ERC20__fail
[2020-11-25 09:36:53,017 INFO  L130     BoogieDeclarations]: Found specification of procedure increaseAllowance~address~uint256_ERC20__success
[2020-11-25 09:36:53,018 INFO  L130     BoogieDeclarations]: Found specification of procedure increaseAllowance~address~uint256_ERC20__fail
[2020-11-25 09:36:53,018 INFO  L130     BoogieDeclarations]: Found specification of procedure decreaseAllowance~address~uint256_ERC20__success
[2020-11-25 09:36:53,018 INFO  L130     BoogieDeclarations]: Found specification of procedure decreaseAllowance~address~uint256_ERC20__fail
[2020-11-25 09:36:53,018 INFO  L130     BoogieDeclarations]: Found specification of procedure _transfer~address~address~uint256_ERC20__fail
[2020-11-25 09:36:53,018 INFO  L130     BoogieDeclarations]: Found specification of procedure _mint~address~uint256_ERC20__fail
[2020-11-25 09:36:53,018 INFO  L130     BoogieDeclarations]: Found specification of procedure _burn~address~uint256_ERC20__fail
[2020-11-25 09:36:53,018 INFO  L130     BoogieDeclarations]: Found specification of procedure _approve~address~address~uint256_ERC20__fail
[2020-11-25 09:36:53,018 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Detailed_ERC20Detailed_NoBaseCtor__fail
[2020-11-25 09:36:53,018 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Detailed_ERC20Detailed__success
[2020-11-25 09:36:53,018 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Detailed_ERC20Detailed__fail
[2020-11-25 09:36:53,019 INFO  L130     BoogieDeclarations]: Found specification of procedure name_ERC20Detailed__success
[2020-11-25 09:36:53,019 INFO  L130     BoogieDeclarations]: Found specification of procedure name_ERC20Detailed__fail
[2020-11-25 09:36:53,019 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_ERC20Detailed__success
[2020-11-25 09:36:53,019 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_ERC20Detailed__fail
[2020-11-25 09:36:53,019 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_ERC20Detailed__success
[2020-11-25 09:36:53,019 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_ERC20Detailed__fail
[2020-11-25 09:36:53,019 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath_NoBaseCtor__fail
[2020-11-25 09:36:53,019 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath__success
[2020-11-25 09:36:53,019 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath__fail
[2020-11-25 09:36:53,019 INFO  L130     BoogieDeclarations]: Found specification of procedure add~uint256~uint256_SafeMath__fail
[2020-11-25 09:36:53,020 INFO  L130     BoogieDeclarations]: Found specification of procedure sub~uint256~uint256~string_SafeMath__fail
[2020-11-25 09:36:53,020 INFO  L130     BoogieDeclarations]: Found specification of procedure mul~uint256~uint256_SafeMath__fail
[2020-11-25 09:36:53,020 INFO  L130     BoogieDeclarations]: Found specification of procedure div~uint256~uint256~string_SafeMath__fail
[2020-11-25 09:36:53,020 INFO  L130     BoogieDeclarations]: Found specification of procedure YFV_YFV_NoBaseCtor__fail
[2020-11-25 09:36:53,020 INFO  L130     BoogieDeclarations]: Found specification of procedure YFV_YFV__success
[2020-11-25 09:36:53,020 INFO  L130     BoogieDeclarations]: Found specification of procedure YFV_YFV__fail
[2020-11-25 09:36:53,020 INFO  L130     BoogieDeclarations]: Found specification of procedure mint~address~uint256_YFV__success
[2020-11-25 09:36:53,020 INFO  L130     BoogieDeclarations]: Found specification of procedure mint~address~uint256_YFV__fail
[2020-11-25 09:36:53,020 INFO  L130     BoogieDeclarations]: Found specification of procedure burn~uint256_YFV__success
[2020-11-25 09:36:53,020 INFO  L130     BoogieDeclarations]: Found specification of procedure burn~uint256_YFV__fail
[2020-11-25 09:36:53,021 INFO  L130     BoogieDeclarations]: Found specification of procedure setGovernance~address_YFV__success
[2020-11-25 09:36:53,021 INFO  L130     BoogieDeclarations]: Found specification of procedure setGovernance~address_YFV__fail
[2020-11-25 09:36:53,021 INFO  L130     BoogieDeclarations]: Found specification of procedure addMinter~address_YFV__success
[2020-11-25 09:36:53,021 INFO  L130     BoogieDeclarations]: Found specification of procedure addMinter~address_YFV__fail
[2020-11-25 09:36:53,021 INFO  L130     BoogieDeclarations]: Found specification of procedure removeMinter~address_YFV__success
[2020-11-25 09:36:53,021 INFO  L130     BoogieDeclarations]: Found specification of procedure removeMinter~address_YFV__fail
[2020-11-25 09:36:53,021 INFO  L130     BoogieDeclarations]: Found specification of procedure governance_YFV__success
[2020-11-25 09:36:53,021 INFO  L130     BoogieDeclarations]: Found specification of procedure governance_YFV__fail
[2020-11-25 09:36:53,021 INFO  L130     BoogieDeclarations]: Found specification of procedure minters~address_YFV__success
[2020-11-25 09:36:53,021 INFO  L130     BoogieDeclarations]: Found specification of procedure minters~address_YFV__fail
[2020-11-25 09:36:53,022 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackDispatch__fail
[2020-11-25 09:36:53,022 INFO  L130     BoogieDeclarations]: Found specification of procedure Fallback_UnknownType__fail
[2020-11-25 09:36:53,022 INFO  L130     BoogieDeclarations]: Found specification of procedure send__fail
[2020-11-25 09:36:53,022 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreshRefGenerator__fail
[2020-11-25 09:36:53,022 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreshRefGenerator__success
[2020-11-25 09:36:53,022 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20_NoBaseCtor__fail
[2020-11-25 09:36:53,022 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20_NoBaseCtor__success
[2020-11-25 09:36:53,022 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20__fail
[2020-11-25 09:36:53,022 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20__success
[2020-11-25 09:36:53,022 INFO  L138     BoogieDeclarations]: Found implementation of procedure Context_Context_NoBaseCtor__fail
[2020-11-25 09:36:53,023 INFO  L138     BoogieDeclarations]: Found implementation of procedure Context_Context_NoBaseCtor__success
[2020-11-25 09:36:53,023 INFO  L138     BoogieDeclarations]: Found implementation of procedure Context_Context__fail
[2020-11-25 09:36:53,023 INFO  L138     BoogieDeclarations]: Found implementation of procedure Context_Context__success
[2020-11-25 09:36:53,023 INFO  L138     BoogieDeclarations]: Found implementation of procedure _msgSender_Context__fail
[2020-11-25 09:36:53,023 INFO  L138     BoogieDeclarations]: Found implementation of procedure _msgSender_Context__success
[2020-11-25 09:36:53,023 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20_NoBaseCtor__fail
[2020-11-25 09:36:53,023 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20_NoBaseCtor__success
[2020-11-25 09:36:53,023 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20__fail
[2020-11-25 09:36:53,023 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20__success
[2020-11-25 09:36:53,023 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_ERC20__fail
[2020-11-25 09:36:53,023 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_ERC20__success
[2020-11-25 09:36:53,024 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_ERC20__fail
[2020-11-25 09:36:53,024 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_ERC20__success
[2020-11-25 09:36:53,024 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_ERC20__fail
[2020-11-25 09:36:53,024 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_ERC20__success
[2020-11-25 09:36:53,024 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_ERC20__fail
[2020-11-25 09:36:53,024 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_ERC20__success
[2020-11-25 09:36:53,024 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_ERC20__fail
[2020-11-25 09:36:53,024 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_ERC20__success
[2020-11-25 09:36:53,024 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_ERC20__fail
[2020-11-25 09:36:53,024 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_ERC20__success
[2020-11-25 09:36:53,024 INFO  L138     BoogieDeclarations]: Found implementation of procedure increaseAllowance~address~uint256_ERC20__fail
[2020-11-25 09:36:53,024 INFO  L138     BoogieDeclarations]: Found implementation of procedure increaseAllowance~address~uint256_ERC20__success
[2020-11-25 09:36:53,025 INFO  L138     BoogieDeclarations]: Found implementation of procedure decreaseAllowance~address~uint256_ERC20__fail
[2020-11-25 09:36:53,025 INFO  L138     BoogieDeclarations]: Found implementation of procedure decreaseAllowance~address~uint256_ERC20__success
[2020-11-25 09:36:53,025 INFO  L138     BoogieDeclarations]: Found implementation of procedure _transfer~address~address~uint256_ERC20__fail
[2020-11-25 09:36:53,025 INFO  L138     BoogieDeclarations]: Found implementation of procedure _transfer~address~address~uint256_ERC20__success
[2020-11-25 09:36:53,025 INFO  L138     BoogieDeclarations]: Found implementation of procedure _mint~address~uint256_ERC20__fail
[2020-11-25 09:36:53,025 INFO  L138     BoogieDeclarations]: Found implementation of procedure _mint~address~uint256_ERC20__success
[2020-11-25 09:36:53,025 INFO  L138     BoogieDeclarations]: Found implementation of procedure _burn~address~uint256_ERC20__fail
[2020-11-25 09:36:53,025 INFO  L138     BoogieDeclarations]: Found implementation of procedure _burn~address~uint256_ERC20__success
[2020-11-25 09:36:53,025 INFO  L138     BoogieDeclarations]: Found implementation of procedure _approve~address~address~uint256_ERC20__fail
[2020-11-25 09:36:53,025 INFO  L138     BoogieDeclarations]: Found implementation of procedure _approve~address~address~uint256_ERC20__success
[2020-11-25 09:36:53,025 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Detailed_ERC20Detailed_NoBaseCtor__fail
[2020-11-25 09:36:53,025 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Detailed_ERC20Detailed_NoBaseCtor__success
[2020-11-25 09:36:53,025 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Detailed_ERC20Detailed__fail
[2020-11-25 09:36:53,025 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Detailed_ERC20Detailed__success
[2020-11-25 09:36:53,026 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_ERC20Detailed__fail
[2020-11-25 09:36:53,026 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_ERC20Detailed__success
[2020-11-25 09:36:53,026 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_ERC20Detailed__fail
[2020-11-25 09:36:53,026 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_ERC20Detailed__success
[2020-11-25 09:36:53,026 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_ERC20Detailed__fail
[2020-11-25 09:36:53,026 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_ERC20Detailed__success
[2020-11-25 09:36:53,026 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath_NoBaseCtor__fail
[2020-11-25 09:36:53,026 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath_NoBaseCtor__success
[2020-11-25 09:36:53,026 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath__fail
[2020-11-25 09:36:53,026 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath__success
[2020-11-25 09:36:53,026 INFO  L138     BoogieDeclarations]: Found implementation of procedure add~uint256~uint256_SafeMath__fail
[2020-11-25 09:36:53,026 INFO  L138     BoogieDeclarations]: Found implementation of procedure add~uint256~uint256_SafeMath__success
[2020-11-25 09:36:53,026 INFO  L138     BoogieDeclarations]: Found implementation of procedure sub~uint256~uint256~string_SafeMath__fail
[2020-11-25 09:36:53,026 INFO  L138     BoogieDeclarations]: Found implementation of procedure sub~uint256~uint256~string_SafeMath__success
[2020-11-25 09:36:53,026 INFO  L138     BoogieDeclarations]: Found implementation of procedure mul~uint256~uint256_SafeMath__fail
[2020-11-25 09:36:53,026 INFO  L138     BoogieDeclarations]: Found implementation of procedure mul~uint256~uint256_SafeMath__success
[2020-11-25 09:36:53,027 INFO  L138     BoogieDeclarations]: Found implementation of procedure div~uint256~uint256~string_SafeMath__fail
[2020-11-25 09:36:53,027 INFO  L138     BoogieDeclarations]: Found implementation of procedure div~uint256~uint256~string_SafeMath__success
[2020-11-25 09:36:53,027 INFO  L138     BoogieDeclarations]: Found implementation of procedure YFV_YFV_NoBaseCtor__fail
[2020-11-25 09:36:53,027 INFO  L138     BoogieDeclarations]: Found implementation of procedure YFV_YFV_NoBaseCtor__success
[2020-11-25 09:36:53,027 INFO  L138     BoogieDeclarations]: Found implementation of procedure YFV_YFV__fail
[2020-11-25 09:36:53,027 INFO  L138     BoogieDeclarations]: Found implementation of procedure YFV_YFV__success
[2020-11-25 09:36:53,027 INFO  L138     BoogieDeclarations]: Found implementation of procedure mint~address~uint256_YFV__fail
[2020-11-25 09:36:53,027 INFO  L138     BoogieDeclarations]: Found implementation of procedure mint~address~uint256_YFV__success
[2020-11-25 09:36:53,027 INFO  L138     BoogieDeclarations]: Found implementation of procedure burn~uint256_YFV__fail
[2020-11-25 09:36:53,027 INFO  L138     BoogieDeclarations]: Found implementation of procedure burn~uint256_YFV__success
[2020-11-25 09:36:53,027 INFO  L138     BoogieDeclarations]: Found implementation of procedure setGovernance~address_YFV__fail
[2020-11-25 09:36:53,027 INFO  L138     BoogieDeclarations]: Found implementation of procedure setGovernance~address_YFV__success
[2020-11-25 09:36:53,027 INFO  L138     BoogieDeclarations]: Found implementation of procedure addMinter~address_YFV__fail
[2020-11-25 09:36:53,027 INFO  L138     BoogieDeclarations]: Found implementation of procedure addMinter~address_YFV__success
[2020-11-25 09:36:53,027 INFO  L138     BoogieDeclarations]: Found implementation of procedure removeMinter~address_YFV__fail
[2020-11-25 09:36:53,027 INFO  L138     BoogieDeclarations]: Found implementation of procedure removeMinter~address_YFV__success
[2020-11-25 09:36:53,028 INFO  L138     BoogieDeclarations]: Found implementation of procedure governance_YFV__fail
[2020-11-25 09:36:53,028 INFO  L138     BoogieDeclarations]: Found implementation of procedure governance_YFV__success
[2020-11-25 09:36:53,028 INFO  L138     BoogieDeclarations]: Found implementation of procedure minters~address_YFV__fail
[2020-11-25 09:36:53,028 INFO  L138     BoogieDeclarations]: Found implementation of procedure minters~address_YFV__success
[2020-11-25 09:36:53,028 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackDispatch__fail
[2020-11-25 09:36:53,028 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackDispatch__success
[2020-11-25 09:36:53,028 INFO  L138     BoogieDeclarations]: Found implementation of procedure Fallback_UnknownType__fail
[2020-11-25 09:36:53,028 INFO  L138     BoogieDeclarations]: Found implementation of procedure Fallback_UnknownType__success
[2020-11-25 09:36:53,028 INFO  L138     BoogieDeclarations]: Found implementation of procedure send__fail
[2020-11-25 09:36:53,028 INFO  L138     BoogieDeclarations]: Found implementation of procedure send__success
[2020-11-25 09:36:53,028 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_IERC20
[2020-11-25 09:36:53,028 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_IERC20
[2020-11-25 09:36:53,028 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_Context
[2020-11-25 09:36:53,028 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_Context
[2020-11-25 09:36:53,028 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_ERC20
[2020-11-25 09:36:53,028 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_ERC20
[2020-11-25 09:36:53,029 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_ERC20Detailed
[2020-11-25 09:36:53,029 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_ERC20Detailed
[2020-11-25 09:36:53,029 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_SafeMath
[2020-11-25 09:36:53,029 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_SafeMath
[2020-11-25 09:36:53,029 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_YFV
[2020-11-25 09:36:53,029 INFO  L138     BoogieDeclarations]: Found implementation of procedure main
[2020-11-25 09:36:53,029 INFO  L130     BoogieDeclarations]: Found specification of procedure ULTIMATE.start
[2020-11-25 09:36:53,029 INFO  L138     BoogieDeclarations]: Found implementation of procedure ULTIMATE.start
[2020-11-25 09:36:53,219 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 09:36:53,219 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 09:36:53,220 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 09:36:53,740 INFO  L281             CfgBuilder]: Using the 1 location(s) as analysis (start of procedure ULTIMATE.start)
[2020-11-25 09:36:53,740 INFO  L286             CfgBuilder]: Removed 6 assue(true) statements.
[2020-11-25 09:36:53,742 INFO  L202        PluginConnector]: Adding new model YFV_0x45f24baeef268bb6d63aee5129015d69702bcdfa_transfer-self.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 09:36:53 BoogieIcfgContainer
[2020-11-25 09:36:53,742 INFO  L185        PluginConnector]: Executing the observer RCFGBuilderObserver from plugin RCFGBuilder for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 09:36:52" (2/2) ...
[2020-11-25 09:36:53,743 INFO  L85     RCFGBuilderObserver]: No WrapperNode. Let Ultimate process with next node
[2020-11-25 09:36:53,743 INFO  L205        PluginConnector]: Invalid model from RCFGBuilder for observer de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder.RCFGBuilderObserver@1f48b979 and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 09:36:53, skipping insertion in model container
[2020-11-25 09:36:53,743 INFO  L132        PluginConnector]: ------------------------ END RCFGBuilder----------------------------
[2020-11-25 09:36:53,743 INFO  L113        PluginConnector]: ------------------------UtopiaLTL2Aut----------------------------
[2020-11-25 09:36:53,743 INFO  L271        PluginConnector]: Initializing UtopiaLTL2Aut...
[2020-11-25 09:36:53,745 INFO  L276        PluginConnector]: UtopiaLTL2Aut initialized
[2020-11-25 09:36:53,745 INFO  L185        PluginConnector]: Executing the observer UtopiaLTL2AutObserver from plugin UtopiaLTL2Aut for "YFV_0x45f24baeef268bb6d63aee5129015d69702bcdfa_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 09:36:52" (1/3) ...
[2020-11-25 09:36:53,745 INFO  L205        PluginConnector]: Invalid model from UtopiaLTL2Aut for observer edu.utexas.cs.utopia.ltl2aut.UtopiaLTL2AutObserver@1a34ac55 and model type Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 09:36:53, skipping insertion in model container
[2020-11-25 09:36:53,746 INFO  L185        PluginConnector]: Executing the observer UtopiaLTL2AutObserver from plugin UtopiaLTL2Aut for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 09:36:52" (2/3) ...
No working directory specified, using /mnt/data0/jon/SmartPulseTool/ltl2ba
Starting monitored process 1 with /mnt/data0/jon/SmartPulseTool/ltl2ba -f ! ( ( [] ( a -> ( <>b ) ) ) )  (exit command is null, workingDir is null)
[2020-11-25 09:36:53,781 INFO  L202        PluginConnector]: Adding new model Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 09:36:53 NWAContainer
[2020-11-25 09:36:53,781 INFO  L132        PluginConnector]: ------------------------ END UtopiaLTL2Aut----------------------------
[2020-11-25 09:36:53,781 INFO  L113        PluginConnector]: ------------------------BÃ¼chi Program Product----------------------------
[2020-11-25 09:36:53,782 INFO  L271        PluginConnector]: Initializing BÃ¼chi Program Product...
[2020-11-25 09:36:53,783 INFO  L276        PluginConnector]: BÃ¼chi Program Product initialized
[2020-11-25 09:36:53,784 INFO  L185        PluginConnector]: Executing the observer BuchiProductObserver from plugin BÃ¼chi Program Product for "YFV_0x45f24baeef268bb6d63aee5129015d69702bcdfa_transfer-self.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 09:36:53" (3/4) ...
[2020-11-25 09:36:53,784 INFO  L205        PluginConnector]: Invalid model from BÃ¼chi Program Product for observer de.uni_freiburg.informatik.ultimate.buchiprogramproduct.BuchiProductObserver@3688ecbc and model type LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 09:36:53, skipping insertion in model container
[2020-11-25 09:36:53,785 INFO  L185        PluginConnector]: Executing the observer BuchiProductObserver from plugin BÃ¼chi Program Product for "Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 09:36:53" (4/4) ...
[2020-11-25 09:36:53,788 INFO  L104   BuchiProductObserver]: Initial property automaton 2 locations, 3 edges
[2020-11-25 09:36:53,792 INFO  L110   BuchiProductObserver]: Initial RCFG 1844 locations, 2524 edges
[2020-11-25 09:36:53,792 INFO  L93    BuchiProductObserver]: Beginning generation of product automaton
[2020-11-25 09:36:53,803 INFO  L136       ProductGenerator]: The program has no step specification, so we assume maximum atomicity
[2020-11-25 09:36:55,083 INFO  L97    BuchiProductObserver]: Finished generation of product automaton successfully
[2020-11-25 09:36:55,089 INFO  L110   BuchiProductObserver]: BuchiProgram size 4578 locations, 8198 edges
[2020-11-25 09:36:55,089 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 09:36:55 BoogieIcfgContainer
[2020-11-25 09:36:55,089 INFO  L132        PluginConnector]: ------------------------ END BÃ¼chi Program Product----------------------------
[2020-11-25 09:36:55,089 INFO  L113        PluginConnector]: ------------------------BlockEncodingV2----------------------------
[2020-11-25 09:36:55,090 INFO  L271        PluginConnector]: Initializing BlockEncodingV2...
[2020-11-25 09:36:55,091 INFO  L276        PluginConnector]: BlockEncodingV2 initialized
[2020-11-25 09:36:55,091 INFO  L185        PluginConnector]: Executing the observer BlockEncodingObserver from plugin BlockEncodingV2 for "LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 09:36:55" (1/1) ...
[2020-11-25 09:36:55,207 INFO  L313           BlockEncoder]: Initial Icfg 4578 locations, 8198 edges
[2020-11-25 09:36:55,207 INFO  L258           BlockEncoder]: Using Remove infeasible edges
[2020-11-25 09:36:55,207 INFO  L270           BlockEncoder]: Using Minimize states even if more edges are added than removed.=true
[2020-11-25 09:36:55,208 INFO  L296           BlockEncoder]: Using Remove sink states
[2020-11-25 09:36:55,208 INFO  L171           BlockEncoder]: Using Apply optimizations until nothing changes=true
[2020-11-25 09:36:55,222 INFO  L70    emoveInfeasibleEdges]: Removed 150 edges and 15 locations because of local infeasibility
[2020-11-25 09:36:55,231 INFO  L70        RemoveSinkStates]: Removed 98 edges and 65 locations by removing sink states
[2020-11-25 09:36:55,244 INFO  L70    emoveInfeasibleEdges]: Removed 0 edges and 0 locations because of local infeasibility
[2020-11-25 09:36:55,247 INFO  L70        RemoveSinkStates]: Removed 0 edges and 0 locations by removing sink states
[2020-11-25 09:36:55,252 INFO  L237           BlockEncoder]: Using Create parallel compositions if possible
[2020-11-25 09:36:55,252 INFO  L66        ParallelComposer]: Creating parallel compositions
[2020-11-25 09:36:55,259 INFO  L313           BlockEncoder]: Encoded RCFG 4478 locations, 7921 edges
[2020-11-25 09:36:55,259 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.blockencoding CFG 25.11 09:36:55 BasicIcfg
[2020-11-25 09:36:55,259 INFO  L132        PluginConnector]: ------------------------ END BlockEncodingV2----------------------------
[2020-11-25 09:36:55,259 INFO  L113        PluginConnector]: ------------------------BuchiAutomizer----------------------------
[2020-11-25 09:36:55,260 INFO  L271        PluginConnector]: Initializing BuchiAutomizer...
[2020-11-25 09:36:55,262 INFO  L276        PluginConnector]: BuchiAutomizer initialized
[2020-11-25 09:36:55,262 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 09:36:55,262 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "YFV_0x45f24baeef268bb6d63aee5129015d69702bcdfa_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 09:36:52" (1/6) ...
[2020-11-25 09:36:55,264 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@22d4df3c and model type YFV_0x45f24baeef268bb6d63aee5129015d69702bcdfa_transfer-self.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 09:36:55, skipping insertion in model container
[2020-11-25 09:36:55,264 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 09:36:55,264 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 09:36:52" (2/6) ...
[2020-11-25 09:36:55,264 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@22d4df3c and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 09:36:55, skipping insertion in model container
[2020-11-25 09:36:55,265 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 09:36:55,265 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "YFV_0x45f24baeef268bb6d63aee5129015d69702bcdfa_transfer-self.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 09:36:53" (3/6) ...
[2020-11-25 09:36:55,265 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@22d4df3c and model type YFV_0x45f24baeef268bb6d63aee5129015d69702bcdfa_transfer-self.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer CFG 25.11 09:36:55, skipping insertion in model container
[2020-11-25 09:36:55,265 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 09:36:55,265 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 09:36:53" (4/6) ...
[2020-11-25 09:36:55,265 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@22d4df3c and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 09:36:55, skipping insertion in model container
[2020-11-25 09:36:55,265 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 09:36:55,265 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 09:36:55" (5/6) ...
[2020-11-25 09:36:55,266 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@22d4df3c and model type LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer OTHER 25.11 09:36:55, skipping insertion in model container
[2020-11-25 09:36:55,266 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 09:36:55,266 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.blockencoding CFG 25.11 09:36:55" (6/6) ...
[2020-11-25 09:36:55,267 INFO  L404   chiAutomizerObserver]: Analyzing ICFG YFV_0x45f24baeef268bb6d63aee5129015d69702bcdfa_transfer-self.bpl_BEv2
[2020-11-25 09:36:55,306 INFO  L133   ementStrategyFactory]: Using default assertion order modulation
[2020-11-25 09:36:55,306 INFO  L377         BuchiCegarLoop]: Interprodecural is true
[2020-11-25 09:36:55,306 INFO  L378         BuchiCegarLoop]: Hoare is false
[2020-11-25 09:36:55,306 INFO  L379         BuchiCegarLoop]: Compute interpolants for Craig_TreeInterpolation
[2020-11-25 09:36:55,306 INFO  L380         BuchiCegarLoop]: Backedges is STRAIGHT_LINE
[2020-11-25 09:36:55,306 INFO  L381         BuchiCegarLoop]: Determinization is PREDICATE_ABSTRACTION
[2020-11-25 09:36:55,307 INFO  L382         BuchiCegarLoop]: Difference is false
[2020-11-25 09:36:55,307 INFO  L383         BuchiCegarLoop]: Minimize is MINIMIZE_SEVPA
[2020-11-25 09:36:55,307 INFO  L386         BuchiCegarLoop]: ======== Iteration 0==of CEGAR loop == BuchiCegarLoop========
[2020-11-25 09:36:55,358 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 4478 states.
[2020-11-25 09:36:55,425 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 09:36:55,426 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 09:36:55,427 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 09:36:55,439 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 09:36:55,440 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 09:36:55,440 INFO  L445         BuchiCegarLoop]: ======== Iteration 1============
[2020-11-25 09:36:55,440 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 4478 states.
[2020-11-25 09:36:55,465 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 09:36:55,465 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 09:36:55,465 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 09:36:55,467 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 09:36:55,467 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_ERC200 := false;
[L2]                 call_transfer_ERC200 := false;
[L2]     CALL        call main();
[L4981]              assume null == 0;
[L4982]  CALL        call this := FreshRefGenerator__success();
[L2122]              havoc newRef;
[L2123]              assume Alloc[newRef] == false;
[L2124]              Alloc[newRef] := true;
[L2125]              assume newRef != null;
[L4982]  RET         call this := FreshRefGenerator__success();
[L4983]              assume now >= 0;
[L4984]              assume DType[this] == YFV;
[L4985]              assume msgvalue_MSG == 0;
[L4986]              gas := gas - 53000;
[L4987]  CALL        call YFV_YFV(this, msgsender_MSG, msgvalue_MSG);
[L1098]              havoc __exception;
[L1099]              revert := false;
[L1100]  COND FALSE  !(__exception)
[L1125]  CALL        call YFV_YFV__success(this, msgsender_MSG, msgvalue_MSG);
[L3242]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2186]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2171]              assume msgsender_MSG != null;
[L2172]              Balance[this] := 0;
[L2186]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2187]  COND FALSE  !(revert)
[L3242]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3243]  COND TRUE   revert
[L1125]  RET         call YFV_YFV__success(this, msgsender_MSG, msgvalue_MSG);
[L1126]              assume !revert && gas >= 0;
[L4987]  RET         call YFV_YFV(this, msgsender_MSG, msgvalue_MSG);
[L4988]              assume !revert && gas >= 0;

Loop:
[L4991]  CALL        call CorralChoice_YFV(this);
[L4804]              havoc msgsender_MSG;
[L4805]              havoc msgvalue_MSG;
[L4806]              havoc choice;
[L4807]              havoc __ret_0_totalSupply;
[L4808]              havoc account_s121;
[L4809]              havoc __ret_0_balanceOf;
[L4810]              havoc recipient_s140;
[L4811]              havoc amount_s140;
[L4812]              havoc __ret_0_transfer;
[L4813]              havoc owner_s156;
[L4814]              havoc spender_s156;
[L4815]              havoc __ret_0_allowance;
[L4816]              havoc spender_s175;
[L4817]              havoc amount_s175;
[L4818]              havoc __ret_0_approve;
[L4819]              havoc sender_s211;
[L4820]              havoc recipient_s211;
[L4821]              havoc amount_s211;
[L4822]              havoc __ret_0_transferFrom;
[L4823]              havoc spender_s238;
[L4824]              havoc addedValue_s238;
[L4825]              havoc __ret_0_increaseAllowance;
[L4826]              havoc spender_s266;
[L4827]              havoc subtractedValue_s266;
[L4828]              havoc __ret_0_decreaseAllowance;
[L4829]              havoc name_s484;
[L4830]              havoc symbol_s484;
[L4831]              havoc decimals_s484;
[L4832]              havoc __ret_0_name;
[L4833]              havoc __ret_0_symbol;
[L4834]              havoc __ret_0_decimals;
[L4835]              havoc __ret_0_governance;
[L4836]              havoc arg744_s0;
[L4837]              havoc __ret_0_minters;
[L4838]              havoc account_s671;
[L4839]              havoc amount_s671;
[L4840]              havoc amount_s683;
[L4841]              havoc _governance_s701;
[L4842]              havoc _minter_s721;
[L4843]              havoc _minter_s741;
[L4844]              havoc tmpNow;
[L4845]              havoc gas;
[L4846]              assume gas > 4000000 && gas <= 8000000;
[L4847]              tmpNow := now;
[L4848]              havoc now;
[L4849]              assume now > tmpNow;
[L4850]              assume msgsender_MSG != null;
[L4851]              assume DType[msgsender_MSG] != IERC20;
[L4852]              assume DType[msgsender_MSG] != Context;
[L4853]              assume DType[msgsender_MSG] != ERC20;
[L4854]              assume DType[msgsender_MSG] != ERC20Detailed;
[L4855]              assume DType[msgsender_MSG] != SafeMath;
[L4856]              assume DType[msgsender_MSG] != YFV;
[L4857]              Alloc[msgsender_MSG] := true;
[L4858]  COND TRUE   choice == 18
[L4859]              gas := gas - 21000;
[L4860]  COND FALSE  !(gas >= 0)
[L4991]  RET         call CorralChoice_YFV(this);

[2020-11-25 09:36:55,481 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 09:36:55,481 INFO  L82        PathProgramCache]: Analyzing trace with hash 669041281, now seen corresponding path program 1 times
[2020-11-25 09:36:55,485 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 09:36:55,509 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 09:36:55,551 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 09:36:55,553 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 09:36:55,553 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [4] imperfect sequences [] total 4
[2020-11-25 09:36:55,777 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 09:36:55,790 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-11-25 09:36:55,790 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=5, Invalid=7, Unknown=0, NotChecked=0, Total=12
[2020-11-25 09:36:55,791 INFO  L87              Difference]: Start difference. First operand 4478 states. Second operand 4 states.
[2020-11-25 09:36:57,069 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 09:36:57,070 INFO  L93              Difference]: Finished difference Result 4626 states and 7513 transitions.
[2020-11-25 09:36:57,070 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 4 states. 
[2020-11-25 09:36:57,071 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 4626 states and 7513 transitions.
[2020-11-25 09:36:57,105 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 6
[2020-11-25 09:36:57,146 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 4626 states to 4406 states and 7159 transitions.
[2020-11-25 09:36:57,146 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 13
[2020-11-25 09:36:57,151 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1198
[2020-11-25 09:36:57,151 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 4406 states and 7159 transitions.
[2020-11-25 09:36:57,170 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 09:36:57,170 INFO  L728         BuchiCegarLoop]: Abstraction has 4406 states and 7159 transitions.
[2020-11-25 09:36:57,185 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 4406 states and 7159 transitions.
[2020-11-25 09:36:57,243 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 4406 to 3420.
[2020-11-25 09:36:57,243 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 3420 states.
[2020-11-25 09:36:57,249 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 3420 states to 3420 states and 5333 transitions.
[2020-11-25 09:36:57,250 INFO  L751         BuchiCegarLoop]: Abstraction has 3420 states and 5333 transitions.
[2020-11-25 09:36:57,251 INFO  L631         BuchiCegarLoop]: Abstraction has 3420 states and 5333 transitions.
[2020-11-25 09:36:57,251 INFO  L445         BuchiCegarLoop]: ======== Iteration 2============
[2020-11-25 09:36:57,251 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 3420 states and 5333 transitions.
[2020-11-25 09:36:57,260 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 09:36:57,261 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 09:36:57,261 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 09:36:57,263 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [3, 3, 3, 3, 3, 3, 3, 3, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 09:36:57,263 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_ERC200 := false;
[L2]                 call_transfer_ERC200 := false;
[L2]     CALL        call main();
[L4981]              assume null == 0;
[L4982]  CALL        call this := FreshRefGenerator__success();
[L2122]              havoc newRef;
[L2123]              assume Alloc[newRef] == false;
[L2124]              Alloc[newRef] := true;
[L2125]              assume newRef != null;
[L4982]  RET         call this := FreshRefGenerator__success();
[L4983]              assume now >= 0;
[L4984]              assume DType[this] == YFV;
[L4985]              assume msgvalue_MSG == 0;
[L4986]              gas := gas - 53000;
[L4987]  CALL        call YFV_YFV(this, msgsender_MSG, msgvalue_MSG);
[L1098]              havoc __exception;
[L1099]              revert := false;
[L1100]  COND FALSE  !(__exception)
[L1125]  CALL        call YFV_YFV__success(this, msgsender_MSG, msgvalue_MSG);
[L3242]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2186]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2171]              assume msgsender_MSG != null;
[L2172]              Balance[this] := 0;
[L2186]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2187]  COND FALSE  !(revert)
[L3242]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3243]  COND FALSE  !(revert)
[L3246]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2154]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2139]              assume msgsender_MSG != null;
[L2140]              Balance[this] := 0;
[L2154]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2155]  COND FALSE  !(revert)
[L3246]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3247]  COND FALSE  !(revert)
[L3250]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2248]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2186]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2171]              assume msgsender_MSG != null;
[L2172]              Balance[this] := 0;
[L2186]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2187]  COND FALSE  !(revert)
[L2248]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2249]  COND FALSE  !(revert)
[L2252]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2154]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2139]              assume msgsender_MSG != null;
[L2140]              Balance[this] := 0;
[L2154]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2155]  COND FALSE  !(revert)
[L2252]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2253]  COND FALSE  !(revert)
[L2256]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2220]              assume msgsender_MSG != null;
[L2221]              Balance[this] := 0;
[L2222]              _balances_ERC20[this] := zeroRefintArr();
[L2223]              sum__balances0[this] := 0;
[L2224]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2225]              sum__allowances1[this] := 0;
[L2226]              _totalSupply_ERC20[this] := 0;
[L2256]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2257]  COND FALSE  !(revert)
[L3250]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3251]  COND FALSE  !(revert)
[L3254]  CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -868984158, 934069305, 18);
[L3012]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2154]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2139]              assume msgsender_MSG != null;
[L2140]              Balance[this] := 0;
[L2154]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2155]  COND FALSE  !(revert)
[L3012]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3013]  COND FALSE  !(revert)
[L3016]  CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s484, symbol_s484, decimals_s484);
[L2987]              assume msgsender_MSG != null;
[L2988]              Balance[this] := 0;
[L2989]              _name_ERC20Detailed[this] := 1252836592;
[L2990]              _symbol_ERC20Detailed[this] := 1252836592;
[L2991]              _decimals_ERC20Detailed[this] := 0;
[L2993]              _name_ERC20Detailed[this] := name_s484;
[L2994]              _symbol_ERC20Detailed[this] := symbol_s484;
[L2995]              _decimals_ERC20Detailed[this] := decimals_s484;
[L3016]  RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s484, symbol_s484, decimals_s484);
[L3017]  COND FALSE  !(revert)
[L3254]  RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -868984158, 934069305, 18);
[L3255]  COND FALSE  !(revert)
[L3258]  CALL        call YFV_YFV_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3208]              assume msgsender_MSG != null;
[L3209]              Balance[this] := 0;
[L3210]              governance_YFV[this] := null;
[L3211]              minters_YFV[this] := zeroRefboolArr();
[L3213]              governance_YFV[this] := msgsender_MSG;
[L3258]  RET         call YFV_YFV_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3259]  COND FALSE  !(revert)
[L1125]  RET         call YFV_YFV__success(this, msgsender_MSG, msgvalue_MSG);
[L1126]              assume !revert && gas >= 0;
[L4987]  RET         call YFV_YFV(this, msgsender_MSG, msgvalue_MSG);
[L4988]              assume !revert && gas >= 0;

Loop:
[L4991]  CALL        call CorralChoice_YFV(this);
[L4804]              havoc msgsender_MSG;
[L4805]              havoc msgvalue_MSG;
[L4806]              havoc choice;
[L4807]              havoc __ret_0_totalSupply;
[L4808]              havoc account_s121;
[L4809]              havoc __ret_0_balanceOf;
[L4810]              havoc recipient_s140;
[L4811]              havoc amount_s140;
[L4812]              havoc __ret_0_transfer;
[L4813]              havoc owner_s156;
[L4814]              havoc spender_s156;
[L4815]              havoc __ret_0_allowance;
[L4816]              havoc spender_s175;
[L4817]              havoc amount_s175;
[L4818]              havoc __ret_0_approve;
[L4819]              havoc sender_s211;
[L4820]              havoc recipient_s211;
[L4821]              havoc amount_s211;
[L4822]              havoc __ret_0_transferFrom;
[L4823]              havoc spender_s238;
[L4824]              havoc addedValue_s238;
[L4825]              havoc __ret_0_increaseAllowance;
[L4826]              havoc spender_s266;
[L4827]              havoc subtractedValue_s266;
[L4828]              havoc __ret_0_decreaseAllowance;
[L4829]              havoc name_s484;
[L4830]              havoc symbol_s484;
[L4831]              havoc decimals_s484;
[L4832]              havoc __ret_0_name;
[L4833]              havoc __ret_0_symbol;
[L4834]              havoc __ret_0_decimals;
[L4835]              havoc __ret_0_governance;
[L4836]              havoc arg744_s0;
[L4837]              havoc __ret_0_minters;
[L4838]              havoc account_s671;
[L4839]              havoc amount_s671;
[L4840]              havoc amount_s683;
[L4841]              havoc _governance_s701;
[L4842]              havoc _minter_s721;
[L4843]              havoc _minter_s741;
[L4844]              havoc tmpNow;
[L4845]              havoc gas;
[L4846]              assume gas > 4000000 && gas <= 8000000;
[L4847]              tmpNow := now;
[L4848]              havoc now;
[L4849]              assume now > tmpNow;
[L4850]              assume msgsender_MSG != null;
[L4851]              assume DType[msgsender_MSG] != IERC20;
[L4852]              assume DType[msgsender_MSG] != Context;
[L4853]              assume DType[msgsender_MSG] != ERC20;
[L4854]              assume DType[msgsender_MSG] != ERC20Detailed;
[L4855]              assume DType[msgsender_MSG] != SafeMath;
[L4856]              assume DType[msgsender_MSG] != YFV;
[L4857]              Alloc[msgsender_MSG] := true;
[L4858]  COND TRUE   choice == 18
[L4859]              gas := gas - 21000;
[L4860]  COND FALSE  !(gas >= 0)
[L4991]  RET         call CorralChoice_YFV(this);

[2020-11-25 09:36:57,268 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 09:36:57,269 INFO  L82        PathProgramCache]: Analyzing trace with hash 79659287, now seen corresponding path program 1 times
[2020-11-25 09:36:57,270 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 09:36:57,282 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 09:36:57,301 INFO  L134       CoverageAnalysis]: Checked inductivity of 30 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 30 trivial. 0 not checked.
[2020-11-25 09:36:57,301 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 09:36:57,301 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [4] imperfect sequences [] total 4
[2020-11-25 09:36:57,302 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 09:36:57,302 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-11-25 09:36:57,302 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=5, Invalid=7, Unknown=0, NotChecked=0, Total=12
[2020-11-25 09:36:57,303 INFO  L87              Difference]: Start difference. First operand 3420 states and 5333 transitions. cyclomatic complexity: 1915 Second operand 4 states.
[2020-11-25 09:36:58,063 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 09:36:58,064 INFO  L93              Difference]: Finished difference Result 3185 states and 3548 transitions.
[2020-11-25 09:36:58,064 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 4 states. 
[2020-11-25 09:36:58,064 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 3185 states and 3548 transitions.
[2020-11-25 09:36:58,074 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 09:36:58,084 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 3185 states to 3185 states and 3548 transitions.
[2020-11-25 09:36:58,084 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 853
[2020-11-25 09:36:58,084 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 853
[2020-11-25 09:36:58,084 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 3185 states and 3548 transitions.
[2020-11-25 09:36:58,087 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 09:36:58,087 INFO  L728         BuchiCegarLoop]: Abstraction has 3185 states and 3548 transitions.
[2020-11-25 09:36:58,090 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 3185 states and 3548 transitions.
[2020-11-25 09:36:58,111 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 3185 to 3185.
[2020-11-25 09:36:58,112 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 3185 states.
[2020-11-25 09:36:58,115 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 3185 states to 3185 states and 3548 transitions.
[2020-11-25 09:36:58,115 INFO  L751         BuchiCegarLoop]: Abstraction has 3185 states and 3548 transitions.
[2020-11-25 09:36:58,115 INFO  L631         BuchiCegarLoop]: Abstraction has 3185 states and 3548 transitions.
[2020-11-25 09:36:58,116 INFO  L445         BuchiCegarLoop]: ======== Iteration 3============
[2020-11-25 09:36:58,116 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 3185 states and 3548 transitions.
[2020-11-25 09:36:58,149 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 09:36:58,149 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 09:36:58,150 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 09:36:58,153 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 09:36:58,153 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_ERC200 := false;
[L2]                 call_transfer_ERC200 := false;
[L2]     CALL        call main();
[L4981]              assume null == 0;
[L4982]  CALL        call this := FreshRefGenerator__success();
[L2122]              havoc newRef;
[L2123]              assume Alloc[newRef] == false;
[L2124]              Alloc[newRef] := true;
[L2125]              assume newRef != null;
[L4982]  RET         call this := FreshRefGenerator__success();
[L4983]              assume now >= 0;
[L4984]              assume DType[this] == YFV;
[L4985]              assume msgvalue_MSG == 0;
[L4986]              gas := gas - 53000;
[L4987]  CALL        call YFV_YFV(this, msgsender_MSG, msgvalue_MSG);
[L1098]              havoc __exception;
[L1099]              revert := false;
[L1100]  COND FALSE  !(__exception)
[L1125]  CALL        call YFV_YFV__success(this, msgsender_MSG, msgvalue_MSG);
[L3242]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2186]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2171]              assume msgsender_MSG != null;
[L2172]              Balance[this] := 0;
[L2186]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2187]  COND FALSE  !(revert)
[L3242]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3243]  COND FALSE  !(revert)
[L3246]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2154]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2139]              assume msgsender_MSG != null;
[L2140]              Balance[this] := 0;
[L2154]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2155]  COND FALSE  !(revert)
[L3246]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3247]  COND FALSE  !(revert)
[L3250]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2248]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2186]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2171]              assume msgsender_MSG != null;
[L2172]              Balance[this] := 0;
[L2186]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2187]  COND FALSE  !(revert)
[L2248]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2249]  COND FALSE  !(revert)
[L2252]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2154]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2139]              assume msgsender_MSG != null;
[L2140]              Balance[this] := 0;
[L2154]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2155]  COND FALSE  !(revert)
[L2252]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2253]  COND FALSE  !(revert)
[L2256]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2220]              assume msgsender_MSG != null;
[L2221]              Balance[this] := 0;
[L2222]              _balances_ERC20[this] := zeroRefintArr();
[L2223]              sum__balances0[this] := 0;
[L2224]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2225]              sum__allowances1[this] := 0;
[L2226]              _totalSupply_ERC20[this] := 0;
[L2256]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2257]  COND FALSE  !(revert)
[L3250]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3251]  COND FALSE  !(revert)
[L3254]  CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -868984158, 934069305, 18);
[L3012]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2154]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2139]              assume msgsender_MSG != null;
[L2140]              Balance[this] := 0;
[L2154]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2155]  COND FALSE  !(revert)
[L3012]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3013]  COND FALSE  !(revert)
[L3016]  CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s484, symbol_s484, decimals_s484);
[L2987]              assume msgsender_MSG != null;
[L2988]              Balance[this] := 0;
[L2989]              _name_ERC20Detailed[this] := 1252836592;
[L2990]              _symbol_ERC20Detailed[this] := 1252836592;
[L2991]              _decimals_ERC20Detailed[this] := 0;
[L2993]              _name_ERC20Detailed[this] := name_s484;
[L2994]              _symbol_ERC20Detailed[this] := symbol_s484;
[L2995]              _decimals_ERC20Detailed[this] := decimals_s484;
[L3016]  RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s484, symbol_s484, decimals_s484);
[L3017]  COND FALSE  !(revert)
[L3254]  RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -868984158, 934069305, 18);
[L3255]  COND FALSE  !(revert)
[L3258]  CALL        call YFV_YFV_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3208]              assume msgsender_MSG != null;
[L3209]              Balance[this] := 0;
[L3210]              governance_YFV[this] := null;
[L3211]              minters_YFV[this] := zeroRefboolArr();
[L3213]              governance_YFV[this] := msgsender_MSG;
[L3258]  RET         call YFV_YFV_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3259]  COND FALSE  !(revert)
[L1125]  RET         call YFV_YFV__success(this, msgsender_MSG, msgvalue_MSG);
[L1126]              assume !revert && gas >= 0;
[L4987]  RET         call YFV_YFV(this, msgsender_MSG, msgvalue_MSG);
[L4988]              assume !revert && gas >= 0;
[L4991]  CALL        call CorralChoice_YFV(this);
[L4804]              havoc msgsender_MSG;
[L4805]              havoc msgvalue_MSG;
[L4806]              havoc choice;
[L4807]              havoc __ret_0_totalSupply;
[L4808]              havoc account_s121;
[L4809]              havoc __ret_0_balanceOf;
[L4810]              havoc recipient_s140;
[L4811]              havoc amount_s140;
[L4812]              havoc __ret_0_transfer;
[L4813]              havoc owner_s156;
[L4814]              havoc spender_s156;
[L4815]              havoc __ret_0_allowance;
[L4816]              havoc spender_s175;
[L4817]              havoc amount_s175;
[L4818]              havoc __ret_0_approve;
[L4819]              havoc sender_s211;
[L4820]              havoc recipient_s211;
[L4821]              havoc amount_s211;
[L4822]              havoc __ret_0_transferFrom;
[L4823]              havoc spender_s238;
[L4824]              havoc addedValue_s238;
[L4825]              havoc __ret_0_increaseAllowance;
[L4826]              havoc spender_s266;
[L4827]              havoc subtractedValue_s266;
[L4828]              havoc __ret_0_decreaseAllowance;
[L4829]              havoc name_s484;
[L4830]              havoc symbol_s484;
[L4831]              havoc decimals_s484;
[L4832]              havoc __ret_0_name;
[L4833]              havoc __ret_0_symbol;
[L4834]              havoc __ret_0_decimals;
[L4835]              havoc __ret_0_governance;
[L4836]              havoc arg744_s0;
[L4837]              havoc __ret_0_minters;
[L4838]              havoc account_s671;
[L4839]              havoc amount_s671;
[L4840]              havoc amount_s683;
[L4841]              havoc _governance_s701;
[L4842]              havoc _minter_s721;
[L4843]              havoc _minter_s741;
[L4844]              havoc tmpNow;
[L4845]              havoc gas;
[L4846]              assume gas > 4000000 && gas <= 8000000;
[L4847]              tmpNow := now;
[L4848]              havoc now;
[L4849]              assume now > tmpNow;
[L4850]              assume msgsender_MSG != null;
[L4851]              assume DType[msgsender_MSG] != IERC20;
[L4852]              assume DType[msgsender_MSG] != Context;
[L4853]              assume DType[msgsender_MSG] != ERC20;
[L4854]              assume DType[msgsender_MSG] != ERC20Detailed;
[L4855]              assume DType[msgsender_MSG] != SafeMath;
[L4856]              assume DType[msgsender_MSG] != YFV;
[L4857]              Alloc[msgsender_MSG] := true;
[L4858]  COND FALSE  !(choice == 18)
[L4864]  COND FALSE  !(choice == 17)
[L4870]  COND TRUE   choice == 16
[L4871]              gas := gas - 21000;
[L4872]  COND TRUE   gas >= 0
[L4873]              assume amount_s140 >= 0 && amount_s140 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4874]              assume msgvalue_MSG == 0;
[L4875]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == recipient_s140 && amount_s140 <= _balances_ERC20[this][msgsender_MSG]) && amount_s140 >= 0) && amount_s140 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s140] >= 0) && _balances_ERC20[this][recipient_s140] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC200 := true;
[L2]                 call_transfer_ERC200 := false;
[L2]                 revert := revert_hold;
[L392]               havoc __exception;
[L393]               revert := false;
[L394]   COND TRUE   __exception
[L395]               __tmp__Balance := Balance;
[L396]               __tmp__DType := DType;
[L397]               __tmp__Alloc := Alloc;
[L398]               __tmp__balance_ADDR := balance_ADDR;
[L399]               __tmp__M_Ref_int := M_Ref_int;
[L400]               __tmp__sum__balances0 := sum__balances0;
[L401]               __tmp__alloc__allowances_ERC20_lvl0 := alloc__allowances_ERC20_lvl0;
[L402]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L403]               __tmp__sum__allowances1 := sum__allowances1;
[L404]               __tmp__M_Ref_bool := M_Ref_bool;
[L405]               __tmp__sum_minters2 := sum_minters2;
[L406]               __tmp__Length := Length;
[L407]               __tmp__now := now;
[L408]               __tmp___balances_ERC20 := _balances_ERC20;
[L409]               __tmp___allowances_ERC20 := _allowances_ERC20;
[L410]               __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L411]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L412]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L413]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L414]               __tmp__governance_YFV := governance_YFV;
[L415]               __tmp__minters_YFV := minters_YFV;
[L416]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L2289]  COND TRUE   __tmp__DType[this] == YFV
[L2290]  CALL        call __var_1 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L2194]              __ret_0_ := msgsender_MSG;
[L2290]  RET         call __var_1 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L2291]  COND FALSE  !(revert)
[L2302]  COND TRUE   __tmp__DType[this] == YFV
[L2303]  CALL        call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s140, amount_s140);
[L2774]              __var_12 := null;
[L2775]  COND TRUE   !(sender_s323 != null)
[L2776]              revert := true;
[L2303]  RET         call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s140, amount_s140);
[L2304]  COND TRUE   revert
[L416]   RET         call __ret_0_ := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L417]               assume revert || gas < 0;
[L4875]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L4991]  RET         call CorralChoice_YFV(this);

Loop:
[L4991]  CALL        call CorralChoice_YFV(this);
[L4804]              havoc msgsender_MSG;
[L4805]              havoc msgvalue_MSG;
[L4806]              havoc choice;
[L4807]              havoc __ret_0_totalSupply;
[L4808]              havoc account_s121;
[L4809]              havoc __ret_0_balanceOf;
[L4810]              havoc recipient_s140;
[L4811]              havoc amount_s140;
[L4812]              havoc __ret_0_transfer;
[L4813]              havoc owner_s156;
[L4814]              havoc spender_s156;
[L4815]              havoc __ret_0_allowance;
[L4816]              havoc spender_s175;
[L4817]              havoc amount_s175;
[L4818]              havoc __ret_0_approve;
[L4819]              havoc sender_s211;
[L4820]              havoc recipient_s211;
[L4821]              havoc amount_s211;
[L4822]              havoc __ret_0_transferFrom;
[L4823]              havoc spender_s238;
[L4824]              havoc addedValue_s238;
[L4825]              havoc __ret_0_increaseAllowance;
[L4826]              havoc spender_s266;
[L4827]              havoc subtractedValue_s266;
[L4828]              havoc __ret_0_decreaseAllowance;
[L4829]              havoc name_s484;
[L4830]              havoc symbol_s484;
[L4831]              havoc decimals_s484;
[L4832]              havoc __ret_0_name;
[L4833]              havoc __ret_0_symbol;
[L4834]              havoc __ret_0_decimals;
[L4835]              havoc __ret_0_governance;
[L4836]              havoc arg744_s0;
[L4837]              havoc __ret_0_minters;
[L4838]              havoc account_s671;
[L4839]              havoc amount_s671;
[L4840]              havoc amount_s683;
[L4841]              havoc _governance_s701;
[L4842]              havoc _minter_s721;
[L4843]              havoc _minter_s741;
[L4844]              havoc tmpNow;
[L4845]              havoc gas;
[L4846]              assume gas > 4000000 && gas <= 8000000;
[L4847]              tmpNow := now;
[L4848]              havoc now;
[L4849]              assume now > tmpNow;
[L4850]              assume msgsender_MSG != null;
[L4851]              assume DType[msgsender_MSG] != IERC20;
[L4852]              assume DType[msgsender_MSG] != Context;
[L4853]              assume DType[msgsender_MSG] != ERC20;
[L4854]              assume DType[msgsender_MSG] != ERC20Detailed;
[L4855]              assume DType[msgsender_MSG] != SafeMath;
[L4856]              assume DType[msgsender_MSG] != YFV;
[L4857]              Alloc[msgsender_MSG] := true;
[L4858]  COND FALSE  !(choice == 18)
[L4864]  COND FALSE  !(choice == 17)
[L4870]  COND TRUE   choice == 16
[L4871]              gas := gas - 21000;
[L4872]  COND TRUE   gas >= 0
[L4873]              assume amount_s140 >= 0 && amount_s140 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4874]              assume msgvalue_MSG == 0;
[L4875]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == recipient_s140 && amount_s140 <= _balances_ERC20[this][msgsender_MSG]) && amount_s140 >= 0) && amount_s140 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s140] >= 0) && _balances_ERC20[this][recipient_s140] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC200 := true;
[L2]                 call_transfer_ERC200 := false;
[L2]                 revert := revert_hold;
[L392]               havoc __exception;
[L393]               revert := false;
[L394]   COND TRUE   __exception
[L395]               __tmp__Balance := Balance;
[L396]               __tmp__DType := DType;
[L397]               __tmp__Alloc := Alloc;
[L398]               __tmp__balance_ADDR := balance_ADDR;
[L399]               __tmp__M_Ref_int := M_Ref_int;
[L400]               __tmp__sum__balances0 := sum__balances0;
[L401]               __tmp__alloc__allowances_ERC20_lvl0 := alloc__allowances_ERC20_lvl0;
[L402]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L403]               __tmp__sum__allowances1 := sum__allowances1;
[L404]               __tmp__M_Ref_bool := M_Ref_bool;
[L405]               __tmp__sum_minters2 := sum_minters2;
[L406]               __tmp__Length := Length;
[L407]               __tmp__now := now;
[L408]               __tmp___balances_ERC20 := _balances_ERC20;
[L409]               __tmp___allowances_ERC20 := _allowances_ERC20;
[L410]               __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L411]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L412]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L413]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L414]               __tmp__governance_YFV := governance_YFV;
[L415]               __tmp__minters_YFV := minters_YFV;
[L416]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L2289]  COND TRUE   __tmp__DType[this] == YFV
[L2290]  CALL        call __var_1 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L2194]              __ret_0_ := msgsender_MSG;
[L2290]  RET         call __var_1 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L2291]  COND FALSE  !(revert)
[L2302]  COND TRUE   __tmp__DType[this] == YFV
[L2303]  CALL        call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s140, amount_s140);
[L2774]              __var_12 := null;
[L2775]  COND TRUE   !(sender_s323 != null)
[L2776]              revert := true;
[L2303]  RET         call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s140, amount_s140);
[L2304]  COND TRUE   revert
[L416]   RET         call __ret_0_ := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L417]               assume revert || gas < 0;
[L4875]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L4991]  RET         call CorralChoice_YFV(this);

[2020-11-25 09:36:58,180 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 09:36:58,180 INFO  L82        PathProgramCache]: Analyzing trace with hash -2002898084, now seen corresponding path program 1 times
[2020-11-25 09:36:58,181 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 09:36:58,192 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 09:36:58,249 INFO  L134       CoverageAnalysis]: Checked inductivity of 40 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 40 trivial. 0 not checked.
[2020-11-25 09:36:58,249 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 09:36:58,249 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [8] imperfect sequences [] total 8
[2020-11-25 09:36:58,249 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 09:36:58,249 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 8 interpolants.
[2020-11-25 09:36:58,249 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=13, Invalid=43, Unknown=0, NotChecked=0, Total=56
[2020-11-25 09:36:58,250 INFO  L87              Difference]: Start difference. First operand 3185 states and 3548 transitions. cyclomatic complexity: 365 Second operand 8 states.
[2020-11-25 09:36:58,328 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 09:36:58,328 INFO  L93              Difference]: Finished difference Result 3209 states and 3576 transitions.
[2020-11-25 09:36:58,328 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 8 states. 
[2020-11-25 09:36:58,329 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 3209 states and 3576 transitions.
[2020-11-25 09:36:58,334 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 09:36:58,341 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 3209 states to 3189 states and 3554 transitions.
[2020-11-25 09:36:58,341 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 855
[2020-11-25 09:36:58,342 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 855
[2020-11-25 09:36:58,342 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 3189 states and 3554 transitions.
[2020-11-25 09:36:58,344 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 09:36:58,344 INFO  L728         BuchiCegarLoop]: Abstraction has 3189 states and 3554 transitions.
[2020-11-25 09:36:58,347 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 3189 states and 3554 transitions.
[2020-11-25 09:36:58,364 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 3189 to 3189.
[2020-11-25 09:36:58,364 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 3189 states.
[2020-11-25 09:36:58,366 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 3189 states to 3189 states and 3554 transitions.
[2020-11-25 09:36:58,367 INFO  L751         BuchiCegarLoop]: Abstraction has 3189 states and 3554 transitions.
[2020-11-25 09:36:58,367 INFO  L631         BuchiCegarLoop]: Abstraction has 3189 states and 3554 transitions.
[2020-11-25 09:36:58,367 INFO  L445         BuchiCegarLoop]: ======== Iteration 4============
[2020-11-25 09:36:58,367 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 3189 states and 3554 transitions.
[2020-11-25 09:36:58,370 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 09:36:58,370 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 09:36:58,370 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 09:36:58,372 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 09:36:58,372 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_ERC200 := false;
[L2]                 call_transfer_ERC200 := false;
[L2]     CALL        call main();
[L4981]              assume null == 0;
[L4982]  CALL        call this := FreshRefGenerator__success();
[L2122]              havoc newRef;
[L2123]              assume Alloc[newRef] == false;
[L2124]              Alloc[newRef] := true;
[L2125]              assume newRef != null;
[L4982]  RET         call this := FreshRefGenerator__success();
[L4983]              assume now >= 0;
[L4984]              assume DType[this] == YFV;
[L4985]              assume msgvalue_MSG == 0;
[L4986]              gas := gas - 53000;
[L4987]  CALL        call YFV_YFV(this, msgsender_MSG, msgvalue_MSG);
[L1098]              havoc __exception;
[L1099]              revert := false;
[L1100]  COND FALSE  !(__exception)
[L1125]  CALL        call YFV_YFV__success(this, msgsender_MSG, msgvalue_MSG);
[L3242]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2186]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2171]              assume msgsender_MSG != null;
[L2172]              Balance[this] := 0;
[L2186]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2187]  COND FALSE  !(revert)
[L3242]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3243]  COND FALSE  !(revert)
[L3246]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2154]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2139]              assume msgsender_MSG != null;
[L2140]              Balance[this] := 0;
[L2154]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2155]  COND FALSE  !(revert)
[L3246]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3247]  COND FALSE  !(revert)
[L3250]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2248]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2186]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2171]              assume msgsender_MSG != null;
[L2172]              Balance[this] := 0;
[L2186]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2187]  COND FALSE  !(revert)
[L2248]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2249]  COND FALSE  !(revert)
[L2252]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2154]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2139]              assume msgsender_MSG != null;
[L2140]              Balance[this] := 0;
[L2154]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2155]  COND FALSE  !(revert)
[L2252]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2253]  COND FALSE  !(revert)
[L2256]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2220]              assume msgsender_MSG != null;
[L2221]              Balance[this] := 0;
[L2222]              _balances_ERC20[this] := zeroRefintArr();
[L2223]              sum__balances0[this] := 0;
[L2224]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2225]              sum__allowances1[this] := 0;
[L2226]              _totalSupply_ERC20[this] := 0;
[L2256]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2257]  COND FALSE  !(revert)
[L3250]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3251]  COND FALSE  !(revert)
[L3254]  CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -868984158, 934069305, 18);
[L3012]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2154]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2139]              assume msgsender_MSG != null;
[L2140]              Balance[this] := 0;
[L2154]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2155]  COND FALSE  !(revert)
[L3012]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3013]  COND FALSE  !(revert)
[L3016]  CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s484, symbol_s484, decimals_s484);
[L2987]              assume msgsender_MSG != null;
[L2988]              Balance[this] := 0;
[L2989]              _name_ERC20Detailed[this] := 1252836592;
[L2990]              _symbol_ERC20Detailed[this] := 1252836592;
[L2991]              _decimals_ERC20Detailed[this] := 0;
[L2993]              _name_ERC20Detailed[this] := name_s484;
[L2994]              _symbol_ERC20Detailed[this] := symbol_s484;
[L2995]              _decimals_ERC20Detailed[this] := decimals_s484;
[L3016]  RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s484, symbol_s484, decimals_s484);
[L3017]  COND FALSE  !(revert)
[L3254]  RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -868984158, 934069305, 18);
[L3255]  COND FALSE  !(revert)
[L3258]  CALL        call YFV_YFV_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3208]              assume msgsender_MSG != null;
[L3209]              Balance[this] := 0;
[L3210]              governance_YFV[this] := null;
[L3211]              minters_YFV[this] := zeroRefboolArr();
[L3213]              governance_YFV[this] := msgsender_MSG;
[L3258]  RET         call YFV_YFV_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3259]  COND FALSE  !(revert)
[L1125]  RET         call YFV_YFV__success(this, msgsender_MSG, msgvalue_MSG);
[L1126]              assume !revert && gas >= 0;
[L4987]  RET         call YFV_YFV(this, msgsender_MSG, msgvalue_MSG);
[L4988]              assume !revert && gas >= 0;
[L4991]  CALL        call CorralChoice_YFV(this);
[L4804]              havoc msgsender_MSG;
[L4805]              havoc msgvalue_MSG;
[L4806]              havoc choice;
[L4807]              havoc __ret_0_totalSupply;
[L4808]              havoc account_s121;
[L4809]              havoc __ret_0_balanceOf;
[L4810]              havoc recipient_s140;
[L4811]              havoc amount_s140;
[L4812]              havoc __ret_0_transfer;
[L4813]              havoc owner_s156;
[L4814]              havoc spender_s156;
[L4815]              havoc __ret_0_allowance;
[L4816]              havoc spender_s175;
[L4817]              havoc amount_s175;
[L4818]              havoc __ret_0_approve;
[L4819]              havoc sender_s211;
[L4820]              havoc recipient_s211;
[L4821]              havoc amount_s211;
[L4822]              havoc __ret_0_transferFrom;
[L4823]              havoc spender_s238;
[L4824]              havoc addedValue_s238;
[L4825]              havoc __ret_0_increaseAllowance;
[L4826]              havoc spender_s266;
[L4827]              havoc subtractedValue_s266;
[L4828]              havoc __ret_0_decreaseAllowance;
[L4829]              havoc name_s484;
[L4830]              havoc symbol_s484;
[L4831]              havoc decimals_s484;
[L4832]              havoc __ret_0_name;
[L4833]              havoc __ret_0_symbol;
[L4834]              havoc __ret_0_decimals;
[L4835]              havoc __ret_0_governance;
[L4836]              havoc arg744_s0;
[L4837]              havoc __ret_0_minters;
[L4838]              havoc account_s671;
[L4839]              havoc amount_s671;
[L4840]              havoc amount_s683;
[L4841]              havoc _governance_s701;
[L4842]              havoc _minter_s721;
[L4843]              havoc _minter_s741;
[L4844]              havoc tmpNow;
[L4845]              havoc gas;
[L4846]              assume gas > 4000000 && gas <= 8000000;
[L4847]              tmpNow := now;
[L4848]              havoc now;
[L4849]              assume now > tmpNow;
[L4850]              assume msgsender_MSG != null;
[L4851]              assume DType[msgsender_MSG] != IERC20;
[L4852]              assume DType[msgsender_MSG] != Context;
[L4853]              assume DType[msgsender_MSG] != ERC20;
[L4854]              assume DType[msgsender_MSG] != ERC20Detailed;
[L4855]              assume DType[msgsender_MSG] != SafeMath;
[L4856]              assume DType[msgsender_MSG] != YFV;
[L4857]              Alloc[msgsender_MSG] := true;
[L4858]  COND FALSE  !(choice == 18)
[L4864]  COND FALSE  !(choice == 17)
[L4870]  COND TRUE   choice == 16
[L4871]              gas := gas - 21000;
[L4872]  COND TRUE   gas >= 0
[L4873]              assume amount_s140 >= 0 && amount_s140 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4874]              assume msgvalue_MSG == 0;
[L4875]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == recipient_s140 && amount_s140 <= _balances_ERC20[this][msgsender_MSG]) && amount_s140 >= 0) && amount_s140 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s140] >= 0) && _balances_ERC20[this][recipient_s140] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC200 := true;
[L2]                 call_transfer_ERC200 := false;
[L2]                 revert := revert_hold;
[L392]               havoc __exception;
[L393]               revert := false;
[L394]   COND TRUE   __exception
[L395]               __tmp__Balance := Balance;
[L396]               __tmp__DType := DType;
[L397]               __tmp__Alloc := Alloc;
[L398]               __tmp__balance_ADDR := balance_ADDR;
[L399]               __tmp__M_Ref_int := M_Ref_int;
[L400]               __tmp__sum__balances0 := sum__balances0;
[L401]               __tmp__alloc__allowances_ERC20_lvl0 := alloc__allowances_ERC20_lvl0;
[L402]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L403]               __tmp__sum__allowances1 := sum__allowances1;
[L404]               __tmp__M_Ref_bool := M_Ref_bool;
[L405]               __tmp__sum_minters2 := sum_minters2;
[L406]               __tmp__Length := Length;
[L407]               __tmp__now := now;
[L408]               __tmp___balances_ERC20 := _balances_ERC20;
[L409]               __tmp___allowances_ERC20 := _allowances_ERC20;
[L410]               __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L411]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L412]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L413]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L414]               __tmp__governance_YFV := governance_YFV;
[L415]               __tmp__minters_YFV := minters_YFV;
[L416]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L2289]  COND TRUE   __tmp__DType[this] == YFV
[L2290]  CALL        call __var_1 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L2194]              __ret_0_ := msgsender_MSG;
[L2290]  RET         call __var_1 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L2291]  COND FALSE  !(revert)
[L2302]  COND TRUE   __tmp__DType[this] == YFV
[L2303]  CALL        call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s140, amount_s140);
[L2774]              __var_12 := null;
[L2775]  COND FALSE  !(!(sender_s323 != null))
[L2779]              __var_13 := null;
[L2780]  COND TRUE   !(recipient_s323 != null)
[L2781]              revert := true;
[L2303]  RET         call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s140, amount_s140);
[L2304]  COND TRUE   revert
[L416]   RET         call __ret_0_ := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L417]               assume revert || gas < 0;
[L4875]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L4991]  RET         call CorralChoice_YFV(this);

Loop:
[L4991]  CALL        call CorralChoice_YFV(this);
[L4804]              havoc msgsender_MSG;
[L4805]              havoc msgvalue_MSG;
[L4806]              havoc choice;
[L4807]              havoc __ret_0_totalSupply;
[L4808]              havoc account_s121;
[L4809]              havoc __ret_0_balanceOf;
[L4810]              havoc recipient_s140;
[L4811]              havoc amount_s140;
[L4812]              havoc __ret_0_transfer;
[L4813]              havoc owner_s156;
[L4814]              havoc spender_s156;
[L4815]              havoc __ret_0_allowance;
[L4816]              havoc spender_s175;
[L4817]              havoc amount_s175;
[L4818]              havoc __ret_0_approve;
[L4819]              havoc sender_s211;
[L4820]              havoc recipient_s211;
[L4821]              havoc amount_s211;
[L4822]              havoc __ret_0_transferFrom;
[L4823]              havoc spender_s238;
[L4824]              havoc addedValue_s238;
[L4825]              havoc __ret_0_increaseAllowance;
[L4826]              havoc spender_s266;
[L4827]              havoc subtractedValue_s266;
[L4828]              havoc __ret_0_decreaseAllowance;
[L4829]              havoc name_s484;
[L4830]              havoc symbol_s484;
[L4831]              havoc decimals_s484;
[L4832]              havoc __ret_0_name;
[L4833]              havoc __ret_0_symbol;
[L4834]              havoc __ret_0_decimals;
[L4835]              havoc __ret_0_governance;
[L4836]              havoc arg744_s0;
[L4837]              havoc __ret_0_minters;
[L4838]              havoc account_s671;
[L4839]              havoc amount_s671;
[L4840]              havoc amount_s683;
[L4841]              havoc _governance_s701;
[L4842]              havoc _minter_s721;
[L4843]              havoc _minter_s741;
[L4844]              havoc tmpNow;
[L4845]              havoc gas;
[L4846]              assume gas > 4000000 && gas <= 8000000;
[L4847]              tmpNow := now;
[L4848]              havoc now;
[L4849]              assume now > tmpNow;
[L4850]              assume msgsender_MSG != null;
[L4851]              assume DType[msgsender_MSG] != IERC20;
[L4852]              assume DType[msgsender_MSG] != Context;
[L4853]              assume DType[msgsender_MSG] != ERC20;
[L4854]              assume DType[msgsender_MSG] != ERC20Detailed;
[L4855]              assume DType[msgsender_MSG] != SafeMath;
[L4856]              assume DType[msgsender_MSG] != YFV;
[L4857]              Alloc[msgsender_MSG] := true;
[L4858]  COND FALSE  !(choice == 18)
[L4864]  COND FALSE  !(choice == 17)
[L4870]  COND TRUE   choice == 16
[L4871]              gas := gas - 21000;
[L4872]  COND TRUE   gas >= 0
[L4873]              assume amount_s140 >= 0 && amount_s140 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4874]              assume msgvalue_MSG == 0;
[L4875]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == recipient_s140 && amount_s140 <= _balances_ERC20[this][msgsender_MSG]) && amount_s140 >= 0) && amount_s140 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s140] >= 0) && _balances_ERC20[this][recipient_s140] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC200 := true;
[L2]                 call_transfer_ERC200 := false;
[L2]                 revert := revert_hold;
[L392]               havoc __exception;
[L393]               revert := false;
[L394]   COND TRUE   __exception
[L395]               __tmp__Balance := Balance;
[L396]               __tmp__DType := DType;
[L397]               __tmp__Alloc := Alloc;
[L398]               __tmp__balance_ADDR := balance_ADDR;
[L399]               __tmp__M_Ref_int := M_Ref_int;
[L400]               __tmp__sum__balances0 := sum__balances0;
[L401]               __tmp__alloc__allowances_ERC20_lvl0 := alloc__allowances_ERC20_lvl0;
[L402]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L403]               __tmp__sum__allowances1 := sum__allowances1;
[L404]               __tmp__M_Ref_bool := M_Ref_bool;
[L405]               __tmp__sum_minters2 := sum_minters2;
[L406]               __tmp__Length := Length;
[L407]               __tmp__now := now;
[L408]               __tmp___balances_ERC20 := _balances_ERC20;
[L409]               __tmp___allowances_ERC20 := _allowances_ERC20;
[L410]               __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L411]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L412]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L413]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L414]               __tmp__governance_YFV := governance_YFV;
[L415]               __tmp__minters_YFV := minters_YFV;
[L416]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L2289]  COND TRUE   __tmp__DType[this] == YFV
[L2290]  CALL        call __var_1 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L2194]              __ret_0_ := msgsender_MSG;
[L2290]  RET         call __var_1 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L2291]  COND FALSE  !(revert)
[L2302]  COND TRUE   __tmp__DType[this] == YFV
[L2303]  CALL        call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s140, amount_s140);
[L2774]              __var_12 := null;
[L2775]  COND FALSE  !(!(sender_s323 != null))
[L2779]              __var_13 := null;
[L2780]  COND TRUE   !(recipient_s323 != null)
[L2781]              revert := true;
[L2303]  RET         call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s140, amount_s140);
[L2304]  COND TRUE   revert
[L416]   RET         call __ret_0_ := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L417]               assume revert || gas < 0;
[L4875]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L4991]  RET         call CorralChoice_YFV(this);

[2020-11-25 09:36:58,375 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 09:36:58,375 INFO  L82        PathProgramCache]: Analyzing trace with hash 1066007606, now seen corresponding path program 1 times
[2020-11-25 09:36:58,376 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 09:36:58,384 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 09:36:58,418 INFO  L134       CoverageAnalysis]: Checked inductivity of 40 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 40 trivial. 0 not checked.
[2020-11-25 09:36:58,418 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 09:36:58,418 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [7] imperfect sequences [] total 7
[2020-11-25 09:36:58,419 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 09:36:58,419 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 7 interpolants.
[2020-11-25 09:36:58,419 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=11, Invalid=31, Unknown=0, NotChecked=0, Total=42
[2020-11-25 09:36:58,419 INFO  L87              Difference]: Start difference. First operand 3189 states and 3554 transitions. cyclomatic complexity: 367 Second operand 7 states.
[2020-11-25 09:36:58,475 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 09:36:58,475 INFO  L93              Difference]: Finished difference Result 3289 states and 3667 transitions.
[2020-11-25 09:36:58,476 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 7 states. 
[2020-11-25 09:36:58,476 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 3289 states and 3667 transitions.
[2020-11-25 09:36:58,482 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 09:36:58,491 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 3289 states to 3281 states and 3659 transitions.
[2020-11-25 09:36:58,491 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 874
[2020-11-25 09:36:58,491 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 874
[2020-11-25 09:36:58,491 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 3281 states and 3659 transitions.
[2020-11-25 09:36:58,494 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 09:36:58,494 INFO  L728         BuchiCegarLoop]: Abstraction has 3281 states and 3659 transitions.
[2020-11-25 09:36:58,497 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 3281 states and 3659 transitions.
[2020-11-25 09:36:58,522 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 3281 to 3268.
[2020-11-25 09:36:58,522 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 3268 states.
[2020-11-25 09:36:58,526 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 3268 states to 3268 states and 3644 transitions.
[2020-11-25 09:36:58,526 INFO  L751         BuchiCegarLoop]: Abstraction has 3268 states and 3644 transitions.
[2020-11-25 09:36:58,526 INFO  L631         BuchiCegarLoop]: Abstraction has 3268 states and 3644 transitions.
[2020-11-25 09:36:58,526 INFO  L445         BuchiCegarLoop]: ======== Iteration 5============
[2020-11-25 09:36:58,526 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 3268 states and 3644 transitions.
[2020-11-25 09:36:58,530 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 09:36:58,530 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 09:36:58,530 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 09:36:58,532 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 09:36:58,532 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_ERC200 := false;
[L2]                 call_transfer_ERC200 := false;
[L2]     CALL        call main();
[L4981]              assume null == 0;
[L4982]  CALL        call this := FreshRefGenerator__success();
[L2122]              havoc newRef;
[L2123]              assume Alloc[newRef] == false;
[L2124]              Alloc[newRef] := true;
[L2125]              assume newRef != null;
[L4982]  RET         call this := FreshRefGenerator__success();
[L4983]              assume now >= 0;
[L4984]              assume DType[this] == YFV;
[L4985]              assume msgvalue_MSG == 0;
[L4986]              gas := gas - 53000;
[L4987]  CALL        call YFV_YFV(this, msgsender_MSG, msgvalue_MSG);
[L1098]              havoc __exception;
[L1099]              revert := false;
[L1100]  COND FALSE  !(__exception)
[L1125]  CALL        call YFV_YFV__success(this, msgsender_MSG, msgvalue_MSG);
[L3242]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2186]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2171]              assume msgsender_MSG != null;
[L2172]              Balance[this] := 0;
[L2186]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2187]  COND FALSE  !(revert)
[L3242]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3243]  COND FALSE  !(revert)
[L3246]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2154]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2139]              assume msgsender_MSG != null;
[L2140]              Balance[this] := 0;
[L2154]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2155]  COND FALSE  !(revert)
[L3246]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3247]  COND FALSE  !(revert)
[L3250]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2248]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2186]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2171]              assume msgsender_MSG != null;
[L2172]              Balance[this] := 0;
[L2186]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2187]  COND FALSE  !(revert)
[L2248]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2249]  COND FALSE  !(revert)
[L2252]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2154]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2139]              assume msgsender_MSG != null;
[L2140]              Balance[this] := 0;
[L2154]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2155]  COND FALSE  !(revert)
[L2252]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2253]  COND FALSE  !(revert)
[L2256]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2220]              assume msgsender_MSG != null;
[L2221]              Balance[this] := 0;
[L2222]              _balances_ERC20[this] := zeroRefintArr();
[L2223]              sum__balances0[this] := 0;
[L2224]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2225]              sum__allowances1[this] := 0;
[L2226]              _totalSupply_ERC20[this] := 0;
[L2256]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2257]  COND FALSE  !(revert)
[L3250]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3251]  COND FALSE  !(revert)
[L3254]  CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -868984158, 934069305, 18);
[L3012]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2154]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2139]              assume msgsender_MSG != null;
[L2140]              Balance[this] := 0;
[L2154]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2155]  COND FALSE  !(revert)
[L3012]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3013]  COND FALSE  !(revert)
[L3016]  CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s484, symbol_s484, decimals_s484);
[L2987]              assume msgsender_MSG != null;
[L2988]              Balance[this] := 0;
[L2989]              _name_ERC20Detailed[this] := 1252836592;
[L2990]              _symbol_ERC20Detailed[this] := 1252836592;
[L2991]              _decimals_ERC20Detailed[this] := 0;
[L2993]              _name_ERC20Detailed[this] := name_s484;
[L2994]              _symbol_ERC20Detailed[this] := symbol_s484;
[L2995]              _decimals_ERC20Detailed[this] := decimals_s484;
[L3016]  RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s484, symbol_s484, decimals_s484);
[L3017]  COND FALSE  !(revert)
[L3254]  RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -868984158, 934069305, 18);
[L3255]  COND FALSE  !(revert)
[L3258]  CALL        call YFV_YFV_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3208]              assume msgsender_MSG != null;
[L3209]              Balance[this] := 0;
[L3210]              governance_YFV[this] := null;
[L3211]              minters_YFV[this] := zeroRefboolArr();
[L3213]              governance_YFV[this] := msgsender_MSG;
[L3258]  RET         call YFV_YFV_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3259]  COND FALSE  !(revert)
[L1125]  RET         call YFV_YFV__success(this, msgsender_MSG, msgvalue_MSG);
[L1126]              assume !revert && gas >= 0;
[L4987]  RET         call YFV_YFV(this, msgsender_MSG, msgvalue_MSG);
[L4988]              assume !revert && gas >= 0;
[L4991]  CALL        call CorralChoice_YFV(this);
[L4804]              havoc msgsender_MSG;
[L4805]              havoc msgvalue_MSG;
[L4806]              havoc choice;
[L4807]              havoc __ret_0_totalSupply;
[L4808]              havoc account_s121;
[L4809]              havoc __ret_0_balanceOf;
[L4810]              havoc recipient_s140;
[L4811]              havoc amount_s140;
[L4812]              havoc __ret_0_transfer;
[L4813]              havoc owner_s156;
[L4814]              havoc spender_s156;
[L4815]              havoc __ret_0_allowance;
[L4816]              havoc spender_s175;
[L4817]              havoc amount_s175;
[L4818]              havoc __ret_0_approve;
[L4819]              havoc sender_s211;
[L4820]              havoc recipient_s211;
[L4821]              havoc amount_s211;
[L4822]              havoc __ret_0_transferFrom;
[L4823]              havoc spender_s238;
[L4824]              havoc addedValue_s238;
[L4825]              havoc __ret_0_increaseAllowance;
[L4826]              havoc spender_s266;
[L4827]              havoc subtractedValue_s266;
[L4828]              havoc __ret_0_decreaseAllowance;
[L4829]              havoc name_s484;
[L4830]              havoc symbol_s484;
[L4831]              havoc decimals_s484;
[L4832]              havoc __ret_0_name;
[L4833]              havoc __ret_0_symbol;
[L4834]              havoc __ret_0_decimals;
[L4835]              havoc __ret_0_governance;
[L4836]              havoc arg744_s0;
[L4837]              havoc __ret_0_minters;
[L4838]              havoc account_s671;
[L4839]              havoc amount_s671;
[L4840]              havoc amount_s683;
[L4841]              havoc _governance_s701;
[L4842]              havoc _minter_s721;
[L4843]              havoc _minter_s741;
[L4844]              havoc tmpNow;
[L4845]              havoc gas;
[L4846]              assume gas > 4000000 && gas <= 8000000;
[L4847]              tmpNow := now;
[L4848]              havoc now;
[L4849]              assume now > tmpNow;
[L4850]              assume msgsender_MSG != null;
[L4851]              assume DType[msgsender_MSG] != IERC20;
[L4852]              assume DType[msgsender_MSG] != Context;
[L4853]              assume DType[msgsender_MSG] != ERC20;
[L4854]              assume DType[msgsender_MSG] != ERC20Detailed;
[L4855]              assume DType[msgsender_MSG] != SafeMath;
[L4856]              assume DType[msgsender_MSG] != YFV;
[L4857]              Alloc[msgsender_MSG] := true;
[L4858]  COND FALSE  !(choice == 18)
[L4864]  COND FALSE  !(choice == 17)
[L4870]  COND TRUE   choice == 16
[L4871]              gas := gas - 21000;
[L4872]  COND TRUE   gas >= 0
[L4873]              assume amount_s140 >= 0 && amount_s140 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4874]              assume msgvalue_MSG == 0;
[L4875]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == recipient_s140 && amount_s140 <= _balances_ERC20[this][msgsender_MSG]) && amount_s140 >= 0) && amount_s140 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s140] >= 0) && _balances_ERC20[this][recipient_s140] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC200 := true;
[L2]                 call_transfer_ERC200 := false;
[L2]                 revert := revert_hold;
[L392]               havoc __exception;
[L393]               revert := false;
[L394]   COND TRUE   __exception
[L395]               __tmp__Balance := Balance;
[L396]               __tmp__DType := DType;
[L397]               __tmp__Alloc := Alloc;
[L398]               __tmp__balance_ADDR := balance_ADDR;
[L399]               __tmp__M_Ref_int := M_Ref_int;
[L400]               __tmp__sum__balances0 := sum__balances0;
[L401]               __tmp__alloc__allowances_ERC20_lvl0 := alloc__allowances_ERC20_lvl0;
[L402]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L403]               __tmp__sum__allowances1 := sum__allowances1;
[L404]               __tmp__M_Ref_bool := M_Ref_bool;
[L405]               __tmp__sum_minters2 := sum_minters2;
[L406]               __tmp__Length := Length;
[L407]               __tmp__now := now;
[L408]               __tmp___balances_ERC20 := _balances_ERC20;
[L409]               __tmp___allowances_ERC20 := _allowances_ERC20;
[L410]               __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L411]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L412]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L413]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L414]               __tmp__governance_YFV := governance_YFV;
[L415]               __tmp__minters_YFV := minters_YFV;
[L416]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L2289]  COND TRUE   __tmp__DType[this] == YFV
[L2290]  CALL        call __var_1 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L2194]              __ret_0_ := msgsender_MSG;
[L2290]  RET         call __var_1 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L2291]  COND FALSE  !(revert)
[L2302]  COND TRUE   __tmp__DType[this] == YFV
[L2303]  CALL        call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s140, amount_s140);
[L2774]              __var_12 := null;
[L2775]  COND FALSE  !(!(sender_s323 != null))
[L2779]              __var_13 := null;
[L2780]  COND FALSE  !(!(recipient_s323 != null))
[L2784]  CALL        call __var_14 := sub~uint256~uint256~string_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][sender_s323], amount_s323, -806116454);
[L3117]  COND TRUE   !(b_s561 <= a_s561)
[L3118]              revert := true;
[L2784]  RET         call __var_14 := sub~uint256~uint256~string_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][sender_s323], amount_s323, -806116454);
[L2785]  COND TRUE   revert
[L2303]  RET         call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s140, amount_s140);
[L2304]  COND TRUE   revert
[L416]   RET         call __ret_0_ := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L417]               assume revert || gas < 0;
[L4875]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L4991]  RET         call CorralChoice_YFV(this);

Loop:
[L4991]  CALL        call CorralChoice_YFV(this);
[L4804]              havoc msgsender_MSG;
[L4805]              havoc msgvalue_MSG;
[L4806]              havoc choice;
[L4807]              havoc __ret_0_totalSupply;
[L4808]              havoc account_s121;
[L4809]              havoc __ret_0_balanceOf;
[L4810]              havoc recipient_s140;
[L4811]              havoc amount_s140;
[L4812]              havoc __ret_0_transfer;
[L4813]              havoc owner_s156;
[L4814]              havoc spender_s156;
[L4815]              havoc __ret_0_allowance;
[L4816]              havoc spender_s175;
[L4817]              havoc amount_s175;
[L4818]              havoc __ret_0_approve;
[L4819]              havoc sender_s211;
[L4820]              havoc recipient_s211;
[L4821]              havoc amount_s211;
[L4822]              havoc __ret_0_transferFrom;
[L4823]              havoc spender_s238;
[L4824]              havoc addedValue_s238;
[L4825]              havoc __ret_0_increaseAllowance;
[L4826]              havoc spender_s266;
[L4827]              havoc subtractedValue_s266;
[L4828]              havoc __ret_0_decreaseAllowance;
[L4829]              havoc name_s484;
[L4830]              havoc symbol_s484;
[L4831]              havoc decimals_s484;
[L4832]              havoc __ret_0_name;
[L4833]              havoc __ret_0_symbol;
[L4834]              havoc __ret_0_decimals;
[L4835]              havoc __ret_0_governance;
[L4836]              havoc arg744_s0;
[L4837]              havoc __ret_0_minters;
[L4838]              havoc account_s671;
[L4839]              havoc amount_s671;
[L4840]              havoc amount_s683;
[L4841]              havoc _governance_s701;
[L4842]              havoc _minter_s721;
[L4843]              havoc _minter_s741;
[L4844]              havoc tmpNow;
[L4845]              havoc gas;
[L4846]              assume gas > 4000000 && gas <= 8000000;
[L4847]              tmpNow := now;
[L4848]              havoc now;
[L4849]              assume now > tmpNow;
[L4850]              assume msgsender_MSG != null;
[L4851]              assume DType[msgsender_MSG] != IERC20;
[L4852]              assume DType[msgsender_MSG] != Context;
[L4853]              assume DType[msgsender_MSG] != ERC20;
[L4854]              assume DType[msgsender_MSG] != ERC20Detailed;
[L4855]              assume DType[msgsender_MSG] != SafeMath;
[L4856]              assume DType[msgsender_MSG] != YFV;
[L4857]              Alloc[msgsender_MSG] := true;
[L4858]  COND FALSE  !(choice == 18)
[L4864]  COND FALSE  !(choice == 17)
[L4870]  COND TRUE   choice == 16
[L4871]              gas := gas - 21000;
[L4872]  COND TRUE   gas >= 0
[L4873]              assume amount_s140 >= 0 && amount_s140 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4874]              assume msgvalue_MSG == 0;
[L4875]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == recipient_s140 && amount_s140 <= _balances_ERC20[this][msgsender_MSG]) && amount_s140 >= 0) && amount_s140 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s140] >= 0) && _balances_ERC20[this][recipient_s140] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC200 := true;
[L2]                 call_transfer_ERC200 := false;
[L2]                 revert := revert_hold;
[L392]               havoc __exception;
[L393]               revert := false;
[L394]   COND TRUE   __exception
[L395]               __tmp__Balance := Balance;
[L396]               __tmp__DType := DType;
[L397]               __tmp__Alloc := Alloc;
[L398]               __tmp__balance_ADDR := balance_ADDR;
[L399]               __tmp__M_Ref_int := M_Ref_int;
[L400]               __tmp__sum__balances0 := sum__balances0;
[L401]               __tmp__alloc__allowances_ERC20_lvl0 := alloc__allowances_ERC20_lvl0;
[L402]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L403]               __tmp__sum__allowances1 := sum__allowances1;
[L404]               __tmp__M_Ref_bool := M_Ref_bool;
[L405]               __tmp__sum_minters2 := sum_minters2;
[L406]               __tmp__Length := Length;
[L407]               __tmp__now := now;
[L408]               __tmp___balances_ERC20 := _balances_ERC20;
[L409]               __tmp___allowances_ERC20 := _allowances_ERC20;
[L410]               __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L411]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L412]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L413]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L414]               __tmp__governance_YFV := governance_YFV;
[L415]               __tmp__minters_YFV := minters_YFV;
[L416]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L2289]  COND TRUE   __tmp__DType[this] == YFV
[L2290]  CALL        call __var_1 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L2194]              __ret_0_ := msgsender_MSG;
[L2290]  RET         call __var_1 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L2291]  COND FALSE  !(revert)
[L2302]  COND TRUE   __tmp__DType[this] == YFV
[L2303]  CALL        call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s140, amount_s140);
[L2774]              __var_12 := null;
[L2775]  COND FALSE  !(!(sender_s323 != null))
[L2779]              __var_13 := null;
[L2780]  COND FALSE  !(!(recipient_s323 != null))
[L2784]  CALL        call __var_14 := sub~uint256~uint256~string_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][sender_s323], amount_s323, -806116454);
[L3117]  COND TRUE   !(b_s561 <= a_s561)
[L3118]              revert := true;
[L2784]  RET         call __var_14 := sub~uint256~uint256~string_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][sender_s323], amount_s323, -806116454);
[L2785]  COND TRUE   revert
[L2303]  RET         call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s140, amount_s140);
[L2304]  COND TRUE   revert
[L416]   RET         call __ret_0_ := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L417]               assume revert || gas < 0;
[L4875]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L4991]  RET         call CorralChoice_YFV(this);

[2020-11-25 09:36:58,535 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 09:36:58,535 INFO  L82        PathProgramCache]: Analyzing trace with hash -738849400, now seen corresponding path program 1 times
[2020-11-25 09:36:58,536 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 09:36:58,547 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 09:36:58,612 INFO  L134       CoverageAnalysis]: Checked inductivity of 40 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 40 trivial. 0 not checked.
[2020-11-25 09:36:58,612 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 09:36:58,612 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [10] imperfect sequences [] total 10
[2020-11-25 09:36:58,612 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 09:36:58,613 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 10 interpolants.
[2020-11-25 09:36:58,613 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=18, Invalid=72, Unknown=0, NotChecked=0, Total=90
[2020-11-25 09:36:58,613 INFO  L87              Difference]: Start difference. First operand 3268 states and 3644 transitions. cyclomatic complexity: 378 Second operand 10 states.
[2020-11-25 09:36:59,721 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 09:36:59,721 INFO  L93              Difference]: Finished difference Result 3439 states and 3830 transitions.
[2020-11-25 09:36:59,721 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 11 states. 
[2020-11-25 09:36:59,722 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 3439 states and 3830 transitions.
[2020-11-25 09:36:59,730 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 09:36:59,740 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 3439 states to 3439 states and 3830 transitions.
[2020-11-25 09:36:59,740 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 956
[2020-11-25 09:36:59,741 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 956
[2020-11-25 09:36:59,741 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 3439 states and 3830 transitions.
[2020-11-25 09:36:59,744 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 09:36:59,744 INFO  L728         BuchiCegarLoop]: Abstraction has 3439 states and 3830 transitions.
[2020-11-25 09:36:59,747 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 3439 states and 3830 transitions.
[2020-11-25 09:36:59,768 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 3439 to 3268.
[2020-11-25 09:36:59,768 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 3268 states.
[2020-11-25 09:36:59,771 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 3268 states to 3268 states and 3644 transitions.
[2020-11-25 09:36:59,771 INFO  L751         BuchiCegarLoop]: Abstraction has 3268 states and 3644 transitions.
[2020-11-25 09:36:59,771 INFO  L631         BuchiCegarLoop]: Abstraction has 3268 states and 3644 transitions.
[2020-11-25 09:36:59,771 INFO  L445         BuchiCegarLoop]: ======== Iteration 6============
[2020-11-25 09:36:59,771 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 3268 states and 3644 transitions.
[2020-11-25 09:36:59,775 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 09:36:59,775 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 09:36:59,775 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 09:36:59,777 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 09:36:59,777 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_ERC200 := false;
[L2]                 call_transfer_ERC200 := false;
[L2]     CALL        call main();
[L4981]              assume null == 0;
[L4982]  CALL        call this := FreshRefGenerator__success();
[L2122]              havoc newRef;
[L2123]              assume Alloc[newRef] == false;
[L2124]              Alloc[newRef] := true;
[L2125]              assume newRef != null;
[L4982]  RET         call this := FreshRefGenerator__success();
[L4983]              assume now >= 0;
[L4984]              assume DType[this] == YFV;
[L4985]              assume msgvalue_MSG == 0;
[L4986]              gas := gas - 53000;
[L4987]  CALL        call YFV_YFV(this, msgsender_MSG, msgvalue_MSG);
[L1098]              havoc __exception;
[L1099]              revert := false;
[L1100]  COND FALSE  !(__exception)
[L1125]  CALL        call YFV_YFV__success(this, msgsender_MSG, msgvalue_MSG);
[L3242]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2186]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2171]              assume msgsender_MSG != null;
[L2172]              Balance[this] := 0;
[L2186]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2187]  COND FALSE  !(revert)
[L3242]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3243]  COND FALSE  !(revert)
[L3246]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2154]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2139]              assume msgsender_MSG != null;
[L2140]              Balance[this] := 0;
[L2154]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2155]  COND FALSE  !(revert)
[L3246]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3247]  COND FALSE  !(revert)
[L3250]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2248]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2186]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2171]              assume msgsender_MSG != null;
[L2172]              Balance[this] := 0;
[L2186]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2187]  COND FALSE  !(revert)
[L2248]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2249]  COND FALSE  !(revert)
[L2252]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2154]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2139]              assume msgsender_MSG != null;
[L2140]              Balance[this] := 0;
[L2154]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2155]  COND FALSE  !(revert)
[L2252]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2253]  COND FALSE  !(revert)
[L2256]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2220]              assume msgsender_MSG != null;
[L2221]              Balance[this] := 0;
[L2222]              _balances_ERC20[this] := zeroRefintArr();
[L2223]              sum__balances0[this] := 0;
[L2224]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2225]              sum__allowances1[this] := 0;
[L2226]              _totalSupply_ERC20[this] := 0;
[L2256]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2257]  COND FALSE  !(revert)
[L3250]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3251]  COND FALSE  !(revert)
[L3254]  CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -868984158, 934069305, 18);
[L3012]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2154]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2139]              assume msgsender_MSG != null;
[L2140]              Balance[this] := 0;
[L2154]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2155]  COND FALSE  !(revert)
[L3012]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3013]  COND FALSE  !(revert)
[L3016]  CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s484, symbol_s484, decimals_s484);
[L2987]              assume msgsender_MSG != null;
[L2988]              Balance[this] := 0;
[L2989]              _name_ERC20Detailed[this] := 1252836592;
[L2990]              _symbol_ERC20Detailed[this] := 1252836592;
[L2991]              _decimals_ERC20Detailed[this] := 0;
[L2993]              _name_ERC20Detailed[this] := name_s484;
[L2994]              _symbol_ERC20Detailed[this] := symbol_s484;
[L2995]              _decimals_ERC20Detailed[this] := decimals_s484;
[L3016]  RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s484, symbol_s484, decimals_s484);
[L3017]  COND FALSE  !(revert)
[L3254]  RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -868984158, 934069305, 18);
[L3255]  COND FALSE  !(revert)
[L3258]  CALL        call YFV_YFV_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3208]              assume msgsender_MSG != null;
[L3209]              Balance[this] := 0;
[L3210]              governance_YFV[this] := null;
[L3211]              minters_YFV[this] := zeroRefboolArr();
[L3213]              governance_YFV[this] := msgsender_MSG;
[L3258]  RET         call YFV_YFV_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3259]  COND FALSE  !(revert)
[L1125]  RET         call YFV_YFV__success(this, msgsender_MSG, msgvalue_MSG);
[L1126]              assume !revert && gas >= 0;
[L4987]  RET         call YFV_YFV(this, msgsender_MSG, msgvalue_MSG);
[L4988]              assume !revert && gas >= 0;
[L4991]  CALL        call CorralChoice_YFV(this);
[L4804]              havoc msgsender_MSG;
[L4805]              havoc msgvalue_MSG;
[L4806]              havoc choice;
[L4807]              havoc __ret_0_totalSupply;
[L4808]              havoc account_s121;
[L4809]              havoc __ret_0_balanceOf;
[L4810]              havoc recipient_s140;
[L4811]              havoc amount_s140;
[L4812]              havoc __ret_0_transfer;
[L4813]              havoc owner_s156;
[L4814]              havoc spender_s156;
[L4815]              havoc __ret_0_allowance;
[L4816]              havoc spender_s175;
[L4817]              havoc amount_s175;
[L4818]              havoc __ret_0_approve;
[L4819]              havoc sender_s211;
[L4820]              havoc recipient_s211;
[L4821]              havoc amount_s211;
[L4822]              havoc __ret_0_transferFrom;
[L4823]              havoc spender_s238;
[L4824]              havoc addedValue_s238;
[L4825]              havoc __ret_0_increaseAllowance;
[L4826]              havoc spender_s266;
[L4827]              havoc subtractedValue_s266;
[L4828]              havoc __ret_0_decreaseAllowance;
[L4829]              havoc name_s484;
[L4830]              havoc symbol_s484;
[L4831]              havoc decimals_s484;
[L4832]              havoc __ret_0_name;
[L4833]              havoc __ret_0_symbol;
[L4834]              havoc __ret_0_decimals;
[L4835]              havoc __ret_0_governance;
[L4836]              havoc arg744_s0;
[L4837]              havoc __ret_0_minters;
[L4838]              havoc account_s671;
[L4839]              havoc amount_s671;
[L4840]              havoc amount_s683;
[L4841]              havoc _governance_s701;
[L4842]              havoc _minter_s721;
[L4843]              havoc _minter_s741;
[L4844]              havoc tmpNow;
[L4845]              havoc gas;
[L4846]              assume gas > 4000000 && gas <= 8000000;
[L4847]              tmpNow := now;
[L4848]              havoc now;
[L4849]              assume now > tmpNow;
[L4850]              assume msgsender_MSG != null;
[L4851]              assume DType[msgsender_MSG] != IERC20;
[L4852]              assume DType[msgsender_MSG] != Context;
[L4853]              assume DType[msgsender_MSG] != ERC20;
[L4854]              assume DType[msgsender_MSG] != ERC20Detailed;
[L4855]              assume DType[msgsender_MSG] != SafeMath;
[L4856]              assume DType[msgsender_MSG] != YFV;
[L4857]              Alloc[msgsender_MSG] := true;
[L4858]  COND FALSE  !(choice == 18)
[L4864]  COND FALSE  !(choice == 17)
[L4870]  COND TRUE   choice == 16
[L4871]              gas := gas - 21000;
[L4872]  COND TRUE   gas >= 0
[L4873]              assume amount_s140 >= 0 && amount_s140 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4874]              assume msgvalue_MSG == 0;
[L4875]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == recipient_s140 && amount_s140 <= _balances_ERC20[this][msgsender_MSG]) && amount_s140 >= 0) && amount_s140 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s140] >= 0) && _balances_ERC20[this][recipient_s140] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC200 := true;
[L2]                 call_transfer_ERC200 := false;
[L2]                 revert := revert_hold;
[L392]               havoc __exception;
[L393]               revert := false;
[L394]   COND FALSE  !(__exception)
[L419]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L2322]  COND TRUE   DType[this] == YFV
[L2323]  CALL        call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2200]              __ret_0_ := msgsender_MSG;
[L2323]  RET         call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2324]  COND FALSE  !(revert)
[L2335]  COND TRUE   DType[this] == YFV
[L2336]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s140, amount_s140);
[L2806]              __var_12 := null;
[L2807]  COND FALSE  !(!(sender_s323 != null))
[L2811]              __var_13 := null;
[L2812]  COND FALSE  !(!(recipient_s323 != null))
[L2816]  CALL        call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s323], amount_s323, -806116454);
[L3129]  COND FALSE  !(!(b_s561 <= a_s561))
[L3133]              c_s561 := (a_s561 - b_s561) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3134]              __ret_0_ := c_s561;
[L2816]  RET         call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s323], amount_s323, -806116454);
[L2817]  COND FALSE  !(revert)
[L2820]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s323];
[L2821]              _balances_ERC20[this][sender_s323] := __var_14;
[L2822]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s323];
[L2823]  CALL        call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s323], amount_s323);
[L3105]              c_s534 := (a_s534 + b_s534) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3106]  COND FALSE  !(!(c_s534 >= a_s534))
[L3110]              __ret_0_ := c_s534;
[L2823]  RET         call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s323], amount_s323);
[L2824]  COND FALSE  !(revert)
[L2827]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s323];
[L2828]              _balances_ERC20[this][recipient_s323] := __var_15;
[L2829]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s323];
[L2830]              assert { :EventEmitted "Transfer_ERC20" } true;
[L2336]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s140, amount_s140);
[L2337]  COND FALSE  !(revert)
[L2348]              __ret_0_ := true;
[L419]   RET         call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L420]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !((((((((__ret_0_ == true && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowances_ERC20[this] == old(_allowances_ERC20[this])) && governance_YFV[this] == old(governance_YFV[this])) && minters_YFV[this] == old(minters_YFV[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]));
[L2]                 revert := revert_hold;
[L4875]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L4991]  RET         call CorralChoice_YFV(this);

Loop:
[L4991]  CALL        call CorralChoice_YFV(this);
[L4804]              havoc msgsender_MSG;
[L4805]              havoc msgvalue_MSG;
[L4806]              havoc choice;
[L4807]              havoc __ret_0_totalSupply;
[L4808]              havoc account_s121;
[L4809]              havoc __ret_0_balanceOf;
[L4810]              havoc recipient_s140;
[L4811]              havoc amount_s140;
[L4812]              havoc __ret_0_transfer;
[L4813]              havoc owner_s156;
[L4814]              havoc spender_s156;
[L4815]              havoc __ret_0_allowance;
[L4816]              havoc spender_s175;
[L4817]              havoc amount_s175;
[L4818]              havoc __ret_0_approve;
[L4819]              havoc sender_s211;
[L4820]              havoc recipient_s211;
[L4821]              havoc amount_s211;
[L4822]              havoc __ret_0_transferFrom;
[L4823]              havoc spender_s238;
[L4824]              havoc addedValue_s238;
[L4825]              havoc __ret_0_increaseAllowance;
[L4826]              havoc spender_s266;
[L4827]              havoc subtractedValue_s266;
[L4828]              havoc __ret_0_decreaseAllowance;
[L4829]              havoc name_s484;
[L4830]              havoc symbol_s484;
[L4831]              havoc decimals_s484;
[L4832]              havoc __ret_0_name;
[L4833]              havoc __ret_0_symbol;
[L4834]              havoc __ret_0_decimals;
[L4835]              havoc __ret_0_governance;
[L4836]              havoc arg744_s0;
[L4837]              havoc __ret_0_minters;
[L4838]              havoc account_s671;
[L4839]              havoc amount_s671;
[L4840]              havoc amount_s683;
[L4841]              havoc _governance_s701;
[L4842]              havoc _minter_s721;
[L4843]              havoc _minter_s741;
[L4844]              havoc tmpNow;
[L4845]              havoc gas;
[L4846]              assume gas > 4000000 && gas <= 8000000;
[L4847]              tmpNow := now;
[L4848]              havoc now;
[L4849]              assume now > tmpNow;
[L4850]              assume msgsender_MSG != null;
[L4851]              assume DType[msgsender_MSG] != IERC20;
[L4852]              assume DType[msgsender_MSG] != Context;
[L4853]              assume DType[msgsender_MSG] != ERC20;
[L4854]              assume DType[msgsender_MSG] != ERC20Detailed;
[L4855]              assume DType[msgsender_MSG] != SafeMath;
[L4856]              assume DType[msgsender_MSG] != YFV;
[L4857]              Alloc[msgsender_MSG] := true;
[L4858]  COND FALSE  !(choice == 18)
[L4864]  COND FALSE  !(choice == 17)
[L4870]  COND TRUE   choice == 16
[L4871]              gas := gas - 21000;
[L4872]  COND TRUE   gas >= 0
[L4873]              assume amount_s140 >= 0 && amount_s140 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4874]              assume msgvalue_MSG == 0;
[L4875]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == recipient_s140 && amount_s140 <= _balances_ERC20[this][msgsender_MSG]) && amount_s140 >= 0) && amount_s140 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s140] >= 0) && _balances_ERC20[this][recipient_s140] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC200 := true;
[L2]                 call_transfer_ERC200 := false;
[L2]                 revert := revert_hold;
[L392]               havoc __exception;
[L393]               revert := false;
[L394]   COND FALSE  !(__exception)
[L419]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L2322]  COND TRUE   DType[this] == YFV
[L2323]  CALL        call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2200]              __ret_0_ := msgsender_MSG;
[L2323]  RET         call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2324]  COND FALSE  !(revert)
[L2335]  COND TRUE   DType[this] == YFV
[L2336]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s140, amount_s140);
[L2806]              __var_12 := null;
[L2807]  COND FALSE  !(!(sender_s323 != null))
[L2811]              __var_13 := null;
[L2812]  COND FALSE  !(!(recipient_s323 != null))
[L2816]  CALL        call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s323], amount_s323, -806116454);
[L3129]  COND FALSE  !(!(b_s561 <= a_s561))
[L3133]              c_s561 := (a_s561 - b_s561) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3134]              __ret_0_ := c_s561;
[L2816]  RET         call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s323], amount_s323, -806116454);
[L2817]  COND FALSE  !(revert)
[L2820]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s323];
[L2821]              _balances_ERC20[this][sender_s323] := __var_14;
[L2822]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s323];
[L2823]  CALL        call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s323], amount_s323);
[L3105]              c_s534 := (a_s534 + b_s534) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3106]  COND FALSE  !(!(c_s534 >= a_s534))
[L3110]              __ret_0_ := c_s534;
[L2823]  RET         call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s323], amount_s323);
[L2824]  COND FALSE  !(revert)
[L2827]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s323];
[L2828]              _balances_ERC20[this][recipient_s323] := __var_15;
[L2829]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s323];
[L2830]              assert { :EventEmitted "Transfer_ERC20" } true;
[L2336]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s140, amount_s140);
[L2337]  COND FALSE  !(revert)
[L2348]              __ret_0_ := true;
[L419]   RET         call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L420]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !((((((((__ret_0_ == true && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowances_ERC20[this] == old(_allowances_ERC20[this])) && governance_YFV[this] == old(governance_YFV[this])) && minters_YFV[this] == old(minters_YFV[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]));
[L2]                 revert := revert_hold;
[L4875]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L4991]  RET         call CorralChoice_YFV(this);

[2020-11-25 09:36:59,781 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 09:36:59,781 INFO  L82        PathProgramCache]: Analyzing trace with hash -455352433, now seen corresponding path program 1 times
[2020-11-25 09:36:59,781 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 09:36:59,814 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 09:37:00,450 INFO  L134       CoverageAnalysis]: Checked inductivity of 40 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 40 trivial. 0 not checked.
[2020-11-25 09:37:00,450 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 09:37:00,451 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [26] imperfect sequences [] total 26
[2020-11-25 09:37:00,452 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 09:37:00,452 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 27 interpolants.
[2020-11-25 09:37:00,452 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=67, Invalid=635, Unknown=0, NotChecked=0, Total=702
[2020-11-25 09:37:00,453 INFO  L87              Difference]: Start difference. First operand 3268 states and 3644 transitions. cyclomatic complexity: 378 Second operand 27 states.
[2020-11-25 09:37:04,619 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 09:37:04,620 INFO  L93              Difference]: Finished difference Result 3336 states and 3737 transitions.
[2020-11-25 09:37:04,620 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 28 states. 
[2020-11-25 09:37:04,620 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 3336 states and 3737 transitions.
[2020-11-25 09:37:04,626 INFO  L131   ngComponentsAnalysis]: Automaton has 4 accepting balls. 8
[2020-11-25 09:37:04,633 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 3336 states to 3336 states and 3737 transitions.
[2020-11-25 09:37:04,633 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 899
[2020-11-25 09:37:04,634 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 899
[2020-11-25 09:37:04,634 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 3336 states and 3737 transitions.
[2020-11-25 09:37:04,636 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 09:37:04,636 INFO  L728         BuchiCegarLoop]: Abstraction has 3336 states and 3737 transitions.
[2020-11-25 09:37:04,639 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 3336 states and 3737 transitions.
[2020-11-25 09:37:04,656 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 3336 to 3321.
[2020-11-25 09:37:04,656 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 3321 states.
[2020-11-25 09:37:04,659 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 3321 states to 3321 states and 3706 transitions.
[2020-11-25 09:37:04,659 INFO  L751         BuchiCegarLoop]: Abstraction has 3321 states and 3706 transitions.
[2020-11-25 09:37:04,659 INFO  L631         BuchiCegarLoop]: Abstraction has 3321 states and 3706 transitions.
[2020-11-25 09:37:04,659 INFO  L445         BuchiCegarLoop]: ======== Iteration 7============
[2020-11-25 09:37:04,659 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 3321 states and 3706 transitions.
[2020-11-25 09:37:04,662 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 09:37:04,662 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 09:37:04,662 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 09:37:04,664 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 09:37:04,664 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_ERC200 := false;
[L2]                 call_transfer_ERC200 := false;
[L2]     CALL        call main();
[L4981]              assume null == 0;
[L4982]  CALL        call this := FreshRefGenerator__success();
[L2122]              havoc newRef;
[L2123]              assume Alloc[newRef] == false;
[L2124]              Alloc[newRef] := true;
[L2125]              assume newRef != null;
[L4982]  RET         call this := FreshRefGenerator__success();
[L4983]              assume now >= 0;
[L4984]              assume DType[this] == YFV;
[L4985]              assume msgvalue_MSG == 0;
[L4986]              gas := gas - 53000;
[L4987]  CALL        call YFV_YFV(this, msgsender_MSG, msgvalue_MSG);
[L1098]              havoc __exception;
[L1099]              revert := false;
[L1100]  COND FALSE  !(__exception)
[L1125]  CALL        call YFV_YFV__success(this, msgsender_MSG, msgvalue_MSG);
[L3242]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2186]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2171]              assume msgsender_MSG != null;
[L2172]              Balance[this] := 0;
[L2186]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2187]  COND FALSE  !(revert)
[L3242]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3243]  COND FALSE  !(revert)
[L3246]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2154]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2139]              assume msgsender_MSG != null;
[L2140]              Balance[this] := 0;
[L2154]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2155]  COND FALSE  !(revert)
[L3246]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3247]  COND FALSE  !(revert)
[L3250]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2248]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2186]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2171]              assume msgsender_MSG != null;
[L2172]              Balance[this] := 0;
[L2186]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2187]  COND FALSE  !(revert)
[L2248]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2249]  COND FALSE  !(revert)
[L2252]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2154]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2139]              assume msgsender_MSG != null;
[L2140]              Balance[this] := 0;
[L2154]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2155]  COND FALSE  !(revert)
[L2252]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2253]  COND FALSE  !(revert)
[L2256]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2220]              assume msgsender_MSG != null;
[L2221]              Balance[this] := 0;
[L2222]              _balances_ERC20[this] := zeroRefintArr();
[L2223]              sum__balances0[this] := 0;
[L2224]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2225]              sum__allowances1[this] := 0;
[L2226]              _totalSupply_ERC20[this] := 0;
[L2256]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2257]  COND FALSE  !(revert)
[L3250]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3251]  COND FALSE  !(revert)
[L3254]  CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -868984158, 934069305, 18);
[L3012]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2154]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2139]              assume msgsender_MSG != null;
[L2140]              Balance[this] := 0;
[L2154]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2155]  COND FALSE  !(revert)
[L3012]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3013]  COND FALSE  !(revert)
[L3016]  CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s484, symbol_s484, decimals_s484);
[L2987]              assume msgsender_MSG != null;
[L2988]              Balance[this] := 0;
[L2989]              _name_ERC20Detailed[this] := 1252836592;
[L2990]              _symbol_ERC20Detailed[this] := 1252836592;
[L2991]              _decimals_ERC20Detailed[this] := 0;
[L2993]              _name_ERC20Detailed[this] := name_s484;
[L2994]              _symbol_ERC20Detailed[this] := symbol_s484;
[L2995]              _decimals_ERC20Detailed[this] := decimals_s484;
[L3016]  RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s484, symbol_s484, decimals_s484);
[L3017]  COND FALSE  !(revert)
[L3254]  RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -868984158, 934069305, 18);
[L3255]  COND FALSE  !(revert)
[L3258]  CALL        call YFV_YFV_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3208]              assume msgsender_MSG != null;
[L3209]              Balance[this] := 0;
[L3210]              governance_YFV[this] := null;
[L3211]              minters_YFV[this] := zeroRefboolArr();
[L3213]              governance_YFV[this] := msgsender_MSG;
[L3258]  RET         call YFV_YFV_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3259]  COND FALSE  !(revert)
[L1125]  RET         call YFV_YFV__success(this, msgsender_MSG, msgvalue_MSG);
[L1126]              assume !revert && gas >= 0;
[L4987]  RET         call YFV_YFV(this, msgsender_MSG, msgvalue_MSG);
[L4988]              assume !revert && gas >= 0;
[L4991]  CALL        call CorralChoice_YFV(this);
[L4804]              havoc msgsender_MSG;
[L4805]              havoc msgvalue_MSG;
[L4806]              havoc choice;
[L4807]              havoc __ret_0_totalSupply;
[L4808]              havoc account_s121;
[L4809]              havoc __ret_0_balanceOf;
[L4810]              havoc recipient_s140;
[L4811]              havoc amount_s140;
[L4812]              havoc __ret_0_transfer;
[L4813]              havoc owner_s156;
[L4814]              havoc spender_s156;
[L4815]              havoc __ret_0_allowance;
[L4816]              havoc spender_s175;
[L4817]              havoc amount_s175;
[L4818]              havoc __ret_0_approve;
[L4819]              havoc sender_s211;
[L4820]              havoc recipient_s211;
[L4821]              havoc amount_s211;
[L4822]              havoc __ret_0_transferFrom;
[L4823]              havoc spender_s238;
[L4824]              havoc addedValue_s238;
[L4825]              havoc __ret_0_increaseAllowance;
[L4826]              havoc spender_s266;
[L4827]              havoc subtractedValue_s266;
[L4828]              havoc __ret_0_decreaseAllowance;
[L4829]              havoc name_s484;
[L4830]              havoc symbol_s484;
[L4831]              havoc decimals_s484;
[L4832]              havoc __ret_0_name;
[L4833]              havoc __ret_0_symbol;
[L4834]              havoc __ret_0_decimals;
[L4835]              havoc __ret_0_governance;
[L4836]              havoc arg744_s0;
[L4837]              havoc __ret_0_minters;
[L4838]              havoc account_s671;
[L4839]              havoc amount_s671;
[L4840]              havoc amount_s683;
[L4841]              havoc _governance_s701;
[L4842]              havoc _minter_s721;
[L4843]              havoc _minter_s741;
[L4844]              havoc tmpNow;
[L4845]              havoc gas;
[L4846]              assume gas > 4000000 && gas <= 8000000;
[L4847]              tmpNow := now;
[L4848]              havoc now;
[L4849]              assume now > tmpNow;
[L4850]              assume msgsender_MSG != null;
[L4851]              assume DType[msgsender_MSG] != IERC20;
[L4852]              assume DType[msgsender_MSG] != Context;
[L4853]              assume DType[msgsender_MSG] != ERC20;
[L4854]              assume DType[msgsender_MSG] != ERC20Detailed;
[L4855]              assume DType[msgsender_MSG] != SafeMath;
[L4856]              assume DType[msgsender_MSG] != YFV;
[L4857]              Alloc[msgsender_MSG] := true;
[L4858]  COND FALSE  !(choice == 18)
[L4864]  COND FALSE  !(choice == 17)
[L4870]  COND TRUE   choice == 16
[L4871]              gas := gas - 21000;
[L4872]  COND TRUE   gas >= 0
[L4873]              assume amount_s140 >= 0 && amount_s140 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4874]              assume msgvalue_MSG == 0;
[L4875]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == recipient_s140 && amount_s140 <= _balances_ERC20[this][msgsender_MSG]) && amount_s140 >= 0) && amount_s140 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s140] >= 0) && _balances_ERC20[this][recipient_s140] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC200 := true;
[L2]                 call_transfer_ERC200 := false;
[L2]                 revert := revert_hold;
[L392]               havoc __exception;
[L393]               revert := false;
[L394]   COND TRUE   __exception
[L395]               __tmp__Balance := Balance;
[L396]               __tmp__DType := DType;
[L397]               __tmp__Alloc := Alloc;
[L398]               __tmp__balance_ADDR := balance_ADDR;
[L399]               __tmp__M_Ref_int := M_Ref_int;
[L400]               __tmp__sum__balances0 := sum__balances0;
[L401]               __tmp__alloc__allowances_ERC20_lvl0 := alloc__allowances_ERC20_lvl0;
[L402]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L403]               __tmp__sum__allowances1 := sum__allowances1;
[L404]               __tmp__M_Ref_bool := M_Ref_bool;
[L405]               __tmp__sum_minters2 := sum_minters2;
[L406]               __tmp__Length := Length;
[L407]               __tmp__now := now;
[L408]               __tmp___balances_ERC20 := _balances_ERC20;
[L409]               __tmp___allowances_ERC20 := _allowances_ERC20;
[L410]               __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L411]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L412]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L413]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L414]               __tmp__governance_YFV := governance_YFV;
[L415]               __tmp__minters_YFV := minters_YFV;
[L416]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L2289]  COND TRUE   __tmp__DType[this] == YFV
[L2290]  CALL        call __var_1 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L2194]              __ret_0_ := msgsender_MSG;
[L2290]  RET         call __var_1 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L2291]  COND FALSE  !(revert)
[L2302]  COND TRUE   __tmp__DType[this] == YFV
[L2303]  CALL        call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s140, amount_s140);
[L2774]              __var_12 := null;
[L2775]  COND FALSE  !(!(sender_s323 != null))
[L2779]              __var_13 := null;
[L2780]  COND FALSE  !(!(recipient_s323 != null))
[L2784]  CALL        call __var_14 := sub~uint256~uint256~string_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][sender_s323], amount_s323, -806116454);
[L3117]  COND FALSE  !(!(b_s561 <= a_s561))
[L3121]              c_s561 := (a_s561 - b_s561) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3122]              __ret_0_ := c_s561;
[L2784]  RET         call __var_14 := sub~uint256~uint256~string_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][sender_s323], amount_s323, -806116454);
[L2785]  COND FALSE  !(revert)
[L2788]              __tmp__sum__balances0[this] := __tmp__sum__balances0[this] - __tmp___balances_ERC20[this][sender_s323];
[L2789]              __tmp___balances_ERC20[this][sender_s323] := __var_14;
[L2790]              __tmp__sum__balances0[this] := __tmp__sum__balances0[this] + __tmp___balances_ERC20[this][sender_s323];
[L2791]  CALL        call __var_15 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][recipient_s323], amount_s323);
[L3093]              c_s534 := (a_s534 + b_s534) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3094]  COND TRUE   !(c_s534 >= a_s534)
[L3095]              revert := true;
[L2791]  RET         call __var_15 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][recipient_s323], amount_s323);
[L2792]  COND TRUE   revert
[L2303]  RET         call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s140, amount_s140);
[L2304]  COND TRUE   revert
[L416]   RET         call __ret_0_ := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L417]               assume revert || gas < 0;
[L4875]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L4991]  RET         call CorralChoice_YFV(this);

Loop:
[L4991]  CALL        call CorralChoice_YFV(this);
[L4804]              havoc msgsender_MSG;
[L4805]              havoc msgvalue_MSG;
[L4806]              havoc choice;
[L4807]              havoc __ret_0_totalSupply;
[L4808]              havoc account_s121;
[L4809]              havoc __ret_0_balanceOf;
[L4810]              havoc recipient_s140;
[L4811]              havoc amount_s140;
[L4812]              havoc __ret_0_transfer;
[L4813]              havoc owner_s156;
[L4814]              havoc spender_s156;
[L4815]              havoc __ret_0_allowance;
[L4816]              havoc spender_s175;
[L4817]              havoc amount_s175;
[L4818]              havoc __ret_0_approve;
[L4819]              havoc sender_s211;
[L4820]              havoc recipient_s211;
[L4821]              havoc amount_s211;
[L4822]              havoc __ret_0_transferFrom;
[L4823]              havoc spender_s238;
[L4824]              havoc addedValue_s238;
[L4825]              havoc __ret_0_increaseAllowance;
[L4826]              havoc spender_s266;
[L4827]              havoc subtractedValue_s266;
[L4828]              havoc __ret_0_decreaseAllowance;
[L4829]              havoc name_s484;
[L4830]              havoc symbol_s484;
[L4831]              havoc decimals_s484;
[L4832]              havoc __ret_0_name;
[L4833]              havoc __ret_0_symbol;
[L4834]              havoc __ret_0_decimals;
[L4835]              havoc __ret_0_governance;
[L4836]              havoc arg744_s0;
[L4837]              havoc __ret_0_minters;
[L4838]              havoc account_s671;
[L4839]              havoc amount_s671;
[L4840]              havoc amount_s683;
[L4841]              havoc _governance_s701;
[L4842]              havoc _minter_s721;
[L4843]              havoc _minter_s741;
[L4844]              havoc tmpNow;
[L4845]              havoc gas;
[L4846]              assume gas > 4000000 && gas <= 8000000;
[L4847]              tmpNow := now;
[L4848]              havoc now;
[L4849]              assume now > tmpNow;
[L4850]              assume msgsender_MSG != null;
[L4851]              assume DType[msgsender_MSG] != IERC20;
[L4852]              assume DType[msgsender_MSG] != Context;
[L4853]              assume DType[msgsender_MSG] != ERC20;
[L4854]              assume DType[msgsender_MSG] != ERC20Detailed;
[L4855]              assume DType[msgsender_MSG] != SafeMath;
[L4856]              assume DType[msgsender_MSG] != YFV;
[L4857]              Alloc[msgsender_MSG] := true;
[L4858]  COND FALSE  !(choice == 18)
[L4864]  COND FALSE  !(choice == 17)
[L4870]  COND TRUE   choice == 16
[L4871]              gas := gas - 21000;
[L4872]  COND TRUE   gas >= 0
[L4873]              assume amount_s140 >= 0 && amount_s140 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4874]              assume msgvalue_MSG == 0;
[L4875]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == recipient_s140 && amount_s140 <= _balances_ERC20[this][msgsender_MSG]) && amount_s140 >= 0) && amount_s140 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s140] >= 0) && _balances_ERC20[this][recipient_s140] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC200 := true;
[L2]                 call_transfer_ERC200 := false;
[L2]                 revert := revert_hold;
[L392]               havoc __exception;
[L393]               revert := false;
[L394]   COND TRUE   __exception
[L395]               __tmp__Balance := Balance;
[L396]               __tmp__DType := DType;
[L397]               __tmp__Alloc := Alloc;
[L398]               __tmp__balance_ADDR := balance_ADDR;
[L399]               __tmp__M_Ref_int := M_Ref_int;
[L400]               __tmp__sum__balances0 := sum__balances0;
[L401]               __tmp__alloc__allowances_ERC20_lvl0 := alloc__allowances_ERC20_lvl0;
[L402]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L403]               __tmp__sum__allowances1 := sum__allowances1;
[L404]               __tmp__M_Ref_bool := M_Ref_bool;
[L405]               __tmp__sum_minters2 := sum_minters2;
[L406]               __tmp__Length := Length;
[L407]               __tmp__now := now;
[L408]               __tmp___balances_ERC20 := _balances_ERC20;
[L409]               __tmp___allowances_ERC20 := _allowances_ERC20;
[L410]               __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L411]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L412]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L413]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L414]               __tmp__governance_YFV := governance_YFV;
[L415]               __tmp__minters_YFV := minters_YFV;
[L416]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L2289]  COND TRUE   __tmp__DType[this] == YFV
[L2290]  CALL        call __var_1 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L2194]              __ret_0_ := msgsender_MSG;
[L2290]  RET         call __var_1 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L2291]  COND FALSE  !(revert)
[L2302]  COND TRUE   __tmp__DType[this] == YFV
[L2303]  CALL        call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s140, amount_s140);
[L2774]              __var_12 := null;
[L2775]  COND FALSE  !(!(sender_s323 != null))
[L2779]              __var_13 := null;
[L2780]  COND FALSE  !(!(recipient_s323 != null))
[L2784]  CALL        call __var_14 := sub~uint256~uint256~string_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][sender_s323], amount_s323, -806116454);
[L3117]  COND FALSE  !(!(b_s561 <= a_s561))
[L3121]              c_s561 := (a_s561 - b_s561) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3122]              __ret_0_ := c_s561;
[L2784]  RET         call __var_14 := sub~uint256~uint256~string_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][sender_s323], amount_s323, -806116454);
[L2785]  COND FALSE  !(revert)
[L2788]              __tmp__sum__balances0[this] := __tmp__sum__balances0[this] - __tmp___balances_ERC20[this][sender_s323];
[L2789]              __tmp___balances_ERC20[this][sender_s323] := __var_14;
[L2790]              __tmp__sum__balances0[this] := __tmp__sum__balances0[this] + __tmp___balances_ERC20[this][sender_s323];
[L2791]  CALL        call __var_15 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][recipient_s323], amount_s323);
[L3093]              c_s534 := (a_s534 + b_s534) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3094]  COND TRUE   !(c_s534 >= a_s534)
[L3095]              revert := true;
[L2791]  RET         call __var_15 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][recipient_s323], amount_s323);
[L2792]  COND TRUE   revert
[L2303]  RET         call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s140, amount_s140);
[L2304]  COND TRUE   revert
[L416]   RET         call __ret_0_ := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L417]               assume revert || gas < 0;
[L4875]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L4991]  RET         call CorralChoice_YFV(this);

[2020-11-25 09:37:04,667 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 09:37:04,667 INFO  L82        PathProgramCache]: Analyzing trace with hash 1063064037, now seen corresponding path program 1 times
[2020-11-25 09:37:04,668 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 09:37:04,677 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 09:37:04,770 INFO  L134       CoverageAnalysis]: Checked inductivity of 40 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 40 trivial. 0 not checked.
[2020-11-25 09:37:04,770 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 09:37:04,770 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [22] imperfect sequences [] total 22
[2020-11-25 09:37:04,770 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 09:37:04,770 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 23 interpolants.
[2020-11-25 09:37:04,771 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=45, Invalid=461, Unknown=0, NotChecked=0, Total=506
[2020-11-25 09:37:04,771 INFO  L87              Difference]: Start difference. First operand 3321 states and 3706 transitions. cyclomatic complexity: 389 Second operand 23 states.
[2020-11-25 09:37:07,464 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 09:37:07,464 INFO  L93              Difference]: Finished difference Result 3356 states and 3760 transitions.
[2020-11-25 09:37:07,464 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 23 states. 
[2020-11-25 09:37:07,464 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 3356 states and 3760 transitions.
[2020-11-25 09:37:07,470 INFO  L131   ngComponentsAnalysis]: Automaton has 3 accepting balls. 6
[2020-11-25 09:37:07,478 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 3356 states to 3356 states and 3760 transitions.
[2020-11-25 09:37:07,478 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 908
[2020-11-25 09:37:07,479 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 908
[2020-11-25 09:37:07,479 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 3356 states and 3760 transitions.
[2020-11-25 09:37:07,481 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 09:37:07,481 INFO  L728         BuchiCegarLoop]: Abstraction has 3356 states and 3760 transitions.
[2020-11-25 09:37:07,484 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 3356 states and 3760 transitions.
[2020-11-25 09:37:07,501 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 3356 to 3331.
[2020-11-25 09:37:07,501 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 3331 states.
[2020-11-25 09:37:07,504 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 3331 states to 3331 states and 3719 transitions.
[2020-11-25 09:37:07,504 INFO  L751         BuchiCegarLoop]: Abstraction has 3331 states and 3719 transitions.
[2020-11-25 09:37:07,504 INFO  L631         BuchiCegarLoop]: Abstraction has 3331 states and 3719 transitions.
[2020-11-25 09:37:07,504 INFO  L445         BuchiCegarLoop]: ======== Iteration 8============
[2020-11-25 09:37:07,504 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 3331 states and 3719 transitions.
[2020-11-25 09:37:07,507 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 09:37:07,508 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 09:37:07,508 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 09:37:07,509 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 09:37:07,509 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_ERC200 := false;
[L2]                 call_transfer_ERC200 := false;
[L2]     CALL        call main();
[L4981]              assume null == 0;
[L4982]  CALL        call this := FreshRefGenerator__success();
[L2122]              havoc newRef;
[L2123]              assume Alloc[newRef] == false;
[L2124]              Alloc[newRef] := true;
[L2125]              assume newRef != null;
[L4982]  RET         call this := FreshRefGenerator__success();
[L4983]              assume now >= 0;
[L4984]              assume DType[this] == YFV;
[L4985]              assume msgvalue_MSG == 0;
[L4986]              gas := gas - 53000;
[L4987]  CALL        call YFV_YFV(this, msgsender_MSG, msgvalue_MSG);
[L1098]              havoc __exception;
[L1099]              revert := false;
[L1100]  COND FALSE  !(__exception)
[L1125]  CALL        call YFV_YFV__success(this, msgsender_MSG, msgvalue_MSG);
[L3242]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2186]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2171]              assume msgsender_MSG != null;
[L2172]              Balance[this] := 0;
[L2186]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2187]  COND FALSE  !(revert)
[L3242]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3243]  COND FALSE  !(revert)
[L3246]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2154]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2139]              assume msgsender_MSG != null;
[L2140]              Balance[this] := 0;
[L2154]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2155]  COND FALSE  !(revert)
[L3246]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3247]  COND FALSE  !(revert)
[L3250]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2248]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2186]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2171]              assume msgsender_MSG != null;
[L2172]              Balance[this] := 0;
[L2186]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2187]  COND FALSE  !(revert)
[L2248]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2249]  COND FALSE  !(revert)
[L2252]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2154]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2139]              assume msgsender_MSG != null;
[L2140]              Balance[this] := 0;
[L2154]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2155]  COND FALSE  !(revert)
[L2252]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2253]  COND FALSE  !(revert)
[L2256]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2220]              assume msgsender_MSG != null;
[L2221]              Balance[this] := 0;
[L2222]              _balances_ERC20[this] := zeroRefintArr();
[L2223]              sum__balances0[this] := 0;
[L2224]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2225]              sum__allowances1[this] := 0;
[L2226]              _totalSupply_ERC20[this] := 0;
[L2256]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2257]  COND FALSE  !(revert)
[L3250]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3251]  COND FALSE  !(revert)
[L3254]  CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -868984158, 934069305, 18);
[L3012]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2154]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2139]              assume msgsender_MSG != null;
[L2140]              Balance[this] := 0;
[L2154]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2155]  COND FALSE  !(revert)
[L3012]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3013]  COND FALSE  !(revert)
[L3016]  CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s484, symbol_s484, decimals_s484);
[L2987]              assume msgsender_MSG != null;
[L2988]              Balance[this] := 0;
[L2989]              _name_ERC20Detailed[this] := 1252836592;
[L2990]              _symbol_ERC20Detailed[this] := 1252836592;
[L2991]              _decimals_ERC20Detailed[this] := 0;
[L2993]              _name_ERC20Detailed[this] := name_s484;
[L2994]              _symbol_ERC20Detailed[this] := symbol_s484;
[L2995]              _decimals_ERC20Detailed[this] := decimals_s484;
[L3016]  RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s484, symbol_s484, decimals_s484);
[L3017]  COND FALSE  !(revert)
[L3254]  RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -868984158, 934069305, 18);
[L3255]  COND FALSE  !(revert)
[L3258]  CALL        call YFV_YFV_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3208]              assume msgsender_MSG != null;
[L3209]              Balance[this] := 0;
[L3210]              governance_YFV[this] := null;
[L3211]              minters_YFV[this] := zeroRefboolArr();
[L3213]              governance_YFV[this] := msgsender_MSG;
[L3258]  RET         call YFV_YFV_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3259]  COND FALSE  !(revert)
[L1125]  RET         call YFV_YFV__success(this, msgsender_MSG, msgvalue_MSG);
[L1126]              assume !revert && gas >= 0;
[L4987]  RET         call YFV_YFV(this, msgsender_MSG, msgvalue_MSG);
[L4988]              assume !revert && gas >= 0;
[L4991]  CALL        call CorralChoice_YFV(this);
[L4804]              havoc msgsender_MSG;
[L4805]              havoc msgvalue_MSG;
[L4806]              havoc choice;
[L4807]              havoc __ret_0_totalSupply;
[L4808]              havoc account_s121;
[L4809]              havoc __ret_0_balanceOf;
[L4810]              havoc recipient_s140;
[L4811]              havoc amount_s140;
[L4812]              havoc __ret_0_transfer;
[L4813]              havoc owner_s156;
[L4814]              havoc spender_s156;
[L4815]              havoc __ret_0_allowance;
[L4816]              havoc spender_s175;
[L4817]              havoc amount_s175;
[L4818]              havoc __ret_0_approve;
[L4819]              havoc sender_s211;
[L4820]              havoc recipient_s211;
[L4821]              havoc amount_s211;
[L4822]              havoc __ret_0_transferFrom;
[L4823]              havoc spender_s238;
[L4824]              havoc addedValue_s238;
[L4825]              havoc __ret_0_increaseAllowance;
[L4826]              havoc spender_s266;
[L4827]              havoc subtractedValue_s266;
[L4828]              havoc __ret_0_decreaseAllowance;
[L4829]              havoc name_s484;
[L4830]              havoc symbol_s484;
[L4831]              havoc decimals_s484;
[L4832]              havoc __ret_0_name;
[L4833]              havoc __ret_0_symbol;
[L4834]              havoc __ret_0_decimals;
[L4835]              havoc __ret_0_governance;
[L4836]              havoc arg744_s0;
[L4837]              havoc __ret_0_minters;
[L4838]              havoc account_s671;
[L4839]              havoc amount_s671;
[L4840]              havoc amount_s683;
[L4841]              havoc _governance_s701;
[L4842]              havoc _minter_s721;
[L4843]              havoc _minter_s741;
[L4844]              havoc tmpNow;
[L4845]              havoc gas;
[L4846]              assume gas > 4000000 && gas <= 8000000;
[L4847]              tmpNow := now;
[L4848]              havoc now;
[L4849]              assume now > tmpNow;
[L4850]              assume msgsender_MSG != null;
[L4851]              assume DType[msgsender_MSG] != IERC20;
[L4852]              assume DType[msgsender_MSG] != Context;
[L4853]              assume DType[msgsender_MSG] != ERC20;
[L4854]              assume DType[msgsender_MSG] != ERC20Detailed;
[L4855]              assume DType[msgsender_MSG] != SafeMath;
[L4856]              assume DType[msgsender_MSG] != YFV;
[L4857]              Alloc[msgsender_MSG] := true;
[L4858]  COND FALSE  !(choice == 18)
[L4864]  COND FALSE  !(choice == 17)
[L4870]  COND TRUE   choice == 16
[L4871]              gas := gas - 21000;
[L4872]  COND TRUE   gas >= 0
[L4873]              assume amount_s140 >= 0 && amount_s140 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4874]              assume msgvalue_MSG == 0;
[L4875]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == recipient_s140 && amount_s140 <= _balances_ERC20[this][msgsender_MSG]) && amount_s140 >= 0) && amount_s140 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s140] >= 0) && _balances_ERC20[this][recipient_s140] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC200 := true;
[L2]                 call_transfer_ERC200 := false;
[L2]                 revert := revert_hold;
[L392]               havoc __exception;
[L393]               revert := false;
[L394]   COND TRUE   __exception
[L395]               __tmp__Balance := Balance;
[L396]               __tmp__DType := DType;
[L397]               __tmp__Alloc := Alloc;
[L398]               __tmp__balance_ADDR := balance_ADDR;
[L399]               __tmp__M_Ref_int := M_Ref_int;
[L400]               __tmp__sum__balances0 := sum__balances0;
[L401]               __tmp__alloc__allowances_ERC20_lvl0 := alloc__allowances_ERC20_lvl0;
[L402]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L403]               __tmp__sum__allowances1 := sum__allowances1;
[L404]               __tmp__M_Ref_bool := M_Ref_bool;
[L405]               __tmp__sum_minters2 := sum_minters2;
[L406]               __tmp__Length := Length;
[L407]               __tmp__now := now;
[L408]               __tmp___balances_ERC20 := _balances_ERC20;
[L409]               __tmp___allowances_ERC20 := _allowances_ERC20;
[L410]               __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L411]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L412]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L413]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L414]               __tmp__governance_YFV := governance_YFV;
[L415]               __tmp__minters_YFV := minters_YFV;
[L416]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L2289]  COND TRUE   __tmp__DType[this] == YFV
[L2290]  CALL        call __var_1 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L2194]              __ret_0_ := msgsender_MSG;
[L2290]  RET         call __var_1 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L2291]  COND FALSE  !(revert)
[L2302]  COND TRUE   __tmp__DType[this] == YFV
[L2303]  CALL        call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s140, amount_s140);
[L2774]              __var_12 := null;
[L2775]  COND FALSE  !(!(sender_s323 != null))
[L2779]              __var_13 := null;
[L2780]  COND FALSE  !(!(recipient_s323 != null))
[L2784]  CALL        call __var_14 := sub~uint256~uint256~string_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][sender_s323], amount_s323, -806116454);
[L3117]  COND FALSE  !(!(b_s561 <= a_s561))
[L3121]              c_s561 := (a_s561 - b_s561) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3122]              __ret_0_ := c_s561;
[L2784]  RET         call __var_14 := sub~uint256~uint256~string_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][sender_s323], amount_s323, -806116454);
[L2785]  COND FALSE  !(revert)
[L2788]              __tmp__sum__balances0[this] := __tmp__sum__balances0[this] - __tmp___balances_ERC20[this][sender_s323];
[L2789]              __tmp___balances_ERC20[this][sender_s323] := __var_14;
[L2790]              __tmp__sum__balances0[this] := __tmp__sum__balances0[this] + __tmp___balances_ERC20[this][sender_s323];
[L2791]  CALL        call __var_15 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][recipient_s323], amount_s323);
[L3093]              c_s534 := (a_s534 + b_s534) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3094]  COND FALSE  !(!(c_s534 >= a_s534))
[L3098]              __ret_0_ := c_s534;
[L2791]  RET         call __var_15 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][recipient_s323], amount_s323);
[L2792]  COND FALSE  !(revert)
[L2795]              __tmp__sum__balances0[this] := __tmp__sum__balances0[this] - __tmp___balances_ERC20[this][recipient_s323];
[L2796]              __tmp___balances_ERC20[this][recipient_s323] := __var_15;
[L2797]              __tmp__sum__balances0[this] := __tmp__sum__balances0[this] + __tmp___balances_ERC20[this][recipient_s323];
[L2303]  RET         call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s140, amount_s140);
[L2304]  COND FALSE  !(revert)
[L2315]              __ret_0_ := true;
[L416]   RET         call __ret_0_ := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L417]               assume revert || gas < 0;
[L4875]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L4991]  RET         call CorralChoice_YFV(this);

Loop:
[L4991]  CALL        call CorralChoice_YFV(this);
[L4804]              havoc msgsender_MSG;
[L4805]              havoc msgvalue_MSG;
[L4806]              havoc choice;
[L4807]              havoc __ret_0_totalSupply;
[L4808]              havoc account_s121;
[L4809]              havoc __ret_0_balanceOf;
[L4810]              havoc recipient_s140;
[L4811]              havoc amount_s140;
[L4812]              havoc __ret_0_transfer;
[L4813]              havoc owner_s156;
[L4814]              havoc spender_s156;
[L4815]              havoc __ret_0_allowance;
[L4816]              havoc spender_s175;
[L4817]              havoc amount_s175;
[L4818]              havoc __ret_0_approve;
[L4819]              havoc sender_s211;
[L4820]              havoc recipient_s211;
[L4821]              havoc amount_s211;
[L4822]              havoc __ret_0_transferFrom;
[L4823]              havoc spender_s238;
[L4824]              havoc addedValue_s238;
[L4825]              havoc __ret_0_increaseAllowance;
[L4826]              havoc spender_s266;
[L4827]              havoc subtractedValue_s266;
[L4828]              havoc __ret_0_decreaseAllowance;
[L4829]              havoc name_s484;
[L4830]              havoc symbol_s484;
[L4831]              havoc decimals_s484;
[L4832]              havoc __ret_0_name;
[L4833]              havoc __ret_0_symbol;
[L4834]              havoc __ret_0_decimals;
[L4835]              havoc __ret_0_governance;
[L4836]              havoc arg744_s0;
[L4837]              havoc __ret_0_minters;
[L4838]              havoc account_s671;
[L4839]              havoc amount_s671;
[L4840]              havoc amount_s683;
[L4841]              havoc _governance_s701;
[L4842]              havoc _minter_s721;
[L4843]              havoc _minter_s741;
[L4844]              havoc tmpNow;
[L4845]              havoc gas;
[L4846]              assume gas > 4000000 && gas <= 8000000;
[L4847]              tmpNow := now;
[L4848]              havoc now;
[L4849]              assume now > tmpNow;
[L4850]              assume msgsender_MSG != null;
[L4851]              assume DType[msgsender_MSG] != IERC20;
[L4852]              assume DType[msgsender_MSG] != Context;
[L4853]              assume DType[msgsender_MSG] != ERC20;
[L4854]              assume DType[msgsender_MSG] != ERC20Detailed;
[L4855]              assume DType[msgsender_MSG] != SafeMath;
[L4856]              assume DType[msgsender_MSG] != YFV;
[L4857]              Alloc[msgsender_MSG] := true;
[L4858]  COND FALSE  !(choice == 18)
[L4864]  COND FALSE  !(choice == 17)
[L4870]  COND TRUE   choice == 16
[L4871]              gas := gas - 21000;
[L4872]  COND TRUE   gas >= 0
[L4873]              assume amount_s140 >= 0 && amount_s140 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4874]              assume msgvalue_MSG == 0;
[L4875]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == recipient_s140 && amount_s140 <= _balances_ERC20[this][msgsender_MSG]) && amount_s140 >= 0) && amount_s140 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s140] >= 0) && _balances_ERC20[this][recipient_s140] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC200 := true;
[L2]                 call_transfer_ERC200 := false;
[L2]                 revert := revert_hold;
[L392]               havoc __exception;
[L393]               revert := false;
[L394]   COND TRUE   __exception
[L395]               __tmp__Balance := Balance;
[L396]               __tmp__DType := DType;
[L397]               __tmp__Alloc := Alloc;
[L398]               __tmp__balance_ADDR := balance_ADDR;
[L399]               __tmp__M_Ref_int := M_Ref_int;
[L400]               __tmp__sum__balances0 := sum__balances0;
[L401]               __tmp__alloc__allowances_ERC20_lvl0 := alloc__allowances_ERC20_lvl0;
[L402]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L403]               __tmp__sum__allowances1 := sum__allowances1;
[L404]               __tmp__M_Ref_bool := M_Ref_bool;
[L405]               __tmp__sum_minters2 := sum_minters2;
[L406]               __tmp__Length := Length;
[L407]               __tmp__now := now;
[L408]               __tmp___balances_ERC20 := _balances_ERC20;
[L409]               __tmp___allowances_ERC20 := _allowances_ERC20;
[L410]               __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L411]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L412]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L413]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L414]               __tmp__governance_YFV := governance_YFV;
[L415]               __tmp__minters_YFV := minters_YFV;
[L416]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L2289]  COND TRUE   __tmp__DType[this] == YFV
[L2290]  CALL        call __var_1 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L2194]              __ret_0_ := msgsender_MSG;
[L2290]  RET         call __var_1 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L2291]  COND FALSE  !(revert)
[L2302]  COND TRUE   __tmp__DType[this] == YFV
[L2303]  CALL        call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s140, amount_s140);
[L2774]              __var_12 := null;
[L2775]  COND FALSE  !(!(sender_s323 != null))
[L2779]              __var_13 := null;
[L2780]  COND FALSE  !(!(recipient_s323 != null))
[L2784]  CALL        call __var_14 := sub~uint256~uint256~string_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][sender_s323], amount_s323, -806116454);
[L3117]  COND FALSE  !(!(b_s561 <= a_s561))
[L3121]              c_s561 := (a_s561 - b_s561) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3122]              __ret_0_ := c_s561;
[L2784]  RET         call __var_14 := sub~uint256~uint256~string_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][sender_s323], amount_s323, -806116454);
[L2785]  COND FALSE  !(revert)
[L2788]              __tmp__sum__balances0[this] := __tmp__sum__balances0[this] - __tmp___balances_ERC20[this][sender_s323];
[L2789]              __tmp___balances_ERC20[this][sender_s323] := __var_14;
[L2790]              __tmp__sum__balances0[this] := __tmp__sum__balances0[this] + __tmp___balances_ERC20[this][sender_s323];
[L2791]  CALL        call __var_15 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][recipient_s323], amount_s323);
[L3093]              c_s534 := (a_s534 + b_s534) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3094]  COND FALSE  !(!(c_s534 >= a_s534))
[L3098]              __ret_0_ := c_s534;
[L2791]  RET         call __var_15 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][recipient_s323], amount_s323);
[L2792]  COND FALSE  !(revert)
[L2795]              __tmp__sum__balances0[this] := __tmp__sum__balances0[this] - __tmp___balances_ERC20[this][recipient_s323];
[L2796]              __tmp___balances_ERC20[this][recipient_s323] := __var_15;
[L2797]              __tmp__sum__balances0[this] := __tmp__sum__balances0[this] + __tmp___balances_ERC20[this][recipient_s323];
[L2303]  RET         call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s140, amount_s140);
[L2304]  COND FALSE  !(revert)
[L2315]              __ret_0_ := true;
[L416]   RET         call __ret_0_ := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L417]               assume revert || gas < 0;
[L4875]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L4991]  RET         call CorralChoice_YFV(this);

[2020-11-25 09:37:07,512 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 09:37:07,512 INFO  L82        PathProgramCache]: Analyzing trace with hash -701287243, now seen corresponding path program 1 times
[2020-11-25 09:37:07,512 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 09:37:07,520 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 09:37:07,549 INFO  L134       CoverageAnalysis]: Checked inductivity of 40 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 40 trivial. 0 not checked.
[2020-11-25 09:37:07,549 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 09:37:07,549 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [5] imperfect sequences [] total 5
[2020-11-25 09:37:07,549 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 09:37:07,549 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 5 interpolants.
[2020-11-25 09:37:07,550 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=7, Invalid=13, Unknown=0, NotChecked=0, Total=20
[2020-11-25 09:37:07,550 INFO  L87              Difference]: Start difference. First operand 3331 states and 3719 transitions. cyclomatic complexity: 392 Second operand 5 states.
[2020-11-25 09:37:08,100 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 09:37:08,100 INFO  L93              Difference]: Finished difference Result 4057 states and 4590 transitions.
[2020-11-25 09:37:08,100 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 7 states. 
[2020-11-25 09:37:08,100 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 4057 states and 4590 transitions.
[2020-11-25 09:37:08,109 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 8
[2020-11-25 09:37:08,118 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 4057 states to 3308 states and 3827 transitions.
[2020-11-25 09:37:08,118 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 740
[2020-11-25 09:37:08,118 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 740
[2020-11-25 09:37:08,118 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 3308 states and 3827 transitions.
[2020-11-25 09:37:08,121 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 09:37:08,121 INFO  L728         BuchiCegarLoop]: Abstraction has 3308 states and 3827 transitions.
[2020-11-25 09:37:08,123 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 3308 states and 3827 transitions.
[2020-11-25 09:37:08,167 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 3308 to 2638.
[2020-11-25 09:37:08,167 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 2638 states.
[2020-11-25 09:37:08,170 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 2638 states to 2638 states and 2968 transitions.
[2020-11-25 09:37:08,171 INFO  L751         BuchiCegarLoop]: Abstraction has 2638 states and 2968 transitions.
[2020-11-25 09:37:08,171 INFO  L631         BuchiCegarLoop]: Abstraction has 2638 states and 2968 transitions.
[2020-11-25 09:37:08,171 INFO  L445         BuchiCegarLoop]: ======== Iteration 9============
[2020-11-25 09:37:08,171 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2638 states and 2968 transitions.
[2020-11-25 09:37:08,174 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 09:37:08,175 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 09:37:08,175 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 09:37:08,176 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 09:37:08,176 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_ERC200 := false;
[L2]                 call_transfer_ERC200 := false;
[L2]     CALL        call main();
[L4981]              assume null == 0;
[L4982]  CALL        call this := FreshRefGenerator__success();
[L2122]              havoc newRef;
[L2123]              assume Alloc[newRef] == false;
[L2124]              Alloc[newRef] := true;
[L2125]              assume newRef != null;
[L4982]  RET         call this := FreshRefGenerator__success();
[L4983]              assume now >= 0;
[L4984]              assume DType[this] == YFV;
[L4985]              assume msgvalue_MSG == 0;
[L4986]              gas := gas - 53000;
[L4987]  CALL        call YFV_YFV(this, msgsender_MSG, msgvalue_MSG);
[L1098]              havoc __exception;
[L1099]              revert := false;
[L1100]  COND FALSE  !(__exception)
[L1125]  CALL        call YFV_YFV__success(this, msgsender_MSG, msgvalue_MSG);
[L3242]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2186]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2171]              assume msgsender_MSG != null;
[L2172]              Balance[this] := 0;
[L2186]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2187]  COND FALSE  !(revert)
[L3242]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3243]  COND FALSE  !(revert)
[L3246]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2154]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2139]              assume msgsender_MSG != null;
[L2140]              Balance[this] := 0;
[L2154]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2155]  COND FALSE  !(revert)
[L3246]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3247]  COND FALSE  !(revert)
[L3250]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2248]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2186]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2171]              assume msgsender_MSG != null;
[L2172]              Balance[this] := 0;
[L2186]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2187]  COND FALSE  !(revert)
[L2248]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2249]  COND FALSE  !(revert)
[L2252]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2154]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2139]              assume msgsender_MSG != null;
[L2140]              Balance[this] := 0;
[L2154]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2155]  COND FALSE  !(revert)
[L2252]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2253]  COND FALSE  !(revert)
[L2256]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2220]              assume msgsender_MSG != null;
[L2221]              Balance[this] := 0;
[L2222]              _balances_ERC20[this] := zeroRefintArr();
[L2223]              sum__balances0[this] := 0;
[L2224]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2225]              sum__allowances1[this] := 0;
[L2226]              _totalSupply_ERC20[this] := 0;
[L2256]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2257]  COND FALSE  !(revert)
[L3250]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3251]  COND FALSE  !(revert)
[L3254]  CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -868984158, 934069305, 18);
[L3012]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2154]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2139]              assume msgsender_MSG != null;
[L2140]              Balance[this] := 0;
[L2154]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2155]  COND FALSE  !(revert)
[L3012]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3013]  COND FALSE  !(revert)
[L3016]  CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s484, symbol_s484, decimals_s484);
[L2987]              assume msgsender_MSG != null;
[L2988]              Balance[this] := 0;
[L2989]              _name_ERC20Detailed[this] := 1252836592;
[L2990]              _symbol_ERC20Detailed[this] := 1252836592;
[L2991]              _decimals_ERC20Detailed[this] := 0;
[L2993]              _name_ERC20Detailed[this] := name_s484;
[L2994]              _symbol_ERC20Detailed[this] := symbol_s484;
[L2995]              _decimals_ERC20Detailed[this] := decimals_s484;
[L3016]  RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s484, symbol_s484, decimals_s484);
[L3017]  COND FALSE  !(revert)
[L3254]  RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -868984158, 934069305, 18);
[L3255]  COND FALSE  !(revert)
[L3258]  CALL        call YFV_YFV_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3208]              assume msgsender_MSG != null;
[L3209]              Balance[this] := 0;
[L3210]              governance_YFV[this] := null;
[L3211]              minters_YFV[this] := zeroRefboolArr();
[L3213]              governance_YFV[this] := msgsender_MSG;
[L3258]  RET         call YFV_YFV_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3259]  COND FALSE  !(revert)
[L1125]  RET         call YFV_YFV__success(this, msgsender_MSG, msgvalue_MSG);
[L1126]              assume !revert && gas >= 0;
[L4987]  RET         call YFV_YFV(this, msgsender_MSG, msgvalue_MSG);
[L4988]              assume !revert && gas >= 0;
[L4991]  CALL        call CorralChoice_YFV(this);
[L4804]              havoc msgsender_MSG;
[L4805]              havoc msgvalue_MSG;
[L4806]              havoc choice;
[L4807]              havoc __ret_0_totalSupply;
[L4808]              havoc account_s121;
[L4809]              havoc __ret_0_balanceOf;
[L4810]              havoc recipient_s140;
[L4811]              havoc amount_s140;
[L4812]              havoc __ret_0_transfer;
[L4813]              havoc owner_s156;
[L4814]              havoc spender_s156;
[L4815]              havoc __ret_0_allowance;
[L4816]              havoc spender_s175;
[L4817]              havoc amount_s175;
[L4818]              havoc __ret_0_approve;
[L4819]              havoc sender_s211;
[L4820]              havoc recipient_s211;
[L4821]              havoc amount_s211;
[L4822]              havoc __ret_0_transferFrom;
[L4823]              havoc spender_s238;
[L4824]              havoc addedValue_s238;
[L4825]              havoc __ret_0_increaseAllowance;
[L4826]              havoc spender_s266;
[L4827]              havoc subtractedValue_s266;
[L4828]              havoc __ret_0_decreaseAllowance;
[L4829]              havoc name_s484;
[L4830]              havoc symbol_s484;
[L4831]              havoc decimals_s484;
[L4832]              havoc __ret_0_name;
[L4833]              havoc __ret_0_symbol;
[L4834]              havoc __ret_0_decimals;
[L4835]              havoc __ret_0_governance;
[L4836]              havoc arg744_s0;
[L4837]              havoc __ret_0_minters;
[L4838]              havoc account_s671;
[L4839]              havoc amount_s671;
[L4840]              havoc amount_s683;
[L4841]              havoc _governance_s701;
[L4842]              havoc _minter_s721;
[L4843]              havoc _minter_s741;
[L4844]              havoc tmpNow;
[L4845]              havoc gas;
[L4846]              assume gas > 4000000 && gas <= 8000000;
[L4847]              tmpNow := now;
[L4848]              havoc now;
[L4849]              assume now > tmpNow;
[L4850]              assume msgsender_MSG != null;
[L4851]              assume DType[msgsender_MSG] != IERC20;
[L4852]              assume DType[msgsender_MSG] != Context;
[L4853]              assume DType[msgsender_MSG] != ERC20;
[L4854]              assume DType[msgsender_MSG] != ERC20Detailed;
[L4855]              assume DType[msgsender_MSG] != SafeMath;
[L4856]              assume DType[msgsender_MSG] != YFV;
[L4857]              Alloc[msgsender_MSG] := true;
[L4858]  COND FALSE  !(choice == 18)
[L4864]  COND FALSE  !(choice == 17)
[L4870]  COND FALSE  !(choice == 16)
[L4877]  COND FALSE  !(choice == 15)
[L4883]  COND FALSE  !(choice == 14)
[L4890]  COND FALSE  !(choice == 13)
[L4897]  COND FALSE  !(choice == 12)
[L4904]  COND FALSE  !(choice == 11)
[L4911]  COND FALSE  !(choice == 10)
[L4917]  COND FALSE  !(choice == 9)
[L4923]  COND FALSE  !(choice == 8)
[L4929]  COND FALSE  !(choice == 7)
[L4935]  COND FALSE  !(choice == 6)
[L4941]  COND TRUE   choice == 5
[L4942]              gas := gas - 21000;
[L4943]  COND TRUE   gas >= 0
[L4944]              assume amount_s671 >= 0 && amount_s671 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4945]              assume msgvalue_MSG == 0;
[L4946]  CALL        call mint~address~uint256_YFV(this, msgsender_MSG, msgvalue_MSG, account_s671, amount_s671);
[L1159]              havoc __exception;
[L1160]              revert := false;
[L1161]  COND FALSE  !(__exception)
[L1186]  CALL        call mint~address~uint256_YFV__success(this, msgsender_MSG, msgvalue_MSG, account_s671, amount_s671);
[L3282]  COND FALSE  !(!minters_YFV[this][msgsender_MSG])
[L3286]  COND TRUE   DType[this] == YFV
[L3287]  CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, account_s671, amount_s671);
[L2862]              __var_16 := null;
[L2863]  COND FALSE  !(!(account_s366 != null))
[L2867]  CALL        call __var_17 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s366);
[L3105]              c_s534 := (a_s534 + b_s534) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3106]  COND FALSE  !(!(c_s534 >= a_s534))
[L3110]              __ret_0_ := c_s534;
[L2867]  RET         call __var_17 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s366);
[L2868]  COND FALSE  !(revert)
[L2871]              _totalSupply_ERC20[this] := __var_17;
[L2872]  CALL        call __var_18 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s366], amount_s366);
[L3105]              c_s534 := (a_s534 + b_s534) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3106]  COND FALSE  !(!(c_s534 >= a_s534))
[L3110]              __ret_0_ := c_s534;
[L2872]  RET         call __var_18 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s366], amount_s366);
[L2873]  COND FALSE  !(revert)
[L2876]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s366];
[L2877]              _balances_ERC20[this][account_s366] := __var_18;
[L2878]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s366];
[L2879]              assert { :EventEmitted "Transfer_ERC20" } true;
[L3287]  RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, account_s671, amount_s671);
[L3288]  COND FALSE  !(revert)
[L1186]  RET         call mint~address~uint256_YFV__success(this, msgsender_MSG, msgvalue_MSG, account_s671, amount_s671);
[L1187]              assume !revert && gas >= 0;
[L4946]  RET         call mint~address~uint256_YFV(this, msgsender_MSG, msgvalue_MSG, account_s671, amount_s671);
[L4991]  RET         call CorralChoice_YFV(this);
[L4991]  CALL        call CorralChoice_YFV(this);
[L4804]              havoc msgsender_MSG;
[L4805]              havoc msgvalue_MSG;
[L4806]              havoc choice;
[L4807]              havoc __ret_0_totalSupply;
[L4808]              havoc account_s121;
[L4809]              havoc __ret_0_balanceOf;
[L4810]              havoc recipient_s140;
[L4811]              havoc amount_s140;
[L4812]              havoc __ret_0_transfer;
[L4813]              havoc owner_s156;
[L4814]              havoc spender_s156;
[L4815]              havoc __ret_0_allowance;
[L4816]              havoc spender_s175;
[L4817]              havoc amount_s175;
[L4818]              havoc __ret_0_approve;
[L4819]              havoc sender_s211;
[L4820]              havoc recipient_s211;
[L4821]              havoc amount_s211;
[L4822]              havoc __ret_0_transferFrom;
[L4823]              havoc spender_s238;
[L4824]              havoc addedValue_s238;
[L4825]              havoc __ret_0_increaseAllowance;
[L4826]              havoc spender_s266;
[L4827]              havoc subtractedValue_s266;
[L4828]              havoc __ret_0_decreaseAllowance;
[L4829]              havoc name_s484;
[L4830]              havoc symbol_s484;
[L4831]              havoc decimals_s484;
[L4832]              havoc __ret_0_name;
[L4833]              havoc __ret_0_symbol;
[L4834]              havoc __ret_0_decimals;
[L4835]              havoc __ret_0_governance;
[L4836]              havoc arg744_s0;
[L4837]              havoc __ret_0_minters;
[L4838]              havoc account_s671;
[L4839]              havoc amount_s671;
[L4840]              havoc amount_s683;
[L4841]              havoc _governance_s701;
[L4842]              havoc _minter_s721;
[L4843]              havoc _minter_s741;
[L4844]              havoc tmpNow;
[L4845]              havoc gas;
[L4846]              assume gas > 4000000 && gas <= 8000000;
[L4847]              tmpNow := now;
[L4848]              havoc now;
[L4849]              assume now > tmpNow;
[L4850]              assume msgsender_MSG != null;
[L4851]              assume DType[msgsender_MSG] != IERC20;
[L4852]              assume DType[msgsender_MSG] != Context;
[L4853]              assume DType[msgsender_MSG] != ERC20;
[L4854]              assume DType[msgsender_MSG] != ERC20Detailed;
[L4855]              assume DType[msgsender_MSG] != SafeMath;
[L4856]              assume DType[msgsender_MSG] != YFV;
[L4857]              Alloc[msgsender_MSG] := true;
[L4858]  COND FALSE  !(choice == 18)
[L4864]  COND FALSE  !(choice == 17)
[L4870]  COND TRUE   choice == 16
[L4871]              gas := gas - 21000;
[L4872]  COND TRUE   gas >= 0
[L4873]              assume amount_s140 >= 0 && amount_s140 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4874]              assume msgvalue_MSG == 0;
[L4875]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == recipient_s140 && amount_s140 <= _balances_ERC20[this][msgsender_MSG]) && amount_s140 >= 0) && amount_s140 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s140] >= 0) && _balances_ERC20[this][recipient_s140] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC200 := true;
[L2]                 call_transfer_ERC200 := false;
[L2]                 revert := revert_hold;
[L392]               havoc __exception;
[L393]               revert := false;
[L394]   COND FALSE  !(__exception)
[L419]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L2322]  COND TRUE   DType[this] == YFV
[L2323]  CALL        call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2200]              __ret_0_ := msgsender_MSG;
[L2323]  RET         call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2324]  COND FALSE  !(revert)
[L2335]  COND TRUE   DType[this] == YFV
[L2336]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s140, amount_s140);
[L2806]              __var_12 := null;
[L2807]  COND FALSE  !(!(sender_s323 != null))
[L2811]              __var_13 := null;
[L2812]  COND FALSE  !(!(recipient_s323 != null))
[L2816]  CALL        call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s323], amount_s323, -806116454);
[L3129]  COND FALSE  !(!(b_s561 <= a_s561))
[L3133]              c_s561 := (a_s561 - b_s561) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3134]              __ret_0_ := c_s561;
[L2816]  RET         call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s323], amount_s323, -806116454);
[L2817]  COND FALSE  !(revert)
[L2820]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s323];
[L2821]              _balances_ERC20[this][sender_s323] := __var_14;
[L2822]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s323];
[L2823]  CALL        call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s323], amount_s323);
[L3105]              c_s534 := (a_s534 + b_s534) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3106]  COND FALSE  !(!(c_s534 >= a_s534))
[L3110]              __ret_0_ := c_s534;
[L2823]  RET         call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s323], amount_s323);
[L2824]  COND FALSE  !(revert)
[L2827]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s323];
[L2828]              _balances_ERC20[this][recipient_s323] := __var_15;
[L2829]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s323];
[L2830]              assert { :EventEmitted "Transfer_ERC20" } true;
[L2336]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s140, amount_s140);
[L2337]  COND FALSE  !(revert)
[L2348]              __ret_0_ := true;
[L419]   RET         call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L420]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !((((((((__ret_0_ == true && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowances_ERC20[this] == old(_allowances_ERC20[this])) && governance_YFV[this] == old(governance_YFV[this])) && minters_YFV[this] == old(minters_YFV[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]));
[L2]                 revert := revert_hold;
[L4875]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L4991]  RET         call CorralChoice_YFV(this);

Loop:
[L4991]  CALL        call CorralChoice_YFV(this);
[L4804]              havoc msgsender_MSG;
[L4805]              havoc msgvalue_MSG;
[L4806]              havoc choice;
[L4807]              havoc __ret_0_totalSupply;
[L4808]              havoc account_s121;
[L4809]              havoc __ret_0_balanceOf;
[L4810]              havoc recipient_s140;
[L4811]              havoc amount_s140;
[L4812]              havoc __ret_0_transfer;
[L4813]              havoc owner_s156;
[L4814]              havoc spender_s156;
[L4815]              havoc __ret_0_allowance;
[L4816]              havoc spender_s175;
[L4817]              havoc amount_s175;
[L4818]              havoc __ret_0_approve;
[L4819]              havoc sender_s211;
[L4820]              havoc recipient_s211;
[L4821]              havoc amount_s211;
[L4822]              havoc __ret_0_transferFrom;
[L4823]              havoc spender_s238;
[L4824]              havoc addedValue_s238;
[L4825]              havoc __ret_0_increaseAllowance;
[L4826]              havoc spender_s266;
[L4827]              havoc subtractedValue_s266;
[L4828]              havoc __ret_0_decreaseAllowance;
[L4829]              havoc name_s484;
[L4830]              havoc symbol_s484;
[L4831]              havoc decimals_s484;
[L4832]              havoc __ret_0_name;
[L4833]              havoc __ret_0_symbol;
[L4834]              havoc __ret_0_decimals;
[L4835]              havoc __ret_0_governance;
[L4836]              havoc arg744_s0;
[L4837]              havoc __ret_0_minters;
[L4838]              havoc account_s671;
[L4839]              havoc amount_s671;
[L4840]              havoc amount_s683;
[L4841]              havoc _governance_s701;
[L4842]              havoc _minter_s721;
[L4843]              havoc _minter_s741;
[L4844]              havoc tmpNow;
[L4845]              havoc gas;
[L4846]              assume gas > 4000000 && gas <= 8000000;
[L4847]              tmpNow := now;
[L4848]              havoc now;
[L4849]              assume now > tmpNow;
[L4850]              assume msgsender_MSG != null;
[L4851]              assume DType[msgsender_MSG] != IERC20;
[L4852]              assume DType[msgsender_MSG] != Context;
[L4853]              assume DType[msgsender_MSG] != ERC20;
[L4854]              assume DType[msgsender_MSG] != ERC20Detailed;
[L4855]              assume DType[msgsender_MSG] != SafeMath;
[L4856]              assume DType[msgsender_MSG] != YFV;
[L4857]              Alloc[msgsender_MSG] := true;
[L4858]  COND FALSE  !(choice == 18)
[L4864]  COND FALSE  !(choice == 17)
[L4870]  COND TRUE   choice == 16
[L4871]              gas := gas - 21000;
[L4872]  COND TRUE   gas >= 0
[L4873]              assume amount_s140 >= 0 && amount_s140 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4874]              assume msgvalue_MSG == 0;
[L4875]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == recipient_s140 && amount_s140 <= _balances_ERC20[this][msgsender_MSG]) && amount_s140 >= 0) && amount_s140 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s140] >= 0) && _balances_ERC20[this][recipient_s140] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC200 := true;
[L2]                 call_transfer_ERC200 := false;
[L2]                 revert := revert_hold;
[L392]               havoc __exception;
[L393]               revert := false;
[L394]   COND FALSE  !(__exception)
[L419]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L2322]  COND TRUE   DType[this] == YFV
[L2323]  CALL        call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2200]              __ret_0_ := msgsender_MSG;
[L2323]  RET         call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2324]  COND FALSE  !(revert)
[L2335]  COND TRUE   DType[this] == YFV
[L2336]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s140, amount_s140);
[L2806]              __var_12 := null;
[L2807]  COND FALSE  !(!(sender_s323 != null))
[L2811]              __var_13 := null;
[L2812]  COND FALSE  !(!(recipient_s323 != null))
[L2816]  CALL        call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s323], amount_s323, -806116454);
[L3129]  COND FALSE  !(!(b_s561 <= a_s561))
[L3133]              c_s561 := (a_s561 - b_s561) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3134]              __ret_0_ := c_s561;
[L2816]  RET         call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s323], amount_s323, -806116454);
[L2817]  COND FALSE  !(revert)
[L2820]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s323];
[L2821]              _balances_ERC20[this][sender_s323] := __var_14;
[L2822]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s323];
[L2823]  CALL        call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s323], amount_s323);
[L3105]              c_s534 := (a_s534 + b_s534) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3106]  COND FALSE  !(!(c_s534 >= a_s534))
[L3110]              __ret_0_ := c_s534;
[L2823]  RET         call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s323], amount_s323);
[L2824]  COND FALSE  !(revert)
[L2827]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s323];
[L2828]              _balances_ERC20[this][recipient_s323] := __var_15;
[L2829]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s323];
[L2830]              assert { :EventEmitted "Transfer_ERC20" } true;
[L2336]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s140, amount_s140);
[L2337]  COND FALSE  !(revert)
[L2348]              __ret_0_ := true;
[L419]   RET         call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L420]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !((((((((__ret_0_ == true && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowances_ERC20[this] == old(_allowances_ERC20[this])) && governance_YFV[this] == old(governance_YFV[this])) && minters_YFV[this] == old(minters_YFV[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]));
[L2]                 revert := revert_hold;
[L4875]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L4991]  RET         call CorralChoice_YFV(this);

[2020-11-25 09:37:08,189 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 09:37:08,190 INFO  L82        PathProgramCache]: Analyzing trace with hash -1120467940, now seen corresponding path program 1 times
[2020-11-25 09:37:08,190 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 09:37:08,201 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 09:37:08,264 INFO  L134       CoverageAnalysis]: Checked inductivity of 104 backedges. 1 proven. 58 refuted. 0 times theorem prover too weak. 45 trivial. 0 not checked.
[2020-11-25 09:37:08,264 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 09:37:08,264 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [10] total 10
[2020-11-25 09:37:08,265 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 09:37:08,265 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 10 interpolants.
[2020-11-25 09:37:08,265 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=18, Invalid=72, Unknown=0, NotChecked=0, Total=90
[2020-11-25 09:37:08,265 INFO  L87              Difference]: Start difference. First operand 2638 states and 2968 transitions. cyclomatic complexity: 333 Second operand 10 states.
[2020-11-25 09:37:08,983 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 09:37:08,983 INFO  L93              Difference]: Finished difference Result 2667 states and 3010 transitions.
[2020-11-25 09:37:08,984 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 10 states. 
[2020-11-25 09:37:08,984 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2667 states and 3010 transitions.
[2020-11-25 09:37:08,988 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 09:37:08,994 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2667 states to 2667 states and 3010 transitions.
[2020-11-25 09:37:08,994 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 619
[2020-11-25 09:37:08,995 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 619
[2020-11-25 09:37:08,995 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 2667 states and 3010 transitions.
[2020-11-25 09:37:08,996 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 09:37:08,996 INFO  L728         BuchiCegarLoop]: Abstraction has 2667 states and 3010 transitions.
[2020-11-25 09:37:08,998 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 2667 states and 3010 transitions.
[2020-11-25 09:37:09,012 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 2667 to 2667.
[2020-11-25 09:37:09,012 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 2667 states.
[2020-11-25 09:37:09,014 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 2667 states to 2667 states and 3010 transitions.
[2020-11-25 09:37:09,014 INFO  L751         BuchiCegarLoop]: Abstraction has 2667 states and 3010 transitions.
[2020-11-25 09:37:09,014 INFO  L631         BuchiCegarLoop]: Abstraction has 2667 states and 3010 transitions.
[2020-11-25 09:37:09,015 INFO  L445         BuchiCegarLoop]: ======== Iteration 10============
[2020-11-25 09:37:09,015 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2667 states and 3010 transitions.
[2020-11-25 09:37:09,017 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 09:37:09,017 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 09:37:09,017 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 09:37:09,018 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 09:37:09,018 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_ERC200 := false;
[L2]                 call_transfer_ERC200 := false;
[L2]     CALL        call main();
[L4981]              assume null == 0;
[L4982]  CALL        call this := FreshRefGenerator__success();
[L2122]              havoc newRef;
[L2123]              assume Alloc[newRef] == false;
[L2124]              Alloc[newRef] := true;
[L2125]              assume newRef != null;
[L4982]  RET         call this := FreshRefGenerator__success();
[L4983]              assume now >= 0;
[L4984]              assume DType[this] == YFV;
[L4985]              assume msgvalue_MSG == 0;
[L4986]              gas := gas - 53000;
[L4987]  CALL        call YFV_YFV(this, msgsender_MSG, msgvalue_MSG);
[L1098]              havoc __exception;
[L1099]              revert := false;
[L1100]  COND FALSE  !(__exception)
[L1125]  CALL        call YFV_YFV__success(this, msgsender_MSG, msgvalue_MSG);
[L3242]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2186]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2171]              assume msgsender_MSG != null;
[L2172]              Balance[this] := 0;
[L2186]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2187]  COND FALSE  !(revert)
[L3242]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3243]  COND FALSE  !(revert)
[L3246]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2154]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2139]              assume msgsender_MSG != null;
[L2140]              Balance[this] := 0;
[L2154]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2155]  COND FALSE  !(revert)
[L3246]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3247]  COND FALSE  !(revert)
[L3250]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2248]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2186]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2171]              assume msgsender_MSG != null;
[L2172]              Balance[this] := 0;
[L2186]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2187]  COND FALSE  !(revert)
[L2248]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2249]  COND FALSE  !(revert)
[L2252]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2154]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2139]              assume msgsender_MSG != null;
[L2140]              Balance[this] := 0;
[L2154]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2155]  COND FALSE  !(revert)
[L2252]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2253]  COND FALSE  !(revert)
[L2256]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2220]              assume msgsender_MSG != null;
[L2221]              Balance[this] := 0;
[L2222]              _balances_ERC20[this] := zeroRefintArr();
[L2223]              sum__balances0[this] := 0;
[L2224]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2225]              sum__allowances1[this] := 0;
[L2226]              _totalSupply_ERC20[this] := 0;
[L2256]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2257]  COND FALSE  !(revert)
[L3250]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3251]  COND FALSE  !(revert)
[L3254]  CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -868984158, 934069305, 18);
[L3012]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2154]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2139]              assume msgsender_MSG != null;
[L2140]              Balance[this] := 0;
[L2154]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2155]  COND FALSE  !(revert)
[L3012]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3013]  COND FALSE  !(revert)
[L3016]  CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s484, symbol_s484, decimals_s484);
[L2987]              assume msgsender_MSG != null;
[L2988]              Balance[this] := 0;
[L2989]              _name_ERC20Detailed[this] := 1252836592;
[L2990]              _symbol_ERC20Detailed[this] := 1252836592;
[L2991]              _decimals_ERC20Detailed[this] := 0;
[L2993]              _name_ERC20Detailed[this] := name_s484;
[L2994]              _symbol_ERC20Detailed[this] := symbol_s484;
[L2995]              _decimals_ERC20Detailed[this] := decimals_s484;
[L3016]  RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s484, symbol_s484, decimals_s484);
[L3017]  COND FALSE  !(revert)
[L3254]  RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -868984158, 934069305, 18);
[L3255]  COND FALSE  !(revert)
[L3258]  CALL        call YFV_YFV_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3208]              assume msgsender_MSG != null;
[L3209]              Balance[this] := 0;
[L3210]              governance_YFV[this] := null;
[L3211]              minters_YFV[this] := zeroRefboolArr();
[L3213]              governance_YFV[this] := msgsender_MSG;
[L3258]  RET         call YFV_YFV_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3259]  COND FALSE  !(revert)
[L1125]  RET         call YFV_YFV__success(this, msgsender_MSG, msgvalue_MSG);
[L1126]              assume !revert && gas >= 0;
[L4987]  RET         call YFV_YFV(this, msgsender_MSG, msgvalue_MSG);
[L4988]              assume !revert && gas >= 0;
[L4991]  CALL        call CorralChoice_YFV(this);
[L4804]              havoc msgsender_MSG;
[L4805]              havoc msgvalue_MSG;
[L4806]              havoc choice;
[L4807]              havoc __ret_0_totalSupply;
[L4808]              havoc account_s121;
[L4809]              havoc __ret_0_balanceOf;
[L4810]              havoc recipient_s140;
[L4811]              havoc amount_s140;
[L4812]              havoc __ret_0_transfer;
[L4813]              havoc owner_s156;
[L4814]              havoc spender_s156;
[L4815]              havoc __ret_0_allowance;
[L4816]              havoc spender_s175;
[L4817]              havoc amount_s175;
[L4818]              havoc __ret_0_approve;
[L4819]              havoc sender_s211;
[L4820]              havoc recipient_s211;
[L4821]              havoc amount_s211;
[L4822]              havoc __ret_0_transferFrom;
[L4823]              havoc spender_s238;
[L4824]              havoc addedValue_s238;
[L4825]              havoc __ret_0_increaseAllowance;
[L4826]              havoc spender_s266;
[L4827]              havoc subtractedValue_s266;
[L4828]              havoc __ret_0_decreaseAllowance;
[L4829]              havoc name_s484;
[L4830]              havoc symbol_s484;
[L4831]              havoc decimals_s484;
[L4832]              havoc __ret_0_name;
[L4833]              havoc __ret_0_symbol;
[L4834]              havoc __ret_0_decimals;
[L4835]              havoc __ret_0_governance;
[L4836]              havoc arg744_s0;
[L4837]              havoc __ret_0_minters;
[L4838]              havoc account_s671;
[L4839]              havoc amount_s671;
[L4840]              havoc amount_s683;
[L4841]              havoc _governance_s701;
[L4842]              havoc _minter_s721;
[L4843]              havoc _minter_s741;
[L4844]              havoc tmpNow;
[L4845]              havoc gas;
[L4846]              assume gas > 4000000 && gas <= 8000000;
[L4847]              tmpNow := now;
[L4848]              havoc now;
[L4849]              assume now > tmpNow;
[L4850]              assume msgsender_MSG != null;
[L4851]              assume DType[msgsender_MSG] != IERC20;
[L4852]              assume DType[msgsender_MSG] != Context;
[L4853]              assume DType[msgsender_MSG] != ERC20;
[L4854]              assume DType[msgsender_MSG] != ERC20Detailed;
[L4855]              assume DType[msgsender_MSG] != SafeMath;
[L4856]              assume DType[msgsender_MSG] != YFV;
[L4857]              Alloc[msgsender_MSG] := true;
[L4858]  COND FALSE  !(choice == 18)
[L4864]  COND FALSE  !(choice == 17)
[L4870]  COND FALSE  !(choice == 16)
[L4877]  COND FALSE  !(choice == 15)
[L4883]  COND FALSE  !(choice == 14)
[L4890]  COND FALSE  !(choice == 13)
[L4897]  COND FALSE  !(choice == 12)
[L4904]  COND FALSE  !(choice == 11)
[L4911]  COND FALSE  !(choice == 10)
[L4917]  COND FALSE  !(choice == 9)
[L4923]  COND FALSE  !(choice == 8)
[L4929]  COND FALSE  !(choice == 7)
[L4935]  COND FALSE  !(choice == 6)
[L4941]  COND FALSE  !(choice == 5)
[L4948]  COND TRUE   choice == 4
[L4949]              gas := gas - 21000;
[L4950]  COND TRUE   gas >= 0
[L4951]              assume amount_s683 >= 0 && amount_s683 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4952]              assume msgvalue_MSG == 0;
[L4953]  CALL        call burn~uint256_YFV(this, msgsender_MSG, msgvalue_MSG, amount_s683);
[L1220]              havoc __exception;
[L1221]              revert := false;
[L1222]  COND FALSE  !(__exception)
[L1247]  CALL        call burn~uint256_YFV__success(this, msgsender_MSG, msgvalue_MSG, amount_s683);
[L3310]  COND TRUE   DType[this] == YFV
[L3311]  CALL        call _burn~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, amount_s683);
[L2911]              __var_19 := null;
[L2912]  COND FALSE  !(!(account_s411 != null))
[L2916]  CALL        call __var_20 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s411], amount_s411, 392639254);
[L3129]  COND FALSE  !(!(b_s561 <= a_s561))
[L3133]              c_s561 := (a_s561 - b_s561) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3134]              __ret_0_ := c_s561;
[L2916]  RET         call __var_20 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s411], amount_s411, 392639254);
[L2917]  COND FALSE  !(revert)
[L2920]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s411];
[L2921]              _balances_ERC20[this][account_s411] := __var_20;
[L2922]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s411];
[L2923]  CALL        call __var_21 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s411, 1252836592);
[L3129]  COND FALSE  !(!(b_s561 <= a_s561))
[L3133]              c_s561 := (a_s561 - b_s561) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3134]              __ret_0_ := c_s561;
[L2923]  RET         call __var_21 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s411, 1252836592);
[L2924]  COND FALSE  !(revert)
[L2927]              _totalSupply_ERC20[this] := __var_21;
[L2928]              assert { :EventEmitted "Transfer_ERC20" } true;
[L3311]  RET         call _burn~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, amount_s683);
[L3312]  COND FALSE  !(revert)
[L1247]  RET         call burn~uint256_YFV__success(this, msgsender_MSG, msgvalue_MSG, amount_s683);
[L1248]              assume !revert && gas >= 0;
[L4953]  RET         call burn~uint256_YFV(this, msgsender_MSG, msgvalue_MSG, amount_s683);
[L4991]  RET         call CorralChoice_YFV(this);
[L4991]  CALL        call CorralChoice_YFV(this);
[L4804]              havoc msgsender_MSG;
[L4805]              havoc msgvalue_MSG;
[L4806]              havoc choice;
[L4807]              havoc __ret_0_totalSupply;
[L4808]              havoc account_s121;
[L4809]              havoc __ret_0_balanceOf;
[L4810]              havoc recipient_s140;
[L4811]              havoc amount_s140;
[L4812]              havoc __ret_0_transfer;
[L4813]              havoc owner_s156;
[L4814]              havoc spender_s156;
[L4815]              havoc __ret_0_allowance;
[L4816]              havoc spender_s175;
[L4817]              havoc amount_s175;
[L4818]              havoc __ret_0_approve;
[L4819]              havoc sender_s211;
[L4820]              havoc recipient_s211;
[L4821]              havoc amount_s211;
[L4822]              havoc __ret_0_transferFrom;
[L4823]              havoc spender_s238;
[L4824]              havoc addedValue_s238;
[L4825]              havoc __ret_0_increaseAllowance;
[L4826]              havoc spender_s266;
[L4827]              havoc subtractedValue_s266;
[L4828]              havoc __ret_0_decreaseAllowance;
[L4829]              havoc name_s484;
[L4830]              havoc symbol_s484;
[L4831]              havoc decimals_s484;
[L4832]              havoc __ret_0_name;
[L4833]              havoc __ret_0_symbol;
[L4834]              havoc __ret_0_decimals;
[L4835]              havoc __ret_0_governance;
[L4836]              havoc arg744_s0;
[L4837]              havoc __ret_0_minters;
[L4838]              havoc account_s671;
[L4839]              havoc amount_s671;
[L4840]              havoc amount_s683;
[L4841]              havoc _governance_s701;
[L4842]              havoc _minter_s721;
[L4843]              havoc _minter_s741;
[L4844]              havoc tmpNow;
[L4845]              havoc gas;
[L4846]              assume gas > 4000000 && gas <= 8000000;
[L4847]              tmpNow := now;
[L4848]              havoc now;
[L4849]              assume now > tmpNow;
[L4850]              assume msgsender_MSG != null;
[L4851]              assume DType[msgsender_MSG] != IERC20;
[L4852]              assume DType[msgsender_MSG] != Context;
[L4853]              assume DType[msgsender_MSG] != ERC20;
[L4854]              assume DType[msgsender_MSG] != ERC20Detailed;
[L4855]              assume DType[msgsender_MSG] != SafeMath;
[L4856]              assume DType[msgsender_MSG] != YFV;
[L4857]              Alloc[msgsender_MSG] := true;
[L4858]  COND FALSE  !(choice == 18)
[L4864]  COND FALSE  !(choice == 17)
[L4870]  COND TRUE   choice == 16
[L4871]              gas := gas - 21000;
[L4872]  COND TRUE   gas >= 0
[L4873]              assume amount_s140 >= 0 && amount_s140 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4874]              assume msgvalue_MSG == 0;
[L4875]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == recipient_s140 && amount_s140 <= _balances_ERC20[this][msgsender_MSG]) && amount_s140 >= 0) && amount_s140 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s140] >= 0) && _balances_ERC20[this][recipient_s140] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC200 := true;
[L2]                 call_transfer_ERC200 := false;
[L2]                 revert := revert_hold;
[L392]               havoc __exception;
[L393]               revert := false;
[L394]   COND FALSE  !(__exception)
[L419]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L2322]  COND TRUE   DType[this] == YFV
[L2323]  CALL        call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2200]              __ret_0_ := msgsender_MSG;
[L2323]  RET         call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2324]  COND FALSE  !(revert)
[L2335]  COND TRUE   DType[this] == YFV
[L2336]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s140, amount_s140);
[L2806]              __var_12 := null;
[L2807]  COND FALSE  !(!(sender_s323 != null))
[L2811]              __var_13 := null;
[L2812]  COND FALSE  !(!(recipient_s323 != null))
[L2816]  CALL        call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s323], amount_s323, -806116454);
[L3129]  COND FALSE  !(!(b_s561 <= a_s561))
[L3133]              c_s561 := (a_s561 - b_s561) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3134]              __ret_0_ := c_s561;
[L2816]  RET         call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s323], amount_s323, -806116454);
[L2817]  COND FALSE  !(revert)
[L2820]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s323];
[L2821]              _balances_ERC20[this][sender_s323] := __var_14;
[L2822]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s323];
[L2823]  CALL        call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s323], amount_s323);
[L3105]              c_s534 := (a_s534 + b_s534) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3106]  COND FALSE  !(!(c_s534 >= a_s534))
[L3110]              __ret_0_ := c_s534;
[L2823]  RET         call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s323], amount_s323);
[L2824]  COND FALSE  !(revert)
[L2827]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s323];
[L2828]              _balances_ERC20[this][recipient_s323] := __var_15;
[L2829]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s323];
[L2830]              assert { :EventEmitted "Transfer_ERC20" } true;
[L2336]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s140, amount_s140);
[L2337]  COND FALSE  !(revert)
[L2348]              __ret_0_ := true;
[L419]   RET         call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L420]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !((((((((__ret_0_ == true && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowances_ERC20[this] == old(_allowances_ERC20[this])) && governance_YFV[this] == old(governance_YFV[this])) && minters_YFV[this] == old(minters_YFV[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]));
[L2]                 revert := revert_hold;
[L4875]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L4991]  RET         call CorralChoice_YFV(this);

Loop:
[L4991]  CALL        call CorralChoice_YFV(this);
[L4804]              havoc msgsender_MSG;
[L4805]              havoc msgvalue_MSG;
[L4806]              havoc choice;
[L4807]              havoc __ret_0_totalSupply;
[L4808]              havoc account_s121;
[L4809]              havoc __ret_0_balanceOf;
[L4810]              havoc recipient_s140;
[L4811]              havoc amount_s140;
[L4812]              havoc __ret_0_transfer;
[L4813]              havoc owner_s156;
[L4814]              havoc spender_s156;
[L4815]              havoc __ret_0_allowance;
[L4816]              havoc spender_s175;
[L4817]              havoc amount_s175;
[L4818]              havoc __ret_0_approve;
[L4819]              havoc sender_s211;
[L4820]              havoc recipient_s211;
[L4821]              havoc amount_s211;
[L4822]              havoc __ret_0_transferFrom;
[L4823]              havoc spender_s238;
[L4824]              havoc addedValue_s238;
[L4825]              havoc __ret_0_increaseAllowance;
[L4826]              havoc spender_s266;
[L4827]              havoc subtractedValue_s266;
[L4828]              havoc __ret_0_decreaseAllowance;
[L4829]              havoc name_s484;
[L4830]              havoc symbol_s484;
[L4831]              havoc decimals_s484;
[L4832]              havoc __ret_0_name;
[L4833]              havoc __ret_0_symbol;
[L4834]              havoc __ret_0_decimals;
[L4835]              havoc __ret_0_governance;
[L4836]              havoc arg744_s0;
[L4837]              havoc __ret_0_minters;
[L4838]              havoc account_s671;
[L4839]              havoc amount_s671;
[L4840]              havoc amount_s683;
[L4841]              havoc _governance_s701;
[L4842]              havoc _minter_s721;
[L4843]              havoc _minter_s741;
[L4844]              havoc tmpNow;
[L4845]              havoc gas;
[L4846]              assume gas > 4000000 && gas <= 8000000;
[L4847]              tmpNow := now;
[L4848]              havoc now;
[L4849]              assume now > tmpNow;
[L4850]              assume msgsender_MSG != null;
[L4851]              assume DType[msgsender_MSG] != IERC20;
[L4852]              assume DType[msgsender_MSG] != Context;
[L4853]              assume DType[msgsender_MSG] != ERC20;
[L4854]              assume DType[msgsender_MSG] != ERC20Detailed;
[L4855]              assume DType[msgsender_MSG] != SafeMath;
[L4856]              assume DType[msgsender_MSG] != YFV;
[L4857]              Alloc[msgsender_MSG] := true;
[L4858]  COND TRUE   choice == 18
[L4859]              gas := gas - 21000;
[L4860]  COND FALSE  !(gas >= 0)
[L4991]  RET         call CorralChoice_YFV(this);

[2020-11-25 09:37:09,021 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 09:37:09,021 INFO  L82        PathProgramCache]: Analyzing trace with hash -52619231, now seen corresponding path program 1 times
[2020-11-25 09:37:09,022 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 09:37:09,043 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 09:37:09,863 INFO  L134       CoverageAnalysis]: Checked inductivity of 104 backedges. 0 proven. 4 refuted. 0 times theorem prover too weak. 100 trivial. 0 not checked.
[2020-11-25 09:37:09,863 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 09:37:09,864 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [34] total 34
[2020-11-25 09:37:09,864 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 09:37:09,864 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 35 interpolants.
[2020-11-25 09:37:09,864 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=96, Invalid=1094, Unknown=0, NotChecked=0, Total=1190
[2020-11-25 09:37:09,865 INFO  L87              Difference]: Start difference. First operand 2667 states and 3010 transitions. cyclomatic complexity: 349 Second operand 35 states.
[2020-11-25 09:37:16,450 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 09:37:16,450 INFO  L93              Difference]: Finished difference Result 3069 states and 3573 transitions.
[2020-11-25 09:37:16,450 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 35 states. 
[2020-11-25 09:37:16,451 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 3069 states and 3573 transitions.
[2020-11-25 09:37:16,457 INFO  L131   ngComponentsAnalysis]: Automaton has 4 accepting balls. 8
[2020-11-25 09:37:16,465 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 3069 states to 3069 states and 3570 transitions.
[2020-11-25 09:37:16,466 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 724
[2020-11-25 09:37:16,466 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 724
[2020-11-25 09:37:16,466 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 3069 states and 3570 transitions.
[2020-11-25 09:37:16,468 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 09:37:16,468 INFO  L728         BuchiCegarLoop]: Abstraction has 3069 states and 3570 transitions.
[2020-11-25 09:37:16,471 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 3069 states and 3570 transitions.
[2020-11-25 09:37:16,487 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 3069 to 3049.
[2020-11-25 09:37:16,487 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 3049 states.
[2020-11-25 09:37:16,525 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 3049 states to 3049 states and 3538 transitions.
[2020-11-25 09:37:16,525 INFO  L751         BuchiCegarLoop]: Abstraction has 3049 states and 3538 transitions.
[2020-11-25 09:37:16,525 INFO  L631         BuchiCegarLoop]: Abstraction has 3049 states and 3538 transitions.
[2020-11-25 09:37:16,526 INFO  L445         BuchiCegarLoop]: ======== Iteration 11============
[2020-11-25 09:37:16,526 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 3049 states and 3538 transitions.
[2020-11-25 09:37:16,532 INFO  L131   ngComponentsAnalysis]: Automaton has 4 accepting balls. 8
[2020-11-25 09:37:16,532 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 09:37:16,532 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 09:37:16,534 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 09:37:16,534 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_ERC200 := false;
[L2]                 call_transfer_ERC200 := false;
[L2]     CALL        call main();
[L4981]              assume null == 0;
[L4982]  CALL        call this := FreshRefGenerator__success();
[L2122]              havoc newRef;
[L2123]              assume Alloc[newRef] == false;
[L2124]              Alloc[newRef] := true;
[L2125]              assume newRef != null;
[L4982]  RET         call this := FreshRefGenerator__success();
[L4983]              assume now >= 0;
[L4984]              assume DType[this] == YFV;
[L4985]              assume msgvalue_MSG == 0;
[L4986]              gas := gas - 53000;
[L4987]  CALL        call YFV_YFV(this, msgsender_MSG, msgvalue_MSG);
[L1098]              havoc __exception;
[L1099]              revert := false;
[L1100]  COND FALSE  !(__exception)
[L1125]  CALL        call YFV_YFV__success(this, msgsender_MSG, msgvalue_MSG);
[L3242]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2186]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2171]              assume msgsender_MSG != null;
[L2172]              Balance[this] := 0;
[L2186]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2187]  COND FALSE  !(revert)
[L3242]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3243]  COND FALSE  !(revert)
[L3246]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2154]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2139]              assume msgsender_MSG != null;
[L2140]              Balance[this] := 0;
[L2154]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2155]  COND FALSE  !(revert)
[L3246]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3247]  COND FALSE  !(revert)
[L3250]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2248]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2186]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2171]              assume msgsender_MSG != null;
[L2172]              Balance[this] := 0;
[L2186]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2187]  COND FALSE  !(revert)
[L2248]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2249]  COND FALSE  !(revert)
[L2252]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2154]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2139]              assume msgsender_MSG != null;
[L2140]              Balance[this] := 0;
[L2154]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2155]  COND FALSE  !(revert)
[L2252]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2253]  COND FALSE  !(revert)
[L2256]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2220]              assume msgsender_MSG != null;
[L2221]              Balance[this] := 0;
[L2222]              _balances_ERC20[this] := zeroRefintArr();
[L2223]              sum__balances0[this] := 0;
[L2224]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2225]              sum__allowances1[this] := 0;
[L2226]              _totalSupply_ERC20[this] := 0;
[L2256]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2257]  COND FALSE  !(revert)
[L3250]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3251]  COND FALSE  !(revert)
[L3254]  CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -868984158, 934069305, 18);
[L3012]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2154]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2139]              assume msgsender_MSG != null;
[L2140]              Balance[this] := 0;
[L2154]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2155]  COND FALSE  !(revert)
[L3012]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3013]  COND FALSE  !(revert)
[L3016]  CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s484, symbol_s484, decimals_s484);
[L2987]              assume msgsender_MSG != null;
[L2988]              Balance[this] := 0;
[L2989]              _name_ERC20Detailed[this] := 1252836592;
[L2990]              _symbol_ERC20Detailed[this] := 1252836592;
[L2991]              _decimals_ERC20Detailed[this] := 0;
[L2993]              _name_ERC20Detailed[this] := name_s484;
[L2994]              _symbol_ERC20Detailed[this] := symbol_s484;
[L2995]              _decimals_ERC20Detailed[this] := decimals_s484;
[L3016]  RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s484, symbol_s484, decimals_s484);
[L3017]  COND FALSE  !(revert)
[L3254]  RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -868984158, 934069305, 18);
[L3255]  COND FALSE  !(revert)
[L3258]  CALL        call YFV_YFV_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3208]              assume msgsender_MSG != null;
[L3209]              Balance[this] := 0;
[L3210]              governance_YFV[this] := null;
[L3211]              minters_YFV[this] := zeroRefboolArr();
[L3213]              governance_YFV[this] := msgsender_MSG;
[L3258]  RET         call YFV_YFV_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3259]  COND FALSE  !(revert)
[L1125]  RET         call YFV_YFV__success(this, msgsender_MSG, msgvalue_MSG);
[L1126]              assume !revert && gas >= 0;
[L4987]  RET         call YFV_YFV(this, msgsender_MSG, msgvalue_MSG);
[L4988]              assume !revert && gas >= 0;
[L4991]  CALL        call CorralChoice_YFV(this);
[L4804]              havoc msgsender_MSG;
[L4805]              havoc msgvalue_MSG;
[L4806]              havoc choice;
[L4807]              havoc __ret_0_totalSupply;
[L4808]              havoc account_s121;
[L4809]              havoc __ret_0_balanceOf;
[L4810]              havoc recipient_s140;
[L4811]              havoc amount_s140;
[L4812]              havoc __ret_0_transfer;
[L4813]              havoc owner_s156;
[L4814]              havoc spender_s156;
[L4815]              havoc __ret_0_allowance;
[L4816]              havoc spender_s175;
[L4817]              havoc amount_s175;
[L4818]              havoc __ret_0_approve;
[L4819]              havoc sender_s211;
[L4820]              havoc recipient_s211;
[L4821]              havoc amount_s211;
[L4822]              havoc __ret_0_transferFrom;
[L4823]              havoc spender_s238;
[L4824]              havoc addedValue_s238;
[L4825]              havoc __ret_0_increaseAllowance;
[L4826]              havoc spender_s266;
[L4827]              havoc subtractedValue_s266;
[L4828]              havoc __ret_0_decreaseAllowance;
[L4829]              havoc name_s484;
[L4830]              havoc symbol_s484;
[L4831]              havoc decimals_s484;
[L4832]              havoc __ret_0_name;
[L4833]              havoc __ret_0_symbol;
[L4834]              havoc __ret_0_decimals;
[L4835]              havoc __ret_0_governance;
[L4836]              havoc arg744_s0;
[L4837]              havoc __ret_0_minters;
[L4838]              havoc account_s671;
[L4839]              havoc amount_s671;
[L4840]              havoc amount_s683;
[L4841]              havoc _governance_s701;
[L4842]              havoc _minter_s721;
[L4843]              havoc _minter_s741;
[L4844]              havoc tmpNow;
[L4845]              havoc gas;
[L4846]              assume gas > 4000000 && gas <= 8000000;
[L4847]              tmpNow := now;
[L4848]              havoc now;
[L4849]              assume now > tmpNow;
[L4850]              assume msgsender_MSG != null;
[L4851]              assume DType[msgsender_MSG] != IERC20;
[L4852]              assume DType[msgsender_MSG] != Context;
[L4853]              assume DType[msgsender_MSG] != ERC20;
[L4854]              assume DType[msgsender_MSG] != ERC20Detailed;
[L4855]              assume DType[msgsender_MSG] != SafeMath;
[L4856]              assume DType[msgsender_MSG] != YFV;
[L4857]              Alloc[msgsender_MSG] := true;
[L4858]  COND FALSE  !(choice == 18)
[L4864]  COND FALSE  !(choice == 17)
[L4870]  COND TRUE   choice == 16
[L4871]              gas := gas - 21000;
[L4872]  COND TRUE   gas >= 0
[L4873]              assume amount_s140 >= 0 && amount_s140 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4874]              assume msgvalue_MSG == 0;
[L4875]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((msgsender_MSG == recipient_s140 && amount_s140 <= _balances_ERC20[this][msgsender_MSG]) && amount_s140 >= 0) && amount_s140 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s140] >= 0) && _balances_ERC20[this][recipient_s140] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2]                 revert := revert_hold;
[L392]               havoc __exception;
[L393]               revert := false;
[L394]   COND FALSE  !(__exception)
[L419]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L2322]  COND TRUE   DType[this] == YFV
[L2323]  CALL        call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2200]              __ret_0_ := msgsender_MSG;
[L2323]  RET         call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2324]  COND FALSE  !(revert)
[L2335]  COND TRUE   DType[this] == YFV
[L2336]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s140, amount_s140);
[L2806]              __var_12 := null;
[L2807]  COND FALSE  !(!(sender_s323 != null))
[L2811]              __var_13 := null;
[L2812]  COND FALSE  !(!(recipient_s323 != null))
[L2816]  CALL        call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s323], amount_s323, -806116454);
[L3129]  COND FALSE  !(!(b_s561 <= a_s561))
[L3133]              c_s561 := (a_s561 - b_s561) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3134]              __ret_0_ := c_s561;
[L2816]  RET         call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s323], amount_s323, -806116454);
[L2817]  COND FALSE  !(revert)
[L2820]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s323];
[L2821]              _balances_ERC20[this][sender_s323] := __var_14;
[L2822]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s323];
[L2823]  CALL        call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s323], amount_s323);
[L3105]              c_s534 := (a_s534 + b_s534) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3106]  COND FALSE  !(!(c_s534 >= a_s534))
[L3110]              __ret_0_ := c_s534;
[L2823]  RET         call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s323], amount_s323);
[L2824]  COND FALSE  !(revert)
[L2827]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s323];
[L2828]              _balances_ERC20[this][recipient_s323] := __var_15;
[L2829]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s323];
[L2830]              assert { :EventEmitted "Transfer_ERC20" } true;
[L2336]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s140, amount_s140);
[L2337]  COND FALSE  !(revert)
[L2348]              __ret_0_ := true;
[L419]   RET         call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L420]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !((((((((__ret_0_ == true && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowances_ERC20[this] == old(_allowances_ERC20[this])) && governance_YFV[this] == old(governance_YFV[this])) && minters_YFV[this] == old(minters_YFV[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]));
[L2]                 revert := revert_hold;
[L4875]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L4991]  RET         call CorralChoice_YFV(this);
[L4991]  CALL        call CorralChoice_YFV(this);
[L4804]              havoc msgsender_MSG;
[L4805]              havoc msgvalue_MSG;
[L4806]              havoc choice;
[L4807]              havoc __ret_0_totalSupply;
[L4808]              havoc account_s121;
[L4809]              havoc __ret_0_balanceOf;
[L4810]              havoc recipient_s140;
[L4811]              havoc amount_s140;
[L4812]              havoc __ret_0_transfer;
[L4813]              havoc owner_s156;
[L4814]              havoc spender_s156;
[L4815]              havoc __ret_0_allowance;
[L4816]              havoc spender_s175;
[L4817]              havoc amount_s175;
[L4818]              havoc __ret_0_approve;
[L4819]              havoc sender_s211;
[L4820]              havoc recipient_s211;
[L4821]              havoc amount_s211;
[L4822]              havoc __ret_0_transferFrom;
[L4823]              havoc spender_s238;
[L4824]              havoc addedValue_s238;
[L4825]              havoc __ret_0_increaseAllowance;
[L4826]              havoc spender_s266;
[L4827]              havoc subtractedValue_s266;
[L4828]              havoc __ret_0_decreaseAllowance;
[L4829]              havoc name_s484;
[L4830]              havoc symbol_s484;
[L4831]              havoc decimals_s484;
[L4832]              havoc __ret_0_name;
[L4833]              havoc __ret_0_symbol;
[L4834]              havoc __ret_0_decimals;
[L4835]              havoc __ret_0_governance;
[L4836]              havoc arg744_s0;
[L4837]              havoc __ret_0_minters;
[L4838]              havoc account_s671;
[L4839]              havoc amount_s671;
[L4840]              havoc amount_s683;
[L4841]              havoc _governance_s701;
[L4842]              havoc _minter_s721;
[L4843]              havoc _minter_s741;
[L4844]              havoc tmpNow;
[L4845]              havoc gas;
[L4846]              assume gas > 4000000 && gas <= 8000000;
[L4847]              tmpNow := now;
[L4848]              havoc now;
[L4849]              assume now > tmpNow;
[L4850]              assume msgsender_MSG != null;
[L4851]              assume DType[msgsender_MSG] != IERC20;
[L4852]              assume DType[msgsender_MSG] != Context;
[L4853]              assume DType[msgsender_MSG] != ERC20;
[L4854]              assume DType[msgsender_MSG] != ERC20Detailed;
[L4855]              assume DType[msgsender_MSG] != SafeMath;
[L4856]              assume DType[msgsender_MSG] != YFV;
[L4857]              Alloc[msgsender_MSG] := true;
[L4858]  COND FALSE  !(choice == 18)
[L4864]  COND FALSE  !(choice == 17)
[L4870]  COND TRUE   choice == 16
[L4871]              gas := gas - 21000;
[L4872]  COND TRUE   gas >= 0
[L4873]              assume amount_s140 >= 0 && amount_s140 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4874]              assume msgvalue_MSG == 0;
[L4875]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == recipient_s140 && amount_s140 <= _balances_ERC20[this][msgsender_MSG]) && amount_s140 >= 0) && amount_s140 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s140] >= 0) && _balances_ERC20[this][recipient_s140] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC200 := true;
[L2]                 call_transfer_ERC200 := false;
[L2]                 revert := revert_hold;
[L392]               havoc __exception;
[L393]               revert := false;
[L394]   COND FALSE  !(__exception)
[L419]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L2322]  COND TRUE   DType[this] == YFV
[L2323]  CALL        call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2200]              __ret_0_ := msgsender_MSG;
[L2323]  RET         call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2324]  COND FALSE  !(revert)
[L2335]  COND TRUE   DType[this] == YFV
[L2336]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s140, amount_s140);
[L2806]              __var_12 := null;
[L2807]  COND FALSE  !(!(sender_s323 != null))
[L2811]              __var_13 := null;
[L2812]  COND FALSE  !(!(recipient_s323 != null))
[L2816]  CALL        call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s323], amount_s323, -806116454);
[L3129]  COND FALSE  !(!(b_s561 <= a_s561))
[L3133]              c_s561 := (a_s561 - b_s561) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3134]              __ret_0_ := c_s561;
[L2816]  RET         call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s323], amount_s323, -806116454);
[L2817]  COND FALSE  !(revert)
[L2820]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s323];
[L2821]              _balances_ERC20[this][sender_s323] := __var_14;
[L2822]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s323];
[L2823]  CALL        call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s323], amount_s323);
[L3105]              c_s534 := (a_s534 + b_s534) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3106]  COND FALSE  !(!(c_s534 >= a_s534))
[L3110]              __ret_0_ := c_s534;
[L2823]  RET         call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s323], amount_s323);
[L2824]  COND FALSE  !(revert)
[L2827]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s323];
[L2828]              _balances_ERC20[this][recipient_s323] := __var_15;
[L2829]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s323];
[L2830]              assert { :EventEmitted "Transfer_ERC20" } true;
[L2336]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s140, amount_s140);
[L2337]  COND FALSE  !(revert)
[L2348]              __ret_0_ := true;
[L419]   RET         call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L420]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !((((((((__ret_0_ == true && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowances_ERC20[this] == old(_allowances_ERC20[this])) && governance_YFV[this] == old(governance_YFV[this])) && minters_YFV[this] == old(minters_YFV[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]));
[L2]                 revert := revert_hold;
[L4875]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L4991]  RET         call CorralChoice_YFV(this);

Loop:
[L4991]  CALL        call CorralChoice_YFV(this);
[L4804]              havoc msgsender_MSG;
[L4805]              havoc msgvalue_MSG;
[L4806]              havoc choice;
[L4807]              havoc __ret_0_totalSupply;
[L4808]              havoc account_s121;
[L4809]              havoc __ret_0_balanceOf;
[L4810]              havoc recipient_s140;
[L4811]              havoc amount_s140;
[L4812]              havoc __ret_0_transfer;
[L4813]              havoc owner_s156;
[L4814]              havoc spender_s156;
[L4815]              havoc __ret_0_allowance;
[L4816]              havoc spender_s175;
[L4817]              havoc amount_s175;
[L4818]              havoc __ret_0_approve;
[L4819]              havoc sender_s211;
[L4820]              havoc recipient_s211;
[L4821]              havoc amount_s211;
[L4822]              havoc __ret_0_transferFrom;
[L4823]              havoc spender_s238;
[L4824]              havoc addedValue_s238;
[L4825]              havoc __ret_0_increaseAllowance;
[L4826]              havoc spender_s266;
[L4827]              havoc subtractedValue_s266;
[L4828]              havoc __ret_0_decreaseAllowance;
[L4829]              havoc name_s484;
[L4830]              havoc symbol_s484;
[L4831]              havoc decimals_s484;
[L4832]              havoc __ret_0_name;
[L4833]              havoc __ret_0_symbol;
[L4834]              havoc __ret_0_decimals;
[L4835]              havoc __ret_0_governance;
[L4836]              havoc arg744_s0;
[L4837]              havoc __ret_0_minters;
[L4838]              havoc account_s671;
[L4839]              havoc amount_s671;
[L4840]              havoc amount_s683;
[L4841]              havoc _governance_s701;
[L4842]              havoc _minter_s721;
[L4843]              havoc _minter_s741;
[L4844]              havoc tmpNow;
[L4845]              havoc gas;
[L4846]              assume gas > 4000000 && gas <= 8000000;
[L4847]              tmpNow := now;
[L4848]              havoc now;
[L4849]              assume now > tmpNow;
[L4850]              assume msgsender_MSG != null;
[L4851]              assume DType[msgsender_MSG] != IERC20;
[L4852]              assume DType[msgsender_MSG] != Context;
[L4853]              assume DType[msgsender_MSG] != ERC20;
[L4854]              assume DType[msgsender_MSG] != ERC20Detailed;
[L4855]              assume DType[msgsender_MSG] != SafeMath;
[L4856]              assume DType[msgsender_MSG] != YFV;
[L4857]              Alloc[msgsender_MSG] := true;
[L4858]  COND FALSE  !(choice == 18)
[L4864]  COND FALSE  !(choice == 17)
[L4870]  COND FALSE  !(choice == 16)
[L4877]  COND FALSE  !(choice == 15)
[L4883]  COND FALSE  !(choice == 14)
[L4890]  COND FALSE  !(choice == 13)
[L4897]  COND FALSE  !(choice == 12)
[L4904]  COND FALSE  !(choice == 11)
[L4911]  COND FALSE  !(choice == 10)
[L4917]  COND FALSE  !(choice == 9)
[L4923]  COND FALSE  !(choice == 8)
[L4929]  COND FALSE  !(choice == 7)
[L4935]  COND FALSE  !(choice == 6)
[L4941]  COND FALSE  !(choice == 5)
[L4948]  COND TRUE   choice == 4
[L4949]              gas := gas - 21000;
[L4950]  COND TRUE   gas >= 0
[L4951]              assume amount_s683 >= 0 && amount_s683 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4952]              assume msgvalue_MSG == 0;
[L4953]  CALL        call burn~uint256_YFV(this, msgsender_MSG, msgvalue_MSG, amount_s683);
[L1220]              havoc __exception;
[L1221]              revert := false;
[L1222]  COND FALSE  !(__exception)
[L1247]  CALL        call burn~uint256_YFV__success(this, msgsender_MSG, msgvalue_MSG, amount_s683);
[L3310]  COND TRUE   DType[this] == YFV
[L3311]  CALL        call _burn~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, amount_s683);
[L2911]              __var_19 := null;
[L2912]  COND FALSE  !(!(account_s411 != null))
[L2916]  CALL        call __var_20 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s411], amount_s411, 392639254);
[L3129]  COND FALSE  !(!(b_s561 <= a_s561))
[L3133]              c_s561 := (a_s561 - b_s561) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3134]              __ret_0_ := c_s561;
[L2916]  RET         call __var_20 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s411], amount_s411, 392639254);
[L2917]  COND FALSE  !(revert)
[L2920]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s411];
[L2921]              _balances_ERC20[this][account_s411] := __var_20;
[L2922]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s411];
[L2923]  CALL        call __var_21 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s411, 1252836592);
[L3129]  COND FALSE  !(!(b_s561 <= a_s561))
[L3133]              c_s561 := (a_s561 - b_s561) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3134]              __ret_0_ := c_s561;
[L2923]  RET         call __var_21 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s411, 1252836592);
[L2924]  COND FALSE  !(revert)
[L2927]              _totalSupply_ERC20[this] := __var_21;
[L2928]              assert { :EventEmitted "Transfer_ERC20" } true;
[L3311]  RET         call _burn~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, amount_s683);
[L3312]  COND FALSE  !(revert)
[L1247]  RET         call burn~uint256_YFV__success(this, msgsender_MSG, msgvalue_MSG, amount_s683);
[L1248]              assume !revert && gas >= 0;
[L4953]  RET         call burn~uint256_YFV(this, msgsender_MSG, msgvalue_MSG, amount_s683);
[L4991]  RET         call CorralChoice_YFV(this);

[2020-11-25 09:37:16,564 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 09:37:16,565 INFO  L82        PathProgramCache]: Analyzing trace with hash 1749894463, now seen corresponding path program 1 times
[2020-11-25 09:37:16,565 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 09:37:16,591 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 09:37:18,653 INFO  L134       CoverageAnalysis]: Checked inductivity of 108 backedges. 0 proven. 3 refuted. 0 times theorem prover too weak. 105 trivial. 0 not checked.
[2020-11-25 09:37:18,653 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 09:37:18,653 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [45] total 45
[2020-11-25 09:37:18,653 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 09:37:18,654 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 46 interpolants.
[2020-11-25 09:37:18,654 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=140, Invalid=1930, Unknown=0, NotChecked=0, Total=2070
[2020-11-25 09:37:18,654 INFO  L87              Difference]: Start difference. First operand 3049 states and 3538 transitions. cyclomatic complexity: 499 Second operand 46 states.
[2020-11-25 09:37:23,689 WARN  L188               SmtUtils]: Spent 215.00 ms on a formula simplification. DAG size of input: 119 DAG size of output: 102
[2020-11-25 09:37:24,098 WARN  L188               SmtUtils]: Spent 161.00 ms on a formula simplification. DAG size of input: 111 DAG size of output: 98
[2020-11-25 09:37:34,596 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 09:37:34,596 INFO  L93              Difference]: Finished difference Result 3671 states and 4438 transitions.
[2020-11-25 09:37:34,596 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 42 states. 
[2020-11-25 09:37:34,596 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 3671 states and 4438 transitions.
[2020-11-25 09:37:34,639 INFO  L131   ngComponentsAnalysis]: Automaton has 8 accepting balls. 16
[2020-11-25 09:37:34,656 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 3671 states to 3665 states and 4432 transitions.
[2020-11-25 09:37:34,656 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 820
[2020-11-25 09:37:34,656 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 820
[2020-11-25 09:37:34,656 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 3665 states and 4432 transitions.
[2020-11-25 09:37:34,659 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 09:37:34,659 INFO  L728         BuchiCegarLoop]: Abstraction has 3665 states and 4432 transitions.
[2020-11-25 09:37:34,661 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 3665 states and 4432 transitions.
[2020-11-25 09:37:34,683 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 3665 to 3609.
[2020-11-25 09:37:34,683 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 3609 states.
[2020-11-25 09:37:34,687 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 3609 states to 3609 states and 4349 transitions.
[2020-11-25 09:37:34,688 INFO  L751         BuchiCegarLoop]: Abstraction has 3609 states and 4349 transitions.
[2020-11-25 09:37:34,688 INFO  L631         BuchiCegarLoop]: Abstraction has 3609 states and 4349 transitions.
[2020-11-25 09:37:34,688 INFO  L445         BuchiCegarLoop]: ======== Iteration 12============
[2020-11-25 09:37:34,688 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 3609 states and 4349 transitions.
[2020-11-25 09:37:34,691 INFO  L131   ngComponentsAnalysis]: Automaton has 8 accepting balls. 16
[2020-11-25 09:37:34,691 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 09:37:34,691 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 09:37:34,693 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 09:37:34,693 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_ERC200 := false;
[L2]                 call_transfer_ERC200 := false;
[L2]     CALL        call main();
[L4981]              assume null == 0;
[L4982]  CALL        call this := FreshRefGenerator__success();
[L2122]              havoc newRef;
[L2123]              assume Alloc[newRef] == false;
[L2124]              Alloc[newRef] := true;
[L2125]              assume newRef != null;
[L4982]  RET         call this := FreshRefGenerator__success();
[L4983]              assume now >= 0;
[L4984]              assume DType[this] == YFV;
[L4985]              assume msgvalue_MSG == 0;
[L4986]              gas := gas - 53000;
[L4987]  CALL        call YFV_YFV(this, msgsender_MSG, msgvalue_MSG);
[L1098]              havoc __exception;
[L1099]              revert := false;
[L1100]  COND FALSE  !(__exception)
[L1125]  CALL        call YFV_YFV__success(this, msgsender_MSG, msgvalue_MSG);
[L3242]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2186]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2171]              assume msgsender_MSG != null;
[L2172]              Balance[this] := 0;
[L2186]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2187]  COND FALSE  !(revert)
[L3242]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3243]  COND FALSE  !(revert)
[L3246]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2154]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2139]              assume msgsender_MSG != null;
[L2140]              Balance[this] := 0;
[L2154]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2155]  COND FALSE  !(revert)
[L3246]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3247]  COND FALSE  !(revert)
[L3250]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2248]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2186]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2171]              assume msgsender_MSG != null;
[L2172]              Balance[this] := 0;
[L2186]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2187]  COND FALSE  !(revert)
[L2248]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2249]  COND FALSE  !(revert)
[L2252]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2154]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2139]              assume msgsender_MSG != null;
[L2140]              Balance[this] := 0;
[L2154]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2155]  COND FALSE  !(revert)
[L2252]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2253]  COND FALSE  !(revert)
[L2256]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2220]              assume msgsender_MSG != null;
[L2221]              Balance[this] := 0;
[L2222]              _balances_ERC20[this] := zeroRefintArr();
[L2223]              sum__balances0[this] := 0;
[L2224]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2225]              sum__allowances1[this] := 0;
[L2226]              _totalSupply_ERC20[this] := 0;
[L2256]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2257]  COND FALSE  !(revert)
[L3250]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3251]  COND FALSE  !(revert)
[L3254]  CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -868984158, 934069305, 18);
[L3012]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2154]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2139]              assume msgsender_MSG != null;
[L2140]              Balance[this] := 0;
[L2154]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2155]  COND FALSE  !(revert)
[L3012]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3013]  COND FALSE  !(revert)
[L3016]  CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s484, symbol_s484, decimals_s484);
[L2987]              assume msgsender_MSG != null;
[L2988]              Balance[this] := 0;
[L2989]              _name_ERC20Detailed[this] := 1252836592;
[L2990]              _symbol_ERC20Detailed[this] := 1252836592;
[L2991]              _decimals_ERC20Detailed[this] := 0;
[L2993]              _name_ERC20Detailed[this] := name_s484;
[L2994]              _symbol_ERC20Detailed[this] := symbol_s484;
[L2995]              _decimals_ERC20Detailed[this] := decimals_s484;
[L3016]  RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s484, symbol_s484, decimals_s484);
[L3017]  COND FALSE  !(revert)
[L3254]  RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -868984158, 934069305, 18);
[L3255]  COND FALSE  !(revert)
[L3258]  CALL        call YFV_YFV_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3208]              assume msgsender_MSG != null;
[L3209]              Balance[this] := 0;
[L3210]              governance_YFV[this] := null;
[L3211]              minters_YFV[this] := zeroRefboolArr();
[L3213]              governance_YFV[this] := msgsender_MSG;
[L3258]  RET         call YFV_YFV_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3259]  COND FALSE  !(revert)
[L1125]  RET         call YFV_YFV__success(this, msgsender_MSG, msgvalue_MSG);
[L1126]              assume !revert && gas >= 0;
[L4987]  RET         call YFV_YFV(this, msgsender_MSG, msgvalue_MSG);
[L4988]              assume !revert && gas >= 0;
[L4991]  CALL        call CorralChoice_YFV(this);
[L4804]              havoc msgsender_MSG;
[L4805]              havoc msgvalue_MSG;
[L4806]              havoc choice;
[L4807]              havoc __ret_0_totalSupply;
[L4808]              havoc account_s121;
[L4809]              havoc __ret_0_balanceOf;
[L4810]              havoc recipient_s140;
[L4811]              havoc amount_s140;
[L4812]              havoc __ret_0_transfer;
[L4813]              havoc owner_s156;
[L4814]              havoc spender_s156;
[L4815]              havoc __ret_0_allowance;
[L4816]              havoc spender_s175;
[L4817]              havoc amount_s175;
[L4818]              havoc __ret_0_approve;
[L4819]              havoc sender_s211;
[L4820]              havoc recipient_s211;
[L4821]              havoc amount_s211;
[L4822]              havoc __ret_0_transferFrom;
[L4823]              havoc spender_s238;
[L4824]              havoc addedValue_s238;
[L4825]              havoc __ret_0_increaseAllowance;
[L4826]              havoc spender_s266;
[L4827]              havoc subtractedValue_s266;
[L4828]              havoc __ret_0_decreaseAllowance;
[L4829]              havoc name_s484;
[L4830]              havoc symbol_s484;
[L4831]              havoc decimals_s484;
[L4832]              havoc __ret_0_name;
[L4833]              havoc __ret_0_symbol;
[L4834]              havoc __ret_0_decimals;
[L4835]              havoc __ret_0_governance;
[L4836]              havoc arg744_s0;
[L4837]              havoc __ret_0_minters;
[L4838]              havoc account_s671;
[L4839]              havoc amount_s671;
[L4840]              havoc amount_s683;
[L4841]              havoc _governance_s701;
[L4842]              havoc _minter_s721;
[L4843]              havoc _minter_s741;
[L4844]              havoc tmpNow;
[L4845]              havoc gas;
[L4846]              assume gas > 4000000 && gas <= 8000000;
[L4847]              tmpNow := now;
[L4848]              havoc now;
[L4849]              assume now > tmpNow;
[L4850]              assume msgsender_MSG != null;
[L4851]              assume DType[msgsender_MSG] != IERC20;
[L4852]              assume DType[msgsender_MSG] != Context;
[L4853]              assume DType[msgsender_MSG] != ERC20;
[L4854]              assume DType[msgsender_MSG] != ERC20Detailed;
[L4855]              assume DType[msgsender_MSG] != SafeMath;
[L4856]              assume DType[msgsender_MSG] != YFV;
[L4857]              Alloc[msgsender_MSG] := true;
[L4858]  COND FALSE  !(choice == 18)
[L4864]  COND FALSE  !(choice == 17)
[L4870]  COND TRUE   choice == 16
[L4871]              gas := gas - 21000;
[L4872]  COND TRUE   gas >= 0
[L4873]              assume amount_s140 >= 0 && amount_s140 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4874]              assume msgvalue_MSG == 0;
[L4875]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == recipient_s140 && amount_s140 <= _balances_ERC20[this][msgsender_MSG]) && amount_s140 >= 0) && amount_s140 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s140] >= 0) && _balances_ERC20[this][recipient_s140] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC200 := true;
[L2]                 call_transfer_ERC200 := false;
[L2]                 revert := revert_hold;
[L392]               havoc __exception;
[L393]               revert := false;
[L394]   COND FALSE  !(__exception)
[L419]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L2322]  COND FALSE  !(DType[this] == YFV)
[L2327]  COND TRUE   DType[this] == ERC20
[L2328]  CALL        call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2200]              __ret_0_ := msgsender_MSG;
[L2328]  RET         call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2329]  COND FALSE  !(revert)
[L2335]  COND TRUE   DType[this] == YFV
[L2336]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s140, amount_s140);
[L2806]              __var_12 := null;
[L2807]  COND FALSE  !(!(sender_s323 != null))
[L2811]              __var_13 := null;
[L2812]  COND FALSE  !(!(recipient_s323 != null))
[L2816]  CALL        call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s323], amount_s323, -806116454);
[L3129]  COND FALSE  !(!(b_s561 <= a_s561))
[L3133]              c_s561 := (a_s561 - b_s561) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3134]              __ret_0_ := c_s561;
[L2816]  RET         call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s323], amount_s323, -806116454);
[L2817]  COND FALSE  !(revert)
[L2820]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s323];
[L2821]              _balances_ERC20[this][sender_s323] := __var_14;
[L2822]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s323];
[L2823]  CALL        call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s323], amount_s323);
[L3105]              c_s534 := (a_s534 + b_s534) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3106]  COND FALSE  !(!(c_s534 >= a_s534))
[L3110]              __ret_0_ := c_s534;
[L2823]  RET         call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s323], amount_s323);
[L2824]  COND FALSE  !(revert)
[L2827]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s323];
[L2828]              _balances_ERC20[this][recipient_s323] := __var_15;
[L2829]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s323];
[L2830]              assert { :EventEmitted "Transfer_ERC20" } true;
[L2336]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s140, amount_s140);
[L2337]  COND FALSE  !(revert)
[L2348]              __ret_0_ := true;
[L419]   RET         call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L420]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume (((((((__ret_0_ == true && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowances_ERC20[this] == old(_allowances_ERC20[this])) && governance_YFV[this] == old(governance_YFV[this])) && minters_YFV[this] == old(minters_YFV[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]);
[L2]                 success_transfer_ERC200 := true;
[L2]                 success_transfer_ERC200 := false;
[L2]                 revert := revert_hold;
[L4875]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L4991]  RET         call CorralChoice_YFV(this);
[L4991]  CALL        call CorralChoice_YFV(this);
[L4804]              havoc msgsender_MSG;
[L4805]              havoc msgvalue_MSG;
[L4806]              havoc choice;
[L4807]              havoc __ret_0_totalSupply;
[L4808]              havoc account_s121;
[L4809]              havoc __ret_0_balanceOf;
[L4810]              havoc recipient_s140;
[L4811]              havoc amount_s140;
[L4812]              havoc __ret_0_transfer;
[L4813]              havoc owner_s156;
[L4814]              havoc spender_s156;
[L4815]              havoc __ret_0_allowance;
[L4816]              havoc spender_s175;
[L4817]              havoc amount_s175;
[L4818]              havoc __ret_0_approve;
[L4819]              havoc sender_s211;
[L4820]              havoc recipient_s211;
[L4821]              havoc amount_s211;
[L4822]              havoc __ret_0_transferFrom;
[L4823]              havoc spender_s238;
[L4824]              havoc addedValue_s238;
[L4825]              havoc __ret_0_increaseAllowance;
[L4826]              havoc spender_s266;
[L4827]              havoc subtractedValue_s266;
[L4828]              havoc __ret_0_decreaseAllowance;
[L4829]              havoc name_s484;
[L4830]              havoc symbol_s484;
[L4831]              havoc decimals_s484;
[L4832]              havoc __ret_0_name;
[L4833]              havoc __ret_0_symbol;
[L4834]              havoc __ret_0_decimals;
[L4835]              havoc __ret_0_governance;
[L4836]              havoc arg744_s0;
[L4837]              havoc __ret_0_minters;
[L4838]              havoc account_s671;
[L4839]              havoc amount_s671;
[L4840]              havoc amount_s683;
[L4841]              havoc _governance_s701;
[L4842]              havoc _minter_s721;
[L4843]              havoc _minter_s741;
[L4844]              havoc tmpNow;
[L4845]              havoc gas;
[L4846]              assume gas > 4000000 && gas <= 8000000;
[L4847]              tmpNow := now;
[L4848]              havoc now;
[L4849]              assume now > tmpNow;
[L4850]              assume msgsender_MSG != null;
[L4851]              assume DType[msgsender_MSG] != IERC20;
[L4852]              assume DType[msgsender_MSG] != Context;
[L4853]              assume DType[msgsender_MSG] != ERC20;
[L4854]              assume DType[msgsender_MSG] != ERC20Detailed;
[L4855]              assume DType[msgsender_MSG] != SafeMath;
[L4856]              assume DType[msgsender_MSG] != YFV;
[L4857]              Alloc[msgsender_MSG] := true;
[L4858]  COND FALSE  !(choice == 18)
[L4864]  COND FALSE  !(choice == 17)
[L4870]  COND TRUE   choice == 16
[L4871]              gas := gas - 21000;
[L4872]  COND TRUE   gas >= 0
[L4873]              assume amount_s140 >= 0 && amount_s140 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4874]              assume msgvalue_MSG == 0;
[L4875]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == recipient_s140 && amount_s140 <= _balances_ERC20[this][msgsender_MSG]) && amount_s140 >= 0) && amount_s140 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s140] >= 0) && _balances_ERC20[this][recipient_s140] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC200 := true;
[L2]                 call_transfer_ERC200 := false;
[L2]                 revert := revert_hold;
[L392]               havoc __exception;
[L393]               revert := false;
[L394]   COND FALSE  !(__exception)
[L419]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L2322]  COND TRUE   DType[this] == YFV
[L2323]  CALL        call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2200]              __ret_0_ := msgsender_MSG;
[L2323]  RET         call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2324]  COND FALSE  !(revert)
[L2335]  COND TRUE   DType[this] == YFV
[L2336]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s140, amount_s140);
[L2806]              __var_12 := null;
[L2807]  COND FALSE  !(!(sender_s323 != null))
[L2811]              __var_13 := null;
[L2812]  COND FALSE  !(!(recipient_s323 != null))
[L2816]  CALL        call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s323], amount_s323, -806116454);
[L3129]  COND FALSE  !(!(b_s561 <= a_s561))
[L3133]              c_s561 := (a_s561 - b_s561) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3134]              __ret_0_ := c_s561;
[L2816]  RET         call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s323], amount_s323, -806116454);
[L2817]  COND FALSE  !(revert)
[L2820]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s323];
[L2821]              _balances_ERC20[this][sender_s323] := __var_14;
[L2822]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s323];
[L2823]  CALL        call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s323], amount_s323);
[L3105]              c_s534 := (a_s534 + b_s534) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3106]  COND FALSE  !(!(c_s534 >= a_s534))
[L3110]              __ret_0_ := c_s534;
[L2823]  RET         call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s323], amount_s323);
[L2824]  COND FALSE  !(revert)
[L2827]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s323];
[L2828]              _balances_ERC20[this][recipient_s323] := __var_15;
[L2829]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s323];
[L2830]              assert { :EventEmitted "Transfer_ERC20" } true;
[L2336]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s140, amount_s140);
[L2337]  COND FALSE  !(revert)
[L2348]              __ret_0_ := true;
[L419]   RET         call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L420]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !((((((((__ret_0_ == true && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowances_ERC20[this] == old(_allowances_ERC20[this])) && governance_YFV[this] == old(governance_YFV[this])) && minters_YFV[this] == old(minters_YFV[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]));
[L2]                 revert := revert_hold;
[L4875]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L4991]  RET         call CorralChoice_YFV(this);

Loop:
[L4991]  CALL        call CorralChoice_YFV(this);
[L4804]              havoc msgsender_MSG;
[L4805]              havoc msgvalue_MSG;
[L4806]              havoc choice;
[L4807]              havoc __ret_0_totalSupply;
[L4808]              havoc account_s121;
[L4809]              havoc __ret_0_balanceOf;
[L4810]              havoc recipient_s140;
[L4811]              havoc amount_s140;
[L4812]              havoc __ret_0_transfer;
[L4813]              havoc owner_s156;
[L4814]              havoc spender_s156;
[L4815]              havoc __ret_0_allowance;
[L4816]              havoc spender_s175;
[L4817]              havoc amount_s175;
[L4818]              havoc __ret_0_approve;
[L4819]              havoc sender_s211;
[L4820]              havoc recipient_s211;
[L4821]              havoc amount_s211;
[L4822]              havoc __ret_0_transferFrom;
[L4823]              havoc spender_s238;
[L4824]              havoc addedValue_s238;
[L4825]              havoc __ret_0_increaseAllowance;
[L4826]              havoc spender_s266;
[L4827]              havoc subtractedValue_s266;
[L4828]              havoc __ret_0_decreaseAllowance;
[L4829]              havoc name_s484;
[L4830]              havoc symbol_s484;
[L4831]              havoc decimals_s484;
[L4832]              havoc __ret_0_name;
[L4833]              havoc __ret_0_symbol;
[L4834]              havoc __ret_0_decimals;
[L4835]              havoc __ret_0_governance;
[L4836]              havoc arg744_s0;
[L4837]              havoc __ret_0_minters;
[L4838]              havoc account_s671;
[L4839]              havoc amount_s671;
[L4840]              havoc amount_s683;
[L4841]              havoc _governance_s701;
[L4842]              havoc _minter_s721;
[L4843]              havoc _minter_s741;
[L4844]              havoc tmpNow;
[L4845]              havoc gas;
[L4846]              assume gas > 4000000 && gas <= 8000000;
[L4847]              tmpNow := now;
[L4848]              havoc now;
[L4849]              assume now > tmpNow;
[L4850]              assume msgsender_MSG != null;
[L4851]              assume DType[msgsender_MSG] != IERC20;
[L4852]              assume DType[msgsender_MSG] != Context;
[L4853]              assume DType[msgsender_MSG] != ERC20;
[L4854]              assume DType[msgsender_MSG] != ERC20Detailed;
[L4855]              assume DType[msgsender_MSG] != SafeMath;
[L4856]              assume DType[msgsender_MSG] != YFV;
[L4857]              Alloc[msgsender_MSG] := true;
[L4858]  COND FALSE  !(choice == 18)
[L4864]  COND FALSE  !(choice == 17)
[L4870]  COND FALSE  !(choice == 16)
[L4877]  COND FALSE  !(choice == 15)
[L4883]  COND FALSE  !(choice == 14)
[L4890]  COND FALSE  !(choice == 13)
[L4897]  COND FALSE  !(choice == 12)
[L4904]  COND FALSE  !(choice == 11)
[L4911]  COND FALSE  !(choice == 10)
[L4917]  COND FALSE  !(choice == 9)
[L4923]  COND FALSE  !(choice == 8)
[L4929]  COND FALSE  !(choice == 7)
[L4935]  COND FALSE  !(choice == 6)
[L4941]  COND FALSE  !(choice == 5)
[L4948]  COND TRUE   choice == 4
[L4949]              gas := gas - 21000;
[L4950]  COND TRUE   gas >= 0
[L4951]              assume amount_s683 >= 0 && amount_s683 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4952]              assume msgvalue_MSG == 0;
[L4953]  CALL        call burn~uint256_YFV(this, msgsender_MSG, msgvalue_MSG, amount_s683);
[L1220]              havoc __exception;
[L1221]              revert := false;
[L1222]  COND FALSE  !(__exception)
[L1247]  CALL        call burn~uint256_YFV__success(this, msgsender_MSG, msgvalue_MSG, amount_s683);
[L3310]  COND TRUE   DType[this] == YFV
[L3311]  CALL        call _burn~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, amount_s683);
[L2911]              __var_19 := null;
[L2912]  COND FALSE  !(!(account_s411 != null))
[L2916]  CALL        call __var_20 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s411], amount_s411, 392639254);
[L3129]  COND FALSE  !(!(b_s561 <= a_s561))
[L3133]              c_s561 := (a_s561 - b_s561) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3134]              __ret_0_ := c_s561;
[L2916]  RET         call __var_20 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s411], amount_s411, 392639254);
[L2917]  COND FALSE  !(revert)
[L2920]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s411];
[L2921]              _balances_ERC20[this][account_s411] := __var_20;
[L2922]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s411];
[L2923]  CALL        call __var_21 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s411, 1252836592);
[L3129]  COND FALSE  !(!(b_s561 <= a_s561))
[L3133]              c_s561 := (a_s561 - b_s561) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3134]              __ret_0_ := c_s561;
[L2923]  RET         call __var_21 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s411, 1252836592);
[L2924]  COND FALSE  !(revert)
[L2927]              _totalSupply_ERC20[this] := __var_21;
[L2928]              assert { :EventEmitted "Transfer_ERC20" } true;
[L3311]  RET         call _burn~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, amount_s683);
[L3312]  COND FALSE  !(revert)
[L1247]  RET         call burn~uint256_YFV__success(this, msgsender_MSG, msgvalue_MSG, amount_s683);
[L1248]              assume !revert && gas >= 0;
[L4953]  RET         call burn~uint256_YFV(this, msgsender_MSG, msgvalue_MSG, amount_s683);
[L4991]  RET         call CorralChoice_YFV(this);

[2020-11-25 09:37:34,713 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 09:37:34,713 INFO  L82        PathProgramCache]: Analyzing trace with hash 1716888989, now seen corresponding path program 1 times
[2020-11-25 09:37:34,714 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 09:37:34,724 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 09:37:34,777 INFO  L134       CoverageAnalysis]: Checked inductivity of 109 backedges. 1 proven. 0 refuted. 0 times theorem prover too weak. 108 trivial. 0 not checked.
[2020-11-25 09:37:34,777 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 09:37:34,777 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [3] imperfect sequences [] total 3
[2020-11-25 09:37:34,777 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 09:37:34,777 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-11-25 09:37:34,777 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-11-25 09:37:34,777 INFO  L87              Difference]: Start difference. First operand 3609 states and 4349 transitions. cyclomatic complexity: 758 Second operand 3 states.
[2020-11-25 09:37:34,799 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 09:37:34,799 INFO  L93              Difference]: Finished difference Result 3617 states and 4359 transitions.
[2020-11-25 09:37:34,799 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-11-25 09:37:34,799 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 3617 states and 4359 transitions.
[2020-11-25 09:37:34,806 INFO  L131   ngComponentsAnalysis]: Automaton has 8 accepting balls. 16
[2020-11-25 09:37:34,816 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 3617 states to 3617 states and 4359 transitions.
[2020-11-25 09:37:34,816 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 812
[2020-11-25 09:37:34,816 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 812
[2020-11-25 09:37:34,816 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 3617 states and 4359 transitions.
[2020-11-25 09:37:34,819 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 09:37:34,819 INFO  L728         BuchiCegarLoop]: Abstraction has 3617 states and 4359 transitions.
[2020-11-25 09:37:34,821 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 3617 states and 4359 transitions.
[2020-11-25 09:37:34,839 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 3617 to 3611.
[2020-11-25 09:37:34,840 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 3611 states.
[2020-11-25 09:37:34,844 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 3611 states to 3611 states and 4351 transitions.
[2020-11-25 09:37:34,844 INFO  L751         BuchiCegarLoop]: Abstraction has 3611 states and 4351 transitions.
[2020-11-25 09:37:34,844 INFO  L631         BuchiCegarLoop]: Abstraction has 3611 states and 4351 transitions.
[2020-11-25 09:37:34,845 INFO  L445         BuchiCegarLoop]: ======== Iteration 13============
[2020-11-25 09:37:34,845 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 3611 states and 4351 transitions.
[2020-11-25 09:37:34,848 INFO  L131   ngComponentsAnalysis]: Automaton has 8 accepting balls. 16
[2020-11-25 09:37:34,848 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 09:37:34,848 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 09:37:34,850 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 09:37:34,850 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_ERC200 := false;
[L2]                 call_transfer_ERC200 := false;
[L2]     CALL        call main();
[L4981]              assume null == 0;
[L4982]  CALL        call this := FreshRefGenerator__success();
[L2122]              havoc newRef;
[L2123]              assume Alloc[newRef] == false;
[L2124]              Alloc[newRef] := true;
[L2125]              assume newRef != null;
[L4982]  RET         call this := FreshRefGenerator__success();
[L4983]              assume now >= 0;
[L4984]              assume DType[this] == YFV;
[L4985]              assume msgvalue_MSG == 0;
[L4986]              gas := gas - 53000;
[L4987]  CALL        call YFV_YFV(this, msgsender_MSG, msgvalue_MSG);
[L1098]              havoc __exception;
[L1099]              revert := false;
[L1100]  COND FALSE  !(__exception)
[L1125]  CALL        call YFV_YFV__success(this, msgsender_MSG, msgvalue_MSG);
[L3242]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2186]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2171]              assume msgsender_MSG != null;
[L2172]              Balance[this] := 0;
[L2186]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2187]  COND FALSE  !(revert)
[L3242]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3243]  COND FALSE  !(revert)
[L3246]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2154]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2139]              assume msgsender_MSG != null;
[L2140]              Balance[this] := 0;
[L2154]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2155]  COND FALSE  !(revert)
[L3246]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3247]  COND FALSE  !(revert)
[L3250]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2248]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2186]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2171]              assume msgsender_MSG != null;
[L2172]              Balance[this] := 0;
[L2186]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2187]  COND FALSE  !(revert)
[L2248]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2249]  COND FALSE  !(revert)
[L2252]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2154]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2139]              assume msgsender_MSG != null;
[L2140]              Balance[this] := 0;
[L2154]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2155]  COND FALSE  !(revert)
[L2252]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2253]  COND FALSE  !(revert)
[L2256]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2220]              assume msgsender_MSG != null;
[L2221]              Balance[this] := 0;
[L2222]              _balances_ERC20[this] := zeroRefintArr();
[L2223]              sum__balances0[this] := 0;
[L2224]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2225]              sum__allowances1[this] := 0;
[L2226]              _totalSupply_ERC20[this] := 0;
[L2256]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2257]  COND FALSE  !(revert)
[L3250]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3251]  COND FALSE  !(revert)
[L3254]  CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -868984158, 934069305, 18);
[L3012]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2154]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2139]              assume msgsender_MSG != null;
[L2140]              Balance[this] := 0;
[L2154]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2155]  COND FALSE  !(revert)
[L3012]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3013]  COND FALSE  !(revert)
[L3016]  CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s484, symbol_s484, decimals_s484);
[L2987]              assume msgsender_MSG != null;
[L2988]              Balance[this] := 0;
[L2989]              _name_ERC20Detailed[this] := 1252836592;
[L2990]              _symbol_ERC20Detailed[this] := 1252836592;
[L2991]              _decimals_ERC20Detailed[this] := 0;
[L2993]              _name_ERC20Detailed[this] := name_s484;
[L2994]              _symbol_ERC20Detailed[this] := symbol_s484;
[L2995]              _decimals_ERC20Detailed[this] := decimals_s484;
[L3016]  RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s484, symbol_s484, decimals_s484);
[L3017]  COND FALSE  !(revert)
[L3254]  RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -868984158, 934069305, 18);
[L3255]  COND FALSE  !(revert)
[L3258]  CALL        call YFV_YFV_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3208]              assume msgsender_MSG != null;
[L3209]              Balance[this] := 0;
[L3210]              governance_YFV[this] := null;
[L3211]              minters_YFV[this] := zeroRefboolArr();
[L3213]              governance_YFV[this] := msgsender_MSG;
[L3258]  RET         call YFV_YFV_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3259]  COND FALSE  !(revert)
[L1125]  RET         call YFV_YFV__success(this, msgsender_MSG, msgvalue_MSG);
[L1126]              assume !revert && gas >= 0;
[L4987]  RET         call YFV_YFV(this, msgsender_MSG, msgvalue_MSG);
[L4988]              assume !revert && gas >= 0;
[L4991]  CALL        call CorralChoice_YFV(this);
[L4804]              havoc msgsender_MSG;
[L4805]              havoc msgvalue_MSG;
[L4806]              havoc choice;
[L4807]              havoc __ret_0_totalSupply;
[L4808]              havoc account_s121;
[L4809]              havoc __ret_0_balanceOf;
[L4810]              havoc recipient_s140;
[L4811]              havoc amount_s140;
[L4812]              havoc __ret_0_transfer;
[L4813]              havoc owner_s156;
[L4814]              havoc spender_s156;
[L4815]              havoc __ret_0_allowance;
[L4816]              havoc spender_s175;
[L4817]              havoc amount_s175;
[L4818]              havoc __ret_0_approve;
[L4819]              havoc sender_s211;
[L4820]              havoc recipient_s211;
[L4821]              havoc amount_s211;
[L4822]              havoc __ret_0_transferFrom;
[L4823]              havoc spender_s238;
[L4824]              havoc addedValue_s238;
[L4825]              havoc __ret_0_increaseAllowance;
[L4826]              havoc spender_s266;
[L4827]              havoc subtractedValue_s266;
[L4828]              havoc __ret_0_decreaseAllowance;
[L4829]              havoc name_s484;
[L4830]              havoc symbol_s484;
[L4831]              havoc decimals_s484;
[L4832]              havoc __ret_0_name;
[L4833]              havoc __ret_0_symbol;
[L4834]              havoc __ret_0_decimals;
[L4835]              havoc __ret_0_governance;
[L4836]              havoc arg744_s0;
[L4837]              havoc __ret_0_minters;
[L4838]              havoc account_s671;
[L4839]              havoc amount_s671;
[L4840]              havoc amount_s683;
[L4841]              havoc _governance_s701;
[L4842]              havoc _minter_s721;
[L4843]              havoc _minter_s741;
[L4844]              havoc tmpNow;
[L4845]              havoc gas;
[L4846]              assume gas > 4000000 && gas <= 8000000;
[L4847]              tmpNow := now;
[L4848]              havoc now;
[L4849]              assume now > tmpNow;
[L4850]              assume msgsender_MSG != null;
[L4851]              assume DType[msgsender_MSG] != IERC20;
[L4852]              assume DType[msgsender_MSG] != Context;
[L4853]              assume DType[msgsender_MSG] != ERC20;
[L4854]              assume DType[msgsender_MSG] != ERC20Detailed;
[L4855]              assume DType[msgsender_MSG] != SafeMath;
[L4856]              assume DType[msgsender_MSG] != YFV;
[L4857]              Alloc[msgsender_MSG] := true;
[L4858]  COND FALSE  !(choice == 18)
[L4864]  COND FALSE  !(choice == 17)
[L4870]  COND TRUE   choice == 16
[L4871]              gas := gas - 21000;
[L4872]  COND TRUE   gas >= 0
[L4873]              assume amount_s140 >= 0 && amount_s140 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4874]              assume msgvalue_MSG == 0;
[L4875]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == recipient_s140 && amount_s140 <= _balances_ERC20[this][msgsender_MSG]) && amount_s140 >= 0) && amount_s140 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s140] >= 0) && _balances_ERC20[this][recipient_s140] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC200 := true;
[L2]                 call_transfer_ERC200 := false;
[L2]                 revert := revert_hold;
[L392]               havoc __exception;
[L393]               revert := false;
[L394]   COND FALSE  !(__exception)
[L419]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L2322]  COND TRUE   DType[this] == YFV
[L2323]  CALL        call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2200]              __ret_0_ := msgsender_MSG;
[L2323]  RET         call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2324]  COND FALSE  !(revert)
[L2335]  COND TRUE   DType[this] == YFV
[L2336]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s140, amount_s140);
[L2806]              __var_12 := null;
[L2807]  COND FALSE  !(!(sender_s323 != null))
[L2811]              __var_13 := null;
[L2812]  COND FALSE  !(!(recipient_s323 != null))
[L2816]  CALL        call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s323], amount_s323, -806116454);
[L3129]  COND FALSE  !(!(b_s561 <= a_s561))
[L3133]              c_s561 := (a_s561 - b_s561) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3134]              __ret_0_ := c_s561;
[L2816]  RET         call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s323], amount_s323, -806116454);
[L2817]  COND FALSE  !(revert)
[L2820]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s323];
[L2821]              _balances_ERC20[this][sender_s323] := __var_14;
[L2822]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s323];
[L2823]  CALL        call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s323], amount_s323);
[L3105]              c_s534 := (a_s534 + b_s534) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3106]  COND FALSE  !(!(c_s534 >= a_s534))
[L3110]              __ret_0_ := c_s534;
[L2823]  RET         call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s323], amount_s323);
[L2824]  COND FALSE  !(revert)
[L2827]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s323];
[L2828]              _balances_ERC20[this][recipient_s323] := __var_15;
[L2829]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s323];
[L2830]              assert { :EventEmitted "Transfer_ERC20" } true;
[L2336]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s140, amount_s140);
[L2337]  COND FALSE  !(revert)
[L2348]              __ret_0_ := true;
[L419]   RET         call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L420]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume (((((((__ret_0_ == true && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowances_ERC20[this] == old(_allowances_ERC20[this])) && governance_YFV[this] == old(governance_YFV[this])) && minters_YFV[this] == old(minters_YFV[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]);
[L2]                 success_transfer_ERC200 := true;
[L2]                 success_transfer_ERC200 := false;
[L2]                 revert := revert_hold;
[L4875]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L4991]  RET         call CorralChoice_YFV(this);
[L4991]  CALL        call CorralChoice_YFV(this);
[L4804]              havoc msgsender_MSG;
[L4805]              havoc msgvalue_MSG;
[L4806]              havoc choice;
[L4807]              havoc __ret_0_totalSupply;
[L4808]              havoc account_s121;
[L4809]              havoc __ret_0_balanceOf;
[L4810]              havoc recipient_s140;
[L4811]              havoc amount_s140;
[L4812]              havoc __ret_0_transfer;
[L4813]              havoc owner_s156;
[L4814]              havoc spender_s156;
[L4815]              havoc __ret_0_allowance;
[L4816]              havoc spender_s175;
[L4817]              havoc amount_s175;
[L4818]              havoc __ret_0_approve;
[L4819]              havoc sender_s211;
[L4820]              havoc recipient_s211;
[L4821]              havoc amount_s211;
[L4822]              havoc __ret_0_transferFrom;
[L4823]              havoc spender_s238;
[L4824]              havoc addedValue_s238;
[L4825]              havoc __ret_0_increaseAllowance;
[L4826]              havoc spender_s266;
[L4827]              havoc subtractedValue_s266;
[L4828]              havoc __ret_0_decreaseAllowance;
[L4829]              havoc name_s484;
[L4830]              havoc symbol_s484;
[L4831]              havoc decimals_s484;
[L4832]              havoc __ret_0_name;
[L4833]              havoc __ret_0_symbol;
[L4834]              havoc __ret_0_decimals;
[L4835]              havoc __ret_0_governance;
[L4836]              havoc arg744_s0;
[L4837]              havoc __ret_0_minters;
[L4838]              havoc account_s671;
[L4839]              havoc amount_s671;
[L4840]              havoc amount_s683;
[L4841]              havoc _governance_s701;
[L4842]              havoc _minter_s721;
[L4843]              havoc _minter_s741;
[L4844]              havoc tmpNow;
[L4845]              havoc gas;
[L4846]              assume gas > 4000000 && gas <= 8000000;
[L4847]              tmpNow := now;
[L4848]              havoc now;
[L4849]              assume now > tmpNow;
[L4850]              assume msgsender_MSG != null;
[L4851]              assume DType[msgsender_MSG] != IERC20;
[L4852]              assume DType[msgsender_MSG] != Context;
[L4853]              assume DType[msgsender_MSG] != ERC20;
[L4854]              assume DType[msgsender_MSG] != ERC20Detailed;
[L4855]              assume DType[msgsender_MSG] != SafeMath;
[L4856]              assume DType[msgsender_MSG] != YFV;
[L4857]              Alloc[msgsender_MSG] := true;
[L4858]  COND FALSE  !(choice == 18)
[L4864]  COND FALSE  !(choice == 17)
[L4870]  COND TRUE   choice == 16
[L4871]              gas := gas - 21000;
[L4872]  COND TRUE   gas >= 0
[L4873]              assume amount_s140 >= 0 && amount_s140 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4874]              assume msgvalue_MSG == 0;
[L4875]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == recipient_s140 && amount_s140 <= _balances_ERC20[this][msgsender_MSG]) && amount_s140 >= 0) && amount_s140 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s140] >= 0) && _balances_ERC20[this][recipient_s140] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC200 := true;
[L2]                 call_transfer_ERC200 := false;
[L2]                 revert := revert_hold;
[L392]               havoc __exception;
[L393]               revert := false;
[L394]   COND FALSE  !(__exception)
[L419]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L2322]  COND TRUE   DType[this] == YFV
[L2323]  CALL        call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2200]              __ret_0_ := msgsender_MSG;
[L2323]  RET         call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2324]  COND FALSE  !(revert)
[L2335]  COND TRUE   DType[this] == YFV
[L2336]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s140, amount_s140);
[L2806]              __var_12 := null;
[L2807]  COND FALSE  !(!(sender_s323 != null))
[L2811]              __var_13 := null;
[L2812]  COND FALSE  !(!(recipient_s323 != null))
[L2816]  CALL        call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s323], amount_s323, -806116454);
[L3129]  COND FALSE  !(!(b_s561 <= a_s561))
[L3133]              c_s561 := (a_s561 - b_s561) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3134]              __ret_0_ := c_s561;
[L2816]  RET         call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s323], amount_s323, -806116454);
[L2817]  COND FALSE  !(revert)
[L2820]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s323];
[L2821]              _balances_ERC20[this][sender_s323] := __var_14;
[L2822]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s323];
[L2823]  CALL        call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s323], amount_s323);
[L3105]              c_s534 := (a_s534 + b_s534) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3106]  COND FALSE  !(!(c_s534 >= a_s534))
[L3110]              __ret_0_ := c_s534;
[L2823]  RET         call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s323], amount_s323);
[L2824]  COND FALSE  !(revert)
[L2827]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s323];
[L2828]              _balances_ERC20[this][recipient_s323] := __var_15;
[L2829]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s323];
[L2830]              assert { :EventEmitted "Transfer_ERC20" } true;
[L2336]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s140, amount_s140);
[L2337]  COND FALSE  !(revert)
[L2348]              __ret_0_ := true;
[L419]   RET         call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L420]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !((((((((__ret_0_ == true && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowances_ERC20[this] == old(_allowances_ERC20[this])) && governance_YFV[this] == old(governance_YFV[this])) && minters_YFV[this] == old(minters_YFV[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]));
[L2]                 revert := revert_hold;
[L4875]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L4991]  RET         call CorralChoice_YFV(this);

Loop:
[L4991]  CALL        call CorralChoice_YFV(this);
[L4804]              havoc msgsender_MSG;
[L4805]              havoc msgvalue_MSG;
[L4806]              havoc choice;
[L4807]              havoc __ret_0_totalSupply;
[L4808]              havoc account_s121;
[L4809]              havoc __ret_0_balanceOf;
[L4810]              havoc recipient_s140;
[L4811]              havoc amount_s140;
[L4812]              havoc __ret_0_transfer;
[L4813]              havoc owner_s156;
[L4814]              havoc spender_s156;
[L4815]              havoc __ret_0_allowance;
[L4816]              havoc spender_s175;
[L4817]              havoc amount_s175;
[L4818]              havoc __ret_0_approve;
[L4819]              havoc sender_s211;
[L4820]              havoc recipient_s211;
[L4821]              havoc amount_s211;
[L4822]              havoc __ret_0_transferFrom;
[L4823]              havoc spender_s238;
[L4824]              havoc addedValue_s238;
[L4825]              havoc __ret_0_increaseAllowance;
[L4826]              havoc spender_s266;
[L4827]              havoc subtractedValue_s266;
[L4828]              havoc __ret_0_decreaseAllowance;
[L4829]              havoc name_s484;
[L4830]              havoc symbol_s484;
[L4831]              havoc decimals_s484;
[L4832]              havoc __ret_0_name;
[L4833]              havoc __ret_0_symbol;
[L4834]              havoc __ret_0_decimals;
[L4835]              havoc __ret_0_governance;
[L4836]              havoc arg744_s0;
[L4837]              havoc __ret_0_minters;
[L4838]              havoc account_s671;
[L4839]              havoc amount_s671;
[L4840]              havoc amount_s683;
[L4841]              havoc _governance_s701;
[L4842]              havoc _minter_s721;
[L4843]              havoc _minter_s741;
[L4844]              havoc tmpNow;
[L4845]              havoc gas;
[L4846]              assume gas > 4000000 && gas <= 8000000;
[L4847]              tmpNow := now;
[L4848]              havoc now;
[L4849]              assume now > tmpNow;
[L4850]              assume msgsender_MSG != null;
[L4851]              assume DType[msgsender_MSG] != IERC20;
[L4852]              assume DType[msgsender_MSG] != Context;
[L4853]              assume DType[msgsender_MSG] != ERC20;
[L4854]              assume DType[msgsender_MSG] != ERC20Detailed;
[L4855]              assume DType[msgsender_MSG] != SafeMath;
[L4856]              assume DType[msgsender_MSG] != YFV;
[L4857]              Alloc[msgsender_MSG] := true;
[L4858]  COND FALSE  !(choice == 18)
[L4864]  COND FALSE  !(choice == 17)
[L4870]  COND FALSE  !(choice == 16)
[L4877]  COND FALSE  !(choice == 15)
[L4883]  COND FALSE  !(choice == 14)
[L4890]  COND FALSE  !(choice == 13)
[L4897]  COND FALSE  !(choice == 12)
[L4904]  COND FALSE  !(choice == 11)
[L4911]  COND FALSE  !(choice == 10)
[L4917]  COND FALSE  !(choice == 9)
[L4923]  COND FALSE  !(choice == 8)
[L4929]  COND FALSE  !(choice == 7)
[L4935]  COND FALSE  !(choice == 6)
[L4941]  COND FALSE  !(choice == 5)
[L4948]  COND TRUE   choice == 4
[L4949]              gas := gas - 21000;
[L4950]  COND TRUE   gas >= 0
[L4951]              assume amount_s683 >= 0 && amount_s683 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4952]              assume msgvalue_MSG == 0;
[L4953]  CALL        call burn~uint256_YFV(this, msgsender_MSG, msgvalue_MSG, amount_s683);
[L1220]              havoc __exception;
[L1221]              revert := false;
[L1222]  COND FALSE  !(__exception)
[L1247]  CALL        call burn~uint256_YFV__success(this, msgsender_MSG, msgvalue_MSG, amount_s683);
[L3310]  COND TRUE   DType[this] == YFV
[L3311]  CALL        call _burn~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, amount_s683);
[L2911]              __var_19 := null;
[L2912]  COND FALSE  !(!(account_s411 != null))
[L2916]  CALL        call __var_20 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s411], amount_s411, 392639254);
[L3129]  COND FALSE  !(!(b_s561 <= a_s561))
[L3133]              c_s561 := (a_s561 - b_s561) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3134]              __ret_0_ := c_s561;
[L2916]  RET         call __var_20 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s411], amount_s411, 392639254);
[L2917]  COND FALSE  !(revert)
[L2920]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s411];
[L2921]              _balances_ERC20[this][account_s411] := __var_20;
[L2922]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s411];
[L2923]  CALL        call __var_21 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s411, 1252836592);
[L3129]  COND FALSE  !(!(b_s561 <= a_s561))
[L3133]              c_s561 := (a_s561 - b_s561) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3134]              __ret_0_ := c_s561;
[L2923]  RET         call __var_21 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s411, 1252836592);
[L2924]  COND FALSE  !(revert)
[L2927]              _totalSupply_ERC20[this] := __var_21;
[L2928]              assert { :EventEmitted "Transfer_ERC20" } true;
[L3311]  RET         call _burn~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, amount_s683);
[L3312]  COND FALSE  !(revert)
[L1247]  RET         call burn~uint256_YFV__success(this, msgsender_MSG, msgvalue_MSG, amount_s683);
[L1248]              assume !revert && gas >= 0;
[L4953]  RET         call burn~uint256_YFV(this, msgsender_MSG, msgvalue_MSG, amount_s683);
[L4991]  RET         call CorralChoice_YFV(this);

[2020-11-25 09:37:34,853 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 09:37:34,853 INFO  L82        PathProgramCache]: Analyzing trace with hash 1327301421, now seen corresponding path program 1 times
[2020-11-25 09:37:34,854 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 09:37:34,868 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 09:37:35,161 INFO  L134       CoverageAnalysis]: Checked inductivity of 109 backedges. 5 proven. 0 refuted. 0 times theorem prover too weak. 104 trivial. 0 not checked.
[2020-11-25 09:37:35,161 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 09:37:35,161 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [28] imperfect sequences [] total 28
[2020-11-25 09:37:35,161 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 09:37:35,161 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 29 interpolants.
[2020-11-25 09:37:35,162 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=75, Invalid=737, Unknown=0, NotChecked=0, Total=812
[2020-11-25 09:37:35,162 INFO  L87              Difference]: Start difference. First operand 3611 states and 4351 transitions. cyclomatic complexity: 758 Second operand 29 states.
[2020-11-25 09:37:38,907 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 09:37:38,907 INFO  L93              Difference]: Finished difference Result 3643 states and 4494 transitions.
[2020-11-25 09:37:38,908 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 29 states. 
[2020-11-25 09:37:38,908 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 3643 states and 4494 transitions.
[2020-11-25 09:37:38,919 INFO  L131   ngComponentsAnalysis]: Automaton has 14 accepting balls. 28
[2020-11-25 09:37:38,931 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 3643 states to 3643 states and 4494 transitions.
[2020-11-25 09:37:38,931 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 821
[2020-11-25 09:37:38,932 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 821
[2020-11-25 09:37:38,932 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 3643 states and 4494 transitions.
[2020-11-25 09:37:38,935 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 09:37:38,935 INFO  L728         BuchiCegarLoop]: Abstraction has 3643 states and 4494 transitions.
[2020-11-25 09:37:38,937 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 3643 states and 4494 transitions.
[2020-11-25 09:37:38,964 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 3643 to 3639.
[2020-11-25 09:37:38,964 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 3639 states.
[2020-11-25 09:37:38,970 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 3639 states to 3639 states and 4477 transitions.
[2020-11-25 09:37:38,970 INFO  L751         BuchiCegarLoop]: Abstraction has 3639 states and 4477 transitions.
[2020-11-25 09:37:38,971 INFO  L631         BuchiCegarLoop]: Abstraction has 3639 states and 4477 transitions.
[2020-11-25 09:37:38,971 INFO  L445         BuchiCegarLoop]: ======== Iteration 14============
[2020-11-25 09:37:38,971 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 3639 states and 4477 transitions.
[2020-11-25 09:37:38,975 INFO  L131   ngComponentsAnalysis]: Automaton has 12 accepting balls. 24
[2020-11-25 09:37:38,975 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 09:37:38,975 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 09:37:38,977 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 09:37:38,977 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_ERC200 := false;
[L2]                 call_transfer_ERC200 := false;
[L2]     CALL        call main();
[L4981]              assume null == 0;
[L4982]  CALL        call this := FreshRefGenerator__success();
[L2122]              havoc newRef;
[L2123]              assume Alloc[newRef] == false;
[L2124]              Alloc[newRef] := true;
[L2125]              assume newRef != null;
[L4982]  RET         call this := FreshRefGenerator__success();
[L4983]              assume now >= 0;
[L4984]              assume DType[this] == YFV;
[L4985]              assume msgvalue_MSG == 0;
[L4986]              gas := gas - 53000;
[L4987]  CALL        call YFV_YFV(this, msgsender_MSG, msgvalue_MSG);
[L1098]              havoc __exception;
[L1099]              revert := false;
[L1100]  COND FALSE  !(__exception)
[L1125]  CALL        call YFV_YFV__success(this, msgsender_MSG, msgvalue_MSG);
[L3242]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2186]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2171]              assume msgsender_MSG != null;
[L2172]              Balance[this] := 0;
[L2186]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2187]  COND FALSE  !(revert)
[L3242]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3243]  COND FALSE  !(revert)
[L3246]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2154]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2139]              assume msgsender_MSG != null;
[L2140]              Balance[this] := 0;
[L2154]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2155]  COND FALSE  !(revert)
[L3246]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3247]  COND FALSE  !(revert)
[L3250]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2248]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2186]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2171]              assume msgsender_MSG != null;
[L2172]              Balance[this] := 0;
[L2186]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2187]  COND FALSE  !(revert)
[L2248]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2249]  COND FALSE  !(revert)
[L2252]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2154]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2139]              assume msgsender_MSG != null;
[L2140]              Balance[this] := 0;
[L2154]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2155]  COND FALSE  !(revert)
[L2252]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2253]  COND FALSE  !(revert)
[L2256]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2220]              assume msgsender_MSG != null;
[L2221]              Balance[this] := 0;
[L2222]              _balances_ERC20[this] := zeroRefintArr();
[L2223]              sum__balances0[this] := 0;
[L2224]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2225]              sum__allowances1[this] := 0;
[L2226]              _totalSupply_ERC20[this] := 0;
[L2256]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2257]  COND FALSE  !(revert)
[L3250]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3251]  COND FALSE  !(revert)
[L3254]  CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -868984158, 934069305, 18);
[L3012]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2154]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2139]              assume msgsender_MSG != null;
[L2140]              Balance[this] := 0;
[L2154]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2155]  COND FALSE  !(revert)
[L3012]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3013]  COND FALSE  !(revert)
[L3016]  CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s484, symbol_s484, decimals_s484);
[L2987]              assume msgsender_MSG != null;
[L2988]              Balance[this] := 0;
[L2989]              _name_ERC20Detailed[this] := 1252836592;
[L2990]              _symbol_ERC20Detailed[this] := 1252836592;
[L2991]              _decimals_ERC20Detailed[this] := 0;
[L2993]              _name_ERC20Detailed[this] := name_s484;
[L2994]              _symbol_ERC20Detailed[this] := symbol_s484;
[L2995]              _decimals_ERC20Detailed[this] := decimals_s484;
[L3016]  RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s484, symbol_s484, decimals_s484);
[L3017]  COND FALSE  !(revert)
[L3254]  RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -868984158, 934069305, 18);
[L3255]  COND FALSE  !(revert)
[L3258]  CALL        call YFV_YFV_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3208]              assume msgsender_MSG != null;
[L3209]              Balance[this] := 0;
[L3210]              governance_YFV[this] := null;
[L3211]              minters_YFV[this] := zeroRefboolArr();
[L3213]              governance_YFV[this] := msgsender_MSG;
[L3258]  RET         call YFV_YFV_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3259]  COND FALSE  !(revert)
[L1125]  RET         call YFV_YFV__success(this, msgsender_MSG, msgvalue_MSG);
[L1126]              assume !revert && gas >= 0;
[L4987]  RET         call YFV_YFV(this, msgsender_MSG, msgvalue_MSG);
[L4988]              assume !revert && gas >= 0;
[L4991]  CALL        call CorralChoice_YFV(this);
[L4804]              havoc msgsender_MSG;
[L4805]              havoc msgvalue_MSG;
[L4806]              havoc choice;
[L4807]              havoc __ret_0_totalSupply;
[L4808]              havoc account_s121;
[L4809]              havoc __ret_0_balanceOf;
[L4810]              havoc recipient_s140;
[L4811]              havoc amount_s140;
[L4812]              havoc __ret_0_transfer;
[L4813]              havoc owner_s156;
[L4814]              havoc spender_s156;
[L4815]              havoc __ret_0_allowance;
[L4816]              havoc spender_s175;
[L4817]              havoc amount_s175;
[L4818]              havoc __ret_0_approve;
[L4819]              havoc sender_s211;
[L4820]              havoc recipient_s211;
[L4821]              havoc amount_s211;
[L4822]              havoc __ret_0_transferFrom;
[L4823]              havoc spender_s238;
[L4824]              havoc addedValue_s238;
[L4825]              havoc __ret_0_increaseAllowance;
[L4826]              havoc spender_s266;
[L4827]              havoc subtractedValue_s266;
[L4828]              havoc __ret_0_decreaseAllowance;
[L4829]              havoc name_s484;
[L4830]              havoc symbol_s484;
[L4831]              havoc decimals_s484;
[L4832]              havoc __ret_0_name;
[L4833]              havoc __ret_0_symbol;
[L4834]              havoc __ret_0_decimals;
[L4835]              havoc __ret_0_governance;
[L4836]              havoc arg744_s0;
[L4837]              havoc __ret_0_minters;
[L4838]              havoc account_s671;
[L4839]              havoc amount_s671;
[L4840]              havoc amount_s683;
[L4841]              havoc _governance_s701;
[L4842]              havoc _minter_s721;
[L4843]              havoc _minter_s741;
[L4844]              havoc tmpNow;
[L4845]              havoc gas;
[L4846]              assume gas > 4000000 && gas <= 8000000;
[L4847]              tmpNow := now;
[L4848]              havoc now;
[L4849]              assume now > tmpNow;
[L4850]              assume msgsender_MSG != null;
[L4851]              assume DType[msgsender_MSG] != IERC20;
[L4852]              assume DType[msgsender_MSG] != Context;
[L4853]              assume DType[msgsender_MSG] != ERC20;
[L4854]              assume DType[msgsender_MSG] != ERC20Detailed;
[L4855]              assume DType[msgsender_MSG] != SafeMath;
[L4856]              assume DType[msgsender_MSG] != YFV;
[L4857]              Alloc[msgsender_MSG] := true;
[L4858]  COND FALSE  !(choice == 18)
[L4864]  COND FALSE  !(choice == 17)
[L4870]  COND FALSE  !(choice == 16)
[L4877]  COND FALSE  !(choice == 15)
[L4883]  COND FALSE  !(choice == 14)
[L4890]  COND TRUE   choice == 13
[L4891]              gas := gas - 21000;
[L4892]  COND TRUE   gas >= 0
[L4893]              assume amount_s211 >= 0 && amount_s211 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4894]              assume msgvalue_MSG == 0;
[L4895]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, sender_s211, recipient_s211, amount_s211);
[L572]               havoc __exception;
[L573]               revert := false;
[L574]   COND FALSE  !(__exception)
[L599]   CALL        call __ret_0_ := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s211, recipient_s211, amount_s211);
[L2500]  COND TRUE   DType[this] == YFV
[L2501]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s211, recipient_s211, amount_s211);
[L2806]              __var_12 := null;
[L2807]  COND FALSE  !(!(sender_s323 != null))
[L2811]              __var_13 := null;
[L2812]  COND FALSE  !(!(recipient_s323 != null))
[L2816]  CALL        call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s323], amount_s323, -806116454);
[L3129]  COND FALSE  !(!(b_s561 <= a_s561))
[L3133]              c_s561 := (a_s561 - b_s561) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3134]              __ret_0_ := c_s561;
[L2816]  RET         call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s323], amount_s323, -806116454);
[L2817]  COND FALSE  !(revert)
[L2820]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s323];
[L2821]              _balances_ERC20[this][sender_s323] := __var_14;
[L2822]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s323];
[L2823]  CALL        call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s323], amount_s323);
[L3105]              c_s534 := (a_s534 + b_s534) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3106]  COND FALSE  !(!(c_s534 >= a_s534))
[L3110]              __ret_0_ := c_s534;
[L2823]  RET         call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s323], amount_s323);
[L2824]  COND FALSE  !(revert)
[L2827]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s323];
[L2828]              _balances_ERC20[this][recipient_s323] := __var_15;
[L2829]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s323];
[L2830]              assert { :EventEmitted "Transfer_ERC20" } true;
[L2501]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s211, recipient_s211, amount_s211);
[L2502]  COND FALSE  !(revert)
[L2513]  COND FALSE  !(DType[this] == YFV)
[L2518]  COND TRUE   DType[this] == ERC20
[L2519]  CALL        call __var_3 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2200]              __ret_0_ := msgsender_MSG;
[L2519]  RET         call __var_3 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2520]  COND FALSE  !(revert)
[L2526]  COND FALSE  !(DType[this] == YFV)
[L2531]  COND TRUE   DType[this] == ERC20
[L2532]  CALL        call __var_5 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2200]              __ret_0_ := msgsender_MSG;
[L2532]  RET         call __var_5 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2533]  COND FALSE  !(revert)
[L2539]  CALL        call __var_4 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s211][__var_5], amount_s211, -2057360831);
[L3129]  COND FALSE  !(!(b_s561 <= a_s561))
[L3133]              c_s561 := (a_s561 - b_s561) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3134]              __ret_0_ := c_s561;
[L2539]  RET         call __var_4 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s211][__var_5], amount_s211, -2057360831);
[L2540]  COND FALSE  !(revert)
[L2543]  COND FALSE  !(DType[this] == YFV)
[L2548]  COND TRUE   DType[this] == ERC20
[L2549]  CALL        call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s211, __var_3, __var_4);
[L2954]              __var_22 := null;
[L2955]  COND FALSE  !(!(owner_s453 != null))
[L2959]              __var_23 := null;
[L2960]  COND FALSE  !(!(spender_s453 != null))
[L2964]              sum__allowances1[owner_s453] := sum__allowances1[owner_s453] - _allowances_ERC20[this][owner_s453][spender_s453];
[L2965]              _allowances_ERC20[this][owner_s453][spender_s453] := amount_s453;
[L2966]              sum__allowances1[owner_s453] := sum__allowances1[owner_s453] + _allowances_ERC20[this][owner_s453][spender_s453];
[L2967]              assert { :EventEmitted "Approval_ERC20" } true;
[L2549]  RET         call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s211, __var_3, __var_4);
[L2550]  COND FALSE  !(revert)
[L2556]              __ret_0_ := true;
[L599]   RET         call __ret_0_ := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s211, recipient_s211, amount_s211);
[L600]               assume !revert && gas >= 0;
[L4895]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, sender_s211, recipient_s211, amount_s211);
[L4991]  RET         call CorralChoice_YFV(this);
[L4991]  CALL        call CorralChoice_YFV(this);
[L4804]              havoc msgsender_MSG;
[L4805]              havoc msgvalue_MSG;
[L4806]              havoc choice;
[L4807]              havoc __ret_0_totalSupply;
[L4808]              havoc account_s121;
[L4809]              havoc __ret_0_balanceOf;
[L4810]              havoc recipient_s140;
[L4811]              havoc amount_s140;
[L4812]              havoc __ret_0_transfer;
[L4813]              havoc owner_s156;
[L4814]              havoc spender_s156;
[L4815]              havoc __ret_0_allowance;
[L4816]              havoc spender_s175;
[L4817]              havoc amount_s175;
[L4818]              havoc __ret_0_approve;
[L4819]              havoc sender_s211;
[L4820]              havoc recipient_s211;
[L4821]              havoc amount_s211;
[L4822]              havoc __ret_0_transferFrom;
[L4823]              havoc spender_s238;
[L4824]              havoc addedValue_s238;
[L4825]              havoc __ret_0_increaseAllowance;
[L4826]              havoc spender_s266;
[L4827]              havoc subtractedValue_s266;
[L4828]              havoc __ret_0_decreaseAllowance;
[L4829]              havoc name_s484;
[L4830]              havoc symbol_s484;
[L4831]              havoc decimals_s484;
[L4832]              havoc __ret_0_name;
[L4833]              havoc __ret_0_symbol;
[L4834]              havoc __ret_0_decimals;
[L4835]              havoc __ret_0_governance;
[L4836]              havoc arg744_s0;
[L4837]              havoc __ret_0_minters;
[L4838]              havoc account_s671;
[L4839]              havoc amount_s671;
[L4840]              havoc amount_s683;
[L4841]              havoc _governance_s701;
[L4842]              havoc _minter_s721;
[L4843]              havoc _minter_s741;
[L4844]              havoc tmpNow;
[L4845]              havoc gas;
[L4846]              assume gas > 4000000 && gas <= 8000000;
[L4847]              tmpNow := now;
[L4848]              havoc now;
[L4849]              assume now > tmpNow;
[L4850]              assume msgsender_MSG != null;
[L4851]              assume DType[msgsender_MSG] != IERC20;
[L4852]              assume DType[msgsender_MSG] != Context;
[L4853]              assume DType[msgsender_MSG] != ERC20;
[L4854]              assume DType[msgsender_MSG] != ERC20Detailed;
[L4855]              assume DType[msgsender_MSG] != SafeMath;
[L4856]              assume DType[msgsender_MSG] != YFV;
[L4857]              Alloc[msgsender_MSG] := true;
[L4858]  COND FALSE  !(choice == 18)
[L4864]  COND FALSE  !(choice == 17)
[L4870]  COND TRUE   choice == 16
[L4871]              gas := gas - 21000;
[L4872]  COND TRUE   gas >= 0
[L4873]              assume amount_s140 >= 0 && amount_s140 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4874]              assume msgvalue_MSG == 0;
[L4875]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == recipient_s140 && amount_s140 <= _balances_ERC20[this][msgsender_MSG]) && amount_s140 >= 0) && amount_s140 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s140] >= 0) && _balances_ERC20[this][recipient_s140] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC200 := true;
[L2]                 call_transfer_ERC200 := false;
[L2]                 revert := revert_hold;
[L392]               havoc __exception;
[L393]               revert := false;
[L394]   COND FALSE  !(__exception)
[L419]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L2322]  COND TRUE   DType[this] == YFV
[L2323]  CALL        call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2200]              __ret_0_ := msgsender_MSG;
[L2323]  RET         call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2324]  COND FALSE  !(revert)
[L2335]  COND TRUE   DType[this] == YFV
[L2336]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s140, amount_s140);
[L2806]              __var_12 := null;
[L2807]  COND FALSE  !(!(sender_s323 != null))
[L2811]              __var_13 := null;
[L2812]  COND FALSE  !(!(recipient_s323 != null))
[L2816]  CALL        call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s323], amount_s323, -806116454);
[L3129]  COND FALSE  !(!(b_s561 <= a_s561))
[L3133]              c_s561 := (a_s561 - b_s561) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3134]              __ret_0_ := c_s561;
[L2816]  RET         call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s323], amount_s323, -806116454);
[L2817]  COND FALSE  !(revert)
[L2820]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s323];
[L2821]              _balances_ERC20[this][sender_s323] := __var_14;
[L2822]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s323];
[L2823]  CALL        call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s323], amount_s323);
[L3105]              c_s534 := (a_s534 + b_s534) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3106]  COND FALSE  !(!(c_s534 >= a_s534))
[L3110]              __ret_0_ := c_s534;
[L2823]  RET         call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s323], amount_s323);
[L2824]  COND FALSE  !(revert)
[L2827]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s323];
[L2828]              _balances_ERC20[this][recipient_s323] := __var_15;
[L2829]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s323];
[L2830]              assert { :EventEmitted "Transfer_ERC20" } true;
[L2336]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s140, amount_s140);
[L2337]  COND FALSE  !(revert)
[L2348]              __ret_0_ := true;
[L419]   RET         call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L420]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !((((((((__ret_0_ == true && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowances_ERC20[this] == old(_allowances_ERC20[this])) && governance_YFV[this] == old(governance_YFV[this])) && minters_YFV[this] == old(minters_YFV[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]));
[L2]                 revert := revert_hold;
[L4875]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L4991]  RET         call CorralChoice_YFV(this);

Loop:
[L4991]  CALL        call CorralChoice_YFV(this);
[L4804]              havoc msgsender_MSG;
[L4805]              havoc msgvalue_MSG;
[L4806]              havoc choice;
[L4807]              havoc __ret_0_totalSupply;
[L4808]              havoc account_s121;
[L4809]              havoc __ret_0_balanceOf;
[L4810]              havoc recipient_s140;
[L4811]              havoc amount_s140;
[L4812]              havoc __ret_0_transfer;
[L4813]              havoc owner_s156;
[L4814]              havoc spender_s156;
[L4815]              havoc __ret_0_allowance;
[L4816]              havoc spender_s175;
[L4817]              havoc amount_s175;
[L4818]              havoc __ret_0_approve;
[L4819]              havoc sender_s211;
[L4820]              havoc recipient_s211;
[L4821]              havoc amount_s211;
[L4822]              havoc __ret_0_transferFrom;
[L4823]              havoc spender_s238;
[L4824]              havoc addedValue_s238;
[L4825]              havoc __ret_0_increaseAllowance;
[L4826]              havoc spender_s266;
[L4827]              havoc subtractedValue_s266;
[L4828]              havoc __ret_0_decreaseAllowance;
[L4829]              havoc name_s484;
[L4830]              havoc symbol_s484;
[L4831]              havoc decimals_s484;
[L4832]              havoc __ret_0_name;
[L4833]              havoc __ret_0_symbol;
[L4834]              havoc __ret_0_decimals;
[L4835]              havoc __ret_0_governance;
[L4836]              havoc arg744_s0;
[L4837]              havoc __ret_0_minters;
[L4838]              havoc account_s671;
[L4839]              havoc amount_s671;
[L4840]              havoc amount_s683;
[L4841]              havoc _governance_s701;
[L4842]              havoc _minter_s721;
[L4843]              havoc _minter_s741;
[L4844]              havoc tmpNow;
[L4845]              havoc gas;
[L4846]              assume gas > 4000000 && gas <= 8000000;
[L4847]              tmpNow := now;
[L4848]              havoc now;
[L4849]              assume now > tmpNow;
[L4850]              assume msgsender_MSG != null;
[L4851]              assume DType[msgsender_MSG] != IERC20;
[L4852]              assume DType[msgsender_MSG] != Context;
[L4853]              assume DType[msgsender_MSG] != ERC20;
[L4854]              assume DType[msgsender_MSG] != ERC20Detailed;
[L4855]              assume DType[msgsender_MSG] != SafeMath;
[L4856]              assume DType[msgsender_MSG] != YFV;
[L4857]              Alloc[msgsender_MSG] := true;
[L4858]  COND TRUE   choice == 18
[L4859]              gas := gas - 21000;
[L4860]  COND FALSE  !(gas >= 0)
[L4991]  RET         call CorralChoice_YFV(this);

[2020-11-25 09:37:38,980 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 09:37:38,980 INFO  L82        PathProgramCache]: Analyzing trace with hash 767624803, now seen corresponding path program 1 times
[2020-11-25 09:37:38,981 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 09:37:38,994 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 09:37:39,060 INFO  L134       CoverageAnalysis]: Checked inductivity of 107 backedges. 1 proven. 0 refuted. 0 times theorem prover too weak. 106 trivial. 0 not checked.
[2020-11-25 09:37:39,060 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 09:37:39,060 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [3] imperfect sequences [] total 3
[2020-11-25 09:37:39,060 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 09:37:39,060 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-11-25 09:37:39,060 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-11-25 09:37:39,061 INFO  L87              Difference]: Start difference. First operand 3639 states and 4477 transitions. cyclomatic complexity: 866 Second operand 3 states.
[2020-11-25 09:37:39,090 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 09:37:39,090 INFO  L93              Difference]: Finished difference Result 3657 states and 4497 transitions.
[2020-11-25 09:37:39,090 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-11-25 09:37:39,090 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 3657 states and 4497 transitions.
[2020-11-25 09:37:39,100 INFO  L131   ngComponentsAnalysis]: Automaton has 12 accepting balls. 24
[2020-11-25 09:37:39,111 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 3657 states to 3657 states and 4497 transitions.
[2020-11-25 09:37:39,111 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 823
[2020-11-25 09:37:39,112 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 823
[2020-11-25 09:37:39,112 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 3657 states and 4497 transitions.
[2020-11-25 09:37:39,115 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 09:37:39,115 INFO  L728         BuchiCegarLoop]: Abstraction has 3657 states and 4497 transitions.
[2020-11-25 09:37:39,117 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 3657 states and 4497 transitions.
[2020-11-25 09:37:39,142 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 3657 to 3651.
[2020-11-25 09:37:39,142 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 3651 states.
[2020-11-25 09:37:39,148 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 3651 states to 3651 states and 4491 transitions.
[2020-11-25 09:37:39,149 INFO  L751         BuchiCegarLoop]: Abstraction has 3651 states and 4491 transitions.
[2020-11-25 09:37:39,149 INFO  L631         BuchiCegarLoop]: Abstraction has 3651 states and 4491 transitions.
[2020-11-25 09:37:39,149 INFO  L445         BuchiCegarLoop]: ======== Iteration 15============
[2020-11-25 09:37:39,149 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 3651 states and 4491 transitions.
[2020-11-25 09:37:39,153 INFO  L131   ngComponentsAnalysis]: Automaton has 12 accepting balls. 24
[2020-11-25 09:37:39,153 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 09:37:39,153 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 09:37:39,155 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 09:37:39,155 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_ERC200 := false;
[L2]                 call_transfer_ERC200 := false;
[L2]     CALL        call main();
[L4981]              assume null == 0;
[L4982]  CALL        call this := FreshRefGenerator__success();
[L2122]              havoc newRef;
[L2123]              assume Alloc[newRef] == false;
[L2124]              Alloc[newRef] := true;
[L2125]              assume newRef != null;
[L4982]  RET         call this := FreshRefGenerator__success();
[L4983]              assume now >= 0;
[L4984]              assume DType[this] == YFV;
[L4985]              assume msgvalue_MSG == 0;
[L4986]              gas := gas - 53000;
[L4987]  CALL        call YFV_YFV(this, msgsender_MSG, msgvalue_MSG);
[L1098]              havoc __exception;
[L1099]              revert := false;
[L1100]  COND FALSE  !(__exception)
[L1125]  CALL        call YFV_YFV__success(this, msgsender_MSG, msgvalue_MSG);
[L3242]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2186]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2171]              assume msgsender_MSG != null;
[L2172]              Balance[this] := 0;
[L2186]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2187]  COND FALSE  !(revert)
[L3242]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3243]  COND FALSE  !(revert)
[L3246]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2154]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2139]              assume msgsender_MSG != null;
[L2140]              Balance[this] := 0;
[L2154]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2155]  COND FALSE  !(revert)
[L3246]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3247]  COND FALSE  !(revert)
[L3250]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2248]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2186]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2171]              assume msgsender_MSG != null;
[L2172]              Balance[this] := 0;
[L2186]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2187]  COND FALSE  !(revert)
[L2248]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2249]  COND FALSE  !(revert)
[L2252]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2154]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2139]              assume msgsender_MSG != null;
[L2140]              Balance[this] := 0;
[L2154]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2155]  COND FALSE  !(revert)
[L2252]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2253]  COND FALSE  !(revert)
[L2256]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2220]              assume msgsender_MSG != null;
[L2221]              Balance[this] := 0;
[L2222]              _balances_ERC20[this] := zeroRefintArr();
[L2223]              sum__balances0[this] := 0;
[L2224]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2225]              sum__allowances1[this] := 0;
[L2226]              _totalSupply_ERC20[this] := 0;
[L2256]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2257]  COND FALSE  !(revert)
[L3250]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3251]  COND FALSE  !(revert)
[L3254]  CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -868984158, 934069305, 18);
[L3012]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2154]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2139]              assume msgsender_MSG != null;
[L2140]              Balance[this] := 0;
[L2154]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2155]  COND FALSE  !(revert)
[L3012]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3013]  COND FALSE  !(revert)
[L3016]  CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s484, symbol_s484, decimals_s484);
[L2987]              assume msgsender_MSG != null;
[L2988]              Balance[this] := 0;
[L2989]              _name_ERC20Detailed[this] := 1252836592;
[L2990]              _symbol_ERC20Detailed[this] := 1252836592;
[L2991]              _decimals_ERC20Detailed[this] := 0;
[L2993]              _name_ERC20Detailed[this] := name_s484;
[L2994]              _symbol_ERC20Detailed[this] := symbol_s484;
[L2995]              _decimals_ERC20Detailed[this] := decimals_s484;
[L3016]  RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s484, symbol_s484, decimals_s484);
[L3017]  COND FALSE  !(revert)
[L3254]  RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -868984158, 934069305, 18);
[L3255]  COND FALSE  !(revert)
[L3258]  CALL        call YFV_YFV_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3208]              assume msgsender_MSG != null;
[L3209]              Balance[this] := 0;
[L3210]              governance_YFV[this] := null;
[L3211]              minters_YFV[this] := zeroRefboolArr();
[L3213]              governance_YFV[this] := msgsender_MSG;
[L3258]  RET         call YFV_YFV_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3259]  COND FALSE  !(revert)
[L1125]  RET         call YFV_YFV__success(this, msgsender_MSG, msgvalue_MSG);
[L1126]              assume !revert && gas >= 0;
[L4987]  RET         call YFV_YFV(this, msgsender_MSG, msgvalue_MSG);
[L4988]              assume !revert && gas >= 0;
[L4991]  CALL        call CorralChoice_YFV(this);
[L4804]              havoc msgsender_MSG;
[L4805]              havoc msgvalue_MSG;
[L4806]              havoc choice;
[L4807]              havoc __ret_0_totalSupply;
[L4808]              havoc account_s121;
[L4809]              havoc __ret_0_balanceOf;
[L4810]              havoc recipient_s140;
[L4811]              havoc amount_s140;
[L4812]              havoc __ret_0_transfer;
[L4813]              havoc owner_s156;
[L4814]              havoc spender_s156;
[L4815]              havoc __ret_0_allowance;
[L4816]              havoc spender_s175;
[L4817]              havoc amount_s175;
[L4818]              havoc __ret_0_approve;
[L4819]              havoc sender_s211;
[L4820]              havoc recipient_s211;
[L4821]              havoc amount_s211;
[L4822]              havoc __ret_0_transferFrom;
[L4823]              havoc spender_s238;
[L4824]              havoc addedValue_s238;
[L4825]              havoc __ret_0_increaseAllowance;
[L4826]              havoc spender_s266;
[L4827]              havoc subtractedValue_s266;
[L4828]              havoc __ret_0_decreaseAllowance;
[L4829]              havoc name_s484;
[L4830]              havoc symbol_s484;
[L4831]              havoc decimals_s484;
[L4832]              havoc __ret_0_name;
[L4833]              havoc __ret_0_symbol;
[L4834]              havoc __ret_0_decimals;
[L4835]              havoc __ret_0_governance;
[L4836]              havoc arg744_s0;
[L4837]              havoc __ret_0_minters;
[L4838]              havoc account_s671;
[L4839]              havoc amount_s671;
[L4840]              havoc amount_s683;
[L4841]              havoc _governance_s701;
[L4842]              havoc _minter_s721;
[L4843]              havoc _minter_s741;
[L4844]              havoc tmpNow;
[L4845]              havoc gas;
[L4846]              assume gas > 4000000 && gas <= 8000000;
[L4847]              tmpNow := now;
[L4848]              havoc now;
[L4849]              assume now > tmpNow;
[L4850]              assume msgsender_MSG != null;
[L4851]              assume DType[msgsender_MSG] != IERC20;
[L4852]              assume DType[msgsender_MSG] != Context;
[L4853]              assume DType[msgsender_MSG] != ERC20;
[L4854]              assume DType[msgsender_MSG] != ERC20Detailed;
[L4855]              assume DType[msgsender_MSG] != SafeMath;
[L4856]              assume DType[msgsender_MSG] != YFV;
[L4857]              Alloc[msgsender_MSG] := true;
[L4858]  COND FALSE  !(choice == 18)
[L4864]  COND FALSE  !(choice == 17)
[L4870]  COND FALSE  !(choice == 16)
[L4877]  COND FALSE  !(choice == 15)
[L4883]  COND FALSE  !(choice == 14)
[L4890]  COND TRUE   choice == 13
[L4891]              gas := gas - 21000;
[L4892]  COND TRUE   gas >= 0
[L4893]              assume amount_s211 >= 0 && amount_s211 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4894]              assume msgvalue_MSG == 0;
[L4895]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, sender_s211, recipient_s211, amount_s211);
[L572]               havoc __exception;
[L573]               revert := false;
[L574]   COND FALSE  !(__exception)
[L599]   CALL        call __ret_0_ := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s211, recipient_s211, amount_s211);
[L2500]  COND TRUE   DType[this] == YFV
[L2501]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s211, recipient_s211, amount_s211);
[L2806]              __var_12 := null;
[L2807]  COND FALSE  !(!(sender_s323 != null))
[L2811]              __var_13 := null;
[L2812]  COND FALSE  !(!(recipient_s323 != null))
[L2816]  CALL        call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s323], amount_s323, -806116454);
[L3129]  COND FALSE  !(!(b_s561 <= a_s561))
[L3133]              c_s561 := (a_s561 - b_s561) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3134]              __ret_0_ := c_s561;
[L2816]  RET         call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s323], amount_s323, -806116454);
[L2817]  COND FALSE  !(revert)
[L2820]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s323];
[L2821]              _balances_ERC20[this][sender_s323] := __var_14;
[L2822]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s323];
[L2823]  CALL        call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s323], amount_s323);
[L3105]              c_s534 := (a_s534 + b_s534) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3106]  COND FALSE  !(!(c_s534 >= a_s534))
[L3110]              __ret_0_ := c_s534;
[L2823]  RET         call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s323], amount_s323);
[L2824]  COND FALSE  !(revert)
[L2827]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s323];
[L2828]              _balances_ERC20[this][recipient_s323] := __var_15;
[L2829]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s323];
[L2830]              assert { :EventEmitted "Transfer_ERC20" } true;
[L2501]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s211, recipient_s211, amount_s211);
[L2502]  COND FALSE  !(revert)
[L2513]  COND TRUE   DType[this] == YFV
[L2514]  CALL        call __var_3 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2200]              __ret_0_ := msgsender_MSG;
[L2514]  RET         call __var_3 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2515]  COND FALSE  !(revert)
[L2526]  COND TRUE   DType[this] == YFV
[L2527]  CALL        call __var_5 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2200]              __ret_0_ := msgsender_MSG;
[L2527]  RET         call __var_5 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2528]  COND FALSE  !(revert)
[L2539]  CALL        call __var_4 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s211][__var_5], amount_s211, -2057360831);
[L3129]  COND FALSE  !(!(b_s561 <= a_s561))
[L3133]              c_s561 := (a_s561 - b_s561) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3134]              __ret_0_ := c_s561;
[L2539]  RET         call __var_4 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s211][__var_5], amount_s211, -2057360831);
[L2540]  COND FALSE  !(revert)
[L2543]  COND TRUE   DType[this] == YFV
[L2544]  CALL        call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s211, __var_3, __var_4);
[L2954]              __var_22 := null;
[L2955]  COND FALSE  !(!(owner_s453 != null))
[L2959]              __var_23 := null;
[L2960]  COND FALSE  !(!(spender_s453 != null))
[L2964]              sum__allowances1[owner_s453] := sum__allowances1[owner_s453] - _allowances_ERC20[this][owner_s453][spender_s453];
[L2965]              _allowances_ERC20[this][owner_s453][spender_s453] := amount_s453;
[L2966]              sum__allowances1[owner_s453] := sum__allowances1[owner_s453] + _allowances_ERC20[this][owner_s453][spender_s453];
[L2967]              assert { :EventEmitted "Approval_ERC20" } true;
[L2544]  RET         call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s211, __var_3, __var_4);
[L2545]  COND FALSE  !(revert)
[L2556]              __ret_0_ := true;
[L599]   RET         call __ret_0_ := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s211, recipient_s211, amount_s211);
[L600]               assume !revert && gas >= 0;
[L4895]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, sender_s211, recipient_s211, amount_s211);
[L4991]  RET         call CorralChoice_YFV(this);
[L4991]  CALL        call CorralChoice_YFV(this);
[L4804]              havoc msgsender_MSG;
[L4805]              havoc msgvalue_MSG;
[L4806]              havoc choice;
[L4807]              havoc __ret_0_totalSupply;
[L4808]              havoc account_s121;
[L4809]              havoc __ret_0_balanceOf;
[L4810]              havoc recipient_s140;
[L4811]              havoc amount_s140;
[L4812]              havoc __ret_0_transfer;
[L4813]              havoc owner_s156;
[L4814]              havoc spender_s156;
[L4815]              havoc __ret_0_allowance;
[L4816]              havoc spender_s175;
[L4817]              havoc amount_s175;
[L4818]              havoc __ret_0_approve;
[L4819]              havoc sender_s211;
[L4820]              havoc recipient_s211;
[L4821]              havoc amount_s211;
[L4822]              havoc __ret_0_transferFrom;
[L4823]              havoc spender_s238;
[L4824]              havoc addedValue_s238;
[L4825]              havoc __ret_0_increaseAllowance;
[L4826]              havoc spender_s266;
[L4827]              havoc subtractedValue_s266;
[L4828]              havoc __ret_0_decreaseAllowance;
[L4829]              havoc name_s484;
[L4830]              havoc symbol_s484;
[L4831]              havoc decimals_s484;
[L4832]              havoc __ret_0_name;
[L4833]              havoc __ret_0_symbol;
[L4834]              havoc __ret_0_decimals;
[L4835]              havoc __ret_0_governance;
[L4836]              havoc arg744_s0;
[L4837]              havoc __ret_0_minters;
[L4838]              havoc account_s671;
[L4839]              havoc amount_s671;
[L4840]              havoc amount_s683;
[L4841]              havoc _governance_s701;
[L4842]              havoc _minter_s721;
[L4843]              havoc _minter_s741;
[L4844]              havoc tmpNow;
[L4845]              havoc gas;
[L4846]              assume gas > 4000000 && gas <= 8000000;
[L4847]              tmpNow := now;
[L4848]              havoc now;
[L4849]              assume now > tmpNow;
[L4850]              assume msgsender_MSG != null;
[L4851]              assume DType[msgsender_MSG] != IERC20;
[L4852]              assume DType[msgsender_MSG] != Context;
[L4853]              assume DType[msgsender_MSG] != ERC20;
[L4854]              assume DType[msgsender_MSG] != ERC20Detailed;
[L4855]              assume DType[msgsender_MSG] != SafeMath;
[L4856]              assume DType[msgsender_MSG] != YFV;
[L4857]              Alloc[msgsender_MSG] := true;
[L4858]  COND FALSE  !(choice == 18)
[L4864]  COND FALSE  !(choice == 17)
[L4870]  COND TRUE   choice == 16
[L4871]              gas := gas - 21000;
[L4872]  COND TRUE   gas >= 0
[L4873]              assume amount_s140 >= 0 && amount_s140 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4874]              assume msgvalue_MSG == 0;
[L4875]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == recipient_s140 && amount_s140 <= _balances_ERC20[this][msgsender_MSG]) && amount_s140 >= 0) && amount_s140 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s140] >= 0) && _balances_ERC20[this][recipient_s140] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC200 := true;
[L2]                 call_transfer_ERC200 := false;
[L2]                 revert := revert_hold;
[L392]               havoc __exception;
[L393]               revert := false;
[L394]   COND FALSE  !(__exception)
[L419]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L2322]  COND TRUE   DType[this] == YFV
[L2323]  CALL        call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2200]              __ret_0_ := msgsender_MSG;
[L2323]  RET         call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2324]  COND FALSE  !(revert)
[L2335]  COND TRUE   DType[this] == YFV
[L2336]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s140, amount_s140);
[L2806]              __var_12 := null;
[L2807]  COND FALSE  !(!(sender_s323 != null))
[L2811]              __var_13 := null;
[L2812]  COND FALSE  !(!(recipient_s323 != null))
[L2816]  CALL        call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s323], amount_s323, -806116454);
[L3129]  COND FALSE  !(!(b_s561 <= a_s561))
[L3133]              c_s561 := (a_s561 - b_s561) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3134]              __ret_0_ := c_s561;
[L2816]  RET         call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s323], amount_s323, -806116454);
[L2817]  COND FALSE  !(revert)
[L2820]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s323];
[L2821]              _balances_ERC20[this][sender_s323] := __var_14;
[L2822]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s323];
[L2823]  CALL        call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s323], amount_s323);
[L3105]              c_s534 := (a_s534 + b_s534) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3106]  COND FALSE  !(!(c_s534 >= a_s534))
[L3110]              __ret_0_ := c_s534;
[L2823]  RET         call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s323], amount_s323);
[L2824]  COND FALSE  !(revert)
[L2827]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s323];
[L2828]              _balances_ERC20[this][recipient_s323] := __var_15;
[L2829]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s323];
[L2830]              assert { :EventEmitted "Transfer_ERC20" } true;
[L2336]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s140, amount_s140);
[L2337]  COND FALSE  !(revert)
[L2348]              __ret_0_ := true;
[L419]   RET         call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L420]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !((((((((__ret_0_ == true && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowances_ERC20[this] == old(_allowances_ERC20[this])) && governance_YFV[this] == old(governance_YFV[this])) && minters_YFV[this] == old(minters_YFV[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]));
[L2]                 revert := revert_hold;
[L4875]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L4991]  RET         call CorralChoice_YFV(this);

Loop:
[L4991]  CALL        call CorralChoice_YFV(this);
[L4804]              havoc msgsender_MSG;
[L4805]              havoc msgvalue_MSG;
[L4806]              havoc choice;
[L4807]              havoc __ret_0_totalSupply;
[L4808]              havoc account_s121;
[L4809]              havoc __ret_0_balanceOf;
[L4810]              havoc recipient_s140;
[L4811]              havoc amount_s140;
[L4812]              havoc __ret_0_transfer;
[L4813]              havoc owner_s156;
[L4814]              havoc spender_s156;
[L4815]              havoc __ret_0_allowance;
[L4816]              havoc spender_s175;
[L4817]              havoc amount_s175;
[L4818]              havoc __ret_0_approve;
[L4819]              havoc sender_s211;
[L4820]              havoc recipient_s211;
[L4821]              havoc amount_s211;
[L4822]              havoc __ret_0_transferFrom;
[L4823]              havoc spender_s238;
[L4824]              havoc addedValue_s238;
[L4825]              havoc __ret_0_increaseAllowance;
[L4826]              havoc spender_s266;
[L4827]              havoc subtractedValue_s266;
[L4828]              havoc __ret_0_decreaseAllowance;
[L4829]              havoc name_s484;
[L4830]              havoc symbol_s484;
[L4831]              havoc decimals_s484;
[L4832]              havoc __ret_0_name;
[L4833]              havoc __ret_0_symbol;
[L4834]              havoc __ret_0_decimals;
[L4835]              havoc __ret_0_governance;
[L4836]              havoc arg744_s0;
[L4837]              havoc __ret_0_minters;
[L4838]              havoc account_s671;
[L4839]              havoc amount_s671;
[L4840]              havoc amount_s683;
[L4841]              havoc _governance_s701;
[L4842]              havoc _minter_s721;
[L4843]              havoc _minter_s741;
[L4844]              havoc tmpNow;
[L4845]              havoc gas;
[L4846]              assume gas > 4000000 && gas <= 8000000;
[L4847]              tmpNow := now;
[L4848]              havoc now;
[L4849]              assume now > tmpNow;
[L4850]              assume msgsender_MSG != null;
[L4851]              assume DType[msgsender_MSG] != IERC20;
[L4852]              assume DType[msgsender_MSG] != Context;
[L4853]              assume DType[msgsender_MSG] != ERC20;
[L4854]              assume DType[msgsender_MSG] != ERC20Detailed;
[L4855]              assume DType[msgsender_MSG] != SafeMath;
[L4856]              assume DType[msgsender_MSG] != YFV;
[L4857]              Alloc[msgsender_MSG] := true;
[L4858]  COND FALSE  !(choice == 18)
[L4864]  COND FALSE  !(choice == 17)
[L4870]  COND FALSE  !(choice == 16)
[L4877]  COND FALSE  !(choice == 15)
[L4883]  COND FALSE  !(choice == 14)
[L4890]  COND TRUE   choice == 13
[L4891]              gas := gas - 21000;
[L4892]  COND TRUE   gas >= 0
[L4893]              assume amount_s211 >= 0 && amount_s211 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4894]              assume msgvalue_MSG == 0;
[L4895]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, sender_s211, recipient_s211, amount_s211);
[L572]               havoc __exception;
[L573]               revert := false;
[L574]   COND FALSE  !(__exception)
[L599]   CALL        call __ret_0_ := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s211, recipient_s211, amount_s211);
[L2500]  COND FALSE  !(DType[this] == YFV)
[L2505]  COND TRUE   DType[this] == ERC20
[L2506]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s211, recipient_s211, amount_s211);
[L2806]              __var_12 := null;
[L2807]  COND FALSE  !(!(sender_s323 != null))
[L2811]              __var_13 := null;
[L2812]  COND FALSE  !(!(recipient_s323 != null))
[L2816]  CALL        call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s323], amount_s323, -806116454);
[L3129]  COND FALSE  !(!(b_s561 <= a_s561))
[L3133]              c_s561 := (a_s561 - b_s561) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3134]              __ret_0_ := c_s561;
[L2816]  RET         call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s323], amount_s323, -806116454);
[L2817]  COND FALSE  !(revert)
[L2820]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s323];
[L2821]              _balances_ERC20[this][sender_s323] := __var_14;
[L2822]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s323];
[L2823]  CALL        call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s323], amount_s323);
[L3105]              c_s534 := (a_s534 + b_s534) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3106]  COND FALSE  !(!(c_s534 >= a_s534))
[L3110]              __ret_0_ := c_s534;
[L2823]  RET         call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s323], amount_s323);
[L2824]  COND FALSE  !(revert)
[L2827]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s323];
[L2828]              _balances_ERC20[this][recipient_s323] := __var_15;
[L2829]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s323];
[L2830]              assert { :EventEmitted "Transfer_ERC20" } true;
[L2506]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s211, recipient_s211, amount_s211);
[L2507]  COND FALSE  !(revert)
[L2513]  COND FALSE  !(DType[this] == YFV)
[L2518]  COND TRUE   DType[this] == ERC20
[L2519]  CALL        call __var_3 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2200]              __ret_0_ := msgsender_MSG;
[L2519]  RET         call __var_3 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2520]  COND FALSE  !(revert)
[L2526]  COND FALSE  !(DType[this] == YFV)
[L2531]  COND TRUE   DType[this] == ERC20
[L2532]  CALL        call __var_5 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2200]              __ret_0_ := msgsender_MSG;
[L2532]  RET         call __var_5 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2533]  COND FALSE  !(revert)
[L2539]  CALL        call __var_4 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s211][__var_5], amount_s211, -2057360831);
[L3129]  COND FALSE  !(!(b_s561 <= a_s561))
[L3133]              c_s561 := (a_s561 - b_s561) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3134]              __ret_0_ := c_s561;
[L2539]  RET         call __var_4 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s211][__var_5], amount_s211, -2057360831);
[L2540]  COND FALSE  !(revert)
[L2543]  COND FALSE  !(DType[this] == YFV)
[L2548]  COND TRUE   DType[this] == ERC20
[L2549]  CALL        call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s211, __var_3, __var_4);
[L2954]              __var_22 := null;
[L2955]  COND FALSE  !(!(owner_s453 != null))
[L2959]              __var_23 := null;
[L2960]  COND FALSE  !(!(spender_s453 != null))
[L2964]              sum__allowances1[owner_s453] := sum__allowances1[owner_s453] - _allowances_ERC20[this][owner_s453][spender_s453];
[L2965]              _allowances_ERC20[this][owner_s453][spender_s453] := amount_s453;
[L2966]              sum__allowances1[owner_s453] := sum__allowances1[owner_s453] + _allowances_ERC20[this][owner_s453][spender_s453];
[L2967]              assert { :EventEmitted "Approval_ERC20" } true;
[L2549]  RET         call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s211, __var_3, __var_4);
[L2550]  COND FALSE  !(revert)
[L2556]              __ret_0_ := true;
[L599]   RET         call __ret_0_ := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s211, recipient_s211, amount_s211);
[L600]               assume !revert && gas >= 0;
[L4895]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, sender_s211, recipient_s211, amount_s211);
[L4991]  RET         call CorralChoice_YFV(this);

[2020-11-25 09:37:39,159 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 09:37:39,159 INFO  L82        PathProgramCache]: Analyzing trace with hash 1656228090, now seen corresponding path program 1 times
[2020-11-25 09:37:39,160 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 09:37:39,186 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 09:37:40,232 INFO  L134       CoverageAnalysis]: Checked inductivity of 107 backedges. 0 proven. 5 refuted. 0 times theorem prover too weak. 102 trivial. 0 not checked.
[2020-11-25 09:37:40,232 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 09:37:40,232 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [40] total 40
[2020-11-25 09:37:40,232 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 09:37:40,233 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 41 interpolants.
[2020-11-25 09:37:40,233 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=127, Invalid=1513, Unknown=0, NotChecked=0, Total=1640
[2020-11-25 09:37:40,233 INFO  L87              Difference]: Start difference. First operand 3651 states and 4491 transitions. cyclomatic complexity: 868 Second operand 41 states.
[2020-11-25 09:37:50,380 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 09:37:50,380 INFO  L93              Difference]: Finished difference Result 3701 states and 4725 transitions.
[2020-11-25 09:37:50,380 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 33 states. 
[2020-11-25 09:37:50,380 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 3701 states and 4725 transitions.
[2020-11-25 09:37:50,391 INFO  L131   ngComponentsAnalysis]: Automaton has 22 accepting balls. 44
[2020-11-25 09:37:50,403 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 3701 states to 3701 states and 4725 transitions.
[2020-11-25 09:37:50,403 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 846
[2020-11-25 09:37:50,404 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 846
[2020-11-25 09:37:50,404 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 3701 states and 4725 transitions.
[2020-11-25 09:37:50,407 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 09:37:50,407 INFO  L728         BuchiCegarLoop]: Abstraction has 3701 states and 4725 transitions.
[2020-11-25 09:37:50,409 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 3701 states and 4725 transitions.
[2020-11-25 09:37:50,433 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 3701 to 3260.
[2020-11-25 09:37:50,433 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 3260 states.
[2020-11-25 09:37:50,437 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 3260 states to 3260 states and 3856 transitions.
[2020-11-25 09:37:50,437 INFO  L751         BuchiCegarLoop]: Abstraction has 3260 states and 3856 transitions.
[2020-11-25 09:37:50,438 INFO  L631         BuchiCegarLoop]: Abstraction has 3260 states and 3856 transitions.
[2020-11-25 09:37:50,438 INFO  L445         BuchiCegarLoop]: ======== Iteration 16============
[2020-11-25 09:37:50,438 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 3260 states and 3856 transitions.
[2020-11-25 09:37:50,441 INFO  L131   ngComponentsAnalysis]: Automaton has 6 accepting balls. 12
[2020-11-25 09:37:50,441 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 09:37:50,441 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 09:37:50,442 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 09:37:50,442 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_ERC200 := false;
[L2]                 call_transfer_ERC200 := false;
[L2]     CALL        call main();
[L4981]              assume null == 0;
[L4982]  CALL        call this := FreshRefGenerator__success();
[L2122]              havoc newRef;
[L2123]              assume Alloc[newRef] == false;
[L2124]              Alloc[newRef] := true;
[L2125]              assume newRef != null;
[L4982]  RET         call this := FreshRefGenerator__success();
[L4983]              assume now >= 0;
[L4984]              assume DType[this] == YFV;
[L4985]              assume msgvalue_MSG == 0;
[L4986]              gas := gas - 53000;
[L4987]  CALL        call YFV_YFV(this, msgsender_MSG, msgvalue_MSG);
[L1098]              havoc __exception;
[L1099]              revert := false;
[L1100]  COND FALSE  !(__exception)
[L1125]  CALL        call YFV_YFV__success(this, msgsender_MSG, msgvalue_MSG);
[L3242]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2186]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2171]              assume msgsender_MSG != null;
[L2172]              Balance[this] := 0;
[L2186]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2187]  COND FALSE  !(revert)
[L3242]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3243]  COND FALSE  !(revert)
[L3246]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2154]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2139]              assume msgsender_MSG != null;
[L2140]              Balance[this] := 0;
[L2154]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2155]  COND FALSE  !(revert)
[L3246]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3247]  COND FALSE  !(revert)
[L3250]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2248]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2186]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2171]              assume msgsender_MSG != null;
[L2172]              Balance[this] := 0;
[L2186]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2187]  COND FALSE  !(revert)
[L2248]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2249]  COND FALSE  !(revert)
[L2252]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2154]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2139]              assume msgsender_MSG != null;
[L2140]              Balance[this] := 0;
[L2154]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2155]  COND FALSE  !(revert)
[L2252]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2253]  COND FALSE  !(revert)
[L2256]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2220]              assume msgsender_MSG != null;
[L2221]              Balance[this] := 0;
[L2222]              _balances_ERC20[this] := zeroRefintArr();
[L2223]              sum__balances0[this] := 0;
[L2224]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2225]              sum__allowances1[this] := 0;
[L2226]              _totalSupply_ERC20[this] := 0;
[L2256]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2257]  COND FALSE  !(revert)
[L3250]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3251]  COND FALSE  !(revert)
[L3254]  CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -868984158, 934069305, 18);
[L3012]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2154]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2139]              assume msgsender_MSG != null;
[L2140]              Balance[this] := 0;
[L2154]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2155]  COND FALSE  !(revert)
[L3012]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3013]  COND FALSE  !(revert)
[L3016]  CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s484, symbol_s484, decimals_s484);
[L2987]              assume msgsender_MSG != null;
[L2988]              Balance[this] := 0;
[L2989]              _name_ERC20Detailed[this] := 1252836592;
[L2990]              _symbol_ERC20Detailed[this] := 1252836592;
[L2991]              _decimals_ERC20Detailed[this] := 0;
[L2993]              _name_ERC20Detailed[this] := name_s484;
[L2994]              _symbol_ERC20Detailed[this] := symbol_s484;
[L2995]              _decimals_ERC20Detailed[this] := decimals_s484;
[L3016]  RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s484, symbol_s484, decimals_s484);
[L3017]  COND FALSE  !(revert)
[L3254]  RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -868984158, 934069305, 18);
[L3255]  COND FALSE  !(revert)
[L3258]  CALL        call YFV_YFV_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3208]              assume msgsender_MSG != null;
[L3209]              Balance[this] := 0;
[L3210]              governance_YFV[this] := null;
[L3211]              minters_YFV[this] := zeroRefboolArr();
[L3213]              governance_YFV[this] := msgsender_MSG;
[L3258]  RET         call YFV_YFV_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3259]  COND FALSE  !(revert)
[L1125]  RET         call YFV_YFV__success(this, msgsender_MSG, msgvalue_MSG);
[L1126]              assume !revert && gas >= 0;
[L4987]  RET         call YFV_YFV(this, msgsender_MSG, msgvalue_MSG);
[L4988]              assume !revert && gas >= 0;
[L4991]  CALL        call CorralChoice_YFV(this);
[L4804]              havoc msgsender_MSG;
[L4805]              havoc msgvalue_MSG;
[L4806]              havoc choice;
[L4807]              havoc __ret_0_totalSupply;
[L4808]              havoc account_s121;
[L4809]              havoc __ret_0_balanceOf;
[L4810]              havoc recipient_s140;
[L4811]              havoc amount_s140;
[L4812]              havoc __ret_0_transfer;
[L4813]              havoc owner_s156;
[L4814]              havoc spender_s156;
[L4815]              havoc __ret_0_allowance;
[L4816]              havoc spender_s175;
[L4817]              havoc amount_s175;
[L4818]              havoc __ret_0_approve;
[L4819]              havoc sender_s211;
[L4820]              havoc recipient_s211;
[L4821]              havoc amount_s211;
[L4822]              havoc __ret_0_transferFrom;
[L4823]              havoc spender_s238;
[L4824]              havoc addedValue_s238;
[L4825]              havoc __ret_0_increaseAllowance;
[L4826]              havoc spender_s266;
[L4827]              havoc subtractedValue_s266;
[L4828]              havoc __ret_0_decreaseAllowance;
[L4829]              havoc name_s484;
[L4830]              havoc symbol_s484;
[L4831]              havoc decimals_s484;
[L4832]              havoc __ret_0_name;
[L4833]              havoc __ret_0_symbol;
[L4834]              havoc __ret_0_decimals;
[L4835]              havoc __ret_0_governance;
[L4836]              havoc arg744_s0;
[L4837]              havoc __ret_0_minters;
[L4838]              havoc account_s671;
[L4839]              havoc amount_s671;
[L4840]              havoc amount_s683;
[L4841]              havoc _governance_s701;
[L4842]              havoc _minter_s721;
[L4843]              havoc _minter_s741;
[L4844]              havoc tmpNow;
[L4845]              havoc gas;
[L4846]              assume gas > 4000000 && gas <= 8000000;
[L4847]              tmpNow := now;
[L4848]              havoc now;
[L4849]              assume now > tmpNow;
[L4850]              assume msgsender_MSG != null;
[L4851]              assume DType[msgsender_MSG] != IERC20;
[L4852]              assume DType[msgsender_MSG] != Context;
[L4853]              assume DType[msgsender_MSG] != ERC20;
[L4854]              assume DType[msgsender_MSG] != ERC20Detailed;
[L4855]              assume DType[msgsender_MSG] != SafeMath;
[L4856]              assume DType[msgsender_MSG] != YFV;
[L4857]              Alloc[msgsender_MSG] := true;
[L4858]  COND FALSE  !(choice == 18)
[L4864]  COND FALSE  !(choice == 17)
[L4870]  COND FALSE  !(choice == 16)
[L4877]  COND FALSE  !(choice == 15)
[L4883]  COND FALSE  !(choice == 14)
[L4890]  COND FALSE  !(choice == 13)
[L4897]  COND FALSE  !(choice == 12)
[L4904]  COND FALSE  !(choice == 11)
[L4911]  COND FALSE  !(choice == 10)
[L4917]  COND FALSE  !(choice == 9)
[L4923]  COND FALSE  !(choice == 8)
[L4929]  COND FALSE  !(choice == 7)
[L4935]  COND FALSE  !(choice == 6)
[L4941]  COND FALSE  !(choice == 5)
[L4948]  COND TRUE   choice == 4
[L4949]              gas := gas - 21000;
[L4950]  COND TRUE   gas >= 0
[L4951]              assume amount_s683 >= 0 && amount_s683 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4952]              assume msgvalue_MSG == 0;
[L4953]  CALL        call burn~uint256_YFV(this, msgsender_MSG, msgvalue_MSG, amount_s683);
[L1220]              havoc __exception;
[L1221]              revert := false;
[L1222]  COND FALSE  !(__exception)
[L1247]  CALL        call burn~uint256_YFV__success(this, msgsender_MSG, msgvalue_MSG, amount_s683);
[L3310]  COND TRUE   DType[this] == YFV
[L3311]  CALL        call _burn~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, amount_s683);
[L2911]              __var_19 := null;
[L2912]  COND FALSE  !(!(account_s411 != null))
[L2916]  CALL        call __var_20 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s411], amount_s411, 392639254);
[L3129]  COND FALSE  !(!(b_s561 <= a_s561))
[L3133]              c_s561 := (a_s561 - b_s561) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3134]              __ret_0_ := c_s561;
[L2916]  RET         call __var_20 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s411], amount_s411, 392639254);
[L2917]  COND FALSE  !(revert)
[L2920]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s411];
[L2921]              _balances_ERC20[this][account_s411] := __var_20;
[L2922]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s411];
[L2923]  CALL        call __var_21 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s411, 1252836592);
[L3129]  COND FALSE  !(!(b_s561 <= a_s561))
[L3133]              c_s561 := (a_s561 - b_s561) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3134]              __ret_0_ := c_s561;
[L2923]  RET         call __var_21 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s411, 1252836592);
[L2924]  COND FALSE  !(revert)
[L2927]              _totalSupply_ERC20[this] := __var_21;
[L2928]              assert { :EventEmitted "Transfer_ERC20" } true;
[L3311]  RET         call _burn~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, amount_s683);
[L3312]  COND FALSE  !(revert)
[L1247]  RET         call burn~uint256_YFV__success(this, msgsender_MSG, msgvalue_MSG, amount_s683);
[L1248]              assume !revert && gas >= 0;
[L4953]  RET         call burn~uint256_YFV(this, msgsender_MSG, msgvalue_MSG, amount_s683);
[L4991]  RET         call CorralChoice_YFV(this);
[L4991]  CALL        call CorralChoice_YFV(this);
[L4804]              havoc msgsender_MSG;
[L4805]              havoc msgvalue_MSG;
[L4806]              havoc choice;
[L4807]              havoc __ret_0_totalSupply;
[L4808]              havoc account_s121;
[L4809]              havoc __ret_0_balanceOf;
[L4810]              havoc recipient_s140;
[L4811]              havoc amount_s140;
[L4812]              havoc __ret_0_transfer;
[L4813]              havoc owner_s156;
[L4814]              havoc spender_s156;
[L4815]              havoc __ret_0_allowance;
[L4816]              havoc spender_s175;
[L4817]              havoc amount_s175;
[L4818]              havoc __ret_0_approve;
[L4819]              havoc sender_s211;
[L4820]              havoc recipient_s211;
[L4821]              havoc amount_s211;
[L4822]              havoc __ret_0_transferFrom;
[L4823]              havoc spender_s238;
[L4824]              havoc addedValue_s238;
[L4825]              havoc __ret_0_increaseAllowance;
[L4826]              havoc spender_s266;
[L4827]              havoc subtractedValue_s266;
[L4828]              havoc __ret_0_decreaseAllowance;
[L4829]              havoc name_s484;
[L4830]              havoc symbol_s484;
[L4831]              havoc decimals_s484;
[L4832]              havoc __ret_0_name;
[L4833]              havoc __ret_0_symbol;
[L4834]              havoc __ret_0_decimals;
[L4835]              havoc __ret_0_governance;
[L4836]              havoc arg744_s0;
[L4837]              havoc __ret_0_minters;
[L4838]              havoc account_s671;
[L4839]              havoc amount_s671;
[L4840]              havoc amount_s683;
[L4841]              havoc _governance_s701;
[L4842]              havoc _minter_s721;
[L4843]              havoc _minter_s741;
[L4844]              havoc tmpNow;
[L4845]              havoc gas;
[L4846]              assume gas > 4000000 && gas <= 8000000;
[L4847]              tmpNow := now;
[L4848]              havoc now;
[L4849]              assume now > tmpNow;
[L4850]              assume msgsender_MSG != null;
[L4851]              assume DType[msgsender_MSG] != IERC20;
[L4852]              assume DType[msgsender_MSG] != Context;
[L4853]              assume DType[msgsender_MSG] != ERC20;
[L4854]              assume DType[msgsender_MSG] != ERC20Detailed;
[L4855]              assume DType[msgsender_MSG] != SafeMath;
[L4856]              assume DType[msgsender_MSG] != YFV;
[L4857]              Alloc[msgsender_MSG] := true;
[L4858]  COND FALSE  !(choice == 18)
[L4864]  COND FALSE  !(choice == 17)
[L4870]  COND TRUE   choice == 16
[L4871]              gas := gas - 21000;
[L4872]  COND TRUE   gas >= 0
[L4873]              assume amount_s140 >= 0 && amount_s140 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4874]              assume msgvalue_MSG == 0;
[L4875]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((msgsender_MSG == recipient_s140 && amount_s140 <= _balances_ERC20[this][msgsender_MSG]) && amount_s140 >= 0) && amount_s140 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s140] >= 0) && _balances_ERC20[this][recipient_s140] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2]                 revert := revert_hold;
[L392]               havoc __exception;
[L393]               revert := false;
[L394]   COND FALSE  !(__exception)
[L419]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L2322]  COND FALSE  !(DType[this] == YFV)
[L2327]  COND TRUE   DType[this] == ERC20
[L2328]  CALL        call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2200]              __ret_0_ := msgsender_MSG;
[L2328]  RET         call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2329]  COND FALSE  !(revert)
[L2335]  COND FALSE  !(DType[this] == YFV)
[L2340]  COND TRUE   DType[this] == ERC20
[L2341]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s140, amount_s140);
[L2806]              __var_12 := null;
[L2807]  COND FALSE  !(!(sender_s323 != null))
[L2811]              __var_13 := null;
[L2812]  COND FALSE  !(!(recipient_s323 != null))
[L2816]  CALL        call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s323], amount_s323, -806116454);
[L3129]  COND FALSE  !(!(b_s561 <= a_s561))
[L3133]              c_s561 := (a_s561 - b_s561) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3134]              __ret_0_ := c_s561;
[L2816]  RET         call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s323], amount_s323, -806116454);
[L2817]  COND FALSE  !(revert)
[L2820]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s323];
[L2821]              _balances_ERC20[this][sender_s323] := __var_14;
[L2822]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s323];
[L2823]  CALL        call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s323], amount_s323);
[L3105]              c_s534 := (a_s534 + b_s534) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3106]  COND FALSE  !(!(c_s534 >= a_s534))
[L3110]              __ret_0_ := c_s534;
[L2823]  RET         call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s323], amount_s323);
[L2824]  COND FALSE  !(revert)
[L2827]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s323];
[L2828]              _balances_ERC20[this][recipient_s323] := __var_15;
[L2829]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s323];
[L2830]              assert { :EventEmitted "Transfer_ERC20" } true;
[L2341]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s140, amount_s140);
[L2342]  COND FALSE  !(revert)
[L2348]              __ret_0_ := true;
[L419]   RET         call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L420]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !((((((((__ret_0_ == true && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowances_ERC20[this] == old(_allowances_ERC20[this])) && governance_YFV[this] == old(governance_YFV[this])) && minters_YFV[this] == old(minters_YFV[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]));
[L2]                 revert := revert_hold;
[L4875]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L4991]  RET         call CorralChoice_YFV(this);
[L4991]  CALL        call CorralChoice_YFV(this);
[L4804]              havoc msgsender_MSG;
[L4805]              havoc msgvalue_MSG;
[L4806]              havoc choice;
[L4807]              havoc __ret_0_totalSupply;
[L4808]              havoc account_s121;
[L4809]              havoc __ret_0_balanceOf;
[L4810]              havoc recipient_s140;
[L4811]              havoc amount_s140;
[L4812]              havoc __ret_0_transfer;
[L4813]              havoc owner_s156;
[L4814]              havoc spender_s156;
[L4815]              havoc __ret_0_allowance;
[L4816]              havoc spender_s175;
[L4817]              havoc amount_s175;
[L4818]              havoc __ret_0_approve;
[L4819]              havoc sender_s211;
[L4820]              havoc recipient_s211;
[L4821]              havoc amount_s211;
[L4822]              havoc __ret_0_transferFrom;
[L4823]              havoc spender_s238;
[L4824]              havoc addedValue_s238;
[L4825]              havoc __ret_0_increaseAllowance;
[L4826]              havoc spender_s266;
[L4827]              havoc subtractedValue_s266;
[L4828]              havoc __ret_0_decreaseAllowance;
[L4829]              havoc name_s484;
[L4830]              havoc symbol_s484;
[L4831]              havoc decimals_s484;
[L4832]              havoc __ret_0_name;
[L4833]              havoc __ret_0_symbol;
[L4834]              havoc __ret_0_decimals;
[L4835]              havoc __ret_0_governance;
[L4836]              havoc arg744_s0;
[L4837]              havoc __ret_0_minters;
[L4838]              havoc account_s671;
[L4839]              havoc amount_s671;
[L4840]              havoc amount_s683;
[L4841]              havoc _governance_s701;
[L4842]              havoc _minter_s721;
[L4843]              havoc _minter_s741;
[L4844]              havoc tmpNow;
[L4845]              havoc gas;
[L4846]              assume gas > 4000000 && gas <= 8000000;
[L4847]              tmpNow := now;
[L4848]              havoc now;
[L4849]              assume now > tmpNow;
[L4850]              assume msgsender_MSG != null;
[L4851]              assume DType[msgsender_MSG] != IERC20;
[L4852]              assume DType[msgsender_MSG] != Context;
[L4853]              assume DType[msgsender_MSG] != ERC20;
[L4854]              assume DType[msgsender_MSG] != ERC20Detailed;
[L4855]              assume DType[msgsender_MSG] != SafeMath;
[L4856]              assume DType[msgsender_MSG] != YFV;
[L4857]              Alloc[msgsender_MSG] := true;
[L4858]  COND FALSE  !(choice == 18)
[L4864]  COND FALSE  !(choice == 17)
[L4870]  COND TRUE   choice == 16
[L4871]              gas := gas - 21000;
[L4872]  COND TRUE   gas >= 0
[L4873]              assume amount_s140 >= 0 && amount_s140 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4874]              assume msgvalue_MSG == 0;
[L4875]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == recipient_s140 && amount_s140 <= _balances_ERC20[this][msgsender_MSG]) && amount_s140 >= 0) && amount_s140 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s140] >= 0) && _balances_ERC20[this][recipient_s140] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC200 := true;
[L2]                 call_transfer_ERC200 := false;
[L2]                 revert := revert_hold;
[L392]               havoc __exception;
[L393]               revert := false;
[L394]   COND FALSE  !(__exception)
[L419]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L2322]  COND TRUE   DType[this] == YFV
[L2323]  CALL        call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2200]              __ret_0_ := msgsender_MSG;
[L2323]  RET         call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2324]  COND FALSE  !(revert)
[L2335]  COND TRUE   DType[this] == YFV
[L2336]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s140, amount_s140);
[L2806]              __var_12 := null;
[L2807]  COND FALSE  !(!(sender_s323 != null))
[L2811]              __var_13 := null;
[L2812]  COND FALSE  !(!(recipient_s323 != null))
[L2816]  CALL        call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s323], amount_s323, -806116454);
[L3129]  COND FALSE  !(!(b_s561 <= a_s561))
[L3133]              c_s561 := (a_s561 - b_s561) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3134]              __ret_0_ := c_s561;
[L2816]  RET         call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s323], amount_s323, -806116454);
[L2817]  COND FALSE  !(revert)
[L2820]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s323];
[L2821]              _balances_ERC20[this][sender_s323] := __var_14;
[L2822]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s323];
[L2823]  CALL        call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s323], amount_s323);
[L3105]              c_s534 := (a_s534 + b_s534) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3106]  COND FALSE  !(!(c_s534 >= a_s534))
[L3110]              __ret_0_ := c_s534;
[L2823]  RET         call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s323], amount_s323);
[L2824]  COND FALSE  !(revert)
[L2827]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s323];
[L2828]              _balances_ERC20[this][recipient_s323] := __var_15;
[L2829]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s323];
[L2830]              assert { :EventEmitted "Transfer_ERC20" } true;
[L2336]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s140, amount_s140);
[L2337]  COND FALSE  !(revert)
[L2348]              __ret_0_ := true;
[L419]   RET         call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L420]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !((((((((__ret_0_ == true && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowances_ERC20[this] == old(_allowances_ERC20[this])) && governance_YFV[this] == old(governance_YFV[this])) && minters_YFV[this] == old(minters_YFV[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]));
[L2]                 revert := revert_hold;
[L4875]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L4991]  RET         call CorralChoice_YFV(this);

Loop:
[L4991]  CALL        call CorralChoice_YFV(this);
[L4804]              havoc msgsender_MSG;
[L4805]              havoc msgvalue_MSG;
[L4806]              havoc choice;
[L4807]              havoc __ret_0_totalSupply;
[L4808]              havoc account_s121;
[L4809]              havoc __ret_0_balanceOf;
[L4810]              havoc recipient_s140;
[L4811]              havoc amount_s140;
[L4812]              havoc __ret_0_transfer;
[L4813]              havoc owner_s156;
[L4814]              havoc spender_s156;
[L4815]              havoc __ret_0_allowance;
[L4816]              havoc spender_s175;
[L4817]              havoc amount_s175;
[L4818]              havoc __ret_0_approve;
[L4819]              havoc sender_s211;
[L4820]              havoc recipient_s211;
[L4821]              havoc amount_s211;
[L4822]              havoc __ret_0_transferFrom;
[L4823]              havoc spender_s238;
[L4824]              havoc addedValue_s238;
[L4825]              havoc __ret_0_increaseAllowance;
[L4826]              havoc spender_s266;
[L4827]              havoc subtractedValue_s266;
[L4828]              havoc __ret_0_decreaseAllowance;
[L4829]              havoc name_s484;
[L4830]              havoc symbol_s484;
[L4831]              havoc decimals_s484;
[L4832]              havoc __ret_0_name;
[L4833]              havoc __ret_0_symbol;
[L4834]              havoc __ret_0_decimals;
[L4835]              havoc __ret_0_governance;
[L4836]              havoc arg744_s0;
[L4837]              havoc __ret_0_minters;
[L4838]              havoc account_s671;
[L4839]              havoc amount_s671;
[L4840]              havoc amount_s683;
[L4841]              havoc _governance_s701;
[L4842]              havoc _minter_s721;
[L4843]              havoc _minter_s741;
[L4844]              havoc tmpNow;
[L4845]              havoc gas;
[L4846]              assume gas > 4000000 && gas <= 8000000;
[L4847]              tmpNow := now;
[L4848]              havoc now;
[L4849]              assume now > tmpNow;
[L4850]              assume msgsender_MSG != null;
[L4851]              assume DType[msgsender_MSG] != IERC20;
[L4852]              assume DType[msgsender_MSG] != Context;
[L4853]              assume DType[msgsender_MSG] != ERC20;
[L4854]              assume DType[msgsender_MSG] != ERC20Detailed;
[L4855]              assume DType[msgsender_MSG] != SafeMath;
[L4856]              assume DType[msgsender_MSG] != YFV;
[L4857]              Alloc[msgsender_MSG] := true;
[L4858]  COND FALSE  !(choice == 18)
[L4864]  COND FALSE  !(choice == 17)
[L4870]  COND TRUE   choice == 16
[L4871]              gas := gas - 21000;
[L4872]  COND TRUE   gas >= 0
[L4873]              assume amount_s140 >= 0 && amount_s140 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4874]              assume msgvalue_MSG == 0;
[L4875]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((msgsender_MSG == recipient_s140 && amount_s140 <= _balances_ERC20[this][msgsender_MSG]) && amount_s140 >= 0) && amount_s140 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s140] >= 0) && _balances_ERC20[this][recipient_s140] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2]                 revert := revert_hold;
[L392]               havoc __exception;
[L393]               revert := false;
[L394]   COND FALSE  !(__exception)
[L419]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L2322]  COND TRUE   DType[this] == YFV
[L2323]  CALL        call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2200]              __ret_0_ := msgsender_MSG;
[L2323]  RET         call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2324]  COND FALSE  !(revert)
[L2335]  COND TRUE   DType[this] == YFV
[L2336]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s140, amount_s140);
[L2806]              __var_12 := null;
[L2807]  COND FALSE  !(!(sender_s323 != null))
[L2811]              __var_13 := null;
[L2812]  COND FALSE  !(!(recipient_s323 != null))
[L2816]  CALL        call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s323], amount_s323, -806116454);
[L3129]  COND FALSE  !(!(b_s561 <= a_s561))
[L3133]              c_s561 := (a_s561 - b_s561) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3134]              __ret_0_ := c_s561;
[L2816]  RET         call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s323], amount_s323, -806116454);
[L2817]  COND FALSE  !(revert)
[L2820]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s323];
[L2821]              _balances_ERC20[this][sender_s323] := __var_14;
[L2822]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s323];
[L2823]  CALL        call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s323], amount_s323);
[L3105]              c_s534 := (a_s534 + b_s534) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3106]  COND FALSE  !(!(c_s534 >= a_s534))
[L3110]              __ret_0_ := c_s534;
[L2823]  RET         call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s323], amount_s323);
[L2824]  COND FALSE  !(revert)
[L2827]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s323];
[L2828]              _balances_ERC20[this][recipient_s323] := __var_15;
[L2829]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s323];
[L2830]              assert { :EventEmitted "Transfer_ERC20" } true;
[L2336]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s140, amount_s140);
[L2337]  COND FALSE  !(revert)
[L2348]              __ret_0_ := true;
[L419]   RET         call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L420]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !((((((((__ret_0_ == true && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowances_ERC20[this] == old(_allowances_ERC20[this])) && governance_YFV[this] == old(governance_YFV[this])) && minters_YFV[this] == old(minters_YFV[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]));
[L2]                 revert := revert_hold;
[L4875]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L4991]  RET         call CorralChoice_YFV(this);

[2020-11-25 09:37:50,446 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 09:37:50,446 INFO  L82        PathProgramCache]: Analyzing trace with hash 375351544, now seen corresponding path program 1 times
[2020-11-25 09:37:50,447 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 09:37:50,459 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 09:37:50,550 INFO  L134       CoverageAnalysis]: Checked inductivity of 244 backedges. 5 proven. 0 refuted. 0 times theorem prover too weak. 239 trivial. 0 not checked.
[2020-11-25 09:37:50,550 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 09:37:50,550 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [6] imperfect sequences [] total 6
[2020-11-25 09:37:50,550 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 09:37:50,550 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 6 interpolants.
[2020-11-25 09:37:50,551 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=9, Invalid=21, Unknown=0, NotChecked=0, Total=30
[2020-11-25 09:37:50,551 INFO  L87              Difference]: Start difference. First operand 3260 states and 3856 transitions. cyclomatic complexity: 612 Second operand 6 states.
[2020-11-25 09:37:50,732 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 09:37:50,732 INFO  L93              Difference]: Finished difference Result 3320 states and 3921 transitions.
[2020-11-25 09:37:50,732 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 6 states. 
[2020-11-25 09:37:50,732 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 3320 states and 3921 transitions.
[2020-11-25 09:37:50,739 INFO  L131   ngComponentsAnalysis]: Automaton has 6 accepting balls. 12
[2020-11-25 09:37:50,747 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 3320 states to 3238 states and 3826 transitions.
[2020-11-25 09:37:50,747 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 725
[2020-11-25 09:37:50,747 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 725
[2020-11-25 09:37:50,747 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 3238 states and 3826 transitions.
[2020-11-25 09:37:50,749 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 09:37:50,749 INFO  L728         BuchiCegarLoop]: Abstraction has 3238 states and 3826 transitions.
[2020-11-25 09:37:50,751 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 3238 states and 3826 transitions.
[2020-11-25 09:37:50,766 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 3238 to 3238.
[2020-11-25 09:37:50,766 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 3238 states.
[2020-11-25 09:37:50,769 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 3238 states to 3238 states and 3826 transitions.
[2020-11-25 09:37:50,770 INFO  L751         BuchiCegarLoop]: Abstraction has 3238 states and 3826 transitions.
[2020-11-25 09:37:50,770 INFO  L631         BuchiCegarLoop]: Abstraction has 3238 states and 3826 transitions.
[2020-11-25 09:37:50,770 INFO  L445         BuchiCegarLoop]: ======== Iteration 17============
[2020-11-25 09:37:50,770 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 3238 states and 3826 transitions.
[2020-11-25 09:37:50,773 INFO  L131   ngComponentsAnalysis]: Automaton has 6 accepting balls. 12
[2020-11-25 09:37:50,773 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 09:37:50,773 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 09:37:50,774 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 09:37:50,774 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_ERC200 := false;
[L2]                 call_transfer_ERC200 := false;
[L2]     CALL        call main();
[L4981]              assume null == 0;
[L4982]  CALL        call this := FreshRefGenerator__success();
[L2122]              havoc newRef;
[L2123]              assume Alloc[newRef] == false;
[L2124]              Alloc[newRef] := true;
[L2125]              assume newRef != null;
[L4982]  RET         call this := FreshRefGenerator__success();
[L4983]              assume now >= 0;
[L4984]              assume DType[this] == YFV;
[L4985]              assume msgvalue_MSG == 0;
[L4986]              gas := gas - 53000;
[L4987]  CALL        call YFV_YFV(this, msgsender_MSG, msgvalue_MSG);
[L1098]              havoc __exception;
[L1099]              revert := false;
[L1100]  COND FALSE  !(__exception)
[L1125]  CALL        call YFV_YFV__success(this, msgsender_MSG, msgvalue_MSG);
[L3242]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2186]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2171]              assume msgsender_MSG != null;
[L2172]              Balance[this] := 0;
[L2186]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2187]  COND FALSE  !(revert)
[L3242]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3243]  COND FALSE  !(revert)
[L3246]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2154]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2139]              assume msgsender_MSG != null;
[L2140]              Balance[this] := 0;
[L2154]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2155]  COND FALSE  !(revert)
[L3246]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3247]  COND FALSE  !(revert)
[L3250]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2248]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2186]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2171]              assume msgsender_MSG != null;
[L2172]              Balance[this] := 0;
[L2186]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2187]  COND FALSE  !(revert)
[L2248]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2249]  COND FALSE  !(revert)
[L2252]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2154]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2139]              assume msgsender_MSG != null;
[L2140]              Balance[this] := 0;
[L2154]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2155]  COND FALSE  !(revert)
[L2252]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2253]  COND FALSE  !(revert)
[L2256]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2220]              assume msgsender_MSG != null;
[L2221]              Balance[this] := 0;
[L2222]              _balances_ERC20[this] := zeroRefintArr();
[L2223]              sum__balances0[this] := 0;
[L2224]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2225]              sum__allowances1[this] := 0;
[L2226]              _totalSupply_ERC20[this] := 0;
[L2256]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2257]  COND FALSE  !(revert)
[L3250]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3251]  COND FALSE  !(revert)
[L3254]  CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -868984158, 934069305, 18);
[L3012]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2154]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2139]              assume msgsender_MSG != null;
[L2140]              Balance[this] := 0;
[L2154]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2155]  COND FALSE  !(revert)
[L3012]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3013]  COND FALSE  !(revert)
[L3016]  CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s484, symbol_s484, decimals_s484);
[L2987]              assume msgsender_MSG != null;
[L2988]              Balance[this] := 0;
[L2989]              _name_ERC20Detailed[this] := 1252836592;
[L2990]              _symbol_ERC20Detailed[this] := 1252836592;
[L2991]              _decimals_ERC20Detailed[this] := 0;
[L2993]              _name_ERC20Detailed[this] := name_s484;
[L2994]              _symbol_ERC20Detailed[this] := symbol_s484;
[L2995]              _decimals_ERC20Detailed[this] := decimals_s484;
[L3016]  RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s484, symbol_s484, decimals_s484);
[L3017]  COND FALSE  !(revert)
[L3254]  RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -868984158, 934069305, 18);
[L3255]  COND FALSE  !(revert)
[L3258]  CALL        call YFV_YFV_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3208]              assume msgsender_MSG != null;
[L3209]              Balance[this] := 0;
[L3210]              governance_YFV[this] := null;
[L3211]              minters_YFV[this] := zeroRefboolArr();
[L3213]              governance_YFV[this] := msgsender_MSG;
[L3258]  RET         call YFV_YFV_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3259]  COND FALSE  !(revert)
[L1125]  RET         call YFV_YFV__success(this, msgsender_MSG, msgvalue_MSG);
[L1126]              assume !revert && gas >= 0;
[L4987]  RET         call YFV_YFV(this, msgsender_MSG, msgvalue_MSG);
[L4988]              assume !revert && gas >= 0;
[L4991]  CALL        call CorralChoice_YFV(this);
[L4804]              havoc msgsender_MSG;
[L4805]              havoc msgvalue_MSG;
[L4806]              havoc choice;
[L4807]              havoc __ret_0_totalSupply;
[L4808]              havoc account_s121;
[L4809]              havoc __ret_0_balanceOf;
[L4810]              havoc recipient_s140;
[L4811]              havoc amount_s140;
[L4812]              havoc __ret_0_transfer;
[L4813]              havoc owner_s156;
[L4814]              havoc spender_s156;
[L4815]              havoc __ret_0_allowance;
[L4816]              havoc spender_s175;
[L4817]              havoc amount_s175;
[L4818]              havoc __ret_0_approve;
[L4819]              havoc sender_s211;
[L4820]              havoc recipient_s211;
[L4821]              havoc amount_s211;
[L4822]              havoc __ret_0_transferFrom;
[L4823]              havoc spender_s238;
[L4824]              havoc addedValue_s238;
[L4825]              havoc __ret_0_increaseAllowance;
[L4826]              havoc spender_s266;
[L4827]              havoc subtractedValue_s266;
[L4828]              havoc __ret_0_decreaseAllowance;
[L4829]              havoc name_s484;
[L4830]              havoc symbol_s484;
[L4831]              havoc decimals_s484;
[L4832]              havoc __ret_0_name;
[L4833]              havoc __ret_0_symbol;
[L4834]              havoc __ret_0_decimals;
[L4835]              havoc __ret_0_governance;
[L4836]              havoc arg744_s0;
[L4837]              havoc __ret_0_minters;
[L4838]              havoc account_s671;
[L4839]              havoc amount_s671;
[L4840]              havoc amount_s683;
[L4841]              havoc _governance_s701;
[L4842]              havoc _minter_s721;
[L4843]              havoc _minter_s741;
[L4844]              havoc tmpNow;
[L4845]              havoc gas;
[L4846]              assume gas > 4000000 && gas <= 8000000;
[L4847]              tmpNow := now;
[L4848]              havoc now;
[L4849]              assume now > tmpNow;
[L4850]              assume msgsender_MSG != null;
[L4851]              assume DType[msgsender_MSG] != IERC20;
[L4852]              assume DType[msgsender_MSG] != Context;
[L4853]              assume DType[msgsender_MSG] != ERC20;
[L4854]              assume DType[msgsender_MSG] != ERC20Detailed;
[L4855]              assume DType[msgsender_MSG] != SafeMath;
[L4856]              assume DType[msgsender_MSG] != YFV;
[L4857]              Alloc[msgsender_MSG] := true;
[L4858]  COND FALSE  !(choice == 18)
[L4864]  COND FALSE  !(choice == 17)
[L4870]  COND FALSE  !(choice == 16)
[L4877]  COND FALSE  !(choice == 15)
[L4883]  COND FALSE  !(choice == 14)
[L4890]  COND FALSE  !(choice == 13)
[L4897]  COND FALSE  !(choice == 12)
[L4904]  COND FALSE  !(choice == 11)
[L4911]  COND FALSE  !(choice == 10)
[L4917]  COND FALSE  !(choice == 9)
[L4923]  COND FALSE  !(choice == 8)
[L4929]  COND FALSE  !(choice == 7)
[L4935]  COND FALSE  !(choice == 6)
[L4941]  COND FALSE  !(choice == 5)
[L4948]  COND TRUE   choice == 4
[L4949]              gas := gas - 21000;
[L4950]  COND TRUE   gas >= 0
[L4951]              assume amount_s683 >= 0 && amount_s683 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4952]              assume msgvalue_MSG == 0;
[L4953]  CALL        call burn~uint256_YFV(this, msgsender_MSG, msgvalue_MSG, amount_s683);
[L1220]              havoc __exception;
[L1221]              revert := false;
[L1222]  COND FALSE  !(__exception)
[L1247]  CALL        call burn~uint256_YFV__success(this, msgsender_MSG, msgvalue_MSG, amount_s683);
[L3310]  COND TRUE   DType[this] == YFV
[L3311]  CALL        call _burn~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, amount_s683);
[L2911]              __var_19 := null;
[L2912]  COND FALSE  !(!(account_s411 != null))
[L2916]  CALL        call __var_20 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s411], amount_s411, 392639254);
[L3129]  COND FALSE  !(!(b_s561 <= a_s561))
[L3133]              c_s561 := (a_s561 - b_s561) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3134]              __ret_0_ := c_s561;
[L2916]  RET         call __var_20 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s411], amount_s411, 392639254);
[L2917]  COND FALSE  !(revert)
[L2920]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s411];
[L2921]              _balances_ERC20[this][account_s411] := __var_20;
[L2922]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s411];
[L2923]  CALL        call __var_21 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s411, 1252836592);
[L3129]  COND FALSE  !(!(b_s561 <= a_s561))
[L3133]              c_s561 := (a_s561 - b_s561) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3134]              __ret_0_ := c_s561;
[L2923]  RET         call __var_21 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s411, 1252836592);
[L2924]  COND FALSE  !(revert)
[L2927]              _totalSupply_ERC20[this] := __var_21;
[L2928]              assert { :EventEmitted "Transfer_ERC20" } true;
[L3311]  RET         call _burn~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, amount_s683);
[L3312]  COND FALSE  !(revert)
[L1247]  RET         call burn~uint256_YFV__success(this, msgsender_MSG, msgvalue_MSG, amount_s683);
[L1248]              assume !revert && gas >= 0;
[L4953]  RET         call burn~uint256_YFV(this, msgsender_MSG, msgvalue_MSG, amount_s683);
[L4991]  RET         call CorralChoice_YFV(this);
[L4991]  CALL        call CorralChoice_YFV(this);
[L4804]              havoc msgsender_MSG;
[L4805]              havoc msgvalue_MSG;
[L4806]              havoc choice;
[L4807]              havoc __ret_0_totalSupply;
[L4808]              havoc account_s121;
[L4809]              havoc __ret_0_balanceOf;
[L4810]              havoc recipient_s140;
[L4811]              havoc amount_s140;
[L4812]              havoc __ret_0_transfer;
[L4813]              havoc owner_s156;
[L4814]              havoc spender_s156;
[L4815]              havoc __ret_0_allowance;
[L4816]              havoc spender_s175;
[L4817]              havoc amount_s175;
[L4818]              havoc __ret_0_approve;
[L4819]              havoc sender_s211;
[L4820]              havoc recipient_s211;
[L4821]              havoc amount_s211;
[L4822]              havoc __ret_0_transferFrom;
[L4823]              havoc spender_s238;
[L4824]              havoc addedValue_s238;
[L4825]              havoc __ret_0_increaseAllowance;
[L4826]              havoc spender_s266;
[L4827]              havoc subtractedValue_s266;
[L4828]              havoc __ret_0_decreaseAllowance;
[L4829]              havoc name_s484;
[L4830]              havoc symbol_s484;
[L4831]              havoc decimals_s484;
[L4832]              havoc __ret_0_name;
[L4833]              havoc __ret_0_symbol;
[L4834]              havoc __ret_0_decimals;
[L4835]              havoc __ret_0_governance;
[L4836]              havoc arg744_s0;
[L4837]              havoc __ret_0_minters;
[L4838]              havoc account_s671;
[L4839]              havoc amount_s671;
[L4840]              havoc amount_s683;
[L4841]              havoc _governance_s701;
[L4842]              havoc _minter_s721;
[L4843]              havoc _minter_s741;
[L4844]              havoc tmpNow;
[L4845]              havoc gas;
[L4846]              assume gas > 4000000 && gas <= 8000000;
[L4847]              tmpNow := now;
[L4848]              havoc now;
[L4849]              assume now > tmpNow;
[L4850]              assume msgsender_MSG != null;
[L4851]              assume DType[msgsender_MSG] != IERC20;
[L4852]              assume DType[msgsender_MSG] != Context;
[L4853]              assume DType[msgsender_MSG] != ERC20;
[L4854]              assume DType[msgsender_MSG] != ERC20Detailed;
[L4855]              assume DType[msgsender_MSG] != SafeMath;
[L4856]              assume DType[msgsender_MSG] != YFV;
[L4857]              Alloc[msgsender_MSG] := true;
[L4858]  COND FALSE  !(choice == 18)
[L4864]  COND FALSE  !(choice == 17)
[L4870]  COND TRUE   choice == 16
[L4871]              gas := gas - 21000;
[L4872]  COND TRUE   gas >= 0
[L4873]              assume amount_s140 >= 0 && amount_s140 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4874]              assume msgvalue_MSG == 0;
[L4875]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((msgsender_MSG == recipient_s140 && amount_s140 <= _balances_ERC20[this][msgsender_MSG]) && amount_s140 >= 0) && amount_s140 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s140] >= 0) && _balances_ERC20[this][recipient_s140] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2]                 revert := revert_hold;
[L392]               havoc __exception;
[L393]               revert := false;
[L394]   COND FALSE  !(__exception)
[L419]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L2322]  COND TRUE   DType[this] == YFV
[L2323]  CALL        call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2200]              __ret_0_ := msgsender_MSG;
[L2323]  RET         call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2324]  COND FALSE  !(revert)
[L2335]  COND TRUE   DType[this] == YFV
[L2336]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s140, amount_s140);
[L2806]              __var_12 := null;
[L2807]  COND FALSE  !(!(sender_s323 != null))
[L2811]              __var_13 := null;
[L2812]  COND FALSE  !(!(recipient_s323 != null))
[L2816]  CALL        call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s323], amount_s323, -806116454);
[L3129]  COND FALSE  !(!(b_s561 <= a_s561))
[L3133]              c_s561 := (a_s561 - b_s561) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3134]              __ret_0_ := c_s561;
[L2816]  RET         call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s323], amount_s323, -806116454);
[L2817]  COND FALSE  !(revert)
[L2820]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s323];
[L2821]              _balances_ERC20[this][sender_s323] := __var_14;
[L2822]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s323];
[L2823]  CALL        call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s323], amount_s323);
[L3105]              c_s534 := (a_s534 + b_s534) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3106]  COND FALSE  !(!(c_s534 >= a_s534))
[L3110]              __ret_0_ := c_s534;
[L2823]  RET         call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s323], amount_s323);
[L2824]  COND FALSE  !(revert)
[L2827]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s323];
[L2828]              _balances_ERC20[this][recipient_s323] := __var_15;
[L2829]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s323];
[L2830]              assert { :EventEmitted "Transfer_ERC20" } true;
[L2336]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s140, amount_s140);
[L2337]  COND FALSE  !(revert)
[L2348]              __ret_0_ := true;
[L419]   RET         call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L420]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !((((((((__ret_0_ == true && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowances_ERC20[this] == old(_allowances_ERC20[this])) && governance_YFV[this] == old(governance_YFV[this])) && minters_YFV[this] == old(minters_YFV[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]));
[L2]                 revert := revert_hold;
[L4875]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L4991]  RET         call CorralChoice_YFV(this);
[L4991]  CALL        call CorralChoice_YFV(this);
[L4804]              havoc msgsender_MSG;
[L4805]              havoc msgvalue_MSG;
[L4806]              havoc choice;
[L4807]              havoc __ret_0_totalSupply;
[L4808]              havoc account_s121;
[L4809]              havoc __ret_0_balanceOf;
[L4810]              havoc recipient_s140;
[L4811]              havoc amount_s140;
[L4812]              havoc __ret_0_transfer;
[L4813]              havoc owner_s156;
[L4814]              havoc spender_s156;
[L4815]              havoc __ret_0_allowance;
[L4816]              havoc spender_s175;
[L4817]              havoc amount_s175;
[L4818]              havoc __ret_0_approve;
[L4819]              havoc sender_s211;
[L4820]              havoc recipient_s211;
[L4821]              havoc amount_s211;
[L4822]              havoc __ret_0_transferFrom;
[L4823]              havoc spender_s238;
[L4824]              havoc addedValue_s238;
[L4825]              havoc __ret_0_increaseAllowance;
[L4826]              havoc spender_s266;
[L4827]              havoc subtractedValue_s266;
[L4828]              havoc __ret_0_decreaseAllowance;
[L4829]              havoc name_s484;
[L4830]              havoc symbol_s484;
[L4831]              havoc decimals_s484;
[L4832]              havoc __ret_0_name;
[L4833]              havoc __ret_0_symbol;
[L4834]              havoc __ret_0_decimals;
[L4835]              havoc __ret_0_governance;
[L4836]              havoc arg744_s0;
[L4837]              havoc __ret_0_minters;
[L4838]              havoc account_s671;
[L4839]              havoc amount_s671;
[L4840]              havoc amount_s683;
[L4841]              havoc _governance_s701;
[L4842]              havoc _minter_s721;
[L4843]              havoc _minter_s741;
[L4844]              havoc tmpNow;
[L4845]              havoc gas;
[L4846]              assume gas > 4000000 && gas <= 8000000;
[L4847]              tmpNow := now;
[L4848]              havoc now;
[L4849]              assume now > tmpNow;
[L4850]              assume msgsender_MSG != null;
[L4851]              assume DType[msgsender_MSG] != IERC20;
[L4852]              assume DType[msgsender_MSG] != Context;
[L4853]              assume DType[msgsender_MSG] != ERC20;
[L4854]              assume DType[msgsender_MSG] != ERC20Detailed;
[L4855]              assume DType[msgsender_MSG] != SafeMath;
[L4856]              assume DType[msgsender_MSG] != YFV;
[L4857]              Alloc[msgsender_MSG] := true;
[L4858]  COND FALSE  !(choice == 18)
[L4864]  COND FALSE  !(choice == 17)
[L4870]  COND TRUE   choice == 16
[L4871]              gas := gas - 21000;
[L4872]  COND TRUE   gas >= 0
[L4873]              assume amount_s140 >= 0 && amount_s140 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4874]              assume msgvalue_MSG == 0;
[L4875]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == recipient_s140 && amount_s140 <= _balances_ERC20[this][msgsender_MSG]) && amount_s140 >= 0) && amount_s140 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s140] >= 0) && _balances_ERC20[this][recipient_s140] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC200 := true;
[L2]                 call_transfer_ERC200 := false;
[L2]                 revert := revert_hold;
[L392]               havoc __exception;
[L393]               revert := false;
[L394]   COND FALSE  !(__exception)
[L419]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L2322]  COND TRUE   DType[this] == YFV
[L2323]  CALL        call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2200]              __ret_0_ := msgsender_MSG;
[L2323]  RET         call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2324]  COND FALSE  !(revert)
[L2335]  COND TRUE   DType[this] == YFV
[L2336]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s140, amount_s140);
[L2806]              __var_12 := null;
[L2807]  COND FALSE  !(!(sender_s323 != null))
[L2811]              __var_13 := null;
[L2812]  COND FALSE  !(!(recipient_s323 != null))
[L2816]  CALL        call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s323], amount_s323, -806116454);
[L3129]  COND FALSE  !(!(b_s561 <= a_s561))
[L3133]              c_s561 := (a_s561 - b_s561) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3134]              __ret_0_ := c_s561;
[L2816]  RET         call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s323], amount_s323, -806116454);
[L2817]  COND FALSE  !(revert)
[L2820]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s323];
[L2821]              _balances_ERC20[this][sender_s323] := __var_14;
[L2822]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s323];
[L2823]  CALL        call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s323], amount_s323);
[L3105]              c_s534 := (a_s534 + b_s534) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3106]  COND FALSE  !(!(c_s534 >= a_s534))
[L3110]              __ret_0_ := c_s534;
[L2823]  RET         call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s323], amount_s323);
[L2824]  COND FALSE  !(revert)
[L2827]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s323];
[L2828]              _balances_ERC20[this][recipient_s323] := __var_15;
[L2829]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s323];
[L2830]              assert { :EventEmitted "Transfer_ERC20" } true;
[L2336]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s140, amount_s140);
[L2337]  COND FALSE  !(revert)
[L2348]              __ret_0_ := true;
[L419]   RET         call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L420]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !((((((((__ret_0_ == true && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowances_ERC20[this] == old(_allowances_ERC20[this])) && governance_YFV[this] == old(governance_YFV[this])) && minters_YFV[this] == old(minters_YFV[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]));
[L2]                 revert := revert_hold;
[L4875]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L4991]  RET         call CorralChoice_YFV(this);

Loop:
[L4991]  CALL        call CorralChoice_YFV(this);
[L4804]              havoc msgsender_MSG;
[L4805]              havoc msgvalue_MSG;
[L4806]              havoc choice;
[L4807]              havoc __ret_0_totalSupply;
[L4808]              havoc account_s121;
[L4809]              havoc __ret_0_balanceOf;
[L4810]              havoc recipient_s140;
[L4811]              havoc amount_s140;
[L4812]              havoc __ret_0_transfer;
[L4813]              havoc owner_s156;
[L4814]              havoc spender_s156;
[L4815]              havoc __ret_0_allowance;
[L4816]              havoc spender_s175;
[L4817]              havoc amount_s175;
[L4818]              havoc __ret_0_approve;
[L4819]              havoc sender_s211;
[L4820]              havoc recipient_s211;
[L4821]              havoc amount_s211;
[L4822]              havoc __ret_0_transferFrom;
[L4823]              havoc spender_s238;
[L4824]              havoc addedValue_s238;
[L4825]              havoc __ret_0_increaseAllowance;
[L4826]              havoc spender_s266;
[L4827]              havoc subtractedValue_s266;
[L4828]              havoc __ret_0_decreaseAllowance;
[L4829]              havoc name_s484;
[L4830]              havoc symbol_s484;
[L4831]              havoc decimals_s484;
[L4832]              havoc __ret_0_name;
[L4833]              havoc __ret_0_symbol;
[L4834]              havoc __ret_0_decimals;
[L4835]              havoc __ret_0_governance;
[L4836]              havoc arg744_s0;
[L4837]              havoc __ret_0_minters;
[L4838]              havoc account_s671;
[L4839]              havoc amount_s671;
[L4840]              havoc amount_s683;
[L4841]              havoc _governance_s701;
[L4842]              havoc _minter_s721;
[L4843]              havoc _minter_s741;
[L4844]              havoc tmpNow;
[L4845]              havoc gas;
[L4846]              assume gas > 4000000 && gas <= 8000000;
[L4847]              tmpNow := now;
[L4848]              havoc now;
[L4849]              assume now > tmpNow;
[L4850]              assume msgsender_MSG != null;
[L4851]              assume DType[msgsender_MSG] != IERC20;
[L4852]              assume DType[msgsender_MSG] != Context;
[L4853]              assume DType[msgsender_MSG] != ERC20;
[L4854]              assume DType[msgsender_MSG] != ERC20Detailed;
[L4855]              assume DType[msgsender_MSG] != SafeMath;
[L4856]              assume DType[msgsender_MSG] != YFV;
[L4857]              Alloc[msgsender_MSG] := true;
[L4858]  COND FALSE  !(choice == 18)
[L4864]  COND FALSE  !(choice == 17)
[L4870]  COND TRUE   choice == 16
[L4871]              gas := gas - 21000;
[L4872]  COND TRUE   gas >= 0
[L4873]              assume amount_s140 >= 0 && amount_s140 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4874]              assume msgvalue_MSG == 0;
[L4875]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == recipient_s140 && amount_s140 <= _balances_ERC20[this][msgsender_MSG]) && amount_s140 >= 0) && amount_s140 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s140] >= 0) && _balances_ERC20[this][recipient_s140] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC200 := true;
[L2]                 call_transfer_ERC200 := false;
[L2]                 revert := revert_hold;
[L392]               havoc __exception;
[L393]               revert := false;
[L394]   COND FALSE  !(__exception)
[L419]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L2322]  COND TRUE   DType[this] == YFV
[L2323]  CALL        call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2200]              __ret_0_ := msgsender_MSG;
[L2323]  RET         call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2324]  COND FALSE  !(revert)
[L2335]  COND TRUE   DType[this] == YFV
[L2336]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s140, amount_s140);
[L2806]              __var_12 := null;
[L2807]  COND FALSE  !(!(sender_s323 != null))
[L2811]              __var_13 := null;
[L2812]  COND FALSE  !(!(recipient_s323 != null))
[L2816]  CALL        call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s323], amount_s323, -806116454);
[L3129]  COND FALSE  !(!(b_s561 <= a_s561))
[L3133]              c_s561 := (a_s561 - b_s561) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3134]              __ret_0_ := c_s561;
[L2816]  RET         call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s323], amount_s323, -806116454);
[L2817]  COND FALSE  !(revert)
[L2820]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s323];
[L2821]              _balances_ERC20[this][sender_s323] := __var_14;
[L2822]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s323];
[L2823]  CALL        call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s323], amount_s323);
[L3105]              c_s534 := (a_s534 + b_s534) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3106]  COND FALSE  !(!(c_s534 >= a_s534))
[L3110]              __ret_0_ := c_s534;
[L2823]  RET         call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s323], amount_s323);
[L2824]  COND FALSE  !(revert)
[L2827]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s323];
[L2828]              _balances_ERC20[this][recipient_s323] := __var_15;
[L2829]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s323];
[L2830]              assert { :EventEmitted "Transfer_ERC20" } true;
[L2336]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s140, amount_s140);
[L2337]  COND FALSE  !(revert)
[L2348]              __ret_0_ := true;
[L419]   RET         call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L420]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !((((((((__ret_0_ == true && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowances_ERC20[this] == old(_allowances_ERC20[this])) && governance_YFV[this] == old(governance_YFV[this])) && minters_YFV[this] == old(minters_YFV[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]));
[L2]                 revert := revert_hold;
[L4875]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L4991]  RET         call CorralChoice_YFV(this);

[2020-11-25 09:37:50,778 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 09:37:50,778 INFO  L82        PathProgramCache]: Analyzing trace with hash 1444526061, now seen corresponding path program 1 times
[2020-11-25 09:37:50,778 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 09:37:50,811 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 09:37:52,416 INFO  L134       CoverageAnalysis]: Checked inductivity of 244 backedges. 8 proven. 134 refuted. 0 times theorem prover too weak. 102 trivial. 0 not checked.
[2020-11-25 09:37:52,416 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 09:37:52,416 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [58] total 58
[2020-11-25 09:37:52,416 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 09:37:52,417 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 59 interpolants.
[2020-11-25 09:37:52,417 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=195, Invalid=3227, Unknown=0, NotChecked=0, Total=3422
[2020-11-25 09:37:52,417 INFO  L87              Difference]: Start difference. First operand 3238 states and 3826 transitions. cyclomatic complexity: 604 Second operand 59 states.
[2020-11-25 09:37:55,260 WARN  L188               SmtUtils]: Spent 155.00 ms on a formula simplification. DAG size of input: 101 DAG size of output: 94
[2020-11-25 09:38:01,402 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 09:38:01,402 INFO  L93              Difference]: Finished difference Result 3274 states and 3937 transitions.
[2020-11-25 09:38:01,402 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 45 states. 
[2020-11-25 09:38:01,402 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 3274 states and 3937 transitions.
[2020-11-25 09:38:01,410 INFO  L131   ngComponentsAnalysis]: Automaton has 10 accepting balls. 20
[2020-11-25 09:38:01,418 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 3274 states to 3274 states and 3934 transitions.
[2020-11-25 09:38:01,418 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 743
[2020-11-25 09:38:01,419 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 743
[2020-11-25 09:38:01,419 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 3274 states and 3934 transitions.
[2020-11-25 09:38:01,421 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 09:38:01,421 INFO  L728         BuchiCegarLoop]: Abstraction has 3274 states and 3934 transitions.
[2020-11-25 09:38:01,423 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 3274 states and 3934 transitions.
[2020-11-25 09:38:01,439 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 3274 to 3246.
[2020-11-25 09:38:01,440 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 3246 states.
[2020-11-25 09:38:01,444 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 3246 states to 3246 states and 3848 transitions.
[2020-11-25 09:38:01,444 INFO  L751         BuchiCegarLoop]: Abstraction has 3246 states and 3848 transitions.
[2020-11-25 09:38:01,444 INFO  L631         BuchiCegarLoop]: Abstraction has 3246 states and 3848 transitions.
[2020-11-25 09:38:01,444 INFO  L445         BuchiCegarLoop]: ======== Iteration 18============
[2020-11-25 09:38:01,444 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 3246 states and 3848 transitions.
[2020-11-25 09:38:01,447 INFO  L131   ngComponentsAnalysis]: Automaton has 8 accepting balls. 16
[2020-11-25 09:38:01,447 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 09:38:01,447 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 09:38:01,448 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 09:38:01,448 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_ERC200 := false;
[L2]                 call_transfer_ERC200 := false;
[L2]     CALL        call main();
[L4981]              assume null == 0;
[L4982]  CALL        call this := FreshRefGenerator__success();
[L2122]              havoc newRef;
[L2123]              assume Alloc[newRef] == false;
[L2124]              Alloc[newRef] := true;
[L2125]              assume newRef != null;
[L4982]  RET         call this := FreshRefGenerator__success();
[L4983]              assume now >= 0;
[L4984]              assume DType[this] == YFV;
[L4985]              assume msgvalue_MSG == 0;
[L4986]              gas := gas - 53000;
[L4987]  CALL        call YFV_YFV(this, msgsender_MSG, msgvalue_MSG);
[L1098]              havoc __exception;
[L1099]              revert := false;
[L1100]  COND FALSE  !(__exception)
[L1125]  CALL        call YFV_YFV__success(this, msgsender_MSG, msgvalue_MSG);
[L3242]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2186]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2171]              assume msgsender_MSG != null;
[L2172]              Balance[this] := 0;
[L2186]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2187]  COND FALSE  !(revert)
[L3242]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3243]  COND FALSE  !(revert)
[L3246]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2154]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2139]              assume msgsender_MSG != null;
[L2140]              Balance[this] := 0;
[L2154]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2155]  COND FALSE  !(revert)
[L3246]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3247]  COND FALSE  !(revert)
[L3250]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2248]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2186]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2171]              assume msgsender_MSG != null;
[L2172]              Balance[this] := 0;
[L2186]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2187]  COND FALSE  !(revert)
[L2248]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2249]  COND FALSE  !(revert)
[L2252]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2154]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2139]              assume msgsender_MSG != null;
[L2140]              Balance[this] := 0;
[L2154]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2155]  COND FALSE  !(revert)
[L2252]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2253]  COND FALSE  !(revert)
[L2256]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2220]              assume msgsender_MSG != null;
[L2221]              Balance[this] := 0;
[L2222]              _balances_ERC20[this] := zeroRefintArr();
[L2223]              sum__balances0[this] := 0;
[L2224]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2225]              sum__allowances1[this] := 0;
[L2226]              _totalSupply_ERC20[this] := 0;
[L2256]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2257]  COND FALSE  !(revert)
[L3250]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3251]  COND FALSE  !(revert)
[L3254]  CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -868984158, 934069305, 18);
[L3012]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2154]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2139]              assume msgsender_MSG != null;
[L2140]              Balance[this] := 0;
[L2154]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2155]  COND FALSE  !(revert)
[L3012]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3013]  COND FALSE  !(revert)
[L3016]  CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s484, symbol_s484, decimals_s484);
[L2987]              assume msgsender_MSG != null;
[L2988]              Balance[this] := 0;
[L2989]              _name_ERC20Detailed[this] := 1252836592;
[L2990]              _symbol_ERC20Detailed[this] := 1252836592;
[L2991]              _decimals_ERC20Detailed[this] := 0;
[L2993]              _name_ERC20Detailed[this] := name_s484;
[L2994]              _symbol_ERC20Detailed[this] := symbol_s484;
[L2995]              _decimals_ERC20Detailed[this] := decimals_s484;
[L3016]  RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s484, symbol_s484, decimals_s484);
[L3017]  COND FALSE  !(revert)
[L3254]  RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -868984158, 934069305, 18);
[L3255]  COND FALSE  !(revert)
[L3258]  CALL        call YFV_YFV_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3208]              assume msgsender_MSG != null;
[L3209]              Balance[this] := 0;
[L3210]              governance_YFV[this] := null;
[L3211]              minters_YFV[this] := zeroRefboolArr();
[L3213]              governance_YFV[this] := msgsender_MSG;
[L3258]  RET         call YFV_YFV_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3259]  COND FALSE  !(revert)
[L1125]  RET         call YFV_YFV__success(this, msgsender_MSG, msgvalue_MSG);
[L1126]              assume !revert && gas >= 0;
[L4987]  RET         call YFV_YFV(this, msgsender_MSG, msgvalue_MSG);
[L4988]              assume !revert && gas >= 0;
[L4991]  CALL        call CorralChoice_YFV(this);
[L4804]              havoc msgsender_MSG;
[L4805]              havoc msgvalue_MSG;
[L4806]              havoc choice;
[L4807]              havoc __ret_0_totalSupply;
[L4808]              havoc account_s121;
[L4809]              havoc __ret_0_balanceOf;
[L4810]              havoc recipient_s140;
[L4811]              havoc amount_s140;
[L4812]              havoc __ret_0_transfer;
[L4813]              havoc owner_s156;
[L4814]              havoc spender_s156;
[L4815]              havoc __ret_0_allowance;
[L4816]              havoc spender_s175;
[L4817]              havoc amount_s175;
[L4818]              havoc __ret_0_approve;
[L4819]              havoc sender_s211;
[L4820]              havoc recipient_s211;
[L4821]              havoc amount_s211;
[L4822]              havoc __ret_0_transferFrom;
[L4823]              havoc spender_s238;
[L4824]              havoc addedValue_s238;
[L4825]              havoc __ret_0_increaseAllowance;
[L4826]              havoc spender_s266;
[L4827]              havoc subtractedValue_s266;
[L4828]              havoc __ret_0_decreaseAllowance;
[L4829]              havoc name_s484;
[L4830]              havoc symbol_s484;
[L4831]              havoc decimals_s484;
[L4832]              havoc __ret_0_name;
[L4833]              havoc __ret_0_symbol;
[L4834]              havoc __ret_0_decimals;
[L4835]              havoc __ret_0_governance;
[L4836]              havoc arg744_s0;
[L4837]              havoc __ret_0_minters;
[L4838]              havoc account_s671;
[L4839]              havoc amount_s671;
[L4840]              havoc amount_s683;
[L4841]              havoc _governance_s701;
[L4842]              havoc _minter_s721;
[L4843]              havoc _minter_s741;
[L4844]              havoc tmpNow;
[L4845]              havoc gas;
[L4846]              assume gas > 4000000 && gas <= 8000000;
[L4847]              tmpNow := now;
[L4848]              havoc now;
[L4849]              assume now > tmpNow;
[L4850]              assume msgsender_MSG != null;
[L4851]              assume DType[msgsender_MSG] != IERC20;
[L4852]              assume DType[msgsender_MSG] != Context;
[L4853]              assume DType[msgsender_MSG] != ERC20;
[L4854]              assume DType[msgsender_MSG] != ERC20Detailed;
[L4855]              assume DType[msgsender_MSG] != SafeMath;
[L4856]              assume DType[msgsender_MSG] != YFV;
[L4857]              Alloc[msgsender_MSG] := true;
[L4858]  COND FALSE  !(choice == 18)
[L4864]  COND FALSE  !(choice == 17)
[L4870]  COND FALSE  !(choice == 16)
[L4877]  COND FALSE  !(choice == 15)
[L4883]  COND FALSE  !(choice == 14)
[L4890]  COND FALSE  !(choice == 13)
[L4897]  COND FALSE  !(choice == 12)
[L4904]  COND FALSE  !(choice == 11)
[L4911]  COND FALSE  !(choice == 10)
[L4917]  COND FALSE  !(choice == 9)
[L4923]  COND FALSE  !(choice == 8)
[L4929]  COND FALSE  !(choice == 7)
[L4935]  COND FALSE  !(choice == 6)
[L4941]  COND FALSE  !(choice == 5)
[L4948]  COND TRUE   choice == 4
[L4949]              gas := gas - 21000;
[L4950]  COND TRUE   gas >= 0
[L4951]              assume amount_s683 >= 0 && amount_s683 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4952]              assume msgvalue_MSG == 0;
[L4953]  CALL        call burn~uint256_YFV(this, msgsender_MSG, msgvalue_MSG, amount_s683);
[L1220]              havoc __exception;
[L1221]              revert := false;
[L1222]  COND FALSE  !(__exception)
[L1247]  CALL        call burn~uint256_YFV__success(this, msgsender_MSG, msgvalue_MSG, amount_s683);
[L3310]  COND TRUE   DType[this] == YFV
[L3311]  CALL        call _burn~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, amount_s683);
[L2911]              __var_19 := null;
[L2912]  COND FALSE  !(!(account_s411 != null))
[L2916]  CALL        call __var_20 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s411], amount_s411, 392639254);
[L3129]  COND FALSE  !(!(b_s561 <= a_s561))
[L3133]              c_s561 := (a_s561 - b_s561) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3134]              __ret_0_ := c_s561;
[L2916]  RET         call __var_20 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s411], amount_s411, 392639254);
[L2917]  COND FALSE  !(revert)
[L2920]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s411];
[L2921]              _balances_ERC20[this][account_s411] := __var_20;
[L2922]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s411];
[L2923]  CALL        call __var_21 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s411, 1252836592);
[L3129]  COND FALSE  !(!(b_s561 <= a_s561))
[L3133]              c_s561 := (a_s561 - b_s561) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3134]              __ret_0_ := c_s561;
[L2923]  RET         call __var_21 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s411, 1252836592);
[L2924]  COND FALSE  !(revert)
[L2927]              _totalSupply_ERC20[this] := __var_21;
[L2928]              assert { :EventEmitted "Transfer_ERC20" } true;
[L3311]  RET         call _burn~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, amount_s683);
[L3312]  COND FALSE  !(revert)
[L1247]  RET         call burn~uint256_YFV__success(this, msgsender_MSG, msgvalue_MSG, amount_s683);
[L1248]              assume !revert && gas >= 0;
[L4953]  RET         call burn~uint256_YFV(this, msgsender_MSG, msgvalue_MSG, amount_s683);
[L4991]  RET         call CorralChoice_YFV(this);
[L4991]  CALL        call CorralChoice_YFV(this);
[L4804]              havoc msgsender_MSG;
[L4805]              havoc msgvalue_MSG;
[L4806]              havoc choice;
[L4807]              havoc __ret_0_totalSupply;
[L4808]              havoc account_s121;
[L4809]              havoc __ret_0_balanceOf;
[L4810]              havoc recipient_s140;
[L4811]              havoc amount_s140;
[L4812]              havoc __ret_0_transfer;
[L4813]              havoc owner_s156;
[L4814]              havoc spender_s156;
[L4815]              havoc __ret_0_allowance;
[L4816]              havoc spender_s175;
[L4817]              havoc amount_s175;
[L4818]              havoc __ret_0_approve;
[L4819]              havoc sender_s211;
[L4820]              havoc recipient_s211;
[L4821]              havoc amount_s211;
[L4822]              havoc __ret_0_transferFrom;
[L4823]              havoc spender_s238;
[L4824]              havoc addedValue_s238;
[L4825]              havoc __ret_0_increaseAllowance;
[L4826]              havoc spender_s266;
[L4827]              havoc subtractedValue_s266;
[L4828]              havoc __ret_0_decreaseAllowance;
[L4829]              havoc name_s484;
[L4830]              havoc symbol_s484;
[L4831]              havoc decimals_s484;
[L4832]              havoc __ret_0_name;
[L4833]              havoc __ret_0_symbol;
[L4834]              havoc __ret_0_decimals;
[L4835]              havoc __ret_0_governance;
[L4836]              havoc arg744_s0;
[L4837]              havoc __ret_0_minters;
[L4838]              havoc account_s671;
[L4839]              havoc amount_s671;
[L4840]              havoc amount_s683;
[L4841]              havoc _governance_s701;
[L4842]              havoc _minter_s721;
[L4843]              havoc _minter_s741;
[L4844]              havoc tmpNow;
[L4845]              havoc gas;
[L4846]              assume gas > 4000000 && gas <= 8000000;
[L4847]              tmpNow := now;
[L4848]              havoc now;
[L4849]              assume now > tmpNow;
[L4850]              assume msgsender_MSG != null;
[L4851]              assume DType[msgsender_MSG] != IERC20;
[L4852]              assume DType[msgsender_MSG] != Context;
[L4853]              assume DType[msgsender_MSG] != ERC20;
[L4854]              assume DType[msgsender_MSG] != ERC20Detailed;
[L4855]              assume DType[msgsender_MSG] != SafeMath;
[L4856]              assume DType[msgsender_MSG] != YFV;
[L4857]              Alloc[msgsender_MSG] := true;
[L4858]  COND FALSE  !(choice == 18)
[L4864]  COND FALSE  !(choice == 17)
[L4870]  COND TRUE   choice == 16
[L4871]              gas := gas - 21000;
[L4872]  COND TRUE   gas >= 0
[L4873]              assume amount_s140 >= 0 && amount_s140 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4874]              assume msgvalue_MSG == 0;
[L4875]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == recipient_s140 && amount_s140 <= _balances_ERC20[this][msgsender_MSG]) && amount_s140 >= 0) && amount_s140 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s140] >= 0) && _balances_ERC20[this][recipient_s140] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC200 := true;
[L2]                 call_transfer_ERC200 := false;
[L2]                 revert := revert_hold;
[L392]               havoc __exception;
[L393]               revert := false;
[L394]   COND TRUE   __exception
[L395]               __tmp__Balance := Balance;
[L396]               __tmp__DType := DType;
[L397]               __tmp__Alloc := Alloc;
[L398]               __tmp__balance_ADDR := balance_ADDR;
[L399]               __tmp__M_Ref_int := M_Ref_int;
[L400]               __tmp__sum__balances0 := sum__balances0;
[L401]               __tmp__alloc__allowances_ERC20_lvl0 := alloc__allowances_ERC20_lvl0;
[L402]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L403]               __tmp__sum__allowances1 := sum__allowances1;
[L404]               __tmp__M_Ref_bool := M_Ref_bool;
[L405]               __tmp__sum_minters2 := sum_minters2;
[L406]               __tmp__Length := Length;
[L407]               __tmp__now := now;
[L408]               __tmp___balances_ERC20 := _balances_ERC20;
[L409]               __tmp___allowances_ERC20 := _allowances_ERC20;
[L410]               __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L411]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L412]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L413]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L414]               __tmp__governance_YFV := governance_YFV;
[L415]               __tmp__minters_YFV := minters_YFV;
[L416]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L2289]  COND TRUE   __tmp__DType[this] == YFV
[L2290]  CALL        call __var_1 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L2194]              __ret_0_ := msgsender_MSG;
[L2290]  RET         call __var_1 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L2291]  COND FALSE  !(revert)
[L2302]  COND TRUE   __tmp__DType[this] == YFV
[L2303]  CALL        call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s140, amount_s140);
[L2774]              __var_12 := null;
[L2775]  COND FALSE  !(!(sender_s323 != null))
[L2779]              __var_13 := null;
[L2780]  COND FALSE  !(!(recipient_s323 != null))
[L2784]  CALL        call __var_14 := sub~uint256~uint256~string_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][sender_s323], amount_s323, -806116454);
[L3117]  COND FALSE  !(!(b_s561 <= a_s561))
[L3121]              c_s561 := (a_s561 - b_s561) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3122]              __ret_0_ := c_s561;
[L2784]  RET         call __var_14 := sub~uint256~uint256~string_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][sender_s323], amount_s323, -806116454);
[L2785]  COND FALSE  !(revert)
[L2788]              __tmp__sum__balances0[this] := __tmp__sum__balances0[this] - __tmp___balances_ERC20[this][sender_s323];
[L2789]              __tmp___balances_ERC20[this][sender_s323] := __var_14;
[L2790]              __tmp__sum__balances0[this] := __tmp__sum__balances0[this] + __tmp___balances_ERC20[this][sender_s323];
[L2791]  CALL        call __var_15 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][recipient_s323], amount_s323);
[L3093]              c_s534 := (a_s534 + b_s534) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3094]  COND TRUE   !(c_s534 >= a_s534)
[L3095]              revert := true;
[L2791]  RET         call __var_15 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][recipient_s323], amount_s323);
[L2792]  COND TRUE   revert
[L2303]  RET         call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s140, amount_s140);
[L2304]  COND TRUE   revert
[L416]   RET         call __ret_0_ := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L417]               assume revert || gas < 0;
[L4875]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L4991]  RET         call CorralChoice_YFV(this);

Loop:
[L4991]  CALL        call CorralChoice_YFV(this);
[L4804]              havoc msgsender_MSG;
[L4805]              havoc msgvalue_MSG;
[L4806]              havoc choice;
[L4807]              havoc __ret_0_totalSupply;
[L4808]              havoc account_s121;
[L4809]              havoc __ret_0_balanceOf;
[L4810]              havoc recipient_s140;
[L4811]              havoc amount_s140;
[L4812]              havoc __ret_0_transfer;
[L4813]              havoc owner_s156;
[L4814]              havoc spender_s156;
[L4815]              havoc __ret_0_allowance;
[L4816]              havoc spender_s175;
[L4817]              havoc amount_s175;
[L4818]              havoc __ret_0_approve;
[L4819]              havoc sender_s211;
[L4820]              havoc recipient_s211;
[L4821]              havoc amount_s211;
[L4822]              havoc __ret_0_transferFrom;
[L4823]              havoc spender_s238;
[L4824]              havoc addedValue_s238;
[L4825]              havoc __ret_0_increaseAllowance;
[L4826]              havoc spender_s266;
[L4827]              havoc subtractedValue_s266;
[L4828]              havoc __ret_0_decreaseAllowance;
[L4829]              havoc name_s484;
[L4830]              havoc symbol_s484;
[L4831]              havoc decimals_s484;
[L4832]              havoc __ret_0_name;
[L4833]              havoc __ret_0_symbol;
[L4834]              havoc __ret_0_decimals;
[L4835]              havoc __ret_0_governance;
[L4836]              havoc arg744_s0;
[L4837]              havoc __ret_0_minters;
[L4838]              havoc account_s671;
[L4839]              havoc amount_s671;
[L4840]              havoc amount_s683;
[L4841]              havoc _governance_s701;
[L4842]              havoc _minter_s721;
[L4843]              havoc _minter_s741;
[L4844]              havoc tmpNow;
[L4845]              havoc gas;
[L4846]              assume gas > 4000000 && gas <= 8000000;
[L4847]              tmpNow := now;
[L4848]              havoc now;
[L4849]              assume now > tmpNow;
[L4850]              assume msgsender_MSG != null;
[L4851]              assume DType[msgsender_MSG] != IERC20;
[L4852]              assume DType[msgsender_MSG] != Context;
[L4853]              assume DType[msgsender_MSG] != ERC20;
[L4854]              assume DType[msgsender_MSG] != ERC20Detailed;
[L4855]              assume DType[msgsender_MSG] != SafeMath;
[L4856]              assume DType[msgsender_MSG] != YFV;
[L4857]              Alloc[msgsender_MSG] := true;
[L4858]  COND FALSE  !(choice == 18)
[L4864]  COND FALSE  !(choice == 17)
[L4870]  COND FALSE  !(choice == 16)
[L4877]  COND FALSE  !(choice == 15)
[L4883]  COND FALSE  !(choice == 14)
[L4890]  COND FALSE  !(choice == 13)
[L4897]  COND FALSE  !(choice == 12)
[L4904]  COND FALSE  !(choice == 11)
[L4911]  COND FALSE  !(choice == 10)
[L4917]  COND FALSE  !(choice == 9)
[L4923]  COND FALSE  !(choice == 8)
[L4929]  COND FALSE  !(choice == 7)
[L4935]  COND FALSE  !(choice == 6)
[L4941]  COND FALSE  !(choice == 5)
[L4948]  COND TRUE   choice == 4
[L4949]              gas := gas - 21000;
[L4950]  COND TRUE   gas >= 0
[L4951]              assume amount_s683 >= 0 && amount_s683 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4952]              assume msgvalue_MSG == 0;
[L4953]  CALL        call burn~uint256_YFV(this, msgsender_MSG, msgvalue_MSG, amount_s683);
[L1220]              havoc __exception;
[L1221]              revert := false;
[L1222]  COND FALSE  !(__exception)
[L1247]  CALL        call burn~uint256_YFV__success(this, msgsender_MSG, msgvalue_MSG, amount_s683);
[L3310]  COND TRUE   DType[this] == YFV
[L3311]  CALL        call _burn~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, amount_s683);
[L2911]              __var_19 := null;
[L2912]  COND FALSE  !(!(account_s411 != null))
[L2916]  CALL        call __var_20 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s411], amount_s411, 392639254);
[L3129]  COND FALSE  !(!(b_s561 <= a_s561))
[L3133]              c_s561 := (a_s561 - b_s561) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3134]              __ret_0_ := c_s561;
[L2916]  RET         call __var_20 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s411], amount_s411, 392639254);
[L2917]  COND FALSE  !(revert)
[L2920]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s411];
[L2921]              _balances_ERC20[this][account_s411] := __var_20;
[L2922]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s411];
[L2923]  CALL        call __var_21 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s411, 1252836592);
[L3129]  COND FALSE  !(!(b_s561 <= a_s561))
[L3133]              c_s561 := (a_s561 - b_s561) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3134]              __ret_0_ := c_s561;
[L2923]  RET         call __var_21 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s411, 1252836592);
[L2924]  COND FALSE  !(revert)
[L2927]              _totalSupply_ERC20[this] := __var_21;
[L2928]              assert { :EventEmitted "Transfer_ERC20" } true;
[L3311]  RET         call _burn~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, amount_s683);
[L3312]  COND FALSE  !(revert)
[L1247]  RET         call burn~uint256_YFV__success(this, msgsender_MSG, msgvalue_MSG, amount_s683);
[L1248]              assume !revert && gas >= 0;
[L4953]  RET         call burn~uint256_YFV(this, msgsender_MSG, msgvalue_MSG, amount_s683);
[L4991]  RET         call CorralChoice_YFV(this);

[2020-11-25 09:38:01,451 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 09:38:01,451 INFO  L82        PathProgramCache]: Analyzing trace with hash 235143031, now seen corresponding path program 1 times
[2020-11-25 09:38:01,452 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 09:38:01,463 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 09:38:01,570 INFO  L134       CoverageAnalysis]: Checked inductivity of 104 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 104 trivial. 0 not checked.
[2020-11-25 09:38:01,571 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 09:38:01,571 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [16] imperfect sequences [] total 16
[2020-11-25 09:38:01,571 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 09:38:01,571 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 16 interpolants.
[2020-11-25 09:38:01,571 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=34, Invalid=206, Unknown=0, NotChecked=0, Total=240
[2020-11-25 09:38:01,571 INFO  L87              Difference]: Start difference. First operand 3246 states and 3848 transitions. cyclomatic complexity: 620 Second operand 16 states.
[2020-11-25 09:38:03,067 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 09:38:03,067 INFO  L93              Difference]: Finished difference Result 3132 states and 3732 transitions.
[2020-11-25 09:38:03,067 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 16 states. 
[2020-11-25 09:38:03,068 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 3132 states and 3732 transitions.
[2020-11-25 09:38:03,074 INFO  L131   ngComponentsAnalysis]: Automaton has 4 accepting balls. 8
[2020-11-25 09:38:03,082 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 3132 states to 3088 states and 3686 transitions.
[2020-11-25 09:38:03,082 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 663
[2020-11-25 09:38:03,082 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 663
[2020-11-25 09:38:03,082 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 3088 states and 3686 transitions.
[2020-11-25 09:38:03,084 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 09:38:03,084 INFO  L728         BuchiCegarLoop]: Abstraction has 3088 states and 3686 transitions.
[2020-11-25 09:38:03,086 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 3088 states and 3686 transitions.
[2020-11-25 09:38:03,098 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 3088 to 2969.
[2020-11-25 09:38:03,099 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 2969 states.
[2020-11-25 09:38:03,102 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 2969 states to 2969 states and 3454 transitions.
[2020-11-25 09:38:03,102 INFO  L751         BuchiCegarLoop]: Abstraction has 2969 states and 3454 transitions.
[2020-11-25 09:38:03,102 INFO  L631         BuchiCegarLoop]: Abstraction has 2969 states and 3454 transitions.
[2020-11-25 09:38:03,102 INFO  L445         BuchiCegarLoop]: ======== Iteration 19============
[2020-11-25 09:38:03,102 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2969 states and 3454 transitions.
[2020-11-25 09:38:03,104 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 09:38:03,104 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 09:38:03,104 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 09:38:03,105 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 09:38:03,105 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_ERC200 := false;
[L2]                 call_transfer_ERC200 := false;
[L2]     CALL        call main();
[L4981]              assume null == 0;
[L4982]  CALL        call this := FreshRefGenerator__success();
[L2122]              havoc newRef;
[L2123]              assume Alloc[newRef] == false;
[L2124]              Alloc[newRef] := true;
[L2125]              assume newRef != null;
[L4982]  RET         call this := FreshRefGenerator__success();
[L4983]              assume now >= 0;
[L4984]              assume DType[this] == YFV;
[L4985]              assume msgvalue_MSG == 0;
[L4986]              gas := gas - 53000;
[L4987]  CALL        call YFV_YFV(this, msgsender_MSG, msgvalue_MSG);
[L1098]              havoc __exception;
[L1099]              revert := false;
[L1100]  COND FALSE  !(__exception)
[L1125]  CALL        call YFV_YFV__success(this, msgsender_MSG, msgvalue_MSG);
[L3242]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2186]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2171]              assume msgsender_MSG != null;
[L2172]              Balance[this] := 0;
[L2186]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2187]  COND FALSE  !(revert)
[L3242]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3243]  COND FALSE  !(revert)
[L3246]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2154]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2139]              assume msgsender_MSG != null;
[L2140]              Balance[this] := 0;
[L2154]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2155]  COND FALSE  !(revert)
[L3246]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3247]  COND FALSE  !(revert)
[L3250]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2248]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2186]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2171]              assume msgsender_MSG != null;
[L2172]              Balance[this] := 0;
[L2186]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2187]  COND FALSE  !(revert)
[L2248]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2249]  COND FALSE  !(revert)
[L2252]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2154]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2139]              assume msgsender_MSG != null;
[L2140]              Balance[this] := 0;
[L2154]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2155]  COND FALSE  !(revert)
[L2252]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2253]  COND FALSE  !(revert)
[L2256]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2220]              assume msgsender_MSG != null;
[L2221]              Balance[this] := 0;
[L2222]              _balances_ERC20[this] := zeroRefintArr();
[L2223]              sum__balances0[this] := 0;
[L2224]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2225]              sum__allowances1[this] := 0;
[L2226]              _totalSupply_ERC20[this] := 0;
[L2256]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2257]  COND FALSE  !(revert)
[L3250]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3251]  COND FALSE  !(revert)
[L3254]  CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -868984158, 934069305, 18);
[L3012]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2154]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2139]              assume msgsender_MSG != null;
[L2140]              Balance[this] := 0;
[L2154]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2155]  COND FALSE  !(revert)
[L3012]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3013]  COND FALSE  !(revert)
[L3016]  CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s484, symbol_s484, decimals_s484);
[L2987]              assume msgsender_MSG != null;
[L2988]              Balance[this] := 0;
[L2989]              _name_ERC20Detailed[this] := 1252836592;
[L2990]              _symbol_ERC20Detailed[this] := 1252836592;
[L2991]              _decimals_ERC20Detailed[this] := 0;
[L2993]              _name_ERC20Detailed[this] := name_s484;
[L2994]              _symbol_ERC20Detailed[this] := symbol_s484;
[L2995]              _decimals_ERC20Detailed[this] := decimals_s484;
[L3016]  RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s484, symbol_s484, decimals_s484);
[L3017]  COND FALSE  !(revert)
[L3254]  RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -868984158, 934069305, 18);
[L3255]  COND FALSE  !(revert)
[L3258]  CALL        call YFV_YFV_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3208]              assume msgsender_MSG != null;
[L3209]              Balance[this] := 0;
[L3210]              governance_YFV[this] := null;
[L3211]              minters_YFV[this] := zeroRefboolArr();
[L3213]              governance_YFV[this] := msgsender_MSG;
[L3258]  RET         call YFV_YFV_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3259]  COND FALSE  !(revert)
[L1125]  RET         call YFV_YFV__success(this, msgsender_MSG, msgvalue_MSG);
[L1126]              assume !revert && gas >= 0;
[L4987]  RET         call YFV_YFV(this, msgsender_MSG, msgvalue_MSG);
[L4988]              assume !revert && gas >= 0;
[L4991]  CALL        call CorralChoice_YFV(this);
[L4804]              havoc msgsender_MSG;
[L4805]              havoc msgvalue_MSG;
[L4806]              havoc choice;
[L4807]              havoc __ret_0_totalSupply;
[L4808]              havoc account_s121;
[L4809]              havoc __ret_0_balanceOf;
[L4810]              havoc recipient_s140;
[L4811]              havoc amount_s140;
[L4812]              havoc __ret_0_transfer;
[L4813]              havoc owner_s156;
[L4814]              havoc spender_s156;
[L4815]              havoc __ret_0_allowance;
[L4816]              havoc spender_s175;
[L4817]              havoc amount_s175;
[L4818]              havoc __ret_0_approve;
[L4819]              havoc sender_s211;
[L4820]              havoc recipient_s211;
[L4821]              havoc amount_s211;
[L4822]              havoc __ret_0_transferFrom;
[L4823]              havoc spender_s238;
[L4824]              havoc addedValue_s238;
[L4825]              havoc __ret_0_increaseAllowance;
[L4826]              havoc spender_s266;
[L4827]              havoc subtractedValue_s266;
[L4828]              havoc __ret_0_decreaseAllowance;
[L4829]              havoc name_s484;
[L4830]              havoc symbol_s484;
[L4831]              havoc decimals_s484;
[L4832]              havoc __ret_0_name;
[L4833]              havoc __ret_0_symbol;
[L4834]              havoc __ret_0_decimals;
[L4835]              havoc __ret_0_governance;
[L4836]              havoc arg744_s0;
[L4837]              havoc __ret_0_minters;
[L4838]              havoc account_s671;
[L4839]              havoc amount_s671;
[L4840]              havoc amount_s683;
[L4841]              havoc _governance_s701;
[L4842]              havoc _minter_s721;
[L4843]              havoc _minter_s741;
[L4844]              havoc tmpNow;
[L4845]              havoc gas;
[L4846]              assume gas > 4000000 && gas <= 8000000;
[L4847]              tmpNow := now;
[L4848]              havoc now;
[L4849]              assume now > tmpNow;
[L4850]              assume msgsender_MSG != null;
[L4851]              assume DType[msgsender_MSG] != IERC20;
[L4852]              assume DType[msgsender_MSG] != Context;
[L4853]              assume DType[msgsender_MSG] != ERC20;
[L4854]              assume DType[msgsender_MSG] != ERC20Detailed;
[L4855]              assume DType[msgsender_MSG] != SafeMath;
[L4856]              assume DType[msgsender_MSG] != YFV;
[L4857]              Alloc[msgsender_MSG] := true;
[L4858]  COND FALSE  !(choice == 18)
[L4864]  COND FALSE  !(choice == 17)
[L4870]  COND FALSE  !(choice == 16)
[L4877]  COND FALSE  !(choice == 15)
[L4883]  COND FALSE  !(choice == 14)
[L4890]  COND FALSE  !(choice == 13)
[L4897]  COND FALSE  !(choice == 12)
[L4904]  COND FALSE  !(choice == 11)
[L4911]  COND FALSE  !(choice == 10)
[L4917]  COND FALSE  !(choice == 9)
[L4923]  COND FALSE  !(choice == 8)
[L4929]  COND FALSE  !(choice == 7)
[L4935]  COND FALSE  !(choice == 6)
[L4941]  COND FALSE  !(choice == 5)
[L4948]  COND TRUE   choice == 4
[L4949]              gas := gas - 21000;
[L4950]  COND TRUE   gas >= 0
[L4951]              assume amount_s683 >= 0 && amount_s683 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4952]              assume msgvalue_MSG == 0;
[L4953]  CALL        call burn~uint256_YFV(this, msgsender_MSG, msgvalue_MSG, amount_s683);
[L1220]              havoc __exception;
[L1221]              revert := false;
[L1222]  COND FALSE  !(__exception)
[L1247]  CALL        call burn~uint256_YFV__success(this, msgsender_MSG, msgvalue_MSG, amount_s683);
[L3310]  COND TRUE   DType[this] == YFV
[L3311]  CALL        call _burn~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, amount_s683);
[L2911]              __var_19 := null;
[L2912]  COND FALSE  !(!(account_s411 != null))
[L2916]  CALL        call __var_20 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s411], amount_s411, 392639254);
[L3129]  COND FALSE  !(!(b_s561 <= a_s561))
[L3133]              c_s561 := (a_s561 - b_s561) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3134]              __ret_0_ := c_s561;
[L2916]  RET         call __var_20 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s411], amount_s411, 392639254);
[L2917]  COND FALSE  !(revert)
[L2920]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s411];
[L2921]              _balances_ERC20[this][account_s411] := __var_20;
[L2922]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s411];
[L2923]  CALL        call __var_21 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s411, 1252836592);
[L3129]  COND FALSE  !(!(b_s561 <= a_s561))
[L3133]              c_s561 := (a_s561 - b_s561) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3134]              __ret_0_ := c_s561;
[L2923]  RET         call __var_21 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s411, 1252836592);
[L2924]  COND FALSE  !(revert)
[L2927]              _totalSupply_ERC20[this] := __var_21;
[L2928]              assert { :EventEmitted "Transfer_ERC20" } true;
[L3311]  RET         call _burn~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, amount_s683);
[L3312]  COND FALSE  !(revert)
[L1247]  RET         call burn~uint256_YFV__success(this, msgsender_MSG, msgvalue_MSG, amount_s683);
[L1248]              assume !revert && gas >= 0;
[L4953]  RET         call burn~uint256_YFV(this, msgsender_MSG, msgvalue_MSG, amount_s683);
[L4991]  RET         call CorralChoice_YFV(this);
[L4991]  CALL        call CorralChoice_YFV(this);
[L4804]              havoc msgsender_MSG;
[L4805]              havoc msgvalue_MSG;
[L4806]              havoc choice;
[L4807]              havoc __ret_0_totalSupply;
[L4808]              havoc account_s121;
[L4809]              havoc __ret_0_balanceOf;
[L4810]              havoc recipient_s140;
[L4811]              havoc amount_s140;
[L4812]              havoc __ret_0_transfer;
[L4813]              havoc owner_s156;
[L4814]              havoc spender_s156;
[L4815]              havoc __ret_0_allowance;
[L4816]              havoc spender_s175;
[L4817]              havoc amount_s175;
[L4818]              havoc __ret_0_approve;
[L4819]              havoc sender_s211;
[L4820]              havoc recipient_s211;
[L4821]              havoc amount_s211;
[L4822]              havoc __ret_0_transferFrom;
[L4823]              havoc spender_s238;
[L4824]              havoc addedValue_s238;
[L4825]              havoc __ret_0_increaseAllowance;
[L4826]              havoc spender_s266;
[L4827]              havoc subtractedValue_s266;
[L4828]              havoc __ret_0_decreaseAllowance;
[L4829]              havoc name_s484;
[L4830]              havoc symbol_s484;
[L4831]              havoc decimals_s484;
[L4832]              havoc __ret_0_name;
[L4833]              havoc __ret_0_symbol;
[L4834]              havoc __ret_0_decimals;
[L4835]              havoc __ret_0_governance;
[L4836]              havoc arg744_s0;
[L4837]              havoc __ret_0_minters;
[L4838]              havoc account_s671;
[L4839]              havoc amount_s671;
[L4840]              havoc amount_s683;
[L4841]              havoc _governance_s701;
[L4842]              havoc _minter_s721;
[L4843]              havoc _minter_s741;
[L4844]              havoc tmpNow;
[L4845]              havoc gas;
[L4846]              assume gas > 4000000 && gas <= 8000000;
[L4847]              tmpNow := now;
[L4848]              havoc now;
[L4849]              assume now > tmpNow;
[L4850]              assume msgsender_MSG != null;
[L4851]              assume DType[msgsender_MSG] != IERC20;
[L4852]              assume DType[msgsender_MSG] != Context;
[L4853]              assume DType[msgsender_MSG] != ERC20;
[L4854]              assume DType[msgsender_MSG] != ERC20Detailed;
[L4855]              assume DType[msgsender_MSG] != SafeMath;
[L4856]              assume DType[msgsender_MSG] != YFV;
[L4857]              Alloc[msgsender_MSG] := true;
[L4858]  COND FALSE  !(choice == 18)
[L4864]  COND FALSE  !(choice == 17)
[L4870]  COND FALSE  !(choice == 16)
[L4877]  COND FALSE  !(choice == 15)
[L4883]  COND FALSE  !(choice == 14)
[L4890]  COND TRUE   choice == 13
[L4891]              gas := gas - 21000;
[L4892]  COND TRUE   gas >= 0
[L4893]              assume amount_s211 >= 0 && amount_s211 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4894]              assume msgvalue_MSG == 0;
[L4895]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, sender_s211, recipient_s211, amount_s211);
[L572]               havoc __exception;
[L573]               revert := false;
[L574]   COND FALSE  !(__exception)
[L599]   CALL        call __ret_0_ := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s211, recipient_s211, amount_s211);
[L2500]  COND TRUE   DType[this] == YFV
[L2501]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s211, recipient_s211, amount_s211);
[L2806]              __var_12 := null;
[L2807]  COND FALSE  !(!(sender_s323 != null))
[L2811]              __var_13 := null;
[L2812]  COND FALSE  !(!(recipient_s323 != null))
[L2816]  CALL        call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s323], amount_s323, -806116454);
[L3129]  COND FALSE  !(!(b_s561 <= a_s561))
[L3133]              c_s561 := (a_s561 - b_s561) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3134]              __ret_0_ := c_s561;
[L2816]  RET         call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s323], amount_s323, -806116454);
[L2817]  COND FALSE  !(revert)
[L2820]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s323];
[L2821]              _balances_ERC20[this][sender_s323] := __var_14;
[L2822]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s323];
[L2823]  CALL        call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s323], amount_s323);
[L3105]              c_s534 := (a_s534 + b_s534) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3106]  COND FALSE  !(!(c_s534 >= a_s534))
[L3110]              __ret_0_ := c_s534;
[L2823]  RET         call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s323], amount_s323);
[L2824]  COND FALSE  !(revert)
[L2827]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s323];
[L2828]              _balances_ERC20[this][recipient_s323] := __var_15;
[L2829]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s323];
[L2830]              assert { :EventEmitted "Transfer_ERC20" } true;
[L2501]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s211, recipient_s211, amount_s211);
[L2502]  COND FALSE  !(revert)
[L2513]  COND TRUE   DType[this] == YFV
[L2514]  CALL        call __var_3 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2200]              __ret_0_ := msgsender_MSG;
[L2514]  RET         call __var_3 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2515]  COND FALSE  !(revert)
[L2526]  COND TRUE   DType[this] == YFV
[L2527]  CALL        call __var_5 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2200]              __ret_0_ := msgsender_MSG;
[L2527]  RET         call __var_5 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2528]  COND FALSE  !(revert)
[L2539]  CALL        call __var_4 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s211][__var_5], amount_s211, -2057360831);
[L3129]  COND FALSE  !(!(b_s561 <= a_s561))
[L3133]              c_s561 := (a_s561 - b_s561) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3134]              __ret_0_ := c_s561;
[L2539]  RET         call __var_4 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s211][__var_5], amount_s211, -2057360831);
[L2540]  COND FALSE  !(revert)
[L2543]  COND TRUE   DType[this] == YFV
[L2544]  CALL        call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s211, __var_3, __var_4);
[L2954]              __var_22 := null;
[L2955]  COND FALSE  !(!(owner_s453 != null))
[L2959]              __var_23 := null;
[L2960]  COND FALSE  !(!(spender_s453 != null))
[L2964]              sum__allowances1[owner_s453] := sum__allowances1[owner_s453] - _allowances_ERC20[this][owner_s453][spender_s453];
[L2965]              _allowances_ERC20[this][owner_s453][spender_s453] := amount_s453;
[L2966]              sum__allowances1[owner_s453] := sum__allowances1[owner_s453] + _allowances_ERC20[this][owner_s453][spender_s453];
[L2967]              assert { :EventEmitted "Approval_ERC20" } true;
[L2544]  RET         call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s211, __var_3, __var_4);
[L2545]  COND FALSE  !(revert)
[L2556]              __ret_0_ := true;
[L599]   RET         call __ret_0_ := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s211, recipient_s211, amount_s211);
[L600]               assume !revert && gas >= 0;
[L4895]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, sender_s211, recipient_s211, amount_s211);
[L4991]  RET         call CorralChoice_YFV(this);
[L4991]  CALL        call CorralChoice_YFV(this);
[L4804]              havoc msgsender_MSG;
[L4805]              havoc msgvalue_MSG;
[L4806]              havoc choice;
[L4807]              havoc __ret_0_totalSupply;
[L4808]              havoc account_s121;
[L4809]              havoc __ret_0_balanceOf;
[L4810]              havoc recipient_s140;
[L4811]              havoc amount_s140;
[L4812]              havoc __ret_0_transfer;
[L4813]              havoc owner_s156;
[L4814]              havoc spender_s156;
[L4815]              havoc __ret_0_allowance;
[L4816]              havoc spender_s175;
[L4817]              havoc amount_s175;
[L4818]              havoc __ret_0_approve;
[L4819]              havoc sender_s211;
[L4820]              havoc recipient_s211;
[L4821]              havoc amount_s211;
[L4822]              havoc __ret_0_transferFrom;
[L4823]              havoc spender_s238;
[L4824]              havoc addedValue_s238;
[L4825]              havoc __ret_0_increaseAllowance;
[L4826]              havoc spender_s266;
[L4827]              havoc subtractedValue_s266;
[L4828]              havoc __ret_0_decreaseAllowance;
[L4829]              havoc name_s484;
[L4830]              havoc symbol_s484;
[L4831]              havoc decimals_s484;
[L4832]              havoc __ret_0_name;
[L4833]              havoc __ret_0_symbol;
[L4834]              havoc __ret_0_decimals;
[L4835]              havoc __ret_0_governance;
[L4836]              havoc arg744_s0;
[L4837]              havoc __ret_0_minters;
[L4838]              havoc account_s671;
[L4839]              havoc amount_s671;
[L4840]              havoc amount_s683;
[L4841]              havoc _governance_s701;
[L4842]              havoc _minter_s721;
[L4843]              havoc _minter_s741;
[L4844]              havoc tmpNow;
[L4845]              havoc gas;
[L4846]              assume gas > 4000000 && gas <= 8000000;
[L4847]              tmpNow := now;
[L4848]              havoc now;
[L4849]              assume now > tmpNow;
[L4850]              assume msgsender_MSG != null;
[L4851]              assume DType[msgsender_MSG] != IERC20;
[L4852]              assume DType[msgsender_MSG] != Context;
[L4853]              assume DType[msgsender_MSG] != ERC20;
[L4854]              assume DType[msgsender_MSG] != ERC20Detailed;
[L4855]              assume DType[msgsender_MSG] != SafeMath;
[L4856]              assume DType[msgsender_MSG] != YFV;
[L4857]              Alloc[msgsender_MSG] := true;
[L4858]  COND FALSE  !(choice == 18)
[L4864]  COND FALSE  !(choice == 17)
[L4870]  COND TRUE   choice == 16
[L4871]              gas := gas - 21000;
[L4872]  COND TRUE   gas >= 0
[L4873]              assume amount_s140 >= 0 && amount_s140 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4874]              assume msgvalue_MSG == 0;
[L4875]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == recipient_s140 && amount_s140 <= _balances_ERC20[this][msgsender_MSG]) && amount_s140 >= 0) && amount_s140 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s140] >= 0) && _balances_ERC20[this][recipient_s140] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC200 := true;
[L2]                 call_transfer_ERC200 := false;
[L2]                 revert := revert_hold;
[L392]               havoc __exception;
[L393]               revert := false;
[L394]   COND FALSE  !(__exception)
[L419]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L2322]  COND TRUE   DType[this] == YFV
[L2323]  CALL        call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2200]              __ret_0_ := msgsender_MSG;
[L2323]  RET         call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2324]  COND FALSE  !(revert)
[L2335]  COND TRUE   DType[this] == YFV
[L2336]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s140, amount_s140);
[L2806]              __var_12 := null;
[L2807]  COND FALSE  !(!(sender_s323 != null))
[L2811]              __var_13 := null;
[L2812]  COND FALSE  !(!(recipient_s323 != null))
[L2816]  CALL        call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s323], amount_s323, -806116454);
[L3129]  COND FALSE  !(!(b_s561 <= a_s561))
[L3133]              c_s561 := (a_s561 - b_s561) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3134]              __ret_0_ := c_s561;
[L2816]  RET         call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s323], amount_s323, -806116454);
[L2817]  COND FALSE  !(revert)
[L2820]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s323];
[L2821]              _balances_ERC20[this][sender_s323] := __var_14;
[L2822]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s323];
[L2823]  CALL        call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s323], amount_s323);
[L3105]              c_s534 := (a_s534 + b_s534) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3106]  COND FALSE  !(!(c_s534 >= a_s534))
[L3110]              __ret_0_ := c_s534;
[L2823]  RET         call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s323], amount_s323);
[L2824]  COND FALSE  !(revert)
[L2827]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s323];
[L2828]              _balances_ERC20[this][recipient_s323] := __var_15;
[L2829]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s323];
[L2830]              assert { :EventEmitted "Transfer_ERC20" } true;
[L2336]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s140, amount_s140);
[L2337]  COND FALSE  !(revert)
[L2348]              __ret_0_ := true;
[L419]   RET         call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L420]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !((((((((__ret_0_ == true && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowances_ERC20[this] == old(_allowances_ERC20[this])) && governance_YFV[this] == old(governance_YFV[this])) && minters_YFV[this] == old(minters_YFV[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]));
[L2]                 revert := revert_hold;
[L4875]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L4991]  RET         call CorralChoice_YFV(this);

Loop:
[L4991]  CALL        call CorralChoice_YFV(this);
[L4804]              havoc msgsender_MSG;
[L4805]              havoc msgvalue_MSG;
[L4806]              havoc choice;
[L4807]              havoc __ret_0_totalSupply;
[L4808]              havoc account_s121;
[L4809]              havoc __ret_0_balanceOf;
[L4810]              havoc recipient_s140;
[L4811]              havoc amount_s140;
[L4812]              havoc __ret_0_transfer;
[L4813]              havoc owner_s156;
[L4814]              havoc spender_s156;
[L4815]              havoc __ret_0_allowance;
[L4816]              havoc spender_s175;
[L4817]              havoc amount_s175;
[L4818]              havoc __ret_0_approve;
[L4819]              havoc sender_s211;
[L4820]              havoc recipient_s211;
[L4821]              havoc amount_s211;
[L4822]              havoc __ret_0_transferFrom;
[L4823]              havoc spender_s238;
[L4824]              havoc addedValue_s238;
[L4825]              havoc __ret_0_increaseAllowance;
[L4826]              havoc spender_s266;
[L4827]              havoc subtractedValue_s266;
[L4828]              havoc __ret_0_decreaseAllowance;
[L4829]              havoc name_s484;
[L4830]              havoc symbol_s484;
[L4831]              havoc decimals_s484;
[L4832]              havoc __ret_0_name;
[L4833]              havoc __ret_0_symbol;
[L4834]              havoc __ret_0_decimals;
[L4835]              havoc __ret_0_governance;
[L4836]              havoc arg744_s0;
[L4837]              havoc __ret_0_minters;
[L4838]              havoc account_s671;
[L4839]              havoc amount_s671;
[L4840]              havoc amount_s683;
[L4841]              havoc _governance_s701;
[L4842]              havoc _minter_s721;
[L4843]              havoc _minter_s741;
[L4844]              havoc tmpNow;
[L4845]              havoc gas;
[L4846]              assume gas > 4000000 && gas <= 8000000;
[L4847]              tmpNow := now;
[L4848]              havoc now;
[L4849]              assume now > tmpNow;
[L4850]              assume msgsender_MSG != null;
[L4851]              assume DType[msgsender_MSG] != IERC20;
[L4852]              assume DType[msgsender_MSG] != Context;
[L4853]              assume DType[msgsender_MSG] != ERC20;
[L4854]              assume DType[msgsender_MSG] != ERC20Detailed;
[L4855]              assume DType[msgsender_MSG] != SafeMath;
[L4856]              assume DType[msgsender_MSG] != YFV;
[L4857]              Alloc[msgsender_MSG] := true;
[L4858]  COND FALSE  !(choice == 18)
[L4864]  COND FALSE  !(choice == 17)
[L4870]  COND TRUE   choice == 16
[L4871]              gas := gas - 21000;
[L4872]  COND TRUE   gas >= 0
[L4873]              assume amount_s140 >= 0 && amount_s140 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4874]              assume msgvalue_MSG == 0;
[L4875]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == recipient_s140 && amount_s140 <= _balances_ERC20[this][msgsender_MSG]) && amount_s140 >= 0) && amount_s140 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s140] >= 0) && _balances_ERC20[this][recipient_s140] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC200 := true;
[L2]                 call_transfer_ERC200 := false;
[L2]                 revert := revert_hold;
[L392]               havoc __exception;
[L393]               revert := false;
[L394]   COND FALSE  !(__exception)
[L419]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L2322]  COND TRUE   DType[this] == YFV
[L2323]  CALL        call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2200]              __ret_0_ := msgsender_MSG;
[L2323]  RET         call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2324]  COND FALSE  !(revert)
[L2335]  COND TRUE   DType[this] == YFV
[L2336]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s140, amount_s140);
[L2806]              __var_12 := null;
[L2807]  COND FALSE  !(!(sender_s323 != null))
[L2811]              __var_13 := null;
[L2812]  COND FALSE  !(!(recipient_s323 != null))
[L2816]  CALL        call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s323], amount_s323, -806116454);
[L3129]  COND FALSE  !(!(b_s561 <= a_s561))
[L3133]              c_s561 := (a_s561 - b_s561) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3134]              __ret_0_ := c_s561;
[L2816]  RET         call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s323], amount_s323, -806116454);
[L2817]  COND FALSE  !(revert)
[L2820]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s323];
[L2821]              _balances_ERC20[this][sender_s323] := __var_14;
[L2822]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s323];
[L2823]  CALL        call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s323], amount_s323);
[L3105]              c_s534 := (a_s534 + b_s534) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3106]  COND FALSE  !(!(c_s534 >= a_s534))
[L3110]              __ret_0_ := c_s534;
[L2823]  RET         call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s323], amount_s323);
[L2824]  COND FALSE  !(revert)
[L2827]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s323];
[L2828]              _balances_ERC20[this][recipient_s323] := __var_15;
[L2829]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s323];
[L2830]              assert { :EventEmitted "Transfer_ERC20" } true;
[L2336]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s140, amount_s140);
[L2337]  COND FALSE  !(revert)
[L2348]              __ret_0_ := true;
[L419]   RET         call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L420]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !((((((((__ret_0_ == true && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowances_ERC20[this] == old(_allowances_ERC20[this])) && governance_YFV[this] == old(governance_YFV[this])) && minters_YFV[this] == old(minters_YFV[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]));
[L2]                 revert := revert_hold;
[L4875]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L4991]  RET         call CorralChoice_YFV(this);

[2020-11-25 09:38:03,109 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 09:38:03,109 INFO  L82        PathProgramCache]: Analyzing trace with hash -121153140, now seen corresponding path program 1 times
[2020-11-25 09:38:03,109 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 09:38:03,143 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 09:38:05,378 INFO  L134       CoverageAnalysis]: Checked inductivity of 256 backedges. 8 proven. 135 refuted. 0 times theorem prover too weak. 113 trivial. 0 not checked.
[2020-11-25 09:38:05,378 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 09:38:05,378 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [54] total 54
[2020-11-25 09:38:05,379 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 09:38:05,379 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 55 interpolants.
[2020-11-25 09:38:05,380 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=248, Invalid=2722, Unknown=0, NotChecked=0, Total=2970
[2020-11-25 09:38:05,380 INFO  L87              Difference]: Start difference. First operand 2969 states and 3454 transitions. cyclomatic complexity: 497 Second operand 55 states.
[2020-11-25 09:38:06,101 WARN  L188               SmtUtils]: Spent 449.00 ms on a formula simplification. DAG size of input: 192 DAG size of output: 190
[2020-11-25 09:38:06,682 WARN  L188               SmtUtils]: Spent 478.00 ms on a formula simplification. DAG size of input: 194 DAG size of output: 192
[2020-11-25 09:38:06,929 WARN  L188               SmtUtils]: Spent 133.00 ms on a formula simplification that was a NOOP. DAG size: 179
[2020-11-25 09:38:09,760 WARN  L188               SmtUtils]: Spent 225.00 ms on a formula simplification. DAG size of input: 183 DAG size of output: 92
[2020-11-25 09:38:22,197 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 09:38:22,197 INFO  L93              Difference]: Finished difference Result 3258 states and 3980 transitions.
[2020-11-25 09:38:22,197 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 53 states. 
[2020-11-25 09:38:22,197 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 3258 states and 3980 transitions.
[2020-11-25 09:38:22,204 INFO  L131   ngComponentsAnalysis]: Automaton has 4 accepting balls. 8
[2020-11-25 09:38:22,213 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 3258 states to 3258 states and 3980 transitions.
[2020-11-25 09:38:22,213 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 738
[2020-11-25 09:38:22,214 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 738
[2020-11-25 09:38:22,214 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 3258 states and 3980 transitions.
[2020-11-25 09:38:22,216 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 09:38:22,216 INFO  L728         BuchiCegarLoop]: Abstraction has 3258 states and 3980 transitions.
[2020-11-25 09:38:22,218 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 3258 states and 3980 transitions.
[2020-11-25 09:38:22,233 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 3258 to 3194.
[2020-11-25 09:38:22,233 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 3194 states.
[2020-11-25 09:38:22,238 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 3194 states to 3194 states and 3832 transitions.
[2020-11-25 09:38:22,238 INFO  L751         BuchiCegarLoop]: Abstraction has 3194 states and 3832 transitions.
[2020-11-25 09:38:22,238 INFO  L631         BuchiCegarLoop]: Abstraction has 3194 states and 3832 transitions.
[2020-11-25 09:38:22,238 INFO  L445         BuchiCegarLoop]: ======== Iteration 20============
[2020-11-25 09:38:22,238 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 3194 states and 3832 transitions.
[2020-11-25 09:38:22,241 INFO  L131   ngComponentsAnalysis]: Automaton has 4 accepting balls. 8
[2020-11-25 09:38:22,241 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 09:38:22,241 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 09:38:22,242 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 09:38:22,242 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_ERC200 := false;
[L2]                 call_transfer_ERC200 := false;
[L2]     CALL        call main();
[L4981]              assume null == 0;
[L4982]  CALL        call this := FreshRefGenerator__success();
[L2122]              havoc newRef;
[L2123]              assume Alloc[newRef] == false;
[L2124]              Alloc[newRef] := true;
[L2125]              assume newRef != null;
[L4982]  RET         call this := FreshRefGenerator__success();
[L4983]              assume now >= 0;
[L4984]              assume DType[this] == YFV;
[L4985]              assume msgvalue_MSG == 0;
[L4986]              gas := gas - 53000;
[L4987]  CALL        call YFV_YFV(this, msgsender_MSG, msgvalue_MSG);
[L1098]              havoc __exception;
[L1099]              revert := false;
[L1100]  COND FALSE  !(__exception)
[L1125]  CALL        call YFV_YFV__success(this, msgsender_MSG, msgvalue_MSG);
[L3242]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2186]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2171]              assume msgsender_MSG != null;
[L2172]              Balance[this] := 0;
[L2186]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2187]  COND FALSE  !(revert)
[L3242]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3243]  COND FALSE  !(revert)
[L3246]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2154]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2139]              assume msgsender_MSG != null;
[L2140]              Balance[this] := 0;
[L2154]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2155]  COND FALSE  !(revert)
[L3246]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3247]  COND FALSE  !(revert)
[L3250]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2248]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2186]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2171]              assume msgsender_MSG != null;
[L2172]              Balance[this] := 0;
[L2186]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2187]  COND FALSE  !(revert)
[L2248]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2249]  COND FALSE  !(revert)
[L2252]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2154]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2139]              assume msgsender_MSG != null;
[L2140]              Balance[this] := 0;
[L2154]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2155]  COND FALSE  !(revert)
[L2252]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2253]  COND FALSE  !(revert)
[L2256]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2220]              assume msgsender_MSG != null;
[L2221]              Balance[this] := 0;
[L2222]              _balances_ERC20[this] := zeroRefintArr();
[L2223]              sum__balances0[this] := 0;
[L2224]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2225]              sum__allowances1[this] := 0;
[L2226]              _totalSupply_ERC20[this] := 0;
[L2256]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2257]  COND FALSE  !(revert)
[L3250]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3251]  COND FALSE  !(revert)
[L3254]  CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -868984158, 934069305, 18);
[L3012]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2154]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2139]              assume msgsender_MSG != null;
[L2140]              Balance[this] := 0;
[L2154]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2155]  COND FALSE  !(revert)
[L3012]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3013]  COND FALSE  !(revert)
[L3016]  CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s484, symbol_s484, decimals_s484);
[L2987]              assume msgsender_MSG != null;
[L2988]              Balance[this] := 0;
[L2989]              _name_ERC20Detailed[this] := 1252836592;
[L2990]              _symbol_ERC20Detailed[this] := 1252836592;
[L2991]              _decimals_ERC20Detailed[this] := 0;
[L2993]              _name_ERC20Detailed[this] := name_s484;
[L2994]              _symbol_ERC20Detailed[this] := symbol_s484;
[L2995]              _decimals_ERC20Detailed[this] := decimals_s484;
[L3016]  RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s484, symbol_s484, decimals_s484);
[L3017]  COND FALSE  !(revert)
[L3254]  RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -868984158, 934069305, 18);
[L3255]  COND FALSE  !(revert)
[L3258]  CALL        call YFV_YFV_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3208]              assume msgsender_MSG != null;
[L3209]              Balance[this] := 0;
[L3210]              governance_YFV[this] := null;
[L3211]              minters_YFV[this] := zeroRefboolArr();
[L3213]              governance_YFV[this] := msgsender_MSG;
[L3258]  RET         call YFV_YFV_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3259]  COND FALSE  !(revert)
[L1125]  RET         call YFV_YFV__success(this, msgsender_MSG, msgvalue_MSG);
[L1126]              assume !revert && gas >= 0;
[L4987]  RET         call YFV_YFV(this, msgsender_MSG, msgvalue_MSG);
[L4988]              assume !revert && gas >= 0;
[L4991]  CALL        call CorralChoice_YFV(this);
[L4804]              havoc msgsender_MSG;
[L4805]              havoc msgvalue_MSG;
[L4806]              havoc choice;
[L4807]              havoc __ret_0_totalSupply;
[L4808]              havoc account_s121;
[L4809]              havoc __ret_0_balanceOf;
[L4810]              havoc recipient_s140;
[L4811]              havoc amount_s140;
[L4812]              havoc __ret_0_transfer;
[L4813]              havoc owner_s156;
[L4814]              havoc spender_s156;
[L4815]              havoc __ret_0_allowance;
[L4816]              havoc spender_s175;
[L4817]              havoc amount_s175;
[L4818]              havoc __ret_0_approve;
[L4819]              havoc sender_s211;
[L4820]              havoc recipient_s211;
[L4821]              havoc amount_s211;
[L4822]              havoc __ret_0_transferFrom;
[L4823]              havoc spender_s238;
[L4824]              havoc addedValue_s238;
[L4825]              havoc __ret_0_increaseAllowance;
[L4826]              havoc spender_s266;
[L4827]              havoc subtractedValue_s266;
[L4828]              havoc __ret_0_decreaseAllowance;
[L4829]              havoc name_s484;
[L4830]              havoc symbol_s484;
[L4831]              havoc decimals_s484;
[L4832]              havoc __ret_0_name;
[L4833]              havoc __ret_0_symbol;
[L4834]              havoc __ret_0_decimals;
[L4835]              havoc __ret_0_governance;
[L4836]              havoc arg744_s0;
[L4837]              havoc __ret_0_minters;
[L4838]              havoc account_s671;
[L4839]              havoc amount_s671;
[L4840]              havoc amount_s683;
[L4841]              havoc _governance_s701;
[L4842]              havoc _minter_s721;
[L4843]              havoc _minter_s741;
[L4844]              havoc tmpNow;
[L4845]              havoc gas;
[L4846]              assume gas > 4000000 && gas <= 8000000;
[L4847]              tmpNow := now;
[L4848]              havoc now;
[L4849]              assume now > tmpNow;
[L4850]              assume msgsender_MSG != null;
[L4851]              assume DType[msgsender_MSG] != IERC20;
[L4852]              assume DType[msgsender_MSG] != Context;
[L4853]              assume DType[msgsender_MSG] != ERC20;
[L4854]              assume DType[msgsender_MSG] != ERC20Detailed;
[L4855]              assume DType[msgsender_MSG] != SafeMath;
[L4856]              assume DType[msgsender_MSG] != YFV;
[L4857]              Alloc[msgsender_MSG] := true;
[L4858]  COND FALSE  !(choice == 18)
[L4864]  COND FALSE  !(choice == 17)
[L4870]  COND FALSE  !(choice == 16)
[L4877]  COND FALSE  !(choice == 15)
[L4883]  COND FALSE  !(choice == 14)
[L4890]  COND FALSE  !(choice == 13)
[L4897]  COND FALSE  !(choice == 12)
[L4904]  COND FALSE  !(choice == 11)
[L4911]  COND FALSE  !(choice == 10)
[L4917]  COND FALSE  !(choice == 9)
[L4923]  COND FALSE  !(choice == 8)
[L4929]  COND FALSE  !(choice == 7)
[L4935]  COND FALSE  !(choice == 6)
[L4941]  COND FALSE  !(choice == 5)
[L4948]  COND TRUE   choice == 4
[L4949]              gas := gas - 21000;
[L4950]  COND TRUE   gas >= 0
[L4951]              assume amount_s683 >= 0 && amount_s683 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4952]              assume msgvalue_MSG == 0;
[L4953]  CALL        call burn~uint256_YFV(this, msgsender_MSG, msgvalue_MSG, amount_s683);
[L1220]              havoc __exception;
[L1221]              revert := false;
[L1222]  COND FALSE  !(__exception)
[L1247]  CALL        call burn~uint256_YFV__success(this, msgsender_MSG, msgvalue_MSG, amount_s683);
[L3310]  COND TRUE   DType[this] == YFV
[L3311]  CALL        call _burn~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, amount_s683);
[L2911]              __var_19 := null;
[L2912]  COND FALSE  !(!(account_s411 != null))
[L2916]  CALL        call __var_20 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s411], amount_s411, 392639254);
[L3129]  COND FALSE  !(!(b_s561 <= a_s561))
[L3133]              c_s561 := (a_s561 - b_s561) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3134]              __ret_0_ := c_s561;
[L2916]  RET         call __var_20 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s411], amount_s411, 392639254);
[L2917]  COND FALSE  !(revert)
[L2920]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s411];
[L2921]              _balances_ERC20[this][account_s411] := __var_20;
[L2922]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s411];
[L2923]  CALL        call __var_21 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s411, 1252836592);
[L3129]  COND FALSE  !(!(b_s561 <= a_s561))
[L3133]              c_s561 := (a_s561 - b_s561) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3134]              __ret_0_ := c_s561;
[L2923]  RET         call __var_21 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s411, 1252836592);
[L2924]  COND FALSE  !(revert)
[L2927]              _totalSupply_ERC20[this] := __var_21;
[L2928]              assert { :EventEmitted "Transfer_ERC20" } true;
[L3311]  RET         call _burn~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, amount_s683);
[L3312]  COND FALSE  !(revert)
[L1247]  RET         call burn~uint256_YFV__success(this, msgsender_MSG, msgvalue_MSG, amount_s683);
[L1248]              assume !revert && gas >= 0;
[L4953]  RET         call burn~uint256_YFV(this, msgsender_MSG, msgvalue_MSG, amount_s683);
[L4991]  RET         call CorralChoice_YFV(this);
[L4991]  CALL        call CorralChoice_YFV(this);
[L4804]              havoc msgsender_MSG;
[L4805]              havoc msgvalue_MSG;
[L4806]              havoc choice;
[L4807]              havoc __ret_0_totalSupply;
[L4808]              havoc account_s121;
[L4809]              havoc __ret_0_balanceOf;
[L4810]              havoc recipient_s140;
[L4811]              havoc amount_s140;
[L4812]              havoc __ret_0_transfer;
[L4813]              havoc owner_s156;
[L4814]              havoc spender_s156;
[L4815]              havoc __ret_0_allowance;
[L4816]              havoc spender_s175;
[L4817]              havoc amount_s175;
[L4818]              havoc __ret_0_approve;
[L4819]              havoc sender_s211;
[L4820]              havoc recipient_s211;
[L4821]              havoc amount_s211;
[L4822]              havoc __ret_0_transferFrom;
[L4823]              havoc spender_s238;
[L4824]              havoc addedValue_s238;
[L4825]              havoc __ret_0_increaseAllowance;
[L4826]              havoc spender_s266;
[L4827]              havoc subtractedValue_s266;
[L4828]              havoc __ret_0_decreaseAllowance;
[L4829]              havoc name_s484;
[L4830]              havoc symbol_s484;
[L4831]              havoc decimals_s484;
[L4832]              havoc __ret_0_name;
[L4833]              havoc __ret_0_symbol;
[L4834]              havoc __ret_0_decimals;
[L4835]              havoc __ret_0_governance;
[L4836]              havoc arg744_s0;
[L4837]              havoc __ret_0_minters;
[L4838]              havoc account_s671;
[L4839]              havoc amount_s671;
[L4840]              havoc amount_s683;
[L4841]              havoc _governance_s701;
[L4842]              havoc _minter_s721;
[L4843]              havoc _minter_s741;
[L4844]              havoc tmpNow;
[L4845]              havoc gas;
[L4846]              assume gas > 4000000 && gas <= 8000000;
[L4847]              tmpNow := now;
[L4848]              havoc now;
[L4849]              assume now > tmpNow;
[L4850]              assume msgsender_MSG != null;
[L4851]              assume DType[msgsender_MSG] != IERC20;
[L4852]              assume DType[msgsender_MSG] != Context;
[L4853]              assume DType[msgsender_MSG] != ERC20;
[L4854]              assume DType[msgsender_MSG] != ERC20Detailed;
[L4855]              assume DType[msgsender_MSG] != SafeMath;
[L4856]              assume DType[msgsender_MSG] != YFV;
[L4857]              Alloc[msgsender_MSG] := true;
[L4858]  COND FALSE  !(choice == 18)
[L4864]  COND FALSE  !(choice == 17)
[L4870]  COND FALSE  !(choice == 16)
[L4877]  COND FALSE  !(choice == 15)
[L4883]  COND TRUE   choice == 14
[L4884]              gas := gas - 21000;
[L4885]  COND TRUE   gas >= 0
[L4886]              assume amount_s175 >= 0 && amount_s175 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4887]              assume msgvalue_MSG == 0;
[L4888]  CALL        call __ret_0_approve := approve~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, spender_s175, amount_s175);
[L510]               havoc __exception;
[L511]               revert := false;
[L512]   COND FALSE  !(__exception)
[L537]   CALL        call __ret_0_ := approve~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, spender_s175, amount_s175);
[L2400]  COND TRUE   DType[this] == YFV
[L2401]  CALL        call __var_2 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2200]              __ret_0_ := msgsender_MSG;
[L2401]  RET         call __var_2 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2402]  COND FALSE  !(revert)
[L2413]  COND TRUE   DType[this] == YFV
[L2414]  CALL        call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_2, spender_s175, amount_s175);
[L2954]              __var_22 := null;
[L2955]  COND FALSE  !(!(owner_s453 != null))
[L2959]              __var_23 := null;
[L2960]  COND FALSE  !(!(spender_s453 != null))
[L2964]              sum__allowances1[owner_s453] := sum__allowances1[owner_s453] - _allowances_ERC20[this][owner_s453][spender_s453];
[L2965]              _allowances_ERC20[this][owner_s453][spender_s453] := amount_s453;
[L2966]              sum__allowances1[owner_s453] := sum__allowances1[owner_s453] + _allowances_ERC20[this][owner_s453][spender_s453];
[L2967]              assert { :EventEmitted "Approval_ERC20" } true;
[L2414]  RET         call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_2, spender_s175, amount_s175);
[L2415]  COND FALSE  !(revert)
[L2426]              __ret_0_ := true;
[L537]   RET         call __ret_0_ := approve~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, spender_s175, amount_s175);
[L538]               assume !revert && gas >= 0;
[L4888]  RET         call __ret_0_approve := approve~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, spender_s175, amount_s175);
[L4991]  RET         call CorralChoice_YFV(this);
[L4991]  CALL        call CorralChoice_YFV(this);
[L4804]              havoc msgsender_MSG;
[L4805]              havoc msgvalue_MSG;
[L4806]              havoc choice;
[L4807]              havoc __ret_0_totalSupply;
[L4808]              havoc account_s121;
[L4809]              havoc __ret_0_balanceOf;
[L4810]              havoc recipient_s140;
[L4811]              havoc amount_s140;
[L4812]              havoc __ret_0_transfer;
[L4813]              havoc owner_s156;
[L4814]              havoc spender_s156;
[L4815]              havoc __ret_0_allowance;
[L4816]              havoc spender_s175;
[L4817]              havoc amount_s175;
[L4818]              havoc __ret_0_approve;
[L4819]              havoc sender_s211;
[L4820]              havoc recipient_s211;
[L4821]              havoc amount_s211;
[L4822]              havoc __ret_0_transferFrom;
[L4823]              havoc spender_s238;
[L4824]              havoc addedValue_s238;
[L4825]              havoc __ret_0_increaseAllowance;
[L4826]              havoc spender_s266;
[L4827]              havoc subtractedValue_s266;
[L4828]              havoc __ret_0_decreaseAllowance;
[L4829]              havoc name_s484;
[L4830]              havoc symbol_s484;
[L4831]              havoc decimals_s484;
[L4832]              havoc __ret_0_name;
[L4833]              havoc __ret_0_symbol;
[L4834]              havoc __ret_0_decimals;
[L4835]              havoc __ret_0_governance;
[L4836]              havoc arg744_s0;
[L4837]              havoc __ret_0_minters;
[L4838]              havoc account_s671;
[L4839]              havoc amount_s671;
[L4840]              havoc amount_s683;
[L4841]              havoc _governance_s701;
[L4842]              havoc _minter_s721;
[L4843]              havoc _minter_s741;
[L4844]              havoc tmpNow;
[L4845]              havoc gas;
[L4846]              assume gas > 4000000 && gas <= 8000000;
[L4847]              tmpNow := now;
[L4848]              havoc now;
[L4849]              assume now > tmpNow;
[L4850]              assume msgsender_MSG != null;
[L4851]              assume DType[msgsender_MSG] != IERC20;
[L4852]              assume DType[msgsender_MSG] != Context;
[L4853]              assume DType[msgsender_MSG] != ERC20;
[L4854]              assume DType[msgsender_MSG] != ERC20Detailed;
[L4855]              assume DType[msgsender_MSG] != SafeMath;
[L4856]              assume DType[msgsender_MSG] != YFV;
[L4857]              Alloc[msgsender_MSG] := true;
[L4858]  COND FALSE  !(choice == 18)
[L4864]  COND FALSE  !(choice == 17)
[L4870]  COND FALSE  !(choice == 16)
[L4877]  COND FALSE  !(choice == 15)
[L4883]  COND FALSE  !(choice == 14)
[L4890]  COND TRUE   choice == 13
[L4891]              gas := gas - 21000;
[L4892]  COND TRUE   gas >= 0
[L4893]              assume amount_s211 >= 0 && amount_s211 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4894]              assume msgvalue_MSG == 0;
[L4895]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, sender_s211, recipient_s211, amount_s211);
[L572]               havoc __exception;
[L573]               revert := false;
[L574]   COND FALSE  !(__exception)
[L599]   CALL        call __ret_0_ := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s211, recipient_s211, amount_s211);
[L2500]  COND TRUE   DType[this] == YFV
[L2501]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s211, recipient_s211, amount_s211);
[L2806]              __var_12 := null;
[L2807]  COND FALSE  !(!(sender_s323 != null))
[L2811]              __var_13 := null;
[L2812]  COND FALSE  !(!(recipient_s323 != null))
[L2816]  CALL        call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s323], amount_s323, -806116454);
[L3129]  COND FALSE  !(!(b_s561 <= a_s561))
[L3133]              c_s561 := (a_s561 - b_s561) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3134]              __ret_0_ := c_s561;
[L2816]  RET         call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s323], amount_s323, -806116454);
[L2817]  COND FALSE  !(revert)
[L2820]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s323];
[L2821]              _balances_ERC20[this][sender_s323] := __var_14;
[L2822]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s323];
[L2823]  CALL        call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s323], amount_s323);
[L3105]              c_s534 := (a_s534 + b_s534) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3106]  COND FALSE  !(!(c_s534 >= a_s534))
[L3110]              __ret_0_ := c_s534;
[L2823]  RET         call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s323], amount_s323);
[L2824]  COND FALSE  !(revert)
[L2827]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s323];
[L2828]              _balances_ERC20[this][recipient_s323] := __var_15;
[L2829]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s323];
[L2830]              assert { :EventEmitted "Transfer_ERC20" } true;
[L2501]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s211, recipient_s211, amount_s211);
[L2502]  COND FALSE  !(revert)
[L2513]  COND TRUE   DType[this] == YFV
[L2514]  CALL        call __var_3 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2200]              __ret_0_ := msgsender_MSG;
[L2514]  RET         call __var_3 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2515]  COND FALSE  !(revert)
[L2526]  COND TRUE   DType[this] == YFV
[L2527]  CALL        call __var_5 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2200]              __ret_0_ := msgsender_MSG;
[L2527]  RET         call __var_5 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2528]  COND FALSE  !(revert)
[L2539]  CALL        call __var_4 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s211][__var_5], amount_s211, -2057360831);
[L3129]  COND FALSE  !(!(b_s561 <= a_s561))
[L3133]              c_s561 := (a_s561 - b_s561) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3134]              __ret_0_ := c_s561;
[L2539]  RET         call __var_4 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s211][__var_5], amount_s211, -2057360831);
[L2540]  COND FALSE  !(revert)
[L2543]  COND TRUE   DType[this] == YFV
[L2544]  CALL        call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s211, __var_3, __var_4);
[L2954]              __var_22 := null;
[L2955]  COND FALSE  !(!(owner_s453 != null))
[L2959]              __var_23 := null;
[L2960]  COND FALSE  !(!(spender_s453 != null))
[L2964]              sum__allowances1[owner_s453] := sum__allowances1[owner_s453] - _allowances_ERC20[this][owner_s453][spender_s453];
[L2965]              _allowances_ERC20[this][owner_s453][spender_s453] := amount_s453;
[L2966]              sum__allowances1[owner_s453] := sum__allowances1[owner_s453] + _allowances_ERC20[this][owner_s453][spender_s453];
[L2967]              assert { :EventEmitted "Approval_ERC20" } true;
[L2544]  RET         call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s211, __var_3, __var_4);
[L2545]  COND FALSE  !(revert)
[L2556]              __ret_0_ := true;
[L599]   RET         call __ret_0_ := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s211, recipient_s211, amount_s211);
[L600]               assume !revert && gas >= 0;
[L4895]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, sender_s211, recipient_s211, amount_s211);
[L4991]  RET         call CorralChoice_YFV(this);
[L4991]  CALL        call CorralChoice_YFV(this);
[L4804]              havoc msgsender_MSG;
[L4805]              havoc msgvalue_MSG;
[L4806]              havoc choice;
[L4807]              havoc __ret_0_totalSupply;
[L4808]              havoc account_s121;
[L4809]              havoc __ret_0_balanceOf;
[L4810]              havoc recipient_s140;
[L4811]              havoc amount_s140;
[L4812]              havoc __ret_0_transfer;
[L4813]              havoc owner_s156;
[L4814]              havoc spender_s156;
[L4815]              havoc __ret_0_allowance;
[L4816]              havoc spender_s175;
[L4817]              havoc amount_s175;
[L4818]              havoc __ret_0_approve;
[L4819]              havoc sender_s211;
[L4820]              havoc recipient_s211;
[L4821]              havoc amount_s211;
[L4822]              havoc __ret_0_transferFrom;
[L4823]              havoc spender_s238;
[L4824]              havoc addedValue_s238;
[L4825]              havoc __ret_0_increaseAllowance;
[L4826]              havoc spender_s266;
[L4827]              havoc subtractedValue_s266;
[L4828]              havoc __ret_0_decreaseAllowance;
[L4829]              havoc name_s484;
[L4830]              havoc symbol_s484;
[L4831]              havoc decimals_s484;
[L4832]              havoc __ret_0_name;
[L4833]              havoc __ret_0_symbol;
[L4834]              havoc __ret_0_decimals;
[L4835]              havoc __ret_0_governance;
[L4836]              havoc arg744_s0;
[L4837]              havoc __ret_0_minters;
[L4838]              havoc account_s671;
[L4839]              havoc amount_s671;
[L4840]              havoc amount_s683;
[L4841]              havoc _governance_s701;
[L4842]              havoc _minter_s721;
[L4843]              havoc _minter_s741;
[L4844]              havoc tmpNow;
[L4845]              havoc gas;
[L4846]              assume gas > 4000000 && gas <= 8000000;
[L4847]              tmpNow := now;
[L4848]              havoc now;
[L4849]              assume now > tmpNow;
[L4850]              assume msgsender_MSG != null;
[L4851]              assume DType[msgsender_MSG] != IERC20;
[L4852]              assume DType[msgsender_MSG] != Context;
[L4853]              assume DType[msgsender_MSG] != ERC20;
[L4854]              assume DType[msgsender_MSG] != ERC20Detailed;
[L4855]              assume DType[msgsender_MSG] != SafeMath;
[L4856]              assume DType[msgsender_MSG] != YFV;
[L4857]              Alloc[msgsender_MSG] := true;
[L4858]  COND FALSE  !(choice == 18)
[L4864]  COND FALSE  !(choice == 17)
[L4870]  COND TRUE   choice == 16
[L4871]              gas := gas - 21000;
[L4872]  COND TRUE   gas >= 0
[L4873]              assume amount_s140 >= 0 && amount_s140 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4874]              assume msgvalue_MSG == 0;
[L4875]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == recipient_s140 && amount_s140 <= _balances_ERC20[this][msgsender_MSG]) && amount_s140 >= 0) && amount_s140 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s140] >= 0) && _balances_ERC20[this][recipient_s140] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC200 := true;
[L2]                 call_transfer_ERC200 := false;
[L2]                 revert := revert_hold;
[L392]               havoc __exception;
[L393]               revert := false;
[L394]   COND FALSE  !(__exception)
[L419]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L2322]  COND TRUE   DType[this] == YFV
[L2323]  CALL        call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2200]              __ret_0_ := msgsender_MSG;
[L2323]  RET         call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2324]  COND FALSE  !(revert)
[L2335]  COND TRUE   DType[this] == YFV
[L2336]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s140, amount_s140);
[L2806]              __var_12 := null;
[L2807]  COND FALSE  !(!(sender_s323 != null))
[L2811]              __var_13 := null;
[L2812]  COND FALSE  !(!(recipient_s323 != null))
[L2816]  CALL        call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s323], amount_s323, -806116454);
[L3129]  COND FALSE  !(!(b_s561 <= a_s561))
[L3133]              c_s561 := (a_s561 - b_s561) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3134]              __ret_0_ := c_s561;
[L2816]  RET         call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s323], amount_s323, -806116454);
[L2817]  COND FALSE  !(revert)
[L2820]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s323];
[L2821]              _balances_ERC20[this][sender_s323] := __var_14;
[L2822]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s323];
[L2823]  CALL        call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s323], amount_s323);
[L3105]              c_s534 := (a_s534 + b_s534) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3106]  COND FALSE  !(!(c_s534 >= a_s534))
[L3110]              __ret_0_ := c_s534;
[L2823]  RET         call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s323], amount_s323);
[L2824]  COND FALSE  !(revert)
[L2827]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s323];
[L2828]              _balances_ERC20[this][recipient_s323] := __var_15;
[L2829]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s323];
[L2830]              assert { :EventEmitted "Transfer_ERC20" } true;
[L2336]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s140, amount_s140);
[L2337]  COND FALSE  !(revert)
[L2348]              __ret_0_ := true;
[L419]   RET         call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L420]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !((((((((__ret_0_ == true && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowances_ERC20[this] == old(_allowances_ERC20[this])) && governance_YFV[this] == old(governance_YFV[this])) && minters_YFV[this] == old(minters_YFV[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]));
[L2]                 revert := revert_hold;
[L4875]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L4991]  RET         call CorralChoice_YFV(this);

Loop:
[L4991]  CALL        call CorralChoice_YFV(this);
[L4804]              havoc msgsender_MSG;
[L4805]              havoc msgvalue_MSG;
[L4806]              havoc choice;
[L4807]              havoc __ret_0_totalSupply;
[L4808]              havoc account_s121;
[L4809]              havoc __ret_0_balanceOf;
[L4810]              havoc recipient_s140;
[L4811]              havoc amount_s140;
[L4812]              havoc __ret_0_transfer;
[L4813]              havoc owner_s156;
[L4814]              havoc spender_s156;
[L4815]              havoc __ret_0_allowance;
[L4816]              havoc spender_s175;
[L4817]              havoc amount_s175;
[L4818]              havoc __ret_0_approve;
[L4819]              havoc sender_s211;
[L4820]              havoc recipient_s211;
[L4821]              havoc amount_s211;
[L4822]              havoc __ret_0_transferFrom;
[L4823]              havoc spender_s238;
[L4824]              havoc addedValue_s238;
[L4825]              havoc __ret_0_increaseAllowance;
[L4826]              havoc spender_s266;
[L4827]              havoc subtractedValue_s266;
[L4828]              havoc __ret_0_decreaseAllowance;
[L4829]              havoc name_s484;
[L4830]              havoc symbol_s484;
[L4831]              havoc decimals_s484;
[L4832]              havoc __ret_0_name;
[L4833]              havoc __ret_0_symbol;
[L4834]              havoc __ret_0_decimals;
[L4835]              havoc __ret_0_governance;
[L4836]              havoc arg744_s0;
[L4837]              havoc __ret_0_minters;
[L4838]              havoc account_s671;
[L4839]              havoc amount_s671;
[L4840]              havoc amount_s683;
[L4841]              havoc _governance_s701;
[L4842]              havoc _minter_s721;
[L4843]              havoc _minter_s741;
[L4844]              havoc tmpNow;
[L4845]              havoc gas;
[L4846]              assume gas > 4000000 && gas <= 8000000;
[L4847]              tmpNow := now;
[L4848]              havoc now;
[L4849]              assume now > tmpNow;
[L4850]              assume msgsender_MSG != null;
[L4851]              assume DType[msgsender_MSG] != IERC20;
[L4852]              assume DType[msgsender_MSG] != Context;
[L4853]              assume DType[msgsender_MSG] != ERC20;
[L4854]              assume DType[msgsender_MSG] != ERC20Detailed;
[L4855]              assume DType[msgsender_MSG] != SafeMath;
[L4856]              assume DType[msgsender_MSG] != YFV;
[L4857]              Alloc[msgsender_MSG] := true;
[L4858]  COND TRUE   choice == 18
[L4859]              gas := gas - 21000;
[L4860]  COND FALSE  !(gas >= 0)
[L4991]  RET         call CorralChoice_YFV(this);

[2020-11-25 09:38:22,246 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 09:38:22,246 INFO  L82        PathProgramCache]: Analyzing trace with hash 1740432813, now seen corresponding path program 1 times
[2020-11-25 09:38:22,246 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 09:38:22,294 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 09:38:24,259 INFO  L134       CoverageAnalysis]: Checked inductivity of 459 backedges. 7 proven. 200 refuted. 0 times theorem prover too weak. 252 trivial. 0 not checked.
[2020-11-25 09:38:24,259 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 09:38:24,259 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [53] total 53
[2020-11-25 09:38:24,260 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 09:38:24,260 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 54 interpolants.
[2020-11-25 09:38:24,261 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=167, Invalid=2695, Unknown=0, NotChecked=0, Total=2862
[2020-11-25 09:38:24,261 INFO  L87              Difference]: Start difference. First operand 3194 states and 3832 transitions. cyclomatic complexity: 664 Second operand 54 states.
[2020-11-25 09:38:37,108 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 09:38:37,108 INFO  L93              Difference]: Finished difference Result 3655 states and 4641 transitions.
[2020-11-25 09:38:37,109 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 50 states. 
[2020-11-25 09:38:37,109 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 3655 states and 4641 transitions.
[2020-11-25 09:38:37,120 INFO  L131   ngComponentsAnalysis]: Automaton has 8 accepting balls. 16
[2020-11-25 09:38:37,133 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 3655 states to 3655 states and 4641 transitions.
[2020-11-25 09:38:37,133 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 908
[2020-11-25 09:38:37,133 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 908
[2020-11-25 09:38:37,133 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 3655 states and 4641 transitions.
[2020-11-25 09:38:37,137 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 09:38:37,137 INFO  L728         BuchiCegarLoop]: Abstraction has 3655 states and 4641 transitions.
[2020-11-25 09:38:37,140 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 3655 states and 4641 transitions.
[2020-11-25 09:38:37,158 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 3655 to 3202.
[2020-11-25 09:38:37,159 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 3202 states.
[2020-11-25 09:38:37,164 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 3202 states to 3202 states and 3866 transitions.
[2020-11-25 09:38:37,164 INFO  L751         BuchiCegarLoop]: Abstraction has 3202 states and 3866 transitions.
[2020-11-25 09:38:37,164 INFO  L631         BuchiCegarLoop]: Abstraction has 3202 states and 3866 transitions.
[2020-11-25 09:38:37,164 INFO  L445         BuchiCegarLoop]: ======== Iteration 21============
[2020-11-25 09:38:37,164 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 3202 states and 3866 transitions.
[2020-11-25 09:38:37,168 INFO  L131   ngComponentsAnalysis]: Automaton has 4 accepting balls. 8
[2020-11-25 09:38:37,168 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 09:38:37,168 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 09:38:37,169 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 09:38:37,169 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_ERC200 := false;
[L2]                 call_transfer_ERC200 := false;
[L2]     CALL        call main();
[L4981]              assume null == 0;
[L4982]  CALL        call this := FreshRefGenerator__success();
[L2122]              havoc newRef;
[L2123]              assume Alloc[newRef] == false;
[L2124]              Alloc[newRef] := true;
[L2125]              assume newRef != null;
[L4982]  RET         call this := FreshRefGenerator__success();
[L4983]              assume now >= 0;
[L4984]              assume DType[this] == YFV;
[L4985]              assume msgvalue_MSG == 0;
[L4986]              gas := gas - 53000;
[L4987]  CALL        call YFV_YFV(this, msgsender_MSG, msgvalue_MSG);
[L1098]              havoc __exception;
[L1099]              revert := false;
[L1100]  COND FALSE  !(__exception)
[L1125]  CALL        call YFV_YFV__success(this, msgsender_MSG, msgvalue_MSG);
[L3242]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2186]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2171]              assume msgsender_MSG != null;
[L2172]              Balance[this] := 0;
[L2186]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2187]  COND FALSE  !(revert)
[L3242]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3243]  COND FALSE  !(revert)
[L3246]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2154]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2139]              assume msgsender_MSG != null;
[L2140]              Balance[this] := 0;
[L2154]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2155]  COND FALSE  !(revert)
[L3246]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3247]  COND FALSE  !(revert)
[L3250]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2248]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2186]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2171]              assume msgsender_MSG != null;
[L2172]              Balance[this] := 0;
[L2186]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2187]  COND FALSE  !(revert)
[L2248]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2249]  COND FALSE  !(revert)
[L2252]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2154]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2139]              assume msgsender_MSG != null;
[L2140]              Balance[this] := 0;
[L2154]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2155]  COND FALSE  !(revert)
[L2252]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2253]  COND FALSE  !(revert)
[L2256]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2220]              assume msgsender_MSG != null;
[L2221]              Balance[this] := 0;
[L2222]              _balances_ERC20[this] := zeroRefintArr();
[L2223]              sum__balances0[this] := 0;
[L2224]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2225]              sum__allowances1[this] := 0;
[L2226]              _totalSupply_ERC20[this] := 0;
[L2256]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2257]  COND FALSE  !(revert)
[L3250]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3251]  COND FALSE  !(revert)
[L3254]  CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -868984158, 934069305, 18);
[L3012]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2154]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2139]              assume msgsender_MSG != null;
[L2140]              Balance[this] := 0;
[L2154]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2155]  COND FALSE  !(revert)
[L3012]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3013]  COND FALSE  !(revert)
[L3016]  CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s484, symbol_s484, decimals_s484);
[L2987]              assume msgsender_MSG != null;
[L2988]              Balance[this] := 0;
[L2989]              _name_ERC20Detailed[this] := 1252836592;
[L2990]              _symbol_ERC20Detailed[this] := 1252836592;
[L2991]              _decimals_ERC20Detailed[this] := 0;
[L2993]              _name_ERC20Detailed[this] := name_s484;
[L2994]              _symbol_ERC20Detailed[this] := symbol_s484;
[L2995]              _decimals_ERC20Detailed[this] := decimals_s484;
[L3016]  RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s484, symbol_s484, decimals_s484);
[L3017]  COND FALSE  !(revert)
[L3254]  RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -868984158, 934069305, 18);
[L3255]  COND FALSE  !(revert)
[L3258]  CALL        call YFV_YFV_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3208]              assume msgsender_MSG != null;
[L3209]              Balance[this] := 0;
[L3210]              governance_YFV[this] := null;
[L3211]              minters_YFV[this] := zeroRefboolArr();
[L3213]              governance_YFV[this] := msgsender_MSG;
[L3258]  RET         call YFV_YFV_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3259]  COND FALSE  !(revert)
[L1125]  RET         call YFV_YFV__success(this, msgsender_MSG, msgvalue_MSG);
[L1126]              assume !revert && gas >= 0;
[L4987]  RET         call YFV_YFV(this, msgsender_MSG, msgvalue_MSG);
[L4988]              assume !revert && gas >= 0;
[L4991]  CALL        call CorralChoice_YFV(this);
[L4804]              havoc msgsender_MSG;
[L4805]              havoc msgvalue_MSG;
[L4806]              havoc choice;
[L4807]              havoc __ret_0_totalSupply;
[L4808]              havoc account_s121;
[L4809]              havoc __ret_0_balanceOf;
[L4810]              havoc recipient_s140;
[L4811]              havoc amount_s140;
[L4812]              havoc __ret_0_transfer;
[L4813]              havoc owner_s156;
[L4814]              havoc spender_s156;
[L4815]              havoc __ret_0_allowance;
[L4816]              havoc spender_s175;
[L4817]              havoc amount_s175;
[L4818]              havoc __ret_0_approve;
[L4819]              havoc sender_s211;
[L4820]              havoc recipient_s211;
[L4821]              havoc amount_s211;
[L4822]              havoc __ret_0_transferFrom;
[L4823]              havoc spender_s238;
[L4824]              havoc addedValue_s238;
[L4825]              havoc __ret_0_increaseAllowance;
[L4826]              havoc spender_s266;
[L4827]              havoc subtractedValue_s266;
[L4828]              havoc __ret_0_decreaseAllowance;
[L4829]              havoc name_s484;
[L4830]              havoc symbol_s484;
[L4831]              havoc decimals_s484;
[L4832]              havoc __ret_0_name;
[L4833]              havoc __ret_0_symbol;
[L4834]              havoc __ret_0_decimals;
[L4835]              havoc __ret_0_governance;
[L4836]              havoc arg744_s0;
[L4837]              havoc __ret_0_minters;
[L4838]              havoc account_s671;
[L4839]              havoc amount_s671;
[L4840]              havoc amount_s683;
[L4841]              havoc _governance_s701;
[L4842]              havoc _minter_s721;
[L4843]              havoc _minter_s741;
[L4844]              havoc tmpNow;
[L4845]              havoc gas;
[L4846]              assume gas > 4000000 && gas <= 8000000;
[L4847]              tmpNow := now;
[L4848]              havoc now;
[L4849]              assume now > tmpNow;
[L4850]              assume msgsender_MSG != null;
[L4851]              assume DType[msgsender_MSG] != IERC20;
[L4852]              assume DType[msgsender_MSG] != Context;
[L4853]              assume DType[msgsender_MSG] != ERC20;
[L4854]              assume DType[msgsender_MSG] != ERC20Detailed;
[L4855]              assume DType[msgsender_MSG] != SafeMath;
[L4856]              assume DType[msgsender_MSG] != YFV;
[L4857]              Alloc[msgsender_MSG] := true;
[L4858]  COND FALSE  !(choice == 18)
[L4864]  COND FALSE  !(choice == 17)
[L4870]  COND TRUE   choice == 16
[L4871]              gas := gas - 21000;
[L4872]  COND TRUE   gas >= 0
[L4873]              assume amount_s140 >= 0 && amount_s140 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4874]              assume msgvalue_MSG == 0;
[L4875]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == recipient_s140 && amount_s140 <= _balances_ERC20[this][msgsender_MSG]) && amount_s140 >= 0) && amount_s140 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s140] >= 0) && _balances_ERC20[this][recipient_s140] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC200 := true;
[L2]                 call_transfer_ERC200 := false;
[L2]                 revert := revert_hold;
[L392]               havoc __exception;
[L393]               revert := false;
[L394]   COND FALSE  !(__exception)
[L419]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L2322]  COND TRUE   DType[this] == YFV
[L2323]  CALL        call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2200]              __ret_0_ := msgsender_MSG;
[L2323]  RET         call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2324]  COND FALSE  !(revert)
[L2335]  COND TRUE   DType[this] == YFV
[L2336]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s140, amount_s140);
[L2806]              __var_12 := null;
[L2807]  COND FALSE  !(!(sender_s323 != null))
[L2811]              __var_13 := null;
[L2812]  COND FALSE  !(!(recipient_s323 != null))
[L2816]  CALL        call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s323], amount_s323, -806116454);
[L3129]  COND FALSE  !(!(b_s561 <= a_s561))
[L3133]              c_s561 := (a_s561 - b_s561) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3134]              __ret_0_ := c_s561;
[L2816]  RET         call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s323], amount_s323, -806116454);
[L2817]  COND FALSE  !(revert)
[L2820]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s323];
[L2821]              _balances_ERC20[this][sender_s323] := __var_14;
[L2822]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s323];
[L2823]  CALL        call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s323], amount_s323);
[L3105]              c_s534 := (a_s534 + b_s534) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3106]  COND FALSE  !(!(c_s534 >= a_s534))
[L3110]              __ret_0_ := c_s534;
[L2823]  RET         call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s323], amount_s323);
[L2824]  COND FALSE  !(revert)
[L2827]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s323];
[L2828]              _balances_ERC20[this][recipient_s323] := __var_15;
[L2829]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s323];
[L2830]              assert { :EventEmitted "Transfer_ERC20" } true;
[L2336]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s140, amount_s140);
[L2337]  COND FALSE  !(revert)
[L2348]              __ret_0_ := true;
[L419]   RET         call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L420]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume (((((((__ret_0_ == true && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowances_ERC20[this] == old(_allowances_ERC20[this])) && governance_YFV[this] == old(governance_YFV[this])) && minters_YFV[this] == old(minters_YFV[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]);
[L2]                 success_transfer_ERC200 := true;
[L2]                 success_transfer_ERC200 := false;
[L2]                 revert := revert_hold;
[L4875]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L4991]  RET         call CorralChoice_YFV(this);
[L4991]  CALL        call CorralChoice_YFV(this);
[L4804]              havoc msgsender_MSG;
[L4805]              havoc msgvalue_MSG;
[L4806]              havoc choice;
[L4807]              havoc __ret_0_totalSupply;
[L4808]              havoc account_s121;
[L4809]              havoc __ret_0_balanceOf;
[L4810]              havoc recipient_s140;
[L4811]              havoc amount_s140;
[L4812]              havoc __ret_0_transfer;
[L4813]              havoc owner_s156;
[L4814]              havoc spender_s156;
[L4815]              havoc __ret_0_allowance;
[L4816]              havoc spender_s175;
[L4817]              havoc amount_s175;
[L4818]              havoc __ret_0_approve;
[L4819]              havoc sender_s211;
[L4820]              havoc recipient_s211;
[L4821]              havoc amount_s211;
[L4822]              havoc __ret_0_transferFrom;
[L4823]              havoc spender_s238;
[L4824]              havoc addedValue_s238;
[L4825]              havoc __ret_0_increaseAllowance;
[L4826]              havoc spender_s266;
[L4827]              havoc subtractedValue_s266;
[L4828]              havoc __ret_0_decreaseAllowance;
[L4829]              havoc name_s484;
[L4830]              havoc symbol_s484;
[L4831]              havoc decimals_s484;
[L4832]              havoc __ret_0_name;
[L4833]              havoc __ret_0_symbol;
[L4834]              havoc __ret_0_decimals;
[L4835]              havoc __ret_0_governance;
[L4836]              havoc arg744_s0;
[L4837]              havoc __ret_0_minters;
[L4838]              havoc account_s671;
[L4839]              havoc amount_s671;
[L4840]              havoc amount_s683;
[L4841]              havoc _governance_s701;
[L4842]              havoc _minter_s721;
[L4843]              havoc _minter_s741;
[L4844]              havoc tmpNow;
[L4845]              havoc gas;
[L4846]              assume gas > 4000000 && gas <= 8000000;
[L4847]              tmpNow := now;
[L4848]              havoc now;
[L4849]              assume now > tmpNow;
[L4850]              assume msgsender_MSG != null;
[L4851]              assume DType[msgsender_MSG] != IERC20;
[L4852]              assume DType[msgsender_MSG] != Context;
[L4853]              assume DType[msgsender_MSG] != ERC20;
[L4854]              assume DType[msgsender_MSG] != ERC20Detailed;
[L4855]              assume DType[msgsender_MSG] != SafeMath;
[L4856]              assume DType[msgsender_MSG] != YFV;
[L4857]              Alloc[msgsender_MSG] := true;
[L4858]  COND FALSE  !(choice == 18)
[L4864]  COND FALSE  !(choice == 17)
[L4870]  COND FALSE  !(choice == 16)
[L4877]  COND FALSE  !(choice == 15)
[L4883]  COND FALSE  !(choice == 14)
[L4890]  COND TRUE   choice == 13
[L4891]              gas := gas - 21000;
[L4892]  COND TRUE   gas >= 0
[L4893]              assume amount_s211 >= 0 && amount_s211 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4894]              assume msgvalue_MSG == 0;
[L4895]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, sender_s211, recipient_s211, amount_s211);
[L572]               havoc __exception;
[L573]               revert := false;
[L574]   COND FALSE  !(__exception)
[L599]   CALL        call __ret_0_ := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s211, recipient_s211, amount_s211);
[L2500]  COND TRUE   DType[this] == YFV
[L2501]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s211, recipient_s211, amount_s211);
[L2806]              __var_12 := null;
[L2807]  COND FALSE  !(!(sender_s323 != null))
[L2811]              __var_13 := null;
[L2812]  COND FALSE  !(!(recipient_s323 != null))
[L2816]  CALL        call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s323], amount_s323, -806116454);
[L3129]  COND FALSE  !(!(b_s561 <= a_s561))
[L3133]              c_s561 := (a_s561 - b_s561) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3134]              __ret_0_ := c_s561;
[L2816]  RET         call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s323], amount_s323, -806116454);
[L2817]  COND FALSE  !(revert)
[L2820]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s323];
[L2821]              _balances_ERC20[this][sender_s323] := __var_14;
[L2822]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s323];
[L2823]  CALL        call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s323], amount_s323);
[L3105]              c_s534 := (a_s534 + b_s534) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3106]  COND FALSE  !(!(c_s534 >= a_s534))
[L3110]              __ret_0_ := c_s534;
[L2823]  RET         call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s323], amount_s323);
[L2824]  COND FALSE  !(revert)
[L2827]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s323];
[L2828]              _balances_ERC20[this][recipient_s323] := __var_15;
[L2829]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s323];
[L2830]              assert { :EventEmitted "Transfer_ERC20" } true;
[L2501]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s211, recipient_s211, amount_s211);
[L2502]  COND FALSE  !(revert)
[L2513]  COND TRUE   DType[this] == YFV
[L2514]  CALL        call __var_3 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2200]              __ret_0_ := msgsender_MSG;
[L2514]  RET         call __var_3 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2515]  COND FALSE  !(revert)
[L2526]  COND TRUE   DType[this] == YFV
[L2527]  CALL        call __var_5 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2200]              __ret_0_ := msgsender_MSG;
[L2527]  RET         call __var_5 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2528]  COND FALSE  !(revert)
[L2539]  CALL        call __var_4 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s211][__var_5], amount_s211, -2057360831);
[L3129]  COND FALSE  !(!(b_s561 <= a_s561))
[L3133]              c_s561 := (a_s561 - b_s561) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3134]              __ret_0_ := c_s561;
[L2539]  RET         call __var_4 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s211][__var_5], amount_s211, -2057360831);
[L2540]  COND FALSE  !(revert)
[L2543]  COND TRUE   DType[this] == YFV
[L2544]  CALL        call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s211, __var_3, __var_4);
[L2954]              __var_22 := null;
[L2955]  COND FALSE  !(!(owner_s453 != null))
[L2959]              __var_23 := null;
[L2960]  COND FALSE  !(!(spender_s453 != null))
[L2964]              sum__allowances1[owner_s453] := sum__allowances1[owner_s453] - _allowances_ERC20[this][owner_s453][spender_s453];
[L2965]              _allowances_ERC20[this][owner_s453][spender_s453] := amount_s453;
[L2966]              sum__allowances1[owner_s453] := sum__allowances1[owner_s453] + _allowances_ERC20[this][owner_s453][spender_s453];
[L2967]              assert { :EventEmitted "Approval_ERC20" } true;
[L2544]  RET         call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s211, __var_3, __var_4);
[L2545]  COND FALSE  !(revert)
[L2556]              __ret_0_ := true;
[L599]   RET         call __ret_0_ := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s211, recipient_s211, amount_s211);
[L600]               assume !revert && gas >= 0;
[L4895]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, sender_s211, recipient_s211, amount_s211);
[L4991]  RET         call CorralChoice_YFV(this);
[L4991]  CALL        call CorralChoice_YFV(this);
[L4804]              havoc msgsender_MSG;
[L4805]              havoc msgvalue_MSG;
[L4806]              havoc choice;
[L4807]              havoc __ret_0_totalSupply;
[L4808]              havoc account_s121;
[L4809]              havoc __ret_0_balanceOf;
[L4810]              havoc recipient_s140;
[L4811]              havoc amount_s140;
[L4812]              havoc __ret_0_transfer;
[L4813]              havoc owner_s156;
[L4814]              havoc spender_s156;
[L4815]              havoc __ret_0_allowance;
[L4816]              havoc spender_s175;
[L4817]              havoc amount_s175;
[L4818]              havoc __ret_0_approve;
[L4819]              havoc sender_s211;
[L4820]              havoc recipient_s211;
[L4821]              havoc amount_s211;
[L4822]              havoc __ret_0_transferFrom;
[L4823]              havoc spender_s238;
[L4824]              havoc addedValue_s238;
[L4825]              havoc __ret_0_increaseAllowance;
[L4826]              havoc spender_s266;
[L4827]              havoc subtractedValue_s266;
[L4828]              havoc __ret_0_decreaseAllowance;
[L4829]              havoc name_s484;
[L4830]              havoc symbol_s484;
[L4831]              havoc decimals_s484;
[L4832]              havoc __ret_0_name;
[L4833]              havoc __ret_0_symbol;
[L4834]              havoc __ret_0_decimals;
[L4835]              havoc __ret_0_governance;
[L4836]              havoc arg744_s0;
[L4837]              havoc __ret_0_minters;
[L4838]              havoc account_s671;
[L4839]              havoc amount_s671;
[L4840]              havoc amount_s683;
[L4841]              havoc _governance_s701;
[L4842]              havoc _minter_s721;
[L4843]              havoc _minter_s741;
[L4844]              havoc tmpNow;
[L4845]              havoc gas;
[L4846]              assume gas > 4000000 && gas <= 8000000;
[L4847]              tmpNow := now;
[L4848]              havoc now;
[L4849]              assume now > tmpNow;
[L4850]              assume msgsender_MSG != null;
[L4851]              assume DType[msgsender_MSG] != IERC20;
[L4852]              assume DType[msgsender_MSG] != Context;
[L4853]              assume DType[msgsender_MSG] != ERC20;
[L4854]              assume DType[msgsender_MSG] != ERC20Detailed;
[L4855]              assume DType[msgsender_MSG] != SafeMath;
[L4856]              assume DType[msgsender_MSG] != YFV;
[L4857]              Alloc[msgsender_MSG] := true;
[L4858]  COND FALSE  !(choice == 18)
[L4864]  COND FALSE  !(choice == 17)
[L4870]  COND TRUE   choice == 16
[L4871]              gas := gas - 21000;
[L4872]  COND TRUE   gas >= 0
[L4873]              assume amount_s140 >= 0 && amount_s140 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4874]              assume msgvalue_MSG == 0;
[L4875]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == recipient_s140 && amount_s140 <= _balances_ERC20[this][msgsender_MSG]) && amount_s140 >= 0) && amount_s140 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s140] >= 0) && _balances_ERC20[this][recipient_s140] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC200 := true;
[L2]                 call_transfer_ERC200 := false;
[L2]                 revert := revert_hold;
[L392]               havoc __exception;
[L393]               revert := false;
[L394]   COND FALSE  !(__exception)
[L419]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L2322]  COND TRUE   DType[this] == YFV
[L2323]  CALL        call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2200]              __ret_0_ := msgsender_MSG;
[L2323]  RET         call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2324]  COND FALSE  !(revert)
[L2335]  COND TRUE   DType[this] == YFV
[L2336]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s140, amount_s140);
[L2806]              __var_12 := null;
[L2807]  COND FALSE  !(!(sender_s323 != null))
[L2811]              __var_13 := null;
[L2812]  COND FALSE  !(!(recipient_s323 != null))
[L2816]  CALL        call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s323], amount_s323, -806116454);
[L3129]  COND FALSE  !(!(b_s561 <= a_s561))
[L3133]              c_s561 := (a_s561 - b_s561) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3134]              __ret_0_ := c_s561;
[L2816]  RET         call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s323], amount_s323, -806116454);
[L2817]  COND FALSE  !(revert)
[L2820]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s323];
[L2821]              _balances_ERC20[this][sender_s323] := __var_14;
[L2822]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s323];
[L2823]  CALL        call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s323], amount_s323);
[L3105]              c_s534 := (a_s534 + b_s534) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3106]  COND FALSE  !(!(c_s534 >= a_s534))
[L3110]              __ret_0_ := c_s534;
[L2823]  RET         call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s323], amount_s323);
[L2824]  COND FALSE  !(revert)
[L2827]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s323];
[L2828]              _balances_ERC20[this][recipient_s323] := __var_15;
[L2829]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s323];
[L2830]              assert { :EventEmitted "Transfer_ERC20" } true;
[L2336]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s140, amount_s140);
[L2337]  COND FALSE  !(revert)
[L2348]              __ret_0_ := true;
[L419]   RET         call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L420]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !((((((((__ret_0_ == true && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowances_ERC20[this] == old(_allowances_ERC20[this])) && governance_YFV[this] == old(governance_YFV[this])) && minters_YFV[this] == old(minters_YFV[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]));
[L2]                 revert := revert_hold;
[L4875]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L4991]  RET         call CorralChoice_YFV(this);

Loop:
[L4991]  CALL        call CorralChoice_YFV(this);
[L4804]              havoc msgsender_MSG;
[L4805]              havoc msgvalue_MSG;
[L4806]              havoc choice;
[L4807]              havoc __ret_0_totalSupply;
[L4808]              havoc account_s121;
[L4809]              havoc __ret_0_balanceOf;
[L4810]              havoc recipient_s140;
[L4811]              havoc amount_s140;
[L4812]              havoc __ret_0_transfer;
[L4813]              havoc owner_s156;
[L4814]              havoc spender_s156;
[L4815]              havoc __ret_0_allowance;
[L4816]              havoc spender_s175;
[L4817]              havoc amount_s175;
[L4818]              havoc __ret_0_approve;
[L4819]              havoc sender_s211;
[L4820]              havoc recipient_s211;
[L4821]              havoc amount_s211;
[L4822]              havoc __ret_0_transferFrom;
[L4823]              havoc spender_s238;
[L4824]              havoc addedValue_s238;
[L4825]              havoc __ret_0_increaseAllowance;
[L4826]              havoc spender_s266;
[L4827]              havoc subtractedValue_s266;
[L4828]              havoc __ret_0_decreaseAllowance;
[L4829]              havoc name_s484;
[L4830]              havoc symbol_s484;
[L4831]              havoc decimals_s484;
[L4832]              havoc __ret_0_name;
[L4833]              havoc __ret_0_symbol;
[L4834]              havoc __ret_0_decimals;
[L4835]              havoc __ret_0_governance;
[L4836]              havoc arg744_s0;
[L4837]              havoc __ret_0_minters;
[L4838]              havoc account_s671;
[L4839]              havoc amount_s671;
[L4840]              havoc amount_s683;
[L4841]              havoc _governance_s701;
[L4842]              havoc _minter_s721;
[L4843]              havoc _minter_s741;
[L4844]              havoc tmpNow;
[L4845]              havoc gas;
[L4846]              assume gas > 4000000 && gas <= 8000000;
[L4847]              tmpNow := now;
[L4848]              havoc now;
[L4849]              assume now > tmpNow;
[L4850]              assume msgsender_MSG != null;
[L4851]              assume DType[msgsender_MSG] != IERC20;
[L4852]              assume DType[msgsender_MSG] != Context;
[L4853]              assume DType[msgsender_MSG] != ERC20;
[L4854]              assume DType[msgsender_MSG] != ERC20Detailed;
[L4855]              assume DType[msgsender_MSG] != SafeMath;
[L4856]              assume DType[msgsender_MSG] != YFV;
[L4857]              Alloc[msgsender_MSG] := true;
[L4858]  COND TRUE   choice == 18
[L4859]              gas := gas - 21000;
[L4860]  COND FALSE  !(gas >= 0)
[L4991]  RET         call CorralChoice_YFV(this);

[2020-11-25 09:38:37,172 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 09:38:37,172 INFO  L82        PathProgramCache]: Analyzing trace with hash -1527032680, now seen corresponding path program 1 times
[2020-11-25 09:38:37,173 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 09:38:37,203 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 09:38:37,957 INFO  L134       CoverageAnalysis]: Checked inductivity of 280 backedges. 32 proven. 9 refuted. 0 times theorem prover too weak. 239 trivial. 0 not checked.
[2020-11-25 09:38:37,957 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 09:38:37,957 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [40] total 40
[2020-11-25 09:38:37,958 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 09:38:37,958 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 41 interpolants.
[2020-11-25 09:38:37,958 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=140, Invalid=1500, Unknown=0, NotChecked=0, Total=1640
[2020-11-25 09:38:37,958 INFO  L87              Difference]: Start difference. First operand 3202 states and 3866 transitions. cyclomatic complexity: 694 Second operand 41 states.
[2020-11-25 09:38:45,088 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 09:38:45,089 INFO  L93              Difference]: Finished difference Result 3251 states and 4018 transitions.
[2020-11-25 09:38:45,089 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 33 states. 
[2020-11-25 09:38:45,089 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 3251 states and 4018 transitions.
[2020-11-25 09:38:45,097 INFO  L131   ngComponentsAnalysis]: Automaton has 4 accepting balls. 8
[2020-11-25 09:38:45,106 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 3251 states to 3251 states and 4018 transitions.
[2020-11-25 09:38:45,106 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 718
[2020-11-25 09:38:45,107 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 718
[2020-11-25 09:38:45,107 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 3251 states and 4018 transitions.
[2020-11-25 09:38:45,110 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 09:38:45,110 INFO  L728         BuchiCegarLoop]: Abstraction has 3251 states and 4018 transitions.
[2020-11-25 09:38:45,111 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 3251 states and 4018 transitions.
[2020-11-25 09:38:45,126 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 3251 to 3218.
[2020-11-25 09:38:45,126 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 3218 states.
[2020-11-25 09:38:45,131 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 3218 states to 3218 states and 3930 transitions.
[2020-11-25 09:38:45,131 INFO  L751         BuchiCegarLoop]: Abstraction has 3218 states and 3930 transitions.
[2020-11-25 09:38:45,132 INFO  L631         BuchiCegarLoop]: Abstraction has 3218 states and 3930 transitions.
[2020-11-25 09:38:45,132 INFO  L445         BuchiCegarLoop]: ======== Iteration 22============
[2020-11-25 09:38:45,132 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 3218 states and 3930 transitions.
[2020-11-25 09:38:45,135 INFO  L131   ngComponentsAnalysis]: Automaton has 4 accepting balls. 8
[2020-11-25 09:38:45,135 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 09:38:45,135 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 09:38:45,136 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 09:38:45,136 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_ERC200 := false;
[L2]                 call_transfer_ERC200 := false;
[L2]     CALL        call main();
[L4981]              assume null == 0;
[L4982]  CALL        call this := FreshRefGenerator__success();
[L2122]              havoc newRef;
[L2123]              assume Alloc[newRef] == false;
[L2124]              Alloc[newRef] := true;
[L2125]              assume newRef != null;
[L4982]  RET         call this := FreshRefGenerator__success();
[L4983]              assume now >= 0;
[L4984]              assume DType[this] == YFV;
[L4985]              assume msgvalue_MSG == 0;
[L4986]              gas := gas - 53000;
[L4987]  CALL        call YFV_YFV(this, msgsender_MSG, msgvalue_MSG);
[L1098]              havoc __exception;
[L1099]              revert := false;
[L1100]  COND FALSE  !(__exception)
[L1125]  CALL        call YFV_YFV__success(this, msgsender_MSG, msgvalue_MSG);
[L3242]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2186]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2171]              assume msgsender_MSG != null;
[L2172]              Balance[this] := 0;
[L2186]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2187]  COND FALSE  !(revert)
[L3242]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3243]  COND FALSE  !(revert)
[L3246]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2154]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2139]              assume msgsender_MSG != null;
[L2140]              Balance[this] := 0;
[L2154]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2155]  COND FALSE  !(revert)
[L3246]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3247]  COND FALSE  !(revert)
[L3250]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2248]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2186]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2171]              assume msgsender_MSG != null;
[L2172]              Balance[this] := 0;
[L2186]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2187]  COND FALSE  !(revert)
[L2248]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2249]  COND FALSE  !(revert)
[L2252]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2154]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2139]              assume msgsender_MSG != null;
[L2140]              Balance[this] := 0;
[L2154]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2155]  COND FALSE  !(revert)
[L2252]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2253]  COND FALSE  !(revert)
[L2256]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2220]              assume msgsender_MSG != null;
[L2221]              Balance[this] := 0;
[L2222]              _balances_ERC20[this] := zeroRefintArr();
[L2223]              sum__balances0[this] := 0;
[L2224]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2225]              sum__allowances1[this] := 0;
[L2226]              _totalSupply_ERC20[this] := 0;
[L2256]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2257]  COND FALSE  !(revert)
[L3250]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3251]  COND FALSE  !(revert)
[L3254]  CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -868984158, 934069305, 18);
[L3012]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2154]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2139]              assume msgsender_MSG != null;
[L2140]              Balance[this] := 0;
[L2154]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2155]  COND FALSE  !(revert)
[L3012]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3013]  COND FALSE  !(revert)
[L3016]  CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s484, symbol_s484, decimals_s484);
[L2987]              assume msgsender_MSG != null;
[L2988]              Balance[this] := 0;
[L2989]              _name_ERC20Detailed[this] := 1252836592;
[L2990]              _symbol_ERC20Detailed[this] := 1252836592;
[L2991]              _decimals_ERC20Detailed[this] := 0;
[L2993]              _name_ERC20Detailed[this] := name_s484;
[L2994]              _symbol_ERC20Detailed[this] := symbol_s484;
[L2995]              _decimals_ERC20Detailed[this] := decimals_s484;
[L3016]  RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s484, symbol_s484, decimals_s484);
[L3017]  COND FALSE  !(revert)
[L3254]  RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -868984158, 934069305, 18);
[L3255]  COND FALSE  !(revert)
[L3258]  CALL        call YFV_YFV_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3208]              assume msgsender_MSG != null;
[L3209]              Balance[this] := 0;
[L3210]              governance_YFV[this] := null;
[L3211]              minters_YFV[this] := zeroRefboolArr();
[L3213]              governance_YFV[this] := msgsender_MSG;
[L3258]  RET         call YFV_YFV_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3259]  COND FALSE  !(revert)
[L1125]  RET         call YFV_YFV__success(this, msgsender_MSG, msgvalue_MSG);
[L1126]              assume !revert && gas >= 0;
[L4987]  RET         call YFV_YFV(this, msgsender_MSG, msgvalue_MSG);
[L4988]              assume !revert && gas >= 0;
[L4991]  CALL        call CorralChoice_YFV(this);
[L4804]              havoc msgsender_MSG;
[L4805]              havoc msgvalue_MSG;
[L4806]              havoc choice;
[L4807]              havoc __ret_0_totalSupply;
[L4808]              havoc account_s121;
[L4809]              havoc __ret_0_balanceOf;
[L4810]              havoc recipient_s140;
[L4811]              havoc amount_s140;
[L4812]              havoc __ret_0_transfer;
[L4813]              havoc owner_s156;
[L4814]              havoc spender_s156;
[L4815]              havoc __ret_0_allowance;
[L4816]              havoc spender_s175;
[L4817]              havoc amount_s175;
[L4818]              havoc __ret_0_approve;
[L4819]              havoc sender_s211;
[L4820]              havoc recipient_s211;
[L4821]              havoc amount_s211;
[L4822]              havoc __ret_0_transferFrom;
[L4823]              havoc spender_s238;
[L4824]              havoc addedValue_s238;
[L4825]              havoc __ret_0_increaseAllowance;
[L4826]              havoc spender_s266;
[L4827]              havoc subtractedValue_s266;
[L4828]              havoc __ret_0_decreaseAllowance;
[L4829]              havoc name_s484;
[L4830]              havoc symbol_s484;
[L4831]              havoc decimals_s484;
[L4832]              havoc __ret_0_name;
[L4833]              havoc __ret_0_symbol;
[L4834]              havoc __ret_0_decimals;
[L4835]              havoc __ret_0_governance;
[L4836]              havoc arg744_s0;
[L4837]              havoc __ret_0_minters;
[L4838]              havoc account_s671;
[L4839]              havoc amount_s671;
[L4840]              havoc amount_s683;
[L4841]              havoc _governance_s701;
[L4842]              havoc _minter_s721;
[L4843]              havoc _minter_s741;
[L4844]              havoc tmpNow;
[L4845]              havoc gas;
[L4846]              assume gas > 4000000 && gas <= 8000000;
[L4847]              tmpNow := now;
[L4848]              havoc now;
[L4849]              assume now > tmpNow;
[L4850]              assume msgsender_MSG != null;
[L4851]              assume DType[msgsender_MSG] != IERC20;
[L4852]              assume DType[msgsender_MSG] != Context;
[L4853]              assume DType[msgsender_MSG] != ERC20;
[L4854]              assume DType[msgsender_MSG] != ERC20Detailed;
[L4855]              assume DType[msgsender_MSG] != SafeMath;
[L4856]              assume DType[msgsender_MSG] != YFV;
[L4857]              Alloc[msgsender_MSG] := true;
[L4858]  COND FALSE  !(choice == 18)
[L4864]  COND FALSE  !(choice == 17)
[L4870]  COND FALSE  !(choice == 16)
[L4877]  COND FALSE  !(choice == 15)
[L4883]  COND FALSE  !(choice == 14)
[L4890]  COND FALSE  !(choice == 13)
[L4897]  COND FALSE  !(choice == 12)
[L4904]  COND FALSE  !(choice == 11)
[L4911]  COND FALSE  !(choice == 10)
[L4917]  COND FALSE  !(choice == 9)
[L4923]  COND FALSE  !(choice == 8)
[L4929]  COND FALSE  !(choice == 7)
[L4935]  COND FALSE  !(choice == 6)
[L4941]  COND FALSE  !(choice == 5)
[L4948]  COND TRUE   choice == 4
[L4949]              gas := gas - 21000;
[L4950]  COND TRUE   gas >= 0
[L4951]              assume amount_s683 >= 0 && amount_s683 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4952]              assume msgvalue_MSG == 0;
[L4953]  CALL        call burn~uint256_YFV(this, msgsender_MSG, msgvalue_MSG, amount_s683);
[L1220]              havoc __exception;
[L1221]              revert := false;
[L1222]  COND FALSE  !(__exception)
[L1247]  CALL        call burn~uint256_YFV__success(this, msgsender_MSG, msgvalue_MSG, amount_s683);
[L3310]  COND TRUE   DType[this] == YFV
[L3311]  CALL        call _burn~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, amount_s683);
[L2911]              __var_19 := null;
[L2912]  COND FALSE  !(!(account_s411 != null))
[L2916]  CALL        call __var_20 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s411], amount_s411, 392639254);
[L3129]  COND FALSE  !(!(b_s561 <= a_s561))
[L3133]              c_s561 := (a_s561 - b_s561) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3134]              __ret_0_ := c_s561;
[L2916]  RET         call __var_20 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s411], amount_s411, 392639254);
[L2917]  COND FALSE  !(revert)
[L2920]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s411];
[L2921]              _balances_ERC20[this][account_s411] := __var_20;
[L2922]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s411];
[L2923]  CALL        call __var_21 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s411, 1252836592);
[L3129]  COND FALSE  !(!(b_s561 <= a_s561))
[L3133]              c_s561 := (a_s561 - b_s561) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3134]              __ret_0_ := c_s561;
[L2923]  RET         call __var_21 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s411, 1252836592);
[L2924]  COND FALSE  !(revert)
[L2927]              _totalSupply_ERC20[this] := __var_21;
[L2928]              assert { :EventEmitted "Transfer_ERC20" } true;
[L3311]  RET         call _burn~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, amount_s683);
[L3312]  COND FALSE  !(revert)
[L1247]  RET         call burn~uint256_YFV__success(this, msgsender_MSG, msgvalue_MSG, amount_s683);
[L1248]              assume !revert && gas >= 0;
[L4953]  RET         call burn~uint256_YFV(this, msgsender_MSG, msgvalue_MSG, amount_s683);
[L4991]  RET         call CorralChoice_YFV(this);
[L4991]  CALL        call CorralChoice_YFV(this);
[L4804]              havoc msgsender_MSG;
[L4805]              havoc msgvalue_MSG;
[L4806]              havoc choice;
[L4807]              havoc __ret_0_totalSupply;
[L4808]              havoc account_s121;
[L4809]              havoc __ret_0_balanceOf;
[L4810]              havoc recipient_s140;
[L4811]              havoc amount_s140;
[L4812]              havoc __ret_0_transfer;
[L4813]              havoc owner_s156;
[L4814]              havoc spender_s156;
[L4815]              havoc __ret_0_allowance;
[L4816]              havoc spender_s175;
[L4817]              havoc amount_s175;
[L4818]              havoc __ret_0_approve;
[L4819]              havoc sender_s211;
[L4820]              havoc recipient_s211;
[L4821]              havoc amount_s211;
[L4822]              havoc __ret_0_transferFrom;
[L4823]              havoc spender_s238;
[L4824]              havoc addedValue_s238;
[L4825]              havoc __ret_0_increaseAllowance;
[L4826]              havoc spender_s266;
[L4827]              havoc subtractedValue_s266;
[L4828]              havoc __ret_0_decreaseAllowance;
[L4829]              havoc name_s484;
[L4830]              havoc symbol_s484;
[L4831]              havoc decimals_s484;
[L4832]              havoc __ret_0_name;
[L4833]              havoc __ret_0_symbol;
[L4834]              havoc __ret_0_decimals;
[L4835]              havoc __ret_0_governance;
[L4836]              havoc arg744_s0;
[L4837]              havoc __ret_0_minters;
[L4838]              havoc account_s671;
[L4839]              havoc amount_s671;
[L4840]              havoc amount_s683;
[L4841]              havoc _governance_s701;
[L4842]              havoc _minter_s721;
[L4843]              havoc _minter_s741;
[L4844]              havoc tmpNow;
[L4845]              havoc gas;
[L4846]              assume gas > 4000000 && gas <= 8000000;
[L4847]              tmpNow := now;
[L4848]              havoc now;
[L4849]              assume now > tmpNow;
[L4850]              assume msgsender_MSG != null;
[L4851]              assume DType[msgsender_MSG] != IERC20;
[L4852]              assume DType[msgsender_MSG] != Context;
[L4853]              assume DType[msgsender_MSG] != ERC20;
[L4854]              assume DType[msgsender_MSG] != ERC20Detailed;
[L4855]              assume DType[msgsender_MSG] != SafeMath;
[L4856]              assume DType[msgsender_MSG] != YFV;
[L4857]              Alloc[msgsender_MSG] := true;
[L4858]  COND FALSE  !(choice == 18)
[L4864]  COND FALSE  !(choice == 17)
[L4870]  COND TRUE   choice == 16
[L4871]              gas := gas - 21000;
[L4872]  COND TRUE   gas >= 0
[L4873]              assume amount_s140 >= 0 && amount_s140 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4874]              assume msgvalue_MSG == 0;
[L4875]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((msgsender_MSG == recipient_s140 && amount_s140 <= _balances_ERC20[this][msgsender_MSG]) && amount_s140 >= 0) && amount_s140 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s140] >= 0) && _balances_ERC20[this][recipient_s140] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2]                 revert := revert_hold;
[L392]               havoc __exception;
[L393]               revert := false;
[L394]   COND FALSE  !(__exception)
[L419]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L2322]  COND TRUE   DType[this] == YFV
[L2323]  CALL        call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2200]              __ret_0_ := msgsender_MSG;
[L2323]  RET         call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2324]  COND FALSE  !(revert)
[L2335]  COND TRUE   DType[this] == YFV
[L2336]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s140, amount_s140);
[L2806]              __var_12 := null;
[L2807]  COND FALSE  !(!(sender_s323 != null))
[L2811]              __var_13 := null;
[L2812]  COND FALSE  !(!(recipient_s323 != null))
[L2816]  CALL        call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s323], amount_s323, -806116454);
[L3129]  COND FALSE  !(!(b_s561 <= a_s561))
[L3133]              c_s561 := (a_s561 - b_s561) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3134]              __ret_0_ := c_s561;
[L2816]  RET         call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s323], amount_s323, -806116454);
[L2817]  COND FALSE  !(revert)
[L2820]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s323];
[L2821]              _balances_ERC20[this][sender_s323] := __var_14;
[L2822]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s323];
[L2823]  CALL        call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s323], amount_s323);
[L3105]              c_s534 := (a_s534 + b_s534) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3106]  COND FALSE  !(!(c_s534 >= a_s534))
[L3110]              __ret_0_ := c_s534;
[L2823]  RET         call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s323], amount_s323);
[L2824]  COND FALSE  !(revert)
[L2827]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s323];
[L2828]              _balances_ERC20[this][recipient_s323] := __var_15;
[L2829]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s323];
[L2830]              assert { :EventEmitted "Transfer_ERC20" } true;
[L2336]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s140, amount_s140);
[L2337]  COND FALSE  !(revert)
[L2348]              __ret_0_ := true;
[L419]   RET         call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L420]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume (((((((__ret_0_ == true && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowances_ERC20[this] == old(_allowances_ERC20[this])) && governance_YFV[this] == old(governance_YFV[this])) && minters_YFV[this] == old(minters_YFV[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]);
[L2]                 success_transfer_ERC200 := true;
[L2]                 success_transfer_ERC200 := false;
[L2]                 revert := revert_hold;
[L4875]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L4991]  RET         call CorralChoice_YFV(this);
[L4991]  CALL        call CorralChoice_YFV(this);
[L4804]              havoc msgsender_MSG;
[L4805]              havoc msgvalue_MSG;
[L4806]              havoc choice;
[L4807]              havoc __ret_0_totalSupply;
[L4808]              havoc account_s121;
[L4809]              havoc __ret_0_balanceOf;
[L4810]              havoc recipient_s140;
[L4811]              havoc amount_s140;
[L4812]              havoc __ret_0_transfer;
[L4813]              havoc owner_s156;
[L4814]              havoc spender_s156;
[L4815]              havoc __ret_0_allowance;
[L4816]              havoc spender_s175;
[L4817]              havoc amount_s175;
[L4818]              havoc __ret_0_approve;
[L4819]              havoc sender_s211;
[L4820]              havoc recipient_s211;
[L4821]              havoc amount_s211;
[L4822]              havoc __ret_0_transferFrom;
[L4823]              havoc spender_s238;
[L4824]              havoc addedValue_s238;
[L4825]              havoc __ret_0_increaseAllowance;
[L4826]              havoc spender_s266;
[L4827]              havoc subtractedValue_s266;
[L4828]              havoc __ret_0_decreaseAllowance;
[L4829]              havoc name_s484;
[L4830]              havoc symbol_s484;
[L4831]              havoc decimals_s484;
[L4832]              havoc __ret_0_name;
[L4833]              havoc __ret_0_symbol;
[L4834]              havoc __ret_0_decimals;
[L4835]              havoc __ret_0_governance;
[L4836]              havoc arg744_s0;
[L4837]              havoc __ret_0_minters;
[L4838]              havoc account_s671;
[L4839]              havoc amount_s671;
[L4840]              havoc amount_s683;
[L4841]              havoc _governance_s701;
[L4842]              havoc _minter_s721;
[L4843]              havoc _minter_s741;
[L4844]              havoc tmpNow;
[L4845]              havoc gas;
[L4846]              assume gas > 4000000 && gas <= 8000000;
[L4847]              tmpNow := now;
[L4848]              havoc now;
[L4849]              assume now > tmpNow;
[L4850]              assume msgsender_MSG != null;
[L4851]              assume DType[msgsender_MSG] != IERC20;
[L4852]              assume DType[msgsender_MSG] != Context;
[L4853]              assume DType[msgsender_MSG] != ERC20;
[L4854]              assume DType[msgsender_MSG] != ERC20Detailed;
[L4855]              assume DType[msgsender_MSG] != SafeMath;
[L4856]              assume DType[msgsender_MSG] != YFV;
[L4857]              Alloc[msgsender_MSG] := true;
[L4858]  COND FALSE  !(choice == 18)
[L4864]  COND FALSE  !(choice == 17)
[L4870]  COND FALSE  !(choice == 16)
[L4877]  COND FALSE  !(choice == 15)
[L4883]  COND FALSE  !(choice == 14)
[L4890]  COND TRUE   choice == 13
[L4891]              gas := gas - 21000;
[L4892]  COND TRUE   gas >= 0
[L4893]              assume amount_s211 >= 0 && amount_s211 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4894]              assume msgvalue_MSG == 0;
[L4895]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, sender_s211, recipient_s211, amount_s211);
[L572]               havoc __exception;
[L573]               revert := false;
[L574]   COND FALSE  !(__exception)
[L599]   CALL        call __ret_0_ := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s211, recipient_s211, amount_s211);
[L2500]  COND TRUE   DType[this] == YFV
[L2501]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s211, recipient_s211, amount_s211);
[L2806]              __var_12 := null;
[L2807]  COND FALSE  !(!(sender_s323 != null))
[L2811]              __var_13 := null;
[L2812]  COND FALSE  !(!(recipient_s323 != null))
[L2816]  CALL        call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s323], amount_s323, -806116454);
[L3129]  COND FALSE  !(!(b_s561 <= a_s561))
[L3133]              c_s561 := (a_s561 - b_s561) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3134]              __ret_0_ := c_s561;
[L2816]  RET         call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s323], amount_s323, -806116454);
[L2817]  COND FALSE  !(revert)
[L2820]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s323];
[L2821]              _balances_ERC20[this][sender_s323] := __var_14;
[L2822]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s323];
[L2823]  CALL        call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s323], amount_s323);
[L3105]              c_s534 := (a_s534 + b_s534) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3106]  COND FALSE  !(!(c_s534 >= a_s534))
[L3110]              __ret_0_ := c_s534;
[L2823]  RET         call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s323], amount_s323);
[L2824]  COND FALSE  !(revert)
[L2827]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s323];
[L2828]              _balances_ERC20[this][recipient_s323] := __var_15;
[L2829]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s323];
[L2830]              assert { :EventEmitted "Transfer_ERC20" } true;
[L2501]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s211, recipient_s211, amount_s211);
[L2502]  COND FALSE  !(revert)
[L2513]  COND TRUE   DType[this] == YFV
[L2514]  CALL        call __var_3 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2200]              __ret_0_ := msgsender_MSG;
[L2514]  RET         call __var_3 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2515]  COND FALSE  !(revert)
[L2526]  COND TRUE   DType[this] == YFV
[L2527]  CALL        call __var_5 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2200]              __ret_0_ := msgsender_MSG;
[L2527]  RET         call __var_5 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2528]  COND FALSE  !(revert)
[L2539]  CALL        call __var_4 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s211][__var_5], amount_s211, -2057360831);
[L3129]  COND FALSE  !(!(b_s561 <= a_s561))
[L3133]              c_s561 := (a_s561 - b_s561) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3134]              __ret_0_ := c_s561;
[L2539]  RET         call __var_4 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s211][__var_5], amount_s211, -2057360831);
[L2540]  COND FALSE  !(revert)
[L2543]  COND TRUE   DType[this] == YFV
[L2544]  CALL        call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s211, __var_3, __var_4);
[L2954]              __var_22 := null;
[L2955]  COND FALSE  !(!(owner_s453 != null))
[L2959]              __var_23 := null;
[L2960]  COND FALSE  !(!(spender_s453 != null))
[L2964]              sum__allowances1[owner_s453] := sum__allowances1[owner_s453] - _allowances_ERC20[this][owner_s453][spender_s453];
[L2965]              _allowances_ERC20[this][owner_s453][spender_s453] := amount_s453;
[L2966]              sum__allowances1[owner_s453] := sum__allowances1[owner_s453] + _allowances_ERC20[this][owner_s453][spender_s453];
[L2967]              assert { :EventEmitted "Approval_ERC20" } true;
[L2544]  RET         call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s211, __var_3, __var_4);
[L2545]  COND FALSE  !(revert)
[L2556]              __ret_0_ := true;
[L599]   RET         call __ret_0_ := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s211, recipient_s211, amount_s211);
[L600]               assume !revert && gas >= 0;
[L4895]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, sender_s211, recipient_s211, amount_s211);
[L4991]  RET         call CorralChoice_YFV(this);
[L4991]  CALL        call CorralChoice_YFV(this);
[L4804]              havoc msgsender_MSG;
[L4805]              havoc msgvalue_MSG;
[L4806]              havoc choice;
[L4807]              havoc __ret_0_totalSupply;
[L4808]              havoc account_s121;
[L4809]              havoc __ret_0_balanceOf;
[L4810]              havoc recipient_s140;
[L4811]              havoc amount_s140;
[L4812]              havoc __ret_0_transfer;
[L4813]              havoc owner_s156;
[L4814]              havoc spender_s156;
[L4815]              havoc __ret_0_allowance;
[L4816]              havoc spender_s175;
[L4817]              havoc amount_s175;
[L4818]              havoc __ret_0_approve;
[L4819]              havoc sender_s211;
[L4820]              havoc recipient_s211;
[L4821]              havoc amount_s211;
[L4822]              havoc __ret_0_transferFrom;
[L4823]              havoc spender_s238;
[L4824]              havoc addedValue_s238;
[L4825]              havoc __ret_0_increaseAllowance;
[L4826]              havoc spender_s266;
[L4827]              havoc subtractedValue_s266;
[L4828]              havoc __ret_0_decreaseAllowance;
[L4829]              havoc name_s484;
[L4830]              havoc symbol_s484;
[L4831]              havoc decimals_s484;
[L4832]              havoc __ret_0_name;
[L4833]              havoc __ret_0_symbol;
[L4834]              havoc __ret_0_decimals;
[L4835]              havoc __ret_0_governance;
[L4836]              havoc arg744_s0;
[L4837]              havoc __ret_0_minters;
[L4838]              havoc account_s671;
[L4839]              havoc amount_s671;
[L4840]              havoc amount_s683;
[L4841]              havoc _governance_s701;
[L4842]              havoc _minter_s721;
[L4843]              havoc _minter_s741;
[L4844]              havoc tmpNow;
[L4845]              havoc gas;
[L4846]              assume gas > 4000000 && gas <= 8000000;
[L4847]              tmpNow := now;
[L4848]              havoc now;
[L4849]              assume now > tmpNow;
[L4850]              assume msgsender_MSG != null;
[L4851]              assume DType[msgsender_MSG] != IERC20;
[L4852]              assume DType[msgsender_MSG] != Context;
[L4853]              assume DType[msgsender_MSG] != ERC20;
[L4854]              assume DType[msgsender_MSG] != ERC20Detailed;
[L4855]              assume DType[msgsender_MSG] != SafeMath;
[L4856]              assume DType[msgsender_MSG] != YFV;
[L4857]              Alloc[msgsender_MSG] := true;
[L4858]  COND FALSE  !(choice == 18)
[L4864]  COND FALSE  !(choice == 17)
[L4870]  COND TRUE   choice == 16
[L4871]              gas := gas - 21000;
[L4872]  COND TRUE   gas >= 0
[L4873]              assume amount_s140 >= 0 && amount_s140 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4874]              assume msgvalue_MSG == 0;
[L4875]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == recipient_s140 && amount_s140 <= _balances_ERC20[this][msgsender_MSG]) && amount_s140 >= 0) && amount_s140 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s140] >= 0) && _balances_ERC20[this][recipient_s140] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC200 := true;
[L2]                 call_transfer_ERC200 := false;
[L2]                 revert := revert_hold;
[L392]               havoc __exception;
[L393]               revert := false;
[L394]   COND FALSE  !(__exception)
[L419]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L2322]  COND TRUE   DType[this] == YFV
[L2323]  CALL        call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2200]              __ret_0_ := msgsender_MSG;
[L2323]  RET         call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2324]  COND FALSE  !(revert)
[L2335]  COND TRUE   DType[this] == YFV
[L2336]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s140, amount_s140);
[L2806]              __var_12 := null;
[L2807]  COND FALSE  !(!(sender_s323 != null))
[L2811]              __var_13 := null;
[L2812]  COND FALSE  !(!(recipient_s323 != null))
[L2816]  CALL        call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s323], amount_s323, -806116454);
[L3129]  COND FALSE  !(!(b_s561 <= a_s561))
[L3133]              c_s561 := (a_s561 - b_s561) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3134]              __ret_0_ := c_s561;
[L2816]  RET         call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s323], amount_s323, -806116454);
[L2817]  COND FALSE  !(revert)
[L2820]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s323];
[L2821]              _balances_ERC20[this][sender_s323] := __var_14;
[L2822]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s323];
[L2823]  CALL        call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s323], amount_s323);
[L3105]              c_s534 := (a_s534 + b_s534) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3106]  COND FALSE  !(!(c_s534 >= a_s534))
[L3110]              __ret_0_ := c_s534;
[L2823]  RET         call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s323], amount_s323);
[L2824]  COND FALSE  !(revert)
[L2827]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s323];
[L2828]              _balances_ERC20[this][recipient_s323] := __var_15;
[L2829]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s323];
[L2830]              assert { :EventEmitted "Transfer_ERC20" } true;
[L2336]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s140, amount_s140);
[L2337]  COND FALSE  !(revert)
[L2348]              __ret_0_ := true;
[L419]   RET         call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L420]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !((((((((__ret_0_ == true && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowances_ERC20[this] == old(_allowances_ERC20[this])) && governance_YFV[this] == old(governance_YFV[this])) && minters_YFV[this] == old(minters_YFV[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]));
[L2]                 revert := revert_hold;
[L4875]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L4991]  RET         call CorralChoice_YFV(this);

Loop:
[L4991]  CALL        call CorralChoice_YFV(this);
[L4804]              havoc msgsender_MSG;
[L4805]              havoc msgvalue_MSG;
[L4806]              havoc choice;
[L4807]              havoc __ret_0_totalSupply;
[L4808]              havoc account_s121;
[L4809]              havoc __ret_0_balanceOf;
[L4810]              havoc recipient_s140;
[L4811]              havoc amount_s140;
[L4812]              havoc __ret_0_transfer;
[L4813]              havoc owner_s156;
[L4814]              havoc spender_s156;
[L4815]              havoc __ret_0_allowance;
[L4816]              havoc spender_s175;
[L4817]              havoc amount_s175;
[L4818]              havoc __ret_0_approve;
[L4819]              havoc sender_s211;
[L4820]              havoc recipient_s211;
[L4821]              havoc amount_s211;
[L4822]              havoc __ret_0_transferFrom;
[L4823]              havoc spender_s238;
[L4824]              havoc addedValue_s238;
[L4825]              havoc __ret_0_increaseAllowance;
[L4826]              havoc spender_s266;
[L4827]              havoc subtractedValue_s266;
[L4828]              havoc __ret_0_decreaseAllowance;
[L4829]              havoc name_s484;
[L4830]              havoc symbol_s484;
[L4831]              havoc decimals_s484;
[L4832]              havoc __ret_0_name;
[L4833]              havoc __ret_0_symbol;
[L4834]              havoc __ret_0_decimals;
[L4835]              havoc __ret_0_governance;
[L4836]              havoc arg744_s0;
[L4837]              havoc __ret_0_minters;
[L4838]              havoc account_s671;
[L4839]              havoc amount_s671;
[L4840]              havoc amount_s683;
[L4841]              havoc _governance_s701;
[L4842]              havoc _minter_s721;
[L4843]              havoc _minter_s741;
[L4844]              havoc tmpNow;
[L4845]              havoc gas;
[L4846]              assume gas > 4000000 && gas <= 8000000;
[L4847]              tmpNow := now;
[L4848]              havoc now;
[L4849]              assume now > tmpNow;
[L4850]              assume msgsender_MSG != null;
[L4851]              assume DType[msgsender_MSG] != IERC20;
[L4852]              assume DType[msgsender_MSG] != Context;
[L4853]              assume DType[msgsender_MSG] != ERC20;
[L4854]              assume DType[msgsender_MSG] != ERC20Detailed;
[L4855]              assume DType[msgsender_MSG] != SafeMath;
[L4856]              assume DType[msgsender_MSG] != YFV;
[L4857]              Alloc[msgsender_MSG] := true;
[L4858]  COND TRUE   choice == 18
[L4859]              gas := gas - 21000;
[L4860]  COND FALSE  !(gas >= 0)
[L4991]  RET         call CorralChoice_YFV(this);

[2020-11-25 09:38:45,140 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 09:38:45,140 INFO  L82        PathProgramCache]: Analyzing trace with hash -1814972034, now seen corresponding path program 1 times
[2020-11-25 09:38:45,141 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 09:38:45,193 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 09:38:46,843 INFO  L134       CoverageAnalysis]: Checked inductivity of 500 backedges. 33 proven. 338 refuted. 0 times theorem prover too weak. 129 trivial. 0 not checked.
[2020-11-25 09:38:46,843 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 09:38:46,843 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [67] total 67
[2020-11-25 09:38:46,844 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 09:38:46,844 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 68 interpolants.
[2020-11-25 09:38:46,844 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=399, Invalid=4157, Unknown=0, NotChecked=0, Total=4556
[2020-11-25 09:38:46,845 INFO  L87              Difference]: Start difference. First operand 3218 states and 3930 transitions. cyclomatic complexity: 750 Second operand 68 states.
[2020-11-25 09:38:47,243 WARN  L188               SmtUtils]: Spent 107.00 ms on a formula simplification. DAG size of input: 151 DAG size of output: 148
[2020-11-25 09:38:58,031 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 09:38:58,031 INFO  L93              Difference]: Finished difference Result 3508 states and 4538 transitions.
[2020-11-25 09:38:58,031 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 57 states. 
[2020-11-25 09:38:58,031 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 3508 states and 4538 transitions.
[2020-11-25 09:38:58,043 INFO  L131   ngComponentsAnalysis]: Automaton has 6 accepting balls. 12
[2020-11-25 09:38:58,056 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 3508 states to 3508 states and 4538 transitions.
[2020-11-25 09:38:58,056 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 836
[2020-11-25 09:38:58,056 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 836
[2020-11-25 09:38:58,056 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 3508 states and 4538 transitions.
[2020-11-25 09:38:58,061 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 09:38:58,061 INFO  L728         BuchiCegarLoop]: Abstraction has 3508 states and 4538 transitions.
[2020-11-25 09:38:58,063 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 3508 states and 4538 transitions.
[2020-11-25 09:38:58,083 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 3508 to 3227.
[2020-11-25 09:38:58,083 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 3227 states.
[2020-11-25 09:38:58,089 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 3227 states to 3227 states and 3969 transitions.
[2020-11-25 09:38:58,090 INFO  L751         BuchiCegarLoop]: Abstraction has 3227 states and 3969 transitions.
[2020-11-25 09:38:58,090 INFO  L631         BuchiCegarLoop]: Abstraction has 3227 states and 3969 transitions.
[2020-11-25 09:38:58,090 INFO  L445         BuchiCegarLoop]: ======== Iteration 23============
[2020-11-25 09:38:58,090 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 3227 states and 3969 transitions.
[2020-11-25 09:38:58,094 INFO  L131   ngComponentsAnalysis]: Automaton has 4 accepting balls. 8
[2020-11-25 09:38:58,094 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 09:38:58,094 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 09:38:58,095 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 09:38:58,095 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_ERC200 := false;
[L2]                 call_transfer_ERC200 := false;
[L2]     CALL        call main();
[L4981]              assume null == 0;
[L4982]  CALL        call this := FreshRefGenerator__success();
[L2122]              havoc newRef;
[L2123]              assume Alloc[newRef] == false;
[L2124]              Alloc[newRef] := true;
[L2125]              assume newRef != null;
[L4982]  RET         call this := FreshRefGenerator__success();
[L4983]              assume now >= 0;
[L4984]              assume DType[this] == YFV;
[L4985]              assume msgvalue_MSG == 0;
[L4986]              gas := gas - 53000;
[L4987]  CALL        call YFV_YFV(this, msgsender_MSG, msgvalue_MSG);
[L1098]              havoc __exception;
[L1099]              revert := false;
[L1100]  COND FALSE  !(__exception)
[L1125]  CALL        call YFV_YFV__success(this, msgsender_MSG, msgvalue_MSG);
[L3242]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2186]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2171]              assume msgsender_MSG != null;
[L2172]              Balance[this] := 0;
[L2186]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2187]  COND FALSE  !(revert)
[L3242]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3243]  COND FALSE  !(revert)
[L3246]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2154]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2139]              assume msgsender_MSG != null;
[L2140]              Balance[this] := 0;
[L2154]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2155]  COND FALSE  !(revert)
[L3246]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3247]  COND FALSE  !(revert)
[L3250]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2248]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2186]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2171]              assume msgsender_MSG != null;
[L2172]              Balance[this] := 0;
[L2186]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2187]  COND FALSE  !(revert)
[L2248]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2249]  COND FALSE  !(revert)
[L2252]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2154]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2139]              assume msgsender_MSG != null;
[L2140]              Balance[this] := 0;
[L2154]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2155]  COND FALSE  !(revert)
[L2252]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2253]  COND FALSE  !(revert)
[L2256]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2220]              assume msgsender_MSG != null;
[L2221]              Balance[this] := 0;
[L2222]              _balances_ERC20[this] := zeroRefintArr();
[L2223]              sum__balances0[this] := 0;
[L2224]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2225]              sum__allowances1[this] := 0;
[L2226]              _totalSupply_ERC20[this] := 0;
[L2256]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2257]  COND FALSE  !(revert)
[L3250]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3251]  COND FALSE  !(revert)
[L3254]  CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -868984158, 934069305, 18);
[L3012]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2154]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2139]              assume msgsender_MSG != null;
[L2140]              Balance[this] := 0;
[L2154]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2155]  COND FALSE  !(revert)
[L3012]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3013]  COND FALSE  !(revert)
[L3016]  CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s484, symbol_s484, decimals_s484);
[L2987]              assume msgsender_MSG != null;
[L2988]              Balance[this] := 0;
[L2989]              _name_ERC20Detailed[this] := 1252836592;
[L2990]              _symbol_ERC20Detailed[this] := 1252836592;
[L2991]              _decimals_ERC20Detailed[this] := 0;
[L2993]              _name_ERC20Detailed[this] := name_s484;
[L2994]              _symbol_ERC20Detailed[this] := symbol_s484;
[L2995]              _decimals_ERC20Detailed[this] := decimals_s484;
[L3016]  RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s484, symbol_s484, decimals_s484);
[L3017]  COND FALSE  !(revert)
[L3254]  RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -868984158, 934069305, 18);
[L3255]  COND FALSE  !(revert)
[L3258]  CALL        call YFV_YFV_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3208]              assume msgsender_MSG != null;
[L3209]              Balance[this] := 0;
[L3210]              governance_YFV[this] := null;
[L3211]              minters_YFV[this] := zeroRefboolArr();
[L3213]              governance_YFV[this] := msgsender_MSG;
[L3258]  RET         call YFV_YFV_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3259]  COND FALSE  !(revert)
[L1125]  RET         call YFV_YFV__success(this, msgsender_MSG, msgvalue_MSG);
[L1126]              assume !revert && gas >= 0;
[L4987]  RET         call YFV_YFV(this, msgsender_MSG, msgvalue_MSG);
[L4988]              assume !revert && gas >= 0;
[L4991]  CALL        call CorralChoice_YFV(this);
[L4804]              havoc msgsender_MSG;
[L4805]              havoc msgvalue_MSG;
[L4806]              havoc choice;
[L4807]              havoc __ret_0_totalSupply;
[L4808]              havoc account_s121;
[L4809]              havoc __ret_0_balanceOf;
[L4810]              havoc recipient_s140;
[L4811]              havoc amount_s140;
[L4812]              havoc __ret_0_transfer;
[L4813]              havoc owner_s156;
[L4814]              havoc spender_s156;
[L4815]              havoc __ret_0_allowance;
[L4816]              havoc spender_s175;
[L4817]              havoc amount_s175;
[L4818]              havoc __ret_0_approve;
[L4819]              havoc sender_s211;
[L4820]              havoc recipient_s211;
[L4821]              havoc amount_s211;
[L4822]              havoc __ret_0_transferFrom;
[L4823]              havoc spender_s238;
[L4824]              havoc addedValue_s238;
[L4825]              havoc __ret_0_increaseAllowance;
[L4826]              havoc spender_s266;
[L4827]              havoc subtractedValue_s266;
[L4828]              havoc __ret_0_decreaseAllowance;
[L4829]              havoc name_s484;
[L4830]              havoc symbol_s484;
[L4831]              havoc decimals_s484;
[L4832]              havoc __ret_0_name;
[L4833]              havoc __ret_0_symbol;
[L4834]              havoc __ret_0_decimals;
[L4835]              havoc __ret_0_governance;
[L4836]              havoc arg744_s0;
[L4837]              havoc __ret_0_minters;
[L4838]              havoc account_s671;
[L4839]              havoc amount_s671;
[L4840]              havoc amount_s683;
[L4841]              havoc _governance_s701;
[L4842]              havoc _minter_s721;
[L4843]              havoc _minter_s741;
[L4844]              havoc tmpNow;
[L4845]              havoc gas;
[L4846]              assume gas > 4000000 && gas <= 8000000;
[L4847]              tmpNow := now;
[L4848]              havoc now;
[L4849]              assume now > tmpNow;
[L4850]              assume msgsender_MSG != null;
[L4851]              assume DType[msgsender_MSG] != IERC20;
[L4852]              assume DType[msgsender_MSG] != Context;
[L4853]              assume DType[msgsender_MSG] != ERC20;
[L4854]              assume DType[msgsender_MSG] != ERC20Detailed;
[L4855]              assume DType[msgsender_MSG] != SafeMath;
[L4856]              assume DType[msgsender_MSG] != YFV;
[L4857]              Alloc[msgsender_MSG] := true;
[L4858]  COND FALSE  !(choice == 18)
[L4864]  COND FALSE  !(choice == 17)
[L4870]  COND FALSE  !(choice == 16)
[L4877]  COND FALSE  !(choice == 15)
[L4883]  COND FALSE  !(choice == 14)
[L4890]  COND FALSE  !(choice == 13)
[L4897]  COND FALSE  !(choice == 12)
[L4904]  COND FALSE  !(choice == 11)
[L4911]  COND FALSE  !(choice == 10)
[L4917]  COND FALSE  !(choice == 9)
[L4923]  COND FALSE  !(choice == 8)
[L4929]  COND FALSE  !(choice == 7)
[L4935]  COND FALSE  !(choice == 6)
[L4941]  COND FALSE  !(choice == 5)
[L4948]  COND FALSE  !(choice == 4)
[L4955]  COND FALSE  !(choice == 3)
[L4961]  COND TRUE   choice == 2
[L4962]              gas := gas - 21000;
[L4963]  COND TRUE   gas >= 0
[L4964]              assume msgvalue_MSG == 0;
[L4965]  CALL        call addMinter~address_YFV(this, msgsender_MSG, msgvalue_MSG, _minter_s721);
[L1338]              havoc __exception;
[L1339]              revert := false;
[L1340]  COND FALSE  !(__exception)
[L1365]  CALL        call addMinter~address_YFV__success(this, msgsender_MSG, msgvalue_MSG, _minter_s721);
[L3349]  COND FALSE  !(!(msgsender_MSG == governance_YFV[this]))
[L3353]              minters_YFV[this][_minter_s721] := true;
[L1365]  RET         call addMinter~address_YFV__success(this, msgsender_MSG, msgvalue_MSG, _minter_s721);
[L1366]              assume !revert && gas >= 0;
[L4965]  RET         call addMinter~address_YFV(this, msgsender_MSG, msgvalue_MSG, _minter_s721);
[L4991]  RET         call CorralChoice_YFV(this);
[L4991]  CALL        call CorralChoice_YFV(this);
[L4804]              havoc msgsender_MSG;
[L4805]              havoc msgvalue_MSG;
[L4806]              havoc choice;
[L4807]              havoc __ret_0_totalSupply;
[L4808]              havoc account_s121;
[L4809]              havoc __ret_0_balanceOf;
[L4810]              havoc recipient_s140;
[L4811]              havoc amount_s140;
[L4812]              havoc __ret_0_transfer;
[L4813]              havoc owner_s156;
[L4814]              havoc spender_s156;
[L4815]              havoc __ret_0_allowance;
[L4816]              havoc spender_s175;
[L4817]              havoc amount_s175;
[L4818]              havoc __ret_0_approve;
[L4819]              havoc sender_s211;
[L4820]              havoc recipient_s211;
[L4821]              havoc amount_s211;
[L4822]              havoc __ret_0_transferFrom;
[L4823]              havoc spender_s238;
[L4824]              havoc addedValue_s238;
[L4825]              havoc __ret_0_increaseAllowance;
[L4826]              havoc spender_s266;
[L4827]              havoc subtractedValue_s266;
[L4828]              havoc __ret_0_decreaseAllowance;
[L4829]              havoc name_s484;
[L4830]              havoc symbol_s484;
[L4831]              havoc decimals_s484;
[L4832]              havoc __ret_0_name;
[L4833]              havoc __ret_0_symbol;
[L4834]              havoc __ret_0_decimals;
[L4835]              havoc __ret_0_governance;
[L4836]              havoc arg744_s0;
[L4837]              havoc __ret_0_minters;
[L4838]              havoc account_s671;
[L4839]              havoc amount_s671;
[L4840]              havoc amount_s683;
[L4841]              havoc _governance_s701;
[L4842]              havoc _minter_s721;
[L4843]              havoc _minter_s741;
[L4844]              havoc tmpNow;
[L4845]              havoc gas;
[L4846]              assume gas > 4000000 && gas <= 8000000;
[L4847]              tmpNow := now;
[L4848]              havoc now;
[L4849]              assume now > tmpNow;
[L4850]              assume msgsender_MSG != null;
[L4851]              assume DType[msgsender_MSG] != IERC20;
[L4852]              assume DType[msgsender_MSG] != Context;
[L4853]              assume DType[msgsender_MSG] != ERC20;
[L4854]              assume DType[msgsender_MSG] != ERC20Detailed;
[L4855]              assume DType[msgsender_MSG] != SafeMath;
[L4856]              assume DType[msgsender_MSG] != YFV;
[L4857]              Alloc[msgsender_MSG] := true;
[L4858]  COND FALSE  !(choice == 18)
[L4864]  COND FALSE  !(choice == 17)
[L4870]  COND FALSE  !(choice == 16)
[L4877]  COND FALSE  !(choice == 15)
[L4883]  COND FALSE  !(choice == 14)
[L4890]  COND FALSE  !(choice == 13)
[L4897]  COND FALSE  !(choice == 12)
[L4904]  COND FALSE  !(choice == 11)
[L4911]  COND FALSE  !(choice == 10)
[L4917]  COND FALSE  !(choice == 9)
[L4923]  COND FALSE  !(choice == 8)
[L4929]  COND FALSE  !(choice == 7)
[L4935]  COND FALSE  !(choice == 6)
[L4941]  COND TRUE   choice == 5
[L4942]              gas := gas - 21000;
[L4943]  COND TRUE   gas >= 0
[L4944]              assume amount_s671 >= 0 && amount_s671 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4945]              assume msgvalue_MSG == 0;
[L4946]  CALL        call mint~address~uint256_YFV(this, msgsender_MSG, msgvalue_MSG, account_s671, amount_s671);
[L1159]              havoc __exception;
[L1160]              revert := false;
[L1161]  COND FALSE  !(__exception)
[L1186]  CALL        call mint~address~uint256_YFV__success(this, msgsender_MSG, msgvalue_MSG, account_s671, amount_s671);
[L3282]  COND FALSE  !(!minters_YFV[this][msgsender_MSG])
[L3286]  COND TRUE   DType[this] == YFV
[L3287]  CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, account_s671, amount_s671);
[L2862]              __var_16 := null;
[L2863]  COND FALSE  !(!(account_s366 != null))
[L2867]  CALL        call __var_17 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s366);
[L3105]              c_s534 := (a_s534 + b_s534) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3106]  COND FALSE  !(!(c_s534 >= a_s534))
[L3110]              __ret_0_ := c_s534;
[L2867]  RET         call __var_17 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s366);
[L2868]  COND FALSE  !(revert)
[L2871]              _totalSupply_ERC20[this] := __var_17;
[L2872]  CALL        call __var_18 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s366], amount_s366);
[L3105]              c_s534 := (a_s534 + b_s534) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3106]  COND FALSE  !(!(c_s534 >= a_s534))
[L3110]              __ret_0_ := c_s534;
[L2872]  RET         call __var_18 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s366], amount_s366);
[L2873]  COND FALSE  !(revert)
[L2876]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s366];
[L2877]              _balances_ERC20[this][account_s366] := __var_18;
[L2878]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s366];
[L2879]              assert { :EventEmitted "Transfer_ERC20" } true;
[L3287]  RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, account_s671, amount_s671);
[L3288]  COND FALSE  !(revert)
[L1186]  RET         call mint~address~uint256_YFV__success(this, msgsender_MSG, msgvalue_MSG, account_s671, amount_s671);
[L1187]              assume !revert && gas >= 0;
[L4946]  RET         call mint~address~uint256_YFV(this, msgsender_MSG, msgvalue_MSG, account_s671, amount_s671);
[L4991]  RET         call CorralChoice_YFV(this);
[L4991]  CALL        call CorralChoice_YFV(this);
[L4804]              havoc msgsender_MSG;
[L4805]              havoc msgvalue_MSG;
[L4806]              havoc choice;
[L4807]              havoc __ret_0_totalSupply;
[L4808]              havoc account_s121;
[L4809]              havoc __ret_0_balanceOf;
[L4810]              havoc recipient_s140;
[L4811]              havoc amount_s140;
[L4812]              havoc __ret_0_transfer;
[L4813]              havoc owner_s156;
[L4814]              havoc spender_s156;
[L4815]              havoc __ret_0_allowance;
[L4816]              havoc spender_s175;
[L4817]              havoc amount_s175;
[L4818]              havoc __ret_0_approve;
[L4819]              havoc sender_s211;
[L4820]              havoc recipient_s211;
[L4821]              havoc amount_s211;
[L4822]              havoc __ret_0_transferFrom;
[L4823]              havoc spender_s238;
[L4824]              havoc addedValue_s238;
[L4825]              havoc __ret_0_increaseAllowance;
[L4826]              havoc spender_s266;
[L4827]              havoc subtractedValue_s266;
[L4828]              havoc __ret_0_decreaseAllowance;
[L4829]              havoc name_s484;
[L4830]              havoc symbol_s484;
[L4831]              havoc decimals_s484;
[L4832]              havoc __ret_0_name;
[L4833]              havoc __ret_0_symbol;
[L4834]              havoc __ret_0_decimals;
[L4835]              havoc __ret_0_governance;
[L4836]              havoc arg744_s0;
[L4837]              havoc __ret_0_minters;
[L4838]              havoc account_s671;
[L4839]              havoc amount_s671;
[L4840]              havoc amount_s683;
[L4841]              havoc _governance_s701;
[L4842]              havoc _minter_s721;
[L4843]              havoc _minter_s741;
[L4844]              havoc tmpNow;
[L4845]              havoc gas;
[L4846]              assume gas > 4000000 && gas <= 8000000;
[L4847]              tmpNow := now;
[L4848]              havoc now;
[L4849]              assume now > tmpNow;
[L4850]              assume msgsender_MSG != null;
[L4851]              assume DType[msgsender_MSG] != IERC20;
[L4852]              assume DType[msgsender_MSG] != Context;
[L4853]              assume DType[msgsender_MSG] != ERC20;
[L4854]              assume DType[msgsender_MSG] != ERC20Detailed;
[L4855]              assume DType[msgsender_MSG] != SafeMath;
[L4856]              assume DType[msgsender_MSG] != YFV;
[L4857]              Alloc[msgsender_MSG] := true;
[L4858]  COND FALSE  !(choice == 18)
[L4864]  COND FALSE  !(choice == 17)
[L4870]  COND TRUE   choice == 16
[L4871]              gas := gas - 21000;
[L4872]  COND TRUE   gas >= 0
[L4873]              assume amount_s140 >= 0 && amount_s140 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4874]              assume msgvalue_MSG == 0;
[L4875]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == recipient_s140 && amount_s140 <= _balances_ERC20[this][msgsender_MSG]) && amount_s140 >= 0) && amount_s140 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s140] >= 0) && _balances_ERC20[this][recipient_s140] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC200 := true;
[L2]                 call_transfer_ERC200 := false;
[L2]                 revert := revert_hold;
[L392]               havoc __exception;
[L393]               revert := false;
[L394]   COND FALSE  !(__exception)
[L419]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L2322]  COND TRUE   DType[this] == YFV
[L2323]  CALL        call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2200]              __ret_0_ := msgsender_MSG;
[L2323]  RET         call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2324]  COND FALSE  !(revert)
[L2335]  COND TRUE   DType[this] == YFV
[L2336]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s140, amount_s140);
[L2806]              __var_12 := null;
[L2807]  COND FALSE  !(!(sender_s323 != null))
[L2811]              __var_13 := null;
[L2812]  COND FALSE  !(!(recipient_s323 != null))
[L2816]  CALL        call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s323], amount_s323, -806116454);
[L3129]  COND FALSE  !(!(b_s561 <= a_s561))
[L3133]              c_s561 := (a_s561 - b_s561) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3134]              __ret_0_ := c_s561;
[L2816]  RET         call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s323], amount_s323, -806116454);
[L2817]  COND FALSE  !(revert)
[L2820]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s323];
[L2821]              _balances_ERC20[this][sender_s323] := __var_14;
[L2822]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s323];
[L2823]  CALL        call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s323], amount_s323);
[L3105]              c_s534 := (a_s534 + b_s534) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3106]  COND FALSE  !(!(c_s534 >= a_s534))
[L3110]              __ret_0_ := c_s534;
[L2823]  RET         call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s323], amount_s323);
[L2824]  COND FALSE  !(revert)
[L2827]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s323];
[L2828]              _balances_ERC20[this][recipient_s323] := __var_15;
[L2829]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s323];
[L2830]              assert { :EventEmitted "Transfer_ERC20" } true;
[L2336]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s140, amount_s140);
[L2337]  COND FALSE  !(revert)
[L2348]              __ret_0_ := true;
[L419]   RET         call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L420]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !((((((((__ret_0_ == true && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowances_ERC20[this] == old(_allowances_ERC20[this])) && governance_YFV[this] == old(governance_YFV[this])) && minters_YFV[this] == old(minters_YFV[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]));
[L2]                 revert := revert_hold;
[L4875]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L4991]  RET         call CorralChoice_YFV(this);

Loop:
[L4991]  CALL        call CorralChoice_YFV(this);
[L4804]              havoc msgsender_MSG;
[L4805]              havoc msgvalue_MSG;
[L4806]              havoc choice;
[L4807]              havoc __ret_0_totalSupply;
[L4808]              havoc account_s121;
[L4809]              havoc __ret_0_balanceOf;
[L4810]              havoc recipient_s140;
[L4811]              havoc amount_s140;
[L4812]              havoc __ret_0_transfer;
[L4813]              havoc owner_s156;
[L4814]              havoc spender_s156;
[L4815]              havoc __ret_0_allowance;
[L4816]              havoc spender_s175;
[L4817]              havoc amount_s175;
[L4818]              havoc __ret_0_approve;
[L4819]              havoc sender_s211;
[L4820]              havoc recipient_s211;
[L4821]              havoc amount_s211;
[L4822]              havoc __ret_0_transferFrom;
[L4823]              havoc spender_s238;
[L4824]              havoc addedValue_s238;
[L4825]              havoc __ret_0_increaseAllowance;
[L4826]              havoc spender_s266;
[L4827]              havoc subtractedValue_s266;
[L4828]              havoc __ret_0_decreaseAllowance;
[L4829]              havoc name_s484;
[L4830]              havoc symbol_s484;
[L4831]              havoc decimals_s484;
[L4832]              havoc __ret_0_name;
[L4833]              havoc __ret_0_symbol;
[L4834]              havoc __ret_0_decimals;
[L4835]              havoc __ret_0_governance;
[L4836]              havoc arg744_s0;
[L4837]              havoc __ret_0_minters;
[L4838]              havoc account_s671;
[L4839]              havoc amount_s671;
[L4840]              havoc amount_s683;
[L4841]              havoc _governance_s701;
[L4842]              havoc _minter_s721;
[L4843]              havoc _minter_s741;
[L4844]              havoc tmpNow;
[L4845]              havoc gas;
[L4846]              assume gas > 4000000 && gas <= 8000000;
[L4847]              tmpNow := now;
[L4848]              havoc now;
[L4849]              assume now > tmpNow;
[L4850]              assume msgsender_MSG != null;
[L4851]              assume DType[msgsender_MSG] != IERC20;
[L4852]              assume DType[msgsender_MSG] != Context;
[L4853]              assume DType[msgsender_MSG] != ERC20;
[L4854]              assume DType[msgsender_MSG] != ERC20Detailed;
[L4855]              assume DType[msgsender_MSG] != SafeMath;
[L4856]              assume DType[msgsender_MSG] != YFV;
[L4857]              Alloc[msgsender_MSG] := true;
[L4858]  COND FALSE  !(choice == 18)
[L4864]  COND FALSE  !(choice == 17)
[L4870]  COND TRUE   choice == 16
[L4871]              gas := gas - 21000;
[L4872]  COND TRUE   gas >= 0
[L4873]              assume amount_s140 >= 0 && amount_s140 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4874]              assume msgvalue_MSG == 0;
[L4875]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == recipient_s140 && amount_s140 <= _balances_ERC20[this][msgsender_MSG]) && amount_s140 >= 0) && amount_s140 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s140] >= 0) && _balances_ERC20[this][recipient_s140] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC200 := true;
[L2]                 call_transfer_ERC200 := false;
[L2]                 revert := revert_hold;
[L392]               havoc __exception;
[L393]               revert := false;
[L394]   COND FALSE  !(__exception)
[L419]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L2322]  COND TRUE   DType[this] == YFV
[L2323]  CALL        call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2200]              __ret_0_ := msgsender_MSG;
[L2323]  RET         call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2324]  COND FALSE  !(revert)
[L2335]  COND TRUE   DType[this] == YFV
[L2336]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s140, amount_s140);
[L2806]              __var_12 := null;
[L2807]  COND FALSE  !(!(sender_s323 != null))
[L2811]              __var_13 := null;
[L2812]  COND FALSE  !(!(recipient_s323 != null))
[L2816]  CALL        call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s323], amount_s323, -806116454);
[L3129]  COND FALSE  !(!(b_s561 <= a_s561))
[L3133]              c_s561 := (a_s561 - b_s561) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3134]              __ret_0_ := c_s561;
[L2816]  RET         call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s323], amount_s323, -806116454);
[L2817]  COND FALSE  !(revert)
[L2820]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s323];
[L2821]              _balances_ERC20[this][sender_s323] := __var_14;
[L2822]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s323];
[L2823]  CALL        call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s323], amount_s323);
[L3105]              c_s534 := (a_s534 + b_s534) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3106]  COND FALSE  !(!(c_s534 >= a_s534))
[L3110]              __ret_0_ := c_s534;
[L2823]  RET         call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s323], amount_s323);
[L2824]  COND FALSE  !(revert)
[L2827]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s323];
[L2828]              _balances_ERC20[this][recipient_s323] := __var_15;
[L2829]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s323];
[L2830]              assert { :EventEmitted "Transfer_ERC20" } true;
[L2336]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s140, amount_s140);
[L2337]  COND FALSE  !(revert)
[L2348]              __ret_0_ := true;
[L419]   RET         call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L420]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !((((((((__ret_0_ == true && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowances_ERC20[this] == old(_allowances_ERC20[this])) && governance_YFV[this] == old(governance_YFV[this])) && minters_YFV[this] == old(minters_YFV[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]));
[L2]                 revert := revert_hold;
[L4875]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L4991]  RET         call CorralChoice_YFV(this);

[2020-11-25 09:38:58,099 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 09:38:58,099 INFO  L82        PathProgramCache]: Analyzing trace with hash 545620994, now seen corresponding path program 1 times
[2020-11-25 09:38:58,099 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 09:38:58,127 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 09:38:59,705 INFO  L134       CoverageAnalysis]: Checked inductivity of 236 backedges. 4 proven. 121 refuted. 0 times theorem prover too weak. 111 trivial. 0 not checked.
[2020-11-25 09:38:59,706 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 09:38:59,706 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [46] total 46
[2020-11-25 09:38:59,706 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 09:38:59,706 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 47 interpolants.
[2020-11-25 09:38:59,707 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=189, Invalid=1973, Unknown=0, NotChecked=0, Total=2162
[2020-11-25 09:38:59,707 INFO  L87              Difference]: Start difference. First operand 3227 states and 3969 transitions. cyclomatic complexity: 782 Second operand 47 states.
[2020-11-25 09:39:09,967 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 09:39:09,967 INFO  L93              Difference]: Finished difference Result 3258 states and 4064 transitions.
[2020-11-25 09:39:09,967 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 42 states. 
[2020-11-25 09:39:09,967 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 3258 states and 4064 transitions.
[2020-11-25 09:39:09,975 INFO  L131   ngComponentsAnalysis]: Automaton has 4 accepting balls. 8
[2020-11-25 09:39:09,984 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 3258 states to 3258 states and 4064 transitions.
[2020-11-25 09:39:09,984 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 714
[2020-11-25 09:39:09,984 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 714
[2020-11-25 09:39:09,984 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 3258 states and 4064 transitions.
[2020-11-25 09:39:09,987 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 09:39:09,987 INFO  L728         BuchiCegarLoop]: Abstraction has 3258 states and 4064 transitions.
[2020-11-25 09:39:09,989 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 3258 states and 4064 transitions.
[2020-11-25 09:39:10,002 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 3258 to 3229.
[2020-11-25 09:39:10,002 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 3229 states.
[2020-11-25 09:39:10,007 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 3229 states to 3229 states and 3979 transitions.
[2020-11-25 09:39:10,007 INFO  L751         BuchiCegarLoop]: Abstraction has 3229 states and 3979 transitions.
[2020-11-25 09:39:10,007 INFO  L631         BuchiCegarLoop]: Abstraction has 3229 states and 3979 transitions.
[2020-11-25 09:39:10,007 INFO  L445         BuchiCegarLoop]: ======== Iteration 24============
[2020-11-25 09:39:10,007 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 3229 states and 3979 transitions.
[2020-11-25 09:39:10,010 INFO  L131   ngComponentsAnalysis]: Automaton has 4 accepting balls. 8
[2020-11-25 09:39:10,010 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 09:39:10,010 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 09:39:10,011 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 09:39:10,011 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_ERC200 := false;
[L2]                 call_transfer_ERC200 := false;
[L2]     CALL        call main();
[L4981]              assume null == 0;
[L4982]  CALL        call this := FreshRefGenerator__success();
[L2122]              havoc newRef;
[L2123]              assume Alloc[newRef] == false;
[L2124]              Alloc[newRef] := true;
[L2125]              assume newRef != null;
[L4982]  RET         call this := FreshRefGenerator__success();
[L4983]              assume now >= 0;
[L4984]              assume DType[this] == YFV;
[L4985]              assume msgvalue_MSG == 0;
[L4986]              gas := gas - 53000;
[L4987]  CALL        call YFV_YFV(this, msgsender_MSG, msgvalue_MSG);
[L1098]              havoc __exception;
[L1099]              revert := false;
[L1100]  COND FALSE  !(__exception)
[L1125]  CALL        call YFV_YFV__success(this, msgsender_MSG, msgvalue_MSG);
[L3242]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2186]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2171]              assume msgsender_MSG != null;
[L2172]              Balance[this] := 0;
[L2186]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2187]  COND FALSE  !(revert)
[L3242]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3243]  COND FALSE  !(revert)
[L3246]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2154]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2139]              assume msgsender_MSG != null;
[L2140]              Balance[this] := 0;
[L2154]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2155]  COND FALSE  !(revert)
[L3246]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3247]  COND FALSE  !(revert)
[L3250]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2248]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2186]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2171]              assume msgsender_MSG != null;
[L2172]              Balance[this] := 0;
[L2186]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2187]  COND FALSE  !(revert)
[L2248]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2249]  COND FALSE  !(revert)
[L2252]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2154]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2139]              assume msgsender_MSG != null;
[L2140]              Balance[this] := 0;
[L2154]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2155]  COND FALSE  !(revert)
[L2252]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2253]  COND FALSE  !(revert)
[L2256]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2220]              assume msgsender_MSG != null;
[L2221]              Balance[this] := 0;
[L2222]              _balances_ERC20[this] := zeroRefintArr();
[L2223]              sum__balances0[this] := 0;
[L2224]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2225]              sum__allowances1[this] := 0;
[L2226]              _totalSupply_ERC20[this] := 0;
[L2256]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2257]  COND FALSE  !(revert)
[L3250]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3251]  COND FALSE  !(revert)
[L3254]  CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -868984158, 934069305, 18);
[L3012]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2154]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2139]              assume msgsender_MSG != null;
[L2140]              Balance[this] := 0;
[L2154]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2155]  COND FALSE  !(revert)
[L3012]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3013]  COND FALSE  !(revert)
[L3016]  CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s484, symbol_s484, decimals_s484);
[L2987]              assume msgsender_MSG != null;
[L2988]              Balance[this] := 0;
[L2989]              _name_ERC20Detailed[this] := 1252836592;
[L2990]              _symbol_ERC20Detailed[this] := 1252836592;
[L2991]              _decimals_ERC20Detailed[this] := 0;
[L2993]              _name_ERC20Detailed[this] := name_s484;
[L2994]              _symbol_ERC20Detailed[this] := symbol_s484;
[L2995]              _decimals_ERC20Detailed[this] := decimals_s484;
[L3016]  RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s484, symbol_s484, decimals_s484);
[L3017]  COND FALSE  !(revert)
[L3254]  RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -868984158, 934069305, 18);
[L3255]  COND FALSE  !(revert)
[L3258]  CALL        call YFV_YFV_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3208]              assume msgsender_MSG != null;
[L3209]              Balance[this] := 0;
[L3210]              governance_YFV[this] := null;
[L3211]              minters_YFV[this] := zeroRefboolArr();
[L3213]              governance_YFV[this] := msgsender_MSG;
[L3258]  RET         call YFV_YFV_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3259]  COND FALSE  !(revert)
[L1125]  RET         call YFV_YFV__success(this, msgsender_MSG, msgvalue_MSG);
[L1126]              assume !revert && gas >= 0;
[L4987]  RET         call YFV_YFV(this, msgsender_MSG, msgvalue_MSG);
[L4988]              assume !revert && gas >= 0;
[L4991]  CALL        call CorralChoice_YFV(this);
[L4804]              havoc msgsender_MSG;
[L4805]              havoc msgvalue_MSG;
[L4806]              havoc choice;
[L4807]              havoc __ret_0_totalSupply;
[L4808]              havoc account_s121;
[L4809]              havoc __ret_0_balanceOf;
[L4810]              havoc recipient_s140;
[L4811]              havoc amount_s140;
[L4812]              havoc __ret_0_transfer;
[L4813]              havoc owner_s156;
[L4814]              havoc spender_s156;
[L4815]              havoc __ret_0_allowance;
[L4816]              havoc spender_s175;
[L4817]              havoc amount_s175;
[L4818]              havoc __ret_0_approve;
[L4819]              havoc sender_s211;
[L4820]              havoc recipient_s211;
[L4821]              havoc amount_s211;
[L4822]              havoc __ret_0_transferFrom;
[L4823]              havoc spender_s238;
[L4824]              havoc addedValue_s238;
[L4825]              havoc __ret_0_increaseAllowance;
[L4826]              havoc spender_s266;
[L4827]              havoc subtractedValue_s266;
[L4828]              havoc __ret_0_decreaseAllowance;
[L4829]              havoc name_s484;
[L4830]              havoc symbol_s484;
[L4831]              havoc decimals_s484;
[L4832]              havoc __ret_0_name;
[L4833]              havoc __ret_0_symbol;
[L4834]              havoc __ret_0_decimals;
[L4835]              havoc __ret_0_governance;
[L4836]              havoc arg744_s0;
[L4837]              havoc __ret_0_minters;
[L4838]              havoc account_s671;
[L4839]              havoc amount_s671;
[L4840]              havoc amount_s683;
[L4841]              havoc _governance_s701;
[L4842]              havoc _minter_s721;
[L4843]              havoc _minter_s741;
[L4844]              havoc tmpNow;
[L4845]              havoc gas;
[L4846]              assume gas > 4000000 && gas <= 8000000;
[L4847]              tmpNow := now;
[L4848]              havoc now;
[L4849]              assume now > tmpNow;
[L4850]              assume msgsender_MSG != null;
[L4851]              assume DType[msgsender_MSG] != IERC20;
[L4852]              assume DType[msgsender_MSG] != Context;
[L4853]              assume DType[msgsender_MSG] != ERC20;
[L4854]              assume DType[msgsender_MSG] != ERC20Detailed;
[L4855]              assume DType[msgsender_MSG] != SafeMath;
[L4856]              assume DType[msgsender_MSG] != YFV;
[L4857]              Alloc[msgsender_MSG] := true;
[L4858]  COND FALSE  !(choice == 18)
[L4864]  COND FALSE  !(choice == 17)
[L4870]  COND FALSE  !(choice == 16)
[L4877]  COND FALSE  !(choice == 15)
[L4883]  COND FALSE  !(choice == 14)
[L4890]  COND TRUE   choice == 13
[L4891]              gas := gas - 21000;
[L4892]  COND TRUE   gas >= 0
[L4893]              assume amount_s211 >= 0 && amount_s211 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4894]              assume msgvalue_MSG == 0;
[L4895]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, sender_s211, recipient_s211, amount_s211);
[L572]               havoc __exception;
[L573]               revert := false;
[L574]   COND FALSE  !(__exception)
[L599]   CALL        call __ret_0_ := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s211, recipient_s211, amount_s211);
[L2500]  COND TRUE   DType[this] == YFV
[L2501]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s211, recipient_s211, amount_s211);
[L2806]              __var_12 := null;
[L2807]  COND FALSE  !(!(sender_s323 != null))
[L2811]              __var_13 := null;
[L2812]  COND FALSE  !(!(recipient_s323 != null))
[L2816]  CALL        call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s323], amount_s323, -806116454);
[L3129]  COND FALSE  !(!(b_s561 <= a_s561))
[L3133]              c_s561 := (a_s561 - b_s561) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3134]              __ret_0_ := c_s561;
[L2816]  RET         call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s323], amount_s323, -806116454);
[L2817]  COND FALSE  !(revert)
[L2820]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s323];
[L2821]              _balances_ERC20[this][sender_s323] := __var_14;
[L2822]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s323];
[L2823]  CALL        call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s323], amount_s323);
[L3105]              c_s534 := (a_s534 + b_s534) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3106]  COND FALSE  !(!(c_s534 >= a_s534))
[L3110]              __ret_0_ := c_s534;
[L2823]  RET         call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s323], amount_s323);
[L2824]  COND FALSE  !(revert)
[L2827]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s323];
[L2828]              _balances_ERC20[this][recipient_s323] := __var_15;
[L2829]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s323];
[L2830]              assert { :EventEmitted "Transfer_ERC20" } true;
[L2501]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s211, recipient_s211, amount_s211);
[L2502]  COND FALSE  !(revert)
[L2513]  COND TRUE   DType[this] == YFV
[L2514]  CALL        call __var_3 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2200]              __ret_0_ := msgsender_MSG;
[L2514]  RET         call __var_3 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2515]  COND FALSE  !(revert)
[L2526]  COND TRUE   DType[this] == YFV
[L2527]  CALL        call __var_5 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2200]              __ret_0_ := msgsender_MSG;
[L2527]  RET         call __var_5 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2528]  COND FALSE  !(revert)
[L2539]  CALL        call __var_4 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s211][__var_5], amount_s211, -2057360831);
[L3129]  COND FALSE  !(!(b_s561 <= a_s561))
[L3133]              c_s561 := (a_s561 - b_s561) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3134]              __ret_0_ := c_s561;
[L2539]  RET         call __var_4 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s211][__var_5], amount_s211, -2057360831);
[L2540]  COND FALSE  !(revert)
[L2543]  COND TRUE   DType[this] == YFV
[L2544]  CALL        call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s211, __var_3, __var_4);
[L2954]              __var_22 := null;
[L2955]  COND FALSE  !(!(owner_s453 != null))
[L2959]              __var_23 := null;
[L2960]  COND FALSE  !(!(spender_s453 != null))
[L2964]              sum__allowances1[owner_s453] := sum__allowances1[owner_s453] - _allowances_ERC20[this][owner_s453][spender_s453];
[L2965]              _allowances_ERC20[this][owner_s453][spender_s453] := amount_s453;
[L2966]              sum__allowances1[owner_s453] := sum__allowances1[owner_s453] + _allowances_ERC20[this][owner_s453][spender_s453];
[L2967]              assert { :EventEmitted "Approval_ERC20" } true;
[L2544]  RET         call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s211, __var_3, __var_4);
[L2545]  COND FALSE  !(revert)
[L2556]              __ret_0_ := true;
[L599]   RET         call __ret_0_ := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s211, recipient_s211, amount_s211);
[L600]               assume !revert && gas >= 0;
[L4895]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, sender_s211, recipient_s211, amount_s211);
[L4991]  RET         call CorralChoice_YFV(this);
[L4991]  CALL        call CorralChoice_YFV(this);
[L4804]              havoc msgsender_MSG;
[L4805]              havoc msgvalue_MSG;
[L4806]              havoc choice;
[L4807]              havoc __ret_0_totalSupply;
[L4808]              havoc account_s121;
[L4809]              havoc __ret_0_balanceOf;
[L4810]              havoc recipient_s140;
[L4811]              havoc amount_s140;
[L4812]              havoc __ret_0_transfer;
[L4813]              havoc owner_s156;
[L4814]              havoc spender_s156;
[L4815]              havoc __ret_0_allowance;
[L4816]              havoc spender_s175;
[L4817]              havoc amount_s175;
[L4818]              havoc __ret_0_approve;
[L4819]              havoc sender_s211;
[L4820]              havoc recipient_s211;
[L4821]              havoc amount_s211;
[L4822]              havoc __ret_0_transferFrom;
[L4823]              havoc spender_s238;
[L4824]              havoc addedValue_s238;
[L4825]              havoc __ret_0_increaseAllowance;
[L4826]              havoc spender_s266;
[L4827]              havoc subtractedValue_s266;
[L4828]              havoc __ret_0_decreaseAllowance;
[L4829]              havoc name_s484;
[L4830]              havoc symbol_s484;
[L4831]              havoc decimals_s484;
[L4832]              havoc __ret_0_name;
[L4833]              havoc __ret_0_symbol;
[L4834]              havoc __ret_0_decimals;
[L4835]              havoc __ret_0_governance;
[L4836]              havoc arg744_s0;
[L4837]              havoc __ret_0_minters;
[L4838]              havoc account_s671;
[L4839]              havoc amount_s671;
[L4840]              havoc amount_s683;
[L4841]              havoc _governance_s701;
[L4842]              havoc _minter_s721;
[L4843]              havoc _minter_s741;
[L4844]              havoc tmpNow;
[L4845]              havoc gas;
[L4846]              assume gas > 4000000 && gas <= 8000000;
[L4847]              tmpNow := now;
[L4848]              havoc now;
[L4849]              assume now > tmpNow;
[L4850]              assume msgsender_MSG != null;
[L4851]              assume DType[msgsender_MSG] != IERC20;
[L4852]              assume DType[msgsender_MSG] != Context;
[L4853]              assume DType[msgsender_MSG] != ERC20;
[L4854]              assume DType[msgsender_MSG] != ERC20Detailed;
[L4855]              assume DType[msgsender_MSG] != SafeMath;
[L4856]              assume DType[msgsender_MSG] != YFV;
[L4857]              Alloc[msgsender_MSG] := true;
[L4858]  COND FALSE  !(choice == 18)
[L4864]  COND FALSE  !(choice == 17)
[L4870]  COND TRUE   choice == 16
[L4871]              gas := gas - 21000;
[L4872]  COND TRUE   gas >= 0
[L4873]              assume amount_s140 >= 0 && amount_s140 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4874]              assume msgvalue_MSG == 0;
[L4875]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((msgsender_MSG == recipient_s140 && amount_s140 <= _balances_ERC20[this][msgsender_MSG]) && amount_s140 >= 0) && amount_s140 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s140] >= 0) && _balances_ERC20[this][recipient_s140] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2]                 revert := revert_hold;
[L392]               havoc __exception;
[L393]               revert := false;
[L394]   COND FALSE  !(__exception)
[L419]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L2322]  COND TRUE   DType[this] == YFV
[L2323]  CALL        call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2200]              __ret_0_ := msgsender_MSG;
[L2323]  RET         call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2324]  COND FALSE  !(revert)
[L2335]  COND TRUE   DType[this] == YFV
[L2336]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s140, amount_s140);
[L2806]              __var_12 := null;
[L2807]  COND FALSE  !(!(sender_s323 != null))
[L2811]              __var_13 := null;
[L2812]  COND FALSE  !(!(recipient_s323 != null))
[L2816]  CALL        call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s323], amount_s323, -806116454);
[L3129]  COND FALSE  !(!(b_s561 <= a_s561))
[L3133]              c_s561 := (a_s561 - b_s561) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3134]              __ret_0_ := c_s561;
[L2816]  RET         call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s323], amount_s323, -806116454);
[L2817]  COND FALSE  !(revert)
[L2820]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s323];
[L2821]              _balances_ERC20[this][sender_s323] := __var_14;
[L2822]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s323];
[L2823]  CALL        call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s323], amount_s323);
[L3105]              c_s534 := (a_s534 + b_s534) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3106]  COND FALSE  !(!(c_s534 >= a_s534))
[L3110]              __ret_0_ := c_s534;
[L2823]  RET         call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s323], amount_s323);
[L2824]  COND FALSE  !(revert)
[L2827]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s323];
[L2828]              _balances_ERC20[this][recipient_s323] := __var_15;
[L2829]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s323];
[L2830]              assert { :EventEmitted "Transfer_ERC20" } true;
[L2336]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s140, amount_s140);
[L2337]  COND FALSE  !(revert)
[L2348]              __ret_0_ := true;
[L419]   RET         call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L420]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !((((((((__ret_0_ == true && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowances_ERC20[this] == old(_allowances_ERC20[this])) && governance_YFV[this] == old(governance_YFV[this])) && minters_YFV[this] == old(minters_YFV[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]));
[L2]                 revert := revert_hold;
[L4875]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L4991]  RET         call CorralChoice_YFV(this);
[L4991]  CALL        call CorralChoice_YFV(this);
[L4804]              havoc msgsender_MSG;
[L4805]              havoc msgvalue_MSG;
[L4806]              havoc choice;
[L4807]              havoc __ret_0_totalSupply;
[L4808]              havoc account_s121;
[L4809]              havoc __ret_0_balanceOf;
[L4810]              havoc recipient_s140;
[L4811]              havoc amount_s140;
[L4812]              havoc __ret_0_transfer;
[L4813]              havoc owner_s156;
[L4814]              havoc spender_s156;
[L4815]              havoc __ret_0_allowance;
[L4816]              havoc spender_s175;
[L4817]              havoc amount_s175;
[L4818]              havoc __ret_0_approve;
[L4819]              havoc sender_s211;
[L4820]              havoc recipient_s211;
[L4821]              havoc amount_s211;
[L4822]              havoc __ret_0_transferFrom;
[L4823]              havoc spender_s238;
[L4824]              havoc addedValue_s238;
[L4825]              havoc __ret_0_increaseAllowance;
[L4826]              havoc spender_s266;
[L4827]              havoc subtractedValue_s266;
[L4828]              havoc __ret_0_decreaseAllowance;
[L4829]              havoc name_s484;
[L4830]              havoc symbol_s484;
[L4831]              havoc decimals_s484;
[L4832]              havoc __ret_0_name;
[L4833]              havoc __ret_0_symbol;
[L4834]              havoc __ret_0_decimals;
[L4835]              havoc __ret_0_governance;
[L4836]              havoc arg744_s0;
[L4837]              havoc __ret_0_minters;
[L4838]              havoc account_s671;
[L4839]              havoc amount_s671;
[L4840]              havoc amount_s683;
[L4841]              havoc _governance_s701;
[L4842]              havoc _minter_s721;
[L4843]              havoc _minter_s741;
[L4844]              havoc tmpNow;
[L4845]              havoc gas;
[L4846]              assume gas > 4000000 && gas <= 8000000;
[L4847]              tmpNow := now;
[L4848]              havoc now;
[L4849]              assume now > tmpNow;
[L4850]              assume msgsender_MSG != null;
[L4851]              assume DType[msgsender_MSG] != IERC20;
[L4852]              assume DType[msgsender_MSG] != Context;
[L4853]              assume DType[msgsender_MSG] != ERC20;
[L4854]              assume DType[msgsender_MSG] != ERC20Detailed;
[L4855]              assume DType[msgsender_MSG] != SafeMath;
[L4856]              assume DType[msgsender_MSG] != YFV;
[L4857]              Alloc[msgsender_MSG] := true;
[L4858]  COND FALSE  !(choice == 18)
[L4864]  COND FALSE  !(choice == 17)
[L4870]  COND TRUE   choice == 16
[L4871]              gas := gas - 21000;
[L4872]  COND TRUE   gas >= 0
[L4873]              assume amount_s140 >= 0 && amount_s140 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4874]              assume msgvalue_MSG == 0;
[L4875]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == recipient_s140 && amount_s140 <= _balances_ERC20[this][msgsender_MSG]) && amount_s140 >= 0) && amount_s140 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s140] >= 0) && _balances_ERC20[this][recipient_s140] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC200 := true;
[L2]                 call_transfer_ERC200 := false;
[L2]                 revert := revert_hold;
[L392]               havoc __exception;
[L393]               revert := false;
[L394]   COND FALSE  !(__exception)
[L419]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L2322]  COND TRUE   DType[this] == YFV
[L2323]  CALL        call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2200]              __ret_0_ := msgsender_MSG;
[L2323]  RET         call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2324]  COND FALSE  !(revert)
[L2335]  COND TRUE   DType[this] == YFV
[L2336]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s140, amount_s140);
[L2806]              __var_12 := null;
[L2807]  COND FALSE  !(!(sender_s323 != null))
[L2811]              __var_13 := null;
[L2812]  COND FALSE  !(!(recipient_s323 != null))
[L2816]  CALL        call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s323], amount_s323, -806116454);
[L3129]  COND FALSE  !(!(b_s561 <= a_s561))
[L3133]              c_s561 := (a_s561 - b_s561) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3134]              __ret_0_ := c_s561;
[L2816]  RET         call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s323], amount_s323, -806116454);
[L2817]  COND FALSE  !(revert)
[L2820]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s323];
[L2821]              _balances_ERC20[this][sender_s323] := __var_14;
[L2822]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s323];
[L2823]  CALL        call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s323], amount_s323);
[L3105]              c_s534 := (a_s534 + b_s534) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3106]  COND FALSE  !(!(c_s534 >= a_s534))
[L3110]              __ret_0_ := c_s534;
[L2823]  RET         call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s323], amount_s323);
[L2824]  COND FALSE  !(revert)
[L2827]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s323];
[L2828]              _balances_ERC20[this][recipient_s323] := __var_15;
[L2829]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s323];
[L2830]              assert { :EventEmitted "Transfer_ERC20" } true;
[L2336]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s140, amount_s140);
[L2337]  COND FALSE  !(revert)
[L2348]              __ret_0_ := true;
[L419]   RET         call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L420]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !((((((((__ret_0_ == true && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowances_ERC20[this] == old(_allowances_ERC20[this])) && governance_YFV[this] == old(governance_YFV[this])) && minters_YFV[this] == old(minters_YFV[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]));
[L2]                 revert := revert_hold;
[L4875]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L4991]  RET         call CorralChoice_YFV(this);

Loop:
[L4991]  CALL        call CorralChoice_YFV(this);
[L4804]              havoc msgsender_MSG;
[L4805]              havoc msgvalue_MSG;
[L4806]              havoc choice;
[L4807]              havoc __ret_0_totalSupply;
[L4808]              havoc account_s121;
[L4809]              havoc __ret_0_balanceOf;
[L4810]              havoc recipient_s140;
[L4811]              havoc amount_s140;
[L4812]              havoc __ret_0_transfer;
[L4813]              havoc owner_s156;
[L4814]              havoc spender_s156;
[L4815]              havoc __ret_0_allowance;
[L4816]              havoc spender_s175;
[L4817]              havoc amount_s175;
[L4818]              havoc __ret_0_approve;
[L4819]              havoc sender_s211;
[L4820]              havoc recipient_s211;
[L4821]              havoc amount_s211;
[L4822]              havoc __ret_0_transferFrom;
[L4823]              havoc spender_s238;
[L4824]              havoc addedValue_s238;
[L4825]              havoc __ret_0_increaseAllowance;
[L4826]              havoc spender_s266;
[L4827]              havoc subtractedValue_s266;
[L4828]              havoc __ret_0_decreaseAllowance;
[L4829]              havoc name_s484;
[L4830]              havoc symbol_s484;
[L4831]              havoc decimals_s484;
[L4832]              havoc __ret_0_name;
[L4833]              havoc __ret_0_symbol;
[L4834]              havoc __ret_0_decimals;
[L4835]              havoc __ret_0_governance;
[L4836]              havoc arg744_s0;
[L4837]              havoc __ret_0_minters;
[L4838]              havoc account_s671;
[L4839]              havoc amount_s671;
[L4840]              havoc amount_s683;
[L4841]              havoc _governance_s701;
[L4842]              havoc _minter_s721;
[L4843]              havoc _minter_s741;
[L4844]              havoc tmpNow;
[L4845]              havoc gas;
[L4846]              assume gas > 4000000 && gas <= 8000000;
[L4847]              tmpNow := now;
[L4848]              havoc now;
[L4849]              assume now > tmpNow;
[L4850]              assume msgsender_MSG != null;
[L4851]              assume DType[msgsender_MSG] != IERC20;
[L4852]              assume DType[msgsender_MSG] != Context;
[L4853]              assume DType[msgsender_MSG] != ERC20;
[L4854]              assume DType[msgsender_MSG] != ERC20Detailed;
[L4855]              assume DType[msgsender_MSG] != SafeMath;
[L4856]              assume DType[msgsender_MSG] != YFV;
[L4857]              Alloc[msgsender_MSG] := true;
[L4858]  COND FALSE  !(choice == 18)
[L4864]  COND FALSE  !(choice == 17)
[L4870]  COND TRUE   choice == 16
[L4871]              gas := gas - 21000;
[L4872]  COND TRUE   gas >= 0
[L4873]              assume amount_s140 >= 0 && amount_s140 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4874]              assume msgvalue_MSG == 0;
[L4875]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((msgsender_MSG == recipient_s140 && amount_s140 <= _balances_ERC20[this][msgsender_MSG]) && amount_s140 >= 0) && amount_s140 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s140] >= 0) && _balances_ERC20[this][recipient_s140] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2]                 revert := revert_hold;
[L392]               havoc __exception;
[L393]               revert := false;
[L394]   COND FALSE  !(__exception)
[L419]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L2322]  COND TRUE   DType[this] == YFV
[L2323]  CALL        call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2200]              __ret_0_ := msgsender_MSG;
[L2323]  RET         call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2324]  COND FALSE  !(revert)
[L2335]  COND TRUE   DType[this] == YFV
[L2336]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s140, amount_s140);
[L2806]              __var_12 := null;
[L2807]  COND FALSE  !(!(sender_s323 != null))
[L2811]              __var_13 := null;
[L2812]  COND FALSE  !(!(recipient_s323 != null))
[L2816]  CALL        call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s323], amount_s323, -806116454);
[L3129]  COND FALSE  !(!(b_s561 <= a_s561))
[L3133]              c_s561 := (a_s561 - b_s561) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3134]              __ret_0_ := c_s561;
[L2816]  RET         call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s323], amount_s323, -806116454);
[L2817]  COND FALSE  !(revert)
[L2820]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s323];
[L2821]              _balances_ERC20[this][sender_s323] := __var_14;
[L2822]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s323];
[L2823]  CALL        call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s323], amount_s323);
[L3105]              c_s534 := (a_s534 + b_s534) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3106]  COND FALSE  !(!(c_s534 >= a_s534))
[L3110]              __ret_0_ := c_s534;
[L2823]  RET         call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s323], amount_s323);
[L2824]  COND FALSE  !(revert)
[L2827]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s323];
[L2828]              _balances_ERC20[this][recipient_s323] := __var_15;
[L2829]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s323];
[L2830]              assert { :EventEmitted "Transfer_ERC20" } true;
[L2336]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s140, amount_s140);
[L2337]  COND FALSE  !(revert)
[L2348]              __ret_0_ := true;
[L419]   RET         call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L420]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !((((((((__ret_0_ == true && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowances_ERC20[this] == old(_allowances_ERC20[this])) && governance_YFV[this] == old(governance_YFV[this])) && minters_YFV[this] == old(minters_YFV[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]));
[L2]                 revert := revert_hold;
[L4875]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L4991]  RET         call CorralChoice_YFV(this);

[2020-11-25 09:39:10,014 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 09:39:10,015 INFO  L82        PathProgramCache]: Analyzing trace with hash -160631116, now seen corresponding path program 1 times
[2020-11-25 09:39:10,015 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 09:39:10,048 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 09:39:11,207 INFO  L134       CoverageAnalysis]: Checked inductivity of 279 backedges. 13 proven. 151 refuted. 0 times theorem prover too weak. 115 trivial. 0 not checked.
[2020-11-25 09:39:11,208 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 09:39:11,208 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [49] total 49
[2020-11-25 09:39:11,208 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 09:39:11,208 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 49 interpolants.
[2020-11-25 09:39:11,209 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=168, Invalid=2184, Unknown=0, NotChecked=0, Total=2352
[2020-11-25 09:39:11,209 INFO  L87              Difference]: Start difference. First operand 3229 states and 3979 transitions. cyclomatic complexity: 791 Second operand 49 states.
[2020-11-25 09:39:21,751 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 09:39:21,752 INFO  L93              Difference]: Finished difference Result 3496 states and 4592 transitions.
[2020-11-25 09:39:21,752 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 42 states. 
[2020-11-25 09:39:21,752 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 3496 states and 4592 transitions.
[2020-11-25 09:39:21,761 INFO  L131   ngComponentsAnalysis]: Automaton has 6 accepting balls. 12
[2020-11-25 09:39:21,772 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 3496 states to 3496 states and 4592 transitions.
[2020-11-25 09:39:21,772 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 810
[2020-11-25 09:39:21,772 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 810
[2020-11-25 09:39:21,772 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 3496 states and 4592 transitions.
[2020-11-25 09:39:21,776 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 09:39:21,776 INFO  L728         BuchiCegarLoop]: Abstraction has 3496 states and 4592 transitions.
[2020-11-25 09:39:21,778 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 3496 states and 4592 transitions.
[2020-11-25 09:39:21,793 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 3496 to 3455.
[2020-11-25 09:39:21,793 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 3455 states.
[2020-11-25 09:39:21,799 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 3455 states to 3455 states and 4438 transitions.
[2020-11-25 09:39:21,799 INFO  L751         BuchiCegarLoop]: Abstraction has 3455 states and 4438 transitions.
[2020-11-25 09:39:21,799 INFO  L631         BuchiCegarLoop]: Abstraction has 3455 states and 4438 transitions.
[2020-11-25 09:39:21,799 INFO  L445         BuchiCegarLoop]: ======== Iteration 25============
[2020-11-25 09:39:21,799 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 3455 states and 4438 transitions.
[2020-11-25 09:39:21,803 INFO  L131   ngComponentsAnalysis]: Automaton has 6 accepting balls. 12
[2020-11-25 09:39:21,803 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 09:39:21,803 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 09:39:21,804 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 09:39:21,804 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_ERC200 := false;
[L2]                 call_transfer_ERC200 := false;
[L2]     CALL        call main();
[L4981]              assume null == 0;
[L4982]  CALL        call this := FreshRefGenerator__success();
[L2122]              havoc newRef;
[L2123]              assume Alloc[newRef] == false;
[L2124]              Alloc[newRef] := true;
[L2125]              assume newRef != null;
[L4982]  RET         call this := FreshRefGenerator__success();
[L4983]              assume now >= 0;
[L4984]              assume DType[this] == YFV;
[L4985]              assume msgvalue_MSG == 0;
[L4986]              gas := gas - 53000;
[L4987]  CALL        call YFV_YFV(this, msgsender_MSG, msgvalue_MSG);
[L1098]              havoc __exception;
[L1099]              revert := false;
[L1100]  COND FALSE  !(__exception)
[L1125]  CALL        call YFV_YFV__success(this, msgsender_MSG, msgvalue_MSG);
[L3242]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2186]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2171]              assume msgsender_MSG != null;
[L2172]              Balance[this] := 0;
[L2186]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2187]  COND FALSE  !(revert)
[L3242]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3243]  COND FALSE  !(revert)
[L3246]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2154]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2139]              assume msgsender_MSG != null;
[L2140]              Balance[this] := 0;
[L2154]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2155]  COND FALSE  !(revert)
[L3246]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3247]  COND FALSE  !(revert)
[L3250]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2248]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2186]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2171]              assume msgsender_MSG != null;
[L2172]              Balance[this] := 0;
[L2186]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2187]  COND FALSE  !(revert)
[L2248]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2249]  COND FALSE  !(revert)
[L2252]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2154]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2139]              assume msgsender_MSG != null;
[L2140]              Balance[this] := 0;
[L2154]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2155]  COND FALSE  !(revert)
[L2252]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2253]  COND FALSE  !(revert)
[L2256]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2220]              assume msgsender_MSG != null;
[L2221]              Balance[this] := 0;
[L2222]              _balances_ERC20[this] := zeroRefintArr();
[L2223]              sum__balances0[this] := 0;
[L2224]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2225]              sum__allowances1[this] := 0;
[L2226]              _totalSupply_ERC20[this] := 0;
[L2256]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2257]  COND FALSE  !(revert)
[L3250]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3251]  COND FALSE  !(revert)
[L3254]  CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -868984158, 934069305, 18);
[L3012]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2154]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2139]              assume msgsender_MSG != null;
[L2140]              Balance[this] := 0;
[L2154]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2155]  COND FALSE  !(revert)
[L3012]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3013]  COND FALSE  !(revert)
[L3016]  CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s484, symbol_s484, decimals_s484);
[L2987]              assume msgsender_MSG != null;
[L2988]              Balance[this] := 0;
[L2989]              _name_ERC20Detailed[this] := 1252836592;
[L2990]              _symbol_ERC20Detailed[this] := 1252836592;
[L2991]              _decimals_ERC20Detailed[this] := 0;
[L2993]              _name_ERC20Detailed[this] := name_s484;
[L2994]              _symbol_ERC20Detailed[this] := symbol_s484;
[L2995]              _decimals_ERC20Detailed[this] := decimals_s484;
[L3016]  RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s484, symbol_s484, decimals_s484);
[L3017]  COND FALSE  !(revert)
[L3254]  RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -868984158, 934069305, 18);
[L3255]  COND FALSE  !(revert)
[L3258]  CALL        call YFV_YFV_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3208]              assume msgsender_MSG != null;
[L3209]              Balance[this] := 0;
[L3210]              governance_YFV[this] := null;
[L3211]              minters_YFV[this] := zeroRefboolArr();
[L3213]              governance_YFV[this] := msgsender_MSG;
[L3258]  RET         call YFV_YFV_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3259]  COND FALSE  !(revert)
[L1125]  RET         call YFV_YFV__success(this, msgsender_MSG, msgvalue_MSG);
[L1126]              assume !revert && gas >= 0;
[L4987]  RET         call YFV_YFV(this, msgsender_MSG, msgvalue_MSG);
[L4988]              assume !revert && gas >= 0;
[L4991]  CALL        call CorralChoice_YFV(this);
[L4804]              havoc msgsender_MSG;
[L4805]              havoc msgvalue_MSG;
[L4806]              havoc choice;
[L4807]              havoc __ret_0_totalSupply;
[L4808]              havoc account_s121;
[L4809]              havoc __ret_0_balanceOf;
[L4810]              havoc recipient_s140;
[L4811]              havoc amount_s140;
[L4812]              havoc __ret_0_transfer;
[L4813]              havoc owner_s156;
[L4814]              havoc spender_s156;
[L4815]              havoc __ret_0_allowance;
[L4816]              havoc spender_s175;
[L4817]              havoc amount_s175;
[L4818]              havoc __ret_0_approve;
[L4819]              havoc sender_s211;
[L4820]              havoc recipient_s211;
[L4821]              havoc amount_s211;
[L4822]              havoc __ret_0_transferFrom;
[L4823]              havoc spender_s238;
[L4824]              havoc addedValue_s238;
[L4825]              havoc __ret_0_increaseAllowance;
[L4826]              havoc spender_s266;
[L4827]              havoc subtractedValue_s266;
[L4828]              havoc __ret_0_decreaseAllowance;
[L4829]              havoc name_s484;
[L4830]              havoc symbol_s484;
[L4831]              havoc decimals_s484;
[L4832]              havoc __ret_0_name;
[L4833]              havoc __ret_0_symbol;
[L4834]              havoc __ret_0_decimals;
[L4835]              havoc __ret_0_governance;
[L4836]              havoc arg744_s0;
[L4837]              havoc __ret_0_minters;
[L4838]              havoc account_s671;
[L4839]              havoc amount_s671;
[L4840]              havoc amount_s683;
[L4841]              havoc _governance_s701;
[L4842]              havoc _minter_s721;
[L4843]              havoc _minter_s741;
[L4844]              havoc tmpNow;
[L4845]              havoc gas;
[L4846]              assume gas > 4000000 && gas <= 8000000;
[L4847]              tmpNow := now;
[L4848]              havoc now;
[L4849]              assume now > tmpNow;
[L4850]              assume msgsender_MSG != null;
[L4851]              assume DType[msgsender_MSG] != IERC20;
[L4852]              assume DType[msgsender_MSG] != Context;
[L4853]              assume DType[msgsender_MSG] != ERC20;
[L4854]              assume DType[msgsender_MSG] != ERC20Detailed;
[L4855]              assume DType[msgsender_MSG] != SafeMath;
[L4856]              assume DType[msgsender_MSG] != YFV;
[L4857]              Alloc[msgsender_MSG] := true;
[L4858]  COND FALSE  !(choice == 18)
[L4864]  COND FALSE  !(choice == 17)
[L4870]  COND FALSE  !(choice == 16)
[L4877]  COND FALSE  !(choice == 15)
[L4883]  COND FALSE  !(choice == 14)
[L4890]  COND FALSE  !(choice == 13)
[L4897]  COND FALSE  !(choice == 12)
[L4904]  COND FALSE  !(choice == 11)
[L4911]  COND FALSE  !(choice == 10)
[L4917]  COND FALSE  !(choice == 9)
[L4923]  COND FALSE  !(choice == 8)
[L4929]  COND FALSE  !(choice == 7)
[L4935]  COND FALSE  !(choice == 6)
[L4941]  COND FALSE  !(choice == 5)
[L4948]  COND TRUE   choice == 4
[L4949]              gas := gas - 21000;
[L4950]  COND TRUE   gas >= 0
[L4951]              assume amount_s683 >= 0 && amount_s683 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4952]              assume msgvalue_MSG == 0;
[L4953]  CALL        call burn~uint256_YFV(this, msgsender_MSG, msgvalue_MSG, amount_s683);
[L1220]              havoc __exception;
[L1221]              revert := false;
[L1222]  COND FALSE  !(__exception)
[L1247]  CALL        call burn~uint256_YFV__success(this, msgsender_MSG, msgvalue_MSG, amount_s683);
[L3310]  COND TRUE   DType[this] == YFV
[L3311]  CALL        call _burn~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, amount_s683);
[L2911]              __var_19 := null;
[L2912]  COND FALSE  !(!(account_s411 != null))
[L2916]  CALL        call __var_20 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s411], amount_s411, 392639254);
[L3129]  COND FALSE  !(!(b_s561 <= a_s561))
[L3133]              c_s561 := (a_s561 - b_s561) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3134]              __ret_0_ := c_s561;
[L2916]  RET         call __var_20 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s411], amount_s411, 392639254);
[L2917]  COND FALSE  !(revert)
[L2920]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s411];
[L2921]              _balances_ERC20[this][account_s411] := __var_20;
[L2922]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s411];
[L2923]  CALL        call __var_21 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s411, 1252836592);
[L3129]  COND FALSE  !(!(b_s561 <= a_s561))
[L3133]              c_s561 := (a_s561 - b_s561) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3134]              __ret_0_ := c_s561;
[L2923]  RET         call __var_21 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s411, 1252836592);
[L2924]  COND FALSE  !(revert)
[L2927]              _totalSupply_ERC20[this] := __var_21;
[L2928]              assert { :EventEmitted "Transfer_ERC20" } true;
[L3311]  RET         call _burn~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, amount_s683);
[L3312]  COND FALSE  !(revert)
[L1247]  RET         call burn~uint256_YFV__success(this, msgsender_MSG, msgvalue_MSG, amount_s683);
[L1248]              assume !revert && gas >= 0;
[L4953]  RET         call burn~uint256_YFV(this, msgsender_MSG, msgvalue_MSG, amount_s683);
[L4991]  RET         call CorralChoice_YFV(this);
[L4991]  CALL        call CorralChoice_YFV(this);
[L4804]              havoc msgsender_MSG;
[L4805]              havoc msgvalue_MSG;
[L4806]              havoc choice;
[L4807]              havoc __ret_0_totalSupply;
[L4808]              havoc account_s121;
[L4809]              havoc __ret_0_balanceOf;
[L4810]              havoc recipient_s140;
[L4811]              havoc amount_s140;
[L4812]              havoc __ret_0_transfer;
[L4813]              havoc owner_s156;
[L4814]              havoc spender_s156;
[L4815]              havoc __ret_0_allowance;
[L4816]              havoc spender_s175;
[L4817]              havoc amount_s175;
[L4818]              havoc __ret_0_approve;
[L4819]              havoc sender_s211;
[L4820]              havoc recipient_s211;
[L4821]              havoc amount_s211;
[L4822]              havoc __ret_0_transferFrom;
[L4823]              havoc spender_s238;
[L4824]              havoc addedValue_s238;
[L4825]              havoc __ret_0_increaseAllowance;
[L4826]              havoc spender_s266;
[L4827]              havoc subtractedValue_s266;
[L4828]              havoc __ret_0_decreaseAllowance;
[L4829]              havoc name_s484;
[L4830]              havoc symbol_s484;
[L4831]              havoc decimals_s484;
[L4832]              havoc __ret_0_name;
[L4833]              havoc __ret_0_symbol;
[L4834]              havoc __ret_0_decimals;
[L4835]              havoc __ret_0_governance;
[L4836]              havoc arg744_s0;
[L4837]              havoc __ret_0_minters;
[L4838]              havoc account_s671;
[L4839]              havoc amount_s671;
[L4840]              havoc amount_s683;
[L4841]              havoc _governance_s701;
[L4842]              havoc _minter_s721;
[L4843]              havoc _minter_s741;
[L4844]              havoc tmpNow;
[L4845]              havoc gas;
[L4846]              assume gas > 4000000 && gas <= 8000000;
[L4847]              tmpNow := now;
[L4848]              havoc now;
[L4849]              assume now > tmpNow;
[L4850]              assume msgsender_MSG != null;
[L4851]              assume DType[msgsender_MSG] != IERC20;
[L4852]              assume DType[msgsender_MSG] != Context;
[L4853]              assume DType[msgsender_MSG] != ERC20;
[L4854]              assume DType[msgsender_MSG] != ERC20Detailed;
[L4855]              assume DType[msgsender_MSG] != SafeMath;
[L4856]              assume DType[msgsender_MSG] != YFV;
[L4857]              Alloc[msgsender_MSG] := true;
[L4858]  COND FALSE  !(choice == 18)
[L4864]  COND FALSE  !(choice == 17)
[L4870]  COND FALSE  !(choice == 16)
[L4877]  COND FALSE  !(choice == 15)
[L4883]  COND FALSE  !(choice == 14)
[L4890]  COND TRUE   choice == 13
[L4891]              gas := gas - 21000;
[L4892]  COND TRUE   gas >= 0
[L4893]              assume amount_s211 >= 0 && amount_s211 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4894]              assume msgvalue_MSG == 0;
[L4895]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, sender_s211, recipient_s211, amount_s211);
[L572]               havoc __exception;
[L573]               revert := false;
[L574]   COND FALSE  !(__exception)
[L599]   CALL        call __ret_0_ := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s211, recipient_s211, amount_s211);
[L2500]  COND TRUE   DType[this] == YFV
[L2501]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s211, recipient_s211, amount_s211);
[L2806]              __var_12 := null;
[L2807]  COND FALSE  !(!(sender_s323 != null))
[L2811]              __var_13 := null;
[L2812]  COND FALSE  !(!(recipient_s323 != null))
[L2816]  CALL        call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s323], amount_s323, -806116454);
[L3129]  COND FALSE  !(!(b_s561 <= a_s561))
[L3133]              c_s561 := (a_s561 - b_s561) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3134]              __ret_0_ := c_s561;
[L2816]  RET         call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s323], amount_s323, -806116454);
[L2817]  COND FALSE  !(revert)
[L2820]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s323];
[L2821]              _balances_ERC20[this][sender_s323] := __var_14;
[L2822]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s323];
[L2823]  CALL        call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s323], amount_s323);
[L3105]              c_s534 := (a_s534 + b_s534) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3106]  COND FALSE  !(!(c_s534 >= a_s534))
[L3110]              __ret_0_ := c_s534;
[L2823]  RET         call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s323], amount_s323);
[L2824]  COND FALSE  !(revert)
[L2827]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s323];
[L2828]              _balances_ERC20[this][recipient_s323] := __var_15;
[L2829]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s323];
[L2830]              assert { :EventEmitted "Transfer_ERC20" } true;
[L2501]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s211, recipient_s211, amount_s211);
[L2502]  COND FALSE  !(revert)
[L2513]  COND TRUE   DType[this] == YFV
[L2514]  CALL        call __var_3 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2200]              __ret_0_ := msgsender_MSG;
[L2514]  RET         call __var_3 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2515]  COND FALSE  !(revert)
[L2526]  COND TRUE   DType[this] == YFV
[L2527]  CALL        call __var_5 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2200]              __ret_0_ := msgsender_MSG;
[L2527]  RET         call __var_5 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2528]  COND FALSE  !(revert)
[L2539]  CALL        call __var_4 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s211][__var_5], amount_s211, -2057360831);
[L3129]  COND FALSE  !(!(b_s561 <= a_s561))
[L3133]              c_s561 := (a_s561 - b_s561) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3134]              __ret_0_ := c_s561;
[L2539]  RET         call __var_4 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s211][__var_5], amount_s211, -2057360831);
[L2540]  COND FALSE  !(revert)
[L2543]  COND TRUE   DType[this] == YFV
[L2544]  CALL        call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s211, __var_3, __var_4);
[L2954]              __var_22 := null;
[L2955]  COND FALSE  !(!(owner_s453 != null))
[L2959]              __var_23 := null;
[L2960]  COND FALSE  !(!(spender_s453 != null))
[L2964]              sum__allowances1[owner_s453] := sum__allowances1[owner_s453] - _allowances_ERC20[this][owner_s453][spender_s453];
[L2965]              _allowances_ERC20[this][owner_s453][spender_s453] := amount_s453;
[L2966]              sum__allowances1[owner_s453] := sum__allowances1[owner_s453] + _allowances_ERC20[this][owner_s453][spender_s453];
[L2967]              assert { :EventEmitted "Approval_ERC20" } true;
[L2544]  RET         call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s211, __var_3, __var_4);
[L2545]  COND FALSE  !(revert)
[L2556]              __ret_0_ := true;
[L599]   RET         call __ret_0_ := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s211, recipient_s211, amount_s211);
[L600]               assume !revert && gas >= 0;
[L4895]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, sender_s211, recipient_s211, amount_s211);
[L4991]  RET         call CorralChoice_YFV(this);
[L4991]  CALL        call CorralChoice_YFV(this);
[L4804]              havoc msgsender_MSG;
[L4805]              havoc msgvalue_MSG;
[L4806]              havoc choice;
[L4807]              havoc __ret_0_totalSupply;
[L4808]              havoc account_s121;
[L4809]              havoc __ret_0_balanceOf;
[L4810]              havoc recipient_s140;
[L4811]              havoc amount_s140;
[L4812]              havoc __ret_0_transfer;
[L4813]              havoc owner_s156;
[L4814]              havoc spender_s156;
[L4815]              havoc __ret_0_allowance;
[L4816]              havoc spender_s175;
[L4817]              havoc amount_s175;
[L4818]              havoc __ret_0_approve;
[L4819]              havoc sender_s211;
[L4820]              havoc recipient_s211;
[L4821]              havoc amount_s211;
[L4822]              havoc __ret_0_transferFrom;
[L4823]              havoc spender_s238;
[L4824]              havoc addedValue_s238;
[L4825]              havoc __ret_0_increaseAllowance;
[L4826]              havoc spender_s266;
[L4827]              havoc subtractedValue_s266;
[L4828]              havoc __ret_0_decreaseAllowance;
[L4829]              havoc name_s484;
[L4830]              havoc symbol_s484;
[L4831]              havoc decimals_s484;
[L4832]              havoc __ret_0_name;
[L4833]              havoc __ret_0_symbol;
[L4834]              havoc __ret_0_decimals;
[L4835]              havoc __ret_0_governance;
[L4836]              havoc arg744_s0;
[L4837]              havoc __ret_0_minters;
[L4838]              havoc account_s671;
[L4839]              havoc amount_s671;
[L4840]              havoc amount_s683;
[L4841]              havoc _governance_s701;
[L4842]              havoc _minter_s721;
[L4843]              havoc _minter_s741;
[L4844]              havoc tmpNow;
[L4845]              havoc gas;
[L4846]              assume gas > 4000000 && gas <= 8000000;
[L4847]              tmpNow := now;
[L4848]              havoc now;
[L4849]              assume now > tmpNow;
[L4850]              assume msgsender_MSG != null;
[L4851]              assume DType[msgsender_MSG] != IERC20;
[L4852]              assume DType[msgsender_MSG] != Context;
[L4853]              assume DType[msgsender_MSG] != ERC20;
[L4854]              assume DType[msgsender_MSG] != ERC20Detailed;
[L4855]              assume DType[msgsender_MSG] != SafeMath;
[L4856]              assume DType[msgsender_MSG] != YFV;
[L4857]              Alloc[msgsender_MSG] := true;
[L4858]  COND FALSE  !(choice == 18)
[L4864]  COND FALSE  !(choice == 17)
[L4870]  COND TRUE   choice == 16
[L4871]              gas := gas - 21000;
[L4872]  COND TRUE   gas >= 0
[L4873]              assume amount_s140 >= 0 && amount_s140 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4874]              assume msgvalue_MSG == 0;
[L4875]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((msgsender_MSG == recipient_s140 && amount_s140 <= _balances_ERC20[this][msgsender_MSG]) && amount_s140 >= 0) && amount_s140 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s140] >= 0) && _balances_ERC20[this][recipient_s140] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2]                 revert := revert_hold;
[L392]               havoc __exception;
[L393]               revert := false;
[L394]   COND FALSE  !(__exception)
[L419]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L2322]  COND TRUE   DType[this] == YFV
[L2323]  CALL        call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2200]              __ret_0_ := msgsender_MSG;
[L2323]  RET         call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2324]  COND FALSE  !(revert)
[L2335]  COND TRUE   DType[this] == YFV
[L2336]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s140, amount_s140);
[L2806]              __var_12 := null;
[L2807]  COND FALSE  !(!(sender_s323 != null))
[L2811]              __var_13 := null;
[L2812]  COND FALSE  !(!(recipient_s323 != null))
[L2816]  CALL        call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s323], amount_s323, -806116454);
[L3129]  COND FALSE  !(!(b_s561 <= a_s561))
[L3133]              c_s561 := (a_s561 - b_s561) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3134]              __ret_0_ := c_s561;
[L2816]  RET         call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s323], amount_s323, -806116454);
[L2817]  COND FALSE  !(revert)
[L2820]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s323];
[L2821]              _balances_ERC20[this][sender_s323] := __var_14;
[L2822]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s323];
[L2823]  CALL        call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s323], amount_s323);
[L3105]              c_s534 := (a_s534 + b_s534) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3106]  COND FALSE  !(!(c_s534 >= a_s534))
[L3110]              __ret_0_ := c_s534;
[L2823]  RET         call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s323], amount_s323);
[L2824]  COND FALSE  !(revert)
[L2827]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s323];
[L2828]              _balances_ERC20[this][recipient_s323] := __var_15;
[L2829]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s323];
[L2830]              assert { :EventEmitted "Transfer_ERC20" } true;
[L2336]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s140, amount_s140);
[L2337]  COND FALSE  !(revert)
[L2348]              __ret_0_ := true;
[L419]   RET         call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L420]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !((((((((__ret_0_ == true && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowances_ERC20[this] == old(_allowances_ERC20[this])) && governance_YFV[this] == old(governance_YFV[this])) && minters_YFV[this] == old(minters_YFV[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]));
[L2]                 revert := revert_hold;
[L4875]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L4991]  RET         call CorralChoice_YFV(this);
[L4991]  CALL        call CorralChoice_YFV(this);
[L4804]              havoc msgsender_MSG;
[L4805]              havoc msgvalue_MSG;
[L4806]              havoc choice;
[L4807]              havoc __ret_0_totalSupply;
[L4808]              havoc account_s121;
[L4809]              havoc __ret_0_balanceOf;
[L4810]              havoc recipient_s140;
[L4811]              havoc amount_s140;
[L4812]              havoc __ret_0_transfer;
[L4813]              havoc owner_s156;
[L4814]              havoc spender_s156;
[L4815]              havoc __ret_0_allowance;
[L4816]              havoc spender_s175;
[L4817]              havoc amount_s175;
[L4818]              havoc __ret_0_approve;
[L4819]              havoc sender_s211;
[L4820]              havoc recipient_s211;
[L4821]              havoc amount_s211;
[L4822]              havoc __ret_0_transferFrom;
[L4823]              havoc spender_s238;
[L4824]              havoc addedValue_s238;
[L4825]              havoc __ret_0_increaseAllowance;
[L4826]              havoc spender_s266;
[L4827]              havoc subtractedValue_s266;
[L4828]              havoc __ret_0_decreaseAllowance;
[L4829]              havoc name_s484;
[L4830]              havoc symbol_s484;
[L4831]              havoc decimals_s484;
[L4832]              havoc __ret_0_name;
[L4833]              havoc __ret_0_symbol;
[L4834]              havoc __ret_0_decimals;
[L4835]              havoc __ret_0_governance;
[L4836]              havoc arg744_s0;
[L4837]              havoc __ret_0_minters;
[L4838]              havoc account_s671;
[L4839]              havoc amount_s671;
[L4840]              havoc amount_s683;
[L4841]              havoc _governance_s701;
[L4842]              havoc _minter_s721;
[L4843]              havoc _minter_s741;
[L4844]              havoc tmpNow;
[L4845]              havoc gas;
[L4846]              assume gas > 4000000 && gas <= 8000000;
[L4847]              tmpNow := now;
[L4848]              havoc now;
[L4849]              assume now > tmpNow;
[L4850]              assume msgsender_MSG != null;
[L4851]              assume DType[msgsender_MSG] != IERC20;
[L4852]              assume DType[msgsender_MSG] != Context;
[L4853]              assume DType[msgsender_MSG] != ERC20;
[L4854]              assume DType[msgsender_MSG] != ERC20Detailed;
[L4855]              assume DType[msgsender_MSG] != SafeMath;
[L4856]              assume DType[msgsender_MSG] != YFV;
[L4857]              Alloc[msgsender_MSG] := true;
[L4858]  COND FALSE  !(choice == 18)
[L4864]  COND FALSE  !(choice == 17)
[L4870]  COND TRUE   choice == 16
[L4871]              gas := gas - 21000;
[L4872]  COND TRUE   gas >= 0
[L4873]              assume amount_s140 >= 0 && amount_s140 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4874]              assume msgvalue_MSG == 0;
[L4875]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == recipient_s140 && amount_s140 <= _balances_ERC20[this][msgsender_MSG]) && amount_s140 >= 0) && amount_s140 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s140] >= 0) && _balances_ERC20[this][recipient_s140] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC200 := true;
[L2]                 call_transfer_ERC200 := false;
[L2]                 revert := revert_hold;
[L392]               havoc __exception;
[L393]               revert := false;
[L394]   COND FALSE  !(__exception)
[L419]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L2322]  COND TRUE   DType[this] == YFV
[L2323]  CALL        call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2200]              __ret_0_ := msgsender_MSG;
[L2323]  RET         call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2324]  COND FALSE  !(revert)
[L2335]  COND TRUE   DType[this] == YFV
[L2336]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s140, amount_s140);
[L2806]              __var_12 := null;
[L2807]  COND FALSE  !(!(sender_s323 != null))
[L2811]              __var_13 := null;
[L2812]  COND FALSE  !(!(recipient_s323 != null))
[L2816]  CALL        call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s323], amount_s323, -806116454);
[L3129]  COND FALSE  !(!(b_s561 <= a_s561))
[L3133]              c_s561 := (a_s561 - b_s561) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3134]              __ret_0_ := c_s561;
[L2816]  RET         call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s323], amount_s323, -806116454);
[L2817]  COND FALSE  !(revert)
[L2820]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s323];
[L2821]              _balances_ERC20[this][sender_s323] := __var_14;
[L2822]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s323];
[L2823]  CALL        call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s323], amount_s323);
[L3105]              c_s534 := (a_s534 + b_s534) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3106]  COND FALSE  !(!(c_s534 >= a_s534))
[L3110]              __ret_0_ := c_s534;
[L2823]  RET         call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s323], amount_s323);
[L2824]  COND FALSE  !(revert)
[L2827]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s323];
[L2828]              _balances_ERC20[this][recipient_s323] := __var_15;
[L2829]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s323];
[L2830]              assert { :EventEmitted "Transfer_ERC20" } true;
[L2336]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s140, amount_s140);
[L2337]  COND FALSE  !(revert)
[L2348]              __ret_0_ := true;
[L419]   RET         call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L420]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !((((((((__ret_0_ == true && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowances_ERC20[this] == old(_allowances_ERC20[this])) && governance_YFV[this] == old(governance_YFV[this])) && minters_YFV[this] == old(minters_YFV[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]));
[L2]                 revert := revert_hold;
[L4875]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L4991]  RET         call CorralChoice_YFV(this);

Loop:
[L4991]  CALL        call CorralChoice_YFV(this);
[L4804]              havoc msgsender_MSG;
[L4805]              havoc msgvalue_MSG;
[L4806]              havoc choice;
[L4807]              havoc __ret_0_totalSupply;
[L4808]              havoc account_s121;
[L4809]              havoc __ret_0_balanceOf;
[L4810]              havoc recipient_s140;
[L4811]              havoc amount_s140;
[L4812]              havoc __ret_0_transfer;
[L4813]              havoc owner_s156;
[L4814]              havoc spender_s156;
[L4815]              havoc __ret_0_allowance;
[L4816]              havoc spender_s175;
[L4817]              havoc amount_s175;
[L4818]              havoc __ret_0_approve;
[L4819]              havoc sender_s211;
[L4820]              havoc recipient_s211;
[L4821]              havoc amount_s211;
[L4822]              havoc __ret_0_transferFrom;
[L4823]              havoc spender_s238;
[L4824]              havoc addedValue_s238;
[L4825]              havoc __ret_0_increaseAllowance;
[L4826]              havoc spender_s266;
[L4827]              havoc subtractedValue_s266;
[L4828]              havoc __ret_0_decreaseAllowance;
[L4829]              havoc name_s484;
[L4830]              havoc symbol_s484;
[L4831]              havoc decimals_s484;
[L4832]              havoc __ret_0_name;
[L4833]              havoc __ret_0_symbol;
[L4834]              havoc __ret_0_decimals;
[L4835]              havoc __ret_0_governance;
[L4836]              havoc arg744_s0;
[L4837]              havoc __ret_0_minters;
[L4838]              havoc account_s671;
[L4839]              havoc amount_s671;
[L4840]              havoc amount_s683;
[L4841]              havoc _governance_s701;
[L4842]              havoc _minter_s721;
[L4843]              havoc _minter_s741;
[L4844]              havoc tmpNow;
[L4845]              havoc gas;
[L4846]              assume gas > 4000000 && gas <= 8000000;
[L4847]              tmpNow := now;
[L4848]              havoc now;
[L4849]              assume now > tmpNow;
[L4850]              assume msgsender_MSG != null;
[L4851]              assume DType[msgsender_MSG] != IERC20;
[L4852]              assume DType[msgsender_MSG] != Context;
[L4853]              assume DType[msgsender_MSG] != ERC20;
[L4854]              assume DType[msgsender_MSG] != ERC20Detailed;
[L4855]              assume DType[msgsender_MSG] != SafeMath;
[L4856]              assume DType[msgsender_MSG] != YFV;
[L4857]              Alloc[msgsender_MSG] := true;
[L4858]  COND TRUE   choice == 18
[L4859]              gas := gas - 21000;
[L4860]  COND FALSE  !(gas >= 0)
[L4991]  RET         call CorralChoice_YFV(this);

[2020-11-25 09:39:21,807 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 09:39:21,807 INFO  L82        PathProgramCache]: Analyzing trace with hash -54898334, now seen corresponding path program 1 times
[2020-11-25 09:39:21,808 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 09:39:21,871 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 09:39:27,068 INFO  L134       CoverageAnalysis]: Checked inductivity of 500 backedges. 26 proven. 287 refuted. 0 times theorem prover too weak. 187 trivial. 0 not checked.
[2020-11-25 09:39:27,069 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 09:39:27,069 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [78] total 78
[2020-11-25 09:39:27,069 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 09:39:27,069 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 79 interpolants.
[2020-11-25 09:39:27,070 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=339, Invalid=5823, Unknown=0, NotChecked=0, Total=6162
[2020-11-25 09:39:27,070 INFO  L87              Difference]: Start difference. First operand 3455 states and 4438 transitions. cyclomatic complexity: 1042 Second operand 79 states.
[2020-11-25 09:39:31,202 WARN  L188               SmtUtils]: Spent 105.00 ms on a formula simplification. DAG size of input: 73 DAG size of output: 48
[2020-11-25 09:39:51,155 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 09:39:51,155 INFO  L93              Difference]: Finished difference Result 3742 states and 5020 transitions.
[2020-11-25 09:39:51,155 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 59 states. 
[2020-11-25 09:39:51,155 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 3742 states and 5020 transitions.
[2020-11-25 09:39:51,165 INFO  L131   ngComponentsAnalysis]: Automaton has 6 accepting balls. 12
[2020-11-25 09:39:51,177 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 3742 states to 3742 states and 5020 transitions.
[2020-11-25 09:39:51,177 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 938
[2020-11-25 09:39:51,177 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 938
[2020-11-25 09:39:51,178 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 3742 states and 5020 transitions.
[2020-11-25 09:39:51,181 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 09:39:51,181 INFO  L728         BuchiCegarLoop]: Abstraction has 3742 states and 5020 transitions.
[2020-11-25 09:39:51,183 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 3742 states and 5020 transitions.
[2020-11-25 09:39:51,200 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 3742 to 3409.
[2020-11-25 09:39:51,200 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 3409 states.
[2020-11-25 09:39:51,206 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 3409 states to 3409 states and 4252 transitions.
[2020-11-25 09:39:51,206 INFO  L751         BuchiCegarLoop]: Abstraction has 3409 states and 4252 transitions.
[2020-11-25 09:39:51,206 INFO  L631         BuchiCegarLoop]: Abstraction has 3409 states and 4252 transitions.
[2020-11-25 09:39:51,206 INFO  L445         BuchiCegarLoop]: ======== Iteration 26============
[2020-11-25 09:39:51,206 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 3409 states and 4252 transitions.
[2020-11-25 09:39:51,209 INFO  L131   ngComponentsAnalysis]: Automaton has 4 accepting balls. 8
[2020-11-25 09:39:51,209 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 09:39:51,209 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 09:39:51,210 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 09:39:51,210 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_ERC200 := false;
[L2]                 call_transfer_ERC200 := false;
[L2]     CALL        call main();
[L4981]              assume null == 0;
[L4982]  CALL        call this := FreshRefGenerator__success();
[L2122]              havoc newRef;
[L2123]              assume Alloc[newRef] == false;
[L2124]              Alloc[newRef] := true;
[L2125]              assume newRef != null;
[L4982]  RET         call this := FreshRefGenerator__success();
[L4983]              assume now >= 0;
[L4984]              assume DType[this] == YFV;
[L4985]              assume msgvalue_MSG == 0;
[L4986]              gas := gas - 53000;
[L4987]  CALL        call YFV_YFV(this, msgsender_MSG, msgvalue_MSG);
[L1098]              havoc __exception;
[L1099]              revert := false;
[L1100]  COND FALSE  !(__exception)
[L1125]  CALL        call YFV_YFV__success(this, msgsender_MSG, msgvalue_MSG);
[L3242]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2186]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2171]              assume msgsender_MSG != null;
[L2172]              Balance[this] := 0;
[L2186]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2187]  COND FALSE  !(revert)
[L3242]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3243]  COND FALSE  !(revert)
[L3246]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2154]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2139]              assume msgsender_MSG != null;
[L2140]              Balance[this] := 0;
[L2154]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2155]  COND FALSE  !(revert)
[L3246]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3247]  COND FALSE  !(revert)
[L3250]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2248]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2186]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2171]              assume msgsender_MSG != null;
[L2172]              Balance[this] := 0;
[L2186]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2187]  COND FALSE  !(revert)
[L2248]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2249]  COND FALSE  !(revert)
[L2252]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2154]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2139]              assume msgsender_MSG != null;
[L2140]              Balance[this] := 0;
[L2154]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2155]  COND FALSE  !(revert)
[L2252]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2253]  COND FALSE  !(revert)
[L2256]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2220]              assume msgsender_MSG != null;
[L2221]              Balance[this] := 0;
[L2222]              _balances_ERC20[this] := zeroRefintArr();
[L2223]              sum__balances0[this] := 0;
[L2224]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2225]              sum__allowances1[this] := 0;
[L2226]              _totalSupply_ERC20[this] := 0;
[L2256]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2257]  COND FALSE  !(revert)
[L3250]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3251]  COND FALSE  !(revert)
[L3254]  CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -868984158, 934069305, 18);
[L3012]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2154]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2139]              assume msgsender_MSG != null;
[L2140]              Balance[this] := 0;
[L2154]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2155]  COND FALSE  !(revert)
[L3012]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3013]  COND FALSE  !(revert)
[L3016]  CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s484, symbol_s484, decimals_s484);
[L2987]              assume msgsender_MSG != null;
[L2988]              Balance[this] := 0;
[L2989]              _name_ERC20Detailed[this] := 1252836592;
[L2990]              _symbol_ERC20Detailed[this] := 1252836592;
[L2991]              _decimals_ERC20Detailed[this] := 0;
[L2993]              _name_ERC20Detailed[this] := name_s484;
[L2994]              _symbol_ERC20Detailed[this] := symbol_s484;
[L2995]              _decimals_ERC20Detailed[this] := decimals_s484;
[L3016]  RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s484, symbol_s484, decimals_s484);
[L3017]  COND FALSE  !(revert)
[L3254]  RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -868984158, 934069305, 18);
[L3255]  COND FALSE  !(revert)
[L3258]  CALL        call YFV_YFV_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3208]              assume msgsender_MSG != null;
[L3209]              Balance[this] := 0;
[L3210]              governance_YFV[this] := null;
[L3211]              minters_YFV[this] := zeroRefboolArr();
[L3213]              governance_YFV[this] := msgsender_MSG;
[L3258]  RET         call YFV_YFV_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3259]  COND FALSE  !(revert)
[L1125]  RET         call YFV_YFV__success(this, msgsender_MSG, msgvalue_MSG);
[L1126]              assume !revert && gas >= 0;
[L4987]  RET         call YFV_YFV(this, msgsender_MSG, msgvalue_MSG);
[L4988]              assume !revert && gas >= 0;
[L4991]  CALL        call CorralChoice_YFV(this);
[L4804]              havoc msgsender_MSG;
[L4805]              havoc msgvalue_MSG;
[L4806]              havoc choice;
[L4807]              havoc __ret_0_totalSupply;
[L4808]              havoc account_s121;
[L4809]              havoc __ret_0_balanceOf;
[L4810]              havoc recipient_s140;
[L4811]              havoc amount_s140;
[L4812]              havoc __ret_0_transfer;
[L4813]              havoc owner_s156;
[L4814]              havoc spender_s156;
[L4815]              havoc __ret_0_allowance;
[L4816]              havoc spender_s175;
[L4817]              havoc amount_s175;
[L4818]              havoc __ret_0_approve;
[L4819]              havoc sender_s211;
[L4820]              havoc recipient_s211;
[L4821]              havoc amount_s211;
[L4822]              havoc __ret_0_transferFrom;
[L4823]              havoc spender_s238;
[L4824]              havoc addedValue_s238;
[L4825]              havoc __ret_0_increaseAllowance;
[L4826]              havoc spender_s266;
[L4827]              havoc subtractedValue_s266;
[L4828]              havoc __ret_0_decreaseAllowance;
[L4829]              havoc name_s484;
[L4830]              havoc symbol_s484;
[L4831]              havoc decimals_s484;
[L4832]              havoc __ret_0_name;
[L4833]              havoc __ret_0_symbol;
[L4834]              havoc __ret_0_decimals;
[L4835]              havoc __ret_0_governance;
[L4836]              havoc arg744_s0;
[L4837]              havoc __ret_0_minters;
[L4838]              havoc account_s671;
[L4839]              havoc amount_s671;
[L4840]              havoc amount_s683;
[L4841]              havoc _governance_s701;
[L4842]              havoc _minter_s721;
[L4843]              havoc _minter_s741;
[L4844]              havoc tmpNow;
[L4845]              havoc gas;
[L4846]              assume gas > 4000000 && gas <= 8000000;
[L4847]              tmpNow := now;
[L4848]              havoc now;
[L4849]              assume now > tmpNow;
[L4850]              assume msgsender_MSG != null;
[L4851]              assume DType[msgsender_MSG] != IERC20;
[L4852]              assume DType[msgsender_MSG] != Context;
[L4853]              assume DType[msgsender_MSG] != ERC20;
[L4854]              assume DType[msgsender_MSG] != ERC20Detailed;
[L4855]              assume DType[msgsender_MSG] != SafeMath;
[L4856]              assume DType[msgsender_MSG] != YFV;
[L4857]              Alloc[msgsender_MSG] := true;
[L4858]  COND FALSE  !(choice == 18)
[L4864]  COND FALSE  !(choice == 17)
[L4870]  COND FALSE  !(choice == 16)
[L4877]  COND FALSE  !(choice == 15)
[L4883]  COND FALSE  !(choice == 14)
[L4890]  COND TRUE   choice == 13
[L4891]              gas := gas - 21000;
[L4892]  COND TRUE   gas >= 0
[L4893]              assume amount_s211 >= 0 && amount_s211 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4894]              assume msgvalue_MSG == 0;
[L4895]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, sender_s211, recipient_s211, amount_s211);
[L572]               havoc __exception;
[L573]               revert := false;
[L574]   COND FALSE  !(__exception)
[L599]   CALL        call __ret_0_ := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s211, recipient_s211, amount_s211);
[L2500]  COND TRUE   DType[this] == YFV
[L2501]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s211, recipient_s211, amount_s211);
[L2806]              __var_12 := null;
[L2807]  COND FALSE  !(!(sender_s323 != null))
[L2811]              __var_13 := null;
[L2812]  COND FALSE  !(!(recipient_s323 != null))
[L2816]  CALL        call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s323], amount_s323, -806116454);
[L3129]  COND FALSE  !(!(b_s561 <= a_s561))
[L3133]              c_s561 := (a_s561 - b_s561) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3134]              __ret_0_ := c_s561;
[L2816]  RET         call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s323], amount_s323, -806116454);
[L2817]  COND FALSE  !(revert)
[L2820]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s323];
[L2821]              _balances_ERC20[this][sender_s323] := __var_14;
[L2822]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s323];
[L2823]  CALL        call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s323], amount_s323);
[L3105]              c_s534 := (a_s534 + b_s534) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3106]  COND FALSE  !(!(c_s534 >= a_s534))
[L3110]              __ret_0_ := c_s534;
[L2823]  RET         call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s323], amount_s323);
[L2824]  COND FALSE  !(revert)
[L2827]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s323];
[L2828]              _balances_ERC20[this][recipient_s323] := __var_15;
[L2829]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s323];
[L2830]              assert { :EventEmitted "Transfer_ERC20" } true;
[L2501]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s211, recipient_s211, amount_s211);
[L2502]  COND FALSE  !(revert)
[L2513]  COND TRUE   DType[this] == YFV
[L2514]  CALL        call __var_3 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2200]              __ret_0_ := msgsender_MSG;
[L2514]  RET         call __var_3 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2515]  COND FALSE  !(revert)
[L2526]  COND TRUE   DType[this] == YFV
[L2527]  CALL        call __var_5 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2200]              __ret_0_ := msgsender_MSG;
[L2527]  RET         call __var_5 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2528]  COND FALSE  !(revert)
[L2539]  CALL        call __var_4 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s211][__var_5], amount_s211, -2057360831);
[L3129]  COND FALSE  !(!(b_s561 <= a_s561))
[L3133]              c_s561 := (a_s561 - b_s561) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3134]              __ret_0_ := c_s561;
[L2539]  RET         call __var_4 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s211][__var_5], amount_s211, -2057360831);
[L2540]  COND FALSE  !(revert)
[L2543]  COND TRUE   DType[this] == YFV
[L2544]  CALL        call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s211, __var_3, __var_4);
[L2954]              __var_22 := null;
[L2955]  COND FALSE  !(!(owner_s453 != null))
[L2959]              __var_23 := null;
[L2960]  COND FALSE  !(!(spender_s453 != null))
[L2964]              sum__allowances1[owner_s453] := sum__allowances1[owner_s453] - _allowances_ERC20[this][owner_s453][spender_s453];
[L2965]              _allowances_ERC20[this][owner_s453][spender_s453] := amount_s453;
[L2966]              sum__allowances1[owner_s453] := sum__allowances1[owner_s453] + _allowances_ERC20[this][owner_s453][spender_s453];
[L2967]              assert { :EventEmitted "Approval_ERC20" } true;
[L2544]  RET         call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s211, __var_3, __var_4);
[L2545]  COND FALSE  !(revert)
[L2556]              __ret_0_ := true;
[L599]   RET         call __ret_0_ := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s211, recipient_s211, amount_s211);
[L600]               assume !revert && gas >= 0;
[L4895]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, sender_s211, recipient_s211, amount_s211);
[L4991]  RET         call CorralChoice_YFV(this);
[L4991]  CALL        call CorralChoice_YFV(this);
[L4804]              havoc msgsender_MSG;
[L4805]              havoc msgvalue_MSG;
[L4806]              havoc choice;
[L4807]              havoc __ret_0_totalSupply;
[L4808]              havoc account_s121;
[L4809]              havoc __ret_0_balanceOf;
[L4810]              havoc recipient_s140;
[L4811]              havoc amount_s140;
[L4812]              havoc __ret_0_transfer;
[L4813]              havoc owner_s156;
[L4814]              havoc spender_s156;
[L4815]              havoc __ret_0_allowance;
[L4816]              havoc spender_s175;
[L4817]              havoc amount_s175;
[L4818]              havoc __ret_0_approve;
[L4819]              havoc sender_s211;
[L4820]              havoc recipient_s211;
[L4821]              havoc amount_s211;
[L4822]              havoc __ret_0_transferFrom;
[L4823]              havoc spender_s238;
[L4824]              havoc addedValue_s238;
[L4825]              havoc __ret_0_increaseAllowance;
[L4826]              havoc spender_s266;
[L4827]              havoc subtractedValue_s266;
[L4828]              havoc __ret_0_decreaseAllowance;
[L4829]              havoc name_s484;
[L4830]              havoc symbol_s484;
[L4831]              havoc decimals_s484;
[L4832]              havoc __ret_0_name;
[L4833]              havoc __ret_0_symbol;
[L4834]              havoc __ret_0_decimals;
[L4835]              havoc __ret_0_governance;
[L4836]              havoc arg744_s0;
[L4837]              havoc __ret_0_minters;
[L4838]              havoc account_s671;
[L4839]              havoc amount_s671;
[L4840]              havoc amount_s683;
[L4841]              havoc _governance_s701;
[L4842]              havoc _minter_s721;
[L4843]              havoc _minter_s741;
[L4844]              havoc tmpNow;
[L4845]              havoc gas;
[L4846]              assume gas > 4000000 && gas <= 8000000;
[L4847]              tmpNow := now;
[L4848]              havoc now;
[L4849]              assume now > tmpNow;
[L4850]              assume msgsender_MSG != null;
[L4851]              assume DType[msgsender_MSG] != IERC20;
[L4852]              assume DType[msgsender_MSG] != Context;
[L4853]              assume DType[msgsender_MSG] != ERC20;
[L4854]              assume DType[msgsender_MSG] != ERC20Detailed;
[L4855]              assume DType[msgsender_MSG] != SafeMath;
[L4856]              assume DType[msgsender_MSG] != YFV;
[L4857]              Alloc[msgsender_MSG] := true;
[L4858]  COND FALSE  !(choice == 18)
[L4864]  COND FALSE  !(choice == 17)
[L4870]  COND FALSE  !(choice == 16)
[L4877]  COND FALSE  !(choice == 15)
[L4883]  COND FALSE  !(choice == 14)
[L4890]  COND TRUE   choice == 13
[L4891]              gas := gas - 21000;
[L4892]  COND TRUE   gas >= 0
[L4893]              assume amount_s211 >= 0 && amount_s211 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4894]              assume msgvalue_MSG == 0;
[L4895]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, sender_s211, recipient_s211, amount_s211);
[L572]               havoc __exception;
[L573]               revert := false;
[L574]   COND FALSE  !(__exception)
[L599]   CALL        call __ret_0_ := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s211, recipient_s211, amount_s211);
[L2500]  COND TRUE   DType[this] == YFV
[L2501]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s211, recipient_s211, amount_s211);
[L2806]              __var_12 := null;
[L2807]  COND FALSE  !(!(sender_s323 != null))
[L2811]              __var_13 := null;
[L2812]  COND FALSE  !(!(recipient_s323 != null))
[L2816]  CALL        call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s323], amount_s323, -806116454);
[L3129]  COND FALSE  !(!(b_s561 <= a_s561))
[L3133]              c_s561 := (a_s561 - b_s561) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3134]              __ret_0_ := c_s561;
[L2816]  RET         call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s323], amount_s323, -806116454);
[L2817]  COND FALSE  !(revert)
[L2820]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s323];
[L2821]              _balances_ERC20[this][sender_s323] := __var_14;
[L2822]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s323];
[L2823]  CALL        call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s323], amount_s323);
[L3105]              c_s534 := (a_s534 + b_s534) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3106]  COND FALSE  !(!(c_s534 >= a_s534))
[L3110]              __ret_0_ := c_s534;
[L2823]  RET         call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s323], amount_s323);
[L2824]  COND FALSE  !(revert)
[L2827]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s323];
[L2828]              _balances_ERC20[this][recipient_s323] := __var_15;
[L2829]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s323];
[L2830]              assert { :EventEmitted "Transfer_ERC20" } true;
[L2501]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s211, recipient_s211, amount_s211);
[L2502]  COND FALSE  !(revert)
[L2513]  COND TRUE   DType[this] == YFV
[L2514]  CALL        call __var_3 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2200]              __ret_0_ := msgsender_MSG;
[L2514]  RET         call __var_3 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2515]  COND FALSE  !(revert)
[L2526]  COND TRUE   DType[this] == YFV
[L2527]  CALL        call __var_5 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2200]              __ret_0_ := msgsender_MSG;
[L2527]  RET         call __var_5 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2528]  COND FALSE  !(revert)
[L2539]  CALL        call __var_4 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s211][__var_5], amount_s211, -2057360831);
[L3129]  COND FALSE  !(!(b_s561 <= a_s561))
[L3133]              c_s561 := (a_s561 - b_s561) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3134]              __ret_0_ := c_s561;
[L2539]  RET         call __var_4 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s211][__var_5], amount_s211, -2057360831);
[L2540]  COND FALSE  !(revert)
[L2543]  COND TRUE   DType[this] == YFV
[L2544]  CALL        call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s211, __var_3, __var_4);
[L2954]              __var_22 := null;
[L2955]  COND FALSE  !(!(owner_s453 != null))
[L2959]              __var_23 := null;
[L2960]  COND FALSE  !(!(spender_s453 != null))
[L2964]              sum__allowances1[owner_s453] := sum__allowances1[owner_s453] - _allowances_ERC20[this][owner_s453][spender_s453];
[L2965]              _allowances_ERC20[this][owner_s453][spender_s453] := amount_s453;
[L2966]              sum__allowances1[owner_s453] := sum__allowances1[owner_s453] + _allowances_ERC20[this][owner_s453][spender_s453];
[L2967]              assert { :EventEmitted "Approval_ERC20" } true;
[L2544]  RET         call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s211, __var_3, __var_4);
[L2545]  COND FALSE  !(revert)
[L2556]              __ret_0_ := true;
[L599]   RET         call __ret_0_ := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s211, recipient_s211, amount_s211);
[L600]               assume !revert && gas >= 0;
[L4895]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, sender_s211, recipient_s211, amount_s211);
[L4991]  RET         call CorralChoice_YFV(this);
[L4991]  CALL        call CorralChoice_YFV(this);
[L4804]              havoc msgsender_MSG;
[L4805]              havoc msgvalue_MSG;
[L4806]              havoc choice;
[L4807]              havoc __ret_0_totalSupply;
[L4808]              havoc account_s121;
[L4809]              havoc __ret_0_balanceOf;
[L4810]              havoc recipient_s140;
[L4811]              havoc amount_s140;
[L4812]              havoc __ret_0_transfer;
[L4813]              havoc owner_s156;
[L4814]              havoc spender_s156;
[L4815]              havoc __ret_0_allowance;
[L4816]              havoc spender_s175;
[L4817]              havoc amount_s175;
[L4818]              havoc __ret_0_approve;
[L4819]              havoc sender_s211;
[L4820]              havoc recipient_s211;
[L4821]              havoc amount_s211;
[L4822]              havoc __ret_0_transferFrom;
[L4823]              havoc spender_s238;
[L4824]              havoc addedValue_s238;
[L4825]              havoc __ret_0_increaseAllowance;
[L4826]              havoc spender_s266;
[L4827]              havoc subtractedValue_s266;
[L4828]              havoc __ret_0_decreaseAllowance;
[L4829]              havoc name_s484;
[L4830]              havoc symbol_s484;
[L4831]              havoc decimals_s484;
[L4832]              havoc __ret_0_name;
[L4833]              havoc __ret_0_symbol;
[L4834]              havoc __ret_0_decimals;
[L4835]              havoc __ret_0_governance;
[L4836]              havoc arg744_s0;
[L4837]              havoc __ret_0_minters;
[L4838]              havoc account_s671;
[L4839]              havoc amount_s671;
[L4840]              havoc amount_s683;
[L4841]              havoc _governance_s701;
[L4842]              havoc _minter_s721;
[L4843]              havoc _minter_s741;
[L4844]              havoc tmpNow;
[L4845]              havoc gas;
[L4846]              assume gas > 4000000 && gas <= 8000000;
[L4847]              tmpNow := now;
[L4848]              havoc now;
[L4849]              assume now > tmpNow;
[L4850]              assume msgsender_MSG != null;
[L4851]              assume DType[msgsender_MSG] != IERC20;
[L4852]              assume DType[msgsender_MSG] != Context;
[L4853]              assume DType[msgsender_MSG] != ERC20;
[L4854]              assume DType[msgsender_MSG] != ERC20Detailed;
[L4855]              assume DType[msgsender_MSG] != SafeMath;
[L4856]              assume DType[msgsender_MSG] != YFV;
[L4857]              Alloc[msgsender_MSG] := true;
[L4858]  COND FALSE  !(choice == 18)
[L4864]  COND FALSE  !(choice == 17)
[L4870]  COND TRUE   choice == 16
[L4871]              gas := gas - 21000;
[L4872]  COND TRUE   gas >= 0
[L4873]              assume amount_s140 >= 0 && amount_s140 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4874]              assume msgvalue_MSG == 0;
[L4875]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == recipient_s140 && amount_s140 <= _balances_ERC20[this][msgsender_MSG]) && amount_s140 >= 0) && amount_s140 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s140] >= 0) && _balances_ERC20[this][recipient_s140] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC200 := true;
[L2]                 call_transfer_ERC200 := false;
[L2]                 revert := revert_hold;
[L392]               havoc __exception;
[L393]               revert := false;
[L394]   COND FALSE  !(__exception)
[L419]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L2322]  COND TRUE   DType[this] == YFV
[L2323]  CALL        call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2200]              __ret_0_ := msgsender_MSG;
[L2323]  RET         call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2324]  COND FALSE  !(revert)
[L2335]  COND TRUE   DType[this] == YFV
[L2336]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s140, amount_s140);
[L2806]              __var_12 := null;
[L2807]  COND FALSE  !(!(sender_s323 != null))
[L2811]              __var_13 := null;
[L2812]  COND FALSE  !(!(recipient_s323 != null))
[L2816]  CALL        call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s323], amount_s323, -806116454);
[L3129]  COND FALSE  !(!(b_s561 <= a_s561))
[L3133]              c_s561 := (a_s561 - b_s561) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3134]              __ret_0_ := c_s561;
[L2816]  RET         call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s323], amount_s323, -806116454);
[L2817]  COND FALSE  !(revert)
[L2820]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s323];
[L2821]              _balances_ERC20[this][sender_s323] := __var_14;
[L2822]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s323];
[L2823]  CALL        call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s323], amount_s323);
[L3105]              c_s534 := (a_s534 + b_s534) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3106]  COND FALSE  !(!(c_s534 >= a_s534))
[L3110]              __ret_0_ := c_s534;
[L2823]  RET         call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s323], amount_s323);
[L2824]  COND FALSE  !(revert)
[L2827]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s323];
[L2828]              _balances_ERC20[this][recipient_s323] := __var_15;
[L2829]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s323];
[L2830]              assert { :EventEmitted "Transfer_ERC20" } true;
[L2336]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s140, amount_s140);
[L2337]  COND FALSE  !(revert)
[L2348]              __ret_0_ := true;
[L419]   RET         call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L420]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !((((((((__ret_0_ == true && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowances_ERC20[this] == old(_allowances_ERC20[this])) && governance_YFV[this] == old(governance_YFV[this])) && minters_YFV[this] == old(minters_YFV[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]));
[L2]                 revert := revert_hold;
[L4875]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L4991]  RET         call CorralChoice_YFV(this);

Loop:
[L4991]  CALL        call CorralChoice_YFV(this);
[L4804]              havoc msgsender_MSG;
[L4805]              havoc msgvalue_MSG;
[L4806]              havoc choice;
[L4807]              havoc __ret_0_totalSupply;
[L4808]              havoc account_s121;
[L4809]              havoc __ret_0_balanceOf;
[L4810]              havoc recipient_s140;
[L4811]              havoc amount_s140;
[L4812]              havoc __ret_0_transfer;
[L4813]              havoc owner_s156;
[L4814]              havoc spender_s156;
[L4815]              havoc __ret_0_allowance;
[L4816]              havoc spender_s175;
[L4817]              havoc amount_s175;
[L4818]              havoc __ret_0_approve;
[L4819]              havoc sender_s211;
[L4820]              havoc recipient_s211;
[L4821]              havoc amount_s211;
[L4822]              havoc __ret_0_transferFrom;
[L4823]              havoc spender_s238;
[L4824]              havoc addedValue_s238;
[L4825]              havoc __ret_0_increaseAllowance;
[L4826]              havoc spender_s266;
[L4827]              havoc subtractedValue_s266;
[L4828]              havoc __ret_0_decreaseAllowance;
[L4829]              havoc name_s484;
[L4830]              havoc symbol_s484;
[L4831]              havoc decimals_s484;
[L4832]              havoc __ret_0_name;
[L4833]              havoc __ret_0_symbol;
[L4834]              havoc __ret_0_decimals;
[L4835]              havoc __ret_0_governance;
[L4836]              havoc arg744_s0;
[L4837]              havoc __ret_0_minters;
[L4838]              havoc account_s671;
[L4839]              havoc amount_s671;
[L4840]              havoc amount_s683;
[L4841]              havoc _governance_s701;
[L4842]              havoc _minter_s721;
[L4843]              havoc _minter_s741;
[L4844]              havoc tmpNow;
[L4845]              havoc gas;
[L4846]              assume gas > 4000000 && gas <= 8000000;
[L4847]              tmpNow := now;
[L4848]              havoc now;
[L4849]              assume now > tmpNow;
[L4850]              assume msgsender_MSG != null;
[L4851]              assume DType[msgsender_MSG] != IERC20;
[L4852]              assume DType[msgsender_MSG] != Context;
[L4853]              assume DType[msgsender_MSG] != ERC20;
[L4854]              assume DType[msgsender_MSG] != ERC20Detailed;
[L4855]              assume DType[msgsender_MSG] != SafeMath;
[L4856]              assume DType[msgsender_MSG] != YFV;
[L4857]              Alloc[msgsender_MSG] := true;
[L4858]  COND TRUE   choice == 18
[L4859]              gas := gas - 21000;
[L4860]  COND FALSE  !(gas >= 0)
[L4991]  RET         call CorralChoice_YFV(this);

[2020-11-25 09:39:51,214 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 09:39:51,214 INFO  L82        PathProgramCache]: Analyzing trace with hash -1898310043, now seen corresponding path program 2 times
[2020-11-25 09:39:51,214 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 09:39:51,286 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 09:39:53,138 WARN  L188               SmtUtils]: Spent 306.00 ms on a formula simplification. DAG size of input: 346 DAG size of output: 22
[2020-11-25 09:39:53,993 WARN  L188               SmtUtils]: Spent 269.00 ms on a formula simplification. DAG size of input: 353 DAG size of output: 20
[2020-11-25 09:39:54,426 WARN  L188               SmtUtils]: Spent 232.00 ms on a formula simplification. DAG size of input: 322 DAG size of output: 16
[2020-11-25 09:39:54,638 WARN  L188               SmtUtils]: Spent 126.00 ms on a formula simplification. DAG size of input: 246 DAG size of output: 14
[2020-11-25 09:39:55,546 WARN  L188               SmtUtils]: Spent 116.00 ms on a formula simplification. DAG size of input: 215 DAG size of output: 32
[2020-11-25 09:40:10,998 INFO  L134       CoverageAnalysis]: Checked inductivity of 350 backedges. 20 proven. 173 refuted. 0 times theorem prover too weak. 157 trivial. 0 not checked.
[2020-11-25 09:40:10,998 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 09:40:10,998 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [58] total 58
[2020-11-25 09:40:10,999 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 09:40:10,999 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 59 interpolants.
[2020-11-25 09:40:10,999 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=251, Invalid=3171, Unknown=0, NotChecked=0, Total=3422
[2020-11-25 09:40:10,999 INFO  L87              Difference]: Start difference. First operand 3409 states and 4252 transitions. cyclomatic complexity: 890 Second operand 59 states.
[2020-11-25 09:40:26,322 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 09:40:26,322 INFO  L93              Difference]: Finished difference Result 4104 states and 5412 transitions.
[2020-11-25 09:40:26,322 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 44 states. 
[2020-11-25 09:40:26,323 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 4104 states and 5412 transitions.
[2020-11-25 09:40:26,340 INFO  L131   ngComponentsAnalysis]: Automaton has 8 accepting balls. 16
[2020-11-25 09:40:26,359 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 4104 states to 4104 states and 5412 transitions.
[2020-11-25 09:40:26,359 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1102
[2020-11-25 09:40:26,359 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1102
[2020-11-25 09:40:26,359 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 4104 states and 5412 transitions.
[2020-11-25 09:40:26,364 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 09:40:26,364 INFO  L728         BuchiCegarLoop]: Abstraction has 4104 states and 5412 transitions.
[2020-11-25 09:40:26,365 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 4104 states and 5412 transitions.
[2020-11-25 09:40:26,386 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 4104 to 3806.
[2020-11-25 09:40:26,386 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 3806 states.
[2020-11-25 09:40:26,393 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 3806 states to 3806 states and 4915 transitions.
[2020-11-25 09:40:26,393 INFO  L751         BuchiCegarLoop]: Abstraction has 3806 states and 4915 transitions.
[2020-11-25 09:40:26,393 INFO  L631         BuchiCegarLoop]: Abstraction has 3806 states and 4915 transitions.
[2020-11-25 09:40:26,393 INFO  L445         BuchiCegarLoop]: ======== Iteration 27============
[2020-11-25 09:40:26,393 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 3806 states and 4915 transitions.
[2020-11-25 09:40:26,397 INFO  L131   ngComponentsAnalysis]: Automaton has 7 accepting balls. 14
[2020-11-25 09:40:26,397 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 09:40:26,397 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 09:40:26,399 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [6, 6, 6, 6, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 09:40:26,399 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_ERC200 := false;
[L2]                 call_transfer_ERC200 := false;
[L2]     CALL        call main();
[L4981]              assume null == 0;
[L4982]  CALL        call this := FreshRefGenerator__success();
[L2122]              havoc newRef;
[L2123]              assume Alloc[newRef] == false;
[L2124]              Alloc[newRef] := true;
[L2125]              assume newRef != null;
[L4982]  RET         call this := FreshRefGenerator__success();
[L4983]              assume now >= 0;
[L4984]              assume DType[this] == YFV;
[L4985]              assume msgvalue_MSG == 0;
[L4986]              gas := gas - 53000;
[L4987]  CALL        call YFV_YFV(this, msgsender_MSG, msgvalue_MSG);
[L1098]              havoc __exception;
[L1099]              revert := false;
[L1100]  COND FALSE  !(__exception)
[L1125]  CALL        call YFV_YFV__success(this, msgsender_MSG, msgvalue_MSG);
[L3242]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2186]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2171]              assume msgsender_MSG != null;
[L2172]              Balance[this] := 0;
[L2186]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2187]  COND FALSE  !(revert)
[L3242]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3243]  COND FALSE  !(revert)
[L3246]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2154]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2139]              assume msgsender_MSG != null;
[L2140]              Balance[this] := 0;
[L2154]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2155]  COND FALSE  !(revert)
[L3246]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3247]  COND FALSE  !(revert)
[L3250]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2248]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2186]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2171]              assume msgsender_MSG != null;
[L2172]              Balance[this] := 0;
[L2186]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2187]  COND FALSE  !(revert)
[L2248]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2249]  COND FALSE  !(revert)
[L2252]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2154]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2139]              assume msgsender_MSG != null;
[L2140]              Balance[this] := 0;
[L2154]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2155]  COND FALSE  !(revert)
[L2252]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2253]  COND FALSE  !(revert)
[L2256]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2220]              assume msgsender_MSG != null;
[L2221]              Balance[this] := 0;
[L2222]              _balances_ERC20[this] := zeroRefintArr();
[L2223]              sum__balances0[this] := 0;
[L2224]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2225]              sum__allowances1[this] := 0;
[L2226]              _totalSupply_ERC20[this] := 0;
[L2256]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2257]  COND FALSE  !(revert)
[L3250]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3251]  COND FALSE  !(revert)
[L3254]  CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -868984158, 934069305, 18);
[L3012]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2154]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2139]              assume msgsender_MSG != null;
[L2140]              Balance[this] := 0;
[L2154]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2155]  COND FALSE  !(revert)
[L3012]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3013]  COND FALSE  !(revert)
[L3016]  CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s484, symbol_s484, decimals_s484);
[L2987]              assume msgsender_MSG != null;
[L2988]              Balance[this] := 0;
[L2989]              _name_ERC20Detailed[this] := 1252836592;
[L2990]              _symbol_ERC20Detailed[this] := 1252836592;
[L2991]              _decimals_ERC20Detailed[this] := 0;
[L2993]              _name_ERC20Detailed[this] := name_s484;
[L2994]              _symbol_ERC20Detailed[this] := symbol_s484;
[L2995]              _decimals_ERC20Detailed[this] := decimals_s484;
[L3016]  RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s484, symbol_s484, decimals_s484);
[L3017]  COND FALSE  !(revert)
[L3254]  RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -868984158, 934069305, 18);
[L3255]  COND FALSE  !(revert)
[L3258]  CALL        call YFV_YFV_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3208]              assume msgsender_MSG != null;
[L3209]              Balance[this] := 0;
[L3210]              governance_YFV[this] := null;
[L3211]              minters_YFV[this] := zeroRefboolArr();
[L3213]              governance_YFV[this] := msgsender_MSG;
[L3258]  RET         call YFV_YFV_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3259]  COND FALSE  !(revert)
[L1125]  RET         call YFV_YFV__success(this, msgsender_MSG, msgvalue_MSG);
[L1126]              assume !revert && gas >= 0;
[L4987]  RET         call YFV_YFV(this, msgsender_MSG, msgvalue_MSG);
[L4988]              assume !revert && gas >= 0;
[L4991]  CALL        call CorralChoice_YFV(this);
[L4804]              havoc msgsender_MSG;
[L4805]              havoc msgvalue_MSG;
[L4806]              havoc choice;
[L4807]              havoc __ret_0_totalSupply;
[L4808]              havoc account_s121;
[L4809]              havoc __ret_0_balanceOf;
[L4810]              havoc recipient_s140;
[L4811]              havoc amount_s140;
[L4812]              havoc __ret_0_transfer;
[L4813]              havoc owner_s156;
[L4814]              havoc spender_s156;
[L4815]              havoc __ret_0_allowance;
[L4816]              havoc spender_s175;
[L4817]              havoc amount_s175;
[L4818]              havoc __ret_0_approve;
[L4819]              havoc sender_s211;
[L4820]              havoc recipient_s211;
[L4821]              havoc amount_s211;
[L4822]              havoc __ret_0_transferFrom;
[L4823]              havoc spender_s238;
[L4824]              havoc addedValue_s238;
[L4825]              havoc __ret_0_increaseAllowance;
[L4826]              havoc spender_s266;
[L4827]              havoc subtractedValue_s266;
[L4828]              havoc __ret_0_decreaseAllowance;
[L4829]              havoc name_s484;
[L4830]              havoc symbol_s484;
[L4831]              havoc decimals_s484;
[L4832]              havoc __ret_0_name;
[L4833]              havoc __ret_0_symbol;
[L4834]              havoc __ret_0_decimals;
[L4835]              havoc __ret_0_governance;
[L4836]              havoc arg744_s0;
[L4837]              havoc __ret_0_minters;
[L4838]              havoc account_s671;
[L4839]              havoc amount_s671;
[L4840]              havoc amount_s683;
[L4841]              havoc _governance_s701;
[L4842]              havoc _minter_s721;
[L4843]              havoc _minter_s741;
[L4844]              havoc tmpNow;
[L4845]              havoc gas;
[L4846]              assume gas > 4000000 && gas <= 8000000;
[L4847]              tmpNow := now;
[L4848]              havoc now;
[L4849]              assume now > tmpNow;
[L4850]              assume msgsender_MSG != null;
[L4851]              assume DType[msgsender_MSG] != IERC20;
[L4852]              assume DType[msgsender_MSG] != Context;
[L4853]              assume DType[msgsender_MSG] != ERC20;
[L4854]              assume DType[msgsender_MSG] != ERC20Detailed;
[L4855]              assume DType[msgsender_MSG] != SafeMath;
[L4856]              assume DType[msgsender_MSG] != YFV;
[L4857]              Alloc[msgsender_MSG] := true;
[L4858]  COND FALSE  !(choice == 18)
[L4864]  COND FALSE  !(choice == 17)
[L4870]  COND FALSE  !(choice == 16)
[L4877]  COND FALSE  !(choice == 15)
[L4883]  COND FALSE  !(choice == 14)
[L4890]  COND FALSE  !(choice == 13)
[L4897]  COND FALSE  !(choice == 12)
[L4904]  COND FALSE  !(choice == 11)
[L4911]  COND FALSE  !(choice == 10)
[L4917]  COND FALSE  !(choice == 9)
[L4923]  COND FALSE  !(choice == 8)
[L4929]  COND FALSE  !(choice == 7)
[L4935]  COND FALSE  !(choice == 6)
[L4941]  COND FALSE  !(choice == 5)
[L4948]  COND TRUE   choice == 4
[L4949]              gas := gas - 21000;
[L4950]  COND TRUE   gas >= 0
[L4951]              assume amount_s683 >= 0 && amount_s683 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4952]              assume msgvalue_MSG == 0;
[L4953]  CALL        call burn~uint256_YFV(this, msgsender_MSG, msgvalue_MSG, amount_s683);
[L1220]              havoc __exception;
[L1221]              revert := false;
[L1222]  COND FALSE  !(__exception)
[L1247]  CALL        call burn~uint256_YFV__success(this, msgsender_MSG, msgvalue_MSG, amount_s683);
[L3310]  COND TRUE   DType[this] == YFV
[L3311]  CALL        call _burn~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, amount_s683);
[L2911]              __var_19 := null;
[L2912]  COND FALSE  !(!(account_s411 != null))
[L2916]  CALL        call __var_20 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s411], amount_s411, 392639254);
[L3129]  COND FALSE  !(!(b_s561 <= a_s561))
[L3133]              c_s561 := (a_s561 - b_s561) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3134]              __ret_0_ := c_s561;
[L2916]  RET         call __var_20 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s411], amount_s411, 392639254);
[L2917]  COND FALSE  !(revert)
[L2920]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s411];
[L2921]              _balances_ERC20[this][account_s411] := __var_20;
[L2922]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s411];
[L2923]  CALL        call __var_21 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s411, 1252836592);
[L3129]  COND FALSE  !(!(b_s561 <= a_s561))
[L3133]              c_s561 := (a_s561 - b_s561) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3134]              __ret_0_ := c_s561;
[L2923]  RET         call __var_21 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s411, 1252836592);
[L2924]  COND FALSE  !(revert)
[L2927]              _totalSupply_ERC20[this] := __var_21;
[L2928]              assert { :EventEmitted "Transfer_ERC20" } true;
[L3311]  RET         call _burn~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, amount_s683);
[L3312]  COND FALSE  !(revert)
[L1247]  RET         call burn~uint256_YFV__success(this, msgsender_MSG, msgvalue_MSG, amount_s683);
[L1248]              assume !revert && gas >= 0;
[L4953]  RET         call burn~uint256_YFV(this, msgsender_MSG, msgvalue_MSG, amount_s683);
[L4991]  RET         call CorralChoice_YFV(this);
[L4991]  CALL        call CorralChoice_YFV(this);
[L4804]              havoc msgsender_MSG;
[L4805]              havoc msgvalue_MSG;
[L4806]              havoc choice;
[L4807]              havoc __ret_0_totalSupply;
[L4808]              havoc account_s121;
[L4809]              havoc __ret_0_balanceOf;
[L4810]              havoc recipient_s140;
[L4811]              havoc amount_s140;
[L4812]              havoc __ret_0_transfer;
[L4813]              havoc owner_s156;
[L4814]              havoc spender_s156;
[L4815]              havoc __ret_0_allowance;
[L4816]              havoc spender_s175;
[L4817]              havoc amount_s175;
[L4818]              havoc __ret_0_approve;
[L4819]              havoc sender_s211;
[L4820]              havoc recipient_s211;
[L4821]              havoc amount_s211;
[L4822]              havoc __ret_0_transferFrom;
[L4823]              havoc spender_s238;
[L4824]              havoc addedValue_s238;
[L4825]              havoc __ret_0_increaseAllowance;
[L4826]              havoc spender_s266;
[L4827]              havoc subtractedValue_s266;
[L4828]              havoc __ret_0_decreaseAllowance;
[L4829]              havoc name_s484;
[L4830]              havoc symbol_s484;
[L4831]              havoc decimals_s484;
[L4832]              havoc __ret_0_name;
[L4833]              havoc __ret_0_symbol;
[L4834]              havoc __ret_0_decimals;
[L4835]              havoc __ret_0_governance;
[L4836]              havoc arg744_s0;
[L4837]              havoc __ret_0_minters;
[L4838]              havoc account_s671;
[L4839]              havoc amount_s671;
[L4840]              havoc amount_s683;
[L4841]              havoc _governance_s701;
[L4842]              havoc _minter_s721;
[L4843]              havoc _minter_s741;
[L4844]              havoc tmpNow;
[L4845]              havoc gas;
[L4846]              assume gas > 4000000 && gas <= 8000000;
[L4847]              tmpNow := now;
[L4848]              havoc now;
[L4849]              assume now > tmpNow;
[L4850]              assume msgsender_MSG != null;
[L4851]              assume DType[msgsender_MSG] != IERC20;
[L4852]              assume DType[msgsender_MSG] != Context;
[L4853]              assume DType[msgsender_MSG] != ERC20;
[L4854]              assume DType[msgsender_MSG] != ERC20Detailed;
[L4855]              assume DType[msgsender_MSG] != SafeMath;
[L4856]              assume DType[msgsender_MSG] != YFV;
[L4857]              Alloc[msgsender_MSG] := true;
[L4858]  COND FALSE  !(choice == 18)
[L4864]  COND FALSE  !(choice == 17)
[L4870]  COND FALSE  !(choice == 16)
[L4877]  COND FALSE  !(choice == 15)
[L4883]  COND FALSE  !(choice == 14)
[L4890]  COND TRUE   choice == 13
[L4891]              gas := gas - 21000;
[L4892]  COND TRUE   gas >= 0
[L4893]              assume amount_s211 >= 0 && amount_s211 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4894]              assume msgvalue_MSG == 0;
[L4895]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, sender_s211, recipient_s211, amount_s211);
[L572]               havoc __exception;
[L573]               revert := false;
[L574]   COND FALSE  !(__exception)
[L599]   CALL        call __ret_0_ := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s211, recipient_s211, amount_s211);
[L2500]  COND TRUE   DType[this] == YFV
[L2501]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s211, recipient_s211, amount_s211);
[L2806]              __var_12 := null;
[L2807]  COND FALSE  !(!(sender_s323 != null))
[L2811]              __var_13 := null;
[L2812]  COND FALSE  !(!(recipient_s323 != null))
[L2816]  CALL        call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s323], amount_s323, -806116454);
[L3129]  COND FALSE  !(!(b_s561 <= a_s561))
[L3133]              c_s561 := (a_s561 - b_s561) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3134]              __ret_0_ := c_s561;
[L2816]  RET         call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s323], amount_s323, -806116454);
[L2817]  COND FALSE  !(revert)
[L2820]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s323];
[L2821]              _balances_ERC20[this][sender_s323] := __var_14;
[L2822]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s323];
[L2823]  CALL        call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s323], amount_s323);
[L3105]              c_s534 := (a_s534 + b_s534) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3106]  COND FALSE  !(!(c_s534 >= a_s534))
[L3110]              __ret_0_ := c_s534;
[L2823]  RET         call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s323], amount_s323);
[L2824]  COND FALSE  !(revert)
[L2827]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s323];
[L2828]              _balances_ERC20[this][recipient_s323] := __var_15;
[L2829]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s323];
[L2830]              assert { :EventEmitted "Transfer_ERC20" } true;
[L2501]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s211, recipient_s211, amount_s211);
[L2502]  COND FALSE  !(revert)
[L2513]  COND TRUE   DType[this] == YFV
[L2514]  CALL        call __var_3 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2200]              __ret_0_ := msgsender_MSG;
[L2514]  RET         call __var_3 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2515]  COND FALSE  !(revert)
[L2526]  COND TRUE   DType[this] == YFV
[L2527]  CALL        call __var_5 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2200]              __ret_0_ := msgsender_MSG;
[L2527]  RET         call __var_5 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2528]  COND FALSE  !(revert)
[L2539]  CALL        call __var_4 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s211][__var_5], amount_s211, -2057360831);
[L3129]  COND FALSE  !(!(b_s561 <= a_s561))
[L3133]              c_s561 := (a_s561 - b_s561) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3134]              __ret_0_ := c_s561;
[L2539]  RET         call __var_4 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s211][__var_5], amount_s211, -2057360831);
[L2540]  COND FALSE  !(revert)
[L2543]  COND TRUE   DType[this] == YFV
[L2544]  CALL        call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s211, __var_3, __var_4);
[L2954]              __var_22 := null;
[L2955]  COND FALSE  !(!(owner_s453 != null))
[L2959]              __var_23 := null;
[L2960]  COND FALSE  !(!(spender_s453 != null))
[L2964]              sum__allowances1[owner_s453] := sum__allowances1[owner_s453] - _allowances_ERC20[this][owner_s453][spender_s453];
[L2965]              _allowances_ERC20[this][owner_s453][spender_s453] := amount_s453;
[L2966]              sum__allowances1[owner_s453] := sum__allowances1[owner_s453] + _allowances_ERC20[this][owner_s453][spender_s453];
[L2967]              assert { :EventEmitted "Approval_ERC20" } true;
[L2544]  RET         call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s211, __var_3, __var_4);
[L2545]  COND FALSE  !(revert)
[L2556]              __ret_0_ := true;
[L599]   RET         call __ret_0_ := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s211, recipient_s211, amount_s211);
[L600]               assume !revert && gas >= 0;
[L4895]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, sender_s211, recipient_s211, amount_s211);
[L4991]  RET         call CorralChoice_YFV(this);
[L4991]  CALL        call CorralChoice_YFV(this);
[L4804]              havoc msgsender_MSG;
[L4805]              havoc msgvalue_MSG;
[L4806]              havoc choice;
[L4807]              havoc __ret_0_totalSupply;
[L4808]              havoc account_s121;
[L4809]              havoc __ret_0_balanceOf;
[L4810]              havoc recipient_s140;
[L4811]              havoc amount_s140;
[L4812]              havoc __ret_0_transfer;
[L4813]              havoc owner_s156;
[L4814]              havoc spender_s156;
[L4815]              havoc __ret_0_allowance;
[L4816]              havoc spender_s175;
[L4817]              havoc amount_s175;
[L4818]              havoc __ret_0_approve;
[L4819]              havoc sender_s211;
[L4820]              havoc recipient_s211;
[L4821]              havoc amount_s211;
[L4822]              havoc __ret_0_transferFrom;
[L4823]              havoc spender_s238;
[L4824]              havoc addedValue_s238;
[L4825]              havoc __ret_0_increaseAllowance;
[L4826]              havoc spender_s266;
[L4827]              havoc subtractedValue_s266;
[L4828]              havoc __ret_0_decreaseAllowance;
[L4829]              havoc name_s484;
[L4830]              havoc symbol_s484;
[L4831]              havoc decimals_s484;
[L4832]              havoc __ret_0_name;
[L4833]              havoc __ret_0_symbol;
[L4834]              havoc __ret_0_decimals;
[L4835]              havoc __ret_0_governance;
[L4836]              havoc arg744_s0;
[L4837]              havoc __ret_0_minters;
[L4838]              havoc account_s671;
[L4839]              havoc amount_s671;
[L4840]              havoc amount_s683;
[L4841]              havoc _governance_s701;
[L4842]              havoc _minter_s721;
[L4843]              havoc _minter_s741;
[L4844]              havoc tmpNow;
[L4845]              havoc gas;
[L4846]              assume gas > 4000000 && gas <= 8000000;
[L4847]              tmpNow := now;
[L4848]              havoc now;
[L4849]              assume now > tmpNow;
[L4850]              assume msgsender_MSG != null;
[L4851]              assume DType[msgsender_MSG] != IERC20;
[L4852]              assume DType[msgsender_MSG] != Context;
[L4853]              assume DType[msgsender_MSG] != ERC20;
[L4854]              assume DType[msgsender_MSG] != ERC20Detailed;
[L4855]              assume DType[msgsender_MSG] != SafeMath;
[L4856]              assume DType[msgsender_MSG] != YFV;
[L4857]              Alloc[msgsender_MSG] := true;
[L4858]  COND FALSE  !(choice == 18)
[L4864]  COND FALSE  !(choice == 17)
[L4870]  COND FALSE  !(choice == 16)
[L4877]  COND FALSE  !(choice == 15)
[L4883]  COND FALSE  !(choice == 14)
[L4890]  COND TRUE   choice == 13
[L4891]              gas := gas - 21000;
[L4892]  COND TRUE   gas >= 0
[L4893]              assume amount_s211 >= 0 && amount_s211 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4894]              assume msgvalue_MSG == 0;
[L4895]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, sender_s211, recipient_s211, amount_s211);
[L572]               havoc __exception;
[L573]               revert := false;
[L574]   COND FALSE  !(__exception)
[L599]   CALL        call __ret_0_ := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s211, recipient_s211, amount_s211);
[L2500]  COND TRUE   DType[this] == YFV
[L2501]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s211, recipient_s211, amount_s211);
[L2806]              __var_12 := null;
[L2807]  COND FALSE  !(!(sender_s323 != null))
[L2811]              __var_13 := null;
[L2812]  COND FALSE  !(!(recipient_s323 != null))
[L2816]  CALL        call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s323], amount_s323, -806116454);
[L3129]  COND FALSE  !(!(b_s561 <= a_s561))
[L3133]              c_s561 := (a_s561 - b_s561) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3134]              __ret_0_ := c_s561;
[L2816]  RET         call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s323], amount_s323, -806116454);
[L2817]  COND FALSE  !(revert)
[L2820]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s323];
[L2821]              _balances_ERC20[this][sender_s323] := __var_14;
[L2822]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s323];
[L2823]  CALL        call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s323], amount_s323);
[L3105]              c_s534 := (a_s534 + b_s534) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3106]  COND FALSE  !(!(c_s534 >= a_s534))
[L3110]              __ret_0_ := c_s534;
[L2823]  RET         call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s323], amount_s323);
[L2824]  COND FALSE  !(revert)
[L2827]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s323];
[L2828]              _balances_ERC20[this][recipient_s323] := __var_15;
[L2829]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s323];
[L2830]              assert { :EventEmitted "Transfer_ERC20" } true;
[L2501]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s211, recipient_s211, amount_s211);
[L2502]  COND FALSE  !(revert)
[L2513]  COND TRUE   DType[this] == YFV
[L2514]  CALL        call __var_3 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2200]              __ret_0_ := msgsender_MSG;
[L2514]  RET         call __var_3 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2515]  COND FALSE  !(revert)
[L2526]  COND TRUE   DType[this] == YFV
[L2527]  CALL        call __var_5 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2200]              __ret_0_ := msgsender_MSG;
[L2527]  RET         call __var_5 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2528]  COND FALSE  !(revert)
[L2539]  CALL        call __var_4 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s211][__var_5], amount_s211, -2057360831);
[L3129]  COND FALSE  !(!(b_s561 <= a_s561))
[L3133]              c_s561 := (a_s561 - b_s561) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3134]              __ret_0_ := c_s561;
[L2539]  RET         call __var_4 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s211][__var_5], amount_s211, -2057360831);
[L2540]  COND FALSE  !(revert)
[L2543]  COND TRUE   DType[this] == YFV
[L2544]  CALL        call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s211, __var_3, __var_4);
[L2954]              __var_22 := null;
[L2955]  COND FALSE  !(!(owner_s453 != null))
[L2959]              __var_23 := null;
[L2960]  COND FALSE  !(!(spender_s453 != null))
[L2964]              sum__allowances1[owner_s453] := sum__allowances1[owner_s453] - _allowances_ERC20[this][owner_s453][spender_s453];
[L2965]              _allowances_ERC20[this][owner_s453][spender_s453] := amount_s453;
[L2966]              sum__allowances1[owner_s453] := sum__allowances1[owner_s453] + _allowances_ERC20[this][owner_s453][spender_s453];
[L2967]              assert { :EventEmitted "Approval_ERC20" } true;
[L2544]  RET         call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s211, __var_3, __var_4);
[L2545]  COND FALSE  !(revert)
[L2556]              __ret_0_ := true;
[L599]   RET         call __ret_0_ := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s211, recipient_s211, amount_s211);
[L600]               assume !revert && gas >= 0;
[L4895]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, sender_s211, recipient_s211, amount_s211);
[L4991]  RET         call CorralChoice_YFV(this);
[L4991]  CALL        call CorralChoice_YFV(this);
[L4804]              havoc msgsender_MSG;
[L4805]              havoc msgvalue_MSG;
[L4806]              havoc choice;
[L4807]              havoc __ret_0_totalSupply;
[L4808]              havoc account_s121;
[L4809]              havoc __ret_0_balanceOf;
[L4810]              havoc recipient_s140;
[L4811]              havoc amount_s140;
[L4812]              havoc __ret_0_transfer;
[L4813]              havoc owner_s156;
[L4814]              havoc spender_s156;
[L4815]              havoc __ret_0_allowance;
[L4816]              havoc spender_s175;
[L4817]              havoc amount_s175;
[L4818]              havoc __ret_0_approve;
[L4819]              havoc sender_s211;
[L4820]              havoc recipient_s211;
[L4821]              havoc amount_s211;
[L4822]              havoc __ret_0_transferFrom;
[L4823]              havoc spender_s238;
[L4824]              havoc addedValue_s238;
[L4825]              havoc __ret_0_increaseAllowance;
[L4826]              havoc spender_s266;
[L4827]              havoc subtractedValue_s266;
[L4828]              havoc __ret_0_decreaseAllowance;
[L4829]              havoc name_s484;
[L4830]              havoc symbol_s484;
[L4831]              havoc decimals_s484;
[L4832]              havoc __ret_0_name;
[L4833]              havoc __ret_0_symbol;
[L4834]              havoc __ret_0_decimals;
[L4835]              havoc __ret_0_governance;
[L4836]              havoc arg744_s0;
[L4837]              havoc __ret_0_minters;
[L4838]              havoc account_s671;
[L4839]              havoc amount_s671;
[L4840]              havoc amount_s683;
[L4841]              havoc _governance_s701;
[L4842]              havoc _minter_s721;
[L4843]              havoc _minter_s741;
[L4844]              havoc tmpNow;
[L4845]              havoc gas;
[L4846]              assume gas > 4000000 && gas <= 8000000;
[L4847]              tmpNow := now;
[L4848]              havoc now;
[L4849]              assume now > tmpNow;
[L4850]              assume msgsender_MSG != null;
[L4851]              assume DType[msgsender_MSG] != IERC20;
[L4852]              assume DType[msgsender_MSG] != Context;
[L4853]              assume DType[msgsender_MSG] != ERC20;
[L4854]              assume DType[msgsender_MSG] != ERC20Detailed;
[L4855]              assume DType[msgsender_MSG] != SafeMath;
[L4856]              assume DType[msgsender_MSG] != YFV;
[L4857]              Alloc[msgsender_MSG] := true;
[L4858]  COND FALSE  !(choice == 18)
[L4864]  COND FALSE  !(choice == 17)
[L4870]  COND TRUE   choice == 16
[L4871]              gas := gas - 21000;
[L4872]  COND TRUE   gas >= 0
[L4873]              assume amount_s140 >= 0 && amount_s140 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4874]              assume msgvalue_MSG == 0;
[L4875]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == recipient_s140 && amount_s140 <= _balances_ERC20[this][msgsender_MSG]) && amount_s140 >= 0) && amount_s140 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s140] >= 0) && _balances_ERC20[this][recipient_s140] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC200 := true;
[L2]                 call_transfer_ERC200 := false;
[L2]                 revert := revert_hold;
[L392]               havoc __exception;
[L393]               revert := false;
[L394]   COND FALSE  !(__exception)
[L419]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L2322]  COND TRUE   DType[this] == YFV
[L2323]  CALL        call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2200]              __ret_0_ := msgsender_MSG;
[L2323]  RET         call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2324]  COND FALSE  !(revert)
[L2335]  COND TRUE   DType[this] == YFV
[L2336]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s140, amount_s140);
[L2806]              __var_12 := null;
[L2807]  COND FALSE  !(!(sender_s323 != null))
[L2811]              __var_13 := null;
[L2812]  COND FALSE  !(!(recipient_s323 != null))
[L2816]  CALL        call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s323], amount_s323, -806116454);
[L3129]  COND FALSE  !(!(b_s561 <= a_s561))
[L3133]              c_s561 := (a_s561 - b_s561) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3134]              __ret_0_ := c_s561;
[L2816]  RET         call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s323], amount_s323, -806116454);
[L2817]  COND FALSE  !(revert)
[L2820]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s323];
[L2821]              _balances_ERC20[this][sender_s323] := __var_14;
[L2822]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s323];
[L2823]  CALL        call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s323], amount_s323);
[L3105]              c_s534 := (a_s534 + b_s534) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3106]  COND FALSE  !(!(c_s534 >= a_s534))
[L3110]              __ret_0_ := c_s534;
[L2823]  RET         call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s323], amount_s323);
[L2824]  COND FALSE  !(revert)
[L2827]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s323];
[L2828]              _balances_ERC20[this][recipient_s323] := __var_15;
[L2829]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s323];
[L2830]              assert { :EventEmitted "Transfer_ERC20" } true;
[L2336]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s140, amount_s140);
[L2337]  COND FALSE  !(revert)
[L2348]              __ret_0_ := true;
[L419]   RET         call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L420]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !((((((((__ret_0_ == true && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowances_ERC20[this] == old(_allowances_ERC20[this])) && governance_YFV[this] == old(governance_YFV[this])) && minters_YFV[this] == old(minters_YFV[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]));
[L2]                 revert := revert_hold;
[L4875]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L4991]  RET         call CorralChoice_YFV(this);

Loop:
[L4991]  CALL        call CorralChoice_YFV(this);
[L4804]              havoc msgsender_MSG;
[L4805]              havoc msgvalue_MSG;
[L4806]              havoc choice;
[L4807]              havoc __ret_0_totalSupply;
[L4808]              havoc account_s121;
[L4809]              havoc __ret_0_balanceOf;
[L4810]              havoc recipient_s140;
[L4811]              havoc amount_s140;
[L4812]              havoc __ret_0_transfer;
[L4813]              havoc owner_s156;
[L4814]              havoc spender_s156;
[L4815]              havoc __ret_0_allowance;
[L4816]              havoc spender_s175;
[L4817]              havoc amount_s175;
[L4818]              havoc __ret_0_approve;
[L4819]              havoc sender_s211;
[L4820]              havoc recipient_s211;
[L4821]              havoc amount_s211;
[L4822]              havoc __ret_0_transferFrom;
[L4823]              havoc spender_s238;
[L4824]              havoc addedValue_s238;
[L4825]              havoc __ret_0_increaseAllowance;
[L4826]              havoc spender_s266;
[L4827]              havoc subtractedValue_s266;
[L4828]              havoc __ret_0_decreaseAllowance;
[L4829]              havoc name_s484;
[L4830]              havoc symbol_s484;
[L4831]              havoc decimals_s484;
[L4832]              havoc __ret_0_name;
[L4833]              havoc __ret_0_symbol;
[L4834]              havoc __ret_0_decimals;
[L4835]              havoc __ret_0_governance;
[L4836]              havoc arg744_s0;
[L4837]              havoc __ret_0_minters;
[L4838]              havoc account_s671;
[L4839]              havoc amount_s671;
[L4840]              havoc amount_s683;
[L4841]              havoc _governance_s701;
[L4842]              havoc _minter_s721;
[L4843]              havoc _minter_s741;
[L4844]              havoc tmpNow;
[L4845]              havoc gas;
[L4846]              assume gas > 4000000 && gas <= 8000000;
[L4847]              tmpNow := now;
[L4848]              havoc now;
[L4849]              assume now > tmpNow;
[L4850]              assume msgsender_MSG != null;
[L4851]              assume DType[msgsender_MSG] != IERC20;
[L4852]              assume DType[msgsender_MSG] != Context;
[L4853]              assume DType[msgsender_MSG] != ERC20;
[L4854]              assume DType[msgsender_MSG] != ERC20Detailed;
[L4855]              assume DType[msgsender_MSG] != SafeMath;
[L4856]              assume DType[msgsender_MSG] != YFV;
[L4857]              Alloc[msgsender_MSG] := true;
[L4858]  COND TRUE   choice == 18
[L4859]              gas := gas - 21000;
[L4860]  COND FALSE  !(gas >= 0)
[L4991]  RET         call CorralChoice_YFV(this);

[2020-11-25 09:40:26,402 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 09:40:26,402 INFO  L82        PathProgramCache]: Analyzing trace with hash 722960119, now seen corresponding path program 2 times
[2020-11-25 09:40:26,403 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 09:40:26,478 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 09:40:27,087 WARN  L250   erpolLogProxyWrapper]: Already inconsistent.
[2020-11-25 09:40:27,087 WARN  L250   erpolLogProxyWrapper]: Already inconsistent.
[2020-11-25 09:40:27,133 WARN  L250   erpolLogProxyWrapper]: Already inconsistent.
[2020-11-25 09:40:28,836 WARN  L188               SmtUtils]: Spent 362.00 ms on a formula simplification. DAG size of input: 161 DAG size of output: 37
[2020-11-25 09:40:30,413 WARN  L188               SmtUtils]: Spent 101.00 ms on a formula simplification. DAG size of input: 98 DAG size of output: 28
[2020-11-25 09:40:31,490 WARN  L188               SmtUtils]: Spent 122.00 ms on a formula simplification. DAG size of input: 131 DAG size of output: 43
[2020-11-25 09:40:33,165 INFO  L134       CoverageAnalysis]: Checked inductivity of 584 backedges. 21 proven. 79 refuted. 0 times theorem prover too weak. 484 trivial. 0 not checked.
[2020-11-25 09:40:33,165 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 09:40:33,165 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [59] total 59
[2020-11-25 09:40:33,166 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 09:40:33,166 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 60 interpolants.
[2020-11-25 09:40:33,166 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=228, Invalid=3312, Unknown=0, NotChecked=0, Total=3540
[2020-11-25 09:40:33,166 INFO  L87              Difference]: Start difference. First operand 3806 states and 4915 transitions. cyclomatic complexity: 1179 Second operand 60 states.
[2020-11-25 09:40:39,082 WARN  L188               SmtUtils]: Spent 183.00 ms on a formula simplification. DAG size of input: 118 DAG size of output: 91
[2020-11-25 09:40:56,822 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 09:40:56,822 INFO  L93              Difference]: Finished difference Result 4691 states and 6475 transitions.
[2020-11-25 09:40:56,822 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 43 states. 
[2020-11-25 09:40:56,822 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 4691 states and 6475 transitions.
[2020-11-25 09:40:56,836 INFO  L131   ngComponentsAnalysis]: Automaton has 13 accepting balls. 26
[2020-11-25 09:40:56,852 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 4691 states to 4691 states and 6475 transitions.
[2020-11-25 09:40:56,853 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1337
[2020-11-25 09:40:56,853 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1337
[2020-11-25 09:40:56,853 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 4691 states and 6475 transitions.
[2020-11-25 09:40:56,859 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 09:40:56,859 INFO  L728         BuchiCegarLoop]: Abstraction has 4691 states and 6475 transitions.
[2020-11-25 09:40:56,860 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 4691 states and 6475 transitions.
[2020-11-25 09:40:56,884 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 4691 to 3810.
[2020-11-25 09:40:56,884 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 3810 states.
[2020-11-25 09:40:56,891 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 3810 states to 3810 states and 4938 transitions.
[2020-11-25 09:40:56,891 INFO  L751         BuchiCegarLoop]: Abstraction has 3810 states and 4938 transitions.
[2020-11-25 09:40:56,891 INFO  L631         BuchiCegarLoop]: Abstraction has 3810 states and 4938 transitions.
[2020-11-25 09:40:56,891 INFO  L445         BuchiCegarLoop]: ======== Iteration 28============
[2020-11-25 09:40:56,892 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 3810 states and 4938 transitions.
[2020-11-25 09:40:56,895 INFO  L131   ngComponentsAnalysis]: Automaton has 7 accepting balls. 14
[2020-11-25 09:40:56,895 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 09:40:56,895 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 09:40:56,896 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [7, 7, 7, 7, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 09:40:56,896 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_ERC200 := false;
[L2]                 call_transfer_ERC200 := false;
[L2]     CALL        call main();
[L4981]              assume null == 0;
[L4982]  CALL        call this := FreshRefGenerator__success();
[L2122]              havoc newRef;
[L2123]              assume Alloc[newRef] == false;
[L2124]              Alloc[newRef] := true;
[L2125]              assume newRef != null;
[L4982]  RET         call this := FreshRefGenerator__success();
[L4983]              assume now >= 0;
[L4984]              assume DType[this] == YFV;
[L4985]              assume msgvalue_MSG == 0;
[L4986]              gas := gas - 53000;
[L4987]  CALL        call YFV_YFV(this, msgsender_MSG, msgvalue_MSG);
[L1098]              havoc __exception;
[L1099]              revert := false;
[L1100]  COND FALSE  !(__exception)
[L1125]  CALL        call YFV_YFV__success(this, msgsender_MSG, msgvalue_MSG);
[L3242]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2186]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2171]              assume msgsender_MSG != null;
[L2172]              Balance[this] := 0;
[L2186]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2187]  COND FALSE  !(revert)
[L3242]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3243]  COND FALSE  !(revert)
[L3246]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2154]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2139]              assume msgsender_MSG != null;
[L2140]              Balance[this] := 0;
[L2154]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2155]  COND FALSE  !(revert)
[L3246]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3247]  COND FALSE  !(revert)
[L3250]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2248]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2186]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2171]              assume msgsender_MSG != null;
[L2172]              Balance[this] := 0;
[L2186]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2187]  COND FALSE  !(revert)
[L2248]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2249]  COND FALSE  !(revert)
[L2252]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2154]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2139]              assume msgsender_MSG != null;
[L2140]              Balance[this] := 0;
[L2154]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2155]  COND FALSE  !(revert)
[L2252]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2253]  COND FALSE  !(revert)
[L2256]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2220]              assume msgsender_MSG != null;
[L2221]              Balance[this] := 0;
[L2222]              _balances_ERC20[this] := zeroRefintArr();
[L2223]              sum__balances0[this] := 0;
[L2224]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2225]              sum__allowances1[this] := 0;
[L2226]              _totalSupply_ERC20[this] := 0;
[L2256]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2257]  COND FALSE  !(revert)
[L3250]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3251]  COND FALSE  !(revert)
[L3254]  CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -868984158, 934069305, 18);
[L3012]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2154]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2139]              assume msgsender_MSG != null;
[L2140]              Balance[this] := 0;
[L2154]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2155]  COND FALSE  !(revert)
[L3012]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3013]  COND FALSE  !(revert)
[L3016]  CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s484, symbol_s484, decimals_s484);
[L2987]              assume msgsender_MSG != null;
[L2988]              Balance[this] := 0;
[L2989]              _name_ERC20Detailed[this] := 1252836592;
[L2990]              _symbol_ERC20Detailed[this] := 1252836592;
[L2991]              _decimals_ERC20Detailed[this] := 0;
[L2993]              _name_ERC20Detailed[this] := name_s484;
[L2994]              _symbol_ERC20Detailed[this] := symbol_s484;
[L2995]              _decimals_ERC20Detailed[this] := decimals_s484;
[L3016]  RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s484, symbol_s484, decimals_s484);
[L3017]  COND FALSE  !(revert)
[L3254]  RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -868984158, 934069305, 18);
[L3255]  COND FALSE  !(revert)
[L3258]  CALL        call YFV_YFV_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3208]              assume msgsender_MSG != null;
[L3209]              Balance[this] := 0;
[L3210]              governance_YFV[this] := null;
[L3211]              minters_YFV[this] := zeroRefboolArr();
[L3213]              governance_YFV[this] := msgsender_MSG;
[L3258]  RET         call YFV_YFV_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3259]  COND FALSE  !(revert)
[L1125]  RET         call YFV_YFV__success(this, msgsender_MSG, msgvalue_MSG);
[L1126]              assume !revert && gas >= 0;
[L4987]  RET         call YFV_YFV(this, msgsender_MSG, msgvalue_MSG);
[L4988]              assume !revert && gas >= 0;
[L4991]  CALL        call CorralChoice_YFV(this);
[L4804]              havoc msgsender_MSG;
[L4805]              havoc msgvalue_MSG;
[L4806]              havoc choice;
[L4807]              havoc __ret_0_totalSupply;
[L4808]              havoc account_s121;
[L4809]              havoc __ret_0_balanceOf;
[L4810]              havoc recipient_s140;
[L4811]              havoc amount_s140;
[L4812]              havoc __ret_0_transfer;
[L4813]              havoc owner_s156;
[L4814]              havoc spender_s156;
[L4815]              havoc __ret_0_allowance;
[L4816]              havoc spender_s175;
[L4817]              havoc amount_s175;
[L4818]              havoc __ret_0_approve;
[L4819]              havoc sender_s211;
[L4820]              havoc recipient_s211;
[L4821]              havoc amount_s211;
[L4822]              havoc __ret_0_transferFrom;
[L4823]              havoc spender_s238;
[L4824]              havoc addedValue_s238;
[L4825]              havoc __ret_0_increaseAllowance;
[L4826]              havoc spender_s266;
[L4827]              havoc subtractedValue_s266;
[L4828]              havoc __ret_0_decreaseAllowance;
[L4829]              havoc name_s484;
[L4830]              havoc symbol_s484;
[L4831]              havoc decimals_s484;
[L4832]              havoc __ret_0_name;
[L4833]              havoc __ret_0_symbol;
[L4834]              havoc __ret_0_decimals;
[L4835]              havoc __ret_0_governance;
[L4836]              havoc arg744_s0;
[L4837]              havoc __ret_0_minters;
[L4838]              havoc account_s671;
[L4839]              havoc amount_s671;
[L4840]              havoc amount_s683;
[L4841]              havoc _governance_s701;
[L4842]              havoc _minter_s721;
[L4843]              havoc _minter_s741;
[L4844]              havoc tmpNow;
[L4845]              havoc gas;
[L4846]              assume gas > 4000000 && gas <= 8000000;
[L4847]              tmpNow := now;
[L4848]              havoc now;
[L4849]              assume now > tmpNow;
[L4850]              assume msgsender_MSG != null;
[L4851]              assume DType[msgsender_MSG] != IERC20;
[L4852]              assume DType[msgsender_MSG] != Context;
[L4853]              assume DType[msgsender_MSG] != ERC20;
[L4854]              assume DType[msgsender_MSG] != ERC20Detailed;
[L4855]              assume DType[msgsender_MSG] != SafeMath;
[L4856]              assume DType[msgsender_MSG] != YFV;
[L4857]              Alloc[msgsender_MSG] := true;
[L4858]  COND FALSE  !(choice == 18)
[L4864]  COND FALSE  !(choice == 17)
[L4870]  COND FALSE  !(choice == 16)
[L4877]  COND FALSE  !(choice == 15)
[L4883]  COND FALSE  !(choice == 14)
[L4890]  COND FALSE  !(choice == 13)
[L4897]  COND FALSE  !(choice == 12)
[L4904]  COND FALSE  !(choice == 11)
[L4911]  COND FALSE  !(choice == 10)
[L4917]  COND FALSE  !(choice == 9)
[L4923]  COND FALSE  !(choice == 8)
[L4929]  COND FALSE  !(choice == 7)
[L4935]  COND FALSE  !(choice == 6)
[L4941]  COND FALSE  !(choice == 5)
[L4948]  COND TRUE   choice == 4
[L4949]              gas := gas - 21000;
[L4950]  COND TRUE   gas >= 0
[L4951]              assume amount_s683 >= 0 && amount_s683 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4952]              assume msgvalue_MSG == 0;
[L4953]  CALL        call burn~uint256_YFV(this, msgsender_MSG, msgvalue_MSG, amount_s683);
[L1220]              havoc __exception;
[L1221]              revert := false;
[L1222]  COND FALSE  !(__exception)
[L1247]  CALL        call burn~uint256_YFV__success(this, msgsender_MSG, msgvalue_MSG, amount_s683);
[L3310]  COND TRUE   DType[this] == YFV
[L3311]  CALL        call _burn~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, amount_s683);
[L2911]              __var_19 := null;
[L2912]  COND FALSE  !(!(account_s411 != null))
[L2916]  CALL        call __var_20 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s411], amount_s411, 392639254);
[L3129]  COND FALSE  !(!(b_s561 <= a_s561))
[L3133]              c_s561 := (a_s561 - b_s561) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3134]              __ret_0_ := c_s561;
[L2916]  RET         call __var_20 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s411], amount_s411, 392639254);
[L2917]  COND FALSE  !(revert)
[L2920]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s411];
[L2921]              _balances_ERC20[this][account_s411] := __var_20;
[L2922]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s411];
[L2923]  CALL        call __var_21 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s411, 1252836592);
[L3129]  COND FALSE  !(!(b_s561 <= a_s561))
[L3133]              c_s561 := (a_s561 - b_s561) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3134]              __ret_0_ := c_s561;
[L2923]  RET         call __var_21 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s411, 1252836592);
[L2924]  COND FALSE  !(revert)
[L2927]              _totalSupply_ERC20[this] := __var_21;
[L2928]              assert { :EventEmitted "Transfer_ERC20" } true;
[L3311]  RET         call _burn~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, amount_s683);
[L3312]  COND FALSE  !(revert)
[L1247]  RET         call burn~uint256_YFV__success(this, msgsender_MSG, msgvalue_MSG, amount_s683);
[L1248]              assume !revert && gas >= 0;
[L4953]  RET         call burn~uint256_YFV(this, msgsender_MSG, msgvalue_MSG, amount_s683);
[L4991]  RET         call CorralChoice_YFV(this);
[L4991]  CALL        call CorralChoice_YFV(this);
[L4804]              havoc msgsender_MSG;
[L4805]              havoc msgvalue_MSG;
[L4806]              havoc choice;
[L4807]              havoc __ret_0_totalSupply;
[L4808]              havoc account_s121;
[L4809]              havoc __ret_0_balanceOf;
[L4810]              havoc recipient_s140;
[L4811]              havoc amount_s140;
[L4812]              havoc __ret_0_transfer;
[L4813]              havoc owner_s156;
[L4814]              havoc spender_s156;
[L4815]              havoc __ret_0_allowance;
[L4816]              havoc spender_s175;
[L4817]              havoc amount_s175;
[L4818]              havoc __ret_0_approve;
[L4819]              havoc sender_s211;
[L4820]              havoc recipient_s211;
[L4821]              havoc amount_s211;
[L4822]              havoc __ret_0_transferFrom;
[L4823]              havoc spender_s238;
[L4824]              havoc addedValue_s238;
[L4825]              havoc __ret_0_increaseAllowance;
[L4826]              havoc spender_s266;
[L4827]              havoc subtractedValue_s266;
[L4828]              havoc __ret_0_decreaseAllowance;
[L4829]              havoc name_s484;
[L4830]              havoc symbol_s484;
[L4831]              havoc decimals_s484;
[L4832]              havoc __ret_0_name;
[L4833]              havoc __ret_0_symbol;
[L4834]              havoc __ret_0_decimals;
[L4835]              havoc __ret_0_governance;
[L4836]              havoc arg744_s0;
[L4837]              havoc __ret_0_minters;
[L4838]              havoc account_s671;
[L4839]              havoc amount_s671;
[L4840]              havoc amount_s683;
[L4841]              havoc _governance_s701;
[L4842]              havoc _minter_s721;
[L4843]              havoc _minter_s741;
[L4844]              havoc tmpNow;
[L4845]              havoc gas;
[L4846]              assume gas > 4000000 && gas <= 8000000;
[L4847]              tmpNow := now;
[L4848]              havoc now;
[L4849]              assume now > tmpNow;
[L4850]              assume msgsender_MSG != null;
[L4851]              assume DType[msgsender_MSG] != IERC20;
[L4852]              assume DType[msgsender_MSG] != Context;
[L4853]              assume DType[msgsender_MSG] != ERC20;
[L4854]              assume DType[msgsender_MSG] != ERC20Detailed;
[L4855]              assume DType[msgsender_MSG] != SafeMath;
[L4856]              assume DType[msgsender_MSG] != YFV;
[L4857]              Alloc[msgsender_MSG] := true;
[L4858]  COND FALSE  !(choice == 18)
[L4864]  COND FALSE  !(choice == 17)
[L4870]  COND TRUE   choice == 16
[L4871]              gas := gas - 21000;
[L4872]  COND TRUE   gas >= 0
[L4873]              assume amount_s140 >= 0 && amount_s140 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4874]              assume msgvalue_MSG == 0;
[L4875]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == recipient_s140 && amount_s140 <= _balances_ERC20[this][msgsender_MSG]) && amount_s140 >= 0) && amount_s140 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s140] >= 0) && _balances_ERC20[this][recipient_s140] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC200 := true;
[L2]                 call_transfer_ERC200 := false;
[L2]                 revert := revert_hold;
[L392]               havoc __exception;
[L393]               revert := false;
[L394]   COND FALSE  !(__exception)
[L419]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L2322]  COND TRUE   DType[this] == YFV
[L2323]  CALL        call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2200]              __ret_0_ := msgsender_MSG;
[L2323]  RET         call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2324]  COND FALSE  !(revert)
[L2335]  COND TRUE   DType[this] == YFV
[L2336]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s140, amount_s140);
[L2806]              __var_12 := null;
[L2807]  COND FALSE  !(!(sender_s323 != null))
[L2811]              __var_13 := null;
[L2812]  COND FALSE  !(!(recipient_s323 != null))
[L2816]  CALL        call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s323], amount_s323, -806116454);
[L3129]  COND FALSE  !(!(b_s561 <= a_s561))
[L3133]              c_s561 := (a_s561 - b_s561) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3134]              __ret_0_ := c_s561;
[L2816]  RET         call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s323], amount_s323, -806116454);
[L2817]  COND FALSE  !(revert)
[L2820]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s323];
[L2821]              _balances_ERC20[this][sender_s323] := __var_14;
[L2822]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s323];
[L2823]  CALL        call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s323], amount_s323);
[L3105]              c_s534 := (a_s534 + b_s534) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3106]  COND FALSE  !(!(c_s534 >= a_s534))
[L3110]              __ret_0_ := c_s534;
[L2823]  RET         call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s323], amount_s323);
[L2824]  COND FALSE  !(revert)
[L2827]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s323];
[L2828]              _balances_ERC20[this][recipient_s323] := __var_15;
[L2829]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s323];
[L2830]              assert { :EventEmitted "Transfer_ERC20" } true;
[L2336]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s140, amount_s140);
[L2337]  COND FALSE  !(revert)
[L2348]              __ret_0_ := true;
[L419]   RET         call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L420]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume (((((((__ret_0_ == true && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowances_ERC20[this] == old(_allowances_ERC20[this])) && governance_YFV[this] == old(governance_YFV[this])) && minters_YFV[this] == old(minters_YFV[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]);
[L2]                 success_transfer_ERC200 := true;
[L2]                 success_transfer_ERC200 := false;
[L2]                 revert := revert_hold;
[L4875]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L4991]  RET         call CorralChoice_YFV(this);
[L4991]  CALL        call CorralChoice_YFV(this);
[L4804]              havoc msgsender_MSG;
[L4805]              havoc msgvalue_MSG;
[L4806]              havoc choice;
[L4807]              havoc __ret_0_totalSupply;
[L4808]              havoc account_s121;
[L4809]              havoc __ret_0_balanceOf;
[L4810]              havoc recipient_s140;
[L4811]              havoc amount_s140;
[L4812]              havoc __ret_0_transfer;
[L4813]              havoc owner_s156;
[L4814]              havoc spender_s156;
[L4815]              havoc __ret_0_allowance;
[L4816]              havoc spender_s175;
[L4817]              havoc amount_s175;
[L4818]              havoc __ret_0_approve;
[L4819]              havoc sender_s211;
[L4820]              havoc recipient_s211;
[L4821]              havoc amount_s211;
[L4822]              havoc __ret_0_transferFrom;
[L4823]              havoc spender_s238;
[L4824]              havoc addedValue_s238;
[L4825]              havoc __ret_0_increaseAllowance;
[L4826]              havoc spender_s266;
[L4827]              havoc subtractedValue_s266;
[L4828]              havoc __ret_0_decreaseAllowance;
[L4829]              havoc name_s484;
[L4830]              havoc symbol_s484;
[L4831]              havoc decimals_s484;
[L4832]              havoc __ret_0_name;
[L4833]              havoc __ret_0_symbol;
[L4834]              havoc __ret_0_decimals;
[L4835]              havoc __ret_0_governance;
[L4836]              havoc arg744_s0;
[L4837]              havoc __ret_0_minters;
[L4838]              havoc account_s671;
[L4839]              havoc amount_s671;
[L4840]              havoc amount_s683;
[L4841]              havoc _governance_s701;
[L4842]              havoc _minter_s721;
[L4843]              havoc _minter_s741;
[L4844]              havoc tmpNow;
[L4845]              havoc gas;
[L4846]              assume gas > 4000000 && gas <= 8000000;
[L4847]              tmpNow := now;
[L4848]              havoc now;
[L4849]              assume now > tmpNow;
[L4850]              assume msgsender_MSG != null;
[L4851]              assume DType[msgsender_MSG] != IERC20;
[L4852]              assume DType[msgsender_MSG] != Context;
[L4853]              assume DType[msgsender_MSG] != ERC20;
[L4854]              assume DType[msgsender_MSG] != ERC20Detailed;
[L4855]              assume DType[msgsender_MSG] != SafeMath;
[L4856]              assume DType[msgsender_MSG] != YFV;
[L4857]              Alloc[msgsender_MSG] := true;
[L4858]  COND FALSE  !(choice == 18)
[L4864]  COND FALSE  !(choice == 17)
[L4870]  COND FALSE  !(choice == 16)
[L4877]  COND FALSE  !(choice == 15)
[L4883]  COND FALSE  !(choice == 14)
[L4890]  COND TRUE   choice == 13
[L4891]              gas := gas - 21000;
[L4892]  COND TRUE   gas >= 0
[L4893]              assume amount_s211 >= 0 && amount_s211 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4894]              assume msgvalue_MSG == 0;
[L4895]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, sender_s211, recipient_s211, amount_s211);
[L572]               havoc __exception;
[L573]               revert := false;
[L574]   COND FALSE  !(__exception)
[L599]   CALL        call __ret_0_ := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s211, recipient_s211, amount_s211);
[L2500]  COND TRUE   DType[this] == YFV
[L2501]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s211, recipient_s211, amount_s211);
[L2806]              __var_12 := null;
[L2807]  COND FALSE  !(!(sender_s323 != null))
[L2811]              __var_13 := null;
[L2812]  COND FALSE  !(!(recipient_s323 != null))
[L2816]  CALL        call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s323], amount_s323, -806116454);
[L3129]  COND FALSE  !(!(b_s561 <= a_s561))
[L3133]              c_s561 := (a_s561 - b_s561) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3134]              __ret_0_ := c_s561;
[L2816]  RET         call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s323], amount_s323, -806116454);
[L2817]  COND FALSE  !(revert)
[L2820]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s323];
[L2821]              _balances_ERC20[this][sender_s323] := __var_14;
[L2822]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s323];
[L2823]  CALL        call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s323], amount_s323);
[L3105]              c_s534 := (a_s534 + b_s534) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3106]  COND FALSE  !(!(c_s534 >= a_s534))
[L3110]              __ret_0_ := c_s534;
[L2823]  RET         call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s323], amount_s323);
[L2824]  COND FALSE  !(revert)
[L2827]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s323];
[L2828]              _balances_ERC20[this][recipient_s323] := __var_15;
[L2829]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s323];
[L2830]              assert { :EventEmitted "Transfer_ERC20" } true;
[L2501]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s211, recipient_s211, amount_s211);
[L2502]  COND FALSE  !(revert)
[L2513]  COND TRUE   DType[this] == YFV
[L2514]  CALL        call __var_3 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2200]              __ret_0_ := msgsender_MSG;
[L2514]  RET         call __var_3 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2515]  COND FALSE  !(revert)
[L2526]  COND TRUE   DType[this] == YFV
[L2527]  CALL        call __var_5 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2200]              __ret_0_ := msgsender_MSG;
[L2527]  RET         call __var_5 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2528]  COND FALSE  !(revert)
[L2539]  CALL        call __var_4 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s211][__var_5], amount_s211, -2057360831);
[L3129]  COND FALSE  !(!(b_s561 <= a_s561))
[L3133]              c_s561 := (a_s561 - b_s561) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3134]              __ret_0_ := c_s561;
[L2539]  RET         call __var_4 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s211][__var_5], amount_s211, -2057360831);
[L2540]  COND FALSE  !(revert)
[L2543]  COND TRUE   DType[this] == YFV
[L2544]  CALL        call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s211, __var_3, __var_4);
[L2954]              __var_22 := null;
[L2955]  COND FALSE  !(!(owner_s453 != null))
[L2959]              __var_23 := null;
[L2960]  COND FALSE  !(!(spender_s453 != null))
[L2964]              sum__allowances1[owner_s453] := sum__allowances1[owner_s453] - _allowances_ERC20[this][owner_s453][spender_s453];
[L2965]              _allowances_ERC20[this][owner_s453][spender_s453] := amount_s453;
[L2966]              sum__allowances1[owner_s453] := sum__allowances1[owner_s453] + _allowances_ERC20[this][owner_s453][spender_s453];
[L2967]              assert { :EventEmitted "Approval_ERC20" } true;
[L2544]  RET         call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s211, __var_3, __var_4);
[L2545]  COND FALSE  !(revert)
[L2556]              __ret_0_ := true;
[L599]   RET         call __ret_0_ := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s211, recipient_s211, amount_s211);
[L600]               assume !revert && gas >= 0;
[L4895]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, sender_s211, recipient_s211, amount_s211);
[L4991]  RET         call CorralChoice_YFV(this);
[L4991]  CALL        call CorralChoice_YFV(this);
[L4804]              havoc msgsender_MSG;
[L4805]              havoc msgvalue_MSG;
[L4806]              havoc choice;
[L4807]              havoc __ret_0_totalSupply;
[L4808]              havoc account_s121;
[L4809]              havoc __ret_0_balanceOf;
[L4810]              havoc recipient_s140;
[L4811]              havoc amount_s140;
[L4812]              havoc __ret_0_transfer;
[L4813]              havoc owner_s156;
[L4814]              havoc spender_s156;
[L4815]              havoc __ret_0_allowance;
[L4816]              havoc spender_s175;
[L4817]              havoc amount_s175;
[L4818]              havoc __ret_0_approve;
[L4819]              havoc sender_s211;
[L4820]              havoc recipient_s211;
[L4821]              havoc amount_s211;
[L4822]              havoc __ret_0_transferFrom;
[L4823]              havoc spender_s238;
[L4824]              havoc addedValue_s238;
[L4825]              havoc __ret_0_increaseAllowance;
[L4826]              havoc spender_s266;
[L4827]              havoc subtractedValue_s266;
[L4828]              havoc __ret_0_decreaseAllowance;
[L4829]              havoc name_s484;
[L4830]              havoc symbol_s484;
[L4831]              havoc decimals_s484;
[L4832]              havoc __ret_0_name;
[L4833]              havoc __ret_0_symbol;
[L4834]              havoc __ret_0_decimals;
[L4835]              havoc __ret_0_governance;
[L4836]              havoc arg744_s0;
[L4837]              havoc __ret_0_minters;
[L4838]              havoc account_s671;
[L4839]              havoc amount_s671;
[L4840]              havoc amount_s683;
[L4841]              havoc _governance_s701;
[L4842]              havoc _minter_s721;
[L4843]              havoc _minter_s741;
[L4844]              havoc tmpNow;
[L4845]              havoc gas;
[L4846]              assume gas > 4000000 && gas <= 8000000;
[L4847]              tmpNow := now;
[L4848]              havoc now;
[L4849]              assume now > tmpNow;
[L4850]              assume msgsender_MSG != null;
[L4851]              assume DType[msgsender_MSG] != IERC20;
[L4852]              assume DType[msgsender_MSG] != Context;
[L4853]              assume DType[msgsender_MSG] != ERC20;
[L4854]              assume DType[msgsender_MSG] != ERC20Detailed;
[L4855]              assume DType[msgsender_MSG] != SafeMath;
[L4856]              assume DType[msgsender_MSG] != YFV;
[L4857]              Alloc[msgsender_MSG] := true;
[L4858]  COND FALSE  !(choice == 18)
[L4864]  COND FALSE  !(choice == 17)
[L4870]  COND FALSE  !(choice == 16)
[L4877]  COND FALSE  !(choice == 15)
[L4883]  COND FALSE  !(choice == 14)
[L4890]  COND FALSE  !(choice == 13)
[L4897]  COND FALSE  !(choice == 12)
[L4904]  COND FALSE  !(choice == 11)
[L4911]  COND FALSE  !(choice == 10)
[L4917]  COND FALSE  !(choice == 9)
[L4923]  COND FALSE  !(choice == 8)
[L4929]  COND FALSE  !(choice == 7)
[L4935]  COND FALSE  !(choice == 6)
[L4941]  COND FALSE  !(choice == 5)
[L4948]  COND TRUE   choice == 4
[L4949]              gas := gas - 21000;
[L4950]  COND TRUE   gas >= 0
[L4951]              assume amount_s683 >= 0 && amount_s683 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4952]              assume msgvalue_MSG == 0;
[L4953]  CALL        call burn~uint256_YFV(this, msgsender_MSG, msgvalue_MSG, amount_s683);
[L1220]              havoc __exception;
[L1221]              revert := false;
[L1222]  COND FALSE  !(__exception)
[L1247]  CALL        call burn~uint256_YFV__success(this, msgsender_MSG, msgvalue_MSG, amount_s683);
[L3310]  COND TRUE   DType[this] == YFV
[L3311]  CALL        call _burn~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, amount_s683);
[L2911]              __var_19 := null;
[L2912]  COND FALSE  !(!(account_s411 != null))
[L2916]  CALL        call __var_20 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s411], amount_s411, 392639254);
[L3129]  COND FALSE  !(!(b_s561 <= a_s561))
[L3133]              c_s561 := (a_s561 - b_s561) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3134]              __ret_0_ := c_s561;
[L2916]  RET         call __var_20 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s411], amount_s411, 392639254);
[L2917]  COND FALSE  !(revert)
[L2920]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s411];
[L2921]              _balances_ERC20[this][account_s411] := __var_20;
[L2922]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s411];
[L2923]  CALL        call __var_21 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s411, 1252836592);
[L3129]  COND FALSE  !(!(b_s561 <= a_s561))
[L3133]              c_s561 := (a_s561 - b_s561) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3134]              __ret_0_ := c_s561;
[L2923]  RET         call __var_21 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s411, 1252836592);
[L2924]  COND FALSE  !(revert)
[L2927]              _totalSupply_ERC20[this] := __var_21;
[L2928]              assert { :EventEmitted "Transfer_ERC20" } true;
[L3311]  RET         call _burn~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, amount_s683);
[L3312]  COND FALSE  !(revert)
[L1247]  RET         call burn~uint256_YFV__success(this, msgsender_MSG, msgvalue_MSG, amount_s683);
[L1248]              assume !revert && gas >= 0;
[L4953]  RET         call burn~uint256_YFV(this, msgsender_MSG, msgvalue_MSG, amount_s683);
[L4991]  RET         call CorralChoice_YFV(this);
[L4991]  CALL        call CorralChoice_YFV(this);
[L4804]              havoc msgsender_MSG;
[L4805]              havoc msgvalue_MSG;
[L4806]              havoc choice;
[L4807]              havoc __ret_0_totalSupply;
[L4808]              havoc account_s121;
[L4809]              havoc __ret_0_balanceOf;
[L4810]              havoc recipient_s140;
[L4811]              havoc amount_s140;
[L4812]              havoc __ret_0_transfer;
[L4813]              havoc owner_s156;
[L4814]              havoc spender_s156;
[L4815]              havoc __ret_0_allowance;
[L4816]              havoc spender_s175;
[L4817]              havoc amount_s175;
[L4818]              havoc __ret_0_approve;
[L4819]              havoc sender_s211;
[L4820]              havoc recipient_s211;
[L4821]              havoc amount_s211;
[L4822]              havoc __ret_0_transferFrom;
[L4823]              havoc spender_s238;
[L4824]              havoc addedValue_s238;
[L4825]              havoc __ret_0_increaseAllowance;
[L4826]              havoc spender_s266;
[L4827]              havoc subtractedValue_s266;
[L4828]              havoc __ret_0_decreaseAllowance;
[L4829]              havoc name_s484;
[L4830]              havoc symbol_s484;
[L4831]              havoc decimals_s484;
[L4832]              havoc __ret_0_name;
[L4833]              havoc __ret_0_symbol;
[L4834]              havoc __ret_0_decimals;
[L4835]              havoc __ret_0_governance;
[L4836]              havoc arg744_s0;
[L4837]              havoc __ret_0_minters;
[L4838]              havoc account_s671;
[L4839]              havoc amount_s671;
[L4840]              havoc amount_s683;
[L4841]              havoc _governance_s701;
[L4842]              havoc _minter_s721;
[L4843]              havoc _minter_s741;
[L4844]              havoc tmpNow;
[L4845]              havoc gas;
[L4846]              assume gas > 4000000 && gas <= 8000000;
[L4847]              tmpNow := now;
[L4848]              havoc now;
[L4849]              assume now > tmpNow;
[L4850]              assume msgsender_MSG != null;
[L4851]              assume DType[msgsender_MSG] != IERC20;
[L4852]              assume DType[msgsender_MSG] != Context;
[L4853]              assume DType[msgsender_MSG] != ERC20;
[L4854]              assume DType[msgsender_MSG] != ERC20Detailed;
[L4855]              assume DType[msgsender_MSG] != SafeMath;
[L4856]              assume DType[msgsender_MSG] != YFV;
[L4857]              Alloc[msgsender_MSG] := true;
[L4858]  COND FALSE  !(choice == 18)
[L4864]  COND FALSE  !(choice == 17)
[L4870]  COND TRUE   choice == 16
[L4871]              gas := gas - 21000;
[L4872]  COND TRUE   gas >= 0
[L4873]              assume amount_s140 >= 0 && amount_s140 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4874]              assume msgvalue_MSG == 0;
[L4875]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == recipient_s140 && amount_s140 <= _balances_ERC20[this][msgsender_MSG]) && amount_s140 >= 0) && amount_s140 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s140] >= 0) && _balances_ERC20[this][recipient_s140] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC200 := true;
[L2]                 call_transfer_ERC200 := false;
[L2]                 revert := revert_hold;
[L392]               havoc __exception;
[L393]               revert := false;
[L394]   COND FALSE  !(__exception)
[L419]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L2322]  COND TRUE   DType[this] == YFV
[L2323]  CALL        call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2200]              __ret_0_ := msgsender_MSG;
[L2323]  RET         call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2324]  COND FALSE  !(revert)
[L2335]  COND TRUE   DType[this] == YFV
[L2336]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s140, amount_s140);
[L2806]              __var_12 := null;
[L2807]  COND FALSE  !(!(sender_s323 != null))
[L2811]              __var_13 := null;
[L2812]  COND FALSE  !(!(recipient_s323 != null))
[L2816]  CALL        call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s323], amount_s323, -806116454);
[L3129]  COND FALSE  !(!(b_s561 <= a_s561))
[L3133]              c_s561 := (a_s561 - b_s561) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3134]              __ret_0_ := c_s561;
[L2816]  RET         call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s323], amount_s323, -806116454);
[L2817]  COND FALSE  !(revert)
[L2820]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s323];
[L2821]              _balances_ERC20[this][sender_s323] := __var_14;
[L2822]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s323];
[L2823]  CALL        call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s323], amount_s323);
[L3105]              c_s534 := (a_s534 + b_s534) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3106]  COND FALSE  !(!(c_s534 >= a_s534))
[L3110]              __ret_0_ := c_s534;
[L2823]  RET         call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s323], amount_s323);
[L2824]  COND FALSE  !(revert)
[L2827]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s323];
[L2828]              _balances_ERC20[this][recipient_s323] := __var_15;
[L2829]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s323];
[L2830]              assert { :EventEmitted "Transfer_ERC20" } true;
[L2336]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s140, amount_s140);
[L2337]  COND FALSE  !(revert)
[L2348]              __ret_0_ := true;
[L419]   RET         call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L420]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !((((((((__ret_0_ == true && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowances_ERC20[this] == old(_allowances_ERC20[this])) && governance_YFV[this] == old(governance_YFV[this])) && minters_YFV[this] == old(minters_YFV[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]));
[L2]                 revert := revert_hold;
[L4875]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L4991]  RET         call CorralChoice_YFV(this);

Loop:
[L4991]  CALL        call CorralChoice_YFV(this);
[L4804]              havoc msgsender_MSG;
[L4805]              havoc msgvalue_MSG;
[L4806]              havoc choice;
[L4807]              havoc __ret_0_totalSupply;
[L4808]              havoc account_s121;
[L4809]              havoc __ret_0_balanceOf;
[L4810]              havoc recipient_s140;
[L4811]              havoc amount_s140;
[L4812]              havoc __ret_0_transfer;
[L4813]              havoc owner_s156;
[L4814]              havoc spender_s156;
[L4815]              havoc __ret_0_allowance;
[L4816]              havoc spender_s175;
[L4817]              havoc amount_s175;
[L4818]              havoc __ret_0_approve;
[L4819]              havoc sender_s211;
[L4820]              havoc recipient_s211;
[L4821]              havoc amount_s211;
[L4822]              havoc __ret_0_transferFrom;
[L4823]              havoc spender_s238;
[L4824]              havoc addedValue_s238;
[L4825]              havoc __ret_0_increaseAllowance;
[L4826]              havoc spender_s266;
[L4827]              havoc subtractedValue_s266;
[L4828]              havoc __ret_0_decreaseAllowance;
[L4829]              havoc name_s484;
[L4830]              havoc symbol_s484;
[L4831]              havoc decimals_s484;
[L4832]              havoc __ret_0_name;
[L4833]              havoc __ret_0_symbol;
[L4834]              havoc __ret_0_decimals;
[L4835]              havoc __ret_0_governance;
[L4836]              havoc arg744_s0;
[L4837]              havoc __ret_0_minters;
[L4838]              havoc account_s671;
[L4839]              havoc amount_s671;
[L4840]              havoc amount_s683;
[L4841]              havoc _governance_s701;
[L4842]              havoc _minter_s721;
[L4843]              havoc _minter_s741;
[L4844]              havoc tmpNow;
[L4845]              havoc gas;
[L4846]              assume gas > 4000000 && gas <= 8000000;
[L4847]              tmpNow := now;
[L4848]              havoc now;
[L4849]              assume now > tmpNow;
[L4850]              assume msgsender_MSG != null;
[L4851]              assume DType[msgsender_MSG] != IERC20;
[L4852]              assume DType[msgsender_MSG] != Context;
[L4853]              assume DType[msgsender_MSG] != ERC20;
[L4854]              assume DType[msgsender_MSG] != ERC20Detailed;
[L4855]              assume DType[msgsender_MSG] != SafeMath;
[L4856]              assume DType[msgsender_MSG] != YFV;
[L4857]              Alloc[msgsender_MSG] := true;
[L4858]  COND TRUE   choice == 18
[L4859]              gas := gas - 21000;
[L4860]  COND FALSE  !(gas >= 0)
[L4991]  RET         call CorralChoice_YFV(this);

[2020-11-25 09:40:56,900 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 09:40:56,900 INFO  L82        PathProgramCache]: Analyzing trace with hash -912432040, now seen corresponding path program 1 times
[2020-11-25 09:40:56,900 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 09:40:56,991 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 09:41:00,920 WARN  L188               SmtUtils]: Spent 115.00 ms on a formula simplification. DAG size of input: 158 DAG size of output: 19
[2020-11-25 09:41:01,233 WARN  L188               SmtUtils]: Spent 129.00 ms on a formula simplification. DAG size of input: 159 DAG size of output: 23
[2020-11-25 09:41:03,023 INFO  L134       CoverageAnalysis]: Checked inductivity of 856 backedges. 44 proven. 606 refuted. 0 times theorem prover too weak. 206 trivial. 0 not checked.
[2020-11-25 09:41:03,023 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 09:41:03,024 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [73] total 73
[2020-11-25 09:41:03,024 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 09:41:03,024 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 74 interpolants.
[2020-11-25 09:41:03,025 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=366, Invalid=5036, Unknown=0, NotChecked=0, Total=5402
[2020-11-25 09:41:03,025 INFO  L87              Difference]: Start difference. First operand 3810 states and 4938 transitions. cyclomatic complexity: 1200 Second operand 74 states.
[2020-11-25 09:41:19,889 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 09:41:19,889 INFO  L93              Difference]: Finished difference Result 4360 states and 5971 transitions.
[2020-11-25 09:41:19,889 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 58 states. 
[2020-11-25 09:41:19,889 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 4360 states and 5971 transitions.
[2020-11-25 09:41:19,902 INFO  L131   ngComponentsAnalysis]: Automaton has 11 accepting balls. 22
[2020-11-25 09:41:19,916 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 4360 states to 4360 states and 5971 transitions.
[2020-11-25 09:41:19,916 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1222
[2020-11-25 09:41:19,917 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1222
[2020-11-25 09:41:19,917 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 4360 states and 5971 transitions.
[2020-11-25 09:41:19,921 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 09:41:19,922 INFO  L728         BuchiCegarLoop]: Abstraction has 4360 states and 5971 transitions.
[2020-11-25 09:41:19,923 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 4360 states and 5971 transitions.
[2020-11-25 09:41:19,946 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 4360 to 3810.
[2020-11-25 09:41:19,946 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 3810 states.
[2020-11-25 09:41:19,953 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 3810 states to 3810 states and 4942 transitions.
[2020-11-25 09:41:19,953 INFO  L751         BuchiCegarLoop]: Abstraction has 3810 states and 4942 transitions.
[2020-11-25 09:41:19,953 INFO  L631         BuchiCegarLoop]: Abstraction has 3810 states and 4942 transitions.
[2020-11-25 09:41:19,953 INFO  L445         BuchiCegarLoop]: ======== Iteration 29============
[2020-11-25 09:41:19,953 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 3810 states and 4942 transitions.
[2020-11-25 09:41:19,957 INFO  L131   ngComponentsAnalysis]: Automaton has 7 accepting balls. 14
[2020-11-25 09:41:19,957 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 09:41:19,957 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 09:41:19,958 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [7, 7, 7, 7, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 09:41:19,958 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_ERC200 := false;
[L2]                 call_transfer_ERC200 := false;
[L2]     CALL        call main();
[L4981]              assume null == 0;
[L4982]  CALL        call this := FreshRefGenerator__success();
[L2122]              havoc newRef;
[L2123]              assume Alloc[newRef] == false;
[L2124]              Alloc[newRef] := true;
[L2125]              assume newRef != null;
[L4982]  RET         call this := FreshRefGenerator__success();
[L4983]              assume now >= 0;
[L4984]              assume DType[this] == YFV;
[L4985]              assume msgvalue_MSG == 0;
[L4986]              gas := gas - 53000;
[L4987]  CALL        call YFV_YFV(this, msgsender_MSG, msgvalue_MSG);
[L1098]              havoc __exception;
[L1099]              revert := false;
[L1100]  COND FALSE  !(__exception)
[L1125]  CALL        call YFV_YFV__success(this, msgsender_MSG, msgvalue_MSG);
[L3242]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2186]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2171]              assume msgsender_MSG != null;
[L2172]              Balance[this] := 0;
[L2186]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2187]  COND FALSE  !(revert)
[L3242]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3243]  COND FALSE  !(revert)
[L3246]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2154]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2139]              assume msgsender_MSG != null;
[L2140]              Balance[this] := 0;
[L2154]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2155]  COND FALSE  !(revert)
[L3246]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3247]  COND FALSE  !(revert)
[L3250]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2248]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2186]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2171]              assume msgsender_MSG != null;
[L2172]              Balance[this] := 0;
[L2186]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2187]  COND FALSE  !(revert)
[L2248]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2249]  COND FALSE  !(revert)
[L2252]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2154]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2139]              assume msgsender_MSG != null;
[L2140]              Balance[this] := 0;
[L2154]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2155]  COND FALSE  !(revert)
[L2252]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2253]  COND FALSE  !(revert)
[L2256]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2220]              assume msgsender_MSG != null;
[L2221]              Balance[this] := 0;
[L2222]              _balances_ERC20[this] := zeroRefintArr();
[L2223]              sum__balances0[this] := 0;
[L2224]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2225]              sum__allowances1[this] := 0;
[L2226]              _totalSupply_ERC20[this] := 0;
[L2256]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2257]  COND FALSE  !(revert)
[L3250]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3251]  COND FALSE  !(revert)
[L3254]  CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -868984158, 934069305, 18);
[L3012]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2154]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2139]              assume msgsender_MSG != null;
[L2140]              Balance[this] := 0;
[L2154]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2155]  COND FALSE  !(revert)
[L3012]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3013]  COND FALSE  !(revert)
[L3016]  CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s484, symbol_s484, decimals_s484);
[L2987]              assume msgsender_MSG != null;
[L2988]              Balance[this] := 0;
[L2989]              _name_ERC20Detailed[this] := 1252836592;
[L2990]              _symbol_ERC20Detailed[this] := 1252836592;
[L2991]              _decimals_ERC20Detailed[this] := 0;
[L2993]              _name_ERC20Detailed[this] := name_s484;
[L2994]              _symbol_ERC20Detailed[this] := symbol_s484;
[L2995]              _decimals_ERC20Detailed[this] := decimals_s484;
[L3016]  RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s484, symbol_s484, decimals_s484);
[L3017]  COND FALSE  !(revert)
[L3254]  RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -868984158, 934069305, 18);
[L3255]  COND FALSE  !(revert)
[L3258]  CALL        call YFV_YFV_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3208]              assume msgsender_MSG != null;
[L3209]              Balance[this] := 0;
[L3210]              governance_YFV[this] := null;
[L3211]              minters_YFV[this] := zeroRefboolArr();
[L3213]              governance_YFV[this] := msgsender_MSG;
[L3258]  RET         call YFV_YFV_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3259]  COND FALSE  !(revert)
[L1125]  RET         call YFV_YFV__success(this, msgsender_MSG, msgvalue_MSG);
[L1126]              assume !revert && gas >= 0;
[L4987]  RET         call YFV_YFV(this, msgsender_MSG, msgvalue_MSG);
[L4988]              assume !revert && gas >= 0;
[L4991]  CALL        call CorralChoice_YFV(this);
[L4804]              havoc msgsender_MSG;
[L4805]              havoc msgvalue_MSG;
[L4806]              havoc choice;
[L4807]              havoc __ret_0_totalSupply;
[L4808]              havoc account_s121;
[L4809]              havoc __ret_0_balanceOf;
[L4810]              havoc recipient_s140;
[L4811]              havoc amount_s140;
[L4812]              havoc __ret_0_transfer;
[L4813]              havoc owner_s156;
[L4814]              havoc spender_s156;
[L4815]              havoc __ret_0_allowance;
[L4816]              havoc spender_s175;
[L4817]              havoc amount_s175;
[L4818]              havoc __ret_0_approve;
[L4819]              havoc sender_s211;
[L4820]              havoc recipient_s211;
[L4821]              havoc amount_s211;
[L4822]              havoc __ret_0_transferFrom;
[L4823]              havoc spender_s238;
[L4824]              havoc addedValue_s238;
[L4825]              havoc __ret_0_increaseAllowance;
[L4826]              havoc spender_s266;
[L4827]              havoc subtractedValue_s266;
[L4828]              havoc __ret_0_decreaseAllowance;
[L4829]              havoc name_s484;
[L4830]              havoc symbol_s484;
[L4831]              havoc decimals_s484;
[L4832]              havoc __ret_0_name;
[L4833]              havoc __ret_0_symbol;
[L4834]              havoc __ret_0_decimals;
[L4835]              havoc __ret_0_governance;
[L4836]              havoc arg744_s0;
[L4837]              havoc __ret_0_minters;
[L4838]              havoc account_s671;
[L4839]              havoc amount_s671;
[L4840]              havoc amount_s683;
[L4841]              havoc _governance_s701;
[L4842]              havoc _minter_s721;
[L4843]              havoc _minter_s741;
[L4844]              havoc tmpNow;
[L4845]              havoc gas;
[L4846]              assume gas > 4000000 && gas <= 8000000;
[L4847]              tmpNow := now;
[L4848]              havoc now;
[L4849]              assume now > tmpNow;
[L4850]              assume msgsender_MSG != null;
[L4851]              assume DType[msgsender_MSG] != IERC20;
[L4852]              assume DType[msgsender_MSG] != Context;
[L4853]              assume DType[msgsender_MSG] != ERC20;
[L4854]              assume DType[msgsender_MSG] != ERC20Detailed;
[L4855]              assume DType[msgsender_MSG] != SafeMath;
[L4856]              assume DType[msgsender_MSG] != YFV;
[L4857]              Alloc[msgsender_MSG] := true;
[L4858]  COND FALSE  !(choice == 18)
[L4864]  COND FALSE  !(choice == 17)
[L4870]  COND FALSE  !(choice == 16)
[L4877]  COND FALSE  !(choice == 15)
[L4883]  COND FALSE  !(choice == 14)
[L4890]  COND FALSE  !(choice == 13)
[L4897]  COND FALSE  !(choice == 12)
[L4904]  COND FALSE  !(choice == 11)
[L4911]  COND FALSE  !(choice == 10)
[L4917]  COND FALSE  !(choice == 9)
[L4923]  COND FALSE  !(choice == 8)
[L4929]  COND FALSE  !(choice == 7)
[L4935]  COND FALSE  !(choice == 6)
[L4941]  COND FALSE  !(choice == 5)
[L4948]  COND TRUE   choice == 4
[L4949]              gas := gas - 21000;
[L4950]  COND TRUE   gas >= 0
[L4951]              assume amount_s683 >= 0 && amount_s683 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4952]              assume msgvalue_MSG == 0;
[L4953]  CALL        call burn~uint256_YFV(this, msgsender_MSG, msgvalue_MSG, amount_s683);
[L1220]              havoc __exception;
[L1221]              revert := false;
[L1222]  COND FALSE  !(__exception)
[L1247]  CALL        call burn~uint256_YFV__success(this, msgsender_MSG, msgvalue_MSG, amount_s683);
[L3310]  COND TRUE   DType[this] == YFV
[L3311]  CALL        call _burn~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, amount_s683);
[L2911]              __var_19 := null;
[L2912]  COND FALSE  !(!(account_s411 != null))
[L2916]  CALL        call __var_20 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s411], amount_s411, 392639254);
[L3129]  COND FALSE  !(!(b_s561 <= a_s561))
[L3133]              c_s561 := (a_s561 - b_s561) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3134]              __ret_0_ := c_s561;
[L2916]  RET         call __var_20 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s411], amount_s411, 392639254);
[L2917]  COND FALSE  !(revert)
[L2920]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s411];
[L2921]              _balances_ERC20[this][account_s411] := __var_20;
[L2922]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s411];
[L2923]  CALL        call __var_21 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s411, 1252836592);
[L3129]  COND FALSE  !(!(b_s561 <= a_s561))
[L3133]              c_s561 := (a_s561 - b_s561) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3134]              __ret_0_ := c_s561;
[L2923]  RET         call __var_21 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s411, 1252836592);
[L2924]  COND FALSE  !(revert)
[L2927]              _totalSupply_ERC20[this] := __var_21;
[L2928]              assert { :EventEmitted "Transfer_ERC20" } true;
[L3311]  RET         call _burn~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, amount_s683);
[L3312]  COND FALSE  !(revert)
[L1247]  RET         call burn~uint256_YFV__success(this, msgsender_MSG, msgvalue_MSG, amount_s683);
[L1248]              assume !revert && gas >= 0;
[L4953]  RET         call burn~uint256_YFV(this, msgsender_MSG, msgvalue_MSG, amount_s683);
[L4991]  RET         call CorralChoice_YFV(this);
[L4991]  CALL        call CorralChoice_YFV(this);
[L4804]              havoc msgsender_MSG;
[L4805]              havoc msgvalue_MSG;
[L4806]              havoc choice;
[L4807]              havoc __ret_0_totalSupply;
[L4808]              havoc account_s121;
[L4809]              havoc __ret_0_balanceOf;
[L4810]              havoc recipient_s140;
[L4811]              havoc amount_s140;
[L4812]              havoc __ret_0_transfer;
[L4813]              havoc owner_s156;
[L4814]              havoc spender_s156;
[L4815]              havoc __ret_0_allowance;
[L4816]              havoc spender_s175;
[L4817]              havoc amount_s175;
[L4818]              havoc __ret_0_approve;
[L4819]              havoc sender_s211;
[L4820]              havoc recipient_s211;
[L4821]              havoc amount_s211;
[L4822]              havoc __ret_0_transferFrom;
[L4823]              havoc spender_s238;
[L4824]              havoc addedValue_s238;
[L4825]              havoc __ret_0_increaseAllowance;
[L4826]              havoc spender_s266;
[L4827]              havoc subtractedValue_s266;
[L4828]              havoc __ret_0_decreaseAllowance;
[L4829]              havoc name_s484;
[L4830]              havoc symbol_s484;
[L4831]              havoc decimals_s484;
[L4832]              havoc __ret_0_name;
[L4833]              havoc __ret_0_symbol;
[L4834]              havoc __ret_0_decimals;
[L4835]              havoc __ret_0_governance;
[L4836]              havoc arg744_s0;
[L4837]              havoc __ret_0_minters;
[L4838]              havoc account_s671;
[L4839]              havoc amount_s671;
[L4840]              havoc amount_s683;
[L4841]              havoc _governance_s701;
[L4842]              havoc _minter_s721;
[L4843]              havoc _minter_s741;
[L4844]              havoc tmpNow;
[L4845]              havoc gas;
[L4846]              assume gas > 4000000 && gas <= 8000000;
[L4847]              tmpNow := now;
[L4848]              havoc now;
[L4849]              assume now > tmpNow;
[L4850]              assume msgsender_MSG != null;
[L4851]              assume DType[msgsender_MSG] != IERC20;
[L4852]              assume DType[msgsender_MSG] != Context;
[L4853]              assume DType[msgsender_MSG] != ERC20;
[L4854]              assume DType[msgsender_MSG] != ERC20Detailed;
[L4855]              assume DType[msgsender_MSG] != SafeMath;
[L4856]              assume DType[msgsender_MSG] != YFV;
[L4857]              Alloc[msgsender_MSG] := true;
[L4858]  COND FALSE  !(choice == 18)
[L4864]  COND FALSE  !(choice == 17)
[L4870]  COND TRUE   choice == 16
[L4871]              gas := gas - 21000;
[L4872]  COND TRUE   gas >= 0
[L4873]              assume amount_s140 >= 0 && amount_s140 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4874]              assume msgvalue_MSG == 0;
[L4875]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((msgsender_MSG == recipient_s140 && amount_s140 <= _balances_ERC20[this][msgsender_MSG]) && amount_s140 >= 0) && amount_s140 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s140] >= 0) && _balances_ERC20[this][recipient_s140] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2]                 revert := revert_hold;
[L392]               havoc __exception;
[L393]               revert := false;
[L394]   COND FALSE  !(__exception)
[L419]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L2322]  COND TRUE   DType[this] == YFV
[L2323]  CALL        call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2200]              __ret_0_ := msgsender_MSG;
[L2323]  RET         call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2324]  COND FALSE  !(revert)
[L2335]  COND TRUE   DType[this] == YFV
[L2336]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s140, amount_s140);
[L2806]              __var_12 := null;
[L2807]  COND FALSE  !(!(sender_s323 != null))
[L2811]              __var_13 := null;
[L2812]  COND FALSE  !(!(recipient_s323 != null))
[L2816]  CALL        call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s323], amount_s323, -806116454);
[L3129]  COND FALSE  !(!(b_s561 <= a_s561))
[L3133]              c_s561 := (a_s561 - b_s561) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3134]              __ret_0_ := c_s561;
[L2816]  RET         call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s323], amount_s323, -806116454);
[L2817]  COND FALSE  !(revert)
[L2820]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s323];
[L2821]              _balances_ERC20[this][sender_s323] := __var_14;
[L2822]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s323];
[L2823]  CALL        call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s323], amount_s323);
[L3105]              c_s534 := (a_s534 + b_s534) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3106]  COND FALSE  !(!(c_s534 >= a_s534))
[L3110]              __ret_0_ := c_s534;
[L2823]  RET         call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s323], amount_s323);
[L2824]  COND FALSE  !(revert)
[L2827]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s323];
[L2828]              _balances_ERC20[this][recipient_s323] := __var_15;
[L2829]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s323];
[L2830]              assert { :EventEmitted "Transfer_ERC20" } true;
[L2336]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s140, amount_s140);
[L2337]  COND FALSE  !(revert)
[L2348]              __ret_0_ := true;
[L419]   RET         call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L420]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume (((((((__ret_0_ == true && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowances_ERC20[this] == old(_allowances_ERC20[this])) && governance_YFV[this] == old(governance_YFV[this])) && minters_YFV[this] == old(minters_YFV[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]);
[L2]                 success_transfer_ERC200 := true;
[L2]                 success_transfer_ERC200 := false;
[L2]                 revert := revert_hold;
[L4875]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L4991]  RET         call CorralChoice_YFV(this);
[L4991]  CALL        call CorralChoice_YFV(this);
[L4804]              havoc msgsender_MSG;
[L4805]              havoc msgvalue_MSG;
[L4806]              havoc choice;
[L4807]              havoc __ret_0_totalSupply;
[L4808]              havoc account_s121;
[L4809]              havoc __ret_0_balanceOf;
[L4810]              havoc recipient_s140;
[L4811]              havoc amount_s140;
[L4812]              havoc __ret_0_transfer;
[L4813]              havoc owner_s156;
[L4814]              havoc spender_s156;
[L4815]              havoc __ret_0_allowance;
[L4816]              havoc spender_s175;
[L4817]              havoc amount_s175;
[L4818]              havoc __ret_0_approve;
[L4819]              havoc sender_s211;
[L4820]              havoc recipient_s211;
[L4821]              havoc amount_s211;
[L4822]              havoc __ret_0_transferFrom;
[L4823]              havoc spender_s238;
[L4824]              havoc addedValue_s238;
[L4825]              havoc __ret_0_increaseAllowance;
[L4826]              havoc spender_s266;
[L4827]              havoc subtractedValue_s266;
[L4828]              havoc __ret_0_decreaseAllowance;
[L4829]              havoc name_s484;
[L4830]              havoc symbol_s484;
[L4831]              havoc decimals_s484;
[L4832]              havoc __ret_0_name;
[L4833]              havoc __ret_0_symbol;
[L4834]              havoc __ret_0_decimals;
[L4835]              havoc __ret_0_governance;
[L4836]              havoc arg744_s0;
[L4837]              havoc __ret_0_minters;
[L4838]              havoc account_s671;
[L4839]              havoc amount_s671;
[L4840]              havoc amount_s683;
[L4841]              havoc _governance_s701;
[L4842]              havoc _minter_s721;
[L4843]              havoc _minter_s741;
[L4844]              havoc tmpNow;
[L4845]              havoc gas;
[L4846]              assume gas > 4000000 && gas <= 8000000;
[L4847]              tmpNow := now;
[L4848]              havoc now;
[L4849]              assume now > tmpNow;
[L4850]              assume msgsender_MSG != null;
[L4851]              assume DType[msgsender_MSG] != IERC20;
[L4852]              assume DType[msgsender_MSG] != Context;
[L4853]              assume DType[msgsender_MSG] != ERC20;
[L4854]              assume DType[msgsender_MSG] != ERC20Detailed;
[L4855]              assume DType[msgsender_MSG] != SafeMath;
[L4856]              assume DType[msgsender_MSG] != YFV;
[L4857]              Alloc[msgsender_MSG] := true;
[L4858]  COND FALSE  !(choice == 18)
[L4864]  COND FALSE  !(choice == 17)
[L4870]  COND FALSE  !(choice == 16)
[L4877]  COND FALSE  !(choice == 15)
[L4883]  COND FALSE  !(choice == 14)
[L4890]  COND TRUE   choice == 13
[L4891]              gas := gas - 21000;
[L4892]  COND TRUE   gas >= 0
[L4893]              assume amount_s211 >= 0 && amount_s211 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4894]              assume msgvalue_MSG == 0;
[L4895]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, sender_s211, recipient_s211, amount_s211);
[L572]               havoc __exception;
[L573]               revert := false;
[L574]   COND FALSE  !(__exception)
[L599]   CALL        call __ret_0_ := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s211, recipient_s211, amount_s211);
[L2500]  COND TRUE   DType[this] == YFV
[L2501]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s211, recipient_s211, amount_s211);
[L2806]              __var_12 := null;
[L2807]  COND FALSE  !(!(sender_s323 != null))
[L2811]              __var_13 := null;
[L2812]  COND FALSE  !(!(recipient_s323 != null))
[L2816]  CALL        call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s323], amount_s323, -806116454);
[L3129]  COND FALSE  !(!(b_s561 <= a_s561))
[L3133]              c_s561 := (a_s561 - b_s561) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3134]              __ret_0_ := c_s561;
[L2816]  RET         call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s323], amount_s323, -806116454);
[L2817]  COND FALSE  !(revert)
[L2820]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s323];
[L2821]              _balances_ERC20[this][sender_s323] := __var_14;
[L2822]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s323];
[L2823]  CALL        call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s323], amount_s323);
[L3105]              c_s534 := (a_s534 + b_s534) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3106]  COND FALSE  !(!(c_s534 >= a_s534))
[L3110]              __ret_0_ := c_s534;
[L2823]  RET         call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s323], amount_s323);
[L2824]  COND FALSE  !(revert)
[L2827]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s323];
[L2828]              _balances_ERC20[this][recipient_s323] := __var_15;
[L2829]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s323];
[L2830]              assert { :EventEmitted "Transfer_ERC20" } true;
[L2501]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s211, recipient_s211, amount_s211);
[L2502]  COND FALSE  !(revert)
[L2513]  COND TRUE   DType[this] == YFV
[L2514]  CALL        call __var_3 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2200]              __ret_0_ := msgsender_MSG;
[L2514]  RET         call __var_3 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2515]  COND FALSE  !(revert)
[L2526]  COND TRUE   DType[this] == YFV
[L2527]  CALL        call __var_5 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2200]              __ret_0_ := msgsender_MSG;
[L2527]  RET         call __var_5 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2528]  COND FALSE  !(revert)
[L2539]  CALL        call __var_4 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s211][__var_5], amount_s211, -2057360831);
[L3129]  COND FALSE  !(!(b_s561 <= a_s561))
[L3133]              c_s561 := (a_s561 - b_s561) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3134]              __ret_0_ := c_s561;
[L2539]  RET         call __var_4 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s211][__var_5], amount_s211, -2057360831);
[L2540]  COND FALSE  !(revert)
[L2543]  COND TRUE   DType[this] == YFV
[L2544]  CALL        call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s211, __var_3, __var_4);
[L2954]              __var_22 := null;
[L2955]  COND FALSE  !(!(owner_s453 != null))
[L2959]              __var_23 := null;
[L2960]  COND FALSE  !(!(spender_s453 != null))
[L2964]              sum__allowances1[owner_s453] := sum__allowances1[owner_s453] - _allowances_ERC20[this][owner_s453][spender_s453];
[L2965]              _allowances_ERC20[this][owner_s453][spender_s453] := amount_s453;
[L2966]              sum__allowances1[owner_s453] := sum__allowances1[owner_s453] + _allowances_ERC20[this][owner_s453][spender_s453];
[L2967]              assert { :EventEmitted "Approval_ERC20" } true;
[L2544]  RET         call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s211, __var_3, __var_4);
[L2545]  COND FALSE  !(revert)
[L2556]              __ret_0_ := true;
[L599]   RET         call __ret_0_ := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s211, recipient_s211, amount_s211);
[L600]               assume !revert && gas >= 0;
[L4895]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, sender_s211, recipient_s211, amount_s211);
[L4991]  RET         call CorralChoice_YFV(this);
[L4991]  CALL        call CorralChoice_YFV(this);
[L4804]              havoc msgsender_MSG;
[L4805]              havoc msgvalue_MSG;
[L4806]              havoc choice;
[L4807]              havoc __ret_0_totalSupply;
[L4808]              havoc account_s121;
[L4809]              havoc __ret_0_balanceOf;
[L4810]              havoc recipient_s140;
[L4811]              havoc amount_s140;
[L4812]              havoc __ret_0_transfer;
[L4813]              havoc owner_s156;
[L4814]              havoc spender_s156;
[L4815]              havoc __ret_0_allowance;
[L4816]              havoc spender_s175;
[L4817]              havoc amount_s175;
[L4818]              havoc __ret_0_approve;
[L4819]              havoc sender_s211;
[L4820]              havoc recipient_s211;
[L4821]              havoc amount_s211;
[L4822]              havoc __ret_0_transferFrom;
[L4823]              havoc spender_s238;
[L4824]              havoc addedValue_s238;
[L4825]              havoc __ret_0_increaseAllowance;
[L4826]              havoc spender_s266;
[L4827]              havoc subtractedValue_s266;
[L4828]              havoc __ret_0_decreaseAllowance;
[L4829]              havoc name_s484;
[L4830]              havoc symbol_s484;
[L4831]              havoc decimals_s484;
[L4832]              havoc __ret_0_name;
[L4833]              havoc __ret_0_symbol;
[L4834]              havoc __ret_0_decimals;
[L4835]              havoc __ret_0_governance;
[L4836]              havoc arg744_s0;
[L4837]              havoc __ret_0_minters;
[L4838]              havoc account_s671;
[L4839]              havoc amount_s671;
[L4840]              havoc amount_s683;
[L4841]              havoc _governance_s701;
[L4842]              havoc _minter_s721;
[L4843]              havoc _minter_s741;
[L4844]              havoc tmpNow;
[L4845]              havoc gas;
[L4846]              assume gas > 4000000 && gas <= 8000000;
[L4847]              tmpNow := now;
[L4848]              havoc now;
[L4849]              assume now > tmpNow;
[L4850]              assume msgsender_MSG != null;
[L4851]              assume DType[msgsender_MSG] != IERC20;
[L4852]              assume DType[msgsender_MSG] != Context;
[L4853]              assume DType[msgsender_MSG] != ERC20;
[L4854]              assume DType[msgsender_MSG] != ERC20Detailed;
[L4855]              assume DType[msgsender_MSG] != SafeMath;
[L4856]              assume DType[msgsender_MSG] != YFV;
[L4857]              Alloc[msgsender_MSG] := true;
[L4858]  COND FALSE  !(choice == 18)
[L4864]  COND FALSE  !(choice == 17)
[L4870]  COND FALSE  !(choice == 16)
[L4877]  COND FALSE  !(choice == 15)
[L4883]  COND FALSE  !(choice == 14)
[L4890]  COND TRUE   choice == 13
[L4891]              gas := gas - 21000;
[L4892]  COND TRUE   gas >= 0
[L4893]              assume amount_s211 >= 0 && amount_s211 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4894]              assume msgvalue_MSG == 0;
[L4895]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, sender_s211, recipient_s211, amount_s211);
[L572]               havoc __exception;
[L573]               revert := false;
[L574]   COND FALSE  !(__exception)
[L599]   CALL        call __ret_0_ := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s211, recipient_s211, amount_s211);
[L2500]  COND TRUE   DType[this] == YFV
[L2501]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s211, recipient_s211, amount_s211);
[L2806]              __var_12 := null;
[L2807]  COND FALSE  !(!(sender_s323 != null))
[L2811]              __var_13 := null;
[L2812]  COND FALSE  !(!(recipient_s323 != null))
[L2816]  CALL        call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s323], amount_s323, -806116454);
[L3129]  COND FALSE  !(!(b_s561 <= a_s561))
[L3133]              c_s561 := (a_s561 - b_s561) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3134]              __ret_0_ := c_s561;
[L2816]  RET         call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s323], amount_s323, -806116454);
[L2817]  COND FALSE  !(revert)
[L2820]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s323];
[L2821]              _balances_ERC20[this][sender_s323] := __var_14;
[L2822]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s323];
[L2823]  CALL        call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s323], amount_s323);
[L3105]              c_s534 := (a_s534 + b_s534) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3106]  COND FALSE  !(!(c_s534 >= a_s534))
[L3110]              __ret_0_ := c_s534;
[L2823]  RET         call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s323], amount_s323);
[L2824]  COND FALSE  !(revert)
[L2827]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s323];
[L2828]              _balances_ERC20[this][recipient_s323] := __var_15;
[L2829]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s323];
[L2830]              assert { :EventEmitted "Transfer_ERC20" } true;
[L2501]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s211, recipient_s211, amount_s211);
[L2502]  COND FALSE  !(revert)
[L2513]  COND TRUE   DType[this] == YFV
[L2514]  CALL        call __var_3 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2200]              __ret_0_ := msgsender_MSG;
[L2514]  RET         call __var_3 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2515]  COND FALSE  !(revert)
[L2526]  COND TRUE   DType[this] == YFV
[L2527]  CALL        call __var_5 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2200]              __ret_0_ := msgsender_MSG;
[L2527]  RET         call __var_5 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2528]  COND FALSE  !(revert)
[L2539]  CALL        call __var_4 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s211][__var_5], amount_s211, -2057360831);
[L3129]  COND FALSE  !(!(b_s561 <= a_s561))
[L3133]              c_s561 := (a_s561 - b_s561) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3134]              __ret_0_ := c_s561;
[L2539]  RET         call __var_4 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s211][__var_5], amount_s211, -2057360831);
[L2540]  COND FALSE  !(revert)
[L2543]  COND TRUE   DType[this] == YFV
[L2544]  CALL        call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s211, __var_3, __var_4);
[L2954]              __var_22 := null;
[L2955]  COND FALSE  !(!(owner_s453 != null))
[L2959]              __var_23 := null;
[L2960]  COND FALSE  !(!(spender_s453 != null))
[L2964]              sum__allowances1[owner_s453] := sum__allowances1[owner_s453] - _allowances_ERC20[this][owner_s453][spender_s453];
[L2965]              _allowances_ERC20[this][owner_s453][spender_s453] := amount_s453;
[L2966]              sum__allowances1[owner_s453] := sum__allowances1[owner_s453] + _allowances_ERC20[this][owner_s453][spender_s453];
[L2967]              assert { :EventEmitted "Approval_ERC20" } true;
[L2544]  RET         call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s211, __var_3, __var_4);
[L2545]  COND FALSE  !(revert)
[L2556]              __ret_0_ := true;
[L599]   RET         call __ret_0_ := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s211, recipient_s211, amount_s211);
[L600]               assume !revert && gas >= 0;
[L4895]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, sender_s211, recipient_s211, amount_s211);
[L4991]  RET         call CorralChoice_YFV(this);
[L4991]  CALL        call CorralChoice_YFV(this);
[L4804]              havoc msgsender_MSG;
[L4805]              havoc msgvalue_MSG;
[L4806]              havoc choice;
[L4807]              havoc __ret_0_totalSupply;
[L4808]              havoc account_s121;
[L4809]              havoc __ret_0_balanceOf;
[L4810]              havoc recipient_s140;
[L4811]              havoc amount_s140;
[L4812]              havoc __ret_0_transfer;
[L4813]              havoc owner_s156;
[L4814]              havoc spender_s156;
[L4815]              havoc __ret_0_allowance;
[L4816]              havoc spender_s175;
[L4817]              havoc amount_s175;
[L4818]              havoc __ret_0_approve;
[L4819]              havoc sender_s211;
[L4820]              havoc recipient_s211;
[L4821]              havoc amount_s211;
[L4822]              havoc __ret_0_transferFrom;
[L4823]              havoc spender_s238;
[L4824]              havoc addedValue_s238;
[L4825]              havoc __ret_0_increaseAllowance;
[L4826]              havoc spender_s266;
[L4827]              havoc subtractedValue_s266;
[L4828]              havoc __ret_0_decreaseAllowance;
[L4829]              havoc name_s484;
[L4830]              havoc symbol_s484;
[L4831]              havoc decimals_s484;
[L4832]              havoc __ret_0_name;
[L4833]              havoc __ret_0_symbol;
[L4834]              havoc __ret_0_decimals;
[L4835]              havoc __ret_0_governance;
[L4836]              havoc arg744_s0;
[L4837]              havoc __ret_0_minters;
[L4838]              havoc account_s671;
[L4839]              havoc amount_s671;
[L4840]              havoc amount_s683;
[L4841]              havoc _governance_s701;
[L4842]              havoc _minter_s721;
[L4843]              havoc _minter_s741;
[L4844]              havoc tmpNow;
[L4845]              havoc gas;
[L4846]              assume gas > 4000000 && gas <= 8000000;
[L4847]              tmpNow := now;
[L4848]              havoc now;
[L4849]              assume now > tmpNow;
[L4850]              assume msgsender_MSG != null;
[L4851]              assume DType[msgsender_MSG] != IERC20;
[L4852]              assume DType[msgsender_MSG] != Context;
[L4853]              assume DType[msgsender_MSG] != ERC20;
[L4854]              assume DType[msgsender_MSG] != ERC20Detailed;
[L4855]              assume DType[msgsender_MSG] != SafeMath;
[L4856]              assume DType[msgsender_MSG] != YFV;
[L4857]              Alloc[msgsender_MSG] := true;
[L4858]  COND FALSE  !(choice == 18)
[L4864]  COND FALSE  !(choice == 17)
[L4870]  COND TRUE   choice == 16
[L4871]              gas := gas - 21000;
[L4872]  COND TRUE   gas >= 0
[L4873]              assume amount_s140 >= 0 && amount_s140 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4874]              assume msgvalue_MSG == 0;
[L4875]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == recipient_s140 && amount_s140 <= _balances_ERC20[this][msgsender_MSG]) && amount_s140 >= 0) && amount_s140 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s140] >= 0) && _balances_ERC20[this][recipient_s140] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC200 := true;
[L2]                 call_transfer_ERC200 := false;
[L2]                 revert := revert_hold;
[L392]               havoc __exception;
[L393]               revert := false;
[L394]   COND FALSE  !(__exception)
[L419]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L2322]  COND TRUE   DType[this] == YFV
[L2323]  CALL        call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2200]              __ret_0_ := msgsender_MSG;
[L2323]  RET         call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2324]  COND FALSE  !(revert)
[L2335]  COND TRUE   DType[this] == YFV
[L2336]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s140, amount_s140);
[L2806]              __var_12 := null;
[L2807]  COND FALSE  !(!(sender_s323 != null))
[L2811]              __var_13 := null;
[L2812]  COND FALSE  !(!(recipient_s323 != null))
[L2816]  CALL        call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s323], amount_s323, -806116454);
[L3129]  COND FALSE  !(!(b_s561 <= a_s561))
[L3133]              c_s561 := (a_s561 - b_s561) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3134]              __ret_0_ := c_s561;
[L2816]  RET         call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s323], amount_s323, -806116454);
[L2817]  COND FALSE  !(revert)
[L2820]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s323];
[L2821]              _balances_ERC20[this][sender_s323] := __var_14;
[L2822]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s323];
[L2823]  CALL        call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s323], amount_s323);
[L3105]              c_s534 := (a_s534 + b_s534) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3106]  COND FALSE  !(!(c_s534 >= a_s534))
[L3110]              __ret_0_ := c_s534;
[L2823]  RET         call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s323], amount_s323);
[L2824]  COND FALSE  !(revert)
[L2827]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s323];
[L2828]              _balances_ERC20[this][recipient_s323] := __var_15;
[L2829]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s323];
[L2830]              assert { :EventEmitted "Transfer_ERC20" } true;
[L2336]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s140, amount_s140);
[L2337]  COND FALSE  !(revert)
[L2348]              __ret_0_ := true;
[L419]   RET         call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L420]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !((((((((__ret_0_ == true && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowances_ERC20[this] == old(_allowances_ERC20[this])) && governance_YFV[this] == old(governance_YFV[this])) && minters_YFV[this] == old(minters_YFV[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]));
[L2]                 revert := revert_hold;
[L4875]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L4991]  RET         call CorralChoice_YFV(this);

Loop:
[L4991]  CALL        call CorralChoice_YFV(this);
[L4804]              havoc msgsender_MSG;
[L4805]              havoc msgvalue_MSG;
[L4806]              havoc choice;
[L4807]              havoc __ret_0_totalSupply;
[L4808]              havoc account_s121;
[L4809]              havoc __ret_0_balanceOf;
[L4810]              havoc recipient_s140;
[L4811]              havoc amount_s140;
[L4812]              havoc __ret_0_transfer;
[L4813]              havoc owner_s156;
[L4814]              havoc spender_s156;
[L4815]              havoc __ret_0_allowance;
[L4816]              havoc spender_s175;
[L4817]              havoc amount_s175;
[L4818]              havoc __ret_0_approve;
[L4819]              havoc sender_s211;
[L4820]              havoc recipient_s211;
[L4821]              havoc amount_s211;
[L4822]              havoc __ret_0_transferFrom;
[L4823]              havoc spender_s238;
[L4824]              havoc addedValue_s238;
[L4825]              havoc __ret_0_increaseAllowance;
[L4826]              havoc spender_s266;
[L4827]              havoc subtractedValue_s266;
[L4828]              havoc __ret_0_decreaseAllowance;
[L4829]              havoc name_s484;
[L4830]              havoc symbol_s484;
[L4831]              havoc decimals_s484;
[L4832]              havoc __ret_0_name;
[L4833]              havoc __ret_0_symbol;
[L4834]              havoc __ret_0_decimals;
[L4835]              havoc __ret_0_governance;
[L4836]              havoc arg744_s0;
[L4837]              havoc __ret_0_minters;
[L4838]              havoc account_s671;
[L4839]              havoc amount_s671;
[L4840]              havoc amount_s683;
[L4841]              havoc _governance_s701;
[L4842]              havoc _minter_s721;
[L4843]              havoc _minter_s741;
[L4844]              havoc tmpNow;
[L4845]              havoc gas;
[L4846]              assume gas > 4000000 && gas <= 8000000;
[L4847]              tmpNow := now;
[L4848]              havoc now;
[L4849]              assume now > tmpNow;
[L4850]              assume msgsender_MSG != null;
[L4851]              assume DType[msgsender_MSG] != IERC20;
[L4852]              assume DType[msgsender_MSG] != Context;
[L4853]              assume DType[msgsender_MSG] != ERC20;
[L4854]              assume DType[msgsender_MSG] != ERC20Detailed;
[L4855]              assume DType[msgsender_MSG] != SafeMath;
[L4856]              assume DType[msgsender_MSG] != YFV;
[L4857]              Alloc[msgsender_MSG] := true;
[L4858]  COND TRUE   choice == 18
[L4859]              gas := gas - 21000;
[L4860]  COND FALSE  !(gas >= 0)
[L4991]  RET         call CorralChoice_YFV(this);

[2020-11-25 09:41:19,962 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 09:41:19,962 INFO  L82        PathProgramCache]: Analyzing trace with hash -1260095767, now seen corresponding path program 2 times
[2020-11-25 09:41:19,962 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 09:41:20,064 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 09:41:24,107 WARN  L188               SmtUtils]: Spent 443.00 ms on a formula simplification. DAG size of input: 302 DAG size of output: 42
[2020-11-25 09:41:31,126 WARN  L188               SmtUtils]: Spent 315.00 ms on a formula simplification. DAG size of input: 302 DAG size of output: 39
[2020-11-25 09:41:32,688 WARN  L188               SmtUtils]: Spent 239.00 ms on a formula simplification. DAG size of input: 299 DAG size of output: 36
[2020-11-25 09:41:33,440 WARN  L188               SmtUtils]: Spent 112.00 ms on a formula simplification. DAG size of input: 86 DAG size of output: 64
[2020-11-25 09:41:33,632 WARN  L188               SmtUtils]: Spent 109.00 ms on a formula simplification. DAG size of input: 88 DAG size of output: 66
[2020-11-25 09:41:35,323 INFO  L134       CoverageAnalysis]: Checked inductivity of 932 backedges. 49 proven. 128 refuted. 0 times theorem prover too weak. 755 trivial. 0 not checked.
[2020-11-25 09:41:35,323 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 09:41:35,323 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [72] total 72
[2020-11-25 09:41:35,324 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 09:41:35,324 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 73 interpolants.
[2020-11-25 09:41:35,325 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=359, Invalid=4897, Unknown=0, NotChecked=0, Total=5256
[2020-11-25 09:41:35,325 INFO  L87              Difference]: Start difference. First operand 3810 states and 4942 transitions. cyclomatic complexity: 1204 Second operand 73 states.
[2020-11-25 09:41:55,647 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 09:41:55,647 INFO  L93              Difference]: Finished difference Result 3921 states and 5303 transitions.
[2020-11-25 09:41:55,647 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 40 states. 
[2020-11-25 09:41:55,648 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 3921 states and 5303 transitions.
[2020-11-25 09:41:55,658 INFO  L131   ngComponentsAnalysis]: Automaton has 7 accepting balls. 14
[2020-11-25 09:41:55,670 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 3921 states to 3921 states and 5303 transitions.
[2020-11-25 09:41:55,670 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1005
[2020-11-25 09:41:55,671 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1005
[2020-11-25 09:41:55,671 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 3921 states and 5303 transitions.
[2020-11-25 09:41:55,675 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 09:41:55,675 INFO  L728         BuchiCegarLoop]: Abstraction has 3921 states and 5303 transitions.
[2020-11-25 09:41:55,677 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 3921 states and 5303 transitions.
[2020-11-25 09:41:55,697 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 3921 to 3770.
[2020-11-25 09:41:55,697 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 3770 states.
[2020-11-25 09:41:55,703 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 3770 states to 3770 states and 4758 transitions.
[2020-11-25 09:41:55,703 INFO  L751         BuchiCegarLoop]: Abstraction has 3770 states and 4758 transitions.
[2020-11-25 09:41:55,703 INFO  L631         BuchiCegarLoop]: Abstraction has 3770 states and 4758 transitions.
[2020-11-25 09:41:55,703 INFO  L445         BuchiCegarLoop]: ======== Iteration 30============
[2020-11-25 09:41:55,703 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 3770 states and 4758 transitions.
[2020-11-25 09:41:55,707 INFO  L131   ngComponentsAnalysis]: Automaton has 7 accepting balls. 14
[2020-11-25 09:41:55,707 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 09:41:55,707 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 09:41:55,708 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 09:41:55,708 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_ERC200 := false;
[L2]                 call_transfer_ERC200 := false;
[L2]     CALL        call main();
[L4981]              assume null == 0;
[L4982]  CALL        call this := FreshRefGenerator__success();
[L2122]              havoc newRef;
[L2123]              assume Alloc[newRef] == false;
[L2124]              Alloc[newRef] := true;
[L2125]              assume newRef != null;
[L4982]  RET         call this := FreshRefGenerator__success();
[L4983]              assume now >= 0;
[L4984]              assume DType[this] == YFV;
[L4985]              assume msgvalue_MSG == 0;
[L4986]              gas := gas - 53000;
[L4987]  CALL        call YFV_YFV(this, msgsender_MSG, msgvalue_MSG);
[L1098]              havoc __exception;
[L1099]              revert := false;
[L1100]  COND FALSE  !(__exception)
[L1125]  CALL        call YFV_YFV__success(this, msgsender_MSG, msgvalue_MSG);
[L3242]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2186]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2171]              assume msgsender_MSG != null;
[L2172]              Balance[this] := 0;
[L2186]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2187]  COND FALSE  !(revert)
[L3242]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3243]  COND FALSE  !(revert)
[L3246]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2154]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2139]              assume msgsender_MSG != null;
[L2140]              Balance[this] := 0;
[L2154]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2155]  COND FALSE  !(revert)
[L3246]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3247]  COND FALSE  !(revert)
[L3250]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2248]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2186]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2171]              assume msgsender_MSG != null;
[L2172]              Balance[this] := 0;
[L2186]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2187]  COND FALSE  !(revert)
[L2248]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2249]  COND FALSE  !(revert)
[L2252]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2154]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2139]              assume msgsender_MSG != null;
[L2140]              Balance[this] := 0;
[L2154]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2155]  COND FALSE  !(revert)
[L2252]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2253]  COND FALSE  !(revert)
[L2256]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2220]              assume msgsender_MSG != null;
[L2221]              Balance[this] := 0;
[L2222]              _balances_ERC20[this] := zeroRefintArr();
[L2223]              sum__balances0[this] := 0;
[L2224]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2225]              sum__allowances1[this] := 0;
[L2226]              _totalSupply_ERC20[this] := 0;
[L2256]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2257]  COND FALSE  !(revert)
[L3250]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3251]  COND FALSE  !(revert)
[L3254]  CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -868984158, 934069305, 18);
[L3012]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2154]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2139]              assume msgsender_MSG != null;
[L2140]              Balance[this] := 0;
[L2154]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2155]  COND FALSE  !(revert)
[L3012]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3013]  COND FALSE  !(revert)
[L3016]  CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s484, symbol_s484, decimals_s484);
[L2987]              assume msgsender_MSG != null;
[L2988]              Balance[this] := 0;
[L2989]              _name_ERC20Detailed[this] := 1252836592;
[L2990]              _symbol_ERC20Detailed[this] := 1252836592;
[L2991]              _decimals_ERC20Detailed[this] := 0;
[L2993]              _name_ERC20Detailed[this] := name_s484;
[L2994]              _symbol_ERC20Detailed[this] := symbol_s484;
[L2995]              _decimals_ERC20Detailed[this] := decimals_s484;
[L3016]  RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s484, symbol_s484, decimals_s484);
[L3017]  COND FALSE  !(revert)
[L3254]  RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -868984158, 934069305, 18);
[L3255]  COND FALSE  !(revert)
[L3258]  CALL        call YFV_YFV_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3208]              assume msgsender_MSG != null;
[L3209]              Balance[this] := 0;
[L3210]              governance_YFV[this] := null;
[L3211]              minters_YFV[this] := zeroRefboolArr();
[L3213]              governance_YFV[this] := msgsender_MSG;
[L3258]  RET         call YFV_YFV_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3259]  COND FALSE  !(revert)
[L1125]  RET         call YFV_YFV__success(this, msgsender_MSG, msgvalue_MSG);
[L1126]              assume !revert && gas >= 0;
[L4987]  RET         call YFV_YFV(this, msgsender_MSG, msgvalue_MSG);
[L4988]              assume !revert && gas >= 0;
[L4991]  CALL        call CorralChoice_YFV(this);
[L4804]              havoc msgsender_MSG;
[L4805]              havoc msgvalue_MSG;
[L4806]              havoc choice;
[L4807]              havoc __ret_0_totalSupply;
[L4808]              havoc account_s121;
[L4809]              havoc __ret_0_balanceOf;
[L4810]              havoc recipient_s140;
[L4811]              havoc amount_s140;
[L4812]              havoc __ret_0_transfer;
[L4813]              havoc owner_s156;
[L4814]              havoc spender_s156;
[L4815]              havoc __ret_0_allowance;
[L4816]              havoc spender_s175;
[L4817]              havoc amount_s175;
[L4818]              havoc __ret_0_approve;
[L4819]              havoc sender_s211;
[L4820]              havoc recipient_s211;
[L4821]              havoc amount_s211;
[L4822]              havoc __ret_0_transferFrom;
[L4823]              havoc spender_s238;
[L4824]              havoc addedValue_s238;
[L4825]              havoc __ret_0_increaseAllowance;
[L4826]              havoc spender_s266;
[L4827]              havoc subtractedValue_s266;
[L4828]              havoc __ret_0_decreaseAllowance;
[L4829]              havoc name_s484;
[L4830]              havoc symbol_s484;
[L4831]              havoc decimals_s484;
[L4832]              havoc __ret_0_name;
[L4833]              havoc __ret_0_symbol;
[L4834]              havoc __ret_0_decimals;
[L4835]              havoc __ret_0_governance;
[L4836]              havoc arg744_s0;
[L4837]              havoc __ret_0_minters;
[L4838]              havoc account_s671;
[L4839]              havoc amount_s671;
[L4840]              havoc amount_s683;
[L4841]              havoc _governance_s701;
[L4842]              havoc _minter_s721;
[L4843]              havoc _minter_s741;
[L4844]              havoc tmpNow;
[L4845]              havoc gas;
[L4846]              assume gas > 4000000 && gas <= 8000000;
[L4847]              tmpNow := now;
[L4848]              havoc now;
[L4849]              assume now > tmpNow;
[L4850]              assume msgsender_MSG != null;
[L4851]              assume DType[msgsender_MSG] != IERC20;
[L4852]              assume DType[msgsender_MSG] != Context;
[L4853]              assume DType[msgsender_MSG] != ERC20;
[L4854]              assume DType[msgsender_MSG] != ERC20Detailed;
[L4855]              assume DType[msgsender_MSG] != SafeMath;
[L4856]              assume DType[msgsender_MSG] != YFV;
[L4857]              Alloc[msgsender_MSG] := true;
[L4858]  COND FALSE  !(choice == 18)
[L4864]  COND FALSE  !(choice == 17)
[L4870]  COND TRUE   choice == 16
[L4871]              gas := gas - 21000;
[L4872]  COND TRUE   gas >= 0
[L4873]              assume amount_s140 >= 0 && amount_s140 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4874]              assume msgvalue_MSG == 0;
[L4875]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((msgsender_MSG == recipient_s140 && amount_s140 <= _balances_ERC20[this][msgsender_MSG]) && amount_s140 >= 0) && amount_s140 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s140] >= 0) && _balances_ERC20[this][recipient_s140] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2]                 revert := revert_hold;
[L392]               havoc __exception;
[L393]               revert := false;
[L394]   COND FALSE  !(__exception)
[L419]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L2322]  COND TRUE   DType[this] == YFV
[L2323]  CALL        call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2200]              __ret_0_ := msgsender_MSG;
[L2323]  RET         call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2324]  COND FALSE  !(revert)
[L2335]  COND TRUE   DType[this] == YFV
[L2336]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s140, amount_s140);
[L2806]              __var_12 := null;
[L2807]  COND FALSE  !(!(sender_s323 != null))
[L2811]              __var_13 := null;
[L2812]  COND FALSE  !(!(recipient_s323 != null))
[L2816]  CALL        call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s323], amount_s323, -806116454);
[L3129]  COND FALSE  !(!(b_s561 <= a_s561))
[L3133]              c_s561 := (a_s561 - b_s561) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3134]              __ret_0_ := c_s561;
[L2816]  RET         call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s323], amount_s323, -806116454);
[L2817]  COND FALSE  !(revert)
[L2820]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s323];
[L2821]              _balances_ERC20[this][sender_s323] := __var_14;
[L2822]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s323];
[L2823]  CALL        call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s323], amount_s323);
[L3105]              c_s534 := (a_s534 + b_s534) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3106]  COND FALSE  !(!(c_s534 >= a_s534))
[L3110]              __ret_0_ := c_s534;
[L2823]  RET         call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s323], amount_s323);
[L2824]  COND FALSE  !(revert)
[L2827]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s323];
[L2828]              _balances_ERC20[this][recipient_s323] := __var_15;
[L2829]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s323];
[L2830]              assert { :EventEmitted "Transfer_ERC20" } true;
[L2336]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s140, amount_s140);
[L2337]  COND FALSE  !(revert)
[L2348]              __ret_0_ := true;
[L419]   RET         call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L420]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume (((((((__ret_0_ == true && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowances_ERC20[this] == old(_allowances_ERC20[this])) && governance_YFV[this] == old(governance_YFV[this])) && minters_YFV[this] == old(minters_YFV[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]);
[L2]                 success_transfer_ERC200 := true;
[L2]                 success_transfer_ERC200 := false;
[L2]                 revert := revert_hold;
[L4875]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L4991]  RET         call CorralChoice_YFV(this);
[L4991]  CALL        call CorralChoice_YFV(this);
[L4804]              havoc msgsender_MSG;
[L4805]              havoc msgvalue_MSG;
[L4806]              havoc choice;
[L4807]              havoc __ret_0_totalSupply;
[L4808]              havoc account_s121;
[L4809]              havoc __ret_0_balanceOf;
[L4810]              havoc recipient_s140;
[L4811]              havoc amount_s140;
[L4812]              havoc __ret_0_transfer;
[L4813]              havoc owner_s156;
[L4814]              havoc spender_s156;
[L4815]              havoc __ret_0_allowance;
[L4816]              havoc spender_s175;
[L4817]              havoc amount_s175;
[L4818]              havoc __ret_0_approve;
[L4819]              havoc sender_s211;
[L4820]              havoc recipient_s211;
[L4821]              havoc amount_s211;
[L4822]              havoc __ret_0_transferFrom;
[L4823]              havoc spender_s238;
[L4824]              havoc addedValue_s238;
[L4825]              havoc __ret_0_increaseAllowance;
[L4826]              havoc spender_s266;
[L4827]              havoc subtractedValue_s266;
[L4828]              havoc __ret_0_decreaseAllowance;
[L4829]              havoc name_s484;
[L4830]              havoc symbol_s484;
[L4831]              havoc decimals_s484;
[L4832]              havoc __ret_0_name;
[L4833]              havoc __ret_0_symbol;
[L4834]              havoc __ret_0_decimals;
[L4835]              havoc __ret_0_governance;
[L4836]              havoc arg744_s0;
[L4837]              havoc __ret_0_minters;
[L4838]              havoc account_s671;
[L4839]              havoc amount_s671;
[L4840]              havoc amount_s683;
[L4841]              havoc _governance_s701;
[L4842]              havoc _minter_s721;
[L4843]              havoc _minter_s741;
[L4844]              havoc tmpNow;
[L4845]              havoc gas;
[L4846]              assume gas > 4000000 && gas <= 8000000;
[L4847]              tmpNow := now;
[L4848]              havoc now;
[L4849]              assume now > tmpNow;
[L4850]              assume msgsender_MSG != null;
[L4851]              assume DType[msgsender_MSG] != IERC20;
[L4852]              assume DType[msgsender_MSG] != Context;
[L4853]              assume DType[msgsender_MSG] != ERC20;
[L4854]              assume DType[msgsender_MSG] != ERC20Detailed;
[L4855]              assume DType[msgsender_MSG] != SafeMath;
[L4856]              assume DType[msgsender_MSG] != YFV;
[L4857]              Alloc[msgsender_MSG] := true;
[L4858]  COND FALSE  !(choice == 18)
[L4864]  COND FALSE  !(choice == 17)
[L4870]  COND FALSE  !(choice == 16)
[L4877]  COND FALSE  !(choice == 15)
[L4883]  COND FALSE  !(choice == 14)
[L4890]  COND TRUE   choice == 13
[L4891]              gas := gas - 21000;
[L4892]  COND TRUE   gas >= 0
[L4893]              assume amount_s211 >= 0 && amount_s211 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4894]              assume msgvalue_MSG == 0;
[L4895]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, sender_s211, recipient_s211, amount_s211);
[L572]               havoc __exception;
[L573]               revert := false;
[L574]   COND FALSE  !(__exception)
[L599]   CALL        call __ret_0_ := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s211, recipient_s211, amount_s211);
[L2500]  COND TRUE   DType[this] == YFV
[L2501]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s211, recipient_s211, amount_s211);
[L2806]              __var_12 := null;
[L2807]  COND FALSE  !(!(sender_s323 != null))
[L2811]              __var_13 := null;
[L2812]  COND FALSE  !(!(recipient_s323 != null))
[L2816]  CALL        call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s323], amount_s323, -806116454);
[L3129]  COND FALSE  !(!(b_s561 <= a_s561))
[L3133]              c_s561 := (a_s561 - b_s561) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3134]              __ret_0_ := c_s561;
[L2816]  RET         call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s323], amount_s323, -806116454);
[L2817]  COND FALSE  !(revert)
[L2820]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s323];
[L2821]              _balances_ERC20[this][sender_s323] := __var_14;
[L2822]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s323];
[L2823]  CALL        call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s323], amount_s323);
[L3105]              c_s534 := (a_s534 + b_s534) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3106]  COND FALSE  !(!(c_s534 >= a_s534))
[L3110]              __ret_0_ := c_s534;
[L2823]  RET         call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s323], amount_s323);
[L2824]  COND FALSE  !(revert)
[L2827]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s323];
[L2828]              _balances_ERC20[this][recipient_s323] := __var_15;
[L2829]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s323];
[L2830]              assert { :EventEmitted "Transfer_ERC20" } true;
[L2501]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s211, recipient_s211, amount_s211);
[L2502]  COND FALSE  !(revert)
[L2513]  COND TRUE   DType[this] == YFV
[L2514]  CALL        call __var_3 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2200]              __ret_0_ := msgsender_MSG;
[L2514]  RET         call __var_3 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2515]  COND FALSE  !(revert)
[L2526]  COND TRUE   DType[this] == YFV
[L2527]  CALL        call __var_5 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2200]              __ret_0_ := msgsender_MSG;
[L2527]  RET         call __var_5 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2528]  COND FALSE  !(revert)
[L2539]  CALL        call __var_4 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s211][__var_5], amount_s211, -2057360831);
[L3129]  COND FALSE  !(!(b_s561 <= a_s561))
[L3133]              c_s561 := (a_s561 - b_s561) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3134]              __ret_0_ := c_s561;
[L2539]  RET         call __var_4 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s211][__var_5], amount_s211, -2057360831);
[L2540]  COND FALSE  !(revert)
[L2543]  COND TRUE   DType[this] == YFV
[L2544]  CALL        call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s211, __var_3, __var_4);
[L2954]              __var_22 := null;
[L2955]  COND FALSE  !(!(owner_s453 != null))
[L2959]              __var_23 := null;
[L2960]  COND FALSE  !(!(spender_s453 != null))
[L2964]              sum__allowances1[owner_s453] := sum__allowances1[owner_s453] - _allowances_ERC20[this][owner_s453][spender_s453];
[L2965]              _allowances_ERC20[this][owner_s453][spender_s453] := amount_s453;
[L2966]              sum__allowances1[owner_s453] := sum__allowances1[owner_s453] + _allowances_ERC20[this][owner_s453][spender_s453];
[L2967]              assert { :EventEmitted "Approval_ERC20" } true;
[L2544]  RET         call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s211, __var_3, __var_4);
[L2545]  COND FALSE  !(revert)
[L2556]              __ret_0_ := true;
[L599]   RET         call __ret_0_ := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s211, recipient_s211, amount_s211);
[L600]               assume !revert && gas >= 0;
[L4895]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, sender_s211, recipient_s211, amount_s211);
[L4991]  RET         call CorralChoice_YFV(this);
[L4991]  CALL        call CorralChoice_YFV(this);
[L4804]              havoc msgsender_MSG;
[L4805]              havoc msgvalue_MSG;
[L4806]              havoc choice;
[L4807]              havoc __ret_0_totalSupply;
[L4808]              havoc account_s121;
[L4809]              havoc __ret_0_balanceOf;
[L4810]              havoc recipient_s140;
[L4811]              havoc amount_s140;
[L4812]              havoc __ret_0_transfer;
[L4813]              havoc owner_s156;
[L4814]              havoc spender_s156;
[L4815]              havoc __ret_0_allowance;
[L4816]              havoc spender_s175;
[L4817]              havoc amount_s175;
[L4818]              havoc __ret_0_approve;
[L4819]              havoc sender_s211;
[L4820]              havoc recipient_s211;
[L4821]              havoc amount_s211;
[L4822]              havoc __ret_0_transferFrom;
[L4823]              havoc spender_s238;
[L4824]              havoc addedValue_s238;
[L4825]              havoc __ret_0_increaseAllowance;
[L4826]              havoc spender_s266;
[L4827]              havoc subtractedValue_s266;
[L4828]              havoc __ret_0_decreaseAllowance;
[L4829]              havoc name_s484;
[L4830]              havoc symbol_s484;
[L4831]              havoc decimals_s484;
[L4832]              havoc __ret_0_name;
[L4833]              havoc __ret_0_symbol;
[L4834]              havoc __ret_0_decimals;
[L4835]              havoc __ret_0_governance;
[L4836]              havoc arg744_s0;
[L4837]              havoc __ret_0_minters;
[L4838]              havoc account_s671;
[L4839]              havoc amount_s671;
[L4840]              havoc amount_s683;
[L4841]              havoc _governance_s701;
[L4842]              havoc _minter_s721;
[L4843]              havoc _minter_s741;
[L4844]              havoc tmpNow;
[L4845]              havoc gas;
[L4846]              assume gas > 4000000 && gas <= 8000000;
[L4847]              tmpNow := now;
[L4848]              havoc now;
[L4849]              assume now > tmpNow;
[L4850]              assume msgsender_MSG != null;
[L4851]              assume DType[msgsender_MSG] != IERC20;
[L4852]              assume DType[msgsender_MSG] != Context;
[L4853]              assume DType[msgsender_MSG] != ERC20;
[L4854]              assume DType[msgsender_MSG] != ERC20Detailed;
[L4855]              assume DType[msgsender_MSG] != SafeMath;
[L4856]              assume DType[msgsender_MSG] != YFV;
[L4857]              Alloc[msgsender_MSG] := true;
[L4858]  COND FALSE  !(choice == 18)
[L4864]  COND FALSE  !(choice == 17)
[L4870]  COND TRUE   choice == 16
[L4871]              gas := gas - 21000;
[L4872]  COND TRUE   gas >= 0
[L4873]              assume amount_s140 >= 0 && amount_s140 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4874]              assume msgvalue_MSG == 0;
[L4875]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((msgsender_MSG == recipient_s140 && amount_s140 <= _balances_ERC20[this][msgsender_MSG]) && amount_s140 >= 0) && amount_s140 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s140] >= 0) && _balances_ERC20[this][recipient_s140] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2]                 revert := revert_hold;
[L392]               havoc __exception;
[L393]               revert := false;
[L394]   COND FALSE  !(__exception)
[L419]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L2322]  COND TRUE   DType[this] == YFV
[L2323]  CALL        call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2200]              __ret_0_ := msgsender_MSG;
[L2323]  RET         call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2324]  COND FALSE  !(revert)
[L2335]  COND TRUE   DType[this] == YFV
[L2336]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s140, amount_s140);
[L2806]              __var_12 := null;
[L2807]  COND FALSE  !(!(sender_s323 != null))
[L2811]              __var_13 := null;
[L2812]  COND FALSE  !(!(recipient_s323 != null))
[L2816]  CALL        call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s323], amount_s323, -806116454);
[L3129]  COND FALSE  !(!(b_s561 <= a_s561))
[L3133]              c_s561 := (a_s561 - b_s561) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3134]              __ret_0_ := c_s561;
[L2816]  RET         call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s323], amount_s323, -806116454);
[L2817]  COND FALSE  !(revert)
[L2820]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s323];
[L2821]              _balances_ERC20[this][sender_s323] := __var_14;
[L2822]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s323];
[L2823]  CALL        call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s323], amount_s323);
[L3105]              c_s534 := (a_s534 + b_s534) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3106]  COND FALSE  !(!(c_s534 >= a_s534))
[L3110]              __ret_0_ := c_s534;
[L2823]  RET         call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s323], amount_s323);
[L2824]  COND FALSE  !(revert)
[L2827]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s323];
[L2828]              _balances_ERC20[this][recipient_s323] := __var_15;
[L2829]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s323];
[L2830]              assert { :EventEmitted "Transfer_ERC20" } true;
[L2336]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s140, amount_s140);
[L2337]  COND FALSE  !(revert)
[L2348]              __ret_0_ := true;
[L419]   RET         call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L420]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !((((((((__ret_0_ == true && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowances_ERC20[this] == old(_allowances_ERC20[this])) && governance_YFV[this] == old(governance_YFV[this])) && minters_YFV[this] == old(minters_YFV[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]));
[L2]                 revert := revert_hold;
[L4875]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L4991]  RET         call CorralChoice_YFV(this);
[L4991]  CALL        call CorralChoice_YFV(this);
[L4804]              havoc msgsender_MSG;
[L4805]              havoc msgvalue_MSG;
[L4806]              havoc choice;
[L4807]              havoc __ret_0_totalSupply;
[L4808]              havoc account_s121;
[L4809]              havoc __ret_0_balanceOf;
[L4810]              havoc recipient_s140;
[L4811]              havoc amount_s140;
[L4812]              havoc __ret_0_transfer;
[L4813]              havoc owner_s156;
[L4814]              havoc spender_s156;
[L4815]              havoc __ret_0_allowance;
[L4816]              havoc spender_s175;
[L4817]              havoc amount_s175;
[L4818]              havoc __ret_0_approve;
[L4819]              havoc sender_s211;
[L4820]              havoc recipient_s211;
[L4821]              havoc amount_s211;
[L4822]              havoc __ret_0_transferFrom;
[L4823]              havoc spender_s238;
[L4824]              havoc addedValue_s238;
[L4825]              havoc __ret_0_increaseAllowance;
[L4826]              havoc spender_s266;
[L4827]              havoc subtractedValue_s266;
[L4828]              havoc __ret_0_decreaseAllowance;
[L4829]              havoc name_s484;
[L4830]              havoc symbol_s484;
[L4831]              havoc decimals_s484;
[L4832]              havoc __ret_0_name;
[L4833]              havoc __ret_0_symbol;
[L4834]              havoc __ret_0_decimals;
[L4835]              havoc __ret_0_governance;
[L4836]              havoc arg744_s0;
[L4837]              havoc __ret_0_minters;
[L4838]              havoc account_s671;
[L4839]              havoc amount_s671;
[L4840]              havoc amount_s683;
[L4841]              havoc _governance_s701;
[L4842]              havoc _minter_s721;
[L4843]              havoc _minter_s741;
[L4844]              havoc tmpNow;
[L4845]              havoc gas;
[L4846]              assume gas > 4000000 && gas <= 8000000;
[L4847]              tmpNow := now;
[L4848]              havoc now;
[L4849]              assume now > tmpNow;
[L4850]              assume msgsender_MSG != null;
[L4851]              assume DType[msgsender_MSG] != IERC20;
[L4852]              assume DType[msgsender_MSG] != Context;
[L4853]              assume DType[msgsender_MSG] != ERC20;
[L4854]              assume DType[msgsender_MSG] != ERC20Detailed;
[L4855]              assume DType[msgsender_MSG] != SafeMath;
[L4856]              assume DType[msgsender_MSG] != YFV;
[L4857]              Alloc[msgsender_MSG] := true;
[L4858]  COND FALSE  !(choice == 18)
[L4864]  COND FALSE  !(choice == 17)
[L4870]  COND TRUE   choice == 16
[L4871]              gas := gas - 21000;
[L4872]  COND TRUE   gas >= 0
[L4873]              assume amount_s140 >= 0 && amount_s140 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4874]              assume msgvalue_MSG == 0;
[L4875]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == recipient_s140 && amount_s140 <= _balances_ERC20[this][msgsender_MSG]) && amount_s140 >= 0) && amount_s140 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s140] >= 0) && _balances_ERC20[this][recipient_s140] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC200 := true;
[L2]                 call_transfer_ERC200 := false;
[L2]                 revert := revert_hold;
[L392]               havoc __exception;
[L393]               revert := false;
[L394]   COND FALSE  !(__exception)
[L419]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L2322]  COND TRUE   DType[this] == YFV
[L2323]  CALL        call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2200]              __ret_0_ := msgsender_MSG;
[L2323]  RET         call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2324]  COND FALSE  !(revert)
[L2335]  COND TRUE   DType[this] == YFV
[L2336]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s140, amount_s140);
[L2806]              __var_12 := null;
[L2807]  COND FALSE  !(!(sender_s323 != null))
[L2811]              __var_13 := null;
[L2812]  COND FALSE  !(!(recipient_s323 != null))
[L2816]  CALL        call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s323], amount_s323, -806116454);
[L3129]  COND FALSE  !(!(b_s561 <= a_s561))
[L3133]              c_s561 := (a_s561 - b_s561) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3134]              __ret_0_ := c_s561;
[L2816]  RET         call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s323], amount_s323, -806116454);
[L2817]  COND FALSE  !(revert)
[L2820]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s323];
[L2821]              _balances_ERC20[this][sender_s323] := __var_14;
[L2822]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s323];
[L2823]  CALL        call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s323], amount_s323);
[L3105]              c_s534 := (a_s534 + b_s534) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3106]  COND FALSE  !(!(c_s534 >= a_s534))
[L3110]              __ret_0_ := c_s534;
[L2823]  RET         call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s323], amount_s323);
[L2824]  COND FALSE  !(revert)
[L2827]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s323];
[L2828]              _balances_ERC20[this][recipient_s323] := __var_15;
[L2829]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s323];
[L2830]              assert { :EventEmitted "Transfer_ERC20" } true;
[L2336]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s140, amount_s140);
[L2337]  COND FALSE  !(revert)
[L2348]              __ret_0_ := true;
[L419]   RET         call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L420]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !((((((((__ret_0_ == true && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowances_ERC20[this] == old(_allowances_ERC20[this])) && governance_YFV[this] == old(governance_YFV[this])) && minters_YFV[this] == old(minters_YFV[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]));
[L2]                 revert := revert_hold;
[L4875]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L4991]  RET         call CorralChoice_YFV(this);

Loop:
[L4991]  CALL        call CorralChoice_YFV(this);
[L4804]              havoc msgsender_MSG;
[L4805]              havoc msgvalue_MSG;
[L4806]              havoc choice;
[L4807]              havoc __ret_0_totalSupply;
[L4808]              havoc account_s121;
[L4809]              havoc __ret_0_balanceOf;
[L4810]              havoc recipient_s140;
[L4811]              havoc amount_s140;
[L4812]              havoc __ret_0_transfer;
[L4813]              havoc owner_s156;
[L4814]              havoc spender_s156;
[L4815]              havoc __ret_0_allowance;
[L4816]              havoc spender_s175;
[L4817]              havoc amount_s175;
[L4818]              havoc __ret_0_approve;
[L4819]              havoc sender_s211;
[L4820]              havoc recipient_s211;
[L4821]              havoc amount_s211;
[L4822]              havoc __ret_0_transferFrom;
[L4823]              havoc spender_s238;
[L4824]              havoc addedValue_s238;
[L4825]              havoc __ret_0_increaseAllowance;
[L4826]              havoc spender_s266;
[L4827]              havoc subtractedValue_s266;
[L4828]              havoc __ret_0_decreaseAllowance;
[L4829]              havoc name_s484;
[L4830]              havoc symbol_s484;
[L4831]              havoc decimals_s484;
[L4832]              havoc __ret_0_name;
[L4833]              havoc __ret_0_symbol;
[L4834]              havoc __ret_0_decimals;
[L4835]              havoc __ret_0_governance;
[L4836]              havoc arg744_s0;
[L4837]              havoc __ret_0_minters;
[L4838]              havoc account_s671;
[L4839]              havoc amount_s671;
[L4840]              havoc amount_s683;
[L4841]              havoc _governance_s701;
[L4842]              havoc _minter_s721;
[L4843]              havoc _minter_s741;
[L4844]              havoc tmpNow;
[L4845]              havoc gas;
[L4846]              assume gas > 4000000 && gas <= 8000000;
[L4847]              tmpNow := now;
[L4848]              havoc now;
[L4849]              assume now > tmpNow;
[L4850]              assume msgsender_MSG != null;
[L4851]              assume DType[msgsender_MSG] != IERC20;
[L4852]              assume DType[msgsender_MSG] != Context;
[L4853]              assume DType[msgsender_MSG] != ERC20;
[L4854]              assume DType[msgsender_MSG] != ERC20Detailed;
[L4855]              assume DType[msgsender_MSG] != SafeMath;
[L4856]              assume DType[msgsender_MSG] != YFV;
[L4857]              Alloc[msgsender_MSG] := true;
[L4858]  COND TRUE   choice == 18
[L4859]              gas := gas - 21000;
[L4860]  COND FALSE  !(gas >= 0)
[L4991]  RET         call CorralChoice_YFV(this);

[2020-11-25 09:41:55,711 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 09:41:55,711 INFO  L82        PathProgramCache]: Analyzing trace with hash -1802865890, now seen corresponding path program 1 times
[2020-11-25 09:41:55,712 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 09:41:55,767 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 09:41:56,852 WARN  L188               SmtUtils]: Spent 142.00 ms on a formula simplification. DAG size of input: 186 DAG size of output: 32
[2020-11-25 09:41:57,197 WARN  L188               SmtUtils]: Spent 127.00 ms on a formula simplification. DAG size of input: 184 DAG size of output: 33
[2020-11-25 09:41:59,313 INFO  L134       CoverageAnalysis]: Checked inductivity of 584 backedges. 91 proven. 42 refuted. 0 times theorem prover too weak. 451 trivial. 0 not checked.
[2020-11-25 09:41:59,313 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 09:41:59,313 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [55] total 55
[2020-11-25 09:41:59,314 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 09:41:59,314 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 56 interpolants.
[2020-11-25 09:41:59,314 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=245, Invalid=2835, Unknown=0, NotChecked=0, Total=3080
[2020-11-25 09:41:59,314 INFO  L87              Difference]: Start difference. First operand 3770 states and 4758 transitions. cyclomatic complexity: 1040 Second operand 56 states.
[2020-11-25 09:42:15,016 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 09:42:15,016 INFO  L93              Difference]: Finished difference Result 4066 states and 5307 transitions.
[2020-11-25 09:42:15,016 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 43 states. 
[2020-11-25 09:42:15,017 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 4066 states and 5307 transitions.
[2020-11-25 09:42:15,027 INFO  L131   ngComponentsAnalysis]: Automaton has 9 accepting balls. 18
[2020-11-25 09:42:15,039 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 4066 states to 4066 states and 5307 transitions.
[2020-11-25 09:42:15,039 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1088
[2020-11-25 09:42:15,039 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1088
[2020-11-25 09:42:15,039 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 4066 states and 5307 transitions.
[2020-11-25 09:42:15,043 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 09:42:15,043 INFO  L728         BuchiCegarLoop]: Abstraction has 4066 states and 5307 transitions.
[2020-11-25 09:42:15,045 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 4066 states and 5307 transitions.
[2020-11-25 09:42:15,064 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 4066 to 3782.
[2020-11-25 09:42:15,064 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 3782 states.
[2020-11-25 09:42:15,070 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 3782 states to 3782 states and 4813 transitions.
[2020-11-25 09:42:15,070 INFO  L751         BuchiCegarLoop]: Abstraction has 3782 states and 4813 transitions.
[2020-11-25 09:42:15,070 INFO  L631         BuchiCegarLoop]: Abstraction has 3782 states and 4813 transitions.
[2020-11-25 09:42:15,070 INFO  L445         BuchiCegarLoop]: ======== Iteration 31============
[2020-11-25 09:42:15,071 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 3782 states and 4813 transitions.
[2020-11-25 09:42:15,074 INFO  L131   ngComponentsAnalysis]: Automaton has 7 accepting balls. 14
[2020-11-25 09:42:15,074 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 09:42:15,074 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 09:42:15,075 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 09:42:15,075 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_ERC200 := false;
[L2]                 call_transfer_ERC200 := false;
[L2]     CALL        call main();
[L4981]              assume null == 0;
[L4982]  CALL        call this := FreshRefGenerator__success();
[L2122]              havoc newRef;
[L2123]              assume Alloc[newRef] == false;
[L2124]              Alloc[newRef] := true;
[L2125]              assume newRef != null;
[L4982]  RET         call this := FreshRefGenerator__success();
[L4983]              assume now >= 0;
[L4984]              assume DType[this] == YFV;
[L4985]              assume msgvalue_MSG == 0;
[L4986]              gas := gas - 53000;
[L4987]  CALL        call YFV_YFV(this, msgsender_MSG, msgvalue_MSG);
[L1098]              havoc __exception;
[L1099]              revert := false;
[L1100]  COND FALSE  !(__exception)
[L1125]  CALL        call YFV_YFV__success(this, msgsender_MSG, msgvalue_MSG);
[L3242]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2186]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2171]              assume msgsender_MSG != null;
[L2172]              Balance[this] := 0;
[L2186]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2187]  COND FALSE  !(revert)
[L3242]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3243]  COND FALSE  !(revert)
[L3246]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2154]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2139]              assume msgsender_MSG != null;
[L2140]              Balance[this] := 0;
[L2154]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2155]  COND FALSE  !(revert)
[L3246]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3247]  COND FALSE  !(revert)
[L3250]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2248]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2186]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2171]              assume msgsender_MSG != null;
[L2172]              Balance[this] := 0;
[L2186]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2187]  COND FALSE  !(revert)
[L2248]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2249]  COND FALSE  !(revert)
[L2252]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2154]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2139]              assume msgsender_MSG != null;
[L2140]              Balance[this] := 0;
[L2154]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2155]  COND FALSE  !(revert)
[L2252]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2253]  COND FALSE  !(revert)
[L2256]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2220]              assume msgsender_MSG != null;
[L2221]              Balance[this] := 0;
[L2222]              _balances_ERC20[this] := zeroRefintArr();
[L2223]              sum__balances0[this] := 0;
[L2224]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2225]              sum__allowances1[this] := 0;
[L2226]              _totalSupply_ERC20[this] := 0;
[L2256]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2257]  COND FALSE  !(revert)
[L3250]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3251]  COND FALSE  !(revert)
[L3254]  CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -868984158, 934069305, 18);
[L3012]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2154]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2139]              assume msgsender_MSG != null;
[L2140]              Balance[this] := 0;
[L2154]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2155]  COND FALSE  !(revert)
[L3012]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3013]  COND FALSE  !(revert)
[L3016]  CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s484, symbol_s484, decimals_s484);
[L2987]              assume msgsender_MSG != null;
[L2988]              Balance[this] := 0;
[L2989]              _name_ERC20Detailed[this] := 1252836592;
[L2990]              _symbol_ERC20Detailed[this] := 1252836592;
[L2991]              _decimals_ERC20Detailed[this] := 0;
[L2993]              _name_ERC20Detailed[this] := name_s484;
[L2994]              _symbol_ERC20Detailed[this] := symbol_s484;
[L2995]              _decimals_ERC20Detailed[this] := decimals_s484;
[L3016]  RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s484, symbol_s484, decimals_s484);
[L3017]  COND FALSE  !(revert)
[L3254]  RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -868984158, 934069305, 18);
[L3255]  COND FALSE  !(revert)
[L3258]  CALL        call YFV_YFV_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3208]              assume msgsender_MSG != null;
[L3209]              Balance[this] := 0;
[L3210]              governance_YFV[this] := null;
[L3211]              minters_YFV[this] := zeroRefboolArr();
[L3213]              governance_YFV[this] := msgsender_MSG;
[L3258]  RET         call YFV_YFV_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3259]  COND FALSE  !(revert)
[L1125]  RET         call YFV_YFV__success(this, msgsender_MSG, msgvalue_MSG);
[L1126]              assume !revert && gas >= 0;
[L4987]  RET         call YFV_YFV(this, msgsender_MSG, msgvalue_MSG);
[L4988]              assume !revert && gas >= 0;
[L4991]  CALL        call CorralChoice_YFV(this);
[L4804]              havoc msgsender_MSG;
[L4805]              havoc msgvalue_MSG;
[L4806]              havoc choice;
[L4807]              havoc __ret_0_totalSupply;
[L4808]              havoc account_s121;
[L4809]              havoc __ret_0_balanceOf;
[L4810]              havoc recipient_s140;
[L4811]              havoc amount_s140;
[L4812]              havoc __ret_0_transfer;
[L4813]              havoc owner_s156;
[L4814]              havoc spender_s156;
[L4815]              havoc __ret_0_allowance;
[L4816]              havoc spender_s175;
[L4817]              havoc amount_s175;
[L4818]              havoc __ret_0_approve;
[L4819]              havoc sender_s211;
[L4820]              havoc recipient_s211;
[L4821]              havoc amount_s211;
[L4822]              havoc __ret_0_transferFrom;
[L4823]              havoc spender_s238;
[L4824]              havoc addedValue_s238;
[L4825]              havoc __ret_0_increaseAllowance;
[L4826]              havoc spender_s266;
[L4827]              havoc subtractedValue_s266;
[L4828]              havoc __ret_0_decreaseAllowance;
[L4829]              havoc name_s484;
[L4830]              havoc symbol_s484;
[L4831]              havoc decimals_s484;
[L4832]              havoc __ret_0_name;
[L4833]              havoc __ret_0_symbol;
[L4834]              havoc __ret_0_decimals;
[L4835]              havoc __ret_0_governance;
[L4836]              havoc arg744_s0;
[L4837]              havoc __ret_0_minters;
[L4838]              havoc account_s671;
[L4839]              havoc amount_s671;
[L4840]              havoc amount_s683;
[L4841]              havoc _governance_s701;
[L4842]              havoc _minter_s721;
[L4843]              havoc _minter_s741;
[L4844]              havoc tmpNow;
[L4845]              havoc gas;
[L4846]              assume gas > 4000000 && gas <= 8000000;
[L4847]              tmpNow := now;
[L4848]              havoc now;
[L4849]              assume now > tmpNow;
[L4850]              assume msgsender_MSG != null;
[L4851]              assume DType[msgsender_MSG] != IERC20;
[L4852]              assume DType[msgsender_MSG] != Context;
[L4853]              assume DType[msgsender_MSG] != ERC20;
[L4854]              assume DType[msgsender_MSG] != ERC20Detailed;
[L4855]              assume DType[msgsender_MSG] != SafeMath;
[L4856]              assume DType[msgsender_MSG] != YFV;
[L4857]              Alloc[msgsender_MSG] := true;
[L4858]  COND FALSE  !(choice == 18)
[L4864]  COND FALSE  !(choice == 17)
[L4870]  COND FALSE  !(choice == 16)
[L4877]  COND FALSE  !(choice == 15)
[L4883]  COND FALSE  !(choice == 14)
[L4890]  COND FALSE  !(choice == 13)
[L4897]  COND FALSE  !(choice == 12)
[L4904]  COND FALSE  !(choice == 11)
[L4911]  COND FALSE  !(choice == 10)
[L4917]  COND FALSE  !(choice == 9)
[L4923]  COND FALSE  !(choice == 8)
[L4929]  COND FALSE  !(choice == 7)
[L4935]  COND FALSE  !(choice == 6)
[L4941]  COND FALSE  !(choice == 5)
[L4948]  COND TRUE   choice == 4
[L4949]              gas := gas - 21000;
[L4950]  COND TRUE   gas >= 0
[L4951]              assume amount_s683 >= 0 && amount_s683 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4952]              assume msgvalue_MSG == 0;
[L4953]  CALL        call burn~uint256_YFV(this, msgsender_MSG, msgvalue_MSG, amount_s683);
[L1220]              havoc __exception;
[L1221]              revert := false;
[L1222]  COND FALSE  !(__exception)
[L1247]  CALL        call burn~uint256_YFV__success(this, msgsender_MSG, msgvalue_MSG, amount_s683);
[L3310]  COND TRUE   DType[this] == YFV
[L3311]  CALL        call _burn~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, amount_s683);
[L2911]              __var_19 := null;
[L2912]  COND FALSE  !(!(account_s411 != null))
[L2916]  CALL        call __var_20 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s411], amount_s411, 392639254);
[L3129]  COND FALSE  !(!(b_s561 <= a_s561))
[L3133]              c_s561 := (a_s561 - b_s561) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3134]              __ret_0_ := c_s561;
[L2916]  RET         call __var_20 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s411], amount_s411, 392639254);
[L2917]  COND FALSE  !(revert)
[L2920]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s411];
[L2921]              _balances_ERC20[this][account_s411] := __var_20;
[L2922]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s411];
[L2923]  CALL        call __var_21 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s411, 1252836592);
[L3129]  COND FALSE  !(!(b_s561 <= a_s561))
[L3133]              c_s561 := (a_s561 - b_s561) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3134]              __ret_0_ := c_s561;
[L2923]  RET         call __var_21 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s411, 1252836592);
[L2924]  COND FALSE  !(revert)
[L2927]              _totalSupply_ERC20[this] := __var_21;
[L2928]              assert { :EventEmitted "Transfer_ERC20" } true;
[L3311]  RET         call _burn~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, amount_s683);
[L3312]  COND FALSE  !(revert)
[L1247]  RET         call burn~uint256_YFV__success(this, msgsender_MSG, msgvalue_MSG, amount_s683);
[L1248]              assume !revert && gas >= 0;
[L4953]  RET         call burn~uint256_YFV(this, msgsender_MSG, msgvalue_MSG, amount_s683);
[L4991]  RET         call CorralChoice_YFV(this);
[L4991]  CALL        call CorralChoice_YFV(this);
[L4804]              havoc msgsender_MSG;
[L4805]              havoc msgvalue_MSG;
[L4806]              havoc choice;
[L4807]              havoc __ret_0_totalSupply;
[L4808]              havoc account_s121;
[L4809]              havoc __ret_0_balanceOf;
[L4810]              havoc recipient_s140;
[L4811]              havoc amount_s140;
[L4812]              havoc __ret_0_transfer;
[L4813]              havoc owner_s156;
[L4814]              havoc spender_s156;
[L4815]              havoc __ret_0_allowance;
[L4816]              havoc spender_s175;
[L4817]              havoc amount_s175;
[L4818]              havoc __ret_0_approve;
[L4819]              havoc sender_s211;
[L4820]              havoc recipient_s211;
[L4821]              havoc amount_s211;
[L4822]              havoc __ret_0_transferFrom;
[L4823]              havoc spender_s238;
[L4824]              havoc addedValue_s238;
[L4825]              havoc __ret_0_increaseAllowance;
[L4826]              havoc spender_s266;
[L4827]              havoc subtractedValue_s266;
[L4828]              havoc __ret_0_decreaseAllowance;
[L4829]              havoc name_s484;
[L4830]              havoc symbol_s484;
[L4831]              havoc decimals_s484;
[L4832]              havoc __ret_0_name;
[L4833]              havoc __ret_0_symbol;
[L4834]              havoc __ret_0_decimals;
[L4835]              havoc __ret_0_governance;
[L4836]              havoc arg744_s0;
[L4837]              havoc __ret_0_minters;
[L4838]              havoc account_s671;
[L4839]              havoc amount_s671;
[L4840]              havoc amount_s683;
[L4841]              havoc _governance_s701;
[L4842]              havoc _minter_s721;
[L4843]              havoc _minter_s741;
[L4844]              havoc tmpNow;
[L4845]              havoc gas;
[L4846]              assume gas > 4000000 && gas <= 8000000;
[L4847]              tmpNow := now;
[L4848]              havoc now;
[L4849]              assume now > tmpNow;
[L4850]              assume msgsender_MSG != null;
[L4851]              assume DType[msgsender_MSG] != IERC20;
[L4852]              assume DType[msgsender_MSG] != Context;
[L4853]              assume DType[msgsender_MSG] != ERC20;
[L4854]              assume DType[msgsender_MSG] != ERC20Detailed;
[L4855]              assume DType[msgsender_MSG] != SafeMath;
[L4856]              assume DType[msgsender_MSG] != YFV;
[L4857]              Alloc[msgsender_MSG] := true;
[L4858]  COND FALSE  !(choice == 18)
[L4864]  COND FALSE  !(choice == 17)
[L4870]  COND FALSE  !(choice == 16)
[L4877]  COND FALSE  !(choice == 15)
[L4883]  COND TRUE   choice == 14
[L4884]              gas := gas - 21000;
[L4885]  COND TRUE   gas >= 0
[L4886]              assume amount_s175 >= 0 && amount_s175 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4887]              assume msgvalue_MSG == 0;
[L4888]  CALL        call __ret_0_approve := approve~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, spender_s175, amount_s175);
[L510]               havoc __exception;
[L511]               revert := false;
[L512]   COND FALSE  !(__exception)
[L537]   CALL        call __ret_0_ := approve~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, spender_s175, amount_s175);
[L2400]  COND TRUE   DType[this] == YFV
[L2401]  CALL        call __var_2 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2200]              __ret_0_ := msgsender_MSG;
[L2401]  RET         call __var_2 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2402]  COND FALSE  !(revert)
[L2413]  COND TRUE   DType[this] == YFV
[L2414]  CALL        call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_2, spender_s175, amount_s175);
[L2954]              __var_22 := null;
[L2955]  COND FALSE  !(!(owner_s453 != null))
[L2959]              __var_23 := null;
[L2960]  COND FALSE  !(!(spender_s453 != null))
[L2964]              sum__allowances1[owner_s453] := sum__allowances1[owner_s453] - _allowances_ERC20[this][owner_s453][spender_s453];
[L2965]              _allowances_ERC20[this][owner_s453][spender_s453] := amount_s453;
[L2966]              sum__allowances1[owner_s453] := sum__allowances1[owner_s453] + _allowances_ERC20[this][owner_s453][spender_s453];
[L2967]              assert { :EventEmitted "Approval_ERC20" } true;
[L2414]  RET         call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_2, spender_s175, amount_s175);
[L2415]  COND FALSE  !(revert)
[L2426]              __ret_0_ := true;
[L537]   RET         call __ret_0_ := approve~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, spender_s175, amount_s175);
[L538]               assume !revert && gas >= 0;
[L4888]  RET         call __ret_0_approve := approve~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, spender_s175, amount_s175);
[L4991]  RET         call CorralChoice_YFV(this);
[L4991]  CALL        call CorralChoice_YFV(this);
[L4804]              havoc msgsender_MSG;
[L4805]              havoc msgvalue_MSG;
[L4806]              havoc choice;
[L4807]              havoc __ret_0_totalSupply;
[L4808]              havoc account_s121;
[L4809]              havoc __ret_0_balanceOf;
[L4810]              havoc recipient_s140;
[L4811]              havoc amount_s140;
[L4812]              havoc __ret_0_transfer;
[L4813]              havoc owner_s156;
[L4814]              havoc spender_s156;
[L4815]              havoc __ret_0_allowance;
[L4816]              havoc spender_s175;
[L4817]              havoc amount_s175;
[L4818]              havoc __ret_0_approve;
[L4819]              havoc sender_s211;
[L4820]              havoc recipient_s211;
[L4821]              havoc amount_s211;
[L4822]              havoc __ret_0_transferFrom;
[L4823]              havoc spender_s238;
[L4824]              havoc addedValue_s238;
[L4825]              havoc __ret_0_increaseAllowance;
[L4826]              havoc spender_s266;
[L4827]              havoc subtractedValue_s266;
[L4828]              havoc __ret_0_decreaseAllowance;
[L4829]              havoc name_s484;
[L4830]              havoc symbol_s484;
[L4831]              havoc decimals_s484;
[L4832]              havoc __ret_0_name;
[L4833]              havoc __ret_0_symbol;
[L4834]              havoc __ret_0_decimals;
[L4835]              havoc __ret_0_governance;
[L4836]              havoc arg744_s0;
[L4837]              havoc __ret_0_minters;
[L4838]              havoc account_s671;
[L4839]              havoc amount_s671;
[L4840]              havoc amount_s683;
[L4841]              havoc _governance_s701;
[L4842]              havoc _minter_s721;
[L4843]              havoc _minter_s741;
[L4844]              havoc tmpNow;
[L4845]              havoc gas;
[L4846]              assume gas > 4000000 && gas <= 8000000;
[L4847]              tmpNow := now;
[L4848]              havoc now;
[L4849]              assume now > tmpNow;
[L4850]              assume msgsender_MSG != null;
[L4851]              assume DType[msgsender_MSG] != IERC20;
[L4852]              assume DType[msgsender_MSG] != Context;
[L4853]              assume DType[msgsender_MSG] != ERC20;
[L4854]              assume DType[msgsender_MSG] != ERC20Detailed;
[L4855]              assume DType[msgsender_MSG] != SafeMath;
[L4856]              assume DType[msgsender_MSG] != YFV;
[L4857]              Alloc[msgsender_MSG] := true;
[L4858]  COND FALSE  !(choice == 18)
[L4864]  COND FALSE  !(choice == 17)
[L4870]  COND FALSE  !(choice == 16)
[L4877]  COND FALSE  !(choice == 15)
[L4883]  COND FALSE  !(choice == 14)
[L4890]  COND TRUE   choice == 13
[L4891]              gas := gas - 21000;
[L4892]  COND TRUE   gas >= 0
[L4893]              assume amount_s211 >= 0 && amount_s211 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4894]              assume msgvalue_MSG == 0;
[L4895]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, sender_s211, recipient_s211, amount_s211);
[L572]               havoc __exception;
[L573]               revert := false;
[L574]   COND FALSE  !(__exception)
[L599]   CALL        call __ret_0_ := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s211, recipient_s211, amount_s211);
[L2500]  COND TRUE   DType[this] == YFV
[L2501]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s211, recipient_s211, amount_s211);
[L2806]              __var_12 := null;
[L2807]  COND FALSE  !(!(sender_s323 != null))
[L2811]              __var_13 := null;
[L2812]  COND FALSE  !(!(recipient_s323 != null))
[L2816]  CALL        call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s323], amount_s323, -806116454);
[L3129]  COND FALSE  !(!(b_s561 <= a_s561))
[L3133]              c_s561 := (a_s561 - b_s561) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3134]              __ret_0_ := c_s561;
[L2816]  RET         call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s323], amount_s323, -806116454);
[L2817]  COND FALSE  !(revert)
[L2820]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s323];
[L2821]              _balances_ERC20[this][sender_s323] := __var_14;
[L2822]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s323];
[L2823]  CALL        call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s323], amount_s323);
[L3105]              c_s534 := (a_s534 + b_s534) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3106]  COND FALSE  !(!(c_s534 >= a_s534))
[L3110]              __ret_0_ := c_s534;
[L2823]  RET         call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s323], amount_s323);
[L2824]  COND FALSE  !(revert)
[L2827]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s323];
[L2828]              _balances_ERC20[this][recipient_s323] := __var_15;
[L2829]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s323];
[L2830]              assert { :EventEmitted "Transfer_ERC20" } true;
[L2501]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s211, recipient_s211, amount_s211);
[L2502]  COND FALSE  !(revert)
[L2513]  COND TRUE   DType[this] == YFV
[L2514]  CALL        call __var_3 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2200]              __ret_0_ := msgsender_MSG;
[L2514]  RET         call __var_3 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2515]  COND FALSE  !(revert)
[L2526]  COND TRUE   DType[this] == YFV
[L2527]  CALL        call __var_5 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2200]              __ret_0_ := msgsender_MSG;
[L2527]  RET         call __var_5 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2528]  COND FALSE  !(revert)
[L2539]  CALL        call __var_4 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s211][__var_5], amount_s211, -2057360831);
[L3129]  COND FALSE  !(!(b_s561 <= a_s561))
[L3133]              c_s561 := (a_s561 - b_s561) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3134]              __ret_0_ := c_s561;
[L2539]  RET         call __var_4 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s211][__var_5], amount_s211, -2057360831);
[L2540]  COND FALSE  !(revert)
[L2543]  COND TRUE   DType[this] == YFV
[L2544]  CALL        call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s211, __var_3, __var_4);
[L2954]              __var_22 := null;
[L2955]  COND FALSE  !(!(owner_s453 != null))
[L2959]              __var_23 := null;
[L2960]  COND FALSE  !(!(spender_s453 != null))
[L2964]              sum__allowances1[owner_s453] := sum__allowances1[owner_s453] - _allowances_ERC20[this][owner_s453][spender_s453];
[L2965]              _allowances_ERC20[this][owner_s453][spender_s453] := amount_s453;
[L2966]              sum__allowances1[owner_s453] := sum__allowances1[owner_s453] + _allowances_ERC20[this][owner_s453][spender_s453];
[L2967]              assert { :EventEmitted "Approval_ERC20" } true;
[L2544]  RET         call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s211, __var_3, __var_4);
[L2545]  COND FALSE  !(revert)
[L2556]              __ret_0_ := true;
[L599]   RET         call __ret_0_ := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s211, recipient_s211, amount_s211);
[L600]               assume !revert && gas >= 0;
[L4895]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, sender_s211, recipient_s211, amount_s211);
[L4991]  RET         call CorralChoice_YFV(this);
[L4991]  CALL        call CorralChoice_YFV(this);
[L4804]              havoc msgsender_MSG;
[L4805]              havoc msgvalue_MSG;
[L4806]              havoc choice;
[L4807]              havoc __ret_0_totalSupply;
[L4808]              havoc account_s121;
[L4809]              havoc __ret_0_balanceOf;
[L4810]              havoc recipient_s140;
[L4811]              havoc amount_s140;
[L4812]              havoc __ret_0_transfer;
[L4813]              havoc owner_s156;
[L4814]              havoc spender_s156;
[L4815]              havoc __ret_0_allowance;
[L4816]              havoc spender_s175;
[L4817]              havoc amount_s175;
[L4818]              havoc __ret_0_approve;
[L4819]              havoc sender_s211;
[L4820]              havoc recipient_s211;
[L4821]              havoc amount_s211;
[L4822]              havoc __ret_0_transferFrom;
[L4823]              havoc spender_s238;
[L4824]              havoc addedValue_s238;
[L4825]              havoc __ret_0_increaseAllowance;
[L4826]              havoc spender_s266;
[L4827]              havoc subtractedValue_s266;
[L4828]              havoc __ret_0_decreaseAllowance;
[L4829]              havoc name_s484;
[L4830]              havoc symbol_s484;
[L4831]              havoc decimals_s484;
[L4832]              havoc __ret_0_name;
[L4833]              havoc __ret_0_symbol;
[L4834]              havoc __ret_0_decimals;
[L4835]              havoc __ret_0_governance;
[L4836]              havoc arg744_s0;
[L4837]              havoc __ret_0_minters;
[L4838]              havoc account_s671;
[L4839]              havoc amount_s671;
[L4840]              havoc amount_s683;
[L4841]              havoc _governance_s701;
[L4842]              havoc _minter_s721;
[L4843]              havoc _minter_s741;
[L4844]              havoc tmpNow;
[L4845]              havoc gas;
[L4846]              assume gas > 4000000 && gas <= 8000000;
[L4847]              tmpNow := now;
[L4848]              havoc now;
[L4849]              assume now > tmpNow;
[L4850]              assume msgsender_MSG != null;
[L4851]              assume DType[msgsender_MSG] != IERC20;
[L4852]              assume DType[msgsender_MSG] != Context;
[L4853]              assume DType[msgsender_MSG] != ERC20;
[L4854]              assume DType[msgsender_MSG] != ERC20Detailed;
[L4855]              assume DType[msgsender_MSG] != SafeMath;
[L4856]              assume DType[msgsender_MSG] != YFV;
[L4857]              Alloc[msgsender_MSG] := true;
[L4858]  COND FALSE  !(choice == 18)
[L4864]  COND FALSE  !(choice == 17)
[L4870]  COND TRUE   choice == 16
[L4871]              gas := gas - 21000;
[L4872]  COND TRUE   gas >= 0
[L4873]              assume amount_s140 >= 0 && amount_s140 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4874]              assume msgvalue_MSG == 0;
[L4875]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((msgsender_MSG == recipient_s140 && amount_s140 <= _balances_ERC20[this][msgsender_MSG]) && amount_s140 >= 0) && amount_s140 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s140] >= 0) && _balances_ERC20[this][recipient_s140] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2]                 revert := revert_hold;
[L392]               havoc __exception;
[L393]               revert := false;
[L394]   COND FALSE  !(__exception)
[L419]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L2322]  COND TRUE   DType[this] == YFV
[L2323]  CALL        call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2200]              __ret_0_ := msgsender_MSG;
[L2323]  RET         call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2324]  COND FALSE  !(revert)
[L2335]  COND TRUE   DType[this] == YFV
[L2336]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s140, amount_s140);
[L2806]              __var_12 := null;
[L2807]  COND FALSE  !(!(sender_s323 != null))
[L2811]              __var_13 := null;
[L2812]  COND FALSE  !(!(recipient_s323 != null))
[L2816]  CALL        call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s323], amount_s323, -806116454);
[L3129]  COND FALSE  !(!(b_s561 <= a_s561))
[L3133]              c_s561 := (a_s561 - b_s561) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3134]              __ret_0_ := c_s561;
[L2816]  RET         call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s323], amount_s323, -806116454);
[L2817]  COND FALSE  !(revert)
[L2820]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s323];
[L2821]              _balances_ERC20[this][sender_s323] := __var_14;
[L2822]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s323];
[L2823]  CALL        call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s323], amount_s323);
[L3105]              c_s534 := (a_s534 + b_s534) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3106]  COND FALSE  !(!(c_s534 >= a_s534))
[L3110]              __ret_0_ := c_s534;
[L2823]  RET         call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s323], amount_s323);
[L2824]  COND FALSE  !(revert)
[L2827]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s323];
[L2828]              _balances_ERC20[this][recipient_s323] := __var_15;
[L2829]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s323];
[L2830]              assert { :EventEmitted "Transfer_ERC20" } true;
[L2336]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s140, amount_s140);
[L2337]  COND FALSE  !(revert)
[L2348]              __ret_0_ := true;
[L419]   RET         call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L420]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !((((((((__ret_0_ == true && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowances_ERC20[this] == old(_allowances_ERC20[this])) && governance_YFV[this] == old(governance_YFV[this])) && minters_YFV[this] == old(minters_YFV[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]));
[L2]                 revert := revert_hold;
[L4875]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L4991]  RET         call CorralChoice_YFV(this);
[L4991]  CALL        call CorralChoice_YFV(this);
[L4804]              havoc msgsender_MSG;
[L4805]              havoc msgvalue_MSG;
[L4806]              havoc choice;
[L4807]              havoc __ret_0_totalSupply;
[L4808]              havoc account_s121;
[L4809]              havoc __ret_0_balanceOf;
[L4810]              havoc recipient_s140;
[L4811]              havoc amount_s140;
[L4812]              havoc __ret_0_transfer;
[L4813]              havoc owner_s156;
[L4814]              havoc spender_s156;
[L4815]              havoc __ret_0_allowance;
[L4816]              havoc spender_s175;
[L4817]              havoc amount_s175;
[L4818]              havoc __ret_0_approve;
[L4819]              havoc sender_s211;
[L4820]              havoc recipient_s211;
[L4821]              havoc amount_s211;
[L4822]              havoc __ret_0_transferFrom;
[L4823]              havoc spender_s238;
[L4824]              havoc addedValue_s238;
[L4825]              havoc __ret_0_increaseAllowance;
[L4826]              havoc spender_s266;
[L4827]              havoc subtractedValue_s266;
[L4828]              havoc __ret_0_decreaseAllowance;
[L4829]              havoc name_s484;
[L4830]              havoc symbol_s484;
[L4831]              havoc decimals_s484;
[L4832]              havoc __ret_0_name;
[L4833]              havoc __ret_0_symbol;
[L4834]              havoc __ret_0_decimals;
[L4835]              havoc __ret_0_governance;
[L4836]              havoc arg744_s0;
[L4837]              havoc __ret_0_minters;
[L4838]              havoc account_s671;
[L4839]              havoc amount_s671;
[L4840]              havoc amount_s683;
[L4841]              havoc _governance_s701;
[L4842]              havoc _minter_s721;
[L4843]              havoc _minter_s741;
[L4844]              havoc tmpNow;
[L4845]              havoc gas;
[L4846]              assume gas > 4000000 && gas <= 8000000;
[L4847]              tmpNow := now;
[L4848]              havoc now;
[L4849]              assume now > tmpNow;
[L4850]              assume msgsender_MSG != null;
[L4851]              assume DType[msgsender_MSG] != IERC20;
[L4852]              assume DType[msgsender_MSG] != Context;
[L4853]              assume DType[msgsender_MSG] != ERC20;
[L4854]              assume DType[msgsender_MSG] != ERC20Detailed;
[L4855]              assume DType[msgsender_MSG] != SafeMath;
[L4856]              assume DType[msgsender_MSG] != YFV;
[L4857]              Alloc[msgsender_MSG] := true;
[L4858]  COND FALSE  !(choice == 18)
[L4864]  COND FALSE  !(choice == 17)
[L4870]  COND TRUE   choice == 16
[L4871]              gas := gas - 21000;
[L4872]  COND TRUE   gas >= 0
[L4873]              assume amount_s140 >= 0 && amount_s140 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4874]              assume msgvalue_MSG == 0;
[L4875]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == recipient_s140 && amount_s140 <= _balances_ERC20[this][msgsender_MSG]) && amount_s140 >= 0) && amount_s140 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s140] >= 0) && _balances_ERC20[this][recipient_s140] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC200 := true;
[L2]                 call_transfer_ERC200 := false;
[L2]                 revert := revert_hold;
[L392]               havoc __exception;
[L393]               revert := false;
[L394]   COND FALSE  !(__exception)
[L419]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L2322]  COND TRUE   DType[this] == YFV
[L2323]  CALL        call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2200]              __ret_0_ := msgsender_MSG;
[L2323]  RET         call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2324]  COND FALSE  !(revert)
[L2335]  COND TRUE   DType[this] == YFV
[L2336]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s140, amount_s140);
[L2806]              __var_12 := null;
[L2807]  COND FALSE  !(!(sender_s323 != null))
[L2811]              __var_13 := null;
[L2812]  COND FALSE  !(!(recipient_s323 != null))
[L2816]  CALL        call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s323], amount_s323, -806116454);
[L3129]  COND FALSE  !(!(b_s561 <= a_s561))
[L3133]              c_s561 := (a_s561 - b_s561) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3134]              __ret_0_ := c_s561;
[L2816]  RET         call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s323], amount_s323, -806116454);
[L2817]  COND FALSE  !(revert)
[L2820]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s323];
[L2821]              _balances_ERC20[this][sender_s323] := __var_14;
[L2822]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s323];
[L2823]  CALL        call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s323], amount_s323);
[L3105]              c_s534 := (a_s534 + b_s534) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3106]  COND FALSE  !(!(c_s534 >= a_s534))
[L3110]              __ret_0_ := c_s534;
[L2823]  RET         call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s323], amount_s323);
[L2824]  COND FALSE  !(revert)
[L2827]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s323];
[L2828]              _balances_ERC20[this][recipient_s323] := __var_15;
[L2829]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s323];
[L2830]              assert { :EventEmitted "Transfer_ERC20" } true;
[L2336]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s140, amount_s140);
[L2337]  COND FALSE  !(revert)
[L2348]              __ret_0_ := true;
[L419]   RET         call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L420]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !((((((((__ret_0_ == true && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowances_ERC20[this] == old(_allowances_ERC20[this])) && governance_YFV[this] == old(governance_YFV[this])) && minters_YFV[this] == old(minters_YFV[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]));
[L2]                 revert := revert_hold;
[L4875]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L4991]  RET         call CorralChoice_YFV(this);

Loop:
[L4991]  CALL        call CorralChoice_YFV(this);
[L4804]              havoc msgsender_MSG;
[L4805]              havoc msgvalue_MSG;
[L4806]              havoc choice;
[L4807]              havoc __ret_0_totalSupply;
[L4808]              havoc account_s121;
[L4809]              havoc __ret_0_balanceOf;
[L4810]              havoc recipient_s140;
[L4811]              havoc amount_s140;
[L4812]              havoc __ret_0_transfer;
[L4813]              havoc owner_s156;
[L4814]              havoc spender_s156;
[L4815]              havoc __ret_0_allowance;
[L4816]              havoc spender_s175;
[L4817]              havoc amount_s175;
[L4818]              havoc __ret_0_approve;
[L4819]              havoc sender_s211;
[L4820]              havoc recipient_s211;
[L4821]              havoc amount_s211;
[L4822]              havoc __ret_0_transferFrom;
[L4823]              havoc spender_s238;
[L4824]              havoc addedValue_s238;
[L4825]              havoc __ret_0_increaseAllowance;
[L4826]              havoc spender_s266;
[L4827]              havoc subtractedValue_s266;
[L4828]              havoc __ret_0_decreaseAllowance;
[L4829]              havoc name_s484;
[L4830]              havoc symbol_s484;
[L4831]              havoc decimals_s484;
[L4832]              havoc __ret_0_name;
[L4833]              havoc __ret_0_symbol;
[L4834]              havoc __ret_0_decimals;
[L4835]              havoc __ret_0_governance;
[L4836]              havoc arg744_s0;
[L4837]              havoc __ret_0_minters;
[L4838]              havoc account_s671;
[L4839]              havoc amount_s671;
[L4840]              havoc amount_s683;
[L4841]              havoc _governance_s701;
[L4842]              havoc _minter_s721;
[L4843]              havoc _minter_s741;
[L4844]              havoc tmpNow;
[L4845]              havoc gas;
[L4846]              assume gas > 4000000 && gas <= 8000000;
[L4847]              tmpNow := now;
[L4848]              havoc now;
[L4849]              assume now > tmpNow;
[L4850]              assume msgsender_MSG != null;
[L4851]              assume DType[msgsender_MSG] != IERC20;
[L4852]              assume DType[msgsender_MSG] != Context;
[L4853]              assume DType[msgsender_MSG] != ERC20;
[L4854]              assume DType[msgsender_MSG] != ERC20Detailed;
[L4855]              assume DType[msgsender_MSG] != SafeMath;
[L4856]              assume DType[msgsender_MSG] != YFV;
[L4857]              Alloc[msgsender_MSG] := true;
[L4858]  COND TRUE   choice == 18
[L4859]              gas := gas - 21000;
[L4860]  COND FALSE  !(gas >= 0)
[L4991]  RET         call CorralChoice_YFV(this);

[2020-11-25 09:42:15,079 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 09:42:15,079 INFO  L82        PathProgramCache]: Analyzing trace with hash -1150991903, now seen corresponding path program 1 times
[2020-11-25 09:42:15,080 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 09:42:15,176 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 09:42:18,023 WARN  L250   erpolLogProxyWrapper]: Already inconsistent.
[2020-11-25 09:42:18,023 WARN  L250   erpolLogProxyWrapper]: Already inconsistent.
[2020-11-25 09:42:18,110 WARN  L188               SmtUtils]: Spent 126.00 ms on a formula simplification. DAG size of input: 183 DAG size of output: 46
[2020-11-25 09:42:18,296 WARN  L188               SmtUtils]: Spent 130.00 ms on a formula simplification. DAG size of input: 201 DAG size of output: 63
[2020-11-25 09:42:18,779 WARN  L188               SmtUtils]: Spent 386.00 ms on a formula simplification. DAG size of input: 314 DAG size of output: 74
[2020-11-25 09:42:19,139 WARN  L188               SmtUtils]: Spent 256.00 ms on a formula simplification. DAG size of input: 291 DAG size of output: 53
[2020-11-25 09:42:19,692 WARN  L188               SmtUtils]: Spent 395.00 ms on a formula simplification. DAG size of input: 269 DAG size of output: 67
[2020-11-25 09:42:19,961 WARN  L188               SmtUtils]: Spent 191.00 ms on a formula simplification. DAG size of input: 234 DAG size of output: 60
[2020-11-25 09:42:22,892 WARN  L188               SmtUtils]: Spent 2.25 s on a formula simplification. DAG size of input: 935 DAG size of output: 62
[2020-11-25 09:42:32,776 WARN  L188               SmtUtils]: Spent 1.85 s on a formula simplification. DAG size of input: 921 DAG size of output: 38
[2020-11-25 09:42:42,389 WARN  L188               SmtUtils]: Spent 2.03 s on a formula simplification. DAG size of input: 921 DAG size of output: 40
[2020-11-25 09:42:46,877 WARN  L188               SmtUtils]: Spent 1.61 s on a formula simplification. DAG size of input: 908 DAG size of output: 44
[2020-11-25 09:42:49,749 WARN  L188               SmtUtils]: Spent 681.00 ms on a formula simplification. DAG size of input: 871 DAG size of output: 11
[2020-11-25 09:42:53,058 WARN  L188               SmtUtils]: Spent 1.56 s on a formula simplification. DAG size of input: 637 DAG size of output: 36
[2020-11-25 09:42:56,256 WARN  L188               SmtUtils]: Spent 1.35 s on a formula simplification. DAG size of input: 638 DAG size of output: 38
[2020-11-25 09:43:01,815 WARN  L188               SmtUtils]: Spent 3.54 s on a formula simplification. DAG size of input: 1078 DAG size of output: 44
[2020-11-25 09:43:09,840 WARN  L188               SmtUtils]: Spent 1.40 s on a formula simplification. DAG size of input: 1119 DAG size of output: 19
[2020-11-25 09:43:15,710 WARN  L188               SmtUtils]: Spent 2.94 s on a formula simplification. DAG size of input: 1109 DAG size of output: 14
[2020-11-25 09:43:18,860 INFO  L134       CoverageAnalysis]: Checked inductivity of 768 backedges. 29 proven. 409 refuted. 0 times theorem prover too weak. 330 trivial. 0 not checked.
[2020-11-25 09:43:18,860 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 09:43:18,860 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [59] total 59
[2020-11-25 09:43:18,860 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 09:43:18,861 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 59 interpolants.
[2020-11-25 09:43:18,861 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=210, Invalid=3212, Unknown=0, NotChecked=0, Total=3422
[2020-11-25 09:43:18,861 INFO  L87              Difference]: Start difference. First operand 3782 states and 4813 transitions. cyclomatic complexity: 1089 Second operand 59 states.
[2020-11-25 09:43:41,144 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 09:43:41,145 INFO  L93              Difference]: Finished difference Result 4689 states and 6350 transitions.
[2020-11-25 09:43:41,145 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 52 states. 
[2020-11-25 09:43:41,145 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 4689 states and 6350 transitions.
[2020-11-25 09:43:41,159 INFO  L131   ngComponentsAnalysis]: Automaton has 13 accepting balls. 26
[2020-11-25 09:43:41,173 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 4689 states to 4689 states and 6350 transitions.
[2020-11-25 09:43:41,173 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1373
[2020-11-25 09:43:41,174 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1373
[2020-11-25 09:43:41,174 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 4689 states and 6350 transitions.
[2020-11-25 09:43:41,178 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 09:43:41,179 INFO  L728         BuchiCegarLoop]: Abstraction has 4689 states and 6350 transitions.
[2020-11-25 09:43:41,180 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 4689 states and 6350 transitions.
[2020-11-25 09:43:41,205 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 4689 to 3973.
[2020-11-25 09:43:41,205 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 3973 states.
[2020-11-25 09:43:41,212 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 3973 states to 3973 states and 5114 transitions.
[2020-11-25 09:43:41,212 INFO  L751         BuchiCegarLoop]: Abstraction has 3973 states and 5114 transitions.
[2020-11-25 09:43:41,212 INFO  L631         BuchiCegarLoop]: Abstraction has 3973 states and 5114 transitions.
[2020-11-25 09:43:41,212 INFO  L445         BuchiCegarLoop]: ======== Iteration 32============
[2020-11-25 09:43:41,212 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 3973 states and 5114 transitions.
[2020-11-25 09:43:41,216 INFO  L131   ngComponentsAnalysis]: Automaton has 8 accepting balls. 16
[2020-11-25 09:43:41,216 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 09:43:41,216 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 09:43:41,217 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 09:43:41,217 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_ERC200 := false;
[L2]                 call_transfer_ERC200 := false;
[L2]     CALL        call main();
[L4981]              assume null == 0;
[L4982]  CALL        call this := FreshRefGenerator__success();
[L2122]              havoc newRef;
[L2123]              assume Alloc[newRef] == false;
[L2124]              Alloc[newRef] := true;
[L2125]              assume newRef != null;
[L4982]  RET         call this := FreshRefGenerator__success();
[L4983]              assume now >= 0;
[L4984]              assume DType[this] == YFV;
[L4985]              assume msgvalue_MSG == 0;
[L4986]              gas := gas - 53000;
[L4987]  CALL        call YFV_YFV(this, msgsender_MSG, msgvalue_MSG);
[L1098]              havoc __exception;
[L1099]              revert := false;
[L1100]  COND FALSE  !(__exception)
[L1125]  CALL        call YFV_YFV__success(this, msgsender_MSG, msgvalue_MSG);
[L3242]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2186]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2171]              assume msgsender_MSG != null;
[L2172]              Balance[this] := 0;
[L2186]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2187]  COND FALSE  !(revert)
[L3242]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3243]  COND FALSE  !(revert)
[L3246]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2154]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2139]              assume msgsender_MSG != null;
[L2140]              Balance[this] := 0;
[L2154]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2155]  COND FALSE  !(revert)
[L3246]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3247]  COND FALSE  !(revert)
[L3250]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2248]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2186]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2171]              assume msgsender_MSG != null;
[L2172]              Balance[this] := 0;
[L2186]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2187]  COND FALSE  !(revert)
[L2248]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2249]  COND FALSE  !(revert)
[L2252]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2154]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2139]              assume msgsender_MSG != null;
[L2140]              Balance[this] := 0;
[L2154]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2155]  COND FALSE  !(revert)
[L2252]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2253]  COND FALSE  !(revert)
[L2256]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2220]              assume msgsender_MSG != null;
[L2221]              Balance[this] := 0;
[L2222]              _balances_ERC20[this] := zeroRefintArr();
[L2223]              sum__balances0[this] := 0;
[L2224]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2225]              sum__allowances1[this] := 0;
[L2226]              _totalSupply_ERC20[this] := 0;
[L2256]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2257]  COND FALSE  !(revert)
[L3250]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3251]  COND FALSE  !(revert)
[L3254]  CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -868984158, 934069305, 18);
[L3012]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2154]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2139]              assume msgsender_MSG != null;
[L2140]              Balance[this] := 0;
[L2154]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2155]  COND FALSE  !(revert)
[L3012]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3013]  COND FALSE  !(revert)
[L3016]  CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s484, symbol_s484, decimals_s484);
[L2987]              assume msgsender_MSG != null;
[L2988]              Balance[this] := 0;
[L2989]              _name_ERC20Detailed[this] := 1252836592;
[L2990]              _symbol_ERC20Detailed[this] := 1252836592;
[L2991]              _decimals_ERC20Detailed[this] := 0;
[L2993]              _name_ERC20Detailed[this] := name_s484;
[L2994]              _symbol_ERC20Detailed[this] := symbol_s484;
[L2995]              _decimals_ERC20Detailed[this] := decimals_s484;
[L3016]  RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s484, symbol_s484, decimals_s484);
[L3017]  COND FALSE  !(revert)
[L3254]  RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -868984158, 934069305, 18);
[L3255]  COND FALSE  !(revert)
[L3258]  CALL        call YFV_YFV_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3208]              assume msgsender_MSG != null;
[L3209]              Balance[this] := 0;
[L3210]              governance_YFV[this] := null;
[L3211]              minters_YFV[this] := zeroRefboolArr();
[L3213]              governance_YFV[this] := msgsender_MSG;
[L3258]  RET         call YFV_YFV_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3259]  COND FALSE  !(revert)
[L1125]  RET         call YFV_YFV__success(this, msgsender_MSG, msgvalue_MSG);
[L1126]              assume !revert && gas >= 0;
[L4987]  RET         call YFV_YFV(this, msgsender_MSG, msgvalue_MSG);
[L4988]              assume !revert && gas >= 0;
[L4991]  CALL        call CorralChoice_YFV(this);
[L4804]              havoc msgsender_MSG;
[L4805]              havoc msgvalue_MSG;
[L4806]              havoc choice;
[L4807]              havoc __ret_0_totalSupply;
[L4808]              havoc account_s121;
[L4809]              havoc __ret_0_balanceOf;
[L4810]              havoc recipient_s140;
[L4811]              havoc amount_s140;
[L4812]              havoc __ret_0_transfer;
[L4813]              havoc owner_s156;
[L4814]              havoc spender_s156;
[L4815]              havoc __ret_0_allowance;
[L4816]              havoc spender_s175;
[L4817]              havoc amount_s175;
[L4818]              havoc __ret_0_approve;
[L4819]              havoc sender_s211;
[L4820]              havoc recipient_s211;
[L4821]              havoc amount_s211;
[L4822]              havoc __ret_0_transferFrom;
[L4823]              havoc spender_s238;
[L4824]              havoc addedValue_s238;
[L4825]              havoc __ret_0_increaseAllowance;
[L4826]              havoc spender_s266;
[L4827]              havoc subtractedValue_s266;
[L4828]              havoc __ret_0_decreaseAllowance;
[L4829]              havoc name_s484;
[L4830]              havoc symbol_s484;
[L4831]              havoc decimals_s484;
[L4832]              havoc __ret_0_name;
[L4833]              havoc __ret_0_symbol;
[L4834]              havoc __ret_0_decimals;
[L4835]              havoc __ret_0_governance;
[L4836]              havoc arg744_s0;
[L4837]              havoc __ret_0_minters;
[L4838]              havoc account_s671;
[L4839]              havoc amount_s671;
[L4840]              havoc amount_s683;
[L4841]              havoc _governance_s701;
[L4842]              havoc _minter_s721;
[L4843]              havoc _minter_s741;
[L4844]              havoc tmpNow;
[L4845]              havoc gas;
[L4846]              assume gas > 4000000 && gas <= 8000000;
[L4847]              tmpNow := now;
[L4848]              havoc now;
[L4849]              assume now > tmpNow;
[L4850]              assume msgsender_MSG != null;
[L4851]              assume DType[msgsender_MSG] != IERC20;
[L4852]              assume DType[msgsender_MSG] != Context;
[L4853]              assume DType[msgsender_MSG] != ERC20;
[L4854]              assume DType[msgsender_MSG] != ERC20Detailed;
[L4855]              assume DType[msgsender_MSG] != SafeMath;
[L4856]              assume DType[msgsender_MSG] != YFV;
[L4857]              Alloc[msgsender_MSG] := true;
[L4858]  COND FALSE  !(choice == 18)
[L4864]  COND FALSE  !(choice == 17)
[L4870]  COND FALSE  !(choice == 16)
[L4877]  COND FALSE  !(choice == 15)
[L4883]  COND FALSE  !(choice == 14)
[L4890]  COND FALSE  !(choice == 13)
[L4897]  COND FALSE  !(choice == 12)
[L4904]  COND FALSE  !(choice == 11)
[L4911]  COND FALSE  !(choice == 10)
[L4917]  COND FALSE  !(choice == 9)
[L4923]  COND FALSE  !(choice == 8)
[L4929]  COND FALSE  !(choice == 7)
[L4935]  COND FALSE  !(choice == 6)
[L4941]  COND FALSE  !(choice == 5)
[L4948]  COND TRUE   choice == 4
[L4949]              gas := gas - 21000;
[L4950]  COND TRUE   gas >= 0
[L4951]              assume amount_s683 >= 0 && amount_s683 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4952]              assume msgvalue_MSG == 0;
[L4953]  CALL        call burn~uint256_YFV(this, msgsender_MSG, msgvalue_MSG, amount_s683);
[L1220]              havoc __exception;
[L1221]              revert := false;
[L1222]  COND FALSE  !(__exception)
[L1247]  CALL        call burn~uint256_YFV__success(this, msgsender_MSG, msgvalue_MSG, amount_s683);
[L3310]  COND TRUE   DType[this] == YFV
[L3311]  CALL        call _burn~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, amount_s683);
[L2911]              __var_19 := null;
[L2912]  COND FALSE  !(!(account_s411 != null))
[L2916]  CALL        call __var_20 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s411], amount_s411, 392639254);
[L3129]  COND FALSE  !(!(b_s561 <= a_s561))
[L3133]              c_s561 := (a_s561 - b_s561) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3134]              __ret_0_ := c_s561;
[L2916]  RET         call __var_20 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s411], amount_s411, 392639254);
[L2917]  COND FALSE  !(revert)
[L2920]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s411];
[L2921]              _balances_ERC20[this][account_s411] := __var_20;
[L2922]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s411];
[L2923]  CALL        call __var_21 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s411, 1252836592);
[L3129]  COND FALSE  !(!(b_s561 <= a_s561))
[L3133]              c_s561 := (a_s561 - b_s561) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3134]              __ret_0_ := c_s561;
[L2923]  RET         call __var_21 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s411, 1252836592);
[L2924]  COND FALSE  !(revert)
[L2927]              _totalSupply_ERC20[this] := __var_21;
[L2928]              assert { :EventEmitted "Transfer_ERC20" } true;
[L3311]  RET         call _burn~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, amount_s683);
[L3312]  COND FALSE  !(revert)
[L1247]  RET         call burn~uint256_YFV__success(this, msgsender_MSG, msgvalue_MSG, amount_s683);
[L1248]              assume !revert && gas >= 0;
[L4953]  RET         call burn~uint256_YFV(this, msgsender_MSG, msgvalue_MSG, amount_s683);
[L4991]  RET         call CorralChoice_YFV(this);
[L4991]  CALL        call CorralChoice_YFV(this);
[L4804]              havoc msgsender_MSG;
[L4805]              havoc msgvalue_MSG;
[L4806]              havoc choice;
[L4807]              havoc __ret_0_totalSupply;
[L4808]              havoc account_s121;
[L4809]              havoc __ret_0_balanceOf;
[L4810]              havoc recipient_s140;
[L4811]              havoc amount_s140;
[L4812]              havoc __ret_0_transfer;
[L4813]              havoc owner_s156;
[L4814]              havoc spender_s156;
[L4815]              havoc __ret_0_allowance;
[L4816]              havoc spender_s175;
[L4817]              havoc amount_s175;
[L4818]              havoc __ret_0_approve;
[L4819]              havoc sender_s211;
[L4820]              havoc recipient_s211;
[L4821]              havoc amount_s211;
[L4822]              havoc __ret_0_transferFrom;
[L4823]              havoc spender_s238;
[L4824]              havoc addedValue_s238;
[L4825]              havoc __ret_0_increaseAllowance;
[L4826]              havoc spender_s266;
[L4827]              havoc subtractedValue_s266;
[L4828]              havoc __ret_0_decreaseAllowance;
[L4829]              havoc name_s484;
[L4830]              havoc symbol_s484;
[L4831]              havoc decimals_s484;
[L4832]              havoc __ret_0_name;
[L4833]              havoc __ret_0_symbol;
[L4834]              havoc __ret_0_decimals;
[L4835]              havoc __ret_0_governance;
[L4836]              havoc arg744_s0;
[L4837]              havoc __ret_0_minters;
[L4838]              havoc account_s671;
[L4839]              havoc amount_s671;
[L4840]              havoc amount_s683;
[L4841]              havoc _governance_s701;
[L4842]              havoc _minter_s721;
[L4843]              havoc _minter_s741;
[L4844]              havoc tmpNow;
[L4845]              havoc gas;
[L4846]              assume gas > 4000000 && gas <= 8000000;
[L4847]              tmpNow := now;
[L4848]              havoc now;
[L4849]              assume now > tmpNow;
[L4850]              assume msgsender_MSG != null;
[L4851]              assume DType[msgsender_MSG] != IERC20;
[L4852]              assume DType[msgsender_MSG] != Context;
[L4853]              assume DType[msgsender_MSG] != ERC20;
[L4854]              assume DType[msgsender_MSG] != ERC20Detailed;
[L4855]              assume DType[msgsender_MSG] != SafeMath;
[L4856]              assume DType[msgsender_MSG] != YFV;
[L4857]              Alloc[msgsender_MSG] := true;
[L4858]  COND FALSE  !(choice == 18)
[L4864]  COND FALSE  !(choice == 17)
[L4870]  COND TRUE   choice == 16
[L4871]              gas := gas - 21000;
[L4872]  COND TRUE   gas >= 0
[L4873]              assume amount_s140 >= 0 && amount_s140 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4874]              assume msgvalue_MSG == 0;
[L4875]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == recipient_s140 && amount_s140 <= _balances_ERC20[this][msgsender_MSG]) && amount_s140 >= 0) && amount_s140 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s140] >= 0) && _balances_ERC20[this][recipient_s140] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC200 := true;
[L2]                 call_transfer_ERC200 := false;
[L2]                 revert := revert_hold;
[L392]               havoc __exception;
[L393]               revert := false;
[L394]   COND FALSE  !(__exception)
[L419]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L2322]  COND TRUE   DType[this] == YFV
[L2323]  CALL        call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2200]              __ret_0_ := msgsender_MSG;
[L2323]  RET         call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2324]  COND FALSE  !(revert)
[L2335]  COND TRUE   DType[this] == YFV
[L2336]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s140, amount_s140);
[L2806]              __var_12 := null;
[L2807]  COND FALSE  !(!(sender_s323 != null))
[L2811]              __var_13 := null;
[L2812]  COND FALSE  !(!(recipient_s323 != null))
[L2816]  CALL        call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s323], amount_s323, -806116454);
[L3129]  COND FALSE  !(!(b_s561 <= a_s561))
[L3133]              c_s561 := (a_s561 - b_s561) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3134]              __ret_0_ := c_s561;
[L2816]  RET         call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s323], amount_s323, -806116454);
[L2817]  COND FALSE  !(revert)
[L2820]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s323];
[L2821]              _balances_ERC20[this][sender_s323] := __var_14;
[L2822]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s323];
[L2823]  CALL        call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s323], amount_s323);
[L3105]              c_s534 := (a_s534 + b_s534) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3106]  COND FALSE  !(!(c_s534 >= a_s534))
[L3110]              __ret_0_ := c_s534;
[L2823]  RET         call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s323], amount_s323);
[L2824]  COND FALSE  !(revert)
[L2827]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s323];
[L2828]              _balances_ERC20[this][recipient_s323] := __var_15;
[L2829]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s323];
[L2830]              assert { :EventEmitted "Transfer_ERC20" } true;
[L2336]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s140, amount_s140);
[L2337]  COND FALSE  !(revert)
[L2348]              __ret_0_ := true;
[L419]   RET         call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L420]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume (((((((__ret_0_ == true && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowances_ERC20[this] == old(_allowances_ERC20[this])) && governance_YFV[this] == old(governance_YFV[this])) && minters_YFV[this] == old(minters_YFV[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]);
[L2]                 success_transfer_ERC200 := true;
[L2]                 success_transfer_ERC200 := false;
[L2]                 revert := revert_hold;
[L4875]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L4991]  RET         call CorralChoice_YFV(this);
[L4991]  CALL        call CorralChoice_YFV(this);
[L4804]              havoc msgsender_MSG;
[L4805]              havoc msgvalue_MSG;
[L4806]              havoc choice;
[L4807]              havoc __ret_0_totalSupply;
[L4808]              havoc account_s121;
[L4809]              havoc __ret_0_balanceOf;
[L4810]              havoc recipient_s140;
[L4811]              havoc amount_s140;
[L4812]              havoc __ret_0_transfer;
[L4813]              havoc owner_s156;
[L4814]              havoc spender_s156;
[L4815]              havoc __ret_0_allowance;
[L4816]              havoc spender_s175;
[L4817]              havoc amount_s175;
[L4818]              havoc __ret_0_approve;
[L4819]              havoc sender_s211;
[L4820]              havoc recipient_s211;
[L4821]              havoc amount_s211;
[L4822]              havoc __ret_0_transferFrom;
[L4823]              havoc spender_s238;
[L4824]              havoc addedValue_s238;
[L4825]              havoc __ret_0_increaseAllowance;
[L4826]              havoc spender_s266;
[L4827]              havoc subtractedValue_s266;
[L4828]              havoc __ret_0_decreaseAllowance;
[L4829]              havoc name_s484;
[L4830]              havoc symbol_s484;
[L4831]              havoc decimals_s484;
[L4832]              havoc __ret_0_name;
[L4833]              havoc __ret_0_symbol;
[L4834]              havoc __ret_0_decimals;
[L4835]              havoc __ret_0_governance;
[L4836]              havoc arg744_s0;
[L4837]              havoc __ret_0_minters;
[L4838]              havoc account_s671;
[L4839]              havoc amount_s671;
[L4840]              havoc amount_s683;
[L4841]              havoc _governance_s701;
[L4842]              havoc _minter_s721;
[L4843]              havoc _minter_s741;
[L4844]              havoc tmpNow;
[L4845]              havoc gas;
[L4846]              assume gas > 4000000 && gas <= 8000000;
[L4847]              tmpNow := now;
[L4848]              havoc now;
[L4849]              assume now > tmpNow;
[L4850]              assume msgsender_MSG != null;
[L4851]              assume DType[msgsender_MSG] != IERC20;
[L4852]              assume DType[msgsender_MSG] != Context;
[L4853]              assume DType[msgsender_MSG] != ERC20;
[L4854]              assume DType[msgsender_MSG] != ERC20Detailed;
[L4855]              assume DType[msgsender_MSG] != SafeMath;
[L4856]              assume DType[msgsender_MSG] != YFV;
[L4857]              Alloc[msgsender_MSG] := true;
[L4858]  COND FALSE  !(choice == 18)
[L4864]  COND FALSE  !(choice == 17)
[L4870]  COND FALSE  !(choice == 16)
[L4877]  COND FALSE  !(choice == 15)
[L4883]  COND FALSE  !(choice == 14)
[L4890]  COND TRUE   choice == 13
[L4891]              gas := gas - 21000;
[L4892]  COND TRUE   gas >= 0
[L4893]              assume amount_s211 >= 0 && amount_s211 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4894]              assume msgvalue_MSG == 0;
[L4895]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, sender_s211, recipient_s211, amount_s211);
[L572]               havoc __exception;
[L573]               revert := false;
[L574]   COND FALSE  !(__exception)
[L599]   CALL        call __ret_0_ := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s211, recipient_s211, amount_s211);
[L2500]  COND TRUE   DType[this] == YFV
[L2501]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s211, recipient_s211, amount_s211);
[L2806]              __var_12 := null;
[L2807]  COND FALSE  !(!(sender_s323 != null))
[L2811]              __var_13 := null;
[L2812]  COND FALSE  !(!(recipient_s323 != null))
[L2816]  CALL        call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s323], amount_s323, -806116454);
[L3129]  COND FALSE  !(!(b_s561 <= a_s561))
[L3133]              c_s561 := (a_s561 - b_s561) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3134]              __ret_0_ := c_s561;
[L2816]  RET         call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s323], amount_s323, -806116454);
[L2817]  COND FALSE  !(revert)
[L2820]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s323];
[L2821]              _balances_ERC20[this][sender_s323] := __var_14;
[L2822]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s323];
[L2823]  CALL        call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s323], amount_s323);
[L3105]              c_s534 := (a_s534 + b_s534) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3106]  COND FALSE  !(!(c_s534 >= a_s534))
[L3110]              __ret_0_ := c_s534;
[L2823]  RET         call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s323], amount_s323);
[L2824]  COND FALSE  !(revert)
[L2827]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s323];
[L2828]              _balances_ERC20[this][recipient_s323] := __var_15;
[L2829]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s323];
[L2830]              assert { :EventEmitted "Transfer_ERC20" } true;
[L2501]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s211, recipient_s211, amount_s211);
[L2502]  COND FALSE  !(revert)
[L2513]  COND TRUE   DType[this] == YFV
[L2514]  CALL        call __var_3 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2200]              __ret_0_ := msgsender_MSG;
[L2514]  RET         call __var_3 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2515]  COND FALSE  !(revert)
[L2526]  COND TRUE   DType[this] == YFV
[L2527]  CALL        call __var_5 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2200]              __ret_0_ := msgsender_MSG;
[L2527]  RET         call __var_5 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2528]  COND FALSE  !(revert)
[L2539]  CALL        call __var_4 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s211][__var_5], amount_s211, -2057360831);
[L3129]  COND FALSE  !(!(b_s561 <= a_s561))
[L3133]              c_s561 := (a_s561 - b_s561) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3134]              __ret_0_ := c_s561;
[L2539]  RET         call __var_4 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s211][__var_5], amount_s211, -2057360831);
[L2540]  COND FALSE  !(revert)
[L2543]  COND TRUE   DType[this] == YFV
[L2544]  CALL        call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s211, __var_3, __var_4);
[L2954]              __var_22 := null;
[L2955]  COND FALSE  !(!(owner_s453 != null))
[L2959]              __var_23 := null;
[L2960]  COND FALSE  !(!(spender_s453 != null))
[L2964]              sum__allowances1[owner_s453] := sum__allowances1[owner_s453] - _allowances_ERC20[this][owner_s453][spender_s453];
[L2965]              _allowances_ERC20[this][owner_s453][spender_s453] := amount_s453;
[L2966]              sum__allowances1[owner_s453] := sum__allowances1[owner_s453] + _allowances_ERC20[this][owner_s453][spender_s453];
[L2967]              assert { :EventEmitted "Approval_ERC20" } true;
[L2544]  RET         call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s211, __var_3, __var_4);
[L2545]  COND FALSE  !(revert)
[L2556]              __ret_0_ := true;
[L599]   RET         call __ret_0_ := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s211, recipient_s211, amount_s211);
[L600]               assume !revert && gas >= 0;
[L4895]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, sender_s211, recipient_s211, amount_s211);
[L4991]  RET         call CorralChoice_YFV(this);
[L4991]  CALL        call CorralChoice_YFV(this);
[L4804]              havoc msgsender_MSG;
[L4805]              havoc msgvalue_MSG;
[L4806]              havoc choice;
[L4807]              havoc __ret_0_totalSupply;
[L4808]              havoc account_s121;
[L4809]              havoc __ret_0_balanceOf;
[L4810]              havoc recipient_s140;
[L4811]              havoc amount_s140;
[L4812]              havoc __ret_0_transfer;
[L4813]              havoc owner_s156;
[L4814]              havoc spender_s156;
[L4815]              havoc __ret_0_allowance;
[L4816]              havoc spender_s175;
[L4817]              havoc amount_s175;
[L4818]              havoc __ret_0_approve;
[L4819]              havoc sender_s211;
[L4820]              havoc recipient_s211;
[L4821]              havoc amount_s211;
[L4822]              havoc __ret_0_transferFrom;
[L4823]              havoc spender_s238;
[L4824]              havoc addedValue_s238;
[L4825]              havoc __ret_0_increaseAllowance;
[L4826]              havoc spender_s266;
[L4827]              havoc subtractedValue_s266;
[L4828]              havoc __ret_0_decreaseAllowance;
[L4829]              havoc name_s484;
[L4830]              havoc symbol_s484;
[L4831]              havoc decimals_s484;
[L4832]              havoc __ret_0_name;
[L4833]              havoc __ret_0_symbol;
[L4834]              havoc __ret_0_decimals;
[L4835]              havoc __ret_0_governance;
[L4836]              havoc arg744_s0;
[L4837]              havoc __ret_0_minters;
[L4838]              havoc account_s671;
[L4839]              havoc amount_s671;
[L4840]              havoc amount_s683;
[L4841]              havoc _governance_s701;
[L4842]              havoc _minter_s721;
[L4843]              havoc _minter_s741;
[L4844]              havoc tmpNow;
[L4845]              havoc gas;
[L4846]              assume gas > 4000000 && gas <= 8000000;
[L4847]              tmpNow := now;
[L4848]              havoc now;
[L4849]              assume now > tmpNow;
[L4850]              assume msgsender_MSG != null;
[L4851]              assume DType[msgsender_MSG] != IERC20;
[L4852]              assume DType[msgsender_MSG] != Context;
[L4853]              assume DType[msgsender_MSG] != ERC20;
[L4854]              assume DType[msgsender_MSG] != ERC20Detailed;
[L4855]              assume DType[msgsender_MSG] != SafeMath;
[L4856]              assume DType[msgsender_MSG] != YFV;
[L4857]              Alloc[msgsender_MSG] := true;
[L4858]  COND FALSE  !(choice == 18)
[L4864]  COND FALSE  !(choice == 17)
[L4870]  COND TRUE   choice == 16
[L4871]              gas := gas - 21000;
[L4872]  COND TRUE   gas >= 0
[L4873]              assume amount_s140 >= 0 && amount_s140 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4874]              assume msgvalue_MSG == 0;
[L4875]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((msgsender_MSG == recipient_s140 && amount_s140 <= _balances_ERC20[this][msgsender_MSG]) && amount_s140 >= 0) && amount_s140 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s140] >= 0) && _balances_ERC20[this][recipient_s140] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2]                 revert := revert_hold;
[L392]               havoc __exception;
[L393]               revert := false;
[L394]   COND FALSE  !(__exception)
[L419]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L2322]  COND TRUE   DType[this] == YFV
[L2323]  CALL        call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2200]              __ret_0_ := msgsender_MSG;
[L2323]  RET         call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2324]  COND FALSE  !(revert)
[L2335]  COND TRUE   DType[this] == YFV
[L2336]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s140, amount_s140);
[L2806]              __var_12 := null;
[L2807]  COND FALSE  !(!(sender_s323 != null))
[L2811]              __var_13 := null;
[L2812]  COND FALSE  !(!(recipient_s323 != null))
[L2816]  CALL        call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s323], amount_s323, -806116454);
[L3129]  COND FALSE  !(!(b_s561 <= a_s561))
[L3133]              c_s561 := (a_s561 - b_s561) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3134]              __ret_0_ := c_s561;
[L2816]  RET         call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s323], amount_s323, -806116454);
[L2817]  COND FALSE  !(revert)
[L2820]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s323];
[L2821]              _balances_ERC20[this][sender_s323] := __var_14;
[L2822]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s323];
[L2823]  CALL        call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s323], amount_s323);
[L3105]              c_s534 := (a_s534 + b_s534) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3106]  COND FALSE  !(!(c_s534 >= a_s534))
[L3110]              __ret_0_ := c_s534;
[L2823]  RET         call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s323], amount_s323);
[L2824]  COND FALSE  !(revert)
[L2827]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s323];
[L2828]              _balances_ERC20[this][recipient_s323] := __var_15;
[L2829]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s323];
[L2830]              assert { :EventEmitted "Transfer_ERC20" } true;
[L2336]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s140, amount_s140);
[L2337]  COND FALSE  !(revert)
[L2348]              __ret_0_ := true;
[L419]   RET         call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L420]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !((((((((__ret_0_ == true && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowances_ERC20[this] == old(_allowances_ERC20[this])) && governance_YFV[this] == old(governance_YFV[this])) && minters_YFV[this] == old(minters_YFV[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]));
[L2]                 revert := revert_hold;
[L4875]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L4991]  RET         call CorralChoice_YFV(this);
[L4991]  CALL        call CorralChoice_YFV(this);
[L4804]              havoc msgsender_MSG;
[L4805]              havoc msgvalue_MSG;
[L4806]              havoc choice;
[L4807]              havoc __ret_0_totalSupply;
[L4808]              havoc account_s121;
[L4809]              havoc __ret_0_balanceOf;
[L4810]              havoc recipient_s140;
[L4811]              havoc amount_s140;
[L4812]              havoc __ret_0_transfer;
[L4813]              havoc owner_s156;
[L4814]              havoc spender_s156;
[L4815]              havoc __ret_0_allowance;
[L4816]              havoc spender_s175;
[L4817]              havoc amount_s175;
[L4818]              havoc __ret_0_approve;
[L4819]              havoc sender_s211;
[L4820]              havoc recipient_s211;
[L4821]              havoc amount_s211;
[L4822]              havoc __ret_0_transferFrom;
[L4823]              havoc spender_s238;
[L4824]              havoc addedValue_s238;
[L4825]              havoc __ret_0_increaseAllowance;
[L4826]              havoc spender_s266;
[L4827]              havoc subtractedValue_s266;
[L4828]              havoc __ret_0_decreaseAllowance;
[L4829]              havoc name_s484;
[L4830]              havoc symbol_s484;
[L4831]              havoc decimals_s484;
[L4832]              havoc __ret_0_name;
[L4833]              havoc __ret_0_symbol;
[L4834]              havoc __ret_0_decimals;
[L4835]              havoc __ret_0_governance;
[L4836]              havoc arg744_s0;
[L4837]              havoc __ret_0_minters;
[L4838]              havoc account_s671;
[L4839]              havoc amount_s671;
[L4840]              havoc amount_s683;
[L4841]              havoc _governance_s701;
[L4842]              havoc _minter_s721;
[L4843]              havoc _minter_s741;
[L4844]              havoc tmpNow;
[L4845]              havoc gas;
[L4846]              assume gas > 4000000 && gas <= 8000000;
[L4847]              tmpNow := now;
[L4848]              havoc now;
[L4849]              assume now > tmpNow;
[L4850]              assume msgsender_MSG != null;
[L4851]              assume DType[msgsender_MSG] != IERC20;
[L4852]              assume DType[msgsender_MSG] != Context;
[L4853]              assume DType[msgsender_MSG] != ERC20;
[L4854]              assume DType[msgsender_MSG] != ERC20Detailed;
[L4855]              assume DType[msgsender_MSG] != SafeMath;
[L4856]              assume DType[msgsender_MSG] != YFV;
[L4857]              Alloc[msgsender_MSG] := true;
[L4858]  COND FALSE  !(choice == 18)
[L4864]  COND FALSE  !(choice == 17)
[L4870]  COND TRUE   choice == 16
[L4871]              gas := gas - 21000;
[L4872]  COND TRUE   gas >= 0
[L4873]              assume amount_s140 >= 0 && amount_s140 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4874]              assume msgvalue_MSG == 0;
[L4875]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == recipient_s140 && amount_s140 <= _balances_ERC20[this][msgsender_MSG]) && amount_s140 >= 0) && amount_s140 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s140] >= 0) && _balances_ERC20[this][recipient_s140] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC200 := true;
[L2]                 call_transfer_ERC200 := false;
[L2]                 revert := revert_hold;
[L392]               havoc __exception;
[L393]               revert := false;
[L394]   COND FALSE  !(__exception)
[L419]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L2322]  COND TRUE   DType[this] == YFV
[L2323]  CALL        call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2200]              __ret_0_ := msgsender_MSG;
[L2323]  RET         call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2324]  COND FALSE  !(revert)
[L2335]  COND TRUE   DType[this] == YFV
[L2336]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s140, amount_s140);
[L2806]              __var_12 := null;
[L2807]  COND FALSE  !(!(sender_s323 != null))
[L2811]              __var_13 := null;
[L2812]  COND FALSE  !(!(recipient_s323 != null))
[L2816]  CALL        call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s323], amount_s323, -806116454);
[L3129]  COND FALSE  !(!(b_s561 <= a_s561))
[L3133]              c_s561 := (a_s561 - b_s561) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3134]              __ret_0_ := c_s561;
[L2816]  RET         call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s323], amount_s323, -806116454);
[L2817]  COND FALSE  !(revert)
[L2820]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s323];
[L2821]              _balances_ERC20[this][sender_s323] := __var_14;
[L2822]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s323];
[L2823]  CALL        call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s323], amount_s323);
[L3105]              c_s534 := (a_s534 + b_s534) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3106]  COND FALSE  !(!(c_s534 >= a_s534))
[L3110]              __ret_0_ := c_s534;
[L2823]  RET         call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s323], amount_s323);
[L2824]  COND FALSE  !(revert)
[L2827]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s323];
[L2828]              _balances_ERC20[this][recipient_s323] := __var_15;
[L2829]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s323];
[L2830]              assert { :EventEmitted "Transfer_ERC20" } true;
[L2336]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s140, amount_s140);
[L2337]  COND FALSE  !(revert)
[L2348]              __ret_0_ := true;
[L419]   RET         call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L420]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !((((((((__ret_0_ == true && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowances_ERC20[this] == old(_allowances_ERC20[this])) && governance_YFV[this] == old(governance_YFV[this])) && minters_YFV[this] == old(minters_YFV[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]));
[L2]                 revert := revert_hold;
[L4875]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L4991]  RET         call CorralChoice_YFV(this);

Loop:
[L4991]  CALL        call CorralChoice_YFV(this);
[L4804]              havoc msgsender_MSG;
[L4805]              havoc msgvalue_MSG;
[L4806]              havoc choice;
[L4807]              havoc __ret_0_totalSupply;
[L4808]              havoc account_s121;
[L4809]              havoc __ret_0_balanceOf;
[L4810]              havoc recipient_s140;
[L4811]              havoc amount_s140;
[L4812]              havoc __ret_0_transfer;
[L4813]              havoc owner_s156;
[L4814]              havoc spender_s156;
[L4815]              havoc __ret_0_allowance;
[L4816]              havoc spender_s175;
[L4817]              havoc amount_s175;
[L4818]              havoc __ret_0_approve;
[L4819]              havoc sender_s211;
[L4820]              havoc recipient_s211;
[L4821]              havoc amount_s211;
[L4822]              havoc __ret_0_transferFrom;
[L4823]              havoc spender_s238;
[L4824]              havoc addedValue_s238;
[L4825]              havoc __ret_0_increaseAllowance;
[L4826]              havoc spender_s266;
[L4827]              havoc subtractedValue_s266;
[L4828]              havoc __ret_0_decreaseAllowance;
[L4829]              havoc name_s484;
[L4830]              havoc symbol_s484;
[L4831]              havoc decimals_s484;
[L4832]              havoc __ret_0_name;
[L4833]              havoc __ret_0_symbol;
[L4834]              havoc __ret_0_decimals;
[L4835]              havoc __ret_0_governance;
[L4836]              havoc arg744_s0;
[L4837]              havoc __ret_0_minters;
[L4838]              havoc account_s671;
[L4839]              havoc amount_s671;
[L4840]              havoc amount_s683;
[L4841]              havoc _governance_s701;
[L4842]              havoc _minter_s721;
[L4843]              havoc _minter_s741;
[L4844]              havoc tmpNow;
[L4845]              havoc gas;
[L4846]              assume gas > 4000000 && gas <= 8000000;
[L4847]              tmpNow := now;
[L4848]              havoc now;
[L4849]              assume now > tmpNow;
[L4850]              assume msgsender_MSG != null;
[L4851]              assume DType[msgsender_MSG] != IERC20;
[L4852]              assume DType[msgsender_MSG] != Context;
[L4853]              assume DType[msgsender_MSG] != ERC20;
[L4854]              assume DType[msgsender_MSG] != ERC20Detailed;
[L4855]              assume DType[msgsender_MSG] != SafeMath;
[L4856]              assume DType[msgsender_MSG] != YFV;
[L4857]              Alloc[msgsender_MSG] := true;
[L4858]  COND TRUE   choice == 18
[L4859]              gas := gas - 21000;
[L4860]  COND FALSE  !(gas >= 0)
[L4991]  RET         call CorralChoice_YFV(this);

[2020-11-25 09:43:41,222 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 09:43:41,222 INFO  L82        PathProgramCache]: Analyzing trace with hash 1021953768, now seen corresponding path program 1 times
[2020-11-25 09:43:41,223 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 09:43:41,322 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 09:43:44,134 WARN  L188               SmtUtils]: Spent 177.00 ms on a formula simplification. DAG size of input: 259 DAG size of output: 23
[2020-11-25 09:43:45,032 WARN  L188               SmtUtils]: Spent 104.00 ms on a formula simplification. DAG size of input: 253 DAG size of output: 21
[2020-11-25 09:43:48,118 INFO  L134       CoverageAnalysis]: Checked inductivity of 878 backedges. 49 proven. 494 refuted. 0 times theorem prover too weak. 335 trivial. 0 not checked.
[2020-11-25 09:43:48,118 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 09:43:48,118 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [83] total 83
[2020-11-25 09:43:48,119 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 09:43:48,119 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 84 interpolants.
[2020-11-25 09:43:48,120 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=462, Invalid=6510, Unknown=0, NotChecked=0, Total=6972
[2020-11-25 09:43:48,120 INFO  L87              Difference]: Start difference. First operand 3973 states and 5114 transitions. cyclomatic complexity: 1207 Second operand 84 states.
[2020-11-25 09:44:16,976 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 09:44:16,976 INFO  L93              Difference]: Finished difference Result 4800 states and 6767 transitions.
[2020-11-25 09:44:16,976 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 65 states. 
[2020-11-25 09:44:16,976 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 4800 states and 6767 transitions.
[2020-11-25 09:44:16,990 INFO  L131   ngComponentsAnalysis]: Automaton has 11 accepting balls. 22
[2020-11-25 09:44:17,006 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 4800 states to 4800 states and 6767 transitions.
[2020-11-25 09:44:17,006 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1432
[2020-11-25 09:44:17,007 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1432
[2020-11-25 09:44:17,007 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 4800 states and 6767 transitions.
[2020-11-25 09:44:17,012 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 09:44:17,012 INFO  L728         BuchiCegarLoop]: Abstraction has 4800 states and 6767 transitions.
[2020-11-25 09:44:17,014 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 4800 states and 6767 transitions.
[2020-11-25 09:44:17,040 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 4800 to 3853.
[2020-11-25 09:44:17,040 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 3853 states.
[2020-11-25 09:44:17,048 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 3853 states to 3853 states and 5194 transitions.
[2020-11-25 09:44:17,048 INFO  L751         BuchiCegarLoop]: Abstraction has 3853 states and 5194 transitions.
[2020-11-25 09:44:17,048 INFO  L631         BuchiCegarLoop]: Abstraction has 3853 states and 5194 transitions.
[2020-11-25 09:44:17,048 INFO  L445         BuchiCegarLoop]: ======== Iteration 33============
[2020-11-25 09:44:17,048 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 3853 states and 5194 transitions.
[2020-11-25 09:44:17,052 INFO  L131   ngComponentsAnalysis]: Automaton has 7 accepting balls. 14
[2020-11-25 09:44:17,052 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 09:44:17,052 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 09:44:17,053 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 09:44:17,054 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_ERC200 := false;
[L2]                 call_transfer_ERC200 := false;
[L2]     CALL        call main();
[L4981]              assume null == 0;
[L4982]  CALL        call this := FreshRefGenerator__success();
[L2122]              havoc newRef;
[L2123]              assume Alloc[newRef] == false;
[L2124]              Alloc[newRef] := true;
[L2125]              assume newRef != null;
[L4982]  RET         call this := FreshRefGenerator__success();
[L4983]              assume now >= 0;
[L4984]              assume DType[this] == YFV;
[L4985]              assume msgvalue_MSG == 0;
[L4986]              gas := gas - 53000;
[L4987]  CALL        call YFV_YFV(this, msgsender_MSG, msgvalue_MSG);
[L1098]              havoc __exception;
[L1099]              revert := false;
[L1100]  COND FALSE  !(__exception)
[L1125]  CALL        call YFV_YFV__success(this, msgsender_MSG, msgvalue_MSG);
[L3242]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2186]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2171]              assume msgsender_MSG != null;
[L2172]              Balance[this] := 0;
[L2186]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2187]  COND FALSE  !(revert)
[L3242]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3243]  COND FALSE  !(revert)
[L3246]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2154]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2139]              assume msgsender_MSG != null;
[L2140]              Balance[this] := 0;
[L2154]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2155]  COND FALSE  !(revert)
[L3246]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3247]  COND FALSE  !(revert)
[L3250]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2248]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2186]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2171]              assume msgsender_MSG != null;
[L2172]              Balance[this] := 0;
[L2186]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2187]  COND FALSE  !(revert)
[L2248]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2249]  COND FALSE  !(revert)
[L2252]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2154]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2139]              assume msgsender_MSG != null;
[L2140]              Balance[this] := 0;
[L2154]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2155]  COND FALSE  !(revert)
[L2252]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2253]  COND FALSE  !(revert)
[L2256]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2220]              assume msgsender_MSG != null;
[L2221]              Balance[this] := 0;
[L2222]              _balances_ERC20[this] := zeroRefintArr();
[L2223]              sum__balances0[this] := 0;
[L2224]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2225]              sum__allowances1[this] := 0;
[L2226]              _totalSupply_ERC20[this] := 0;
[L2256]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2257]  COND FALSE  !(revert)
[L3250]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3251]  COND FALSE  !(revert)
[L3254]  CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -868984158, 934069305, 18);
[L3012]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2154]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2139]              assume msgsender_MSG != null;
[L2140]              Balance[this] := 0;
[L2154]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2155]  COND FALSE  !(revert)
[L3012]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3013]  COND FALSE  !(revert)
[L3016]  CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s484, symbol_s484, decimals_s484);
[L2987]              assume msgsender_MSG != null;
[L2988]              Balance[this] := 0;
[L2989]              _name_ERC20Detailed[this] := 1252836592;
[L2990]              _symbol_ERC20Detailed[this] := 1252836592;
[L2991]              _decimals_ERC20Detailed[this] := 0;
[L2993]              _name_ERC20Detailed[this] := name_s484;
[L2994]              _symbol_ERC20Detailed[this] := symbol_s484;
[L2995]              _decimals_ERC20Detailed[this] := decimals_s484;
[L3016]  RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s484, symbol_s484, decimals_s484);
[L3017]  COND FALSE  !(revert)
[L3254]  RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -868984158, 934069305, 18);
[L3255]  COND FALSE  !(revert)
[L3258]  CALL        call YFV_YFV_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3208]              assume msgsender_MSG != null;
[L3209]              Balance[this] := 0;
[L3210]              governance_YFV[this] := null;
[L3211]              minters_YFV[this] := zeroRefboolArr();
[L3213]              governance_YFV[this] := msgsender_MSG;
[L3258]  RET         call YFV_YFV_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3259]  COND FALSE  !(revert)
[L1125]  RET         call YFV_YFV__success(this, msgsender_MSG, msgvalue_MSG);
[L1126]              assume !revert && gas >= 0;
[L4987]  RET         call YFV_YFV(this, msgsender_MSG, msgvalue_MSG);
[L4988]              assume !revert && gas >= 0;
[L4991]  CALL        call CorralChoice_YFV(this);
[L4804]              havoc msgsender_MSG;
[L4805]              havoc msgvalue_MSG;
[L4806]              havoc choice;
[L4807]              havoc __ret_0_totalSupply;
[L4808]              havoc account_s121;
[L4809]              havoc __ret_0_balanceOf;
[L4810]              havoc recipient_s140;
[L4811]              havoc amount_s140;
[L4812]              havoc __ret_0_transfer;
[L4813]              havoc owner_s156;
[L4814]              havoc spender_s156;
[L4815]              havoc __ret_0_allowance;
[L4816]              havoc spender_s175;
[L4817]              havoc amount_s175;
[L4818]              havoc __ret_0_approve;
[L4819]              havoc sender_s211;
[L4820]              havoc recipient_s211;
[L4821]              havoc amount_s211;
[L4822]              havoc __ret_0_transferFrom;
[L4823]              havoc spender_s238;
[L4824]              havoc addedValue_s238;
[L4825]              havoc __ret_0_increaseAllowance;
[L4826]              havoc spender_s266;
[L4827]              havoc subtractedValue_s266;
[L4828]              havoc __ret_0_decreaseAllowance;
[L4829]              havoc name_s484;
[L4830]              havoc symbol_s484;
[L4831]              havoc decimals_s484;
[L4832]              havoc __ret_0_name;
[L4833]              havoc __ret_0_symbol;
[L4834]              havoc __ret_0_decimals;
[L4835]              havoc __ret_0_governance;
[L4836]              havoc arg744_s0;
[L4837]              havoc __ret_0_minters;
[L4838]              havoc account_s671;
[L4839]              havoc amount_s671;
[L4840]              havoc amount_s683;
[L4841]              havoc _governance_s701;
[L4842]              havoc _minter_s721;
[L4843]              havoc _minter_s741;
[L4844]              havoc tmpNow;
[L4845]              havoc gas;
[L4846]              assume gas > 4000000 && gas <= 8000000;
[L4847]              tmpNow := now;
[L4848]              havoc now;
[L4849]              assume now > tmpNow;
[L4850]              assume msgsender_MSG != null;
[L4851]              assume DType[msgsender_MSG] != IERC20;
[L4852]              assume DType[msgsender_MSG] != Context;
[L4853]              assume DType[msgsender_MSG] != ERC20;
[L4854]              assume DType[msgsender_MSG] != ERC20Detailed;
[L4855]              assume DType[msgsender_MSG] != SafeMath;
[L4856]              assume DType[msgsender_MSG] != YFV;
[L4857]              Alloc[msgsender_MSG] := true;
[L4858]  COND FALSE  !(choice == 18)
[L4864]  COND FALSE  !(choice == 17)
[L4870]  COND FALSE  !(choice == 16)
[L4877]  COND FALSE  !(choice == 15)
[L4883]  COND FALSE  !(choice == 14)
[L4890]  COND FALSE  !(choice == 13)
[L4897]  COND FALSE  !(choice == 12)
[L4904]  COND FALSE  !(choice == 11)
[L4911]  COND FALSE  !(choice == 10)
[L4917]  COND FALSE  !(choice == 9)
[L4923]  COND FALSE  !(choice == 8)
[L4929]  COND FALSE  !(choice == 7)
[L4935]  COND FALSE  !(choice == 6)
[L4941]  COND FALSE  !(choice == 5)
[L4948]  COND TRUE   choice == 4
[L4949]              gas := gas - 21000;
[L4950]  COND TRUE   gas >= 0
[L4951]              assume amount_s683 >= 0 && amount_s683 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4952]              assume msgvalue_MSG == 0;
[L4953]  CALL        call burn~uint256_YFV(this, msgsender_MSG, msgvalue_MSG, amount_s683);
[L1220]              havoc __exception;
[L1221]              revert := false;
[L1222]  COND FALSE  !(__exception)
[L1247]  CALL        call burn~uint256_YFV__success(this, msgsender_MSG, msgvalue_MSG, amount_s683);
[L3310]  COND TRUE   DType[this] == YFV
[L3311]  CALL        call _burn~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, amount_s683);
[L2911]              __var_19 := null;
[L2912]  COND FALSE  !(!(account_s411 != null))
[L2916]  CALL        call __var_20 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s411], amount_s411, 392639254);
[L3129]  COND FALSE  !(!(b_s561 <= a_s561))
[L3133]              c_s561 := (a_s561 - b_s561) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3134]              __ret_0_ := c_s561;
[L2916]  RET         call __var_20 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s411], amount_s411, 392639254);
[L2917]  COND FALSE  !(revert)
[L2920]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s411];
[L2921]              _balances_ERC20[this][account_s411] := __var_20;
[L2922]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s411];
[L2923]  CALL        call __var_21 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s411, 1252836592);
[L3129]  COND FALSE  !(!(b_s561 <= a_s561))
[L3133]              c_s561 := (a_s561 - b_s561) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3134]              __ret_0_ := c_s561;
[L2923]  RET         call __var_21 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s411, 1252836592);
[L2924]  COND FALSE  !(revert)
[L2927]              _totalSupply_ERC20[this] := __var_21;
[L2928]              assert { :EventEmitted "Transfer_ERC20" } true;
[L3311]  RET         call _burn~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, amount_s683);
[L3312]  COND FALSE  !(revert)
[L1247]  RET         call burn~uint256_YFV__success(this, msgsender_MSG, msgvalue_MSG, amount_s683);
[L1248]              assume !revert && gas >= 0;
[L4953]  RET         call burn~uint256_YFV(this, msgsender_MSG, msgvalue_MSG, amount_s683);
[L4991]  RET         call CorralChoice_YFV(this);
[L4991]  CALL        call CorralChoice_YFV(this);
[L4804]              havoc msgsender_MSG;
[L4805]              havoc msgvalue_MSG;
[L4806]              havoc choice;
[L4807]              havoc __ret_0_totalSupply;
[L4808]              havoc account_s121;
[L4809]              havoc __ret_0_balanceOf;
[L4810]              havoc recipient_s140;
[L4811]              havoc amount_s140;
[L4812]              havoc __ret_0_transfer;
[L4813]              havoc owner_s156;
[L4814]              havoc spender_s156;
[L4815]              havoc __ret_0_allowance;
[L4816]              havoc spender_s175;
[L4817]              havoc amount_s175;
[L4818]              havoc __ret_0_approve;
[L4819]              havoc sender_s211;
[L4820]              havoc recipient_s211;
[L4821]              havoc amount_s211;
[L4822]              havoc __ret_0_transferFrom;
[L4823]              havoc spender_s238;
[L4824]              havoc addedValue_s238;
[L4825]              havoc __ret_0_increaseAllowance;
[L4826]              havoc spender_s266;
[L4827]              havoc subtractedValue_s266;
[L4828]              havoc __ret_0_decreaseAllowance;
[L4829]              havoc name_s484;
[L4830]              havoc symbol_s484;
[L4831]              havoc decimals_s484;
[L4832]              havoc __ret_0_name;
[L4833]              havoc __ret_0_symbol;
[L4834]              havoc __ret_0_decimals;
[L4835]              havoc __ret_0_governance;
[L4836]              havoc arg744_s0;
[L4837]              havoc __ret_0_minters;
[L4838]              havoc account_s671;
[L4839]              havoc amount_s671;
[L4840]              havoc amount_s683;
[L4841]              havoc _governance_s701;
[L4842]              havoc _minter_s721;
[L4843]              havoc _minter_s741;
[L4844]              havoc tmpNow;
[L4845]              havoc gas;
[L4846]              assume gas > 4000000 && gas <= 8000000;
[L4847]              tmpNow := now;
[L4848]              havoc now;
[L4849]              assume now > tmpNow;
[L4850]              assume msgsender_MSG != null;
[L4851]              assume DType[msgsender_MSG] != IERC20;
[L4852]              assume DType[msgsender_MSG] != Context;
[L4853]              assume DType[msgsender_MSG] != ERC20;
[L4854]              assume DType[msgsender_MSG] != ERC20Detailed;
[L4855]              assume DType[msgsender_MSG] != SafeMath;
[L4856]              assume DType[msgsender_MSG] != YFV;
[L4857]              Alloc[msgsender_MSG] := true;
[L4858]  COND FALSE  !(choice == 18)
[L4864]  COND FALSE  !(choice == 17)
[L4870]  COND TRUE   choice == 16
[L4871]              gas := gas - 21000;
[L4872]  COND TRUE   gas >= 0
[L4873]              assume amount_s140 >= 0 && amount_s140 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4874]              assume msgvalue_MSG == 0;
[L4875]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((msgsender_MSG == recipient_s140 && amount_s140 <= _balances_ERC20[this][msgsender_MSG]) && amount_s140 >= 0) && amount_s140 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s140] >= 0) && _balances_ERC20[this][recipient_s140] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2]                 revert := revert_hold;
[L392]               havoc __exception;
[L393]               revert := false;
[L394]   COND FALSE  !(__exception)
[L419]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L2322]  COND TRUE   DType[this] == YFV
[L2323]  CALL        call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2200]              __ret_0_ := msgsender_MSG;
[L2323]  RET         call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2324]  COND FALSE  !(revert)
[L2335]  COND TRUE   DType[this] == YFV
[L2336]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s140, amount_s140);
[L2806]              __var_12 := null;
[L2807]  COND FALSE  !(!(sender_s323 != null))
[L2811]              __var_13 := null;
[L2812]  COND FALSE  !(!(recipient_s323 != null))
[L2816]  CALL        call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s323], amount_s323, -806116454);
[L3129]  COND FALSE  !(!(b_s561 <= a_s561))
[L3133]              c_s561 := (a_s561 - b_s561) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3134]              __ret_0_ := c_s561;
[L2816]  RET         call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s323], amount_s323, -806116454);
[L2817]  COND FALSE  !(revert)
[L2820]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s323];
[L2821]              _balances_ERC20[this][sender_s323] := __var_14;
[L2822]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s323];
[L2823]  CALL        call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s323], amount_s323);
[L3105]              c_s534 := (a_s534 + b_s534) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3106]  COND FALSE  !(!(c_s534 >= a_s534))
[L3110]              __ret_0_ := c_s534;
[L2823]  RET         call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s323], amount_s323);
[L2824]  COND FALSE  !(revert)
[L2827]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s323];
[L2828]              _balances_ERC20[this][recipient_s323] := __var_15;
[L2829]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s323];
[L2830]              assert { :EventEmitted "Transfer_ERC20" } true;
[L2336]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s140, amount_s140);
[L2337]  COND FALSE  !(revert)
[L2348]              __ret_0_ := true;
[L419]   RET         call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L420]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume (((((((__ret_0_ == true && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowances_ERC20[this] == old(_allowances_ERC20[this])) && governance_YFV[this] == old(governance_YFV[this])) && minters_YFV[this] == old(minters_YFV[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]);
[L2]                 success_transfer_ERC200 := true;
[L2]                 success_transfer_ERC200 := false;
[L2]                 revert := revert_hold;
[L4875]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L4991]  RET         call CorralChoice_YFV(this);
[L4991]  CALL        call CorralChoice_YFV(this);
[L4804]              havoc msgsender_MSG;
[L4805]              havoc msgvalue_MSG;
[L4806]              havoc choice;
[L4807]              havoc __ret_0_totalSupply;
[L4808]              havoc account_s121;
[L4809]              havoc __ret_0_balanceOf;
[L4810]              havoc recipient_s140;
[L4811]              havoc amount_s140;
[L4812]              havoc __ret_0_transfer;
[L4813]              havoc owner_s156;
[L4814]              havoc spender_s156;
[L4815]              havoc __ret_0_allowance;
[L4816]              havoc spender_s175;
[L4817]              havoc amount_s175;
[L4818]              havoc __ret_0_approve;
[L4819]              havoc sender_s211;
[L4820]              havoc recipient_s211;
[L4821]              havoc amount_s211;
[L4822]              havoc __ret_0_transferFrom;
[L4823]              havoc spender_s238;
[L4824]              havoc addedValue_s238;
[L4825]              havoc __ret_0_increaseAllowance;
[L4826]              havoc spender_s266;
[L4827]              havoc subtractedValue_s266;
[L4828]              havoc __ret_0_decreaseAllowance;
[L4829]              havoc name_s484;
[L4830]              havoc symbol_s484;
[L4831]              havoc decimals_s484;
[L4832]              havoc __ret_0_name;
[L4833]              havoc __ret_0_symbol;
[L4834]              havoc __ret_0_decimals;
[L4835]              havoc __ret_0_governance;
[L4836]              havoc arg744_s0;
[L4837]              havoc __ret_0_minters;
[L4838]              havoc account_s671;
[L4839]              havoc amount_s671;
[L4840]              havoc amount_s683;
[L4841]              havoc _governance_s701;
[L4842]              havoc _minter_s721;
[L4843]              havoc _minter_s741;
[L4844]              havoc tmpNow;
[L4845]              havoc gas;
[L4846]              assume gas > 4000000 && gas <= 8000000;
[L4847]              tmpNow := now;
[L4848]              havoc now;
[L4849]              assume now > tmpNow;
[L4850]              assume msgsender_MSG != null;
[L4851]              assume DType[msgsender_MSG] != IERC20;
[L4852]              assume DType[msgsender_MSG] != Context;
[L4853]              assume DType[msgsender_MSG] != ERC20;
[L4854]              assume DType[msgsender_MSG] != ERC20Detailed;
[L4855]              assume DType[msgsender_MSG] != SafeMath;
[L4856]              assume DType[msgsender_MSG] != YFV;
[L4857]              Alloc[msgsender_MSG] := true;
[L4858]  COND FALSE  !(choice == 18)
[L4864]  COND FALSE  !(choice == 17)
[L4870]  COND FALSE  !(choice == 16)
[L4877]  COND FALSE  !(choice == 15)
[L4883]  COND FALSE  !(choice == 14)
[L4890]  COND TRUE   choice == 13
[L4891]              gas := gas - 21000;
[L4892]  COND TRUE   gas >= 0
[L4893]              assume amount_s211 >= 0 && amount_s211 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4894]              assume msgvalue_MSG == 0;
[L4895]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, sender_s211, recipient_s211, amount_s211);
[L572]               havoc __exception;
[L573]               revert := false;
[L574]   COND FALSE  !(__exception)
[L599]   CALL        call __ret_0_ := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s211, recipient_s211, amount_s211);
[L2500]  COND TRUE   DType[this] == YFV
[L2501]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s211, recipient_s211, amount_s211);
[L2806]              __var_12 := null;
[L2807]  COND FALSE  !(!(sender_s323 != null))
[L2811]              __var_13 := null;
[L2812]  COND FALSE  !(!(recipient_s323 != null))
[L2816]  CALL        call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s323], amount_s323, -806116454);
[L3129]  COND FALSE  !(!(b_s561 <= a_s561))
[L3133]              c_s561 := (a_s561 - b_s561) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3134]              __ret_0_ := c_s561;
[L2816]  RET         call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s323], amount_s323, -806116454);
[L2817]  COND FALSE  !(revert)
[L2820]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s323];
[L2821]              _balances_ERC20[this][sender_s323] := __var_14;
[L2822]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s323];
[L2823]  CALL        call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s323], amount_s323);
[L3105]              c_s534 := (a_s534 + b_s534) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3106]  COND FALSE  !(!(c_s534 >= a_s534))
[L3110]              __ret_0_ := c_s534;
[L2823]  RET         call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s323], amount_s323);
[L2824]  COND FALSE  !(revert)
[L2827]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s323];
[L2828]              _balances_ERC20[this][recipient_s323] := __var_15;
[L2829]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s323];
[L2830]              assert { :EventEmitted "Transfer_ERC20" } true;
[L2501]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s211, recipient_s211, amount_s211);
[L2502]  COND FALSE  !(revert)
[L2513]  COND TRUE   DType[this] == YFV
[L2514]  CALL        call __var_3 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2200]              __ret_0_ := msgsender_MSG;
[L2514]  RET         call __var_3 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2515]  COND FALSE  !(revert)
[L2526]  COND TRUE   DType[this] == YFV
[L2527]  CALL        call __var_5 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2200]              __ret_0_ := msgsender_MSG;
[L2527]  RET         call __var_5 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2528]  COND FALSE  !(revert)
[L2539]  CALL        call __var_4 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s211][__var_5], amount_s211, -2057360831);
[L3129]  COND FALSE  !(!(b_s561 <= a_s561))
[L3133]              c_s561 := (a_s561 - b_s561) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3134]              __ret_0_ := c_s561;
[L2539]  RET         call __var_4 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s211][__var_5], amount_s211, -2057360831);
[L2540]  COND FALSE  !(revert)
[L2543]  COND TRUE   DType[this] == YFV
[L2544]  CALL        call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s211, __var_3, __var_4);
[L2954]              __var_22 := null;
[L2955]  COND FALSE  !(!(owner_s453 != null))
[L2959]              __var_23 := null;
[L2960]  COND FALSE  !(!(spender_s453 != null))
[L2964]              sum__allowances1[owner_s453] := sum__allowances1[owner_s453] - _allowances_ERC20[this][owner_s453][spender_s453];
[L2965]              _allowances_ERC20[this][owner_s453][spender_s453] := amount_s453;
[L2966]              sum__allowances1[owner_s453] := sum__allowances1[owner_s453] + _allowances_ERC20[this][owner_s453][spender_s453];
[L2967]              assert { :EventEmitted "Approval_ERC20" } true;
[L2544]  RET         call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s211, __var_3, __var_4);
[L2545]  COND FALSE  !(revert)
[L2556]              __ret_0_ := true;
[L599]   RET         call __ret_0_ := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s211, recipient_s211, amount_s211);
[L600]               assume !revert && gas >= 0;
[L4895]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, sender_s211, recipient_s211, amount_s211);
[L4991]  RET         call CorralChoice_YFV(this);
[L4991]  CALL        call CorralChoice_YFV(this);
[L4804]              havoc msgsender_MSG;
[L4805]              havoc msgvalue_MSG;
[L4806]              havoc choice;
[L4807]              havoc __ret_0_totalSupply;
[L4808]              havoc account_s121;
[L4809]              havoc __ret_0_balanceOf;
[L4810]              havoc recipient_s140;
[L4811]              havoc amount_s140;
[L4812]              havoc __ret_0_transfer;
[L4813]              havoc owner_s156;
[L4814]              havoc spender_s156;
[L4815]              havoc __ret_0_allowance;
[L4816]              havoc spender_s175;
[L4817]              havoc amount_s175;
[L4818]              havoc __ret_0_approve;
[L4819]              havoc sender_s211;
[L4820]              havoc recipient_s211;
[L4821]              havoc amount_s211;
[L4822]              havoc __ret_0_transferFrom;
[L4823]              havoc spender_s238;
[L4824]              havoc addedValue_s238;
[L4825]              havoc __ret_0_increaseAllowance;
[L4826]              havoc spender_s266;
[L4827]              havoc subtractedValue_s266;
[L4828]              havoc __ret_0_decreaseAllowance;
[L4829]              havoc name_s484;
[L4830]              havoc symbol_s484;
[L4831]              havoc decimals_s484;
[L4832]              havoc __ret_0_name;
[L4833]              havoc __ret_0_symbol;
[L4834]              havoc __ret_0_decimals;
[L4835]              havoc __ret_0_governance;
[L4836]              havoc arg744_s0;
[L4837]              havoc __ret_0_minters;
[L4838]              havoc account_s671;
[L4839]              havoc amount_s671;
[L4840]              havoc amount_s683;
[L4841]              havoc _governance_s701;
[L4842]              havoc _minter_s721;
[L4843]              havoc _minter_s741;
[L4844]              havoc tmpNow;
[L4845]              havoc gas;
[L4846]              assume gas > 4000000 && gas <= 8000000;
[L4847]              tmpNow := now;
[L4848]              havoc now;
[L4849]              assume now > tmpNow;
[L4850]              assume msgsender_MSG != null;
[L4851]              assume DType[msgsender_MSG] != IERC20;
[L4852]              assume DType[msgsender_MSG] != Context;
[L4853]              assume DType[msgsender_MSG] != ERC20;
[L4854]              assume DType[msgsender_MSG] != ERC20Detailed;
[L4855]              assume DType[msgsender_MSG] != SafeMath;
[L4856]              assume DType[msgsender_MSG] != YFV;
[L4857]              Alloc[msgsender_MSG] := true;
[L4858]  COND FALSE  !(choice == 18)
[L4864]  COND FALSE  !(choice == 17)
[L4870]  COND TRUE   choice == 16
[L4871]              gas := gas - 21000;
[L4872]  COND TRUE   gas >= 0
[L4873]              assume amount_s140 >= 0 && amount_s140 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4874]              assume msgvalue_MSG == 0;
[L4875]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((msgsender_MSG == recipient_s140 && amount_s140 <= _balances_ERC20[this][msgsender_MSG]) && amount_s140 >= 0) && amount_s140 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s140] >= 0) && _balances_ERC20[this][recipient_s140] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2]                 revert := revert_hold;
[L392]               havoc __exception;
[L393]               revert := false;
[L394]   COND FALSE  !(__exception)
[L419]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L2322]  COND TRUE   DType[this] == YFV
[L2323]  CALL        call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2200]              __ret_0_ := msgsender_MSG;
[L2323]  RET         call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2324]  COND FALSE  !(revert)
[L2335]  COND TRUE   DType[this] == YFV
[L2336]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s140, amount_s140);
[L2806]              __var_12 := null;
[L2807]  COND FALSE  !(!(sender_s323 != null))
[L2811]              __var_13 := null;
[L2812]  COND FALSE  !(!(recipient_s323 != null))
[L2816]  CALL        call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s323], amount_s323, -806116454);
[L3129]  COND FALSE  !(!(b_s561 <= a_s561))
[L3133]              c_s561 := (a_s561 - b_s561) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3134]              __ret_0_ := c_s561;
[L2816]  RET         call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s323], amount_s323, -806116454);
[L2817]  COND FALSE  !(revert)
[L2820]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s323];
[L2821]              _balances_ERC20[this][sender_s323] := __var_14;
[L2822]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s323];
[L2823]  CALL        call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s323], amount_s323);
[L3105]              c_s534 := (a_s534 + b_s534) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3106]  COND FALSE  !(!(c_s534 >= a_s534))
[L3110]              __ret_0_ := c_s534;
[L2823]  RET         call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s323], amount_s323);
[L2824]  COND FALSE  !(revert)
[L2827]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s323];
[L2828]              _balances_ERC20[this][recipient_s323] := __var_15;
[L2829]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s323];
[L2830]              assert { :EventEmitted "Transfer_ERC20" } true;
[L2336]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s140, amount_s140);
[L2337]  COND FALSE  !(revert)
[L2348]              __ret_0_ := true;
[L419]   RET         call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L420]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !((((((((__ret_0_ == true && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowances_ERC20[this] == old(_allowances_ERC20[this])) && governance_YFV[this] == old(governance_YFV[this])) && minters_YFV[this] == old(minters_YFV[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]));
[L2]                 revert := revert_hold;
[L4875]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L4991]  RET         call CorralChoice_YFV(this);
[L4991]  CALL        call CorralChoice_YFV(this);
[L4804]              havoc msgsender_MSG;
[L4805]              havoc msgvalue_MSG;
[L4806]              havoc choice;
[L4807]              havoc __ret_0_totalSupply;
[L4808]              havoc account_s121;
[L4809]              havoc __ret_0_balanceOf;
[L4810]              havoc recipient_s140;
[L4811]              havoc amount_s140;
[L4812]              havoc __ret_0_transfer;
[L4813]              havoc owner_s156;
[L4814]              havoc spender_s156;
[L4815]              havoc __ret_0_allowance;
[L4816]              havoc spender_s175;
[L4817]              havoc amount_s175;
[L4818]              havoc __ret_0_approve;
[L4819]              havoc sender_s211;
[L4820]              havoc recipient_s211;
[L4821]              havoc amount_s211;
[L4822]              havoc __ret_0_transferFrom;
[L4823]              havoc spender_s238;
[L4824]              havoc addedValue_s238;
[L4825]              havoc __ret_0_increaseAllowance;
[L4826]              havoc spender_s266;
[L4827]              havoc subtractedValue_s266;
[L4828]              havoc __ret_0_decreaseAllowance;
[L4829]              havoc name_s484;
[L4830]              havoc symbol_s484;
[L4831]              havoc decimals_s484;
[L4832]              havoc __ret_0_name;
[L4833]              havoc __ret_0_symbol;
[L4834]              havoc __ret_0_decimals;
[L4835]              havoc __ret_0_governance;
[L4836]              havoc arg744_s0;
[L4837]              havoc __ret_0_minters;
[L4838]              havoc account_s671;
[L4839]              havoc amount_s671;
[L4840]              havoc amount_s683;
[L4841]              havoc _governance_s701;
[L4842]              havoc _minter_s721;
[L4843]              havoc _minter_s741;
[L4844]              havoc tmpNow;
[L4845]              havoc gas;
[L4846]              assume gas > 4000000 && gas <= 8000000;
[L4847]              tmpNow := now;
[L4848]              havoc now;
[L4849]              assume now > tmpNow;
[L4850]              assume msgsender_MSG != null;
[L4851]              assume DType[msgsender_MSG] != IERC20;
[L4852]              assume DType[msgsender_MSG] != Context;
[L4853]              assume DType[msgsender_MSG] != ERC20;
[L4854]              assume DType[msgsender_MSG] != ERC20Detailed;
[L4855]              assume DType[msgsender_MSG] != SafeMath;
[L4856]              assume DType[msgsender_MSG] != YFV;
[L4857]              Alloc[msgsender_MSG] := true;
[L4858]  COND FALSE  !(choice == 18)
[L4864]  COND FALSE  !(choice == 17)
[L4870]  COND TRUE   choice == 16
[L4871]              gas := gas - 21000;
[L4872]  COND TRUE   gas >= 0
[L4873]              assume amount_s140 >= 0 && amount_s140 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4874]              assume msgvalue_MSG == 0;
[L4875]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == recipient_s140 && amount_s140 <= _balances_ERC20[this][msgsender_MSG]) && amount_s140 >= 0) && amount_s140 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s140] >= 0) && _balances_ERC20[this][recipient_s140] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC200 := true;
[L2]                 call_transfer_ERC200 := false;
[L2]                 revert := revert_hold;
[L392]               havoc __exception;
[L393]               revert := false;
[L394]   COND FALSE  !(__exception)
[L419]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L2322]  COND TRUE   DType[this] == YFV
[L2323]  CALL        call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2200]              __ret_0_ := msgsender_MSG;
[L2323]  RET         call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2324]  COND FALSE  !(revert)
[L2335]  COND TRUE   DType[this] == YFV
[L2336]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s140, amount_s140);
[L2806]              __var_12 := null;
[L2807]  COND FALSE  !(!(sender_s323 != null))
[L2811]              __var_13 := null;
[L2812]  COND FALSE  !(!(recipient_s323 != null))
[L2816]  CALL        call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s323], amount_s323, -806116454);
[L3129]  COND FALSE  !(!(b_s561 <= a_s561))
[L3133]              c_s561 := (a_s561 - b_s561) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3134]              __ret_0_ := c_s561;
[L2816]  RET         call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s323], amount_s323, -806116454);
[L2817]  COND FALSE  !(revert)
[L2820]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s323];
[L2821]              _balances_ERC20[this][sender_s323] := __var_14;
[L2822]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s323];
[L2823]  CALL        call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s323], amount_s323);
[L3105]              c_s534 := (a_s534 + b_s534) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3106]  COND FALSE  !(!(c_s534 >= a_s534))
[L3110]              __ret_0_ := c_s534;
[L2823]  RET         call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s323], amount_s323);
[L2824]  COND FALSE  !(revert)
[L2827]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s323];
[L2828]              _balances_ERC20[this][recipient_s323] := __var_15;
[L2829]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s323];
[L2830]              assert { :EventEmitted "Transfer_ERC20" } true;
[L2336]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s140, amount_s140);
[L2337]  COND FALSE  !(revert)
[L2348]              __ret_0_ := true;
[L419]   RET         call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L420]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !((((((((__ret_0_ == true && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowances_ERC20[this] == old(_allowances_ERC20[this])) && governance_YFV[this] == old(governance_YFV[this])) && minters_YFV[this] == old(minters_YFV[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]));
[L2]                 revert := revert_hold;
[L4875]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L4991]  RET         call CorralChoice_YFV(this);

Loop:
[L4991]  CALL        call CorralChoice_YFV(this);
[L4804]              havoc msgsender_MSG;
[L4805]              havoc msgvalue_MSG;
[L4806]              havoc choice;
[L4807]              havoc __ret_0_totalSupply;
[L4808]              havoc account_s121;
[L4809]              havoc __ret_0_balanceOf;
[L4810]              havoc recipient_s140;
[L4811]              havoc amount_s140;
[L4812]              havoc __ret_0_transfer;
[L4813]              havoc owner_s156;
[L4814]              havoc spender_s156;
[L4815]              havoc __ret_0_allowance;
[L4816]              havoc spender_s175;
[L4817]              havoc amount_s175;
[L4818]              havoc __ret_0_approve;
[L4819]              havoc sender_s211;
[L4820]              havoc recipient_s211;
[L4821]              havoc amount_s211;
[L4822]              havoc __ret_0_transferFrom;
[L4823]              havoc spender_s238;
[L4824]              havoc addedValue_s238;
[L4825]              havoc __ret_0_increaseAllowance;
[L4826]              havoc spender_s266;
[L4827]              havoc subtractedValue_s266;
[L4828]              havoc __ret_0_decreaseAllowance;
[L4829]              havoc name_s484;
[L4830]              havoc symbol_s484;
[L4831]              havoc decimals_s484;
[L4832]              havoc __ret_0_name;
[L4833]              havoc __ret_0_symbol;
[L4834]              havoc __ret_0_decimals;
[L4835]              havoc __ret_0_governance;
[L4836]              havoc arg744_s0;
[L4837]              havoc __ret_0_minters;
[L4838]              havoc account_s671;
[L4839]              havoc amount_s671;
[L4840]              havoc amount_s683;
[L4841]              havoc _governance_s701;
[L4842]              havoc _minter_s721;
[L4843]              havoc _minter_s741;
[L4844]              havoc tmpNow;
[L4845]              havoc gas;
[L4846]              assume gas > 4000000 && gas <= 8000000;
[L4847]              tmpNow := now;
[L4848]              havoc now;
[L4849]              assume now > tmpNow;
[L4850]              assume msgsender_MSG != null;
[L4851]              assume DType[msgsender_MSG] != IERC20;
[L4852]              assume DType[msgsender_MSG] != Context;
[L4853]              assume DType[msgsender_MSG] != ERC20;
[L4854]              assume DType[msgsender_MSG] != ERC20Detailed;
[L4855]              assume DType[msgsender_MSG] != SafeMath;
[L4856]              assume DType[msgsender_MSG] != YFV;
[L4857]              Alloc[msgsender_MSG] := true;
[L4858]  COND TRUE   choice == 18
[L4859]              gas := gas - 21000;
[L4860]  COND FALSE  !(gas >= 0)
[L4991]  RET         call CorralChoice_YFV(this);

[2020-11-25 09:44:17,057 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 09:44:17,058 INFO  L82        PathProgramCache]: Analyzing trace with hash 1912944816, now seen corresponding path program 1 times
[2020-11-25 09:44:17,058 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 09:44:17,127 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 09:44:18,630 WARN  L188               SmtUtils]: Spent 100.00 ms on a formula simplification. DAG size of input: 107 DAG size of output: 58
[2020-11-25 09:44:20,452 INFO  L134       CoverageAnalysis]: Checked inductivity of 877 backedges. 121 proven. 48 refuted. 0 times theorem prover too weak. 708 trivial. 0 not checked.
[2020-11-25 09:44:20,452 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 09:44:20,452 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [62] total 62
[2020-11-25 09:44:20,452 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 09:44:20,453 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 63 interpolants.
[2020-11-25 09:44:20,453 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=286, Invalid=3620, Unknown=0, NotChecked=0, Total=3906
[2020-11-25 09:44:20,453 INFO  L87              Difference]: Start difference. First operand 3853 states and 5194 transitions. cyclomatic complexity: 1433 Second operand 63 states.
[2020-11-25 09:44:43,226 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 09:44:43,226 INFO  L93              Difference]: Finished difference Result 4161 states and 5841 transitions.
[2020-11-25 09:44:43,226 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 49 states. 
[2020-11-25 09:44:43,226 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 4161 states and 5841 transitions.
[2020-11-25 09:44:43,239 INFO  L131   ngComponentsAnalysis]: Automaton has 5 accepting balls. 10
[2020-11-25 09:44:43,314 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 4161 states to 4161 states and 5839 transitions.
[2020-11-25 09:44:43,314 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 997
[2020-11-25 09:44:43,315 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 997
[2020-11-25 09:44:43,315 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 4161 states and 5839 transitions.
[2020-11-25 09:44:43,320 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 09:44:43,320 INFO  L728         BuchiCegarLoop]: Abstraction has 4161 states and 5839 transitions.
[2020-11-25 09:44:43,321 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 4161 states and 5839 transitions.
[2020-11-25 09:44:43,341 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 4161 to 3562.
[2020-11-25 09:44:43,342 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 3562 states.
[2020-11-25 09:44:43,347 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 3562 states to 3562 states and 4434 transitions.
[2020-11-25 09:44:43,347 INFO  L751         BuchiCegarLoop]: Abstraction has 3562 states and 4434 transitions.
[2020-11-25 09:44:43,347 INFO  L631         BuchiCegarLoop]: Abstraction has 3562 states and 4434 transitions.
[2020-11-25 09:44:43,347 INFO  L445         BuchiCegarLoop]: ======== Iteration 34============
[2020-11-25 09:44:43,347 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 3562 states and 4434 transitions.
[2020-11-25 09:44:43,350 INFO  L131   ngComponentsAnalysis]: Automaton has 3 accepting balls. 6
[2020-11-25 09:44:43,351 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 09:44:43,351 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 09:44:43,351 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 09:44:43,351 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_ERC200 := false;
[L2]                 call_transfer_ERC200 := false;
[L2]     CALL        call main();
[L4981]              assume null == 0;
[L4982]  CALL        call this := FreshRefGenerator__success();
[L2122]              havoc newRef;
[L2123]              assume Alloc[newRef] == false;
[L2124]              Alloc[newRef] := true;
[L2125]              assume newRef != null;
[L4982]  RET         call this := FreshRefGenerator__success();
[L4983]              assume now >= 0;
[L4984]              assume DType[this] == YFV;
[L4985]              assume msgvalue_MSG == 0;
[L4986]              gas := gas - 53000;
[L4987]  CALL        call YFV_YFV(this, msgsender_MSG, msgvalue_MSG);
[L1098]              havoc __exception;
[L1099]              revert := false;
[L1100]  COND FALSE  !(__exception)
[L1125]  CALL        call YFV_YFV__success(this, msgsender_MSG, msgvalue_MSG);
[L3242]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2186]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2171]              assume msgsender_MSG != null;
[L2172]              Balance[this] := 0;
[L2186]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2187]  COND FALSE  !(revert)
[L3242]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3243]  COND FALSE  !(revert)
[L3246]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2154]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2139]              assume msgsender_MSG != null;
[L2140]              Balance[this] := 0;
[L2154]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2155]  COND FALSE  !(revert)
[L3246]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3247]  COND FALSE  !(revert)
[L3250]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2248]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2186]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2171]              assume msgsender_MSG != null;
[L2172]              Balance[this] := 0;
[L2186]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2187]  COND FALSE  !(revert)
[L2248]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2249]  COND FALSE  !(revert)
[L2252]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2154]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2139]              assume msgsender_MSG != null;
[L2140]              Balance[this] := 0;
[L2154]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2155]  COND FALSE  !(revert)
[L2252]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2253]  COND FALSE  !(revert)
[L2256]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2220]              assume msgsender_MSG != null;
[L2221]              Balance[this] := 0;
[L2222]              _balances_ERC20[this] := zeroRefintArr();
[L2223]              sum__balances0[this] := 0;
[L2224]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2225]              sum__allowances1[this] := 0;
[L2226]              _totalSupply_ERC20[this] := 0;
[L2256]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2257]  COND FALSE  !(revert)
[L3250]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3251]  COND FALSE  !(revert)
[L3254]  CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -868984158, 934069305, 18);
[L3012]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2154]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2139]              assume msgsender_MSG != null;
[L2140]              Balance[this] := 0;
[L2154]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2155]  COND FALSE  !(revert)
[L3012]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3013]  COND FALSE  !(revert)
[L3016]  CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s484, symbol_s484, decimals_s484);
[L2987]              assume msgsender_MSG != null;
[L2988]              Balance[this] := 0;
[L2989]              _name_ERC20Detailed[this] := 1252836592;
[L2990]              _symbol_ERC20Detailed[this] := 1252836592;
[L2991]              _decimals_ERC20Detailed[this] := 0;
[L2993]              _name_ERC20Detailed[this] := name_s484;
[L2994]              _symbol_ERC20Detailed[this] := symbol_s484;
[L2995]              _decimals_ERC20Detailed[this] := decimals_s484;
[L3016]  RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s484, symbol_s484, decimals_s484);
[L3017]  COND FALSE  !(revert)
[L3254]  RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -868984158, 934069305, 18);
[L3255]  COND FALSE  !(revert)
[L3258]  CALL        call YFV_YFV_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3208]              assume msgsender_MSG != null;
[L3209]              Balance[this] := 0;
[L3210]              governance_YFV[this] := null;
[L3211]              minters_YFV[this] := zeroRefboolArr();
[L3213]              governance_YFV[this] := msgsender_MSG;
[L3258]  RET         call YFV_YFV_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3259]  COND FALSE  !(revert)
[L1125]  RET         call YFV_YFV__success(this, msgsender_MSG, msgvalue_MSG);
[L1126]              assume !revert && gas >= 0;
[L4987]  RET         call YFV_YFV(this, msgsender_MSG, msgvalue_MSG);
[L4988]              assume !revert && gas >= 0;
[L4991]  CALL        call CorralChoice_YFV(this);
[L4804]              havoc msgsender_MSG;
[L4805]              havoc msgvalue_MSG;
[L4806]              havoc choice;
[L4807]              havoc __ret_0_totalSupply;
[L4808]              havoc account_s121;
[L4809]              havoc __ret_0_balanceOf;
[L4810]              havoc recipient_s140;
[L4811]              havoc amount_s140;
[L4812]              havoc __ret_0_transfer;
[L4813]              havoc owner_s156;
[L4814]              havoc spender_s156;
[L4815]              havoc __ret_0_allowance;
[L4816]              havoc spender_s175;
[L4817]              havoc amount_s175;
[L4818]              havoc __ret_0_approve;
[L4819]              havoc sender_s211;
[L4820]              havoc recipient_s211;
[L4821]              havoc amount_s211;
[L4822]              havoc __ret_0_transferFrom;
[L4823]              havoc spender_s238;
[L4824]              havoc addedValue_s238;
[L4825]              havoc __ret_0_increaseAllowance;
[L4826]              havoc spender_s266;
[L4827]              havoc subtractedValue_s266;
[L4828]              havoc __ret_0_decreaseAllowance;
[L4829]              havoc name_s484;
[L4830]              havoc symbol_s484;
[L4831]              havoc decimals_s484;
[L4832]              havoc __ret_0_name;
[L4833]              havoc __ret_0_symbol;
[L4834]              havoc __ret_0_decimals;
[L4835]              havoc __ret_0_governance;
[L4836]              havoc arg744_s0;
[L4837]              havoc __ret_0_minters;
[L4838]              havoc account_s671;
[L4839]              havoc amount_s671;
[L4840]              havoc amount_s683;
[L4841]              havoc _governance_s701;
[L4842]              havoc _minter_s721;
[L4843]              havoc _minter_s741;
[L4844]              havoc tmpNow;
[L4845]              havoc gas;
[L4846]              assume gas > 4000000 && gas <= 8000000;
[L4847]              tmpNow := now;
[L4848]              havoc now;
[L4849]              assume now > tmpNow;
[L4850]              assume msgsender_MSG != null;
[L4851]              assume DType[msgsender_MSG] != IERC20;
[L4852]              assume DType[msgsender_MSG] != Context;
[L4853]              assume DType[msgsender_MSG] != ERC20;
[L4854]              assume DType[msgsender_MSG] != ERC20Detailed;
[L4855]              assume DType[msgsender_MSG] != SafeMath;
[L4856]              assume DType[msgsender_MSG] != YFV;
[L4857]              Alloc[msgsender_MSG] := true;
[L4858]  COND FALSE  !(choice == 18)
[L4864]  COND FALSE  !(choice == 17)
[L4870]  COND FALSE  !(choice == 16)
[L4877]  COND FALSE  !(choice == 15)
[L4883]  COND FALSE  !(choice == 14)
[L4890]  COND FALSE  !(choice == 13)
[L4897]  COND FALSE  !(choice == 12)
[L4904]  COND FALSE  !(choice == 11)
[L4911]  COND FALSE  !(choice == 10)
[L4917]  COND FALSE  !(choice == 9)
[L4923]  COND FALSE  !(choice == 8)
[L4929]  COND FALSE  !(choice == 7)
[L4935]  COND FALSE  !(choice == 6)
[L4941]  COND FALSE  !(choice == 5)
[L4948]  COND FALSE  !(choice == 4)
[L4955]  COND FALSE  !(choice == 3)
[L4961]  COND TRUE   choice == 2
[L4962]              gas := gas - 21000;
[L4963]  COND TRUE   gas >= 0
[L4964]              assume msgvalue_MSG == 0;
[L4965]  CALL        call addMinter~address_YFV(this, msgsender_MSG, msgvalue_MSG, _minter_s721);
[L1338]              havoc __exception;
[L1339]              revert := false;
[L1340]  COND FALSE  !(__exception)
[L1365]  CALL        call addMinter~address_YFV__success(this, msgsender_MSG, msgvalue_MSG, _minter_s721);
[L3349]  COND FALSE  !(!(msgsender_MSG == governance_YFV[this]))
[L3353]              minters_YFV[this][_minter_s721] := true;
[L1365]  RET         call addMinter~address_YFV__success(this, msgsender_MSG, msgvalue_MSG, _minter_s721);
[L1366]              assume !revert && gas >= 0;
[L4965]  RET         call addMinter~address_YFV(this, msgsender_MSG, msgvalue_MSG, _minter_s721);
[L4991]  RET         call CorralChoice_YFV(this);
[L4991]  CALL        call CorralChoice_YFV(this);
[L4804]              havoc msgsender_MSG;
[L4805]              havoc msgvalue_MSG;
[L4806]              havoc choice;
[L4807]              havoc __ret_0_totalSupply;
[L4808]              havoc account_s121;
[L4809]              havoc __ret_0_balanceOf;
[L4810]              havoc recipient_s140;
[L4811]              havoc amount_s140;
[L4812]              havoc __ret_0_transfer;
[L4813]              havoc owner_s156;
[L4814]              havoc spender_s156;
[L4815]              havoc __ret_0_allowance;
[L4816]              havoc spender_s175;
[L4817]              havoc amount_s175;
[L4818]              havoc __ret_0_approve;
[L4819]              havoc sender_s211;
[L4820]              havoc recipient_s211;
[L4821]              havoc amount_s211;
[L4822]              havoc __ret_0_transferFrom;
[L4823]              havoc spender_s238;
[L4824]              havoc addedValue_s238;
[L4825]              havoc __ret_0_increaseAllowance;
[L4826]              havoc spender_s266;
[L4827]              havoc subtractedValue_s266;
[L4828]              havoc __ret_0_decreaseAllowance;
[L4829]              havoc name_s484;
[L4830]              havoc symbol_s484;
[L4831]              havoc decimals_s484;
[L4832]              havoc __ret_0_name;
[L4833]              havoc __ret_0_symbol;
[L4834]              havoc __ret_0_decimals;
[L4835]              havoc __ret_0_governance;
[L4836]              havoc arg744_s0;
[L4837]              havoc __ret_0_minters;
[L4838]              havoc account_s671;
[L4839]              havoc amount_s671;
[L4840]              havoc amount_s683;
[L4841]              havoc _governance_s701;
[L4842]              havoc _minter_s721;
[L4843]              havoc _minter_s741;
[L4844]              havoc tmpNow;
[L4845]              havoc gas;
[L4846]              assume gas > 4000000 && gas <= 8000000;
[L4847]              tmpNow := now;
[L4848]              havoc now;
[L4849]              assume now > tmpNow;
[L4850]              assume msgsender_MSG != null;
[L4851]              assume DType[msgsender_MSG] != IERC20;
[L4852]              assume DType[msgsender_MSG] != Context;
[L4853]              assume DType[msgsender_MSG] != ERC20;
[L4854]              assume DType[msgsender_MSG] != ERC20Detailed;
[L4855]              assume DType[msgsender_MSG] != SafeMath;
[L4856]              assume DType[msgsender_MSG] != YFV;
[L4857]              Alloc[msgsender_MSG] := true;
[L4858]  COND FALSE  !(choice == 18)
[L4864]  COND FALSE  !(choice == 17)
[L4870]  COND FALSE  !(choice == 16)
[L4877]  COND FALSE  !(choice == 15)
[L4883]  COND FALSE  !(choice == 14)
[L4890]  COND FALSE  !(choice == 13)
[L4897]  COND FALSE  !(choice == 12)
[L4904]  COND FALSE  !(choice == 11)
[L4911]  COND FALSE  !(choice == 10)
[L4917]  COND FALSE  !(choice == 9)
[L4923]  COND FALSE  !(choice == 8)
[L4929]  COND FALSE  !(choice == 7)
[L4935]  COND FALSE  !(choice == 6)
[L4941]  COND FALSE  !(choice == 5)
[L4948]  COND TRUE   choice == 4
[L4949]              gas := gas - 21000;
[L4950]  COND TRUE   gas >= 0
[L4951]              assume amount_s683 >= 0 && amount_s683 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4952]              assume msgvalue_MSG == 0;
[L4953]  CALL        call burn~uint256_YFV(this, msgsender_MSG, msgvalue_MSG, amount_s683);
[L1220]              havoc __exception;
[L1221]              revert := false;
[L1222]  COND FALSE  !(__exception)
[L1247]  CALL        call burn~uint256_YFV__success(this, msgsender_MSG, msgvalue_MSG, amount_s683);
[L3310]  COND TRUE   DType[this] == YFV
[L3311]  CALL        call _burn~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, amount_s683);
[L2911]              __var_19 := null;
[L2912]  COND FALSE  !(!(account_s411 != null))
[L2916]  CALL        call __var_20 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s411], amount_s411, 392639254);
[L3129]  COND FALSE  !(!(b_s561 <= a_s561))
[L3133]              c_s561 := (a_s561 - b_s561) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3134]              __ret_0_ := c_s561;
[L2916]  RET         call __var_20 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s411], amount_s411, 392639254);
[L2917]  COND FALSE  !(revert)
[L2920]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s411];
[L2921]              _balances_ERC20[this][account_s411] := __var_20;
[L2922]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s411];
[L2923]  CALL        call __var_21 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s411, 1252836592);
[L3129]  COND FALSE  !(!(b_s561 <= a_s561))
[L3133]              c_s561 := (a_s561 - b_s561) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3134]              __ret_0_ := c_s561;
[L2923]  RET         call __var_21 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s411, 1252836592);
[L2924]  COND FALSE  !(revert)
[L2927]              _totalSupply_ERC20[this] := __var_21;
[L2928]              assert { :EventEmitted "Transfer_ERC20" } true;
[L3311]  RET         call _burn~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, amount_s683);
[L3312]  COND FALSE  !(revert)
[L1247]  RET         call burn~uint256_YFV__success(this, msgsender_MSG, msgvalue_MSG, amount_s683);
[L1248]              assume !revert && gas >= 0;
[L4953]  RET         call burn~uint256_YFV(this, msgsender_MSG, msgvalue_MSG, amount_s683);
[L4991]  RET         call CorralChoice_YFV(this);
[L4991]  CALL        call CorralChoice_YFV(this);
[L4804]              havoc msgsender_MSG;
[L4805]              havoc msgvalue_MSG;
[L4806]              havoc choice;
[L4807]              havoc __ret_0_totalSupply;
[L4808]              havoc account_s121;
[L4809]              havoc __ret_0_balanceOf;
[L4810]              havoc recipient_s140;
[L4811]              havoc amount_s140;
[L4812]              havoc __ret_0_transfer;
[L4813]              havoc owner_s156;
[L4814]              havoc spender_s156;
[L4815]              havoc __ret_0_allowance;
[L4816]              havoc spender_s175;
[L4817]              havoc amount_s175;
[L4818]              havoc __ret_0_approve;
[L4819]              havoc sender_s211;
[L4820]              havoc recipient_s211;
[L4821]              havoc amount_s211;
[L4822]              havoc __ret_0_transferFrom;
[L4823]              havoc spender_s238;
[L4824]              havoc addedValue_s238;
[L4825]              havoc __ret_0_increaseAllowance;
[L4826]              havoc spender_s266;
[L4827]              havoc subtractedValue_s266;
[L4828]              havoc __ret_0_decreaseAllowance;
[L4829]              havoc name_s484;
[L4830]              havoc symbol_s484;
[L4831]              havoc decimals_s484;
[L4832]              havoc __ret_0_name;
[L4833]              havoc __ret_0_symbol;
[L4834]              havoc __ret_0_decimals;
[L4835]              havoc __ret_0_governance;
[L4836]              havoc arg744_s0;
[L4837]              havoc __ret_0_minters;
[L4838]              havoc account_s671;
[L4839]              havoc amount_s671;
[L4840]              havoc amount_s683;
[L4841]              havoc _governance_s701;
[L4842]              havoc _minter_s721;
[L4843]              havoc _minter_s741;
[L4844]              havoc tmpNow;
[L4845]              havoc gas;
[L4846]              assume gas > 4000000 && gas <= 8000000;
[L4847]              tmpNow := now;
[L4848]              havoc now;
[L4849]              assume now > tmpNow;
[L4850]              assume msgsender_MSG != null;
[L4851]              assume DType[msgsender_MSG] != IERC20;
[L4852]              assume DType[msgsender_MSG] != Context;
[L4853]              assume DType[msgsender_MSG] != ERC20;
[L4854]              assume DType[msgsender_MSG] != ERC20Detailed;
[L4855]              assume DType[msgsender_MSG] != SafeMath;
[L4856]              assume DType[msgsender_MSG] != YFV;
[L4857]              Alloc[msgsender_MSG] := true;
[L4858]  COND FALSE  !(choice == 18)
[L4864]  COND FALSE  !(choice == 17)
[L4870]  COND FALSE  !(choice == 16)
[L4877]  COND FALSE  !(choice == 15)
[L4883]  COND FALSE  !(choice == 14)
[L4890]  COND FALSE  !(choice == 13)
[L4897]  COND FALSE  !(choice == 12)
[L4904]  COND FALSE  !(choice == 11)
[L4911]  COND FALSE  !(choice == 10)
[L4917]  COND FALSE  !(choice == 9)
[L4923]  COND FALSE  !(choice == 8)
[L4929]  COND FALSE  !(choice == 7)
[L4935]  COND FALSE  !(choice == 6)
[L4941]  COND TRUE   choice == 5
[L4942]              gas := gas - 21000;
[L4943]  COND TRUE   gas >= 0
[L4944]              assume amount_s671 >= 0 && amount_s671 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4945]              assume msgvalue_MSG == 0;
[L4946]  CALL        call mint~address~uint256_YFV(this, msgsender_MSG, msgvalue_MSG, account_s671, amount_s671);
[L1159]              havoc __exception;
[L1160]              revert := false;
[L1161]  COND FALSE  !(__exception)
[L1186]  CALL        call mint~address~uint256_YFV__success(this, msgsender_MSG, msgvalue_MSG, account_s671, amount_s671);
[L3282]  COND FALSE  !(!minters_YFV[this][msgsender_MSG])
[L3286]  COND TRUE   DType[this] == YFV
[L3287]  CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, account_s671, amount_s671);
[L2862]              __var_16 := null;
[L2863]  COND FALSE  !(!(account_s366 != null))
[L2867]  CALL        call __var_17 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s366);
[L3105]              c_s534 := (a_s534 + b_s534) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3106]  COND FALSE  !(!(c_s534 >= a_s534))
[L3110]              __ret_0_ := c_s534;
[L2867]  RET         call __var_17 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s366);
[L2868]  COND FALSE  !(revert)
[L2871]              _totalSupply_ERC20[this] := __var_17;
[L2872]  CALL        call __var_18 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s366], amount_s366);
[L3105]              c_s534 := (a_s534 + b_s534) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3106]  COND FALSE  !(!(c_s534 >= a_s534))
[L3110]              __ret_0_ := c_s534;
[L2872]  RET         call __var_18 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s366], amount_s366);
[L2873]  COND FALSE  !(revert)
[L2876]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s366];
[L2877]              _balances_ERC20[this][account_s366] := __var_18;
[L2878]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s366];
[L2879]              assert { :EventEmitted "Transfer_ERC20" } true;
[L3287]  RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, account_s671, amount_s671);
[L3288]  COND FALSE  !(revert)
[L1186]  RET         call mint~address~uint256_YFV__success(this, msgsender_MSG, msgvalue_MSG, account_s671, amount_s671);
[L1187]              assume !revert && gas >= 0;
[L4946]  RET         call mint~address~uint256_YFV(this, msgsender_MSG, msgvalue_MSG, account_s671, amount_s671);
[L4991]  RET         call CorralChoice_YFV(this);
[L4991]  CALL        call CorralChoice_YFV(this);
[L4804]              havoc msgsender_MSG;
[L4805]              havoc msgvalue_MSG;
[L4806]              havoc choice;
[L4807]              havoc __ret_0_totalSupply;
[L4808]              havoc account_s121;
[L4809]              havoc __ret_0_balanceOf;
[L4810]              havoc recipient_s140;
[L4811]              havoc amount_s140;
[L4812]              havoc __ret_0_transfer;
[L4813]              havoc owner_s156;
[L4814]              havoc spender_s156;
[L4815]              havoc __ret_0_allowance;
[L4816]              havoc spender_s175;
[L4817]              havoc amount_s175;
[L4818]              havoc __ret_0_approve;
[L4819]              havoc sender_s211;
[L4820]              havoc recipient_s211;
[L4821]              havoc amount_s211;
[L4822]              havoc __ret_0_transferFrom;
[L4823]              havoc spender_s238;
[L4824]              havoc addedValue_s238;
[L4825]              havoc __ret_0_increaseAllowance;
[L4826]              havoc spender_s266;
[L4827]              havoc subtractedValue_s266;
[L4828]              havoc __ret_0_decreaseAllowance;
[L4829]              havoc name_s484;
[L4830]              havoc symbol_s484;
[L4831]              havoc decimals_s484;
[L4832]              havoc __ret_0_name;
[L4833]              havoc __ret_0_symbol;
[L4834]              havoc __ret_0_decimals;
[L4835]              havoc __ret_0_governance;
[L4836]              havoc arg744_s0;
[L4837]              havoc __ret_0_minters;
[L4838]              havoc account_s671;
[L4839]              havoc amount_s671;
[L4840]              havoc amount_s683;
[L4841]              havoc _governance_s701;
[L4842]              havoc _minter_s721;
[L4843]              havoc _minter_s741;
[L4844]              havoc tmpNow;
[L4845]              havoc gas;
[L4846]              assume gas > 4000000 && gas <= 8000000;
[L4847]              tmpNow := now;
[L4848]              havoc now;
[L4849]              assume now > tmpNow;
[L4850]              assume msgsender_MSG != null;
[L4851]              assume DType[msgsender_MSG] != IERC20;
[L4852]              assume DType[msgsender_MSG] != Context;
[L4853]              assume DType[msgsender_MSG] != ERC20;
[L4854]              assume DType[msgsender_MSG] != ERC20Detailed;
[L4855]              assume DType[msgsender_MSG] != SafeMath;
[L4856]              assume DType[msgsender_MSG] != YFV;
[L4857]              Alloc[msgsender_MSG] := true;
[L4858]  COND FALSE  !(choice == 18)
[L4864]  COND FALSE  !(choice == 17)
[L4870]  COND TRUE   choice == 16
[L4871]              gas := gas - 21000;
[L4872]  COND TRUE   gas >= 0
[L4873]              assume amount_s140 >= 0 && amount_s140 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4874]              assume msgvalue_MSG == 0;
[L4875]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == recipient_s140 && amount_s140 <= _balances_ERC20[this][msgsender_MSG]) && amount_s140 >= 0) && amount_s140 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s140] >= 0) && _balances_ERC20[this][recipient_s140] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC200 := true;
[L2]                 call_transfer_ERC200 := false;
[L2]                 revert := revert_hold;
[L392]               havoc __exception;
[L393]               revert := false;
[L394]   COND FALSE  !(__exception)
[L419]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L2322]  COND TRUE   DType[this] == YFV
[L2323]  CALL        call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2200]              __ret_0_ := msgsender_MSG;
[L2323]  RET         call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2324]  COND FALSE  !(revert)
[L2335]  COND TRUE   DType[this] == YFV
[L2336]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s140, amount_s140);
[L2806]              __var_12 := null;
[L2807]  COND FALSE  !(!(sender_s323 != null))
[L2811]              __var_13 := null;
[L2812]  COND FALSE  !(!(recipient_s323 != null))
[L2816]  CALL        call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s323], amount_s323, -806116454);
[L3129]  COND FALSE  !(!(b_s561 <= a_s561))
[L3133]              c_s561 := (a_s561 - b_s561) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3134]              __ret_0_ := c_s561;
[L2816]  RET         call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s323], amount_s323, -806116454);
[L2817]  COND FALSE  !(revert)
[L2820]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s323];
[L2821]              _balances_ERC20[this][sender_s323] := __var_14;
[L2822]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s323];
[L2823]  CALL        call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s323], amount_s323);
[L3105]              c_s534 := (a_s534 + b_s534) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3106]  COND FALSE  !(!(c_s534 >= a_s534))
[L3110]              __ret_0_ := c_s534;
[L2823]  RET         call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s323], amount_s323);
[L2824]  COND FALSE  !(revert)
[L2827]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s323];
[L2828]              _balances_ERC20[this][recipient_s323] := __var_15;
[L2829]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s323];
[L2830]              assert { :EventEmitted "Transfer_ERC20" } true;
[L2336]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s140, amount_s140);
[L2337]  COND FALSE  !(revert)
[L2348]              __ret_0_ := true;
[L419]   RET         call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L420]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !((((((((__ret_0_ == true && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowances_ERC20[this] == old(_allowances_ERC20[this])) && governance_YFV[this] == old(governance_YFV[this])) && minters_YFV[this] == old(minters_YFV[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]));
[L2]                 revert := revert_hold;
[L4875]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L4991]  RET         call CorralChoice_YFV(this);

Loop:
[L4991]  CALL        call CorralChoice_YFV(this);
[L4804]              havoc msgsender_MSG;
[L4805]              havoc msgvalue_MSG;
[L4806]              havoc choice;
[L4807]              havoc __ret_0_totalSupply;
[L4808]              havoc account_s121;
[L4809]              havoc __ret_0_balanceOf;
[L4810]              havoc recipient_s140;
[L4811]              havoc amount_s140;
[L4812]              havoc __ret_0_transfer;
[L4813]              havoc owner_s156;
[L4814]              havoc spender_s156;
[L4815]              havoc __ret_0_allowance;
[L4816]              havoc spender_s175;
[L4817]              havoc amount_s175;
[L4818]              havoc __ret_0_approve;
[L4819]              havoc sender_s211;
[L4820]              havoc recipient_s211;
[L4821]              havoc amount_s211;
[L4822]              havoc __ret_0_transferFrom;
[L4823]              havoc spender_s238;
[L4824]              havoc addedValue_s238;
[L4825]              havoc __ret_0_increaseAllowance;
[L4826]              havoc spender_s266;
[L4827]              havoc subtractedValue_s266;
[L4828]              havoc __ret_0_decreaseAllowance;
[L4829]              havoc name_s484;
[L4830]              havoc symbol_s484;
[L4831]              havoc decimals_s484;
[L4832]              havoc __ret_0_name;
[L4833]              havoc __ret_0_symbol;
[L4834]              havoc __ret_0_decimals;
[L4835]              havoc __ret_0_governance;
[L4836]              havoc arg744_s0;
[L4837]              havoc __ret_0_minters;
[L4838]              havoc account_s671;
[L4839]              havoc amount_s671;
[L4840]              havoc amount_s683;
[L4841]              havoc _governance_s701;
[L4842]              havoc _minter_s721;
[L4843]              havoc _minter_s741;
[L4844]              havoc tmpNow;
[L4845]              havoc gas;
[L4846]              assume gas > 4000000 && gas <= 8000000;
[L4847]              tmpNow := now;
[L4848]              havoc now;
[L4849]              assume now > tmpNow;
[L4850]              assume msgsender_MSG != null;
[L4851]              assume DType[msgsender_MSG] != IERC20;
[L4852]              assume DType[msgsender_MSG] != Context;
[L4853]              assume DType[msgsender_MSG] != ERC20;
[L4854]              assume DType[msgsender_MSG] != ERC20Detailed;
[L4855]              assume DType[msgsender_MSG] != SafeMath;
[L4856]              assume DType[msgsender_MSG] != YFV;
[L4857]              Alloc[msgsender_MSG] := true;
[L4858]  COND TRUE   choice == 18
[L4859]              gas := gas - 21000;
[L4860]  COND FALSE  !(gas >= 0)
[L4991]  RET         call CorralChoice_YFV(this);

[2020-11-25 09:44:43,376 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 09:44:43,376 INFO  L82        PathProgramCache]: Analyzing trace with hash -1297729388, now seen corresponding path program 1 times
[2020-11-25 09:44:43,376 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 09:44:43,419 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 09:44:43,684 INFO  L134       CoverageAnalysis]: Checked inductivity of 447 backedges. 174 proven. 0 refuted. 0 times theorem prover too weak. 273 trivial. 0 not checked.
[2020-11-25 09:44:43,684 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 09:44:43,684 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [21] imperfect sequences [] total 21
[2020-11-25 09:44:43,684 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 09:44:43,684 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 21 interpolants.
[2020-11-25 09:44:43,684 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=57, Invalid=363, Unknown=0, NotChecked=0, Total=420
[2020-11-25 09:44:43,685 INFO  L87              Difference]: Start difference. First operand 3562 states and 4434 transitions. cyclomatic complexity: 916 Second operand 21 states.
[2020-11-25 09:44:47,279 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 09:44:47,279 INFO  L93              Difference]: Finished difference Result 2063 states and 2699 transitions.
[2020-11-25 09:44:47,279 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 21 states. 
[2020-11-25 09:44:47,279 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2063 states and 2699 transitions.
[2020-11-25 09:44:47,285 INFO  L131   ngComponentsAnalysis]: Automaton has 0 accepting balls. 0
[2020-11-25 09:44:47,285 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2063 states to 0 states and 0 transitions.
[2020-11-25 09:44:47,285 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 0
[2020-11-25 09:44:47,285 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 0
[2020-11-25 09:44:47,285 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 0 states and 0 transitions.
[2020-11-25 09:44:47,285 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 09:44:47,285 INFO  L728         BuchiCegarLoop]: Abstraction has 0 states and 0 transitions.
[2020-11-25 09:44:47,285 INFO  L751         BuchiCegarLoop]: Abstraction has 0 states and 0 transitions.
[2020-11-25 09:44:47,285 INFO  L631         BuchiCegarLoop]: Abstraction has 0 states and 0 transitions.
[2020-11-25 09:44:47,285 INFO  L445         BuchiCegarLoop]: ======== Iteration 35============
[2020-11-25 09:44:47,285 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 0 states and 0 transitions.
[2020-11-25 09:44:47,285 INFO  L131   ngComponentsAnalysis]: Automaton has 0 accepting balls. 0
[2020-11-25 09:44:47,285 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is true
[2020-11-25 09:44:47,288 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer CFG 25.11 09:44:47 BasicIcfg
[2020-11-25 09:44:47,288 INFO  L132        PluginConnector]: ------------------------ END BuchiAutomizer----------------------------
[2020-11-25 09:44:47,288 INFO  L168              Benchmark]: Toolchain (without parser) took 474524.99 ms. Allocated memory was 1.0 GB in the beginning and 5.4 GB in the end (delta: 4.4 GB). Free memory was 935.2 MB in the beginning and 2.8 GB in the end (delta: -1.9 GB). Peak memory consumption was 2.5 GB. Max. memory is 15.3 GB.
[2020-11-25 09:44:47,289 INFO  L168              Benchmark]: Boogie PL CUP Parser took 0.17 ms. Allocated memory is still 1.0 GB. Free memory is still 951.3 MB. There was no memory consumed. Max. memory is 15.3 GB.
[2020-11-25 09:44:47,289 INFO  L168              Benchmark]: Boogie Preprocessor took 112.70 ms. Allocated memory is still 1.0 GB. Free memory was 935.2 MB in the beginning and 924.5 MB in the end (delta: 10.7 MB). Peak memory consumption was 10.7 MB. Max. memory is 15.3 GB.
[2020-11-25 09:44:47,289 INFO  L168              Benchmark]: UtopiaSpecLang took 61.80 ms. Allocated memory is still 1.0 GB. Free memory was 924.5 MB in the beginning and 919.1 MB in the end (delta: 5.4 MB). Peak memory consumption was 5.4 MB. Max. memory is 15.3 GB.
[2020-11-25 09:44:47,290 INFO  L168              Benchmark]: Boogie Printer took 16.04 ms. Allocated memory is still 1.0 GB. Free memory was 919.1 MB in the beginning and 913.7 MB in the end (delta: 5.4 MB). Peak memory consumption was 5.4 MB. Max. memory is 15.3 GB.
[2020-11-25 09:44:47,290 INFO  L168              Benchmark]: RCFGBuilder took 787.16 ms. Allocated memory is still 1.0 GB. Free memory was 913.7 MB in the beginning and 784.8 MB in the end (delta: 128.9 MB). Peak memory consumption was 128.9 MB. Max. memory is 15.3 GB.
[2020-11-25 09:44:47,290 INFO  L168              Benchmark]: UtopiaLTL2Aut took 37.98 ms. Allocated memory is still 1.0 GB. Free memory was 784.8 MB in the beginning and 781.2 MB in the end (delta: 3.6 MB). Peak memory consumption was 3.6 MB. Max. memory is 15.3 GB.
[2020-11-25 09:44:47,291 INFO  L168              Benchmark]: BÃ¼chi Program Product took 1307.98 ms. Allocated memory was 1.0 GB in the beginning and 1.2 GB in the end (delta: 178.3 MB). Free memory was 781.2 MB in the beginning and 869.9 MB in the end (delta: -88.7 MB). Peak memory consumption was 158.5 MB. Max. memory is 15.3 GB.
[2020-11-25 09:44:47,291 INFO  L168              Benchmark]: BlockEncodingV2 took 169.59 ms. Allocated memory is still 1.2 GB. Free memory was 869.9 MB in the beginning and 793.8 MB in the end (delta: 76.1 MB). Peak memory consumption was 76.1 MB. Max. memory is 15.3 GB.
[2020-11-25 09:44:47,291 INFO  L168              Benchmark]: BuchiAutomizer took 472028.66 ms. Allocated memory was 1.2 GB in the beginning and 5.4 GB in the end (delta: 4.2 GB). Free memory was 793.8 MB in the beginning and 2.8 GB in the end (delta: -2.0 GB). Peak memory consumption was 2.2 GB. Max. memory is 15.3 GB.
[2020-11-25 09:44:47,293 INFO  L337   ainManager$Toolchain]: #######################  End [Toolchain 1] #######################
 --- Results ---
 * Results from de.uni_freiburg.informatik.ultimate.plugins.blockencoding:
  - StatisticsResult: Initial Icfg
    4578 locations, 8198 edges
  - StatisticsResult: Encoded RCFG
    4478 locations, 7921 edges
 * Results from de.uni_freiburg.informatik.ultimate.core:
  - StatisticsResult: Toolchain Benchmarks
    Benchmark results are:
 * Boogie PL CUP Parser took 0.17 ms. Allocated memory is still 1.0 GB. Free memory is still 951.3 MB. There was no memory consumed. Max. memory is 15.3 GB.
 * Boogie Preprocessor took 112.70 ms. Allocated memory is still 1.0 GB. Free memory was 935.2 MB in the beginning and 924.5 MB in the end (delta: 10.7 MB). Peak memory consumption was 10.7 MB. Max. memory is 15.3 GB.
 * UtopiaSpecLang took 61.80 ms. Allocated memory is still 1.0 GB. Free memory was 924.5 MB in the beginning and 919.1 MB in the end (delta: 5.4 MB). Peak memory consumption was 5.4 MB. Max. memory is 15.3 GB.
 * Boogie Printer took 16.04 ms. Allocated memory is still 1.0 GB. Free memory was 919.1 MB in the beginning and 913.7 MB in the end (delta: 5.4 MB). Peak memory consumption was 5.4 MB. Max. memory is 15.3 GB.
 * RCFGBuilder took 787.16 ms. Allocated memory is still 1.0 GB. Free memory was 913.7 MB in the beginning and 784.8 MB in the end (delta: 128.9 MB). Peak memory consumption was 128.9 MB. Max. memory is 15.3 GB.
 * UtopiaLTL2Aut took 37.98 ms. Allocated memory is still 1.0 GB. Free memory was 784.8 MB in the beginning and 781.2 MB in the end (delta: 3.6 MB). Peak memory consumption was 3.6 MB. Max. memory is 15.3 GB.
 * BÃ¼chi Program Product took 1307.98 ms. Allocated memory was 1.0 GB in the beginning and 1.2 GB in the end (delta: 178.3 MB). Free memory was 781.2 MB in the beginning and 869.9 MB in the end (delta: -88.7 MB). Peak memory consumption was 158.5 MB. Max. memory is 15.3 GB.
 * BlockEncodingV2 took 169.59 ms. Allocated memory is still 1.2 GB. Free memory was 869.9 MB in the beginning and 793.8 MB in the end (delta: 76.1 MB). Peak memory consumption was 76.1 MB. Max. memory is 15.3 GB.
 * BuchiAutomizer took 472028.66 ms. Allocated memory was 1.2 GB in the beginning and 5.4 GB in the end (delta: 4.2 GB). Free memory was 793.8 MB in the beginning and 2.8 GB in the end (delta: -2.0 GB). Peak memory consumption was 2.2 GB. Max. memory is 15.3 GB.
 * Results from de.uni_freiburg.informatik.ultimate.buchiprogramproduct:
  - StatisticsResult: Initial property automaton
    2 locations, 3 edges
  - StatisticsResult: Initial RCFG
    1844 locations, 2524 edges
  - StatisticsResult: BuchiProgram size
    4578 locations, 8198 edges
 * Results from de.uni_freiburg.informatik.ultimate.plugins.generator.traceabstraction:
  - StatisticsResult: Constructed decomposition of program
    Your program was decomposed into 34 terminating modules (34 trivial, 0 deterministic, 0 nondeterministic). 34 modules have a trivial ranking function, the largest among these consists of 84 locations.
  - StatisticsResult: Timing statistics
    BÃ¼chiAutomizer plugin needed 471.9s and 35 iterations.  TraceHistogramMax:7. Analysis of lassos took 148.8s. Construction of modules took 271.1s. BÃ¼chi inclusion checks took 49.6s. Highest rank in rank-based complementation 0. Minimization of det autom 34. Minimization of nondet autom 0. Automata minimization 0.9s AutomataMinimizationTime, 33 MinimizatonAttempts, 8220 StatesRemovedByMinimization, 29 NontrivialMinimizations. Non-live state removal took 0.8s Buchi closure took 0.0s. Biggest automaton had 3973 states and ocurred in iteration 31.	Nontrivial modules had stage [0, 0, 0, 0, 0].	InterpolantCoveringCapabilityFinite: 0/0	InterpolantCoveringCapabilityBuchi: 0/0	HoareTripleCheckerStatistics: 95556 SDtfs, 155989 SDslu, 767645 SDs, 0 SdLazy, 1486364 SolverSat, 30847 SolverUnsat, 0 SolverUnknown, 0 SolverNotchecked, 271.1s Time	LassoAnalysisResults: nont0 unkn0 SFLI0 SFLT0 conc0 concLT0 SILN0 SILU34 SILI0 SILT0 lasso0 LassoPreprocessingBenchmarks: LassoTerminationAnalysisBenchmarks: not availableLassoTerminationAnalysisBenchmarks: LassoNonterminationAnalysisSatFixpoint: 0	LassoNonterminationAnalysisSatUnbounded: 0	LassoNonterminationAnalysisUnsat: 0	LassoNonterminationAnalysisUnknown: 0	LassoNonterminationAnalysisTime: 0.0s	
  - AllSpecificationsHoldResult: All specifications hold
    Buchi Automizer proved that the LTL property ! ( ( []( (call_transfer_ERC200) ==> ( <>(success_transfer_ERC200) ) ) )) holds
RESULT: Ultimate proved your program to be correct!
Received shutdown request...
