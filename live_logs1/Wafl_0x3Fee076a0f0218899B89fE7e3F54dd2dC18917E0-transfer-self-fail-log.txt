This is Ultimate 0.1.24-f1553f5-m
[2020-11-25 08:45:44,969 INFO  L170        SettingsManager]: Resetting all preferences to default values...
[2020-11-25 08:45:44,970 INFO  L174        SettingsManager]: Resetting UltimateCore preferences to default values
[2020-11-25 08:45:44,977 INFO  L177        SettingsManager]: Ultimate Commandline Interface provides no preferences, ignoring...
[2020-11-25 08:45:44,977 INFO  L174        SettingsManager]: Resetting Boogie Preprocessor preferences to default values
[2020-11-25 08:45:44,978 INFO  L174        SettingsManager]: Resetting Boogie Procedure Inliner preferences to default values
[2020-11-25 08:45:44,978 INFO  L174        SettingsManager]: Resetting Abstract Interpretation preferences to default values
[2020-11-25 08:45:44,979 INFO  L174        SettingsManager]: Resetting LassoRanker preferences to default values
[2020-11-25 08:45:44,980 INFO  L174        SettingsManager]: Resetting Reaching Definitions preferences to default values
[2020-11-25 08:45:44,981 INFO  L174        SettingsManager]: Resetting SyntaxChecker preferences to default values
[2020-11-25 08:45:44,981 INFO  L177        SettingsManager]: BÃ¼chi Program Product provides no preferences, ignoring...
[2020-11-25 08:45:44,981 INFO  L174        SettingsManager]: Resetting LTL2Aut preferences to default values
[2020-11-25 08:45:44,982 INFO  L174        SettingsManager]: Resetting PEA to Boogie preferences to default values
[2020-11-25 08:45:44,982 INFO  L174        SettingsManager]: Resetting BlockEncodingV2 preferences to default values
[2020-11-25 08:45:44,983 INFO  L174        SettingsManager]: Resetting ChcToBoogie preferences to default values
[2020-11-25 08:45:44,983 INFO  L174        SettingsManager]: Resetting AutomataScriptInterpreter preferences to default values
[2020-11-25 08:45:44,984 INFO  L174        SettingsManager]: Resetting BuchiAutomizer preferences to default values
[2020-11-25 08:45:44,985 INFO  L174        SettingsManager]: Resetting CACSL2BoogieTranslator preferences to default values
[2020-11-25 08:45:44,986 INFO  L174        SettingsManager]: Resetting CodeCheck preferences to default values
[2020-11-25 08:45:44,987 INFO  L174        SettingsManager]: Resetting InvariantSynthesis preferences to default values
[2020-11-25 08:45:44,987 INFO  L174        SettingsManager]: Resetting RCFGBuilder preferences to default values
[2020-11-25 08:45:44,988 INFO  L174        SettingsManager]: Resetting TraceAbstraction preferences to default values
[2020-11-25 08:45:44,989 INFO  L177        SettingsManager]: TraceAbstractionConcurrent provides no preferences, ignoring...
[2020-11-25 08:45:44,989 INFO  L177        SettingsManager]: TraceAbstractionWithAFAs provides no preferences, ignoring...
[2020-11-25 08:45:44,989 INFO  L174        SettingsManager]: Resetting TreeAutomizer preferences to default values
[2020-11-25 08:45:44,990 INFO  L174        SettingsManager]: Resetting IcfgToChc preferences to default values
[2020-11-25 08:45:44,990 INFO  L174        SettingsManager]: Resetting IcfgTransformer preferences to default values
[2020-11-25 08:45:44,990 INFO  L177        SettingsManager]: ReqToTest provides no preferences, ignoring...
[2020-11-25 08:45:44,990 INFO  L174        SettingsManager]: Resetting UtopiaLTL2Aut preferences to default values
[2020-11-25 08:45:44,990 INFO  L174        SettingsManager]: Resetting UtopiaSpecLang preferences to default values
[2020-11-25 08:45:44,991 INFO  L174        SettingsManager]: Resetting Boogie Printer preferences to default values
[2020-11-25 08:45:44,991 INFO  L174        SettingsManager]: Resetting ChcSmtPrinter preferences to default values
[2020-11-25 08:45:44,991 INFO  L174        SettingsManager]: Resetting ReqPrinter preferences to default values
[2020-11-25 08:45:44,992 INFO  L174        SettingsManager]: Resetting Witness Printer preferences to default values
[2020-11-25 08:45:44,992 INFO  L177        SettingsManager]: Boogie PL CUP Parser provides no preferences, ignoring...
[2020-11-25 08:45:44,992 INFO  L174        SettingsManager]: Resetting CDTParser preferences to default values
[2020-11-25 08:45:44,993 INFO  L177        SettingsManager]: AutomataScriptParser provides no preferences, ignoring...
[2020-11-25 08:45:44,993 INFO  L177        SettingsManager]: ReqParser provides no preferences, ignoring...
[2020-11-25 08:45:44,993 INFO  L174        SettingsManager]: Resetting SmtParser preferences to default values
[2020-11-25 08:45:44,993 INFO  L174        SettingsManager]: Resetting Witness Parser preferences to default values
[2020-11-25 08:45:44,994 INFO  L181        SettingsManager]: Finished resetting all preferences to default values...
[2020-11-25 08:45:44,994 INFO  L98         SettingsManager]: Beginning loading settings from /mnt/data0/jon/SmartPulseTool/SmartPulse/settings.epf
[2020-11-25 08:45:45,000 INFO  L110        SettingsManager]: Loading preferences was successful
[2020-11-25 08:45:45,000 INFO  L112        SettingsManager]: Preferences different from defaults after loading the file:
[2020-11-25 08:45:45,001 INFO  L131        SettingsManager]: Preferences of LTL2Aut differ from their defaults:
[2020-11-25 08:45:45,001 INFO  L133        SettingsManager]:  * Read property from file=true
[2020-11-25 08:45:45,001 INFO  L133        SettingsManager]:  * Path to LTL*BA executable (LTL2BA, LTL3BA)=/mnt/data0/jon/SmartPulseTool/ltl2ba
[2020-11-25 08:45:45,001 INFO  L131        SettingsManager]: Preferences of BlockEncodingV2 differ from their defaults:
[2020-11-25 08:45:45,001 INFO  L133        SettingsManager]:  * Maximize final states=false
[2020-11-25 08:45:45,002 INFO  L133        SettingsManager]:  * Minimize states even if more edges are added than removed.=true
[2020-11-25 08:45:45,002 INFO  L133        SettingsManager]:  * Minimize states using LBE with the strategy=NONE
[2020-11-25 08:45:45,002 INFO  L131        SettingsManager]: Preferences of BuchiAutomizer differ from their defaults:
[2020-11-25 08:45:45,002 INFO  L133        SettingsManager]:  * Compute Interpolants along a Counterexample=Craig_TreeInterpolation
[2020-11-25 08:45:45,002 INFO  L133        SettingsManager]:  * Use old map elimination=false
[2020-11-25 08:45:45,002 INFO  L133        SettingsManager]:  * Try twofold refinement=false
[2020-11-25 08:45:45,002 INFO  L131        SettingsManager]: Preferences of CACSL2BoogieTranslator differ from their defaults:
[2020-11-25 08:45:45,002 INFO  L133        SettingsManager]:  * Check unreachability of error function in SV-COMP mode=false
[2020-11-25 08:45:45,002 INFO  L133        SettingsManager]:  * Overapproximate operations on floating types=true
[2020-11-25 08:45:45,003 INFO  L133        SettingsManager]:  * Check division by zero=IGNORE
[2020-11-25 08:45:45,003 INFO  L133        SettingsManager]:  * Pointer to allocated memory at dereference=ASSUME
[2020-11-25 08:45:45,003 INFO  L133        SettingsManager]:  * If two pointers are subtracted or compared they have the same base address=ASSUME
[2020-11-25 08:45:45,003 INFO  L133        SettingsManager]:  * Check array bounds for arrays that are off heap=ASSUME
[2020-11-25 08:45:45,003 INFO  L133        SettingsManager]:  * Check if freed pointer was valid=false
[2020-11-25 08:45:45,003 INFO  L133        SettingsManager]:  * Use constant arrays=true
[2020-11-25 08:45:45,003 INFO  L133        SettingsManager]:  * Pointer base address is valid at dereference=ASSUME
[2020-11-25 08:45:45,003 INFO  L131        SettingsManager]: Preferences of RCFGBuilder differ from their defaults:
[2020-11-25 08:45:45,003 INFO  L133        SettingsManager]:  * Size of a code block=SingleStatement
[2020-11-25 08:45:45,003 INFO  L133        SettingsManager]:  * SMT solver=Internal_SMTInterpol
[2020-11-25 08:45:45,021 INFO  L81    nceAwareModelManager]: Repository-Root is: /tmp
[2020-11-25 08:45:45,030 INFO  L259   ainManager$Toolchain]: [Toolchain 1]: Applicable parser(s) successfully (re)initialized
[2020-11-25 08:45:45,032 INFO  L215   ainManager$Toolchain]: [Toolchain 1]: Toolchain selected.
[2020-11-25 08:45:45,033 INFO  L271        PluginConnector]: Initializing Boogie PL CUP Parser...
[2020-11-25 08:45:45,034 INFO  L276        PluginConnector]: Boogie PL CUP Parser initialized
[2020-11-25 08:45:45,034 INFO  L430   ainManager$Toolchain]: [Toolchain 1]: Parsing single file: /mnt/data0/jon/SmartPulseTool/Wafl_0x3Fee076a0f0218899B89fE7e3F54dd2dC18917E0_transfer-self-fail.bpl
[2020-11-25 08:45:45,034 INFO  L111           BoogieParser]: Parsing: '/mnt/data0/jon/SmartPulseTool/Wafl_0x3Fee076a0f0218899B89fE7e3F54dd2dC18917E0_transfer-self-fail.bpl'
[2020-11-25 08:45:45,173 INFO  L297   ainManager$Toolchain]: ####################### [Toolchain 1] #######################
[2020-11-25 08:45:45,174 INFO  L131        ToolchainWalker]: Walking toolchain with 8 elements.
[2020-11-25 08:45:45,174 INFO  L113        PluginConnector]: ------------------------Boogie Preprocessor----------------------------
[2020-11-25 08:45:45,174 INFO  L271        PluginConnector]: Initializing Boogie Preprocessor...
[2020-11-25 08:45:45,174 INFO  L276        PluginConnector]: Boogie Preprocessor initialized
[2020-11-25 08:45:45,190 INFO  L185        PluginConnector]: Executing the observer EnsureBoogieModelObserver from plugin Boogie Preprocessor for "Wafl_0x3Fee076a0f0218899B89fE7e3F54dd2dC18917E0_transfer-self-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 08:45:45" (1/1) ...
[2020-11-25 08:45:45,192 INFO  L185        PluginConnector]: Executing the observer TypeChecker from plugin Boogie Preprocessor for "Wafl_0x3Fee076a0f0218899B89fE7e3F54dd2dC18917E0_transfer-self-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 08:45:45" (1/1) ...
[2020-11-25 08:45:45,231 INFO  L185        PluginConnector]: Executing the observer ConstExpander from plugin Boogie Preprocessor for "Wafl_0x3Fee076a0f0218899B89fE7e3F54dd2dC18917E0_transfer-self-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 08:45:45" (1/1) ...
[2020-11-25 08:45:45,232 INFO  L185        PluginConnector]: Executing the observer StructExpander from plugin Boogie Preprocessor for "Wafl_0x3Fee076a0f0218899B89fE7e3F54dd2dC18917E0_transfer-self-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 08:45:45" (1/1) ...
[2020-11-25 08:45:45,262 INFO  L185        PluginConnector]: Executing the observer UnstructureCode from plugin Boogie Preprocessor for "Wafl_0x3Fee076a0f0218899B89fE7e3F54dd2dC18917E0_transfer-self-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 08:45:45" (1/1) ...
[2020-11-25 08:45:45,282 INFO  L185        PluginConnector]: Executing the observer FunctionInliner from plugin Boogie Preprocessor for "Wafl_0x3Fee076a0f0218899B89fE7e3F54dd2dC18917E0_transfer-self-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 08:45:45" (1/1) ...
[2020-11-25 08:45:45,299 INFO  L185        PluginConnector]: Executing the observer BoogieSymbolTableConstructor from plugin Boogie Preprocessor for "Wafl_0x3Fee076a0f0218899B89fE7e3F54dd2dC18917E0_transfer-self-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 08:45:45" (1/1) ...
[2020-11-25 08:45:45,320 INFO  L132        PluginConnector]: ------------------------ END Boogie Preprocessor----------------------------
[2020-11-25 08:45:45,321 INFO  L113        PluginConnector]: ------------------------UtopiaSpecLang----------------------------
[2020-11-25 08:45:45,321 INFO  L271        PluginConnector]: Initializing UtopiaSpecLang...
[2020-11-25 08:45:45,323 INFO  L276        PluginConnector]: UtopiaSpecLang initialized
[2020-11-25 08:45:45,327 INFO  L185        PluginConnector]: Executing the observer UtopiaSpecLangObserver from plugin UtopiaSpecLang for "Wafl_0x3Fee076a0f0218899B89fE7e3F54dd2dC18917E0_transfer-self-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 08:45:45" (1/1) ...
[2020-11-25 08:45:45,353 INFO  L1012  opiaSpecLangObserver]: Parsing LTLPlus Formula to AstNode: [](started(ERC20Pausable.transfer(to, value), msg.sender == to && value > _balances_ERC20[this][msg.sender] && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][to] >= 0 && _balances_ERC20[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][msg.sender] >= 0 &&  _balances_ERC20[this][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(reverted(ERC20Pausable.transfer)))
[2020-11-25 08:45:45,358 INFO  L1016  opiaSpecLangObserver]: Successfully lexed: [](started(ERC20Pausable.transfer(to, value), msg.sender == to && value > _balances_ERC20[this][msg.sender] && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][to] >= 0 && _balances_ERC20[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][msg.sender] >= 0 &&  _balances_ERC20[this][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(reverted(ERC20Pausable.transfer)))
[2020-11-25 08:45:45,366 INFO  L1018  opiaSpecLangObserver]: Successfully parsed: [](started(ERC20Pausable.transfer(to, value), msg.sender == to && value > _balances_ERC20[this][msg.sender] && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][to] >= 0 && _balances_ERC20[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][msg.sender] >= 0 &&  _balances_ERC20[this][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(reverted(ERC20Pausable.transfer)))
[2020-11-25 08:45:45,375 INFO  L636   opiaSpecLangObserver]: Parsed ( ( ( ( ( ( ( msg.sender==to_s1040 && value_s1040>_balances_ERC20[this][msg.sender] ) && value_s1040>=0 ) && value_s1040<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) && _balances_ERC20[this][to_s1040]>=0 ) && _balances_ERC20[this][to_s1040]<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) && _balances_ERC20[this][msg.sender]>=0 ) && _balances_ERC20[this][msg.sender]<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) to BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[COMPEQ,IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20Pausable>],IdentifierExpression[to_s1040,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20Pausable>]],BinaryExpression[COMPGT,IdentifierExpression[value_s1040,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20Pausable>],ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20Pausable>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20Pausable>]]]]],BinaryExpression[COMPGEQ,IdentifierExpression[value_s1040,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20Pausable>],IntegerLiteral[0]]],BinaryExpression[COMPLT,IdentifierExpression[value_s1040,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20Pausable>],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]],BinaryExpression[COMPGEQ,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20Pausable>]]],[IdentifierExpression[to_s1040,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20Pausable>]]],IntegerLiteral[0]]],BinaryExpression[COMPLT,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20Pausable>]]],[IdentifierExpression[to_s1040,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20Pausable>]]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]],BinaryExpression[COMPGEQ,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20Pausable>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20Pausable>]]],IntegerLiteral[0]]],BinaryExpression[COMPLT,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20Pausable>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20Pausable>]]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]]
[2020-11-25 08:45:45,382 INFO  L1005  opiaSpecLangObserver]: Compiling: [](started(ERC20Pausable.transfer(to, value), msg.sender == to && value > _balances_ERC20[this][msg.sender] && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][to] >= 0 && _balances_ERC20[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][msg.sender] >= 0 &&  _balances_ERC20[this][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(reverted(ERC20Pausable.transfer)))
[2020-11-25 08:45:45,382 INFO  L1007  opiaSpecLangObserver]: Compiled to ( []( AP(call_transfer_ERC20Pausable0) ==> ( <>AP(fail_transfer_ERC20Pausable0) ) ) )
Executed UtopiaSpecLang
[2020-11-25 08:45:45,403 INFO  L202        PluginConnector]: Adding new model Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 08:45:45 PropertyContainer
[2020-11-25 08:45:45,403 INFO  L132        PluginConnector]: ------------------------ END UtopiaSpecLang----------------------------
[2020-11-25 08:45:45,404 INFO  L113        PluginConnector]: ------------------------Boogie Printer----------------------------
[2020-11-25 08:45:45,404 INFO  L271        PluginConnector]: Initializing Boogie Printer...
[2020-11-25 08:45:45,404 INFO  L276        PluginConnector]: Boogie Printer initialized
[2020-11-25 08:45:45,405 INFO  L185        PluginConnector]: Executing the observer BoogiePrinterObserver from plugin Boogie Printer for "Wafl_0x3Fee076a0f0218899B89fE7e3F54dd2dC18917E0_transfer-self-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 08:45:45" (1/2) ...
[2020-11-25 08:45:45,405 INFO  L116   oogiePrinterObserver]: File already exists and will be overwritten: /tmp/boogiePrinter.bpl
[2020-11-25 08:45:45,405 INFO  L120   oogiePrinterObserver]: Writing to file /tmp/boogiePrinter.bpl
[2020-11-25 08:45:45,433 INFO  L185        PluginConnector]: Executing the observer BoogiePrinterObserver from plugin Boogie Printer for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 08:45:45" (2/2) ...
[2020-11-25 08:45:45,433 INFO  L132        PluginConnector]: ------------------------ END Boogie Printer----------------------------
[2020-11-25 08:45:45,433 INFO  L113        PluginConnector]: ------------------------RCFGBuilder----------------------------
[2020-11-25 08:45:45,434 INFO  L271        PluginConnector]: Initializing RCFGBuilder...
[2020-11-25 08:45:45,434 INFO  L276        PluginConnector]: RCFGBuilder initialized
[2020-11-25 08:45:45,434 INFO  L185        PluginConnector]: Executing the observer RCFGBuilderObserver from plugin RCFGBuilder for "Wafl_0x3Fee076a0f0218899B89fE7e3F54dd2dC18917E0_transfer-self-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 08:45:45" (1/2) ...
[2020-11-25 08:45:45,490 INFO  L130     BoogieDeclarations]: Found specification of procedure FreshRefGenerator__success
[2020-11-25 08:45:45,491 INFO  L130     BoogieDeclarations]: Found specification of procedure Roles.Role_ctor__success
[2020-11-25 08:45:45,491 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath_NoBaseCtor__success
[2020-11-25 08:45:45,491 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath
[2020-11-25 08:45:45,491 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath
[2020-11-25 08:45:45,491 INFO  L130     BoogieDeclarations]: Found specification of procedure add~uint256~uint256_SafeMath__success
[2020-11-25 08:45:45,491 INFO  L130     BoogieDeclarations]: Found specification of procedure sub~uint256~uint256_SafeMath__success
[2020-11-25 08:45:45,491 INFO  L130     BoogieDeclarations]: Found specification of procedure mul~uint256~uint256_SafeMath__success
[2020-11-25 08:45:45,491 INFO  L130     BoogieDeclarations]: Found specification of procedure div~uint256~uint256_SafeMath__success
[2020-11-25 08:45:45,492 INFO  L130     BoogieDeclarations]: Found specification of procedure mod~uint256~uint256_SafeMath__success
[2020-11-25 08:45:45,492 INFO  L130     BoogieDeclarations]: Found specification of procedure Ownable_Ownable_NoBaseCtor__success
[2020-11-25 08:45:45,492 INFO  L130     BoogieDeclarations]: Found specification of procedure Ownable_Ownable
[2020-11-25 08:45:45,492 INFO  L138     BoogieDeclarations]: Found implementation of procedure Ownable_Ownable
[2020-11-25 08:45:45,492 INFO  L130     BoogieDeclarations]: Found specification of procedure owner_Ownable
[2020-11-25 08:45:45,492 INFO  L138     BoogieDeclarations]: Found implementation of procedure owner_Ownable
[2020-11-25 08:45:45,492 INFO  L130     BoogieDeclarations]: Found specification of procedure isOwner_Ownable
[2020-11-25 08:45:45,492 INFO  L138     BoogieDeclarations]: Found implementation of procedure isOwner_Ownable
[2020-11-25 08:45:45,493 INFO  L130     BoogieDeclarations]: Found specification of procedure renounceOwnership_Ownable
[2020-11-25 08:45:45,493 INFO  L138     BoogieDeclarations]: Found implementation of procedure renounceOwnership_Ownable
[2020-11-25 08:45:45,493 INFO  L130     BoogieDeclarations]: Found specification of procedure transferOwnership~address_Ownable
[2020-11-25 08:45:45,493 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferOwnership~address_Ownable
[2020-11-25 08:45:45,494 INFO  L130     BoogieDeclarations]: Found specification of procedure _transferOwnership~address_Ownable__success
[2020-11-25 08:45:45,494 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20_NoBaseCtor__success
[2020-11-25 08:45:45,494 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20
[2020-11-25 08:45:45,494 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20
[2020-11-25 08:45:45,494 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_IERC20
[2020-11-25 08:45:45,494 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_IERC20
[2020-11-25 08:45:45,494 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_IERC20
[2020-11-25 08:45:45,494 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_IERC20
[2020-11-25 08:45:45,494 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_IERC20
[2020-11-25 08:45:45,494 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_IERC20
[2020-11-25 08:45:45,495 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20_NoBaseCtor__success
[2020-11-25 08:45:45,495 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20
[2020-11-25 08:45:45,495 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20
[2020-11-25 08:45:45,495 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_ERC20
[2020-11-25 08:45:45,495 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_ERC20
[2020-11-25 08:45:45,495 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_ERC20
[2020-11-25 08:45:45,495 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_ERC20
[2020-11-25 08:45:45,495 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_ERC20
[2020-11-25 08:45:45,495 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_ERC20
[2020-11-25 08:45:45,495 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_ERC20
[2020-11-25 08:45:45,496 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_ERC20
[2020-11-25 08:45:45,496 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_ERC20
[2020-11-25 08:45:45,496 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_ERC20
[2020-11-25 08:45:45,496 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_ERC20
[2020-11-25 08:45:45,496 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_ERC20
[2020-11-25 08:45:45,496 INFO  L130     BoogieDeclarations]: Found specification of procedure increaseAllowance~address~uint256_ERC20
[2020-11-25 08:45:45,496 INFO  L138     BoogieDeclarations]: Found implementation of procedure increaseAllowance~address~uint256_ERC20
[2020-11-25 08:45:45,496 INFO  L130     BoogieDeclarations]: Found specification of procedure decreaseAllowance~address~uint256_ERC20
[2020-11-25 08:45:45,496 INFO  L138     BoogieDeclarations]: Found implementation of procedure decreaseAllowance~address~uint256_ERC20
[2020-11-25 08:45:45,497 INFO  L130     BoogieDeclarations]: Found specification of procedure _transfer~address~address~uint256_ERC20__success
[2020-11-25 08:45:45,497 INFO  L130     BoogieDeclarations]: Found specification of procedure _mint~address~uint256_ERC20__success
[2020-11-25 08:45:45,497 INFO  L130     BoogieDeclarations]: Found specification of procedure _burn~address~uint256_ERC20__success
[2020-11-25 08:45:45,497 INFO  L130     BoogieDeclarations]: Found specification of procedure _approve~address~address~uint256_ERC20__success
[2020-11-25 08:45:45,497 INFO  L130     BoogieDeclarations]: Found specification of procedure _burnFrom~address~uint256_ERC20__success
[2020-11-25 08:45:45,497 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Detailed_ERC20Detailed_NoBaseCtor__success
[2020-11-25 08:45:45,497 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Detailed_ERC20Detailed
[2020-11-25 08:45:45,497 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Detailed_ERC20Detailed
[2020-11-25 08:45:45,497 INFO  L130     BoogieDeclarations]: Found specification of procedure name_ERC20Detailed
[2020-11-25 08:45:45,497 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_ERC20Detailed
[2020-11-25 08:45:45,497 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_ERC20Detailed
[2020-11-25 08:45:45,498 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_ERC20Detailed
[2020-11-25 08:45:45,498 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_ERC20Detailed
[2020-11-25 08:45:45,498 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_ERC20Detailed
[2020-11-25 08:45:45,498 INFO  L130     BoogieDeclarations]: Found specification of procedure Roles_Roles_NoBaseCtor__success
[2020-11-25 08:45:45,498 INFO  L130     BoogieDeclarations]: Found specification of procedure Roles_Roles
[2020-11-25 08:45:45,498 INFO  L138     BoogieDeclarations]: Found implementation of procedure Roles_Roles
[2020-11-25 08:45:45,498 INFO  L130     BoogieDeclarations]: Found specification of procedure add~Role~address_Roles__success
[2020-11-25 08:45:45,498 INFO  L130     BoogieDeclarations]: Found specification of procedure remove~Role~address_Roles__success
[2020-11-25 08:45:45,498 INFO  L130     BoogieDeclarations]: Found specification of procedure has~Role~address_Roles__success
[2020-11-25 08:45:45,498 INFO  L130     BoogieDeclarations]: Found specification of procedure PauserRole_PauserRole_NoBaseCtor__success
[2020-11-25 08:45:45,499 INFO  L130     BoogieDeclarations]: Found specification of procedure PauserRole_PauserRole
[2020-11-25 08:45:45,499 INFO  L138     BoogieDeclarations]: Found implementation of procedure PauserRole_PauserRole
[2020-11-25 08:45:45,499 INFO  L130     BoogieDeclarations]: Found specification of procedure isPauser~address_PauserRole
[2020-11-25 08:45:45,499 INFO  L138     BoogieDeclarations]: Found implementation of procedure isPauser~address_PauserRole
[2020-11-25 08:45:45,499 INFO  L130     BoogieDeclarations]: Found specification of procedure addPauser~address_PauserRole
[2020-11-25 08:45:45,499 INFO  L138     BoogieDeclarations]: Found implementation of procedure addPauser~address_PauserRole
[2020-11-25 08:45:45,499 INFO  L130     BoogieDeclarations]: Found specification of procedure renouncePauser_PauserRole
[2020-11-25 08:45:45,499 INFO  L138     BoogieDeclarations]: Found implementation of procedure renouncePauser_PauserRole
[2020-11-25 08:45:45,499 INFO  L130     BoogieDeclarations]: Found specification of procedure _addPauser~address_PauserRole__success
[2020-11-25 08:45:45,499 INFO  L130     BoogieDeclarations]: Found specification of procedure _removePauser~address_PauserRole__success
[2020-11-25 08:45:45,500 INFO  L130     BoogieDeclarations]: Found specification of procedure Pausable_Pausable_NoBaseCtor__success
[2020-11-25 08:45:45,500 INFO  L130     BoogieDeclarations]: Found specification of procedure Pausable_Pausable
[2020-11-25 08:45:45,500 INFO  L138     BoogieDeclarations]: Found implementation of procedure Pausable_Pausable
[2020-11-25 08:45:45,500 INFO  L130     BoogieDeclarations]: Found specification of procedure paused_Pausable
[2020-11-25 08:45:45,500 INFO  L138     BoogieDeclarations]: Found implementation of procedure paused_Pausable
[2020-11-25 08:45:45,500 INFO  L130     BoogieDeclarations]: Found specification of procedure pause_Pausable
[2020-11-25 08:45:45,500 INFO  L138     BoogieDeclarations]: Found implementation of procedure pause_Pausable
[2020-11-25 08:45:45,500 INFO  L130     BoogieDeclarations]: Found specification of procedure unpause_Pausable
[2020-11-25 08:45:45,500 INFO  L138     BoogieDeclarations]: Found implementation of procedure unpause_Pausable
[2020-11-25 08:45:45,500 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Pausable_ERC20Pausable_NoBaseCtor__success
[2020-11-25 08:45:45,501 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Pausable_ERC20Pausable
[2020-11-25 08:45:45,501 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Pausable_ERC20Pausable
[2020-11-25 08:45:45,501 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_ERC20Pausable
[2020-11-25 08:45:45,501 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_ERC20Pausable
[2020-11-25 08:45:45,501 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_ERC20Pausable
[2020-11-25 08:45:45,501 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_ERC20Pausable
[2020-11-25 08:45:45,501 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_ERC20Pausable
[2020-11-25 08:45:45,501 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_ERC20Pausable
[2020-11-25 08:45:45,501 INFO  L130     BoogieDeclarations]: Found specification of procedure increaseAllowance~address~uint256_ERC20Pausable
[2020-11-25 08:45:45,501 INFO  L138     BoogieDeclarations]: Found implementation of procedure increaseAllowance~address~uint256_ERC20Pausable
[2020-11-25 08:45:45,501 INFO  L130     BoogieDeclarations]: Found specification of procedure decreaseAllowance~address~uint256_ERC20Pausable
[2020-11-25 08:45:45,502 INFO  L138     BoogieDeclarations]: Found implementation of procedure decreaseAllowance~address~uint256_ERC20Pausable
[2020-11-25 08:45:45,502 INFO  L130     BoogieDeclarations]: Found specification of procedure MinterRole_MinterRole_NoBaseCtor__success
[2020-11-25 08:45:45,502 INFO  L130     BoogieDeclarations]: Found specification of procedure MinterRole_MinterRole
[2020-11-25 08:45:45,502 INFO  L138     BoogieDeclarations]: Found implementation of procedure MinterRole_MinterRole
[2020-11-25 08:45:45,502 INFO  L130     BoogieDeclarations]: Found specification of procedure isMinter~address_MinterRole
[2020-11-25 08:45:45,502 INFO  L138     BoogieDeclarations]: Found implementation of procedure isMinter~address_MinterRole
[2020-11-25 08:45:45,502 INFO  L130     BoogieDeclarations]: Found specification of procedure addMinter~address_MinterRole
[2020-11-25 08:45:45,502 INFO  L138     BoogieDeclarations]: Found implementation of procedure addMinter~address_MinterRole
[2020-11-25 08:45:45,502 INFO  L130     BoogieDeclarations]: Found specification of procedure renounceMinter_MinterRole
[2020-11-25 08:45:45,502 INFO  L138     BoogieDeclarations]: Found implementation of procedure renounceMinter_MinterRole
[2020-11-25 08:45:45,503 INFO  L130     BoogieDeclarations]: Found specification of procedure _addMinter~address_MinterRole__success
[2020-11-25 08:45:45,503 INFO  L130     BoogieDeclarations]: Found specification of procedure _removeMinter~address_MinterRole__success
[2020-11-25 08:45:45,503 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Mintable_ERC20Mintable_NoBaseCtor__success
[2020-11-25 08:45:45,503 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Mintable_ERC20Mintable
[2020-11-25 08:45:45,503 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Mintable_ERC20Mintable
[2020-11-25 08:45:45,503 INFO  L130     BoogieDeclarations]: Found specification of procedure mint~address~uint256_ERC20Mintable
[2020-11-25 08:45:45,503 INFO  L138     BoogieDeclarations]: Found implementation of procedure mint~address~uint256_ERC20Mintable
[2020-11-25 08:45:45,503 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Burnable_ERC20Burnable_NoBaseCtor__success
[2020-11-25 08:45:45,503 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Burnable_ERC20Burnable
[2020-11-25 08:45:45,504 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Burnable_ERC20Burnable
[2020-11-25 08:45:45,504 INFO  L130     BoogieDeclarations]: Found specification of procedure burn~uint256_ERC20Burnable
[2020-11-25 08:45:45,504 INFO  L138     BoogieDeclarations]: Found implementation of procedure burn~uint256_ERC20Burnable
[2020-11-25 08:45:45,504 INFO  L130     BoogieDeclarations]: Found specification of procedure burnFrom~address~uint256_ERC20Burnable
[2020-11-25 08:45:45,504 INFO  L138     BoogieDeclarations]: Found implementation of procedure burnFrom~address~uint256_ERC20Burnable
[2020-11-25 08:45:45,504 INFO  L130     BoogieDeclarations]: Found specification of procedure Wafl_Wafl_NoBaseCtor__success
[2020-11-25 08:45:45,504 INFO  L130     BoogieDeclarations]: Found specification of procedure Wafl_Wafl
[2020-11-25 08:45:45,504 INFO  L138     BoogieDeclarations]: Found implementation of procedure Wafl_Wafl
[2020-11-25 08:45:45,504 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackDispatch__success
[2020-11-25 08:45:45,505 INFO  L130     BoogieDeclarations]: Found specification of procedure Fallback_UnknownType__success
[2020-11-25 08:45:45,505 INFO  L130     BoogieDeclarations]: Found specification of procedure send__success
[2020-11-25 08:45:45,505 INFO  L130     BoogieDeclarations]: Found specification of procedure onlyOwner_pre__success
[2020-11-25 08:45:45,505 INFO  L130     BoogieDeclarations]: Found specification of procedure onlyPauser_pre__success
[2020-11-25 08:45:45,505 INFO  L130     BoogieDeclarations]: Found specification of procedure whenNotPaused_pre__success
[2020-11-25 08:45:45,505 INFO  L130     BoogieDeclarations]: Found specification of procedure whenPaused_pre__success
[2020-11-25 08:45:45,505 INFO  L130     BoogieDeclarations]: Found specification of procedure onlyMinter_pre__success
[2020-11-25 08:45:45,505 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_SafeMath
[2020-11-25 08:45:45,505 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_SafeMath
[2020-11-25 08:45:45,505 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_Ownable
[2020-11-25 08:45:45,506 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_Ownable
[2020-11-25 08:45:45,506 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_IERC20
[2020-11-25 08:45:45,506 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_IERC20
[2020-11-25 08:45:45,506 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_ERC20
[2020-11-25 08:45:45,506 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_ERC20
[2020-11-25 08:45:45,506 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_ERC20Detailed
[2020-11-25 08:45:45,506 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_ERC20Detailed
[2020-11-25 08:45:45,506 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_Roles
[2020-11-25 08:45:45,506 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_Roles
[2020-11-25 08:45:45,507 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_PauserRole
[2020-11-25 08:45:45,507 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_PauserRole
[2020-11-25 08:45:45,507 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_Pausable
[2020-11-25 08:45:45,507 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_Pausable
[2020-11-25 08:45:45,507 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_ERC20Pausable
[2020-11-25 08:45:45,507 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_ERC20Pausable
[2020-11-25 08:45:45,507 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_MinterRole
[2020-11-25 08:45:45,507 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_MinterRole
[2020-11-25 08:45:45,507 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_ERC20Mintable
[2020-11-25 08:45:45,507 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_ERC20Mintable
[2020-11-25 08:45:45,508 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_ERC20Burnable
[2020-11-25 08:45:45,508 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_ERC20Burnable
[2020-11-25 08:45:45,508 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_Wafl
[2020-11-25 08:45:45,508 INFO  L130     BoogieDeclarations]: Found specification of procedure main
[2020-11-25 08:45:45,508 INFO  L130     BoogieDeclarations]: Found specification of procedure FreshRefGenerator__fail
[2020-11-25 08:45:45,508 INFO  L130     BoogieDeclarations]: Found specification of procedure Roles.Role_ctor__fail
[2020-11-25 08:45:45,508 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath_NoBaseCtor__fail
[2020-11-25 08:45:45,508 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath__success
[2020-11-25 08:45:45,508 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath__fail
[2020-11-25 08:45:45,508 INFO  L130     BoogieDeclarations]: Found specification of procedure add~uint256~uint256_SafeMath__fail
[2020-11-25 08:45:45,509 INFO  L130     BoogieDeclarations]: Found specification of procedure sub~uint256~uint256_SafeMath__fail
[2020-11-25 08:45:45,509 INFO  L130     BoogieDeclarations]: Found specification of procedure mul~uint256~uint256_SafeMath__fail
[2020-11-25 08:45:45,509 INFO  L130     BoogieDeclarations]: Found specification of procedure div~uint256~uint256_SafeMath__fail
[2020-11-25 08:45:45,509 INFO  L130     BoogieDeclarations]: Found specification of procedure mod~uint256~uint256_SafeMath__fail
[2020-11-25 08:45:45,509 INFO  L130     BoogieDeclarations]: Found specification of procedure Ownable_Ownable_NoBaseCtor__fail
[2020-11-25 08:45:45,509 INFO  L130     BoogieDeclarations]: Found specification of procedure Ownable_Ownable__success
[2020-11-25 08:45:45,509 INFO  L130     BoogieDeclarations]: Found specification of procedure Ownable_Ownable__fail
[2020-11-25 08:45:45,509 INFO  L130     BoogieDeclarations]: Found specification of procedure owner_Ownable__success
[2020-11-25 08:45:45,509 INFO  L130     BoogieDeclarations]: Found specification of procedure owner_Ownable__fail
[2020-11-25 08:45:45,509 INFO  L130     BoogieDeclarations]: Found specification of procedure isOwner_Ownable__success
[2020-11-25 08:45:45,510 INFO  L130     BoogieDeclarations]: Found specification of procedure isOwner_Ownable__fail
[2020-11-25 08:45:45,510 INFO  L130     BoogieDeclarations]: Found specification of procedure renounceOwnership_Ownable__success
[2020-11-25 08:45:45,510 INFO  L130     BoogieDeclarations]: Found specification of procedure renounceOwnership_Ownable__fail
[2020-11-25 08:45:45,510 INFO  L130     BoogieDeclarations]: Found specification of procedure transferOwnership~address_Ownable__success
[2020-11-25 08:45:45,510 INFO  L130     BoogieDeclarations]: Found specification of procedure transferOwnership~address_Ownable__fail
[2020-11-25 08:45:45,510 INFO  L130     BoogieDeclarations]: Found specification of procedure _transferOwnership~address_Ownable__fail
[2020-11-25 08:45:45,510 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20_NoBaseCtor__fail
[2020-11-25 08:45:45,510 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20__success
[2020-11-25 08:45:45,510 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20__fail
[2020-11-25 08:45:45,510 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20_NoBaseCtor__fail
[2020-11-25 08:45:45,510 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20__success
[2020-11-25 08:45:45,510 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20__fail
[2020-11-25 08:45:45,511 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_ERC20__success
[2020-11-25 08:45:45,511 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_ERC20__fail
[2020-11-25 08:45:45,511 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_ERC20__success
[2020-11-25 08:45:45,511 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_ERC20__fail
[2020-11-25 08:45:45,511 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_ERC20__success
[2020-11-25 08:45:45,511 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_ERC20__fail
[2020-11-25 08:45:45,511 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_ERC20__success
[2020-11-25 08:45:45,511 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_ERC20__fail
[2020-11-25 08:45:45,511 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_ERC20__success
[2020-11-25 08:45:45,511 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_ERC20__fail
[2020-11-25 08:45:45,511 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_ERC20__success
[2020-11-25 08:45:45,512 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_ERC20__fail
[2020-11-25 08:45:45,512 INFO  L130     BoogieDeclarations]: Found specification of procedure increaseAllowance~address~uint256_ERC20__success
[2020-11-25 08:45:45,512 INFO  L130     BoogieDeclarations]: Found specification of procedure increaseAllowance~address~uint256_ERC20__fail
[2020-11-25 08:45:45,512 INFO  L130     BoogieDeclarations]: Found specification of procedure decreaseAllowance~address~uint256_ERC20__success
[2020-11-25 08:45:45,512 INFO  L130     BoogieDeclarations]: Found specification of procedure decreaseAllowance~address~uint256_ERC20__fail
[2020-11-25 08:45:45,512 INFO  L130     BoogieDeclarations]: Found specification of procedure _transfer~address~address~uint256_ERC20__fail
[2020-11-25 08:45:45,512 INFO  L130     BoogieDeclarations]: Found specification of procedure _mint~address~uint256_ERC20__fail
[2020-11-25 08:45:45,512 INFO  L130     BoogieDeclarations]: Found specification of procedure _burn~address~uint256_ERC20__fail
[2020-11-25 08:45:45,512 INFO  L130     BoogieDeclarations]: Found specification of procedure _approve~address~address~uint256_ERC20__fail
[2020-11-25 08:45:45,512 INFO  L130     BoogieDeclarations]: Found specification of procedure _burnFrom~address~uint256_ERC20__fail
[2020-11-25 08:45:45,512 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Detailed_ERC20Detailed_NoBaseCtor__fail
[2020-11-25 08:45:45,513 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Detailed_ERC20Detailed__success
[2020-11-25 08:45:45,513 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Detailed_ERC20Detailed__fail
[2020-11-25 08:45:45,513 INFO  L130     BoogieDeclarations]: Found specification of procedure name_ERC20Detailed__success
[2020-11-25 08:45:45,513 INFO  L130     BoogieDeclarations]: Found specification of procedure name_ERC20Detailed__fail
[2020-11-25 08:45:45,513 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_ERC20Detailed__success
[2020-11-25 08:45:45,513 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_ERC20Detailed__fail
[2020-11-25 08:45:45,513 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_ERC20Detailed__success
[2020-11-25 08:45:45,513 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_ERC20Detailed__fail
[2020-11-25 08:45:45,513 INFO  L130     BoogieDeclarations]: Found specification of procedure Roles_Roles_NoBaseCtor__fail
[2020-11-25 08:45:45,513 INFO  L130     BoogieDeclarations]: Found specification of procedure Roles_Roles__success
[2020-11-25 08:45:45,513 INFO  L130     BoogieDeclarations]: Found specification of procedure Roles_Roles__fail
[2020-11-25 08:45:45,514 INFO  L130     BoogieDeclarations]: Found specification of procedure add~Role~address_Roles__fail
[2020-11-25 08:45:45,514 INFO  L130     BoogieDeclarations]: Found specification of procedure remove~Role~address_Roles__fail
[2020-11-25 08:45:45,514 INFO  L130     BoogieDeclarations]: Found specification of procedure has~Role~address_Roles__fail
[2020-11-25 08:45:45,514 INFO  L130     BoogieDeclarations]: Found specification of procedure PauserRole_PauserRole_NoBaseCtor__fail
[2020-11-25 08:45:45,514 INFO  L130     BoogieDeclarations]: Found specification of procedure PauserRole_PauserRole__success
[2020-11-25 08:45:45,514 INFO  L130     BoogieDeclarations]: Found specification of procedure PauserRole_PauserRole__fail
[2020-11-25 08:45:45,514 INFO  L130     BoogieDeclarations]: Found specification of procedure isPauser~address_PauserRole__success
[2020-11-25 08:45:45,514 INFO  L130     BoogieDeclarations]: Found specification of procedure isPauser~address_PauserRole__fail
[2020-11-25 08:45:45,514 INFO  L130     BoogieDeclarations]: Found specification of procedure addPauser~address_PauserRole__success
[2020-11-25 08:45:45,514 INFO  L130     BoogieDeclarations]: Found specification of procedure addPauser~address_PauserRole__fail
[2020-11-25 08:45:45,514 INFO  L130     BoogieDeclarations]: Found specification of procedure renouncePauser_PauserRole__success
[2020-11-25 08:45:45,514 INFO  L130     BoogieDeclarations]: Found specification of procedure renouncePauser_PauserRole__fail
[2020-11-25 08:45:45,515 INFO  L130     BoogieDeclarations]: Found specification of procedure _addPauser~address_PauserRole__fail
[2020-11-25 08:45:45,515 INFO  L130     BoogieDeclarations]: Found specification of procedure _removePauser~address_PauserRole__fail
[2020-11-25 08:45:45,515 INFO  L130     BoogieDeclarations]: Found specification of procedure Pausable_Pausable_NoBaseCtor__fail
[2020-11-25 08:45:45,515 INFO  L130     BoogieDeclarations]: Found specification of procedure Pausable_Pausable__success
[2020-11-25 08:45:45,515 INFO  L130     BoogieDeclarations]: Found specification of procedure Pausable_Pausable__fail
[2020-11-25 08:45:45,515 INFO  L130     BoogieDeclarations]: Found specification of procedure paused_Pausable__success
[2020-11-25 08:45:45,515 INFO  L130     BoogieDeclarations]: Found specification of procedure paused_Pausable__fail
[2020-11-25 08:45:45,515 INFO  L130     BoogieDeclarations]: Found specification of procedure pause_Pausable__success
[2020-11-25 08:45:45,515 INFO  L130     BoogieDeclarations]: Found specification of procedure pause_Pausable__fail
[2020-11-25 08:45:45,515 INFO  L130     BoogieDeclarations]: Found specification of procedure unpause_Pausable__success
[2020-11-25 08:45:45,515 INFO  L130     BoogieDeclarations]: Found specification of procedure unpause_Pausable__fail
[2020-11-25 08:45:45,516 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Pausable_ERC20Pausable_NoBaseCtor__fail
[2020-11-25 08:45:45,516 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Pausable_ERC20Pausable__success
[2020-11-25 08:45:45,516 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Pausable_ERC20Pausable__fail
[2020-11-25 08:45:45,516 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_ERC20Pausable__success
[2020-11-25 08:45:45,516 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_ERC20Pausable__fail
[2020-11-25 08:45:45,516 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_ERC20Pausable__success
[2020-11-25 08:45:45,516 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_ERC20Pausable__fail
[2020-11-25 08:45:45,516 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_ERC20Pausable__success
[2020-11-25 08:45:45,516 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_ERC20Pausable__fail
[2020-11-25 08:45:45,516 INFO  L130     BoogieDeclarations]: Found specification of procedure increaseAllowance~address~uint256_ERC20Pausable__success
[2020-11-25 08:45:45,516 INFO  L130     BoogieDeclarations]: Found specification of procedure increaseAllowance~address~uint256_ERC20Pausable__fail
[2020-11-25 08:45:45,517 INFO  L130     BoogieDeclarations]: Found specification of procedure decreaseAllowance~address~uint256_ERC20Pausable__success
[2020-11-25 08:45:45,517 INFO  L130     BoogieDeclarations]: Found specification of procedure decreaseAllowance~address~uint256_ERC20Pausable__fail
[2020-11-25 08:45:45,517 INFO  L130     BoogieDeclarations]: Found specification of procedure MinterRole_MinterRole_NoBaseCtor__fail
[2020-11-25 08:45:45,517 INFO  L130     BoogieDeclarations]: Found specification of procedure MinterRole_MinterRole__success
[2020-11-25 08:45:45,517 INFO  L130     BoogieDeclarations]: Found specification of procedure MinterRole_MinterRole__fail
[2020-11-25 08:45:45,517 INFO  L130     BoogieDeclarations]: Found specification of procedure isMinter~address_MinterRole__success
[2020-11-25 08:45:45,517 INFO  L130     BoogieDeclarations]: Found specification of procedure isMinter~address_MinterRole__fail
[2020-11-25 08:45:45,517 INFO  L130     BoogieDeclarations]: Found specification of procedure addMinter~address_MinterRole__success
[2020-11-25 08:45:45,517 INFO  L130     BoogieDeclarations]: Found specification of procedure addMinter~address_MinterRole__fail
[2020-11-25 08:45:45,517 INFO  L130     BoogieDeclarations]: Found specification of procedure renounceMinter_MinterRole__success
[2020-11-25 08:45:45,517 INFO  L130     BoogieDeclarations]: Found specification of procedure renounceMinter_MinterRole__fail
[2020-11-25 08:45:45,517 INFO  L130     BoogieDeclarations]: Found specification of procedure _addMinter~address_MinterRole__fail
[2020-11-25 08:45:45,518 INFO  L130     BoogieDeclarations]: Found specification of procedure _removeMinter~address_MinterRole__fail
[2020-11-25 08:45:45,518 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Mintable_ERC20Mintable_NoBaseCtor__fail
[2020-11-25 08:45:45,518 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Mintable_ERC20Mintable__success
[2020-11-25 08:45:45,518 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Mintable_ERC20Mintable__fail
[2020-11-25 08:45:45,518 INFO  L130     BoogieDeclarations]: Found specification of procedure mint~address~uint256_ERC20Mintable__success
[2020-11-25 08:45:45,518 INFO  L130     BoogieDeclarations]: Found specification of procedure mint~address~uint256_ERC20Mintable__fail
[2020-11-25 08:45:45,518 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Burnable_ERC20Burnable_NoBaseCtor__fail
[2020-11-25 08:45:45,518 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Burnable_ERC20Burnable__success
[2020-11-25 08:45:45,518 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Burnable_ERC20Burnable__fail
[2020-11-25 08:45:45,518 INFO  L130     BoogieDeclarations]: Found specification of procedure burn~uint256_ERC20Burnable__success
[2020-11-25 08:45:45,518 INFO  L130     BoogieDeclarations]: Found specification of procedure burn~uint256_ERC20Burnable__fail
[2020-11-25 08:45:45,519 INFO  L130     BoogieDeclarations]: Found specification of procedure burnFrom~address~uint256_ERC20Burnable__success
[2020-11-25 08:45:45,519 INFO  L130     BoogieDeclarations]: Found specification of procedure burnFrom~address~uint256_ERC20Burnable__fail
[2020-11-25 08:45:45,519 INFO  L130     BoogieDeclarations]: Found specification of procedure Wafl_Wafl_NoBaseCtor__fail
[2020-11-25 08:45:45,519 INFO  L130     BoogieDeclarations]: Found specification of procedure Wafl_Wafl__success
[2020-11-25 08:45:45,519 INFO  L130     BoogieDeclarations]: Found specification of procedure Wafl_Wafl__fail
[2020-11-25 08:45:45,519 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackDispatch__fail
[2020-11-25 08:45:45,519 INFO  L130     BoogieDeclarations]: Found specification of procedure Fallback_UnknownType__fail
[2020-11-25 08:45:45,519 INFO  L130     BoogieDeclarations]: Found specification of procedure send__fail
[2020-11-25 08:45:45,519 INFO  L130     BoogieDeclarations]: Found specification of procedure onlyOwner_pre__fail
[2020-11-25 08:45:45,519 INFO  L130     BoogieDeclarations]: Found specification of procedure onlyPauser_pre__fail
[2020-11-25 08:45:45,519 INFO  L130     BoogieDeclarations]: Found specification of procedure whenNotPaused_pre__fail
[2020-11-25 08:45:45,520 INFO  L130     BoogieDeclarations]: Found specification of procedure whenPaused_pre__fail
[2020-11-25 08:45:45,520 INFO  L130     BoogieDeclarations]: Found specification of procedure onlyMinter_pre__fail
[2020-11-25 08:45:45,520 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreshRefGenerator__fail
[2020-11-25 08:45:45,520 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreshRefGenerator__success
[2020-11-25 08:45:45,520 INFO  L138     BoogieDeclarations]: Found implementation of procedure Roles.Role_ctor__fail
[2020-11-25 08:45:45,520 INFO  L138     BoogieDeclarations]: Found implementation of procedure Roles.Role_ctor__success
[2020-11-25 08:45:45,520 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath_NoBaseCtor__fail
[2020-11-25 08:45:45,520 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath_NoBaseCtor__success
[2020-11-25 08:45:45,520 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath__fail
[2020-11-25 08:45:45,520 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath__success
[2020-11-25 08:45:45,520 INFO  L138     BoogieDeclarations]: Found implementation of procedure add~uint256~uint256_SafeMath__fail
[2020-11-25 08:45:45,521 INFO  L138     BoogieDeclarations]: Found implementation of procedure add~uint256~uint256_SafeMath__success
[2020-11-25 08:45:45,521 INFO  L138     BoogieDeclarations]: Found implementation of procedure sub~uint256~uint256_SafeMath__fail
[2020-11-25 08:45:45,521 INFO  L138     BoogieDeclarations]: Found implementation of procedure sub~uint256~uint256_SafeMath__success
[2020-11-25 08:45:45,521 INFO  L138     BoogieDeclarations]: Found implementation of procedure mul~uint256~uint256_SafeMath__fail
[2020-11-25 08:45:45,521 INFO  L138     BoogieDeclarations]: Found implementation of procedure mul~uint256~uint256_SafeMath__success
[2020-11-25 08:45:45,521 INFO  L138     BoogieDeclarations]: Found implementation of procedure div~uint256~uint256_SafeMath__fail
[2020-11-25 08:45:45,521 INFO  L138     BoogieDeclarations]: Found implementation of procedure div~uint256~uint256_SafeMath__success
[2020-11-25 08:45:45,521 INFO  L138     BoogieDeclarations]: Found implementation of procedure mod~uint256~uint256_SafeMath__fail
[2020-11-25 08:45:45,521 INFO  L138     BoogieDeclarations]: Found implementation of procedure mod~uint256~uint256_SafeMath__success
[2020-11-25 08:45:45,521 INFO  L138     BoogieDeclarations]: Found implementation of procedure Ownable_Ownable_NoBaseCtor__fail
[2020-11-25 08:45:45,521 INFO  L138     BoogieDeclarations]: Found implementation of procedure Ownable_Ownable_NoBaseCtor__success
[2020-11-25 08:45:45,522 INFO  L138     BoogieDeclarations]: Found implementation of procedure Ownable_Ownable__fail
[2020-11-25 08:45:45,522 INFO  L138     BoogieDeclarations]: Found implementation of procedure Ownable_Ownable__success
[2020-11-25 08:45:45,522 INFO  L138     BoogieDeclarations]: Found implementation of procedure owner_Ownable__fail
[2020-11-25 08:45:45,522 INFO  L138     BoogieDeclarations]: Found implementation of procedure owner_Ownable__success
[2020-11-25 08:45:45,522 INFO  L138     BoogieDeclarations]: Found implementation of procedure isOwner_Ownable__fail
[2020-11-25 08:45:45,522 INFO  L138     BoogieDeclarations]: Found implementation of procedure isOwner_Ownable__success
[2020-11-25 08:45:45,522 INFO  L138     BoogieDeclarations]: Found implementation of procedure renounceOwnership_Ownable__fail
[2020-11-25 08:45:45,522 INFO  L138     BoogieDeclarations]: Found implementation of procedure renounceOwnership_Ownable__success
[2020-11-25 08:45:45,522 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferOwnership~address_Ownable__fail
[2020-11-25 08:45:45,522 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferOwnership~address_Ownable__success
[2020-11-25 08:45:45,522 INFO  L138     BoogieDeclarations]: Found implementation of procedure _transferOwnership~address_Ownable__fail
[2020-11-25 08:45:45,522 INFO  L138     BoogieDeclarations]: Found implementation of procedure _transferOwnership~address_Ownable__success
[2020-11-25 08:45:45,523 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20_NoBaseCtor__fail
[2020-11-25 08:45:45,523 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20_NoBaseCtor__success
[2020-11-25 08:45:45,523 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20__fail
[2020-11-25 08:45:45,523 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20__success
[2020-11-25 08:45:45,523 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20_NoBaseCtor__fail
[2020-11-25 08:45:45,523 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20_NoBaseCtor__success
[2020-11-25 08:45:45,523 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20__fail
[2020-11-25 08:45:45,523 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20__success
[2020-11-25 08:45:45,523 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_ERC20__fail
[2020-11-25 08:45:45,523 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_ERC20__success
[2020-11-25 08:45:45,523 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_ERC20__fail
[2020-11-25 08:45:45,523 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_ERC20__success
[2020-11-25 08:45:45,524 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_ERC20__fail
[2020-11-25 08:45:45,524 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_ERC20__success
[2020-11-25 08:45:45,524 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_ERC20__fail
[2020-11-25 08:45:45,524 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_ERC20__success
[2020-11-25 08:45:45,524 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_ERC20__fail
[2020-11-25 08:45:45,524 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_ERC20__success
[2020-11-25 08:45:45,524 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_ERC20__fail
[2020-11-25 08:45:45,524 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_ERC20__success
[2020-11-25 08:45:45,524 INFO  L138     BoogieDeclarations]: Found implementation of procedure increaseAllowance~address~uint256_ERC20__fail
[2020-11-25 08:45:45,524 INFO  L138     BoogieDeclarations]: Found implementation of procedure increaseAllowance~address~uint256_ERC20__success
[2020-11-25 08:45:45,524 INFO  L138     BoogieDeclarations]: Found implementation of procedure decreaseAllowance~address~uint256_ERC20__fail
[2020-11-25 08:45:45,524 INFO  L138     BoogieDeclarations]: Found implementation of procedure decreaseAllowance~address~uint256_ERC20__success
[2020-11-25 08:45:45,525 INFO  L138     BoogieDeclarations]: Found implementation of procedure _transfer~address~address~uint256_ERC20__fail
[2020-11-25 08:45:45,525 INFO  L138     BoogieDeclarations]: Found implementation of procedure _transfer~address~address~uint256_ERC20__success
[2020-11-25 08:45:45,525 INFO  L138     BoogieDeclarations]: Found implementation of procedure _mint~address~uint256_ERC20__fail
[2020-11-25 08:45:45,525 INFO  L138     BoogieDeclarations]: Found implementation of procedure _mint~address~uint256_ERC20__success
[2020-11-25 08:45:45,525 INFO  L138     BoogieDeclarations]: Found implementation of procedure _burn~address~uint256_ERC20__fail
[2020-11-25 08:45:45,525 INFO  L138     BoogieDeclarations]: Found implementation of procedure _burn~address~uint256_ERC20__success
[2020-11-25 08:45:45,525 INFO  L138     BoogieDeclarations]: Found implementation of procedure _approve~address~address~uint256_ERC20__fail
[2020-11-25 08:45:45,525 INFO  L138     BoogieDeclarations]: Found implementation of procedure _approve~address~address~uint256_ERC20__success
[2020-11-25 08:45:45,525 INFO  L138     BoogieDeclarations]: Found implementation of procedure _burnFrom~address~uint256_ERC20__fail
[2020-11-25 08:45:45,525 INFO  L138     BoogieDeclarations]: Found implementation of procedure _burnFrom~address~uint256_ERC20__success
[2020-11-25 08:45:45,525 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Detailed_ERC20Detailed_NoBaseCtor__fail
[2020-11-25 08:45:45,525 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Detailed_ERC20Detailed_NoBaseCtor__success
[2020-11-25 08:45:45,526 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Detailed_ERC20Detailed__fail
[2020-11-25 08:45:45,526 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Detailed_ERC20Detailed__success
[2020-11-25 08:45:45,526 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_ERC20Detailed__fail
[2020-11-25 08:45:45,526 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_ERC20Detailed__success
[2020-11-25 08:45:45,526 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_ERC20Detailed__fail
[2020-11-25 08:45:45,526 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_ERC20Detailed__success
[2020-11-25 08:45:45,526 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_ERC20Detailed__fail
[2020-11-25 08:45:45,526 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_ERC20Detailed__success
[2020-11-25 08:45:45,526 INFO  L138     BoogieDeclarations]: Found implementation of procedure Roles_Roles_NoBaseCtor__fail
[2020-11-25 08:45:45,526 INFO  L138     BoogieDeclarations]: Found implementation of procedure Roles_Roles_NoBaseCtor__success
[2020-11-25 08:45:45,526 INFO  L138     BoogieDeclarations]: Found implementation of procedure Roles_Roles__fail
[2020-11-25 08:45:45,526 INFO  L138     BoogieDeclarations]: Found implementation of procedure Roles_Roles__success
[2020-11-25 08:45:45,527 INFO  L138     BoogieDeclarations]: Found implementation of procedure add~Role~address_Roles__fail
[2020-11-25 08:45:45,527 INFO  L138     BoogieDeclarations]: Found implementation of procedure add~Role~address_Roles__success
[2020-11-25 08:45:45,527 INFO  L138     BoogieDeclarations]: Found implementation of procedure remove~Role~address_Roles__fail
[2020-11-25 08:45:45,527 INFO  L138     BoogieDeclarations]: Found implementation of procedure remove~Role~address_Roles__success
[2020-11-25 08:45:45,527 INFO  L138     BoogieDeclarations]: Found implementation of procedure has~Role~address_Roles__fail
[2020-11-25 08:45:45,527 INFO  L138     BoogieDeclarations]: Found implementation of procedure has~Role~address_Roles__success
[2020-11-25 08:45:45,527 INFO  L138     BoogieDeclarations]: Found implementation of procedure PauserRole_PauserRole_NoBaseCtor__fail
[2020-11-25 08:45:45,527 INFO  L138     BoogieDeclarations]: Found implementation of procedure PauserRole_PauserRole_NoBaseCtor__success
[2020-11-25 08:45:45,527 INFO  L138     BoogieDeclarations]: Found implementation of procedure PauserRole_PauserRole__fail
[2020-11-25 08:45:45,527 INFO  L138     BoogieDeclarations]: Found implementation of procedure PauserRole_PauserRole__success
[2020-11-25 08:45:45,527 INFO  L138     BoogieDeclarations]: Found implementation of procedure isPauser~address_PauserRole__fail
[2020-11-25 08:45:45,527 INFO  L138     BoogieDeclarations]: Found implementation of procedure isPauser~address_PauserRole__success
[2020-11-25 08:45:45,528 INFO  L138     BoogieDeclarations]: Found implementation of procedure addPauser~address_PauserRole__fail
[2020-11-25 08:45:45,528 INFO  L138     BoogieDeclarations]: Found implementation of procedure addPauser~address_PauserRole__success
[2020-11-25 08:45:45,528 INFO  L138     BoogieDeclarations]: Found implementation of procedure renouncePauser_PauserRole__fail
[2020-11-25 08:45:45,528 INFO  L138     BoogieDeclarations]: Found implementation of procedure renouncePauser_PauserRole__success
[2020-11-25 08:45:45,528 INFO  L138     BoogieDeclarations]: Found implementation of procedure _addPauser~address_PauserRole__fail
[2020-11-25 08:45:45,528 INFO  L138     BoogieDeclarations]: Found implementation of procedure _addPauser~address_PauserRole__success
[2020-11-25 08:45:45,528 INFO  L138     BoogieDeclarations]: Found implementation of procedure _removePauser~address_PauserRole__fail
[2020-11-25 08:45:45,528 INFO  L138     BoogieDeclarations]: Found implementation of procedure _removePauser~address_PauserRole__success
[2020-11-25 08:45:45,528 INFO  L138     BoogieDeclarations]: Found implementation of procedure Pausable_Pausable_NoBaseCtor__fail
[2020-11-25 08:45:45,528 INFO  L138     BoogieDeclarations]: Found implementation of procedure Pausable_Pausable_NoBaseCtor__success
[2020-11-25 08:45:45,528 INFO  L138     BoogieDeclarations]: Found implementation of procedure Pausable_Pausable__fail
[2020-11-25 08:45:45,528 INFO  L138     BoogieDeclarations]: Found implementation of procedure Pausable_Pausable__success
[2020-11-25 08:45:45,528 INFO  L138     BoogieDeclarations]: Found implementation of procedure paused_Pausable__fail
[2020-11-25 08:45:45,529 INFO  L138     BoogieDeclarations]: Found implementation of procedure paused_Pausable__success
[2020-11-25 08:45:45,529 INFO  L138     BoogieDeclarations]: Found implementation of procedure pause_Pausable__fail
[2020-11-25 08:45:45,529 INFO  L138     BoogieDeclarations]: Found implementation of procedure pause_Pausable__success
[2020-11-25 08:45:45,529 INFO  L138     BoogieDeclarations]: Found implementation of procedure unpause_Pausable__fail
[2020-11-25 08:45:45,529 INFO  L138     BoogieDeclarations]: Found implementation of procedure unpause_Pausable__success
[2020-11-25 08:45:45,529 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Pausable_ERC20Pausable_NoBaseCtor__fail
[2020-11-25 08:45:45,529 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Pausable_ERC20Pausable_NoBaseCtor__success
[2020-11-25 08:45:45,529 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Pausable_ERC20Pausable__fail
[2020-11-25 08:45:45,529 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Pausable_ERC20Pausable__success
[2020-11-25 08:45:45,529 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_ERC20Pausable__fail
[2020-11-25 08:45:45,529 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_ERC20Pausable__success
[2020-11-25 08:45:45,529 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_ERC20Pausable__fail
[2020-11-25 08:45:45,529 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_ERC20Pausable__success
[2020-11-25 08:45:45,530 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_ERC20Pausable__fail
[2020-11-25 08:45:45,530 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_ERC20Pausable__success
[2020-11-25 08:45:45,530 INFO  L138     BoogieDeclarations]: Found implementation of procedure increaseAllowance~address~uint256_ERC20Pausable__fail
[2020-11-25 08:45:45,530 INFO  L138     BoogieDeclarations]: Found implementation of procedure increaseAllowance~address~uint256_ERC20Pausable__success
[2020-11-25 08:45:45,530 INFO  L138     BoogieDeclarations]: Found implementation of procedure decreaseAllowance~address~uint256_ERC20Pausable__fail
[2020-11-25 08:45:45,530 INFO  L138     BoogieDeclarations]: Found implementation of procedure decreaseAllowance~address~uint256_ERC20Pausable__success
[2020-11-25 08:45:45,530 INFO  L138     BoogieDeclarations]: Found implementation of procedure MinterRole_MinterRole_NoBaseCtor__fail
[2020-11-25 08:45:45,530 INFO  L138     BoogieDeclarations]: Found implementation of procedure MinterRole_MinterRole_NoBaseCtor__success
[2020-11-25 08:45:45,530 INFO  L138     BoogieDeclarations]: Found implementation of procedure MinterRole_MinterRole__fail
[2020-11-25 08:45:45,530 INFO  L138     BoogieDeclarations]: Found implementation of procedure MinterRole_MinterRole__success
[2020-11-25 08:45:45,530 INFO  L138     BoogieDeclarations]: Found implementation of procedure isMinter~address_MinterRole__fail
[2020-11-25 08:45:45,530 INFO  L138     BoogieDeclarations]: Found implementation of procedure isMinter~address_MinterRole__success
[2020-11-25 08:45:45,531 INFO  L138     BoogieDeclarations]: Found implementation of procedure addMinter~address_MinterRole__fail
[2020-11-25 08:45:45,531 INFO  L138     BoogieDeclarations]: Found implementation of procedure addMinter~address_MinterRole__success
[2020-11-25 08:45:45,531 INFO  L138     BoogieDeclarations]: Found implementation of procedure renounceMinter_MinterRole__fail
[2020-11-25 08:45:45,531 INFO  L138     BoogieDeclarations]: Found implementation of procedure renounceMinter_MinterRole__success
[2020-11-25 08:45:45,531 INFO  L138     BoogieDeclarations]: Found implementation of procedure _addMinter~address_MinterRole__fail
[2020-11-25 08:45:45,531 INFO  L138     BoogieDeclarations]: Found implementation of procedure _addMinter~address_MinterRole__success
[2020-11-25 08:45:45,531 INFO  L138     BoogieDeclarations]: Found implementation of procedure _removeMinter~address_MinterRole__fail
[2020-11-25 08:45:45,531 INFO  L138     BoogieDeclarations]: Found implementation of procedure _removeMinter~address_MinterRole__success
[2020-11-25 08:45:45,531 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Mintable_ERC20Mintable_NoBaseCtor__fail
[2020-11-25 08:45:45,531 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Mintable_ERC20Mintable_NoBaseCtor__success
[2020-11-25 08:45:45,531 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Mintable_ERC20Mintable__fail
[2020-11-25 08:45:45,531 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Mintable_ERC20Mintable__success
[2020-11-25 08:45:45,532 INFO  L138     BoogieDeclarations]: Found implementation of procedure mint~address~uint256_ERC20Mintable__fail
[2020-11-25 08:45:45,532 INFO  L138     BoogieDeclarations]: Found implementation of procedure mint~address~uint256_ERC20Mintable__success
[2020-11-25 08:45:45,532 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Burnable_ERC20Burnable_NoBaseCtor__fail
[2020-11-25 08:45:45,532 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Burnable_ERC20Burnable_NoBaseCtor__success
[2020-11-25 08:45:45,532 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Burnable_ERC20Burnable__fail
[2020-11-25 08:45:45,532 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Burnable_ERC20Burnable__success
[2020-11-25 08:45:45,532 INFO  L138     BoogieDeclarations]: Found implementation of procedure burn~uint256_ERC20Burnable__fail
[2020-11-25 08:45:45,532 INFO  L138     BoogieDeclarations]: Found implementation of procedure burn~uint256_ERC20Burnable__success
[2020-11-25 08:45:45,532 INFO  L138     BoogieDeclarations]: Found implementation of procedure burnFrom~address~uint256_ERC20Burnable__fail
[2020-11-25 08:45:45,532 INFO  L138     BoogieDeclarations]: Found implementation of procedure burnFrom~address~uint256_ERC20Burnable__success
[2020-11-25 08:45:45,532 INFO  L138     BoogieDeclarations]: Found implementation of procedure Wafl_Wafl_NoBaseCtor__fail
[2020-11-25 08:45:45,532 INFO  L138     BoogieDeclarations]: Found implementation of procedure Wafl_Wafl_NoBaseCtor__success
[2020-11-25 08:45:45,532 INFO  L138     BoogieDeclarations]: Found implementation of procedure Wafl_Wafl__fail
[2020-11-25 08:45:45,532 INFO  L138     BoogieDeclarations]: Found implementation of procedure Wafl_Wafl__success
[2020-11-25 08:45:45,533 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackDispatch__fail
[2020-11-25 08:45:45,533 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackDispatch__success
[2020-11-25 08:45:45,533 INFO  L138     BoogieDeclarations]: Found implementation of procedure Fallback_UnknownType__fail
[2020-11-25 08:45:45,533 INFO  L138     BoogieDeclarations]: Found implementation of procedure Fallback_UnknownType__success
[2020-11-25 08:45:45,533 INFO  L138     BoogieDeclarations]: Found implementation of procedure send__fail
[2020-11-25 08:45:45,533 INFO  L138     BoogieDeclarations]: Found implementation of procedure send__success
[2020-11-25 08:45:45,533 INFO  L138     BoogieDeclarations]: Found implementation of procedure onlyOwner_pre__fail
[2020-11-25 08:45:45,533 INFO  L138     BoogieDeclarations]: Found implementation of procedure onlyOwner_pre__success
[2020-11-25 08:45:45,533 INFO  L138     BoogieDeclarations]: Found implementation of procedure onlyPauser_pre__fail
[2020-11-25 08:45:45,533 INFO  L138     BoogieDeclarations]: Found implementation of procedure onlyPauser_pre__success
[2020-11-25 08:45:45,533 INFO  L138     BoogieDeclarations]: Found implementation of procedure whenNotPaused_pre__fail
[2020-11-25 08:45:45,533 INFO  L138     BoogieDeclarations]: Found implementation of procedure whenNotPaused_pre__success
[2020-11-25 08:45:45,533 INFO  L138     BoogieDeclarations]: Found implementation of procedure whenPaused_pre__fail
[2020-11-25 08:45:45,534 INFO  L138     BoogieDeclarations]: Found implementation of procedure whenPaused_pre__success
[2020-11-25 08:45:45,534 INFO  L138     BoogieDeclarations]: Found implementation of procedure onlyMinter_pre__fail
[2020-11-25 08:45:45,534 INFO  L138     BoogieDeclarations]: Found implementation of procedure onlyMinter_pre__success
[2020-11-25 08:45:45,534 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_SafeMath
[2020-11-25 08:45:45,534 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_SafeMath
[2020-11-25 08:45:45,534 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_Ownable
[2020-11-25 08:45:45,534 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_Ownable
[2020-11-25 08:45:45,534 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_IERC20
[2020-11-25 08:45:45,534 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_IERC20
[2020-11-25 08:45:45,534 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_ERC20
[2020-11-25 08:45:45,534 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_ERC20
[2020-11-25 08:45:45,534 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_ERC20Detailed
[2020-11-25 08:45:45,534 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_ERC20Detailed
[2020-11-25 08:45:45,534 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_Roles
[2020-11-25 08:45:45,535 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_Roles
[2020-11-25 08:45:45,535 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_PauserRole
[2020-11-25 08:45:45,535 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_PauserRole
[2020-11-25 08:45:45,535 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_Pausable
[2020-11-25 08:45:45,535 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_Pausable
[2020-11-25 08:45:45,535 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_ERC20Pausable
[2020-11-25 08:45:45,535 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_ERC20Pausable
[2020-11-25 08:45:45,535 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_MinterRole
[2020-11-25 08:45:45,535 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_MinterRole
[2020-11-25 08:45:45,535 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_ERC20Mintable
[2020-11-25 08:45:45,535 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_ERC20Mintable
[2020-11-25 08:45:45,535 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_ERC20Burnable
[2020-11-25 08:45:45,535 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_ERC20Burnable
[2020-11-25 08:45:45,536 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_Wafl
[2020-11-25 08:45:45,536 INFO  L138     BoogieDeclarations]: Found implementation of procedure main
[2020-11-25 08:45:45,536 INFO  L130     BoogieDeclarations]: Found specification of procedure ULTIMATE.start
[2020-11-25 08:45:45,536 INFO  L138     BoogieDeclarations]: Found implementation of procedure ULTIMATE.start
[2020-11-25 08:45:46,758 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 08:45:46,758 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 08:45:47,000 INFO  L281             CfgBuilder]: Using the 1 location(s) as analysis (start of procedure ULTIMATE.start)
[2020-11-25 08:45:47,000 INFO  L286             CfgBuilder]: Removed 13 assue(true) statements.
[2020-11-25 08:45:47,003 INFO  L202        PluginConnector]: Adding new model Wafl_0x3Fee076a0f0218899B89fE7e3F54dd2dC18917E0_transfer-self-fail.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 08:45:47 BoogieIcfgContainer
[2020-11-25 08:45:47,003 INFO  L185        PluginConnector]: Executing the observer RCFGBuilderObserver from plugin RCFGBuilder for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 08:45:45" (2/2) ...
[2020-11-25 08:45:47,003 INFO  L85     RCFGBuilderObserver]: No WrapperNode. Let Ultimate process with next node
[2020-11-25 08:45:47,004 INFO  L205        PluginConnector]: Invalid model from RCFGBuilder for observer de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder.RCFGBuilderObserver@4dd4157b and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 08:45:47, skipping insertion in model container
[2020-11-25 08:45:47,004 INFO  L132        PluginConnector]: ------------------------ END RCFGBuilder----------------------------
[2020-11-25 08:45:47,004 INFO  L113        PluginConnector]: ------------------------UtopiaLTL2Aut----------------------------
[2020-11-25 08:45:47,004 INFO  L271        PluginConnector]: Initializing UtopiaLTL2Aut...
[2020-11-25 08:45:47,005 INFO  L276        PluginConnector]: UtopiaLTL2Aut initialized
[2020-11-25 08:45:47,005 INFO  L185        PluginConnector]: Executing the observer UtopiaLTL2AutObserver from plugin UtopiaLTL2Aut for "Wafl_0x3Fee076a0f0218899B89fE7e3F54dd2dC18917E0_transfer-self-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 08:45:45" (1/3) ...
[2020-11-25 08:45:47,006 INFO  L205        PluginConnector]: Invalid model from UtopiaLTL2Aut for observer edu.utexas.cs.utopia.ltl2aut.UtopiaLTL2AutObserver@418811c5 and model type Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 08:45:47, skipping insertion in model container
[2020-11-25 08:45:47,006 INFO  L185        PluginConnector]: Executing the observer UtopiaLTL2AutObserver from plugin UtopiaLTL2Aut for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 08:45:45" (2/3) ...
No working directory specified, using /mnt/data0/jon/SmartPulseTool/ltl2ba
Starting monitored process 1 with /mnt/data0/jon/SmartPulseTool/ltl2ba -f ! ( ( [] ( a -> ( <>b ) ) ) )  (exit command is null, workingDir is null)
[2020-11-25 08:45:47,041 INFO  L202        PluginConnector]: Adding new model Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 08:45:47 NWAContainer
[2020-11-25 08:45:47,041 INFO  L132        PluginConnector]: ------------------------ END UtopiaLTL2Aut----------------------------
[2020-11-25 08:45:47,042 INFO  L113        PluginConnector]: ------------------------BÃ¼chi Program Product----------------------------
[2020-11-25 08:45:47,042 INFO  L271        PluginConnector]: Initializing BÃ¼chi Program Product...
[2020-11-25 08:45:47,042 INFO  L276        PluginConnector]: BÃ¼chi Program Product initialized
[2020-11-25 08:45:47,043 INFO  L185        PluginConnector]: Executing the observer BuchiProductObserver from plugin BÃ¼chi Program Product for "Wafl_0x3Fee076a0f0218899B89fE7e3F54dd2dC18917E0_transfer-self-fail.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 08:45:47" (3/4) ...
[2020-11-25 08:45:47,044 INFO  L205        PluginConnector]: Invalid model from BÃ¼chi Program Product for observer de.uni_freiburg.informatik.ultimate.buchiprogramproduct.BuchiProductObserver@761c7fbc and model type LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 08:45:47, skipping insertion in model container
[2020-11-25 08:45:47,044 INFO  L185        PluginConnector]: Executing the observer BuchiProductObserver from plugin BÃ¼chi Program Product for "Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 08:45:47" (4/4) ...
[2020-11-25 08:45:47,047 INFO  L104   BuchiProductObserver]: Initial property automaton 2 locations, 3 edges
[2020-11-25 08:45:47,054 INFO  L110   BuchiProductObserver]: Initial RCFG 4160 locations, 6114 edges
[2020-11-25 08:45:47,054 INFO  L93    BuchiProductObserver]: Beginning generation of product automaton
[2020-11-25 08:45:47,070 INFO  L136       ProductGenerator]: The program has no step specification, so we assume maximum atomicity
[2020-11-25 08:45:50,330 INFO  L97    BuchiProductObserver]: Finished generation of product automaton successfully
[2020-11-25 08:45:50,345 INFO  L110   BuchiProductObserver]: BuchiProgram size 10770 locations, 20080 edges
[2020-11-25 08:45:50,345 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 08:45:50 BoogieIcfgContainer
[2020-11-25 08:45:50,345 INFO  L132        PluginConnector]: ------------------------ END BÃ¼chi Program Product----------------------------
[2020-11-25 08:45:50,346 INFO  L113        PluginConnector]: ------------------------BlockEncodingV2----------------------------
[2020-11-25 08:45:50,346 INFO  L271        PluginConnector]: Initializing BlockEncodingV2...
[2020-11-25 08:45:50,348 INFO  L276        PluginConnector]: BlockEncodingV2 initialized
[2020-11-25 08:45:50,348 INFO  L185        PluginConnector]: Executing the observer BlockEncodingObserver from plugin BlockEncodingV2 for "LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 08:45:50" (1/1) ...
[2020-11-25 08:45:50,542 INFO  L313           BlockEncoder]: Initial Icfg 10770 locations, 20080 edges
[2020-11-25 08:45:50,543 INFO  L258           BlockEncoder]: Using Remove infeasible edges
[2020-11-25 08:45:50,543 INFO  L270           BlockEncoder]: Using Minimize states even if more edges are added than removed.=true
[2020-11-25 08:45:50,543 INFO  L296           BlockEncoder]: Using Remove sink states
[2020-11-25 08:45:50,544 INFO  L171           BlockEncoder]: Using Apply optimizations until nothing changes=true
[2020-11-25 08:45:50,563 INFO  L70    emoveInfeasibleEdges]: Removed 294 edges and 30 locations because of local infeasibility
[2020-11-25 08:45:50,584 INFO  L70        RemoveSinkStates]: Removed 276 edges and 166 locations by removing sink states
[2020-11-25 08:45:50,605 INFO  L70    emoveInfeasibleEdges]: Removed 0 edges and 0 locations because of local infeasibility
[2020-11-25 08:45:50,612 INFO  L70        RemoveSinkStates]: Removed 0 edges and 0 locations by removing sink states
[2020-11-25 08:45:50,618 INFO  L237           BlockEncoder]: Using Create parallel compositions if possible
[2020-11-25 08:45:50,619 INFO  L66        ParallelComposer]: Creating parallel compositions
[2020-11-25 08:45:50,624 INFO  L313           BlockEncoder]: Encoded RCFG 10522 locations, 19433 edges
[2020-11-25 08:45:50,624 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.blockencoding CFG 25.11 08:45:50 BasicIcfg
[2020-11-25 08:45:50,624 INFO  L132        PluginConnector]: ------------------------ END BlockEncodingV2----------------------------
[2020-11-25 08:45:50,625 INFO  L113        PluginConnector]: ------------------------BuchiAutomizer----------------------------
[2020-11-25 08:45:50,625 INFO  L271        PluginConnector]: Initializing BuchiAutomizer...
[2020-11-25 08:45:50,627 INFO  L276        PluginConnector]: BuchiAutomizer initialized
[2020-11-25 08:45:50,627 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 08:45:50,627 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Wafl_0x3Fee076a0f0218899B89fE7e3F54dd2dC18917E0_transfer-self-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 08:45:45" (1/6) ...
[2020-11-25 08:45:50,628 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@761594f5 and model type Wafl_0x3Fee076a0f0218899B89fE7e3F54dd2dC18917E0_transfer-self-fail.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 08:45:50, skipping insertion in model container
[2020-11-25 08:45:50,629 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 08:45:50,629 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 08:45:45" (2/6) ...
[2020-11-25 08:45:50,629 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@761594f5 and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 08:45:50, skipping insertion in model container
[2020-11-25 08:45:50,629 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 08:45:50,629 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Wafl_0x3Fee076a0f0218899B89fE7e3F54dd2dC18917E0_transfer-self-fail.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 08:45:47" (3/6) ...
[2020-11-25 08:45:50,629 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@761594f5 and model type Wafl_0x3Fee076a0f0218899B89fE7e3F54dd2dC18917E0_transfer-self-fail.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer CFG 25.11 08:45:50, skipping insertion in model container
[2020-11-25 08:45:50,629 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 08:45:50,629 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 08:45:47" (4/6) ...
[2020-11-25 08:45:50,629 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@761594f5 and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 08:45:50, skipping insertion in model container
[2020-11-25 08:45:50,629 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 08:45:50,630 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 08:45:50" (5/6) ...
[2020-11-25 08:45:50,630 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@761594f5 and model type LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer OTHER 25.11 08:45:50, skipping insertion in model container
[2020-11-25 08:45:50,630 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 08:45:50,630 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.blockencoding CFG 25.11 08:45:50" (6/6) ...
[2020-11-25 08:45:50,631 INFO  L404   chiAutomizerObserver]: Analyzing ICFG Wafl_0x3Fee076a0f0218899B89fE7e3F54dd2dC18917E0_transfer-self-fail.bpl_BEv2
[2020-11-25 08:45:50,666 INFO  L133   ementStrategyFactory]: Using default assertion order modulation
[2020-11-25 08:45:50,666 INFO  L377         BuchiCegarLoop]: Interprodecural is true
[2020-11-25 08:45:50,666 INFO  L378         BuchiCegarLoop]: Hoare is false
[2020-11-25 08:45:50,666 INFO  L379         BuchiCegarLoop]: Compute interpolants for Craig_TreeInterpolation
[2020-11-25 08:45:50,666 INFO  L380         BuchiCegarLoop]: Backedges is STRAIGHT_LINE
[2020-11-25 08:45:50,666 INFO  L381         BuchiCegarLoop]: Determinization is PREDICATE_ABSTRACTION
[2020-11-25 08:45:50,666 INFO  L382         BuchiCegarLoop]: Difference is false
[2020-11-25 08:45:50,666 INFO  L383         BuchiCegarLoop]: Minimize is MINIMIZE_SEVPA
[2020-11-25 08:45:50,666 INFO  L386         BuchiCegarLoop]: ======== Iteration 0==of CEGAR loop == BuchiCegarLoop========
[2020-11-25 08:45:50,747 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 10522 states.
[2020-11-25 08:45:50,847 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 08:45:50,847 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 08:45:50,847 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 08:45:50,857 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 08:45:50,857 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 08:45:50,857 INFO  L445         BuchiCegarLoop]: ======== Iteration 1============
[2020-11-25 08:45:50,857 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 10522 states.
[2020-11-25 08:45:50,913 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 08:45:50,913 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 08:45:50,913 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 08:45:50,916 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 08:45:50,916 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  fail_transfer_ERC20Pausable0 := false;
[L2]                  call_transfer_ERC20Pausable0 := false;
[L2]      CALL        call main();
[L11211]              assume null == 0;
[L11212]  CALL        call this := FreshRefGenerator__success();
[L4514]               havoc newRef;
[L4515]               assume Alloc[newRef] == false;
[L4516]               Alloc[newRef] := true;
[L4517]               assume newRef != null;
[L11212]  RET         call this := FreshRefGenerator__success();
[L11213]              assume now >= 0;
[L11214]              assume DType[this] == Wafl;
[L11215]              assume msgvalue_MSG == 0;
[L11216]              gas := gas - 53000;
[L11217]  CALL        call Wafl_Wafl(this, msgsender_MSG, msgvalue_MSG);
[L3134]               havoc __exception;
[L3135]               revert := false;
[L3136]   COND FALSE  !(__exception)
[L3164]   CALL        call Wafl_Wafl__success(this, msgsender_MSG, msgvalue_MSG);
[L7163]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4861]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4846]               assume msgsender_MSG != null;
[L4847]               Balance[this] := 0;
[L4861]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   COND FALSE  !(revert)
[L7163]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7164]   COND TRUE   revert
[L3164]   RET         call Wafl_Wafl__success(this, msgsender_MSG, msgvalue_MSG);
[L3165]               assume !revert && gas >= 0;
[L11217]  RET         call Wafl_Wafl(this, msgsender_MSG, msgvalue_MSG);
[L11218]              assume !revert && gas >= 0;

Loop:
[L11221]  CALL        call CorralChoice_Wafl(this);
[L10965]              havoc msgsender_MSG;
[L10966]              havoc msgvalue_MSG;
[L10967]              havoc choice;
[L10968]              havoc __ret_0_owner;
[L10969]              havoc __ret_0_isOwner;
[L10970]              havoc newOwner_s216;
[L10971]              havoc __ret_0_totalSupply;
[L10972]              havoc account_s345;
[L10973]              havoc __ret_0_balanceOf;
[L10974]              havoc to_s1040;
[L10975]              havoc value_s1040;
[L10976]              havoc __ret_0_transfer;
[L10977]              havoc owner_s380;
[L10978]              havoc spender_s380;
[L10979]              havoc __ret_0_allowance;
[L10980]              havoc spender_s1079;
[L10981]              havoc value_s1079;
[L10982]              havoc __ret_0_approve;
[L10983]              havoc from_s1061;
[L10984]              havoc to_s1061;
[L10985]              havoc value_s1061;
[L10986]              havoc __ret_0_transferFrom;
[L10987]              havoc spender_s1097;
[L10988]              havoc addedValue_s1097;
[L10989]              havoc __ret_0_increaseAllowance;
[L10990]              havoc spender_s1115;
[L10991]              havoc subtractedValue_s1115;
[L10992]              havoc __ret_0_decreaseAllowance;
[L10993]              havoc name_s731;
[L10994]              havoc symbol_s731;
[L10995]              havoc decimals_s731;
[L10996]              havoc __ret_0_name;
[L10997]              havoc __ret_0_symbol;
[L10998]              havoc __ret_0_decimals;
[L10999]              havoc account_s882;
[L11000]              havoc __ret_0_isPauser;
[L11001]              havoc account_s894;
[L11002]              havoc __ret_0_paused;
[L11003]              havoc account_s1163;
[L11004]              havoc __ret_0_isMinter;
[L11005]              havoc account_s1175;
[L11006]              havoc account_s1240;
[L11007]              havoc amount_s1240;
[L11008]              havoc __ret_0_mint;
[L11009]              havoc amount_s1255;
[L11010]              havoc account_s1268;
[L11011]              havoc amount_s1268;
[L11012]              havoc tmpNow;
[L11013]              havoc gas;
[L11014]              assume gas > 4000000 && gas <= 8000000;
[L11015]              tmpNow := now;
[L11016]              havoc now;
[L11017]              assume now > tmpNow;
[L11018]              assume msgsender_MSG != null;
[L11019]              assume DType[msgsender_MSG] != SafeMath;
[L11020]              assume DType[msgsender_MSG] != Ownable;
[L11021]              assume DType[msgsender_MSG] != IERC20;
[L11022]              assume DType[msgsender_MSG] != ERC20;
[L11023]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11024]              assume DType[msgsender_MSG] != Roles;
[L11025]              assume DType[msgsender_MSG] != PauserRole;
[L11026]              assume DType[msgsender_MSG] != Pausable;
[L11027]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11028]              assume DType[msgsender_MSG] != MinterRole;
[L11029]              assume DType[msgsender_MSG] != ERC20Mintable;
[L11030]              assume DType[msgsender_MSG] != ERC20Burnable;
[L11031]              assume DType[msgsender_MSG] != Wafl;
[L11032]              Alloc[msgsender_MSG] := true;
[L11033]  COND TRUE   choice == 27
[L11034]              gas := gas - 21000;
[L11035]  COND FALSE  !(gas >= 0)
[L11221]  RET         call CorralChoice_Wafl(this);

[2020-11-25 08:45:50,934 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 08:45:50,934 INFO  L82        PathProgramCache]: Analyzing trace with hash -280674386, now seen corresponding path program 1 times
[2020-11-25 08:45:50,940 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 08:45:50,974 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 08:45:51,013 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 08:45:51,016 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 08:45:51,016 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [3] imperfect sequences [] total 3
[2020-11-25 08:45:51,415 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 08:45:51,423 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-11-25 08:45:51,424 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-11-25 08:45:51,425 INFO  L87              Difference]: Start difference. First operand 10522 states. Second operand 3 states.
[2020-11-25 08:45:51,893 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 08:45:51,893 INFO  L93              Difference]: Finished difference Result 5910 states and 7258 transitions.
[2020-11-25 08:45:51,894 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-11-25 08:45:51,895 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 5910 states and 7258 transitions.
[2020-11-25 08:45:51,925 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 08:45:51,960 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 5910 states to 5910 states and 7258 transitions.
[2020-11-25 08:45:51,961 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 3
[2020-11-25 08:45:51,965 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1342
[2020-11-25 08:45:51,965 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 5910 states and 7258 transitions.
[2020-11-25 08:45:51,978 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 08:45:51,978 INFO  L728         BuchiCegarLoop]: Abstraction has 5910 states and 7258 transitions.
[2020-11-25 08:45:51,995 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 5910 states and 7258 transitions.
[2020-11-25 08:45:52,072 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 5910 to 5910.
[2020-11-25 08:45:52,073 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 5910 states.
[2020-11-25 08:45:52,083 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 5910 states to 5910 states and 7258 transitions.
[2020-11-25 08:45:52,083 INFO  L751         BuchiCegarLoop]: Abstraction has 5910 states and 7258 transitions.
[2020-11-25 08:45:52,083 INFO  L631         BuchiCegarLoop]: Abstraction has 5910 states and 7258 transitions.
[2020-11-25 08:45:52,083 INFO  L445         BuchiCegarLoop]: ======== Iteration 2============
[2020-11-25 08:45:52,084 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 5910 states and 7258 transitions.
[2020-11-25 08:45:52,094 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 08:45:52,094 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 08:45:52,094 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 08:45:52,096 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 08:45:52,096 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  fail_transfer_ERC20Pausable0 := false;
[L2]                  call_transfer_ERC20Pausable0 := false;
[L2]      CALL        call main();
[L11211]              assume null == 0;
[L11212]  CALL        call this := FreshRefGenerator__success();
[L4514]               havoc newRef;
[L4515]               assume Alloc[newRef] == false;
[L4516]               Alloc[newRef] := true;
[L4517]               assume newRef != null;
[L11212]  RET         call this := FreshRefGenerator__success();
[L11213]              assume now >= 0;
[L11214]              assume DType[this] == Wafl;
[L11215]              assume msgvalue_MSG == 0;
[L11216]              gas := gas - 53000;
[L11217]  CALL        call Wafl_Wafl(this, msgsender_MSG, msgvalue_MSG);
[L3134]               havoc __exception;
[L3135]               revert := false;
[L3136]   COND FALSE  !(__exception)
[L3164]   CALL        call Wafl_Wafl__success(this, msgsender_MSG, msgvalue_MSG);
[L7163]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4861]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4846]               assume msgsender_MSG != null;
[L4847]               Balance[this] := 0;
[L4861]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   COND FALSE  !(revert)
[L7163]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7164]   COND TRUE   revert
[L3164]   RET         call Wafl_Wafl__success(this, msgsender_MSG, msgvalue_MSG);
[L3165]               assume !revert && gas >= 0;
[L11217]  RET         call Wafl_Wafl(this, msgsender_MSG, msgvalue_MSG);
[L11218]              assume !revert && gas >= 0;
[L11221]  CALL        call CorralChoice_Wafl(this);
[L10965]              havoc msgsender_MSG;
[L10966]              havoc msgvalue_MSG;
[L10967]              havoc choice;
[L10968]              havoc __ret_0_owner;
[L10969]              havoc __ret_0_isOwner;
[L10970]              havoc newOwner_s216;
[L10971]              havoc __ret_0_totalSupply;
[L10972]              havoc account_s345;
[L10973]              havoc __ret_0_balanceOf;
[L10974]              havoc to_s1040;
[L10975]              havoc value_s1040;
[L10976]              havoc __ret_0_transfer;
[L10977]              havoc owner_s380;
[L10978]              havoc spender_s380;
[L10979]              havoc __ret_0_allowance;
[L10980]              havoc spender_s1079;
[L10981]              havoc value_s1079;
[L10982]              havoc __ret_0_approve;
[L10983]              havoc from_s1061;
[L10984]              havoc to_s1061;
[L10985]              havoc value_s1061;
[L10986]              havoc __ret_0_transferFrom;
[L10987]              havoc spender_s1097;
[L10988]              havoc addedValue_s1097;
[L10989]              havoc __ret_0_increaseAllowance;
[L10990]              havoc spender_s1115;
[L10991]              havoc subtractedValue_s1115;
[L10992]              havoc __ret_0_decreaseAllowance;
[L10993]              havoc name_s731;
[L10994]              havoc symbol_s731;
[L10995]              havoc decimals_s731;
[L10996]              havoc __ret_0_name;
[L10997]              havoc __ret_0_symbol;
[L10998]              havoc __ret_0_decimals;
[L10999]              havoc account_s882;
[L11000]              havoc __ret_0_isPauser;
[L11001]              havoc account_s894;
[L11002]              havoc __ret_0_paused;
[L11003]              havoc account_s1163;
[L11004]              havoc __ret_0_isMinter;
[L11005]              havoc account_s1175;
[L11006]              havoc account_s1240;
[L11007]              havoc amount_s1240;
[L11008]              havoc __ret_0_mint;
[L11009]              havoc amount_s1255;
[L11010]              havoc account_s1268;
[L11011]              havoc amount_s1268;
[L11012]              havoc tmpNow;
[L11013]              havoc gas;
[L11014]              assume gas > 4000000 && gas <= 8000000;
[L11015]              tmpNow := now;
[L11016]              havoc now;
[L11017]              assume now > tmpNow;
[L11018]              assume msgsender_MSG != null;
[L11019]              assume DType[msgsender_MSG] != SafeMath;
[L11020]              assume DType[msgsender_MSG] != Ownable;
[L11021]              assume DType[msgsender_MSG] != IERC20;
[L11022]              assume DType[msgsender_MSG] != ERC20;
[L11023]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11024]              assume DType[msgsender_MSG] != Roles;
[L11025]              assume DType[msgsender_MSG] != PauserRole;
[L11026]              assume DType[msgsender_MSG] != Pausable;
[L11027]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11028]              assume DType[msgsender_MSG] != MinterRole;
[L11029]              assume DType[msgsender_MSG] != ERC20Mintable;
[L11030]              assume DType[msgsender_MSG] != ERC20Burnable;
[L11031]              assume DType[msgsender_MSG] != Wafl;
[L11032]              Alloc[msgsender_MSG] := true;
[L11033]  COND FALSE  !(choice == 27)
[L11039]  COND FALSE  !(choice == 26)
[L11045]  COND FALSE  !(choice == 25)
[L11051]  COND FALSE  !(choice == 24)
[L11057]  COND FALSE  !(choice == 23)
[L11063]  COND FALSE  !(choice == 22)
[L11069]  COND TRUE   choice == 21
[L11070]              gas := gas - 21000;
[L11071]  COND TRUE   gas >= 0
[L11072]              assume value_s1040 >= 0 && value_s1040 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L11073]              assume msgvalue_MSG == 0;
[L11074]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s1040, value_s1040);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((msgsender_MSG == to_s1040 && value_s1040 > _balances_ERC20[this][msgsender_MSG]) && value_s1040 >= 0) && value_s1040 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1040] >= 0) && _balances_ERC20[this][to_s1040] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transfer_ERC20Pausable0 := true;
[L2]                  call_transfer_ERC20Pausable0 := false;
[L2]                  revert := revert_hold;
[L2158]               havoc __exception;
[L2159]               revert := false;
[L2160]   COND FALSE  !(__exception)
[L2188]   CALL        call __ret_0_ := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1040, value_s1040);
[L6380]   CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9503]   COND FALSE  !(!!_paused_Pausable[this])
[L6380]   RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6381]   COND TRUE   revert
[L2188]   RET         call __ret_0_ := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1040, value_s1040);
[L2189]               assume !revert && gas >= 0;
[L11074]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s1040, value_s1040);
[L11221]  RET         call CorralChoice_Wafl(this);

Loop:
[L11221]  CALL        call CorralChoice_Wafl(this);
[L10965]              havoc msgsender_MSG;
[L10966]              havoc msgvalue_MSG;
[L10967]              havoc choice;
[L10968]              havoc __ret_0_owner;
[L10969]              havoc __ret_0_isOwner;
[L10970]              havoc newOwner_s216;
[L10971]              havoc __ret_0_totalSupply;
[L10972]              havoc account_s345;
[L10973]              havoc __ret_0_balanceOf;
[L10974]              havoc to_s1040;
[L10975]              havoc value_s1040;
[L10976]              havoc __ret_0_transfer;
[L10977]              havoc owner_s380;
[L10978]              havoc spender_s380;
[L10979]              havoc __ret_0_allowance;
[L10980]              havoc spender_s1079;
[L10981]              havoc value_s1079;
[L10982]              havoc __ret_0_approve;
[L10983]              havoc from_s1061;
[L10984]              havoc to_s1061;
[L10985]              havoc value_s1061;
[L10986]              havoc __ret_0_transferFrom;
[L10987]              havoc spender_s1097;
[L10988]              havoc addedValue_s1097;
[L10989]              havoc __ret_0_increaseAllowance;
[L10990]              havoc spender_s1115;
[L10991]              havoc subtractedValue_s1115;
[L10992]              havoc __ret_0_decreaseAllowance;
[L10993]              havoc name_s731;
[L10994]              havoc symbol_s731;
[L10995]              havoc decimals_s731;
[L10996]              havoc __ret_0_name;
[L10997]              havoc __ret_0_symbol;
[L10998]              havoc __ret_0_decimals;
[L10999]              havoc account_s882;
[L11000]              havoc __ret_0_isPauser;
[L11001]              havoc account_s894;
[L11002]              havoc __ret_0_paused;
[L11003]              havoc account_s1163;
[L11004]              havoc __ret_0_isMinter;
[L11005]              havoc account_s1175;
[L11006]              havoc account_s1240;
[L11007]              havoc amount_s1240;
[L11008]              havoc __ret_0_mint;
[L11009]              havoc amount_s1255;
[L11010]              havoc account_s1268;
[L11011]              havoc amount_s1268;
[L11012]              havoc tmpNow;
[L11013]              havoc gas;
[L11014]              assume gas > 4000000 && gas <= 8000000;
[L11015]              tmpNow := now;
[L11016]              havoc now;
[L11017]              assume now > tmpNow;
[L11018]              assume msgsender_MSG != null;
[L11019]              assume DType[msgsender_MSG] != SafeMath;
[L11020]              assume DType[msgsender_MSG] != Ownable;
[L11021]              assume DType[msgsender_MSG] != IERC20;
[L11022]              assume DType[msgsender_MSG] != ERC20;
[L11023]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11024]              assume DType[msgsender_MSG] != Roles;
[L11025]              assume DType[msgsender_MSG] != PauserRole;
[L11026]              assume DType[msgsender_MSG] != Pausable;
[L11027]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11028]              assume DType[msgsender_MSG] != MinterRole;
[L11029]              assume DType[msgsender_MSG] != ERC20Mintable;
[L11030]              assume DType[msgsender_MSG] != ERC20Burnable;
[L11031]              assume DType[msgsender_MSG] != Wafl;
[L11032]              Alloc[msgsender_MSG] := true;
[L11033]  COND FALSE  !(choice == 27)
[L11039]  COND FALSE  !(choice == 26)
[L11045]  COND FALSE  !(choice == 25)
[L11051]  COND FALSE  !(choice == 24)
[L11057]  COND FALSE  !(choice == 23)
[L11063]  COND FALSE  !(choice == 22)
[L11069]  COND TRUE   choice == 21
[L11070]              gas := gas - 21000;
[L11071]  COND TRUE   gas >= 0
[L11072]              assume value_s1040 >= 0 && value_s1040 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L11073]              assume msgvalue_MSG == 0;
[L11074]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s1040, value_s1040);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((msgsender_MSG == to_s1040 && value_s1040 > _balances_ERC20[this][msgsender_MSG]) && value_s1040 >= 0) && value_s1040 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1040] >= 0) && _balances_ERC20[this][to_s1040] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transfer_ERC20Pausable0 := true;
[L2]                  call_transfer_ERC20Pausable0 := false;
[L2]                  revert := revert_hold;
[L2158]               havoc __exception;
[L2159]               revert := false;
[L2160]   COND FALSE  !(__exception)
[L2188]   CALL        call __ret_0_ := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1040, value_s1040);
[L6380]   CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9503]   COND FALSE  !(!!_paused_Pausable[this])
[L6380]   RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6381]   COND TRUE   revert
[L2188]   RET         call __ret_0_ := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1040, value_s1040);
[L2189]               assume !revert && gas >= 0;
[L11074]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s1040, value_s1040);
[L11221]  RET         call CorralChoice_Wafl(this);

[2020-11-25 08:45:52,102 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 08:45:52,102 INFO  L82        PathProgramCache]: Analyzing trace with hash 930891439, now seen corresponding path program 1 times
[2020-11-25 08:45:52,104 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 08:45:52,116 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 08:45:52,144 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 08:45:52,144 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 08:45:52,144 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [3] imperfect sequences [] total 3
[2020-11-25 08:45:52,145 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 08:45:52,146 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-11-25 08:45:52,146 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-11-25 08:45:52,146 INFO  L87              Difference]: Start difference. First operand 5910 states and 7258 transitions. cyclomatic complexity: 1350 Second operand 3 states.
[2020-11-25 08:45:52,431 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 08:45:52,431 INFO  L93              Difference]: Finished difference Result 8048 states and 9887 transitions.
[2020-11-25 08:45:52,431 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-11-25 08:45:52,432 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 8048 states and 9887 transitions.
[2020-11-25 08:45:52,458 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 08:45:52,497 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 8048 states to 8048 states and 9887 transitions.
[2020-11-25 08:45:52,497 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1957
[2020-11-25 08:45:52,499 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1957
[2020-11-25 08:45:52,499 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 8048 states and 9887 transitions.
[2020-11-25 08:45:52,508 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 08:45:52,508 INFO  L728         BuchiCegarLoop]: Abstraction has 8048 states and 9887 transitions.
[2020-11-25 08:45:52,517 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 8048 states and 9887 transitions.
[2020-11-25 08:45:52,602 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 8048 to 7337.
[2020-11-25 08:45:52,602 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 7337 states.
[2020-11-25 08:45:52,614 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 7337 states to 7337 states and 9030 transitions.
[2020-11-25 08:45:52,614 INFO  L751         BuchiCegarLoop]: Abstraction has 7337 states and 9030 transitions.
[2020-11-25 08:45:52,614 INFO  L631         BuchiCegarLoop]: Abstraction has 7337 states and 9030 transitions.
[2020-11-25 08:45:52,614 INFO  L445         BuchiCegarLoop]: ======== Iteration 3============
[2020-11-25 08:45:52,614 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 7337 states and 9030 transitions.
[2020-11-25 08:45:52,625 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 08:45:52,626 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 08:45:52,626 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 08:45:52,628 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 08:45:52,628 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  fail_transfer_ERC20Pausable0 := false;
[L2]                  call_transfer_ERC20Pausable0 := false;
[L2]      CALL        call main();
[L11211]              assume null == 0;
[L11212]  CALL        call this := FreshRefGenerator__success();
[L4514]               havoc newRef;
[L4515]               assume Alloc[newRef] == false;
[L4516]               Alloc[newRef] := true;
[L4517]               assume newRef != null;
[L11212]  RET         call this := FreshRefGenerator__success();
[L11213]              assume now >= 0;
[L11214]              assume DType[this] == Wafl;
[L11215]              assume msgvalue_MSG == 0;
[L11216]              gas := gas - 53000;
[L11217]  CALL        call Wafl_Wafl(this, msgsender_MSG, msgvalue_MSG);
[L3134]               havoc __exception;
[L3135]               revert := false;
[L3136]   COND FALSE  !(__exception)
[L3164]   CALL        call Wafl_Wafl__success(this, msgsender_MSG, msgvalue_MSG);
[L7163]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4861]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4846]               assume msgsender_MSG != null;
[L4847]               Balance[this] := 0;
[L4861]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   COND FALSE  !(revert)
[L7163]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7164]   COND FALSE  !(revert)
[L7167]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4907]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4861]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4846]               assume msgsender_MSG != null;
[L4847]               Balance[this] := 0;
[L4861]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   COND FALSE  !(revert)
[L4907]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4908]   COND FALSE  !(revert)
[L4911]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4883]               assume msgsender_MSG != null;
[L4884]               Balance[this] := 0;
[L4885]               _balances_ERC20[this] := zeroRefintArr();
[L4886]               sum__balances0[this] := 0;
[L4887]               _allowances_ERC20[this] := zeroRefRefintArr();
[L4888]               sum__allowances1[this] := 0;
[L4889]               _totalSupply_ERC20[this] := 0;
[L4911]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4912]   COND FALSE  !(revert)
[L7167]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7168]   COND FALSE  !(revert)
[L7171]   CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 1861448946, 1818491892, 18);
[L5753]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4861]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4846]               assume msgsender_MSG != null;
[L4847]               Balance[this] := 0;
[L4861]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   COND FALSE  !(revert)
[L5753]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5754]   COND FALSE  !(revert)
[L5757]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s731, symbol_s731, decimals_s731);
[L5728]               assume msgsender_MSG != null;
[L5729]               Balance[this] := 0;
[L5730]               _name_ERC20Detailed[this] := -1545721152;
[L5731]               _symbol_ERC20Detailed[this] := -1545721152;
[L5732]               _decimals_ERC20Detailed[this] := 0;
[L5734]               _name_ERC20Detailed[this] := name_s731;
[L5735]               _symbol_ERC20Detailed[this] := symbol_s731;
[L5736]               _decimals_ERC20Detailed[this] := decimals_s731;
[L5757]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s731, symbol_s731, decimals_s731);
[L5758]   COND FALSE  !(revert)
[L7171]   RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 1861448946, 1818491892, 18);
[L7172]   COND FALSE  !(revert)
[L7175]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5999]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5953]               assume msgsender_MSG != null;
[L5954]               Balance[this] := 0;
[L5956]   CALL        call __var_23 := FreshRefGenerator__success();
[L4514]               havoc newRef;
[L4515]               assume Alloc[newRef] == false;
[L4516]               Alloc[newRef] := true;
[L4517]               assume newRef != null;
[L5956]   RET         call __var_23 := FreshRefGenerator__success();
[L5957]   COND FALSE  !(revert)
[L5960]               _pausers_PauserRole[this] := __var_23;
[L5962]   COND TRUE   DType[this] == Wafl
[L5963]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6153]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L5848]   CALL        call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5902]               __var_22 := null;
[L5903]   COND TRUE   !(account_s834 != null)
[L5904]               revert := true;
[L5848]   RET         call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5849]   COND TRUE   revert
[L6153]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L6154]   COND TRUE   revert
[L5963]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5964]   COND TRUE   revert
[L5999]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6000]   COND TRUE   revert
[L7175]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7176]   COND TRUE   revert
[L3164]   RET         call Wafl_Wafl__success(this, msgsender_MSG, msgvalue_MSG);
[L3165]               assume !revert && gas >= 0;
[L11217]  RET         call Wafl_Wafl(this, msgsender_MSG, msgvalue_MSG);
[L11218]              assume !revert && gas >= 0;
[L11221]  CALL        call CorralChoice_Wafl(this);
[L10965]              havoc msgsender_MSG;
[L10966]              havoc msgvalue_MSG;
[L10967]              havoc choice;
[L10968]              havoc __ret_0_owner;
[L10969]              havoc __ret_0_isOwner;
[L10970]              havoc newOwner_s216;
[L10971]              havoc __ret_0_totalSupply;
[L10972]              havoc account_s345;
[L10973]              havoc __ret_0_balanceOf;
[L10974]              havoc to_s1040;
[L10975]              havoc value_s1040;
[L10976]              havoc __ret_0_transfer;
[L10977]              havoc owner_s380;
[L10978]              havoc spender_s380;
[L10979]              havoc __ret_0_allowance;
[L10980]              havoc spender_s1079;
[L10981]              havoc value_s1079;
[L10982]              havoc __ret_0_approve;
[L10983]              havoc from_s1061;
[L10984]              havoc to_s1061;
[L10985]              havoc value_s1061;
[L10986]              havoc __ret_0_transferFrom;
[L10987]              havoc spender_s1097;
[L10988]              havoc addedValue_s1097;
[L10989]              havoc __ret_0_increaseAllowance;
[L10990]              havoc spender_s1115;
[L10991]              havoc subtractedValue_s1115;
[L10992]              havoc __ret_0_decreaseAllowance;
[L10993]              havoc name_s731;
[L10994]              havoc symbol_s731;
[L10995]              havoc decimals_s731;
[L10996]              havoc __ret_0_name;
[L10997]              havoc __ret_0_symbol;
[L10998]              havoc __ret_0_decimals;
[L10999]              havoc account_s882;
[L11000]              havoc __ret_0_isPauser;
[L11001]              havoc account_s894;
[L11002]              havoc __ret_0_paused;
[L11003]              havoc account_s1163;
[L11004]              havoc __ret_0_isMinter;
[L11005]              havoc account_s1175;
[L11006]              havoc account_s1240;
[L11007]              havoc amount_s1240;
[L11008]              havoc __ret_0_mint;
[L11009]              havoc amount_s1255;
[L11010]              havoc account_s1268;
[L11011]              havoc amount_s1268;
[L11012]              havoc tmpNow;
[L11013]              havoc gas;
[L11014]              assume gas > 4000000 && gas <= 8000000;
[L11015]              tmpNow := now;
[L11016]              havoc now;
[L11017]              assume now > tmpNow;
[L11018]              assume msgsender_MSG != null;
[L11019]              assume DType[msgsender_MSG] != SafeMath;
[L11020]              assume DType[msgsender_MSG] != Ownable;
[L11021]              assume DType[msgsender_MSG] != IERC20;
[L11022]              assume DType[msgsender_MSG] != ERC20;
[L11023]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11024]              assume DType[msgsender_MSG] != Roles;
[L11025]              assume DType[msgsender_MSG] != PauserRole;
[L11026]              assume DType[msgsender_MSG] != Pausable;
[L11027]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11028]              assume DType[msgsender_MSG] != MinterRole;
[L11029]              assume DType[msgsender_MSG] != ERC20Mintable;
[L11030]              assume DType[msgsender_MSG] != ERC20Burnable;
[L11031]              assume DType[msgsender_MSG] != Wafl;
[L11032]              Alloc[msgsender_MSG] := true;
[L11033]  COND FALSE  !(choice == 27)
[L11039]  COND FALSE  !(choice == 26)
[L11045]  COND FALSE  !(choice == 25)
[L11051]  COND FALSE  !(choice == 24)
[L11057]  COND FALSE  !(choice == 23)
[L11063]  COND FALSE  !(choice == 22)
[L11069]  COND TRUE   choice == 21
[L11070]              gas := gas - 21000;
[L11071]  COND TRUE   gas >= 0
[L11072]              assume value_s1040 >= 0 && value_s1040 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L11073]              assume msgvalue_MSG == 0;
[L11074]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s1040, value_s1040);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((msgsender_MSG == to_s1040 && value_s1040 > _balances_ERC20[this][msgsender_MSG]) && value_s1040 >= 0) && value_s1040 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1040] >= 0) && _balances_ERC20[this][to_s1040] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transfer_ERC20Pausable0 := true;
[L2]                  call_transfer_ERC20Pausable0 := false;
[L2]                  revert := revert_hold;
[L2158]               havoc __exception;
[L2159]               revert := false;
[L2160]   COND FALSE  !(__exception)
[L2188]   CALL        call __ret_0_ := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1040, value_s1040);
[L6380]   CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9503]   COND TRUE   !!_paused_Pausable[this]
[L9504]               revert := true;
[L6380]   RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6381]   COND TRUE   revert
[L2188]   RET         call __ret_0_ := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1040, value_s1040);
[L2189]               assume !revert && gas >= 0;
[L11074]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s1040, value_s1040);
[L11221]  RET         call CorralChoice_Wafl(this);

Loop:
[L11221]  CALL        call CorralChoice_Wafl(this);
[L10965]              havoc msgsender_MSG;
[L10966]              havoc msgvalue_MSG;
[L10967]              havoc choice;
[L10968]              havoc __ret_0_owner;
[L10969]              havoc __ret_0_isOwner;
[L10970]              havoc newOwner_s216;
[L10971]              havoc __ret_0_totalSupply;
[L10972]              havoc account_s345;
[L10973]              havoc __ret_0_balanceOf;
[L10974]              havoc to_s1040;
[L10975]              havoc value_s1040;
[L10976]              havoc __ret_0_transfer;
[L10977]              havoc owner_s380;
[L10978]              havoc spender_s380;
[L10979]              havoc __ret_0_allowance;
[L10980]              havoc spender_s1079;
[L10981]              havoc value_s1079;
[L10982]              havoc __ret_0_approve;
[L10983]              havoc from_s1061;
[L10984]              havoc to_s1061;
[L10985]              havoc value_s1061;
[L10986]              havoc __ret_0_transferFrom;
[L10987]              havoc spender_s1097;
[L10988]              havoc addedValue_s1097;
[L10989]              havoc __ret_0_increaseAllowance;
[L10990]              havoc spender_s1115;
[L10991]              havoc subtractedValue_s1115;
[L10992]              havoc __ret_0_decreaseAllowance;
[L10993]              havoc name_s731;
[L10994]              havoc symbol_s731;
[L10995]              havoc decimals_s731;
[L10996]              havoc __ret_0_name;
[L10997]              havoc __ret_0_symbol;
[L10998]              havoc __ret_0_decimals;
[L10999]              havoc account_s882;
[L11000]              havoc __ret_0_isPauser;
[L11001]              havoc account_s894;
[L11002]              havoc __ret_0_paused;
[L11003]              havoc account_s1163;
[L11004]              havoc __ret_0_isMinter;
[L11005]              havoc account_s1175;
[L11006]              havoc account_s1240;
[L11007]              havoc amount_s1240;
[L11008]              havoc __ret_0_mint;
[L11009]              havoc amount_s1255;
[L11010]              havoc account_s1268;
[L11011]              havoc amount_s1268;
[L11012]              havoc tmpNow;
[L11013]              havoc gas;
[L11014]              assume gas > 4000000 && gas <= 8000000;
[L11015]              tmpNow := now;
[L11016]              havoc now;
[L11017]              assume now > tmpNow;
[L11018]              assume msgsender_MSG != null;
[L11019]              assume DType[msgsender_MSG] != SafeMath;
[L11020]              assume DType[msgsender_MSG] != Ownable;
[L11021]              assume DType[msgsender_MSG] != IERC20;
[L11022]              assume DType[msgsender_MSG] != ERC20;
[L11023]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11024]              assume DType[msgsender_MSG] != Roles;
[L11025]              assume DType[msgsender_MSG] != PauserRole;
[L11026]              assume DType[msgsender_MSG] != Pausable;
[L11027]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11028]              assume DType[msgsender_MSG] != MinterRole;
[L11029]              assume DType[msgsender_MSG] != ERC20Mintable;
[L11030]              assume DType[msgsender_MSG] != ERC20Burnable;
[L11031]              assume DType[msgsender_MSG] != Wafl;
[L11032]              Alloc[msgsender_MSG] := true;
[L11033]  COND FALSE  !(choice == 27)
[L11039]  COND FALSE  !(choice == 26)
[L11045]  COND FALSE  !(choice == 25)
[L11051]  COND FALSE  !(choice == 24)
[L11057]  COND FALSE  !(choice == 23)
[L11063]  COND FALSE  !(choice == 22)
[L11069]  COND TRUE   choice == 21
[L11070]              gas := gas - 21000;
[L11071]  COND TRUE   gas >= 0
[L11072]              assume value_s1040 >= 0 && value_s1040 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L11073]              assume msgvalue_MSG == 0;
[L11074]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s1040, value_s1040);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((msgsender_MSG == to_s1040 && value_s1040 > _balances_ERC20[this][msgsender_MSG]) && value_s1040 >= 0) && value_s1040 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1040] >= 0) && _balances_ERC20[this][to_s1040] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transfer_ERC20Pausable0 := true;
[L2]                  call_transfer_ERC20Pausable0 := false;
[L2]                  revert := revert_hold;
[L2158]               havoc __exception;
[L2159]               revert := false;
[L2160]   COND FALSE  !(__exception)
[L2188]   CALL        call __ret_0_ := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1040, value_s1040);
[L6380]   CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9503]   COND TRUE   !!_paused_Pausable[this]
[L9504]               revert := true;
[L6380]   RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6381]   COND TRUE   revert
[L2188]   RET         call __ret_0_ := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1040, value_s1040);
[L2189]               assume !revert && gas >= 0;
[L11074]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s1040, value_s1040);
[L11221]  RET         call CorralChoice_Wafl(this);

[2020-11-25 08:45:52,632 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 08:45:52,632 INFO  L82        PathProgramCache]: Analyzing trace with hash 1582626645, now seen corresponding path program 1 times
[2020-11-25 08:45:52,633 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 08:45:52,643 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 08:45:52,697 INFO  L134       CoverageAnalysis]: Checked inductivity of 36 backedges. 0 proven. 14 refuted. 0 times theorem prover too weak. 22 trivial. 0 not checked.
[2020-11-25 08:45:52,698 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 08:45:52,698 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [10] total 10
[2020-11-25 08:45:52,698 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 08:45:52,698 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 10 interpolants.
[2020-11-25 08:45:52,698 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=17, Invalid=73, Unknown=0, NotChecked=0, Total=90
[2020-11-25 08:45:52,698 INFO  L87              Difference]: Start difference. First operand 7337 states and 9030 transitions. cyclomatic complexity: 1695 Second operand 10 states.
[2020-11-25 08:45:52,849 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 08:45:52,849 INFO  L93              Difference]: Finished difference Result 7397 states and 9125 transitions.
[2020-11-25 08:45:52,849 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 10 states. 
[2020-11-25 08:45:52,849 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 7397 states and 9125 transitions.
[2020-11-25 08:45:52,869 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 08:45:52,899 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 7397 states to 7397 states and 9125 transitions.
[2020-11-25 08:45:52,899 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1844
[2020-11-25 08:45:52,901 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1844
[2020-11-25 08:45:52,901 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 7397 states and 9125 transitions.
[2020-11-25 08:45:52,909 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 08:45:52,910 INFO  L728         BuchiCegarLoop]: Abstraction has 7397 states and 9125 transitions.
[2020-11-25 08:45:52,917 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 7397 states and 9125 transitions.
[2020-11-25 08:45:53,002 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 7397 to 7381.
[2020-11-25 08:45:53,002 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 7381 states.
[2020-11-25 08:45:53,012 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 7381 states to 7381 states and 9099 transitions.
[2020-11-25 08:45:53,013 INFO  L751         BuchiCegarLoop]: Abstraction has 7381 states and 9099 transitions.
[2020-11-25 08:45:53,013 INFO  L631         BuchiCegarLoop]: Abstraction has 7381 states and 9099 transitions.
[2020-11-25 08:45:53,013 INFO  L445         BuchiCegarLoop]: ======== Iteration 4============
[2020-11-25 08:45:53,013 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 7381 states and 9099 transitions.
[2020-11-25 08:45:53,023 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 08:45:53,023 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 08:45:53,023 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 08:45:53,025 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 08:45:53,025 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  fail_transfer_ERC20Pausable0 := false;
[L2]                  call_transfer_ERC20Pausable0 := false;
[L2]      CALL        call main();
[L11211]              assume null == 0;
[L11212]  CALL        call this := FreshRefGenerator__success();
[L4514]               havoc newRef;
[L4515]               assume Alloc[newRef] == false;
[L4516]               Alloc[newRef] := true;
[L4517]               assume newRef != null;
[L11212]  RET         call this := FreshRefGenerator__success();
[L11213]              assume now >= 0;
[L11214]              assume DType[this] == Wafl;
[L11215]              assume msgvalue_MSG == 0;
[L11216]              gas := gas - 53000;
[L11217]  CALL        call Wafl_Wafl(this, msgsender_MSG, msgvalue_MSG);
[L3134]               havoc __exception;
[L3135]               revert := false;
[L3136]   COND FALSE  !(__exception)
[L3164]   CALL        call Wafl_Wafl__success(this, msgsender_MSG, msgvalue_MSG);
[L7163]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4861]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4846]               assume msgsender_MSG != null;
[L4847]               Balance[this] := 0;
[L4861]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   COND FALSE  !(revert)
[L7163]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7164]   COND FALSE  !(revert)
[L7167]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4907]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4861]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4846]               assume msgsender_MSG != null;
[L4847]               Balance[this] := 0;
[L4861]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   COND FALSE  !(revert)
[L4907]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4908]   COND FALSE  !(revert)
[L4911]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4883]               assume msgsender_MSG != null;
[L4884]               Balance[this] := 0;
[L4885]               _balances_ERC20[this] := zeroRefintArr();
[L4886]               sum__balances0[this] := 0;
[L4887]               _allowances_ERC20[this] := zeroRefRefintArr();
[L4888]               sum__allowances1[this] := 0;
[L4889]               _totalSupply_ERC20[this] := 0;
[L4911]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4912]   COND FALSE  !(revert)
[L7167]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7168]   COND FALSE  !(revert)
[L7171]   CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 1861448946, 1818491892, 18);
[L5753]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4861]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4846]               assume msgsender_MSG != null;
[L4847]               Balance[this] := 0;
[L4861]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   COND FALSE  !(revert)
[L5753]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5754]   COND FALSE  !(revert)
[L5757]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s731, symbol_s731, decimals_s731);
[L5728]               assume msgsender_MSG != null;
[L5729]               Balance[this] := 0;
[L5730]               _name_ERC20Detailed[this] := -1545721152;
[L5731]               _symbol_ERC20Detailed[this] := -1545721152;
[L5732]               _decimals_ERC20Detailed[this] := 0;
[L5734]               _name_ERC20Detailed[this] := name_s731;
[L5735]               _symbol_ERC20Detailed[this] := symbol_s731;
[L5736]               _decimals_ERC20Detailed[this] := decimals_s731;
[L5757]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s731, symbol_s731, decimals_s731);
[L5758]   COND FALSE  !(revert)
[L7171]   RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 1861448946, 1818491892, 18);
[L7172]   COND FALSE  !(revert)
[L7175]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5999]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5953]               assume msgsender_MSG != null;
[L5954]               Balance[this] := 0;
[L5956]   CALL        call __var_23 := FreshRefGenerator__success();
[L4514]               havoc newRef;
[L4515]               assume Alloc[newRef] == false;
[L4516]               Alloc[newRef] := true;
[L4517]               assume newRef != null;
[L5956]   RET         call __var_23 := FreshRefGenerator__success();
[L5957]   COND FALSE  !(revert)
[L5960]               _pausers_PauserRole[this] := __var_23;
[L5962]   COND TRUE   DType[this] == Wafl
[L5963]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6153]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L5848]   CALL        call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5902]               __var_22 := null;
[L5903]   COND FALSE  !(!(account_s834 != null))
[L5907]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s834]][account_s834];
[L5848]   RET         call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5849]   COND FALSE  !(revert)
[L5852]   COND TRUE   !!__var_20
[L5853]               revert := true;
[L6153]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L6154]   COND TRUE   revert
[L5963]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5964]   COND TRUE   revert
[L5999]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6000]   COND TRUE   revert
[L7175]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7176]   COND TRUE   revert
[L3164]   RET         call Wafl_Wafl__success(this, msgsender_MSG, msgvalue_MSG);
[L3165]               assume !revert && gas >= 0;
[L11217]  RET         call Wafl_Wafl(this, msgsender_MSG, msgvalue_MSG);
[L11218]              assume !revert && gas >= 0;
[L11221]  CALL        call CorralChoice_Wafl(this);
[L10965]              havoc msgsender_MSG;
[L10966]              havoc msgvalue_MSG;
[L10967]              havoc choice;
[L10968]              havoc __ret_0_owner;
[L10969]              havoc __ret_0_isOwner;
[L10970]              havoc newOwner_s216;
[L10971]              havoc __ret_0_totalSupply;
[L10972]              havoc account_s345;
[L10973]              havoc __ret_0_balanceOf;
[L10974]              havoc to_s1040;
[L10975]              havoc value_s1040;
[L10976]              havoc __ret_0_transfer;
[L10977]              havoc owner_s380;
[L10978]              havoc spender_s380;
[L10979]              havoc __ret_0_allowance;
[L10980]              havoc spender_s1079;
[L10981]              havoc value_s1079;
[L10982]              havoc __ret_0_approve;
[L10983]              havoc from_s1061;
[L10984]              havoc to_s1061;
[L10985]              havoc value_s1061;
[L10986]              havoc __ret_0_transferFrom;
[L10987]              havoc spender_s1097;
[L10988]              havoc addedValue_s1097;
[L10989]              havoc __ret_0_increaseAllowance;
[L10990]              havoc spender_s1115;
[L10991]              havoc subtractedValue_s1115;
[L10992]              havoc __ret_0_decreaseAllowance;
[L10993]              havoc name_s731;
[L10994]              havoc symbol_s731;
[L10995]              havoc decimals_s731;
[L10996]              havoc __ret_0_name;
[L10997]              havoc __ret_0_symbol;
[L10998]              havoc __ret_0_decimals;
[L10999]              havoc account_s882;
[L11000]              havoc __ret_0_isPauser;
[L11001]              havoc account_s894;
[L11002]              havoc __ret_0_paused;
[L11003]              havoc account_s1163;
[L11004]              havoc __ret_0_isMinter;
[L11005]              havoc account_s1175;
[L11006]              havoc account_s1240;
[L11007]              havoc amount_s1240;
[L11008]              havoc __ret_0_mint;
[L11009]              havoc amount_s1255;
[L11010]              havoc account_s1268;
[L11011]              havoc amount_s1268;
[L11012]              havoc tmpNow;
[L11013]              havoc gas;
[L11014]              assume gas > 4000000 && gas <= 8000000;
[L11015]              tmpNow := now;
[L11016]              havoc now;
[L11017]              assume now > tmpNow;
[L11018]              assume msgsender_MSG != null;
[L11019]              assume DType[msgsender_MSG] != SafeMath;
[L11020]              assume DType[msgsender_MSG] != Ownable;
[L11021]              assume DType[msgsender_MSG] != IERC20;
[L11022]              assume DType[msgsender_MSG] != ERC20;
[L11023]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11024]              assume DType[msgsender_MSG] != Roles;
[L11025]              assume DType[msgsender_MSG] != PauserRole;
[L11026]              assume DType[msgsender_MSG] != Pausable;
[L11027]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11028]              assume DType[msgsender_MSG] != MinterRole;
[L11029]              assume DType[msgsender_MSG] != ERC20Mintable;
[L11030]              assume DType[msgsender_MSG] != ERC20Burnable;
[L11031]              assume DType[msgsender_MSG] != Wafl;
[L11032]              Alloc[msgsender_MSG] := true;
[L11033]  COND FALSE  !(choice == 27)
[L11039]  COND FALSE  !(choice == 26)
[L11045]  COND FALSE  !(choice == 25)
[L11051]  COND FALSE  !(choice == 24)
[L11057]  COND FALSE  !(choice == 23)
[L11063]  COND FALSE  !(choice == 22)
[L11069]  COND TRUE   choice == 21
[L11070]              gas := gas - 21000;
[L11071]  COND TRUE   gas >= 0
[L11072]              assume value_s1040 >= 0 && value_s1040 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L11073]              assume msgvalue_MSG == 0;
[L11074]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s1040, value_s1040);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((msgsender_MSG == to_s1040 && value_s1040 > _balances_ERC20[this][msgsender_MSG]) && value_s1040 >= 0) && value_s1040 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1040] >= 0) && _balances_ERC20[this][to_s1040] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transfer_ERC20Pausable0 := true;
[L2]                  call_transfer_ERC20Pausable0 := false;
[L2]                  revert := revert_hold;
[L2158]               havoc __exception;
[L2159]               revert := false;
[L2160]   COND FALSE  !(__exception)
[L2188]   CALL        call __ret_0_ := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1040, value_s1040);
[L6380]   CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9503]   COND TRUE   !!_paused_Pausable[this]
[L9504]               revert := true;
[L6380]   RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6381]   COND TRUE   revert
[L2188]   RET         call __ret_0_ := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1040, value_s1040);
[L2189]               assume !revert && gas >= 0;
[L11074]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s1040, value_s1040);
[L11221]  RET         call CorralChoice_Wafl(this);

Loop:
[L11221]  CALL        call CorralChoice_Wafl(this);
[L10965]              havoc msgsender_MSG;
[L10966]              havoc msgvalue_MSG;
[L10967]              havoc choice;
[L10968]              havoc __ret_0_owner;
[L10969]              havoc __ret_0_isOwner;
[L10970]              havoc newOwner_s216;
[L10971]              havoc __ret_0_totalSupply;
[L10972]              havoc account_s345;
[L10973]              havoc __ret_0_balanceOf;
[L10974]              havoc to_s1040;
[L10975]              havoc value_s1040;
[L10976]              havoc __ret_0_transfer;
[L10977]              havoc owner_s380;
[L10978]              havoc spender_s380;
[L10979]              havoc __ret_0_allowance;
[L10980]              havoc spender_s1079;
[L10981]              havoc value_s1079;
[L10982]              havoc __ret_0_approve;
[L10983]              havoc from_s1061;
[L10984]              havoc to_s1061;
[L10985]              havoc value_s1061;
[L10986]              havoc __ret_0_transferFrom;
[L10987]              havoc spender_s1097;
[L10988]              havoc addedValue_s1097;
[L10989]              havoc __ret_0_increaseAllowance;
[L10990]              havoc spender_s1115;
[L10991]              havoc subtractedValue_s1115;
[L10992]              havoc __ret_0_decreaseAllowance;
[L10993]              havoc name_s731;
[L10994]              havoc symbol_s731;
[L10995]              havoc decimals_s731;
[L10996]              havoc __ret_0_name;
[L10997]              havoc __ret_0_symbol;
[L10998]              havoc __ret_0_decimals;
[L10999]              havoc account_s882;
[L11000]              havoc __ret_0_isPauser;
[L11001]              havoc account_s894;
[L11002]              havoc __ret_0_paused;
[L11003]              havoc account_s1163;
[L11004]              havoc __ret_0_isMinter;
[L11005]              havoc account_s1175;
[L11006]              havoc account_s1240;
[L11007]              havoc amount_s1240;
[L11008]              havoc __ret_0_mint;
[L11009]              havoc amount_s1255;
[L11010]              havoc account_s1268;
[L11011]              havoc amount_s1268;
[L11012]              havoc tmpNow;
[L11013]              havoc gas;
[L11014]              assume gas > 4000000 && gas <= 8000000;
[L11015]              tmpNow := now;
[L11016]              havoc now;
[L11017]              assume now > tmpNow;
[L11018]              assume msgsender_MSG != null;
[L11019]              assume DType[msgsender_MSG] != SafeMath;
[L11020]              assume DType[msgsender_MSG] != Ownable;
[L11021]              assume DType[msgsender_MSG] != IERC20;
[L11022]              assume DType[msgsender_MSG] != ERC20;
[L11023]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11024]              assume DType[msgsender_MSG] != Roles;
[L11025]              assume DType[msgsender_MSG] != PauserRole;
[L11026]              assume DType[msgsender_MSG] != Pausable;
[L11027]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11028]              assume DType[msgsender_MSG] != MinterRole;
[L11029]              assume DType[msgsender_MSG] != ERC20Mintable;
[L11030]              assume DType[msgsender_MSG] != ERC20Burnable;
[L11031]              assume DType[msgsender_MSG] != Wafl;
[L11032]              Alloc[msgsender_MSG] := true;
[L11033]  COND FALSE  !(choice == 27)
[L11039]  COND FALSE  !(choice == 26)
[L11045]  COND FALSE  !(choice == 25)
[L11051]  COND FALSE  !(choice == 24)
[L11057]  COND FALSE  !(choice == 23)
[L11063]  COND FALSE  !(choice == 22)
[L11069]  COND TRUE   choice == 21
[L11070]              gas := gas - 21000;
[L11071]  COND TRUE   gas >= 0
[L11072]              assume value_s1040 >= 0 && value_s1040 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L11073]              assume msgvalue_MSG == 0;
[L11074]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s1040, value_s1040);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((msgsender_MSG == to_s1040 && value_s1040 > _balances_ERC20[this][msgsender_MSG]) && value_s1040 >= 0) && value_s1040 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1040] >= 0) && _balances_ERC20[this][to_s1040] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transfer_ERC20Pausable0 := true;
[L2]                  call_transfer_ERC20Pausable0 := false;
[L2]                  revert := revert_hold;
[L2158]               havoc __exception;
[L2159]               revert := false;
[L2160]   COND FALSE  !(__exception)
[L2188]   CALL        call __ret_0_ := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1040, value_s1040);
[L6380]   CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9503]   COND TRUE   !!_paused_Pausable[this]
[L9504]               revert := true;
[L6380]   RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6381]   COND TRUE   revert
[L2188]   RET         call __ret_0_ := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1040, value_s1040);
[L2189]               assume !revert && gas >= 0;
[L11074]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s1040, value_s1040);
[L11221]  RET         call CorralChoice_Wafl(this);

[2020-11-25 08:45:53,029 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 08:45:53,029 INFO  L82        PathProgramCache]: Analyzing trace with hash 310738371, now seen corresponding path program 1 times
[2020-11-25 08:45:53,030 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 08:45:53,038 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 08:45:53,073 INFO  L134       CoverageAnalysis]: Checked inductivity of 36 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 36 trivial. 0 not checked.
[2020-11-25 08:45:53,073 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 08:45:53,073 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [3] imperfect sequences [] total 3
[2020-11-25 08:45:53,073 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 08:45:53,074 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-11-25 08:45:53,074 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-11-25 08:45:53,074 INFO  L87              Difference]: Start difference. First operand 7381 states and 9099 transitions. cyclomatic complexity: 1720 Second operand 3 states.
[2020-11-25 08:45:53,238 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 08:45:53,238 INFO  L93              Difference]: Finished difference Result 8073 states and 9426 transitions.
[2020-11-25 08:45:53,238 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-11-25 08:45:53,238 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 8073 states and 9426 transitions.
[2020-11-25 08:45:53,260 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 08:45:53,287 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 8073 states to 7207 states and 8359 transitions.
[2020-11-25 08:45:53,287 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1689
[2020-11-25 08:45:53,288 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1760
[2020-11-25 08:45:53,288 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 7207 states and 8359 transitions.
[2020-11-25 08:45:53,295 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 08:45:53,296 INFO  L728         BuchiCegarLoop]: Abstraction has 7207 states and 8359 transitions.
[2020-11-25 08:45:53,302 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 7207 states and 8359 transitions.
[2020-11-25 08:45:53,357 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 7207 to 6645.
[2020-11-25 08:45:53,358 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 6645 states.
[2020-11-25 08:45:53,366 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 6645 states to 6645 states and 7651 transitions.
[2020-11-25 08:45:53,366 INFO  L751         BuchiCegarLoop]: Abstraction has 6645 states and 7651 transitions.
[2020-11-25 08:45:53,366 INFO  L631         BuchiCegarLoop]: Abstraction has 6645 states and 7651 transitions.
[2020-11-25 08:45:53,366 INFO  L445         BuchiCegarLoop]: ======== Iteration 5============
[2020-11-25 08:45:53,366 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 6645 states and 7651 transitions.
[2020-11-25 08:45:53,374 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 08:45:53,374 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 08:45:53,374 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 08:45:53,379 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [9, 9, 9, 9, 9, 9, 9, 9, 9, 7, 7, 7, 7, 7, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 08:45:53,379 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  fail_transfer_ERC20Pausable0 := false;
[L2]                  call_transfer_ERC20Pausable0 := false;
[L2]      CALL        call main();
[L11211]              assume null == 0;
[L11212]  CALL        call this := FreshRefGenerator__success();
[L4514]               havoc newRef;
[L4515]               assume Alloc[newRef] == false;
[L4516]               Alloc[newRef] := true;
[L4517]               assume newRef != null;
[L11212]  RET         call this := FreshRefGenerator__success();
[L11213]              assume now >= 0;
[L11214]              assume DType[this] == Wafl;
[L11215]              assume msgvalue_MSG == 0;
[L11216]              gas := gas - 53000;
[L11217]  CALL        call Wafl_Wafl(this, msgsender_MSG, msgvalue_MSG);
[L3134]               havoc __exception;
[L3135]               revert := false;
[L3136]   COND FALSE  !(__exception)
[L3164]   CALL        call Wafl_Wafl__success(this, msgsender_MSG, msgvalue_MSG);
[L7163]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4861]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4846]               assume msgsender_MSG != null;
[L4847]               Balance[this] := 0;
[L4861]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   COND FALSE  !(revert)
[L7163]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7164]   COND FALSE  !(revert)
[L7167]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4907]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4861]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4846]               assume msgsender_MSG != null;
[L4847]               Balance[this] := 0;
[L4861]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   COND FALSE  !(revert)
[L4907]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4908]   COND FALSE  !(revert)
[L4911]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4883]               assume msgsender_MSG != null;
[L4884]               Balance[this] := 0;
[L4885]               _balances_ERC20[this] := zeroRefintArr();
[L4886]               sum__balances0[this] := 0;
[L4887]               _allowances_ERC20[this] := zeroRefRefintArr();
[L4888]               sum__allowances1[this] := 0;
[L4889]               _totalSupply_ERC20[this] := 0;
[L4911]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4912]   COND FALSE  !(revert)
[L7167]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7168]   COND FALSE  !(revert)
[L7171]   CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 1861448946, 1818491892, 18);
[L5753]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4861]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4846]               assume msgsender_MSG != null;
[L4847]               Balance[this] := 0;
[L4861]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   COND FALSE  !(revert)
[L5753]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5754]   COND FALSE  !(revert)
[L5757]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s731, symbol_s731, decimals_s731);
[L5728]               assume msgsender_MSG != null;
[L5729]               Balance[this] := 0;
[L5730]               _name_ERC20Detailed[this] := -1545721152;
[L5731]               _symbol_ERC20Detailed[this] := -1545721152;
[L5732]               _decimals_ERC20Detailed[this] := 0;
[L5734]               _name_ERC20Detailed[this] := name_s731;
[L5735]               _symbol_ERC20Detailed[this] := symbol_s731;
[L5736]               _decimals_ERC20Detailed[this] := decimals_s731;
[L5757]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s731, symbol_s731, decimals_s731);
[L5758]   COND FALSE  !(revert)
[L7171]   RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 1861448946, 1818491892, 18);
[L7172]   COND FALSE  !(revert)
[L7175]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5999]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5953]               assume msgsender_MSG != null;
[L5954]               Balance[this] := 0;
[L5956]   CALL        call __var_23 := FreshRefGenerator__success();
[L4514]               havoc newRef;
[L4515]               assume Alloc[newRef] == false;
[L4516]               Alloc[newRef] := true;
[L4517]               assume newRef != null;
[L5956]   RET         call __var_23 := FreshRefGenerator__success();
[L5957]   COND FALSE  !(revert)
[L5960]               _pausers_PauserRole[this] := __var_23;
[L5962]   COND FALSE  !(DType[this] == Wafl)
[L5967]   COND TRUE   DType[this] == ERC20Pausable
[L5968]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6153]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L5848]   CALL        call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5902]               __var_22 := null;
[L5903]   COND FALSE  !(!(account_s834 != null))
[L5907]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s834]][account_s834];
[L5848]   RET         call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5849]   COND FALSE  !(revert)
[L5852]   COND FALSE  !(!!__var_20)
[L5856]               M_Ref_bool[bearer_Roles.Role[role_s786]][account_s786] := true;
[L6153]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L6154]   COND FALSE  !(revert)
[L6157]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L5968]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5969]   COND FALSE  !(revert)
[L5999]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6000]   COND FALSE  !(revert)
[L7175]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7176]   COND FALSE  !(revert)
[L7179]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6211]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5999]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5953]               assume msgsender_MSG != null;
[L5954]               Balance[this] := 0;
[L5956]   CALL        call __var_23 := FreshRefGenerator__success();
[L4514]               havoc newRef;
[L4515]               assume Alloc[newRef] == false;
[L4516]               Alloc[newRef] := true;
[L4517]               assume newRef != null;
[L5956]   RET         call __var_23 := FreshRefGenerator__success();
[L5957]   COND FALSE  !(revert)
[L5960]               _pausers_PauserRole[this] := __var_23;
[L5962]   COND FALSE  !(DType[this] == Wafl)
[L5967]   COND TRUE   DType[this] == ERC20Pausable
[L5968]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6153]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L5848]   CALL        call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5902]               __var_22 := null;
[L5903]   COND FALSE  !(!(account_s834 != null))
[L5907]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s834]][account_s834];
[L5848]   RET         call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5849]   COND FALSE  !(revert)
[L5852]   COND FALSE  !(!!__var_20)
[L5856]               M_Ref_bool[bearer_Roles.Role[role_s786]][account_s786] := true;
[L6153]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L6154]   COND FALSE  !(revert)
[L6157]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L5968]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5969]   COND FALSE  !(revert)
[L5999]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6000]   COND FALSE  !(revert)
[L6211]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6212]   COND FALSE  !(revert)
[L6215]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6190]               assume msgsender_MSG != null;
[L6191]               Balance[this] := 0;
[L6192]               _paused_Pausable[this] := false;
[L6194]               _paused_Pausable[this] := false;
[L6215]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6216]   COND FALSE  !(revert)
[L7179]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7180]   COND FALSE  !(revert)
[L7183]   CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6329]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4861]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4846]               assume msgsender_MSG != null;
[L4847]               Balance[this] := 0;
[L4861]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   COND FALSE  !(revert)
[L6329]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6330]   COND FALSE  !(revert)
[L6333]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4907]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4861]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4846]               assume msgsender_MSG != null;
[L4847]               Balance[this] := 0;
[L4861]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   COND FALSE  !(revert)
[L4907]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4908]   COND FALSE  !(revert)
[L4911]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4883]               assume msgsender_MSG != null;
[L4884]               Balance[this] := 0;
[L4885]               _balances_ERC20[this] := zeroRefintArr();
[L4886]               sum__balances0[this] := 0;
[L4887]               _allowances_ERC20[this] := zeroRefRefintArr();
[L4888]               sum__allowances1[this] := 0;
[L4889]               _totalSupply_ERC20[this] := 0;
[L4911]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4912]   COND FALSE  !(revert)
[L6333]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6334]   COND FALSE  !(revert)
[L6337]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5999]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5953]               assume msgsender_MSG != null;
[L5954]               Balance[this] := 0;
[L5956]   CALL        call __var_23 := FreshRefGenerator__success();
[L4514]               havoc newRef;
[L4515]               assume Alloc[newRef] == false;
[L4516]               Alloc[newRef] := true;
[L4517]               assume newRef != null;
[L5956]   RET         call __var_23 := FreshRefGenerator__success();
[L5957]   COND FALSE  !(revert)
[L5960]               _pausers_PauserRole[this] := __var_23;
[L5962]   COND FALSE  !(DType[this] == Wafl)
[L5967]   COND TRUE   DType[this] == ERC20Pausable
[L5968]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6153]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L5848]   CALL        call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5902]               __var_22 := null;
[L5903]   COND FALSE  !(!(account_s834 != null))
[L5907]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s834]][account_s834];
[L5848]   RET         call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5849]   COND FALSE  !(revert)
[L5852]   COND FALSE  !(!!__var_20)
[L5856]               M_Ref_bool[bearer_Roles.Role[role_s786]][account_s786] := true;
[L6153]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L6154]   COND FALSE  !(revert)
[L6157]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L5968]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5969]   COND FALSE  !(revert)
[L5999]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6000]   COND FALSE  !(revert)
[L6337]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6338]   COND FALSE  !(revert)
[L6341]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6211]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5999]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5953]               assume msgsender_MSG != null;
[L5954]               Balance[this] := 0;
[L5956]   CALL        call __var_23 := FreshRefGenerator__success();
[L4514]               havoc newRef;
[L4515]               assume Alloc[newRef] == false;
[L4516]               Alloc[newRef] := true;
[L4517]               assume newRef != null;
[L5956]   RET         call __var_23 := FreshRefGenerator__success();
[L5957]   COND FALSE  !(revert)
[L5960]               _pausers_PauserRole[this] := __var_23;
[L5962]   COND FALSE  !(DType[this] == Wafl)
[L5967]   COND TRUE   DType[this] == ERC20Pausable
[L5968]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6153]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L5848]   CALL        call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5902]               __var_22 := null;
[L5903]   COND FALSE  !(!(account_s834 != null))
[L5907]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s834]][account_s834];
[L5848]   RET         call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5849]   COND FALSE  !(revert)
[L5852]   COND FALSE  !(!!__var_20)
[L5856]               M_Ref_bool[bearer_Roles.Role[role_s786]][account_s786] := true;
[L6153]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L6154]   COND FALSE  !(revert)
[L6157]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L5968]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5969]   COND FALSE  !(revert)
[L5999]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6000]   COND FALSE  !(revert)
[L6211]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6212]   COND FALSE  !(revert)
[L6215]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6190]               assume msgsender_MSG != null;
[L6191]               Balance[this] := 0;
[L6192]               _paused_Pausable[this] := false;
[L6194]               _paused_Pausable[this] := false;
[L6215]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6216]   COND FALSE  !(revert)
[L6341]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6342]   COND FALSE  !(revert)
[L6345]   CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6298]               assume msgsender_MSG != null;
[L6299]               Balance[this] := 0;
[L6345]   RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6346]   COND FALSE  !(revert)
[L7183]   RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7184]   COND FALSE  !(revert)
[L7187]   CALL        call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6973]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4861]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4846]               assume msgsender_MSG != null;
[L4847]               Balance[this] := 0;
[L4861]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   COND FALSE  !(revert)
[L6973]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6974]   COND FALSE  !(revert)
[L6977]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4907]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4861]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4846]               assume msgsender_MSG != null;
[L4847]               Balance[this] := 0;
[L4861]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   COND FALSE  !(revert)
[L4907]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4908]   COND FALSE  !(revert)
[L4911]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4883]               assume msgsender_MSG != null;
[L4884]               Balance[this] := 0;
[L4885]               _balances_ERC20[this] := zeroRefintArr();
[L4886]               sum__balances0[this] := 0;
[L4887]               _allowances_ERC20[this] := zeroRefRefintArr();
[L4888]               sum__allowances1[this] := 0;
[L4889]               _totalSupply_ERC20[this] := 0;
[L4911]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4912]   COND FALSE  !(revert)
[L6977]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6978]   COND FALSE  !(revert)
[L6981]   CALL        call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6950]               assume msgsender_MSG != null;
[L6951]               Balance[this] := 0;
[L6981]   RET         call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6982]   COND FALSE  !(revert)
[L7187]   RET         call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L7188]   COND FALSE  !(revert)
[L7191]   CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6679]   CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6638]               assume msgsender_MSG != null;
[L6639]               Balance[this] := 0;
[L6641]   CALL        call __var_36 := FreshRefGenerator__success();
[L4514]               havoc newRef;
[L4515]               assume Alloc[newRef] == false;
[L4516]               Alloc[newRef] := true;
[L4517]               assume newRef != null;
[L6641]   RET         call __var_36 := FreshRefGenerator__success();
[L6642]   COND FALSE  !(revert)
[L6645]               _minters_MinterRole[this] := __var_36;
[L6647]   COND FALSE  !(DType[this] == Wafl)
[L6652]   COND TRUE   DType[this] == ERC20Mintable
[L6653]   CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6813]   CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1200);
[L5848]   CALL        call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5902]               __var_22 := null;
[L5903]   COND FALSE  !(!(account_s834 != null))
[L5907]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s834]][account_s834];
[L5848]   RET         call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5849]   COND FALSE  !(revert)
[L5852]   COND FALSE  !(!!__var_20)
[L5856]               M_Ref_bool[bearer_Roles.Role[role_s786]][account_s786] := true;
[L6813]   RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1200);
[L6814]   COND FALSE  !(revert)
[L6817]               assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L6653]   RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6654]   COND FALSE  !(revert)
[L6679]   RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6680]   COND FALSE  !(revert)
[L7191]   RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7192]   COND FALSE  !(revert)
[L7195]   CALL        call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L6875]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4861]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4846]               assume msgsender_MSG != null;
[L4847]               Balance[this] := 0;
[L4861]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   COND FALSE  !(revert)
[L6875]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6876]   COND FALSE  !(revert)
[L6879]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4907]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4861]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4846]               assume msgsender_MSG != null;
[L4847]               Balance[this] := 0;
[L4861]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   COND FALSE  !(revert)
[L4907]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4908]   COND FALSE  !(revert)
[L4911]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4883]               assume msgsender_MSG != null;
[L4884]               Balance[this] := 0;
[L4885]               _balances_ERC20[this] := zeroRefintArr();
[L4886]               sum__balances0[this] := 0;
[L4887]               _allowances_ERC20[this] := zeroRefRefintArr();
[L4888]               sum__allowances1[this] := 0;
[L4889]               _totalSupply_ERC20[this] := 0;
[L4911]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4912]   COND FALSE  !(revert)
[L6879]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6880]   COND FALSE  !(revert)
[L6883]   CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6679]   CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6638]               assume msgsender_MSG != null;
[L6639]               Balance[this] := 0;
[L6641]   CALL        call __var_36 := FreshRefGenerator__success();
[L4514]               havoc newRef;
[L4515]               assume Alloc[newRef] == false;
[L4516]               Alloc[newRef] := true;
[L4517]               assume newRef != null;
[L6641]   RET         call __var_36 := FreshRefGenerator__success();
[L6642]   COND FALSE  !(revert)
[L6645]               _minters_MinterRole[this] := __var_36;
[L6647]   COND FALSE  !(DType[this] == Wafl)
[L6652]   COND TRUE   DType[this] == ERC20Mintable
[L6653]   CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6813]   CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1200);
[L5848]   CALL        call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5902]               __var_22 := null;
[L5903]   COND FALSE  !(!(account_s834 != null))
[L5907]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s834]][account_s834];
[L5848]   RET         call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5849]   COND FALSE  !(revert)
[L5852]   COND FALSE  !(!!__var_20)
[L5856]               M_Ref_bool[bearer_Roles.Role[role_s786]][account_s786] := true;
[L6813]   RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1200);
[L6814]   COND FALSE  !(revert)
[L6817]               assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L6653]   RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6654]   COND FALSE  !(revert)
[L6679]   RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6680]   COND FALSE  !(revert)
[L6883]   RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6884]   COND FALSE  !(revert)
[L6887]   CALL        call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6848]               assume msgsender_MSG != null;
[L6849]               Balance[this] := 0;
[L6887]   RET         call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6888]   COND FALSE  !(revert)
[L7195]   RET         call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L7196]   COND FALSE  !(revert)
[L7199]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L4717]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4699]               assume msgsender_MSG != null;
[L4700]               Balance[this] := 0;
[L4701]               _owner_Ownable[this] := null;
[L4703]               _owner_Ownable[this] := msgsender_MSG;
[L4704]               assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L4717]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4718]   COND FALSE  !(revert)
[L7199]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7200]   COND FALSE  !(revert)
[L7203]   CALL        call Wafl_Wafl_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7087]               assume msgsender_MSG != null;
[L7088]               Balance[this] := 0;
[L7090]   COND TRUE   DType[this] == Wafl
[L7091]   CALL        call __var_40 := decimals_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG);
[L5795]               __ret_0_ := _decimals_ERC20Detailed[this];
[L7091]   RET         call __var_40 := decimals_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG);
[L7092]   COND FALSE  !(revert)
[L7098]               __var_39 := __var_40 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7099]   COND TRUE   DType[this] == Wafl
[L7100]   CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 10000000000 * (nonlinearPow(10, __var_40 % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L5473]               __var_11 := null;
[L5474]   COND FALSE  !(!(account_s587 != null))
[L5478]   CALL        call __var_12 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s587);
[L4577]               c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4578]   COND FALSE  !(!(c_s26 >= a_s26))
[L4582]               __ret_0_ := c_s26;
[L5478]   RET         call __var_12 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s587);
[L5479]   COND FALSE  !(revert)
[L5482]               _totalSupply_ERC20[this] := __var_12;
[L5483]   CALL        call __var_13 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s587], amount_s587);
[L4577]               c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4578]   COND FALSE  !(!(c_s26 >= a_s26))
[L4582]               __ret_0_ := c_s26;
[L5483]   RET         call __var_13 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s587], amount_s587);
[L5484]   COND FALSE  !(revert)
[L5487]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s587];
[L5488]               _balances_ERC20[this][account_s587] := __var_13;
[L5489]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s587];
[L5490]               assert { :EventEmitted "Transfer_ERC20" } true;
[L7100]   RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 10000000000 * (nonlinearPow(10, __var_40 % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L7101]   COND FALSE  !(revert)
[L7203]   RET         call Wafl_Wafl_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7204]   COND FALSE  !(revert)
[L3164]   RET         call Wafl_Wafl__success(this, msgsender_MSG, msgvalue_MSG);
[L3165]               assume !revert && gas >= 0;
[L11217]  RET         call Wafl_Wafl(this, msgsender_MSG, msgvalue_MSG);
[L11218]              assume !revert && gas >= 0;
[L11221]  CALL        call CorralChoice_Wafl(this);
[L10965]              havoc msgsender_MSG;
[L10966]              havoc msgvalue_MSG;
[L10967]              havoc choice;
[L10968]              havoc __ret_0_owner;
[L10969]              havoc __ret_0_isOwner;
[L10970]              havoc newOwner_s216;
[L10971]              havoc __ret_0_totalSupply;
[L10972]              havoc account_s345;
[L10973]              havoc __ret_0_balanceOf;
[L10974]              havoc to_s1040;
[L10975]              havoc value_s1040;
[L10976]              havoc __ret_0_transfer;
[L10977]              havoc owner_s380;
[L10978]              havoc spender_s380;
[L10979]              havoc __ret_0_allowance;
[L10980]              havoc spender_s1079;
[L10981]              havoc value_s1079;
[L10982]              havoc __ret_0_approve;
[L10983]              havoc from_s1061;
[L10984]              havoc to_s1061;
[L10985]              havoc value_s1061;
[L10986]              havoc __ret_0_transferFrom;
[L10987]              havoc spender_s1097;
[L10988]              havoc addedValue_s1097;
[L10989]              havoc __ret_0_increaseAllowance;
[L10990]              havoc spender_s1115;
[L10991]              havoc subtractedValue_s1115;
[L10992]              havoc __ret_0_decreaseAllowance;
[L10993]              havoc name_s731;
[L10994]              havoc symbol_s731;
[L10995]              havoc decimals_s731;
[L10996]              havoc __ret_0_name;
[L10997]              havoc __ret_0_symbol;
[L10998]              havoc __ret_0_decimals;
[L10999]              havoc account_s882;
[L11000]              havoc __ret_0_isPauser;
[L11001]              havoc account_s894;
[L11002]              havoc __ret_0_paused;
[L11003]              havoc account_s1163;
[L11004]              havoc __ret_0_isMinter;
[L11005]              havoc account_s1175;
[L11006]              havoc account_s1240;
[L11007]              havoc amount_s1240;
[L11008]              havoc __ret_0_mint;
[L11009]              havoc amount_s1255;
[L11010]              havoc account_s1268;
[L11011]              havoc amount_s1268;
[L11012]              havoc tmpNow;
[L11013]              havoc gas;
[L11014]              assume gas > 4000000 && gas <= 8000000;
[L11015]              tmpNow := now;
[L11016]              havoc now;
[L11017]              assume now > tmpNow;
[L11018]              assume msgsender_MSG != null;
[L11019]              assume DType[msgsender_MSG] != SafeMath;
[L11020]              assume DType[msgsender_MSG] != Ownable;
[L11021]              assume DType[msgsender_MSG] != IERC20;
[L11022]              assume DType[msgsender_MSG] != ERC20;
[L11023]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11024]              assume DType[msgsender_MSG] != Roles;
[L11025]              assume DType[msgsender_MSG] != PauserRole;
[L11026]              assume DType[msgsender_MSG] != Pausable;
[L11027]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11028]              assume DType[msgsender_MSG] != MinterRole;
[L11029]              assume DType[msgsender_MSG] != ERC20Mintable;
[L11030]              assume DType[msgsender_MSG] != ERC20Burnable;
[L11031]              assume DType[msgsender_MSG] != Wafl;
[L11032]              Alloc[msgsender_MSG] := true;
[L11033]  COND FALSE  !(choice == 27)
[L11039]  COND FALSE  !(choice == 26)
[L11045]  COND FALSE  !(choice == 25)
[L11051]  COND FALSE  !(choice == 24)
[L11057]  COND FALSE  !(choice == 23)
[L11063]  COND FALSE  !(choice == 22)
[L11069]  COND TRUE   choice == 21
[L11070]              gas := gas - 21000;
[L11071]  COND TRUE   gas >= 0
[L11072]              assume value_s1040 >= 0 && value_s1040 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L11073]              assume msgvalue_MSG == 0;
[L11074]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s1040, value_s1040);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((msgsender_MSG == to_s1040 && value_s1040 > _balances_ERC20[this][msgsender_MSG]) && value_s1040 >= 0) && value_s1040 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1040] >= 0) && _balances_ERC20[this][to_s1040] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transfer_ERC20Pausable0 := true;
[L2]                  call_transfer_ERC20Pausable0 := false;
[L2]                  revert := revert_hold;
[L2158]               havoc __exception;
[L2159]               revert := false;
[L2160]   COND FALSE  !(__exception)
[L2188]   CALL        call __ret_0_ := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1040, value_s1040);
[L6380]   CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9503]   COND FALSE  !(!!_paused_Pausable[this])
[L6380]   RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6381]   COND FALSE  !(revert)
[L6384]   COND TRUE   DType[this] == Wafl
[L6385]   CALL        call __var_26 := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1040, value_s1040);
[L4977]   COND TRUE   DType[this] == Wafl
[L4978]   CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, recipient_s364, amount_s364);
[L5417]               __var_7 := null;
[L5418]   COND FALSE  !(!(sender_s544 != null))
[L5422]               __var_8 := null;
[L5423]   COND FALSE  !(!(recipient_s544 != null))
[L5427]   CALL        call __var_9 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s544], amount_s544);
[L4601]   COND FALSE  !(!(b_s51 <= a_s51))
[L4605]               c_s51 := (a_s51 - b_s51) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4606]               __ret_0_ := c_s51;
[L5427]   RET         call __var_9 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s544], amount_s544);
[L5428]   COND FALSE  !(revert)
[L5431]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s544];
[L5432]               _balances_ERC20[this][sender_s544] := __var_9;
[L5433]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s544];
[L5434]   CALL        call __var_10 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s544], amount_s544);
[L4577]               c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4578]   COND FALSE  !(!(c_s26 >= a_s26))
[L4582]               __ret_0_ := c_s26;
[L5434]   RET         call __var_10 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s544], amount_s544);
[L5435]   COND FALSE  !(revert)
[L5438]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s544];
[L5439]               _balances_ERC20[this][recipient_s544] := __var_10;
[L5440]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s544];
[L5441]               assert { :EventEmitted "Transfer_ERC20" } true;
[L4978]   RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, recipient_s364, amount_s364);
[L4979]   COND FALSE  !(revert)
[L5005]               __ret_0_ := true;
[L6385]   RET         call __var_26 := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1040, value_s1040);
[L6386]   COND FALSE  !(revert)
[L6397]               __ret_0_ := __var_26;
[L2188]   RET         call __ret_0_ := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1040, value_s1040);
[L2189]               assume !revert && gas >= 0;
[L11074]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s1040, value_s1040);
[L11221]  RET         call CorralChoice_Wafl(this);

Loop:
[L11221]  CALL        call CorralChoice_Wafl(this);
[L10965]              havoc msgsender_MSG;
[L10966]              havoc msgvalue_MSG;
[L10967]              havoc choice;
[L10968]              havoc __ret_0_owner;
[L10969]              havoc __ret_0_isOwner;
[L10970]              havoc newOwner_s216;
[L10971]              havoc __ret_0_totalSupply;
[L10972]              havoc account_s345;
[L10973]              havoc __ret_0_balanceOf;
[L10974]              havoc to_s1040;
[L10975]              havoc value_s1040;
[L10976]              havoc __ret_0_transfer;
[L10977]              havoc owner_s380;
[L10978]              havoc spender_s380;
[L10979]              havoc __ret_0_allowance;
[L10980]              havoc spender_s1079;
[L10981]              havoc value_s1079;
[L10982]              havoc __ret_0_approve;
[L10983]              havoc from_s1061;
[L10984]              havoc to_s1061;
[L10985]              havoc value_s1061;
[L10986]              havoc __ret_0_transferFrom;
[L10987]              havoc spender_s1097;
[L10988]              havoc addedValue_s1097;
[L10989]              havoc __ret_0_increaseAllowance;
[L10990]              havoc spender_s1115;
[L10991]              havoc subtractedValue_s1115;
[L10992]              havoc __ret_0_decreaseAllowance;
[L10993]              havoc name_s731;
[L10994]              havoc symbol_s731;
[L10995]              havoc decimals_s731;
[L10996]              havoc __ret_0_name;
[L10997]              havoc __ret_0_symbol;
[L10998]              havoc __ret_0_decimals;
[L10999]              havoc account_s882;
[L11000]              havoc __ret_0_isPauser;
[L11001]              havoc account_s894;
[L11002]              havoc __ret_0_paused;
[L11003]              havoc account_s1163;
[L11004]              havoc __ret_0_isMinter;
[L11005]              havoc account_s1175;
[L11006]              havoc account_s1240;
[L11007]              havoc amount_s1240;
[L11008]              havoc __ret_0_mint;
[L11009]              havoc amount_s1255;
[L11010]              havoc account_s1268;
[L11011]              havoc amount_s1268;
[L11012]              havoc tmpNow;
[L11013]              havoc gas;
[L11014]              assume gas > 4000000 && gas <= 8000000;
[L11015]              tmpNow := now;
[L11016]              havoc now;
[L11017]              assume now > tmpNow;
[L11018]              assume msgsender_MSG != null;
[L11019]              assume DType[msgsender_MSG] != SafeMath;
[L11020]              assume DType[msgsender_MSG] != Ownable;
[L11021]              assume DType[msgsender_MSG] != IERC20;
[L11022]              assume DType[msgsender_MSG] != ERC20;
[L11023]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11024]              assume DType[msgsender_MSG] != Roles;
[L11025]              assume DType[msgsender_MSG] != PauserRole;
[L11026]              assume DType[msgsender_MSG] != Pausable;
[L11027]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11028]              assume DType[msgsender_MSG] != MinterRole;
[L11029]              assume DType[msgsender_MSG] != ERC20Mintable;
[L11030]              assume DType[msgsender_MSG] != ERC20Burnable;
[L11031]              assume DType[msgsender_MSG] != Wafl;
[L11032]              Alloc[msgsender_MSG] := true;
[L11033]  COND FALSE  !(choice == 27)
[L11039]  COND FALSE  !(choice == 26)
[L11045]  COND FALSE  !(choice == 25)
[L11051]  COND FALSE  !(choice == 24)
[L11057]  COND FALSE  !(choice == 23)
[L11063]  COND FALSE  !(choice == 22)
[L11069]  COND TRUE   choice == 21
[L11070]              gas := gas - 21000;
[L11071]  COND TRUE   gas >= 0
[L11072]              assume value_s1040 >= 0 && value_s1040 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L11073]              assume msgvalue_MSG == 0;
[L11074]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s1040, value_s1040);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((msgsender_MSG == to_s1040 && value_s1040 > _balances_ERC20[this][msgsender_MSG]) && value_s1040 >= 0) && value_s1040 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1040] >= 0) && _balances_ERC20[this][to_s1040] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transfer_ERC20Pausable0 := true;
[L2]                  call_transfer_ERC20Pausable0 := false;
[L2]                  revert := revert_hold;
[L2158]               havoc __exception;
[L2159]               revert := false;
[L2160]   COND FALSE  !(__exception)
[L2188]   CALL        call __ret_0_ := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1040, value_s1040);
[L6380]   CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9503]   COND FALSE  !(!!_paused_Pausable[this])
[L6380]   RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6381]   COND FALSE  !(revert)
[L6384]   COND TRUE   DType[this] == Wafl
[L6385]   CALL        call __var_26 := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1040, value_s1040);
[L4977]   COND TRUE   DType[this] == Wafl
[L4978]   CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, recipient_s364, amount_s364);
[L5417]               __var_7 := null;
[L5418]   COND FALSE  !(!(sender_s544 != null))
[L5422]               __var_8 := null;
[L5423]   COND FALSE  !(!(recipient_s544 != null))
[L5427]   CALL        call __var_9 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s544], amount_s544);
[L4601]   COND FALSE  !(!(b_s51 <= a_s51))
[L4605]               c_s51 := (a_s51 - b_s51) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4606]               __ret_0_ := c_s51;
[L5427]   RET         call __var_9 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s544], amount_s544);
[L5428]   COND FALSE  !(revert)
[L5431]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s544];
[L5432]               _balances_ERC20[this][sender_s544] := __var_9;
[L5433]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s544];
[L5434]   CALL        call __var_10 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s544], amount_s544);
[L4577]               c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4578]   COND FALSE  !(!(c_s26 >= a_s26))
[L4582]               __ret_0_ := c_s26;
[L5434]   RET         call __var_10 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s544], amount_s544);
[L5435]   COND FALSE  !(revert)
[L5438]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s544];
[L5439]               _balances_ERC20[this][recipient_s544] := __var_10;
[L5440]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s544];
[L5441]               assert { :EventEmitted "Transfer_ERC20" } true;
[L4978]   RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, recipient_s364, amount_s364);
[L4979]   COND FALSE  !(revert)
[L5005]               __ret_0_ := true;
[L6385]   RET         call __var_26 := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1040, value_s1040);
[L6386]   COND FALSE  !(revert)
[L6397]               __ret_0_ := __var_26;
[L2188]   RET         call __ret_0_ := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1040, value_s1040);
[L2189]               assume !revert && gas >= 0;
[L11074]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s1040, value_s1040);
[L11221]  RET         call CorralChoice_Wafl(this);

[2020-11-25 08:45:53,387 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 08:45:53,387 INFO  L82        PathProgramCache]: Analyzing trace with hash 897000966, now seen corresponding path program 1 times
[2020-11-25 08:45:53,388 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 08:45:53,413 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 08:45:53,695 INFO  L134       CoverageAnalysis]: Checked inductivity of 1012 backedges. 0 proven. 27 refuted. 0 times theorem prover too weak. 985 trivial. 0 not checked.
[2020-11-25 08:45:53,696 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 08:45:53,696 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [7] total 7
[2020-11-25 08:45:53,697 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 08:45:53,697 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 7 interpolants.
[2020-11-25 08:45:53,697 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=11, Invalid=31, Unknown=0, NotChecked=0, Total=42
[2020-11-25 08:45:53,697 INFO  L87              Difference]: Start difference. First operand 6645 states and 7651 transitions. cyclomatic complexity: 1008 Second operand 7 states.
[2020-11-25 08:45:53,967 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 08:45:53,967 INFO  L93              Difference]: Finished difference Result 6680 states and 7694 transitions.
[2020-11-25 08:45:53,967 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 7 states. 
[2020-11-25 08:45:53,967 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 6680 states and 7694 transitions.
[2020-11-25 08:45:53,981 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 08:45:54,001 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 6680 states to 6651 states and 7658 transitions.
[2020-11-25 08:45:54,001 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1699
[2020-11-25 08:45:54,002 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1699
[2020-11-25 08:45:54,002 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 6651 states and 7658 transitions.
[2020-11-25 08:45:54,007 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 08:45:54,007 INFO  L728         BuchiCegarLoop]: Abstraction has 6651 states and 7658 transitions.
[2020-11-25 08:45:54,013 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 6651 states and 7658 transitions.
[2020-11-25 08:45:54,053 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 6651 to 6651.
[2020-11-25 08:45:54,054 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 6651 states.
[2020-11-25 08:45:54,061 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 6651 states to 6651 states and 7658 transitions.
[2020-11-25 08:45:54,061 INFO  L751         BuchiCegarLoop]: Abstraction has 6651 states and 7658 transitions.
[2020-11-25 08:45:54,061 INFO  L631         BuchiCegarLoop]: Abstraction has 6651 states and 7658 transitions.
[2020-11-25 08:45:54,061 INFO  L445         BuchiCegarLoop]: ======== Iteration 6============
[2020-11-25 08:45:54,061 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 6651 states and 7658 transitions.
[2020-11-25 08:45:54,069 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 08:45:54,069 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 08:45:54,069 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 08:45:54,073 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [9, 9, 9, 9, 9, 9, 9, 9, 9, 7, 7, 7, 7, 7, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 08:45:54,074 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  fail_transfer_ERC20Pausable0 := false;
[L2]                  call_transfer_ERC20Pausable0 := false;
[L2]      CALL        call main();
[L11211]              assume null == 0;
[L11212]  CALL        call this := FreshRefGenerator__success();
[L4514]               havoc newRef;
[L4515]               assume Alloc[newRef] == false;
[L4516]               Alloc[newRef] := true;
[L4517]               assume newRef != null;
[L11212]  RET         call this := FreshRefGenerator__success();
[L11213]              assume now >= 0;
[L11214]              assume DType[this] == Wafl;
[L11215]              assume msgvalue_MSG == 0;
[L11216]              gas := gas - 53000;
[L11217]  CALL        call Wafl_Wafl(this, msgsender_MSG, msgvalue_MSG);
[L3134]               havoc __exception;
[L3135]               revert := false;
[L3136]   COND FALSE  !(__exception)
[L3164]   CALL        call Wafl_Wafl__success(this, msgsender_MSG, msgvalue_MSG);
[L7163]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4861]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4846]               assume msgsender_MSG != null;
[L4847]               Balance[this] := 0;
[L4861]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   COND FALSE  !(revert)
[L7163]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7164]   COND FALSE  !(revert)
[L7167]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4907]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4861]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4846]               assume msgsender_MSG != null;
[L4847]               Balance[this] := 0;
[L4861]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   COND FALSE  !(revert)
[L4907]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4908]   COND FALSE  !(revert)
[L4911]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4883]               assume msgsender_MSG != null;
[L4884]               Balance[this] := 0;
[L4885]               _balances_ERC20[this] := zeroRefintArr();
[L4886]               sum__balances0[this] := 0;
[L4887]               _allowances_ERC20[this] := zeroRefRefintArr();
[L4888]               sum__allowances1[this] := 0;
[L4889]               _totalSupply_ERC20[this] := 0;
[L4911]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4912]   COND FALSE  !(revert)
[L7167]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7168]   COND FALSE  !(revert)
[L7171]   CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 1861448946, 1818491892, 18);
[L5753]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4861]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4846]               assume msgsender_MSG != null;
[L4847]               Balance[this] := 0;
[L4861]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   COND FALSE  !(revert)
[L5753]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5754]   COND FALSE  !(revert)
[L5757]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s731, symbol_s731, decimals_s731);
[L5728]               assume msgsender_MSG != null;
[L5729]               Balance[this] := 0;
[L5730]               _name_ERC20Detailed[this] := -1545721152;
[L5731]               _symbol_ERC20Detailed[this] := -1545721152;
[L5732]               _decimals_ERC20Detailed[this] := 0;
[L5734]               _name_ERC20Detailed[this] := name_s731;
[L5735]               _symbol_ERC20Detailed[this] := symbol_s731;
[L5736]               _decimals_ERC20Detailed[this] := decimals_s731;
[L5757]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s731, symbol_s731, decimals_s731);
[L5758]   COND FALSE  !(revert)
[L7171]   RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 1861448946, 1818491892, 18);
[L7172]   COND FALSE  !(revert)
[L7175]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5999]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5953]               assume msgsender_MSG != null;
[L5954]               Balance[this] := 0;
[L5956]   CALL        call __var_23 := FreshRefGenerator__success();
[L4514]               havoc newRef;
[L4515]               assume Alloc[newRef] == false;
[L4516]               Alloc[newRef] := true;
[L4517]               assume newRef != null;
[L5956]   RET         call __var_23 := FreshRefGenerator__success();
[L5957]   COND FALSE  !(revert)
[L5960]               _pausers_PauserRole[this] := __var_23;
[L5962]   COND FALSE  !(DType[this] == Wafl)
[L5967]   COND FALSE  !(DType[this] == ERC20Pausable)
[L5972]   COND TRUE   DType[this] == Pausable
[L5973]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6153]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L5848]   CALL        call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5902]               __var_22 := null;
[L5903]   COND FALSE  !(!(account_s834 != null))
[L5907]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s834]][account_s834];
[L5848]   RET         call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5849]   COND FALSE  !(revert)
[L5852]   COND FALSE  !(!!__var_20)
[L5856]               M_Ref_bool[bearer_Roles.Role[role_s786]][account_s786] := true;
[L6153]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L6154]   COND FALSE  !(revert)
[L6157]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L5973]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5974]   COND FALSE  !(revert)
[L5999]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6000]   COND FALSE  !(revert)
[L7175]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7176]   COND FALSE  !(revert)
[L7179]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6211]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5999]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5953]               assume msgsender_MSG != null;
[L5954]               Balance[this] := 0;
[L5956]   CALL        call __var_23 := FreshRefGenerator__success();
[L4514]               havoc newRef;
[L4515]               assume Alloc[newRef] == false;
[L4516]               Alloc[newRef] := true;
[L4517]               assume newRef != null;
[L5956]   RET         call __var_23 := FreshRefGenerator__success();
[L5957]   COND FALSE  !(revert)
[L5960]               _pausers_PauserRole[this] := __var_23;
[L5962]   COND FALSE  !(DType[this] == Wafl)
[L5967]   COND FALSE  !(DType[this] == ERC20Pausable)
[L5972]   COND TRUE   DType[this] == Pausable
[L5973]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6153]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L5848]   CALL        call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5902]               __var_22 := null;
[L5903]   COND FALSE  !(!(account_s834 != null))
[L5907]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s834]][account_s834];
[L5848]   RET         call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5849]   COND FALSE  !(revert)
[L5852]   COND FALSE  !(!!__var_20)
[L5856]               M_Ref_bool[bearer_Roles.Role[role_s786]][account_s786] := true;
[L6153]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L6154]   COND FALSE  !(revert)
[L6157]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L5973]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5974]   COND FALSE  !(revert)
[L5999]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6000]   COND FALSE  !(revert)
[L6211]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6212]   COND FALSE  !(revert)
[L6215]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6190]               assume msgsender_MSG != null;
[L6191]               Balance[this] := 0;
[L6192]               _paused_Pausable[this] := false;
[L6194]               _paused_Pausable[this] := false;
[L6215]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6216]   COND FALSE  !(revert)
[L7179]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7180]   COND FALSE  !(revert)
[L7183]   CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6329]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4861]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4846]               assume msgsender_MSG != null;
[L4847]               Balance[this] := 0;
[L4861]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   COND FALSE  !(revert)
[L6329]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6330]   COND FALSE  !(revert)
[L6333]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4907]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4861]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4846]               assume msgsender_MSG != null;
[L4847]               Balance[this] := 0;
[L4861]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   COND FALSE  !(revert)
[L4907]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4908]   COND FALSE  !(revert)
[L4911]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4883]               assume msgsender_MSG != null;
[L4884]               Balance[this] := 0;
[L4885]               _balances_ERC20[this] := zeroRefintArr();
[L4886]               sum__balances0[this] := 0;
[L4887]               _allowances_ERC20[this] := zeroRefRefintArr();
[L4888]               sum__allowances1[this] := 0;
[L4889]               _totalSupply_ERC20[this] := 0;
[L4911]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4912]   COND FALSE  !(revert)
[L6333]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6334]   COND FALSE  !(revert)
[L6337]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5999]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5953]               assume msgsender_MSG != null;
[L5954]               Balance[this] := 0;
[L5956]   CALL        call __var_23 := FreshRefGenerator__success();
[L4514]               havoc newRef;
[L4515]               assume Alloc[newRef] == false;
[L4516]               Alloc[newRef] := true;
[L4517]               assume newRef != null;
[L5956]   RET         call __var_23 := FreshRefGenerator__success();
[L5957]   COND FALSE  !(revert)
[L5960]               _pausers_PauserRole[this] := __var_23;
[L5962]   COND FALSE  !(DType[this] == Wafl)
[L5967]   COND FALSE  !(DType[this] == ERC20Pausable)
[L5972]   COND TRUE   DType[this] == Pausable
[L5973]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6153]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L5848]   CALL        call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5902]               __var_22 := null;
[L5903]   COND FALSE  !(!(account_s834 != null))
[L5907]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s834]][account_s834];
[L5848]   RET         call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5849]   COND FALSE  !(revert)
[L5852]   COND FALSE  !(!!__var_20)
[L5856]               M_Ref_bool[bearer_Roles.Role[role_s786]][account_s786] := true;
[L6153]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L6154]   COND FALSE  !(revert)
[L6157]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L5973]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5974]   COND FALSE  !(revert)
[L5999]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6000]   COND FALSE  !(revert)
[L6337]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6338]   COND FALSE  !(revert)
[L6341]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6211]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5999]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5953]               assume msgsender_MSG != null;
[L5954]               Balance[this] := 0;
[L5956]   CALL        call __var_23 := FreshRefGenerator__success();
[L4514]               havoc newRef;
[L4515]               assume Alloc[newRef] == false;
[L4516]               Alloc[newRef] := true;
[L4517]               assume newRef != null;
[L5956]   RET         call __var_23 := FreshRefGenerator__success();
[L5957]   COND FALSE  !(revert)
[L5960]               _pausers_PauserRole[this] := __var_23;
[L5962]   COND FALSE  !(DType[this] == Wafl)
[L5967]   COND FALSE  !(DType[this] == ERC20Pausable)
[L5972]   COND TRUE   DType[this] == Pausable
[L5973]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6153]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L5848]   CALL        call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5902]               __var_22 := null;
[L5903]   COND FALSE  !(!(account_s834 != null))
[L5907]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s834]][account_s834];
[L5848]   RET         call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5849]   COND FALSE  !(revert)
[L5852]   COND FALSE  !(!!__var_20)
[L5856]               M_Ref_bool[bearer_Roles.Role[role_s786]][account_s786] := true;
[L6153]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L6154]   COND FALSE  !(revert)
[L6157]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L5973]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5974]   COND FALSE  !(revert)
[L5999]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6000]   COND FALSE  !(revert)
[L6211]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6212]   COND FALSE  !(revert)
[L6215]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6190]               assume msgsender_MSG != null;
[L6191]               Balance[this] := 0;
[L6192]               _paused_Pausable[this] := false;
[L6194]               _paused_Pausable[this] := false;
[L6215]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6216]   COND FALSE  !(revert)
[L6341]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6342]   COND FALSE  !(revert)
[L6345]   CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6298]               assume msgsender_MSG != null;
[L6299]               Balance[this] := 0;
[L6345]   RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6346]   COND FALSE  !(revert)
[L7183]   RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7184]   COND FALSE  !(revert)
[L7187]   CALL        call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6973]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4861]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4846]               assume msgsender_MSG != null;
[L4847]               Balance[this] := 0;
[L4861]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   COND FALSE  !(revert)
[L6973]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6974]   COND FALSE  !(revert)
[L6977]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4907]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4861]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4846]               assume msgsender_MSG != null;
[L4847]               Balance[this] := 0;
[L4861]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   COND FALSE  !(revert)
[L4907]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4908]   COND FALSE  !(revert)
[L4911]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4883]               assume msgsender_MSG != null;
[L4884]               Balance[this] := 0;
[L4885]               _balances_ERC20[this] := zeroRefintArr();
[L4886]               sum__balances0[this] := 0;
[L4887]               _allowances_ERC20[this] := zeroRefRefintArr();
[L4888]               sum__allowances1[this] := 0;
[L4889]               _totalSupply_ERC20[this] := 0;
[L4911]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4912]   COND FALSE  !(revert)
[L6977]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6978]   COND FALSE  !(revert)
[L6981]   CALL        call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6950]               assume msgsender_MSG != null;
[L6951]               Balance[this] := 0;
[L6981]   RET         call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6982]   COND FALSE  !(revert)
[L7187]   RET         call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L7188]   COND FALSE  !(revert)
[L7191]   CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6679]   CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6638]               assume msgsender_MSG != null;
[L6639]               Balance[this] := 0;
[L6641]   CALL        call __var_36 := FreshRefGenerator__success();
[L4514]               havoc newRef;
[L4515]               assume Alloc[newRef] == false;
[L4516]               Alloc[newRef] := true;
[L4517]               assume newRef != null;
[L6641]   RET         call __var_36 := FreshRefGenerator__success();
[L6642]   COND FALSE  !(revert)
[L6645]               _minters_MinterRole[this] := __var_36;
[L6647]   COND FALSE  !(DType[this] == Wafl)
[L6652]   COND TRUE   DType[this] == ERC20Mintable
[L6653]   CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6813]   CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1200);
[L5848]   CALL        call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5902]               __var_22 := null;
[L5903]   COND FALSE  !(!(account_s834 != null))
[L5907]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s834]][account_s834];
[L5848]   RET         call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5849]   COND FALSE  !(revert)
[L5852]   COND FALSE  !(!!__var_20)
[L5856]               M_Ref_bool[bearer_Roles.Role[role_s786]][account_s786] := true;
[L6813]   RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1200);
[L6814]   COND FALSE  !(revert)
[L6817]               assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L6653]   RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6654]   COND FALSE  !(revert)
[L6679]   RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6680]   COND FALSE  !(revert)
[L7191]   RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7192]   COND FALSE  !(revert)
[L7195]   CALL        call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L6875]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4861]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4846]               assume msgsender_MSG != null;
[L4847]               Balance[this] := 0;
[L4861]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   COND FALSE  !(revert)
[L6875]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6876]   COND FALSE  !(revert)
[L6879]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4907]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4861]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4846]               assume msgsender_MSG != null;
[L4847]               Balance[this] := 0;
[L4861]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   COND FALSE  !(revert)
[L4907]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4908]   COND FALSE  !(revert)
[L4911]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4883]               assume msgsender_MSG != null;
[L4884]               Balance[this] := 0;
[L4885]               _balances_ERC20[this] := zeroRefintArr();
[L4886]               sum__balances0[this] := 0;
[L4887]               _allowances_ERC20[this] := zeroRefRefintArr();
[L4888]               sum__allowances1[this] := 0;
[L4889]               _totalSupply_ERC20[this] := 0;
[L4911]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4912]   COND FALSE  !(revert)
[L6879]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6880]   COND FALSE  !(revert)
[L6883]   CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6679]   CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6638]               assume msgsender_MSG != null;
[L6639]               Balance[this] := 0;
[L6641]   CALL        call __var_36 := FreshRefGenerator__success();
[L4514]               havoc newRef;
[L4515]               assume Alloc[newRef] == false;
[L4516]               Alloc[newRef] := true;
[L4517]               assume newRef != null;
[L6641]   RET         call __var_36 := FreshRefGenerator__success();
[L6642]   COND FALSE  !(revert)
[L6645]               _minters_MinterRole[this] := __var_36;
[L6647]   COND FALSE  !(DType[this] == Wafl)
[L6652]   COND TRUE   DType[this] == ERC20Mintable
[L6653]   CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6813]   CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1200);
[L5848]   CALL        call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5902]               __var_22 := null;
[L5903]   COND FALSE  !(!(account_s834 != null))
[L5907]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s834]][account_s834];
[L5848]   RET         call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5849]   COND FALSE  !(revert)
[L5852]   COND FALSE  !(!!__var_20)
[L5856]               M_Ref_bool[bearer_Roles.Role[role_s786]][account_s786] := true;
[L6813]   RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1200);
[L6814]   COND FALSE  !(revert)
[L6817]               assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L6653]   RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6654]   COND FALSE  !(revert)
[L6679]   RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6680]   COND FALSE  !(revert)
[L6883]   RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6884]   COND FALSE  !(revert)
[L6887]   CALL        call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6848]               assume msgsender_MSG != null;
[L6849]               Balance[this] := 0;
[L6887]   RET         call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6888]   COND FALSE  !(revert)
[L7195]   RET         call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L7196]   COND FALSE  !(revert)
[L7199]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L4717]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4699]               assume msgsender_MSG != null;
[L4700]               Balance[this] := 0;
[L4701]               _owner_Ownable[this] := null;
[L4703]               _owner_Ownable[this] := msgsender_MSG;
[L4704]               assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L4717]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4718]   COND FALSE  !(revert)
[L7199]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7200]   COND FALSE  !(revert)
[L7203]   CALL        call Wafl_Wafl_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7087]               assume msgsender_MSG != null;
[L7088]               Balance[this] := 0;
[L7090]   COND TRUE   DType[this] == Wafl
[L7091]   CALL        call __var_40 := decimals_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG);
[L5795]               __ret_0_ := _decimals_ERC20Detailed[this];
[L7091]   RET         call __var_40 := decimals_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG);
[L7092]   COND FALSE  !(revert)
[L7098]               __var_39 := __var_40 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7099]   COND TRUE   DType[this] == Wafl
[L7100]   CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 10000000000 * (nonlinearPow(10, __var_40 % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L5473]               __var_11 := null;
[L5474]   COND FALSE  !(!(account_s587 != null))
[L5478]   CALL        call __var_12 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s587);
[L4577]               c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4578]   COND FALSE  !(!(c_s26 >= a_s26))
[L4582]               __ret_0_ := c_s26;
[L5478]   RET         call __var_12 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s587);
[L5479]   COND FALSE  !(revert)
[L5482]               _totalSupply_ERC20[this] := __var_12;
[L5483]   CALL        call __var_13 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s587], amount_s587);
[L4577]               c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4578]   COND FALSE  !(!(c_s26 >= a_s26))
[L4582]               __ret_0_ := c_s26;
[L5483]   RET         call __var_13 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s587], amount_s587);
[L5484]   COND FALSE  !(revert)
[L5487]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s587];
[L5488]               _balances_ERC20[this][account_s587] := __var_13;
[L5489]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s587];
[L5490]               assert { :EventEmitted "Transfer_ERC20" } true;
[L7100]   RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 10000000000 * (nonlinearPow(10, __var_40 % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L7101]   COND FALSE  !(revert)
[L7203]   RET         call Wafl_Wafl_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7204]   COND FALSE  !(revert)
[L3164]   RET         call Wafl_Wafl__success(this, msgsender_MSG, msgvalue_MSG);
[L3165]               assume !revert && gas >= 0;
[L11217]  RET         call Wafl_Wafl(this, msgsender_MSG, msgvalue_MSG);
[L11218]              assume !revert && gas >= 0;
[L11221]  CALL        call CorralChoice_Wafl(this);
[L10965]              havoc msgsender_MSG;
[L10966]              havoc msgvalue_MSG;
[L10967]              havoc choice;
[L10968]              havoc __ret_0_owner;
[L10969]              havoc __ret_0_isOwner;
[L10970]              havoc newOwner_s216;
[L10971]              havoc __ret_0_totalSupply;
[L10972]              havoc account_s345;
[L10973]              havoc __ret_0_balanceOf;
[L10974]              havoc to_s1040;
[L10975]              havoc value_s1040;
[L10976]              havoc __ret_0_transfer;
[L10977]              havoc owner_s380;
[L10978]              havoc spender_s380;
[L10979]              havoc __ret_0_allowance;
[L10980]              havoc spender_s1079;
[L10981]              havoc value_s1079;
[L10982]              havoc __ret_0_approve;
[L10983]              havoc from_s1061;
[L10984]              havoc to_s1061;
[L10985]              havoc value_s1061;
[L10986]              havoc __ret_0_transferFrom;
[L10987]              havoc spender_s1097;
[L10988]              havoc addedValue_s1097;
[L10989]              havoc __ret_0_increaseAllowance;
[L10990]              havoc spender_s1115;
[L10991]              havoc subtractedValue_s1115;
[L10992]              havoc __ret_0_decreaseAllowance;
[L10993]              havoc name_s731;
[L10994]              havoc symbol_s731;
[L10995]              havoc decimals_s731;
[L10996]              havoc __ret_0_name;
[L10997]              havoc __ret_0_symbol;
[L10998]              havoc __ret_0_decimals;
[L10999]              havoc account_s882;
[L11000]              havoc __ret_0_isPauser;
[L11001]              havoc account_s894;
[L11002]              havoc __ret_0_paused;
[L11003]              havoc account_s1163;
[L11004]              havoc __ret_0_isMinter;
[L11005]              havoc account_s1175;
[L11006]              havoc account_s1240;
[L11007]              havoc amount_s1240;
[L11008]              havoc __ret_0_mint;
[L11009]              havoc amount_s1255;
[L11010]              havoc account_s1268;
[L11011]              havoc amount_s1268;
[L11012]              havoc tmpNow;
[L11013]              havoc gas;
[L11014]              assume gas > 4000000 && gas <= 8000000;
[L11015]              tmpNow := now;
[L11016]              havoc now;
[L11017]              assume now > tmpNow;
[L11018]              assume msgsender_MSG != null;
[L11019]              assume DType[msgsender_MSG] != SafeMath;
[L11020]              assume DType[msgsender_MSG] != Ownable;
[L11021]              assume DType[msgsender_MSG] != IERC20;
[L11022]              assume DType[msgsender_MSG] != ERC20;
[L11023]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11024]              assume DType[msgsender_MSG] != Roles;
[L11025]              assume DType[msgsender_MSG] != PauserRole;
[L11026]              assume DType[msgsender_MSG] != Pausable;
[L11027]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11028]              assume DType[msgsender_MSG] != MinterRole;
[L11029]              assume DType[msgsender_MSG] != ERC20Mintable;
[L11030]              assume DType[msgsender_MSG] != ERC20Burnable;
[L11031]              assume DType[msgsender_MSG] != Wafl;
[L11032]              Alloc[msgsender_MSG] := true;
[L11033]  COND FALSE  !(choice == 27)
[L11039]  COND FALSE  !(choice == 26)
[L11045]  COND FALSE  !(choice == 25)
[L11051]  COND FALSE  !(choice == 24)
[L11057]  COND FALSE  !(choice == 23)
[L11063]  COND FALSE  !(choice == 22)
[L11069]  COND TRUE   choice == 21
[L11070]              gas := gas - 21000;
[L11071]  COND TRUE   gas >= 0
[L11072]              assume value_s1040 >= 0 && value_s1040 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L11073]              assume msgvalue_MSG == 0;
[L11074]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s1040, value_s1040);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((msgsender_MSG == to_s1040 && value_s1040 > _balances_ERC20[this][msgsender_MSG]) && value_s1040 >= 0) && value_s1040 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1040] >= 0) && _balances_ERC20[this][to_s1040] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transfer_ERC20Pausable0 := true;
[L2]                  call_transfer_ERC20Pausable0 := false;
[L2]                  revert := revert_hold;
[L2158]               havoc __exception;
[L2159]               revert := false;
[L2160]   COND FALSE  !(__exception)
[L2188]   CALL        call __ret_0_ := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1040, value_s1040);
[L6380]   CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9503]   COND FALSE  !(!!_paused_Pausable[this])
[L6380]   RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6381]   COND FALSE  !(revert)
[L6384]   COND TRUE   DType[this] == Wafl
[L6385]   CALL        call __var_26 := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1040, value_s1040);
[L4977]   COND TRUE   DType[this] == Wafl
[L4978]   CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, recipient_s364, amount_s364);
[L5417]               __var_7 := null;
[L5418]   COND FALSE  !(!(sender_s544 != null))
[L5422]               __var_8 := null;
[L5423]   COND FALSE  !(!(recipient_s544 != null))
[L5427]   CALL        call __var_9 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s544], amount_s544);
[L4601]   COND FALSE  !(!(b_s51 <= a_s51))
[L4605]               c_s51 := (a_s51 - b_s51) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4606]               __ret_0_ := c_s51;
[L5427]   RET         call __var_9 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s544], amount_s544);
[L5428]   COND FALSE  !(revert)
[L5431]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s544];
[L5432]               _balances_ERC20[this][sender_s544] := __var_9;
[L5433]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s544];
[L5434]   CALL        call __var_10 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s544], amount_s544);
[L4577]               c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4578]   COND FALSE  !(!(c_s26 >= a_s26))
[L4582]               __ret_0_ := c_s26;
[L5434]   RET         call __var_10 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s544], amount_s544);
[L5435]   COND FALSE  !(revert)
[L5438]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s544];
[L5439]               _balances_ERC20[this][recipient_s544] := __var_10;
[L5440]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s544];
[L5441]               assert { :EventEmitted "Transfer_ERC20" } true;
[L4978]   RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, recipient_s364, amount_s364);
[L4979]   COND FALSE  !(revert)
[L5005]               __ret_0_ := true;
[L6385]   RET         call __var_26 := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1040, value_s1040);
[L6386]   COND FALSE  !(revert)
[L6397]               __ret_0_ := __var_26;
[L2188]   RET         call __ret_0_ := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1040, value_s1040);
[L2189]               assume !revert && gas >= 0;
[L11074]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s1040, value_s1040);
[L11221]  RET         call CorralChoice_Wafl(this);

Loop:
[L11221]  CALL        call CorralChoice_Wafl(this);
[L10965]              havoc msgsender_MSG;
[L10966]              havoc msgvalue_MSG;
[L10967]              havoc choice;
[L10968]              havoc __ret_0_owner;
[L10969]              havoc __ret_0_isOwner;
[L10970]              havoc newOwner_s216;
[L10971]              havoc __ret_0_totalSupply;
[L10972]              havoc account_s345;
[L10973]              havoc __ret_0_balanceOf;
[L10974]              havoc to_s1040;
[L10975]              havoc value_s1040;
[L10976]              havoc __ret_0_transfer;
[L10977]              havoc owner_s380;
[L10978]              havoc spender_s380;
[L10979]              havoc __ret_0_allowance;
[L10980]              havoc spender_s1079;
[L10981]              havoc value_s1079;
[L10982]              havoc __ret_0_approve;
[L10983]              havoc from_s1061;
[L10984]              havoc to_s1061;
[L10985]              havoc value_s1061;
[L10986]              havoc __ret_0_transferFrom;
[L10987]              havoc spender_s1097;
[L10988]              havoc addedValue_s1097;
[L10989]              havoc __ret_0_increaseAllowance;
[L10990]              havoc spender_s1115;
[L10991]              havoc subtractedValue_s1115;
[L10992]              havoc __ret_0_decreaseAllowance;
[L10993]              havoc name_s731;
[L10994]              havoc symbol_s731;
[L10995]              havoc decimals_s731;
[L10996]              havoc __ret_0_name;
[L10997]              havoc __ret_0_symbol;
[L10998]              havoc __ret_0_decimals;
[L10999]              havoc account_s882;
[L11000]              havoc __ret_0_isPauser;
[L11001]              havoc account_s894;
[L11002]              havoc __ret_0_paused;
[L11003]              havoc account_s1163;
[L11004]              havoc __ret_0_isMinter;
[L11005]              havoc account_s1175;
[L11006]              havoc account_s1240;
[L11007]              havoc amount_s1240;
[L11008]              havoc __ret_0_mint;
[L11009]              havoc amount_s1255;
[L11010]              havoc account_s1268;
[L11011]              havoc amount_s1268;
[L11012]              havoc tmpNow;
[L11013]              havoc gas;
[L11014]              assume gas > 4000000 && gas <= 8000000;
[L11015]              tmpNow := now;
[L11016]              havoc now;
[L11017]              assume now > tmpNow;
[L11018]              assume msgsender_MSG != null;
[L11019]              assume DType[msgsender_MSG] != SafeMath;
[L11020]              assume DType[msgsender_MSG] != Ownable;
[L11021]              assume DType[msgsender_MSG] != IERC20;
[L11022]              assume DType[msgsender_MSG] != ERC20;
[L11023]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11024]              assume DType[msgsender_MSG] != Roles;
[L11025]              assume DType[msgsender_MSG] != PauserRole;
[L11026]              assume DType[msgsender_MSG] != Pausable;
[L11027]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11028]              assume DType[msgsender_MSG] != MinterRole;
[L11029]              assume DType[msgsender_MSG] != ERC20Mintable;
[L11030]              assume DType[msgsender_MSG] != ERC20Burnable;
[L11031]              assume DType[msgsender_MSG] != Wafl;
[L11032]              Alloc[msgsender_MSG] := true;
[L11033]  COND FALSE  !(choice == 27)
[L11039]  COND FALSE  !(choice == 26)
[L11045]  COND FALSE  !(choice == 25)
[L11051]  COND FALSE  !(choice == 24)
[L11057]  COND FALSE  !(choice == 23)
[L11063]  COND FALSE  !(choice == 22)
[L11069]  COND TRUE   choice == 21
[L11070]              gas := gas - 21000;
[L11071]  COND TRUE   gas >= 0
[L11072]              assume value_s1040 >= 0 && value_s1040 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L11073]              assume msgvalue_MSG == 0;
[L11074]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s1040, value_s1040);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((msgsender_MSG == to_s1040 && value_s1040 > _balances_ERC20[this][msgsender_MSG]) && value_s1040 >= 0) && value_s1040 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1040] >= 0) && _balances_ERC20[this][to_s1040] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transfer_ERC20Pausable0 := true;
[L2]                  call_transfer_ERC20Pausable0 := false;
[L2]                  revert := revert_hold;
[L2158]               havoc __exception;
[L2159]               revert := false;
[L2160]   COND FALSE  !(__exception)
[L2188]   CALL        call __ret_0_ := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1040, value_s1040);
[L6380]   CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9503]   COND FALSE  !(!!_paused_Pausable[this])
[L6380]   RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6381]   COND FALSE  !(revert)
[L6384]   COND TRUE   DType[this] == Wafl
[L6385]   CALL        call __var_26 := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1040, value_s1040);
[L4977]   COND TRUE   DType[this] == Wafl
[L4978]   CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, recipient_s364, amount_s364);
[L5417]               __var_7 := null;
[L5418]   COND FALSE  !(!(sender_s544 != null))
[L5422]               __var_8 := null;
[L5423]   COND FALSE  !(!(recipient_s544 != null))
[L5427]   CALL        call __var_9 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s544], amount_s544);
[L4601]   COND FALSE  !(!(b_s51 <= a_s51))
[L4605]               c_s51 := (a_s51 - b_s51) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4606]               __ret_0_ := c_s51;
[L5427]   RET         call __var_9 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s544], amount_s544);
[L5428]   COND FALSE  !(revert)
[L5431]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s544];
[L5432]               _balances_ERC20[this][sender_s544] := __var_9;
[L5433]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s544];
[L5434]   CALL        call __var_10 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s544], amount_s544);
[L4577]               c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4578]   COND FALSE  !(!(c_s26 >= a_s26))
[L4582]               __ret_0_ := c_s26;
[L5434]   RET         call __var_10 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s544], amount_s544);
[L5435]   COND FALSE  !(revert)
[L5438]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s544];
[L5439]               _balances_ERC20[this][recipient_s544] := __var_10;
[L5440]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s544];
[L5441]               assert { :EventEmitted "Transfer_ERC20" } true;
[L4978]   RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, recipient_s364, amount_s364);
[L4979]   COND FALSE  !(revert)
[L5005]               __ret_0_ := true;
[L6385]   RET         call __var_26 := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1040, value_s1040);
[L6386]   COND FALSE  !(revert)
[L6397]               __ret_0_ := __var_26;
[L2188]   RET         call __ret_0_ := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1040, value_s1040);
[L2189]               assume !revert && gas >= 0;
[L11074]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s1040, value_s1040);
[L11221]  RET         call CorralChoice_Wafl(this);

[2020-11-25 08:45:54,080 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 08:45:54,080 INFO  L82        PathProgramCache]: Analyzing trace with hash -1915384300, now seen corresponding path program 1 times
[2020-11-25 08:45:54,081 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 08:45:54,095 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 08:45:54,315 INFO  L134       CoverageAnalysis]: Checked inductivity of 1018 backedges. 0 proven. 27 refuted. 0 times theorem prover too weak. 991 trivial. 0 not checked.
[2020-11-25 08:45:54,316 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 08:45:54,316 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [7] total 7
[2020-11-25 08:45:54,316 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 08:45:54,317 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 7 interpolants.
[2020-11-25 08:45:54,317 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=11, Invalid=31, Unknown=0, NotChecked=0, Total=42
[2020-11-25 08:45:54,317 INFO  L87              Difference]: Start difference. First operand 6651 states and 7658 transitions. cyclomatic complexity: 1009 Second operand 7 states.
[2020-11-25 08:45:54,495 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 08:45:54,496 INFO  L93              Difference]: Finished difference Result 6686 states and 7701 transitions.
[2020-11-25 08:45:54,496 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 7 states. 
[2020-11-25 08:45:54,496 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 6686 states and 7701 transitions.
[2020-11-25 08:45:54,509 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 08:45:54,526 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 6686 states to 6657 states and 7665 transitions.
[2020-11-25 08:45:54,526 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1699
[2020-11-25 08:45:54,527 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1699
[2020-11-25 08:45:54,527 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 6657 states and 7665 transitions.
[2020-11-25 08:45:54,532 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 08:45:54,532 INFO  L728         BuchiCegarLoop]: Abstraction has 6657 states and 7665 transitions.
[2020-11-25 08:45:54,538 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 6657 states and 7665 transitions.
[2020-11-25 08:45:54,574 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 6657 to 6651.
[2020-11-25 08:45:54,574 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 6651 states.
[2020-11-25 08:45:54,582 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 6651 states to 6651 states and 7658 transitions.
[2020-11-25 08:45:54,582 INFO  L751         BuchiCegarLoop]: Abstraction has 6651 states and 7658 transitions.
[2020-11-25 08:45:54,582 INFO  L631         BuchiCegarLoop]: Abstraction has 6651 states and 7658 transitions.
[2020-11-25 08:45:54,582 INFO  L445         BuchiCegarLoop]: ======== Iteration 7============
[2020-11-25 08:45:54,582 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 6651 states and 7658 transitions.
[2020-11-25 08:45:54,589 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 08:45:54,589 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 08:45:54,589 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 08:45:54,591 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [9, 9, 9, 9, 9, 9, 9, 9, 9, 7, 7, 7, 7, 7, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 08:45:54,591 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  fail_transfer_ERC20Pausable0 := false;
[L2]                  call_transfer_ERC20Pausable0 := false;
[L2]      CALL        call main();
[L11211]              assume null == 0;
[L11212]  CALL        call this := FreshRefGenerator__success();
[L4514]               havoc newRef;
[L4515]               assume Alloc[newRef] == false;
[L4516]               Alloc[newRef] := true;
[L4517]               assume newRef != null;
[L11212]  RET         call this := FreshRefGenerator__success();
[L11213]              assume now >= 0;
[L11214]              assume DType[this] == Wafl;
[L11215]              assume msgvalue_MSG == 0;
[L11216]              gas := gas - 53000;
[L11217]  CALL        call Wafl_Wafl(this, msgsender_MSG, msgvalue_MSG);
[L3134]               havoc __exception;
[L3135]               revert := false;
[L3136]   COND FALSE  !(__exception)
[L3164]   CALL        call Wafl_Wafl__success(this, msgsender_MSG, msgvalue_MSG);
[L7163]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4861]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4846]               assume msgsender_MSG != null;
[L4847]               Balance[this] := 0;
[L4861]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   COND FALSE  !(revert)
[L7163]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7164]   COND FALSE  !(revert)
[L7167]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4907]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4861]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4846]               assume msgsender_MSG != null;
[L4847]               Balance[this] := 0;
[L4861]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   COND FALSE  !(revert)
[L4907]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4908]   COND FALSE  !(revert)
[L4911]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4883]               assume msgsender_MSG != null;
[L4884]               Balance[this] := 0;
[L4885]               _balances_ERC20[this] := zeroRefintArr();
[L4886]               sum__balances0[this] := 0;
[L4887]               _allowances_ERC20[this] := zeroRefRefintArr();
[L4888]               sum__allowances1[this] := 0;
[L4889]               _totalSupply_ERC20[this] := 0;
[L4911]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4912]   COND FALSE  !(revert)
[L7167]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7168]   COND FALSE  !(revert)
[L7171]   CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 1861448946, 1818491892, 18);
[L5753]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4861]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4846]               assume msgsender_MSG != null;
[L4847]               Balance[this] := 0;
[L4861]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   COND FALSE  !(revert)
[L5753]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5754]   COND FALSE  !(revert)
[L5757]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s731, symbol_s731, decimals_s731);
[L5728]               assume msgsender_MSG != null;
[L5729]               Balance[this] := 0;
[L5730]               _name_ERC20Detailed[this] := -1545721152;
[L5731]               _symbol_ERC20Detailed[this] := -1545721152;
[L5732]               _decimals_ERC20Detailed[this] := 0;
[L5734]               _name_ERC20Detailed[this] := name_s731;
[L5735]               _symbol_ERC20Detailed[this] := symbol_s731;
[L5736]               _decimals_ERC20Detailed[this] := decimals_s731;
[L5757]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s731, symbol_s731, decimals_s731);
[L5758]   COND FALSE  !(revert)
[L7171]   RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 1861448946, 1818491892, 18);
[L7172]   COND FALSE  !(revert)
[L7175]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5999]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5953]               assume msgsender_MSG != null;
[L5954]               Balance[this] := 0;
[L5956]   CALL        call __var_23 := FreshRefGenerator__success();
[L4514]               havoc newRef;
[L4515]               assume Alloc[newRef] == false;
[L4516]               Alloc[newRef] := true;
[L4517]               assume newRef != null;
[L5956]   RET         call __var_23 := FreshRefGenerator__success();
[L5957]   COND FALSE  !(revert)
[L5960]               _pausers_PauserRole[this] := __var_23;
[L5962]   COND TRUE   DType[this] == Wafl
[L5963]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6153]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L5848]   CALL        call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5902]               __var_22 := null;
[L5903]   COND FALSE  !(!(account_s834 != null))
[L5907]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s834]][account_s834];
[L5848]   RET         call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5849]   COND FALSE  !(revert)
[L5852]   COND FALSE  !(!!__var_20)
[L5856]               M_Ref_bool[bearer_Roles.Role[role_s786]][account_s786] := true;
[L6153]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L6154]   COND FALSE  !(revert)
[L6157]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L5963]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5964]   COND FALSE  !(revert)
[L5999]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6000]   COND FALSE  !(revert)
[L7175]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7176]   COND FALSE  !(revert)
[L7179]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6211]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5999]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5953]               assume msgsender_MSG != null;
[L5954]               Balance[this] := 0;
[L5956]   CALL        call __var_23 := FreshRefGenerator__success();
[L4514]               havoc newRef;
[L4515]               assume Alloc[newRef] == false;
[L4516]               Alloc[newRef] := true;
[L4517]               assume newRef != null;
[L5956]   RET         call __var_23 := FreshRefGenerator__success();
[L5957]   COND FALSE  !(revert)
[L5960]               _pausers_PauserRole[this] := __var_23;
[L5962]   COND TRUE   DType[this] == Wafl
[L5963]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6153]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L5848]   CALL        call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5902]               __var_22 := null;
[L5903]   COND FALSE  !(!(account_s834 != null))
[L5907]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s834]][account_s834];
[L5848]   RET         call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5849]   COND FALSE  !(revert)
[L5852]   COND FALSE  !(!!__var_20)
[L5856]               M_Ref_bool[bearer_Roles.Role[role_s786]][account_s786] := true;
[L6153]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L6154]   COND FALSE  !(revert)
[L6157]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L5963]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5964]   COND FALSE  !(revert)
[L5999]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6000]   COND FALSE  !(revert)
[L6211]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6212]   COND FALSE  !(revert)
[L6215]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6190]               assume msgsender_MSG != null;
[L6191]               Balance[this] := 0;
[L6192]               _paused_Pausable[this] := false;
[L6194]               _paused_Pausable[this] := false;
[L6215]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6216]   COND FALSE  !(revert)
[L7179]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7180]   COND FALSE  !(revert)
[L7183]   CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6329]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4861]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4846]               assume msgsender_MSG != null;
[L4847]               Balance[this] := 0;
[L4861]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   COND FALSE  !(revert)
[L6329]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6330]   COND FALSE  !(revert)
[L6333]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4907]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4861]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4846]               assume msgsender_MSG != null;
[L4847]               Balance[this] := 0;
[L4861]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   COND FALSE  !(revert)
[L4907]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4908]   COND FALSE  !(revert)
[L4911]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4883]               assume msgsender_MSG != null;
[L4884]               Balance[this] := 0;
[L4885]               _balances_ERC20[this] := zeroRefintArr();
[L4886]               sum__balances0[this] := 0;
[L4887]               _allowances_ERC20[this] := zeroRefRefintArr();
[L4888]               sum__allowances1[this] := 0;
[L4889]               _totalSupply_ERC20[this] := 0;
[L4911]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4912]   COND FALSE  !(revert)
[L6333]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6334]   COND FALSE  !(revert)
[L6337]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5999]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5953]               assume msgsender_MSG != null;
[L5954]               Balance[this] := 0;
[L5956]   CALL        call __var_23 := FreshRefGenerator__success();
[L4514]               havoc newRef;
[L4515]               assume Alloc[newRef] == false;
[L4516]               Alloc[newRef] := true;
[L4517]               assume newRef != null;
[L5956]   RET         call __var_23 := FreshRefGenerator__success();
[L5957]   COND FALSE  !(revert)
[L5960]               _pausers_PauserRole[this] := __var_23;
[L5962]   COND TRUE   DType[this] == Wafl
[L5963]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6153]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L5848]   CALL        call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5902]               __var_22 := null;
[L5903]   COND FALSE  !(!(account_s834 != null))
[L5907]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s834]][account_s834];
[L5848]   RET         call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5849]   COND FALSE  !(revert)
[L5852]   COND FALSE  !(!!__var_20)
[L5856]               M_Ref_bool[bearer_Roles.Role[role_s786]][account_s786] := true;
[L6153]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L6154]   COND FALSE  !(revert)
[L6157]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L5963]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5964]   COND FALSE  !(revert)
[L5999]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6000]   COND FALSE  !(revert)
[L6337]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6338]   COND FALSE  !(revert)
[L6341]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6211]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5999]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5953]               assume msgsender_MSG != null;
[L5954]               Balance[this] := 0;
[L5956]   CALL        call __var_23 := FreshRefGenerator__success();
[L4514]               havoc newRef;
[L4515]               assume Alloc[newRef] == false;
[L4516]               Alloc[newRef] := true;
[L4517]               assume newRef != null;
[L5956]   RET         call __var_23 := FreshRefGenerator__success();
[L5957]   COND FALSE  !(revert)
[L5960]               _pausers_PauserRole[this] := __var_23;
[L5962]   COND TRUE   DType[this] == Wafl
[L5963]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6153]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L5848]   CALL        call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5902]               __var_22 := null;
[L5903]   COND FALSE  !(!(account_s834 != null))
[L5907]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s834]][account_s834];
[L5848]   RET         call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5849]   COND FALSE  !(revert)
[L5852]   COND FALSE  !(!!__var_20)
[L5856]               M_Ref_bool[bearer_Roles.Role[role_s786]][account_s786] := true;
[L6153]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L6154]   COND FALSE  !(revert)
[L6157]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L5963]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5964]   COND FALSE  !(revert)
[L5999]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6000]   COND FALSE  !(revert)
[L6211]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6212]   COND FALSE  !(revert)
[L6215]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6190]               assume msgsender_MSG != null;
[L6191]               Balance[this] := 0;
[L6192]               _paused_Pausable[this] := false;
[L6194]               _paused_Pausable[this] := false;
[L6215]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6216]   COND FALSE  !(revert)
[L6341]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6342]   COND FALSE  !(revert)
[L6345]   CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6298]               assume msgsender_MSG != null;
[L6299]               Balance[this] := 0;
[L6345]   RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6346]   COND FALSE  !(revert)
[L7183]   RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7184]   COND FALSE  !(revert)
[L7187]   CALL        call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6973]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4861]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4846]               assume msgsender_MSG != null;
[L4847]               Balance[this] := 0;
[L4861]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   COND FALSE  !(revert)
[L6973]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6974]   COND FALSE  !(revert)
[L6977]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4907]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4861]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4846]               assume msgsender_MSG != null;
[L4847]               Balance[this] := 0;
[L4861]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   COND FALSE  !(revert)
[L4907]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4908]   COND FALSE  !(revert)
[L4911]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4883]               assume msgsender_MSG != null;
[L4884]               Balance[this] := 0;
[L4885]               _balances_ERC20[this] := zeroRefintArr();
[L4886]               sum__balances0[this] := 0;
[L4887]               _allowances_ERC20[this] := zeroRefRefintArr();
[L4888]               sum__allowances1[this] := 0;
[L4889]               _totalSupply_ERC20[this] := 0;
[L4911]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4912]   COND FALSE  !(revert)
[L6977]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6978]   COND FALSE  !(revert)
[L6981]   CALL        call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6950]               assume msgsender_MSG != null;
[L6951]               Balance[this] := 0;
[L6981]   RET         call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6982]   COND FALSE  !(revert)
[L7187]   RET         call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L7188]   COND FALSE  !(revert)
[L7191]   CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6679]   CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6638]               assume msgsender_MSG != null;
[L6639]               Balance[this] := 0;
[L6641]   CALL        call __var_36 := FreshRefGenerator__success();
[L4514]               havoc newRef;
[L4515]               assume Alloc[newRef] == false;
[L4516]               Alloc[newRef] := true;
[L4517]               assume newRef != null;
[L6641]   RET         call __var_36 := FreshRefGenerator__success();
[L6642]   COND FALSE  !(revert)
[L6645]               _minters_MinterRole[this] := __var_36;
[L6647]   COND FALSE  !(DType[this] == Wafl)
[L6652]   COND TRUE   DType[this] == ERC20Mintable
[L6653]   CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6813]   CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1200);
[L5848]   CALL        call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5902]               __var_22 := null;
[L5903]   COND FALSE  !(!(account_s834 != null))
[L5907]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s834]][account_s834];
[L5848]   RET         call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5849]   COND FALSE  !(revert)
[L5852]   COND FALSE  !(!!__var_20)
[L5856]               M_Ref_bool[bearer_Roles.Role[role_s786]][account_s786] := true;
[L6813]   RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1200);
[L6814]   COND FALSE  !(revert)
[L6817]               assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L6653]   RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6654]   COND FALSE  !(revert)
[L6679]   RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6680]   COND FALSE  !(revert)
[L7191]   RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7192]   COND FALSE  !(revert)
[L7195]   CALL        call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L6875]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4861]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4846]               assume msgsender_MSG != null;
[L4847]               Balance[this] := 0;
[L4861]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   COND FALSE  !(revert)
[L6875]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6876]   COND FALSE  !(revert)
[L6879]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4907]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4861]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4846]               assume msgsender_MSG != null;
[L4847]               Balance[this] := 0;
[L4861]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   COND FALSE  !(revert)
[L4907]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4908]   COND FALSE  !(revert)
[L4911]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4883]               assume msgsender_MSG != null;
[L4884]               Balance[this] := 0;
[L4885]               _balances_ERC20[this] := zeroRefintArr();
[L4886]               sum__balances0[this] := 0;
[L4887]               _allowances_ERC20[this] := zeroRefRefintArr();
[L4888]               sum__allowances1[this] := 0;
[L4889]               _totalSupply_ERC20[this] := 0;
[L4911]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4912]   COND FALSE  !(revert)
[L6879]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6880]   COND FALSE  !(revert)
[L6883]   CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6679]   CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6638]               assume msgsender_MSG != null;
[L6639]               Balance[this] := 0;
[L6641]   CALL        call __var_36 := FreshRefGenerator__success();
[L4514]               havoc newRef;
[L4515]               assume Alloc[newRef] == false;
[L4516]               Alloc[newRef] := true;
[L4517]               assume newRef != null;
[L6641]   RET         call __var_36 := FreshRefGenerator__success();
[L6642]   COND FALSE  !(revert)
[L6645]               _minters_MinterRole[this] := __var_36;
[L6647]   COND FALSE  !(DType[this] == Wafl)
[L6652]   COND TRUE   DType[this] == ERC20Mintable
[L6653]   CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6813]   CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1200);
[L5848]   CALL        call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5902]               __var_22 := null;
[L5903]   COND FALSE  !(!(account_s834 != null))
[L5907]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s834]][account_s834];
[L5848]   RET         call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5849]   COND FALSE  !(revert)
[L5852]   COND FALSE  !(!!__var_20)
[L5856]               M_Ref_bool[bearer_Roles.Role[role_s786]][account_s786] := true;
[L6813]   RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1200);
[L6814]   COND FALSE  !(revert)
[L6817]               assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L6653]   RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6654]   COND FALSE  !(revert)
[L6679]   RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6680]   COND FALSE  !(revert)
[L6883]   RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6884]   COND FALSE  !(revert)
[L6887]   CALL        call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6848]               assume msgsender_MSG != null;
[L6849]               Balance[this] := 0;
[L6887]   RET         call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6888]   COND FALSE  !(revert)
[L7195]   RET         call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L7196]   COND FALSE  !(revert)
[L7199]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L4717]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4699]               assume msgsender_MSG != null;
[L4700]               Balance[this] := 0;
[L4701]               _owner_Ownable[this] := null;
[L4703]               _owner_Ownable[this] := msgsender_MSG;
[L4704]               assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L4717]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4718]   COND FALSE  !(revert)
[L7199]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7200]   COND FALSE  !(revert)
[L7203]   CALL        call Wafl_Wafl_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7087]               assume msgsender_MSG != null;
[L7088]               Balance[this] := 0;
[L7090]   COND TRUE   DType[this] == Wafl
[L7091]   CALL        call __var_40 := decimals_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG);
[L5795]               __ret_0_ := _decimals_ERC20Detailed[this];
[L7091]   RET         call __var_40 := decimals_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG);
[L7092]   COND FALSE  !(revert)
[L7098]               __var_39 := __var_40 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7099]   COND TRUE   DType[this] == Wafl
[L7100]   CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 10000000000 * (nonlinearPow(10, __var_40 % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L5473]               __var_11 := null;
[L5474]   COND FALSE  !(!(account_s587 != null))
[L5478]   CALL        call __var_12 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s587);
[L4577]               c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4578]   COND FALSE  !(!(c_s26 >= a_s26))
[L4582]               __ret_0_ := c_s26;
[L5478]   RET         call __var_12 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s587);
[L5479]   COND FALSE  !(revert)
[L5482]               _totalSupply_ERC20[this] := __var_12;
[L5483]   CALL        call __var_13 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s587], amount_s587);
[L4577]               c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4578]   COND FALSE  !(!(c_s26 >= a_s26))
[L4582]               __ret_0_ := c_s26;
[L5483]   RET         call __var_13 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s587], amount_s587);
[L5484]   COND FALSE  !(revert)
[L5487]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s587];
[L5488]               _balances_ERC20[this][account_s587] := __var_13;
[L5489]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s587];
[L5490]               assert { :EventEmitted "Transfer_ERC20" } true;
[L7100]   RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 10000000000 * (nonlinearPow(10, __var_40 % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L7101]   COND FALSE  !(revert)
[L7203]   RET         call Wafl_Wafl_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7204]   COND FALSE  !(revert)
[L3164]   RET         call Wafl_Wafl__success(this, msgsender_MSG, msgvalue_MSG);
[L3165]               assume !revert && gas >= 0;
[L11217]  RET         call Wafl_Wafl(this, msgsender_MSG, msgvalue_MSG);
[L11218]              assume !revert && gas >= 0;
[L11221]  CALL        call CorralChoice_Wafl(this);
[L10965]              havoc msgsender_MSG;
[L10966]              havoc msgvalue_MSG;
[L10967]              havoc choice;
[L10968]              havoc __ret_0_owner;
[L10969]              havoc __ret_0_isOwner;
[L10970]              havoc newOwner_s216;
[L10971]              havoc __ret_0_totalSupply;
[L10972]              havoc account_s345;
[L10973]              havoc __ret_0_balanceOf;
[L10974]              havoc to_s1040;
[L10975]              havoc value_s1040;
[L10976]              havoc __ret_0_transfer;
[L10977]              havoc owner_s380;
[L10978]              havoc spender_s380;
[L10979]              havoc __ret_0_allowance;
[L10980]              havoc spender_s1079;
[L10981]              havoc value_s1079;
[L10982]              havoc __ret_0_approve;
[L10983]              havoc from_s1061;
[L10984]              havoc to_s1061;
[L10985]              havoc value_s1061;
[L10986]              havoc __ret_0_transferFrom;
[L10987]              havoc spender_s1097;
[L10988]              havoc addedValue_s1097;
[L10989]              havoc __ret_0_increaseAllowance;
[L10990]              havoc spender_s1115;
[L10991]              havoc subtractedValue_s1115;
[L10992]              havoc __ret_0_decreaseAllowance;
[L10993]              havoc name_s731;
[L10994]              havoc symbol_s731;
[L10995]              havoc decimals_s731;
[L10996]              havoc __ret_0_name;
[L10997]              havoc __ret_0_symbol;
[L10998]              havoc __ret_0_decimals;
[L10999]              havoc account_s882;
[L11000]              havoc __ret_0_isPauser;
[L11001]              havoc account_s894;
[L11002]              havoc __ret_0_paused;
[L11003]              havoc account_s1163;
[L11004]              havoc __ret_0_isMinter;
[L11005]              havoc account_s1175;
[L11006]              havoc account_s1240;
[L11007]              havoc amount_s1240;
[L11008]              havoc __ret_0_mint;
[L11009]              havoc amount_s1255;
[L11010]              havoc account_s1268;
[L11011]              havoc amount_s1268;
[L11012]              havoc tmpNow;
[L11013]              havoc gas;
[L11014]              assume gas > 4000000 && gas <= 8000000;
[L11015]              tmpNow := now;
[L11016]              havoc now;
[L11017]              assume now > tmpNow;
[L11018]              assume msgsender_MSG != null;
[L11019]              assume DType[msgsender_MSG] != SafeMath;
[L11020]              assume DType[msgsender_MSG] != Ownable;
[L11021]              assume DType[msgsender_MSG] != IERC20;
[L11022]              assume DType[msgsender_MSG] != ERC20;
[L11023]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11024]              assume DType[msgsender_MSG] != Roles;
[L11025]              assume DType[msgsender_MSG] != PauserRole;
[L11026]              assume DType[msgsender_MSG] != Pausable;
[L11027]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11028]              assume DType[msgsender_MSG] != MinterRole;
[L11029]              assume DType[msgsender_MSG] != ERC20Mintable;
[L11030]              assume DType[msgsender_MSG] != ERC20Burnable;
[L11031]              assume DType[msgsender_MSG] != Wafl;
[L11032]              Alloc[msgsender_MSG] := true;
[L11033]  COND FALSE  !(choice == 27)
[L11039]  COND FALSE  !(choice == 26)
[L11045]  COND FALSE  !(choice == 25)
[L11051]  COND FALSE  !(choice == 24)
[L11057]  COND FALSE  !(choice == 23)
[L11063]  COND FALSE  !(choice == 22)
[L11069]  COND TRUE   choice == 21
[L11070]              gas := gas - 21000;
[L11071]  COND TRUE   gas >= 0
[L11072]              assume value_s1040 >= 0 && value_s1040 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L11073]              assume msgvalue_MSG == 0;
[L11074]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s1040, value_s1040);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((msgsender_MSG == to_s1040 && value_s1040 > _balances_ERC20[this][msgsender_MSG]) && value_s1040 >= 0) && value_s1040 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1040] >= 0) && _balances_ERC20[this][to_s1040] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transfer_ERC20Pausable0 := true;
[L2]                  call_transfer_ERC20Pausable0 := false;
[L2]                  revert := revert_hold;
[L2158]               havoc __exception;
[L2159]               revert := false;
[L2160]   COND FALSE  !(__exception)
[L2188]   CALL        call __ret_0_ := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1040, value_s1040);
[L6380]   CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9503]   COND FALSE  !(!!_paused_Pausable[this])
[L6380]   RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6381]   COND FALSE  !(revert)
[L6384]   COND TRUE   DType[this] == Wafl
[L6385]   CALL        call __var_26 := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1040, value_s1040);
[L4977]   COND TRUE   DType[this] == Wafl
[L4978]   CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, recipient_s364, amount_s364);
[L5417]               __var_7 := null;
[L5418]   COND FALSE  !(!(sender_s544 != null))
[L5422]               __var_8 := null;
[L5423]   COND FALSE  !(!(recipient_s544 != null))
[L5427]   CALL        call __var_9 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s544], amount_s544);
[L4601]   COND FALSE  !(!(b_s51 <= a_s51))
[L4605]               c_s51 := (a_s51 - b_s51) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4606]               __ret_0_ := c_s51;
[L5427]   RET         call __var_9 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s544], amount_s544);
[L5428]   COND FALSE  !(revert)
[L5431]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s544];
[L5432]               _balances_ERC20[this][sender_s544] := __var_9;
[L5433]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s544];
[L5434]   CALL        call __var_10 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s544], amount_s544);
[L4577]               c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4578]   COND FALSE  !(!(c_s26 >= a_s26))
[L4582]               __ret_0_ := c_s26;
[L5434]   RET         call __var_10 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s544], amount_s544);
[L5435]   COND FALSE  !(revert)
[L5438]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s544];
[L5439]               _balances_ERC20[this][recipient_s544] := __var_10;
[L5440]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s544];
[L5441]               assert { :EventEmitted "Transfer_ERC20" } true;
[L4978]   RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, recipient_s364, amount_s364);
[L4979]   COND FALSE  !(revert)
[L5005]               __ret_0_ := true;
[L6385]   RET         call __var_26 := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1040, value_s1040);
[L6386]   COND FALSE  !(revert)
[L6397]               __ret_0_ := __var_26;
[L2188]   RET         call __ret_0_ := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1040, value_s1040);
[L2189]               assume !revert && gas >= 0;
[L11074]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s1040, value_s1040);
[L11221]  RET         call CorralChoice_Wafl(this);

Loop:
[L11221]  CALL        call CorralChoice_Wafl(this);
[L10965]              havoc msgsender_MSG;
[L10966]              havoc msgvalue_MSG;
[L10967]              havoc choice;
[L10968]              havoc __ret_0_owner;
[L10969]              havoc __ret_0_isOwner;
[L10970]              havoc newOwner_s216;
[L10971]              havoc __ret_0_totalSupply;
[L10972]              havoc account_s345;
[L10973]              havoc __ret_0_balanceOf;
[L10974]              havoc to_s1040;
[L10975]              havoc value_s1040;
[L10976]              havoc __ret_0_transfer;
[L10977]              havoc owner_s380;
[L10978]              havoc spender_s380;
[L10979]              havoc __ret_0_allowance;
[L10980]              havoc spender_s1079;
[L10981]              havoc value_s1079;
[L10982]              havoc __ret_0_approve;
[L10983]              havoc from_s1061;
[L10984]              havoc to_s1061;
[L10985]              havoc value_s1061;
[L10986]              havoc __ret_0_transferFrom;
[L10987]              havoc spender_s1097;
[L10988]              havoc addedValue_s1097;
[L10989]              havoc __ret_0_increaseAllowance;
[L10990]              havoc spender_s1115;
[L10991]              havoc subtractedValue_s1115;
[L10992]              havoc __ret_0_decreaseAllowance;
[L10993]              havoc name_s731;
[L10994]              havoc symbol_s731;
[L10995]              havoc decimals_s731;
[L10996]              havoc __ret_0_name;
[L10997]              havoc __ret_0_symbol;
[L10998]              havoc __ret_0_decimals;
[L10999]              havoc account_s882;
[L11000]              havoc __ret_0_isPauser;
[L11001]              havoc account_s894;
[L11002]              havoc __ret_0_paused;
[L11003]              havoc account_s1163;
[L11004]              havoc __ret_0_isMinter;
[L11005]              havoc account_s1175;
[L11006]              havoc account_s1240;
[L11007]              havoc amount_s1240;
[L11008]              havoc __ret_0_mint;
[L11009]              havoc amount_s1255;
[L11010]              havoc account_s1268;
[L11011]              havoc amount_s1268;
[L11012]              havoc tmpNow;
[L11013]              havoc gas;
[L11014]              assume gas > 4000000 && gas <= 8000000;
[L11015]              tmpNow := now;
[L11016]              havoc now;
[L11017]              assume now > tmpNow;
[L11018]              assume msgsender_MSG != null;
[L11019]              assume DType[msgsender_MSG] != SafeMath;
[L11020]              assume DType[msgsender_MSG] != Ownable;
[L11021]              assume DType[msgsender_MSG] != IERC20;
[L11022]              assume DType[msgsender_MSG] != ERC20;
[L11023]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11024]              assume DType[msgsender_MSG] != Roles;
[L11025]              assume DType[msgsender_MSG] != PauserRole;
[L11026]              assume DType[msgsender_MSG] != Pausable;
[L11027]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11028]              assume DType[msgsender_MSG] != MinterRole;
[L11029]              assume DType[msgsender_MSG] != ERC20Mintable;
[L11030]              assume DType[msgsender_MSG] != ERC20Burnable;
[L11031]              assume DType[msgsender_MSG] != Wafl;
[L11032]              Alloc[msgsender_MSG] := true;
[L11033]  COND FALSE  !(choice == 27)
[L11039]  COND FALSE  !(choice == 26)
[L11045]  COND FALSE  !(choice == 25)
[L11051]  COND FALSE  !(choice == 24)
[L11057]  COND FALSE  !(choice == 23)
[L11063]  COND FALSE  !(choice == 22)
[L11069]  COND TRUE   choice == 21
[L11070]              gas := gas - 21000;
[L11071]  COND TRUE   gas >= 0
[L11072]              assume value_s1040 >= 0 && value_s1040 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L11073]              assume msgvalue_MSG == 0;
[L11074]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s1040, value_s1040);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((msgsender_MSG == to_s1040 && value_s1040 > _balances_ERC20[this][msgsender_MSG]) && value_s1040 >= 0) && value_s1040 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1040] >= 0) && _balances_ERC20[this][to_s1040] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transfer_ERC20Pausable0 := true;
[L2]                  call_transfer_ERC20Pausable0 := false;
[L2]                  revert := revert_hold;
[L2158]               havoc __exception;
[L2159]               revert := false;
[L2160]   COND FALSE  !(__exception)
[L2188]   CALL        call __ret_0_ := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1040, value_s1040);
[L6380]   CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9503]   COND FALSE  !(!!_paused_Pausable[this])
[L6380]   RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6381]   COND FALSE  !(revert)
[L6384]   COND TRUE   DType[this] == Wafl
[L6385]   CALL        call __var_26 := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1040, value_s1040);
[L4977]   COND TRUE   DType[this] == Wafl
[L4978]   CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, recipient_s364, amount_s364);
[L5417]               __var_7 := null;
[L5418]   COND FALSE  !(!(sender_s544 != null))
[L5422]               __var_8 := null;
[L5423]   COND FALSE  !(!(recipient_s544 != null))
[L5427]   CALL        call __var_9 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s544], amount_s544);
[L4601]   COND FALSE  !(!(b_s51 <= a_s51))
[L4605]               c_s51 := (a_s51 - b_s51) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4606]               __ret_0_ := c_s51;
[L5427]   RET         call __var_9 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s544], amount_s544);
[L5428]   COND FALSE  !(revert)
[L5431]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s544];
[L5432]               _balances_ERC20[this][sender_s544] := __var_9;
[L5433]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s544];
[L5434]   CALL        call __var_10 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s544], amount_s544);
[L4577]               c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4578]   COND FALSE  !(!(c_s26 >= a_s26))
[L4582]               __ret_0_ := c_s26;
[L5434]   RET         call __var_10 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s544], amount_s544);
[L5435]   COND FALSE  !(revert)
[L5438]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s544];
[L5439]               _balances_ERC20[this][recipient_s544] := __var_10;
[L5440]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s544];
[L5441]               assert { :EventEmitted "Transfer_ERC20" } true;
[L4978]   RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, recipient_s364, amount_s364);
[L4979]   COND FALSE  !(revert)
[L5005]               __ret_0_ := true;
[L6385]   RET         call __var_26 := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1040, value_s1040);
[L6386]   COND FALSE  !(revert)
[L6397]               __ret_0_ := __var_26;
[L2188]   RET         call __ret_0_ := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1040, value_s1040);
[L2189]               assume !revert && gas >= 0;
[L11074]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s1040, value_s1040);
[L11221]  RET         call CorralChoice_Wafl(this);

[2020-11-25 08:45:54,597 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 08:45:54,597 INFO  L82        PathProgramCache]: Analyzing trace with hash 137233044, now seen corresponding path program 1 times
[2020-11-25 08:45:54,598 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 08:45:54,622 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 08:45:54,869 INFO  L134       CoverageAnalysis]: Checked inductivity of 1006 backedges. 0 proven. 9 refuted. 0 times theorem prover too weak. 997 trivial. 0 not checked.
[2020-11-25 08:45:54,869 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 08:45:54,869 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [7] total 7
[2020-11-25 08:45:54,870 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 08:45:54,870 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 7 interpolants.
[2020-11-25 08:45:54,870 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=11, Invalid=31, Unknown=0, NotChecked=0, Total=42
[2020-11-25 08:45:54,870 INFO  L87              Difference]: Start difference. First operand 6651 states and 7658 transitions. cyclomatic complexity: 1009 Second operand 7 states.
[2020-11-25 08:45:55,035 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 08:45:55,035 INFO  L93              Difference]: Finished difference Result 6674 states and 7684 transitions.
[2020-11-25 08:45:55,035 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 7 states. 
[2020-11-25 08:45:55,035 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 6674 states and 7684 transitions.
[2020-11-25 08:45:55,048 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 08:45:55,061 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 6674 states to 6657 states and 7664 transitions.
[2020-11-25 08:45:55,061 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1699
[2020-11-25 08:45:55,061 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1699
[2020-11-25 08:45:55,062 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 6657 states and 7664 transitions.
[2020-11-25 08:45:55,066 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 08:45:55,066 INFO  L728         BuchiCegarLoop]: Abstraction has 6657 states and 7664 transitions.
[2020-11-25 08:45:55,071 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 6657 states and 7664 transitions.
[2020-11-25 08:45:55,105 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 6657 to 6657.
[2020-11-25 08:45:55,105 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 6657 states.
[2020-11-25 08:45:55,112 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 6657 states to 6657 states and 7664 transitions.
[2020-11-25 08:45:55,112 INFO  L751         BuchiCegarLoop]: Abstraction has 6657 states and 7664 transitions.
[2020-11-25 08:45:55,112 INFO  L631         BuchiCegarLoop]: Abstraction has 6657 states and 7664 transitions.
[2020-11-25 08:45:55,112 INFO  L445         BuchiCegarLoop]: ======== Iteration 8============
[2020-11-25 08:45:55,113 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 6657 states and 7664 transitions.
[2020-11-25 08:45:55,120 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 08:45:55,120 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 08:45:55,120 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 08:45:55,122 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [9, 9, 9, 9, 9, 9, 9, 9, 9, 7, 7, 7, 7, 7, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 08:45:55,122 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  fail_transfer_ERC20Pausable0 := false;
[L2]                  call_transfer_ERC20Pausable0 := false;
[L2]      CALL        call main();
[L11211]              assume null == 0;
[L11212]  CALL        call this := FreshRefGenerator__success();
[L4514]               havoc newRef;
[L4515]               assume Alloc[newRef] == false;
[L4516]               Alloc[newRef] := true;
[L4517]               assume newRef != null;
[L11212]  RET         call this := FreshRefGenerator__success();
[L11213]              assume now >= 0;
[L11214]              assume DType[this] == Wafl;
[L11215]              assume msgvalue_MSG == 0;
[L11216]              gas := gas - 53000;
[L11217]  CALL        call Wafl_Wafl(this, msgsender_MSG, msgvalue_MSG);
[L3134]               havoc __exception;
[L3135]               revert := false;
[L3136]   COND FALSE  !(__exception)
[L3164]   CALL        call Wafl_Wafl__success(this, msgsender_MSG, msgvalue_MSG);
[L7163]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4861]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4846]               assume msgsender_MSG != null;
[L4847]               Balance[this] := 0;
[L4861]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   COND FALSE  !(revert)
[L7163]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7164]   COND FALSE  !(revert)
[L7167]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4907]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4861]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4846]               assume msgsender_MSG != null;
[L4847]               Balance[this] := 0;
[L4861]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   COND FALSE  !(revert)
[L4907]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4908]   COND FALSE  !(revert)
[L4911]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4883]               assume msgsender_MSG != null;
[L4884]               Balance[this] := 0;
[L4885]               _balances_ERC20[this] := zeroRefintArr();
[L4886]               sum__balances0[this] := 0;
[L4887]               _allowances_ERC20[this] := zeroRefRefintArr();
[L4888]               sum__allowances1[this] := 0;
[L4889]               _totalSupply_ERC20[this] := 0;
[L4911]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4912]   COND FALSE  !(revert)
[L7167]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7168]   COND FALSE  !(revert)
[L7171]   CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 1861448946, 1818491892, 18);
[L5753]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4861]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4846]               assume msgsender_MSG != null;
[L4847]               Balance[this] := 0;
[L4861]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   COND FALSE  !(revert)
[L5753]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5754]   COND FALSE  !(revert)
[L5757]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s731, symbol_s731, decimals_s731);
[L5728]               assume msgsender_MSG != null;
[L5729]               Balance[this] := 0;
[L5730]               _name_ERC20Detailed[this] := -1545721152;
[L5731]               _symbol_ERC20Detailed[this] := -1545721152;
[L5732]               _decimals_ERC20Detailed[this] := 0;
[L5734]               _name_ERC20Detailed[this] := name_s731;
[L5735]               _symbol_ERC20Detailed[this] := symbol_s731;
[L5736]               _decimals_ERC20Detailed[this] := decimals_s731;
[L5757]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s731, symbol_s731, decimals_s731);
[L5758]   COND FALSE  !(revert)
[L7171]   RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 1861448946, 1818491892, 18);
[L7172]   COND FALSE  !(revert)
[L7175]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5999]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5953]               assume msgsender_MSG != null;
[L5954]               Balance[this] := 0;
[L5956]   CALL        call __var_23 := FreshRefGenerator__success();
[L4514]               havoc newRef;
[L4515]               assume Alloc[newRef] == false;
[L4516]               Alloc[newRef] := true;
[L4517]               assume newRef != null;
[L5956]   RET         call __var_23 := FreshRefGenerator__success();
[L5957]   COND FALSE  !(revert)
[L5960]               _pausers_PauserRole[this] := __var_23;
[L5962]   COND TRUE   DType[this] == Wafl
[L5963]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6153]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L5848]   CALL        call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5902]               __var_22 := null;
[L5903]   COND FALSE  !(!(account_s834 != null))
[L5907]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s834]][account_s834];
[L5848]   RET         call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5849]   COND FALSE  !(revert)
[L5852]   COND FALSE  !(!!__var_20)
[L5856]               M_Ref_bool[bearer_Roles.Role[role_s786]][account_s786] := true;
[L6153]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L6154]   COND FALSE  !(revert)
[L6157]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L5963]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5964]   COND FALSE  !(revert)
[L5999]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6000]   COND FALSE  !(revert)
[L7175]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7176]   COND FALSE  !(revert)
[L7179]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6211]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5999]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5953]               assume msgsender_MSG != null;
[L5954]               Balance[this] := 0;
[L5956]   CALL        call __var_23 := FreshRefGenerator__success();
[L4514]               havoc newRef;
[L4515]               assume Alloc[newRef] == false;
[L4516]               Alloc[newRef] := true;
[L4517]               assume newRef != null;
[L5956]   RET         call __var_23 := FreshRefGenerator__success();
[L5957]   COND FALSE  !(revert)
[L5960]               _pausers_PauserRole[this] := __var_23;
[L5962]   COND TRUE   DType[this] == Wafl
[L5963]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6153]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L5848]   CALL        call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5902]               __var_22 := null;
[L5903]   COND FALSE  !(!(account_s834 != null))
[L5907]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s834]][account_s834];
[L5848]   RET         call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5849]   COND FALSE  !(revert)
[L5852]   COND FALSE  !(!!__var_20)
[L5856]               M_Ref_bool[bearer_Roles.Role[role_s786]][account_s786] := true;
[L6153]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L6154]   COND FALSE  !(revert)
[L6157]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L5963]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5964]   COND FALSE  !(revert)
[L5999]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6000]   COND FALSE  !(revert)
[L6211]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6212]   COND FALSE  !(revert)
[L6215]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6190]               assume msgsender_MSG != null;
[L6191]               Balance[this] := 0;
[L6192]               _paused_Pausable[this] := false;
[L6194]               _paused_Pausable[this] := false;
[L6215]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6216]   COND FALSE  !(revert)
[L7179]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7180]   COND FALSE  !(revert)
[L7183]   CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6329]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4861]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4846]               assume msgsender_MSG != null;
[L4847]               Balance[this] := 0;
[L4861]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   COND FALSE  !(revert)
[L6329]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6330]   COND FALSE  !(revert)
[L6333]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4907]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4861]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4846]               assume msgsender_MSG != null;
[L4847]               Balance[this] := 0;
[L4861]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   COND FALSE  !(revert)
[L4907]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4908]   COND FALSE  !(revert)
[L4911]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4883]               assume msgsender_MSG != null;
[L4884]               Balance[this] := 0;
[L4885]               _balances_ERC20[this] := zeroRefintArr();
[L4886]               sum__balances0[this] := 0;
[L4887]               _allowances_ERC20[this] := zeroRefRefintArr();
[L4888]               sum__allowances1[this] := 0;
[L4889]               _totalSupply_ERC20[this] := 0;
[L4911]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4912]   COND FALSE  !(revert)
[L6333]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6334]   COND FALSE  !(revert)
[L6337]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5999]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5953]               assume msgsender_MSG != null;
[L5954]               Balance[this] := 0;
[L5956]   CALL        call __var_23 := FreshRefGenerator__success();
[L4514]               havoc newRef;
[L4515]               assume Alloc[newRef] == false;
[L4516]               Alloc[newRef] := true;
[L4517]               assume newRef != null;
[L5956]   RET         call __var_23 := FreshRefGenerator__success();
[L5957]   COND FALSE  !(revert)
[L5960]               _pausers_PauserRole[this] := __var_23;
[L5962]   COND TRUE   DType[this] == Wafl
[L5963]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6153]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L5848]   CALL        call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5902]               __var_22 := null;
[L5903]   COND FALSE  !(!(account_s834 != null))
[L5907]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s834]][account_s834];
[L5848]   RET         call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5849]   COND FALSE  !(revert)
[L5852]   COND FALSE  !(!!__var_20)
[L5856]               M_Ref_bool[bearer_Roles.Role[role_s786]][account_s786] := true;
[L6153]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L6154]   COND FALSE  !(revert)
[L6157]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L5963]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5964]   COND FALSE  !(revert)
[L5999]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6000]   COND FALSE  !(revert)
[L6337]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6338]   COND FALSE  !(revert)
[L6341]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6211]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5999]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5953]               assume msgsender_MSG != null;
[L5954]               Balance[this] := 0;
[L5956]   CALL        call __var_23 := FreshRefGenerator__success();
[L4514]               havoc newRef;
[L4515]               assume Alloc[newRef] == false;
[L4516]               Alloc[newRef] := true;
[L4517]               assume newRef != null;
[L5956]   RET         call __var_23 := FreshRefGenerator__success();
[L5957]   COND FALSE  !(revert)
[L5960]               _pausers_PauserRole[this] := __var_23;
[L5962]   COND TRUE   DType[this] == Wafl
[L5963]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6153]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L5848]   CALL        call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5902]               __var_22 := null;
[L5903]   COND FALSE  !(!(account_s834 != null))
[L5907]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s834]][account_s834];
[L5848]   RET         call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5849]   COND FALSE  !(revert)
[L5852]   COND FALSE  !(!!__var_20)
[L5856]               M_Ref_bool[bearer_Roles.Role[role_s786]][account_s786] := true;
[L6153]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L6154]   COND FALSE  !(revert)
[L6157]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L5963]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5964]   COND FALSE  !(revert)
[L5999]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6000]   COND FALSE  !(revert)
[L6211]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6212]   COND FALSE  !(revert)
[L6215]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6190]               assume msgsender_MSG != null;
[L6191]               Balance[this] := 0;
[L6192]               _paused_Pausable[this] := false;
[L6194]               _paused_Pausable[this] := false;
[L6215]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6216]   COND FALSE  !(revert)
[L6341]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6342]   COND FALSE  !(revert)
[L6345]   CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6298]               assume msgsender_MSG != null;
[L6299]               Balance[this] := 0;
[L6345]   RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6346]   COND FALSE  !(revert)
[L7183]   RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7184]   COND FALSE  !(revert)
[L7187]   CALL        call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6973]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4861]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4846]               assume msgsender_MSG != null;
[L4847]               Balance[this] := 0;
[L4861]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   COND FALSE  !(revert)
[L6973]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6974]   COND FALSE  !(revert)
[L6977]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4907]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4861]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4846]               assume msgsender_MSG != null;
[L4847]               Balance[this] := 0;
[L4861]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   COND FALSE  !(revert)
[L4907]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4908]   COND FALSE  !(revert)
[L4911]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4883]               assume msgsender_MSG != null;
[L4884]               Balance[this] := 0;
[L4885]               _balances_ERC20[this] := zeroRefintArr();
[L4886]               sum__balances0[this] := 0;
[L4887]               _allowances_ERC20[this] := zeroRefRefintArr();
[L4888]               sum__allowances1[this] := 0;
[L4889]               _totalSupply_ERC20[this] := 0;
[L4911]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4912]   COND FALSE  !(revert)
[L6977]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6978]   COND FALSE  !(revert)
[L6981]   CALL        call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6950]               assume msgsender_MSG != null;
[L6951]               Balance[this] := 0;
[L6981]   RET         call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6982]   COND FALSE  !(revert)
[L7187]   RET         call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L7188]   COND FALSE  !(revert)
[L7191]   CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6679]   CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6638]               assume msgsender_MSG != null;
[L6639]               Balance[this] := 0;
[L6641]   CALL        call __var_36 := FreshRefGenerator__success();
[L4514]               havoc newRef;
[L4515]               assume Alloc[newRef] == false;
[L4516]               Alloc[newRef] := true;
[L4517]               assume newRef != null;
[L6641]   RET         call __var_36 := FreshRefGenerator__success();
[L6642]   COND FALSE  !(revert)
[L6645]               _minters_MinterRole[this] := __var_36;
[L6647]   COND TRUE   DType[this] == Wafl
[L6648]   CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6813]   CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1200);
[L5848]   CALL        call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5902]               __var_22 := null;
[L5903]   COND FALSE  !(!(account_s834 != null))
[L5907]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s834]][account_s834];
[L5848]   RET         call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5849]   COND FALSE  !(revert)
[L5852]   COND FALSE  !(!!__var_20)
[L5856]               M_Ref_bool[bearer_Roles.Role[role_s786]][account_s786] := true;
[L6813]   RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1200);
[L6814]   COND FALSE  !(revert)
[L6817]               assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L6648]   RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6649]   COND FALSE  !(revert)
[L6679]   RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6680]   COND FALSE  !(revert)
[L7191]   RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7192]   COND FALSE  !(revert)
[L7195]   CALL        call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L6875]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4861]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4846]               assume msgsender_MSG != null;
[L4847]               Balance[this] := 0;
[L4861]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   COND FALSE  !(revert)
[L6875]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6876]   COND FALSE  !(revert)
[L6879]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4907]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4861]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4846]               assume msgsender_MSG != null;
[L4847]               Balance[this] := 0;
[L4861]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   COND FALSE  !(revert)
[L4907]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4908]   COND FALSE  !(revert)
[L4911]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4883]               assume msgsender_MSG != null;
[L4884]               Balance[this] := 0;
[L4885]               _balances_ERC20[this] := zeroRefintArr();
[L4886]               sum__balances0[this] := 0;
[L4887]               _allowances_ERC20[this] := zeroRefRefintArr();
[L4888]               sum__allowances1[this] := 0;
[L4889]               _totalSupply_ERC20[this] := 0;
[L4911]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4912]   COND FALSE  !(revert)
[L6879]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6880]   COND FALSE  !(revert)
[L6883]   CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6679]   CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6638]               assume msgsender_MSG != null;
[L6639]               Balance[this] := 0;
[L6641]   CALL        call __var_36 := FreshRefGenerator__success();
[L4514]               havoc newRef;
[L4515]               assume Alloc[newRef] == false;
[L4516]               Alloc[newRef] := true;
[L4517]               assume newRef != null;
[L6641]   RET         call __var_36 := FreshRefGenerator__success();
[L6642]   COND FALSE  !(revert)
[L6645]               _minters_MinterRole[this] := __var_36;
[L6647]   COND TRUE   DType[this] == Wafl
[L6648]   CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6813]   CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1200);
[L5848]   CALL        call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5902]               __var_22 := null;
[L5903]   COND FALSE  !(!(account_s834 != null))
[L5907]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s834]][account_s834];
[L5848]   RET         call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5849]   COND FALSE  !(revert)
[L5852]   COND FALSE  !(!!__var_20)
[L5856]               M_Ref_bool[bearer_Roles.Role[role_s786]][account_s786] := true;
[L6813]   RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1200);
[L6814]   COND FALSE  !(revert)
[L6817]               assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L6648]   RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6649]   COND FALSE  !(revert)
[L6679]   RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6680]   COND FALSE  !(revert)
[L6883]   RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6884]   COND FALSE  !(revert)
[L6887]   CALL        call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6848]               assume msgsender_MSG != null;
[L6849]               Balance[this] := 0;
[L6887]   RET         call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6888]   COND FALSE  !(revert)
[L7195]   RET         call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L7196]   COND FALSE  !(revert)
[L7199]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L4717]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4699]               assume msgsender_MSG != null;
[L4700]               Balance[this] := 0;
[L4701]               _owner_Ownable[this] := null;
[L4703]               _owner_Ownable[this] := msgsender_MSG;
[L4704]               assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L4717]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4718]   COND FALSE  !(revert)
[L7199]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7200]   COND FALSE  !(revert)
[L7203]   CALL        call Wafl_Wafl_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7087]               assume msgsender_MSG != null;
[L7088]               Balance[this] := 0;
[L7090]   COND TRUE   DType[this] == Wafl
[L7091]   CALL        call __var_40 := decimals_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG);
[L5795]               __ret_0_ := _decimals_ERC20Detailed[this];
[L7091]   RET         call __var_40 := decimals_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG);
[L7092]   COND FALSE  !(revert)
[L7098]               __var_39 := __var_40 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7099]   COND TRUE   DType[this] == Wafl
[L7100]   CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 10000000000 * (nonlinearPow(10, __var_40 % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L5473]               __var_11 := null;
[L5474]   COND FALSE  !(!(account_s587 != null))
[L5478]   CALL        call __var_12 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s587);
[L4577]               c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4578]   COND FALSE  !(!(c_s26 >= a_s26))
[L4582]               __ret_0_ := c_s26;
[L5478]   RET         call __var_12 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s587);
[L5479]   COND FALSE  !(revert)
[L5482]               _totalSupply_ERC20[this] := __var_12;
[L5483]   CALL        call __var_13 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s587], amount_s587);
[L4577]               c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4578]   COND FALSE  !(!(c_s26 >= a_s26))
[L4582]               __ret_0_ := c_s26;
[L5483]   RET         call __var_13 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s587], amount_s587);
[L5484]   COND FALSE  !(revert)
[L5487]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s587];
[L5488]               _balances_ERC20[this][account_s587] := __var_13;
[L5489]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s587];
[L5490]               assert { :EventEmitted "Transfer_ERC20" } true;
[L7100]   RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 10000000000 * (nonlinearPow(10, __var_40 % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L7101]   COND FALSE  !(revert)
[L7203]   RET         call Wafl_Wafl_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7204]   COND FALSE  !(revert)
[L3164]   RET         call Wafl_Wafl__success(this, msgsender_MSG, msgvalue_MSG);
[L3165]               assume !revert && gas >= 0;
[L11217]  RET         call Wafl_Wafl(this, msgsender_MSG, msgvalue_MSG);
[L11218]              assume !revert && gas >= 0;
[L11221]  CALL        call CorralChoice_Wafl(this);
[L10965]              havoc msgsender_MSG;
[L10966]              havoc msgvalue_MSG;
[L10967]              havoc choice;
[L10968]              havoc __ret_0_owner;
[L10969]              havoc __ret_0_isOwner;
[L10970]              havoc newOwner_s216;
[L10971]              havoc __ret_0_totalSupply;
[L10972]              havoc account_s345;
[L10973]              havoc __ret_0_balanceOf;
[L10974]              havoc to_s1040;
[L10975]              havoc value_s1040;
[L10976]              havoc __ret_0_transfer;
[L10977]              havoc owner_s380;
[L10978]              havoc spender_s380;
[L10979]              havoc __ret_0_allowance;
[L10980]              havoc spender_s1079;
[L10981]              havoc value_s1079;
[L10982]              havoc __ret_0_approve;
[L10983]              havoc from_s1061;
[L10984]              havoc to_s1061;
[L10985]              havoc value_s1061;
[L10986]              havoc __ret_0_transferFrom;
[L10987]              havoc spender_s1097;
[L10988]              havoc addedValue_s1097;
[L10989]              havoc __ret_0_increaseAllowance;
[L10990]              havoc spender_s1115;
[L10991]              havoc subtractedValue_s1115;
[L10992]              havoc __ret_0_decreaseAllowance;
[L10993]              havoc name_s731;
[L10994]              havoc symbol_s731;
[L10995]              havoc decimals_s731;
[L10996]              havoc __ret_0_name;
[L10997]              havoc __ret_0_symbol;
[L10998]              havoc __ret_0_decimals;
[L10999]              havoc account_s882;
[L11000]              havoc __ret_0_isPauser;
[L11001]              havoc account_s894;
[L11002]              havoc __ret_0_paused;
[L11003]              havoc account_s1163;
[L11004]              havoc __ret_0_isMinter;
[L11005]              havoc account_s1175;
[L11006]              havoc account_s1240;
[L11007]              havoc amount_s1240;
[L11008]              havoc __ret_0_mint;
[L11009]              havoc amount_s1255;
[L11010]              havoc account_s1268;
[L11011]              havoc amount_s1268;
[L11012]              havoc tmpNow;
[L11013]              havoc gas;
[L11014]              assume gas > 4000000 && gas <= 8000000;
[L11015]              tmpNow := now;
[L11016]              havoc now;
[L11017]              assume now > tmpNow;
[L11018]              assume msgsender_MSG != null;
[L11019]              assume DType[msgsender_MSG] != SafeMath;
[L11020]              assume DType[msgsender_MSG] != Ownable;
[L11021]              assume DType[msgsender_MSG] != IERC20;
[L11022]              assume DType[msgsender_MSG] != ERC20;
[L11023]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11024]              assume DType[msgsender_MSG] != Roles;
[L11025]              assume DType[msgsender_MSG] != PauserRole;
[L11026]              assume DType[msgsender_MSG] != Pausable;
[L11027]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11028]              assume DType[msgsender_MSG] != MinterRole;
[L11029]              assume DType[msgsender_MSG] != ERC20Mintable;
[L11030]              assume DType[msgsender_MSG] != ERC20Burnable;
[L11031]              assume DType[msgsender_MSG] != Wafl;
[L11032]              Alloc[msgsender_MSG] := true;
[L11033]  COND FALSE  !(choice == 27)
[L11039]  COND FALSE  !(choice == 26)
[L11045]  COND FALSE  !(choice == 25)
[L11051]  COND FALSE  !(choice == 24)
[L11057]  COND FALSE  !(choice == 23)
[L11063]  COND FALSE  !(choice == 22)
[L11069]  COND TRUE   choice == 21
[L11070]              gas := gas - 21000;
[L11071]  COND TRUE   gas >= 0
[L11072]              assume value_s1040 >= 0 && value_s1040 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L11073]              assume msgvalue_MSG == 0;
[L11074]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s1040, value_s1040);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((msgsender_MSG == to_s1040 && value_s1040 > _balances_ERC20[this][msgsender_MSG]) && value_s1040 >= 0) && value_s1040 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1040] >= 0) && _balances_ERC20[this][to_s1040] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transfer_ERC20Pausable0 := true;
[L2]                  call_transfer_ERC20Pausable0 := false;
[L2]                  revert := revert_hold;
[L2158]               havoc __exception;
[L2159]               revert := false;
[L2160]   COND FALSE  !(__exception)
[L2188]   CALL        call __ret_0_ := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1040, value_s1040);
[L6380]   CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9503]   COND FALSE  !(!!_paused_Pausable[this])
[L6380]   RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6381]   COND FALSE  !(revert)
[L6384]   COND TRUE   DType[this] == Wafl
[L6385]   CALL        call __var_26 := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1040, value_s1040);
[L4977]   COND TRUE   DType[this] == Wafl
[L4978]   CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, recipient_s364, amount_s364);
[L5417]               __var_7 := null;
[L5418]   COND FALSE  !(!(sender_s544 != null))
[L5422]               __var_8 := null;
[L5423]   COND FALSE  !(!(recipient_s544 != null))
[L5427]   CALL        call __var_9 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s544], amount_s544);
[L4601]   COND FALSE  !(!(b_s51 <= a_s51))
[L4605]               c_s51 := (a_s51 - b_s51) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4606]               __ret_0_ := c_s51;
[L5427]   RET         call __var_9 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s544], amount_s544);
[L5428]   COND FALSE  !(revert)
[L5431]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s544];
[L5432]               _balances_ERC20[this][sender_s544] := __var_9;
[L5433]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s544];
[L5434]   CALL        call __var_10 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s544], amount_s544);
[L4577]               c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4578]   COND FALSE  !(!(c_s26 >= a_s26))
[L4582]               __ret_0_ := c_s26;
[L5434]   RET         call __var_10 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s544], amount_s544);
[L5435]   COND FALSE  !(revert)
[L5438]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s544];
[L5439]               _balances_ERC20[this][recipient_s544] := __var_10;
[L5440]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s544];
[L5441]               assert { :EventEmitted "Transfer_ERC20" } true;
[L4978]   RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, recipient_s364, amount_s364);
[L4979]   COND FALSE  !(revert)
[L5005]               __ret_0_ := true;
[L6385]   RET         call __var_26 := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1040, value_s1040);
[L6386]   COND FALSE  !(revert)
[L6397]               __ret_0_ := __var_26;
[L2188]   RET         call __ret_0_ := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1040, value_s1040);
[L2189]               assume !revert && gas >= 0;
[L11074]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s1040, value_s1040);
[L11221]  RET         call CorralChoice_Wafl(this);

Loop:
[L11221]  CALL        call CorralChoice_Wafl(this);
[L10965]              havoc msgsender_MSG;
[L10966]              havoc msgvalue_MSG;
[L10967]              havoc choice;
[L10968]              havoc __ret_0_owner;
[L10969]              havoc __ret_0_isOwner;
[L10970]              havoc newOwner_s216;
[L10971]              havoc __ret_0_totalSupply;
[L10972]              havoc account_s345;
[L10973]              havoc __ret_0_balanceOf;
[L10974]              havoc to_s1040;
[L10975]              havoc value_s1040;
[L10976]              havoc __ret_0_transfer;
[L10977]              havoc owner_s380;
[L10978]              havoc spender_s380;
[L10979]              havoc __ret_0_allowance;
[L10980]              havoc spender_s1079;
[L10981]              havoc value_s1079;
[L10982]              havoc __ret_0_approve;
[L10983]              havoc from_s1061;
[L10984]              havoc to_s1061;
[L10985]              havoc value_s1061;
[L10986]              havoc __ret_0_transferFrom;
[L10987]              havoc spender_s1097;
[L10988]              havoc addedValue_s1097;
[L10989]              havoc __ret_0_increaseAllowance;
[L10990]              havoc spender_s1115;
[L10991]              havoc subtractedValue_s1115;
[L10992]              havoc __ret_0_decreaseAllowance;
[L10993]              havoc name_s731;
[L10994]              havoc symbol_s731;
[L10995]              havoc decimals_s731;
[L10996]              havoc __ret_0_name;
[L10997]              havoc __ret_0_symbol;
[L10998]              havoc __ret_0_decimals;
[L10999]              havoc account_s882;
[L11000]              havoc __ret_0_isPauser;
[L11001]              havoc account_s894;
[L11002]              havoc __ret_0_paused;
[L11003]              havoc account_s1163;
[L11004]              havoc __ret_0_isMinter;
[L11005]              havoc account_s1175;
[L11006]              havoc account_s1240;
[L11007]              havoc amount_s1240;
[L11008]              havoc __ret_0_mint;
[L11009]              havoc amount_s1255;
[L11010]              havoc account_s1268;
[L11011]              havoc amount_s1268;
[L11012]              havoc tmpNow;
[L11013]              havoc gas;
[L11014]              assume gas > 4000000 && gas <= 8000000;
[L11015]              tmpNow := now;
[L11016]              havoc now;
[L11017]              assume now > tmpNow;
[L11018]              assume msgsender_MSG != null;
[L11019]              assume DType[msgsender_MSG] != SafeMath;
[L11020]              assume DType[msgsender_MSG] != Ownable;
[L11021]              assume DType[msgsender_MSG] != IERC20;
[L11022]              assume DType[msgsender_MSG] != ERC20;
[L11023]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11024]              assume DType[msgsender_MSG] != Roles;
[L11025]              assume DType[msgsender_MSG] != PauserRole;
[L11026]              assume DType[msgsender_MSG] != Pausable;
[L11027]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11028]              assume DType[msgsender_MSG] != MinterRole;
[L11029]              assume DType[msgsender_MSG] != ERC20Mintable;
[L11030]              assume DType[msgsender_MSG] != ERC20Burnable;
[L11031]              assume DType[msgsender_MSG] != Wafl;
[L11032]              Alloc[msgsender_MSG] := true;
[L11033]  COND FALSE  !(choice == 27)
[L11039]  COND FALSE  !(choice == 26)
[L11045]  COND FALSE  !(choice == 25)
[L11051]  COND FALSE  !(choice == 24)
[L11057]  COND FALSE  !(choice == 23)
[L11063]  COND FALSE  !(choice == 22)
[L11069]  COND TRUE   choice == 21
[L11070]              gas := gas - 21000;
[L11071]  COND TRUE   gas >= 0
[L11072]              assume value_s1040 >= 0 && value_s1040 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L11073]              assume msgvalue_MSG == 0;
[L11074]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s1040, value_s1040);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((msgsender_MSG == to_s1040 && value_s1040 > _balances_ERC20[this][msgsender_MSG]) && value_s1040 >= 0) && value_s1040 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1040] >= 0) && _balances_ERC20[this][to_s1040] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transfer_ERC20Pausable0 := true;
[L2]                  call_transfer_ERC20Pausable0 := false;
[L2]                  revert := revert_hold;
[L2158]               havoc __exception;
[L2159]               revert := false;
[L2160]   COND FALSE  !(__exception)
[L2188]   CALL        call __ret_0_ := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1040, value_s1040);
[L6380]   CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9503]   COND FALSE  !(!!_paused_Pausable[this])
[L6380]   RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6381]   COND FALSE  !(revert)
[L6384]   COND TRUE   DType[this] == Wafl
[L6385]   CALL        call __var_26 := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1040, value_s1040);
[L4977]   COND TRUE   DType[this] == Wafl
[L4978]   CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, recipient_s364, amount_s364);
[L5417]               __var_7 := null;
[L5418]   COND FALSE  !(!(sender_s544 != null))
[L5422]               __var_8 := null;
[L5423]   COND FALSE  !(!(recipient_s544 != null))
[L5427]   CALL        call __var_9 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s544], amount_s544);
[L4601]   COND FALSE  !(!(b_s51 <= a_s51))
[L4605]               c_s51 := (a_s51 - b_s51) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4606]               __ret_0_ := c_s51;
[L5427]   RET         call __var_9 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s544], amount_s544);
[L5428]   COND FALSE  !(revert)
[L5431]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s544];
[L5432]               _balances_ERC20[this][sender_s544] := __var_9;
[L5433]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s544];
[L5434]   CALL        call __var_10 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s544], amount_s544);
[L4577]               c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4578]   COND FALSE  !(!(c_s26 >= a_s26))
[L4582]               __ret_0_ := c_s26;
[L5434]   RET         call __var_10 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s544], amount_s544);
[L5435]   COND FALSE  !(revert)
[L5438]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s544];
[L5439]               _balances_ERC20[this][recipient_s544] := __var_10;
[L5440]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s544];
[L5441]               assert { :EventEmitted "Transfer_ERC20" } true;
[L4978]   RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, recipient_s364, amount_s364);
[L4979]   COND FALSE  !(revert)
[L5005]               __ret_0_ := true;
[L6385]   RET         call __var_26 := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1040, value_s1040);
[L6386]   COND FALSE  !(revert)
[L6397]               __ret_0_ := __var_26;
[L2188]   RET         call __ret_0_ := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1040, value_s1040);
[L2189]               assume !revert && gas >= 0;
[L11074]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s1040, value_s1040);
[L11221]  RET         call CorralChoice_Wafl(this);

[2020-11-25 08:45:55,127 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 08:45:55,128 INFO  L82        PathProgramCache]: Analyzing trace with hash 1904750100, now seen corresponding path program 1 times
[2020-11-25 08:45:55,128 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 08:45:55,153 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 08:45:55,403 INFO  L134       CoverageAnalysis]: Checked inductivity of 1005 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 1005 trivial. 0 not checked.
[2020-11-25 08:45:55,403 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 08:45:55,404 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [9] imperfect sequences [] total 9
[2020-11-25 08:45:55,404 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 08:45:55,405 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 9 interpolants.
[2020-11-25 08:45:55,405 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=17, Invalid=55, Unknown=0, NotChecked=0, Total=72
[2020-11-25 08:45:55,405 INFO  L87              Difference]: Start difference. First operand 6657 states and 7664 transitions. cyclomatic complexity: 1009 Second operand 9 states.
[2020-11-25 08:45:57,387 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 08:45:57,387 INFO  L93              Difference]: Finished difference Result 3788 states and 4335 transitions.
[2020-11-25 08:45:57,387 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 9 states. 
[2020-11-25 08:45:57,387 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 3788 states and 4335 transitions.
[2020-11-25 08:45:57,395 INFO  L131   ngComponentsAnalysis]: Automaton has 0 accepting balls. 0
[2020-11-25 08:45:57,395 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 3788 states to 0 states and 0 transitions.
[2020-11-25 08:45:57,395 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 0
[2020-11-25 08:45:57,395 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 0
[2020-11-25 08:45:57,395 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 0 states and 0 transitions.
[2020-11-25 08:45:57,395 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 08:45:57,395 INFO  L728         BuchiCegarLoop]: Abstraction has 0 states and 0 transitions.
[2020-11-25 08:45:57,395 INFO  L751         BuchiCegarLoop]: Abstraction has 0 states and 0 transitions.
[2020-11-25 08:45:57,395 INFO  L631         BuchiCegarLoop]: Abstraction has 0 states and 0 transitions.
[2020-11-25 08:45:57,395 INFO  L445         BuchiCegarLoop]: ======== Iteration 9============
[2020-11-25 08:45:57,395 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 0 states and 0 transitions.
[2020-11-25 08:45:57,396 INFO  L131   ngComponentsAnalysis]: Automaton has 0 accepting balls. 0
[2020-11-25 08:45:57,396 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is true
[2020-11-25 08:45:57,398 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer CFG 25.11 08:45:57 BasicIcfg
[2020-11-25 08:45:57,399 INFO  L132        PluginConnector]: ------------------------ END BuchiAutomizer----------------------------
[2020-11-25 08:45:57,399 INFO  L168              Benchmark]: Toolchain (without parser) took 12225.97 ms. Allocated memory was 1.0 GB in the beginning and 2.5 GB in the end (delta: 1.5 GB). Free memory was 924.5 MB in the beginning and 1.5 GB in the end (delta: -533.0 MB). Peak memory consumption was 954.5 MB. Max. memory is 15.3 GB.
[2020-11-25 08:45:57,400 INFO  L168              Benchmark]: Boogie PL CUP Parser took 0.15 ms. Allocated memory is still 1.0 GB. Free memory is still 951.3 MB. There was no memory consumed. Max. memory is 15.3 GB.
[2020-11-25 08:45:57,400 INFO  L168              Benchmark]: Boogie Preprocessor took 146.03 ms. Allocated memory is still 1.0 GB. Free memory was 924.5 MB in the beginning and 902.6 MB in the end (delta: 21.9 MB). Peak memory consumption was 21.9 MB. Max. memory is 15.3 GB.
[2020-11-25 08:45:57,400 INFO  L168              Benchmark]: UtopiaSpecLang took 82.86 ms. Allocated memory is still 1.0 GB. Free memory was 902.6 MB in the beginning and 891.8 MB in the end (delta: 10.7 MB). Peak memory consumption was 10.7 MB. Max. memory is 15.3 GB.
[2020-11-25 08:45:57,401 INFO  L168              Benchmark]: Boogie Printer took 29.42 ms. Allocated memory is still 1.0 GB. Free memory was 891.8 MB in the beginning and 886.4 MB in the end (delta: 5.4 MB). Peak memory consumption was 5.4 MB. Max. memory is 15.3 GB.
[2020-11-25 08:45:57,401 INFO  L168              Benchmark]: RCFGBuilder took 1570.19 ms. Allocated memory was 1.0 GB in the beginning and 1.1 GB in the end (delta: 76.5 MB). Free memory was 886.4 MB in the beginning and 782.8 MB in the end (delta: 103.7 MB). Peak memory consumption was 180.2 MB. Max. memory is 15.3 GB.
[2020-11-25 08:45:57,401 INFO  L168              Benchmark]: UtopiaLTL2Aut took 37.65 ms. Allocated memory is still 1.1 GB. Free memory was 782.8 MB in the beginning and 775.6 MB in the end (delta: 7.1 MB). Peak memory consumption was 7.1 MB. Max. memory is 15.3 GB.
[2020-11-25 08:45:57,402 INFO  L168              Benchmark]: BÃ¼chi Program Product took 3304.42 ms. Allocated memory was 1.1 GB in the beginning and 1.6 GB in the end (delta: 448.3 MB). Free memory was 775.6 MB in the beginning and 940.8 MB in the end (delta: -165.2 MB). Peak memory consumption was 350.0 MB. Max. memory is 15.3 GB.
[2020-11-25 08:45:57,402 INFO  L168              Benchmark]: BlockEncodingV2 took 278.27 ms. Allocated memory is still 1.6 GB. Free memory was 940.8 MB in the beginning and 781.5 MB in the end (delta: 159.3 MB). Peak memory consumption was 159.3 MB. Max. memory is 15.3 GB.
[2020-11-25 08:45:57,402 INFO  L168              Benchmark]: BuchiAutomizer took 6773.80 ms. Allocated memory was 1.6 GB in the beginning and 2.5 GB in the end (delta: 962.6 MB). Free memory was 781.5 MB in the beginning and 1.5 GB in the end (delta: -675.9 MB). Peak memory consumption was 286.7 MB. Max. memory is 15.3 GB.
[2020-11-25 08:45:57,405 INFO  L337   ainManager$Toolchain]: #######################  End [Toolchain 1] #######################
 --- Results ---
 * Results from de.uni_freiburg.informatik.ultimate.plugins.blockencoding:
  - StatisticsResult: Initial Icfg
    10770 locations, 20080 edges
  - StatisticsResult: Encoded RCFG
    10522 locations, 19433 edges
 * Results from de.uni_freiburg.informatik.ultimate.core:
  - StatisticsResult: Toolchain Benchmarks
    Benchmark results are:
 * Boogie PL CUP Parser took 0.15 ms. Allocated memory is still 1.0 GB. Free memory is still 951.3 MB. There was no memory consumed. Max. memory is 15.3 GB.
 * Boogie Preprocessor took 146.03 ms. Allocated memory is still 1.0 GB. Free memory was 924.5 MB in the beginning and 902.6 MB in the end (delta: 21.9 MB). Peak memory consumption was 21.9 MB. Max. memory is 15.3 GB.
 * UtopiaSpecLang took 82.86 ms. Allocated memory is still 1.0 GB. Free memory was 902.6 MB in the beginning and 891.8 MB in the end (delta: 10.7 MB). Peak memory consumption was 10.7 MB. Max. memory is 15.3 GB.
 * Boogie Printer took 29.42 ms. Allocated memory is still 1.0 GB. Free memory was 891.8 MB in the beginning and 886.4 MB in the end (delta: 5.4 MB). Peak memory consumption was 5.4 MB. Max. memory is 15.3 GB.
 * RCFGBuilder took 1570.19 ms. Allocated memory was 1.0 GB in the beginning and 1.1 GB in the end (delta: 76.5 MB). Free memory was 886.4 MB in the beginning and 782.8 MB in the end (delta: 103.7 MB). Peak memory consumption was 180.2 MB. Max. memory is 15.3 GB.
 * UtopiaLTL2Aut took 37.65 ms. Allocated memory is still 1.1 GB. Free memory was 782.8 MB in the beginning and 775.6 MB in the end (delta: 7.1 MB). Peak memory consumption was 7.1 MB. Max. memory is 15.3 GB.
 * BÃ¼chi Program Product took 3304.42 ms. Allocated memory was 1.1 GB in the beginning and 1.6 GB in the end (delta: 448.3 MB). Free memory was 775.6 MB in the beginning and 940.8 MB in the end (delta: -165.2 MB). Peak memory consumption was 350.0 MB. Max. memory is 15.3 GB.
 * BlockEncodingV2 took 278.27 ms. Allocated memory is still 1.6 GB. Free memory was 940.8 MB in the beginning and 781.5 MB in the end (delta: 159.3 MB). Peak memory consumption was 159.3 MB. Max. memory is 15.3 GB.
 * BuchiAutomizer took 6773.80 ms. Allocated memory was 1.6 GB in the beginning and 2.5 GB in the end (delta: 962.6 MB). Free memory was 781.5 MB in the beginning and 1.5 GB in the end (delta: -675.9 MB). Peak memory consumption was 286.7 MB. Max. memory is 15.3 GB.
 * Results from de.uni_freiburg.informatik.ultimate.buchiprogramproduct:
  - StatisticsResult: Initial property automaton
    2 locations, 3 edges
  - StatisticsResult: Initial RCFG
    4160 locations, 6114 edges
  - StatisticsResult: BuchiProgram size
    10770 locations, 20080 edges
 * Results from de.uni_freiburg.informatik.ultimate.plugins.generator.traceabstraction:
  - StatisticsResult: Constructed decomposition of program
    Your program was decomposed into 8 terminating modules (8 trivial, 0 deterministic, 0 nondeterministic). 8 modules have a trivial ranking function, the largest among these consists of 10 locations.
  - StatisticsResult: Timing statistics
    BÃ¼chiAutomizer plugin needed 6.7s and 9 iterations.  TraceHistogramMax:9. Analysis of lassos took 1.7s. Construction of modules took 2.2s. BÃ¼chi inclusion checks took 1.3s. Highest rank in rank-based complementation 0. Minimization of det autom 8. Minimization of nondet autom 0. Automata minimization 0.5s AutomataMinimizationTime, 7 MinimizatonAttempts, 1295 StatesRemovedByMinimization, 4 NontrivialMinimizations. Non-live state removal took 0.3s Buchi closure took 0.0s. Biggest automaton had 7381 states and ocurred in iteration 3.	Nontrivial modules had stage [0, 0, 0, 0, 0].	InterpolantCoveringCapabilityFinite: 0/0	InterpolantCoveringCapabilityBuchi: 0/0	HoareTripleCheckerStatistics: 54587 SDtfs, 19067 SDslu, 167907 SDs, 0 SdLazy, 24405 SolverSat, 5007 SolverUnsat, 0 SolverUnknown, 0 SolverNotchecked, 2.2s Time	LassoAnalysisResults: nont0 unkn0 SFLI0 SFLT0 conc0 concLT0 SILN0 SILU8 SILI0 SILT0 lasso0 LassoPreprocessingBenchmarks: LassoTerminationAnalysisBenchmarks: not availableLassoTerminationAnalysisBenchmarks: LassoNonterminationAnalysisSatFixpoint: 0	LassoNonterminationAnalysisSatUnbounded: 0	LassoNonterminationAnalysisUnsat: 0	LassoNonterminationAnalysisUnknown: 0	LassoNonterminationAnalysisTime: 0.0s	
  - AllSpecificationsHoldResult: All specifications hold
    Buchi Automizer proved that the LTL property ! ( ( []( (call_transfer_ERC20Pausable0) ==> ( <>(fail_transfer_ERC20Pausable0) ) ) )) holds
RESULT: Ultimate proved your program to be correct!
Received shutdown request...
