This is Ultimate 0.1.24-f1553f5-m
[2020-11-25 01:53:24,679 INFO  L170        SettingsManager]: Resetting all preferences to default values...
[2020-11-25 01:53:24,681 INFO  L174        SettingsManager]: Resetting UltimateCore preferences to default values
[2020-11-25 01:53:24,692 INFO  L177        SettingsManager]: Ultimate Commandline Interface provides no preferences, ignoring...
[2020-11-25 01:53:24,692 INFO  L174        SettingsManager]: Resetting Boogie Preprocessor preferences to default values
[2020-11-25 01:53:24,693 INFO  L174        SettingsManager]: Resetting Boogie Procedure Inliner preferences to default values
[2020-11-25 01:53:24,694 INFO  L174        SettingsManager]: Resetting Abstract Interpretation preferences to default values
[2020-11-25 01:53:24,696 INFO  L174        SettingsManager]: Resetting LassoRanker preferences to default values
[2020-11-25 01:53:24,697 INFO  L174        SettingsManager]: Resetting Reaching Definitions preferences to default values
[2020-11-25 01:53:24,698 INFO  L174        SettingsManager]: Resetting SyntaxChecker preferences to default values
[2020-11-25 01:53:24,699 INFO  L177        SettingsManager]: BÃ¼chi Program Product provides no preferences, ignoring...
[2020-11-25 01:53:24,699 INFO  L174        SettingsManager]: Resetting LTL2Aut preferences to default values
[2020-11-25 01:53:24,700 INFO  L174        SettingsManager]: Resetting PEA to Boogie preferences to default values
[2020-11-25 01:53:24,701 INFO  L174        SettingsManager]: Resetting BlockEncodingV2 preferences to default values
[2020-11-25 01:53:24,702 INFO  L174        SettingsManager]: Resetting ChcToBoogie preferences to default values
[2020-11-25 01:53:24,702 INFO  L174        SettingsManager]: Resetting AutomataScriptInterpreter preferences to default values
[2020-11-25 01:53:24,703 INFO  L174        SettingsManager]: Resetting BuchiAutomizer preferences to default values
[2020-11-25 01:53:24,704 INFO  L174        SettingsManager]: Resetting CACSL2BoogieTranslator preferences to default values
[2020-11-25 01:53:24,706 INFO  L174        SettingsManager]: Resetting CodeCheck preferences to default values
[2020-11-25 01:53:24,707 INFO  L174        SettingsManager]: Resetting InvariantSynthesis preferences to default values
[2020-11-25 01:53:24,708 INFO  L174        SettingsManager]: Resetting RCFGBuilder preferences to default values
[2020-11-25 01:53:24,709 INFO  L174        SettingsManager]: Resetting TraceAbstraction preferences to default values
[2020-11-25 01:53:24,711 INFO  L177        SettingsManager]: TraceAbstractionConcurrent provides no preferences, ignoring...
[2020-11-25 01:53:24,711 INFO  L177        SettingsManager]: TraceAbstractionWithAFAs provides no preferences, ignoring...
[2020-11-25 01:53:24,711 INFO  L174        SettingsManager]: Resetting TreeAutomizer preferences to default values
[2020-11-25 01:53:24,711 INFO  L174        SettingsManager]: Resetting IcfgToChc preferences to default values
[2020-11-25 01:53:24,712 INFO  L174        SettingsManager]: Resetting IcfgTransformer preferences to default values
[2020-11-25 01:53:24,712 INFO  L177        SettingsManager]: ReqToTest provides no preferences, ignoring...
[2020-11-25 01:53:24,713 INFO  L174        SettingsManager]: Resetting UtopiaLTL2Aut preferences to default values
[2020-11-25 01:53:24,713 INFO  L174        SettingsManager]: Resetting UtopiaSpecLang preferences to default values
[2020-11-25 01:53:24,713 INFO  L174        SettingsManager]: Resetting Boogie Printer preferences to default values
[2020-11-25 01:53:24,714 INFO  L174        SettingsManager]: Resetting ChcSmtPrinter preferences to default values
[2020-11-25 01:53:24,714 INFO  L174        SettingsManager]: Resetting ReqPrinter preferences to default values
[2020-11-25 01:53:24,715 INFO  L174        SettingsManager]: Resetting Witness Printer preferences to default values
[2020-11-25 01:53:24,716 INFO  L177        SettingsManager]: Boogie PL CUP Parser provides no preferences, ignoring...
[2020-11-25 01:53:24,716 INFO  L174        SettingsManager]: Resetting CDTParser preferences to default values
[2020-11-25 01:53:24,716 INFO  L177        SettingsManager]: AutomataScriptParser provides no preferences, ignoring...
[2020-11-25 01:53:24,716 INFO  L177        SettingsManager]: ReqParser provides no preferences, ignoring...
[2020-11-25 01:53:24,717 INFO  L174        SettingsManager]: Resetting SmtParser preferences to default values
[2020-11-25 01:53:24,717 INFO  L174        SettingsManager]: Resetting Witness Parser preferences to default values
[2020-11-25 01:53:24,718 INFO  L181        SettingsManager]: Finished resetting all preferences to default values...
[2020-11-25 01:53:24,718 INFO  L98         SettingsManager]: Beginning loading settings from /mnt/data0/jon/SmartPulseTool/SmartPulse/settings.epf
[2020-11-25 01:53:24,726 INFO  L110        SettingsManager]: Loading preferences was successful
[2020-11-25 01:53:24,726 INFO  L112        SettingsManager]: Preferences different from defaults after loading the file:
[2020-11-25 01:53:24,727 INFO  L131        SettingsManager]: Preferences of LTL2Aut differ from their defaults:
[2020-11-25 01:53:24,727 INFO  L133        SettingsManager]:  * Read property from file=true
[2020-11-25 01:53:24,727 INFO  L133        SettingsManager]:  * Path to LTL*BA executable (LTL2BA, LTL3BA)=/mnt/data0/jon/SmartPulseTool/ltl2ba
[2020-11-25 01:53:24,727 INFO  L131        SettingsManager]: Preferences of BlockEncodingV2 differ from their defaults:
[2020-11-25 01:53:24,727 INFO  L133        SettingsManager]:  * Maximize final states=false
[2020-11-25 01:53:24,727 INFO  L133        SettingsManager]:  * Minimize states even if more edges are added than removed.=true
[2020-11-25 01:53:24,728 INFO  L133        SettingsManager]:  * Minimize states using LBE with the strategy=NONE
[2020-11-25 01:53:24,728 INFO  L131        SettingsManager]: Preferences of BuchiAutomizer differ from their defaults:
[2020-11-25 01:53:24,728 INFO  L133        SettingsManager]:  * Compute Interpolants along a Counterexample=Craig_TreeInterpolation
[2020-11-25 01:53:24,728 INFO  L133        SettingsManager]:  * Use old map elimination=false
[2020-11-25 01:53:24,728 INFO  L133        SettingsManager]:  * Try twofold refinement=false
[2020-11-25 01:53:24,728 INFO  L131        SettingsManager]: Preferences of CACSL2BoogieTranslator differ from their defaults:
[2020-11-25 01:53:24,728 INFO  L133        SettingsManager]:  * Check unreachability of error function in SV-COMP mode=false
[2020-11-25 01:53:24,728 INFO  L133        SettingsManager]:  * Overapproximate operations on floating types=true
[2020-11-25 01:53:24,728 INFO  L133        SettingsManager]:  * Check division by zero=IGNORE
[2020-11-25 01:53:24,728 INFO  L133        SettingsManager]:  * Pointer to allocated memory at dereference=ASSUME
[2020-11-25 01:53:24,729 INFO  L133        SettingsManager]:  * If two pointers are subtracted or compared they have the same base address=ASSUME
[2020-11-25 01:53:24,729 INFO  L133        SettingsManager]:  * Check array bounds for arrays that are off heap=ASSUME
[2020-11-25 01:53:24,729 INFO  L133        SettingsManager]:  * Check if freed pointer was valid=false
[2020-11-25 01:53:24,729 INFO  L133        SettingsManager]:  * Use constant arrays=true
[2020-11-25 01:53:24,729 INFO  L133        SettingsManager]:  * Pointer base address is valid at dereference=ASSUME
[2020-11-25 01:53:24,729 INFO  L131        SettingsManager]: Preferences of RCFGBuilder differ from their defaults:
[2020-11-25 01:53:24,729 INFO  L133        SettingsManager]:  * Size of a code block=SingleStatement
[2020-11-25 01:53:24,729 INFO  L133        SettingsManager]:  * SMT solver=Internal_SMTInterpol
[2020-11-25 01:53:24,750 INFO  L81    nceAwareModelManager]: Repository-Root is: /tmp
[2020-11-25 01:53:24,762 INFO  L259   ainManager$Toolchain]: [Toolchain 1]: Applicable parser(s) successfully (re)initialized
[2020-11-25 01:53:24,764 INFO  L215   ainManager$Toolchain]: [Toolchain 1]: Toolchain selected.
[2020-11-25 01:53:24,766 INFO  L271        PluginConnector]: Initializing Boogie PL CUP Parser...
[2020-11-25 01:53:24,766 INFO  L276        PluginConnector]: Boogie PL CUP Parser initialized
[2020-11-25 01:53:24,766 INFO  L430   ainManager$Toolchain]: [Toolchain 1]: Parsing single file: /mnt/data0/jon/SmartPulseTool/MyToken_0xc3957cf07d0970deedfced034a092b496f9067da_transfer-self.bpl
[2020-11-25 01:53:24,767 INFO  L111           BoogieParser]: Parsing: '/mnt/data0/jon/SmartPulseTool/MyToken_0xc3957cf07d0970deedfced034a092b496f9067da_transfer-self.bpl'
[2020-11-25 01:53:24,851 INFO  L297   ainManager$Toolchain]: ####################### [Toolchain 1] #######################
[2020-11-25 01:53:24,852 INFO  L131        ToolchainWalker]: Walking toolchain with 8 elements.
[2020-11-25 01:53:24,852 INFO  L113        PluginConnector]: ------------------------Boogie Preprocessor----------------------------
[2020-11-25 01:53:24,852 INFO  L271        PluginConnector]: Initializing Boogie Preprocessor...
[2020-11-25 01:53:24,852 INFO  L276        PluginConnector]: Boogie Preprocessor initialized
[2020-11-25 01:53:24,869 INFO  L185        PluginConnector]: Executing the observer EnsureBoogieModelObserver from plugin Boogie Preprocessor for "MyToken_0xc3957cf07d0970deedfced034a092b496f9067da_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 01:53:24" (1/1) ...
[2020-11-25 01:53:24,871 INFO  L185        PluginConnector]: Executing the observer TypeChecker from plugin Boogie Preprocessor for "MyToken_0xc3957cf07d0970deedfced034a092b496f9067da_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 01:53:24" (1/1) ...
[2020-11-25 01:53:24,901 INFO  L185        PluginConnector]: Executing the observer ConstExpander from plugin Boogie Preprocessor for "MyToken_0xc3957cf07d0970deedfced034a092b496f9067da_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 01:53:24" (1/1) ...
[2020-11-25 01:53:24,902 INFO  L185        PluginConnector]: Executing the observer StructExpander from plugin Boogie Preprocessor for "MyToken_0xc3957cf07d0970deedfced034a092b496f9067da_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 01:53:24" (1/1) ...
[2020-11-25 01:53:24,920 INFO  L185        PluginConnector]: Executing the observer UnstructureCode from plugin Boogie Preprocessor for "MyToken_0xc3957cf07d0970deedfced034a092b496f9067da_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 01:53:24" (1/1) ...
[2020-11-25 01:53:24,929 INFO  L185        PluginConnector]: Executing the observer FunctionInliner from plugin Boogie Preprocessor for "MyToken_0xc3957cf07d0970deedfced034a092b496f9067da_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 01:53:24" (1/1) ...
[2020-11-25 01:53:24,936 INFO  L185        PluginConnector]: Executing the observer BoogieSymbolTableConstructor from plugin Boogie Preprocessor for "MyToken_0xc3957cf07d0970deedfced034a092b496f9067da_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 01:53:24" (1/1) ...
[2020-11-25 01:53:24,945 INFO  L132        PluginConnector]: ------------------------ END Boogie Preprocessor----------------------------
[2020-11-25 01:53:24,946 INFO  L113        PluginConnector]: ------------------------UtopiaSpecLang----------------------------
[2020-11-25 01:53:24,946 INFO  L271        PluginConnector]: Initializing UtopiaSpecLang...
[2020-11-25 01:53:24,948 INFO  L276        PluginConnector]: UtopiaSpecLang initialized
[2020-11-25 01:53:24,952 INFO  L185        PluginConnector]: Executing the observer UtopiaSpecLangObserver from plugin UtopiaSpecLang for "MyToken_0xc3957cf07d0970deedfced034a092b496f9067da_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 01:53:24" (1/1) ...
[2020-11-25 01:53:24,971 INFO  L1012  opiaSpecLangObserver]: Parsing LTLPlus Formula to AstNode: [](started(MyToken.transfer(to, value), msg.sender == to && value <= balances_MyToken[this][msg.sender] && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_MyToken[this][to] >= 0 && balances_MyToken[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_MyToken[this][msg.sender] >= 0 &&  balances_MyToken[this][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(finished(MyToken.transfer(to, value), return == true && _totalSupply_MyToken[this] == old(_totalSupply_MyToken[this]) && balances_MyToken[this] == old(balances_MyToken[this]) && allowed_MyToken[this] == old(allowed_MyToken[this]) && symbol_MyToken[this] == old(symbol_MyToken[this]) && name_MyToken[this] == old(name_MyToken[this]) && decimals_MyToken[this] == old(decimals_MyToken[this]) && owner_Owned[this] == old(owner_Owned[this]) && newOwner_Owned[this] == old(newOwner_Owned[this]))))
[2020-11-25 01:53:24,977 INFO  L1016  opiaSpecLangObserver]: Successfully lexed: [](started(MyToken.transfer(to, value), msg.sender == to && value <= balances_MyToken[this][msg.sender] && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_MyToken[this][to] >= 0 && balances_MyToken[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_MyToken[this][msg.sender] >= 0 &&  balances_MyToken[this][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(finished(MyToken.transfer(to, value), return == true && _totalSupply_MyToken[this] == old(_totalSupply_MyToken[this]) && balances_MyToken[this] == old(balances_MyToken[this]) && allowed_MyToken[this] == old(allowed_MyToken[this]) && symbol_MyToken[this] == old(symbol_MyToken[this]) && name_MyToken[this] == old(name_MyToken[this]) && decimals_MyToken[this] == old(decimals_MyToken[this]) && owner_Owned[this] == old(owner_Owned[this]) && newOwner_Owned[this] == old(newOwner_Owned[this]))))
[2020-11-25 01:53:24,984 INFO  L1018  opiaSpecLangObserver]: Successfully parsed: [](started(MyToken.transfer(to, value), msg.sender == to && value <= balances_MyToken[this][msg.sender] && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_MyToken[this][to] >= 0 && balances_MyToken[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_MyToken[this][msg.sender] >= 0 &&  balances_MyToken[this][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(finished(MyToken.transfer(to, value), return == true && _totalSupply_MyToken[this] == old(_totalSupply_MyToken[this]) && balances_MyToken[this] == old(balances_MyToken[this]) && allowed_MyToken[this] == old(allowed_MyToken[this]) && symbol_MyToken[this] == old(symbol_MyToken[this]) && name_MyToken[this] == old(name_MyToken[this]) && decimals_MyToken[this] == old(decimals_MyToken[this]) && owner_Owned[this] == old(owner_Owned[this]) && newOwner_Owned[this] == old(newOwner_Owned[this]))))
[2020-11-25 01:53:24,992 INFO  L636   opiaSpecLangObserver]: Parsed ( ( ( ( ( ( ( msg.sender==to_s387 && tokens_s387<=balances_MyToken[this][msg.sender] ) && tokens_s387>=0 ) && tokens_s387<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) && balances_MyToken[this][to_s387]>=0 ) && balances_MyToken[this][to_s387]<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) && balances_MyToken[this][msg.sender]>=0 ) && balances_MyToken[this][msg.sender]<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) to BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[COMPEQ,IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transfer~address~uint256_MyToken>],IdentifierExpression[to_s387,<IMPLEMENTATION_INPARAM,transfer~address~uint256_MyToken>]],BinaryExpression[COMPLEQ,IdentifierExpression[tokens_s387,<IMPLEMENTATION_INPARAM,transfer~address~uint256_MyToken>],ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balances_MyToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_MyToken>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transfer~address~uint256_MyToken>]]]]],BinaryExpression[COMPGEQ,IdentifierExpression[tokens_s387,<IMPLEMENTATION_INPARAM,transfer~address~uint256_MyToken>],IntegerLiteral[0]]],BinaryExpression[COMPLT,IdentifierExpression[tokens_s387,<IMPLEMENTATION_INPARAM,transfer~address~uint256_MyToken>],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]],BinaryExpression[COMPGEQ,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balances_MyToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_MyToken>]]],[IdentifierExpression[to_s387,<IMPLEMENTATION_INPARAM,transfer~address~uint256_MyToken>]]],IntegerLiteral[0]]],BinaryExpression[COMPLT,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balances_MyToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_MyToken>]]],[IdentifierExpression[to_s387,<IMPLEMENTATION_INPARAM,transfer~address~uint256_MyToken>]]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]],BinaryExpression[COMPGEQ,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balances_MyToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_MyToken>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transfer~address~uint256_MyToken>]]],IntegerLiteral[0]]],BinaryExpression[COMPLT,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balances_MyToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_MyToken>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transfer~address~uint256_MyToken>]]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]]
[2020-11-25 01:53:24,994 INFO  L636   opiaSpecLangObserver]: Parsed ( ( ( ( ( ( ( ( success_s387==true && _totalSupply_MyToken[this]==( old(_totalSupply_MyToken[this]) ) ) && balances_MyToken[this]==( old(balances_MyToken[this]) ) ) && allowed_MyToken[this]==( old(allowed_MyToken[this]) ) ) && symbol_MyToken[this]==( old(symbol_MyToken[this]) ) ) && name_MyToken[this]==( old(name_MyToken[this]) ) ) && decimals_MyToken[this]==( old(decimals_MyToken[this]) ) ) && owner_Owned[this]==( old(owner_Owned[this]) ) ) && newOwner_Owned[this]==( old(newOwner_Owned[this]) ) ) to BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[COMPEQ,IdentifierExpression[success_s387,<IMPLEMENTATION_OUTPARAM,transfer~address~uint256_MyToken>],BooleanLiteral[true]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[_totalSupply_MyToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_MyToken>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[_totalSupply_MyToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_MyToken>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[balances_MyToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_MyToken>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[balances_MyToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_MyToken>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[allowed_MyToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_MyToken>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[allowed_MyToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_MyToken>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[symbol_MyToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_MyToken>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[symbol_MyToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_MyToken>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[name_MyToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_MyToken>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[name_MyToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_MyToken>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[decimals_MyToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_MyToken>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[decimals_MyToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_MyToken>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[owner_Owned,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_MyToken>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[owner_Owned,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_MyToken>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[newOwner_Owned,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_MyToken>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[newOwner_Owned,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_MyToken>]]]]]]
[2020-11-25 01:53:25,000 INFO  L1005  opiaSpecLangObserver]: Compiling: [](started(MyToken.transfer(to, value), msg.sender == to && value <= balances_MyToken[this][msg.sender] && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_MyToken[this][to] >= 0 && balances_MyToken[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_MyToken[this][msg.sender] >= 0 &&  balances_MyToken[this][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(finished(MyToken.transfer(to, value), return == true && _totalSupply_MyToken[this] == old(_totalSupply_MyToken[this]) && balances_MyToken[this] == old(balances_MyToken[this]) && allowed_MyToken[this] == old(allowed_MyToken[this]) && symbol_MyToken[this] == old(symbol_MyToken[this]) && name_MyToken[this] == old(name_MyToken[this]) && decimals_MyToken[this] == old(decimals_MyToken[this]) && owner_Owned[this] == old(owner_Owned[this]) && newOwner_Owned[this] == old(newOwner_Owned[this]))))
[2020-11-25 01:53:25,000 INFO  L1007  opiaSpecLangObserver]: Compiled to ( []( AP(call_transfer_MyToken0) ==> ( <>AP(success_transfer_MyToken0) ) ) )
Executed UtopiaSpecLang
[2020-11-25 01:53:25,008 INFO  L202        PluginConnector]: Adding new model Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 01:53:25 PropertyContainer
[2020-11-25 01:53:25,009 INFO  L132        PluginConnector]: ------------------------ END UtopiaSpecLang----------------------------
[2020-11-25 01:53:25,009 INFO  L113        PluginConnector]: ------------------------Boogie Printer----------------------------
[2020-11-25 01:53:25,009 INFO  L271        PluginConnector]: Initializing Boogie Printer...
[2020-11-25 01:53:25,009 INFO  L276        PluginConnector]: Boogie Printer initialized
[2020-11-25 01:53:25,010 INFO  L185        PluginConnector]: Executing the observer BoogiePrinterObserver from plugin Boogie Printer for "MyToken_0xc3957cf07d0970deedfced034a092b496f9067da_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 01:53:24" (1/2) ...
[2020-11-25 01:53:25,010 INFO  L116   oogiePrinterObserver]: File already exists and will be overwritten: /tmp/boogiePrinter.bpl
[2020-11-25 01:53:25,011 INFO  L120   oogiePrinterObserver]: Writing to file /tmp/boogiePrinter.bpl
[2020-11-25 01:53:25,025 INFO  L185        PluginConnector]: Executing the observer BoogiePrinterObserver from plugin Boogie Printer for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 01:53:25" (2/2) ...
[2020-11-25 01:53:25,025 INFO  L132        PluginConnector]: ------------------------ END Boogie Printer----------------------------
[2020-11-25 01:53:25,026 INFO  L113        PluginConnector]: ------------------------RCFGBuilder----------------------------
[2020-11-25 01:53:25,026 INFO  L271        PluginConnector]: Initializing RCFGBuilder...
[2020-11-25 01:53:25,026 INFO  L276        PluginConnector]: RCFGBuilder initialized
[2020-11-25 01:53:25,027 INFO  L185        PluginConnector]: Executing the observer RCFGBuilderObserver from plugin RCFGBuilder for "MyToken_0xc3957cf07d0970deedfced034a092b496f9067da_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 01:53:24" (1/2) ...
[2020-11-25 01:53:25,079 INFO  L130     BoogieDeclarations]: Found specification of procedure FreshRefGenerator__success
[2020-11-25 01:53:25,080 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath_NoBaseCtor__success
[2020-11-25 01:53:25,080 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath
[2020-11-25 01:53:25,080 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath
[2020-11-25 01:53:25,080 INFO  L130     BoogieDeclarations]: Found specification of procedure safeAdd~uint256~uint256_SafeMath
[2020-11-25 01:53:25,080 INFO  L138     BoogieDeclarations]: Found implementation of procedure safeAdd~uint256~uint256_SafeMath
[2020-11-25 01:53:25,080 INFO  L130     BoogieDeclarations]: Found specification of procedure safeSub~uint256~uint256_SafeMath
[2020-11-25 01:53:25,080 INFO  L138     BoogieDeclarations]: Found implementation of procedure safeSub~uint256~uint256_SafeMath
[2020-11-25 01:53:25,080 INFO  L130     BoogieDeclarations]: Found specification of procedure safeMul~uint256~uint256_SafeMath
[2020-11-25 01:53:25,080 INFO  L138     BoogieDeclarations]: Found implementation of procedure safeMul~uint256~uint256_SafeMath
[2020-11-25 01:53:25,081 INFO  L130     BoogieDeclarations]: Found specification of procedure safeDiv~uint256~uint256_SafeMath
[2020-11-25 01:53:25,081 INFO  L138     BoogieDeclarations]: Found implementation of procedure safeDiv~uint256~uint256_SafeMath
[2020-11-25 01:53:25,081 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Interface_ERC20Interface_NoBaseCtor__success
[2020-11-25 01:53:25,081 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Interface_ERC20Interface
[2020-11-25 01:53:25,081 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Interface_ERC20Interface
[2020-11-25 01:53:25,081 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_ERC20Interface
[2020-11-25 01:53:25,081 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_ERC20Interface
[2020-11-25 01:53:25,081 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_ERC20Interface
[2020-11-25 01:53:25,081 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_ERC20Interface
[2020-11-25 01:53:25,082 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_ERC20Interface
[2020-11-25 01:53:25,082 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_ERC20Interface
[2020-11-25 01:53:25,082 INFO  L130     BoogieDeclarations]: Found specification of procedure ApproveAndCallFallBack_ApproveAndCallFallBack_NoBaseCtor__success
[2020-11-25 01:53:25,082 INFO  L130     BoogieDeclarations]: Found specification of procedure ApproveAndCallFallBack_ApproveAndCallFallBack
[2020-11-25 01:53:25,082 INFO  L138     BoogieDeclarations]: Found implementation of procedure ApproveAndCallFallBack_ApproveAndCallFallBack
[2020-11-25 01:53:25,082 INFO  L130     BoogieDeclarations]: Found specification of procedure receiveApproval~address~uint256~address~bytes_ApproveAndCallFallBack
[2020-11-25 01:53:25,082 INFO  L130     BoogieDeclarations]: Found specification of procedure Owned_Owned_NoBaseCtor__success
[2020-11-25 01:53:25,082 INFO  L130     BoogieDeclarations]: Found specification of procedure Owned_Owned
[2020-11-25 01:53:25,082 INFO  L138     BoogieDeclarations]: Found implementation of procedure Owned_Owned
[2020-11-25 01:53:25,082 INFO  L130     BoogieDeclarations]: Found specification of procedure transferOwnership~address_Owned
[2020-11-25 01:53:25,082 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferOwnership~address_Owned
[2020-11-25 01:53:25,082 INFO  L130     BoogieDeclarations]: Found specification of procedure acceptOwnership_Owned
[2020-11-25 01:53:25,083 INFO  L138     BoogieDeclarations]: Found implementation of procedure acceptOwnership_Owned
[2020-11-25 01:53:25,083 INFO  L130     BoogieDeclarations]: Found specification of procedure owner_Owned
[2020-11-25 01:53:25,083 INFO  L138     BoogieDeclarations]: Found implementation of procedure owner_Owned
[2020-11-25 01:53:25,083 INFO  L130     BoogieDeclarations]: Found specification of procedure newOwner_Owned
[2020-11-25 01:53:25,083 INFO  L138     BoogieDeclarations]: Found implementation of procedure newOwner_Owned
[2020-11-25 01:53:25,083 INFO  L130     BoogieDeclarations]: Found specification of procedure MyToken_MyToken_NoBaseCtor__success
[2020-11-25 01:53:25,083 INFO  L130     BoogieDeclarations]: Found specification of procedure MyToken_MyToken
[2020-11-25 01:53:25,083 INFO  L138     BoogieDeclarations]: Found implementation of procedure MyToken_MyToken
[2020-11-25 01:53:25,083 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_MyToken
[2020-11-25 01:53:25,083 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_MyToken
[2020-11-25 01:53:25,083 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_MyToken
[2020-11-25 01:53:25,083 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_MyToken
[2020-11-25 01:53:25,083 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_MyToken
[2020-11-25 01:53:25,084 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_MyToken
[2020-11-25 01:53:25,084 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_MyToken
[2020-11-25 01:53:25,084 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_MyToken
[2020-11-25 01:53:25,084 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_MyToken
[2020-11-25 01:53:25,084 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_MyToken
[2020-11-25 01:53:25,084 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_MyToken
[2020-11-25 01:53:25,084 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_MyToken
[2020-11-25 01:53:25,084 INFO  L130     BoogieDeclarations]: Found specification of procedure approveAndCall~address~uint256~bytes_MyToken
[2020-11-25 01:53:25,084 INFO  L138     BoogieDeclarations]: Found implementation of procedure approveAndCall~address~uint256~bytes_MyToken
[2020-11-25 01:53:25,084 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackMethod_MyToken__success
[2020-11-25 01:53:25,084 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_MyToken
[2020-11-25 01:53:25,084 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_MyToken
[2020-11-25 01:53:25,084 INFO  L130     BoogieDeclarations]: Found specification of procedure name_MyToken
[2020-11-25 01:53:25,084 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_MyToken
[2020-11-25 01:53:25,085 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_MyToken
[2020-11-25 01:53:25,085 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_MyToken
[2020-11-25 01:53:25,085 INFO  L130     BoogieDeclarations]: Found specification of procedure _totalSupply_MyToken
[2020-11-25 01:53:25,085 INFO  L138     BoogieDeclarations]: Found implementation of procedure _totalSupply_MyToken
[2020-11-25 01:53:25,085 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackDispatch__success
[2020-11-25 01:53:25,085 INFO  L130     BoogieDeclarations]: Found specification of procedure Fallback_UnknownType__success
[2020-11-25 01:53:25,085 INFO  L130     BoogieDeclarations]: Found specification of procedure send__success
[2020-11-25 01:53:25,085 INFO  L130     BoogieDeclarations]: Found specification of procedure onlyOwner_pre__success
[2020-11-25 01:53:25,085 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_SafeMath
[2020-11-25 01:53:25,085 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_SafeMath
[2020-11-25 01:53:25,085 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_ERC20Interface
[2020-11-25 01:53:25,086 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_ERC20Interface
[2020-11-25 01:53:25,086 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_ApproveAndCallFallBack
[2020-11-25 01:53:25,086 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_ApproveAndCallFallBack
[2020-11-25 01:53:25,086 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_Owned
[2020-11-25 01:53:25,086 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_Owned
[2020-11-25 01:53:25,086 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_MyToken
[2020-11-25 01:53:25,086 INFO  L130     BoogieDeclarations]: Found specification of procedure main
[2020-11-25 01:53:25,086 INFO  L130     BoogieDeclarations]: Found specification of procedure FreshRefGenerator__fail
[2020-11-25 01:53:25,086 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath_NoBaseCtor__fail
[2020-11-25 01:53:25,086 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath__success
[2020-11-25 01:53:25,087 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath__fail
[2020-11-25 01:53:25,087 INFO  L130     BoogieDeclarations]: Found specification of procedure safeAdd~uint256~uint256_SafeMath__success
[2020-11-25 01:53:25,087 INFO  L130     BoogieDeclarations]: Found specification of procedure safeAdd~uint256~uint256_SafeMath__fail
[2020-11-25 01:53:25,087 INFO  L130     BoogieDeclarations]: Found specification of procedure safeSub~uint256~uint256_SafeMath__success
[2020-11-25 01:53:25,087 INFO  L130     BoogieDeclarations]: Found specification of procedure safeSub~uint256~uint256_SafeMath__fail
[2020-11-25 01:53:25,087 INFO  L130     BoogieDeclarations]: Found specification of procedure safeMul~uint256~uint256_SafeMath__success
[2020-11-25 01:53:25,087 INFO  L130     BoogieDeclarations]: Found specification of procedure safeMul~uint256~uint256_SafeMath__fail
[2020-11-25 01:53:25,088 INFO  L130     BoogieDeclarations]: Found specification of procedure safeDiv~uint256~uint256_SafeMath__success
[2020-11-25 01:53:25,088 INFO  L130     BoogieDeclarations]: Found specification of procedure safeDiv~uint256~uint256_SafeMath__fail
[2020-11-25 01:53:25,088 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Interface_ERC20Interface_NoBaseCtor__fail
[2020-11-25 01:53:25,088 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Interface_ERC20Interface__success
[2020-11-25 01:53:25,088 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Interface_ERC20Interface__fail
[2020-11-25 01:53:25,088 INFO  L130     BoogieDeclarations]: Found specification of procedure ApproveAndCallFallBack_ApproveAndCallFallBack_NoBaseCtor__fail
[2020-11-25 01:53:25,088 INFO  L130     BoogieDeclarations]: Found specification of procedure ApproveAndCallFallBack_ApproveAndCallFallBack__success
[2020-11-25 01:53:25,088 INFO  L130     BoogieDeclarations]: Found specification of procedure ApproveAndCallFallBack_ApproveAndCallFallBack__fail
[2020-11-25 01:53:25,088 INFO  L130     BoogieDeclarations]: Found specification of procedure Owned_Owned_NoBaseCtor__fail
[2020-11-25 01:53:25,088 INFO  L130     BoogieDeclarations]: Found specification of procedure Owned_Owned__success
[2020-11-25 01:53:25,089 INFO  L130     BoogieDeclarations]: Found specification of procedure Owned_Owned__fail
[2020-11-25 01:53:25,089 INFO  L130     BoogieDeclarations]: Found specification of procedure transferOwnership~address_Owned__success
[2020-11-25 01:53:25,089 INFO  L130     BoogieDeclarations]: Found specification of procedure transferOwnership~address_Owned__fail
[2020-11-25 01:53:25,089 INFO  L130     BoogieDeclarations]: Found specification of procedure acceptOwnership_Owned__success
[2020-11-25 01:53:25,089 INFO  L130     BoogieDeclarations]: Found specification of procedure acceptOwnership_Owned__fail
[2020-11-25 01:53:25,089 INFO  L130     BoogieDeclarations]: Found specification of procedure owner_Owned__success
[2020-11-25 01:53:25,089 INFO  L130     BoogieDeclarations]: Found specification of procedure owner_Owned__fail
[2020-11-25 01:53:25,089 INFO  L130     BoogieDeclarations]: Found specification of procedure newOwner_Owned__success
[2020-11-25 01:53:25,089 INFO  L130     BoogieDeclarations]: Found specification of procedure newOwner_Owned__fail
[2020-11-25 01:53:25,089 INFO  L130     BoogieDeclarations]: Found specification of procedure MyToken_MyToken_NoBaseCtor__fail
[2020-11-25 01:53:25,090 INFO  L130     BoogieDeclarations]: Found specification of procedure MyToken_MyToken__success
[2020-11-25 01:53:25,090 INFO  L130     BoogieDeclarations]: Found specification of procedure MyToken_MyToken__fail
[2020-11-25 01:53:25,090 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_MyToken__success
[2020-11-25 01:53:25,090 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_MyToken__fail
[2020-11-25 01:53:25,090 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_MyToken__success
[2020-11-25 01:53:25,090 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_MyToken__fail
[2020-11-25 01:53:25,090 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_MyToken__success
[2020-11-25 01:53:25,090 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_MyToken__fail
[2020-11-25 01:53:25,090 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_MyToken__success
[2020-11-25 01:53:25,091 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_MyToken__fail
[2020-11-25 01:53:25,091 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_MyToken__success
[2020-11-25 01:53:25,091 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_MyToken__fail
[2020-11-25 01:53:25,091 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_MyToken__success
[2020-11-25 01:53:25,091 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_MyToken__fail
[2020-11-25 01:53:25,091 INFO  L130     BoogieDeclarations]: Found specification of procedure approveAndCall~address~uint256~bytes_MyToken__success
[2020-11-25 01:53:25,091 INFO  L130     BoogieDeclarations]: Found specification of procedure approveAndCall~address~uint256~bytes_MyToken__fail
[2020-11-25 01:53:25,091 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackMethod_MyToken__fail
[2020-11-25 01:53:25,091 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_MyToken__success
[2020-11-25 01:53:25,092 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_MyToken__fail
[2020-11-25 01:53:25,092 INFO  L130     BoogieDeclarations]: Found specification of procedure name_MyToken__success
[2020-11-25 01:53:25,092 INFO  L130     BoogieDeclarations]: Found specification of procedure name_MyToken__fail
[2020-11-25 01:53:25,092 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_MyToken__success
[2020-11-25 01:53:25,092 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_MyToken__fail
[2020-11-25 01:53:25,092 INFO  L130     BoogieDeclarations]: Found specification of procedure _totalSupply_MyToken__success
[2020-11-25 01:53:25,092 INFO  L130     BoogieDeclarations]: Found specification of procedure _totalSupply_MyToken__fail
[2020-11-25 01:53:25,092 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackDispatch__fail
[2020-11-25 01:53:25,092 INFO  L130     BoogieDeclarations]: Found specification of procedure Fallback_UnknownType__fail
[2020-11-25 01:53:25,093 INFO  L130     BoogieDeclarations]: Found specification of procedure send__fail
[2020-11-25 01:53:25,093 INFO  L130     BoogieDeclarations]: Found specification of procedure onlyOwner_pre__fail
[2020-11-25 01:53:25,093 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreshRefGenerator__fail
[2020-11-25 01:53:25,093 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreshRefGenerator__success
[2020-11-25 01:53:25,093 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath_NoBaseCtor__fail
[2020-11-25 01:53:25,093 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath_NoBaseCtor__success
[2020-11-25 01:53:25,093 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath__fail
[2020-11-25 01:53:25,093 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath__success
[2020-11-25 01:53:25,093 INFO  L138     BoogieDeclarations]: Found implementation of procedure safeAdd~uint256~uint256_SafeMath__fail
[2020-11-25 01:53:25,094 INFO  L138     BoogieDeclarations]: Found implementation of procedure safeAdd~uint256~uint256_SafeMath__success
[2020-11-25 01:53:25,094 INFO  L138     BoogieDeclarations]: Found implementation of procedure safeSub~uint256~uint256_SafeMath__fail
[2020-11-25 01:53:25,094 INFO  L138     BoogieDeclarations]: Found implementation of procedure safeSub~uint256~uint256_SafeMath__success
[2020-11-25 01:53:25,094 INFO  L138     BoogieDeclarations]: Found implementation of procedure safeMul~uint256~uint256_SafeMath__fail
[2020-11-25 01:53:25,094 INFO  L138     BoogieDeclarations]: Found implementation of procedure safeMul~uint256~uint256_SafeMath__success
[2020-11-25 01:53:25,094 INFO  L138     BoogieDeclarations]: Found implementation of procedure safeDiv~uint256~uint256_SafeMath__fail
[2020-11-25 01:53:25,094 INFO  L138     BoogieDeclarations]: Found implementation of procedure safeDiv~uint256~uint256_SafeMath__success
[2020-11-25 01:53:25,095 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Interface_ERC20Interface_NoBaseCtor__fail
[2020-11-25 01:53:25,095 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Interface_ERC20Interface_NoBaseCtor__success
[2020-11-25 01:53:25,095 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Interface_ERC20Interface__fail
[2020-11-25 01:53:25,095 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Interface_ERC20Interface__success
[2020-11-25 01:53:25,095 INFO  L138     BoogieDeclarations]: Found implementation of procedure ApproveAndCallFallBack_ApproveAndCallFallBack_NoBaseCtor__fail
[2020-11-25 01:53:25,095 INFO  L138     BoogieDeclarations]: Found implementation of procedure ApproveAndCallFallBack_ApproveAndCallFallBack_NoBaseCtor__success
[2020-11-25 01:53:25,095 INFO  L138     BoogieDeclarations]: Found implementation of procedure ApproveAndCallFallBack_ApproveAndCallFallBack__fail
[2020-11-25 01:53:25,095 INFO  L138     BoogieDeclarations]: Found implementation of procedure ApproveAndCallFallBack_ApproveAndCallFallBack__success
[2020-11-25 01:53:25,095 INFO  L138     BoogieDeclarations]: Found implementation of procedure Owned_Owned_NoBaseCtor__fail
[2020-11-25 01:53:25,095 INFO  L138     BoogieDeclarations]: Found implementation of procedure Owned_Owned_NoBaseCtor__success
[2020-11-25 01:53:25,096 INFO  L138     BoogieDeclarations]: Found implementation of procedure Owned_Owned__fail
[2020-11-25 01:53:25,096 INFO  L138     BoogieDeclarations]: Found implementation of procedure Owned_Owned__success
[2020-11-25 01:53:25,096 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferOwnership~address_Owned__fail
[2020-11-25 01:53:25,096 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferOwnership~address_Owned__success
[2020-11-25 01:53:25,096 INFO  L138     BoogieDeclarations]: Found implementation of procedure acceptOwnership_Owned__fail
[2020-11-25 01:53:25,096 INFO  L138     BoogieDeclarations]: Found implementation of procedure acceptOwnership_Owned__success
[2020-11-25 01:53:25,096 INFO  L138     BoogieDeclarations]: Found implementation of procedure owner_Owned__fail
[2020-11-25 01:53:25,096 INFO  L138     BoogieDeclarations]: Found implementation of procedure owner_Owned__success
[2020-11-25 01:53:25,096 INFO  L138     BoogieDeclarations]: Found implementation of procedure newOwner_Owned__fail
[2020-11-25 01:53:25,096 INFO  L138     BoogieDeclarations]: Found implementation of procedure newOwner_Owned__success
[2020-11-25 01:53:25,096 INFO  L138     BoogieDeclarations]: Found implementation of procedure MyToken_MyToken_NoBaseCtor__fail
[2020-11-25 01:53:25,097 INFO  L138     BoogieDeclarations]: Found implementation of procedure MyToken_MyToken_NoBaseCtor__success
[2020-11-25 01:53:25,097 INFO  L138     BoogieDeclarations]: Found implementation of procedure MyToken_MyToken__fail
[2020-11-25 01:53:25,097 INFO  L138     BoogieDeclarations]: Found implementation of procedure MyToken_MyToken__success
[2020-11-25 01:53:25,097 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_MyToken__fail
[2020-11-25 01:53:25,097 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_MyToken__success
[2020-11-25 01:53:25,097 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_MyToken__fail
[2020-11-25 01:53:25,097 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_MyToken__success
[2020-11-25 01:53:25,097 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_MyToken__fail
[2020-11-25 01:53:25,097 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_MyToken__success
[2020-11-25 01:53:25,097 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_MyToken__fail
[2020-11-25 01:53:25,097 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_MyToken__success
[2020-11-25 01:53:25,098 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_MyToken__fail
[2020-11-25 01:53:25,098 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_MyToken__success
[2020-11-25 01:53:25,098 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_MyToken__fail
[2020-11-25 01:53:25,098 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_MyToken__success
[2020-11-25 01:53:25,098 INFO  L138     BoogieDeclarations]: Found implementation of procedure approveAndCall~address~uint256~bytes_MyToken__fail
[2020-11-25 01:53:25,098 INFO  L138     BoogieDeclarations]: Found implementation of procedure approveAndCall~address~uint256~bytes_MyToken__success
[2020-11-25 01:53:25,098 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackMethod_MyToken__fail
[2020-11-25 01:53:25,098 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackMethod_MyToken__success
[2020-11-25 01:53:25,098 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_MyToken__fail
[2020-11-25 01:53:25,098 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_MyToken__success
[2020-11-25 01:53:25,098 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_MyToken__fail
[2020-11-25 01:53:25,099 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_MyToken__success
[2020-11-25 01:53:25,099 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_MyToken__fail
[2020-11-25 01:53:25,099 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_MyToken__success
[2020-11-25 01:53:25,099 INFO  L138     BoogieDeclarations]: Found implementation of procedure _totalSupply_MyToken__fail
[2020-11-25 01:53:25,099 INFO  L138     BoogieDeclarations]: Found implementation of procedure _totalSupply_MyToken__success
[2020-11-25 01:53:25,100 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackDispatch__fail
[2020-11-25 01:53:25,100 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackDispatch__success
[2020-11-25 01:53:25,100 INFO  L138     BoogieDeclarations]: Found implementation of procedure Fallback_UnknownType__fail
[2020-11-25 01:53:25,100 INFO  L138     BoogieDeclarations]: Found implementation of procedure Fallback_UnknownType__success
[2020-11-25 01:53:25,100 INFO  L138     BoogieDeclarations]: Found implementation of procedure send__fail
[2020-11-25 01:53:25,100 INFO  L138     BoogieDeclarations]: Found implementation of procedure send__success
[2020-11-25 01:53:25,100 INFO  L138     BoogieDeclarations]: Found implementation of procedure onlyOwner_pre__fail
[2020-11-25 01:53:25,100 INFO  L138     BoogieDeclarations]: Found implementation of procedure onlyOwner_pre__success
[2020-11-25 01:53:25,101 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_SafeMath
[2020-11-25 01:53:25,101 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_SafeMath
[2020-11-25 01:53:25,101 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_ERC20Interface
[2020-11-25 01:53:25,101 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_ERC20Interface
[2020-11-25 01:53:25,101 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_ApproveAndCallFallBack
[2020-11-25 01:53:25,101 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_ApproveAndCallFallBack
[2020-11-25 01:53:25,101 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_Owned
[2020-11-25 01:53:25,102 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_Owned
[2020-11-25 01:53:25,102 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_MyToken
[2020-11-25 01:53:25,102 INFO  L138     BoogieDeclarations]: Found implementation of procedure main
[2020-11-25 01:53:25,102 INFO  L130     BoogieDeclarations]: Found specification of procedure ULTIMATE.start
[2020-11-25 01:53:25,102 INFO  L138     BoogieDeclarations]: Found implementation of procedure ULTIMATE.start
[2020-11-25 01:53:25,587 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 01:53:25,587 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 01:53:25,588 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 01:53:25,771 INFO  L281             CfgBuilder]: Using the 1 location(s) as analysis (start of procedure ULTIMATE.start)
[2020-11-25 01:53:25,772 INFO  L286             CfgBuilder]: Removed 5 assue(true) statements.
[2020-11-25 01:53:25,773 INFO  L202        PluginConnector]: Adding new model MyToken_0xc3957cf07d0970deedfced034a092b496f9067da_transfer-self.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 01:53:25 BoogieIcfgContainer
[2020-11-25 01:53:25,774 INFO  L185        PluginConnector]: Executing the observer RCFGBuilderObserver from plugin RCFGBuilder for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 01:53:25" (2/2) ...
[2020-11-25 01:53:25,774 INFO  L85     RCFGBuilderObserver]: No WrapperNode. Let Ultimate process with next node
[2020-11-25 01:53:25,774 INFO  L205        PluginConnector]: Invalid model from RCFGBuilder for observer de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder.RCFGBuilderObserver@10e90a77 and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 01:53:25, skipping insertion in model container
[2020-11-25 01:53:25,774 INFO  L132        PluginConnector]: ------------------------ END RCFGBuilder----------------------------
[2020-11-25 01:53:25,774 INFO  L113        PluginConnector]: ------------------------UtopiaLTL2Aut----------------------------
[2020-11-25 01:53:25,774 INFO  L271        PluginConnector]: Initializing UtopiaLTL2Aut...
[2020-11-25 01:53:25,776 INFO  L276        PluginConnector]: UtopiaLTL2Aut initialized
[2020-11-25 01:53:25,776 INFO  L185        PluginConnector]: Executing the observer UtopiaLTL2AutObserver from plugin UtopiaLTL2Aut for "MyToken_0xc3957cf07d0970deedfced034a092b496f9067da_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 01:53:24" (1/3) ...
[2020-11-25 01:53:25,776 INFO  L205        PluginConnector]: Invalid model from UtopiaLTL2Aut for observer edu.utexas.cs.utopia.ltl2aut.UtopiaLTL2AutObserver@1b38341b and model type Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 01:53:25, skipping insertion in model container
[2020-11-25 01:53:25,777 INFO  L185        PluginConnector]: Executing the observer UtopiaLTL2AutObserver from plugin UtopiaLTL2Aut for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 01:53:25" (2/3) ...
No working directory specified, using /mnt/data0/jon/SmartPulseTool/ltl2ba
Starting monitored process 1 with /mnt/data0/jon/SmartPulseTool/ltl2ba -f ! ( ( [] ( a -> ( <>b ) ) ) )  (exit command is null, workingDir is null)
[2020-11-25 01:53:25,813 INFO  L202        PluginConnector]: Adding new model Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 01:53:25 NWAContainer
[2020-11-25 01:53:25,813 INFO  L132        PluginConnector]: ------------------------ END UtopiaLTL2Aut----------------------------
[2020-11-25 01:53:25,813 INFO  L113        PluginConnector]: ------------------------BÃ¼chi Program Product----------------------------
[2020-11-25 01:53:25,814 INFO  L271        PluginConnector]: Initializing BÃ¼chi Program Product...
[2020-11-25 01:53:25,814 INFO  L276        PluginConnector]: BÃ¼chi Program Product initialized
[2020-11-25 01:53:25,815 INFO  L185        PluginConnector]: Executing the observer BuchiProductObserver from plugin BÃ¼chi Program Product for "MyToken_0xc3957cf07d0970deedfced034a092b496f9067da_transfer-self.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 01:53:25" (3/4) ...
[2020-11-25 01:53:25,816 INFO  L205        PluginConnector]: Invalid model from BÃ¼chi Program Product for observer de.uni_freiburg.informatik.ultimate.buchiprogramproduct.BuchiProductObserver@4233d8e1 and model type LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 01:53:25, skipping insertion in model container
[2020-11-25 01:53:25,816 INFO  L185        PluginConnector]: Executing the observer BuchiProductObserver from plugin BÃ¼chi Program Product for "Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 01:53:25" (4/4) ...
[2020-11-25 01:53:25,819 INFO  L104   BuchiProductObserver]: Initial property automaton 2 locations, 3 edges
[2020-11-25 01:53:25,822 INFO  L110   BuchiProductObserver]: Initial RCFG 1504 locations, 1890 edges
[2020-11-25 01:53:25,822 INFO  L93    BuchiProductObserver]: Beginning generation of product automaton
[2020-11-25 01:53:25,833 INFO  L136       ProductGenerator]: The program has no step specification, so we assume maximum atomicity
[2020-11-25 01:53:27,318 INFO  L97    BuchiProductObserver]: Finished generation of product automaton successfully
[2020-11-25 01:53:27,324 INFO  L110   BuchiProductObserver]: BuchiProgram size 3568 locations, 6124 edges
[2020-11-25 01:53:27,324 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 01:53:27 BoogieIcfgContainer
[2020-11-25 01:53:27,324 INFO  L132        PluginConnector]: ------------------------ END BÃ¼chi Program Product----------------------------
[2020-11-25 01:53:27,325 INFO  L113        PluginConnector]: ------------------------BlockEncodingV2----------------------------
[2020-11-25 01:53:27,325 INFO  L271        PluginConnector]: Initializing BlockEncodingV2...
[2020-11-25 01:53:27,326 INFO  L276        PluginConnector]: BlockEncodingV2 initialized
[2020-11-25 01:53:27,327 INFO  L185        PluginConnector]: Executing the observer BlockEncodingObserver from plugin BlockEncodingV2 for "LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 01:53:27" (1/1) ...
[2020-11-25 01:53:27,415 INFO  L313           BlockEncoder]: Initial Icfg 3568 locations, 6124 edges
[2020-11-25 01:53:27,415 INFO  L258           BlockEncoder]: Using Remove infeasible edges
[2020-11-25 01:53:27,415 INFO  L270           BlockEncoder]: Using Minimize states even if more edges are added than removed.=true
[2020-11-25 01:53:27,416 INFO  L296           BlockEncoder]: Using Remove sink states
[2020-11-25 01:53:27,416 INFO  L171           BlockEncoder]: Using Apply optimizations until nothing changes=true
[2020-11-25 01:53:27,427 INFO  L70    emoveInfeasibleEdges]: Removed 84 edges and 13 locations because of local infeasibility
[2020-11-25 01:53:27,437 INFO  L70        RemoveSinkStates]: Removed 32 edges and 21 locations by removing sink states
[2020-11-25 01:53:27,448 INFO  L70    emoveInfeasibleEdges]: Removed 0 edges and 0 locations because of local infeasibility
[2020-11-25 01:53:27,452 INFO  L70        RemoveSinkStates]: Removed 0 edges and 0 locations by removing sink states
[2020-11-25 01:53:27,454 INFO  L237           BlockEncoder]: Using Create parallel compositions if possible
[2020-11-25 01:53:27,455 INFO  L66        ParallelComposer]: Creating parallel compositions
[2020-11-25 01:53:27,458 INFO  L313           BlockEncoder]: Encoded RCFG 3512 locations, 5976 edges
[2020-11-25 01:53:27,459 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.blockencoding CFG 25.11 01:53:27 BasicIcfg
[2020-11-25 01:53:27,459 INFO  L132        PluginConnector]: ------------------------ END BlockEncodingV2----------------------------
[2020-11-25 01:53:27,459 INFO  L113        PluginConnector]: ------------------------BuchiAutomizer----------------------------
[2020-11-25 01:53:27,459 INFO  L271        PluginConnector]: Initializing BuchiAutomizer...
[2020-11-25 01:53:27,461 INFO  L276        PluginConnector]: BuchiAutomizer initialized
[2020-11-25 01:53:27,461 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 01:53:27,461 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "MyToken_0xc3957cf07d0970deedfced034a092b496f9067da_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 01:53:24" (1/6) ...
[2020-11-25 01:53:27,463 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@4e731fd7 and model type MyToken_0xc3957cf07d0970deedfced034a092b496f9067da_transfer-self.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 01:53:27, skipping insertion in model container
[2020-11-25 01:53:27,463 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 01:53:27,463 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 01:53:25" (2/6) ...
[2020-11-25 01:53:27,463 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@4e731fd7 and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 01:53:27, skipping insertion in model container
[2020-11-25 01:53:27,463 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 01:53:27,463 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "MyToken_0xc3957cf07d0970deedfced034a092b496f9067da_transfer-self.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 01:53:25" (3/6) ...
[2020-11-25 01:53:27,464 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@4e731fd7 and model type MyToken_0xc3957cf07d0970deedfced034a092b496f9067da_transfer-self.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer CFG 25.11 01:53:27, skipping insertion in model container
[2020-11-25 01:53:27,464 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 01:53:27,464 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 01:53:25" (4/6) ...
[2020-11-25 01:53:27,464 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@4e731fd7 and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 01:53:27, skipping insertion in model container
[2020-11-25 01:53:27,464 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 01:53:27,464 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 01:53:27" (5/6) ...
[2020-11-25 01:53:27,464 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@4e731fd7 and model type LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer OTHER 25.11 01:53:27, skipping insertion in model container
[2020-11-25 01:53:27,464 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 01:53:27,464 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.blockencoding CFG 25.11 01:53:27" (6/6) ...
[2020-11-25 01:53:27,466 INFO  L404   chiAutomizerObserver]: Analyzing ICFG MyToken_0xc3957cf07d0970deedfced034a092b496f9067da_transfer-self.bpl_BEv2
[2020-11-25 01:53:27,499 INFO  L133   ementStrategyFactory]: Using default assertion order modulation
[2020-11-25 01:53:27,499 INFO  L377         BuchiCegarLoop]: Interprodecural is true
[2020-11-25 01:53:27,499 INFO  L378         BuchiCegarLoop]: Hoare is false
[2020-11-25 01:53:27,499 INFO  L379         BuchiCegarLoop]: Compute interpolants for Craig_TreeInterpolation
[2020-11-25 01:53:27,499 INFO  L380         BuchiCegarLoop]: Backedges is STRAIGHT_LINE
[2020-11-25 01:53:27,499 INFO  L381         BuchiCegarLoop]: Determinization is PREDICATE_ABSTRACTION
[2020-11-25 01:53:27,499 INFO  L382         BuchiCegarLoop]: Difference is false
[2020-11-25 01:53:27,499 INFO  L383         BuchiCegarLoop]: Minimize is MINIMIZE_SEVPA
[2020-11-25 01:53:27,499 INFO  L386         BuchiCegarLoop]: ======== Iteration 0==of CEGAR loop == BuchiCegarLoop========
[2020-11-25 01:53:27,528 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 3512 states.
[2020-11-25 01:53:27,571 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 01:53:27,571 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 01:53:27,571 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 01:53:27,578 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 01:53:27,578 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 01:53:27,578 INFO  L445         BuchiCegarLoop]: ======== Iteration 1============
[2020-11-25 01:53:27,579 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 3512 states.
[2020-11-25 01:53:27,598 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 01:53:27,598 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 01:53:27,598 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 01:53:27,600 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 01:53:27,600 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_MyToken0 := false;
[L2]                 call_transfer_MyToken0 := false;
[L2]     CALL        call main();
[L4123]              assume null == 0;
[L4124]  CALL        call this := FreshRefGenerator__success();
[L1863]              havoc newRef;
[L1864]              assume Alloc[newRef] == false;
[L1865]              Alloc[newRef] := true;
[L1866]              assume newRef != null;
[L4124]  RET         call this := FreshRefGenerator__success();
[L4125]              assume now >= 0;
[L4126]              assume DType[this] == MyToken;
[L4127]              assume msgvalue_MSG == 0;
[L4128]              gas := gas - 53000;
[L4129]  CALL        call MyToken_MyToken(this, msgsender_MSG, msgvalue_MSG, tokenName_s318, tokenSymbol_s318, tokenDecimals_s318, initialSupply_s318);
[L768]               havoc __exception;
[L769]               revert := false;
[L770]   COND FALSE  !(__exception)
[L793]   CALL        call MyToken_MyToken__success(this, msgsender_MSG, msgvalue_MSG, tokenName_s318, tokenSymbol_s318, tokenDecimals_s318, initialSupply_s318);
[L2217]  CALL        call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L1999]  CALL        call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1984]              assume msgsender_MSG != null;
[L1985]              Balance[this] := 0;
[L1999]  RET         call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2000]  COND FALSE  !(revert)
[L2217]  RET         call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L2218]  COND TRUE   revert
[L793]   RET         call MyToken_MyToken__success(this, msgsender_MSG, msgvalue_MSG, tokenName_s318, tokenSymbol_s318, tokenDecimals_s318, initialSupply_s318);
[L794]               assume !revert && gas >= 0;
[L4129]  RET         call MyToken_MyToken(this, msgsender_MSG, msgvalue_MSG, tokenName_s318, tokenSymbol_s318, tokenDecimals_s318, initialSupply_s318);
[L4130]              assume !revert && gas >= 0;

Loop:
[L4133]  CALL        call CorralChoice_MyToken(this);
[L3926]              havoc msgsender_MSG;
[L3927]              havoc msgvalue_MSG;
[L3928]              havoc choice;
[L3929]              havoc a_s23;
[L3930]              havoc b_s23;
[L3931]              havoc c_s23;
[L3932]              havoc a_s45;
[L3933]              havoc b_s45;
[L3934]              havoc c_s45;
[L3935]              havoc a_s73;
[L3936]              havoc b_s73;
[L3937]              havoc c_s73;
[L3938]              havoc a_s95;
[L3939]              havoc b_s95;
[L3940]              havoc c_s95;
[L3941]              havoc __ret_0_totalSupply;
[L3942]              havoc tokenOwner_s344;
[L3943]              havoc balance_s344;
[L3944]              havoc tokenOwner_s490;
[L3945]              havoc spender_s490;
[L3946]              havoc remaining_s490;
[L3947]              havoc to_s387;
[L3948]              havoc tokens_s387;
[L3949]              havoc success_s387;
[L3950]              havoc spender_s415;
[L3951]              havoc tokens_s415;
[L3952]              havoc success_s415;
[L3953]              havoc from_s474;
[L3954]              havoc to_s474;
[L3955]              havoc tokens_s474;
[L3956]              havoc success_s474;
[L3957]              havoc __ret_0_owner;
[L3958]              havoc __ret_0_newOwner;
[L3959]              havoc _newOwner_s217;
[L3960]              havoc __ret_0_symbol;
[L3961]              havoc __ret_0_name;
[L3962]              havoc __ret_0_decimals;
[L3963]              havoc __ret_0__totalSupply;
[L3964]              havoc tokenName_s318;
[L3965]              havoc tokenSymbol_s318;
[L3966]              havoc tokenDecimals_s318;
[L3967]              havoc initialSupply_s318;
[L3968]              havoc spender_s533;
[L3969]              havoc tokens_s533;
[L3970]              havoc data_s533;
[L3971]              havoc success_s533;
[L3972]              havoc tmpNow;
[L3973]              havoc gas;
[L3974]              assume gas > 4000000 && gas <= 8000000;
[L3975]              tmpNow := now;
[L3976]              havoc now;
[L3977]              assume now > tmpNow;
[L3978]              assume msgsender_MSG != null;
[L3979]              assume DType[msgsender_MSG] != SafeMath;
[L3980]              assume DType[msgsender_MSG] != ERC20Interface;
[L3981]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L3982]              assume DType[msgsender_MSG] != Owned;
[L3983]              assume DType[msgsender_MSG] != MyToken;
[L3984]              Alloc[msgsender_MSG] := true;
[L3985]  COND TRUE   choice == 19
[L3986]              gas := gas - 21000;
[L3987]  COND FALSE  !(gas >= 0)
[L4133]  RET         call CorralChoice_MyToken(this);

[2020-11-25 01:53:27,615 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 01:53:27,616 INFO  L82        PathProgramCache]: Analyzing trace with hash 1159260330, now seen corresponding path program 1 times
[2020-11-25 01:53:27,619 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 01:53:27,638 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 01:53:27,669 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 01:53:27,670 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 01:53:27,670 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [4] imperfect sequences [] total 4
[2020-11-25 01:53:27,673 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 01:53:27,859 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-11-25 01:53:27,860 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=5, Invalid=7, Unknown=0, NotChecked=0, Total=12
[2020-11-25 01:53:27,861 INFO  L87              Difference]: Start difference. First operand 3512 states. Second operand 4 states.
[2020-11-25 01:53:28,565 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 01:53:28,565 INFO  L93              Difference]: Finished difference Result 3716 states and 5981 transitions.
[2020-11-25 01:53:28,565 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 4 states. 
[2020-11-25 01:53:28,566 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 3716 states and 5981 transitions.
[2020-11-25 01:53:28,592 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 6
[2020-11-25 01:53:28,625 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 3716 states to 3612 states and 5830 transitions.
[2020-11-25 01:53:28,625 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 13
[2020-11-25 01:53:28,630 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1432
[2020-11-25 01:53:28,630 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 3612 states and 5830 transitions.
[2020-11-25 01:53:28,643 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 01:53:28,643 INFO  L728         BuchiCegarLoop]: Abstraction has 3612 states and 5830 transitions.
[2020-11-25 01:53:28,657 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 3612 states and 5830 transitions.
[2020-11-25 01:53:28,705 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 3612 to 2590.
[2020-11-25 01:53:28,706 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 2590 states.
[2020-11-25 01:53:28,712 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 2590 states to 2590 states and 3942 transitions.
[2020-11-25 01:53:28,713 INFO  L751         BuchiCegarLoop]: Abstraction has 2590 states and 3942 transitions.
[2020-11-25 01:53:28,713 INFO  L631         BuchiCegarLoop]: Abstraction has 2590 states and 3942 transitions.
[2020-11-25 01:53:28,714 INFO  L445         BuchiCegarLoop]: ======== Iteration 2============
[2020-11-25 01:53:28,714 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2590 states and 3942 transitions.
[2020-11-25 01:53:28,720 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 01:53:28,720 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 01:53:28,720 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 01:53:28,722 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 01:53:28,722 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_MyToken0 := false;
[L2]                 call_transfer_MyToken0 := false;
[L2]     CALL        call main();
[L4123]              assume null == 0;
[L4124]  CALL        call this := FreshRefGenerator__success();
[L1863]              havoc newRef;
[L1864]              assume Alloc[newRef] == false;
[L1865]              Alloc[newRef] := true;
[L1866]              assume newRef != null;
[L4124]  RET         call this := FreshRefGenerator__success();
[L4125]              assume now >= 0;
[L4126]              assume DType[this] == MyToken;
[L4127]              assume msgvalue_MSG == 0;
[L4128]              gas := gas - 53000;
[L4129]  CALL        call MyToken_MyToken(this, msgsender_MSG, msgvalue_MSG, tokenName_s318, tokenSymbol_s318, tokenDecimals_s318, initialSupply_s318);
[L768]               havoc __exception;
[L769]               revert := false;
[L770]   COND FALSE  !(__exception)
[L793]   CALL        call MyToken_MyToken__success(this, msgsender_MSG, msgvalue_MSG, tokenName_s318, tokenSymbol_s318, tokenDecimals_s318, initialSupply_s318);
[L2217]  CALL        call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L1999]  CALL        call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1984]              assume msgsender_MSG != null;
[L1985]              Balance[this] := 0;
[L1999]  RET         call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2000]  COND FALSE  !(revert)
[L2217]  RET         call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L2218]  COND FALSE  !(revert)
[L2221]  CALL        call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L2069]  CALL        call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2051]              assume msgsender_MSG != null;
[L2052]              Balance[this] := 0;
[L2053]              owner_Owned[this] := null;
[L2054]              newOwner_Owned[this] := null;
[L2056]              owner_Owned[this] := msgsender_MSG;
[L2069]  RET         call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2070]  COND FALSE  !(revert)
[L2221]  RET         call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L2222]  COND FALSE  !(revert)
[L2225]  CALL        call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1895]  CALL        call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1880]              assume msgsender_MSG != null;
[L1881]              Balance[this] := 0;
[L1895]  RET         call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1896]  COND FALSE  !(revert)
[L2225]  RET         call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L2226]  COND FALSE  !(revert)
[L2229]  CALL        call MyToken_MyToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, tokenName_s318, tokenSymbol_s318, tokenDecimals_s318, initialSupply_s318);
[L2171]              assume msgsender_MSG != null;
[L2172]              Balance[this] := 0;
[L2173]              symbol_MyToken[this] := -1251229519;
[L2174]              name_MyToken[this] := -1251229519;
[L2175]              decimals_MyToken[this] := 0;
[L2176]              _totalSupply_MyToken[this] := 0;
[L2177]              balances_MyToken[this] := zeroRefintArr();
[L2178]              sum_balances0[this] := 0;
[L2179]              allowed_MyToken[this] := zeroRefRefintArr();
[L2180]              sum_allowed1[this] := 0;
[L2182]              name_MyToken[this] := tokenName_s318;
[L2183]              symbol_MyToken[this] := tokenSymbol_s318;
[L2184]              decimals_MyToken[this] := tokenDecimals_s318;
[L2185]              __var_2 := tokenDecimals_s318 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2186]              _totalSupply_MyToken[this] := nonlinearMul(initialSupply_s318, nonlinearPow(10, tokenDecimals_s318 % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2187]              sum_balances0[this] := sum_balances0[this] - balances_MyToken[this][msgsender_MSG];
[L2188]              balances_MyToken[this][msgsender_MSG] := _totalSupply_MyToken[this];
[L2189]              sum_balances0[this] := sum_balances0[this] + balances_MyToken[this][msgsender_MSG];
[L2190]              assert { :EventEmitted "Transfer_MyToken" } true;
[L2229]  RET         call MyToken_MyToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, tokenName_s318, tokenSymbol_s318, tokenDecimals_s318, initialSupply_s318);
[L2230]  COND FALSE  !(revert)
[L793]   RET         call MyToken_MyToken__success(this, msgsender_MSG, msgvalue_MSG, tokenName_s318, tokenSymbol_s318, tokenDecimals_s318, initialSupply_s318);
[L794]               assume !revert && gas >= 0;
[L4129]  RET         call MyToken_MyToken(this, msgsender_MSG, msgvalue_MSG, tokenName_s318, tokenSymbol_s318, tokenDecimals_s318, initialSupply_s318);
[L4130]              assume !revert && gas >= 0;

Loop:
[L4133]  CALL        call CorralChoice_MyToken(this);
[L3926]              havoc msgsender_MSG;
[L3927]              havoc msgvalue_MSG;
[L3928]              havoc choice;
[L3929]              havoc a_s23;
[L3930]              havoc b_s23;
[L3931]              havoc c_s23;
[L3932]              havoc a_s45;
[L3933]              havoc b_s45;
[L3934]              havoc c_s45;
[L3935]              havoc a_s73;
[L3936]              havoc b_s73;
[L3937]              havoc c_s73;
[L3938]              havoc a_s95;
[L3939]              havoc b_s95;
[L3940]              havoc c_s95;
[L3941]              havoc __ret_0_totalSupply;
[L3942]              havoc tokenOwner_s344;
[L3943]              havoc balance_s344;
[L3944]              havoc tokenOwner_s490;
[L3945]              havoc spender_s490;
[L3946]              havoc remaining_s490;
[L3947]              havoc to_s387;
[L3948]              havoc tokens_s387;
[L3949]              havoc success_s387;
[L3950]              havoc spender_s415;
[L3951]              havoc tokens_s415;
[L3952]              havoc success_s415;
[L3953]              havoc from_s474;
[L3954]              havoc to_s474;
[L3955]              havoc tokens_s474;
[L3956]              havoc success_s474;
[L3957]              havoc __ret_0_owner;
[L3958]              havoc __ret_0_newOwner;
[L3959]              havoc _newOwner_s217;
[L3960]              havoc __ret_0_symbol;
[L3961]              havoc __ret_0_name;
[L3962]              havoc __ret_0_decimals;
[L3963]              havoc __ret_0__totalSupply;
[L3964]              havoc tokenName_s318;
[L3965]              havoc tokenSymbol_s318;
[L3966]              havoc tokenDecimals_s318;
[L3967]              havoc initialSupply_s318;
[L3968]              havoc spender_s533;
[L3969]              havoc tokens_s533;
[L3970]              havoc data_s533;
[L3971]              havoc success_s533;
[L3972]              havoc tmpNow;
[L3973]              havoc gas;
[L3974]              assume gas > 4000000 && gas <= 8000000;
[L3975]              tmpNow := now;
[L3976]              havoc now;
[L3977]              assume now > tmpNow;
[L3978]              assume msgsender_MSG != null;
[L3979]              assume DType[msgsender_MSG] != SafeMath;
[L3980]              assume DType[msgsender_MSG] != ERC20Interface;
[L3981]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L3982]              assume DType[msgsender_MSG] != Owned;
[L3983]              assume DType[msgsender_MSG] != MyToken;
[L3984]              Alloc[msgsender_MSG] := true;
[L3985]  COND TRUE   choice == 19
[L3986]              gas := gas - 21000;
[L3987]  COND FALSE  !(gas >= 0)
[L4133]  RET         call CorralChoice_MyToken(this);

[2020-11-25 01:53:28,725 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 01:53:28,725 INFO  L82        PathProgramCache]: Analyzing trace with hash -260284492, now seen corresponding path program 1 times
[2020-11-25 01:53:28,725 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 01:53:28,732 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 01:53:28,746 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 01:53:28,746 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 01:53:28,746 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [4] imperfect sequences [] total 4
[2020-11-25 01:53:28,747 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 01:53:28,747 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-11-25 01:53:28,747 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=5, Invalid=7, Unknown=0, NotChecked=0, Total=12
[2020-11-25 01:53:28,747 INFO  L87              Difference]: Start difference. First operand 2590 states and 3942 transitions. cyclomatic complexity: 1354 Second operand 4 states.
[2020-11-25 01:53:29,235 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 01:53:29,235 INFO  L93              Difference]: Finished difference Result 2398 states and 2561 transitions.
[2020-11-25 01:53:29,235 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 4 states. 
[2020-11-25 01:53:29,235 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2398 states and 2561 transitions.
[2020-11-25 01:53:29,242 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 01:53:29,249 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2398 states to 2398 states and 2561 transitions.
[2020-11-25 01:53:29,249 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 903
[2020-11-25 01:53:29,250 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 903
[2020-11-25 01:53:29,250 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 2398 states and 2561 transitions.
[2020-11-25 01:53:29,251 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 01:53:29,252 INFO  L728         BuchiCegarLoop]: Abstraction has 2398 states and 2561 transitions.
[2020-11-25 01:53:29,254 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 2398 states and 2561 transitions.
[2020-11-25 01:53:29,270 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 2398 to 2398.
[2020-11-25 01:53:29,270 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 2398 states.
[2020-11-25 01:53:29,273 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 2398 states to 2398 states and 2561 transitions.
[2020-11-25 01:53:29,273 INFO  L751         BuchiCegarLoop]: Abstraction has 2398 states and 2561 transitions.
[2020-11-25 01:53:29,273 INFO  L631         BuchiCegarLoop]: Abstraction has 2398 states and 2561 transitions.
[2020-11-25 01:53:29,273 INFO  L445         BuchiCegarLoop]: ======== Iteration 3============
[2020-11-25 01:53:29,273 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2398 states and 2561 transitions.
[2020-11-25 01:53:29,278 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 01:53:29,278 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 01:53:29,278 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 01:53:29,280 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 01:53:29,280 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_MyToken0 := false;
[L2]                 call_transfer_MyToken0 := false;
[L2]     CALL        call main();
[L4123]              assume null == 0;
[L4124]  CALL        call this := FreshRefGenerator__success();
[L1863]              havoc newRef;
[L1864]              assume Alloc[newRef] == false;
[L1865]              Alloc[newRef] := true;
[L1866]              assume newRef != null;
[L4124]  RET         call this := FreshRefGenerator__success();
[L4125]              assume now >= 0;
[L4126]              assume DType[this] == MyToken;
[L4127]              assume msgvalue_MSG == 0;
[L4128]              gas := gas - 53000;
[L4129]  CALL        call MyToken_MyToken(this, msgsender_MSG, msgvalue_MSG, tokenName_s318, tokenSymbol_s318, tokenDecimals_s318, initialSupply_s318);
[L768]               havoc __exception;
[L769]               revert := false;
[L770]   COND FALSE  !(__exception)
[L793]   CALL        call MyToken_MyToken__success(this, msgsender_MSG, msgvalue_MSG, tokenName_s318, tokenSymbol_s318, tokenDecimals_s318, initialSupply_s318);
[L2217]  CALL        call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L1999]  CALL        call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1984]              assume msgsender_MSG != null;
[L1985]              Balance[this] := 0;
[L1999]  RET         call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2000]  COND FALSE  !(revert)
[L2217]  RET         call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L2218]  COND FALSE  !(revert)
[L2221]  CALL        call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L2069]  CALL        call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2051]              assume msgsender_MSG != null;
[L2052]              Balance[this] := 0;
[L2053]              owner_Owned[this] := null;
[L2054]              newOwner_Owned[this] := null;
[L2056]              owner_Owned[this] := msgsender_MSG;
[L2069]  RET         call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2070]  COND FALSE  !(revert)
[L2221]  RET         call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L2222]  COND FALSE  !(revert)
[L2225]  CALL        call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1895]  CALL        call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1880]              assume msgsender_MSG != null;
[L1881]              Balance[this] := 0;
[L1895]  RET         call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1896]  COND FALSE  !(revert)
[L2225]  RET         call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L2226]  COND FALSE  !(revert)
[L2229]  CALL        call MyToken_MyToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, tokenName_s318, tokenSymbol_s318, tokenDecimals_s318, initialSupply_s318);
[L2171]              assume msgsender_MSG != null;
[L2172]              Balance[this] := 0;
[L2173]              symbol_MyToken[this] := -1251229519;
[L2174]              name_MyToken[this] := -1251229519;
[L2175]              decimals_MyToken[this] := 0;
[L2176]              _totalSupply_MyToken[this] := 0;
[L2177]              balances_MyToken[this] := zeroRefintArr();
[L2178]              sum_balances0[this] := 0;
[L2179]              allowed_MyToken[this] := zeroRefRefintArr();
[L2180]              sum_allowed1[this] := 0;
[L2182]              name_MyToken[this] := tokenName_s318;
[L2183]              symbol_MyToken[this] := tokenSymbol_s318;
[L2184]              decimals_MyToken[this] := tokenDecimals_s318;
[L2185]              __var_2 := tokenDecimals_s318 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2186]              _totalSupply_MyToken[this] := nonlinearMul(initialSupply_s318, nonlinearPow(10, tokenDecimals_s318 % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2187]              sum_balances0[this] := sum_balances0[this] - balances_MyToken[this][msgsender_MSG];
[L2188]              balances_MyToken[this][msgsender_MSG] := _totalSupply_MyToken[this];
[L2189]              sum_balances0[this] := sum_balances0[this] + balances_MyToken[this][msgsender_MSG];
[L2190]              assert { :EventEmitted "Transfer_MyToken" } true;
[L2229]  RET         call MyToken_MyToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, tokenName_s318, tokenSymbol_s318, tokenDecimals_s318, initialSupply_s318);
[L2230]  COND FALSE  !(revert)
[L793]   RET         call MyToken_MyToken__success(this, msgsender_MSG, msgvalue_MSG, tokenName_s318, tokenSymbol_s318, tokenDecimals_s318, initialSupply_s318);
[L794]               assume !revert && gas >= 0;
[L4129]  RET         call MyToken_MyToken(this, msgsender_MSG, msgvalue_MSG, tokenName_s318, tokenSymbol_s318, tokenDecimals_s318, initialSupply_s318);
[L4130]              assume !revert && gas >= 0;
[L4133]  CALL        call CorralChoice_MyToken(this);
[L3926]              havoc msgsender_MSG;
[L3927]              havoc msgvalue_MSG;
[L3928]              havoc choice;
[L3929]              havoc a_s23;
[L3930]              havoc b_s23;
[L3931]              havoc c_s23;
[L3932]              havoc a_s45;
[L3933]              havoc b_s45;
[L3934]              havoc c_s45;
[L3935]              havoc a_s73;
[L3936]              havoc b_s73;
[L3937]              havoc c_s73;
[L3938]              havoc a_s95;
[L3939]              havoc b_s95;
[L3940]              havoc c_s95;
[L3941]              havoc __ret_0_totalSupply;
[L3942]              havoc tokenOwner_s344;
[L3943]              havoc balance_s344;
[L3944]              havoc tokenOwner_s490;
[L3945]              havoc spender_s490;
[L3946]              havoc remaining_s490;
[L3947]              havoc to_s387;
[L3948]              havoc tokens_s387;
[L3949]              havoc success_s387;
[L3950]              havoc spender_s415;
[L3951]              havoc tokens_s415;
[L3952]              havoc success_s415;
[L3953]              havoc from_s474;
[L3954]              havoc to_s474;
[L3955]              havoc tokens_s474;
[L3956]              havoc success_s474;
[L3957]              havoc __ret_0_owner;
[L3958]              havoc __ret_0_newOwner;
[L3959]              havoc _newOwner_s217;
[L3960]              havoc __ret_0_symbol;
[L3961]              havoc __ret_0_name;
[L3962]              havoc __ret_0_decimals;
[L3963]              havoc __ret_0__totalSupply;
[L3964]              havoc tokenName_s318;
[L3965]              havoc tokenSymbol_s318;
[L3966]              havoc tokenDecimals_s318;
[L3967]              havoc initialSupply_s318;
[L3968]              havoc spender_s533;
[L3969]              havoc tokens_s533;
[L3970]              havoc data_s533;
[L3971]              havoc success_s533;
[L3972]              havoc tmpNow;
[L3973]              havoc gas;
[L3974]              assume gas > 4000000 && gas <= 8000000;
[L3975]              tmpNow := now;
[L3976]              havoc now;
[L3977]              assume now > tmpNow;
[L3978]              assume msgsender_MSG != null;
[L3979]              assume DType[msgsender_MSG] != SafeMath;
[L3980]              assume DType[msgsender_MSG] != ERC20Interface;
[L3981]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L3982]              assume DType[msgsender_MSG] != Owned;
[L3983]              assume DType[msgsender_MSG] != MyToken;
[L3984]              Alloc[msgsender_MSG] := true;
[L3985]  COND FALSE  !(choice == 19)
[L3993]  COND FALSE  !(choice == 18)
[L4001]  COND FALSE  !(choice == 17)
[L4009]  COND FALSE  !(choice == 16)
[L4017]  COND FALSE  !(choice == 15)
[L4023]  COND FALSE  !(choice == 14)
[L4029]  COND FALSE  !(choice == 13)
[L4035]  COND TRUE   choice == 12
[L4036]              gas := gas - 21000;
[L4037]  COND TRUE   gas >= 0
[L4038]              assume tokens_s387 >= 0 && tokens_s387 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4039]              assume msgvalue_MSG == 0;
[L4040]  CALL        call success_s387 := transfer~address~uint256_MyToken(this, msgsender_MSG, msgvalue_MSG, to_s387, tokens_s387);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == to_s387 && tokens_s387 <= balances_MyToken[this][msgsender_MSG]) && tokens_s387 >= 0) && tokens_s387 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_MyToken[this][to_s387] >= 0) && balances_MyToken[this][to_s387] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_MyToken[this][msgsender_MSG] >= 0) && balances_MyToken[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_MyToken0 := true;
[L2]                 call_transfer_MyToken0 := false;
[L2]                 revert := revert_hold;
[L932]               havoc __exception;
[L933]               revert := false;
[L934]   COND TRUE   __exception
[L935]               __tmp__Balance := Balance;
[L936]               __tmp__DType := DType;
[L937]               __tmp__Alloc := Alloc;
[L938]               __tmp__balance_ADDR := balance_ADDR;
[L939]               __tmp__M_Ref_int := M_Ref_int;
[L940]               __tmp__sum_balances0 := sum_balances0;
[L941]               __tmp__alloc_allowed_MyToken_lvl0 := alloc_allowed_MyToken_lvl0;
[L942]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L943]               __tmp__sum_allowed1 := sum_allowed1;
[L944]               __tmp__Length := Length;
[L945]               __tmp__now := now;
[L946]               __tmp__owner_Owned := owner_Owned;
[L947]               __tmp__newOwner_Owned := newOwner_Owned;
[L948]               __tmp__symbol_MyToken := symbol_MyToken;
[L949]               __tmp__name_MyToken := name_MyToken;
[L950]               __tmp__decimals_MyToken := decimals_MyToken;
[L951]               __tmp___totalSupply_MyToken := _totalSupply_MyToken;
[L952]               __tmp__balances_MyToken := balances_MyToken;
[L953]               __tmp__allowed_MyToken := allowed_MyToken;
[L954]   CALL        call success_s387 := transfer~address~uint256_MyToken__fail(this, msgsender_MSG, msgvalue_MSG, to_s387, tokens_s387);
[L2267]  COND TRUE   __tmp__DType[this] == MyToken
[L2268]  CALL        call __var_4 := safeSub~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balances_MyToken[this][msgsender_MSG], tokens_s387);
[L1921]  COND TRUE   !(b_s45 <= a_s45)
[L1922]              revert := true;
[L2268]  RET         call __var_4 := safeSub~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balances_MyToken[this][msgsender_MSG], tokens_s387);
[L2269]  COND TRUE   revert
[L954]   RET         call success_s387 := transfer~address~uint256_MyToken__fail(this, msgsender_MSG, msgvalue_MSG, to_s387, tokens_s387);
[L955]               assume revert || gas < 0;
[L4040]  RET         call success_s387 := transfer~address~uint256_MyToken(this, msgsender_MSG, msgvalue_MSG, to_s387, tokens_s387);
[L4133]  RET         call CorralChoice_MyToken(this);

Loop:
[L4133]  CALL        call CorralChoice_MyToken(this);
[L3926]              havoc msgsender_MSG;
[L3927]              havoc msgvalue_MSG;
[L3928]              havoc choice;
[L3929]              havoc a_s23;
[L3930]              havoc b_s23;
[L3931]              havoc c_s23;
[L3932]              havoc a_s45;
[L3933]              havoc b_s45;
[L3934]              havoc c_s45;
[L3935]              havoc a_s73;
[L3936]              havoc b_s73;
[L3937]              havoc c_s73;
[L3938]              havoc a_s95;
[L3939]              havoc b_s95;
[L3940]              havoc c_s95;
[L3941]              havoc __ret_0_totalSupply;
[L3942]              havoc tokenOwner_s344;
[L3943]              havoc balance_s344;
[L3944]              havoc tokenOwner_s490;
[L3945]              havoc spender_s490;
[L3946]              havoc remaining_s490;
[L3947]              havoc to_s387;
[L3948]              havoc tokens_s387;
[L3949]              havoc success_s387;
[L3950]              havoc spender_s415;
[L3951]              havoc tokens_s415;
[L3952]              havoc success_s415;
[L3953]              havoc from_s474;
[L3954]              havoc to_s474;
[L3955]              havoc tokens_s474;
[L3956]              havoc success_s474;
[L3957]              havoc __ret_0_owner;
[L3958]              havoc __ret_0_newOwner;
[L3959]              havoc _newOwner_s217;
[L3960]              havoc __ret_0_symbol;
[L3961]              havoc __ret_0_name;
[L3962]              havoc __ret_0_decimals;
[L3963]              havoc __ret_0__totalSupply;
[L3964]              havoc tokenName_s318;
[L3965]              havoc tokenSymbol_s318;
[L3966]              havoc tokenDecimals_s318;
[L3967]              havoc initialSupply_s318;
[L3968]              havoc spender_s533;
[L3969]              havoc tokens_s533;
[L3970]              havoc data_s533;
[L3971]              havoc success_s533;
[L3972]              havoc tmpNow;
[L3973]              havoc gas;
[L3974]              assume gas > 4000000 && gas <= 8000000;
[L3975]              tmpNow := now;
[L3976]              havoc now;
[L3977]              assume now > tmpNow;
[L3978]              assume msgsender_MSG != null;
[L3979]              assume DType[msgsender_MSG] != SafeMath;
[L3980]              assume DType[msgsender_MSG] != ERC20Interface;
[L3981]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L3982]              assume DType[msgsender_MSG] != Owned;
[L3983]              assume DType[msgsender_MSG] != MyToken;
[L3984]              Alloc[msgsender_MSG] := true;
[L3985]  COND FALSE  !(choice == 19)
[L3993]  COND FALSE  !(choice == 18)
[L4001]  COND FALSE  !(choice == 17)
[L4009]  COND FALSE  !(choice == 16)
[L4017]  COND FALSE  !(choice == 15)
[L4023]  COND FALSE  !(choice == 14)
[L4029]  COND FALSE  !(choice == 13)
[L4035]  COND TRUE   choice == 12
[L4036]              gas := gas - 21000;
[L4037]  COND TRUE   gas >= 0
[L4038]              assume tokens_s387 >= 0 && tokens_s387 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4039]              assume msgvalue_MSG == 0;
[L4040]  CALL        call success_s387 := transfer~address~uint256_MyToken(this, msgsender_MSG, msgvalue_MSG, to_s387, tokens_s387);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == to_s387 && tokens_s387 <= balances_MyToken[this][msgsender_MSG]) && tokens_s387 >= 0) && tokens_s387 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_MyToken[this][to_s387] >= 0) && balances_MyToken[this][to_s387] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_MyToken[this][msgsender_MSG] >= 0) && balances_MyToken[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_MyToken0 := true;
[L2]                 call_transfer_MyToken0 := false;
[L2]                 revert := revert_hold;
[L932]               havoc __exception;
[L933]               revert := false;
[L934]   COND TRUE   __exception
[L935]               __tmp__Balance := Balance;
[L936]               __tmp__DType := DType;
[L937]               __tmp__Alloc := Alloc;
[L938]               __tmp__balance_ADDR := balance_ADDR;
[L939]               __tmp__M_Ref_int := M_Ref_int;
[L940]               __tmp__sum_balances0 := sum_balances0;
[L941]               __tmp__alloc_allowed_MyToken_lvl0 := alloc_allowed_MyToken_lvl0;
[L942]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L943]               __tmp__sum_allowed1 := sum_allowed1;
[L944]               __tmp__Length := Length;
[L945]               __tmp__now := now;
[L946]               __tmp__owner_Owned := owner_Owned;
[L947]               __tmp__newOwner_Owned := newOwner_Owned;
[L948]               __tmp__symbol_MyToken := symbol_MyToken;
[L949]               __tmp__name_MyToken := name_MyToken;
[L950]               __tmp__decimals_MyToken := decimals_MyToken;
[L951]               __tmp___totalSupply_MyToken := _totalSupply_MyToken;
[L952]               __tmp__balances_MyToken := balances_MyToken;
[L953]               __tmp__allowed_MyToken := allowed_MyToken;
[L954]   CALL        call success_s387 := transfer~address~uint256_MyToken__fail(this, msgsender_MSG, msgvalue_MSG, to_s387, tokens_s387);
[L2267]  COND TRUE   __tmp__DType[this] == MyToken
[L2268]  CALL        call __var_4 := safeSub~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balances_MyToken[this][msgsender_MSG], tokens_s387);
[L1921]  COND TRUE   !(b_s45 <= a_s45)
[L1922]              revert := true;
[L2268]  RET         call __var_4 := safeSub~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balances_MyToken[this][msgsender_MSG], tokens_s387);
[L2269]  COND TRUE   revert
[L954]   RET         call success_s387 := transfer~address~uint256_MyToken__fail(this, msgsender_MSG, msgvalue_MSG, to_s387, tokens_s387);
[L955]               assume revert || gas < 0;
[L4040]  RET         call success_s387 := transfer~address~uint256_MyToken(this, msgsender_MSG, msgvalue_MSG, to_s387, tokens_s387);
[L4133]  RET         call CorralChoice_MyToken(this);

[2020-11-25 01:53:29,285 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 01:53:29,285 INFO  L82        PathProgramCache]: Analyzing trace with hash 319613391, now seen corresponding path program 1 times
[2020-11-25 01:53:29,285 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 01:53:29,301 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 01:53:29,371 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 01:53:29,371 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 01:53:29,371 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [7] imperfect sequences [] total 7
[2020-11-25 01:53:29,371 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 01:53:29,372 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 7 interpolants.
[2020-11-25 01:53:29,372 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=11, Invalid=31, Unknown=0, NotChecked=0, Total=42
[2020-11-25 01:53:29,372 INFO  L87              Difference]: Start difference. First operand 2398 states and 2561 transitions. cyclomatic complexity: 165 Second operand 7 states.
[2020-11-25 01:53:30,181 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 01:53:30,182 INFO  L93              Difference]: Finished difference Result 2590 states and 2767 transitions.
[2020-11-25 01:53:30,182 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 8 states. 
[2020-11-25 01:53:30,182 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2590 states and 2767 transitions.
[2020-11-25 01:53:30,189 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 01:53:30,196 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2590 states to 2590 states and 2767 transitions.
[2020-11-25 01:53:30,196 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 973
[2020-11-25 01:53:30,197 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 973
[2020-11-25 01:53:30,197 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 2590 states and 2767 transitions.
[2020-11-25 01:53:30,199 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 01:53:30,199 INFO  L728         BuchiCegarLoop]: Abstraction has 2590 states and 2767 transitions.
[2020-11-25 01:53:30,201 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 2590 states and 2767 transitions.
[2020-11-25 01:53:30,219 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 2590 to 2454.
[2020-11-25 01:53:30,219 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 2454 states.
[2020-11-25 01:53:30,221 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 2454 states to 2454 states and 2621 transitions.
[2020-11-25 01:53:30,221 INFO  L751         BuchiCegarLoop]: Abstraction has 2454 states and 2621 transitions.
[2020-11-25 01:53:30,222 INFO  L631         BuchiCegarLoop]: Abstraction has 2454 states and 2621 transitions.
[2020-11-25 01:53:30,222 INFO  L445         BuchiCegarLoop]: ======== Iteration 4============
[2020-11-25 01:53:30,222 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2454 states and 2621 transitions.
[2020-11-25 01:53:30,226 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 01:53:30,226 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 01:53:30,226 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 01:53:30,228 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 01:53:30,228 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_MyToken0 := false;
[L2]                 call_transfer_MyToken0 := false;
[L2]     CALL        call main();
[L4123]              assume null == 0;
[L4124]  CALL        call this := FreshRefGenerator__success();
[L1863]              havoc newRef;
[L1864]              assume Alloc[newRef] == false;
[L1865]              Alloc[newRef] := true;
[L1866]              assume newRef != null;
[L4124]  RET         call this := FreshRefGenerator__success();
[L4125]              assume now >= 0;
[L4126]              assume DType[this] == MyToken;
[L4127]              assume msgvalue_MSG == 0;
[L4128]              gas := gas - 53000;
[L4129]  CALL        call MyToken_MyToken(this, msgsender_MSG, msgvalue_MSG, tokenName_s318, tokenSymbol_s318, tokenDecimals_s318, initialSupply_s318);
[L768]               havoc __exception;
[L769]               revert := false;
[L770]   COND FALSE  !(__exception)
[L793]   CALL        call MyToken_MyToken__success(this, msgsender_MSG, msgvalue_MSG, tokenName_s318, tokenSymbol_s318, tokenDecimals_s318, initialSupply_s318);
[L2217]  CALL        call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L1999]  CALL        call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1984]              assume msgsender_MSG != null;
[L1985]              Balance[this] := 0;
[L1999]  RET         call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2000]  COND FALSE  !(revert)
[L2217]  RET         call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L2218]  COND FALSE  !(revert)
[L2221]  CALL        call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L2069]  CALL        call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2051]              assume msgsender_MSG != null;
[L2052]              Balance[this] := 0;
[L2053]              owner_Owned[this] := null;
[L2054]              newOwner_Owned[this] := null;
[L2056]              owner_Owned[this] := msgsender_MSG;
[L2069]  RET         call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2070]  COND FALSE  !(revert)
[L2221]  RET         call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L2222]  COND FALSE  !(revert)
[L2225]  CALL        call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1895]  CALL        call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1880]              assume msgsender_MSG != null;
[L1881]              Balance[this] := 0;
[L1895]  RET         call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1896]  COND FALSE  !(revert)
[L2225]  RET         call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L2226]  COND FALSE  !(revert)
[L2229]  CALL        call MyToken_MyToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, tokenName_s318, tokenSymbol_s318, tokenDecimals_s318, initialSupply_s318);
[L2171]              assume msgsender_MSG != null;
[L2172]              Balance[this] := 0;
[L2173]              symbol_MyToken[this] := -1251229519;
[L2174]              name_MyToken[this] := -1251229519;
[L2175]              decimals_MyToken[this] := 0;
[L2176]              _totalSupply_MyToken[this] := 0;
[L2177]              balances_MyToken[this] := zeroRefintArr();
[L2178]              sum_balances0[this] := 0;
[L2179]              allowed_MyToken[this] := zeroRefRefintArr();
[L2180]              sum_allowed1[this] := 0;
[L2182]              name_MyToken[this] := tokenName_s318;
[L2183]              symbol_MyToken[this] := tokenSymbol_s318;
[L2184]              decimals_MyToken[this] := tokenDecimals_s318;
[L2185]              __var_2 := tokenDecimals_s318 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2186]              _totalSupply_MyToken[this] := nonlinearMul(initialSupply_s318, nonlinearPow(10, tokenDecimals_s318 % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2187]              sum_balances0[this] := sum_balances0[this] - balances_MyToken[this][msgsender_MSG];
[L2188]              balances_MyToken[this][msgsender_MSG] := _totalSupply_MyToken[this];
[L2189]              sum_balances0[this] := sum_balances0[this] + balances_MyToken[this][msgsender_MSG];
[L2190]              assert { :EventEmitted "Transfer_MyToken" } true;
[L2229]  RET         call MyToken_MyToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, tokenName_s318, tokenSymbol_s318, tokenDecimals_s318, initialSupply_s318);
[L2230]  COND FALSE  !(revert)
[L793]   RET         call MyToken_MyToken__success(this, msgsender_MSG, msgvalue_MSG, tokenName_s318, tokenSymbol_s318, tokenDecimals_s318, initialSupply_s318);
[L794]               assume !revert && gas >= 0;
[L4129]  RET         call MyToken_MyToken(this, msgsender_MSG, msgvalue_MSG, tokenName_s318, tokenSymbol_s318, tokenDecimals_s318, initialSupply_s318);
[L4130]              assume !revert && gas >= 0;
[L4133]  CALL        call CorralChoice_MyToken(this);
[L3926]              havoc msgsender_MSG;
[L3927]              havoc msgvalue_MSG;
[L3928]              havoc choice;
[L3929]              havoc a_s23;
[L3930]              havoc b_s23;
[L3931]              havoc c_s23;
[L3932]              havoc a_s45;
[L3933]              havoc b_s45;
[L3934]              havoc c_s45;
[L3935]              havoc a_s73;
[L3936]              havoc b_s73;
[L3937]              havoc c_s73;
[L3938]              havoc a_s95;
[L3939]              havoc b_s95;
[L3940]              havoc c_s95;
[L3941]              havoc __ret_0_totalSupply;
[L3942]              havoc tokenOwner_s344;
[L3943]              havoc balance_s344;
[L3944]              havoc tokenOwner_s490;
[L3945]              havoc spender_s490;
[L3946]              havoc remaining_s490;
[L3947]              havoc to_s387;
[L3948]              havoc tokens_s387;
[L3949]              havoc success_s387;
[L3950]              havoc spender_s415;
[L3951]              havoc tokens_s415;
[L3952]              havoc success_s415;
[L3953]              havoc from_s474;
[L3954]              havoc to_s474;
[L3955]              havoc tokens_s474;
[L3956]              havoc success_s474;
[L3957]              havoc __ret_0_owner;
[L3958]              havoc __ret_0_newOwner;
[L3959]              havoc _newOwner_s217;
[L3960]              havoc __ret_0_symbol;
[L3961]              havoc __ret_0_name;
[L3962]              havoc __ret_0_decimals;
[L3963]              havoc __ret_0__totalSupply;
[L3964]              havoc tokenName_s318;
[L3965]              havoc tokenSymbol_s318;
[L3966]              havoc tokenDecimals_s318;
[L3967]              havoc initialSupply_s318;
[L3968]              havoc spender_s533;
[L3969]              havoc tokens_s533;
[L3970]              havoc data_s533;
[L3971]              havoc success_s533;
[L3972]              havoc tmpNow;
[L3973]              havoc gas;
[L3974]              assume gas > 4000000 && gas <= 8000000;
[L3975]              tmpNow := now;
[L3976]              havoc now;
[L3977]              assume now > tmpNow;
[L3978]              assume msgsender_MSG != null;
[L3979]              assume DType[msgsender_MSG] != SafeMath;
[L3980]              assume DType[msgsender_MSG] != ERC20Interface;
[L3981]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L3982]              assume DType[msgsender_MSG] != Owned;
[L3983]              assume DType[msgsender_MSG] != MyToken;
[L3984]              Alloc[msgsender_MSG] := true;
[L3985]  COND FALSE  !(choice == 19)
[L3993]  COND FALSE  !(choice == 18)
[L4001]  COND FALSE  !(choice == 17)
[L4009]  COND FALSE  !(choice == 16)
[L4017]  COND FALSE  !(choice == 15)
[L4023]  COND FALSE  !(choice == 14)
[L4029]  COND FALSE  !(choice == 13)
[L4035]  COND TRUE   choice == 12
[L4036]              gas := gas - 21000;
[L4037]  COND TRUE   gas >= 0
[L4038]              assume tokens_s387 >= 0 && tokens_s387 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4039]              assume msgvalue_MSG == 0;
[L4040]  CALL        call success_s387 := transfer~address~uint256_MyToken(this, msgsender_MSG, msgvalue_MSG, to_s387, tokens_s387);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == to_s387 && tokens_s387 <= balances_MyToken[this][msgsender_MSG]) && tokens_s387 >= 0) && tokens_s387 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_MyToken[this][to_s387] >= 0) && balances_MyToken[this][to_s387] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_MyToken[this][msgsender_MSG] >= 0) && balances_MyToken[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_MyToken0 := true;
[L2]                 call_transfer_MyToken0 := false;
[L2]                 revert := revert_hold;
[L932]               havoc __exception;
[L933]               revert := false;
[L934]   COND FALSE  !(__exception)
[L957]   CALL        call success_s387 := transfer~address~uint256_MyToken__success(this, msgsender_MSG, msgvalue_MSG, to_s387, tokens_s387);
[L2297]  COND TRUE   DType[this] == MyToken
[L2298]  CALL        call __var_4 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_MyToken[this][msgsender_MSG], tokens_s387);
[L1930]  COND FALSE  !(!(b_s45 <= a_s45))
[L1934]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2298]  RET         call __var_4 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_MyToken[this][msgsender_MSG], tokens_s387);
[L2299]  COND FALSE  !(revert)
[L2305]              sum_balances0[this] := sum_balances0[this] - balances_MyToken[this][msgsender_MSG];
[L2306]              balances_MyToken[this][msgsender_MSG] := __var_4;
[L2307]              sum_balances0[this] := sum_balances0[this] + balances_MyToken[this][msgsender_MSG];
[L2308]  COND TRUE   DType[this] == MyToken
[L2309]  CALL        call __var_5 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_MyToken[this][to_s387], tokens_s387);
[L1912]              c_s23 := (a_s23 + b_s23) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1913]  COND FALSE  !(!(c_s23 >= a_s23))
[L2309]  RET         call __var_5 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_MyToken[this][to_s387], tokens_s387);
[L2310]  COND FALSE  !(revert)
[L2316]              sum_balances0[this] := sum_balances0[this] - balances_MyToken[this][to_s387];
[L2317]              balances_MyToken[this][to_s387] := __var_5;
[L2318]              sum_balances0[this] := sum_balances0[this] + balances_MyToken[this][to_s387];
[L2319]              assert { :EventEmitted "Transfer_MyToken" } true;
[L2320]              success_s387 := true;
[L957]   RET         call success_s387 := transfer~address~uint256_MyToken__success(this, msgsender_MSG, msgvalue_MSG, to_s387, tokens_s387);
[L958]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !((((((((success_s387 == true && _totalSupply_MyToken[this] == old(_totalSupply_MyToken[this])) && balances_MyToken[this] == old(balances_MyToken[this])) && allowed_MyToken[this] == old(allowed_MyToken[this])) && symbol_MyToken[this] == old(symbol_MyToken[this])) && name_MyToken[this] == old(name_MyToken[this])) && decimals_MyToken[this] == old(decimals_MyToken[this])) && owner_Owned[this] == old(owner_Owned[this])) && newOwner_Owned[this] == old(newOwner_Owned[this]));
[L2]                 revert := revert_hold;
[L4040]  RET         call success_s387 := transfer~address~uint256_MyToken(this, msgsender_MSG, msgvalue_MSG, to_s387, tokens_s387);
[L4133]  RET         call CorralChoice_MyToken(this);

Loop:
[L4133]  CALL        call CorralChoice_MyToken(this);
[L3926]              havoc msgsender_MSG;
[L3927]              havoc msgvalue_MSG;
[L3928]              havoc choice;
[L3929]              havoc a_s23;
[L3930]              havoc b_s23;
[L3931]              havoc c_s23;
[L3932]              havoc a_s45;
[L3933]              havoc b_s45;
[L3934]              havoc c_s45;
[L3935]              havoc a_s73;
[L3936]              havoc b_s73;
[L3937]              havoc c_s73;
[L3938]              havoc a_s95;
[L3939]              havoc b_s95;
[L3940]              havoc c_s95;
[L3941]              havoc __ret_0_totalSupply;
[L3942]              havoc tokenOwner_s344;
[L3943]              havoc balance_s344;
[L3944]              havoc tokenOwner_s490;
[L3945]              havoc spender_s490;
[L3946]              havoc remaining_s490;
[L3947]              havoc to_s387;
[L3948]              havoc tokens_s387;
[L3949]              havoc success_s387;
[L3950]              havoc spender_s415;
[L3951]              havoc tokens_s415;
[L3952]              havoc success_s415;
[L3953]              havoc from_s474;
[L3954]              havoc to_s474;
[L3955]              havoc tokens_s474;
[L3956]              havoc success_s474;
[L3957]              havoc __ret_0_owner;
[L3958]              havoc __ret_0_newOwner;
[L3959]              havoc _newOwner_s217;
[L3960]              havoc __ret_0_symbol;
[L3961]              havoc __ret_0_name;
[L3962]              havoc __ret_0_decimals;
[L3963]              havoc __ret_0__totalSupply;
[L3964]              havoc tokenName_s318;
[L3965]              havoc tokenSymbol_s318;
[L3966]              havoc tokenDecimals_s318;
[L3967]              havoc initialSupply_s318;
[L3968]              havoc spender_s533;
[L3969]              havoc tokens_s533;
[L3970]              havoc data_s533;
[L3971]              havoc success_s533;
[L3972]              havoc tmpNow;
[L3973]              havoc gas;
[L3974]              assume gas > 4000000 && gas <= 8000000;
[L3975]              tmpNow := now;
[L3976]              havoc now;
[L3977]              assume now > tmpNow;
[L3978]              assume msgsender_MSG != null;
[L3979]              assume DType[msgsender_MSG] != SafeMath;
[L3980]              assume DType[msgsender_MSG] != ERC20Interface;
[L3981]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L3982]              assume DType[msgsender_MSG] != Owned;
[L3983]              assume DType[msgsender_MSG] != MyToken;
[L3984]              Alloc[msgsender_MSG] := true;
[L3985]  COND FALSE  !(choice == 19)
[L3993]  COND FALSE  !(choice == 18)
[L4001]  COND FALSE  !(choice == 17)
[L4009]  COND FALSE  !(choice == 16)
[L4017]  COND FALSE  !(choice == 15)
[L4023]  COND FALSE  !(choice == 14)
[L4029]  COND FALSE  !(choice == 13)
[L4035]  COND TRUE   choice == 12
[L4036]              gas := gas - 21000;
[L4037]  COND TRUE   gas >= 0
[L4038]              assume tokens_s387 >= 0 && tokens_s387 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4039]              assume msgvalue_MSG == 0;
[L4040]  CALL        call success_s387 := transfer~address~uint256_MyToken(this, msgsender_MSG, msgvalue_MSG, to_s387, tokens_s387);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == to_s387 && tokens_s387 <= balances_MyToken[this][msgsender_MSG]) && tokens_s387 >= 0) && tokens_s387 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_MyToken[this][to_s387] >= 0) && balances_MyToken[this][to_s387] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_MyToken[this][msgsender_MSG] >= 0) && balances_MyToken[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_MyToken0 := true;
[L2]                 call_transfer_MyToken0 := false;
[L2]                 revert := revert_hold;
[L932]               havoc __exception;
[L933]               revert := false;
[L934]   COND FALSE  !(__exception)
[L957]   CALL        call success_s387 := transfer~address~uint256_MyToken__success(this, msgsender_MSG, msgvalue_MSG, to_s387, tokens_s387);
[L2297]  COND TRUE   DType[this] == MyToken
[L2298]  CALL        call __var_4 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_MyToken[this][msgsender_MSG], tokens_s387);
[L1930]  COND FALSE  !(!(b_s45 <= a_s45))
[L1934]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2298]  RET         call __var_4 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_MyToken[this][msgsender_MSG], tokens_s387);
[L2299]  COND FALSE  !(revert)
[L2305]              sum_balances0[this] := sum_balances0[this] - balances_MyToken[this][msgsender_MSG];
[L2306]              balances_MyToken[this][msgsender_MSG] := __var_4;
[L2307]              sum_balances0[this] := sum_balances0[this] + balances_MyToken[this][msgsender_MSG];
[L2308]  COND TRUE   DType[this] == MyToken
[L2309]  CALL        call __var_5 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_MyToken[this][to_s387], tokens_s387);
[L1912]              c_s23 := (a_s23 + b_s23) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1913]  COND FALSE  !(!(c_s23 >= a_s23))
[L2309]  RET         call __var_5 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_MyToken[this][to_s387], tokens_s387);
[L2310]  COND FALSE  !(revert)
[L2316]              sum_balances0[this] := sum_balances0[this] - balances_MyToken[this][to_s387];
[L2317]              balances_MyToken[this][to_s387] := __var_5;
[L2318]              sum_balances0[this] := sum_balances0[this] + balances_MyToken[this][to_s387];
[L2319]              assert { :EventEmitted "Transfer_MyToken" } true;
[L2320]              success_s387 := true;
[L957]   RET         call success_s387 := transfer~address~uint256_MyToken__success(this, msgsender_MSG, msgvalue_MSG, to_s387, tokens_s387);
[L958]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !((((((((success_s387 == true && _totalSupply_MyToken[this] == old(_totalSupply_MyToken[this])) && balances_MyToken[this] == old(balances_MyToken[this])) && allowed_MyToken[this] == old(allowed_MyToken[this])) && symbol_MyToken[this] == old(symbol_MyToken[this])) && name_MyToken[this] == old(name_MyToken[this])) && decimals_MyToken[this] == old(decimals_MyToken[this])) && owner_Owned[this] == old(owner_Owned[this])) && newOwner_Owned[this] == old(newOwner_Owned[this]));
[L2]                 revert := revert_hold;
[L4040]  RET         call success_s387 := transfer~address~uint256_MyToken(this, msgsender_MSG, msgvalue_MSG, to_s387, tokens_s387);
[L4133]  RET         call CorralChoice_MyToken(this);

[2020-11-25 01:53:30,231 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 01:53:30,231 INFO  L82        PathProgramCache]: Analyzing trace with hash 969696524, now seen corresponding path program 1 times
[2020-11-25 01:53:30,232 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 01:53:30,290 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 01:53:30,901 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 01:53:30,901 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 01:53:30,902 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [21] imperfect sequences [] total 21
[2020-11-25 01:53:30,902 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 01:53:30,902 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 22 interpolants.
[2020-11-25 01:53:30,902 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=52, Invalid=410, Unknown=0, NotChecked=0, Total=462
[2020-11-25 01:53:30,902 INFO  L87              Difference]: Start difference. First operand 2454 states and 2621 transitions. cyclomatic complexity: 169 Second operand 22 states.
[2020-11-25 01:53:34,628 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 01:53:34,628 INFO  L93              Difference]: Finished difference Result 2517 states and 2710 transitions.
[2020-11-25 01:53:34,628 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 23 states. 
[2020-11-25 01:53:34,628 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2517 states and 2710 transitions.
[2020-11-25 01:53:34,633 INFO  L131   ngComponentsAnalysis]: Automaton has 4 accepting balls. 8
[2020-11-25 01:53:34,639 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2517 states to 2517 states and 2710 transitions.
[2020-11-25 01:53:34,639 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 935
[2020-11-25 01:53:34,640 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 935
[2020-11-25 01:53:34,640 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 2517 states and 2710 transitions.
[2020-11-25 01:53:34,642 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 01:53:34,642 INFO  L728         BuchiCegarLoop]: Abstraction has 2517 states and 2710 transitions.
[2020-11-25 01:53:34,644 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 2517 states and 2710 transitions.
[2020-11-25 01:53:34,659 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 2517 to 2502.
[2020-11-25 01:53:34,659 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 2502 states.
[2020-11-25 01:53:34,662 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 2502 states to 2502 states and 2679 transitions.
[2020-11-25 01:53:34,662 INFO  L751         BuchiCegarLoop]: Abstraction has 2502 states and 2679 transitions.
[2020-11-25 01:53:34,662 INFO  L631         BuchiCegarLoop]: Abstraction has 2502 states and 2679 transitions.
[2020-11-25 01:53:34,662 INFO  L445         BuchiCegarLoop]: ======== Iteration 5============
[2020-11-25 01:53:34,662 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2502 states and 2679 transitions.
[2020-11-25 01:53:34,665 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 01:53:34,665 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 01:53:34,665 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 01:53:34,667 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 01:53:34,667 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_MyToken0 := false;
[L2]                 call_transfer_MyToken0 := false;
[L2]     CALL        call main();
[L4123]              assume null == 0;
[L4124]  CALL        call this := FreshRefGenerator__success();
[L1863]              havoc newRef;
[L1864]              assume Alloc[newRef] == false;
[L1865]              Alloc[newRef] := true;
[L1866]              assume newRef != null;
[L4124]  RET         call this := FreshRefGenerator__success();
[L4125]              assume now >= 0;
[L4126]              assume DType[this] == MyToken;
[L4127]              assume msgvalue_MSG == 0;
[L4128]              gas := gas - 53000;
[L4129]  CALL        call MyToken_MyToken(this, msgsender_MSG, msgvalue_MSG, tokenName_s318, tokenSymbol_s318, tokenDecimals_s318, initialSupply_s318);
[L768]               havoc __exception;
[L769]               revert := false;
[L770]   COND FALSE  !(__exception)
[L793]   CALL        call MyToken_MyToken__success(this, msgsender_MSG, msgvalue_MSG, tokenName_s318, tokenSymbol_s318, tokenDecimals_s318, initialSupply_s318);
[L2217]  CALL        call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L1999]  CALL        call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1984]              assume msgsender_MSG != null;
[L1985]              Balance[this] := 0;
[L1999]  RET         call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2000]  COND FALSE  !(revert)
[L2217]  RET         call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L2218]  COND FALSE  !(revert)
[L2221]  CALL        call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L2069]  CALL        call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2051]              assume msgsender_MSG != null;
[L2052]              Balance[this] := 0;
[L2053]              owner_Owned[this] := null;
[L2054]              newOwner_Owned[this] := null;
[L2056]              owner_Owned[this] := msgsender_MSG;
[L2069]  RET         call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2070]  COND FALSE  !(revert)
[L2221]  RET         call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L2222]  COND FALSE  !(revert)
[L2225]  CALL        call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1895]  CALL        call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1880]              assume msgsender_MSG != null;
[L1881]              Balance[this] := 0;
[L1895]  RET         call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1896]  COND FALSE  !(revert)
[L2225]  RET         call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L2226]  COND FALSE  !(revert)
[L2229]  CALL        call MyToken_MyToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, tokenName_s318, tokenSymbol_s318, tokenDecimals_s318, initialSupply_s318);
[L2171]              assume msgsender_MSG != null;
[L2172]              Balance[this] := 0;
[L2173]              symbol_MyToken[this] := -1251229519;
[L2174]              name_MyToken[this] := -1251229519;
[L2175]              decimals_MyToken[this] := 0;
[L2176]              _totalSupply_MyToken[this] := 0;
[L2177]              balances_MyToken[this] := zeroRefintArr();
[L2178]              sum_balances0[this] := 0;
[L2179]              allowed_MyToken[this] := zeroRefRefintArr();
[L2180]              sum_allowed1[this] := 0;
[L2182]              name_MyToken[this] := tokenName_s318;
[L2183]              symbol_MyToken[this] := tokenSymbol_s318;
[L2184]              decimals_MyToken[this] := tokenDecimals_s318;
[L2185]              __var_2 := tokenDecimals_s318 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2186]              _totalSupply_MyToken[this] := nonlinearMul(initialSupply_s318, nonlinearPow(10, tokenDecimals_s318 % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2187]              sum_balances0[this] := sum_balances0[this] - balances_MyToken[this][msgsender_MSG];
[L2188]              balances_MyToken[this][msgsender_MSG] := _totalSupply_MyToken[this];
[L2189]              sum_balances0[this] := sum_balances0[this] + balances_MyToken[this][msgsender_MSG];
[L2190]              assert { :EventEmitted "Transfer_MyToken" } true;
[L2229]  RET         call MyToken_MyToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, tokenName_s318, tokenSymbol_s318, tokenDecimals_s318, initialSupply_s318);
[L2230]  COND FALSE  !(revert)
[L793]   RET         call MyToken_MyToken__success(this, msgsender_MSG, msgvalue_MSG, tokenName_s318, tokenSymbol_s318, tokenDecimals_s318, initialSupply_s318);
[L794]               assume !revert && gas >= 0;
[L4129]  RET         call MyToken_MyToken(this, msgsender_MSG, msgvalue_MSG, tokenName_s318, tokenSymbol_s318, tokenDecimals_s318, initialSupply_s318);
[L4130]              assume !revert && gas >= 0;
[L4133]  CALL        call CorralChoice_MyToken(this);
[L3926]              havoc msgsender_MSG;
[L3927]              havoc msgvalue_MSG;
[L3928]              havoc choice;
[L3929]              havoc a_s23;
[L3930]              havoc b_s23;
[L3931]              havoc c_s23;
[L3932]              havoc a_s45;
[L3933]              havoc b_s45;
[L3934]              havoc c_s45;
[L3935]              havoc a_s73;
[L3936]              havoc b_s73;
[L3937]              havoc c_s73;
[L3938]              havoc a_s95;
[L3939]              havoc b_s95;
[L3940]              havoc c_s95;
[L3941]              havoc __ret_0_totalSupply;
[L3942]              havoc tokenOwner_s344;
[L3943]              havoc balance_s344;
[L3944]              havoc tokenOwner_s490;
[L3945]              havoc spender_s490;
[L3946]              havoc remaining_s490;
[L3947]              havoc to_s387;
[L3948]              havoc tokens_s387;
[L3949]              havoc success_s387;
[L3950]              havoc spender_s415;
[L3951]              havoc tokens_s415;
[L3952]              havoc success_s415;
[L3953]              havoc from_s474;
[L3954]              havoc to_s474;
[L3955]              havoc tokens_s474;
[L3956]              havoc success_s474;
[L3957]              havoc __ret_0_owner;
[L3958]              havoc __ret_0_newOwner;
[L3959]              havoc _newOwner_s217;
[L3960]              havoc __ret_0_symbol;
[L3961]              havoc __ret_0_name;
[L3962]              havoc __ret_0_decimals;
[L3963]              havoc __ret_0__totalSupply;
[L3964]              havoc tokenName_s318;
[L3965]              havoc tokenSymbol_s318;
[L3966]              havoc tokenDecimals_s318;
[L3967]              havoc initialSupply_s318;
[L3968]              havoc spender_s533;
[L3969]              havoc tokens_s533;
[L3970]              havoc data_s533;
[L3971]              havoc success_s533;
[L3972]              havoc tmpNow;
[L3973]              havoc gas;
[L3974]              assume gas > 4000000 && gas <= 8000000;
[L3975]              tmpNow := now;
[L3976]              havoc now;
[L3977]              assume now > tmpNow;
[L3978]              assume msgsender_MSG != null;
[L3979]              assume DType[msgsender_MSG] != SafeMath;
[L3980]              assume DType[msgsender_MSG] != ERC20Interface;
[L3981]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L3982]              assume DType[msgsender_MSG] != Owned;
[L3983]              assume DType[msgsender_MSG] != MyToken;
[L3984]              Alloc[msgsender_MSG] := true;
[L3985]  COND FALSE  !(choice == 19)
[L3993]  COND FALSE  !(choice == 18)
[L4001]  COND FALSE  !(choice == 17)
[L4009]  COND FALSE  !(choice == 16)
[L4017]  COND FALSE  !(choice == 15)
[L4023]  COND FALSE  !(choice == 14)
[L4029]  COND FALSE  !(choice == 13)
[L4035]  COND TRUE   choice == 12
[L4036]              gas := gas - 21000;
[L4037]  COND TRUE   gas >= 0
[L4038]              assume tokens_s387 >= 0 && tokens_s387 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4039]              assume msgvalue_MSG == 0;
[L4040]  CALL        call success_s387 := transfer~address~uint256_MyToken(this, msgsender_MSG, msgvalue_MSG, to_s387, tokens_s387);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == to_s387 && tokens_s387 <= balances_MyToken[this][msgsender_MSG]) && tokens_s387 >= 0) && tokens_s387 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_MyToken[this][to_s387] >= 0) && balances_MyToken[this][to_s387] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_MyToken[this][msgsender_MSG] >= 0) && balances_MyToken[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_MyToken0 := true;
[L2]                 call_transfer_MyToken0 := false;
[L2]                 revert := revert_hold;
[L932]               havoc __exception;
[L933]               revert := false;
[L934]   COND TRUE   __exception
[L935]               __tmp__Balance := Balance;
[L936]               __tmp__DType := DType;
[L937]               __tmp__Alloc := Alloc;
[L938]               __tmp__balance_ADDR := balance_ADDR;
[L939]               __tmp__M_Ref_int := M_Ref_int;
[L940]               __tmp__sum_balances0 := sum_balances0;
[L941]               __tmp__alloc_allowed_MyToken_lvl0 := alloc_allowed_MyToken_lvl0;
[L942]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L943]               __tmp__sum_allowed1 := sum_allowed1;
[L944]               __tmp__Length := Length;
[L945]               __tmp__now := now;
[L946]               __tmp__owner_Owned := owner_Owned;
[L947]               __tmp__newOwner_Owned := newOwner_Owned;
[L948]               __tmp__symbol_MyToken := symbol_MyToken;
[L949]               __tmp__name_MyToken := name_MyToken;
[L950]               __tmp__decimals_MyToken := decimals_MyToken;
[L951]               __tmp___totalSupply_MyToken := _totalSupply_MyToken;
[L952]               __tmp__balances_MyToken := balances_MyToken;
[L953]               __tmp__allowed_MyToken := allowed_MyToken;
[L954]   CALL        call success_s387 := transfer~address~uint256_MyToken__fail(this, msgsender_MSG, msgvalue_MSG, to_s387, tokens_s387);
[L2267]  COND TRUE   __tmp__DType[this] == MyToken
[L2268]  CALL        call __var_4 := safeSub~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balances_MyToken[this][msgsender_MSG], tokens_s387);
[L1921]  COND FALSE  !(!(b_s45 <= a_s45))
[L1925]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2268]  RET         call __var_4 := safeSub~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balances_MyToken[this][msgsender_MSG], tokens_s387);
[L2269]  COND FALSE  !(revert)
[L2275]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] - __tmp__balances_MyToken[this][msgsender_MSG];
[L2276]              __tmp__balances_MyToken[this][msgsender_MSG] := __var_4;
[L2277]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] + __tmp__balances_MyToken[this][msgsender_MSG];
[L2278]  COND TRUE   __tmp__DType[this] == MyToken
[L2279]  CALL        call __var_5 := safeAdd~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balances_MyToken[this][to_s387], tokens_s387);
[L1903]              c_s23 := (a_s23 + b_s23) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1904]  COND TRUE   !(c_s23 >= a_s23)
[L1905]              revert := true;
[L2279]  RET         call __var_5 := safeAdd~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balances_MyToken[this][to_s387], tokens_s387);
[L2280]  COND TRUE   revert
[L954]   RET         call success_s387 := transfer~address~uint256_MyToken__fail(this, msgsender_MSG, msgvalue_MSG, to_s387, tokens_s387);
[L955]               assume revert || gas < 0;
[L4040]  RET         call success_s387 := transfer~address~uint256_MyToken(this, msgsender_MSG, msgvalue_MSG, to_s387, tokens_s387);
[L4133]  RET         call CorralChoice_MyToken(this);

Loop:
[L4133]  CALL        call CorralChoice_MyToken(this);
[L3926]              havoc msgsender_MSG;
[L3927]              havoc msgvalue_MSG;
[L3928]              havoc choice;
[L3929]              havoc a_s23;
[L3930]              havoc b_s23;
[L3931]              havoc c_s23;
[L3932]              havoc a_s45;
[L3933]              havoc b_s45;
[L3934]              havoc c_s45;
[L3935]              havoc a_s73;
[L3936]              havoc b_s73;
[L3937]              havoc c_s73;
[L3938]              havoc a_s95;
[L3939]              havoc b_s95;
[L3940]              havoc c_s95;
[L3941]              havoc __ret_0_totalSupply;
[L3942]              havoc tokenOwner_s344;
[L3943]              havoc balance_s344;
[L3944]              havoc tokenOwner_s490;
[L3945]              havoc spender_s490;
[L3946]              havoc remaining_s490;
[L3947]              havoc to_s387;
[L3948]              havoc tokens_s387;
[L3949]              havoc success_s387;
[L3950]              havoc spender_s415;
[L3951]              havoc tokens_s415;
[L3952]              havoc success_s415;
[L3953]              havoc from_s474;
[L3954]              havoc to_s474;
[L3955]              havoc tokens_s474;
[L3956]              havoc success_s474;
[L3957]              havoc __ret_0_owner;
[L3958]              havoc __ret_0_newOwner;
[L3959]              havoc _newOwner_s217;
[L3960]              havoc __ret_0_symbol;
[L3961]              havoc __ret_0_name;
[L3962]              havoc __ret_0_decimals;
[L3963]              havoc __ret_0__totalSupply;
[L3964]              havoc tokenName_s318;
[L3965]              havoc tokenSymbol_s318;
[L3966]              havoc tokenDecimals_s318;
[L3967]              havoc initialSupply_s318;
[L3968]              havoc spender_s533;
[L3969]              havoc tokens_s533;
[L3970]              havoc data_s533;
[L3971]              havoc success_s533;
[L3972]              havoc tmpNow;
[L3973]              havoc gas;
[L3974]              assume gas > 4000000 && gas <= 8000000;
[L3975]              tmpNow := now;
[L3976]              havoc now;
[L3977]              assume now > tmpNow;
[L3978]              assume msgsender_MSG != null;
[L3979]              assume DType[msgsender_MSG] != SafeMath;
[L3980]              assume DType[msgsender_MSG] != ERC20Interface;
[L3981]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L3982]              assume DType[msgsender_MSG] != Owned;
[L3983]              assume DType[msgsender_MSG] != MyToken;
[L3984]              Alloc[msgsender_MSG] := true;
[L3985]  COND FALSE  !(choice == 19)
[L3993]  COND FALSE  !(choice == 18)
[L4001]  COND FALSE  !(choice == 17)
[L4009]  COND FALSE  !(choice == 16)
[L4017]  COND FALSE  !(choice == 15)
[L4023]  COND FALSE  !(choice == 14)
[L4029]  COND FALSE  !(choice == 13)
[L4035]  COND TRUE   choice == 12
[L4036]              gas := gas - 21000;
[L4037]  COND TRUE   gas >= 0
[L4038]              assume tokens_s387 >= 0 && tokens_s387 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4039]              assume msgvalue_MSG == 0;
[L4040]  CALL        call success_s387 := transfer~address~uint256_MyToken(this, msgsender_MSG, msgvalue_MSG, to_s387, tokens_s387);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == to_s387 && tokens_s387 <= balances_MyToken[this][msgsender_MSG]) && tokens_s387 >= 0) && tokens_s387 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_MyToken[this][to_s387] >= 0) && balances_MyToken[this][to_s387] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_MyToken[this][msgsender_MSG] >= 0) && balances_MyToken[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_MyToken0 := true;
[L2]                 call_transfer_MyToken0 := false;
[L2]                 revert := revert_hold;
[L932]               havoc __exception;
[L933]               revert := false;
[L934]   COND TRUE   __exception
[L935]               __tmp__Balance := Balance;
[L936]               __tmp__DType := DType;
[L937]               __tmp__Alloc := Alloc;
[L938]               __tmp__balance_ADDR := balance_ADDR;
[L939]               __tmp__M_Ref_int := M_Ref_int;
[L940]               __tmp__sum_balances0 := sum_balances0;
[L941]               __tmp__alloc_allowed_MyToken_lvl0 := alloc_allowed_MyToken_lvl0;
[L942]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L943]               __tmp__sum_allowed1 := sum_allowed1;
[L944]               __tmp__Length := Length;
[L945]               __tmp__now := now;
[L946]               __tmp__owner_Owned := owner_Owned;
[L947]               __tmp__newOwner_Owned := newOwner_Owned;
[L948]               __tmp__symbol_MyToken := symbol_MyToken;
[L949]               __tmp__name_MyToken := name_MyToken;
[L950]               __tmp__decimals_MyToken := decimals_MyToken;
[L951]               __tmp___totalSupply_MyToken := _totalSupply_MyToken;
[L952]               __tmp__balances_MyToken := balances_MyToken;
[L953]               __tmp__allowed_MyToken := allowed_MyToken;
[L954]   CALL        call success_s387 := transfer~address~uint256_MyToken__fail(this, msgsender_MSG, msgvalue_MSG, to_s387, tokens_s387);
[L2267]  COND TRUE   __tmp__DType[this] == MyToken
[L2268]  CALL        call __var_4 := safeSub~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balances_MyToken[this][msgsender_MSG], tokens_s387);
[L1921]  COND FALSE  !(!(b_s45 <= a_s45))
[L1925]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2268]  RET         call __var_4 := safeSub~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balances_MyToken[this][msgsender_MSG], tokens_s387);
[L2269]  COND FALSE  !(revert)
[L2275]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] - __tmp__balances_MyToken[this][msgsender_MSG];
[L2276]              __tmp__balances_MyToken[this][msgsender_MSG] := __var_4;
[L2277]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] + __tmp__balances_MyToken[this][msgsender_MSG];
[L2278]  COND TRUE   __tmp__DType[this] == MyToken
[L2279]  CALL        call __var_5 := safeAdd~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balances_MyToken[this][to_s387], tokens_s387);
[L1903]              c_s23 := (a_s23 + b_s23) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1904]  COND TRUE   !(c_s23 >= a_s23)
[L1905]              revert := true;
[L2279]  RET         call __var_5 := safeAdd~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balances_MyToken[this][to_s387], tokens_s387);
[L2280]  COND TRUE   revert
[L954]   RET         call success_s387 := transfer~address~uint256_MyToken__fail(this, msgsender_MSG, msgvalue_MSG, to_s387, tokens_s387);
[L955]               assume revert || gas < 0;
[L4040]  RET         call success_s387 := transfer~address~uint256_MyToken(this, msgsender_MSG, msgvalue_MSG, to_s387, tokens_s387);
[L4133]  RET         call CorralChoice_MyToken(this);

[2020-11-25 01:53:34,670 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 01:53:34,670 INFO  L82        PathProgramCache]: Analyzing trace with hash 1986994663, now seen corresponding path program 1 times
[2020-11-25 01:53:34,671 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 01:53:34,679 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 01:53:34,739 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 01:53:34,739 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 01:53:34,739 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [12] imperfect sequences [] total 12
[2020-11-25 01:53:34,740 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 01:53:34,740 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 12 interpolants.
[2020-11-25 01:53:34,740 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=24, Invalid=108, Unknown=0, NotChecked=0, Total=132
[2020-11-25 01:53:34,740 INFO  L87              Difference]: Start difference. First operand 2502 states and 2679 transitions. cyclomatic complexity: 181 Second operand 12 states.
[2020-11-25 01:53:35,556 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 01:53:35,556 INFO  L93              Difference]: Finished difference Result 2626 states and 2819 transitions.
[2020-11-25 01:53:35,557 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 13 states. 
[2020-11-25 01:53:35,557 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2626 states and 2819 transitions.
[2020-11-25 01:53:35,570 INFO  L131   ngComponentsAnalysis]: Automaton has 3 accepting balls. 6
[2020-11-25 01:53:35,576 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2626 states to 2626 states and 2819 transitions.
[2020-11-25 01:53:35,576 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 990
[2020-11-25 01:53:35,576 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 990
[2020-11-25 01:53:35,576 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 2626 states and 2819 transitions.
[2020-11-25 01:53:35,578 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 01:53:35,578 INFO  L728         BuchiCegarLoop]: Abstraction has 2626 states and 2819 transitions.
[2020-11-25 01:53:35,580 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 2626 states and 2819 transitions.
[2020-11-25 01:53:35,596 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 2626 to 2555.
[2020-11-25 01:53:35,596 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 2555 states.
[2020-11-25 01:53:35,598 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 2555 states to 2555 states and 2733 transitions.
[2020-11-25 01:53:35,598 INFO  L751         BuchiCegarLoop]: Abstraction has 2555 states and 2733 transitions.
[2020-11-25 01:53:35,598 INFO  L631         BuchiCegarLoop]: Abstraction has 2555 states and 2733 transitions.
[2020-11-25 01:53:35,598 INFO  L445         BuchiCegarLoop]: ======== Iteration 6============
[2020-11-25 01:53:35,598 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2555 states and 2733 transitions.
[2020-11-25 01:53:35,601 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 01:53:35,601 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 01:53:35,601 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 01:53:35,602 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 01:53:35,602 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_MyToken0 := false;
[L2]                 call_transfer_MyToken0 := false;
[L2]     CALL        call main();
[L4123]              assume null == 0;
[L4124]  CALL        call this := FreshRefGenerator__success();
[L1863]              havoc newRef;
[L1864]              assume Alloc[newRef] == false;
[L1865]              Alloc[newRef] := true;
[L1866]              assume newRef != null;
[L4124]  RET         call this := FreshRefGenerator__success();
[L4125]              assume now >= 0;
[L4126]              assume DType[this] == MyToken;
[L4127]              assume msgvalue_MSG == 0;
[L4128]              gas := gas - 53000;
[L4129]  CALL        call MyToken_MyToken(this, msgsender_MSG, msgvalue_MSG, tokenName_s318, tokenSymbol_s318, tokenDecimals_s318, initialSupply_s318);
[L768]               havoc __exception;
[L769]               revert := false;
[L770]   COND FALSE  !(__exception)
[L793]   CALL        call MyToken_MyToken__success(this, msgsender_MSG, msgvalue_MSG, tokenName_s318, tokenSymbol_s318, tokenDecimals_s318, initialSupply_s318);
[L2217]  CALL        call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L1999]  CALL        call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1984]              assume msgsender_MSG != null;
[L1985]              Balance[this] := 0;
[L1999]  RET         call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2000]  COND FALSE  !(revert)
[L2217]  RET         call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L2218]  COND FALSE  !(revert)
[L2221]  CALL        call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L2069]  CALL        call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2051]              assume msgsender_MSG != null;
[L2052]              Balance[this] := 0;
[L2053]              owner_Owned[this] := null;
[L2054]              newOwner_Owned[this] := null;
[L2056]              owner_Owned[this] := msgsender_MSG;
[L2069]  RET         call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2070]  COND FALSE  !(revert)
[L2221]  RET         call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L2222]  COND FALSE  !(revert)
[L2225]  CALL        call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1895]  CALL        call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1880]              assume msgsender_MSG != null;
[L1881]              Balance[this] := 0;
[L1895]  RET         call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1896]  COND FALSE  !(revert)
[L2225]  RET         call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L2226]  COND FALSE  !(revert)
[L2229]  CALL        call MyToken_MyToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, tokenName_s318, tokenSymbol_s318, tokenDecimals_s318, initialSupply_s318);
[L2171]              assume msgsender_MSG != null;
[L2172]              Balance[this] := 0;
[L2173]              symbol_MyToken[this] := -1251229519;
[L2174]              name_MyToken[this] := -1251229519;
[L2175]              decimals_MyToken[this] := 0;
[L2176]              _totalSupply_MyToken[this] := 0;
[L2177]              balances_MyToken[this] := zeroRefintArr();
[L2178]              sum_balances0[this] := 0;
[L2179]              allowed_MyToken[this] := zeroRefRefintArr();
[L2180]              sum_allowed1[this] := 0;
[L2182]              name_MyToken[this] := tokenName_s318;
[L2183]              symbol_MyToken[this] := tokenSymbol_s318;
[L2184]              decimals_MyToken[this] := tokenDecimals_s318;
[L2185]              __var_2 := tokenDecimals_s318 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2186]              _totalSupply_MyToken[this] := nonlinearMul(initialSupply_s318, nonlinearPow(10, tokenDecimals_s318 % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2187]              sum_balances0[this] := sum_balances0[this] - balances_MyToken[this][msgsender_MSG];
[L2188]              balances_MyToken[this][msgsender_MSG] := _totalSupply_MyToken[this];
[L2189]              sum_balances0[this] := sum_balances0[this] + balances_MyToken[this][msgsender_MSG];
[L2190]              assert { :EventEmitted "Transfer_MyToken" } true;
[L2229]  RET         call MyToken_MyToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, tokenName_s318, tokenSymbol_s318, tokenDecimals_s318, initialSupply_s318);
[L2230]  COND FALSE  !(revert)
[L793]   RET         call MyToken_MyToken__success(this, msgsender_MSG, msgvalue_MSG, tokenName_s318, tokenSymbol_s318, tokenDecimals_s318, initialSupply_s318);
[L794]               assume !revert && gas >= 0;
[L4129]  RET         call MyToken_MyToken(this, msgsender_MSG, msgvalue_MSG, tokenName_s318, tokenSymbol_s318, tokenDecimals_s318, initialSupply_s318);
[L4130]              assume !revert && gas >= 0;
[L4133]  CALL        call CorralChoice_MyToken(this);
[L3926]              havoc msgsender_MSG;
[L3927]              havoc msgvalue_MSG;
[L3928]              havoc choice;
[L3929]              havoc a_s23;
[L3930]              havoc b_s23;
[L3931]              havoc c_s23;
[L3932]              havoc a_s45;
[L3933]              havoc b_s45;
[L3934]              havoc c_s45;
[L3935]              havoc a_s73;
[L3936]              havoc b_s73;
[L3937]              havoc c_s73;
[L3938]              havoc a_s95;
[L3939]              havoc b_s95;
[L3940]              havoc c_s95;
[L3941]              havoc __ret_0_totalSupply;
[L3942]              havoc tokenOwner_s344;
[L3943]              havoc balance_s344;
[L3944]              havoc tokenOwner_s490;
[L3945]              havoc spender_s490;
[L3946]              havoc remaining_s490;
[L3947]              havoc to_s387;
[L3948]              havoc tokens_s387;
[L3949]              havoc success_s387;
[L3950]              havoc spender_s415;
[L3951]              havoc tokens_s415;
[L3952]              havoc success_s415;
[L3953]              havoc from_s474;
[L3954]              havoc to_s474;
[L3955]              havoc tokens_s474;
[L3956]              havoc success_s474;
[L3957]              havoc __ret_0_owner;
[L3958]              havoc __ret_0_newOwner;
[L3959]              havoc _newOwner_s217;
[L3960]              havoc __ret_0_symbol;
[L3961]              havoc __ret_0_name;
[L3962]              havoc __ret_0_decimals;
[L3963]              havoc __ret_0__totalSupply;
[L3964]              havoc tokenName_s318;
[L3965]              havoc tokenSymbol_s318;
[L3966]              havoc tokenDecimals_s318;
[L3967]              havoc initialSupply_s318;
[L3968]              havoc spender_s533;
[L3969]              havoc tokens_s533;
[L3970]              havoc data_s533;
[L3971]              havoc success_s533;
[L3972]              havoc tmpNow;
[L3973]              havoc gas;
[L3974]              assume gas > 4000000 && gas <= 8000000;
[L3975]              tmpNow := now;
[L3976]              havoc now;
[L3977]              assume now > tmpNow;
[L3978]              assume msgsender_MSG != null;
[L3979]              assume DType[msgsender_MSG] != SafeMath;
[L3980]              assume DType[msgsender_MSG] != ERC20Interface;
[L3981]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L3982]              assume DType[msgsender_MSG] != Owned;
[L3983]              assume DType[msgsender_MSG] != MyToken;
[L3984]              Alloc[msgsender_MSG] := true;
[L3985]  COND FALSE  !(choice == 19)
[L3993]  COND FALSE  !(choice == 18)
[L4001]  COND FALSE  !(choice == 17)
[L4009]  COND FALSE  !(choice == 16)
[L4017]  COND FALSE  !(choice == 15)
[L4023]  COND FALSE  !(choice == 14)
[L4029]  COND FALSE  !(choice == 13)
[L4035]  COND TRUE   choice == 12
[L4036]              gas := gas - 21000;
[L4037]  COND TRUE   gas >= 0
[L4038]              assume tokens_s387 >= 0 && tokens_s387 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4039]              assume msgvalue_MSG == 0;
[L4040]  CALL        call success_s387 := transfer~address~uint256_MyToken(this, msgsender_MSG, msgvalue_MSG, to_s387, tokens_s387);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == to_s387 && tokens_s387 <= balances_MyToken[this][msgsender_MSG]) && tokens_s387 >= 0) && tokens_s387 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_MyToken[this][to_s387] >= 0) && balances_MyToken[this][to_s387] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_MyToken[this][msgsender_MSG] >= 0) && balances_MyToken[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_MyToken0 := true;
[L2]                 call_transfer_MyToken0 := false;
[L2]                 revert := revert_hold;
[L932]               havoc __exception;
[L933]               revert := false;
[L934]   COND TRUE   __exception
[L935]               __tmp__Balance := Balance;
[L936]               __tmp__DType := DType;
[L937]               __tmp__Alloc := Alloc;
[L938]               __tmp__balance_ADDR := balance_ADDR;
[L939]               __tmp__M_Ref_int := M_Ref_int;
[L940]               __tmp__sum_balances0 := sum_balances0;
[L941]               __tmp__alloc_allowed_MyToken_lvl0 := alloc_allowed_MyToken_lvl0;
[L942]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L943]               __tmp__sum_allowed1 := sum_allowed1;
[L944]               __tmp__Length := Length;
[L945]               __tmp__now := now;
[L946]               __tmp__owner_Owned := owner_Owned;
[L947]               __tmp__newOwner_Owned := newOwner_Owned;
[L948]               __tmp__symbol_MyToken := symbol_MyToken;
[L949]               __tmp__name_MyToken := name_MyToken;
[L950]               __tmp__decimals_MyToken := decimals_MyToken;
[L951]               __tmp___totalSupply_MyToken := _totalSupply_MyToken;
[L952]               __tmp__balances_MyToken := balances_MyToken;
[L953]               __tmp__allowed_MyToken := allowed_MyToken;
[L954]   CALL        call success_s387 := transfer~address~uint256_MyToken__fail(this, msgsender_MSG, msgvalue_MSG, to_s387, tokens_s387);
[L2267]  COND TRUE   __tmp__DType[this] == MyToken
[L2268]  CALL        call __var_4 := safeSub~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balances_MyToken[this][msgsender_MSG], tokens_s387);
[L1921]  COND FALSE  !(!(b_s45 <= a_s45))
[L1925]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2268]  RET         call __var_4 := safeSub~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balances_MyToken[this][msgsender_MSG], tokens_s387);
[L2269]  COND FALSE  !(revert)
[L2275]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] - __tmp__balances_MyToken[this][msgsender_MSG];
[L2276]              __tmp__balances_MyToken[this][msgsender_MSG] := __var_4;
[L2277]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] + __tmp__balances_MyToken[this][msgsender_MSG];
[L2278]  COND TRUE   __tmp__DType[this] == MyToken
[L2279]  CALL        call __var_5 := safeAdd~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balances_MyToken[this][to_s387], tokens_s387);
[L1903]              c_s23 := (a_s23 + b_s23) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1904]  COND FALSE  !(!(c_s23 >= a_s23))
[L2279]  RET         call __var_5 := safeAdd~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balances_MyToken[this][to_s387], tokens_s387);
[L2280]  COND FALSE  !(revert)
[L2286]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] - __tmp__balances_MyToken[this][to_s387];
[L2287]              __tmp__balances_MyToken[this][to_s387] := __var_5;
[L2288]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] + __tmp__balances_MyToken[this][to_s387];
[L2289]              success_s387 := true;
[L954]   RET         call success_s387 := transfer~address~uint256_MyToken__fail(this, msgsender_MSG, msgvalue_MSG, to_s387, tokens_s387);
[L955]               assume revert || gas < 0;
[L4040]  RET         call success_s387 := transfer~address~uint256_MyToken(this, msgsender_MSG, msgvalue_MSG, to_s387, tokens_s387);
[L4133]  RET         call CorralChoice_MyToken(this);

Loop:
[L4133]  CALL        call CorralChoice_MyToken(this);
[L3926]              havoc msgsender_MSG;
[L3927]              havoc msgvalue_MSG;
[L3928]              havoc choice;
[L3929]              havoc a_s23;
[L3930]              havoc b_s23;
[L3931]              havoc c_s23;
[L3932]              havoc a_s45;
[L3933]              havoc b_s45;
[L3934]              havoc c_s45;
[L3935]              havoc a_s73;
[L3936]              havoc b_s73;
[L3937]              havoc c_s73;
[L3938]              havoc a_s95;
[L3939]              havoc b_s95;
[L3940]              havoc c_s95;
[L3941]              havoc __ret_0_totalSupply;
[L3942]              havoc tokenOwner_s344;
[L3943]              havoc balance_s344;
[L3944]              havoc tokenOwner_s490;
[L3945]              havoc spender_s490;
[L3946]              havoc remaining_s490;
[L3947]              havoc to_s387;
[L3948]              havoc tokens_s387;
[L3949]              havoc success_s387;
[L3950]              havoc spender_s415;
[L3951]              havoc tokens_s415;
[L3952]              havoc success_s415;
[L3953]              havoc from_s474;
[L3954]              havoc to_s474;
[L3955]              havoc tokens_s474;
[L3956]              havoc success_s474;
[L3957]              havoc __ret_0_owner;
[L3958]              havoc __ret_0_newOwner;
[L3959]              havoc _newOwner_s217;
[L3960]              havoc __ret_0_symbol;
[L3961]              havoc __ret_0_name;
[L3962]              havoc __ret_0_decimals;
[L3963]              havoc __ret_0__totalSupply;
[L3964]              havoc tokenName_s318;
[L3965]              havoc tokenSymbol_s318;
[L3966]              havoc tokenDecimals_s318;
[L3967]              havoc initialSupply_s318;
[L3968]              havoc spender_s533;
[L3969]              havoc tokens_s533;
[L3970]              havoc data_s533;
[L3971]              havoc success_s533;
[L3972]              havoc tmpNow;
[L3973]              havoc gas;
[L3974]              assume gas > 4000000 && gas <= 8000000;
[L3975]              tmpNow := now;
[L3976]              havoc now;
[L3977]              assume now > tmpNow;
[L3978]              assume msgsender_MSG != null;
[L3979]              assume DType[msgsender_MSG] != SafeMath;
[L3980]              assume DType[msgsender_MSG] != ERC20Interface;
[L3981]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L3982]              assume DType[msgsender_MSG] != Owned;
[L3983]              assume DType[msgsender_MSG] != MyToken;
[L3984]              Alloc[msgsender_MSG] := true;
[L3985]  COND FALSE  !(choice == 19)
[L3993]  COND FALSE  !(choice == 18)
[L4001]  COND FALSE  !(choice == 17)
[L4009]  COND FALSE  !(choice == 16)
[L4017]  COND FALSE  !(choice == 15)
[L4023]  COND FALSE  !(choice == 14)
[L4029]  COND FALSE  !(choice == 13)
[L4035]  COND TRUE   choice == 12
[L4036]              gas := gas - 21000;
[L4037]  COND TRUE   gas >= 0
[L4038]              assume tokens_s387 >= 0 && tokens_s387 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4039]              assume msgvalue_MSG == 0;
[L4040]  CALL        call success_s387 := transfer~address~uint256_MyToken(this, msgsender_MSG, msgvalue_MSG, to_s387, tokens_s387);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == to_s387 && tokens_s387 <= balances_MyToken[this][msgsender_MSG]) && tokens_s387 >= 0) && tokens_s387 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_MyToken[this][to_s387] >= 0) && balances_MyToken[this][to_s387] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_MyToken[this][msgsender_MSG] >= 0) && balances_MyToken[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_MyToken0 := true;
[L2]                 call_transfer_MyToken0 := false;
[L2]                 revert := revert_hold;
[L932]               havoc __exception;
[L933]               revert := false;
[L934]   COND TRUE   __exception
[L935]               __tmp__Balance := Balance;
[L936]               __tmp__DType := DType;
[L937]               __tmp__Alloc := Alloc;
[L938]               __tmp__balance_ADDR := balance_ADDR;
[L939]               __tmp__M_Ref_int := M_Ref_int;
[L940]               __tmp__sum_balances0 := sum_balances0;
[L941]               __tmp__alloc_allowed_MyToken_lvl0 := alloc_allowed_MyToken_lvl0;
[L942]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L943]               __tmp__sum_allowed1 := sum_allowed1;
[L944]               __tmp__Length := Length;
[L945]               __tmp__now := now;
[L946]               __tmp__owner_Owned := owner_Owned;
[L947]               __tmp__newOwner_Owned := newOwner_Owned;
[L948]               __tmp__symbol_MyToken := symbol_MyToken;
[L949]               __tmp__name_MyToken := name_MyToken;
[L950]               __tmp__decimals_MyToken := decimals_MyToken;
[L951]               __tmp___totalSupply_MyToken := _totalSupply_MyToken;
[L952]               __tmp__balances_MyToken := balances_MyToken;
[L953]               __tmp__allowed_MyToken := allowed_MyToken;
[L954]   CALL        call success_s387 := transfer~address~uint256_MyToken__fail(this, msgsender_MSG, msgvalue_MSG, to_s387, tokens_s387);
[L2267]  COND TRUE   __tmp__DType[this] == MyToken
[L2268]  CALL        call __var_4 := safeSub~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balances_MyToken[this][msgsender_MSG], tokens_s387);
[L1921]  COND FALSE  !(!(b_s45 <= a_s45))
[L1925]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2268]  RET         call __var_4 := safeSub~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balances_MyToken[this][msgsender_MSG], tokens_s387);
[L2269]  COND FALSE  !(revert)
[L2275]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] - __tmp__balances_MyToken[this][msgsender_MSG];
[L2276]              __tmp__balances_MyToken[this][msgsender_MSG] := __var_4;
[L2277]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] + __tmp__balances_MyToken[this][msgsender_MSG];
[L2278]  COND TRUE   __tmp__DType[this] == MyToken
[L2279]  CALL        call __var_5 := safeAdd~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balances_MyToken[this][to_s387], tokens_s387);
[L1903]              c_s23 := (a_s23 + b_s23) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1904]  COND FALSE  !(!(c_s23 >= a_s23))
[L2279]  RET         call __var_5 := safeAdd~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balances_MyToken[this][to_s387], tokens_s387);
[L2280]  COND FALSE  !(revert)
[L2286]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] - __tmp__balances_MyToken[this][to_s387];
[L2287]              __tmp__balances_MyToken[this][to_s387] := __var_5;
[L2288]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] + __tmp__balances_MyToken[this][to_s387];
[L2289]              success_s387 := true;
[L954]   RET         call success_s387 := transfer~address~uint256_MyToken__fail(this, msgsender_MSG, msgvalue_MSG, to_s387, tokens_s387);
[L955]               assume revert || gas < 0;
[L4040]  RET         call success_s387 := transfer~address~uint256_MyToken(this, msgsender_MSG, msgvalue_MSG, to_s387, tokens_s387);
[L4133]  RET         call CorralChoice_MyToken(this);

[2020-11-25 01:53:35,606 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 01:53:35,606 INFO  L82        PathProgramCache]: Analyzing trace with hash -301432025, now seen corresponding path program 1 times
[2020-11-25 01:53:35,606 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 01:53:35,614 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 01:53:35,641 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 01:53:35,641 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 01:53:35,641 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [6] imperfect sequences [] total 6
[2020-11-25 01:53:35,642 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 01:53:35,642 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 6 interpolants.
[2020-11-25 01:53:35,642 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=10, Invalid=20, Unknown=0, NotChecked=0, Total=30
[2020-11-25 01:53:35,642 INFO  L87              Difference]: Start difference. First operand 2555 states and 2733 transitions. cyclomatic complexity: 182 Second operand 6 states.
[2020-11-25 01:53:36,026 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 01:53:36,026 INFO  L93              Difference]: Finished difference Result 3268 states and 3592 transitions.
[2020-11-25 01:53:36,026 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 10 states. 
[2020-11-25 01:53:36,026 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 3268 states and 3592 transitions.
[2020-11-25 01:53:36,032 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 8
[2020-11-25 01:53:36,039 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 3268 states to 2432 states and 2753 transitions.
[2020-11-25 01:53:36,039 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 774
[2020-11-25 01:53:36,039 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 774
[2020-11-25 01:53:36,039 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 2432 states and 2753 transitions.
[2020-11-25 01:53:36,041 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 01:53:36,041 INFO  L728         BuchiCegarLoop]: Abstraction has 2432 states and 2753 transitions.
[2020-11-25 01:53:36,042 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 2432 states and 2753 transitions.
[2020-11-25 01:53:36,052 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 2432 to 1706.
[2020-11-25 01:53:36,052 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 1706 states.
[2020-11-25 01:53:36,054 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 1706 states to 1706 states and 1835 transitions.
[2020-11-25 01:53:36,054 INFO  L751         BuchiCegarLoop]: Abstraction has 1706 states and 1835 transitions.
[2020-11-25 01:53:36,054 INFO  L631         BuchiCegarLoop]: Abstraction has 1706 states and 1835 transitions.
[2020-11-25 01:53:36,054 INFO  L445         BuchiCegarLoop]: ======== Iteration 7============
[2020-11-25 01:53:36,054 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 1706 states and 1835 transitions.
[2020-11-25 01:53:36,056 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 01:53:36,056 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 01:53:36,056 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 01:53:36,057 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 01:53:36,057 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_MyToken0 := false;
[L2]                 call_transfer_MyToken0 := false;
[L2]     CALL        call main();
[L4123]              assume null == 0;
[L4124]  CALL        call this := FreshRefGenerator__success();
[L1863]              havoc newRef;
[L1864]              assume Alloc[newRef] == false;
[L1865]              Alloc[newRef] := true;
[L1866]              assume newRef != null;
[L4124]  RET         call this := FreshRefGenerator__success();
[L4125]              assume now >= 0;
[L4126]              assume DType[this] == MyToken;
[L4127]              assume msgvalue_MSG == 0;
[L4128]              gas := gas - 53000;
[L4129]  CALL        call MyToken_MyToken(this, msgsender_MSG, msgvalue_MSG, tokenName_s318, tokenSymbol_s318, tokenDecimals_s318, initialSupply_s318);
[L768]               havoc __exception;
[L769]               revert := false;
[L770]   COND FALSE  !(__exception)
[L793]   CALL        call MyToken_MyToken__success(this, msgsender_MSG, msgvalue_MSG, tokenName_s318, tokenSymbol_s318, tokenDecimals_s318, initialSupply_s318);
[L2217]  CALL        call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L1999]  CALL        call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1984]              assume msgsender_MSG != null;
[L1985]              Balance[this] := 0;
[L1999]  RET         call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2000]  COND FALSE  !(revert)
[L2217]  RET         call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L2218]  COND FALSE  !(revert)
[L2221]  CALL        call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L2069]  CALL        call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2051]              assume msgsender_MSG != null;
[L2052]              Balance[this] := 0;
[L2053]              owner_Owned[this] := null;
[L2054]              newOwner_Owned[this] := null;
[L2056]              owner_Owned[this] := msgsender_MSG;
[L2069]  RET         call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2070]  COND FALSE  !(revert)
[L2221]  RET         call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L2222]  COND FALSE  !(revert)
[L2225]  CALL        call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1895]  CALL        call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1880]              assume msgsender_MSG != null;
[L1881]              Balance[this] := 0;
[L1895]  RET         call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1896]  COND FALSE  !(revert)
[L2225]  RET         call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L2226]  COND FALSE  !(revert)
[L2229]  CALL        call MyToken_MyToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, tokenName_s318, tokenSymbol_s318, tokenDecimals_s318, initialSupply_s318);
[L2171]              assume msgsender_MSG != null;
[L2172]              Balance[this] := 0;
[L2173]              symbol_MyToken[this] := -1251229519;
[L2174]              name_MyToken[this] := -1251229519;
[L2175]              decimals_MyToken[this] := 0;
[L2176]              _totalSupply_MyToken[this] := 0;
[L2177]              balances_MyToken[this] := zeroRefintArr();
[L2178]              sum_balances0[this] := 0;
[L2179]              allowed_MyToken[this] := zeroRefRefintArr();
[L2180]              sum_allowed1[this] := 0;
[L2182]              name_MyToken[this] := tokenName_s318;
[L2183]              symbol_MyToken[this] := tokenSymbol_s318;
[L2184]              decimals_MyToken[this] := tokenDecimals_s318;
[L2185]              __var_2 := tokenDecimals_s318 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2186]              _totalSupply_MyToken[this] := nonlinearMul(initialSupply_s318, nonlinearPow(10, tokenDecimals_s318 % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2187]              sum_balances0[this] := sum_balances0[this] - balances_MyToken[this][msgsender_MSG];
[L2188]              balances_MyToken[this][msgsender_MSG] := _totalSupply_MyToken[this];
[L2189]              sum_balances0[this] := sum_balances0[this] + balances_MyToken[this][msgsender_MSG];
[L2190]              assert { :EventEmitted "Transfer_MyToken" } true;
[L2229]  RET         call MyToken_MyToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, tokenName_s318, tokenSymbol_s318, tokenDecimals_s318, initialSupply_s318);
[L2230]  COND FALSE  !(revert)
[L793]   RET         call MyToken_MyToken__success(this, msgsender_MSG, msgvalue_MSG, tokenName_s318, tokenSymbol_s318, tokenDecimals_s318, initialSupply_s318);
[L794]               assume !revert && gas >= 0;
[L4129]  RET         call MyToken_MyToken(this, msgsender_MSG, msgvalue_MSG, tokenName_s318, tokenSymbol_s318, tokenDecimals_s318, initialSupply_s318);
[L4130]              assume !revert && gas >= 0;
[L4133]  CALL        call CorralChoice_MyToken(this);
[L3926]              havoc msgsender_MSG;
[L3927]              havoc msgvalue_MSG;
[L3928]              havoc choice;
[L3929]              havoc a_s23;
[L3930]              havoc b_s23;
[L3931]              havoc c_s23;
[L3932]              havoc a_s45;
[L3933]              havoc b_s45;
[L3934]              havoc c_s45;
[L3935]              havoc a_s73;
[L3936]              havoc b_s73;
[L3937]              havoc c_s73;
[L3938]              havoc a_s95;
[L3939]              havoc b_s95;
[L3940]              havoc c_s95;
[L3941]              havoc __ret_0_totalSupply;
[L3942]              havoc tokenOwner_s344;
[L3943]              havoc balance_s344;
[L3944]              havoc tokenOwner_s490;
[L3945]              havoc spender_s490;
[L3946]              havoc remaining_s490;
[L3947]              havoc to_s387;
[L3948]              havoc tokens_s387;
[L3949]              havoc success_s387;
[L3950]              havoc spender_s415;
[L3951]              havoc tokens_s415;
[L3952]              havoc success_s415;
[L3953]              havoc from_s474;
[L3954]              havoc to_s474;
[L3955]              havoc tokens_s474;
[L3956]              havoc success_s474;
[L3957]              havoc __ret_0_owner;
[L3958]              havoc __ret_0_newOwner;
[L3959]              havoc _newOwner_s217;
[L3960]              havoc __ret_0_symbol;
[L3961]              havoc __ret_0_name;
[L3962]              havoc __ret_0_decimals;
[L3963]              havoc __ret_0__totalSupply;
[L3964]              havoc tokenName_s318;
[L3965]              havoc tokenSymbol_s318;
[L3966]              havoc tokenDecimals_s318;
[L3967]              havoc initialSupply_s318;
[L3968]              havoc spender_s533;
[L3969]              havoc tokens_s533;
[L3970]              havoc data_s533;
[L3971]              havoc success_s533;
[L3972]              havoc tmpNow;
[L3973]              havoc gas;
[L3974]              assume gas > 4000000 && gas <= 8000000;
[L3975]              tmpNow := now;
[L3976]              havoc now;
[L3977]              assume now > tmpNow;
[L3978]              assume msgsender_MSG != null;
[L3979]              assume DType[msgsender_MSG] != SafeMath;
[L3980]              assume DType[msgsender_MSG] != ERC20Interface;
[L3981]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L3982]              assume DType[msgsender_MSG] != Owned;
[L3983]              assume DType[msgsender_MSG] != MyToken;
[L3984]              Alloc[msgsender_MSG] := true;
[L3985]  COND FALSE  !(choice == 19)
[L3993]  COND FALSE  !(choice == 18)
[L4001]  COND FALSE  !(choice == 17)
[L4009]  COND FALSE  !(choice == 16)
[L4017]  COND FALSE  !(choice == 15)
[L4023]  COND FALSE  !(choice == 14)
[L4029]  COND FALSE  !(choice == 13)
[L4035]  COND TRUE   choice == 12
[L4036]              gas := gas - 21000;
[L4037]  COND TRUE   gas >= 0
[L4038]              assume tokens_s387 >= 0 && tokens_s387 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4039]              assume msgvalue_MSG == 0;
[L4040]  CALL        call success_s387 := transfer~address~uint256_MyToken(this, msgsender_MSG, msgvalue_MSG, to_s387, tokens_s387);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((msgsender_MSG == to_s387 && tokens_s387 <= balances_MyToken[this][msgsender_MSG]) && tokens_s387 >= 0) && tokens_s387 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_MyToken[this][to_s387] >= 0) && balances_MyToken[this][to_s387] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_MyToken[this][msgsender_MSG] >= 0) && balances_MyToken[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2]                 revert := revert_hold;
[L932]               havoc __exception;
[L933]               revert := false;
[L934]   COND FALSE  !(__exception)
[L957]   CALL        call success_s387 := transfer~address~uint256_MyToken__success(this, msgsender_MSG, msgvalue_MSG, to_s387, tokens_s387);
[L2297]  COND TRUE   DType[this] == MyToken
[L2298]  CALL        call __var_4 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_MyToken[this][msgsender_MSG], tokens_s387);
[L1930]  COND FALSE  !(!(b_s45 <= a_s45))
[L1934]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2298]  RET         call __var_4 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_MyToken[this][msgsender_MSG], tokens_s387);
[L2299]  COND FALSE  !(revert)
[L2305]              sum_balances0[this] := sum_balances0[this] - balances_MyToken[this][msgsender_MSG];
[L2306]              balances_MyToken[this][msgsender_MSG] := __var_4;
[L2307]              sum_balances0[this] := sum_balances0[this] + balances_MyToken[this][msgsender_MSG];
[L2308]  COND TRUE   DType[this] == MyToken
[L2309]  CALL        call __var_5 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_MyToken[this][to_s387], tokens_s387);
[L1912]              c_s23 := (a_s23 + b_s23) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1913]  COND FALSE  !(!(c_s23 >= a_s23))
[L2309]  RET         call __var_5 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_MyToken[this][to_s387], tokens_s387);
[L2310]  COND FALSE  !(revert)
[L2316]              sum_balances0[this] := sum_balances0[this] - balances_MyToken[this][to_s387];
[L2317]              balances_MyToken[this][to_s387] := __var_5;
[L2318]              sum_balances0[this] := sum_balances0[this] + balances_MyToken[this][to_s387];
[L2319]              assert { :EventEmitted "Transfer_MyToken" } true;
[L2320]              success_s387 := true;
[L957]   RET         call success_s387 := transfer~address~uint256_MyToken__success(this, msgsender_MSG, msgvalue_MSG, to_s387, tokens_s387);
[L958]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !((((((((success_s387 == true && _totalSupply_MyToken[this] == old(_totalSupply_MyToken[this])) && balances_MyToken[this] == old(balances_MyToken[this])) && allowed_MyToken[this] == old(allowed_MyToken[this])) && symbol_MyToken[this] == old(symbol_MyToken[this])) && name_MyToken[this] == old(name_MyToken[this])) && decimals_MyToken[this] == old(decimals_MyToken[this])) && owner_Owned[this] == old(owner_Owned[this])) && newOwner_Owned[this] == old(newOwner_Owned[this]));
[L2]                 revert := revert_hold;
[L4040]  RET         call success_s387 := transfer~address~uint256_MyToken(this, msgsender_MSG, msgvalue_MSG, to_s387, tokens_s387);
[L4133]  RET         call CorralChoice_MyToken(this);
[L4133]  CALL        call CorralChoice_MyToken(this);
[L3926]              havoc msgsender_MSG;
[L3927]              havoc msgvalue_MSG;
[L3928]              havoc choice;
[L3929]              havoc a_s23;
[L3930]              havoc b_s23;
[L3931]              havoc c_s23;
[L3932]              havoc a_s45;
[L3933]              havoc b_s45;
[L3934]              havoc c_s45;
[L3935]              havoc a_s73;
[L3936]              havoc b_s73;
[L3937]              havoc c_s73;
[L3938]              havoc a_s95;
[L3939]              havoc b_s95;
[L3940]              havoc c_s95;
[L3941]              havoc __ret_0_totalSupply;
[L3942]              havoc tokenOwner_s344;
[L3943]              havoc balance_s344;
[L3944]              havoc tokenOwner_s490;
[L3945]              havoc spender_s490;
[L3946]              havoc remaining_s490;
[L3947]              havoc to_s387;
[L3948]              havoc tokens_s387;
[L3949]              havoc success_s387;
[L3950]              havoc spender_s415;
[L3951]              havoc tokens_s415;
[L3952]              havoc success_s415;
[L3953]              havoc from_s474;
[L3954]              havoc to_s474;
[L3955]              havoc tokens_s474;
[L3956]              havoc success_s474;
[L3957]              havoc __ret_0_owner;
[L3958]              havoc __ret_0_newOwner;
[L3959]              havoc _newOwner_s217;
[L3960]              havoc __ret_0_symbol;
[L3961]              havoc __ret_0_name;
[L3962]              havoc __ret_0_decimals;
[L3963]              havoc __ret_0__totalSupply;
[L3964]              havoc tokenName_s318;
[L3965]              havoc tokenSymbol_s318;
[L3966]              havoc tokenDecimals_s318;
[L3967]              havoc initialSupply_s318;
[L3968]              havoc spender_s533;
[L3969]              havoc tokens_s533;
[L3970]              havoc data_s533;
[L3971]              havoc success_s533;
[L3972]              havoc tmpNow;
[L3973]              havoc gas;
[L3974]              assume gas > 4000000 && gas <= 8000000;
[L3975]              tmpNow := now;
[L3976]              havoc now;
[L3977]              assume now > tmpNow;
[L3978]              assume msgsender_MSG != null;
[L3979]              assume DType[msgsender_MSG] != SafeMath;
[L3980]              assume DType[msgsender_MSG] != ERC20Interface;
[L3981]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L3982]              assume DType[msgsender_MSG] != Owned;
[L3983]              assume DType[msgsender_MSG] != MyToken;
[L3984]              Alloc[msgsender_MSG] := true;
[L3985]  COND FALSE  !(choice == 19)
[L3993]  COND FALSE  !(choice == 18)
[L4001]  COND FALSE  !(choice == 17)
[L4009]  COND FALSE  !(choice == 16)
[L4017]  COND FALSE  !(choice == 15)
[L4023]  COND FALSE  !(choice == 14)
[L4029]  COND FALSE  !(choice == 13)
[L4035]  COND TRUE   choice == 12
[L4036]              gas := gas - 21000;
[L4037]  COND TRUE   gas >= 0
[L4038]              assume tokens_s387 >= 0 && tokens_s387 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4039]              assume msgvalue_MSG == 0;
[L4040]  CALL        call success_s387 := transfer~address~uint256_MyToken(this, msgsender_MSG, msgvalue_MSG, to_s387, tokens_s387);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == to_s387 && tokens_s387 <= balances_MyToken[this][msgsender_MSG]) && tokens_s387 >= 0) && tokens_s387 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_MyToken[this][to_s387] >= 0) && balances_MyToken[this][to_s387] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_MyToken[this][msgsender_MSG] >= 0) && balances_MyToken[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_MyToken0 := true;
[L2]                 call_transfer_MyToken0 := false;
[L2]                 revert := revert_hold;
[L932]               havoc __exception;
[L933]               revert := false;
[L934]   COND FALSE  !(__exception)
[L957]   CALL        call success_s387 := transfer~address~uint256_MyToken__success(this, msgsender_MSG, msgvalue_MSG, to_s387, tokens_s387);
[L2297]  COND TRUE   DType[this] == MyToken
[L2298]  CALL        call __var_4 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_MyToken[this][msgsender_MSG], tokens_s387);
[L1930]  COND FALSE  !(!(b_s45 <= a_s45))
[L1934]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2298]  RET         call __var_4 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_MyToken[this][msgsender_MSG], tokens_s387);
[L2299]  COND FALSE  !(revert)
[L2305]              sum_balances0[this] := sum_balances0[this] - balances_MyToken[this][msgsender_MSG];
[L2306]              balances_MyToken[this][msgsender_MSG] := __var_4;
[L2307]              sum_balances0[this] := sum_balances0[this] + balances_MyToken[this][msgsender_MSG];
[L2308]  COND TRUE   DType[this] == MyToken
[L2309]  CALL        call __var_5 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_MyToken[this][to_s387], tokens_s387);
[L1912]              c_s23 := (a_s23 + b_s23) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1913]  COND FALSE  !(!(c_s23 >= a_s23))
[L2309]  RET         call __var_5 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_MyToken[this][to_s387], tokens_s387);
[L2310]  COND FALSE  !(revert)
[L2316]              sum_balances0[this] := sum_balances0[this] - balances_MyToken[this][to_s387];
[L2317]              balances_MyToken[this][to_s387] := __var_5;
[L2318]              sum_balances0[this] := sum_balances0[this] + balances_MyToken[this][to_s387];
[L2319]              assert { :EventEmitted "Transfer_MyToken" } true;
[L2320]              success_s387 := true;
[L957]   RET         call success_s387 := transfer~address~uint256_MyToken__success(this, msgsender_MSG, msgvalue_MSG, to_s387, tokens_s387);
[L958]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !((((((((success_s387 == true && _totalSupply_MyToken[this] == old(_totalSupply_MyToken[this])) && balances_MyToken[this] == old(balances_MyToken[this])) && allowed_MyToken[this] == old(allowed_MyToken[this])) && symbol_MyToken[this] == old(symbol_MyToken[this])) && name_MyToken[this] == old(name_MyToken[this])) && decimals_MyToken[this] == old(decimals_MyToken[this])) && owner_Owned[this] == old(owner_Owned[this])) && newOwner_Owned[this] == old(newOwner_Owned[this]));
[L2]                 revert := revert_hold;
[L4040]  RET         call success_s387 := transfer~address~uint256_MyToken(this, msgsender_MSG, msgvalue_MSG, to_s387, tokens_s387);
[L4133]  RET         call CorralChoice_MyToken(this);

Loop:
[L4133]  CALL        call CorralChoice_MyToken(this);
[L3926]              havoc msgsender_MSG;
[L3927]              havoc msgvalue_MSG;
[L3928]              havoc choice;
[L3929]              havoc a_s23;
[L3930]              havoc b_s23;
[L3931]              havoc c_s23;
[L3932]              havoc a_s45;
[L3933]              havoc b_s45;
[L3934]              havoc c_s45;
[L3935]              havoc a_s73;
[L3936]              havoc b_s73;
[L3937]              havoc c_s73;
[L3938]              havoc a_s95;
[L3939]              havoc b_s95;
[L3940]              havoc c_s95;
[L3941]              havoc __ret_0_totalSupply;
[L3942]              havoc tokenOwner_s344;
[L3943]              havoc balance_s344;
[L3944]              havoc tokenOwner_s490;
[L3945]              havoc spender_s490;
[L3946]              havoc remaining_s490;
[L3947]              havoc to_s387;
[L3948]              havoc tokens_s387;
[L3949]              havoc success_s387;
[L3950]              havoc spender_s415;
[L3951]              havoc tokens_s415;
[L3952]              havoc success_s415;
[L3953]              havoc from_s474;
[L3954]              havoc to_s474;
[L3955]              havoc tokens_s474;
[L3956]              havoc success_s474;
[L3957]              havoc __ret_0_owner;
[L3958]              havoc __ret_0_newOwner;
[L3959]              havoc _newOwner_s217;
[L3960]              havoc __ret_0_symbol;
[L3961]              havoc __ret_0_name;
[L3962]              havoc __ret_0_decimals;
[L3963]              havoc __ret_0__totalSupply;
[L3964]              havoc tokenName_s318;
[L3965]              havoc tokenSymbol_s318;
[L3966]              havoc tokenDecimals_s318;
[L3967]              havoc initialSupply_s318;
[L3968]              havoc spender_s533;
[L3969]              havoc tokens_s533;
[L3970]              havoc data_s533;
[L3971]              havoc success_s533;
[L3972]              havoc tmpNow;
[L3973]              havoc gas;
[L3974]              assume gas > 4000000 && gas <= 8000000;
[L3975]              tmpNow := now;
[L3976]              havoc now;
[L3977]              assume now > tmpNow;
[L3978]              assume msgsender_MSG != null;
[L3979]              assume DType[msgsender_MSG] != SafeMath;
[L3980]              assume DType[msgsender_MSG] != ERC20Interface;
[L3981]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L3982]              assume DType[msgsender_MSG] != Owned;
[L3983]              assume DType[msgsender_MSG] != MyToken;
[L3984]              Alloc[msgsender_MSG] := true;
[L3985]  COND TRUE   choice == 19
[L3986]              gas := gas - 21000;
[L3987]  COND FALSE  !(gas >= 0)
[L4133]  RET         call CorralChoice_MyToken(this);

[2020-11-25 01:53:36,060 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 01:53:36,061 INFO  L82        PathProgramCache]: Analyzing trace with hash 651389314, now seen corresponding path program 1 times
[2020-11-25 01:53:36,061 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 01:53:36,132 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 01:53:37,589 INFO  L134       CoverageAnalysis]: Checked inductivity of 78 backedges. 0 proven. 3 refuted. 0 times theorem prover too weak. 75 trivial. 0 not checked.
[2020-11-25 01:53:37,589 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 01:53:37,589 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [38] total 38
[2020-11-25 01:53:37,590 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 01:53:37,590 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 39 interpolants.
[2020-11-25 01:53:37,590 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=122, Invalid=1360, Unknown=0, NotChecked=0, Total=1482
[2020-11-25 01:53:37,590 INFO  L87              Difference]: Start difference. First operand 1706 states and 1835 transitions. cyclomatic complexity: 132 Second operand 39 states.
[2020-11-25 01:53:39,518 WARN  L188               SmtUtils]: Spent 133.00 ms on a formula simplification. DAG size of input: 104 DAG size of output: 99
[2020-11-25 01:53:43,161 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 01:53:43,161 INFO  L93              Difference]: Finished difference Result 1927 states and 2129 transitions.
[2020-11-25 01:53:43,161 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 37 states. 
[2020-11-25 01:53:43,162 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 1927 states and 2129 transitions.
[2020-11-25 01:53:43,166 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 01:53:43,169 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 1927 states to 1927 states and 2129 transitions.
[2020-11-25 01:53:43,169 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 724
[2020-11-25 01:53:43,170 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 724
[2020-11-25 01:53:43,170 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 1927 states and 2129 transitions.
[2020-11-25 01:53:43,171 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 01:53:43,171 INFO  L728         BuchiCegarLoop]: Abstraction has 1927 states and 2129 transitions.
[2020-11-25 01:53:43,173 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 1927 states and 2129 transitions.
[2020-11-25 01:53:43,182 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 1927 to 1907.
[2020-11-25 01:53:43,182 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 1907 states.
[2020-11-25 01:53:43,184 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 1907 states to 1907 states and 2105 transitions.
[2020-11-25 01:53:43,184 INFO  L751         BuchiCegarLoop]: Abstraction has 1907 states and 2105 transitions.
[2020-11-25 01:53:43,184 INFO  L631         BuchiCegarLoop]: Abstraction has 1907 states and 2105 transitions.
[2020-11-25 01:53:43,184 INFO  L445         BuchiCegarLoop]: ======== Iteration 8============
[2020-11-25 01:53:43,184 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 1907 states and 2105 transitions.
[2020-11-25 01:53:43,186 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 01:53:43,186 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 01:53:43,186 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 01:53:43,187 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 01:53:43,187 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_MyToken0 := false;
[L2]                 call_transfer_MyToken0 := false;
[L2]     CALL        call main();
[L4123]              assume null == 0;
[L4124]  CALL        call this := FreshRefGenerator__success();
[L1863]              havoc newRef;
[L1864]              assume Alloc[newRef] == false;
[L1865]              Alloc[newRef] := true;
[L1866]              assume newRef != null;
[L4124]  RET         call this := FreshRefGenerator__success();
[L4125]              assume now >= 0;
[L4126]              assume DType[this] == MyToken;
[L4127]              assume msgvalue_MSG == 0;
[L4128]              gas := gas - 53000;
[L4129]  CALL        call MyToken_MyToken(this, msgsender_MSG, msgvalue_MSG, tokenName_s318, tokenSymbol_s318, tokenDecimals_s318, initialSupply_s318);
[L768]               havoc __exception;
[L769]               revert := false;
[L770]   COND FALSE  !(__exception)
[L793]   CALL        call MyToken_MyToken__success(this, msgsender_MSG, msgvalue_MSG, tokenName_s318, tokenSymbol_s318, tokenDecimals_s318, initialSupply_s318);
[L2217]  CALL        call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L1999]  CALL        call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1984]              assume msgsender_MSG != null;
[L1985]              Balance[this] := 0;
[L1999]  RET         call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2000]  COND FALSE  !(revert)
[L2217]  RET         call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L2218]  COND FALSE  !(revert)
[L2221]  CALL        call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L2069]  CALL        call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2051]              assume msgsender_MSG != null;
[L2052]              Balance[this] := 0;
[L2053]              owner_Owned[this] := null;
[L2054]              newOwner_Owned[this] := null;
[L2056]              owner_Owned[this] := msgsender_MSG;
[L2069]  RET         call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2070]  COND FALSE  !(revert)
[L2221]  RET         call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L2222]  COND FALSE  !(revert)
[L2225]  CALL        call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1895]  CALL        call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1880]              assume msgsender_MSG != null;
[L1881]              Balance[this] := 0;
[L1895]  RET         call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1896]  COND FALSE  !(revert)
[L2225]  RET         call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L2226]  COND FALSE  !(revert)
[L2229]  CALL        call MyToken_MyToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, tokenName_s318, tokenSymbol_s318, tokenDecimals_s318, initialSupply_s318);
[L2171]              assume msgsender_MSG != null;
[L2172]              Balance[this] := 0;
[L2173]              symbol_MyToken[this] := -1251229519;
[L2174]              name_MyToken[this] := -1251229519;
[L2175]              decimals_MyToken[this] := 0;
[L2176]              _totalSupply_MyToken[this] := 0;
[L2177]              balances_MyToken[this] := zeroRefintArr();
[L2178]              sum_balances0[this] := 0;
[L2179]              allowed_MyToken[this] := zeroRefRefintArr();
[L2180]              sum_allowed1[this] := 0;
[L2182]              name_MyToken[this] := tokenName_s318;
[L2183]              symbol_MyToken[this] := tokenSymbol_s318;
[L2184]              decimals_MyToken[this] := tokenDecimals_s318;
[L2185]              __var_2 := tokenDecimals_s318 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2186]              _totalSupply_MyToken[this] := nonlinearMul(initialSupply_s318, nonlinearPow(10, tokenDecimals_s318 % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2187]              sum_balances0[this] := sum_balances0[this] - balances_MyToken[this][msgsender_MSG];
[L2188]              balances_MyToken[this][msgsender_MSG] := _totalSupply_MyToken[this];
[L2189]              sum_balances0[this] := sum_balances0[this] + balances_MyToken[this][msgsender_MSG];
[L2190]              assert { :EventEmitted "Transfer_MyToken" } true;
[L2229]  RET         call MyToken_MyToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, tokenName_s318, tokenSymbol_s318, tokenDecimals_s318, initialSupply_s318);
[L2230]  COND FALSE  !(revert)
[L793]   RET         call MyToken_MyToken__success(this, msgsender_MSG, msgvalue_MSG, tokenName_s318, tokenSymbol_s318, tokenDecimals_s318, initialSupply_s318);
[L794]               assume !revert && gas >= 0;
[L4129]  RET         call MyToken_MyToken(this, msgsender_MSG, msgvalue_MSG, tokenName_s318, tokenSymbol_s318, tokenDecimals_s318, initialSupply_s318);
[L4130]              assume !revert && gas >= 0;
[L4133]  CALL        call CorralChoice_MyToken(this);
[L3926]              havoc msgsender_MSG;
[L3927]              havoc msgvalue_MSG;
[L3928]              havoc choice;
[L3929]              havoc a_s23;
[L3930]              havoc b_s23;
[L3931]              havoc c_s23;
[L3932]              havoc a_s45;
[L3933]              havoc b_s45;
[L3934]              havoc c_s45;
[L3935]              havoc a_s73;
[L3936]              havoc b_s73;
[L3937]              havoc c_s73;
[L3938]              havoc a_s95;
[L3939]              havoc b_s95;
[L3940]              havoc c_s95;
[L3941]              havoc __ret_0_totalSupply;
[L3942]              havoc tokenOwner_s344;
[L3943]              havoc balance_s344;
[L3944]              havoc tokenOwner_s490;
[L3945]              havoc spender_s490;
[L3946]              havoc remaining_s490;
[L3947]              havoc to_s387;
[L3948]              havoc tokens_s387;
[L3949]              havoc success_s387;
[L3950]              havoc spender_s415;
[L3951]              havoc tokens_s415;
[L3952]              havoc success_s415;
[L3953]              havoc from_s474;
[L3954]              havoc to_s474;
[L3955]              havoc tokens_s474;
[L3956]              havoc success_s474;
[L3957]              havoc __ret_0_owner;
[L3958]              havoc __ret_0_newOwner;
[L3959]              havoc _newOwner_s217;
[L3960]              havoc __ret_0_symbol;
[L3961]              havoc __ret_0_name;
[L3962]              havoc __ret_0_decimals;
[L3963]              havoc __ret_0__totalSupply;
[L3964]              havoc tokenName_s318;
[L3965]              havoc tokenSymbol_s318;
[L3966]              havoc tokenDecimals_s318;
[L3967]              havoc initialSupply_s318;
[L3968]              havoc spender_s533;
[L3969]              havoc tokens_s533;
[L3970]              havoc data_s533;
[L3971]              havoc success_s533;
[L3972]              havoc tmpNow;
[L3973]              havoc gas;
[L3974]              assume gas > 4000000 && gas <= 8000000;
[L3975]              tmpNow := now;
[L3976]              havoc now;
[L3977]              assume now > tmpNow;
[L3978]              assume msgsender_MSG != null;
[L3979]              assume DType[msgsender_MSG] != SafeMath;
[L3980]              assume DType[msgsender_MSG] != ERC20Interface;
[L3981]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L3982]              assume DType[msgsender_MSG] != Owned;
[L3983]              assume DType[msgsender_MSG] != MyToken;
[L3984]              Alloc[msgsender_MSG] := true;
[L3985]  COND FALSE  !(choice == 19)
[L3993]  COND FALSE  !(choice == 18)
[L4001]  COND FALSE  !(choice == 17)
[L4009]  COND FALSE  !(choice == 16)
[L4017]  COND FALSE  !(choice == 15)
[L4023]  COND FALSE  !(choice == 14)
[L4029]  COND FALSE  !(choice == 13)
[L4035]  COND FALSE  !(choice == 12)
[L4042]  COND FALSE  !(choice == 11)
[L4049]  COND TRUE   choice == 10
[L4050]              gas := gas - 21000;
[L4051]  COND TRUE   gas >= 0
[L4052]              assume tokens_s474 >= 0 && tokens_s474 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4053]              assume msgvalue_MSG == 0;
[L4054]  CALL        call success_s474 := transferFrom~address~address~uint256_MyToken(this, msgsender_MSG, msgvalue_MSG, from_s474, to_s474, tokens_s474);
[L1046]              havoc __exception;
[L1047]              revert := false;
[L1048]  COND FALSE  !(__exception)
[L1071]  CALL        call success_s474 := transferFrom~address~address~uint256_MyToken__success(this, msgsender_MSG, msgvalue_MSG, from_s474, to_s474, tokens_s474);
[L2390]  COND TRUE   DType[this] == MyToken
[L2391]  CALL        call __var_6 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_MyToken[this][from_s474], tokens_s474);
[L1930]  COND FALSE  !(!(b_s45 <= a_s45))
[L1934]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2391]  RET         call __var_6 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_MyToken[this][from_s474], tokens_s474);
[L2392]  COND FALSE  !(revert)
[L2398]              sum_balances0[this] := sum_balances0[this] - balances_MyToken[this][from_s474];
[L2399]              balances_MyToken[this][from_s474] := __var_6;
[L2400]              sum_balances0[this] := sum_balances0[this] + balances_MyToken[this][from_s474];
[L2401]  COND TRUE   DType[this] == MyToken
[L2402]  CALL        call __var_7 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, allowed_MyToken[this][from_s474][msgsender_MSG], tokens_s474);
[L1930]  COND FALSE  !(!(b_s45 <= a_s45))
[L1934]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2402]  RET         call __var_7 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, allowed_MyToken[this][from_s474][msgsender_MSG], tokens_s474);
[L2403]  COND FALSE  !(revert)
[L2409]              sum_allowed1[from_s474] := sum_allowed1[from_s474] - allowed_MyToken[this][from_s474][msgsender_MSG];
[L2410]              allowed_MyToken[this][from_s474][msgsender_MSG] := __var_7;
[L2411]              sum_allowed1[from_s474] := sum_allowed1[from_s474] + allowed_MyToken[this][from_s474][msgsender_MSG];
[L2412]  COND TRUE   DType[this] == MyToken
[L2413]  CALL        call __var_8 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_MyToken[this][to_s474], tokens_s474);
[L1912]              c_s23 := (a_s23 + b_s23) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1913]  COND FALSE  !(!(c_s23 >= a_s23))
[L2413]  RET         call __var_8 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_MyToken[this][to_s474], tokens_s474);
[L2414]  COND FALSE  !(revert)
[L2420]              sum_balances0[this] := sum_balances0[this] - balances_MyToken[this][to_s474];
[L2421]              balances_MyToken[this][to_s474] := __var_8;
[L2422]              sum_balances0[this] := sum_balances0[this] + balances_MyToken[this][to_s474];
[L2423]              assert { :EventEmitted "Transfer_MyToken" } true;
[L2424]              success_s474 := true;
[L1071]  RET         call success_s474 := transferFrom~address~address~uint256_MyToken__success(this, msgsender_MSG, msgvalue_MSG, from_s474, to_s474, tokens_s474);
[L1072]              assume !revert && gas >= 0;
[L4054]  RET         call success_s474 := transferFrom~address~address~uint256_MyToken(this, msgsender_MSG, msgvalue_MSG, from_s474, to_s474, tokens_s474);
[L4133]  RET         call CorralChoice_MyToken(this);
[L4133]  CALL        call CorralChoice_MyToken(this);
[L3926]              havoc msgsender_MSG;
[L3927]              havoc msgvalue_MSG;
[L3928]              havoc choice;
[L3929]              havoc a_s23;
[L3930]              havoc b_s23;
[L3931]              havoc c_s23;
[L3932]              havoc a_s45;
[L3933]              havoc b_s45;
[L3934]              havoc c_s45;
[L3935]              havoc a_s73;
[L3936]              havoc b_s73;
[L3937]              havoc c_s73;
[L3938]              havoc a_s95;
[L3939]              havoc b_s95;
[L3940]              havoc c_s95;
[L3941]              havoc __ret_0_totalSupply;
[L3942]              havoc tokenOwner_s344;
[L3943]              havoc balance_s344;
[L3944]              havoc tokenOwner_s490;
[L3945]              havoc spender_s490;
[L3946]              havoc remaining_s490;
[L3947]              havoc to_s387;
[L3948]              havoc tokens_s387;
[L3949]              havoc success_s387;
[L3950]              havoc spender_s415;
[L3951]              havoc tokens_s415;
[L3952]              havoc success_s415;
[L3953]              havoc from_s474;
[L3954]              havoc to_s474;
[L3955]              havoc tokens_s474;
[L3956]              havoc success_s474;
[L3957]              havoc __ret_0_owner;
[L3958]              havoc __ret_0_newOwner;
[L3959]              havoc _newOwner_s217;
[L3960]              havoc __ret_0_symbol;
[L3961]              havoc __ret_0_name;
[L3962]              havoc __ret_0_decimals;
[L3963]              havoc __ret_0__totalSupply;
[L3964]              havoc tokenName_s318;
[L3965]              havoc tokenSymbol_s318;
[L3966]              havoc tokenDecimals_s318;
[L3967]              havoc initialSupply_s318;
[L3968]              havoc spender_s533;
[L3969]              havoc tokens_s533;
[L3970]              havoc data_s533;
[L3971]              havoc success_s533;
[L3972]              havoc tmpNow;
[L3973]              havoc gas;
[L3974]              assume gas > 4000000 && gas <= 8000000;
[L3975]              tmpNow := now;
[L3976]              havoc now;
[L3977]              assume now > tmpNow;
[L3978]              assume msgsender_MSG != null;
[L3979]              assume DType[msgsender_MSG] != SafeMath;
[L3980]              assume DType[msgsender_MSG] != ERC20Interface;
[L3981]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L3982]              assume DType[msgsender_MSG] != Owned;
[L3983]              assume DType[msgsender_MSG] != MyToken;
[L3984]              Alloc[msgsender_MSG] := true;
[L3985]  COND FALSE  !(choice == 19)
[L3993]  COND FALSE  !(choice == 18)
[L4001]  COND FALSE  !(choice == 17)
[L4009]  COND FALSE  !(choice == 16)
[L4017]  COND FALSE  !(choice == 15)
[L4023]  COND FALSE  !(choice == 14)
[L4029]  COND FALSE  !(choice == 13)
[L4035]  COND TRUE   choice == 12
[L4036]              gas := gas - 21000;
[L4037]  COND TRUE   gas >= 0
[L4038]              assume tokens_s387 >= 0 && tokens_s387 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4039]              assume msgvalue_MSG == 0;
[L4040]  CALL        call success_s387 := transfer~address~uint256_MyToken(this, msgsender_MSG, msgvalue_MSG, to_s387, tokens_s387);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == to_s387 && tokens_s387 <= balances_MyToken[this][msgsender_MSG]) && tokens_s387 >= 0) && tokens_s387 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_MyToken[this][to_s387] >= 0) && balances_MyToken[this][to_s387] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_MyToken[this][msgsender_MSG] >= 0) && balances_MyToken[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_MyToken0 := true;
[L2]                 call_transfer_MyToken0 := false;
[L2]                 revert := revert_hold;
[L932]               havoc __exception;
[L933]               revert := false;
[L934]   COND FALSE  !(__exception)
[L957]   CALL        call success_s387 := transfer~address~uint256_MyToken__success(this, msgsender_MSG, msgvalue_MSG, to_s387, tokens_s387);
[L2297]  COND TRUE   DType[this] == MyToken
[L2298]  CALL        call __var_4 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_MyToken[this][msgsender_MSG], tokens_s387);
[L1930]  COND FALSE  !(!(b_s45 <= a_s45))
[L1934]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2298]  RET         call __var_4 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_MyToken[this][msgsender_MSG], tokens_s387);
[L2299]  COND FALSE  !(revert)
[L2305]              sum_balances0[this] := sum_balances0[this] - balances_MyToken[this][msgsender_MSG];
[L2306]              balances_MyToken[this][msgsender_MSG] := __var_4;
[L2307]              sum_balances0[this] := sum_balances0[this] + balances_MyToken[this][msgsender_MSG];
[L2308]  COND TRUE   DType[this] == MyToken
[L2309]  CALL        call __var_5 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_MyToken[this][to_s387], tokens_s387);
[L1912]              c_s23 := (a_s23 + b_s23) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1913]  COND FALSE  !(!(c_s23 >= a_s23))
[L2309]  RET         call __var_5 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_MyToken[this][to_s387], tokens_s387);
[L2310]  COND FALSE  !(revert)
[L2316]              sum_balances0[this] := sum_balances0[this] - balances_MyToken[this][to_s387];
[L2317]              balances_MyToken[this][to_s387] := __var_5;
[L2318]              sum_balances0[this] := sum_balances0[this] + balances_MyToken[this][to_s387];
[L2319]              assert { :EventEmitted "Transfer_MyToken" } true;
[L2320]              success_s387 := true;
[L957]   RET         call success_s387 := transfer~address~uint256_MyToken__success(this, msgsender_MSG, msgvalue_MSG, to_s387, tokens_s387);
[L958]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !((((((((success_s387 == true && _totalSupply_MyToken[this] == old(_totalSupply_MyToken[this])) && balances_MyToken[this] == old(balances_MyToken[this])) && allowed_MyToken[this] == old(allowed_MyToken[this])) && symbol_MyToken[this] == old(symbol_MyToken[this])) && name_MyToken[this] == old(name_MyToken[this])) && decimals_MyToken[this] == old(decimals_MyToken[this])) && owner_Owned[this] == old(owner_Owned[this])) && newOwner_Owned[this] == old(newOwner_Owned[this]));
[L2]                 revert := revert_hold;
[L4040]  RET         call success_s387 := transfer~address~uint256_MyToken(this, msgsender_MSG, msgvalue_MSG, to_s387, tokens_s387);
[L4133]  RET         call CorralChoice_MyToken(this);

Loop:
[L4133]  CALL        call CorralChoice_MyToken(this);
[L3926]              havoc msgsender_MSG;
[L3927]              havoc msgvalue_MSG;
[L3928]              havoc choice;
[L3929]              havoc a_s23;
[L3930]              havoc b_s23;
[L3931]              havoc c_s23;
[L3932]              havoc a_s45;
[L3933]              havoc b_s45;
[L3934]              havoc c_s45;
[L3935]              havoc a_s73;
[L3936]              havoc b_s73;
[L3937]              havoc c_s73;
[L3938]              havoc a_s95;
[L3939]              havoc b_s95;
[L3940]              havoc c_s95;
[L3941]              havoc __ret_0_totalSupply;
[L3942]              havoc tokenOwner_s344;
[L3943]              havoc balance_s344;
[L3944]              havoc tokenOwner_s490;
[L3945]              havoc spender_s490;
[L3946]              havoc remaining_s490;
[L3947]              havoc to_s387;
[L3948]              havoc tokens_s387;
[L3949]              havoc success_s387;
[L3950]              havoc spender_s415;
[L3951]              havoc tokens_s415;
[L3952]              havoc success_s415;
[L3953]              havoc from_s474;
[L3954]              havoc to_s474;
[L3955]              havoc tokens_s474;
[L3956]              havoc success_s474;
[L3957]              havoc __ret_0_owner;
[L3958]              havoc __ret_0_newOwner;
[L3959]              havoc _newOwner_s217;
[L3960]              havoc __ret_0_symbol;
[L3961]              havoc __ret_0_name;
[L3962]              havoc __ret_0_decimals;
[L3963]              havoc __ret_0__totalSupply;
[L3964]              havoc tokenName_s318;
[L3965]              havoc tokenSymbol_s318;
[L3966]              havoc tokenDecimals_s318;
[L3967]              havoc initialSupply_s318;
[L3968]              havoc spender_s533;
[L3969]              havoc tokens_s533;
[L3970]              havoc data_s533;
[L3971]              havoc success_s533;
[L3972]              havoc tmpNow;
[L3973]              havoc gas;
[L3974]              assume gas > 4000000 && gas <= 8000000;
[L3975]              tmpNow := now;
[L3976]              havoc now;
[L3977]              assume now > tmpNow;
[L3978]              assume msgsender_MSG != null;
[L3979]              assume DType[msgsender_MSG] != SafeMath;
[L3980]              assume DType[msgsender_MSG] != ERC20Interface;
[L3981]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L3982]              assume DType[msgsender_MSG] != Owned;
[L3983]              assume DType[msgsender_MSG] != MyToken;
[L3984]              Alloc[msgsender_MSG] := true;
[L3985]  COND FALSE  !(choice == 19)
[L3993]  COND FALSE  !(choice == 18)
[L4001]  COND FALSE  !(choice == 17)
[L4009]  COND FALSE  !(choice == 16)
[L4017]  COND FALSE  !(choice == 15)
[L4023]  COND FALSE  !(choice == 14)
[L4029]  COND FALSE  !(choice == 13)
[L4035]  COND FALSE  !(choice == 12)
[L4042]  COND FALSE  !(choice == 11)
[L4049]  COND TRUE   choice == 10
[L4050]              gas := gas - 21000;
[L4051]  COND TRUE   gas >= 0
[L4052]              assume tokens_s474 >= 0 && tokens_s474 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4053]              assume msgvalue_MSG == 0;
[L4054]  CALL        call success_s474 := transferFrom~address~address~uint256_MyToken(this, msgsender_MSG, msgvalue_MSG, from_s474, to_s474, tokens_s474);
[L1046]              havoc __exception;
[L1047]              revert := false;
[L1048]  COND FALSE  !(__exception)
[L1071]  CALL        call success_s474 := transferFrom~address~address~uint256_MyToken__success(this, msgsender_MSG, msgvalue_MSG, from_s474, to_s474, tokens_s474);
[L2390]  COND TRUE   DType[this] == MyToken
[L2391]  CALL        call __var_6 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_MyToken[this][from_s474], tokens_s474);
[L1930]  COND FALSE  !(!(b_s45 <= a_s45))
[L1934]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2391]  RET         call __var_6 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_MyToken[this][from_s474], tokens_s474);
[L2392]  COND FALSE  !(revert)
[L2398]              sum_balances0[this] := sum_balances0[this] - balances_MyToken[this][from_s474];
[L2399]              balances_MyToken[this][from_s474] := __var_6;
[L2400]              sum_balances0[this] := sum_balances0[this] + balances_MyToken[this][from_s474];
[L2401]  COND TRUE   DType[this] == MyToken
[L2402]  CALL        call __var_7 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, allowed_MyToken[this][from_s474][msgsender_MSG], tokens_s474);
[L1930]  COND FALSE  !(!(b_s45 <= a_s45))
[L1934]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2402]  RET         call __var_7 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, allowed_MyToken[this][from_s474][msgsender_MSG], tokens_s474);
[L2403]  COND FALSE  !(revert)
[L2409]              sum_allowed1[from_s474] := sum_allowed1[from_s474] - allowed_MyToken[this][from_s474][msgsender_MSG];
[L2410]              allowed_MyToken[this][from_s474][msgsender_MSG] := __var_7;
[L2411]              sum_allowed1[from_s474] := sum_allowed1[from_s474] + allowed_MyToken[this][from_s474][msgsender_MSG];
[L2412]  COND TRUE   DType[this] == MyToken
[L2413]  CALL        call __var_8 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_MyToken[this][to_s474], tokens_s474);
[L1912]              c_s23 := (a_s23 + b_s23) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1913]  COND FALSE  !(!(c_s23 >= a_s23))
[L2413]  RET         call __var_8 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_MyToken[this][to_s474], tokens_s474);
[L2414]  COND FALSE  !(revert)
[L2420]              sum_balances0[this] := sum_balances0[this] - balances_MyToken[this][to_s474];
[L2421]              balances_MyToken[this][to_s474] := __var_8;
[L2422]              sum_balances0[this] := sum_balances0[this] + balances_MyToken[this][to_s474];
[L2423]              assert { :EventEmitted "Transfer_MyToken" } true;
[L2424]              success_s474 := true;
[L1071]  RET         call success_s474 := transferFrom~address~address~uint256_MyToken__success(this, msgsender_MSG, msgvalue_MSG, from_s474, to_s474, tokens_s474);
[L1072]              assume !revert && gas >= 0;
[L4054]  RET         call success_s474 := transferFrom~address~address~uint256_MyToken(this, msgsender_MSG, msgvalue_MSG, from_s474, to_s474, tokens_s474);
[L4133]  RET         call CorralChoice_MyToken(this);

[2020-11-25 01:53:43,191 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 01:53:43,191 INFO  L82        PathProgramCache]: Analyzing trace with hash 2085783533, now seen corresponding path program 1 times
[2020-11-25 01:53:43,191 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 01:53:43,263 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 01:53:44,285 WARN  L188               SmtUtils]: Spent 204.00 ms on a formula simplification. DAG size of input: 127 DAG size of output: 69
[2020-11-25 01:53:44,577 WARN  L188               SmtUtils]: Spent 166.00 ms on a formula simplification. DAG size of input: 130 DAG size of output: 67
[2020-11-25 01:53:45,070 WARN  L188               SmtUtils]: Spent 380.00 ms on a formula simplification. DAG size of input: 139 DAG size of output: 79
[2020-11-25 01:53:45,566 WARN  L188               SmtUtils]: Spent 368.00 ms on a formula simplification. DAG size of input: 132 DAG size of output: 75
[2020-11-25 01:53:45,832 WARN  L188               SmtUtils]: Spent 188.00 ms on a formula simplification. DAG size of input: 180 DAG size of output: 87
[2020-11-25 01:53:46,146 WARN  L188               SmtUtils]: Spent 251.00 ms on a formula simplification. DAG size of input: 179 DAG size of output: 87
[2020-11-25 01:53:46,852 WARN  L188               SmtUtils]: Spent 327.00 ms on a formula simplification. DAG size of input: 335 DAG size of output: 77
[2020-11-25 01:53:47,713 WARN  L188               SmtUtils]: Spent 356.00 ms on a formula simplification. DAG size of input: 325 DAG size of output: 76
[2020-11-25 01:53:49,280 INFO  L134       CoverageAnalysis]: Checked inductivity of 73 backedges. 0 proven. 72 refuted. 0 times theorem prover too weak. 1 trivial. 0 not checked.
[2020-11-25 01:53:49,280 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 01:53:49,281 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [46] total 46
[2020-11-25 01:53:49,281 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 01:53:49,281 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 47 interpolants.
[2020-11-25 01:53:49,282 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=147, Invalid=2015, Unknown=0, NotChecked=0, Total=2162
[2020-11-25 01:53:49,282 INFO  L87              Difference]: Start difference. First operand 1907 states and 2105 transitions. cyclomatic complexity: 204 Second operand 47 states.
[2020-11-25 01:53:49,875 WARN  L188               SmtUtils]: Spent 160.00 ms on a formula simplification that was a NOOP. DAG size: 141
[2020-11-25 01:53:56,578 WARN  L188               SmtUtils]: Spent 248.00 ms on a formula simplification. DAG size of input: 154 DAG size of output: 100
[2020-11-25 01:54:02,669 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 01:54:02,669 INFO  L93              Difference]: Finished difference Result 2145 states and 2430 transitions.
[2020-11-25 01:54:02,670 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 48 states. 
[2020-11-25 01:54:02,670 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2145 states and 2430 transitions.
[2020-11-25 01:54:02,675 INFO  L131   ngComponentsAnalysis]: Automaton has 3 accepting balls. 6
[2020-11-25 01:54:02,681 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2145 states to 2145 states and 2430 transitions.
[2020-11-25 01:54:02,681 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 847
[2020-11-25 01:54:02,681 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 847
[2020-11-25 01:54:02,682 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 2145 states and 2430 transitions.
[2020-11-25 01:54:02,683 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 01:54:02,683 INFO  L728         BuchiCegarLoop]: Abstraction has 2145 states and 2430 transitions.
[2020-11-25 01:54:02,685 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 2145 states and 2430 transitions.
[2020-11-25 01:54:02,697 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 2145 to 2110.
[2020-11-25 01:54:02,698 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 2110 states.
[2020-11-25 01:54:02,700 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 2110 states to 2110 states and 2387 transitions.
[2020-11-25 01:54:02,700 INFO  L751         BuchiCegarLoop]: Abstraction has 2110 states and 2387 transitions.
[2020-11-25 01:54:02,700 INFO  L631         BuchiCegarLoop]: Abstraction has 2110 states and 2387 transitions.
[2020-11-25 01:54:02,701 INFO  L445         BuchiCegarLoop]: ======== Iteration 9============
[2020-11-25 01:54:02,701 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2110 states and 2387 transitions.
[2020-11-25 01:54:02,704 INFO  L131   ngComponentsAnalysis]: Automaton has 3 accepting balls. 6
[2020-11-25 01:54:02,704 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 01:54:02,704 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 01:54:02,705 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 01:54:02,705 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_MyToken0 := false;
[L2]                 call_transfer_MyToken0 := false;
[L2]     CALL        call main();
[L4123]              assume null == 0;
[L4124]  CALL        call this := FreshRefGenerator__success();
[L1863]              havoc newRef;
[L1864]              assume Alloc[newRef] == false;
[L1865]              Alloc[newRef] := true;
[L1866]              assume newRef != null;
[L4124]  RET         call this := FreshRefGenerator__success();
[L4125]              assume now >= 0;
[L4126]              assume DType[this] == MyToken;
[L4127]              assume msgvalue_MSG == 0;
[L4128]              gas := gas - 53000;
[L4129]  CALL        call MyToken_MyToken(this, msgsender_MSG, msgvalue_MSG, tokenName_s318, tokenSymbol_s318, tokenDecimals_s318, initialSupply_s318);
[L768]               havoc __exception;
[L769]               revert := false;
[L770]   COND FALSE  !(__exception)
[L793]   CALL        call MyToken_MyToken__success(this, msgsender_MSG, msgvalue_MSG, tokenName_s318, tokenSymbol_s318, tokenDecimals_s318, initialSupply_s318);
[L2217]  CALL        call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L1999]  CALL        call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1984]              assume msgsender_MSG != null;
[L1985]              Balance[this] := 0;
[L1999]  RET         call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2000]  COND FALSE  !(revert)
[L2217]  RET         call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L2218]  COND FALSE  !(revert)
[L2221]  CALL        call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L2069]  CALL        call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2051]              assume msgsender_MSG != null;
[L2052]              Balance[this] := 0;
[L2053]              owner_Owned[this] := null;
[L2054]              newOwner_Owned[this] := null;
[L2056]              owner_Owned[this] := msgsender_MSG;
[L2069]  RET         call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2070]  COND FALSE  !(revert)
[L2221]  RET         call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L2222]  COND FALSE  !(revert)
[L2225]  CALL        call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1895]  CALL        call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1880]              assume msgsender_MSG != null;
[L1881]              Balance[this] := 0;
[L1895]  RET         call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1896]  COND FALSE  !(revert)
[L2225]  RET         call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L2226]  COND FALSE  !(revert)
[L2229]  CALL        call MyToken_MyToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, tokenName_s318, tokenSymbol_s318, tokenDecimals_s318, initialSupply_s318);
[L2171]              assume msgsender_MSG != null;
[L2172]              Balance[this] := 0;
[L2173]              symbol_MyToken[this] := -1251229519;
[L2174]              name_MyToken[this] := -1251229519;
[L2175]              decimals_MyToken[this] := 0;
[L2176]              _totalSupply_MyToken[this] := 0;
[L2177]              balances_MyToken[this] := zeroRefintArr();
[L2178]              sum_balances0[this] := 0;
[L2179]              allowed_MyToken[this] := zeroRefRefintArr();
[L2180]              sum_allowed1[this] := 0;
[L2182]              name_MyToken[this] := tokenName_s318;
[L2183]              symbol_MyToken[this] := tokenSymbol_s318;
[L2184]              decimals_MyToken[this] := tokenDecimals_s318;
[L2185]              __var_2 := tokenDecimals_s318 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2186]              _totalSupply_MyToken[this] := nonlinearMul(initialSupply_s318, nonlinearPow(10, tokenDecimals_s318 % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2187]              sum_balances0[this] := sum_balances0[this] - balances_MyToken[this][msgsender_MSG];
[L2188]              balances_MyToken[this][msgsender_MSG] := _totalSupply_MyToken[this];
[L2189]              sum_balances0[this] := sum_balances0[this] + balances_MyToken[this][msgsender_MSG];
[L2190]              assert { :EventEmitted "Transfer_MyToken" } true;
[L2229]  RET         call MyToken_MyToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, tokenName_s318, tokenSymbol_s318, tokenDecimals_s318, initialSupply_s318);
[L2230]  COND FALSE  !(revert)
[L793]   RET         call MyToken_MyToken__success(this, msgsender_MSG, msgvalue_MSG, tokenName_s318, tokenSymbol_s318, tokenDecimals_s318, initialSupply_s318);
[L794]               assume !revert && gas >= 0;
[L4129]  RET         call MyToken_MyToken(this, msgsender_MSG, msgvalue_MSG, tokenName_s318, tokenSymbol_s318, tokenDecimals_s318, initialSupply_s318);
[L4130]              assume !revert && gas >= 0;
[L4133]  CALL        call CorralChoice_MyToken(this);
[L3926]              havoc msgsender_MSG;
[L3927]              havoc msgvalue_MSG;
[L3928]              havoc choice;
[L3929]              havoc a_s23;
[L3930]              havoc b_s23;
[L3931]              havoc c_s23;
[L3932]              havoc a_s45;
[L3933]              havoc b_s45;
[L3934]              havoc c_s45;
[L3935]              havoc a_s73;
[L3936]              havoc b_s73;
[L3937]              havoc c_s73;
[L3938]              havoc a_s95;
[L3939]              havoc b_s95;
[L3940]              havoc c_s95;
[L3941]              havoc __ret_0_totalSupply;
[L3942]              havoc tokenOwner_s344;
[L3943]              havoc balance_s344;
[L3944]              havoc tokenOwner_s490;
[L3945]              havoc spender_s490;
[L3946]              havoc remaining_s490;
[L3947]              havoc to_s387;
[L3948]              havoc tokens_s387;
[L3949]              havoc success_s387;
[L3950]              havoc spender_s415;
[L3951]              havoc tokens_s415;
[L3952]              havoc success_s415;
[L3953]              havoc from_s474;
[L3954]              havoc to_s474;
[L3955]              havoc tokens_s474;
[L3956]              havoc success_s474;
[L3957]              havoc __ret_0_owner;
[L3958]              havoc __ret_0_newOwner;
[L3959]              havoc _newOwner_s217;
[L3960]              havoc __ret_0_symbol;
[L3961]              havoc __ret_0_name;
[L3962]              havoc __ret_0_decimals;
[L3963]              havoc __ret_0__totalSupply;
[L3964]              havoc tokenName_s318;
[L3965]              havoc tokenSymbol_s318;
[L3966]              havoc tokenDecimals_s318;
[L3967]              havoc initialSupply_s318;
[L3968]              havoc spender_s533;
[L3969]              havoc tokens_s533;
[L3970]              havoc data_s533;
[L3971]              havoc success_s533;
[L3972]              havoc tmpNow;
[L3973]              havoc gas;
[L3974]              assume gas > 4000000 && gas <= 8000000;
[L3975]              tmpNow := now;
[L3976]              havoc now;
[L3977]              assume now > tmpNow;
[L3978]              assume msgsender_MSG != null;
[L3979]              assume DType[msgsender_MSG] != SafeMath;
[L3980]              assume DType[msgsender_MSG] != ERC20Interface;
[L3981]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L3982]              assume DType[msgsender_MSG] != Owned;
[L3983]              assume DType[msgsender_MSG] != MyToken;
[L3984]              Alloc[msgsender_MSG] := true;
[L3985]  COND FALSE  !(choice == 19)
[L3993]  COND FALSE  !(choice == 18)
[L4001]  COND FALSE  !(choice == 17)
[L4009]  COND FALSE  !(choice == 16)
[L4017]  COND FALSE  !(choice == 15)
[L4023]  COND FALSE  !(choice == 14)
[L4029]  COND FALSE  !(choice == 13)
[L4035]  COND FALSE  !(choice == 12)
[L4042]  COND TRUE   choice == 11
[L4043]              gas := gas - 21000;
[L4044]  COND TRUE   gas >= 0
[L4045]              assume tokens_s415 >= 0 && tokens_s415 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4046]              assume msgvalue_MSG == 0;
[L4047]  CALL        call success_s415 := approve~address~uint256_MyToken(this, msgsender_MSG, msgvalue_MSG, spender_s415, tokens_s415);
[L988]               havoc __exception;
[L989]               revert := false;
[L990]   COND FALSE  !(__exception)
[L1013]  CALL        call success_s415 := approve~address~uint256_MyToken__success(this, msgsender_MSG, msgvalue_MSG, spender_s415, tokens_s415);
[L2335]              sum_allowed1[msgsender_MSG] := sum_allowed1[msgsender_MSG] - allowed_MyToken[this][msgsender_MSG][spender_s415];
[L2336]              allowed_MyToken[this][msgsender_MSG][spender_s415] := tokens_s415;
[L2337]              sum_allowed1[msgsender_MSG] := sum_allowed1[msgsender_MSG] + allowed_MyToken[this][msgsender_MSG][spender_s415];
[L2338]              assert { :EventEmitted "Approval_MyToken" } true;
[L2339]              success_s415 := true;
[L1013]  RET         call success_s415 := approve~address~uint256_MyToken__success(this, msgsender_MSG, msgvalue_MSG, spender_s415, tokens_s415);
[L1014]              assume !revert && gas >= 0;
[L4047]  RET         call success_s415 := approve~address~uint256_MyToken(this, msgsender_MSG, msgvalue_MSG, spender_s415, tokens_s415);
[L4133]  RET         call CorralChoice_MyToken(this);
[L4133]  CALL        call CorralChoice_MyToken(this);
[L3926]              havoc msgsender_MSG;
[L3927]              havoc msgvalue_MSG;
[L3928]              havoc choice;
[L3929]              havoc a_s23;
[L3930]              havoc b_s23;
[L3931]              havoc c_s23;
[L3932]              havoc a_s45;
[L3933]              havoc b_s45;
[L3934]              havoc c_s45;
[L3935]              havoc a_s73;
[L3936]              havoc b_s73;
[L3937]              havoc c_s73;
[L3938]              havoc a_s95;
[L3939]              havoc b_s95;
[L3940]              havoc c_s95;
[L3941]              havoc __ret_0_totalSupply;
[L3942]              havoc tokenOwner_s344;
[L3943]              havoc balance_s344;
[L3944]              havoc tokenOwner_s490;
[L3945]              havoc spender_s490;
[L3946]              havoc remaining_s490;
[L3947]              havoc to_s387;
[L3948]              havoc tokens_s387;
[L3949]              havoc success_s387;
[L3950]              havoc spender_s415;
[L3951]              havoc tokens_s415;
[L3952]              havoc success_s415;
[L3953]              havoc from_s474;
[L3954]              havoc to_s474;
[L3955]              havoc tokens_s474;
[L3956]              havoc success_s474;
[L3957]              havoc __ret_0_owner;
[L3958]              havoc __ret_0_newOwner;
[L3959]              havoc _newOwner_s217;
[L3960]              havoc __ret_0_symbol;
[L3961]              havoc __ret_0_name;
[L3962]              havoc __ret_0_decimals;
[L3963]              havoc __ret_0__totalSupply;
[L3964]              havoc tokenName_s318;
[L3965]              havoc tokenSymbol_s318;
[L3966]              havoc tokenDecimals_s318;
[L3967]              havoc initialSupply_s318;
[L3968]              havoc spender_s533;
[L3969]              havoc tokens_s533;
[L3970]              havoc data_s533;
[L3971]              havoc success_s533;
[L3972]              havoc tmpNow;
[L3973]              havoc gas;
[L3974]              assume gas > 4000000 && gas <= 8000000;
[L3975]              tmpNow := now;
[L3976]              havoc now;
[L3977]              assume now > tmpNow;
[L3978]              assume msgsender_MSG != null;
[L3979]              assume DType[msgsender_MSG] != SafeMath;
[L3980]              assume DType[msgsender_MSG] != ERC20Interface;
[L3981]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L3982]              assume DType[msgsender_MSG] != Owned;
[L3983]              assume DType[msgsender_MSG] != MyToken;
[L3984]              Alloc[msgsender_MSG] := true;
[L3985]  COND FALSE  !(choice == 19)
[L3993]  COND FALSE  !(choice == 18)
[L4001]  COND FALSE  !(choice == 17)
[L4009]  COND FALSE  !(choice == 16)
[L4017]  COND FALSE  !(choice == 15)
[L4023]  COND FALSE  !(choice == 14)
[L4029]  COND FALSE  !(choice == 13)
[L4035]  COND FALSE  !(choice == 12)
[L4042]  COND FALSE  !(choice == 11)
[L4049]  COND TRUE   choice == 10
[L4050]              gas := gas - 21000;
[L4051]  COND TRUE   gas >= 0
[L4052]              assume tokens_s474 >= 0 && tokens_s474 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4053]              assume msgvalue_MSG == 0;
[L4054]  CALL        call success_s474 := transferFrom~address~address~uint256_MyToken(this, msgsender_MSG, msgvalue_MSG, from_s474, to_s474, tokens_s474);
[L1046]              havoc __exception;
[L1047]              revert := false;
[L1048]  COND FALSE  !(__exception)
[L1071]  CALL        call success_s474 := transferFrom~address~address~uint256_MyToken__success(this, msgsender_MSG, msgvalue_MSG, from_s474, to_s474, tokens_s474);
[L2390]  COND TRUE   DType[this] == MyToken
[L2391]  CALL        call __var_6 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_MyToken[this][from_s474], tokens_s474);
[L1930]  COND FALSE  !(!(b_s45 <= a_s45))
[L1934]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2391]  RET         call __var_6 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_MyToken[this][from_s474], tokens_s474);
[L2392]  COND FALSE  !(revert)
[L2398]              sum_balances0[this] := sum_balances0[this] - balances_MyToken[this][from_s474];
[L2399]              balances_MyToken[this][from_s474] := __var_6;
[L2400]              sum_balances0[this] := sum_balances0[this] + balances_MyToken[this][from_s474];
[L2401]  COND TRUE   DType[this] == MyToken
[L2402]  CALL        call __var_7 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, allowed_MyToken[this][from_s474][msgsender_MSG], tokens_s474);
[L1930]  COND FALSE  !(!(b_s45 <= a_s45))
[L1934]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2402]  RET         call __var_7 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, allowed_MyToken[this][from_s474][msgsender_MSG], tokens_s474);
[L2403]  COND FALSE  !(revert)
[L2409]              sum_allowed1[from_s474] := sum_allowed1[from_s474] - allowed_MyToken[this][from_s474][msgsender_MSG];
[L2410]              allowed_MyToken[this][from_s474][msgsender_MSG] := __var_7;
[L2411]              sum_allowed1[from_s474] := sum_allowed1[from_s474] + allowed_MyToken[this][from_s474][msgsender_MSG];
[L2412]  COND TRUE   DType[this] == MyToken
[L2413]  CALL        call __var_8 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_MyToken[this][to_s474], tokens_s474);
[L1912]              c_s23 := (a_s23 + b_s23) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1913]  COND FALSE  !(!(c_s23 >= a_s23))
[L2413]  RET         call __var_8 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_MyToken[this][to_s474], tokens_s474);
[L2414]  COND FALSE  !(revert)
[L2420]              sum_balances0[this] := sum_balances0[this] - balances_MyToken[this][to_s474];
[L2421]              balances_MyToken[this][to_s474] := __var_8;
[L2422]              sum_balances0[this] := sum_balances0[this] + balances_MyToken[this][to_s474];
[L2423]              assert { :EventEmitted "Transfer_MyToken" } true;
[L2424]              success_s474 := true;
[L1071]  RET         call success_s474 := transferFrom~address~address~uint256_MyToken__success(this, msgsender_MSG, msgvalue_MSG, from_s474, to_s474, tokens_s474);
[L1072]              assume !revert && gas >= 0;
[L4054]  RET         call success_s474 := transferFrom~address~address~uint256_MyToken(this, msgsender_MSG, msgvalue_MSG, from_s474, to_s474, tokens_s474);
[L4133]  RET         call CorralChoice_MyToken(this);
[L4133]  CALL        call CorralChoice_MyToken(this);
[L3926]              havoc msgsender_MSG;
[L3927]              havoc msgvalue_MSG;
[L3928]              havoc choice;
[L3929]              havoc a_s23;
[L3930]              havoc b_s23;
[L3931]              havoc c_s23;
[L3932]              havoc a_s45;
[L3933]              havoc b_s45;
[L3934]              havoc c_s45;
[L3935]              havoc a_s73;
[L3936]              havoc b_s73;
[L3937]              havoc c_s73;
[L3938]              havoc a_s95;
[L3939]              havoc b_s95;
[L3940]              havoc c_s95;
[L3941]              havoc __ret_0_totalSupply;
[L3942]              havoc tokenOwner_s344;
[L3943]              havoc balance_s344;
[L3944]              havoc tokenOwner_s490;
[L3945]              havoc spender_s490;
[L3946]              havoc remaining_s490;
[L3947]              havoc to_s387;
[L3948]              havoc tokens_s387;
[L3949]              havoc success_s387;
[L3950]              havoc spender_s415;
[L3951]              havoc tokens_s415;
[L3952]              havoc success_s415;
[L3953]              havoc from_s474;
[L3954]              havoc to_s474;
[L3955]              havoc tokens_s474;
[L3956]              havoc success_s474;
[L3957]              havoc __ret_0_owner;
[L3958]              havoc __ret_0_newOwner;
[L3959]              havoc _newOwner_s217;
[L3960]              havoc __ret_0_symbol;
[L3961]              havoc __ret_0_name;
[L3962]              havoc __ret_0_decimals;
[L3963]              havoc __ret_0__totalSupply;
[L3964]              havoc tokenName_s318;
[L3965]              havoc tokenSymbol_s318;
[L3966]              havoc tokenDecimals_s318;
[L3967]              havoc initialSupply_s318;
[L3968]              havoc spender_s533;
[L3969]              havoc tokens_s533;
[L3970]              havoc data_s533;
[L3971]              havoc success_s533;
[L3972]              havoc tmpNow;
[L3973]              havoc gas;
[L3974]              assume gas > 4000000 && gas <= 8000000;
[L3975]              tmpNow := now;
[L3976]              havoc now;
[L3977]              assume now > tmpNow;
[L3978]              assume msgsender_MSG != null;
[L3979]              assume DType[msgsender_MSG] != SafeMath;
[L3980]              assume DType[msgsender_MSG] != ERC20Interface;
[L3981]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L3982]              assume DType[msgsender_MSG] != Owned;
[L3983]              assume DType[msgsender_MSG] != MyToken;
[L3984]              Alloc[msgsender_MSG] := true;
[L3985]  COND FALSE  !(choice == 19)
[L3993]  COND FALSE  !(choice == 18)
[L4001]  COND FALSE  !(choice == 17)
[L4009]  COND FALSE  !(choice == 16)
[L4017]  COND FALSE  !(choice == 15)
[L4023]  COND FALSE  !(choice == 14)
[L4029]  COND FALSE  !(choice == 13)
[L4035]  COND TRUE   choice == 12
[L4036]              gas := gas - 21000;
[L4037]  COND TRUE   gas >= 0
[L4038]              assume tokens_s387 >= 0 && tokens_s387 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4039]              assume msgvalue_MSG == 0;
[L4040]  CALL        call success_s387 := transfer~address~uint256_MyToken(this, msgsender_MSG, msgvalue_MSG, to_s387, tokens_s387);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == to_s387 && tokens_s387 <= balances_MyToken[this][msgsender_MSG]) && tokens_s387 >= 0) && tokens_s387 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_MyToken[this][to_s387] >= 0) && balances_MyToken[this][to_s387] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_MyToken[this][msgsender_MSG] >= 0) && balances_MyToken[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_MyToken0 := true;
[L2]                 call_transfer_MyToken0 := false;
[L2]                 revert := revert_hold;
[L932]               havoc __exception;
[L933]               revert := false;
[L934]   COND FALSE  !(__exception)
[L957]   CALL        call success_s387 := transfer~address~uint256_MyToken__success(this, msgsender_MSG, msgvalue_MSG, to_s387, tokens_s387);
[L2297]  COND TRUE   DType[this] == MyToken
[L2298]  CALL        call __var_4 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_MyToken[this][msgsender_MSG], tokens_s387);
[L1930]  COND FALSE  !(!(b_s45 <= a_s45))
[L1934]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2298]  RET         call __var_4 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_MyToken[this][msgsender_MSG], tokens_s387);
[L2299]  COND FALSE  !(revert)
[L2305]              sum_balances0[this] := sum_balances0[this] - balances_MyToken[this][msgsender_MSG];
[L2306]              balances_MyToken[this][msgsender_MSG] := __var_4;
[L2307]              sum_balances0[this] := sum_balances0[this] + balances_MyToken[this][msgsender_MSG];
[L2308]  COND TRUE   DType[this] == MyToken
[L2309]  CALL        call __var_5 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_MyToken[this][to_s387], tokens_s387);
[L1912]              c_s23 := (a_s23 + b_s23) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1913]  COND FALSE  !(!(c_s23 >= a_s23))
[L2309]  RET         call __var_5 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_MyToken[this][to_s387], tokens_s387);
[L2310]  COND FALSE  !(revert)
[L2316]              sum_balances0[this] := sum_balances0[this] - balances_MyToken[this][to_s387];
[L2317]              balances_MyToken[this][to_s387] := __var_5;
[L2318]              sum_balances0[this] := sum_balances0[this] + balances_MyToken[this][to_s387];
[L2319]              assert { :EventEmitted "Transfer_MyToken" } true;
[L2320]              success_s387 := true;
[L957]   RET         call success_s387 := transfer~address~uint256_MyToken__success(this, msgsender_MSG, msgvalue_MSG, to_s387, tokens_s387);
[L958]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !((((((((success_s387 == true && _totalSupply_MyToken[this] == old(_totalSupply_MyToken[this])) && balances_MyToken[this] == old(balances_MyToken[this])) && allowed_MyToken[this] == old(allowed_MyToken[this])) && symbol_MyToken[this] == old(symbol_MyToken[this])) && name_MyToken[this] == old(name_MyToken[this])) && decimals_MyToken[this] == old(decimals_MyToken[this])) && owner_Owned[this] == old(owner_Owned[this])) && newOwner_Owned[this] == old(newOwner_Owned[this]));
[L2]                 revert := revert_hold;
[L4040]  RET         call success_s387 := transfer~address~uint256_MyToken(this, msgsender_MSG, msgvalue_MSG, to_s387, tokens_s387);
[L4133]  RET         call CorralChoice_MyToken(this);

Loop:
[L4133]  CALL        call CorralChoice_MyToken(this);
[L3926]              havoc msgsender_MSG;
[L3927]              havoc msgvalue_MSG;
[L3928]              havoc choice;
[L3929]              havoc a_s23;
[L3930]              havoc b_s23;
[L3931]              havoc c_s23;
[L3932]              havoc a_s45;
[L3933]              havoc b_s45;
[L3934]              havoc c_s45;
[L3935]              havoc a_s73;
[L3936]              havoc b_s73;
[L3937]              havoc c_s73;
[L3938]              havoc a_s95;
[L3939]              havoc b_s95;
[L3940]              havoc c_s95;
[L3941]              havoc __ret_0_totalSupply;
[L3942]              havoc tokenOwner_s344;
[L3943]              havoc balance_s344;
[L3944]              havoc tokenOwner_s490;
[L3945]              havoc spender_s490;
[L3946]              havoc remaining_s490;
[L3947]              havoc to_s387;
[L3948]              havoc tokens_s387;
[L3949]              havoc success_s387;
[L3950]              havoc spender_s415;
[L3951]              havoc tokens_s415;
[L3952]              havoc success_s415;
[L3953]              havoc from_s474;
[L3954]              havoc to_s474;
[L3955]              havoc tokens_s474;
[L3956]              havoc success_s474;
[L3957]              havoc __ret_0_owner;
[L3958]              havoc __ret_0_newOwner;
[L3959]              havoc _newOwner_s217;
[L3960]              havoc __ret_0_symbol;
[L3961]              havoc __ret_0_name;
[L3962]              havoc __ret_0_decimals;
[L3963]              havoc __ret_0__totalSupply;
[L3964]              havoc tokenName_s318;
[L3965]              havoc tokenSymbol_s318;
[L3966]              havoc tokenDecimals_s318;
[L3967]              havoc initialSupply_s318;
[L3968]              havoc spender_s533;
[L3969]              havoc tokens_s533;
[L3970]              havoc data_s533;
[L3971]              havoc success_s533;
[L3972]              havoc tmpNow;
[L3973]              havoc gas;
[L3974]              assume gas > 4000000 && gas <= 8000000;
[L3975]              tmpNow := now;
[L3976]              havoc now;
[L3977]              assume now > tmpNow;
[L3978]              assume msgsender_MSG != null;
[L3979]              assume DType[msgsender_MSG] != SafeMath;
[L3980]              assume DType[msgsender_MSG] != ERC20Interface;
[L3981]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L3982]              assume DType[msgsender_MSG] != Owned;
[L3983]              assume DType[msgsender_MSG] != MyToken;
[L3984]              Alloc[msgsender_MSG] := true;
[L3985]  COND TRUE   choice == 19
[L3986]              gas := gas - 21000;
[L3987]  COND FALSE  !(gas >= 0)
[L4133]  RET         call CorralChoice_MyToken(this);

[2020-11-25 01:54:02,709 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 01:54:02,709 INFO  L82        PathProgramCache]: Analyzing trace with hash -252996523, now seen corresponding path program 1 times
[2020-11-25 01:54:02,710 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 01:54:02,893 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 01:54:03,105 INFO  L134       CoverageAnalysis]: Checked inductivity of 215 backedges. 136 proven. 0 refuted. 0 times theorem prover too weak. 79 trivial. 0 not checked.
[2020-11-25 01:54:03,105 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 01:54:03,105 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [14] imperfect sequences [] total 14
[2020-11-25 01:54:03,106 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 01:54:03,106 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 14 interpolants.
[2020-11-25 01:54:03,106 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=31, Invalid=151, Unknown=0, NotChecked=0, Total=182
[2020-11-25 01:54:03,106 INFO  L87              Difference]: Start difference. First operand 2110 states and 2387 transitions. cyclomatic complexity: 287 Second operand 14 states.
[2020-11-25 01:54:03,816 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 01:54:03,816 INFO  L93              Difference]: Finished difference Result 964 states and 1056 transitions.
[2020-11-25 01:54:03,816 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 14 states. 
[2020-11-25 01:54:03,816 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 964 states and 1056 transitions.
[2020-11-25 01:54:03,818 INFO  L131   ngComponentsAnalysis]: Automaton has 0 accepting balls. 0
[2020-11-25 01:54:03,818 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 964 states to 0 states and 0 transitions.
[2020-11-25 01:54:03,818 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 0
[2020-11-25 01:54:03,818 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 0
[2020-11-25 01:54:03,818 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 0 states and 0 transitions.
[2020-11-25 01:54:03,818 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 01:54:03,818 INFO  L728         BuchiCegarLoop]: Abstraction has 0 states and 0 transitions.
[2020-11-25 01:54:03,818 INFO  L751         BuchiCegarLoop]: Abstraction has 0 states and 0 transitions.
[2020-11-25 01:54:03,818 INFO  L631         BuchiCegarLoop]: Abstraction has 0 states and 0 transitions.
[2020-11-25 01:54:03,818 INFO  L445         BuchiCegarLoop]: ======== Iteration 10============
[2020-11-25 01:54:03,818 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 0 states and 0 transitions.
[2020-11-25 01:54:03,818 INFO  L131   ngComponentsAnalysis]: Automaton has 0 accepting balls. 0
[2020-11-25 01:54:03,818 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is true
[2020-11-25 01:54:03,821 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer CFG 25.11 01:54:03 BasicIcfg
[2020-11-25 01:54:03,821 INFO  L132        PluginConnector]: ------------------------ END BuchiAutomizer----------------------------
[2020-11-25 01:54:03,822 INFO  L168              Benchmark]: Toolchain (without parser) took 38970.75 ms. Allocated memory was 1.0 GB in the beginning and 3.1 GB in the end (delta: 2.0 GB). Free memory was 940.6 MB in the beginning and 2.0 GB in the end (delta: -1.0 GB). Peak memory consumption was 1.0 GB. Max. memory is 15.3 GB.
[2020-11-25 01:54:03,822 INFO  L168              Benchmark]: Boogie PL CUP Parser took 0.15 ms. Allocated memory is still 1.0 GB. Free memory is still 956.7 MB. There was no memory consumed. Max. memory is 15.3 GB.
[2020-11-25 01:54:03,822 INFO  L168              Benchmark]: Boogie Preprocessor took 93.43 ms. Allocated memory is still 1.0 GB. Free memory was 940.6 MB in the beginning and 924.5 MB in the end (delta: 16.1 MB). Peak memory consumption was 16.1 MB. Max. memory is 15.3 GB.
[2020-11-25 01:54:03,823 INFO  L168              Benchmark]: UtopiaSpecLang took 63.09 ms. Allocated memory is still 1.0 GB. Free memory was 924.5 MB in the beginning and 919.1 MB in the end (delta: 5.4 MB). Peak memory consumption was 5.4 MB. Max. memory is 15.3 GB.
[2020-11-25 01:54:03,823 INFO  L168              Benchmark]: Boogie Printer took 16.42 ms. Allocated memory is still 1.0 GB. Free memory is still 919.1 MB. There was no memory consumed. Max. memory is 15.3 GB.
[2020-11-25 01:54:03,823 INFO  L168              Benchmark]: RCFGBuilder took 748.54 ms. Allocated memory is still 1.0 GB. Free memory was 919.1 MB in the beginning and 801.0 MB in the end (delta: 118.1 MB). Peak memory consumption was 118.1 MB. Max. memory is 15.3 GB.
[2020-11-25 01:54:03,823 INFO  L168              Benchmark]: UtopiaLTL2Aut took 38.95 ms. Allocated memory is still 1.0 GB. Free memory was 801.0 MB in the beginning and 792.0 MB in the end (delta: 8.9 MB). Peak memory consumption was 8.9 MB. Max. memory is 15.3 GB.
[2020-11-25 01:54:03,824 INFO  L168              Benchmark]: BÃ¼chi Program Product took 1510.85 ms. Allocated memory was 1.0 GB in the beginning and 1.2 GB in the end (delta: 208.7 MB). Free memory was 792.0 MB in the beginning and 1.0 GB in the end (delta: -241.1 MB). Peak memory consumption was 175.5 MB. Max. memory is 15.3 GB.
[2020-11-25 01:54:03,824 INFO  L168              Benchmark]: BlockEncodingV2 took 134.01 ms. Allocated memory is still 1.2 GB. Free memory was 1.0 GB in the beginning and 970.7 MB in the end (delta: 62.4 MB). Peak memory consumption was 62.4 MB. Max. memory is 15.3 GB.
[2020-11-25 01:54:03,824 INFO  L168              Benchmark]: BuchiAutomizer took 36362.48 ms. Allocated memory was 1.2 GB in the beginning and 3.1 GB in the end (delta: 1.8 GB). Free memory was 970.7 MB in the beginning and 2.0 GB in the end (delta: -990.9 MB). Peak memory consumption was 826.8 MB. Max. memory is 15.3 GB.
[2020-11-25 01:54:03,827 INFO  L337   ainManager$Toolchain]: #######################  End [Toolchain 1] #######################
 --- Results ---
 * Results from de.uni_freiburg.informatik.ultimate.plugins.blockencoding:
  - StatisticsResult: Initial Icfg
    3568 locations, 6124 edges
  - StatisticsResult: Encoded RCFG
    3512 locations, 5976 edges
 * Results from de.uni_freiburg.informatik.ultimate.core:
  - StatisticsResult: Toolchain Benchmarks
    Benchmark results are:
 * Boogie PL CUP Parser took 0.15 ms. Allocated memory is still 1.0 GB. Free memory is still 956.7 MB. There was no memory consumed. Max. memory is 15.3 GB.
 * Boogie Preprocessor took 93.43 ms. Allocated memory is still 1.0 GB. Free memory was 940.6 MB in the beginning and 924.5 MB in the end (delta: 16.1 MB). Peak memory consumption was 16.1 MB. Max. memory is 15.3 GB.
 * UtopiaSpecLang took 63.09 ms. Allocated memory is still 1.0 GB. Free memory was 924.5 MB in the beginning and 919.1 MB in the end (delta: 5.4 MB). Peak memory consumption was 5.4 MB. Max. memory is 15.3 GB.
 * Boogie Printer took 16.42 ms. Allocated memory is still 1.0 GB. Free memory is still 919.1 MB. There was no memory consumed. Max. memory is 15.3 GB.
 * RCFGBuilder took 748.54 ms. Allocated memory is still 1.0 GB. Free memory was 919.1 MB in the beginning and 801.0 MB in the end (delta: 118.1 MB). Peak memory consumption was 118.1 MB. Max. memory is 15.3 GB.
 * UtopiaLTL2Aut took 38.95 ms. Allocated memory is still 1.0 GB. Free memory was 801.0 MB in the beginning and 792.0 MB in the end (delta: 8.9 MB). Peak memory consumption was 8.9 MB. Max. memory is 15.3 GB.
 * BÃ¼chi Program Product took 1510.85 ms. Allocated memory was 1.0 GB in the beginning and 1.2 GB in the end (delta: 208.7 MB). Free memory was 792.0 MB in the beginning and 1.0 GB in the end (delta: -241.1 MB). Peak memory consumption was 175.5 MB. Max. memory is 15.3 GB.
 * BlockEncodingV2 took 134.01 ms. Allocated memory is still 1.2 GB. Free memory was 1.0 GB in the beginning and 970.7 MB in the end (delta: 62.4 MB). Peak memory consumption was 62.4 MB. Max. memory is 15.3 GB.
 * BuchiAutomizer took 36362.48 ms. Allocated memory was 1.2 GB in the beginning and 3.1 GB in the end (delta: 1.8 GB). Free memory was 970.7 MB in the beginning and 2.0 GB in the end (delta: -990.9 MB). Peak memory consumption was 826.8 MB. Max. memory is 15.3 GB.
 * Results from de.uni_freiburg.informatik.ultimate.buchiprogramproduct:
  - StatisticsResult: Initial property automaton
    2 locations, 3 edges
  - StatisticsResult: Initial RCFG
    1504 locations, 1890 edges
  - StatisticsResult: BuchiProgram size
    3568 locations, 6124 edges
 * Results from de.uni_freiburg.informatik.ultimate.plugins.generator.traceabstraction:
  - StatisticsResult: Constructed decomposition of program
    Your program was decomposed into 9 terminating modules (9 trivial, 0 deterministic, 0 nondeterministic). 9 modules have a trivial ranking function, the largest among these consists of 47 locations.
  - StatisticsResult: Timing statistics
    BÃ¼chiAutomizer plugin needed 36.3s and 10 iterations.  TraceHistogramMax:3. Analysis of lassos took 9.0s. Construction of modules took 20.7s. BÃ¼chi inclusion checks took 6.0s. Highest rank in rank-based complementation 0. Minimization of det autom 9. Minimization of nondet autom 0. Automata minimization 0.1s AutomataMinimizationTime, 8 MinimizatonAttempts, 2025 StatesRemovedByMinimization, 7 NontrivialMinimizations. Non-live state removal took 0.1s Buchi closure took 0.0s. Biggest automaton had 2590 states and ocurred in iteration 1.	Nontrivial modules had stage [0, 0, 0, 0, 0].	InterpolantCoveringCapabilityFinite: 0/0	InterpolantCoveringCapabilityBuchi: 0/0	HoareTripleCheckerStatistics: 21802 SDtfs, 24258 SDslu, 84779 SDs, 0 SdLazy, 112450 SolverSat, 3845 SolverUnsat, 0 SolverUnknown, 0 SolverNotchecked, 20.7s Time	LassoAnalysisResults: nont0 unkn0 SFLI0 SFLT0 conc0 concLT0 SILN0 SILU9 SILI0 SILT0 lasso0 LassoPreprocessingBenchmarks: LassoTerminationAnalysisBenchmarks: not availableLassoTerminationAnalysisBenchmarks: LassoNonterminationAnalysisSatFixpoint: 0	LassoNonterminationAnalysisSatUnbounded: 0	LassoNonterminationAnalysisUnsat: 0	LassoNonterminationAnalysisUnknown: 0	LassoNonterminationAnalysisTime: 0.0s	
  - AllSpecificationsHoldResult: All specifications hold
    Buchi Automizer proved that the LTL property ! ( ( []( (call_transfer_MyToken0) ==> ( <>(success_transfer_MyToken0) ) ) )) holds
RESULT: Ultimate proved your program to be correct!
Received shutdown request...
