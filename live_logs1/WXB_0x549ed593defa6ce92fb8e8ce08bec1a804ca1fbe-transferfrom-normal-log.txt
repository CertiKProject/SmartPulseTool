This is Ultimate 0.1.24-f1553f5-m
[2020-11-25 08:50:33,214 INFO  L170        SettingsManager]: Resetting all preferences to default values...
[2020-11-25 08:50:33,215 INFO  L174        SettingsManager]: Resetting UltimateCore preferences to default values
[2020-11-25 08:50:33,222 INFO  L177        SettingsManager]: Ultimate Commandline Interface provides no preferences, ignoring...
[2020-11-25 08:50:33,222 INFO  L174        SettingsManager]: Resetting Boogie Preprocessor preferences to default values
[2020-11-25 08:50:33,223 INFO  L174        SettingsManager]: Resetting Boogie Procedure Inliner preferences to default values
[2020-11-25 08:50:33,224 INFO  L174        SettingsManager]: Resetting Abstract Interpretation preferences to default values
[2020-11-25 08:50:33,225 INFO  L174        SettingsManager]: Resetting LassoRanker preferences to default values
[2020-11-25 08:50:33,226 INFO  L174        SettingsManager]: Resetting Reaching Definitions preferences to default values
[2020-11-25 08:50:33,226 INFO  L174        SettingsManager]: Resetting SyntaxChecker preferences to default values
[2020-11-25 08:50:33,227 INFO  L177        SettingsManager]: BÃ¼chi Program Product provides no preferences, ignoring...
[2020-11-25 08:50:33,227 INFO  L174        SettingsManager]: Resetting LTL2Aut preferences to default values
[2020-11-25 08:50:33,228 INFO  L174        SettingsManager]: Resetting PEA to Boogie preferences to default values
[2020-11-25 08:50:33,229 INFO  L174        SettingsManager]: Resetting BlockEncodingV2 preferences to default values
[2020-11-25 08:50:33,230 INFO  L174        SettingsManager]: Resetting ChcToBoogie preferences to default values
[2020-11-25 08:50:33,230 INFO  L174        SettingsManager]: Resetting AutomataScriptInterpreter preferences to default values
[2020-11-25 08:50:33,231 INFO  L174        SettingsManager]: Resetting BuchiAutomizer preferences to default values
[2020-11-25 08:50:33,232 INFO  L174        SettingsManager]: Resetting CACSL2BoogieTranslator preferences to default values
[2020-11-25 08:50:33,233 INFO  L174        SettingsManager]: Resetting CodeCheck preferences to default values
[2020-11-25 08:50:33,235 INFO  L174        SettingsManager]: Resetting InvariantSynthesis preferences to default values
[2020-11-25 08:50:33,236 INFO  L174        SettingsManager]: Resetting RCFGBuilder preferences to default values
[2020-11-25 08:50:33,237 INFO  L174        SettingsManager]: Resetting TraceAbstraction preferences to default values
[2020-11-25 08:50:33,239 INFO  L177        SettingsManager]: TraceAbstractionConcurrent provides no preferences, ignoring...
[2020-11-25 08:50:33,239 INFO  L177        SettingsManager]: TraceAbstractionWithAFAs provides no preferences, ignoring...
[2020-11-25 08:50:33,240 INFO  L174        SettingsManager]: Resetting TreeAutomizer preferences to default values
[2020-11-25 08:50:33,241 INFO  L174        SettingsManager]: Resetting IcfgToChc preferences to default values
[2020-11-25 08:50:33,241 INFO  L174        SettingsManager]: Resetting IcfgTransformer preferences to default values
[2020-11-25 08:50:33,242 INFO  L177        SettingsManager]: ReqToTest provides no preferences, ignoring...
[2020-11-25 08:50:33,243 INFO  L174        SettingsManager]: Resetting UtopiaLTL2Aut preferences to default values
[2020-11-25 08:50:33,243 INFO  L174        SettingsManager]: Resetting UtopiaSpecLang preferences to default values
[2020-11-25 08:50:33,244 INFO  L174        SettingsManager]: Resetting Boogie Printer preferences to default values
[2020-11-25 08:50:33,245 INFO  L174        SettingsManager]: Resetting ChcSmtPrinter preferences to default values
[2020-11-25 08:50:33,245 INFO  L174        SettingsManager]: Resetting ReqPrinter preferences to default values
[2020-11-25 08:50:33,246 INFO  L174        SettingsManager]: Resetting Witness Printer preferences to default values
[2020-11-25 08:50:33,248 INFO  L177        SettingsManager]: Boogie PL CUP Parser provides no preferences, ignoring...
[2020-11-25 08:50:33,248 INFO  L174        SettingsManager]: Resetting CDTParser preferences to default values
[2020-11-25 08:50:33,249 INFO  L177        SettingsManager]: AutomataScriptParser provides no preferences, ignoring...
[2020-11-25 08:50:33,249 INFO  L177        SettingsManager]: ReqParser provides no preferences, ignoring...
[2020-11-25 08:50:33,249 INFO  L174        SettingsManager]: Resetting SmtParser preferences to default values
[2020-11-25 08:50:33,250 INFO  L174        SettingsManager]: Resetting Witness Parser preferences to default values
[2020-11-25 08:50:33,251 INFO  L181        SettingsManager]: Finished resetting all preferences to default values...
[2020-11-25 08:50:33,251 INFO  L98         SettingsManager]: Beginning loading settings from /mnt/data0/jon/SmartPulseTool/SmartPulse/settings.epf
[2020-11-25 08:50:33,258 INFO  L110        SettingsManager]: Loading preferences was successful
[2020-11-25 08:50:33,258 INFO  L112        SettingsManager]: Preferences different from defaults after loading the file:
[2020-11-25 08:50:33,259 INFO  L131        SettingsManager]: Preferences of LTL2Aut differ from their defaults:
[2020-11-25 08:50:33,259 INFO  L133        SettingsManager]:  * Read property from file=true
[2020-11-25 08:50:33,259 INFO  L133        SettingsManager]:  * Path to LTL*BA executable (LTL2BA, LTL3BA)=/mnt/data0/jon/SmartPulseTool/ltl2ba
[2020-11-25 08:50:33,259 INFO  L131        SettingsManager]: Preferences of BlockEncodingV2 differ from their defaults:
[2020-11-25 08:50:33,260 INFO  L133        SettingsManager]:  * Maximize final states=false
[2020-11-25 08:50:33,260 INFO  L133        SettingsManager]:  * Minimize states even if more edges are added than removed.=true
[2020-11-25 08:50:33,260 INFO  L133        SettingsManager]:  * Minimize states using LBE with the strategy=NONE
[2020-11-25 08:50:33,260 INFO  L131        SettingsManager]: Preferences of BuchiAutomizer differ from their defaults:
[2020-11-25 08:50:33,260 INFO  L133        SettingsManager]:  * Compute Interpolants along a Counterexample=Craig_TreeInterpolation
[2020-11-25 08:50:33,260 INFO  L133        SettingsManager]:  * Use old map elimination=false
[2020-11-25 08:50:33,260 INFO  L133        SettingsManager]:  * Try twofold refinement=false
[2020-11-25 08:50:33,260 INFO  L131        SettingsManager]: Preferences of CACSL2BoogieTranslator differ from their defaults:
[2020-11-25 08:50:33,260 INFO  L133        SettingsManager]:  * Check unreachability of error function in SV-COMP mode=false
[2020-11-25 08:50:33,260 INFO  L133        SettingsManager]:  * Overapproximate operations on floating types=true
[2020-11-25 08:50:33,261 INFO  L133        SettingsManager]:  * Check division by zero=IGNORE
[2020-11-25 08:50:33,261 INFO  L133        SettingsManager]:  * Pointer to allocated memory at dereference=ASSUME
[2020-11-25 08:50:33,261 INFO  L133        SettingsManager]:  * If two pointers are subtracted or compared they have the same base address=ASSUME
[2020-11-25 08:50:33,261 INFO  L133        SettingsManager]:  * Check array bounds for arrays that are off heap=ASSUME
[2020-11-25 08:50:33,261 INFO  L133        SettingsManager]:  * Check if freed pointer was valid=false
[2020-11-25 08:50:33,261 INFO  L133        SettingsManager]:  * Use constant arrays=true
[2020-11-25 08:50:33,261 INFO  L133        SettingsManager]:  * Pointer base address is valid at dereference=ASSUME
[2020-11-25 08:50:33,261 INFO  L131        SettingsManager]: Preferences of RCFGBuilder differ from their defaults:
[2020-11-25 08:50:33,261 INFO  L133        SettingsManager]:  * Size of a code block=SingleStatement
[2020-11-25 08:50:33,261 INFO  L133        SettingsManager]:  * SMT solver=Internal_SMTInterpol
[2020-11-25 08:50:33,283 INFO  L81    nceAwareModelManager]: Repository-Root is: /tmp
[2020-11-25 08:50:33,295 INFO  L259   ainManager$Toolchain]: [Toolchain 1]: Applicable parser(s) successfully (re)initialized
[2020-11-25 08:50:33,297 INFO  L215   ainManager$Toolchain]: [Toolchain 1]: Toolchain selected.
[2020-11-25 08:50:33,298 INFO  L271        PluginConnector]: Initializing Boogie PL CUP Parser...
[2020-11-25 08:50:33,299 INFO  L276        PluginConnector]: Boogie PL CUP Parser initialized
[2020-11-25 08:50:33,299 INFO  L430   ainManager$Toolchain]: [Toolchain 1]: Parsing single file: /mnt/data0/jon/SmartPulseTool/WXB_0x549ed593defa6ce92fb8e8ce08bec1a804ca1fbe_transferfrom-normal.bpl
[2020-11-25 08:50:33,299 INFO  L111           BoogieParser]: Parsing: '/mnt/data0/jon/SmartPulseTool/WXB_0x549ed593defa6ce92fb8e8ce08bec1a804ca1fbe_transferfrom-normal.bpl'
[2020-11-25 08:50:33,355 INFO  L297   ainManager$Toolchain]: ####################### [Toolchain 1] #######################
[2020-11-25 08:50:33,356 INFO  L131        ToolchainWalker]: Walking toolchain with 8 elements.
[2020-11-25 08:50:33,356 INFO  L113        PluginConnector]: ------------------------Boogie Preprocessor----------------------------
[2020-11-25 08:50:33,357 INFO  L271        PluginConnector]: Initializing Boogie Preprocessor...
[2020-11-25 08:50:33,357 INFO  L276        PluginConnector]: Boogie Preprocessor initialized
[2020-11-25 08:50:33,372 INFO  L185        PluginConnector]: Executing the observer EnsureBoogieModelObserver from plugin Boogie Preprocessor for "WXB_0x549ed593defa6ce92fb8e8ce08bec1a804ca1fbe_transferfrom-normal.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 08:50:33" (1/1) ...
[2020-11-25 08:50:33,373 INFO  L185        PluginConnector]: Executing the observer TypeChecker from plugin Boogie Preprocessor for "WXB_0x549ed593defa6ce92fb8e8ce08bec1a804ca1fbe_transferfrom-normal.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 08:50:33" (1/1) ...
[2020-11-25 08:50:33,394 INFO  L185        PluginConnector]: Executing the observer ConstExpander from plugin Boogie Preprocessor for "WXB_0x549ed593defa6ce92fb8e8ce08bec1a804ca1fbe_transferfrom-normal.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 08:50:33" (1/1) ...
[2020-11-25 08:50:33,395 INFO  L185        PluginConnector]: Executing the observer StructExpander from plugin Boogie Preprocessor for "WXB_0x549ed593defa6ce92fb8e8ce08bec1a804ca1fbe_transferfrom-normal.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 08:50:33" (1/1) ...
[2020-11-25 08:50:33,410 INFO  L185        PluginConnector]: Executing the observer UnstructureCode from plugin Boogie Preprocessor for "WXB_0x549ed593defa6ce92fb8e8ce08bec1a804ca1fbe_transferfrom-normal.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 08:50:33" (1/1) ...
[2020-11-25 08:50:33,416 INFO  L185        PluginConnector]: Executing the observer FunctionInliner from plugin Boogie Preprocessor for "WXB_0x549ed593defa6ce92fb8e8ce08bec1a804ca1fbe_transferfrom-normal.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 08:50:33" (1/1) ...
[2020-11-25 08:50:33,420 INFO  L185        PluginConnector]: Executing the observer BoogieSymbolTableConstructor from plugin Boogie Preprocessor for "WXB_0x549ed593defa6ce92fb8e8ce08bec1a804ca1fbe_transferfrom-normal.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 08:50:33" (1/1) ...
[2020-11-25 08:50:33,426 INFO  L132        PluginConnector]: ------------------------ END Boogie Preprocessor----------------------------
[2020-11-25 08:50:33,427 INFO  L113        PluginConnector]: ------------------------UtopiaSpecLang----------------------------
[2020-11-25 08:50:33,427 INFO  L271        PluginConnector]: Initializing UtopiaSpecLang...
[2020-11-25 08:50:33,429 INFO  L276        PluginConnector]: UtopiaSpecLang initialized
[2020-11-25 08:50:33,432 INFO  L185        PluginConnector]: Executing the observer UtopiaSpecLangObserver from plugin UtopiaSpecLang for "WXB_0x549ed593defa6ce92fb8e8ce08bec1a804ca1fbe_transferfrom-normal.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 08:50:33" (1/1) ...
[2020-11-25 08:50:33,444 INFO  L1012  opiaSpecLangObserver]: Parsing LTLPlus Formula to AstNode: [](started(WXB.transferFrom(from, to, value), p1 != from && p1 != to && (p2 != from || p3 != msg.sender) && from != to && value <= holders_WXB[this][from] && value <= approach_WXB[this][from][msg.sender] && holders_WXB[this][to] + value < 0x10000000000000000000000000000000000000000000000000000000000000000 && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && holders_WXB[this][to] >= 0 && holders_WXB[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && holders_WXB[this][from] >= 0 &&  holders_WXB[this][from] < 0x10000000000000000000000000000000000000000000000000000000000000000 && approach_WXB[this][from][msg.sender] >= 0 && approach_WXB[this][from][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(finished(WXB.transferFrom(from, to, value), return == true && holders_WXB[this][from] == old(holders_WXB[this][from]) - value && holders_WXB[this][to] == old(holders_WXB[this][to]) + value && approach_WXB[this][from][msg.sender] == old(approach_WXB[this][from][msg.sender]) - value && totalSupply_WXB[this] == old(totalSupply_WXB[this]) && holders_WXB[this][p1] == old(holders_WXB[this][p1]) && approach_WXB[this][p2][p3] == old(approach_WXB[this][p2][p3]) && decimals_WXB[this] == old(decimals_WXB[this]) && symbol_WXB[this] == old(symbol_WXB[this]) && name_WXB[this] == old(name_WXB[this]))))
[2020-11-25 08:50:33,450 INFO  L1016  opiaSpecLangObserver]: Successfully lexed: [](started(WXB.transferFrom(from, to, value), p1 != from && p1 != to && (p2 != from || p3 != msg.sender) && from != to && value <= holders_WXB[this][from] && value <= approach_WXB[this][from][msg.sender] && holders_WXB[this][to] + value < 0x10000000000000000000000000000000000000000000000000000000000000000 && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && holders_WXB[this][to] >= 0 && holders_WXB[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && holders_WXB[this][from] >= 0 &&  holders_WXB[this][from] < 0x10000000000000000000000000000000000000000000000000000000000000000 && approach_WXB[this][from][msg.sender] >= 0 && approach_WXB[this][from][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(finished(WXB.transferFrom(from, to, value), return == true && holders_WXB[this][from] == old(holders_WXB[this][from]) - value && holders_WXB[this][to] == old(holders_WXB[this][to]) + value && approach_WXB[this][from][msg.sender] == old(approach_WXB[this][from][msg.sender]) - value && totalSupply_WXB[this] == old(totalSupply_WXB[this]) && holders_WXB[this][p1] == old(holders_WXB[this][p1]) && approach_WXB[this][p2][p3] == old(approach_WXB[this][p2][p3]) && decimals_WXB[this] == old(decimals_WXB[this]) && symbol_WXB[this] == old(symbol_WXB[this]) && name_WXB[this] == old(name_WXB[this]))))
[2020-11-25 08:50:33,458 INFO  L1018  opiaSpecLangObserver]: Successfully parsed: [](started(WXB.transferFrom(from, to, value), p1 != from && p1 != to && (p2 != from || p3 != msg.sender) && from != to && value <= holders_WXB[this][from] && value <= approach_WXB[this][from][msg.sender] && holders_WXB[this][to] + value < 0x10000000000000000000000000000000000000000000000000000000000000000 && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && holders_WXB[this][to] >= 0 && holders_WXB[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && holders_WXB[this][from] >= 0 &&  holders_WXB[this][from] < 0x10000000000000000000000000000000000000000000000000000000000000000 && approach_WXB[this][from][msg.sender] >= 0 && approach_WXB[this][from][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(finished(WXB.transferFrom(from, to, value), return == true && holders_WXB[this][from] == old(holders_WXB[this][from]) - value && holders_WXB[this][to] == old(holders_WXB[this][to]) + value && approach_WXB[this][from][msg.sender] == old(approach_WXB[this][from][msg.sender]) - value && totalSupply_WXB[this] == old(totalSupply_WXB[this]) && holders_WXB[this][p1] == old(holders_WXB[this][p1]) && approach_WXB[this][p2][p3] == old(approach_WXB[this][p2][p3]) && decimals_WXB[this] == old(decimals_WXB[this]) && symbol_WXB[this] == old(symbol_WXB[this]) && name_WXB[this] == old(name_WXB[this]))))
[2020-11-25 08:50:33,464 INFO  L636   opiaSpecLangObserver]: Parsed ( ( ( ( ( ( ( ( ( ( ( ( ( ( p1!=_from_s315 && p1!=_to_s315 ) && ( p2!=_from_s315 || p3!=msg.sender ) ) && _from_s315!=_to_s315 ) && _val_s315<=holders_WXB[this][_from_s315] ) && _val_s315<=approach_WXB[this][_from_s315][msg.sender] ) && ( holders_WXB[this][_to_s315] + _val_s315 )<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) && _val_s315>=0 ) && _val_s315<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) && holders_WXB[this][_to_s315]>=0 ) && holders_WXB[this][_to_s315]<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) && holders_WXB[this][_from_s315]>=0 ) && holders_WXB[this][_from_s315]<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) && approach_WXB[this][_from_s315][msg.sender]>=0 ) && approach_WXB[this][_from_s315][msg.sender]<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) to BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[COMPNEQ,IdentifierExpression[p1,GLOBAL],IdentifierExpression[_from_s315,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_WXB>]],BinaryExpression[COMPNEQ,IdentifierExpression[p1,GLOBAL],IdentifierExpression[_to_s315,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_WXB>]]],BinaryExpression[LOGICOR,BinaryExpression[COMPNEQ,IdentifierExpression[p2,GLOBAL],IdentifierExpression[_from_s315,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_WXB>]],BinaryExpression[COMPNEQ,IdentifierExpression[p3,GLOBAL],IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_WXB>]]]],BinaryExpression[COMPNEQ,IdentifierExpression[_from_s315,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_WXB>],IdentifierExpression[_to_s315,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_WXB>]]],BinaryExpression[COMPLEQ,IdentifierExpression[_val_s315,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_WXB>],ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[holders_WXB,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_WXB>]]],[IdentifierExpression[_from_s315,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_WXB>]]]]],BinaryExpression[COMPLEQ,IdentifierExpression[_val_s315,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_WXB>],ArrayAccessExpression[ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[approach_WXB,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_WXB>]]],[IdentifierExpression[_from_s315,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_WXB>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_WXB>]]]]],BinaryExpression[COMPLT,BinaryExpression[ARITHPLUS,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[holders_WXB,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_WXB>]]],[IdentifierExpression[_to_s315,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_WXB>]]],IdentifierExpression[_val_s315,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_WXB>]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]],BinaryExpression[COMPGEQ,IdentifierExpression[_val_s315,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_WXB>],IntegerLiteral[0]]],BinaryExpression[COMPLT,IdentifierExpression[_val_s315,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_WXB>],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]],BinaryExpression[COMPGEQ,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[holders_WXB,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_WXB>]]],[IdentifierExpression[_to_s315,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_WXB>]]],IntegerLiteral[0]]],BinaryExpression[COMPLT,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[holders_WXB,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_WXB>]]],[IdentifierExpression[_to_s315,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_WXB>]]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]],BinaryExpression[COMPGEQ,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[holders_WXB,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_WXB>]]],[IdentifierExpression[_from_s315,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_WXB>]]],IntegerLiteral[0]]],BinaryExpression[COMPLT,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[holders_WXB,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_WXB>]]],[IdentifierExpression[_from_s315,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_WXB>]]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]],BinaryExpression[COMPGEQ,ArrayAccessExpression[ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[approach_WXB,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_WXB>]]],[IdentifierExpression[_from_s315,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_WXB>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_WXB>]]],IntegerLiteral[0]]],BinaryExpression[COMPLT,ArrayAccessExpression[ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[approach_WXB,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_WXB>]]],[IdentifierExpression[_from_s315,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_WXB>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_WXB>]]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]]
[2020-11-25 08:50:33,467 INFO  L636   opiaSpecLangObserver]: Parsed ( ( ( ( ( ( ( ( ( __ret_0_==true && holders_WXB[this][_from_s315]==( ( old(holders_WXB[this][_from_s315]) ) - _val_s315 ) ) && holders_WXB[this][_to_s315]==( ( old(holders_WXB[this][_to_s315]) ) + _val_s315 ) ) && approach_WXB[this][_from_s315][msg.sender]==( ( old(approach_WXB[this][_from_s315][msg.sender]) ) - _val_s315 ) ) && totalSupply_WXB[this]==( old(totalSupply_WXB[this]) ) ) && holders_WXB[this][p1]==( old(holders_WXB[this][p1]) ) ) && approach_WXB[this][p2][p3]==( old(approach_WXB[this][p2][p3]) ) ) && decimals_WXB[this]==( old(decimals_WXB[this]) ) ) && symbol_WXB[this]==( old(symbol_WXB[this]) ) ) && name_WXB[this]==( old(name_WXB[this]) ) ) to BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[COMPEQ,IdentifierExpression[__ret_0_,<IMPLEMENTATION_OUTPARAM,transferFrom~address~address~uint256_WXB>],BooleanLiteral[true]],BinaryExpression[COMPEQ,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[holders_WXB,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_WXB>]]],[IdentifierExpression[_from_s315,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_WXB>]]],BinaryExpression[ARITHMINUS,UnaryExpression[OLD,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[holders_WXB,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_WXB>]]],[IdentifierExpression[_from_s315,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_WXB>]]]],IdentifierExpression[_val_s315,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_WXB>]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[holders_WXB,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_WXB>]]],[IdentifierExpression[_to_s315,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_WXB>]]],BinaryExpression[ARITHPLUS,UnaryExpression[OLD,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[holders_WXB,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_WXB>]]],[IdentifierExpression[_to_s315,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_WXB>]]]],IdentifierExpression[_val_s315,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_WXB>]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[approach_WXB,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_WXB>]]],[IdentifierExpression[_from_s315,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_WXB>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_WXB>]]],BinaryExpression[ARITHMINUS,UnaryExpression[OLD,ArrayAccessExpression[ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[approach_WXB,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_WXB>]]],[IdentifierExpression[_from_s315,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_WXB>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_WXB>]]]],IdentifierExpression[_val_s315,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_WXB>]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[totalSupply_WXB,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_WXB>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[totalSupply_WXB,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_WXB>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[holders_WXB,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_WXB>]]],[IdentifierExpression[p1,GLOBAL]]],UnaryExpression[OLD,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[holders_WXB,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_WXB>]]],[IdentifierExpression[p1,GLOBAL]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[approach_WXB,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_WXB>]]],[IdentifierExpression[p2,GLOBAL]]],[IdentifierExpression[p3,GLOBAL]]],UnaryExpression[OLD,ArrayAccessExpression[ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[approach_WXB,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_WXB>]]],[IdentifierExpression[p2,GLOBAL]]],[IdentifierExpression[p3,GLOBAL]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[decimals_WXB,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_WXB>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[decimals_WXB,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_WXB>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[symbol_WXB,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_WXB>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[symbol_WXB,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_WXB>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[name_WXB,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_WXB>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[name_WXB,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_WXB>]]]]]]
[2020-11-25 08:50:33,471 INFO  L1005  opiaSpecLangObserver]: Compiling: [](started(WXB.transferFrom(from, to, value), p1 != from && p1 != to && (p2 != from || p3 != msg.sender) && from != to && value <= holders_WXB[this][from] && value <= approach_WXB[this][from][msg.sender] && holders_WXB[this][to] + value < 0x10000000000000000000000000000000000000000000000000000000000000000 && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && holders_WXB[this][to] >= 0 && holders_WXB[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && holders_WXB[this][from] >= 0 &&  holders_WXB[this][from] < 0x10000000000000000000000000000000000000000000000000000000000000000 && approach_WXB[this][from][msg.sender] >= 0 && approach_WXB[this][from][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(finished(WXB.transferFrom(from, to, value), return == true && holders_WXB[this][from] == old(holders_WXB[this][from]) - value && holders_WXB[this][to] == old(holders_WXB[this][to]) + value && approach_WXB[this][from][msg.sender] == old(approach_WXB[this][from][msg.sender]) - value && totalSupply_WXB[this] == old(totalSupply_WXB[this]) && holders_WXB[this][p1] == old(holders_WXB[this][p1]) && approach_WXB[this][p2][p3] == old(approach_WXB[this][p2][p3]) && decimals_WXB[this] == old(decimals_WXB[this]) && symbol_WXB[this] == old(symbol_WXB[this]) && name_WXB[this] == old(name_WXB[this]))))
[2020-11-25 08:50:33,472 INFO  L1007  opiaSpecLangObserver]: Compiled to ( []( AP(call_transferFrom_WXB0) ==> ( <>AP(success_transferFrom_WXB0) ) ) )
Executed UtopiaSpecLang
[2020-11-25 08:50:33,476 INFO  L202        PluginConnector]: Adding new model Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 08:50:33 PropertyContainer
[2020-11-25 08:50:33,477 INFO  L132        PluginConnector]: ------------------------ END UtopiaSpecLang----------------------------
[2020-11-25 08:50:33,477 INFO  L113        PluginConnector]: ------------------------Boogie Printer----------------------------
[2020-11-25 08:50:33,477 INFO  L271        PluginConnector]: Initializing Boogie Printer...
[2020-11-25 08:50:33,477 INFO  L276        PluginConnector]: Boogie Printer initialized
[2020-11-25 08:50:33,478 INFO  L185        PluginConnector]: Executing the observer BoogiePrinterObserver from plugin Boogie Printer for "WXB_0x549ed593defa6ce92fb8e8ce08bec1a804ca1fbe_transferfrom-normal.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 08:50:33" (1/2) ...
[2020-11-25 08:50:33,478 INFO  L116   oogiePrinterObserver]: File already exists and will be overwritten: /tmp/boogiePrinter.bpl
[2020-11-25 08:50:33,478 INFO  L120   oogiePrinterObserver]: Writing to file /tmp/boogiePrinter.bpl
[2020-11-25 08:50:33,486 INFO  L185        PluginConnector]: Executing the observer BoogiePrinterObserver from plugin Boogie Printer for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 08:50:33" (2/2) ...
[2020-11-25 08:50:33,486 INFO  L132        PluginConnector]: ------------------------ END Boogie Printer----------------------------
[2020-11-25 08:50:33,486 INFO  L113        PluginConnector]: ------------------------RCFGBuilder----------------------------
[2020-11-25 08:50:33,486 INFO  L271        PluginConnector]: Initializing RCFGBuilder...
[2020-11-25 08:50:33,486 INFO  L276        PluginConnector]: RCFGBuilder initialized
[2020-11-25 08:50:33,487 INFO  L185        PluginConnector]: Executing the observer RCFGBuilderObserver from plugin RCFGBuilder for "WXB_0x549ed593defa6ce92fb8e8ce08bec1a804ca1fbe_transferfrom-normal.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 08:50:33" (1/2) ...
[2020-11-25 08:50:33,539 INFO  L130     BoogieDeclarations]: Found specification of procedure FreshRefGenerator__success
[2020-11-25 08:50:33,540 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20_NoBaseCtor__success
[2020-11-25 08:50:33,540 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20
[2020-11-25 08:50:33,540 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20
[2020-11-25 08:50:33,540 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_ERC20
[2020-11-25 08:50:33,540 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_ERC20
[2020-11-25 08:50:33,540 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_ERC20
[2020-11-25 08:50:33,540 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_ERC20
[2020-11-25 08:50:33,540 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_ERC20
[2020-11-25 08:50:33,540 INFO  L130     BoogieDeclarations]: Found specification of procedure WXB_WXB_NoBaseCtor__success
[2020-11-25 08:50:33,541 INFO  L130     BoogieDeclarations]: Found specification of procedure WXB_WXB
[2020-11-25 08:50:33,541 INFO  L138     BoogieDeclarations]: Found implementation of procedure WXB_WXB
[2020-11-25 08:50:33,541 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackMethod_WXB__success
[2020-11-25 08:50:33,541 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_WXB
[2020-11-25 08:50:33,541 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_WXB
[2020-11-25 08:50:33,541 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_WXB
[2020-11-25 08:50:33,541 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_WXB
[2020-11-25 08:50:33,541 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_WXB
[2020-11-25 08:50:33,541 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_WXB
[2020-11-25 08:50:33,541 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_WXB
[2020-11-25 08:50:33,542 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_WXB
[2020-11-25 08:50:33,542 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_WXB
[2020-11-25 08:50:33,542 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_WXB
[2020-11-25 08:50:33,542 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_WXB
[2020-11-25 08:50:33,542 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_WXB
[2020-11-25 08:50:33,542 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_WXB
[2020-11-25 08:50:33,542 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_WXB
[2020-11-25 08:50:33,542 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_WXB
[2020-11-25 08:50:33,542 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_WXB
[2020-11-25 08:50:33,542 INFO  L130     BoogieDeclarations]: Found specification of procedure name_WXB
[2020-11-25 08:50:33,542 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_WXB
[2020-11-25 08:50:33,542 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackDispatch__success
[2020-11-25 08:50:33,543 INFO  L130     BoogieDeclarations]: Found specification of procedure Fallback_UnknownType__success
[2020-11-25 08:50:33,543 INFO  L130     BoogieDeclarations]: Found specification of procedure send__success
[2020-11-25 08:50:33,543 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_ERC20
[2020-11-25 08:50:33,543 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_ERC20
[2020-11-25 08:50:33,543 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_WXB
[2020-11-25 08:50:33,543 INFO  L130     BoogieDeclarations]: Found specification of procedure main
[2020-11-25 08:50:33,543 INFO  L130     BoogieDeclarations]: Found specification of procedure FreshRefGenerator__fail
[2020-11-25 08:50:33,543 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20_NoBaseCtor__fail
[2020-11-25 08:50:33,543 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20__success
[2020-11-25 08:50:33,543 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20__fail
[2020-11-25 08:50:33,543 INFO  L130     BoogieDeclarations]: Found specification of procedure WXB_WXB_NoBaseCtor__fail
[2020-11-25 08:50:33,543 INFO  L130     BoogieDeclarations]: Found specification of procedure WXB_WXB__success
[2020-11-25 08:50:33,543 INFO  L130     BoogieDeclarations]: Found specification of procedure WXB_WXB__fail
[2020-11-25 08:50:33,543 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackMethod_WXB__fail
[2020-11-25 08:50:33,544 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_WXB__success
[2020-11-25 08:50:33,544 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_WXB__fail
[2020-11-25 08:50:33,544 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_WXB__success
[2020-11-25 08:50:33,544 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_WXB__fail
[2020-11-25 08:50:33,544 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_WXB__success
[2020-11-25 08:50:33,544 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_WXB__fail
[2020-11-25 08:50:33,544 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_WXB__success
[2020-11-25 08:50:33,544 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_WXB__fail
[2020-11-25 08:50:33,544 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_WXB__success
[2020-11-25 08:50:33,544 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_WXB__fail
[2020-11-25 08:50:33,544 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_WXB__success
[2020-11-25 08:50:33,544 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_WXB__fail
[2020-11-25 08:50:33,545 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_WXB__success
[2020-11-25 08:50:33,545 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_WXB__fail
[2020-11-25 08:50:33,545 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_WXB__success
[2020-11-25 08:50:33,545 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_WXB__fail
[2020-11-25 08:50:33,545 INFO  L130     BoogieDeclarations]: Found specification of procedure name_WXB__success
[2020-11-25 08:50:33,545 INFO  L130     BoogieDeclarations]: Found specification of procedure name_WXB__fail
[2020-11-25 08:50:33,545 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackDispatch__fail
[2020-11-25 08:50:33,545 INFO  L130     BoogieDeclarations]: Found specification of procedure Fallback_UnknownType__fail
[2020-11-25 08:50:33,545 INFO  L130     BoogieDeclarations]: Found specification of procedure send__fail
[2020-11-25 08:50:33,545 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreshRefGenerator__fail
[2020-11-25 08:50:33,545 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreshRefGenerator__success
[2020-11-25 08:50:33,545 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20_NoBaseCtor__fail
[2020-11-25 08:50:33,545 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20_NoBaseCtor__success
[2020-11-25 08:50:33,546 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20__fail
[2020-11-25 08:50:33,546 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20__success
[2020-11-25 08:50:33,546 INFO  L138     BoogieDeclarations]: Found implementation of procedure WXB_WXB_NoBaseCtor__fail
[2020-11-25 08:50:33,546 INFO  L138     BoogieDeclarations]: Found implementation of procedure WXB_WXB_NoBaseCtor__success
[2020-11-25 08:50:33,546 INFO  L138     BoogieDeclarations]: Found implementation of procedure WXB_WXB__fail
[2020-11-25 08:50:33,546 INFO  L138     BoogieDeclarations]: Found implementation of procedure WXB_WXB__success
[2020-11-25 08:50:33,546 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackMethod_WXB__fail
[2020-11-25 08:50:33,546 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackMethod_WXB__success
[2020-11-25 08:50:33,546 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_WXB__fail
[2020-11-25 08:50:33,546 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_WXB__success
[2020-11-25 08:50:33,546 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_WXB__fail
[2020-11-25 08:50:33,546 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_WXB__success
[2020-11-25 08:50:33,547 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_WXB__fail
[2020-11-25 08:50:33,547 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_WXB__success
[2020-11-25 08:50:33,547 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_WXB__fail
[2020-11-25 08:50:33,547 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_WXB__success
[2020-11-25 08:50:33,547 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_WXB__fail
[2020-11-25 08:50:33,547 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_WXB__success
[2020-11-25 08:50:33,547 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_WXB__fail
[2020-11-25 08:50:33,547 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_WXB__success
[2020-11-25 08:50:33,547 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_WXB__fail
[2020-11-25 08:50:33,547 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_WXB__success
[2020-11-25 08:50:33,547 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_WXB__fail
[2020-11-25 08:50:33,548 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_WXB__success
[2020-11-25 08:50:33,548 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_WXB__fail
[2020-11-25 08:50:33,548 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_WXB__success
[2020-11-25 08:50:33,548 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackDispatch__fail
[2020-11-25 08:50:33,548 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackDispatch__success
[2020-11-25 08:50:33,548 INFO  L138     BoogieDeclarations]: Found implementation of procedure Fallback_UnknownType__fail
[2020-11-25 08:50:33,548 INFO  L138     BoogieDeclarations]: Found implementation of procedure Fallback_UnknownType__success
[2020-11-25 08:50:33,548 INFO  L138     BoogieDeclarations]: Found implementation of procedure send__fail
[2020-11-25 08:50:33,548 INFO  L138     BoogieDeclarations]: Found implementation of procedure send__success
[2020-11-25 08:50:33,548 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_ERC20
[2020-11-25 08:50:33,548 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_ERC20
[2020-11-25 08:50:33,548 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_WXB
[2020-11-25 08:50:33,549 INFO  L138     BoogieDeclarations]: Found implementation of procedure main
[2020-11-25 08:50:33,549 INFO  L130     BoogieDeclarations]: Found specification of procedure ULTIMATE.start
[2020-11-25 08:50:33,549 INFO  L138     BoogieDeclarations]: Found implementation of procedure ULTIMATE.start
[2020-11-25 08:50:33,687 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 08:50:33,885 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 08:50:33,886 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 08:50:33,886 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 08:50:34,026 INFO  L281             CfgBuilder]: Using the 1 location(s) as analysis (start of procedure ULTIMATE.start)
[2020-11-25 08:50:34,026 INFO  L286             CfgBuilder]: Removed 2 assue(true) statements.
[2020-11-25 08:50:34,028 INFO  L202        PluginConnector]: Adding new model WXB_0x549ed593defa6ce92fb8e8ce08bec1a804ca1fbe_transferfrom-normal.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 08:50:34 BoogieIcfgContainer
[2020-11-25 08:50:34,028 INFO  L185        PluginConnector]: Executing the observer RCFGBuilderObserver from plugin RCFGBuilder for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 08:50:33" (2/2) ...
[2020-11-25 08:50:34,029 INFO  L85     RCFGBuilderObserver]: No WrapperNode. Let Ultimate process with next node
[2020-11-25 08:50:34,029 INFO  L205        PluginConnector]: Invalid model from RCFGBuilder for observer de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder.RCFGBuilderObserver@6450cdd3 and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 08:50:34, skipping insertion in model container
[2020-11-25 08:50:34,029 INFO  L132        PluginConnector]: ------------------------ END RCFGBuilder----------------------------
[2020-11-25 08:50:34,030 INFO  L113        PluginConnector]: ------------------------UtopiaLTL2Aut----------------------------
[2020-11-25 08:50:34,030 INFO  L271        PluginConnector]: Initializing UtopiaLTL2Aut...
[2020-11-25 08:50:34,032 INFO  L276        PluginConnector]: UtopiaLTL2Aut initialized
[2020-11-25 08:50:34,032 INFO  L185        PluginConnector]: Executing the observer UtopiaLTL2AutObserver from plugin UtopiaLTL2Aut for "WXB_0x549ed593defa6ce92fb8e8ce08bec1a804ca1fbe_transferfrom-normal.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 08:50:33" (1/3) ...
[2020-11-25 08:50:34,032 INFO  L205        PluginConnector]: Invalid model from UtopiaLTL2Aut for observer edu.utexas.cs.utopia.ltl2aut.UtopiaLTL2AutObserver@533e0e1f and model type Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 08:50:34, skipping insertion in model container
[2020-11-25 08:50:34,032 INFO  L185        PluginConnector]: Executing the observer UtopiaLTL2AutObserver from plugin UtopiaLTL2Aut for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 08:50:33" (2/3) ...
No working directory specified, using /mnt/data0/jon/SmartPulseTool/ltl2ba
Starting monitored process 1 with /mnt/data0/jon/SmartPulseTool/ltl2ba -f ! ( ( [] ( a -> ( <>b ) ) ) )  (exit command is null, workingDir is null)
[2020-11-25 08:50:34,070 INFO  L202        PluginConnector]: Adding new model Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 08:50:34 NWAContainer
[2020-11-25 08:50:34,070 INFO  L132        PluginConnector]: ------------------------ END UtopiaLTL2Aut----------------------------
[2020-11-25 08:50:34,071 INFO  L113        PluginConnector]: ------------------------BÃ¼chi Program Product----------------------------
[2020-11-25 08:50:34,071 INFO  L271        PluginConnector]: Initializing BÃ¼chi Program Product...
[2020-11-25 08:50:34,071 INFO  L276        PluginConnector]: BÃ¼chi Program Product initialized
[2020-11-25 08:50:34,072 INFO  L185        PluginConnector]: Executing the observer BuchiProductObserver from plugin BÃ¼chi Program Product for "WXB_0x549ed593defa6ce92fb8e8ce08bec1a804ca1fbe_transferfrom-normal.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 08:50:34" (3/4) ...
[2020-11-25 08:50:34,073 INFO  L205        PluginConnector]: Invalid model from BÃ¼chi Program Product for observer de.uni_freiburg.informatik.ultimate.buchiprogramproduct.BuchiProductObserver@6564d936 and model type LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 08:50:34, skipping insertion in model container
[2020-11-25 08:50:34,073 INFO  L185        PluginConnector]: Executing the observer BuchiProductObserver from plugin BÃ¼chi Program Product for "Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 08:50:34" (4/4) ...
[2020-11-25 08:50:34,076 INFO  L104   BuchiProductObserver]: Initial property automaton 2 locations, 3 edges
[2020-11-25 08:50:34,079 INFO  L110   BuchiProductObserver]: Initial RCFG 660 locations, 788 edges
[2020-11-25 08:50:34,079 INFO  L93    BuchiProductObserver]: Beginning generation of product automaton
[2020-11-25 08:50:34,088 INFO  L136       ProductGenerator]: The program has no step specification, so we assume maximum atomicity
[2020-11-25 08:50:34,981 INFO  L97    BuchiProductObserver]: Finished generation of product automaton successfully
[2020-11-25 08:50:34,984 INFO  L110   BuchiProductObserver]: BuchiProgram size 1528 locations, 2549 edges
[2020-11-25 08:50:34,984 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 08:50:34 BoogieIcfgContainer
[2020-11-25 08:50:34,984 INFO  L132        PluginConnector]: ------------------------ END BÃ¼chi Program Product----------------------------
[2020-11-25 08:50:34,985 INFO  L113        PluginConnector]: ------------------------BlockEncodingV2----------------------------
[2020-11-25 08:50:34,985 INFO  L271        PluginConnector]: Initializing BlockEncodingV2...
[2020-11-25 08:50:34,987 INFO  L276        PluginConnector]: BlockEncodingV2 initialized
[2020-11-25 08:50:34,988 INFO  L185        PluginConnector]: Executing the observer BlockEncodingObserver from plugin BlockEncodingV2 for "LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 08:50:34" (1/1) ...
[2020-11-25 08:50:35,033 INFO  L313           BlockEncoder]: Initial Icfg 1528 locations, 2549 edges
[2020-11-25 08:50:35,034 INFO  L258           BlockEncoder]: Using Remove infeasible edges
[2020-11-25 08:50:35,034 INFO  L270           BlockEncoder]: Using Minimize states even if more edges are added than removed.=true
[2020-11-25 08:50:35,034 INFO  L296           BlockEncoder]: Using Remove sink states
[2020-11-25 08:50:35,035 INFO  L171           BlockEncoder]: Using Apply optimizations until nothing changes=true
[2020-11-25 08:50:35,042 INFO  L70    emoveInfeasibleEdges]: Removed 27 edges and 7 locations because of local infeasibility
[2020-11-25 08:50:35,046 INFO  L70        RemoveSinkStates]: Removed 2 edges and 1 locations by removing sink states
[2020-11-25 08:50:35,052 INFO  L70    emoveInfeasibleEdges]: Removed 0 edges and 0 locations because of local infeasibility
[2020-11-25 08:50:35,053 INFO  L70        RemoveSinkStates]: Removed 0 edges and 0 locations by removing sink states
[2020-11-25 08:50:35,055 INFO  L237           BlockEncoder]: Using Create parallel compositions if possible
[2020-11-25 08:50:35,055 INFO  L66        ParallelComposer]: Creating parallel compositions
[2020-11-25 08:50:35,058 INFO  L313           BlockEncoder]: Encoded RCFG 1510 locations, 2506 edges
[2020-11-25 08:50:35,058 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.blockencoding CFG 25.11 08:50:35 BasicIcfg
[2020-11-25 08:50:35,058 INFO  L132        PluginConnector]: ------------------------ END BlockEncodingV2----------------------------
[2020-11-25 08:50:35,059 INFO  L113        PluginConnector]: ------------------------BuchiAutomizer----------------------------
[2020-11-25 08:50:35,059 INFO  L271        PluginConnector]: Initializing BuchiAutomizer...
[2020-11-25 08:50:35,061 INFO  L276        PluginConnector]: BuchiAutomizer initialized
[2020-11-25 08:50:35,061 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 08:50:35,062 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "WXB_0x549ed593defa6ce92fb8e8ce08bec1a804ca1fbe_transferfrom-normal.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 08:50:33" (1/6) ...
[2020-11-25 08:50:35,063 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@1cac37d and model type WXB_0x549ed593defa6ce92fb8e8ce08bec1a804ca1fbe_transferfrom-normal.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 08:50:35, skipping insertion in model container
[2020-11-25 08:50:35,063 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 08:50:35,063 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 08:50:33" (2/6) ...
[2020-11-25 08:50:35,064 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@1cac37d and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 08:50:35, skipping insertion in model container
[2020-11-25 08:50:35,064 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 08:50:35,064 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "WXB_0x549ed593defa6ce92fb8e8ce08bec1a804ca1fbe_transferfrom-normal.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 08:50:34" (3/6) ...
[2020-11-25 08:50:35,064 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@1cac37d and model type WXB_0x549ed593defa6ce92fb8e8ce08bec1a804ca1fbe_transferfrom-normal.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer CFG 25.11 08:50:35, skipping insertion in model container
[2020-11-25 08:50:35,064 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 08:50:35,064 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 08:50:34" (4/6) ...
[2020-11-25 08:50:35,064 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@1cac37d and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 08:50:35, skipping insertion in model container
[2020-11-25 08:50:35,065 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 08:50:35,065 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 08:50:34" (5/6) ...
[2020-11-25 08:50:35,065 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@1cac37d and model type LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer OTHER 25.11 08:50:35, skipping insertion in model container
[2020-11-25 08:50:35,065 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 08:50:35,065 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.blockencoding CFG 25.11 08:50:35" (6/6) ...
[2020-11-25 08:50:35,066 INFO  L404   chiAutomizerObserver]: Analyzing ICFG WXB_0x549ed593defa6ce92fb8e8ce08bec1a804ca1fbe_transferfrom-normal.bpl_BEv2
[2020-11-25 08:50:35,103 INFO  L133   ementStrategyFactory]: Using default assertion order modulation
[2020-11-25 08:50:35,104 INFO  L377         BuchiCegarLoop]: Interprodecural is true
[2020-11-25 08:50:35,104 INFO  L378         BuchiCegarLoop]: Hoare is false
[2020-11-25 08:50:35,104 INFO  L379         BuchiCegarLoop]: Compute interpolants for Craig_TreeInterpolation
[2020-11-25 08:50:35,104 INFO  L380         BuchiCegarLoop]: Backedges is STRAIGHT_LINE
[2020-11-25 08:50:35,104 INFO  L381         BuchiCegarLoop]: Determinization is PREDICATE_ABSTRACTION
[2020-11-25 08:50:35,104 INFO  L382         BuchiCegarLoop]: Difference is false
[2020-11-25 08:50:35,104 INFO  L383         BuchiCegarLoop]: Minimize is MINIMIZE_SEVPA
[2020-11-25 08:50:35,104 INFO  L386         BuchiCegarLoop]: ======== Iteration 0==of CEGAR loop == BuchiCegarLoop========
[2020-11-25 08:50:35,124 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 1510 states.
[2020-11-25 08:50:35,166 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 08:50:35,166 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 08:50:35,166 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 08:50:35,176 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 08:50:35,176 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 08:50:35,176 INFO  L445         BuchiCegarLoop]: ======== Iteration 1============
[2020-11-25 08:50:35,176 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 1510 states.
[2020-11-25 08:50:35,187 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 08:50:35,187 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 08:50:35,187 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 08:50:35,189 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 08:50:35,189 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_transferFrom_WXB0 := false;
[L3]                 call_transferFrom_WXB0 := false;
[L3]     CALL        call main();
[L3]                 havoc p3;
[L3]                 havoc p2;
[L3]                 havoc p1;
[L1760]              assume null == 0;
[L1761]  CALL        call this := FreshRefGenerator__success();
[L882]               havoc newRef;
[L883]               assume Alloc[newRef] == false;
[L884]               Alloc[newRef] := true;
[L885]               assume newRef != null;
[L1761]  RET         call this := FreshRefGenerator__success();
[L1762]              assume now >= 0;
[L1763]              assume DType[this] == WXB;
[L1764]              assume msgvalue_MSG == 0;
[L1765]              gas := gas - 53000;
[L1766]  CALL        call WXB_WXB(this, msgsender_MSG, msgvalue_MSG);
[L144]               havoc __exception;
[L145]               revert := false;
[L146]   COND FALSE  !(__exception)
[L167]   CALL        call WXB_WXB__success(this, msgsender_MSG, msgvalue_MSG);
[L986]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L914]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L899]               assume msgsender_MSG != null;
[L900]               Balance[this] := 0;
[L914]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L915]   COND TRUE   revert
[L986]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L987]   COND TRUE   revert
[L167]   RET         call WXB_WXB__success(this, msgsender_MSG, msgvalue_MSG);
[L168]               assume !revert && gas >= 0;
[L1766]  RET         call WXB_WXB(this, msgsender_MSG, msgvalue_MSG);
[L1767]              assume !revert && gas >= 0;

Loop:
[L1770]  CALL        call CorralChoice_WXB(this);
[L1663]              havoc msgsender_MSG;
[L1664]              havoc msgvalue_MSG;
[L1665]              havoc choice;
[L1666]              havoc _from_s315;
[L1667]              havoc _to_s315;
[L1668]              havoc _val_s315;
[L1669]              havoc __ret_0_transferFrom;
[L1670]              havoc _to_s213;
[L1671]              havoc _val_s213;
[L1672]              havoc __ret_0_transfer;
[L1673]              havoc _own_s139;
[L1674]              havoc __ret_0_balanceOf;
[L1675]              havoc _owner_s368;
[L1676]              havoc _spender_s368;
[L1677]              havoc __ret_0_allowance;
[L1678]              havoc _spender_s352;
[L1679]              havoc _val_s352;
[L1680]              havoc __ret_0_approve;
[L1681]              havoc __ret_0_totalSupply;
[L1682]              havoc __ret_0_decimals;
[L1683]              havoc __ret_0_symbol;
[L1684]              havoc __ret_0_name;
[L1685]              havoc tmpNow;
[L1686]              havoc gas;
[L1687]              assume gas > 4000000 && gas <= 8000000;
[L1688]              tmpNow := now;
[L1689]              havoc now;
[L1690]              assume now > tmpNow;
[L1691]              assume msgsender_MSG != null;
[L1692]              assume DType[msgsender_MSG] != ERC20;
[L1693]              assume DType[msgsender_MSG] != WXB;
[L1694]              Alloc[msgsender_MSG] := true;
[L1695]  COND TRUE   choice == 9
[L1696]              gas := gas - 21000;
[L1697]  COND FALSE  !(gas >= 0)
[L1770]  RET         call CorralChoice_WXB(this);

[2020-11-25 08:50:35,205 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 08:50:35,206 INFO  L82        PathProgramCache]: Analyzing trace with hash 1389636979, now seen corresponding path program 1 times
[2020-11-25 08:50:35,210 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 08:50:35,239 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 08:50:35,292 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 08:50:35,294 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 08:50:35,295 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [3] imperfect sequences [] total 3
[2020-11-25 08:50:35,298 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 08:50:35,399 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-11-25 08:50:35,400 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-11-25 08:50:35,401 INFO  L87              Difference]: Start difference. First operand 1510 states. Second operand 3 states.
[2020-11-25 08:50:35,524 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 08:50:35,525 INFO  L93              Difference]: Finished difference Result 1148 states and 1245 transitions.
[2020-11-25 08:50:35,525 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-11-25 08:50:35,526 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 1148 states and 1245 transitions.
[2020-11-25 08:50:35,534 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 08:50:35,546 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 1148 states to 1138 states and 1225 transitions.
[2020-11-25 08:50:35,547 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 4
[2020-11-25 08:50:35,549 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 501
[2020-11-25 08:50:35,550 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 1138 states and 1225 transitions.
[2020-11-25 08:50:35,554 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 08:50:35,555 INFO  L728         BuchiCegarLoop]: Abstraction has 1138 states and 1225 transitions.
[2020-11-25 08:50:35,570 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 1138 states and 1225 transitions.
[2020-11-25 08:50:35,599 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 1138 to 1138.
[2020-11-25 08:50:35,600 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 1138 states.
[2020-11-25 08:50:35,603 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 1138 states to 1138 states and 1225 transitions.
[2020-11-25 08:50:35,604 INFO  L751         BuchiCegarLoop]: Abstraction has 1138 states and 1225 transitions.
[2020-11-25 08:50:35,604 INFO  L631         BuchiCegarLoop]: Abstraction has 1138 states and 1225 transitions.
[2020-11-25 08:50:35,604 INFO  L445         BuchiCegarLoop]: ======== Iteration 2============
[2020-11-25 08:50:35,604 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 1138 states and 1225 transitions.
[2020-11-25 08:50:35,609 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 08:50:35,609 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 08:50:35,609 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 08:50:35,611 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 08:50:35,611 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_transferFrom_WXB0 := false;
[L3]                 call_transferFrom_WXB0 := false;
[L3]     CALL        call main();
[L3]                 havoc p3;
[L3]                 havoc p2;
[L3]                 havoc p1;
[L1760]              assume null == 0;
[L1761]  CALL        call this := FreshRefGenerator__success();
[L882]               havoc newRef;
[L883]               assume Alloc[newRef] == false;
[L884]               Alloc[newRef] := true;
[L885]               assume newRef != null;
[L1761]  RET         call this := FreshRefGenerator__success();
[L1762]              assume now >= 0;
[L1763]              assume DType[this] == WXB;
[L1764]              assume msgvalue_MSG == 0;
[L1765]              gas := gas - 53000;
[L1766]  CALL        call WXB_WXB(this, msgsender_MSG, msgvalue_MSG);
[L144]               havoc __exception;
[L145]               revert := false;
[L146]   COND FALSE  !(__exception)
[L167]   CALL        call WXB_WXB__success(this, msgsender_MSG, msgvalue_MSG);
[L986]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L914]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L899]               assume msgsender_MSG != null;
[L900]               Balance[this] := 0;
[L914]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L915]   COND TRUE   revert
[L986]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L987]   COND TRUE   revert
[L167]   RET         call WXB_WXB__success(this, msgsender_MSG, msgvalue_MSG);
[L168]               assume !revert && gas >= 0;
[L1766]  RET         call WXB_WXB(this, msgsender_MSG, msgvalue_MSG);
[L1767]              assume !revert && gas >= 0;
[L1770]  CALL        call CorralChoice_WXB(this);
[L1663]              havoc msgsender_MSG;
[L1664]              havoc msgvalue_MSG;
[L1665]              havoc choice;
[L1666]              havoc _from_s315;
[L1667]              havoc _to_s315;
[L1668]              havoc _val_s315;
[L1669]              havoc __ret_0_transferFrom;
[L1670]              havoc _to_s213;
[L1671]              havoc _val_s213;
[L1672]              havoc __ret_0_transfer;
[L1673]              havoc _own_s139;
[L1674]              havoc __ret_0_balanceOf;
[L1675]              havoc _owner_s368;
[L1676]              havoc _spender_s368;
[L1677]              havoc __ret_0_allowance;
[L1678]              havoc _spender_s352;
[L1679]              havoc _val_s352;
[L1680]              havoc __ret_0_approve;
[L1681]              havoc __ret_0_totalSupply;
[L1682]              havoc __ret_0_decimals;
[L1683]              havoc __ret_0_symbol;
[L1684]              havoc __ret_0_name;
[L1685]              havoc tmpNow;
[L1686]              havoc gas;
[L1687]              assume gas > 4000000 && gas <= 8000000;
[L1688]              tmpNow := now;
[L1689]              havoc now;
[L1690]              assume now > tmpNow;
[L1691]              assume msgsender_MSG != null;
[L1692]              assume DType[msgsender_MSG] != ERC20;
[L1693]              assume DType[msgsender_MSG] != WXB;
[L1694]              Alloc[msgsender_MSG] := true;
[L1695]  COND TRUE   choice == 9
[L1696]              gas := gas - 21000;
[L1697]  COND TRUE   gas >= 0
[L1698]              assume _val_s315 >= 0 && _val_s315 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1699]              assume msgvalue_MSG == 0;
[L1700]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_WXB(this, msgsender_MSG, msgvalue_MSG, _from_s315, _to_s315, _val_s315);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((((p1 != _from_s315 && p1 != _to_s315) && (p2 != _from_s315 || p3 != msgsender_MSG)) && _from_s315 != _to_s315) && _val_s315 <= holders_WXB[this][_from_s315]) && _val_s315 <= approach_WXB[this][_from_s315][msgsender_MSG]) && holders_WXB[this][_to_s315] + _val_s315 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _val_s315 >= 0) && _val_s315 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && holders_WXB[this][_to_s315] >= 0) && holders_WXB[this][_to_s315] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && holders_WXB[this][_from_s315] >= 0) && holders_WXB[this][_from_s315] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && approach_WXB[this][_from_s315][msgsender_MSG] >= 0) && approach_WXB[this][_from_s315][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_WXB0 := true;
[L3]                 call_transferFrom_WXB0 := false;
[L3]                 revert := revert_hold;
[L302]               havoc __exception;
[L303]               revert := false;
[L304]   COND FALSE  !(__exception)
[L325]   CALL        call __ret_0_ := transferFrom~address~address~uint256_WXB__success(this, msgsender_MSG, msgvalue_MSG, _from_s315, _to_s315, _val_s315);
[L1088]  COND TRUE   !(holders_WXB[this][_from_s315] >= _val_s315)
[L1089]              revert := true;
[L325]   RET         call __ret_0_ := transferFrom~address~address~uint256_WXB__success(this, msgsender_MSG, msgvalue_MSG, _from_s315, _to_s315, _val_s315);
[L326]               assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !(((((((((__ret_0_ == true && holders_WXB[this][_from_s315] == old(holders_WXB[this][_from_s315]) - _val_s315) && holders_WXB[this][_to_s315] == old(holders_WXB[this][_to_s315]) + _val_s315) && approach_WXB[this][_from_s315][msgsender_MSG] == old(approach_WXB[this][_from_s315][msgsender_MSG]) - _val_s315) && totalSupply_WXB[this] == old(totalSupply_WXB[this])) && holders_WXB[this][p1] == old(holders_WXB[this][p1])) && approach_WXB[this][p2][p3] == old(approach_WXB[this][p2][p3])) && decimals_WXB[this] == old(decimals_WXB[this])) && symbol_WXB[this] == old(symbol_WXB[this])) && name_WXB[this] == old(name_WXB[this]));
[L3]                 revert := revert_hold;
[L1700]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_WXB(this, msgsender_MSG, msgvalue_MSG, _from_s315, _to_s315, _val_s315);
[L1770]  RET         call CorralChoice_WXB(this);

Loop:
[L1770]  CALL        call CorralChoice_WXB(this);
[L1663]              havoc msgsender_MSG;
[L1664]              havoc msgvalue_MSG;
[L1665]              havoc choice;
[L1666]              havoc _from_s315;
[L1667]              havoc _to_s315;
[L1668]              havoc _val_s315;
[L1669]              havoc __ret_0_transferFrom;
[L1670]              havoc _to_s213;
[L1671]              havoc _val_s213;
[L1672]              havoc __ret_0_transfer;
[L1673]              havoc _own_s139;
[L1674]              havoc __ret_0_balanceOf;
[L1675]              havoc _owner_s368;
[L1676]              havoc _spender_s368;
[L1677]              havoc __ret_0_allowance;
[L1678]              havoc _spender_s352;
[L1679]              havoc _val_s352;
[L1680]              havoc __ret_0_approve;
[L1681]              havoc __ret_0_totalSupply;
[L1682]              havoc __ret_0_decimals;
[L1683]              havoc __ret_0_symbol;
[L1684]              havoc __ret_0_name;
[L1685]              havoc tmpNow;
[L1686]              havoc gas;
[L1687]              assume gas > 4000000 && gas <= 8000000;
[L1688]              tmpNow := now;
[L1689]              havoc now;
[L1690]              assume now > tmpNow;
[L1691]              assume msgsender_MSG != null;
[L1692]              assume DType[msgsender_MSG] != ERC20;
[L1693]              assume DType[msgsender_MSG] != WXB;
[L1694]              Alloc[msgsender_MSG] := true;
[L1695]  COND TRUE   choice == 9
[L1696]              gas := gas - 21000;
[L1697]  COND TRUE   gas >= 0
[L1698]              assume _val_s315 >= 0 && _val_s315 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1699]              assume msgvalue_MSG == 0;
[L1700]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_WXB(this, msgsender_MSG, msgvalue_MSG, _from_s315, _to_s315, _val_s315);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((((p1 != _from_s315 && p1 != _to_s315) && (p2 != _from_s315 || p3 != msgsender_MSG)) && _from_s315 != _to_s315) && _val_s315 <= holders_WXB[this][_from_s315]) && _val_s315 <= approach_WXB[this][_from_s315][msgsender_MSG]) && holders_WXB[this][_to_s315] + _val_s315 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _val_s315 >= 0) && _val_s315 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && holders_WXB[this][_to_s315] >= 0) && holders_WXB[this][_to_s315] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && holders_WXB[this][_from_s315] >= 0) && holders_WXB[this][_from_s315] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && approach_WXB[this][_from_s315][msgsender_MSG] >= 0) && approach_WXB[this][_from_s315][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_WXB0 := true;
[L3]                 call_transferFrom_WXB0 := false;
[L3]                 revert := revert_hold;
[L302]               havoc __exception;
[L303]               revert := false;
[L304]   COND FALSE  !(__exception)
[L325]   CALL        call __ret_0_ := transferFrom~address~address~uint256_WXB__success(this, msgsender_MSG, msgvalue_MSG, _from_s315, _to_s315, _val_s315);
[L1088]  COND TRUE   !(holders_WXB[this][_from_s315] >= _val_s315)
[L1089]              revert := true;
[L325]   RET         call __ret_0_ := transferFrom~address~address~uint256_WXB__success(this, msgsender_MSG, msgvalue_MSG, _from_s315, _to_s315, _val_s315);
[L326]               assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !(((((((((__ret_0_ == true && holders_WXB[this][_from_s315] == old(holders_WXB[this][_from_s315]) - _val_s315) && holders_WXB[this][_to_s315] == old(holders_WXB[this][_to_s315]) + _val_s315) && approach_WXB[this][_from_s315][msgsender_MSG] == old(approach_WXB[this][_from_s315][msgsender_MSG]) - _val_s315) && totalSupply_WXB[this] == old(totalSupply_WXB[this])) && holders_WXB[this][p1] == old(holders_WXB[this][p1])) && approach_WXB[this][p2][p3] == old(approach_WXB[this][p2][p3])) && decimals_WXB[this] == old(decimals_WXB[this])) && symbol_WXB[this] == old(symbol_WXB[this])) && name_WXB[this] == old(name_WXB[this]));
[L3]                 revert := revert_hold;
[L1700]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_WXB(this, msgsender_MSG, msgvalue_MSG, _from_s315, _to_s315, _val_s315);
[L1770]  RET         call CorralChoice_WXB(this);

[2020-11-25 08:50:35,615 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 08:50:35,616 INFO  L82        PathProgramCache]: Analyzing trace with hash -2043557972, now seen corresponding path program 1 times
[2020-11-25 08:50:35,617 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 08:50:35,629 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 08:50:35,649 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 08:50:35,649 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 08:50:35,649 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [4] imperfect sequences [] total 4
[2020-11-25 08:50:35,651 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 08:50:35,651 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-11-25 08:50:35,651 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=5, Invalid=7, Unknown=0, NotChecked=0, Total=12
[2020-11-25 08:50:35,651 INFO  L87              Difference]: Start difference. First operand 1138 states and 1225 transitions. cyclomatic complexity: 89 Second operand 4 states.
[2020-11-25 08:50:35,830 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 08:50:35,830 INFO  L93              Difference]: Finished difference Result 1658 states and 1885 transitions.
[2020-11-25 08:50:35,831 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 4 states. 
[2020-11-25 08:50:35,831 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 1658 states and 1885 transitions.
[2020-11-25 08:50:35,841 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 6
[2020-11-25 08:50:35,851 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 1658 states to 1624 states and 1847 transitions.
[2020-11-25 08:50:35,851 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 744
[2020-11-25 08:50:35,852 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 744
[2020-11-25 08:50:35,852 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 1624 states and 1847 transitions.
[2020-11-25 08:50:35,855 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 08:50:35,856 INFO  L728         BuchiCegarLoop]: Abstraction has 1624 states and 1847 transitions.
[2020-11-25 08:50:35,857 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 1624 states and 1847 transitions.
[2020-11-25 08:50:35,875 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 1624 to 1128.
[2020-11-25 08:50:35,875 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 1128 states.
[2020-11-25 08:50:35,877 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 1128 states to 1128 states and 1199 transitions.
[2020-11-25 08:50:35,877 INFO  L751         BuchiCegarLoop]: Abstraction has 1128 states and 1199 transitions.
[2020-11-25 08:50:35,877 INFO  L631         BuchiCegarLoop]: Abstraction has 1128 states and 1199 transitions.
[2020-11-25 08:50:35,877 INFO  L445         BuchiCegarLoop]: ======== Iteration 3============
[2020-11-25 08:50:35,878 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 1128 states and 1199 transitions.
[2020-11-25 08:50:35,881 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 08:50:35,881 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 08:50:35,881 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 08:50:35,883 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 08:50:35,883 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_transferFrom_WXB0 := false;
[L3]                 call_transferFrom_WXB0 := false;
[L3]     CALL        call main();
[L3]                 havoc p3;
[L3]                 havoc p2;
[L3]                 havoc p1;
[L1760]              assume null == 0;
[L1761]  CALL        call this := FreshRefGenerator__success();
[L882]               havoc newRef;
[L883]               assume Alloc[newRef] == false;
[L884]               Alloc[newRef] := true;
[L885]               assume newRef != null;
[L1761]  RET         call this := FreshRefGenerator__success();
[L1762]              assume now >= 0;
[L1763]              assume DType[this] == WXB;
[L1764]              assume msgvalue_MSG == 0;
[L1765]              gas := gas - 53000;
[L1766]  CALL        call WXB_WXB(this, msgsender_MSG, msgvalue_MSG);
[L144]               havoc __exception;
[L145]               revert := false;
[L146]   COND FALSE  !(__exception)
[L167]   CALL        call WXB_WXB__success(this, msgsender_MSG, msgvalue_MSG);
[L986]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L914]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L899]               assume msgsender_MSG != null;
[L900]               Balance[this] := 0;
[L914]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L915]   COND FALSE  !(revert)
[L986]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L987]   COND FALSE  !(revert)
[L990]   CALL        call WXB_WXB_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L949]               assume msgsender_MSG != null;
[L950]               Balance[this] := 0;
[L951]               totalSupply_WXB[this] := 0;
[L952]               decimals_WXB[this] := 0;
[L953]               symbol_WXB[this] := 1199276259;
[L954]               name_WXB[this] := 1199276259;
[L955]               approach_WXB[this] := zeroRefRefintArr();
[L956]               sum_approach0[this] := 0;
[L957]               holders_WXB[this] := zeroRefintArr();
[L958]               sum_holders1[this] := 0;
[L960]               name_WXB[this] := -1225396598;
[L961]               symbol_WXB[this] := 397088534;
[L962]               decimals_WXB[this] := 18;
[L963]               __var_1 := decimals_WXB[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L964]               totalSupply_WXB[this] := nonlinearMul(100000 * 10000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936 * 100, nonlinearPow(10, decimals_WXB[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L965]               sum_holders1[this] := sum_holders1[this] - holders_WXB[this][msgsender_MSG];
[L966]               holders_WXB[this][msgsender_MSG] := totalSupply_WXB[this];
[L967]               sum_holders1[this] := sum_holders1[this] + holders_WXB[this][msgsender_MSG];
[L990]   RET         call WXB_WXB_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L991]   COND FALSE  !(revert)
[L167]   RET         call WXB_WXB__success(this, msgsender_MSG, msgvalue_MSG);
[L168]               assume !revert && gas >= 0;
[L1766]  RET         call WXB_WXB(this, msgsender_MSG, msgvalue_MSG);
[L1767]              assume !revert && gas >= 0;
[L1770]  CALL        call CorralChoice_WXB(this);
[L1663]              havoc msgsender_MSG;
[L1664]              havoc msgvalue_MSG;
[L1665]              havoc choice;
[L1666]              havoc _from_s315;
[L1667]              havoc _to_s315;
[L1668]              havoc _val_s315;
[L1669]              havoc __ret_0_transferFrom;
[L1670]              havoc _to_s213;
[L1671]              havoc _val_s213;
[L1672]              havoc __ret_0_transfer;
[L1673]              havoc _own_s139;
[L1674]              havoc __ret_0_balanceOf;
[L1675]              havoc _owner_s368;
[L1676]              havoc _spender_s368;
[L1677]              havoc __ret_0_allowance;
[L1678]              havoc _spender_s352;
[L1679]              havoc _val_s352;
[L1680]              havoc __ret_0_approve;
[L1681]              havoc __ret_0_totalSupply;
[L1682]              havoc __ret_0_decimals;
[L1683]              havoc __ret_0_symbol;
[L1684]              havoc __ret_0_name;
[L1685]              havoc tmpNow;
[L1686]              havoc gas;
[L1687]              assume gas > 4000000 && gas <= 8000000;
[L1688]              tmpNow := now;
[L1689]              havoc now;
[L1690]              assume now > tmpNow;
[L1691]              assume msgsender_MSG != null;
[L1692]              assume DType[msgsender_MSG] != ERC20;
[L1693]              assume DType[msgsender_MSG] != WXB;
[L1694]              Alloc[msgsender_MSG] := true;
[L1695]  COND TRUE   choice == 9
[L1696]              gas := gas - 21000;
[L1697]  COND TRUE   gas >= 0
[L1698]              assume _val_s315 >= 0 && _val_s315 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1699]              assume msgvalue_MSG == 0;
[L1700]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_WXB(this, msgsender_MSG, msgvalue_MSG, _from_s315, _to_s315, _val_s315);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((((p1 != _from_s315 && p1 != _to_s315) && (p2 != _from_s315 || p3 != msgsender_MSG)) && _from_s315 != _to_s315) && _val_s315 <= holders_WXB[this][_from_s315]) && _val_s315 <= approach_WXB[this][_from_s315][msgsender_MSG]) && holders_WXB[this][_to_s315] + _val_s315 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _val_s315 >= 0) && _val_s315 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && holders_WXB[this][_to_s315] >= 0) && holders_WXB[this][_to_s315] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && holders_WXB[this][_from_s315] >= 0) && holders_WXB[this][_from_s315] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && approach_WXB[this][_from_s315][msgsender_MSG] >= 0) && approach_WXB[this][_from_s315][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_WXB0 := true;
[L3]                 call_transferFrom_WXB0 := false;
[L3]                 revert := revert_hold;
[L302]               havoc __exception;
[L303]               revert := false;
[L304]   COND TRUE   __exception
[L305]               __tmp__Balance := Balance;
[L306]               __tmp__DType := DType;
[L307]               __tmp__Alloc := Alloc;
[L308]               __tmp__balance_ADDR := balance_ADDR;
[L309]               __tmp__M_Ref_int := M_Ref_int;
[L310]               __tmp__alloc_approach_WXB_lvl0 := alloc_approach_WXB_lvl0;
[L311]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L312]               __tmp__sum_approach0 := sum_approach0;
[L313]               __tmp__sum_holders1 := sum_holders1;
[L314]               __tmp__Length := Length;
[L315]               __tmp__now := now;
[L316]               __tmp__totalSupply_WXB := totalSupply_WXB;
[L317]               __tmp__decimals_WXB := decimals_WXB;
[L318]               __tmp__symbol_WXB := symbol_WXB;
[L319]               __tmp__name_WXB := name_WXB;
[L320]               __tmp__approach_WXB := approach_WXB;
[L321]               __tmp__holders_WXB := holders_WXB;
[L322]   CALL        call __ret_0_ := transferFrom~address~address~uint256_WXB__fail(this, msgsender_MSG, msgvalue_MSG, _from_s315, _to_s315, _val_s315);
[L1065]  COND TRUE   !(__tmp__holders_WXB[this][_from_s315] >= _val_s315)
[L1066]              revert := true;
[L322]   RET         call __ret_0_ := transferFrom~address~address~uint256_WXB__fail(this, msgsender_MSG, msgvalue_MSG, _from_s315, _to_s315, _val_s315);
[L323]               assume revert || gas < 0;
[L1700]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_WXB(this, msgsender_MSG, msgvalue_MSG, _from_s315, _to_s315, _val_s315);
[L1770]  RET         call CorralChoice_WXB(this);

Loop:
[L1770]  CALL       call CorralChoice_WXB(this);
[L1663]             havoc msgsender_MSG;
[L1664]             havoc msgvalue_MSG;
[L1665]             havoc choice;
[L1666]             havoc _from_s315;
[L1667]             havoc _to_s315;
[L1668]             havoc _val_s315;
[L1669]             havoc __ret_0_transferFrom;
[L1670]             havoc _to_s213;
[L1671]             havoc _val_s213;
[L1672]             havoc __ret_0_transfer;
[L1673]             havoc _own_s139;
[L1674]             havoc __ret_0_balanceOf;
[L1675]             havoc _owner_s368;
[L1676]             havoc _spender_s368;
[L1677]             havoc __ret_0_allowance;
[L1678]             havoc _spender_s352;
[L1679]             havoc _val_s352;
[L1680]             havoc __ret_0_approve;
[L1681]             havoc __ret_0_totalSupply;
[L1682]             havoc __ret_0_decimals;
[L1683]             havoc __ret_0_symbol;
[L1684]             havoc __ret_0_name;
[L1685]             havoc tmpNow;
[L1686]             havoc gas;
[L1687]             assume gas > 4000000 && gas <= 8000000;
[L1688]             tmpNow := now;
[L1689]             havoc now;
[L1690]             assume now > tmpNow;
[L1691]             assume msgsender_MSG != null;
[L1692]             assume DType[msgsender_MSG] != ERC20;
[L1693]             assume DType[msgsender_MSG] != WXB;
[L1694]             Alloc[msgsender_MSG] := true;
[L1695]  COND TRUE  choice == 9
[L1696]             gas := gas - 21000;
[L1697]  COND TRUE  gas >= 0
[L1698]             assume _val_s315 >= 0 && _val_s315 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1699]             assume msgvalue_MSG == 0;
[L1700]  CALL       call __ret_0_transferFrom := transferFrom~address~address~uint256_WXB(this, msgsender_MSG, msgvalue_MSG, _from_s315, _to_s315, _val_s315);
[L3]                revert_hold := revert;
[L3]                revert := false;
[L3]                assume (((((((((((((p1 != _from_s315 && p1 != _to_s315) && (p2 != _from_s315 || p3 != msgsender_MSG)) && _from_s315 != _to_s315) && _val_s315 <= holders_WXB[this][_from_s315]) && _val_s315 <= approach_WXB[this][_from_s315][msgsender_MSG]) && holders_WXB[this][_to_s315] + _val_s315 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _val_s315 >= 0) && _val_s315 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && holders_WXB[this][_to_s315] >= 0) && holders_WXB[this][_to_s315] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && holders_WXB[this][_from_s315] >= 0) && holders_WXB[this][_from_s315] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && approach_WXB[this][_from_s315][msgsender_MSG] >= 0) && approach_WXB[this][_from_s315][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                call_transferFrom_WXB0 := true;
[L3]                call_transferFrom_WXB0 := false;
[L3]                revert := revert_hold;
[L302]              havoc __exception;
[L303]              revert := false;
[L304]   COND TRUE  __exception
[L305]              __tmp__Balance := Balance;
[L306]              __tmp__DType := DType;
[L307]              __tmp__Alloc := Alloc;
[L308]              __tmp__balance_ADDR := balance_ADDR;
[L309]              __tmp__M_Ref_int := M_Ref_int;
[L310]              __tmp__alloc_approach_WXB_lvl0 := alloc_approach_WXB_lvl0;
[L311]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L312]              __tmp__sum_approach0 := sum_approach0;
[L313]              __tmp__sum_holders1 := sum_holders1;
[L314]              __tmp__Length := Length;
[L315]              __tmp__now := now;
[L316]              __tmp__totalSupply_WXB := totalSupply_WXB;
[L317]              __tmp__decimals_WXB := decimals_WXB;
[L318]              __tmp__symbol_WXB := symbol_WXB;
[L319]              __tmp__name_WXB := name_WXB;
[L320]              __tmp__approach_WXB := approach_WXB;
[L321]              __tmp__holders_WXB := holders_WXB;
[L322]   CALL       call __ret_0_ := transferFrom~address~address~uint256_WXB__fail(this, msgsender_MSG, msgvalue_MSG, _from_s315, _to_s315, _val_s315);
[L1065]  COND TRUE  !(__tmp__holders_WXB[this][_from_s315] >= _val_s315)
[L1066]             revert := true;
[L322]   RET        call __ret_0_ := transferFrom~address~address~uint256_WXB__fail(this, msgsender_MSG, msgvalue_MSG, _from_s315, _to_s315, _val_s315);
[L323]              assume revert || gas < 0;
[L1700]  RET        call __ret_0_transferFrom := transferFrom~address~address~uint256_WXB(this, msgsender_MSG, msgvalue_MSG, _from_s315, _to_s315, _val_s315);
[L1770]  RET        call CorralChoice_WXB(this);

[2020-11-25 08:50:35,887 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 08:50:35,887 INFO  L82        PathProgramCache]: Analyzing trace with hash 1865949752, now seen corresponding path program 1 times
[2020-11-25 08:50:35,888 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 08:50:35,903 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 08:50:35,955 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 08:50:35,955 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 08:50:35,956 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [6] imperfect sequences [] total 6
[2020-11-25 08:50:35,956 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 08:50:35,956 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 6 interpolants.
[2020-11-25 08:50:35,956 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=9, Invalid=21, Unknown=0, NotChecked=0, Total=30
[2020-11-25 08:50:35,957 INFO  L87              Difference]: Start difference. First operand 1128 states and 1199 transitions. cyclomatic complexity: 73 Second operand 6 states.
[2020-11-25 08:50:36,325 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 08:50:36,325 INFO  L93              Difference]: Finished difference Result 1268 states and 1356 transitions.
[2020-11-25 08:50:36,325 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 7 states. 
[2020-11-25 08:50:36,325 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 1268 states and 1356 transitions.
[2020-11-25 08:50:36,332 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 08:50:36,339 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 1268 states to 1268 states and 1356 transitions.
[2020-11-25 08:50:36,339 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 564
[2020-11-25 08:50:36,340 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 564
[2020-11-25 08:50:36,340 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 1268 states and 1356 transitions.
[2020-11-25 08:50:36,342 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 08:50:36,342 INFO  L728         BuchiCegarLoop]: Abstraction has 1268 states and 1356 transitions.
[2020-11-25 08:50:36,343 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 1268 states and 1356 transitions.
[2020-11-25 08:50:36,356 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 1268 to 1180.
[2020-11-25 08:50:36,356 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 1180 states.
[2020-11-25 08:50:36,359 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 1180 states to 1180 states and 1255 transitions.
[2020-11-25 08:50:36,359 INFO  L751         BuchiCegarLoop]: Abstraction has 1180 states and 1255 transitions.
[2020-11-25 08:50:36,359 INFO  L631         BuchiCegarLoop]: Abstraction has 1180 states and 1255 transitions.
[2020-11-25 08:50:36,359 INFO  L445         BuchiCegarLoop]: ======== Iteration 4============
[2020-11-25 08:50:36,359 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 1180 states and 1255 transitions.
[2020-11-25 08:50:36,362 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 08:50:36,363 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 08:50:36,363 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 08:50:36,364 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 08:50:36,364 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_transferFrom_WXB0 := false;
[L3]                 call_transferFrom_WXB0 := false;
[L3]     CALL        call main();
[L3]                 havoc p3;
[L3]                 havoc p2;
[L3]                 havoc p1;
[L1760]              assume null == 0;
[L1761]  CALL        call this := FreshRefGenerator__success();
[L882]               havoc newRef;
[L883]               assume Alloc[newRef] == false;
[L884]               Alloc[newRef] := true;
[L885]               assume newRef != null;
[L1761]  RET         call this := FreshRefGenerator__success();
[L1762]              assume now >= 0;
[L1763]              assume DType[this] == WXB;
[L1764]              assume msgvalue_MSG == 0;
[L1765]              gas := gas - 53000;
[L1766]  CALL        call WXB_WXB(this, msgsender_MSG, msgvalue_MSG);
[L144]               havoc __exception;
[L145]               revert := false;
[L146]   COND FALSE  !(__exception)
[L167]   CALL        call WXB_WXB__success(this, msgsender_MSG, msgvalue_MSG);
[L986]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L914]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L899]               assume msgsender_MSG != null;
[L900]               Balance[this] := 0;
[L914]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L915]   COND FALSE  !(revert)
[L986]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L987]   COND FALSE  !(revert)
[L990]   CALL        call WXB_WXB_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L949]               assume msgsender_MSG != null;
[L950]               Balance[this] := 0;
[L951]               totalSupply_WXB[this] := 0;
[L952]               decimals_WXB[this] := 0;
[L953]               symbol_WXB[this] := 1199276259;
[L954]               name_WXB[this] := 1199276259;
[L955]               approach_WXB[this] := zeroRefRefintArr();
[L956]               sum_approach0[this] := 0;
[L957]               holders_WXB[this] := zeroRefintArr();
[L958]               sum_holders1[this] := 0;
[L960]               name_WXB[this] := -1225396598;
[L961]               symbol_WXB[this] := 397088534;
[L962]               decimals_WXB[this] := 18;
[L963]               __var_1 := decimals_WXB[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L964]               totalSupply_WXB[this] := nonlinearMul(100000 * 10000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936 * 100, nonlinearPow(10, decimals_WXB[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L965]               sum_holders1[this] := sum_holders1[this] - holders_WXB[this][msgsender_MSG];
[L966]               holders_WXB[this][msgsender_MSG] := totalSupply_WXB[this];
[L967]               sum_holders1[this] := sum_holders1[this] + holders_WXB[this][msgsender_MSG];
[L990]   RET         call WXB_WXB_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L991]   COND FALSE  !(revert)
[L167]   RET         call WXB_WXB__success(this, msgsender_MSG, msgvalue_MSG);
[L168]               assume !revert && gas >= 0;
[L1766]  RET         call WXB_WXB(this, msgsender_MSG, msgvalue_MSG);
[L1767]              assume !revert && gas >= 0;
[L1770]  CALL        call CorralChoice_WXB(this);
[L1663]              havoc msgsender_MSG;
[L1664]              havoc msgvalue_MSG;
[L1665]              havoc choice;
[L1666]              havoc _from_s315;
[L1667]              havoc _to_s315;
[L1668]              havoc _val_s315;
[L1669]              havoc __ret_0_transferFrom;
[L1670]              havoc _to_s213;
[L1671]              havoc _val_s213;
[L1672]              havoc __ret_0_transfer;
[L1673]              havoc _own_s139;
[L1674]              havoc __ret_0_balanceOf;
[L1675]              havoc _owner_s368;
[L1676]              havoc _spender_s368;
[L1677]              havoc __ret_0_allowance;
[L1678]              havoc _spender_s352;
[L1679]              havoc _val_s352;
[L1680]              havoc __ret_0_approve;
[L1681]              havoc __ret_0_totalSupply;
[L1682]              havoc __ret_0_decimals;
[L1683]              havoc __ret_0_symbol;
[L1684]              havoc __ret_0_name;
[L1685]              havoc tmpNow;
[L1686]              havoc gas;
[L1687]              assume gas > 4000000 && gas <= 8000000;
[L1688]              tmpNow := now;
[L1689]              havoc now;
[L1690]              assume now > tmpNow;
[L1691]              assume msgsender_MSG != null;
[L1692]              assume DType[msgsender_MSG] != ERC20;
[L1693]              assume DType[msgsender_MSG] != WXB;
[L1694]              Alloc[msgsender_MSG] := true;
[L1695]  COND TRUE   choice == 9
[L1696]              gas := gas - 21000;
[L1697]  COND TRUE   gas >= 0
[L1698]              assume _val_s315 >= 0 && _val_s315 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1699]              assume msgvalue_MSG == 0;
[L1700]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_WXB(this, msgsender_MSG, msgvalue_MSG, _from_s315, _to_s315, _val_s315);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((((p1 != _from_s315 && p1 != _to_s315) && (p2 != _from_s315 || p3 != msgsender_MSG)) && _from_s315 != _to_s315) && _val_s315 <= holders_WXB[this][_from_s315]) && _val_s315 <= approach_WXB[this][_from_s315][msgsender_MSG]) && holders_WXB[this][_to_s315] + _val_s315 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _val_s315 >= 0) && _val_s315 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && holders_WXB[this][_to_s315] >= 0) && holders_WXB[this][_to_s315] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && holders_WXB[this][_from_s315] >= 0) && holders_WXB[this][_from_s315] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && approach_WXB[this][_from_s315][msgsender_MSG] >= 0) && approach_WXB[this][_from_s315][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_WXB0 := true;
[L3]                 call_transferFrom_WXB0 := false;
[L3]                 revert := revert_hold;
[L302]               havoc __exception;
[L303]               revert := false;
[L304]   COND TRUE   __exception
[L305]               __tmp__Balance := Balance;
[L306]               __tmp__DType := DType;
[L307]               __tmp__Alloc := Alloc;
[L308]               __tmp__balance_ADDR := balance_ADDR;
[L309]               __tmp__M_Ref_int := M_Ref_int;
[L310]               __tmp__alloc_approach_WXB_lvl0 := alloc_approach_WXB_lvl0;
[L311]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L312]               __tmp__sum_approach0 := sum_approach0;
[L313]               __tmp__sum_holders1 := sum_holders1;
[L314]               __tmp__Length := Length;
[L315]               __tmp__now := now;
[L316]               __tmp__totalSupply_WXB := totalSupply_WXB;
[L317]               __tmp__decimals_WXB := decimals_WXB;
[L318]               __tmp__symbol_WXB := symbol_WXB;
[L319]               __tmp__name_WXB := name_WXB;
[L320]               __tmp__approach_WXB := approach_WXB;
[L321]               __tmp__holders_WXB := holders_WXB;
[L322]   CALL        call __ret_0_ := transferFrom~address~address~uint256_WXB__fail(this, msgsender_MSG, msgvalue_MSG, _from_s315, _to_s315, _val_s315);
[L1065]  COND FALSE  !(!(__tmp__holders_WXB[this][_from_s315] >= _val_s315))
[L1069]  COND TRUE   !(__tmp__approach_WXB[this][_from_s315][msgsender_MSG] >= _val_s315)
[L1070]              revert := true;
[L322]   RET         call __ret_0_ := transferFrom~address~address~uint256_WXB__fail(this, msgsender_MSG, msgvalue_MSG, _from_s315, _to_s315, _val_s315);
[L323]               assume revert || gas < 0;
[L1700]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_WXB(this, msgsender_MSG, msgvalue_MSG, _from_s315, _to_s315, _val_s315);
[L1770]  RET         call CorralChoice_WXB(this);

Loop:
[L1770]  CALL        call CorralChoice_WXB(this);
[L1663]              havoc msgsender_MSG;
[L1664]              havoc msgvalue_MSG;
[L1665]              havoc choice;
[L1666]              havoc _from_s315;
[L1667]              havoc _to_s315;
[L1668]              havoc _val_s315;
[L1669]              havoc __ret_0_transferFrom;
[L1670]              havoc _to_s213;
[L1671]              havoc _val_s213;
[L1672]              havoc __ret_0_transfer;
[L1673]              havoc _own_s139;
[L1674]              havoc __ret_0_balanceOf;
[L1675]              havoc _owner_s368;
[L1676]              havoc _spender_s368;
[L1677]              havoc __ret_0_allowance;
[L1678]              havoc _spender_s352;
[L1679]              havoc _val_s352;
[L1680]              havoc __ret_0_approve;
[L1681]              havoc __ret_0_totalSupply;
[L1682]              havoc __ret_0_decimals;
[L1683]              havoc __ret_0_symbol;
[L1684]              havoc __ret_0_name;
[L1685]              havoc tmpNow;
[L1686]              havoc gas;
[L1687]              assume gas > 4000000 && gas <= 8000000;
[L1688]              tmpNow := now;
[L1689]              havoc now;
[L1690]              assume now > tmpNow;
[L1691]              assume msgsender_MSG != null;
[L1692]              assume DType[msgsender_MSG] != ERC20;
[L1693]              assume DType[msgsender_MSG] != WXB;
[L1694]              Alloc[msgsender_MSG] := true;
[L1695]  COND TRUE   choice == 9
[L1696]              gas := gas - 21000;
[L1697]  COND TRUE   gas >= 0
[L1698]              assume _val_s315 >= 0 && _val_s315 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1699]              assume msgvalue_MSG == 0;
[L1700]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_WXB(this, msgsender_MSG, msgvalue_MSG, _from_s315, _to_s315, _val_s315);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((((p1 != _from_s315 && p1 != _to_s315) && (p2 != _from_s315 || p3 != msgsender_MSG)) && _from_s315 != _to_s315) && _val_s315 <= holders_WXB[this][_from_s315]) && _val_s315 <= approach_WXB[this][_from_s315][msgsender_MSG]) && holders_WXB[this][_to_s315] + _val_s315 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _val_s315 >= 0) && _val_s315 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && holders_WXB[this][_to_s315] >= 0) && holders_WXB[this][_to_s315] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && holders_WXB[this][_from_s315] >= 0) && holders_WXB[this][_from_s315] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && approach_WXB[this][_from_s315][msgsender_MSG] >= 0) && approach_WXB[this][_from_s315][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_WXB0 := true;
[L3]                 call_transferFrom_WXB0 := false;
[L3]                 revert := revert_hold;
[L302]               havoc __exception;
[L303]               revert := false;
[L304]   COND TRUE   __exception
[L305]               __tmp__Balance := Balance;
[L306]               __tmp__DType := DType;
[L307]               __tmp__Alloc := Alloc;
[L308]               __tmp__balance_ADDR := balance_ADDR;
[L309]               __tmp__M_Ref_int := M_Ref_int;
[L310]               __tmp__alloc_approach_WXB_lvl0 := alloc_approach_WXB_lvl0;
[L311]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L312]               __tmp__sum_approach0 := sum_approach0;
[L313]               __tmp__sum_holders1 := sum_holders1;
[L314]               __tmp__Length := Length;
[L315]               __tmp__now := now;
[L316]               __tmp__totalSupply_WXB := totalSupply_WXB;
[L317]               __tmp__decimals_WXB := decimals_WXB;
[L318]               __tmp__symbol_WXB := symbol_WXB;
[L319]               __tmp__name_WXB := name_WXB;
[L320]               __tmp__approach_WXB := approach_WXB;
[L321]               __tmp__holders_WXB := holders_WXB;
[L322]   CALL        call __ret_0_ := transferFrom~address~address~uint256_WXB__fail(this, msgsender_MSG, msgvalue_MSG, _from_s315, _to_s315, _val_s315);
[L1065]  COND FALSE  !(!(__tmp__holders_WXB[this][_from_s315] >= _val_s315))
[L1069]  COND TRUE   !(__tmp__approach_WXB[this][_from_s315][msgsender_MSG] >= _val_s315)
[L1070]              revert := true;
[L322]   RET         call __ret_0_ := transferFrom~address~address~uint256_WXB__fail(this, msgsender_MSG, msgvalue_MSG, _from_s315, _to_s315, _val_s315);
[L323]               assume revert || gas < 0;
[L1700]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_WXB(this, msgsender_MSG, msgvalue_MSG, _from_s315, _to_s315, _val_s315);
[L1770]  RET         call CorralChoice_WXB(this);

[2020-11-25 08:50:36,367 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 08:50:36,368 INFO  L82        PathProgramCache]: Analyzing trace with hash -337919555, now seen corresponding path program 1 times
[2020-11-25 08:50:36,368 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 08:50:36,378 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 08:50:36,419 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 08:50:36,419 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 08:50:36,419 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [6] imperfect sequences [] total 6
[2020-11-25 08:50:36,419 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 08:50:36,420 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 6 interpolants.
[2020-11-25 08:50:36,420 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=9, Invalid=21, Unknown=0, NotChecked=0, Total=30
[2020-11-25 08:50:36,420 INFO  L87              Difference]: Start difference. First operand 1180 states and 1255 transitions. cyclomatic complexity: 77 Second operand 6 states.
[2020-11-25 08:50:36,786 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 08:50:36,787 INFO  L93              Difference]: Finished difference Result 1260 states and 1345 transitions.
[2020-11-25 08:50:36,787 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 7 states. 
[2020-11-25 08:50:36,787 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 1260 states and 1345 transitions.
[2020-11-25 08:50:36,792 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 08:50:36,797 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 1260 states to 1260 states and 1345 transitions.
[2020-11-25 08:50:36,797 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 560
[2020-11-25 08:50:36,798 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 560
[2020-11-25 08:50:36,798 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 1260 states and 1345 transitions.
[2020-11-25 08:50:36,799 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 08:50:36,799 INFO  L728         BuchiCegarLoop]: Abstraction has 1260 states and 1345 transitions.
[2020-11-25 08:50:36,801 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 1260 states and 1345 transitions.
[2020-11-25 08:50:36,811 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 1260 to 1180.
[2020-11-25 08:50:36,811 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 1180 states.
[2020-11-25 08:50:36,813 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 1180 states to 1180 states and 1255 transitions.
[2020-11-25 08:50:36,813 INFO  L751         BuchiCegarLoop]: Abstraction has 1180 states and 1255 transitions.
[2020-11-25 08:50:36,813 INFO  L631         BuchiCegarLoop]: Abstraction has 1180 states and 1255 transitions.
[2020-11-25 08:50:36,813 INFO  L445         BuchiCegarLoop]: ======== Iteration 5============
[2020-11-25 08:50:36,813 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 1180 states and 1255 transitions.
[2020-11-25 08:50:36,816 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 08:50:36,816 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 08:50:36,816 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 08:50:36,818 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 08:50:36,818 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_transferFrom_WXB0 := false;
[L3]                 call_transferFrom_WXB0 := false;
[L3]     CALL        call main();
[L3]                 havoc p3;
[L3]                 havoc p2;
[L3]                 havoc p1;
[L1760]              assume null == 0;
[L1761]  CALL        call this := FreshRefGenerator__success();
[L882]               havoc newRef;
[L883]               assume Alloc[newRef] == false;
[L884]               Alloc[newRef] := true;
[L885]               assume newRef != null;
[L1761]  RET         call this := FreshRefGenerator__success();
[L1762]              assume now >= 0;
[L1763]              assume DType[this] == WXB;
[L1764]              assume msgvalue_MSG == 0;
[L1765]              gas := gas - 53000;
[L1766]  CALL        call WXB_WXB(this, msgsender_MSG, msgvalue_MSG);
[L144]               havoc __exception;
[L145]               revert := false;
[L146]   COND FALSE  !(__exception)
[L167]   CALL        call WXB_WXB__success(this, msgsender_MSG, msgvalue_MSG);
[L986]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L914]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L899]               assume msgsender_MSG != null;
[L900]               Balance[this] := 0;
[L914]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L915]   COND FALSE  !(revert)
[L986]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L987]   COND FALSE  !(revert)
[L990]   CALL        call WXB_WXB_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L949]               assume msgsender_MSG != null;
[L950]               Balance[this] := 0;
[L951]               totalSupply_WXB[this] := 0;
[L952]               decimals_WXB[this] := 0;
[L953]               symbol_WXB[this] := 1199276259;
[L954]               name_WXB[this] := 1199276259;
[L955]               approach_WXB[this] := zeroRefRefintArr();
[L956]               sum_approach0[this] := 0;
[L957]               holders_WXB[this] := zeroRefintArr();
[L958]               sum_holders1[this] := 0;
[L960]               name_WXB[this] := -1225396598;
[L961]               symbol_WXB[this] := 397088534;
[L962]               decimals_WXB[this] := 18;
[L963]               __var_1 := decimals_WXB[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L964]               totalSupply_WXB[this] := nonlinearMul(100000 * 10000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936 * 100, nonlinearPow(10, decimals_WXB[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L965]               sum_holders1[this] := sum_holders1[this] - holders_WXB[this][msgsender_MSG];
[L966]               holders_WXB[this][msgsender_MSG] := totalSupply_WXB[this];
[L967]               sum_holders1[this] := sum_holders1[this] + holders_WXB[this][msgsender_MSG];
[L990]   RET         call WXB_WXB_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L991]   COND FALSE  !(revert)
[L167]   RET         call WXB_WXB__success(this, msgsender_MSG, msgvalue_MSG);
[L168]               assume !revert && gas >= 0;
[L1766]  RET         call WXB_WXB(this, msgsender_MSG, msgvalue_MSG);
[L1767]              assume !revert && gas >= 0;
[L1770]  CALL        call CorralChoice_WXB(this);
[L1663]              havoc msgsender_MSG;
[L1664]              havoc msgvalue_MSG;
[L1665]              havoc choice;
[L1666]              havoc _from_s315;
[L1667]              havoc _to_s315;
[L1668]              havoc _val_s315;
[L1669]              havoc __ret_0_transferFrom;
[L1670]              havoc _to_s213;
[L1671]              havoc _val_s213;
[L1672]              havoc __ret_0_transfer;
[L1673]              havoc _own_s139;
[L1674]              havoc __ret_0_balanceOf;
[L1675]              havoc _owner_s368;
[L1676]              havoc _spender_s368;
[L1677]              havoc __ret_0_allowance;
[L1678]              havoc _spender_s352;
[L1679]              havoc _val_s352;
[L1680]              havoc __ret_0_approve;
[L1681]              havoc __ret_0_totalSupply;
[L1682]              havoc __ret_0_decimals;
[L1683]              havoc __ret_0_symbol;
[L1684]              havoc __ret_0_name;
[L1685]              havoc tmpNow;
[L1686]              havoc gas;
[L1687]              assume gas > 4000000 && gas <= 8000000;
[L1688]              tmpNow := now;
[L1689]              havoc now;
[L1690]              assume now > tmpNow;
[L1691]              assume msgsender_MSG != null;
[L1692]              assume DType[msgsender_MSG] != ERC20;
[L1693]              assume DType[msgsender_MSG] != WXB;
[L1694]              Alloc[msgsender_MSG] := true;
[L1695]  COND TRUE   choice == 9
[L1696]              gas := gas - 21000;
[L1697]  COND TRUE   gas >= 0
[L1698]              assume _val_s315 >= 0 && _val_s315 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1699]              assume msgvalue_MSG == 0;
[L1700]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_WXB(this, msgsender_MSG, msgvalue_MSG, _from_s315, _to_s315, _val_s315);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((((p1 != _from_s315 && p1 != _to_s315) && (p2 != _from_s315 || p3 != msgsender_MSG)) && _from_s315 != _to_s315) && _val_s315 <= holders_WXB[this][_from_s315]) && _val_s315 <= approach_WXB[this][_from_s315][msgsender_MSG]) && holders_WXB[this][_to_s315] + _val_s315 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _val_s315 >= 0) && _val_s315 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && holders_WXB[this][_to_s315] >= 0) && holders_WXB[this][_to_s315] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && holders_WXB[this][_from_s315] >= 0) && holders_WXB[this][_from_s315] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && approach_WXB[this][_from_s315][msgsender_MSG] >= 0) && approach_WXB[this][_from_s315][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_WXB0 := true;
[L3]                 call_transferFrom_WXB0 := false;
[L3]                 revert := revert_hold;
[L302]               havoc __exception;
[L303]               revert := false;
[L304]   COND FALSE  !(__exception)
[L325]   CALL        call __ret_0_ := transferFrom~address~address~uint256_WXB__success(this, msgsender_MSG, msgvalue_MSG, _from_s315, _to_s315, _val_s315);
[L1088]  COND FALSE  !(!(holders_WXB[this][_from_s315] >= _val_s315))
[L1092]  COND FALSE  !(!(approach_WXB[this][_from_s315][msgsender_MSG] >= _val_s315))
[L1096]              assert _val_s315 <= holders_WXB[this][_from_s315];
[L1097]              sum_holders1[this] := sum_holders1[this] - holders_WXB[this][_from_s315];
[L1098]              holders_WXB[this][_from_s315] := (holders_WXB[this][_from_s315] - _val_s315) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1099]              sum_holders1[this] := sum_holders1[this] + holders_WXB[this][_from_s315];
[L1100]              assert _val_s315 <= approach_WXB[this][_from_s315][msgsender_MSG];
[L1101]              sum_approach0[_from_s315] := sum_approach0[_from_s315] - approach_WXB[this][_from_s315][msgsender_MSG];
[L1102]              approach_WXB[this][_from_s315][msgsender_MSG] := (approach_WXB[this][_from_s315][msgsender_MSG] - _val_s315) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1103]              sum_approach0[_from_s315] := sum_approach0[_from_s315] + approach_WXB[this][_from_s315][msgsender_MSG];
[L1104]              sum_holders1[this] := sum_holders1[this] - holders_WXB[this][_to_s315];
[L1105]              holders_WXB[this][_to_s315] := (holders_WXB[this][_to_s315] + _val_s315) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1106]              sum_holders1[this] := sum_holders1[this] + holders_WXB[this][_to_s315];
[L1107]              assert holders_WXB[this][_to_s315] >= _val_s315;
[L1108]              assert { :EventEmitted "Transfer_WXB" } true;
[L1109]              __ret_0_ := true;
[L325]   RET         call __ret_0_ := transferFrom~address~address~uint256_WXB__success(this, msgsender_MSG, msgvalue_MSG, _from_s315, _to_s315, _val_s315);
[L326]               assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !(((((((((__ret_0_ == true && holders_WXB[this][_from_s315] == old(holders_WXB[this][_from_s315]) - _val_s315) && holders_WXB[this][_to_s315] == old(holders_WXB[this][_to_s315]) + _val_s315) && approach_WXB[this][_from_s315][msgsender_MSG] == old(approach_WXB[this][_from_s315][msgsender_MSG]) - _val_s315) && totalSupply_WXB[this] == old(totalSupply_WXB[this])) && holders_WXB[this][p1] == old(holders_WXB[this][p1])) && approach_WXB[this][p2][p3] == old(approach_WXB[this][p2][p3])) && decimals_WXB[this] == old(decimals_WXB[this])) && symbol_WXB[this] == old(symbol_WXB[this])) && name_WXB[this] == old(name_WXB[this]));
[L3]                 revert := revert_hold;
[L1700]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_WXB(this, msgsender_MSG, msgvalue_MSG, _from_s315, _to_s315, _val_s315);
[L1770]  RET         call CorralChoice_WXB(this);

Loop:
[L1770]  CALL        call CorralChoice_WXB(this);
[L1663]              havoc msgsender_MSG;
[L1664]              havoc msgvalue_MSG;
[L1665]              havoc choice;
[L1666]              havoc _from_s315;
[L1667]              havoc _to_s315;
[L1668]              havoc _val_s315;
[L1669]              havoc __ret_0_transferFrom;
[L1670]              havoc _to_s213;
[L1671]              havoc _val_s213;
[L1672]              havoc __ret_0_transfer;
[L1673]              havoc _own_s139;
[L1674]              havoc __ret_0_balanceOf;
[L1675]              havoc _owner_s368;
[L1676]              havoc _spender_s368;
[L1677]              havoc __ret_0_allowance;
[L1678]              havoc _spender_s352;
[L1679]              havoc _val_s352;
[L1680]              havoc __ret_0_approve;
[L1681]              havoc __ret_0_totalSupply;
[L1682]              havoc __ret_0_decimals;
[L1683]              havoc __ret_0_symbol;
[L1684]              havoc __ret_0_name;
[L1685]              havoc tmpNow;
[L1686]              havoc gas;
[L1687]              assume gas > 4000000 && gas <= 8000000;
[L1688]              tmpNow := now;
[L1689]              havoc now;
[L1690]              assume now > tmpNow;
[L1691]              assume msgsender_MSG != null;
[L1692]              assume DType[msgsender_MSG] != ERC20;
[L1693]              assume DType[msgsender_MSG] != WXB;
[L1694]              Alloc[msgsender_MSG] := true;
[L1695]  COND TRUE   choice == 9
[L1696]              gas := gas - 21000;
[L1697]  COND TRUE   gas >= 0
[L1698]              assume _val_s315 >= 0 && _val_s315 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1699]              assume msgvalue_MSG == 0;
[L1700]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_WXB(this, msgsender_MSG, msgvalue_MSG, _from_s315, _to_s315, _val_s315);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((((p1 != _from_s315 && p1 != _to_s315) && (p2 != _from_s315 || p3 != msgsender_MSG)) && _from_s315 != _to_s315) && _val_s315 <= holders_WXB[this][_from_s315]) && _val_s315 <= approach_WXB[this][_from_s315][msgsender_MSG]) && holders_WXB[this][_to_s315] + _val_s315 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _val_s315 >= 0) && _val_s315 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && holders_WXB[this][_to_s315] >= 0) && holders_WXB[this][_to_s315] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && holders_WXB[this][_from_s315] >= 0) && holders_WXB[this][_from_s315] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && approach_WXB[this][_from_s315][msgsender_MSG] >= 0) && approach_WXB[this][_from_s315][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_WXB0 := true;
[L3]                 call_transferFrom_WXB0 := false;
[L3]                 revert := revert_hold;
[L302]               havoc __exception;
[L303]               revert := false;
[L304]   COND FALSE  !(__exception)
[L325]   CALL        call __ret_0_ := transferFrom~address~address~uint256_WXB__success(this, msgsender_MSG, msgvalue_MSG, _from_s315, _to_s315, _val_s315);
[L1088]  COND FALSE  !(!(holders_WXB[this][_from_s315] >= _val_s315))
[L1092]  COND FALSE  !(!(approach_WXB[this][_from_s315][msgsender_MSG] >= _val_s315))
[L1096]              assert _val_s315 <= holders_WXB[this][_from_s315];
[L1097]              sum_holders1[this] := sum_holders1[this] - holders_WXB[this][_from_s315];
[L1098]              holders_WXB[this][_from_s315] := (holders_WXB[this][_from_s315] - _val_s315) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1099]              sum_holders1[this] := sum_holders1[this] + holders_WXB[this][_from_s315];
[L1100]              assert _val_s315 <= approach_WXB[this][_from_s315][msgsender_MSG];
[L1101]              sum_approach0[_from_s315] := sum_approach0[_from_s315] - approach_WXB[this][_from_s315][msgsender_MSG];
[L1102]              approach_WXB[this][_from_s315][msgsender_MSG] := (approach_WXB[this][_from_s315][msgsender_MSG] - _val_s315) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1103]              sum_approach0[_from_s315] := sum_approach0[_from_s315] + approach_WXB[this][_from_s315][msgsender_MSG];
[L1104]              sum_holders1[this] := sum_holders1[this] - holders_WXB[this][_to_s315];
[L1105]              holders_WXB[this][_to_s315] := (holders_WXB[this][_to_s315] + _val_s315) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1106]              sum_holders1[this] := sum_holders1[this] + holders_WXB[this][_to_s315];
[L1107]              assert holders_WXB[this][_to_s315] >= _val_s315;
[L1108]              assert { :EventEmitted "Transfer_WXB" } true;
[L1109]              __ret_0_ := true;
[L325]   RET         call __ret_0_ := transferFrom~address~address~uint256_WXB__success(this, msgsender_MSG, msgvalue_MSG, _from_s315, _to_s315, _val_s315);
[L326]               assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !(((((((((__ret_0_ == true && holders_WXB[this][_from_s315] == old(holders_WXB[this][_from_s315]) - _val_s315) && holders_WXB[this][_to_s315] == old(holders_WXB[this][_to_s315]) + _val_s315) && approach_WXB[this][_from_s315][msgsender_MSG] == old(approach_WXB[this][_from_s315][msgsender_MSG]) - _val_s315) && totalSupply_WXB[this] == old(totalSupply_WXB[this])) && holders_WXB[this][p1] == old(holders_WXB[this][p1])) && approach_WXB[this][p2][p3] == old(approach_WXB[this][p2][p3])) && decimals_WXB[this] == old(decimals_WXB[this])) && symbol_WXB[this] == old(symbol_WXB[this])) && name_WXB[this] == old(name_WXB[this]));
[L3]                 revert := revert_hold;
[L1700]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_WXB(this, msgsender_MSG, msgvalue_MSG, _from_s315, _to_s315, _val_s315);
[L1770]  RET         call CorralChoice_WXB(this);

[2020-11-25 08:50:36,820 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 08:50:36,820 INFO  L82        PathProgramCache]: Analyzing trace with hash -1326354926, now seen corresponding path program 1 times
[2020-11-25 08:50:36,821 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 08:50:36,889 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 08:50:37,920 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 08:50:37,920 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 08:50:37,921 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [18] imperfect sequences [] total 18
[2020-11-25 08:50:37,921 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 08:50:37,921 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 19 interpolants.
[2020-11-25 08:50:37,921 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=49, Invalid=293, Unknown=0, NotChecked=0, Total=342
[2020-11-25 08:50:37,921 INFO  L87              Difference]: Start difference. First operand 1180 states and 1255 transitions. cyclomatic complexity: 77 Second operand 19 states.
[2020-11-25 08:50:40,156 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 08:50:40,156 INFO  L93              Difference]: Finished difference Result 1255 states and 1356 transitions.
[2020-11-25 08:50:40,156 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 20 states. 
[2020-11-25 08:50:40,156 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 1255 states and 1356 transitions.
[2020-11-25 08:50:40,160 INFO  L131   ngComponentsAnalysis]: Automaton has 4 accepting balls. 8
[2020-11-25 08:50:40,164 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 1255 states to 1255 states and 1356 transitions.
[2020-11-25 08:50:40,165 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 555
[2020-11-25 08:50:40,165 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 555
[2020-11-25 08:50:40,165 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 1255 states and 1356 transitions.
[2020-11-25 08:50:40,166 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 08:50:40,166 INFO  L728         BuchiCegarLoop]: Abstraction has 1255 states and 1356 transitions.
[2020-11-25 08:50:40,167 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 1255 states and 1356 transitions.
[2020-11-25 08:50:40,180 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 1255 to 1234.
[2020-11-25 08:50:40,180 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 1234 states.
[2020-11-25 08:50:40,181 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 1234 states to 1234 states and 1319 transitions.
[2020-11-25 08:50:40,181 INFO  L751         BuchiCegarLoop]: Abstraction has 1234 states and 1319 transitions.
[2020-11-25 08:50:40,181 INFO  L631         BuchiCegarLoop]: Abstraction has 1234 states and 1319 transitions.
[2020-11-25 08:50:40,181 INFO  L445         BuchiCegarLoop]: ======== Iteration 6============
[2020-11-25 08:50:40,181 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 1234 states and 1319 transitions.
[2020-11-25 08:50:40,184 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 08:50:40,184 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 08:50:40,184 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 08:50:40,185 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 08:50:40,185 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_transferFrom_WXB0 := false;
[L3]                 call_transferFrom_WXB0 := false;
[L3]     CALL        call main();
[L3]                 havoc p3;
[L3]                 havoc p2;
[L3]                 havoc p1;
[L1760]              assume null == 0;
[L1761]  CALL        call this := FreshRefGenerator__success();
[L882]               havoc newRef;
[L883]               assume Alloc[newRef] == false;
[L884]               Alloc[newRef] := true;
[L885]               assume newRef != null;
[L1761]  RET         call this := FreshRefGenerator__success();
[L1762]              assume now >= 0;
[L1763]              assume DType[this] == WXB;
[L1764]              assume msgvalue_MSG == 0;
[L1765]              gas := gas - 53000;
[L1766]  CALL        call WXB_WXB(this, msgsender_MSG, msgvalue_MSG);
[L144]               havoc __exception;
[L145]               revert := false;
[L146]   COND FALSE  !(__exception)
[L167]   CALL        call WXB_WXB__success(this, msgsender_MSG, msgvalue_MSG);
[L986]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L914]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L899]               assume msgsender_MSG != null;
[L900]               Balance[this] := 0;
[L914]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L915]   COND FALSE  !(revert)
[L986]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L987]   COND FALSE  !(revert)
[L990]   CALL        call WXB_WXB_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L949]               assume msgsender_MSG != null;
[L950]               Balance[this] := 0;
[L951]               totalSupply_WXB[this] := 0;
[L952]               decimals_WXB[this] := 0;
[L953]               symbol_WXB[this] := 1199276259;
[L954]               name_WXB[this] := 1199276259;
[L955]               approach_WXB[this] := zeroRefRefintArr();
[L956]               sum_approach0[this] := 0;
[L957]               holders_WXB[this] := zeroRefintArr();
[L958]               sum_holders1[this] := 0;
[L960]               name_WXB[this] := -1225396598;
[L961]               symbol_WXB[this] := 397088534;
[L962]               decimals_WXB[this] := 18;
[L963]               __var_1 := decimals_WXB[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L964]               totalSupply_WXB[this] := nonlinearMul(100000 * 10000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936 * 100, nonlinearPow(10, decimals_WXB[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L965]               sum_holders1[this] := sum_holders1[this] - holders_WXB[this][msgsender_MSG];
[L966]               holders_WXB[this][msgsender_MSG] := totalSupply_WXB[this];
[L967]               sum_holders1[this] := sum_holders1[this] + holders_WXB[this][msgsender_MSG];
[L990]   RET         call WXB_WXB_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L991]   COND FALSE  !(revert)
[L167]   RET         call WXB_WXB__success(this, msgsender_MSG, msgvalue_MSG);
[L168]               assume !revert && gas >= 0;
[L1766]  RET         call WXB_WXB(this, msgsender_MSG, msgvalue_MSG);
[L1767]              assume !revert && gas >= 0;
[L1770]  CALL        call CorralChoice_WXB(this);
[L1663]              havoc msgsender_MSG;
[L1664]              havoc msgvalue_MSG;
[L1665]              havoc choice;
[L1666]              havoc _from_s315;
[L1667]              havoc _to_s315;
[L1668]              havoc _val_s315;
[L1669]              havoc __ret_0_transferFrom;
[L1670]              havoc _to_s213;
[L1671]              havoc _val_s213;
[L1672]              havoc __ret_0_transfer;
[L1673]              havoc _own_s139;
[L1674]              havoc __ret_0_balanceOf;
[L1675]              havoc _owner_s368;
[L1676]              havoc _spender_s368;
[L1677]              havoc __ret_0_allowance;
[L1678]              havoc _spender_s352;
[L1679]              havoc _val_s352;
[L1680]              havoc __ret_0_approve;
[L1681]              havoc __ret_0_totalSupply;
[L1682]              havoc __ret_0_decimals;
[L1683]              havoc __ret_0_symbol;
[L1684]              havoc __ret_0_name;
[L1685]              havoc tmpNow;
[L1686]              havoc gas;
[L1687]              assume gas > 4000000 && gas <= 8000000;
[L1688]              tmpNow := now;
[L1689]              havoc now;
[L1690]              assume now > tmpNow;
[L1691]              assume msgsender_MSG != null;
[L1692]              assume DType[msgsender_MSG] != ERC20;
[L1693]              assume DType[msgsender_MSG] != WXB;
[L1694]              Alloc[msgsender_MSG] := true;
[L1695]  COND TRUE   choice == 9
[L1696]              gas := gas - 21000;
[L1697]  COND TRUE   gas >= 0
[L1698]              assume _val_s315 >= 0 && _val_s315 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1699]              assume msgvalue_MSG == 0;
[L1700]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_WXB(this, msgsender_MSG, msgvalue_MSG, _from_s315, _to_s315, _val_s315);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((((p1 != _from_s315 && p1 != _to_s315) && (p2 != _from_s315 || p3 != msgsender_MSG)) && _from_s315 != _to_s315) && _val_s315 <= holders_WXB[this][_from_s315]) && _val_s315 <= approach_WXB[this][_from_s315][msgsender_MSG]) && holders_WXB[this][_to_s315] + _val_s315 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _val_s315 >= 0) && _val_s315 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && holders_WXB[this][_to_s315] >= 0) && holders_WXB[this][_to_s315] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && holders_WXB[this][_from_s315] >= 0) && holders_WXB[this][_from_s315] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && approach_WXB[this][_from_s315][msgsender_MSG] >= 0) && approach_WXB[this][_from_s315][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_WXB0 := true;
[L3]                 call_transferFrom_WXB0 := false;
[L3]                 revert := revert_hold;
[L302]               havoc __exception;
[L303]               revert := false;
[L304]   COND TRUE   __exception
[L305]               __tmp__Balance := Balance;
[L306]               __tmp__DType := DType;
[L307]               __tmp__Alloc := Alloc;
[L308]               __tmp__balance_ADDR := balance_ADDR;
[L309]               __tmp__M_Ref_int := M_Ref_int;
[L310]               __tmp__alloc_approach_WXB_lvl0 := alloc_approach_WXB_lvl0;
[L311]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L312]               __tmp__sum_approach0 := sum_approach0;
[L313]               __tmp__sum_holders1 := sum_holders1;
[L314]               __tmp__Length := Length;
[L315]               __tmp__now := now;
[L316]               __tmp__totalSupply_WXB := totalSupply_WXB;
[L317]               __tmp__decimals_WXB := decimals_WXB;
[L318]               __tmp__symbol_WXB := symbol_WXB;
[L319]               __tmp__name_WXB := name_WXB;
[L320]               __tmp__approach_WXB := approach_WXB;
[L321]               __tmp__holders_WXB := holders_WXB;
[L322]   CALL        call __ret_0_ := transferFrom~address~address~uint256_WXB__fail(this, msgsender_MSG, msgvalue_MSG, _from_s315, _to_s315, _val_s315);
[L1065]  COND FALSE  !(!(__tmp__holders_WXB[this][_from_s315] >= _val_s315))
[L1069]  COND FALSE  !(!(__tmp__approach_WXB[this][_from_s315][msgsender_MSG] >= _val_s315))
[L1073]              __tmp__sum_holders1[this] := __tmp__sum_holders1[this] - __tmp__holders_WXB[this][_from_s315];
[L1074]              __tmp__holders_WXB[this][_from_s315] := (__tmp__holders_WXB[this][_from_s315] - _val_s315) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1075]              __tmp__sum_holders1[this] := __tmp__sum_holders1[this] + __tmp__holders_WXB[this][_from_s315];
[L1076]              __tmp__sum_approach0[_from_s315] := __tmp__sum_approach0[_from_s315] - __tmp__approach_WXB[this][_from_s315][msgsender_MSG];
[L1077]              __tmp__approach_WXB[this][_from_s315][msgsender_MSG] := (__tmp__approach_WXB[this][_from_s315][msgsender_MSG] - _val_s315) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1078]              __tmp__sum_approach0[_from_s315] := __tmp__sum_approach0[_from_s315] + __tmp__approach_WXB[this][_from_s315][msgsender_MSG];
[L1079]              __tmp__sum_holders1[this] := __tmp__sum_holders1[this] - __tmp__holders_WXB[this][_to_s315];
[L1080]              __tmp__holders_WXB[this][_to_s315] := (__tmp__holders_WXB[this][_to_s315] + _val_s315) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1081]              __tmp__sum_holders1[this] := __tmp__sum_holders1[this] + __tmp__holders_WXB[this][_to_s315];
[L1082]              __ret_0_ := true;
[L322]   RET         call __ret_0_ := transferFrom~address~address~uint256_WXB__fail(this, msgsender_MSG, msgvalue_MSG, _from_s315, _to_s315, _val_s315);
[L323]               assume revert || gas < 0;
[L1700]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_WXB(this, msgsender_MSG, msgvalue_MSG, _from_s315, _to_s315, _val_s315);
[L1770]  RET         call CorralChoice_WXB(this);

Loop:
[L1770]  CALL        call CorralChoice_WXB(this);
[L1663]              havoc msgsender_MSG;
[L1664]              havoc msgvalue_MSG;
[L1665]              havoc choice;
[L1666]              havoc _from_s315;
[L1667]              havoc _to_s315;
[L1668]              havoc _val_s315;
[L1669]              havoc __ret_0_transferFrom;
[L1670]              havoc _to_s213;
[L1671]              havoc _val_s213;
[L1672]              havoc __ret_0_transfer;
[L1673]              havoc _own_s139;
[L1674]              havoc __ret_0_balanceOf;
[L1675]              havoc _owner_s368;
[L1676]              havoc _spender_s368;
[L1677]              havoc __ret_0_allowance;
[L1678]              havoc _spender_s352;
[L1679]              havoc _val_s352;
[L1680]              havoc __ret_0_approve;
[L1681]              havoc __ret_0_totalSupply;
[L1682]              havoc __ret_0_decimals;
[L1683]              havoc __ret_0_symbol;
[L1684]              havoc __ret_0_name;
[L1685]              havoc tmpNow;
[L1686]              havoc gas;
[L1687]              assume gas > 4000000 && gas <= 8000000;
[L1688]              tmpNow := now;
[L1689]              havoc now;
[L1690]              assume now > tmpNow;
[L1691]              assume msgsender_MSG != null;
[L1692]              assume DType[msgsender_MSG] != ERC20;
[L1693]              assume DType[msgsender_MSG] != WXB;
[L1694]              Alloc[msgsender_MSG] := true;
[L1695]  COND TRUE   choice == 9
[L1696]              gas := gas - 21000;
[L1697]  COND TRUE   gas >= 0
[L1698]              assume _val_s315 >= 0 && _val_s315 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1699]              assume msgvalue_MSG == 0;
[L1700]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_WXB(this, msgsender_MSG, msgvalue_MSG, _from_s315, _to_s315, _val_s315);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((((p1 != _from_s315 && p1 != _to_s315) && (p2 != _from_s315 || p3 != msgsender_MSG)) && _from_s315 != _to_s315) && _val_s315 <= holders_WXB[this][_from_s315]) && _val_s315 <= approach_WXB[this][_from_s315][msgsender_MSG]) && holders_WXB[this][_to_s315] + _val_s315 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _val_s315 >= 0) && _val_s315 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && holders_WXB[this][_to_s315] >= 0) && holders_WXB[this][_to_s315] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && holders_WXB[this][_from_s315] >= 0) && holders_WXB[this][_from_s315] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && approach_WXB[this][_from_s315][msgsender_MSG] >= 0) && approach_WXB[this][_from_s315][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_WXB0 := true;
[L3]                 call_transferFrom_WXB0 := false;
[L3]                 revert := revert_hold;
[L302]               havoc __exception;
[L303]               revert := false;
[L304]   COND TRUE   __exception
[L305]               __tmp__Balance := Balance;
[L306]               __tmp__DType := DType;
[L307]               __tmp__Alloc := Alloc;
[L308]               __tmp__balance_ADDR := balance_ADDR;
[L309]               __tmp__M_Ref_int := M_Ref_int;
[L310]               __tmp__alloc_approach_WXB_lvl0 := alloc_approach_WXB_lvl0;
[L311]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L312]               __tmp__sum_approach0 := sum_approach0;
[L313]               __tmp__sum_holders1 := sum_holders1;
[L314]               __tmp__Length := Length;
[L315]               __tmp__now := now;
[L316]               __tmp__totalSupply_WXB := totalSupply_WXB;
[L317]               __tmp__decimals_WXB := decimals_WXB;
[L318]               __tmp__symbol_WXB := symbol_WXB;
[L319]               __tmp__name_WXB := name_WXB;
[L320]               __tmp__approach_WXB := approach_WXB;
[L321]               __tmp__holders_WXB := holders_WXB;
[L322]   CALL        call __ret_0_ := transferFrom~address~address~uint256_WXB__fail(this, msgsender_MSG, msgvalue_MSG, _from_s315, _to_s315, _val_s315);
[L1065]  COND FALSE  !(!(__tmp__holders_WXB[this][_from_s315] >= _val_s315))
[L1069]  COND FALSE  !(!(__tmp__approach_WXB[this][_from_s315][msgsender_MSG] >= _val_s315))
[L1073]              __tmp__sum_holders1[this] := __tmp__sum_holders1[this] - __tmp__holders_WXB[this][_from_s315];
[L1074]              __tmp__holders_WXB[this][_from_s315] := (__tmp__holders_WXB[this][_from_s315] - _val_s315) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1075]              __tmp__sum_holders1[this] := __tmp__sum_holders1[this] + __tmp__holders_WXB[this][_from_s315];
[L1076]              __tmp__sum_approach0[_from_s315] := __tmp__sum_approach0[_from_s315] - __tmp__approach_WXB[this][_from_s315][msgsender_MSG];
[L1077]              __tmp__approach_WXB[this][_from_s315][msgsender_MSG] := (__tmp__approach_WXB[this][_from_s315][msgsender_MSG] - _val_s315) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1078]              __tmp__sum_approach0[_from_s315] := __tmp__sum_approach0[_from_s315] + __tmp__approach_WXB[this][_from_s315][msgsender_MSG];
[L1079]              __tmp__sum_holders1[this] := __tmp__sum_holders1[this] - __tmp__holders_WXB[this][_to_s315];
[L1080]              __tmp__holders_WXB[this][_to_s315] := (__tmp__holders_WXB[this][_to_s315] + _val_s315) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1081]              __tmp__sum_holders1[this] := __tmp__sum_holders1[this] + __tmp__holders_WXB[this][_to_s315];
[L1082]              __ret_0_ := true;
[L322]   RET         call __ret_0_ := transferFrom~address~address~uint256_WXB__fail(this, msgsender_MSG, msgvalue_MSG, _from_s315, _to_s315, _val_s315);
[L323]               assume revert || gas < 0;
[L1700]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_WXB(this, msgsender_MSG, msgvalue_MSG, _from_s315, _to_s315, _val_s315);
[L1770]  RET         call CorralChoice_WXB(this);

[2020-11-25 08:50:40,187 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 08:50:40,187 INFO  L82        PathProgramCache]: Analyzing trace with hash -964326186, now seen corresponding path program 1 times
[2020-11-25 08:50:40,188 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 08:50:40,193 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 08:50:40,211 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 08:50:40,211 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 08:50:40,211 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [6] imperfect sequences [] total 6
[2020-11-25 08:50:40,211 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 08:50:40,211 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 6 interpolants.
[2020-11-25 08:50:40,211 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=10, Invalid=20, Unknown=0, NotChecked=0, Total=30
[2020-11-25 08:50:40,211 INFO  L87              Difference]: Start difference. First operand 1234 states and 1319 transitions. cyclomatic complexity: 89 Second operand 6 states.
[2020-11-25 08:50:40,327 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 08:50:40,327 INFO  L93              Difference]: Finished difference Result 1604 states and 1786 transitions.
[2020-11-25 08:50:40,327 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 10 states. 
[2020-11-25 08:50:40,327 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 1604 states and 1786 transitions.
[2020-11-25 08:50:40,332 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 8
[2020-11-25 08:50:40,336 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 1604 states to 1147 states and 1326 transitions.
[2020-11-25 08:50:40,336 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 532
[2020-11-25 08:50:40,336 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 532
[2020-11-25 08:50:40,337 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 1147 states and 1326 transitions.
[2020-11-25 08:50:40,338 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 08:50:40,338 INFO  L728         BuchiCegarLoop]: Abstraction has 1147 states and 1326 transitions.
[2020-11-25 08:50:40,339 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 1147 states and 1326 transitions.
[2020-11-25 08:50:40,348 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 1147 to 782.
[2020-11-25 08:50:40,348 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 782 states.
[2020-11-25 08:50:40,349 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 782 states to 782 states and 839 transitions.
[2020-11-25 08:50:40,349 INFO  L751         BuchiCegarLoop]: Abstraction has 782 states and 839 transitions.
[2020-11-25 08:50:40,349 INFO  L631         BuchiCegarLoop]: Abstraction has 782 states and 839 transitions.
[2020-11-25 08:50:40,349 INFO  L445         BuchiCegarLoop]: ======== Iteration 7============
[2020-11-25 08:50:40,349 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 782 states and 839 transitions.
[2020-11-25 08:50:40,350 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 08:50:40,350 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 08:50:40,350 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 08:50:40,351 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 08:50:40,351 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_transferFrom_WXB0 := false;
[L3]                 call_transferFrom_WXB0 := false;
[L3]     CALL        call main();
[L3]                 havoc p3;
[L3]                 havoc p2;
[L3]                 havoc p1;
[L1760]              assume null == 0;
[L1761]  CALL        call this := FreshRefGenerator__success();
[L882]               havoc newRef;
[L883]               assume Alloc[newRef] == false;
[L884]               Alloc[newRef] := true;
[L885]               assume newRef != null;
[L1761]  RET         call this := FreshRefGenerator__success();
[L1762]              assume now >= 0;
[L1763]              assume DType[this] == WXB;
[L1764]              assume msgvalue_MSG == 0;
[L1765]              gas := gas - 53000;
[L1766]  CALL        call WXB_WXB(this, msgsender_MSG, msgvalue_MSG);
[L144]               havoc __exception;
[L145]               revert := false;
[L146]   COND FALSE  !(__exception)
[L167]   CALL        call WXB_WXB__success(this, msgsender_MSG, msgvalue_MSG);
[L986]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L914]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L899]               assume msgsender_MSG != null;
[L900]               Balance[this] := 0;
[L914]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L915]   COND FALSE  !(revert)
[L986]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L987]   COND FALSE  !(revert)
[L990]   CALL        call WXB_WXB_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L949]               assume msgsender_MSG != null;
[L950]               Balance[this] := 0;
[L951]               totalSupply_WXB[this] := 0;
[L952]               decimals_WXB[this] := 0;
[L953]               symbol_WXB[this] := 1199276259;
[L954]               name_WXB[this] := 1199276259;
[L955]               approach_WXB[this] := zeroRefRefintArr();
[L956]               sum_approach0[this] := 0;
[L957]               holders_WXB[this] := zeroRefintArr();
[L958]               sum_holders1[this] := 0;
[L960]               name_WXB[this] := -1225396598;
[L961]               symbol_WXB[this] := 397088534;
[L962]               decimals_WXB[this] := 18;
[L963]               __var_1 := decimals_WXB[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L964]               totalSupply_WXB[this] := nonlinearMul(100000 * 10000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936 * 100, nonlinearPow(10, decimals_WXB[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L965]               sum_holders1[this] := sum_holders1[this] - holders_WXB[this][msgsender_MSG];
[L966]               holders_WXB[this][msgsender_MSG] := totalSupply_WXB[this];
[L967]               sum_holders1[this] := sum_holders1[this] + holders_WXB[this][msgsender_MSG];
[L990]   RET         call WXB_WXB_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L991]   COND FALSE  !(revert)
[L167]   RET         call WXB_WXB__success(this, msgsender_MSG, msgvalue_MSG);
[L168]               assume !revert && gas >= 0;
[L1766]  RET         call WXB_WXB(this, msgsender_MSG, msgvalue_MSG);
[L1767]              assume !revert && gas >= 0;
[L1770]  CALL        call CorralChoice_WXB(this);
[L1663]              havoc msgsender_MSG;
[L1664]              havoc msgvalue_MSG;
[L1665]              havoc choice;
[L1666]              havoc _from_s315;
[L1667]              havoc _to_s315;
[L1668]              havoc _val_s315;
[L1669]              havoc __ret_0_transferFrom;
[L1670]              havoc _to_s213;
[L1671]              havoc _val_s213;
[L1672]              havoc __ret_0_transfer;
[L1673]              havoc _own_s139;
[L1674]              havoc __ret_0_balanceOf;
[L1675]              havoc _owner_s368;
[L1676]              havoc _spender_s368;
[L1677]              havoc __ret_0_allowance;
[L1678]              havoc _spender_s352;
[L1679]              havoc _val_s352;
[L1680]              havoc __ret_0_approve;
[L1681]              havoc __ret_0_totalSupply;
[L1682]              havoc __ret_0_decimals;
[L1683]              havoc __ret_0_symbol;
[L1684]              havoc __ret_0_name;
[L1685]              havoc tmpNow;
[L1686]              havoc gas;
[L1687]              assume gas > 4000000 && gas <= 8000000;
[L1688]              tmpNow := now;
[L1689]              havoc now;
[L1690]              assume now > tmpNow;
[L1691]              assume msgsender_MSG != null;
[L1692]              assume DType[msgsender_MSG] != ERC20;
[L1693]              assume DType[msgsender_MSG] != WXB;
[L1694]              Alloc[msgsender_MSG] := true;
[L1695]  COND FALSE  !(choice == 9)
[L1702]  COND FALSE  !(choice == 8)
[L1709]  COND FALSE  !(choice == 7)
[L1715]  COND FALSE  !(choice == 6)
[L1721]  COND TRUE   choice == 5
[L1722]              gas := gas - 21000;
[L1723]  COND TRUE   gas >= 0
[L1724]              assume _val_s352 >= 0 && _val_s352 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1725]              assume msgvalue_MSG == 0;
[L1726]  CALL        call __ret_0_approve := approve~address~uint256_WXB(this, msgsender_MSG, msgvalue_MSG, _spender_s352, _val_s352);
[L354]               havoc __exception;
[L355]               revert := false;
[L356]   COND FALSE  !(__exception)
[L377]   CALL        call __ret_0_ := approve~address~uint256_WXB__success(this, msgsender_MSG, msgvalue_MSG, _spender_s352, _val_s352);
[L1128]  COND FALSE  !(!(holders_WXB[this][msgsender_MSG] >= _val_s352))
[L1132]              sum_approach0[msgsender_MSG] := sum_approach0[msgsender_MSG] - approach_WXB[this][msgsender_MSG][_spender_s352];
[L1133]              approach_WXB[this][msgsender_MSG][_spender_s352] := _val_s352;
[L1134]              sum_approach0[msgsender_MSG] := sum_approach0[msgsender_MSG] + approach_WXB[this][msgsender_MSG][_spender_s352];
[L1135]              assert { :EventEmitted "Approval_WXB" } true;
[L1136]              __ret_0_ := true;
[L377]   RET         call __ret_0_ := approve~address~uint256_WXB__success(this, msgsender_MSG, msgvalue_MSG, _spender_s352, _val_s352);
[L378]               assume !revert && gas >= 0;
[L1726]  RET         call __ret_0_approve := approve~address~uint256_WXB(this, msgsender_MSG, msgvalue_MSG, _spender_s352, _val_s352);
[L1770]  RET         call CorralChoice_WXB(this);
[L1770]  CALL        call CorralChoice_WXB(this);
[L1663]              havoc msgsender_MSG;
[L1664]              havoc msgvalue_MSG;
[L1665]              havoc choice;
[L1666]              havoc _from_s315;
[L1667]              havoc _to_s315;
[L1668]              havoc _val_s315;
[L1669]              havoc __ret_0_transferFrom;
[L1670]              havoc _to_s213;
[L1671]              havoc _val_s213;
[L1672]              havoc __ret_0_transfer;
[L1673]              havoc _own_s139;
[L1674]              havoc __ret_0_balanceOf;
[L1675]              havoc _owner_s368;
[L1676]              havoc _spender_s368;
[L1677]              havoc __ret_0_allowance;
[L1678]              havoc _spender_s352;
[L1679]              havoc _val_s352;
[L1680]              havoc __ret_0_approve;
[L1681]              havoc __ret_0_totalSupply;
[L1682]              havoc __ret_0_decimals;
[L1683]              havoc __ret_0_symbol;
[L1684]              havoc __ret_0_name;
[L1685]              havoc tmpNow;
[L1686]              havoc gas;
[L1687]              assume gas > 4000000 && gas <= 8000000;
[L1688]              tmpNow := now;
[L1689]              havoc now;
[L1690]              assume now > tmpNow;
[L1691]              assume msgsender_MSG != null;
[L1692]              assume DType[msgsender_MSG] != ERC20;
[L1693]              assume DType[msgsender_MSG] != WXB;
[L1694]              Alloc[msgsender_MSG] := true;
[L1695]  COND TRUE   choice == 9
[L1696]              gas := gas - 21000;
[L1697]  COND TRUE   gas >= 0
[L1698]              assume _val_s315 >= 0 && _val_s315 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1699]              assume msgvalue_MSG == 0;
[L1700]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_WXB(this, msgsender_MSG, msgvalue_MSG, _from_s315, _to_s315, _val_s315);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((((p1 != _from_s315 && p1 != _to_s315) && (p2 != _from_s315 || p3 != msgsender_MSG)) && _from_s315 != _to_s315) && _val_s315 <= holders_WXB[this][_from_s315]) && _val_s315 <= approach_WXB[this][_from_s315][msgsender_MSG]) && holders_WXB[this][_to_s315] + _val_s315 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _val_s315 >= 0) && _val_s315 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && holders_WXB[this][_to_s315] >= 0) && holders_WXB[this][_to_s315] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && holders_WXB[this][_from_s315] >= 0) && holders_WXB[this][_from_s315] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && approach_WXB[this][_from_s315][msgsender_MSG] >= 0) && approach_WXB[this][_from_s315][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_WXB0 := true;
[L3]                 call_transferFrom_WXB0 := false;
[L3]                 revert := revert_hold;
[L302]               havoc __exception;
[L303]               revert := false;
[L304]   COND FALSE  !(__exception)
[L325]   CALL        call __ret_0_ := transferFrom~address~address~uint256_WXB__success(this, msgsender_MSG, msgvalue_MSG, _from_s315, _to_s315, _val_s315);
[L1088]  COND FALSE  !(!(holders_WXB[this][_from_s315] >= _val_s315))
[L1092]  COND FALSE  !(!(approach_WXB[this][_from_s315][msgsender_MSG] >= _val_s315))
[L1096]              assert _val_s315 <= holders_WXB[this][_from_s315];
[L1097]              sum_holders1[this] := sum_holders1[this] - holders_WXB[this][_from_s315];
[L1098]              holders_WXB[this][_from_s315] := (holders_WXB[this][_from_s315] - _val_s315) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1099]              sum_holders1[this] := sum_holders1[this] + holders_WXB[this][_from_s315];
[L1100]              assert _val_s315 <= approach_WXB[this][_from_s315][msgsender_MSG];
[L1101]              sum_approach0[_from_s315] := sum_approach0[_from_s315] - approach_WXB[this][_from_s315][msgsender_MSG];
[L1102]              approach_WXB[this][_from_s315][msgsender_MSG] := (approach_WXB[this][_from_s315][msgsender_MSG] - _val_s315) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1103]              sum_approach0[_from_s315] := sum_approach0[_from_s315] + approach_WXB[this][_from_s315][msgsender_MSG];
[L1104]              sum_holders1[this] := sum_holders1[this] - holders_WXB[this][_to_s315];
[L1105]              holders_WXB[this][_to_s315] := (holders_WXB[this][_to_s315] + _val_s315) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1106]              sum_holders1[this] := sum_holders1[this] + holders_WXB[this][_to_s315];
[L1107]              assert holders_WXB[this][_to_s315] >= _val_s315;
[L1108]              assert { :EventEmitted "Transfer_WXB" } true;
[L1109]              __ret_0_ := true;
[L325]   RET         call __ret_0_ := transferFrom~address~address~uint256_WXB__success(this, msgsender_MSG, msgvalue_MSG, _from_s315, _to_s315, _val_s315);
[L326]               assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !(((((((((__ret_0_ == true && holders_WXB[this][_from_s315] == old(holders_WXB[this][_from_s315]) - _val_s315) && holders_WXB[this][_to_s315] == old(holders_WXB[this][_to_s315]) + _val_s315) && approach_WXB[this][_from_s315][msgsender_MSG] == old(approach_WXB[this][_from_s315][msgsender_MSG]) - _val_s315) && totalSupply_WXB[this] == old(totalSupply_WXB[this])) && holders_WXB[this][p1] == old(holders_WXB[this][p1])) && approach_WXB[this][p2][p3] == old(approach_WXB[this][p2][p3])) && decimals_WXB[this] == old(decimals_WXB[this])) && symbol_WXB[this] == old(symbol_WXB[this])) && name_WXB[this] == old(name_WXB[this]));
[L3]                 revert := revert_hold;
[L1700]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_WXB(this, msgsender_MSG, msgvalue_MSG, _from_s315, _to_s315, _val_s315);
[L1770]  RET         call CorralChoice_WXB(this);

Loop:
[L1770]  CALL        call CorralChoice_WXB(this);
[L1663]              havoc msgsender_MSG;
[L1664]              havoc msgvalue_MSG;
[L1665]              havoc choice;
[L1666]              havoc _from_s315;
[L1667]              havoc _to_s315;
[L1668]              havoc _val_s315;
[L1669]              havoc __ret_0_transferFrom;
[L1670]              havoc _to_s213;
[L1671]              havoc _val_s213;
[L1672]              havoc __ret_0_transfer;
[L1673]              havoc _own_s139;
[L1674]              havoc __ret_0_balanceOf;
[L1675]              havoc _owner_s368;
[L1676]              havoc _spender_s368;
[L1677]              havoc __ret_0_allowance;
[L1678]              havoc _spender_s352;
[L1679]              havoc _val_s352;
[L1680]              havoc __ret_0_approve;
[L1681]              havoc __ret_0_totalSupply;
[L1682]              havoc __ret_0_decimals;
[L1683]              havoc __ret_0_symbol;
[L1684]              havoc __ret_0_name;
[L1685]              havoc tmpNow;
[L1686]              havoc gas;
[L1687]              assume gas > 4000000 && gas <= 8000000;
[L1688]              tmpNow := now;
[L1689]              havoc now;
[L1690]              assume now > tmpNow;
[L1691]              assume msgsender_MSG != null;
[L1692]              assume DType[msgsender_MSG] != ERC20;
[L1693]              assume DType[msgsender_MSG] != WXB;
[L1694]              Alloc[msgsender_MSG] := true;
[L1695]  COND TRUE   choice == 9
[L1696]              gas := gas - 21000;
[L1697]  COND FALSE  !(gas >= 0)
[L1770]  RET         call CorralChoice_WXB(this);

[2020-11-25 08:50:40,353 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 08:50:40,353 INFO  L82        PathProgramCache]: Analyzing trace with hash 1761434577, now seen corresponding path program 1 times
[2020-11-25 08:50:40,354 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 08:50:40,434 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 08:50:40,844 INFO  L134       CoverageAnalysis]: Checked inductivity of 35 backedges. 0 proven. 1 refuted. 0 times theorem prover too weak. 34 trivial. 0 not checked.
[2020-11-25 08:50:40,844 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 08:50:40,844 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [21] total 21
[2020-11-25 08:50:40,845 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 08:50:40,845 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 22 interpolants.
[2020-11-25 08:50:40,845 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=62, Invalid=400, Unknown=0, NotChecked=0, Total=462
[2020-11-25 08:50:40,845 INFO  L87              Difference]: Start difference. First operand 782 states and 839 transitions. cyclomatic complexity: 60 Second operand 22 states.
[2020-11-25 08:50:42,391 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 08:50:42,391 INFO  L93              Difference]: Finished difference Result 915 states and 1020 transitions.
[2020-11-25 08:50:42,392 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 25 states. 
[2020-11-25 08:50:42,392 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 915 states and 1020 transitions.
[2020-11-25 08:50:42,394 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 08:50:42,396 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 915 states to 915 states and 1020 transitions.
[2020-11-25 08:50:42,396 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 465
[2020-11-25 08:50:42,396 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 465
[2020-11-25 08:50:42,396 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 915 states and 1020 transitions.
[2020-11-25 08:50:42,397 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 08:50:42,397 INFO  L728         BuchiCegarLoop]: Abstraction has 915 states and 1020 transitions.
[2020-11-25 08:50:42,398 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 915 states and 1020 transitions.
[2020-11-25 08:50:42,405 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 915 to 884.
[2020-11-25 08:50:42,405 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 884 states.
[2020-11-25 08:50:42,406 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 884 states to 884 states and 980 transitions.
[2020-11-25 08:50:42,406 INFO  L751         BuchiCegarLoop]: Abstraction has 884 states and 980 transitions.
[2020-11-25 08:50:42,406 INFO  L631         BuchiCegarLoop]: Abstraction has 884 states and 980 transitions.
[2020-11-25 08:50:42,406 INFO  L445         BuchiCegarLoop]: ======== Iteration 8============
[2020-11-25 08:50:42,406 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 884 states and 980 transitions.
[2020-11-25 08:50:42,408 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 08:50:42,408 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 08:50:42,408 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 08:50:42,409 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 08:50:42,409 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_transferFrom_WXB0 := false;
[L3]                 call_transferFrom_WXB0 := false;
[L3]     CALL        call main();
[L3]                 havoc p3;
[L3]                 havoc p2;
[L3]                 havoc p1;
[L1760]              assume null == 0;
[L1761]  CALL        call this := FreshRefGenerator__success();
[L882]               havoc newRef;
[L883]               assume Alloc[newRef] == false;
[L884]               Alloc[newRef] := true;
[L885]               assume newRef != null;
[L1761]  RET         call this := FreshRefGenerator__success();
[L1762]              assume now >= 0;
[L1763]              assume DType[this] == WXB;
[L1764]              assume msgvalue_MSG == 0;
[L1765]              gas := gas - 53000;
[L1766]  CALL        call WXB_WXB(this, msgsender_MSG, msgvalue_MSG);
[L144]               havoc __exception;
[L145]               revert := false;
[L146]   COND FALSE  !(__exception)
[L167]   CALL        call WXB_WXB__success(this, msgsender_MSG, msgvalue_MSG);
[L986]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L914]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L899]               assume msgsender_MSG != null;
[L900]               Balance[this] := 0;
[L914]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L915]   COND FALSE  !(revert)
[L986]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L987]   COND FALSE  !(revert)
[L990]   CALL        call WXB_WXB_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L949]               assume msgsender_MSG != null;
[L950]               Balance[this] := 0;
[L951]               totalSupply_WXB[this] := 0;
[L952]               decimals_WXB[this] := 0;
[L953]               symbol_WXB[this] := 1199276259;
[L954]               name_WXB[this] := 1199276259;
[L955]               approach_WXB[this] := zeroRefRefintArr();
[L956]               sum_approach0[this] := 0;
[L957]               holders_WXB[this] := zeroRefintArr();
[L958]               sum_holders1[this] := 0;
[L960]               name_WXB[this] := -1225396598;
[L961]               symbol_WXB[this] := 397088534;
[L962]               decimals_WXB[this] := 18;
[L963]               __var_1 := decimals_WXB[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L964]               totalSupply_WXB[this] := nonlinearMul(100000 * 10000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936 * 100, nonlinearPow(10, decimals_WXB[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L965]               sum_holders1[this] := sum_holders1[this] - holders_WXB[this][msgsender_MSG];
[L966]               holders_WXB[this][msgsender_MSG] := totalSupply_WXB[this];
[L967]               sum_holders1[this] := sum_holders1[this] + holders_WXB[this][msgsender_MSG];
[L990]   RET         call WXB_WXB_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L991]   COND FALSE  !(revert)
[L167]   RET         call WXB_WXB__success(this, msgsender_MSG, msgvalue_MSG);
[L168]               assume !revert && gas >= 0;
[L1766]  RET         call WXB_WXB(this, msgsender_MSG, msgvalue_MSG);
[L1767]              assume !revert && gas >= 0;
[L1770]  CALL        call CorralChoice_WXB(this);
[L1663]              havoc msgsender_MSG;
[L1664]              havoc msgvalue_MSG;
[L1665]              havoc choice;
[L1666]              havoc _from_s315;
[L1667]              havoc _to_s315;
[L1668]              havoc _val_s315;
[L1669]              havoc __ret_0_transferFrom;
[L1670]              havoc _to_s213;
[L1671]              havoc _val_s213;
[L1672]              havoc __ret_0_transfer;
[L1673]              havoc _own_s139;
[L1674]              havoc __ret_0_balanceOf;
[L1675]              havoc _owner_s368;
[L1676]              havoc _spender_s368;
[L1677]              havoc __ret_0_allowance;
[L1678]              havoc _spender_s352;
[L1679]              havoc _val_s352;
[L1680]              havoc __ret_0_approve;
[L1681]              havoc __ret_0_totalSupply;
[L1682]              havoc __ret_0_decimals;
[L1683]              havoc __ret_0_symbol;
[L1684]              havoc __ret_0_name;
[L1685]              havoc tmpNow;
[L1686]              havoc gas;
[L1687]              assume gas > 4000000 && gas <= 8000000;
[L1688]              tmpNow := now;
[L1689]              havoc now;
[L1690]              assume now > tmpNow;
[L1691]              assume msgsender_MSG != null;
[L1692]              assume DType[msgsender_MSG] != ERC20;
[L1693]              assume DType[msgsender_MSG] != WXB;
[L1694]              Alloc[msgsender_MSG] := true;
[L1695]  COND TRUE   choice == 9
[L1696]              gas := gas - 21000;
[L1697]  COND TRUE   gas >= 0
[L1698]              assume _val_s315 >= 0 && _val_s315 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1699]              assume msgvalue_MSG == 0;
[L1700]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_WXB(this, msgsender_MSG, msgvalue_MSG, _from_s315, _to_s315, _val_s315);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !((((((((((((((p1 != _from_s315 && p1 != _to_s315) && (p2 != _from_s315 || p3 != msgsender_MSG)) && _from_s315 != _to_s315) && _val_s315 <= holders_WXB[this][_from_s315]) && _val_s315 <= approach_WXB[this][_from_s315][msgsender_MSG]) && holders_WXB[this][_to_s315] + _val_s315 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _val_s315 >= 0) && _val_s315 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && holders_WXB[this][_to_s315] >= 0) && holders_WXB[this][_to_s315] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && holders_WXB[this][_from_s315] >= 0) && holders_WXB[this][_from_s315] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && approach_WXB[this][_from_s315][msgsender_MSG] >= 0) && approach_WXB[this][_from_s315][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L3]                 revert := revert_hold;
[L302]               havoc __exception;
[L303]               revert := false;
[L304]   COND FALSE  !(__exception)
[L325]   CALL        call __ret_0_ := transferFrom~address~address~uint256_WXB__success(this, msgsender_MSG, msgvalue_MSG, _from_s315, _to_s315, _val_s315);
[L1088]  COND FALSE  !(!(holders_WXB[this][_from_s315] >= _val_s315))
[L1092]  COND FALSE  !(!(approach_WXB[this][_from_s315][msgsender_MSG] >= _val_s315))
[L1096]              assert _val_s315 <= holders_WXB[this][_from_s315];
[L1097]              sum_holders1[this] := sum_holders1[this] - holders_WXB[this][_from_s315];
[L1098]              holders_WXB[this][_from_s315] := (holders_WXB[this][_from_s315] - _val_s315) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1099]              sum_holders1[this] := sum_holders1[this] + holders_WXB[this][_from_s315];
[L1100]              assert _val_s315 <= approach_WXB[this][_from_s315][msgsender_MSG];
[L1101]              sum_approach0[_from_s315] := sum_approach0[_from_s315] - approach_WXB[this][_from_s315][msgsender_MSG];
[L1102]              approach_WXB[this][_from_s315][msgsender_MSG] := (approach_WXB[this][_from_s315][msgsender_MSG] - _val_s315) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1103]              sum_approach0[_from_s315] := sum_approach0[_from_s315] + approach_WXB[this][_from_s315][msgsender_MSG];
[L1104]              sum_holders1[this] := sum_holders1[this] - holders_WXB[this][_to_s315];
[L1105]              holders_WXB[this][_to_s315] := (holders_WXB[this][_to_s315] + _val_s315) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1106]              sum_holders1[this] := sum_holders1[this] + holders_WXB[this][_to_s315];
[L1107]              assert holders_WXB[this][_to_s315] >= _val_s315;
[L1108]              assert { :EventEmitted "Transfer_WXB" } true;
[L1109]              __ret_0_ := true;
[L325]   RET         call __ret_0_ := transferFrom~address~address~uint256_WXB__success(this, msgsender_MSG, msgvalue_MSG, _from_s315, _to_s315, _val_s315);
[L326]               assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !(((((((((__ret_0_ == true && holders_WXB[this][_from_s315] == old(holders_WXB[this][_from_s315]) - _val_s315) && holders_WXB[this][_to_s315] == old(holders_WXB[this][_to_s315]) + _val_s315) && approach_WXB[this][_from_s315][msgsender_MSG] == old(approach_WXB[this][_from_s315][msgsender_MSG]) - _val_s315) && totalSupply_WXB[this] == old(totalSupply_WXB[this])) && holders_WXB[this][p1] == old(holders_WXB[this][p1])) && approach_WXB[this][p2][p3] == old(approach_WXB[this][p2][p3])) && decimals_WXB[this] == old(decimals_WXB[this])) && symbol_WXB[this] == old(symbol_WXB[this])) && name_WXB[this] == old(name_WXB[this]));
[L3]                 revert := revert_hold;
[L1700]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_WXB(this, msgsender_MSG, msgvalue_MSG, _from_s315, _to_s315, _val_s315);
[L1770]  RET         call CorralChoice_WXB(this);
[L1770]  CALL        call CorralChoice_WXB(this);
[L1663]              havoc msgsender_MSG;
[L1664]              havoc msgvalue_MSG;
[L1665]              havoc choice;
[L1666]              havoc _from_s315;
[L1667]              havoc _to_s315;
[L1668]              havoc _val_s315;
[L1669]              havoc __ret_0_transferFrom;
[L1670]              havoc _to_s213;
[L1671]              havoc _val_s213;
[L1672]              havoc __ret_0_transfer;
[L1673]              havoc _own_s139;
[L1674]              havoc __ret_0_balanceOf;
[L1675]              havoc _owner_s368;
[L1676]              havoc _spender_s368;
[L1677]              havoc __ret_0_allowance;
[L1678]              havoc _spender_s352;
[L1679]              havoc _val_s352;
[L1680]              havoc __ret_0_approve;
[L1681]              havoc __ret_0_totalSupply;
[L1682]              havoc __ret_0_decimals;
[L1683]              havoc __ret_0_symbol;
[L1684]              havoc __ret_0_name;
[L1685]              havoc tmpNow;
[L1686]              havoc gas;
[L1687]              assume gas > 4000000 && gas <= 8000000;
[L1688]              tmpNow := now;
[L1689]              havoc now;
[L1690]              assume now > tmpNow;
[L1691]              assume msgsender_MSG != null;
[L1692]              assume DType[msgsender_MSG] != ERC20;
[L1693]              assume DType[msgsender_MSG] != WXB;
[L1694]              Alloc[msgsender_MSG] := true;
[L1695]  COND TRUE   choice == 9
[L1696]              gas := gas - 21000;
[L1697]  COND TRUE   gas >= 0
[L1698]              assume _val_s315 >= 0 && _val_s315 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1699]              assume msgvalue_MSG == 0;
[L1700]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_WXB(this, msgsender_MSG, msgvalue_MSG, _from_s315, _to_s315, _val_s315);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((((p1 != _from_s315 && p1 != _to_s315) && (p2 != _from_s315 || p3 != msgsender_MSG)) && _from_s315 != _to_s315) && _val_s315 <= holders_WXB[this][_from_s315]) && _val_s315 <= approach_WXB[this][_from_s315][msgsender_MSG]) && holders_WXB[this][_to_s315] + _val_s315 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _val_s315 >= 0) && _val_s315 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && holders_WXB[this][_to_s315] >= 0) && holders_WXB[this][_to_s315] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && holders_WXB[this][_from_s315] >= 0) && holders_WXB[this][_from_s315] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && approach_WXB[this][_from_s315][msgsender_MSG] >= 0) && approach_WXB[this][_from_s315][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_WXB0 := true;
[L3]                 call_transferFrom_WXB0 := false;
[L3]                 revert := revert_hold;
[L302]               havoc __exception;
[L303]               revert := false;
[L304]   COND FALSE  !(__exception)
[L325]   CALL        call __ret_0_ := transferFrom~address~address~uint256_WXB__success(this, msgsender_MSG, msgvalue_MSG, _from_s315, _to_s315, _val_s315);
[L1088]  COND FALSE  !(!(holders_WXB[this][_from_s315] >= _val_s315))
[L1092]  COND FALSE  !(!(approach_WXB[this][_from_s315][msgsender_MSG] >= _val_s315))
[L1096]              assert _val_s315 <= holders_WXB[this][_from_s315];
[L1097]              sum_holders1[this] := sum_holders1[this] - holders_WXB[this][_from_s315];
[L1098]              holders_WXB[this][_from_s315] := (holders_WXB[this][_from_s315] - _val_s315) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1099]              sum_holders1[this] := sum_holders1[this] + holders_WXB[this][_from_s315];
[L1100]              assert _val_s315 <= approach_WXB[this][_from_s315][msgsender_MSG];
[L1101]              sum_approach0[_from_s315] := sum_approach0[_from_s315] - approach_WXB[this][_from_s315][msgsender_MSG];
[L1102]              approach_WXB[this][_from_s315][msgsender_MSG] := (approach_WXB[this][_from_s315][msgsender_MSG] - _val_s315) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1103]              sum_approach0[_from_s315] := sum_approach0[_from_s315] + approach_WXB[this][_from_s315][msgsender_MSG];
[L1104]              sum_holders1[this] := sum_holders1[this] - holders_WXB[this][_to_s315];
[L1105]              holders_WXB[this][_to_s315] := (holders_WXB[this][_to_s315] + _val_s315) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1106]              sum_holders1[this] := sum_holders1[this] + holders_WXB[this][_to_s315];
[L1107]              assert holders_WXB[this][_to_s315] >= _val_s315;
[L1108]              assert { :EventEmitted "Transfer_WXB" } true;
[L1109]              __ret_0_ := true;
[L325]   RET         call __ret_0_ := transferFrom~address~address~uint256_WXB__success(this, msgsender_MSG, msgvalue_MSG, _from_s315, _to_s315, _val_s315);
[L326]               assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !(((((((((__ret_0_ == true && holders_WXB[this][_from_s315] == old(holders_WXB[this][_from_s315]) - _val_s315) && holders_WXB[this][_to_s315] == old(holders_WXB[this][_to_s315]) + _val_s315) && approach_WXB[this][_from_s315][msgsender_MSG] == old(approach_WXB[this][_from_s315][msgsender_MSG]) - _val_s315) && totalSupply_WXB[this] == old(totalSupply_WXB[this])) && holders_WXB[this][p1] == old(holders_WXB[this][p1])) && approach_WXB[this][p2][p3] == old(approach_WXB[this][p2][p3])) && decimals_WXB[this] == old(decimals_WXB[this])) && symbol_WXB[this] == old(symbol_WXB[this])) && name_WXB[this] == old(name_WXB[this]));
[L3]                 revert := revert_hold;
[L1700]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_WXB(this, msgsender_MSG, msgvalue_MSG, _from_s315, _to_s315, _val_s315);
[L1770]  RET         call CorralChoice_WXB(this);

Loop:
[L1770]  CALL        call CorralChoice_WXB(this);
[L1663]              havoc msgsender_MSG;
[L1664]              havoc msgvalue_MSG;
[L1665]              havoc choice;
[L1666]              havoc _from_s315;
[L1667]              havoc _to_s315;
[L1668]              havoc _val_s315;
[L1669]              havoc __ret_0_transferFrom;
[L1670]              havoc _to_s213;
[L1671]              havoc _val_s213;
[L1672]              havoc __ret_0_transfer;
[L1673]              havoc _own_s139;
[L1674]              havoc __ret_0_balanceOf;
[L1675]              havoc _owner_s368;
[L1676]              havoc _spender_s368;
[L1677]              havoc __ret_0_allowance;
[L1678]              havoc _spender_s352;
[L1679]              havoc _val_s352;
[L1680]              havoc __ret_0_approve;
[L1681]              havoc __ret_0_totalSupply;
[L1682]              havoc __ret_0_decimals;
[L1683]              havoc __ret_0_symbol;
[L1684]              havoc __ret_0_name;
[L1685]              havoc tmpNow;
[L1686]              havoc gas;
[L1687]              assume gas > 4000000 && gas <= 8000000;
[L1688]              tmpNow := now;
[L1689]              havoc now;
[L1690]              assume now > tmpNow;
[L1691]              assume msgsender_MSG != null;
[L1692]              assume DType[msgsender_MSG] != ERC20;
[L1693]              assume DType[msgsender_MSG] != WXB;
[L1694]              Alloc[msgsender_MSG] := true;
[L1695]  COND TRUE   choice == 9
[L1696]              gas := gas - 21000;
[L1697]  COND TRUE   gas >= 0
[L1698]              assume _val_s315 >= 0 && _val_s315 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1699]              assume msgvalue_MSG == 0;
[L1700]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_WXB(this, msgsender_MSG, msgvalue_MSG, _from_s315, _to_s315, _val_s315);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !((((((((((((((p1 != _from_s315 && p1 != _to_s315) && (p2 != _from_s315 || p3 != msgsender_MSG)) && _from_s315 != _to_s315) && _val_s315 <= holders_WXB[this][_from_s315]) && _val_s315 <= approach_WXB[this][_from_s315][msgsender_MSG]) && holders_WXB[this][_to_s315] + _val_s315 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _val_s315 >= 0) && _val_s315 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && holders_WXB[this][_to_s315] >= 0) && holders_WXB[this][_to_s315] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && holders_WXB[this][_from_s315] >= 0) && holders_WXB[this][_from_s315] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && approach_WXB[this][_from_s315][msgsender_MSG] >= 0) && approach_WXB[this][_from_s315][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L3]                 revert := revert_hold;
[L302]               havoc __exception;
[L303]               revert := false;
[L304]   COND FALSE  !(__exception)
[L325]   CALL        call __ret_0_ := transferFrom~address~address~uint256_WXB__success(this, msgsender_MSG, msgvalue_MSG, _from_s315, _to_s315, _val_s315);
[L1088]  COND FALSE  !(!(holders_WXB[this][_from_s315] >= _val_s315))
[L1092]  COND FALSE  !(!(approach_WXB[this][_from_s315][msgsender_MSG] >= _val_s315))
[L1096]              assert _val_s315 <= holders_WXB[this][_from_s315];
[L1097]              sum_holders1[this] := sum_holders1[this] - holders_WXB[this][_from_s315];
[L1098]              holders_WXB[this][_from_s315] := (holders_WXB[this][_from_s315] - _val_s315) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1099]              sum_holders1[this] := sum_holders1[this] + holders_WXB[this][_from_s315];
[L1100]              assert _val_s315 <= approach_WXB[this][_from_s315][msgsender_MSG];
[L1101]              sum_approach0[_from_s315] := sum_approach0[_from_s315] - approach_WXB[this][_from_s315][msgsender_MSG];
[L1102]              approach_WXB[this][_from_s315][msgsender_MSG] := (approach_WXB[this][_from_s315][msgsender_MSG] - _val_s315) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1103]              sum_approach0[_from_s315] := sum_approach0[_from_s315] + approach_WXB[this][_from_s315][msgsender_MSG];
[L1104]              sum_holders1[this] := sum_holders1[this] - holders_WXB[this][_to_s315];
[L1105]              holders_WXB[this][_to_s315] := (holders_WXB[this][_to_s315] + _val_s315) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1106]              sum_holders1[this] := sum_holders1[this] + holders_WXB[this][_to_s315];
[L1107]              assert holders_WXB[this][_to_s315] >= _val_s315;
[L1108]              assert { :EventEmitted "Transfer_WXB" } true;
[L1109]              __ret_0_ := true;
[L325]   RET         call __ret_0_ := transferFrom~address~address~uint256_WXB__success(this, msgsender_MSG, msgvalue_MSG, _from_s315, _to_s315, _val_s315);
[L326]               assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !(((((((((__ret_0_ == true && holders_WXB[this][_from_s315] == old(holders_WXB[this][_from_s315]) - _val_s315) && holders_WXB[this][_to_s315] == old(holders_WXB[this][_to_s315]) + _val_s315) && approach_WXB[this][_from_s315][msgsender_MSG] == old(approach_WXB[this][_from_s315][msgsender_MSG]) - _val_s315) && totalSupply_WXB[this] == old(totalSupply_WXB[this])) && holders_WXB[this][p1] == old(holders_WXB[this][p1])) && approach_WXB[this][p2][p3] == old(approach_WXB[this][p2][p3])) && decimals_WXB[this] == old(decimals_WXB[this])) && symbol_WXB[this] == old(symbol_WXB[this])) && name_WXB[this] == old(name_WXB[this]));
[L3]                 revert := revert_hold;
[L1700]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_WXB(this, msgsender_MSG, msgvalue_MSG, _from_s315, _to_s315, _val_s315);
[L1770]  RET         call CorralChoice_WXB(this);

[2020-11-25 08:50:42,413 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 08:50:42,413 INFO  L82        PathProgramCache]: Analyzing trace with hash -1659890561, now seen corresponding path program 1 times
[2020-11-25 08:50:42,414 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 08:50:42,505 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 08:50:43,038 WARN  L188               SmtUtils]: Spent 115.00 ms on a formula simplification. DAG size of input: 102 DAG size of output: 78
[2020-11-25 08:50:43,519 WARN  L188               SmtUtils]: Spent 229.00 ms on a formula simplification. DAG size of input: 212 DAG size of output: 70
[2020-11-25 08:50:43,677 WARN  L188               SmtUtils]: Spent 108.00 ms on a formula simplification. DAG size of input: 225 DAG size of output: 48
[2020-11-25 08:50:43,834 INFO  L134       CoverageAnalysis]: Checked inductivity of 44 backedges. 1 proven. 2 refuted. 0 times theorem prover too weak. 41 trivial. 0 not checked.
[2020-11-25 08:50:43,835 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 08:50:43,835 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [29] total 29
[2020-11-25 08:50:43,835 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 08:50:43,835 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 29 interpolants.
[2020-11-25 08:50:43,835 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=92, Invalid=720, Unknown=0, NotChecked=0, Total=812
[2020-11-25 08:50:43,835 INFO  L87              Difference]: Start difference. First operand 884 states and 980 transitions. cyclomatic complexity: 102 Second operand 29 states.
[2020-11-25 08:50:45,625 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 08:50:45,625 INFO  L93              Difference]: Finished difference Result 918 states and 1030 transitions.
[2020-11-25 08:50:45,626 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 23 states. 
[2020-11-25 08:50:45,626 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 918 states and 1030 transitions.
[2020-11-25 08:50:45,629 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 08:50:45,631 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 918 states to 918 states and 1030 transitions.
[2020-11-25 08:50:45,631 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 465
[2020-11-25 08:50:45,631 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 465
[2020-11-25 08:50:45,631 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 918 states and 1030 transitions.
[2020-11-25 08:50:45,632 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 08:50:45,632 INFO  L728         BuchiCegarLoop]: Abstraction has 918 states and 1030 transitions.
[2020-11-25 08:50:45,632 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 918 states and 1030 transitions.
[2020-11-25 08:50:45,638 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 918 to 897.
[2020-11-25 08:50:45,638 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 897 states.
[2020-11-25 08:50:45,639 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 897 states to 897 states and 1003 transitions.
[2020-11-25 08:50:45,639 INFO  L751         BuchiCegarLoop]: Abstraction has 897 states and 1003 transitions.
[2020-11-25 08:50:45,639 INFO  L631         BuchiCegarLoop]: Abstraction has 897 states and 1003 transitions.
[2020-11-25 08:50:45,639 INFO  L445         BuchiCegarLoop]: ======== Iteration 9============
[2020-11-25 08:50:45,639 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 897 states and 1003 transitions.
[2020-11-25 08:50:45,640 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 08:50:45,640 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 08:50:45,640 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 08:50:45,641 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 08:50:45,641 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_transferFrom_WXB0 := false;
[L3]                 call_transferFrom_WXB0 := false;
[L3]     CALL        call main();
[L3]                 havoc p3;
[L3]                 havoc p2;
[L3]                 havoc p1;
[L1760]              assume null == 0;
[L1761]  CALL        call this := FreshRefGenerator__success();
[L882]               havoc newRef;
[L883]               assume Alloc[newRef] == false;
[L884]               Alloc[newRef] := true;
[L885]               assume newRef != null;
[L1761]  RET         call this := FreshRefGenerator__success();
[L1762]              assume now >= 0;
[L1763]              assume DType[this] == WXB;
[L1764]              assume msgvalue_MSG == 0;
[L1765]              gas := gas - 53000;
[L1766]  CALL        call WXB_WXB(this, msgsender_MSG, msgvalue_MSG);
[L144]               havoc __exception;
[L145]               revert := false;
[L146]   COND FALSE  !(__exception)
[L167]   CALL        call WXB_WXB__success(this, msgsender_MSG, msgvalue_MSG);
[L986]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L914]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L899]               assume msgsender_MSG != null;
[L900]               Balance[this] := 0;
[L914]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L915]   COND FALSE  !(revert)
[L986]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L987]   COND FALSE  !(revert)
[L990]   CALL        call WXB_WXB_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L949]               assume msgsender_MSG != null;
[L950]               Balance[this] := 0;
[L951]               totalSupply_WXB[this] := 0;
[L952]               decimals_WXB[this] := 0;
[L953]               symbol_WXB[this] := 1199276259;
[L954]               name_WXB[this] := 1199276259;
[L955]               approach_WXB[this] := zeroRefRefintArr();
[L956]               sum_approach0[this] := 0;
[L957]               holders_WXB[this] := zeroRefintArr();
[L958]               sum_holders1[this] := 0;
[L960]               name_WXB[this] := -1225396598;
[L961]               symbol_WXB[this] := 397088534;
[L962]               decimals_WXB[this] := 18;
[L963]               __var_1 := decimals_WXB[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L964]               totalSupply_WXB[this] := nonlinearMul(100000 * 10000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936 * 100, nonlinearPow(10, decimals_WXB[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L965]               sum_holders1[this] := sum_holders1[this] - holders_WXB[this][msgsender_MSG];
[L966]               holders_WXB[this][msgsender_MSG] := totalSupply_WXB[this];
[L967]               sum_holders1[this] := sum_holders1[this] + holders_WXB[this][msgsender_MSG];
[L990]   RET         call WXB_WXB_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L991]   COND FALSE  !(revert)
[L167]   RET         call WXB_WXB__success(this, msgsender_MSG, msgvalue_MSG);
[L168]               assume !revert && gas >= 0;
[L1766]  RET         call WXB_WXB(this, msgsender_MSG, msgvalue_MSG);
[L1767]              assume !revert && gas >= 0;
[L1770]  CALL        call CorralChoice_WXB(this);
[L1663]              havoc msgsender_MSG;
[L1664]              havoc msgvalue_MSG;
[L1665]              havoc choice;
[L1666]              havoc _from_s315;
[L1667]              havoc _to_s315;
[L1668]              havoc _val_s315;
[L1669]              havoc __ret_0_transferFrom;
[L1670]              havoc _to_s213;
[L1671]              havoc _val_s213;
[L1672]              havoc __ret_0_transfer;
[L1673]              havoc _own_s139;
[L1674]              havoc __ret_0_balanceOf;
[L1675]              havoc _owner_s368;
[L1676]              havoc _spender_s368;
[L1677]              havoc __ret_0_allowance;
[L1678]              havoc _spender_s352;
[L1679]              havoc _val_s352;
[L1680]              havoc __ret_0_approve;
[L1681]              havoc __ret_0_totalSupply;
[L1682]              havoc __ret_0_decimals;
[L1683]              havoc __ret_0_symbol;
[L1684]              havoc __ret_0_name;
[L1685]              havoc tmpNow;
[L1686]              havoc gas;
[L1687]              assume gas > 4000000 && gas <= 8000000;
[L1688]              tmpNow := now;
[L1689]              havoc now;
[L1690]              assume now > tmpNow;
[L1691]              assume msgsender_MSG != null;
[L1692]              assume DType[msgsender_MSG] != ERC20;
[L1693]              assume DType[msgsender_MSG] != WXB;
[L1694]              Alloc[msgsender_MSG] := true;
[L1695]  COND TRUE   choice == 9
[L1696]              gas := gas - 21000;
[L1697]  COND TRUE   gas >= 0
[L1698]              assume _val_s315 >= 0 && _val_s315 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1699]              assume msgvalue_MSG == 0;
[L1700]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_WXB(this, msgsender_MSG, msgvalue_MSG, _from_s315, _to_s315, _val_s315);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !((((((((((((((p1 != _from_s315 && p1 != _to_s315) && (p2 != _from_s315 || p3 != msgsender_MSG)) && _from_s315 != _to_s315) && _val_s315 <= holders_WXB[this][_from_s315]) && _val_s315 <= approach_WXB[this][_from_s315][msgsender_MSG]) && holders_WXB[this][_to_s315] + _val_s315 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _val_s315 >= 0) && _val_s315 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && holders_WXB[this][_to_s315] >= 0) && holders_WXB[this][_to_s315] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && holders_WXB[this][_from_s315] >= 0) && holders_WXB[this][_from_s315] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && approach_WXB[this][_from_s315][msgsender_MSG] >= 0) && approach_WXB[this][_from_s315][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L3]                 revert := revert_hold;
[L302]               havoc __exception;
[L303]               revert := false;
[L304]   COND FALSE  !(__exception)
[L325]   CALL        call __ret_0_ := transferFrom~address~address~uint256_WXB__success(this, msgsender_MSG, msgvalue_MSG, _from_s315, _to_s315, _val_s315);
[L1088]  COND FALSE  !(!(holders_WXB[this][_from_s315] >= _val_s315))
[L1092]  COND FALSE  !(!(approach_WXB[this][_from_s315][msgsender_MSG] >= _val_s315))
[L1096]              assert _val_s315 <= holders_WXB[this][_from_s315];
[L1097]              sum_holders1[this] := sum_holders1[this] - holders_WXB[this][_from_s315];
[L1098]              holders_WXB[this][_from_s315] := (holders_WXB[this][_from_s315] - _val_s315) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1099]              sum_holders1[this] := sum_holders1[this] + holders_WXB[this][_from_s315];
[L1100]              assert _val_s315 <= approach_WXB[this][_from_s315][msgsender_MSG];
[L1101]              sum_approach0[_from_s315] := sum_approach0[_from_s315] - approach_WXB[this][_from_s315][msgsender_MSG];
[L1102]              approach_WXB[this][_from_s315][msgsender_MSG] := (approach_WXB[this][_from_s315][msgsender_MSG] - _val_s315) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1103]              sum_approach0[_from_s315] := sum_approach0[_from_s315] + approach_WXB[this][_from_s315][msgsender_MSG];
[L1104]              sum_holders1[this] := sum_holders1[this] - holders_WXB[this][_to_s315];
[L1105]              holders_WXB[this][_to_s315] := (holders_WXB[this][_to_s315] + _val_s315) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1106]              sum_holders1[this] := sum_holders1[this] + holders_WXB[this][_to_s315];
[L1107]              assert holders_WXB[this][_to_s315] >= _val_s315;
[L1108]              assert { :EventEmitted "Transfer_WXB" } true;
[L1109]              __ret_0_ := true;
[L325]   RET         call __ret_0_ := transferFrom~address~address~uint256_WXB__success(this, msgsender_MSG, msgvalue_MSG, _from_s315, _to_s315, _val_s315);
[L326]               assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume ((((((((__ret_0_ == true && holders_WXB[this][_from_s315] == old(holders_WXB[this][_from_s315]) - _val_s315) && holders_WXB[this][_to_s315] == old(holders_WXB[this][_to_s315]) + _val_s315) && approach_WXB[this][_from_s315][msgsender_MSG] == old(approach_WXB[this][_from_s315][msgsender_MSG]) - _val_s315) && totalSupply_WXB[this] == old(totalSupply_WXB[this])) && holders_WXB[this][p1] == old(holders_WXB[this][p1])) && approach_WXB[this][p2][p3] == old(approach_WXB[this][p2][p3])) && decimals_WXB[this] == old(decimals_WXB[this])) && symbol_WXB[this] == old(symbol_WXB[this])) && name_WXB[this] == old(name_WXB[this]);
[L3]                 success_transferFrom_WXB0 := true;
[L3]                 success_transferFrom_WXB0 := false;
[L3]                 revert := revert_hold;
[L1700]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_WXB(this, msgsender_MSG, msgvalue_MSG, _from_s315, _to_s315, _val_s315);
[L1770]  RET         call CorralChoice_WXB(this);
[L1770]  CALL        call CorralChoice_WXB(this);
[L1663]              havoc msgsender_MSG;
[L1664]              havoc msgvalue_MSG;
[L1665]              havoc choice;
[L1666]              havoc _from_s315;
[L1667]              havoc _to_s315;
[L1668]              havoc _val_s315;
[L1669]              havoc __ret_0_transferFrom;
[L1670]              havoc _to_s213;
[L1671]              havoc _val_s213;
[L1672]              havoc __ret_0_transfer;
[L1673]              havoc _own_s139;
[L1674]              havoc __ret_0_balanceOf;
[L1675]              havoc _owner_s368;
[L1676]              havoc _spender_s368;
[L1677]              havoc __ret_0_allowance;
[L1678]              havoc _spender_s352;
[L1679]              havoc _val_s352;
[L1680]              havoc __ret_0_approve;
[L1681]              havoc __ret_0_totalSupply;
[L1682]              havoc __ret_0_decimals;
[L1683]              havoc __ret_0_symbol;
[L1684]              havoc __ret_0_name;
[L1685]              havoc tmpNow;
[L1686]              havoc gas;
[L1687]              assume gas > 4000000 && gas <= 8000000;
[L1688]              tmpNow := now;
[L1689]              havoc now;
[L1690]              assume now > tmpNow;
[L1691]              assume msgsender_MSG != null;
[L1692]              assume DType[msgsender_MSG] != ERC20;
[L1693]              assume DType[msgsender_MSG] != WXB;
[L1694]              Alloc[msgsender_MSG] := true;
[L1695]  COND TRUE   choice == 9
[L1696]              gas := gas - 21000;
[L1697]  COND TRUE   gas >= 0
[L1698]              assume _val_s315 >= 0 && _val_s315 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1699]              assume msgvalue_MSG == 0;
[L1700]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_WXB(this, msgsender_MSG, msgvalue_MSG, _from_s315, _to_s315, _val_s315);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((((p1 != _from_s315 && p1 != _to_s315) && (p2 != _from_s315 || p3 != msgsender_MSG)) && _from_s315 != _to_s315) && _val_s315 <= holders_WXB[this][_from_s315]) && _val_s315 <= approach_WXB[this][_from_s315][msgsender_MSG]) && holders_WXB[this][_to_s315] + _val_s315 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _val_s315 >= 0) && _val_s315 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && holders_WXB[this][_to_s315] >= 0) && holders_WXB[this][_to_s315] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && holders_WXB[this][_from_s315] >= 0) && holders_WXB[this][_from_s315] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && approach_WXB[this][_from_s315][msgsender_MSG] >= 0) && approach_WXB[this][_from_s315][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_WXB0 := true;
[L3]                 call_transferFrom_WXB0 := false;
[L3]                 revert := revert_hold;
[L302]               havoc __exception;
[L303]               revert := false;
[L304]   COND FALSE  !(__exception)
[L325]   CALL        call __ret_0_ := transferFrom~address~address~uint256_WXB__success(this, msgsender_MSG, msgvalue_MSG, _from_s315, _to_s315, _val_s315);
[L1088]  COND FALSE  !(!(holders_WXB[this][_from_s315] >= _val_s315))
[L1092]  COND FALSE  !(!(approach_WXB[this][_from_s315][msgsender_MSG] >= _val_s315))
[L1096]              assert _val_s315 <= holders_WXB[this][_from_s315];
[L1097]              sum_holders1[this] := sum_holders1[this] - holders_WXB[this][_from_s315];
[L1098]              holders_WXB[this][_from_s315] := (holders_WXB[this][_from_s315] - _val_s315) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1099]              sum_holders1[this] := sum_holders1[this] + holders_WXB[this][_from_s315];
[L1100]              assert _val_s315 <= approach_WXB[this][_from_s315][msgsender_MSG];
[L1101]              sum_approach0[_from_s315] := sum_approach0[_from_s315] - approach_WXB[this][_from_s315][msgsender_MSG];
[L1102]              approach_WXB[this][_from_s315][msgsender_MSG] := (approach_WXB[this][_from_s315][msgsender_MSG] - _val_s315) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1103]              sum_approach0[_from_s315] := sum_approach0[_from_s315] + approach_WXB[this][_from_s315][msgsender_MSG];
[L1104]              sum_holders1[this] := sum_holders1[this] - holders_WXB[this][_to_s315];
[L1105]              holders_WXB[this][_to_s315] := (holders_WXB[this][_to_s315] + _val_s315) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1106]              sum_holders1[this] := sum_holders1[this] + holders_WXB[this][_to_s315];
[L1107]              assert holders_WXB[this][_to_s315] >= _val_s315;
[L1108]              assert { :EventEmitted "Transfer_WXB" } true;
[L1109]              __ret_0_ := true;
[L325]   RET         call __ret_0_ := transferFrom~address~address~uint256_WXB__success(this, msgsender_MSG, msgvalue_MSG, _from_s315, _to_s315, _val_s315);
[L326]               assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !(((((((((__ret_0_ == true && holders_WXB[this][_from_s315] == old(holders_WXB[this][_from_s315]) - _val_s315) && holders_WXB[this][_to_s315] == old(holders_WXB[this][_to_s315]) + _val_s315) && approach_WXB[this][_from_s315][msgsender_MSG] == old(approach_WXB[this][_from_s315][msgsender_MSG]) - _val_s315) && totalSupply_WXB[this] == old(totalSupply_WXB[this])) && holders_WXB[this][p1] == old(holders_WXB[this][p1])) && approach_WXB[this][p2][p3] == old(approach_WXB[this][p2][p3])) && decimals_WXB[this] == old(decimals_WXB[this])) && symbol_WXB[this] == old(symbol_WXB[this])) && name_WXB[this] == old(name_WXB[this]));
[L3]                 revert := revert_hold;
[L1700]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_WXB(this, msgsender_MSG, msgvalue_MSG, _from_s315, _to_s315, _val_s315);
[L1770]  RET         call CorralChoice_WXB(this);

Loop:
[L1770]  CALL        call CorralChoice_WXB(this);
[L1663]              havoc msgsender_MSG;
[L1664]              havoc msgvalue_MSG;
[L1665]              havoc choice;
[L1666]              havoc _from_s315;
[L1667]              havoc _to_s315;
[L1668]              havoc _val_s315;
[L1669]              havoc __ret_0_transferFrom;
[L1670]              havoc _to_s213;
[L1671]              havoc _val_s213;
[L1672]              havoc __ret_0_transfer;
[L1673]              havoc _own_s139;
[L1674]              havoc __ret_0_balanceOf;
[L1675]              havoc _owner_s368;
[L1676]              havoc _spender_s368;
[L1677]              havoc __ret_0_allowance;
[L1678]              havoc _spender_s352;
[L1679]              havoc _val_s352;
[L1680]              havoc __ret_0_approve;
[L1681]              havoc __ret_0_totalSupply;
[L1682]              havoc __ret_0_decimals;
[L1683]              havoc __ret_0_symbol;
[L1684]              havoc __ret_0_name;
[L1685]              havoc tmpNow;
[L1686]              havoc gas;
[L1687]              assume gas > 4000000 && gas <= 8000000;
[L1688]              tmpNow := now;
[L1689]              havoc now;
[L1690]              assume now > tmpNow;
[L1691]              assume msgsender_MSG != null;
[L1692]              assume DType[msgsender_MSG] != ERC20;
[L1693]              assume DType[msgsender_MSG] != WXB;
[L1694]              Alloc[msgsender_MSG] := true;
[L1695]  COND TRUE   choice == 9
[L1696]              gas := gas - 21000;
[L1697]  COND TRUE   gas >= 0
[L1698]              assume _val_s315 >= 0 && _val_s315 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1699]              assume msgvalue_MSG == 0;
[L1700]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_WXB(this, msgsender_MSG, msgvalue_MSG, _from_s315, _to_s315, _val_s315);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !((((((((((((((p1 != _from_s315 && p1 != _to_s315) && (p2 != _from_s315 || p3 != msgsender_MSG)) && _from_s315 != _to_s315) && _val_s315 <= holders_WXB[this][_from_s315]) && _val_s315 <= approach_WXB[this][_from_s315][msgsender_MSG]) && holders_WXB[this][_to_s315] + _val_s315 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _val_s315 >= 0) && _val_s315 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && holders_WXB[this][_to_s315] >= 0) && holders_WXB[this][_to_s315] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && holders_WXB[this][_from_s315] >= 0) && holders_WXB[this][_from_s315] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && approach_WXB[this][_from_s315][msgsender_MSG] >= 0) && approach_WXB[this][_from_s315][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L3]                 revert := revert_hold;
[L302]               havoc __exception;
[L303]               revert := false;
[L304]   COND FALSE  !(__exception)
[L325]   CALL        call __ret_0_ := transferFrom~address~address~uint256_WXB__success(this, msgsender_MSG, msgvalue_MSG, _from_s315, _to_s315, _val_s315);
[L1088]  COND FALSE  !(!(holders_WXB[this][_from_s315] >= _val_s315))
[L1092]  COND FALSE  !(!(approach_WXB[this][_from_s315][msgsender_MSG] >= _val_s315))
[L1096]              assert _val_s315 <= holders_WXB[this][_from_s315];
[L1097]              sum_holders1[this] := sum_holders1[this] - holders_WXB[this][_from_s315];
[L1098]              holders_WXB[this][_from_s315] := (holders_WXB[this][_from_s315] - _val_s315) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1099]              sum_holders1[this] := sum_holders1[this] + holders_WXB[this][_from_s315];
[L1100]              assert _val_s315 <= approach_WXB[this][_from_s315][msgsender_MSG];
[L1101]              sum_approach0[_from_s315] := sum_approach0[_from_s315] - approach_WXB[this][_from_s315][msgsender_MSG];
[L1102]              approach_WXB[this][_from_s315][msgsender_MSG] := (approach_WXB[this][_from_s315][msgsender_MSG] - _val_s315) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1103]              sum_approach0[_from_s315] := sum_approach0[_from_s315] + approach_WXB[this][_from_s315][msgsender_MSG];
[L1104]              sum_holders1[this] := sum_holders1[this] - holders_WXB[this][_to_s315];
[L1105]              holders_WXB[this][_to_s315] := (holders_WXB[this][_to_s315] + _val_s315) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1106]              sum_holders1[this] := sum_holders1[this] + holders_WXB[this][_to_s315];
[L1107]              assert holders_WXB[this][_to_s315] >= _val_s315;
[L1108]              assert { :EventEmitted "Transfer_WXB" } true;
[L1109]              __ret_0_ := true;
[L325]   RET         call __ret_0_ := transferFrom~address~address~uint256_WXB__success(this, msgsender_MSG, msgvalue_MSG, _from_s315, _to_s315, _val_s315);
[L326]               assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !(((((((((__ret_0_ == true && holders_WXB[this][_from_s315] == old(holders_WXB[this][_from_s315]) - _val_s315) && holders_WXB[this][_to_s315] == old(holders_WXB[this][_to_s315]) + _val_s315) && approach_WXB[this][_from_s315][msgsender_MSG] == old(approach_WXB[this][_from_s315][msgsender_MSG]) - _val_s315) && totalSupply_WXB[this] == old(totalSupply_WXB[this])) && holders_WXB[this][p1] == old(holders_WXB[this][p1])) && approach_WXB[this][p2][p3] == old(approach_WXB[this][p2][p3])) && decimals_WXB[this] == old(decimals_WXB[this])) && symbol_WXB[this] == old(symbol_WXB[this])) && name_WXB[this] == old(name_WXB[this]));
[L3]                 revert := revert_hold;
[L1700]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_WXB(this, msgsender_MSG, msgvalue_MSG, _from_s315, _to_s315, _val_s315);
[L1770]  RET         call CorralChoice_WXB(this);

[2020-11-25 08:50:45,644 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 08:50:45,644 INFO  L82        PathProgramCache]: Analyzing trace with hash 1002948251, now seen corresponding path program 1 times
[2020-11-25 08:50:45,645 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 08:50:45,726 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 08:50:46,573 WARN  L188               SmtUtils]: Spent 325.00 ms on a formula simplification. DAG size of input: 205 DAG size of output: 90
[2020-11-25 08:50:46,971 WARN  L188               SmtUtils]: Spent 349.00 ms on a formula simplification. DAG size of input: 221 DAG size of output: 93
[2020-11-25 08:50:47,349 WARN  L188               SmtUtils]: Spent 333.00 ms on a formula simplification. DAG size of input: 162 DAG size of output: 79
[2020-11-25 08:50:47,654 WARN  L188               SmtUtils]: Spent 219.00 ms on a formula simplification. DAG size of input: 170 DAG size of output: 55
[2020-11-25 08:50:47,894 WARN  L250   erpolLogProxyWrapper]: Already inconsistent.
[2020-11-25 08:50:47,894 WARN  L250   erpolLogProxyWrapper]: Already inconsistent.
[2020-11-25 08:50:48,743 WARN  L188               SmtUtils]: Spent 412.00 ms on a formula simplification. DAG size of input: 249 DAG size of output: 112
[2020-11-25 08:50:48,928 WARN  L188               SmtUtils]: Spent 118.00 ms on a formula simplification. DAG size of input: 214 DAG size of output: 57
[2020-11-25 08:50:49,320 WARN  L188               SmtUtils]: Spent 197.00 ms on a formula simplification. DAG size of input: 201 DAG size of output: 69
[2020-11-25 08:50:49,660 INFO  L134       CoverageAnalysis]: Checked inductivity of 44 backedges. 0 proven. 3 refuted. 0 times theorem prover too weak. 41 trivial. 0 not checked.
[2020-11-25 08:50:49,660 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 08:50:49,660 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [31] total 31
[2020-11-25 08:50:49,661 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 08:50:49,661 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 32 interpolants.
[2020-11-25 08:50:49,661 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=98, Invalid=894, Unknown=0, NotChecked=0, Total=992
[2020-11-25 08:50:49,662 INFO  L87              Difference]: Start difference. First operand 897 states and 1003 transitions. cyclomatic complexity: 113 Second operand 32 states.
[2020-11-25 08:50:51,167 WARN  L188               SmtUtils]: Spent 121.00 ms on a formula simplification. DAG size of input: 102 DAG size of output: 94
[2020-11-25 08:50:51,462 WARN  L188               SmtUtils]: Spent 180.00 ms on a formula simplification. DAG size of input: 105 DAG size of output: 94
[2020-11-25 08:50:51,711 WARN  L188               SmtUtils]: Spent 117.00 ms on a formula simplification. DAG size of input: 103 DAG size of output: 96
[2020-11-25 08:50:51,889 WARN  L188               SmtUtils]: Spent 131.00 ms on a formula simplification. DAG size of input: 106 DAG size of output: 96
[2020-11-25 08:50:52,259 WARN  L188               SmtUtils]: Spent 250.00 ms on a formula simplification. DAG size of input: 161 DAG size of output: 114
[2020-11-25 08:50:52,593 WARN  L188               SmtUtils]: Spent 154.00 ms on a formula simplification. DAG size of input: 168 DAG size of output: 92
[2020-11-25 08:50:52,964 WARN  L188               SmtUtils]: Spent 206.00 ms on a formula simplification. DAG size of input: 126 DAG size of output: 119
[2020-11-25 08:50:54,798 WARN  L188               SmtUtils]: Spent 116.00 ms on a formula simplification. DAG size of input: 128 DAG size of output: 92
[2020-11-25 08:50:54,858 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 08:50:54,858 INFO  L93              Difference]: Finished difference Result 1067 states and 1223 transitions.
[2020-11-25 08:50:54,858 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 32 states. 
[2020-11-25 08:50:54,858 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 1067 states and 1223 transitions.
[2020-11-25 08:50:54,860 INFO  L131   ngComponentsAnalysis]: Automaton has 3 accepting balls. 6
[2020-11-25 08:50:54,863 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 1067 states to 1067 states and 1223 transitions.
[2020-11-25 08:50:54,863 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 586
[2020-11-25 08:50:54,863 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 586
[2020-11-25 08:50:54,863 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 1067 states and 1223 transitions.
[2020-11-25 08:50:54,864 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 08:50:54,864 INFO  L728         BuchiCegarLoop]: Abstraction has 1067 states and 1223 transitions.
[2020-11-25 08:50:54,864 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 1067 states and 1223 transitions.
[2020-11-25 08:50:54,870 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 1067 to 1041.
[2020-11-25 08:50:54,870 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 1041 states.
[2020-11-25 08:50:54,871 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 1041 states to 1041 states and 1191 transitions.
[2020-11-25 08:50:54,871 INFO  L751         BuchiCegarLoop]: Abstraction has 1041 states and 1191 transitions.
[2020-11-25 08:50:54,871 INFO  L631         BuchiCegarLoop]: Abstraction has 1041 states and 1191 transitions.
[2020-11-25 08:50:54,871 INFO  L445         BuchiCegarLoop]: ======== Iteration 10============
[2020-11-25 08:50:54,871 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 1041 states and 1191 transitions.
[2020-11-25 08:50:54,873 INFO  L131   ngComponentsAnalysis]: Automaton has 3 accepting balls. 6
[2020-11-25 08:50:54,873 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 08:50:54,873 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 08:50:54,874 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 08:50:54,874 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_transferFrom_WXB0 := false;
[L3]                 call_transferFrom_WXB0 := false;
[L3]     CALL        call main();
[L3]                 havoc p3;
[L3]                 havoc p2;
[L3]                 havoc p1;
[L1760]              assume null == 0;
[L1761]  CALL        call this := FreshRefGenerator__success();
[L882]               havoc newRef;
[L883]               assume Alloc[newRef] == false;
[L884]               Alloc[newRef] := true;
[L885]               assume newRef != null;
[L1761]  RET         call this := FreshRefGenerator__success();
[L1762]              assume now >= 0;
[L1763]              assume DType[this] == WXB;
[L1764]              assume msgvalue_MSG == 0;
[L1765]              gas := gas - 53000;
[L1766]  CALL        call WXB_WXB(this, msgsender_MSG, msgvalue_MSG);
[L144]               havoc __exception;
[L145]               revert := false;
[L146]   COND FALSE  !(__exception)
[L167]   CALL        call WXB_WXB__success(this, msgsender_MSG, msgvalue_MSG);
[L986]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L914]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L899]               assume msgsender_MSG != null;
[L900]               Balance[this] := 0;
[L914]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L915]   COND FALSE  !(revert)
[L986]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L987]   COND FALSE  !(revert)
[L990]   CALL        call WXB_WXB_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L949]               assume msgsender_MSG != null;
[L950]               Balance[this] := 0;
[L951]               totalSupply_WXB[this] := 0;
[L952]               decimals_WXB[this] := 0;
[L953]               symbol_WXB[this] := 1199276259;
[L954]               name_WXB[this] := 1199276259;
[L955]               approach_WXB[this] := zeroRefRefintArr();
[L956]               sum_approach0[this] := 0;
[L957]               holders_WXB[this] := zeroRefintArr();
[L958]               sum_holders1[this] := 0;
[L960]               name_WXB[this] := -1225396598;
[L961]               symbol_WXB[this] := 397088534;
[L962]               decimals_WXB[this] := 18;
[L963]               __var_1 := decimals_WXB[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L964]               totalSupply_WXB[this] := nonlinearMul(100000 * 10000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936 * 100, nonlinearPow(10, decimals_WXB[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L965]               sum_holders1[this] := sum_holders1[this] - holders_WXB[this][msgsender_MSG];
[L966]               holders_WXB[this][msgsender_MSG] := totalSupply_WXB[this];
[L967]               sum_holders1[this] := sum_holders1[this] + holders_WXB[this][msgsender_MSG];
[L990]   RET         call WXB_WXB_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L991]   COND FALSE  !(revert)
[L167]   RET         call WXB_WXB__success(this, msgsender_MSG, msgvalue_MSG);
[L168]               assume !revert && gas >= 0;
[L1766]  RET         call WXB_WXB(this, msgsender_MSG, msgvalue_MSG);
[L1767]              assume !revert && gas >= 0;
[L1770]  CALL        call CorralChoice_WXB(this);
[L1663]              havoc msgsender_MSG;
[L1664]              havoc msgvalue_MSG;
[L1665]              havoc choice;
[L1666]              havoc _from_s315;
[L1667]              havoc _to_s315;
[L1668]              havoc _val_s315;
[L1669]              havoc __ret_0_transferFrom;
[L1670]              havoc _to_s213;
[L1671]              havoc _val_s213;
[L1672]              havoc __ret_0_transfer;
[L1673]              havoc _own_s139;
[L1674]              havoc __ret_0_balanceOf;
[L1675]              havoc _owner_s368;
[L1676]              havoc _spender_s368;
[L1677]              havoc __ret_0_allowance;
[L1678]              havoc _spender_s352;
[L1679]              havoc _val_s352;
[L1680]              havoc __ret_0_approve;
[L1681]              havoc __ret_0_totalSupply;
[L1682]              havoc __ret_0_decimals;
[L1683]              havoc __ret_0_symbol;
[L1684]              havoc __ret_0_name;
[L1685]              havoc tmpNow;
[L1686]              havoc gas;
[L1687]              assume gas > 4000000 && gas <= 8000000;
[L1688]              tmpNow := now;
[L1689]              havoc now;
[L1690]              assume now > tmpNow;
[L1691]              assume msgsender_MSG != null;
[L1692]              assume DType[msgsender_MSG] != ERC20;
[L1693]              assume DType[msgsender_MSG] != WXB;
[L1694]              Alloc[msgsender_MSG] := true;
[L1695]  COND TRUE   choice == 9
[L1696]              gas := gas - 21000;
[L1697]  COND TRUE   gas >= 0
[L1698]              assume _val_s315 >= 0 && _val_s315 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1699]              assume msgvalue_MSG == 0;
[L1700]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_WXB(this, msgsender_MSG, msgvalue_MSG, _from_s315, _to_s315, _val_s315);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !((((((((((((((p1 != _from_s315 && p1 != _to_s315) && (p2 != _from_s315 || p3 != msgsender_MSG)) && _from_s315 != _to_s315) && _val_s315 <= holders_WXB[this][_from_s315]) && _val_s315 <= approach_WXB[this][_from_s315][msgsender_MSG]) && holders_WXB[this][_to_s315] + _val_s315 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _val_s315 >= 0) && _val_s315 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && holders_WXB[this][_to_s315] >= 0) && holders_WXB[this][_to_s315] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && holders_WXB[this][_from_s315] >= 0) && holders_WXB[this][_from_s315] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && approach_WXB[this][_from_s315][msgsender_MSG] >= 0) && approach_WXB[this][_from_s315][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L3]                 revert := revert_hold;
[L302]               havoc __exception;
[L303]               revert := false;
[L304]   COND FALSE  !(__exception)
[L325]   CALL        call __ret_0_ := transferFrom~address~address~uint256_WXB__success(this, msgsender_MSG, msgvalue_MSG, _from_s315, _to_s315, _val_s315);
[L1088]  COND FALSE  !(!(holders_WXB[this][_from_s315] >= _val_s315))
[L1092]  COND FALSE  !(!(approach_WXB[this][_from_s315][msgsender_MSG] >= _val_s315))
[L1096]              assert _val_s315 <= holders_WXB[this][_from_s315];
[L1097]              sum_holders1[this] := sum_holders1[this] - holders_WXB[this][_from_s315];
[L1098]              holders_WXB[this][_from_s315] := (holders_WXB[this][_from_s315] - _val_s315) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1099]              sum_holders1[this] := sum_holders1[this] + holders_WXB[this][_from_s315];
[L1100]              assert _val_s315 <= approach_WXB[this][_from_s315][msgsender_MSG];
[L1101]              sum_approach0[_from_s315] := sum_approach0[_from_s315] - approach_WXB[this][_from_s315][msgsender_MSG];
[L1102]              approach_WXB[this][_from_s315][msgsender_MSG] := (approach_WXB[this][_from_s315][msgsender_MSG] - _val_s315) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1103]              sum_approach0[_from_s315] := sum_approach0[_from_s315] + approach_WXB[this][_from_s315][msgsender_MSG];
[L1104]              sum_holders1[this] := sum_holders1[this] - holders_WXB[this][_to_s315];
[L1105]              holders_WXB[this][_to_s315] := (holders_WXB[this][_to_s315] + _val_s315) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1106]              sum_holders1[this] := sum_holders1[this] + holders_WXB[this][_to_s315];
[L1107]              assert holders_WXB[this][_to_s315] >= _val_s315;
[L1108]              assert { :EventEmitted "Transfer_WXB" } true;
[L1109]              __ret_0_ := true;
[L325]   RET         call __ret_0_ := transferFrom~address~address~uint256_WXB__success(this, msgsender_MSG, msgvalue_MSG, _from_s315, _to_s315, _val_s315);
[L326]               assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume ((((((((__ret_0_ == true && holders_WXB[this][_from_s315] == old(holders_WXB[this][_from_s315]) - _val_s315) && holders_WXB[this][_to_s315] == old(holders_WXB[this][_to_s315]) + _val_s315) && approach_WXB[this][_from_s315][msgsender_MSG] == old(approach_WXB[this][_from_s315][msgsender_MSG]) - _val_s315) && totalSupply_WXB[this] == old(totalSupply_WXB[this])) && holders_WXB[this][p1] == old(holders_WXB[this][p1])) && approach_WXB[this][p2][p3] == old(approach_WXB[this][p2][p3])) && decimals_WXB[this] == old(decimals_WXB[this])) && symbol_WXB[this] == old(symbol_WXB[this])) && name_WXB[this] == old(name_WXB[this]);
[L3]                 success_transferFrom_WXB0 := true;
[L3]                 success_transferFrom_WXB0 := false;
[L3]                 revert := revert_hold;
[L1700]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_WXB(this, msgsender_MSG, msgvalue_MSG, _from_s315, _to_s315, _val_s315);
[L1770]  RET         call CorralChoice_WXB(this);
[L1770]  CALL        call CorralChoice_WXB(this);
[L1663]              havoc msgsender_MSG;
[L1664]              havoc msgvalue_MSG;
[L1665]              havoc choice;
[L1666]              havoc _from_s315;
[L1667]              havoc _to_s315;
[L1668]              havoc _val_s315;
[L1669]              havoc __ret_0_transferFrom;
[L1670]              havoc _to_s213;
[L1671]              havoc _val_s213;
[L1672]              havoc __ret_0_transfer;
[L1673]              havoc _own_s139;
[L1674]              havoc __ret_0_balanceOf;
[L1675]              havoc _owner_s368;
[L1676]              havoc _spender_s368;
[L1677]              havoc __ret_0_allowance;
[L1678]              havoc _spender_s352;
[L1679]              havoc _val_s352;
[L1680]              havoc __ret_0_approve;
[L1681]              havoc __ret_0_totalSupply;
[L1682]              havoc __ret_0_decimals;
[L1683]              havoc __ret_0_symbol;
[L1684]              havoc __ret_0_name;
[L1685]              havoc tmpNow;
[L1686]              havoc gas;
[L1687]              assume gas > 4000000 && gas <= 8000000;
[L1688]              tmpNow := now;
[L1689]              havoc now;
[L1690]              assume now > tmpNow;
[L1691]              assume msgsender_MSG != null;
[L1692]              assume DType[msgsender_MSG] != ERC20;
[L1693]              assume DType[msgsender_MSG] != WXB;
[L1694]              Alloc[msgsender_MSG] := true;
[L1695]  COND TRUE   choice == 9
[L1696]              gas := gas - 21000;
[L1697]  COND TRUE   gas >= 0
[L1698]              assume _val_s315 >= 0 && _val_s315 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1699]              assume msgvalue_MSG == 0;
[L1700]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_WXB(this, msgsender_MSG, msgvalue_MSG, _from_s315, _to_s315, _val_s315);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !((((((((((((((p1 != _from_s315 && p1 != _to_s315) && (p2 != _from_s315 || p3 != msgsender_MSG)) && _from_s315 != _to_s315) && _val_s315 <= holders_WXB[this][_from_s315]) && _val_s315 <= approach_WXB[this][_from_s315][msgsender_MSG]) && holders_WXB[this][_to_s315] + _val_s315 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _val_s315 >= 0) && _val_s315 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && holders_WXB[this][_to_s315] >= 0) && holders_WXB[this][_to_s315] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && holders_WXB[this][_from_s315] >= 0) && holders_WXB[this][_from_s315] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && approach_WXB[this][_from_s315][msgsender_MSG] >= 0) && approach_WXB[this][_from_s315][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L3]                 revert := revert_hold;
[L302]               havoc __exception;
[L303]               revert := false;
[L304]   COND FALSE  !(__exception)
[L325]   CALL        call __ret_0_ := transferFrom~address~address~uint256_WXB__success(this, msgsender_MSG, msgvalue_MSG, _from_s315, _to_s315, _val_s315);
[L1088]  COND FALSE  !(!(holders_WXB[this][_from_s315] >= _val_s315))
[L1092]  COND FALSE  !(!(approach_WXB[this][_from_s315][msgsender_MSG] >= _val_s315))
[L1096]              assert _val_s315 <= holders_WXB[this][_from_s315];
[L1097]              sum_holders1[this] := sum_holders1[this] - holders_WXB[this][_from_s315];
[L1098]              holders_WXB[this][_from_s315] := (holders_WXB[this][_from_s315] - _val_s315) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1099]              sum_holders1[this] := sum_holders1[this] + holders_WXB[this][_from_s315];
[L1100]              assert _val_s315 <= approach_WXB[this][_from_s315][msgsender_MSG];
[L1101]              sum_approach0[_from_s315] := sum_approach0[_from_s315] - approach_WXB[this][_from_s315][msgsender_MSG];
[L1102]              approach_WXB[this][_from_s315][msgsender_MSG] := (approach_WXB[this][_from_s315][msgsender_MSG] - _val_s315) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1103]              sum_approach0[_from_s315] := sum_approach0[_from_s315] + approach_WXB[this][_from_s315][msgsender_MSG];
[L1104]              sum_holders1[this] := sum_holders1[this] - holders_WXB[this][_to_s315];
[L1105]              holders_WXB[this][_to_s315] := (holders_WXB[this][_to_s315] + _val_s315) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1106]              sum_holders1[this] := sum_holders1[this] + holders_WXB[this][_to_s315];
[L1107]              assert holders_WXB[this][_to_s315] >= _val_s315;
[L1108]              assert { :EventEmitted "Transfer_WXB" } true;
[L1109]              __ret_0_ := true;
[L325]   RET         call __ret_0_ := transferFrom~address~address~uint256_WXB__success(this, msgsender_MSG, msgvalue_MSG, _from_s315, _to_s315, _val_s315);
[L326]               assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume ((((((((__ret_0_ == true && holders_WXB[this][_from_s315] == old(holders_WXB[this][_from_s315]) - _val_s315) && holders_WXB[this][_to_s315] == old(holders_WXB[this][_to_s315]) + _val_s315) && approach_WXB[this][_from_s315][msgsender_MSG] == old(approach_WXB[this][_from_s315][msgsender_MSG]) - _val_s315) && totalSupply_WXB[this] == old(totalSupply_WXB[this])) && holders_WXB[this][p1] == old(holders_WXB[this][p1])) && approach_WXB[this][p2][p3] == old(approach_WXB[this][p2][p3])) && decimals_WXB[this] == old(decimals_WXB[this])) && symbol_WXB[this] == old(symbol_WXB[this])) && name_WXB[this] == old(name_WXB[this]);
[L3]                 success_transferFrom_WXB0 := true;
[L3]                 success_transferFrom_WXB0 := false;
[L3]                 revert := revert_hold;
[L1700]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_WXB(this, msgsender_MSG, msgvalue_MSG, _from_s315, _to_s315, _val_s315);
[L1770]  RET         call CorralChoice_WXB(this);
[L1770]  CALL        call CorralChoice_WXB(this);
[L1663]              havoc msgsender_MSG;
[L1664]              havoc msgvalue_MSG;
[L1665]              havoc choice;
[L1666]              havoc _from_s315;
[L1667]              havoc _to_s315;
[L1668]              havoc _val_s315;
[L1669]              havoc __ret_0_transferFrom;
[L1670]              havoc _to_s213;
[L1671]              havoc _val_s213;
[L1672]              havoc __ret_0_transfer;
[L1673]              havoc _own_s139;
[L1674]              havoc __ret_0_balanceOf;
[L1675]              havoc _owner_s368;
[L1676]              havoc _spender_s368;
[L1677]              havoc __ret_0_allowance;
[L1678]              havoc _spender_s352;
[L1679]              havoc _val_s352;
[L1680]              havoc __ret_0_approve;
[L1681]              havoc __ret_0_totalSupply;
[L1682]              havoc __ret_0_decimals;
[L1683]              havoc __ret_0_symbol;
[L1684]              havoc __ret_0_name;
[L1685]              havoc tmpNow;
[L1686]              havoc gas;
[L1687]              assume gas > 4000000 && gas <= 8000000;
[L1688]              tmpNow := now;
[L1689]              havoc now;
[L1690]              assume now > tmpNow;
[L1691]              assume msgsender_MSG != null;
[L1692]              assume DType[msgsender_MSG] != ERC20;
[L1693]              assume DType[msgsender_MSG] != WXB;
[L1694]              Alloc[msgsender_MSG] := true;
[L1695]  COND TRUE   choice == 9
[L1696]              gas := gas - 21000;
[L1697]  COND TRUE   gas >= 0
[L1698]              assume _val_s315 >= 0 && _val_s315 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1699]              assume msgvalue_MSG == 0;
[L1700]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_WXB(this, msgsender_MSG, msgvalue_MSG, _from_s315, _to_s315, _val_s315);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((((p1 != _from_s315 && p1 != _to_s315) && (p2 != _from_s315 || p3 != msgsender_MSG)) && _from_s315 != _to_s315) && _val_s315 <= holders_WXB[this][_from_s315]) && _val_s315 <= approach_WXB[this][_from_s315][msgsender_MSG]) && holders_WXB[this][_to_s315] + _val_s315 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _val_s315 >= 0) && _val_s315 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && holders_WXB[this][_to_s315] >= 0) && holders_WXB[this][_to_s315] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && holders_WXB[this][_from_s315] >= 0) && holders_WXB[this][_from_s315] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && approach_WXB[this][_from_s315][msgsender_MSG] >= 0) && approach_WXB[this][_from_s315][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_WXB0 := true;
[L3]                 call_transferFrom_WXB0 := false;
[L3]                 revert := revert_hold;
[L302]               havoc __exception;
[L303]               revert := false;
[L304]   COND FALSE  !(__exception)
[L325]   CALL        call __ret_0_ := transferFrom~address~address~uint256_WXB__success(this, msgsender_MSG, msgvalue_MSG, _from_s315, _to_s315, _val_s315);
[L1088]  COND FALSE  !(!(holders_WXB[this][_from_s315] >= _val_s315))
[L1092]  COND FALSE  !(!(approach_WXB[this][_from_s315][msgsender_MSG] >= _val_s315))
[L1096]              assert _val_s315 <= holders_WXB[this][_from_s315];
[L1097]              sum_holders1[this] := sum_holders1[this] - holders_WXB[this][_from_s315];
[L1098]              holders_WXB[this][_from_s315] := (holders_WXB[this][_from_s315] - _val_s315) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1099]              sum_holders1[this] := sum_holders1[this] + holders_WXB[this][_from_s315];
[L1100]              assert _val_s315 <= approach_WXB[this][_from_s315][msgsender_MSG];
[L1101]              sum_approach0[_from_s315] := sum_approach0[_from_s315] - approach_WXB[this][_from_s315][msgsender_MSG];
[L1102]              approach_WXB[this][_from_s315][msgsender_MSG] := (approach_WXB[this][_from_s315][msgsender_MSG] - _val_s315) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1103]              sum_approach0[_from_s315] := sum_approach0[_from_s315] + approach_WXB[this][_from_s315][msgsender_MSG];
[L1104]              sum_holders1[this] := sum_holders1[this] - holders_WXB[this][_to_s315];
[L1105]              holders_WXB[this][_to_s315] := (holders_WXB[this][_to_s315] + _val_s315) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1106]              sum_holders1[this] := sum_holders1[this] + holders_WXB[this][_to_s315];
[L1107]              assert holders_WXB[this][_to_s315] >= _val_s315;
[L1108]              assert { :EventEmitted "Transfer_WXB" } true;
[L1109]              __ret_0_ := true;
[L325]   RET         call __ret_0_ := transferFrom~address~address~uint256_WXB__success(this, msgsender_MSG, msgvalue_MSG, _from_s315, _to_s315, _val_s315);
[L326]               assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !(((((((((__ret_0_ == true && holders_WXB[this][_from_s315] == old(holders_WXB[this][_from_s315]) - _val_s315) && holders_WXB[this][_to_s315] == old(holders_WXB[this][_to_s315]) + _val_s315) && approach_WXB[this][_from_s315][msgsender_MSG] == old(approach_WXB[this][_from_s315][msgsender_MSG]) - _val_s315) && totalSupply_WXB[this] == old(totalSupply_WXB[this])) && holders_WXB[this][p1] == old(holders_WXB[this][p1])) && approach_WXB[this][p2][p3] == old(approach_WXB[this][p2][p3])) && decimals_WXB[this] == old(decimals_WXB[this])) && symbol_WXB[this] == old(symbol_WXB[this])) && name_WXB[this] == old(name_WXB[this]));
[L3]                 revert := revert_hold;
[L1700]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_WXB(this, msgsender_MSG, msgvalue_MSG, _from_s315, _to_s315, _val_s315);
[L1770]  RET         call CorralChoice_WXB(this);

Loop:
[L1770]  CALL        call CorralChoice_WXB(this);
[L1663]              havoc msgsender_MSG;
[L1664]              havoc msgvalue_MSG;
[L1665]              havoc choice;
[L1666]              havoc _from_s315;
[L1667]              havoc _to_s315;
[L1668]              havoc _val_s315;
[L1669]              havoc __ret_0_transferFrom;
[L1670]              havoc _to_s213;
[L1671]              havoc _val_s213;
[L1672]              havoc __ret_0_transfer;
[L1673]              havoc _own_s139;
[L1674]              havoc __ret_0_balanceOf;
[L1675]              havoc _owner_s368;
[L1676]              havoc _spender_s368;
[L1677]              havoc __ret_0_allowance;
[L1678]              havoc _spender_s352;
[L1679]              havoc _val_s352;
[L1680]              havoc __ret_0_approve;
[L1681]              havoc __ret_0_totalSupply;
[L1682]              havoc __ret_0_decimals;
[L1683]              havoc __ret_0_symbol;
[L1684]              havoc __ret_0_name;
[L1685]              havoc tmpNow;
[L1686]              havoc gas;
[L1687]              assume gas > 4000000 && gas <= 8000000;
[L1688]              tmpNow := now;
[L1689]              havoc now;
[L1690]              assume now > tmpNow;
[L1691]              assume msgsender_MSG != null;
[L1692]              assume DType[msgsender_MSG] != ERC20;
[L1693]              assume DType[msgsender_MSG] != WXB;
[L1694]              Alloc[msgsender_MSG] := true;
[L1695]  COND FALSE  !(choice == 9)
[L1702]  COND FALSE  !(choice == 8)
[L1709]  COND FALSE  !(choice == 7)
[L1715]  COND FALSE  !(choice == 6)
[L1721]  COND TRUE   choice == 5
[L1722]              gas := gas - 21000;
[L1723]  COND TRUE   gas >= 0
[L1724]              assume _val_s352 >= 0 && _val_s352 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1725]              assume msgvalue_MSG == 0;
[L1726]  CALL        call __ret_0_approve := approve~address~uint256_WXB(this, msgsender_MSG, msgvalue_MSG, _spender_s352, _val_s352);
[L354]               havoc __exception;
[L355]               revert := false;
[L356]   COND FALSE  !(__exception)
[L377]   CALL        call __ret_0_ := approve~address~uint256_WXB__success(this, msgsender_MSG, msgvalue_MSG, _spender_s352, _val_s352);
[L1128]  COND FALSE  !(!(holders_WXB[this][msgsender_MSG] >= _val_s352))
[L1132]              sum_approach0[msgsender_MSG] := sum_approach0[msgsender_MSG] - approach_WXB[this][msgsender_MSG][_spender_s352];
[L1133]              approach_WXB[this][msgsender_MSG][_spender_s352] := _val_s352;
[L1134]              sum_approach0[msgsender_MSG] := sum_approach0[msgsender_MSG] + approach_WXB[this][msgsender_MSG][_spender_s352];
[L1135]              assert { :EventEmitted "Approval_WXB" } true;
[L1136]              __ret_0_ := true;
[L377]   RET         call __ret_0_ := approve~address~uint256_WXB__success(this, msgsender_MSG, msgvalue_MSG, _spender_s352, _val_s352);
[L378]               assume !revert && gas >= 0;
[L1726]  RET         call __ret_0_approve := approve~address~uint256_WXB(this, msgsender_MSG, msgvalue_MSG, _spender_s352, _val_s352);
[L1770]  RET         call CorralChoice_WXB(this);

[2020-11-25 08:50:54,876 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 08:50:54,877 INFO  L82        PathProgramCache]: Analyzing trace with hash -2126534940, now seen corresponding path program 2 times
[2020-11-25 08:50:54,877 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 08:50:55,078 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 08:50:57,266 WARN  L188               SmtUtils]: Spent 144.00 ms on a formula simplification. DAG size of input: 253 DAG size of output: 52
[2020-11-25 08:50:57,668 WARN  L188               SmtUtils]: Spent 203.00 ms on a formula simplification. DAG size of input: 262 DAG size of output: 63
[2020-11-25 08:50:58,412 WARN  L188               SmtUtils]: Spent 410.00 ms on a formula simplification. DAG size of input: 376 DAG size of output: 39
[2020-11-25 08:50:58,765 WARN  L188               SmtUtils]: Spent 148.00 ms on a formula simplification. DAG size of input: 220 DAG size of output: 49
[2020-11-25 08:51:01,498 WARN  L188               SmtUtils]: Spent 2.17 s on a formula simplification. DAG size of input: 706 DAG size of output: 114
[2020-11-25 08:51:04,806 WARN  L188               SmtUtils]: Spent 1.86 s on a formula simplification. DAG size of input: 696 DAG size of output: 97
[2020-11-25 08:51:10,307 WARN  L188               SmtUtils]: Spent 3.80 s on a formula simplification. DAG size of input: 1099 DAG size of output: 85
[2020-11-25 08:51:11,549 WARN  L250   erpolLogProxyWrapper]: Already inconsistent.
[2020-11-25 08:51:11,840 WARN  L188               SmtUtils]: Spent 507.00 ms on a formula simplification. DAG size of input: 214 DAG size of output: 61
[2020-11-25 08:51:13,229 WARN  L188               SmtUtils]: Spent 656.00 ms on a formula simplification. DAG size of input: 301 DAG size of output: 118
[2020-11-25 08:51:14,670 WARN  L188               SmtUtils]: Spent 620.00 ms on a formula simplification. DAG size of input: 271 DAG size of output: 84
[2020-11-25 08:51:15,748 WARN  L188               SmtUtils]: Spent 544.00 ms on a formula simplification. DAG size of input: 256 DAG size of output: 66
[2020-11-25 08:51:16,470 INFO  L134       CoverageAnalysis]: Checked inductivity of 170 backedges. 1 proven. 42 refuted. 0 times theorem prover too weak. 127 trivial. 0 not checked.
[2020-11-25 08:51:16,470 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 08:51:16,470 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [41] total 41
[2020-11-25 08:51:16,470 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 08:51:16,471 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 42 interpolants.
[2020-11-25 08:51:16,471 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=143, Invalid=1579, Unknown=0, NotChecked=0, Total=1722
[2020-11-25 08:51:16,471 INFO  L87              Difference]: Start difference. First operand 1041 states and 1191 transitions. cyclomatic complexity: 160 Second operand 42 states.
[2020-11-25 08:51:18,894 WARN  L188               SmtUtils]: Spent 106.00 ms on a formula simplification. DAG size of input: 91 DAG size of output: 84
[2020-11-25 08:51:19,663 WARN  L188               SmtUtils]: Spent 155.00 ms on a formula simplification. DAG size of input: 137 DAG size of output: 116
[2020-11-25 08:51:21,124 WARN  L188               SmtUtils]: Spent 1.20 s on a formula simplification. DAG size of input: 209 DAG size of output: 181
[2020-11-25 08:51:21,792 WARN  L188               SmtUtils]: Spent 434.00 ms on a formula simplification. DAG size of input: 160 DAG size of output: 119
[2020-11-25 08:51:23,130 WARN  L188               SmtUtils]: Spent 1.06 s on a formula simplification. DAG size of input: 212 DAG size of output: 174
[2020-11-25 08:51:24,774 WARN  L188               SmtUtils]: Spent 1.40 s on a formula simplification. DAG size of input: 230 DAG size of output: 183
[2020-11-25 08:51:25,324 WARN  L188               SmtUtils]: Spent 101.00 ms on a formula simplification. DAG size of input: 95 DAG size of output: 84
[2020-11-25 08:51:28,754 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 08:51:28,754 INFO  L93              Difference]: Finished difference Result 1173 states and 1375 transitions.
[2020-11-25 08:51:28,754 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 33 states. 
[2020-11-25 08:51:28,754 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 1173 states and 1375 transitions.
[2020-11-25 08:51:28,757 INFO  L131   ngComponentsAnalysis]: Automaton has 4 accepting balls. 8
[2020-11-25 08:51:28,760 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 1173 states to 1173 states and 1375 transitions.
[2020-11-25 08:51:28,760 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 688
[2020-11-25 08:51:28,760 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 688
[2020-11-25 08:51:28,760 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 1173 states and 1375 transitions.
[2020-11-25 08:51:28,761 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 08:51:28,761 INFO  L728         BuchiCegarLoop]: Abstraction has 1173 states and 1375 transitions.
[2020-11-25 08:51:28,761 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 1173 states and 1375 transitions.
[2020-11-25 08:51:28,766 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 1173 to 1043.
[2020-11-25 08:51:28,766 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 1043 states.
[2020-11-25 08:51:28,767 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 1043 states to 1043 states and 1198 transitions.
[2020-11-25 08:51:28,768 INFO  L751         BuchiCegarLoop]: Abstraction has 1043 states and 1198 transitions.
[2020-11-25 08:51:28,768 INFO  L631         BuchiCegarLoop]: Abstraction has 1043 states and 1198 transitions.
[2020-11-25 08:51:28,768 INFO  L445         BuchiCegarLoop]: ======== Iteration 11============
[2020-11-25 08:51:28,768 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 1043 states and 1198 transitions.
[2020-11-25 08:51:28,769 INFO  L131   ngComponentsAnalysis]: Automaton has 3 accepting balls. 6
[2020-11-25 08:51:28,769 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 08:51:28,769 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 08:51:28,770 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 08:51:28,770 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_transferFrom_WXB0 := false;
[L3]                 call_transferFrom_WXB0 := false;
[L3]     CALL        call main();
[L3]                 havoc p3;
[L3]                 havoc p2;
[L3]                 havoc p1;
[L1760]              assume null == 0;
[L1761]  CALL        call this := FreshRefGenerator__success();
[L882]               havoc newRef;
[L883]               assume Alloc[newRef] == false;
[L884]               Alloc[newRef] := true;
[L885]               assume newRef != null;
[L1761]  RET         call this := FreshRefGenerator__success();
[L1762]              assume now >= 0;
[L1763]              assume DType[this] == WXB;
[L1764]              assume msgvalue_MSG == 0;
[L1765]              gas := gas - 53000;
[L1766]  CALL        call WXB_WXB(this, msgsender_MSG, msgvalue_MSG);
[L144]               havoc __exception;
[L145]               revert := false;
[L146]   COND FALSE  !(__exception)
[L167]   CALL        call WXB_WXB__success(this, msgsender_MSG, msgvalue_MSG);
[L986]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L914]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L899]               assume msgsender_MSG != null;
[L900]               Balance[this] := 0;
[L914]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L915]   COND FALSE  !(revert)
[L986]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L987]   COND FALSE  !(revert)
[L990]   CALL        call WXB_WXB_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L949]               assume msgsender_MSG != null;
[L950]               Balance[this] := 0;
[L951]               totalSupply_WXB[this] := 0;
[L952]               decimals_WXB[this] := 0;
[L953]               symbol_WXB[this] := 1199276259;
[L954]               name_WXB[this] := 1199276259;
[L955]               approach_WXB[this] := zeroRefRefintArr();
[L956]               sum_approach0[this] := 0;
[L957]               holders_WXB[this] := zeroRefintArr();
[L958]               sum_holders1[this] := 0;
[L960]               name_WXB[this] := -1225396598;
[L961]               symbol_WXB[this] := 397088534;
[L962]               decimals_WXB[this] := 18;
[L963]               __var_1 := decimals_WXB[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L964]               totalSupply_WXB[this] := nonlinearMul(100000 * 10000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936 * 100, nonlinearPow(10, decimals_WXB[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L965]               sum_holders1[this] := sum_holders1[this] - holders_WXB[this][msgsender_MSG];
[L966]               holders_WXB[this][msgsender_MSG] := totalSupply_WXB[this];
[L967]               sum_holders1[this] := sum_holders1[this] + holders_WXB[this][msgsender_MSG];
[L990]   RET         call WXB_WXB_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L991]   COND FALSE  !(revert)
[L167]   RET         call WXB_WXB__success(this, msgsender_MSG, msgvalue_MSG);
[L168]               assume !revert && gas >= 0;
[L1766]  RET         call WXB_WXB(this, msgsender_MSG, msgvalue_MSG);
[L1767]              assume !revert && gas >= 0;
[L1770]  CALL        call CorralChoice_WXB(this);
[L1663]              havoc msgsender_MSG;
[L1664]              havoc msgvalue_MSG;
[L1665]              havoc choice;
[L1666]              havoc _from_s315;
[L1667]              havoc _to_s315;
[L1668]              havoc _val_s315;
[L1669]              havoc __ret_0_transferFrom;
[L1670]              havoc _to_s213;
[L1671]              havoc _val_s213;
[L1672]              havoc __ret_0_transfer;
[L1673]              havoc _own_s139;
[L1674]              havoc __ret_0_balanceOf;
[L1675]              havoc _owner_s368;
[L1676]              havoc _spender_s368;
[L1677]              havoc __ret_0_allowance;
[L1678]              havoc _spender_s352;
[L1679]              havoc _val_s352;
[L1680]              havoc __ret_0_approve;
[L1681]              havoc __ret_0_totalSupply;
[L1682]              havoc __ret_0_decimals;
[L1683]              havoc __ret_0_symbol;
[L1684]              havoc __ret_0_name;
[L1685]              havoc tmpNow;
[L1686]              havoc gas;
[L1687]              assume gas > 4000000 && gas <= 8000000;
[L1688]              tmpNow := now;
[L1689]              havoc now;
[L1690]              assume now > tmpNow;
[L1691]              assume msgsender_MSG != null;
[L1692]              assume DType[msgsender_MSG] != ERC20;
[L1693]              assume DType[msgsender_MSG] != WXB;
[L1694]              Alloc[msgsender_MSG] := true;
[L1695]  COND FALSE  !(choice == 9)
[L1702]  COND FALSE  !(choice == 8)
[L1709]  COND FALSE  !(choice == 7)
[L1715]  COND FALSE  !(choice == 6)
[L1721]  COND TRUE   choice == 5
[L1722]              gas := gas - 21000;
[L1723]  COND TRUE   gas >= 0
[L1724]              assume _val_s352 >= 0 && _val_s352 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1725]              assume msgvalue_MSG == 0;
[L1726]  CALL        call __ret_0_approve := approve~address~uint256_WXB(this, msgsender_MSG, msgvalue_MSG, _spender_s352, _val_s352);
[L354]               havoc __exception;
[L355]               revert := false;
[L356]   COND FALSE  !(__exception)
[L377]   CALL        call __ret_0_ := approve~address~uint256_WXB__success(this, msgsender_MSG, msgvalue_MSG, _spender_s352, _val_s352);
[L1128]  COND FALSE  !(!(holders_WXB[this][msgsender_MSG] >= _val_s352))
[L1132]              sum_approach0[msgsender_MSG] := sum_approach0[msgsender_MSG] - approach_WXB[this][msgsender_MSG][_spender_s352];
[L1133]              approach_WXB[this][msgsender_MSG][_spender_s352] := _val_s352;
[L1134]              sum_approach0[msgsender_MSG] := sum_approach0[msgsender_MSG] + approach_WXB[this][msgsender_MSG][_spender_s352];
[L1135]              assert { :EventEmitted "Approval_WXB" } true;
[L1136]              __ret_0_ := true;
[L377]   RET         call __ret_0_ := approve~address~uint256_WXB__success(this, msgsender_MSG, msgvalue_MSG, _spender_s352, _val_s352);
[L378]               assume !revert && gas >= 0;
[L1726]  RET         call __ret_0_approve := approve~address~uint256_WXB(this, msgsender_MSG, msgvalue_MSG, _spender_s352, _val_s352);
[L1770]  RET         call CorralChoice_WXB(this);
[L1770]  CALL        call CorralChoice_WXB(this);
[L1663]              havoc msgsender_MSG;
[L1664]              havoc msgvalue_MSG;
[L1665]              havoc choice;
[L1666]              havoc _from_s315;
[L1667]              havoc _to_s315;
[L1668]              havoc _val_s315;
[L1669]              havoc __ret_0_transferFrom;
[L1670]              havoc _to_s213;
[L1671]              havoc _val_s213;
[L1672]              havoc __ret_0_transfer;
[L1673]              havoc _own_s139;
[L1674]              havoc __ret_0_balanceOf;
[L1675]              havoc _owner_s368;
[L1676]              havoc _spender_s368;
[L1677]              havoc __ret_0_allowance;
[L1678]              havoc _spender_s352;
[L1679]              havoc _val_s352;
[L1680]              havoc __ret_0_approve;
[L1681]              havoc __ret_0_totalSupply;
[L1682]              havoc __ret_0_decimals;
[L1683]              havoc __ret_0_symbol;
[L1684]              havoc __ret_0_name;
[L1685]              havoc tmpNow;
[L1686]              havoc gas;
[L1687]              assume gas > 4000000 && gas <= 8000000;
[L1688]              tmpNow := now;
[L1689]              havoc now;
[L1690]              assume now > tmpNow;
[L1691]              assume msgsender_MSG != null;
[L1692]              assume DType[msgsender_MSG] != ERC20;
[L1693]              assume DType[msgsender_MSG] != WXB;
[L1694]              Alloc[msgsender_MSG] := true;
[L1695]  COND TRUE   choice == 9
[L1696]              gas := gas - 21000;
[L1697]  COND TRUE   gas >= 0
[L1698]              assume _val_s315 >= 0 && _val_s315 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1699]              assume msgvalue_MSG == 0;
[L1700]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_WXB(this, msgsender_MSG, msgvalue_MSG, _from_s315, _to_s315, _val_s315);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !((((((((((((((p1 != _from_s315 && p1 != _to_s315) && (p2 != _from_s315 || p3 != msgsender_MSG)) && _from_s315 != _to_s315) && _val_s315 <= holders_WXB[this][_from_s315]) && _val_s315 <= approach_WXB[this][_from_s315][msgsender_MSG]) && holders_WXB[this][_to_s315] + _val_s315 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _val_s315 >= 0) && _val_s315 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && holders_WXB[this][_to_s315] >= 0) && holders_WXB[this][_to_s315] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && holders_WXB[this][_from_s315] >= 0) && holders_WXB[this][_from_s315] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && approach_WXB[this][_from_s315][msgsender_MSG] >= 0) && approach_WXB[this][_from_s315][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L3]                 revert := revert_hold;
[L302]               havoc __exception;
[L303]               revert := false;
[L304]   COND FALSE  !(__exception)
[L325]   CALL        call __ret_0_ := transferFrom~address~address~uint256_WXB__success(this, msgsender_MSG, msgvalue_MSG, _from_s315, _to_s315, _val_s315);
[L1088]  COND FALSE  !(!(holders_WXB[this][_from_s315] >= _val_s315))
[L1092]  COND FALSE  !(!(approach_WXB[this][_from_s315][msgsender_MSG] >= _val_s315))
[L1096]              assert _val_s315 <= holders_WXB[this][_from_s315];
[L1097]              sum_holders1[this] := sum_holders1[this] - holders_WXB[this][_from_s315];
[L1098]              holders_WXB[this][_from_s315] := (holders_WXB[this][_from_s315] - _val_s315) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1099]              sum_holders1[this] := sum_holders1[this] + holders_WXB[this][_from_s315];
[L1100]              assert _val_s315 <= approach_WXB[this][_from_s315][msgsender_MSG];
[L1101]              sum_approach0[_from_s315] := sum_approach0[_from_s315] - approach_WXB[this][_from_s315][msgsender_MSG];
[L1102]              approach_WXB[this][_from_s315][msgsender_MSG] := (approach_WXB[this][_from_s315][msgsender_MSG] - _val_s315) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1103]              sum_approach0[_from_s315] := sum_approach0[_from_s315] + approach_WXB[this][_from_s315][msgsender_MSG];
[L1104]              sum_holders1[this] := sum_holders1[this] - holders_WXB[this][_to_s315];
[L1105]              holders_WXB[this][_to_s315] := (holders_WXB[this][_to_s315] + _val_s315) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1106]              sum_holders1[this] := sum_holders1[this] + holders_WXB[this][_to_s315];
[L1107]              assert holders_WXB[this][_to_s315] >= _val_s315;
[L1108]              assert { :EventEmitted "Transfer_WXB" } true;
[L1109]              __ret_0_ := true;
[L325]   RET         call __ret_0_ := transferFrom~address~address~uint256_WXB__success(this, msgsender_MSG, msgvalue_MSG, _from_s315, _to_s315, _val_s315);
[L326]               assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !(((((((((__ret_0_ == true && holders_WXB[this][_from_s315] == old(holders_WXB[this][_from_s315]) - _val_s315) && holders_WXB[this][_to_s315] == old(holders_WXB[this][_to_s315]) + _val_s315) && approach_WXB[this][_from_s315][msgsender_MSG] == old(approach_WXB[this][_from_s315][msgsender_MSG]) - _val_s315) && totalSupply_WXB[this] == old(totalSupply_WXB[this])) && holders_WXB[this][p1] == old(holders_WXB[this][p1])) && approach_WXB[this][p2][p3] == old(approach_WXB[this][p2][p3])) && decimals_WXB[this] == old(decimals_WXB[this])) && symbol_WXB[this] == old(symbol_WXB[this])) && name_WXB[this] == old(name_WXB[this]));
[L3]                 revert := revert_hold;
[L1700]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_WXB(this, msgsender_MSG, msgvalue_MSG, _from_s315, _to_s315, _val_s315);
[L1770]  RET         call CorralChoice_WXB(this);
[L1770]  CALL        call CorralChoice_WXB(this);
[L1663]              havoc msgsender_MSG;
[L1664]              havoc msgvalue_MSG;
[L1665]              havoc choice;
[L1666]              havoc _from_s315;
[L1667]              havoc _to_s315;
[L1668]              havoc _val_s315;
[L1669]              havoc __ret_0_transferFrom;
[L1670]              havoc _to_s213;
[L1671]              havoc _val_s213;
[L1672]              havoc __ret_0_transfer;
[L1673]              havoc _own_s139;
[L1674]              havoc __ret_0_balanceOf;
[L1675]              havoc _owner_s368;
[L1676]              havoc _spender_s368;
[L1677]              havoc __ret_0_allowance;
[L1678]              havoc _spender_s352;
[L1679]              havoc _val_s352;
[L1680]              havoc __ret_0_approve;
[L1681]              havoc __ret_0_totalSupply;
[L1682]              havoc __ret_0_decimals;
[L1683]              havoc __ret_0_symbol;
[L1684]              havoc __ret_0_name;
[L1685]              havoc tmpNow;
[L1686]              havoc gas;
[L1687]              assume gas > 4000000 && gas <= 8000000;
[L1688]              tmpNow := now;
[L1689]              havoc now;
[L1690]              assume now > tmpNow;
[L1691]              assume msgsender_MSG != null;
[L1692]              assume DType[msgsender_MSG] != ERC20;
[L1693]              assume DType[msgsender_MSG] != WXB;
[L1694]              Alloc[msgsender_MSG] := true;
[L1695]  COND TRUE   choice == 9
[L1696]              gas := gas - 21000;
[L1697]  COND TRUE   gas >= 0
[L1698]              assume _val_s315 >= 0 && _val_s315 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1699]              assume msgvalue_MSG == 0;
[L1700]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_WXB(this, msgsender_MSG, msgvalue_MSG, _from_s315, _to_s315, _val_s315);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((((p1 != _from_s315 && p1 != _to_s315) && (p2 != _from_s315 || p3 != msgsender_MSG)) && _from_s315 != _to_s315) && _val_s315 <= holders_WXB[this][_from_s315]) && _val_s315 <= approach_WXB[this][_from_s315][msgsender_MSG]) && holders_WXB[this][_to_s315] + _val_s315 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _val_s315 >= 0) && _val_s315 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && holders_WXB[this][_to_s315] >= 0) && holders_WXB[this][_to_s315] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && holders_WXB[this][_from_s315] >= 0) && holders_WXB[this][_from_s315] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && approach_WXB[this][_from_s315][msgsender_MSG] >= 0) && approach_WXB[this][_from_s315][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_WXB0 := true;
[L3]                 call_transferFrom_WXB0 := false;
[L3]                 revert := revert_hold;
[L302]               havoc __exception;
[L303]               revert := false;
[L304]   COND FALSE  !(__exception)
[L325]   CALL        call __ret_0_ := transferFrom~address~address~uint256_WXB__success(this, msgsender_MSG, msgvalue_MSG, _from_s315, _to_s315, _val_s315);
[L1088]  COND FALSE  !(!(holders_WXB[this][_from_s315] >= _val_s315))
[L1092]  COND FALSE  !(!(approach_WXB[this][_from_s315][msgsender_MSG] >= _val_s315))
[L1096]              assert _val_s315 <= holders_WXB[this][_from_s315];
[L1097]              sum_holders1[this] := sum_holders1[this] - holders_WXB[this][_from_s315];
[L1098]              holders_WXB[this][_from_s315] := (holders_WXB[this][_from_s315] - _val_s315) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1099]              sum_holders1[this] := sum_holders1[this] + holders_WXB[this][_from_s315];
[L1100]              assert _val_s315 <= approach_WXB[this][_from_s315][msgsender_MSG];
[L1101]              sum_approach0[_from_s315] := sum_approach0[_from_s315] - approach_WXB[this][_from_s315][msgsender_MSG];
[L1102]              approach_WXB[this][_from_s315][msgsender_MSG] := (approach_WXB[this][_from_s315][msgsender_MSG] - _val_s315) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1103]              sum_approach0[_from_s315] := sum_approach0[_from_s315] + approach_WXB[this][_from_s315][msgsender_MSG];
[L1104]              sum_holders1[this] := sum_holders1[this] - holders_WXB[this][_to_s315];
[L1105]              holders_WXB[this][_to_s315] := (holders_WXB[this][_to_s315] + _val_s315) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1106]              sum_holders1[this] := sum_holders1[this] + holders_WXB[this][_to_s315];
[L1107]              assert holders_WXB[this][_to_s315] >= _val_s315;
[L1108]              assert { :EventEmitted "Transfer_WXB" } true;
[L1109]              __ret_0_ := true;
[L325]   RET         call __ret_0_ := transferFrom~address~address~uint256_WXB__success(this, msgsender_MSG, msgvalue_MSG, _from_s315, _to_s315, _val_s315);
[L326]               assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !(((((((((__ret_0_ == true && holders_WXB[this][_from_s315] == old(holders_WXB[this][_from_s315]) - _val_s315) && holders_WXB[this][_to_s315] == old(holders_WXB[this][_to_s315]) + _val_s315) && approach_WXB[this][_from_s315][msgsender_MSG] == old(approach_WXB[this][_from_s315][msgsender_MSG]) - _val_s315) && totalSupply_WXB[this] == old(totalSupply_WXB[this])) && holders_WXB[this][p1] == old(holders_WXB[this][p1])) && approach_WXB[this][p2][p3] == old(approach_WXB[this][p2][p3])) && decimals_WXB[this] == old(decimals_WXB[this])) && symbol_WXB[this] == old(symbol_WXB[this])) && name_WXB[this] == old(name_WXB[this]));
[L3]                 revert := revert_hold;
[L1700]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_WXB(this, msgsender_MSG, msgvalue_MSG, _from_s315, _to_s315, _val_s315);
[L1770]  RET         call CorralChoice_WXB(this);

Loop:
[L1770]  CALL        call CorralChoice_WXB(this);
[L1663]              havoc msgsender_MSG;
[L1664]              havoc msgvalue_MSG;
[L1665]              havoc choice;
[L1666]              havoc _from_s315;
[L1667]              havoc _to_s315;
[L1668]              havoc _val_s315;
[L1669]              havoc __ret_0_transferFrom;
[L1670]              havoc _to_s213;
[L1671]              havoc _val_s213;
[L1672]              havoc __ret_0_transfer;
[L1673]              havoc _own_s139;
[L1674]              havoc __ret_0_balanceOf;
[L1675]              havoc _owner_s368;
[L1676]              havoc _spender_s368;
[L1677]              havoc __ret_0_allowance;
[L1678]              havoc _spender_s352;
[L1679]              havoc _val_s352;
[L1680]              havoc __ret_0_approve;
[L1681]              havoc __ret_0_totalSupply;
[L1682]              havoc __ret_0_decimals;
[L1683]              havoc __ret_0_symbol;
[L1684]              havoc __ret_0_name;
[L1685]              havoc tmpNow;
[L1686]              havoc gas;
[L1687]              assume gas > 4000000 && gas <= 8000000;
[L1688]              tmpNow := now;
[L1689]              havoc now;
[L1690]              assume now > tmpNow;
[L1691]              assume msgsender_MSG != null;
[L1692]              assume DType[msgsender_MSG] != ERC20;
[L1693]              assume DType[msgsender_MSG] != WXB;
[L1694]              Alloc[msgsender_MSG] := true;
[L1695]  COND TRUE   choice == 9
[L1696]              gas := gas - 21000;
[L1697]  COND FALSE  !(gas >= 0)
[L1770]  RET         call CorralChoice_WXB(this);

[2020-11-25 08:51:28,772 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 08:51:28,772 INFO  L82        PathProgramCache]: Analyzing trace with hash -700371906, now seen corresponding path program 1 times
[2020-11-25 08:51:28,772 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 08:51:28,936 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 08:51:29,206 INFO  L134       CoverageAnalysis]: Checked inductivity of 117 backedges. 4 proven. 0 refuted. 0 times theorem prover too weak. 113 trivial. 0 not checked.
[2020-11-25 08:51:29,206 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 08:51:29,206 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [12] imperfect sequences [] total 12
[2020-11-25 08:51:29,206 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 08:51:29,207 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 12 interpolants.
[2020-11-25 08:51:29,207 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=27, Invalid=105, Unknown=0, NotChecked=0, Total=132
[2020-11-25 08:51:29,207 INFO  L87              Difference]: Start difference. First operand 1043 states and 1198 transitions. cyclomatic complexity: 166 Second operand 12 states.
[2020-11-25 08:51:29,685 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 08:51:29,685 INFO  L93              Difference]: Finished difference Result 500 states and 559 transitions.
[2020-11-25 08:51:29,685 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 10 states. 
[2020-11-25 08:51:29,686 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 500 states and 559 transitions.
[2020-11-25 08:51:29,686 INFO  L131   ngComponentsAnalysis]: Automaton has 0 accepting balls. 0
[2020-11-25 08:51:29,687 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 500 states to 0 states and 0 transitions.
[2020-11-25 08:51:29,687 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 0
[2020-11-25 08:51:29,687 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 0
[2020-11-25 08:51:29,687 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 0 states and 0 transitions.
[2020-11-25 08:51:29,687 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 08:51:29,687 INFO  L728         BuchiCegarLoop]: Abstraction has 0 states and 0 transitions.
[2020-11-25 08:51:29,687 INFO  L751         BuchiCegarLoop]: Abstraction has 0 states and 0 transitions.
[2020-11-25 08:51:29,687 INFO  L631         BuchiCegarLoop]: Abstraction has 0 states and 0 transitions.
[2020-11-25 08:51:29,687 INFO  L445         BuchiCegarLoop]: ======== Iteration 12============
[2020-11-25 08:51:29,687 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 0 states and 0 transitions.
[2020-11-25 08:51:29,687 INFO  L131   ngComponentsAnalysis]: Automaton has 0 accepting balls. 0
[2020-11-25 08:51:29,687 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is true
[2020-11-25 08:51:29,690 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer CFG 25.11 08:51:29 BasicIcfg
[2020-11-25 08:51:29,690 INFO  L132        PluginConnector]: ------------------------ END BuchiAutomizer----------------------------
[2020-11-25 08:51:29,690 INFO  L168              Benchmark]: Toolchain (without parser) took 56334.93 ms. Allocated memory was 1.0 GB in the beginning and 3.9 GB in the end (delta: 2.8 GB). Free memory was 940.6 MB in the beginning and 3.3 GB in the end (delta: -2.3 GB). Peak memory consumption was 494.7 MB. Max. memory is 15.3 GB.
[2020-11-25 08:51:29,690 INFO  L168              Benchmark]: Boogie PL CUP Parser took 0.15 ms. Allocated memory is still 1.0 GB. Free memory is still 951.3 MB. There was no memory consumed. Max. memory is 15.3 GB.
[2020-11-25 08:51:29,691 INFO  L168              Benchmark]: Boogie Preprocessor took 70.13 ms. Allocated memory is still 1.0 GB. Free memory was 940.6 MB in the beginning and 935.2 MB in the end (delta: 5.4 MB). Peak memory consumption was 5.4 MB. Max. memory is 15.3 GB.
[2020-11-25 08:51:29,691 INFO  L168              Benchmark]: UtopiaSpecLang took 49.93 ms. Allocated memory is still 1.0 GB. Free memory was 935.2 MB in the beginning and 929.8 MB in the end (delta: 5.4 MB). Peak memory consumption was 5.4 MB. Max. memory is 15.3 GB.
[2020-11-25 08:51:29,691 INFO  L168              Benchmark]: Boogie Printer took 8.99 ms. Allocated memory is still 1.0 GB. Free memory is still 929.8 MB. There was no memory consumed. Max. memory is 15.3 GB.
[2020-11-25 08:51:29,691 INFO  L168              Benchmark]: RCFGBuilder took 543.47 ms. Allocated memory is still 1.0 GB. Free memory was 929.8 MB in the beginning and 881.4 MB in the end (delta: 48.4 MB). Peak memory consumption was 48.4 MB. Max. memory is 15.3 GB.
[2020-11-25 08:51:29,691 INFO  L168              Benchmark]: UtopiaLTL2Aut took 40.70 ms. Allocated memory is still 1.0 GB. Free memory was 881.4 MB in the beginning and 872.5 MB in the end (delta: 8.9 MB). Peak memory consumption was 8.9 MB. Max. memory is 15.3 GB.
[2020-11-25 08:51:29,692 INFO  L168              Benchmark]: BÃ¼chi Program Product took 913.71 ms. Allocated memory was 1.0 GB in the beginning and 1.1 GB in the end (delta: 59.2 MB). Free memory was 872.5 MB in the beginning and 949.3 MB in the end (delta: -76.8 MB). Peak memory consumption was 155.5 MB. Max. memory is 15.3 GB.
[2020-11-25 08:51:29,692 INFO  L168              Benchmark]: BlockEncodingV2 took 73.95 ms. Allocated memory is still 1.1 GB. Free memory was 945.8 MB in the beginning and 910.9 MB in the end (delta: 34.9 MB). Peak memory consumption was 34.9 MB. Max. memory is 15.3 GB.
[2020-11-25 08:51:29,692 INFO  L168              Benchmark]: BuchiAutomizer took 54630.98 ms. Allocated memory was 1.1 GB in the beginning and 3.9 GB in the end (delta: 2.8 GB). Free memory was 910.9 MB in the beginning and 3.3 GB in the end (delta: -2.4 GB). Peak memory consumption was 405.8 MB. Max. memory is 15.3 GB.
[2020-11-25 08:51:29,694 INFO  L337   ainManager$Toolchain]: #######################  End [Toolchain 1] #######################
 --- Results ---
 * Results from de.uni_freiburg.informatik.ultimate.plugins.blockencoding:
  - StatisticsResult: Initial Icfg
    1528 locations, 2549 edges
  - StatisticsResult: Encoded RCFG
    1510 locations, 2506 edges
 * Results from de.uni_freiburg.informatik.ultimate.core:
  - StatisticsResult: Toolchain Benchmarks
    Benchmark results are:
 * Boogie PL CUP Parser took 0.15 ms. Allocated memory is still 1.0 GB. Free memory is still 951.3 MB. There was no memory consumed. Max. memory is 15.3 GB.
 * Boogie Preprocessor took 70.13 ms. Allocated memory is still 1.0 GB. Free memory was 940.6 MB in the beginning and 935.2 MB in the end (delta: 5.4 MB). Peak memory consumption was 5.4 MB. Max. memory is 15.3 GB.
 * UtopiaSpecLang took 49.93 ms. Allocated memory is still 1.0 GB. Free memory was 935.2 MB in the beginning and 929.8 MB in the end (delta: 5.4 MB). Peak memory consumption was 5.4 MB. Max. memory is 15.3 GB.
 * Boogie Printer took 8.99 ms. Allocated memory is still 1.0 GB. Free memory is still 929.8 MB. There was no memory consumed. Max. memory is 15.3 GB.
 * RCFGBuilder took 543.47 ms. Allocated memory is still 1.0 GB. Free memory was 929.8 MB in the beginning and 881.4 MB in the end (delta: 48.4 MB). Peak memory consumption was 48.4 MB. Max. memory is 15.3 GB.
 * UtopiaLTL2Aut took 40.70 ms. Allocated memory is still 1.0 GB. Free memory was 881.4 MB in the beginning and 872.5 MB in the end (delta: 8.9 MB). Peak memory consumption was 8.9 MB. Max. memory is 15.3 GB.
 * BÃ¼chi Program Product took 913.71 ms. Allocated memory was 1.0 GB in the beginning and 1.1 GB in the end (delta: 59.2 MB). Free memory was 872.5 MB in the beginning and 949.3 MB in the end (delta: -76.8 MB). Peak memory consumption was 155.5 MB. Max. memory is 15.3 GB.
 * BlockEncodingV2 took 73.95 ms. Allocated memory is still 1.1 GB. Free memory was 945.8 MB in the beginning and 910.9 MB in the end (delta: 34.9 MB). Peak memory consumption was 34.9 MB. Max. memory is 15.3 GB.
 * BuchiAutomizer took 54630.98 ms. Allocated memory was 1.1 GB in the beginning and 3.9 GB in the end (delta: 2.8 GB). Free memory was 910.9 MB in the beginning and 3.3 GB in the end (delta: -2.4 GB). Peak memory consumption was 405.8 MB. Max. memory is 15.3 GB.
 * Results from de.uni_freiburg.informatik.ultimate.buchiprogramproduct:
  - StatisticsResult: Initial property automaton
    2 locations, 3 edges
  - StatisticsResult: Initial RCFG
    660 locations, 788 edges
  - StatisticsResult: BuchiProgram size
    1528 locations, 2549 edges
 * Results from de.uni_freiburg.informatik.ultimate.plugins.generator.traceabstraction:
  - StatisticsResult: Constructed decomposition of program
    Your program was decomposed into 11 terminating modules (11 trivial, 0 deterministic, 0 nondeterministic). 11 modules have a trivial ranking function, the largest among these consists of 42 locations.
  - StatisticsResult: Timing statistics
    BÃ¼chiAutomizer plugin needed 54.6s and 12 iterations.  TraceHistogramMax:3. Analysis of lassos took 29.3s. Construction of modules took 14.6s. BÃ¼chi inclusion checks took 10.1s. Highest rank in rank-based complementation 0. Minimization of det autom 11. Minimization of nondet autom 0. Automata minimization 0.1s AutomataMinimizationTime, 10 MinimizatonAttempts, 1258 StatesRemovedByMinimization, 9 NontrivialMinimizations. Non-live state removal took 0.1s Buchi closure took 0.0s. Biggest automaton had 1234 states and ocurred in iteration 5.	Nontrivial modules had stage [0, 0, 0, 0, 0].	InterpolantCoveringCapabilityFinite: 0/0	InterpolantCoveringCapabilityBuchi: 0/0	HoareTripleCheckerStatistics: 11087 SDtfs, 14729 SDslu, 41147 SDs, 0 SdLazy, 49693 SolverSat, 2381 SolverUnsat, 0 SolverUnknown, 0 SolverNotchecked, 14.6s Time	LassoAnalysisResults: nont0 unkn0 SFLI0 SFLT0 conc0 concLT0 SILN0 SILU11 SILI0 SILT0 lasso0 LassoPreprocessingBenchmarks: LassoTerminationAnalysisBenchmarks: not availableLassoTerminationAnalysisBenchmarks: LassoNonterminationAnalysisSatFixpoint: 0	LassoNonterminationAnalysisSatUnbounded: 0	LassoNonterminationAnalysisUnsat: 0	LassoNonterminationAnalysisUnknown: 0	LassoNonterminationAnalysisTime: 0.0s	
  - AllSpecificationsHoldResult: All specifications hold
    Buchi Automizer proved that the LTL property ! ( ( []( (call_transferFrom_WX(success_transferFrom_WXB0)0) ==> ( <>(success_transferFrom_WXB0) ) ) )) holds
RESULT: Ultimate proved your program to be correct!
Received shutdown request...
