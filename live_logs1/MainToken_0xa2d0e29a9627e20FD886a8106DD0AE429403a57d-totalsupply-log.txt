This is Ultimate 0.1.24-f1553f5-m
[2020-11-24 21:34:14,473 INFO  L170        SettingsManager]: Resetting all preferences to default values...
[2020-11-24 21:34:14,474 INFO  L174        SettingsManager]: Resetting UltimateCore preferences to default values
[2020-11-24 21:34:14,487 INFO  L177        SettingsManager]: Ultimate Commandline Interface provides no preferences, ignoring...
[2020-11-24 21:34:14,487 INFO  L174        SettingsManager]: Resetting Boogie Preprocessor preferences to default values
[2020-11-24 21:34:14,488 INFO  L174        SettingsManager]: Resetting Boogie Procedure Inliner preferences to default values
[2020-11-24 21:34:14,489 INFO  L174        SettingsManager]: Resetting Abstract Interpretation preferences to default values
[2020-11-24 21:34:14,491 INFO  L174        SettingsManager]: Resetting LassoRanker preferences to default values
[2020-11-24 21:34:14,492 INFO  L174        SettingsManager]: Resetting Reaching Definitions preferences to default values
[2020-11-24 21:34:14,493 INFO  L174        SettingsManager]: Resetting SyntaxChecker preferences to default values
[2020-11-24 21:34:14,494 INFO  L177        SettingsManager]: BÃ¼chi Program Product provides no preferences, ignoring...
[2020-11-24 21:34:14,494 INFO  L174        SettingsManager]: Resetting LTL2Aut preferences to default values
[2020-11-24 21:34:14,495 INFO  L174        SettingsManager]: Resetting PEA to Boogie preferences to default values
[2020-11-24 21:34:14,496 INFO  L174        SettingsManager]: Resetting BlockEncodingV2 preferences to default values
[2020-11-24 21:34:14,497 INFO  L174        SettingsManager]: Resetting ChcToBoogie preferences to default values
[2020-11-24 21:34:14,497 INFO  L174        SettingsManager]: Resetting AutomataScriptInterpreter preferences to default values
[2020-11-24 21:34:14,498 INFO  L174        SettingsManager]: Resetting BuchiAutomizer preferences to default values
[2020-11-24 21:34:14,499 INFO  L174        SettingsManager]: Resetting CACSL2BoogieTranslator preferences to default values
[2020-11-24 21:34:14,501 INFO  L174        SettingsManager]: Resetting CodeCheck preferences to default values
[2020-11-24 21:34:14,502 INFO  L174        SettingsManager]: Resetting InvariantSynthesis preferences to default values
[2020-11-24 21:34:14,503 INFO  L174        SettingsManager]: Resetting RCFGBuilder preferences to default values
[2020-11-24 21:34:14,503 INFO  L174        SettingsManager]: Resetting TraceAbstraction preferences to default values
[2020-11-24 21:34:14,505 INFO  L177        SettingsManager]: TraceAbstractionConcurrent provides no preferences, ignoring...
[2020-11-24 21:34:14,505 INFO  L177        SettingsManager]: TraceAbstractionWithAFAs provides no preferences, ignoring...
[2020-11-24 21:34:14,505 INFO  L174        SettingsManager]: Resetting TreeAutomizer preferences to default values
[2020-11-24 21:34:14,506 INFO  L174        SettingsManager]: Resetting IcfgToChc preferences to default values
[2020-11-24 21:34:14,506 INFO  L174        SettingsManager]: Resetting IcfgTransformer preferences to default values
[2020-11-24 21:34:14,507 INFO  L177        SettingsManager]: ReqToTest provides no preferences, ignoring...
[2020-11-24 21:34:14,507 INFO  L174        SettingsManager]: Resetting UtopiaLTL2Aut preferences to default values
[2020-11-24 21:34:14,507 INFO  L174        SettingsManager]: Resetting UtopiaSpecLang preferences to default values
[2020-11-24 21:34:14,508 INFO  L174        SettingsManager]: Resetting Boogie Printer preferences to default values
[2020-11-24 21:34:14,508 INFO  L174        SettingsManager]: Resetting ChcSmtPrinter preferences to default values
[2020-11-24 21:34:14,509 INFO  L174        SettingsManager]: Resetting ReqPrinter preferences to default values
[2020-11-24 21:34:14,509 INFO  L174        SettingsManager]: Resetting Witness Printer preferences to default values
[2020-11-24 21:34:14,510 INFO  L177        SettingsManager]: Boogie PL CUP Parser provides no preferences, ignoring...
[2020-11-24 21:34:14,510 INFO  L174        SettingsManager]: Resetting CDTParser preferences to default values
[2020-11-24 21:34:14,511 INFO  L177        SettingsManager]: AutomataScriptParser provides no preferences, ignoring...
[2020-11-24 21:34:14,511 INFO  L177        SettingsManager]: ReqParser provides no preferences, ignoring...
[2020-11-24 21:34:14,511 INFO  L174        SettingsManager]: Resetting SmtParser preferences to default values
[2020-11-24 21:34:14,512 INFO  L174        SettingsManager]: Resetting Witness Parser preferences to default values
[2020-11-24 21:34:14,512 INFO  L181        SettingsManager]: Finished resetting all preferences to default values...
[2020-11-24 21:34:14,512 INFO  L98         SettingsManager]: Beginning loading settings from /mnt/data0/jon/SmartPulseTool/SmartPulse/settings.epf
[2020-11-24 21:34:14,521 INFO  L110        SettingsManager]: Loading preferences was successful
[2020-11-24 21:34:14,521 INFO  L112        SettingsManager]: Preferences different from defaults after loading the file:
[2020-11-24 21:34:14,522 INFO  L131        SettingsManager]: Preferences of LTL2Aut differ from their defaults:
[2020-11-24 21:34:14,522 INFO  L133        SettingsManager]:  * Read property from file=true
[2020-11-24 21:34:14,522 INFO  L133        SettingsManager]:  * Path to LTL*BA executable (LTL2BA, LTL3BA)=/mnt/data0/jon/SmartPulseTool/ltl2ba
[2020-11-24 21:34:14,522 INFO  L131        SettingsManager]: Preferences of BlockEncodingV2 differ from their defaults:
[2020-11-24 21:34:14,522 INFO  L133        SettingsManager]:  * Maximize final states=false
[2020-11-24 21:34:14,523 INFO  L133        SettingsManager]:  * Minimize states even if more edges are added than removed.=true
[2020-11-24 21:34:14,523 INFO  L133        SettingsManager]:  * Minimize states using LBE with the strategy=NONE
[2020-11-24 21:34:14,523 INFO  L131        SettingsManager]: Preferences of BuchiAutomizer differ from their defaults:
[2020-11-24 21:34:14,523 INFO  L133        SettingsManager]:  * Compute Interpolants along a Counterexample=Craig_TreeInterpolation
[2020-11-24 21:34:14,523 INFO  L133        SettingsManager]:  * Use old map elimination=false
[2020-11-24 21:34:14,523 INFO  L133        SettingsManager]:  * Try twofold refinement=false
[2020-11-24 21:34:14,523 INFO  L131        SettingsManager]: Preferences of CACSL2BoogieTranslator differ from their defaults:
[2020-11-24 21:34:14,523 INFO  L133        SettingsManager]:  * Check unreachability of error function in SV-COMP mode=false
[2020-11-24 21:34:14,523 INFO  L133        SettingsManager]:  * Overapproximate operations on floating types=true
[2020-11-24 21:34:14,524 INFO  L133        SettingsManager]:  * Check division by zero=IGNORE
[2020-11-24 21:34:14,524 INFO  L133        SettingsManager]:  * Pointer to allocated memory at dereference=ASSUME
[2020-11-24 21:34:14,524 INFO  L133        SettingsManager]:  * If two pointers are subtracted or compared they have the same base address=ASSUME
[2020-11-24 21:34:14,524 INFO  L133        SettingsManager]:  * Check array bounds for arrays that are off heap=ASSUME
[2020-11-24 21:34:14,524 INFO  L133        SettingsManager]:  * Check if freed pointer was valid=false
[2020-11-24 21:34:14,524 INFO  L133        SettingsManager]:  * Use constant arrays=true
[2020-11-24 21:34:14,524 INFO  L133        SettingsManager]:  * Pointer base address is valid at dereference=ASSUME
[2020-11-24 21:34:14,524 INFO  L131        SettingsManager]: Preferences of RCFGBuilder differ from their defaults:
[2020-11-24 21:34:14,524 INFO  L133        SettingsManager]:  * Size of a code block=SingleStatement
[2020-11-24 21:34:14,524 INFO  L133        SettingsManager]:  * SMT solver=Internal_SMTInterpol
[2020-11-24 21:34:14,549 INFO  L81    nceAwareModelManager]: Repository-Root is: /tmp
[2020-11-24 21:34:14,565 INFO  L259   ainManager$Toolchain]: [Toolchain 1]: Applicable parser(s) successfully (re)initialized
[2020-11-24 21:34:14,568 INFO  L215   ainManager$Toolchain]: [Toolchain 1]: Toolchain selected.
[2020-11-24 21:34:14,570 INFO  L271        PluginConnector]: Initializing Boogie PL CUP Parser...
[2020-11-24 21:34:14,570 INFO  L276        PluginConnector]: Boogie PL CUP Parser initialized
[2020-11-24 21:34:14,571 INFO  L430   ainManager$Toolchain]: [Toolchain 1]: Parsing single file: /mnt/data0/jon/SmartPulseTool/MainToken_0xa2d0e29a9627e20FD886a8106DD0AE429403a57d_totalsupply.bpl
[2020-11-24 21:34:14,571 INFO  L111           BoogieParser]: Parsing: '/mnt/data0/jon/SmartPulseTool/MainToken_0xa2d0e29a9627e20FD886a8106DD0AE429403a57d_totalsupply.bpl'
[2020-11-24 21:34:14,716 INFO  L297   ainManager$Toolchain]: ####################### [Toolchain 1] #######################
[2020-11-24 21:34:14,717 INFO  L131        ToolchainWalker]: Walking toolchain with 8 elements.
[2020-11-24 21:34:14,718 INFO  L113        PluginConnector]: ------------------------Boogie Preprocessor----------------------------
[2020-11-24 21:34:14,718 INFO  L271        PluginConnector]: Initializing Boogie Preprocessor...
[2020-11-24 21:34:14,718 INFO  L276        PluginConnector]: Boogie Preprocessor initialized
[2020-11-24 21:34:14,734 INFO  L185        PluginConnector]: Executing the observer EnsureBoogieModelObserver from plugin Boogie Preprocessor for "MainToken_0xa2d0e29a9627e20FD886a8106DD0AE429403a57d_totalsupply.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 24.11 09:34:14" (1/1) ...
[2020-11-24 21:34:14,736 INFO  L185        PluginConnector]: Executing the observer TypeChecker from plugin Boogie Preprocessor for "MainToken_0xa2d0e29a9627e20FD886a8106DD0AE429403a57d_totalsupply.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 24.11 09:34:14" (1/1) ...
[2020-11-24 21:34:14,799 INFO  L185        PluginConnector]: Executing the observer ConstExpander from plugin Boogie Preprocessor for "MainToken_0xa2d0e29a9627e20FD886a8106DD0AE429403a57d_totalsupply.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 24.11 09:34:14" (1/1) ...
[2020-11-24 21:34:14,800 INFO  L185        PluginConnector]: Executing the observer StructExpander from plugin Boogie Preprocessor for "MainToken_0xa2d0e29a9627e20FD886a8106DD0AE429403a57d_totalsupply.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 24.11 09:34:14" (1/1) ...
[2020-11-24 21:34:14,847 INFO  L185        PluginConnector]: Executing the observer UnstructureCode from plugin Boogie Preprocessor for "MainToken_0xa2d0e29a9627e20FD886a8106DD0AE429403a57d_totalsupply.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 24.11 09:34:14" (1/1) ...
[2020-11-24 21:34:14,874 INFO  L185        PluginConnector]: Executing the observer FunctionInliner from plugin Boogie Preprocessor for "MainToken_0xa2d0e29a9627e20FD886a8106DD0AE429403a57d_totalsupply.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 24.11 09:34:14" (1/1) ...
[2020-11-24 21:34:14,894 INFO  L185        PluginConnector]: Executing the observer BoogieSymbolTableConstructor from plugin Boogie Preprocessor for "MainToken_0xa2d0e29a9627e20FD886a8106DD0AE429403a57d_totalsupply.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 24.11 09:34:14" (1/1) ...
[2020-11-24 21:34:14,926 INFO  L132        PluginConnector]: ------------------------ END Boogie Preprocessor----------------------------
[2020-11-24 21:34:14,927 INFO  L113        PluginConnector]: ------------------------UtopiaSpecLang----------------------------
[2020-11-24 21:34:14,927 INFO  L271        PluginConnector]: Initializing UtopiaSpecLang...
[2020-11-24 21:34:14,930 INFO  L276        PluginConnector]: UtopiaSpecLang initialized
[2020-11-24 21:34:14,934 INFO  L185        PluginConnector]: Executing the observer UtopiaSpecLangObserver from plugin UtopiaSpecLang for "MainToken_0xa2d0e29a9627e20FD886a8106DD0AE429403a57d_totalsupply.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 24.11 09:34:14" (1/1) ...
[2020-11-24 21:34:14,964 INFO  L1012  opiaSpecLangObserver]: Parsing LTLPlus Formula to AstNode: [](started(BasicToken.totalSupply, totalSupply__BasicToken[this] >= 0 && totalSupply__BasicToken[this] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(finished(BasicToken.totalSupply, return == totalSupply__BasicToken[this] && totalSupply__BasicToken[this] == old(totalSupply__BasicToken[this]) && balances_BasicToken[this] == old(balances_BasicToken[this]) && allowed_StandardToken[this] == old(allowed_StandardToken[this]) && initialized_MainToken[this] == old(initialized_MainToken[this]) && paused_Pausable[this] == old(paused_Pausable[this]) && mintingFinished_MintableToken[this] == old(mintingFinished_MintableToken[this]) && owner_Ownable[this] == old(owner_Ownable[this]) && chains_FreezableToken[this] == old(chains_FreezableToken[this]) && freezings_FreezableToken[this] == old(freezings_FreezableToken[this]) && freezingBalance_FreezableToken[this] == old(freezingBalance_FreezableToken[this]))))
[2020-11-24 21:34:14,970 INFO  L1016  opiaSpecLangObserver]: Successfully lexed: [](started(BasicToken.totalSupply, totalSupply__BasicToken[this] >= 0 && totalSupply__BasicToken[this] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(finished(BasicToken.totalSupply, return == totalSupply__BasicToken[this] && totalSupply__BasicToken[this] == old(totalSupply__BasicToken[this]) && balances_BasicToken[this] == old(balances_BasicToken[this]) && allowed_StandardToken[this] == old(allowed_StandardToken[this]) && initialized_MainToken[this] == old(initialized_MainToken[this]) && paused_Pausable[this] == old(paused_Pausable[this]) && mintingFinished_MintableToken[this] == old(mintingFinished_MintableToken[this]) && owner_Ownable[this] == old(owner_Ownable[this]) && chains_FreezableToken[this] == old(chains_FreezableToken[this]) && freezings_FreezableToken[this] == old(freezings_FreezableToken[this]) && freezingBalance_FreezableToken[this] == old(freezingBalance_FreezableToken[this]))))
[2020-11-24 21:34:14,978 INFO  L1018  opiaSpecLangObserver]: Successfully parsed: [](started(BasicToken.totalSupply, totalSupply__BasicToken[this] >= 0 && totalSupply__BasicToken[this] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(finished(BasicToken.totalSupply, return == totalSupply__BasicToken[this] && totalSupply__BasicToken[this] == old(totalSupply__BasicToken[this]) && balances_BasicToken[this] == old(balances_BasicToken[this]) && allowed_StandardToken[this] == old(allowed_StandardToken[this]) && initialized_MainToken[this] == old(initialized_MainToken[this]) && paused_Pausable[this] == old(paused_Pausable[this]) && mintingFinished_MintableToken[this] == old(mintingFinished_MintableToken[this]) && owner_Ownable[this] == old(owner_Ownable[this]) && chains_FreezableToken[this] == old(chains_FreezableToken[this]) && freezings_FreezableToken[this] == old(freezings_FreezableToken[this]) && freezingBalance_FreezableToken[this] == old(freezingBalance_FreezableToken[this]))))
[2020-11-24 21:34:14,983 INFO  L636   opiaSpecLangObserver]: Parsed ( totalSupply__BasicToken[this]>=0 && totalSupply__BasicToken[this]<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) to BinaryExpression[LOGICAND,BinaryExpression[COMPGEQ,ArrayAccessExpression[IdentifierExpression[totalSupply__BasicToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,totalSupply_BasicToken>]]],IntegerLiteral[0]],BinaryExpression[COMPLT,ArrayAccessExpression[IdentifierExpression[totalSupply__BasicToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,totalSupply_BasicToken>]]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]]
[2020-11-24 21:34:14,987 INFO  L636   opiaSpecLangObserver]: Parsed ( ( ( ( ( ( ( ( ( ( __ret_0_==totalSupply__BasicToken[this] && totalSupply__BasicToken[this]==( old(totalSupply__BasicToken[this]) ) ) && balances_BasicToken[this]==( old(balances_BasicToken[this]) ) ) && allowed_StandardToken[this]==( old(allowed_StandardToken[this]) ) ) && initialized_MainToken[this]==( old(initialized_MainToken[this]) ) ) && paused_Pausable[this]==( old(paused_Pausable[this]) ) ) && mintingFinished_MintableToken[this]==( old(mintingFinished_MintableToken[this]) ) ) && owner_Ownable[this]==( old(owner_Ownable[this]) ) ) && chains_FreezableToken[this]==( old(chains_FreezableToken[this]) ) ) && freezings_FreezableToken[this]==( old(freezings_FreezableToken[this]) ) ) && freezingBalance_FreezableToken[this]==( old(freezingBalance_FreezableToken[this]) ) ) to BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[COMPEQ,IdentifierExpression[__ret_0_,<IMPLEMENTATION_OUTPARAM,totalSupply_BasicToken>],ArrayAccessExpression[IdentifierExpression[totalSupply__BasicToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,totalSupply_BasicToken>]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[totalSupply__BasicToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,totalSupply_BasicToken>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[totalSupply__BasicToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,totalSupply_BasicToken>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[balances_BasicToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,totalSupply_BasicToken>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[balances_BasicToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,totalSupply_BasicToken>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[allowed_StandardToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,totalSupply_BasicToken>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[allowed_StandardToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,totalSupply_BasicToken>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[initialized_MainToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,totalSupply_BasicToken>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[initialized_MainToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,totalSupply_BasicToken>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[paused_Pausable,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,totalSupply_BasicToken>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[paused_Pausable,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,totalSupply_BasicToken>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[mintingFinished_MintableToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,totalSupply_BasicToken>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[mintingFinished_MintableToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,totalSupply_BasicToken>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[owner_Ownable,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,totalSupply_BasicToken>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[owner_Ownable,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,totalSupply_BasicToken>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[chains_FreezableToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,totalSupply_BasicToken>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[chains_FreezableToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,totalSupply_BasicToken>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[freezings_FreezableToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,totalSupply_BasicToken>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[freezings_FreezableToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,totalSupply_BasicToken>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[freezingBalance_FreezableToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,totalSupply_BasicToken>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[freezingBalance_FreezableToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,totalSupply_BasicToken>]]]]]]
[2020-11-24 21:34:14,997 INFO  L1005  opiaSpecLangObserver]: Compiling: [](started(BasicToken.totalSupply, totalSupply__BasicToken[this] >= 0 && totalSupply__BasicToken[this] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(finished(BasicToken.totalSupply, return == totalSupply__BasicToken[this] && totalSupply__BasicToken[this] == old(totalSupply__BasicToken[this]) && balances_BasicToken[this] == old(balances_BasicToken[this]) && allowed_StandardToken[this] == old(allowed_StandardToken[this]) && initialized_MainToken[this] == old(initialized_MainToken[this]) && paused_Pausable[this] == old(paused_Pausable[this]) && mintingFinished_MintableToken[this] == old(mintingFinished_MintableToken[this]) && owner_Ownable[this] == old(owner_Ownable[this]) && chains_FreezableToken[this] == old(chains_FreezableToken[this]) && freezings_FreezableToken[this] == old(freezings_FreezableToken[this]) && freezingBalance_FreezableToken[this] == old(freezingBalance_FreezableToken[this]))))
[2020-11-24 21:34:14,998 INFO  L1007  opiaSpecLangObserver]: Compiled to ( []( AP(call_totalSupply_BasicToken0) ==> ( <>AP(success_totalSupply_BasicToken0) ) ) )
Executed UtopiaSpecLang
[2020-11-24 21:34:15,022 INFO  L202        PluginConnector]: Adding new model Hardcoded edu.utexas.cs.utopia.specLang AST 24.11 09:34:15 PropertyContainer
[2020-11-24 21:34:15,023 INFO  L132        PluginConnector]: ------------------------ END UtopiaSpecLang----------------------------
[2020-11-24 21:34:15,023 INFO  L113        PluginConnector]: ------------------------Boogie Printer----------------------------
[2020-11-24 21:34:15,023 INFO  L271        PluginConnector]: Initializing Boogie Printer...
[2020-11-24 21:34:15,023 INFO  L276        PluginConnector]: Boogie Printer initialized
[2020-11-24 21:34:15,024 INFO  L185        PluginConnector]: Executing the observer BoogiePrinterObserver from plugin Boogie Printer for "MainToken_0xa2d0e29a9627e20FD886a8106DD0AE429403a57d_totalsupply.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 24.11 09:34:14" (1/2) ...
[2020-11-24 21:34:15,024 INFO  L116   oogiePrinterObserver]: File already exists and will be overwritten: /tmp/boogiePrinter.bpl
[2020-11-24 21:34:15,024 INFO  L120   oogiePrinterObserver]: Writing to file /tmp/boogiePrinter.bpl
[2020-11-24 21:34:15,056 INFO  L185        PluginConnector]: Executing the observer BoogiePrinterObserver from plugin Boogie Printer for "Hardcoded edu.utexas.cs.utopia.specLang AST 24.11 09:34:15" (2/2) ...
[2020-11-24 21:34:15,056 INFO  L132        PluginConnector]: ------------------------ END Boogie Printer----------------------------
[2020-11-24 21:34:15,057 INFO  L113        PluginConnector]: ------------------------RCFGBuilder----------------------------
[2020-11-24 21:34:15,057 INFO  L271        PluginConnector]: Initializing RCFGBuilder...
[2020-11-24 21:34:15,057 INFO  L276        PluginConnector]: RCFGBuilder initialized
[2020-11-24 21:34:15,058 INFO  L185        PluginConnector]: Executing the observer RCFGBuilderObserver from plugin RCFGBuilder for "MainToken_0xa2d0e29a9627e20FD886a8106DD0AE429403a57d_totalsupply.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 24.11 09:34:14" (1/2) ...
[2020-11-24 21:34:15,111 INFO  L130     BoogieDeclarations]: Found specification of procedure FreshRefGenerator__success
[2020-11-24 21:34:15,111 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Basic_ERC20Basic_NoBaseCtor__success
[2020-11-24 21:34:15,112 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Basic_ERC20Basic
[2020-11-24 21:34:15,112 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Basic_ERC20Basic
[2020-11-24 21:34:15,112 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_ERC20Basic
[2020-11-24 21:34:15,112 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_ERC20Basic
[2020-11-24 21:34:15,112 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_ERC20Basic
[2020-11-24 21:34:15,112 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath_NoBaseCtor__success
[2020-11-24 21:34:15,112 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath
[2020-11-24 21:34:15,112 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath
[2020-11-24 21:34:15,112 INFO  L130     BoogieDeclarations]: Found specification of procedure mul~uint256~uint256_SafeMath__success
[2020-11-24 21:34:15,113 INFO  L130     BoogieDeclarations]: Found specification of procedure div~uint256~uint256_SafeMath__success
[2020-11-24 21:34:15,113 INFO  L130     BoogieDeclarations]: Found specification of procedure sub~uint256~uint256_SafeMath__success
[2020-11-24 21:34:15,113 INFO  L130     BoogieDeclarations]: Found specification of procedure add~uint256~uint256_SafeMath__success
[2020-11-24 21:34:15,113 INFO  L130     BoogieDeclarations]: Found specification of procedure BasicToken_BasicToken_NoBaseCtor__success
[2020-11-24 21:34:15,113 INFO  L130     BoogieDeclarations]: Found specification of procedure BasicToken_BasicToken
[2020-11-24 21:34:15,113 INFO  L138     BoogieDeclarations]: Found implementation of procedure BasicToken_BasicToken
[2020-11-24 21:34:15,113 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_BasicToken
[2020-11-24 21:34:15,113 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_BasicToken
[2020-11-24 21:34:15,114 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_BasicToken
[2020-11-24 21:34:15,114 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_BasicToken
[2020-11-24 21:34:15,114 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_BasicToken
[2020-11-24 21:34:15,114 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_BasicToken
[2020-11-24 21:34:15,114 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20_NoBaseCtor__success
[2020-11-24 21:34:15,114 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20
[2020-11-24 21:34:15,114 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20
[2020-11-24 21:34:15,114 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_ERC20
[2020-11-24 21:34:15,114 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_ERC20
[2020-11-24 21:34:15,114 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_ERC20
[2020-11-24 21:34:15,115 INFO  L130     BoogieDeclarations]: Found specification of procedure StandardToken_StandardToken_NoBaseCtor__success
[2020-11-24 21:34:15,115 INFO  L130     BoogieDeclarations]: Found specification of procedure StandardToken_StandardToken
[2020-11-24 21:34:15,115 INFO  L138     BoogieDeclarations]: Found implementation of procedure StandardToken_StandardToken
[2020-11-24 21:34:15,115 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_StandardToken
[2020-11-24 21:34:15,115 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_StandardToken
[2020-11-24 21:34:15,115 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_StandardToken
[2020-11-24 21:34:15,115 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_StandardToken
[2020-11-24 21:34:15,115 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_StandardToken
[2020-11-24 21:34:15,115 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_StandardToken
[2020-11-24 21:34:15,115 INFO  L130     BoogieDeclarations]: Found specification of procedure increaseApproval~address~uint256_StandardToken
[2020-11-24 21:34:15,116 INFO  L138     BoogieDeclarations]: Found implementation of procedure increaseApproval~address~uint256_StandardToken
[2020-11-24 21:34:15,116 INFO  L130     BoogieDeclarations]: Found specification of procedure decreaseApproval~address~uint256_StandardToken
[2020-11-24 21:34:15,116 INFO  L138     BoogieDeclarations]: Found implementation of procedure decreaseApproval~address~uint256_StandardToken
[2020-11-24 21:34:15,116 INFO  L130     BoogieDeclarations]: Found specification of procedure Ownable_Ownable_NoBaseCtor__success
[2020-11-24 21:34:15,116 INFO  L130     BoogieDeclarations]: Found specification of procedure Ownable_Ownable
[2020-11-24 21:34:15,116 INFO  L138     BoogieDeclarations]: Found implementation of procedure Ownable_Ownable
[2020-11-24 21:34:15,116 INFO  L130     BoogieDeclarations]: Found specification of procedure renounceOwnership_Ownable
[2020-11-24 21:34:15,116 INFO  L138     BoogieDeclarations]: Found implementation of procedure renounceOwnership_Ownable
[2020-11-24 21:34:15,116 INFO  L130     BoogieDeclarations]: Found specification of procedure transferOwnership~address_Ownable
[2020-11-24 21:34:15,116 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferOwnership~address_Ownable
[2020-11-24 21:34:15,116 INFO  L130     BoogieDeclarations]: Found specification of procedure _transferOwnership~address_Ownable__success
[2020-11-24 21:34:15,117 INFO  L130     BoogieDeclarations]: Found specification of procedure owner_Ownable
[2020-11-24 21:34:15,117 INFO  L138     BoogieDeclarations]: Found implementation of procedure owner_Ownable
[2020-11-24 21:34:15,117 INFO  L130     BoogieDeclarations]: Found specification of procedure MintableToken_MintableToken_NoBaseCtor__success
[2020-11-24 21:34:15,117 INFO  L130     BoogieDeclarations]: Found specification of procedure MintableToken_MintableToken
[2020-11-24 21:34:15,117 INFO  L138     BoogieDeclarations]: Found implementation of procedure MintableToken_MintableToken
[2020-11-24 21:34:15,117 INFO  L130     BoogieDeclarations]: Found specification of procedure mint~address~uint256_MintableToken
[2020-11-24 21:34:15,117 INFO  L138     BoogieDeclarations]: Found implementation of procedure mint~address~uint256_MintableToken
[2020-11-24 21:34:15,117 INFO  L130     BoogieDeclarations]: Found specification of procedure finishMinting_MintableToken
[2020-11-24 21:34:15,117 INFO  L138     BoogieDeclarations]: Found implementation of procedure finishMinting_MintableToken
[2020-11-24 21:34:15,117 INFO  L130     BoogieDeclarations]: Found specification of procedure mintingFinished_MintableToken
[2020-11-24 21:34:15,117 INFO  L138     BoogieDeclarations]: Found implementation of procedure mintingFinished_MintableToken
[2020-11-24 21:34:15,118 INFO  L130     BoogieDeclarations]: Found specification of procedure FreezableToken_FreezableToken_NoBaseCtor__success
[2020-11-24 21:34:15,118 INFO  L130     BoogieDeclarations]: Found specification of procedure FreezableToken_FreezableToken
[2020-11-24 21:34:15,118 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreezableToken_FreezableToken
[2020-11-24 21:34:15,118 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_FreezableToken
[2020-11-24 21:34:15,118 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_FreezableToken
[2020-11-24 21:34:15,118 INFO  L130     BoogieDeclarations]: Found specification of procedure actualBalanceOf~address_FreezableToken
[2020-11-24 21:34:15,118 INFO  L138     BoogieDeclarations]: Found implementation of procedure actualBalanceOf~address_FreezableToken
[2020-11-24 21:34:15,118 INFO  L130     BoogieDeclarations]: Found specification of procedure freezingBalanceOf~address_FreezableToken
[2020-11-24 21:34:15,118 INFO  L138     BoogieDeclarations]: Found implementation of procedure freezingBalanceOf~address_FreezableToken
[2020-11-24 21:34:15,118 INFO  L130     BoogieDeclarations]: Found specification of procedure freezingCount~address_FreezableToken
[2020-11-24 21:34:15,118 INFO  L138     BoogieDeclarations]: Found implementation of procedure freezingCount~address_FreezableToken
[2020-11-24 21:34:15,119 INFO  L130     BoogieDeclarations]: Found specification of procedure getFreezing~address~uint256_FreezableToken
[2020-11-24 21:34:15,119 INFO  L138     BoogieDeclarations]: Found implementation of procedure getFreezing~address~uint256_FreezableToken
[2020-11-24 21:34:15,119 INFO  L130     BoogieDeclarations]: Found specification of procedure freezeTo~address~uint256~uint64_FreezableToken
[2020-11-24 21:34:15,119 INFO  L138     BoogieDeclarations]: Found implementation of procedure freezeTo~address~uint256~uint64_FreezableToken
[2020-11-24 21:34:15,119 INFO  L130     BoogieDeclarations]: Found specification of procedure releaseOnce_FreezableToken
[2020-11-24 21:34:15,119 INFO  L138     BoogieDeclarations]: Found implementation of procedure releaseOnce_FreezableToken
[2020-11-24 21:34:15,119 INFO  L130     BoogieDeclarations]: Found specification of procedure releaseAll_FreezableToken
[2020-11-24 21:34:15,119 INFO  L138     BoogieDeclarations]: Found implementation of procedure releaseAll_FreezableToken
[2020-11-24 21:34:15,119 INFO  L130     BoogieDeclarations]: Found specification of procedure toKey~address~uint256_FreezableToken__success
[2020-11-24 21:34:15,119 INFO  L130     BoogieDeclarations]: Found specification of procedure freeze~address~uint64_FreezableToken__success
[2020-11-24 21:34:15,120 INFO  L130     BoogieDeclarations]: Found specification of procedure BurnableToken_BurnableToken_NoBaseCtor__success
[2020-11-24 21:34:15,120 INFO  L130     BoogieDeclarations]: Found specification of procedure BurnableToken_BurnableToken
[2020-11-24 21:34:15,120 INFO  L138     BoogieDeclarations]: Found implementation of procedure BurnableToken_BurnableToken
[2020-11-24 21:34:15,120 INFO  L130     BoogieDeclarations]: Found specification of procedure burn~uint256_BurnableToken
[2020-11-24 21:34:15,120 INFO  L138     BoogieDeclarations]: Found implementation of procedure burn~uint256_BurnableToken
[2020-11-24 21:34:15,120 INFO  L130     BoogieDeclarations]: Found specification of procedure _burn~address~uint256_BurnableToken__success
[2020-11-24 21:34:15,120 INFO  L130     BoogieDeclarations]: Found specification of procedure Pausable_Pausable_NoBaseCtor__success
[2020-11-24 21:34:15,120 INFO  L130     BoogieDeclarations]: Found specification of procedure Pausable_Pausable
[2020-11-24 21:34:15,120 INFO  L138     BoogieDeclarations]: Found implementation of procedure Pausable_Pausable
[2020-11-24 21:34:15,120 INFO  L130     BoogieDeclarations]: Found specification of procedure pause_Pausable
[2020-11-24 21:34:15,121 INFO  L138     BoogieDeclarations]: Found implementation of procedure pause_Pausable
[2020-11-24 21:34:15,121 INFO  L130     BoogieDeclarations]: Found specification of procedure unpause_Pausable
[2020-11-24 21:34:15,121 INFO  L138     BoogieDeclarations]: Found implementation of procedure unpause_Pausable
[2020-11-24 21:34:15,121 INFO  L130     BoogieDeclarations]: Found specification of procedure paused_Pausable
[2020-11-24 21:34:15,121 INFO  L138     BoogieDeclarations]: Found implementation of procedure paused_Pausable
[2020-11-24 21:34:15,121 INFO  L130     BoogieDeclarations]: Found specification of procedure FreezableMintableToken_FreezableMintableToken_NoBaseCtor__success
[2020-11-24 21:34:15,121 INFO  L130     BoogieDeclarations]: Found specification of procedure FreezableMintableToken_FreezableMintableToken
[2020-11-24 21:34:15,121 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreezableMintableToken_FreezableMintableToken
[2020-11-24 21:34:15,121 INFO  L130     BoogieDeclarations]: Found specification of procedure mintAndFreeze~address~uint256~uint64_FreezableMintableToken
[2020-11-24 21:34:15,121 INFO  L138     BoogieDeclarations]: Found implementation of procedure mintAndFreeze~address~uint256~uint64_FreezableMintableToken
[2020-11-24 21:34:15,121 INFO  L130     BoogieDeclarations]: Found specification of procedure Consts_Consts_NoBaseCtor__success
[2020-11-24 21:34:15,122 INFO  L130     BoogieDeclarations]: Found specification of procedure Consts_Consts
[2020-11-24 21:34:15,122 INFO  L138     BoogieDeclarations]: Found implementation of procedure Consts_Consts
[2020-11-24 21:34:15,122 INFO  L130     BoogieDeclarations]: Found specification of procedure TOKEN_DECIMALS_Consts
[2020-11-24 21:34:15,122 INFO  L138     BoogieDeclarations]: Found implementation of procedure TOKEN_DECIMALS_Consts
[2020-11-24 21:34:15,122 INFO  L130     BoogieDeclarations]: Found specification of procedure TOKEN_DECIMALS_UINT8_Consts
[2020-11-24 21:34:15,122 INFO  L138     BoogieDeclarations]: Found implementation of procedure TOKEN_DECIMALS_UINT8_Consts
[2020-11-24 21:34:15,122 INFO  L130     BoogieDeclarations]: Found specification of procedure TOKEN_DECIMAL_MULTIPLIER_Consts
[2020-11-24 21:34:15,122 INFO  L138     BoogieDeclarations]: Found implementation of procedure TOKEN_DECIMAL_MULTIPLIER_Consts
[2020-11-24 21:34:15,122 INFO  L130     BoogieDeclarations]: Found specification of procedure TOKEN_NAME_Consts
[2020-11-24 21:34:15,122 INFO  L138     BoogieDeclarations]: Found implementation of procedure TOKEN_NAME_Consts
[2020-11-24 21:34:15,123 INFO  L130     BoogieDeclarations]: Found specification of procedure TOKEN_SYMBOL_Consts
[2020-11-24 21:34:15,123 INFO  L138     BoogieDeclarations]: Found implementation of procedure TOKEN_SYMBOL_Consts
[2020-11-24 21:34:15,123 INFO  L130     BoogieDeclarations]: Found specification of procedure PAUSED_Consts
[2020-11-24 21:34:15,123 INFO  L138     BoogieDeclarations]: Found implementation of procedure PAUSED_Consts
[2020-11-24 21:34:15,123 INFO  L130     BoogieDeclarations]: Found specification of procedure TARGET_USER_Consts
[2020-11-24 21:34:15,123 INFO  L138     BoogieDeclarations]: Found implementation of procedure TARGET_USER_Consts
[2020-11-24 21:34:15,123 INFO  L130     BoogieDeclarations]: Found specification of procedure CONTINUE_MINTING_Consts
[2020-11-24 21:34:15,123 INFO  L138     BoogieDeclarations]: Found implementation of procedure CONTINUE_MINTING_Consts
[2020-11-24 21:34:15,123 INFO  L130     BoogieDeclarations]: Found specification of procedure MainToken_MainToken_NoBaseCtor__success
[2020-11-24 21:34:15,123 INFO  L130     BoogieDeclarations]: Found specification of procedure MainToken_MainToken
[2020-11-24 21:34:15,124 INFO  L138     BoogieDeclarations]: Found implementation of procedure MainToken_MainToken
[2020-11-24 21:34:15,124 INFO  L130     BoogieDeclarations]: Found specification of procedure name_MainToken
[2020-11-24 21:34:15,124 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_MainToken
[2020-11-24 21:34:15,124 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_MainToken
[2020-11-24 21:34:15,124 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_MainToken
[2020-11-24 21:34:15,124 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_MainToken
[2020-11-24 21:34:15,124 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_MainToken
[2020-11-24 21:34:15,124 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_MainToken
[2020-11-24 21:34:15,124 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_MainToken
[2020-11-24 21:34:15,124 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_MainToken
[2020-11-24 21:34:15,124 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_MainToken
[2020-11-24 21:34:15,125 INFO  L130     BoogieDeclarations]: Found specification of procedure init_MainToken__success
[2020-11-24 21:34:15,125 INFO  L130     BoogieDeclarations]: Found specification of procedure initialized_MainToken
[2020-11-24 21:34:15,125 INFO  L138     BoogieDeclarations]: Found implementation of procedure initialized_MainToken
[2020-11-24 21:34:15,125 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackDispatch__success
[2020-11-24 21:34:15,125 INFO  L130     BoogieDeclarations]: Found specification of procedure Fallback_UnknownType__success
[2020-11-24 21:34:15,125 INFO  L130     BoogieDeclarations]: Found specification of procedure send__success
[2020-11-24 21:34:15,125 INFO  L130     BoogieDeclarations]: Found specification of procedure onlyOwner_pre__success
[2020-11-24 21:34:15,125 INFO  L130     BoogieDeclarations]: Found specification of procedure canMint_pre__success
[2020-11-24 21:34:15,125 INFO  L130     BoogieDeclarations]: Found specification of procedure hasMintPermission_pre__success
[2020-11-24 21:34:15,126 INFO  L130     BoogieDeclarations]: Found specification of procedure whenNotPaused_pre__success
[2020-11-24 21:34:15,126 INFO  L130     BoogieDeclarations]: Found specification of procedure whenPaused_pre__success
[2020-11-24 21:34:15,126 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_ERC20Basic
[2020-11-24 21:34:15,126 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_ERC20Basic
[2020-11-24 21:34:15,126 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_SafeMath
[2020-11-24 21:34:15,126 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_SafeMath
[2020-11-24 21:34:15,126 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_BasicToken
[2020-11-24 21:34:15,126 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_BasicToken
[2020-11-24 21:34:15,126 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_ERC20
[2020-11-24 21:34:15,126 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_ERC20
[2020-11-24 21:34:15,127 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_StandardToken
[2020-11-24 21:34:15,127 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_StandardToken
[2020-11-24 21:34:15,127 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_Ownable
[2020-11-24 21:34:15,127 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_Ownable
[2020-11-24 21:34:15,127 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_MintableToken
[2020-11-24 21:34:15,127 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_MintableToken
[2020-11-24 21:34:15,127 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_FreezableToken
[2020-11-24 21:34:15,127 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_FreezableToken
[2020-11-24 21:34:15,127 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_BurnableToken
[2020-11-24 21:34:15,127 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_BurnableToken
[2020-11-24 21:34:15,128 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_Pausable
[2020-11-24 21:34:15,128 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_Pausable
[2020-11-24 21:34:15,128 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_FreezableMintableToken
[2020-11-24 21:34:15,128 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_FreezableMintableToken
[2020-11-24 21:34:15,128 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_Consts
[2020-11-24 21:34:15,128 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_Consts
[2020-11-24 21:34:15,128 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_MainToken
[2020-11-24 21:34:15,128 INFO  L130     BoogieDeclarations]: Found specification of procedure main
[2020-11-24 21:34:15,128 INFO  L130     BoogieDeclarations]: Found specification of procedure FreshRefGenerator__fail
[2020-11-24 21:34:15,128 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Basic_ERC20Basic_NoBaseCtor__fail
[2020-11-24 21:34:15,128 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Basic_ERC20Basic__success
[2020-11-24 21:34:15,129 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Basic_ERC20Basic__fail
[2020-11-24 21:34:15,129 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath_NoBaseCtor__fail
[2020-11-24 21:34:15,129 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath__success
[2020-11-24 21:34:15,129 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath__fail
[2020-11-24 21:34:15,129 INFO  L130     BoogieDeclarations]: Found specification of procedure mul~uint256~uint256_SafeMath__fail
[2020-11-24 21:34:15,129 INFO  L130     BoogieDeclarations]: Found specification of procedure div~uint256~uint256_SafeMath__fail
[2020-11-24 21:34:15,129 INFO  L130     BoogieDeclarations]: Found specification of procedure sub~uint256~uint256_SafeMath__fail
[2020-11-24 21:34:15,129 INFO  L130     BoogieDeclarations]: Found specification of procedure add~uint256~uint256_SafeMath__fail
[2020-11-24 21:34:15,129 INFO  L130     BoogieDeclarations]: Found specification of procedure BasicToken_BasicToken_NoBaseCtor__fail
[2020-11-24 21:34:15,129 INFO  L130     BoogieDeclarations]: Found specification of procedure BasicToken_BasicToken__success
[2020-11-24 21:34:15,129 INFO  L130     BoogieDeclarations]: Found specification of procedure BasicToken_BasicToken__fail
[2020-11-24 21:34:15,129 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_BasicToken__success
[2020-11-24 21:34:15,130 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_BasicToken__fail
[2020-11-24 21:34:15,130 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_BasicToken__success
[2020-11-24 21:34:15,130 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_BasicToken__fail
[2020-11-24 21:34:15,130 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_BasicToken__success
[2020-11-24 21:34:15,130 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_BasicToken__fail
[2020-11-24 21:34:15,130 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20_NoBaseCtor__fail
[2020-11-24 21:34:15,130 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20__success
[2020-11-24 21:34:15,130 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20__fail
[2020-11-24 21:34:15,130 INFO  L130     BoogieDeclarations]: Found specification of procedure StandardToken_StandardToken_NoBaseCtor__fail
[2020-11-24 21:34:15,130 INFO  L130     BoogieDeclarations]: Found specification of procedure StandardToken_StandardToken__success
[2020-11-24 21:34:15,130 INFO  L130     BoogieDeclarations]: Found specification of procedure StandardToken_StandardToken__fail
[2020-11-24 21:34:15,130 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_StandardToken__success
[2020-11-24 21:34:15,131 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_StandardToken__fail
[2020-11-24 21:34:15,131 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_StandardToken__success
[2020-11-24 21:34:15,131 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_StandardToken__fail
[2020-11-24 21:34:15,131 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_StandardToken__success
[2020-11-24 21:34:15,131 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_StandardToken__fail
[2020-11-24 21:34:15,131 INFO  L130     BoogieDeclarations]: Found specification of procedure increaseApproval~address~uint256_StandardToken__success
[2020-11-24 21:34:15,131 INFO  L130     BoogieDeclarations]: Found specification of procedure increaseApproval~address~uint256_StandardToken__fail
[2020-11-24 21:34:15,131 INFO  L130     BoogieDeclarations]: Found specification of procedure decreaseApproval~address~uint256_StandardToken__success
[2020-11-24 21:34:15,131 INFO  L130     BoogieDeclarations]: Found specification of procedure decreaseApproval~address~uint256_StandardToken__fail
[2020-11-24 21:34:15,131 INFO  L130     BoogieDeclarations]: Found specification of procedure Ownable_Ownable_NoBaseCtor__fail
[2020-11-24 21:34:15,131 INFO  L130     BoogieDeclarations]: Found specification of procedure Ownable_Ownable__success
[2020-11-24 21:34:15,132 INFO  L130     BoogieDeclarations]: Found specification of procedure Ownable_Ownable__fail
[2020-11-24 21:34:15,132 INFO  L130     BoogieDeclarations]: Found specification of procedure renounceOwnership_Ownable__success
[2020-11-24 21:34:15,132 INFO  L130     BoogieDeclarations]: Found specification of procedure renounceOwnership_Ownable__fail
[2020-11-24 21:34:15,132 INFO  L130     BoogieDeclarations]: Found specification of procedure transferOwnership~address_Ownable__success
[2020-11-24 21:34:15,132 INFO  L130     BoogieDeclarations]: Found specification of procedure transferOwnership~address_Ownable__fail
[2020-11-24 21:34:15,132 INFO  L130     BoogieDeclarations]: Found specification of procedure _transferOwnership~address_Ownable__fail
[2020-11-24 21:34:15,132 INFO  L130     BoogieDeclarations]: Found specification of procedure owner_Ownable__success
[2020-11-24 21:34:15,132 INFO  L130     BoogieDeclarations]: Found specification of procedure owner_Ownable__fail
[2020-11-24 21:34:15,132 INFO  L130     BoogieDeclarations]: Found specification of procedure MintableToken_MintableToken_NoBaseCtor__fail
[2020-11-24 21:34:15,132 INFO  L130     BoogieDeclarations]: Found specification of procedure MintableToken_MintableToken__success
[2020-11-24 21:34:15,132 INFO  L130     BoogieDeclarations]: Found specification of procedure MintableToken_MintableToken__fail
[2020-11-24 21:34:15,132 INFO  L130     BoogieDeclarations]: Found specification of procedure mint~address~uint256_MintableToken__success
[2020-11-24 21:34:15,132 INFO  L130     BoogieDeclarations]: Found specification of procedure mint~address~uint256_MintableToken__fail
[2020-11-24 21:34:15,133 INFO  L130     BoogieDeclarations]: Found specification of procedure finishMinting_MintableToken__success
[2020-11-24 21:34:15,133 INFO  L130     BoogieDeclarations]: Found specification of procedure finishMinting_MintableToken__fail
[2020-11-24 21:34:15,133 INFO  L130     BoogieDeclarations]: Found specification of procedure mintingFinished_MintableToken__success
[2020-11-24 21:34:15,133 INFO  L130     BoogieDeclarations]: Found specification of procedure mintingFinished_MintableToken__fail
[2020-11-24 21:34:15,133 INFO  L130     BoogieDeclarations]: Found specification of procedure FreezableToken_FreezableToken_NoBaseCtor__fail
[2020-11-24 21:34:15,133 INFO  L130     BoogieDeclarations]: Found specification of procedure FreezableToken_FreezableToken__success
[2020-11-24 21:34:15,133 INFO  L130     BoogieDeclarations]: Found specification of procedure FreezableToken_FreezableToken__fail
[2020-11-24 21:34:15,133 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_FreezableToken__success
[2020-11-24 21:34:15,133 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_FreezableToken__fail
[2020-11-24 21:34:15,133 INFO  L130     BoogieDeclarations]: Found specification of procedure actualBalanceOf~address_FreezableToken__success
[2020-11-24 21:34:15,133 INFO  L130     BoogieDeclarations]: Found specification of procedure actualBalanceOf~address_FreezableToken__fail
[2020-11-24 21:34:15,133 INFO  L130     BoogieDeclarations]: Found specification of procedure freezingBalanceOf~address_FreezableToken__success
[2020-11-24 21:34:15,134 INFO  L130     BoogieDeclarations]: Found specification of procedure freezingBalanceOf~address_FreezableToken__fail
[2020-11-24 21:34:15,134 INFO  L130     BoogieDeclarations]: Found specification of procedure freezingCount~address_FreezableToken__success
[2020-11-24 21:34:15,134 INFO  L130     BoogieDeclarations]: Found specification of procedure freezingCount~address_FreezableToken__fail
[2020-11-24 21:34:15,134 INFO  L130     BoogieDeclarations]: Found specification of procedure getFreezing~address~uint256_FreezableToken__success
[2020-11-24 21:34:15,134 INFO  L130     BoogieDeclarations]: Found specification of procedure getFreezing~address~uint256_FreezableToken__fail
[2020-11-24 21:34:15,134 INFO  L130     BoogieDeclarations]: Found specification of procedure freezeTo~address~uint256~uint64_FreezableToken__success
[2020-11-24 21:34:15,134 INFO  L130     BoogieDeclarations]: Found specification of procedure freezeTo~address~uint256~uint64_FreezableToken__fail
[2020-11-24 21:34:15,134 INFO  L130     BoogieDeclarations]: Found specification of procedure releaseOnce_FreezableToken__success
[2020-11-24 21:34:15,134 INFO  L130     BoogieDeclarations]: Found specification of procedure releaseOnce_FreezableToken__fail
[2020-11-24 21:34:15,134 INFO  L130     BoogieDeclarations]: Found specification of procedure releaseAll_FreezableToken__success
[2020-11-24 21:34:15,134 INFO  L130     BoogieDeclarations]: Found specification of procedure releaseAll_FreezableToken__fail
[2020-11-24 21:34:15,134 INFO  L130     BoogieDeclarations]: Found specification of procedure toKey~address~uint256_FreezableToken__fail
[2020-11-24 21:34:15,135 INFO  L130     BoogieDeclarations]: Found specification of procedure freeze~address~uint64_FreezableToken__fail
[2020-11-24 21:34:15,135 INFO  L130     BoogieDeclarations]: Found specification of procedure BurnableToken_BurnableToken_NoBaseCtor__fail
[2020-11-24 21:34:15,135 INFO  L130     BoogieDeclarations]: Found specification of procedure BurnableToken_BurnableToken__success
[2020-11-24 21:34:15,135 INFO  L130     BoogieDeclarations]: Found specification of procedure BurnableToken_BurnableToken__fail
[2020-11-24 21:34:15,135 INFO  L130     BoogieDeclarations]: Found specification of procedure burn~uint256_BurnableToken__success
[2020-11-24 21:34:15,135 INFO  L130     BoogieDeclarations]: Found specification of procedure burn~uint256_BurnableToken__fail
[2020-11-24 21:34:15,135 INFO  L130     BoogieDeclarations]: Found specification of procedure _burn~address~uint256_BurnableToken__fail
[2020-11-24 21:34:15,135 INFO  L130     BoogieDeclarations]: Found specification of procedure Pausable_Pausable_NoBaseCtor__fail
[2020-11-24 21:34:15,135 INFO  L130     BoogieDeclarations]: Found specification of procedure Pausable_Pausable__success
[2020-11-24 21:34:15,135 INFO  L130     BoogieDeclarations]: Found specification of procedure Pausable_Pausable__fail
[2020-11-24 21:34:15,135 INFO  L130     BoogieDeclarations]: Found specification of procedure pause_Pausable__success
[2020-11-24 21:34:15,135 INFO  L130     BoogieDeclarations]: Found specification of procedure pause_Pausable__fail
[2020-11-24 21:34:15,136 INFO  L130     BoogieDeclarations]: Found specification of procedure unpause_Pausable__success
[2020-11-24 21:34:15,136 INFO  L130     BoogieDeclarations]: Found specification of procedure unpause_Pausable__fail
[2020-11-24 21:34:15,136 INFO  L130     BoogieDeclarations]: Found specification of procedure paused_Pausable__success
[2020-11-24 21:34:15,136 INFO  L130     BoogieDeclarations]: Found specification of procedure paused_Pausable__fail
[2020-11-24 21:34:15,136 INFO  L130     BoogieDeclarations]: Found specification of procedure FreezableMintableToken_FreezableMintableToken_NoBaseCtor__fail
[2020-11-24 21:34:15,136 INFO  L130     BoogieDeclarations]: Found specification of procedure FreezableMintableToken_FreezableMintableToken__success
[2020-11-24 21:34:15,136 INFO  L130     BoogieDeclarations]: Found specification of procedure FreezableMintableToken_FreezableMintableToken__fail
[2020-11-24 21:34:15,136 INFO  L130     BoogieDeclarations]: Found specification of procedure mintAndFreeze~address~uint256~uint64_FreezableMintableToken__success
[2020-11-24 21:34:15,136 INFO  L130     BoogieDeclarations]: Found specification of procedure mintAndFreeze~address~uint256~uint64_FreezableMintableToken__fail
[2020-11-24 21:34:15,136 INFO  L130     BoogieDeclarations]: Found specification of procedure Consts_Consts_NoBaseCtor__fail
[2020-11-24 21:34:15,136 INFO  L130     BoogieDeclarations]: Found specification of procedure Consts_Consts__success
[2020-11-24 21:34:15,136 INFO  L130     BoogieDeclarations]: Found specification of procedure Consts_Consts__fail
[2020-11-24 21:34:15,136 INFO  L130     BoogieDeclarations]: Found specification of procedure TOKEN_DECIMALS_Consts__success
[2020-11-24 21:34:15,137 INFO  L130     BoogieDeclarations]: Found specification of procedure TOKEN_DECIMALS_Consts__fail
[2020-11-24 21:34:15,137 INFO  L130     BoogieDeclarations]: Found specification of procedure TOKEN_DECIMALS_UINT8_Consts__success
[2020-11-24 21:34:15,137 INFO  L130     BoogieDeclarations]: Found specification of procedure TOKEN_DECIMALS_UINT8_Consts__fail
[2020-11-24 21:34:15,137 INFO  L130     BoogieDeclarations]: Found specification of procedure TOKEN_DECIMAL_MULTIPLIER_Consts__success
[2020-11-24 21:34:15,137 INFO  L130     BoogieDeclarations]: Found specification of procedure TOKEN_DECIMAL_MULTIPLIER_Consts__fail
[2020-11-24 21:34:15,137 INFO  L130     BoogieDeclarations]: Found specification of procedure TOKEN_NAME_Consts__success
[2020-11-24 21:34:15,137 INFO  L130     BoogieDeclarations]: Found specification of procedure TOKEN_NAME_Consts__fail
[2020-11-24 21:34:15,137 INFO  L130     BoogieDeclarations]: Found specification of procedure TOKEN_SYMBOL_Consts__success
[2020-11-24 21:34:15,138 INFO  L130     BoogieDeclarations]: Found specification of procedure TOKEN_SYMBOL_Consts__fail
[2020-11-24 21:34:15,138 INFO  L130     BoogieDeclarations]: Found specification of procedure PAUSED_Consts__success
[2020-11-24 21:34:15,138 INFO  L130     BoogieDeclarations]: Found specification of procedure PAUSED_Consts__fail
[2020-11-24 21:34:15,138 INFO  L130     BoogieDeclarations]: Found specification of procedure TARGET_USER_Consts__success
[2020-11-24 21:34:15,138 INFO  L130     BoogieDeclarations]: Found specification of procedure TARGET_USER_Consts__fail
[2020-11-24 21:34:15,138 INFO  L130     BoogieDeclarations]: Found specification of procedure CONTINUE_MINTING_Consts__success
[2020-11-24 21:34:15,138 INFO  L130     BoogieDeclarations]: Found specification of procedure CONTINUE_MINTING_Consts__fail
[2020-11-24 21:34:15,138 INFO  L130     BoogieDeclarations]: Found specification of procedure MainToken_MainToken_NoBaseCtor__fail
[2020-11-24 21:34:15,138 INFO  L130     BoogieDeclarations]: Found specification of procedure MainToken_MainToken__success
[2020-11-24 21:34:15,138 INFO  L130     BoogieDeclarations]: Found specification of procedure MainToken_MainToken__fail
[2020-11-24 21:34:15,138 INFO  L130     BoogieDeclarations]: Found specification of procedure name_MainToken__success
[2020-11-24 21:34:15,138 INFO  L130     BoogieDeclarations]: Found specification of procedure name_MainToken__fail
[2020-11-24 21:34:15,139 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_MainToken__success
[2020-11-24 21:34:15,139 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_MainToken__fail
[2020-11-24 21:34:15,139 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_MainToken__success
[2020-11-24 21:34:15,139 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_MainToken__fail
[2020-11-24 21:34:15,139 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_MainToken__success
[2020-11-24 21:34:15,139 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_MainToken__fail
[2020-11-24 21:34:15,139 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_MainToken__success
[2020-11-24 21:34:15,139 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_MainToken__fail
[2020-11-24 21:34:15,139 INFO  L130     BoogieDeclarations]: Found specification of procedure init_MainToken__fail
[2020-11-24 21:34:15,139 INFO  L130     BoogieDeclarations]: Found specification of procedure initialized_MainToken__success
[2020-11-24 21:34:15,139 INFO  L130     BoogieDeclarations]: Found specification of procedure initialized_MainToken__fail
[2020-11-24 21:34:15,140 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackDispatch__fail
[2020-11-24 21:34:15,140 INFO  L130     BoogieDeclarations]: Found specification of procedure Fallback_UnknownType__fail
[2020-11-24 21:34:15,140 INFO  L130     BoogieDeclarations]: Found specification of procedure send__fail
[2020-11-24 21:34:15,140 INFO  L130     BoogieDeclarations]: Found specification of procedure onlyOwner_pre__fail
[2020-11-24 21:34:15,140 INFO  L130     BoogieDeclarations]: Found specification of procedure canMint_pre__fail
[2020-11-24 21:34:15,140 INFO  L130     BoogieDeclarations]: Found specification of procedure hasMintPermission_pre__fail
[2020-11-24 21:34:15,140 INFO  L130     BoogieDeclarations]: Found specification of procedure whenNotPaused_pre__fail
[2020-11-24 21:34:15,140 INFO  L130     BoogieDeclarations]: Found specification of procedure whenPaused_pre__fail
[2020-11-24 21:34:15,140 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreshRefGenerator__fail
[2020-11-24 21:34:15,140 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreshRefGenerator__success
[2020-11-24 21:34:15,140 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Basic_ERC20Basic_NoBaseCtor__fail
[2020-11-24 21:34:15,140 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Basic_ERC20Basic_NoBaseCtor__success
[2020-11-24 21:34:15,140 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Basic_ERC20Basic__fail
[2020-11-24 21:34:15,141 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Basic_ERC20Basic__success
[2020-11-24 21:34:15,141 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath_NoBaseCtor__fail
[2020-11-24 21:34:15,141 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath_NoBaseCtor__success
[2020-11-24 21:34:15,141 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath__fail
[2020-11-24 21:34:15,141 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath__success
[2020-11-24 21:34:15,141 INFO  L138     BoogieDeclarations]: Found implementation of procedure mul~uint256~uint256_SafeMath__fail
[2020-11-24 21:34:15,141 INFO  L138     BoogieDeclarations]: Found implementation of procedure mul~uint256~uint256_SafeMath__success
[2020-11-24 21:34:15,141 INFO  L138     BoogieDeclarations]: Found implementation of procedure div~uint256~uint256_SafeMath__fail
[2020-11-24 21:34:15,141 INFO  L138     BoogieDeclarations]: Found implementation of procedure div~uint256~uint256_SafeMath__success
[2020-11-24 21:34:15,141 INFO  L138     BoogieDeclarations]: Found implementation of procedure sub~uint256~uint256_SafeMath__fail
[2020-11-24 21:34:15,141 INFO  L138     BoogieDeclarations]: Found implementation of procedure sub~uint256~uint256_SafeMath__success
[2020-11-24 21:34:15,141 INFO  L138     BoogieDeclarations]: Found implementation of procedure add~uint256~uint256_SafeMath__fail
[2020-11-24 21:34:15,141 INFO  L138     BoogieDeclarations]: Found implementation of procedure add~uint256~uint256_SafeMath__success
[2020-11-24 21:34:15,142 INFO  L138     BoogieDeclarations]: Found implementation of procedure BasicToken_BasicToken_NoBaseCtor__fail
[2020-11-24 21:34:15,142 INFO  L138     BoogieDeclarations]: Found implementation of procedure BasicToken_BasicToken_NoBaseCtor__success
[2020-11-24 21:34:15,142 INFO  L138     BoogieDeclarations]: Found implementation of procedure BasicToken_BasicToken__fail
[2020-11-24 21:34:15,142 INFO  L138     BoogieDeclarations]: Found implementation of procedure BasicToken_BasicToken__success
[2020-11-24 21:34:15,142 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_BasicToken__fail
[2020-11-24 21:34:15,142 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_BasicToken__success
[2020-11-24 21:34:15,142 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_BasicToken__fail
[2020-11-24 21:34:15,142 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_BasicToken__success
[2020-11-24 21:34:15,142 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_BasicToken__fail
[2020-11-24 21:34:15,142 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_BasicToken__success
[2020-11-24 21:34:15,142 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20_NoBaseCtor__fail
[2020-11-24 21:34:15,142 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20_NoBaseCtor__success
[2020-11-24 21:34:15,143 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20__fail
[2020-11-24 21:34:15,143 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20__success
[2020-11-24 21:34:15,143 INFO  L138     BoogieDeclarations]: Found implementation of procedure StandardToken_StandardToken_NoBaseCtor__fail
[2020-11-24 21:34:15,143 INFO  L138     BoogieDeclarations]: Found implementation of procedure StandardToken_StandardToken_NoBaseCtor__success
[2020-11-24 21:34:15,143 INFO  L138     BoogieDeclarations]: Found implementation of procedure StandardToken_StandardToken__fail
[2020-11-24 21:34:15,143 INFO  L138     BoogieDeclarations]: Found implementation of procedure StandardToken_StandardToken__success
[2020-11-24 21:34:15,143 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_StandardToken__fail
[2020-11-24 21:34:15,143 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_StandardToken__success
[2020-11-24 21:34:15,143 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_StandardToken__fail
[2020-11-24 21:34:15,143 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_StandardToken__success
[2020-11-24 21:34:15,143 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_StandardToken__fail
[2020-11-24 21:34:15,143 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_StandardToken__success
[2020-11-24 21:34:15,143 INFO  L138     BoogieDeclarations]: Found implementation of procedure increaseApproval~address~uint256_StandardToken__fail
[2020-11-24 21:34:15,144 INFO  L138     BoogieDeclarations]: Found implementation of procedure increaseApproval~address~uint256_StandardToken__success
[2020-11-24 21:34:15,144 INFO  L138     BoogieDeclarations]: Found implementation of procedure decreaseApproval~address~uint256_StandardToken__fail
[2020-11-24 21:34:15,144 INFO  L138     BoogieDeclarations]: Found implementation of procedure decreaseApproval~address~uint256_StandardToken__success
[2020-11-24 21:34:15,144 INFO  L138     BoogieDeclarations]: Found implementation of procedure Ownable_Ownable_NoBaseCtor__fail
[2020-11-24 21:34:15,144 INFO  L138     BoogieDeclarations]: Found implementation of procedure Ownable_Ownable_NoBaseCtor__success
[2020-11-24 21:34:15,144 INFO  L138     BoogieDeclarations]: Found implementation of procedure Ownable_Ownable__fail
[2020-11-24 21:34:15,144 INFO  L138     BoogieDeclarations]: Found implementation of procedure Ownable_Ownable__success
[2020-11-24 21:34:15,144 INFO  L138     BoogieDeclarations]: Found implementation of procedure renounceOwnership_Ownable__fail
[2020-11-24 21:34:15,144 INFO  L138     BoogieDeclarations]: Found implementation of procedure renounceOwnership_Ownable__success
[2020-11-24 21:34:15,144 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferOwnership~address_Ownable__fail
[2020-11-24 21:34:15,144 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferOwnership~address_Ownable__success
[2020-11-24 21:34:15,144 INFO  L138     BoogieDeclarations]: Found implementation of procedure _transferOwnership~address_Ownable__fail
[2020-11-24 21:34:15,145 INFO  L138     BoogieDeclarations]: Found implementation of procedure _transferOwnership~address_Ownable__success
[2020-11-24 21:34:15,145 INFO  L138     BoogieDeclarations]: Found implementation of procedure owner_Ownable__fail
[2020-11-24 21:34:15,145 INFO  L138     BoogieDeclarations]: Found implementation of procedure owner_Ownable__success
[2020-11-24 21:34:15,145 INFO  L138     BoogieDeclarations]: Found implementation of procedure MintableToken_MintableToken_NoBaseCtor__fail
[2020-11-24 21:34:15,145 INFO  L138     BoogieDeclarations]: Found implementation of procedure MintableToken_MintableToken_NoBaseCtor__success
[2020-11-24 21:34:15,145 INFO  L138     BoogieDeclarations]: Found implementation of procedure MintableToken_MintableToken__fail
[2020-11-24 21:34:15,145 INFO  L138     BoogieDeclarations]: Found implementation of procedure MintableToken_MintableToken__success
[2020-11-24 21:34:15,145 INFO  L138     BoogieDeclarations]: Found implementation of procedure mint~address~uint256_MintableToken__fail
[2020-11-24 21:34:15,145 INFO  L138     BoogieDeclarations]: Found implementation of procedure mint~address~uint256_MintableToken__success
[2020-11-24 21:34:15,145 INFO  L138     BoogieDeclarations]: Found implementation of procedure finishMinting_MintableToken__fail
[2020-11-24 21:34:15,145 INFO  L138     BoogieDeclarations]: Found implementation of procedure finishMinting_MintableToken__success
[2020-11-24 21:34:15,145 INFO  L138     BoogieDeclarations]: Found implementation of procedure mintingFinished_MintableToken__fail
[2020-11-24 21:34:15,146 INFO  L138     BoogieDeclarations]: Found implementation of procedure mintingFinished_MintableToken__success
[2020-11-24 21:34:15,146 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreezableToken_FreezableToken_NoBaseCtor__fail
[2020-11-24 21:34:15,146 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreezableToken_FreezableToken_NoBaseCtor__success
[2020-11-24 21:34:15,146 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreezableToken_FreezableToken__fail
[2020-11-24 21:34:15,146 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreezableToken_FreezableToken__success
[2020-11-24 21:34:15,146 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_FreezableToken__fail
[2020-11-24 21:34:15,146 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_FreezableToken__success
[2020-11-24 21:34:15,146 INFO  L138     BoogieDeclarations]: Found implementation of procedure actualBalanceOf~address_FreezableToken__fail
[2020-11-24 21:34:15,146 INFO  L138     BoogieDeclarations]: Found implementation of procedure actualBalanceOf~address_FreezableToken__success
[2020-11-24 21:34:15,146 INFO  L138     BoogieDeclarations]: Found implementation of procedure freezingBalanceOf~address_FreezableToken__fail
[2020-11-24 21:34:15,146 INFO  L138     BoogieDeclarations]: Found implementation of procedure freezingBalanceOf~address_FreezableToken__success
[2020-11-24 21:34:15,146 INFO  L138     BoogieDeclarations]: Found implementation of procedure freezingCount~address_FreezableToken__fail
[2020-11-24 21:34:15,146 INFO  L138     BoogieDeclarations]: Found implementation of procedure freezingCount~address_FreezableToken__success
[2020-11-24 21:34:15,146 INFO  L138     BoogieDeclarations]: Found implementation of procedure getFreezing~address~uint256_FreezableToken__fail
[2020-11-24 21:34:15,147 INFO  L138     BoogieDeclarations]: Found implementation of procedure getFreezing~address~uint256_FreezableToken__success
[2020-11-24 21:34:15,147 INFO  L138     BoogieDeclarations]: Found implementation of procedure freezeTo~address~uint256~uint64_FreezableToken__fail
[2020-11-24 21:34:15,147 INFO  L138     BoogieDeclarations]: Found implementation of procedure freezeTo~address~uint256~uint64_FreezableToken__success
[2020-11-24 21:34:15,147 INFO  L138     BoogieDeclarations]: Found implementation of procedure releaseOnce_FreezableToken__fail
[2020-11-24 21:34:15,147 INFO  L138     BoogieDeclarations]: Found implementation of procedure releaseOnce_FreezableToken__success
[2020-11-24 21:34:15,147 INFO  L138     BoogieDeclarations]: Found implementation of procedure releaseAll_FreezableToken__fail
[2020-11-24 21:34:15,147 INFO  L138     BoogieDeclarations]: Found implementation of procedure releaseAll_FreezableToken__success
[2020-11-24 21:34:15,147 INFO  L138     BoogieDeclarations]: Found implementation of procedure toKey~address~uint256_FreezableToken__fail
[2020-11-24 21:34:15,147 INFO  L138     BoogieDeclarations]: Found implementation of procedure toKey~address~uint256_FreezableToken__success
[2020-11-24 21:34:15,147 INFO  L138     BoogieDeclarations]: Found implementation of procedure freeze~address~uint64_FreezableToken__fail
[2020-11-24 21:34:15,147 INFO  L138     BoogieDeclarations]: Found implementation of procedure freeze~address~uint64_FreezableToken__success
[2020-11-24 21:34:15,147 INFO  L138     BoogieDeclarations]: Found implementation of procedure BurnableToken_BurnableToken_NoBaseCtor__fail
[2020-11-24 21:34:15,147 INFO  L138     BoogieDeclarations]: Found implementation of procedure BurnableToken_BurnableToken_NoBaseCtor__success
[2020-11-24 21:34:15,148 INFO  L138     BoogieDeclarations]: Found implementation of procedure BurnableToken_BurnableToken__fail
[2020-11-24 21:34:15,148 INFO  L138     BoogieDeclarations]: Found implementation of procedure BurnableToken_BurnableToken__success
[2020-11-24 21:34:15,148 INFO  L138     BoogieDeclarations]: Found implementation of procedure burn~uint256_BurnableToken__fail
[2020-11-24 21:34:15,148 INFO  L138     BoogieDeclarations]: Found implementation of procedure burn~uint256_BurnableToken__success
[2020-11-24 21:34:15,148 INFO  L138     BoogieDeclarations]: Found implementation of procedure _burn~address~uint256_BurnableToken__fail
[2020-11-24 21:34:15,148 INFO  L138     BoogieDeclarations]: Found implementation of procedure _burn~address~uint256_BurnableToken__success
[2020-11-24 21:34:15,148 INFO  L138     BoogieDeclarations]: Found implementation of procedure Pausable_Pausable_NoBaseCtor__fail
[2020-11-24 21:34:15,148 INFO  L138     BoogieDeclarations]: Found implementation of procedure Pausable_Pausable_NoBaseCtor__success
[2020-11-24 21:34:15,148 INFO  L138     BoogieDeclarations]: Found implementation of procedure Pausable_Pausable__fail
[2020-11-24 21:34:15,148 INFO  L138     BoogieDeclarations]: Found implementation of procedure Pausable_Pausable__success
[2020-11-24 21:34:15,148 INFO  L138     BoogieDeclarations]: Found implementation of procedure pause_Pausable__fail
[2020-11-24 21:34:15,148 INFO  L138     BoogieDeclarations]: Found implementation of procedure pause_Pausable__success
[2020-11-24 21:34:15,148 INFO  L138     BoogieDeclarations]: Found implementation of procedure unpause_Pausable__fail
[2020-11-24 21:34:15,148 INFO  L138     BoogieDeclarations]: Found implementation of procedure unpause_Pausable__success
[2020-11-24 21:34:15,149 INFO  L138     BoogieDeclarations]: Found implementation of procedure paused_Pausable__fail
[2020-11-24 21:34:15,149 INFO  L138     BoogieDeclarations]: Found implementation of procedure paused_Pausable__success
[2020-11-24 21:34:15,149 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreezableMintableToken_FreezableMintableToken_NoBaseCtor__fail
[2020-11-24 21:34:15,149 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreezableMintableToken_FreezableMintableToken_NoBaseCtor__success
[2020-11-24 21:34:15,149 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreezableMintableToken_FreezableMintableToken__fail
[2020-11-24 21:34:15,149 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreezableMintableToken_FreezableMintableToken__success
[2020-11-24 21:34:15,149 INFO  L138     BoogieDeclarations]: Found implementation of procedure mintAndFreeze~address~uint256~uint64_FreezableMintableToken__fail
[2020-11-24 21:34:15,149 INFO  L138     BoogieDeclarations]: Found implementation of procedure mintAndFreeze~address~uint256~uint64_FreezableMintableToken__success
[2020-11-24 21:34:15,149 INFO  L138     BoogieDeclarations]: Found implementation of procedure Consts_Consts_NoBaseCtor__fail
[2020-11-24 21:34:15,149 INFO  L138     BoogieDeclarations]: Found implementation of procedure Consts_Consts_NoBaseCtor__success
[2020-11-24 21:34:15,149 INFO  L138     BoogieDeclarations]: Found implementation of procedure Consts_Consts__fail
[2020-11-24 21:34:15,149 INFO  L138     BoogieDeclarations]: Found implementation of procedure Consts_Consts__success
[2020-11-24 21:34:15,149 INFO  L138     BoogieDeclarations]: Found implementation of procedure TOKEN_DECIMALS_Consts__fail
[2020-11-24 21:34:15,149 INFO  L138     BoogieDeclarations]: Found implementation of procedure TOKEN_DECIMALS_Consts__success
[2020-11-24 21:34:15,150 INFO  L138     BoogieDeclarations]: Found implementation of procedure TOKEN_DECIMALS_UINT8_Consts__fail
[2020-11-24 21:34:15,150 INFO  L138     BoogieDeclarations]: Found implementation of procedure TOKEN_DECIMALS_UINT8_Consts__success
[2020-11-24 21:34:15,150 INFO  L138     BoogieDeclarations]: Found implementation of procedure TOKEN_DECIMAL_MULTIPLIER_Consts__fail
[2020-11-24 21:34:15,150 INFO  L138     BoogieDeclarations]: Found implementation of procedure TOKEN_DECIMAL_MULTIPLIER_Consts__success
[2020-11-24 21:34:15,150 INFO  L138     BoogieDeclarations]: Found implementation of procedure TOKEN_NAME_Consts__fail
[2020-11-24 21:34:15,150 INFO  L138     BoogieDeclarations]: Found implementation of procedure TOKEN_NAME_Consts__success
[2020-11-24 21:34:15,150 INFO  L138     BoogieDeclarations]: Found implementation of procedure TOKEN_SYMBOL_Consts__fail
[2020-11-24 21:34:15,150 INFO  L138     BoogieDeclarations]: Found implementation of procedure TOKEN_SYMBOL_Consts__success
[2020-11-24 21:34:15,150 INFO  L138     BoogieDeclarations]: Found implementation of procedure PAUSED_Consts__fail
[2020-11-24 21:34:15,150 INFO  L138     BoogieDeclarations]: Found implementation of procedure PAUSED_Consts__success
[2020-11-24 21:34:15,150 INFO  L138     BoogieDeclarations]: Found implementation of procedure TARGET_USER_Consts__fail
[2020-11-24 21:34:15,150 INFO  L138     BoogieDeclarations]: Found implementation of procedure TARGET_USER_Consts__success
[2020-11-24 21:34:15,150 INFO  L138     BoogieDeclarations]: Found implementation of procedure CONTINUE_MINTING_Consts__fail
[2020-11-24 21:34:15,150 INFO  L138     BoogieDeclarations]: Found implementation of procedure CONTINUE_MINTING_Consts__success
[2020-11-24 21:34:15,150 INFO  L138     BoogieDeclarations]: Found implementation of procedure MainToken_MainToken_NoBaseCtor__fail
[2020-11-24 21:34:15,151 INFO  L138     BoogieDeclarations]: Found implementation of procedure MainToken_MainToken_NoBaseCtor__success
[2020-11-24 21:34:15,151 INFO  L138     BoogieDeclarations]: Found implementation of procedure MainToken_MainToken__fail
[2020-11-24 21:34:15,151 INFO  L138     BoogieDeclarations]: Found implementation of procedure MainToken_MainToken__success
[2020-11-24 21:34:15,151 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_MainToken__fail
[2020-11-24 21:34:15,151 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_MainToken__success
[2020-11-24 21:34:15,151 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_MainToken__fail
[2020-11-24 21:34:15,151 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_MainToken__success
[2020-11-24 21:34:15,151 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_MainToken__fail
[2020-11-24 21:34:15,151 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_MainToken__success
[2020-11-24 21:34:15,151 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_MainToken__fail
[2020-11-24 21:34:15,151 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_MainToken__success
[2020-11-24 21:34:15,151 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_MainToken__fail
[2020-11-24 21:34:15,151 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_MainToken__success
[2020-11-24 21:34:15,151 INFO  L138     BoogieDeclarations]: Found implementation of procedure init_MainToken__fail
[2020-11-24 21:34:15,152 INFO  L138     BoogieDeclarations]: Found implementation of procedure init_MainToken__success
[2020-11-24 21:34:15,152 INFO  L138     BoogieDeclarations]: Found implementation of procedure initialized_MainToken__fail
[2020-11-24 21:34:15,152 INFO  L138     BoogieDeclarations]: Found implementation of procedure initialized_MainToken__success
[2020-11-24 21:34:15,152 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackDispatch__fail
[2020-11-24 21:34:15,152 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackDispatch__success
[2020-11-24 21:34:15,152 INFO  L138     BoogieDeclarations]: Found implementation of procedure Fallback_UnknownType__fail
[2020-11-24 21:34:15,152 INFO  L138     BoogieDeclarations]: Found implementation of procedure Fallback_UnknownType__success
[2020-11-24 21:34:15,152 INFO  L138     BoogieDeclarations]: Found implementation of procedure send__fail
[2020-11-24 21:34:15,152 INFO  L138     BoogieDeclarations]: Found implementation of procedure send__success
[2020-11-24 21:34:15,152 INFO  L138     BoogieDeclarations]: Found implementation of procedure onlyOwner_pre__fail
[2020-11-24 21:34:15,152 INFO  L138     BoogieDeclarations]: Found implementation of procedure onlyOwner_pre__success
[2020-11-24 21:34:15,152 INFO  L138     BoogieDeclarations]: Found implementation of procedure canMint_pre__fail
[2020-11-24 21:34:15,152 INFO  L138     BoogieDeclarations]: Found implementation of procedure canMint_pre__success
[2020-11-24 21:34:15,152 INFO  L138     BoogieDeclarations]: Found implementation of procedure hasMintPermission_pre__fail
[2020-11-24 21:34:15,153 INFO  L138     BoogieDeclarations]: Found implementation of procedure hasMintPermission_pre__success
[2020-11-24 21:34:15,153 INFO  L138     BoogieDeclarations]: Found implementation of procedure whenNotPaused_pre__fail
[2020-11-24 21:34:15,153 INFO  L138     BoogieDeclarations]: Found implementation of procedure whenNotPaused_pre__success
[2020-11-24 21:34:15,153 INFO  L138     BoogieDeclarations]: Found implementation of procedure whenPaused_pre__fail
[2020-11-24 21:34:15,153 INFO  L138     BoogieDeclarations]: Found implementation of procedure whenPaused_pre__success
[2020-11-24 21:34:15,153 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_ERC20Basic
[2020-11-24 21:34:15,153 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_ERC20Basic
[2020-11-24 21:34:15,153 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_SafeMath
[2020-11-24 21:34:15,153 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_SafeMath
[2020-11-24 21:34:15,153 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_BasicToken
[2020-11-24 21:34:15,153 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_BasicToken
[2020-11-24 21:34:15,153 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_ERC20
[2020-11-24 21:34:15,153 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_ERC20
[2020-11-24 21:34:15,153 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_StandardToken
[2020-11-24 21:34:15,154 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_StandardToken
[2020-11-24 21:34:15,154 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_Ownable
[2020-11-24 21:34:15,154 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_Ownable
[2020-11-24 21:34:15,154 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_MintableToken
[2020-11-24 21:34:15,154 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_MintableToken
[2020-11-24 21:34:15,154 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_FreezableToken
[2020-11-24 21:34:15,154 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_FreezableToken
[2020-11-24 21:34:15,154 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_BurnableToken
[2020-11-24 21:34:15,154 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_BurnableToken
[2020-11-24 21:34:15,154 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_Pausable
[2020-11-24 21:34:15,154 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_Pausable
[2020-11-24 21:34:15,154 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_FreezableMintableToken
[2020-11-24 21:34:15,154 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_FreezableMintableToken
[2020-11-24 21:34:15,154 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_Consts
[2020-11-24 21:34:15,155 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_Consts
[2020-11-24 21:34:15,155 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_MainToken
[2020-11-24 21:34:15,155 INFO  L138     BoogieDeclarations]: Found implementation of procedure main
[2020-11-24 21:34:15,155 INFO  L130     BoogieDeclarations]: Found specification of procedure ULTIMATE.start
[2020-11-24 21:34:15,155 INFO  L138     BoogieDeclarations]: Found implementation of procedure ULTIMATE.start
[2020-11-24 21:34:16,310 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-24 21:34:16,310 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-24 21:34:16,310 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-24 21:34:16,742 INFO  L281             CfgBuilder]: Using the 1 location(s) as analysis (start of procedure ULTIMATE.start)
[2020-11-24 21:34:16,742 INFO  L286             CfgBuilder]: Removed 13 assue(true) statements.
[2020-11-24 21:34:16,746 INFO  L202        PluginConnector]: Adding new model MainToken_0xa2d0e29a9627e20FD886a8106DD0AE429403a57d_totalsupply.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 24.11 09:34:16 BoogieIcfgContainer
[2020-11-24 21:34:16,746 INFO  L185        PluginConnector]: Executing the observer RCFGBuilderObserver from plugin RCFGBuilder for "Hardcoded edu.utexas.cs.utopia.specLang AST 24.11 09:34:15" (2/2) ...
[2020-11-24 21:34:16,746 INFO  L85     RCFGBuilderObserver]: No WrapperNode. Let Ultimate process with next node
[2020-11-24 21:34:16,746 INFO  L205        PluginConnector]: Invalid model from RCFGBuilder for observer de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder.RCFGBuilderObserver@5c509d0d and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 24.11 09:34:16, skipping insertion in model container
[2020-11-24 21:34:16,746 INFO  L132        PluginConnector]: ------------------------ END RCFGBuilder----------------------------
[2020-11-24 21:34:16,747 INFO  L113        PluginConnector]: ------------------------UtopiaLTL2Aut----------------------------
[2020-11-24 21:34:16,747 INFO  L271        PluginConnector]: Initializing UtopiaLTL2Aut...
[2020-11-24 21:34:16,748 INFO  L276        PluginConnector]: UtopiaLTL2Aut initialized
[2020-11-24 21:34:16,748 INFO  L185        PluginConnector]: Executing the observer UtopiaLTL2AutObserver from plugin UtopiaLTL2Aut for "MainToken_0xa2d0e29a9627e20FD886a8106DD0AE429403a57d_totalsupply.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 24.11 09:34:14" (1/3) ...
[2020-11-24 21:34:16,748 INFO  L205        PluginConnector]: Invalid model from UtopiaLTL2Aut for observer edu.utexas.cs.utopia.ltl2aut.UtopiaLTL2AutObserver@65af9b02 and model type Hardcoded edu.utexas.cs.utopia.ltl2aut AST 24.11 09:34:16, skipping insertion in model container
[2020-11-24 21:34:16,748 INFO  L185        PluginConnector]: Executing the observer UtopiaLTL2AutObserver from plugin UtopiaLTL2Aut for "Hardcoded edu.utexas.cs.utopia.specLang AST 24.11 09:34:15" (2/3) ...
No working directory specified, using /mnt/data0/jon/SmartPulseTool/ltl2ba
Starting monitored process 1 with /mnt/data0/jon/SmartPulseTool/ltl2ba -f ! ( ( [] ( a -> ( <>b ) ) ) )  (exit command is null, workingDir is null)
[2020-11-24 21:34:16,783 INFO  L202        PluginConnector]: Adding new model Hardcoded edu.utexas.cs.utopia.ltl2aut AST 24.11 09:34:16 NWAContainer
[2020-11-24 21:34:16,783 INFO  L132        PluginConnector]: ------------------------ END UtopiaLTL2Aut----------------------------
[2020-11-24 21:34:16,783 INFO  L113        PluginConnector]: ------------------------BÃ¼chi Program Product----------------------------
[2020-11-24 21:34:16,783 INFO  L271        PluginConnector]: Initializing BÃ¼chi Program Product...
[2020-11-24 21:34:16,784 INFO  L276        PluginConnector]: BÃ¼chi Program Product initialized
[2020-11-24 21:34:16,784 INFO  L185        PluginConnector]: Executing the observer BuchiProductObserver from plugin BÃ¼chi Program Product for "MainToken_0xa2d0e29a9627e20FD886a8106DD0AE429403a57d_totalsupply.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 24.11 09:34:16" (3/4) ...
[2020-11-24 21:34:16,785 INFO  L205        PluginConnector]: Invalid model from BÃ¼chi Program Product for observer de.uni_freiburg.informatik.ultimate.buchiprogramproduct.BuchiProductObserver@7930b6f8 and model type LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 24.11 09:34:16, skipping insertion in model container
[2020-11-24 21:34:16,785 INFO  L185        PluginConnector]: Executing the observer BuchiProductObserver from plugin BÃ¼chi Program Product for "Hardcoded edu.utexas.cs.utopia.ltl2aut AST 24.11 09:34:16" (4/4) ...
[2020-11-24 21:34:16,788 INFO  L104   BuchiProductObserver]: Initial property automaton 2 locations, 3 edges
[2020-11-24 21:34:16,797 INFO  L110   BuchiProductObserver]: Initial RCFG 5384 locations, 7560 edges
[2020-11-24 21:34:16,797 INFO  L93    BuchiProductObserver]: Beginning generation of product automaton
[2020-11-24 21:34:16,813 INFO  L136       ProductGenerator]: The program has no step specification, so we assume maximum atomicity
[2020-11-24 21:34:20,926 INFO  L97    BuchiProductObserver]: Finished generation of product automaton successfully
[2020-11-24 21:34:20,942 INFO  L110   BuchiProductObserver]: BuchiProgram size 13448 locations, 24717 edges
[2020-11-24 21:34:20,943 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 24.11 09:34:20 BoogieIcfgContainer
[2020-11-24 21:34:20,943 INFO  L132        PluginConnector]: ------------------------ END BÃ¼chi Program Product----------------------------
[2020-11-24 21:34:20,943 INFO  L113        PluginConnector]: ------------------------BlockEncodingV2----------------------------
[2020-11-24 21:34:20,943 INFO  L271        PluginConnector]: Initializing BlockEncodingV2...
[2020-11-24 21:34:20,944 INFO  L276        PluginConnector]: BlockEncodingV2 initialized
[2020-11-24 21:34:20,945 INFO  L185        PluginConnector]: Executing the observer BlockEncodingObserver from plugin BlockEncodingV2 for "LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 24.11 09:34:20" (1/1) ...
[2020-11-24 21:34:21,164 INFO  L313           BlockEncoder]: Initial Icfg 13448 locations, 24717 edges
[2020-11-24 21:34:21,164 INFO  L258           BlockEncoder]: Using Remove infeasible edges
[2020-11-24 21:34:21,165 INFO  L270           BlockEncoder]: Using Minimize states even if more edges are added than removed.=true
[2020-11-24 21:34:21,165 INFO  L296           BlockEncoder]: Using Remove sink states
[2020-11-24 21:34:21,165 INFO  L171           BlockEncoder]: Using Apply optimizations until nothing changes=true
[2020-11-24 21:34:21,187 INFO  L70    emoveInfeasibleEdges]: Removed 315 edges and 29 locations because of local infeasibility
[2020-11-24 21:34:21,265 INFO  L70        RemoveSinkStates]: Removed 170 edges and 113 locations by removing sink states
[2020-11-24 21:34:21,288 INFO  L70    emoveInfeasibleEdges]: Removed 0 edges and 0 locations because of local infeasibility
[2020-11-24 21:34:21,295 INFO  L70        RemoveSinkStates]: Removed 0 edges and 0 locations by removing sink states
[2020-11-24 21:34:21,303 INFO  L237           BlockEncoder]: Using Create parallel compositions if possible
[2020-11-24 21:34:21,303 INFO  L66        ParallelComposer]: Creating parallel compositions
[2020-11-24 21:34:21,309 INFO  L313           BlockEncoder]: Encoded RCFG 13238 locations, 24131 edges
[2020-11-24 21:34:21,309 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.blockencoding CFG 24.11 09:34:21 BasicIcfg
[2020-11-24 21:34:21,309 INFO  L132        PluginConnector]: ------------------------ END BlockEncodingV2----------------------------
[2020-11-24 21:34:21,309 INFO  L113        PluginConnector]: ------------------------BuchiAutomizer----------------------------
[2020-11-24 21:34:21,309 INFO  L271        PluginConnector]: Initializing BuchiAutomizer...
[2020-11-24 21:34:21,311 INFO  L276        PluginConnector]: BuchiAutomizer initialized
[2020-11-24 21:34:21,311 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-24 21:34:21,311 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "MainToken_0xa2d0e29a9627e20FD886a8106DD0AE429403a57d_totalsupply.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 24.11 09:34:14" (1/6) ...
[2020-11-24 21:34:21,312 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@59c2841 and model type MainToken_0xa2d0e29a9627e20FD886a8106DD0AE429403a57d_totalsupply.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 24.11 09:34:21, skipping insertion in model container
[2020-11-24 21:34:21,312 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-24 21:34:21,313 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Hardcoded edu.utexas.cs.utopia.specLang AST 24.11 09:34:15" (2/6) ...
[2020-11-24 21:34:21,313 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@59c2841 and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 24.11 09:34:21, skipping insertion in model container
[2020-11-24 21:34:21,313 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-24 21:34:21,313 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "MainToken_0xa2d0e29a9627e20FD886a8106DD0AE429403a57d_totalsupply.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 24.11 09:34:16" (3/6) ...
[2020-11-24 21:34:21,313 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@59c2841 and model type MainToken_0xa2d0e29a9627e20FD886a8106DD0AE429403a57d_totalsupply.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer CFG 24.11 09:34:21, skipping insertion in model container
[2020-11-24 21:34:21,313 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-24 21:34:21,313 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Hardcoded edu.utexas.cs.utopia.ltl2aut AST 24.11 09:34:16" (4/6) ...
[2020-11-24 21:34:21,313 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@59c2841 and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 24.11 09:34:21, skipping insertion in model container
[2020-11-24 21:34:21,313 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-24 21:34:21,313 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 24.11 09:34:20" (5/6) ...
[2020-11-24 21:34:21,313 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@59c2841 and model type LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer OTHER 24.11 09:34:21, skipping insertion in model container
[2020-11-24 21:34:21,314 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-24 21:34:21,314 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.blockencoding CFG 24.11 09:34:21" (6/6) ...
[2020-11-24 21:34:21,314 INFO  L404   chiAutomizerObserver]: Analyzing ICFG MainToken_0xa2d0e29a9627e20FD886a8106DD0AE429403a57d_totalsupply.bpl_BEv2
[2020-11-24 21:34:21,345 INFO  L133   ementStrategyFactory]: Using default assertion order modulation
[2020-11-24 21:34:21,345 INFO  L377         BuchiCegarLoop]: Interprodecural is true
[2020-11-24 21:34:21,345 INFO  L378         BuchiCegarLoop]: Hoare is false
[2020-11-24 21:34:21,345 INFO  L379         BuchiCegarLoop]: Compute interpolants for Craig_TreeInterpolation
[2020-11-24 21:34:21,345 INFO  L380         BuchiCegarLoop]: Backedges is STRAIGHT_LINE
[2020-11-24 21:34:21,345 INFO  L381         BuchiCegarLoop]: Determinization is PREDICATE_ABSTRACTION
[2020-11-24 21:34:21,345 INFO  L382         BuchiCegarLoop]: Difference is false
[2020-11-24 21:34:21,345 INFO  L383         BuchiCegarLoop]: Minimize is MINIMIZE_SEVPA
[2020-11-24 21:34:21,345 INFO  L386         BuchiCegarLoop]: ======== Iteration 0==of CEGAR loop == BuchiCegarLoop========
[2020-11-24 21:34:21,420 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 13238 states.
[2020-11-24 21:34:21,505 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-24 21:34:21,506 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-24 21:34:21,506 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-24 21:34:21,514 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-24 21:34:21,514 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-24 21:34:21,514 INFO  L445         BuchiCegarLoop]: ======== Iteration 1============
[2020-11-24 21:34:21,514 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 13238 states.
[2020-11-24 21:34:21,564 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-24 21:34:21,564 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-24 21:34:21,564 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-24 21:34:21,566 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-24 21:34:21,566 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  success_totalSupply_BasicToken0 := false;
[L2]                  call_totalSupply_BasicToken0 := false;
[L2]      CALL        call main();
[L14767]              assume null == 0;
[L14768]  CALL        call this := FreshRefGenerator__success();
[L6697]               havoc newRef;
[L6698]               assume Alloc[newRef] == false;
[L6699]               Alloc[newRef] := true;
[L6700]               assume newRef != null;
[L14768]  RET         call this := FreshRefGenerator__success();
[L14769]              assume now >= 0;
[L14770]              assume DType[this] == MainToken;
[L14771]              assume msgvalue_MSG == 0;
[L14772]              gas := gas - 53000;
[L14773]  CALL        call MainToken_MainToken(this, msgsender_MSG, msgvalue_MSG);
[L4385]               havoc __exception;
[L4386]               revert := false;
[L4387]   COND FALSE  !(__exception)
[L4426]   CALL        call MainToken_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9506]   CALL        call Consts_Consts__success(this, msgsender_MSG, msgvalue_MSG);
[L9308]   CALL        call Consts_Consts_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9284]               assume msgsender_MSG != null;
[L9285]               Balance[this] := 0;
[L9286]               TOKEN_DECIMALS_Consts[this] := 18;
[L9287]               TOKEN_DECIMALS_UINT8_Consts[this] := 18;
[L9288]               TOKEN_DECIMAL_MULTIPLIER_Consts[this] := nonlinearPow(10, TOKEN_DECIMALS_Consts[this]) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9289]               TOKEN_NAME_Consts[this] := 1211920069;
[L9290]               TOKEN_SYMBOL_Consts[this] := 49428998;
[L9291]               PAUSED_Consts[this] := false;
[L9292]               __var_52 := ConstantToRef(207782497573736545615953600095632397981971535507);
[L9293]               TARGET_USER_Consts[this] := ConstantToRef(207782497573736545615953600095632397981971535507);
[L9294]               CONTINUE_MINTING_Consts[this] := true;
[L9308]   RET         call Consts_Consts_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9309]   COND FALSE  !(revert)
[L9506]   RET         call Consts_Consts__success(this, msgsender_MSG, msgvalue_MSG);
[L9507]   COND TRUE   revert
[L4426]   RET         call MainToken_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4427]               assume !revert && gas >= 0;
[L14773]  RET         call MainToken_MainToken(this, msgsender_MSG, msgvalue_MSG);
[L14774]              assume !revert && gas >= 0;

Loop:
[L14777]  CALL        call CorralChoice_MainToken(this);
[L14434]              havoc msgsender_MSG;
[L14435]              havoc msgvalue_MSG;
[L14436]              havoc choice;
[L14437]              havoc __ret_0_totalSupply;
[L14438]              havoc _owner_s729;
[L14439]              havoc balance_s729;
[L14440]              havoc _to_s1572;
[L14441]              havoc _value_s1572;
[L14442]              havoc _success_s1572;
[L14443]              havoc _owner_s395;
[L14444]              havoc _spender_s395;
[L14445]              havoc __ret_0_allowance;
[L14446]              havoc _from_s1551;
[L14447]              havoc _to_s1551;
[L14448]              havoc _value_s1551;
[L14449]              havoc _success_s1551;
[L14450]              havoc _spender_s379;
[L14451]              havoc _value_s379;
[L14452]              havoc __ret_0_approve;
[L14453]              havoc _spender_s437;
[L14454]              havoc _addedValue_s437;
[L14455]              havoc __ret_0_increaseApproval;
[L14456]              havoc _spender_s497;
[L14457]              havoc _subtractedValue_s497;
[L14458]              havoc __ret_0_decreaseApproval;
[L14459]              havoc __ret_0_owner;
[L14460]              havoc _newOwner_s558;
[L14461]              havoc __ret_0_mintingFinished;
[L14462]              havoc _to_s664;
[L14463]              havoc _amount_s664;
[L14464]              havoc __ret_0_mint;
[L14465]              havoc __ret_0_finishMinting;
[L14466]              havoc _owner_s742;
[L14467]              havoc balance_s742;
[L14468]              havoc _owner_s754;
[L14469]              havoc balance_s754;
[L14470]              havoc _addr_s792;
[L14471]              havoc count_s792;
[L14472]              havoc _addr_s849;
[L14473]              havoc _index_s849;
[L14474]              havoc _release_s849;
[L14475]              havoc _balance_s849;
[L14476]              havoc _to_s938;
[L14477]              havoc _amount_s938;
[L14478]              havoc _until_s938;
[L14479]              havoc tokens_s1107;
[L14480]              havoc _value_s1261;
[L14481]              havoc __ret_0_paused;
[L14482]              havoc _to_s1449;
[L14483]              havoc _amount_s1449;
[L14484]              havoc _until_s1449;
[L14485]              havoc __ret_0_mintAndFreeze;
[L14486]              havoc __ret_0_TOKEN_DECIMALS;
[L14487]              havoc __ret_0_TOKEN_DECIMALS_UINT8;
[L14488]              havoc __ret_0_TOKEN_DECIMAL_MULTIPLIER;
[L14489]              havoc __ret_0_TOKEN_NAME;
[L14490]              havoc __ret_0_TOKEN_SYMBOL;
[L14491]              havoc __ret_0_PAUSED;
[L14492]              havoc __ret_0_TARGET_USER;
[L14493]              havoc __ret_0_CONTINUE_MINTING;
[L14494]              havoc __ret_0_initialized;
[L14495]              havoc _name_s1511;
[L14496]              havoc _symbol_s1519;
[L14497]              havoc _decimals_s1527;
[L14498]              havoc tmpNow;
[L14499]              havoc gas;
[L14500]              assume gas > 4000000 && gas <= 8000000;
[L14501]              tmpNow := now;
[L14502]              havoc now;
[L14503]              assume now > tmpNow;
[L14504]              assume msgsender_MSG != null;
[L14505]              assume DType[msgsender_MSG] != ERC20Basic;
[L14506]              assume DType[msgsender_MSG] != SafeMath;
[L14507]              assume DType[msgsender_MSG] != BasicToken;
[L14508]              assume DType[msgsender_MSG] != ERC20;
[L14509]              assume DType[msgsender_MSG] != StandardToken;
[L14510]              assume DType[msgsender_MSG] != Ownable;
[L14511]              assume DType[msgsender_MSG] != MintableToken;
[L14512]              assume DType[msgsender_MSG] != FreezableToken;
[L14513]              assume DType[msgsender_MSG] != BurnableToken;
[L14514]              assume DType[msgsender_MSG] != Pausable;
[L14515]              assume DType[msgsender_MSG] != FreezableMintableToken;
[L14516]              assume DType[msgsender_MSG] != Consts;
[L14517]              assume DType[msgsender_MSG] != MainToken;
[L14518]              Alloc[msgsender_MSG] := true;
[L14519]  COND TRUE   choice == 38
[L14520]              gas := gas - 21000;
[L14521]  COND FALSE  !(gas >= 0)
[L14777]  RET         call CorralChoice_MainToken(this);

[2020-11-24 21:34:21,583 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-24 21:34:21,583 INFO  L82        PathProgramCache]: Analyzing trace with hash -367405044, now seen corresponding path program 1 times
[2020-11-24 21:34:21,589 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-24 21:34:21,610 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-24 21:34:21,646 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-24 21:34:21,648 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-24 21:34:21,648 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [4] imperfect sequences [] total 4
[2020-11-24 21:34:22,052 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-24 21:34:22,061 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-11-24 21:34:22,062 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=5, Invalid=7, Unknown=0, NotChecked=0, Total=12
[2020-11-24 21:34:22,063 INFO  L87              Difference]: Start difference. First operand 13238 states. Second operand 4 states.
[2020-11-24 21:34:23,370 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-24 21:34:23,370 INFO  L93              Difference]: Finished difference Result 8276 states and 9691 transitions.
[2020-11-24 21:34:23,370 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 4 states. 
[2020-11-24 21:34:23,371 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 8276 states and 9691 transitions.
[2020-11-24 21:34:23,405 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-24 21:34:23,453 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 8276 states to 8272 states and 9683 transitions.
[2020-11-24 21:34:23,453 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 4
[2020-11-24 21:34:23,457 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1857
[2020-11-24 21:34:23,458 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 8272 states and 9683 transitions.
[2020-11-24 21:34:23,474 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-24 21:34:23,474 INFO  L728         BuchiCegarLoop]: Abstraction has 8272 states and 9683 transitions.
[2020-11-24 21:34:23,496 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 8272 states and 9683 transitions.
[2020-11-24 21:34:23,598 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 8272 to 8272.
[2020-11-24 21:34:23,599 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 8272 states.
[2020-11-24 21:34:23,613 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 8272 states to 8272 states and 9683 transitions.
[2020-11-24 21:34:23,614 INFO  L751         BuchiCegarLoop]: Abstraction has 8272 states and 9683 transitions.
[2020-11-24 21:34:23,614 INFO  L631         BuchiCegarLoop]: Abstraction has 8272 states and 9683 transitions.
[2020-11-24 21:34:23,614 INFO  L445         BuchiCegarLoop]: ======== Iteration 2============
[2020-11-24 21:34:23,614 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 8272 states and 9683 transitions.
[2020-11-24 21:34:23,628 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-24 21:34:23,628 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-24 21:34:23,628 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-24 21:34:23,630 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-24 21:34:23,630 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  success_totalSupply_BasicToken0 := false;
[L2]                  call_totalSupply_BasicToken0 := false;
[L2]      CALL        call main();
[L14767]              assume null == 0;
[L14768]  CALL        call this := FreshRefGenerator__success();
[L6697]               havoc newRef;
[L6698]               assume Alloc[newRef] == false;
[L6699]               Alloc[newRef] := true;
[L6700]               assume newRef != null;
[L14768]  RET         call this := FreshRefGenerator__success();
[L14769]              assume now >= 0;
[L14770]              assume DType[this] == MainToken;
[L14771]              assume msgvalue_MSG == 0;
[L14772]              gas := gas - 53000;
[L14773]  CALL        call MainToken_MainToken(this, msgsender_MSG, msgvalue_MSG);
[L4385]               havoc __exception;
[L4386]               revert := false;
[L4387]   COND FALSE  !(__exception)
[L4426]   CALL        call MainToken_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9506]   CALL        call Consts_Consts__success(this, msgsender_MSG, msgvalue_MSG);
[L9308]   CALL        call Consts_Consts_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9284]               assume msgsender_MSG != null;
[L9285]               Balance[this] := 0;
[L9286]               TOKEN_DECIMALS_Consts[this] := 18;
[L9287]               TOKEN_DECIMALS_UINT8_Consts[this] := 18;
[L9288]               TOKEN_DECIMAL_MULTIPLIER_Consts[this] := nonlinearPow(10, TOKEN_DECIMALS_Consts[this]) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9289]               TOKEN_NAME_Consts[this] := 1211920069;
[L9290]               TOKEN_SYMBOL_Consts[this] := 49428998;
[L9291]               PAUSED_Consts[this] := false;
[L9292]               __var_52 := ConstantToRef(207782497573736545615953600095632397981971535507);
[L9293]               TARGET_USER_Consts[this] := ConstantToRef(207782497573736545615953600095632397981971535507);
[L9294]               CONTINUE_MINTING_Consts[this] := true;
[L9308]   RET         call Consts_Consts_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9309]   COND FALSE  !(revert)
[L9506]   RET         call Consts_Consts__success(this, msgsender_MSG, msgvalue_MSG);
[L9507]   COND TRUE   revert
[L4426]   RET         call MainToken_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4427]               assume !revert && gas >= 0;
[L14773]  RET         call MainToken_MainToken(this, msgsender_MSG, msgvalue_MSG);
[L14774]              assume !revert && gas >= 0;
[L14777]  CALL        call CorralChoice_MainToken(this);
[L14434]              havoc msgsender_MSG;
[L14435]              havoc msgvalue_MSG;
[L14436]              havoc choice;
[L14437]              havoc __ret_0_totalSupply;
[L14438]              havoc _owner_s729;
[L14439]              havoc balance_s729;
[L14440]              havoc _to_s1572;
[L14441]              havoc _value_s1572;
[L14442]              havoc _success_s1572;
[L14443]              havoc _owner_s395;
[L14444]              havoc _spender_s395;
[L14445]              havoc __ret_0_allowance;
[L14446]              havoc _from_s1551;
[L14447]              havoc _to_s1551;
[L14448]              havoc _value_s1551;
[L14449]              havoc _success_s1551;
[L14450]              havoc _spender_s379;
[L14451]              havoc _value_s379;
[L14452]              havoc __ret_0_approve;
[L14453]              havoc _spender_s437;
[L14454]              havoc _addedValue_s437;
[L14455]              havoc __ret_0_increaseApproval;
[L14456]              havoc _spender_s497;
[L14457]              havoc _subtractedValue_s497;
[L14458]              havoc __ret_0_decreaseApproval;
[L14459]              havoc __ret_0_owner;
[L14460]              havoc _newOwner_s558;
[L14461]              havoc __ret_0_mintingFinished;
[L14462]              havoc _to_s664;
[L14463]              havoc _amount_s664;
[L14464]              havoc __ret_0_mint;
[L14465]              havoc __ret_0_finishMinting;
[L14466]              havoc _owner_s742;
[L14467]              havoc balance_s742;
[L14468]              havoc _owner_s754;
[L14469]              havoc balance_s754;
[L14470]              havoc _addr_s792;
[L14471]              havoc count_s792;
[L14472]              havoc _addr_s849;
[L14473]              havoc _index_s849;
[L14474]              havoc _release_s849;
[L14475]              havoc _balance_s849;
[L14476]              havoc _to_s938;
[L14477]              havoc _amount_s938;
[L14478]              havoc _until_s938;
[L14479]              havoc tokens_s1107;
[L14480]              havoc _value_s1261;
[L14481]              havoc __ret_0_paused;
[L14482]              havoc _to_s1449;
[L14483]              havoc _amount_s1449;
[L14484]              havoc _until_s1449;
[L14485]              havoc __ret_0_mintAndFreeze;
[L14486]              havoc __ret_0_TOKEN_DECIMALS;
[L14487]              havoc __ret_0_TOKEN_DECIMALS_UINT8;
[L14488]              havoc __ret_0_TOKEN_DECIMAL_MULTIPLIER;
[L14489]              havoc __ret_0_TOKEN_NAME;
[L14490]              havoc __ret_0_TOKEN_SYMBOL;
[L14491]              havoc __ret_0_PAUSED;
[L14492]              havoc __ret_0_TARGET_USER;
[L14493]              havoc __ret_0_CONTINUE_MINTING;
[L14494]              havoc __ret_0_initialized;
[L14495]              havoc _name_s1511;
[L14496]              havoc _symbol_s1519;
[L14497]              havoc _decimals_s1527;
[L14498]              havoc tmpNow;
[L14499]              havoc gas;
[L14500]              assume gas > 4000000 && gas <= 8000000;
[L14501]              tmpNow := now;
[L14502]              havoc now;
[L14503]              assume now > tmpNow;
[L14504]              assume msgsender_MSG != null;
[L14505]              assume DType[msgsender_MSG] != ERC20Basic;
[L14506]              assume DType[msgsender_MSG] != SafeMath;
[L14507]              assume DType[msgsender_MSG] != BasicToken;
[L14508]              assume DType[msgsender_MSG] != ERC20;
[L14509]              assume DType[msgsender_MSG] != StandardToken;
[L14510]              assume DType[msgsender_MSG] != Ownable;
[L14511]              assume DType[msgsender_MSG] != MintableToken;
[L14512]              assume DType[msgsender_MSG] != FreezableToken;
[L14513]              assume DType[msgsender_MSG] != BurnableToken;
[L14514]              assume DType[msgsender_MSG] != Pausable;
[L14515]              assume DType[msgsender_MSG] != FreezableMintableToken;
[L14516]              assume DType[msgsender_MSG] != Consts;
[L14517]              assume DType[msgsender_MSG] != MainToken;
[L14518]              Alloc[msgsender_MSG] := true;
[L14519]  COND TRUE   choice == 38
[L14520]              gas := gas - 21000;
[L14521]  COND TRUE   gas >= 0
[L14522]              assume msgvalue_MSG == 0;
[L14523]  CALL        call __ret_0_totalSupply := totalSupply_BasicToken(this, msgsender_MSG, msgvalue_MSG);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume totalSupply__BasicToken[this] >= 0 && totalSupply__BasicToken[this] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_totalSupply_BasicToken0 := true;
[L2]                  call_totalSupply_BasicToken0 := false;
[L2]                  revert := revert_hold;
[L379]                havoc __exception;
[L380]                revert := false;
[L381]    COND FALSE  !(__exception)
[L420]    CALL        call __ret_0_ := totalSupply_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6884]               __ret_0_ := totalSupply__BasicToken[this];
[L420]    RET         call __ret_0_ := totalSupply_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L421]                assume !revert && gas >= 0;
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume !((((((((((__ret_0_ == totalSupply__BasicToken[this] && totalSupply__BasicToken[this] == old(totalSupply__BasicToken[this])) && balances_BasicToken[this] == old(balances_BasicToken[this])) && allowed_StandardToken[this] == old(allowed_StandardToken[this])) && initialized_MainToken[this] == old(initialized_MainToken[this])) && paused_Pausable[this] == old(paused_Pausable[this])) && mintingFinished_MintableToken[this] == old(mintingFinished_MintableToken[this])) && owner_Ownable[this] == old(owner_Ownable[this])) && chains_FreezableToken[this] == old(chains_FreezableToken[this])) && freezings_FreezableToken[this] == old(freezings_FreezableToken[this])) && freezingBalance_FreezableToken[this] == old(freezingBalance_FreezableToken[this]));
[L2]                  revert := revert_hold;
[L14523]  RET         call __ret_0_totalSupply := totalSupply_BasicToken(this, msgsender_MSG, msgvalue_MSG);
[L14777]  RET         call CorralChoice_MainToken(this);

Loop:
[L14777]  CALL        call CorralChoice_MainToken(this);
[L14434]              havoc msgsender_MSG;
[L14435]              havoc msgvalue_MSG;
[L14436]              havoc choice;
[L14437]              havoc __ret_0_totalSupply;
[L14438]              havoc _owner_s729;
[L14439]              havoc balance_s729;
[L14440]              havoc _to_s1572;
[L14441]              havoc _value_s1572;
[L14442]              havoc _success_s1572;
[L14443]              havoc _owner_s395;
[L14444]              havoc _spender_s395;
[L14445]              havoc __ret_0_allowance;
[L14446]              havoc _from_s1551;
[L14447]              havoc _to_s1551;
[L14448]              havoc _value_s1551;
[L14449]              havoc _success_s1551;
[L14450]              havoc _spender_s379;
[L14451]              havoc _value_s379;
[L14452]              havoc __ret_0_approve;
[L14453]              havoc _spender_s437;
[L14454]              havoc _addedValue_s437;
[L14455]              havoc __ret_0_increaseApproval;
[L14456]              havoc _spender_s497;
[L14457]              havoc _subtractedValue_s497;
[L14458]              havoc __ret_0_decreaseApproval;
[L14459]              havoc __ret_0_owner;
[L14460]              havoc _newOwner_s558;
[L14461]              havoc __ret_0_mintingFinished;
[L14462]              havoc _to_s664;
[L14463]              havoc _amount_s664;
[L14464]              havoc __ret_0_mint;
[L14465]              havoc __ret_0_finishMinting;
[L14466]              havoc _owner_s742;
[L14467]              havoc balance_s742;
[L14468]              havoc _owner_s754;
[L14469]              havoc balance_s754;
[L14470]              havoc _addr_s792;
[L14471]              havoc count_s792;
[L14472]              havoc _addr_s849;
[L14473]              havoc _index_s849;
[L14474]              havoc _release_s849;
[L14475]              havoc _balance_s849;
[L14476]              havoc _to_s938;
[L14477]              havoc _amount_s938;
[L14478]              havoc _until_s938;
[L14479]              havoc tokens_s1107;
[L14480]              havoc _value_s1261;
[L14481]              havoc __ret_0_paused;
[L14482]              havoc _to_s1449;
[L14483]              havoc _amount_s1449;
[L14484]              havoc _until_s1449;
[L14485]              havoc __ret_0_mintAndFreeze;
[L14486]              havoc __ret_0_TOKEN_DECIMALS;
[L14487]              havoc __ret_0_TOKEN_DECIMALS_UINT8;
[L14488]              havoc __ret_0_TOKEN_DECIMAL_MULTIPLIER;
[L14489]              havoc __ret_0_TOKEN_NAME;
[L14490]              havoc __ret_0_TOKEN_SYMBOL;
[L14491]              havoc __ret_0_PAUSED;
[L14492]              havoc __ret_0_TARGET_USER;
[L14493]              havoc __ret_0_CONTINUE_MINTING;
[L14494]              havoc __ret_0_initialized;
[L14495]              havoc _name_s1511;
[L14496]              havoc _symbol_s1519;
[L14497]              havoc _decimals_s1527;
[L14498]              havoc tmpNow;
[L14499]              havoc gas;
[L14500]              assume gas > 4000000 && gas <= 8000000;
[L14501]              tmpNow := now;
[L14502]              havoc now;
[L14503]              assume now > tmpNow;
[L14504]              assume msgsender_MSG != null;
[L14505]              assume DType[msgsender_MSG] != ERC20Basic;
[L14506]              assume DType[msgsender_MSG] != SafeMath;
[L14507]              assume DType[msgsender_MSG] != BasicToken;
[L14508]              assume DType[msgsender_MSG] != ERC20;
[L14509]              assume DType[msgsender_MSG] != StandardToken;
[L14510]              assume DType[msgsender_MSG] != Ownable;
[L14511]              assume DType[msgsender_MSG] != MintableToken;
[L14512]              assume DType[msgsender_MSG] != FreezableToken;
[L14513]              assume DType[msgsender_MSG] != BurnableToken;
[L14514]              assume DType[msgsender_MSG] != Pausable;
[L14515]              assume DType[msgsender_MSG] != FreezableMintableToken;
[L14516]              assume DType[msgsender_MSG] != Consts;
[L14517]              assume DType[msgsender_MSG] != MainToken;
[L14518]              Alloc[msgsender_MSG] := true;
[L14519]  COND TRUE   choice == 38
[L14520]              gas := gas - 21000;
[L14521]  COND TRUE   gas >= 0
[L14522]              assume msgvalue_MSG == 0;
[L14523]  CALL        call __ret_0_totalSupply := totalSupply_BasicToken(this, msgsender_MSG, msgvalue_MSG);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume totalSupply__BasicToken[this] >= 0 && totalSupply__BasicToken[this] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_totalSupply_BasicToken0 := true;
[L2]                  call_totalSupply_BasicToken0 := false;
[L2]                  revert := revert_hold;
[L379]                havoc __exception;
[L380]                revert := false;
[L381]    COND FALSE  !(__exception)
[L420]    CALL        call __ret_0_ := totalSupply_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6884]               __ret_0_ := totalSupply__BasicToken[this];
[L420]    RET         call __ret_0_ := totalSupply_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L421]                assume !revert && gas >= 0;
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume !((((((((((__ret_0_ == totalSupply__BasicToken[this] && totalSupply__BasicToken[this] == old(totalSupply__BasicToken[this])) && balances_BasicToken[this] == old(balances_BasicToken[this])) && allowed_StandardToken[this] == old(allowed_StandardToken[this])) && initialized_MainToken[this] == old(initialized_MainToken[this])) && paused_Pausable[this] == old(paused_Pausable[this])) && mintingFinished_MintableToken[this] == old(mintingFinished_MintableToken[this])) && owner_Ownable[this] == old(owner_Ownable[this])) && chains_FreezableToken[this] == old(chains_FreezableToken[this])) && freezings_FreezableToken[this] == old(freezings_FreezableToken[this])) && freezingBalance_FreezableToken[this] == old(freezingBalance_FreezableToken[this]));
[L2]                  revert := revert_hold;
[L14523]  RET         call __ret_0_totalSupply := totalSupply_BasicToken(this, msgsender_MSG, msgvalue_MSG);
[L14777]  RET         call CorralChoice_MainToken(this);

[2020-11-24 21:34:23,634 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-24 21:34:23,634 INFO  L82        PathProgramCache]: Analyzing trace with hash 1111087174, now seen corresponding path program 1 times
[2020-11-24 21:34:23,635 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-24 21:34:23,648 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-24 21:34:23,675 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-24 21:34:23,675 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-24 21:34:23,675 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [3] imperfect sequences [] total 3
[2020-11-24 21:34:23,676 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-24 21:34:23,676 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-11-24 21:34:23,676 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-11-24 21:34:23,676 INFO  L87              Difference]: Start difference. First operand 8272 states and 9683 transitions. cyclomatic complexity: 1431 Second operand 3 states.
[2020-11-24 21:34:23,870 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-24 21:34:23,870 INFO  L93              Difference]: Finished difference Result 9736 states and 11143 transitions.
[2020-11-24 21:34:23,871 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-11-24 21:34:23,871 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 9736 states and 11143 transitions.
[2020-11-24 21:34:23,897 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-24 21:34:23,946 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 9736 states to 9736 states and 11143 transitions.
[2020-11-24 21:34:23,946 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 2275
[2020-11-24 21:34:23,948 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 2275
[2020-11-24 21:34:23,948 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 9736 states and 11143 transitions.
[2020-11-24 21:34:23,958 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-24 21:34:23,958 INFO  L728         BuchiCegarLoop]: Abstraction has 9736 states and 11143 transitions.
[2020-11-24 21:34:23,968 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 9736 states and 11143 transitions.
[2020-11-24 21:34:24,052 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 9736 to 8648.
[2020-11-24 21:34:24,052 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 8648 states.
[2020-11-24 21:34:24,064 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 8648 states to 8648 states and 9789 transitions.
[2020-11-24 21:34:24,064 INFO  L751         BuchiCegarLoop]: Abstraction has 8648 states and 9789 transitions.
[2020-11-24 21:34:24,064 INFO  L631         BuchiCegarLoop]: Abstraction has 8648 states and 9789 transitions.
[2020-11-24 21:34:24,064 INFO  L445         BuchiCegarLoop]: ======== Iteration 3============
[2020-11-24 21:34:24,064 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 8648 states and 9789 transitions.
[2020-11-24 21:34:24,075 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-24 21:34:24,075 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-24 21:34:24,075 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-24 21:34:24,082 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [38, 38, 38, 38, 38, 38, 38, 38, 38, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-24 21:34:24,082 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  success_totalSupply_BasicToken0 := false;
[L2]                  call_totalSupply_BasicToken0 := false;
[L2]      CALL        call main();
[L14767]              assume null == 0;
[L14768]  CALL        call this := FreshRefGenerator__success();
[L6697]               havoc newRef;
[L6698]               assume Alloc[newRef] == false;
[L6699]               Alloc[newRef] := true;
[L6700]               assume newRef != null;
[L14768]  RET         call this := FreshRefGenerator__success();
[L14769]              assume now >= 0;
[L14770]              assume DType[this] == MainToken;
[L14771]              assume msgvalue_MSG == 0;
[L14772]              gas := gas - 53000;
[L14773]  CALL        call MainToken_MainToken(this, msgsender_MSG, msgvalue_MSG);
[L4385]               havoc __exception;
[L4386]               revert := false;
[L4387]   COND FALSE  !(__exception)
[L4426]   CALL        call MainToken_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9506]   CALL        call Consts_Consts__success(this, msgsender_MSG, msgvalue_MSG);
[L9308]   CALL        call Consts_Consts_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9284]               assume msgsender_MSG != null;
[L9285]               Balance[this] := 0;
[L9286]               TOKEN_DECIMALS_Consts[this] := 18;
[L9287]               TOKEN_DECIMALS_UINT8_Consts[this] := 18;
[L9288]               TOKEN_DECIMAL_MULTIPLIER_Consts[this] := nonlinearPow(10, TOKEN_DECIMALS_Consts[this]) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9289]               TOKEN_NAME_Consts[this] := 1211920069;
[L9290]               TOKEN_SYMBOL_Consts[this] := 49428998;
[L9291]               PAUSED_Consts[this] := false;
[L9292]               __var_52 := ConstantToRef(207782497573736545615953600095632397981971535507);
[L9293]               TARGET_USER_Consts[this] := ConstantToRef(207782497573736545615953600095632397981971535507);
[L9294]               CONTINUE_MINTING_Consts[this] := true;
[L9308]   RET         call Consts_Consts_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9309]   COND FALSE  !(revert)
[L9506]   RET         call Consts_Consts__success(this, msgsender_MSG, msgvalue_MSG);
[L9507]   COND FALSE  !(revert)
[L9510]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L9510]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L9511]   COND FALSE  !(revert)
[L9514]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6995]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6995]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   COND FALSE  !(revert)
[L6999]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6976]               assume msgsender_MSG != null;
[L6977]               Balance[this] := 0;
[L6999]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]   COND FALSE  !(revert)
[L9514]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L9515]   COND FALSE  !(revert)
[L9518]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6866]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6866]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   COND FALSE  !(revert)
[L6870]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6844]               assume msgsender_MSG != null;
[L6845]               Balance[this] := 0;
[L6846]               balances_BasicToken[this] := zeroRefintArr();
[L6847]               sum_balances0[this] := 0;
[L6848]               totalSupply__BasicToken[this] := 0;
[L6870]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6871]   COND FALSE  !(revert)
[L9518]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9519]   COND FALSE  !(revert)
[L9522]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7047]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L7047]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7048]   COND FALSE  !(revert)
[L7051]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6995]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6995]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   COND FALSE  !(revert)
[L6999]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6976]               assume msgsender_MSG != null;
[L6977]               Balance[this] := 0;
[L6999]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]   COND FALSE  !(revert)
[L7051]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7052]   COND FALSE  !(revert)
[L7055]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6866]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6866]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   COND FALSE  !(revert)
[L6870]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6844]               assume msgsender_MSG != null;
[L6845]               Balance[this] := 0;
[L6846]               balances_BasicToken[this] := zeroRefintArr();
[L6847]               sum_balances0[this] := 0;
[L6848]               totalSupply__BasicToken[this] := 0;
[L6870]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6871]   COND FALSE  !(revert)
[L7055]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7056]   COND FALSE  !(revert)
[L7059]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7018]               assume msgsender_MSG != null;
[L7019]               Balance[this] := 0;
[L7020]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7021]               sum_allowed1[this] := 0;
[L7059]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7060]   COND FALSE  !(revert)
[L9522]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9523]   COND FALSE  !(revert)
[L9526]   CALL        call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7654]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L7654]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7655]   COND FALSE  !(revert)
[L7658]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6995]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6995]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   COND FALSE  !(revert)
[L6999]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6976]               assume msgsender_MSG != null;
[L6977]               Balance[this] := 0;
[L6999]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]   COND FALSE  !(revert)
[L7658]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7659]   COND FALSE  !(revert)
[L7662]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6866]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6866]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   COND FALSE  !(revert)
[L6870]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6844]               assume msgsender_MSG != null;
[L6845]               Balance[this] := 0;
[L6846]               balances_BasicToken[this] := zeroRefintArr();
[L6847]               sum_balances0[this] := 0;
[L6848]               totalSupply__BasicToken[this] := 0;
[L6870]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6871]   COND FALSE  !(revert)
[L7662]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7663]   COND FALSE  !(revert)
[L7666]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7047]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L7047]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7048]   COND FALSE  !(revert)
[L7051]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6995]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6995]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   COND FALSE  !(revert)
[L6999]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6976]               assume msgsender_MSG != null;
[L6977]               Balance[this] := 0;
[L6999]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]   COND FALSE  !(revert)
[L7051]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7052]   COND FALSE  !(revert)
[L7055]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6866]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6866]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   COND FALSE  !(revert)
[L6870]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6844]               assume msgsender_MSG != null;
[L6845]               Balance[this] := 0;
[L6846]               balances_BasicToken[this] := zeroRefintArr();
[L6847]               sum_balances0[this] := 0;
[L6848]               totalSupply__BasicToken[this] := 0;
[L6870]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6871]   COND FALSE  !(revert)
[L7055]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7056]   COND FALSE  !(revert)
[L7059]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7018]               assume msgsender_MSG != null;
[L7019]               Balance[this] := 0;
[L7020]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7021]               sum_allowed1[this] := 0;
[L7059]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7060]   COND FALSE  !(revert)
[L7666]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7667]   COND FALSE  !(revert)
[L7670]   CALL        call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7617]               assume msgsender_MSG != null;
[L7618]               Balance[this] := 0;
[L7619]               chains_FreezableToken[this] := zerointintArr();
[L7620]               sum_chains2[this] := 0;
[L7621]               freezings_FreezableToken[this] := zerointintArr();
[L7622]               sum_freezings3[this] := 0;
[L7623]               freezingBalance_FreezableToken[this] := zeroRefintArr();
[L7624]               sum_freezingBalance4[this] := 0;
[L7670]   RET         call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7671]   COND FALSE  !(revert)
[L9526]   RET         call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9527]   COND FALSE  !(revert)
[L9530]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7289]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7272]               assume msgsender_MSG != null;
[L7273]               Balance[this] := 0;
[L7274]               owner_Ownable[this] := null;
[L7276]               owner_Ownable[this] := msgsender_MSG;
[L7289]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7290]   COND FALSE  !(revert)
[L9530]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L9531]   COND FALSE  !(revert)
[L9534]   CALL        call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7473]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L7473]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7474]   COND FALSE  !(revert)
[L7477]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6995]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6995]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   COND FALSE  !(revert)
[L6999]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6976]               assume msgsender_MSG != null;
[L6977]               Balance[this] := 0;
[L6999]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]   COND FALSE  !(revert)
[L7477]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7478]   COND FALSE  !(revert)
[L7481]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6866]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6866]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   COND FALSE  !(revert)
[L6870]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6844]               assume msgsender_MSG != null;
[L6845]               Balance[this] := 0;
[L6846]               balances_BasicToken[this] := zeroRefintArr();
[L6847]               sum_balances0[this] := 0;
[L6848]               totalSupply__BasicToken[this] := 0;
[L6870]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6871]   COND FALSE  !(revert)
[L7481]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7482]   COND FALSE  !(revert)
[L7485]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7047]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L7047]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7048]   COND FALSE  !(revert)
[L7051]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6995]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6995]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   COND FALSE  !(revert)
[L6999]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6976]               assume msgsender_MSG != null;
[L6977]               Balance[this] := 0;
[L6999]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]   COND FALSE  !(revert)
[L7051]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7052]   COND FALSE  !(revert)
[L7055]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6866]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6866]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   COND FALSE  !(revert)
[L6870]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6844]               assume msgsender_MSG != null;
[L6845]               Balance[this] := 0;
[L6846]               balances_BasicToken[this] := zeroRefintArr();
[L6847]               sum_balances0[this] := 0;
[L6848]               totalSupply__BasicToken[this] := 0;
[L6870]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6871]   COND FALSE  !(revert)
[L7055]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7056]   COND FALSE  !(revert)
[L7059]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7018]               assume msgsender_MSG != null;
[L7019]               Balance[this] := 0;
[L7020]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7021]               sum_allowed1[this] := 0;
[L7059]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7060]   COND FALSE  !(revert)
[L7485]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7486]   COND FALSE  !(revert)
[L7489]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7289]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7272]               assume msgsender_MSG != null;
[L7273]               Balance[this] := 0;
[L7274]               owner_Ownable[this] := null;
[L7276]               owner_Ownable[this] := msgsender_MSG;
[L7289]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7290]   COND FALSE  !(revert)
[L7489]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7490]   COND FALSE  !(revert)
[L7493]   CALL        call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7437]               assume msgsender_MSG != null;
[L7438]               Balance[this] := 0;
[L7439]               mintingFinished_MintableToken[this] := false;
[L7493]   RET         call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7494]   COND FALSE  !(revert)
[L9534]   RET         call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9535]   COND FALSE  !(revert)
[L9538]   CALL        call FreezableMintableToken_FreezableMintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9093]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L9093]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L9094]   COND FALSE  !(revert)
[L9097]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6995]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6995]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   COND FALSE  !(revert)
[L6999]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6976]               assume msgsender_MSG != null;
[L6977]               Balance[this] := 0;
[L6999]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]   COND FALSE  !(revert)
[L9097]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L9098]   COND FALSE  !(revert)
[L9101]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6866]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6866]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   COND FALSE  !(revert)
[L6870]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6844]               assume msgsender_MSG != null;
[L6845]               Balance[this] := 0;
[L6846]               balances_BasicToken[this] := zeroRefintArr();
[L6847]               sum_balances0[this] := 0;
[L6848]               totalSupply__BasicToken[this] := 0;
[L6870]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6871]   COND FALSE  !(revert)
[L9101]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9102]   COND FALSE  !(revert)
[L9105]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7047]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L7047]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7048]   COND FALSE  !(revert)
[L7051]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6995]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6995]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   COND FALSE  !(revert)
[L6999]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6976]               assume msgsender_MSG != null;
[L6977]               Balance[this] := 0;
[L6999]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]   COND FALSE  !(revert)
[L7051]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7052]   COND FALSE  !(revert)
[L7055]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6866]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6866]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   COND FALSE  !(revert)
[L6870]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6844]               assume msgsender_MSG != null;
[L6845]               Balance[this] := 0;
[L6846]               balances_BasicToken[this] := zeroRefintArr();
[L6847]               sum_balances0[this] := 0;
[L6848]               totalSupply__BasicToken[this] := 0;
[L6870]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6871]   COND FALSE  !(revert)
[L7055]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7056]   COND FALSE  !(revert)
[L7059]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7018]               assume msgsender_MSG != null;
[L7019]               Balance[this] := 0;
[L7020]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7021]               sum_allowed1[this] := 0;
[L7059]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7060]   COND FALSE  !(revert)
[L9105]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9106]   COND FALSE  !(revert)
[L9109]   CALL        call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7654]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L7654]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7655]   COND FALSE  !(revert)
[L7658]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6995]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6995]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   COND FALSE  !(revert)
[L6999]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6976]               assume msgsender_MSG != null;
[L6977]               Balance[this] := 0;
[L6999]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]   COND FALSE  !(revert)
[L7658]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7659]   COND FALSE  !(revert)
[L7662]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6866]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6866]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   COND FALSE  !(revert)
[L6870]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6844]               assume msgsender_MSG != null;
[L6845]               Balance[this] := 0;
[L6846]               balances_BasicToken[this] := zeroRefintArr();
[L6847]               sum_balances0[this] := 0;
[L6848]               totalSupply__BasicToken[this] := 0;
[L6870]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6871]   COND FALSE  !(revert)
[L7662]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7663]   COND FALSE  !(revert)
[L7666]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7047]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L7047]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7048]   COND FALSE  !(revert)
[L7051]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6995]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6995]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   COND FALSE  !(revert)
[L6999]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6976]               assume msgsender_MSG != null;
[L6977]               Balance[this] := 0;
[L6999]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]   COND FALSE  !(revert)
[L7051]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7052]   COND FALSE  !(revert)
[L7055]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6866]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6866]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   COND FALSE  !(revert)
[L6870]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6844]               assume msgsender_MSG != null;
[L6845]               Balance[this] := 0;
[L6846]               balances_BasicToken[this] := zeroRefintArr();
[L6847]               sum_balances0[this] := 0;
[L6848]               totalSupply__BasicToken[this] := 0;
[L6870]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6871]   COND FALSE  !(revert)
[L7055]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7056]   COND FALSE  !(revert)
[L7059]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7018]               assume msgsender_MSG != null;
[L7019]               Balance[this] := 0;
[L7020]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7021]               sum_allowed1[this] := 0;
[L7059]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7060]   COND FALSE  !(revert)
[L7666]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7667]   COND FALSE  !(revert)
[L7670]   CALL        call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7617]               assume msgsender_MSG != null;
[L7618]               Balance[this] := 0;
[L7619]               chains_FreezableToken[this] := zerointintArr();
[L7620]               sum_chains2[this] := 0;
[L7621]               freezings_FreezableToken[this] := zerointintArr();
[L7622]               sum_freezings3[this] := 0;
[L7623]               freezingBalance_FreezableToken[this] := zeroRefintArr();
[L7624]               sum_freezingBalance4[this] := 0;
[L7670]   RET         call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7671]   COND FALSE  !(revert)
[L9109]   RET         call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9110]   COND FALSE  !(revert)
[L9113]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7289]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7272]               assume msgsender_MSG != null;
[L7273]               Balance[this] := 0;
[L7274]               owner_Ownable[this] := null;
[L7276]               owner_Ownable[this] := msgsender_MSG;
[L7289]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7290]   COND FALSE  !(revert)
[L9113]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L9114]   COND FALSE  !(revert)
[L9117]   CALL        call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7473]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L7473]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7474]   COND FALSE  !(revert)
[L7477]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6995]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6995]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   COND FALSE  !(revert)
[L6999]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6976]               assume msgsender_MSG != null;
[L6977]               Balance[this] := 0;
[L6999]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]   COND FALSE  !(revert)
[L7477]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7478]   COND FALSE  !(revert)
[L7481]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6866]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6866]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   COND FALSE  !(revert)
[L6870]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6844]               assume msgsender_MSG != null;
[L6845]               Balance[this] := 0;
[L6846]               balances_BasicToken[this] := zeroRefintArr();
[L6847]               sum_balances0[this] := 0;
[L6848]               totalSupply__BasicToken[this] := 0;
[L6870]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6871]   COND FALSE  !(revert)
[L7481]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7482]   COND FALSE  !(revert)
[L7485]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7047]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L7047]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7048]   COND FALSE  !(revert)
[L7051]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6995]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6995]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   COND FALSE  !(revert)
[L6999]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6976]               assume msgsender_MSG != null;
[L6977]               Balance[this] := 0;
[L6999]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]   COND FALSE  !(revert)
[L7051]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7052]   COND FALSE  !(revert)
[L7055]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6866]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6866]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   COND FALSE  !(revert)
[L6870]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6844]               assume msgsender_MSG != null;
[L6845]               Balance[this] := 0;
[L6846]               balances_BasicToken[this] := zeroRefintArr();
[L6847]               sum_balances0[this] := 0;
[L6848]               totalSupply__BasicToken[this] := 0;
[L6870]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6871]   COND FALSE  !(revert)
[L7055]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7056]   COND FALSE  !(revert)
[L7059]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7018]               assume msgsender_MSG != null;
[L7019]               Balance[this] := 0;
[L7020]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7021]               sum_allowed1[this] := 0;
[L7059]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7060]   COND FALSE  !(revert)
[L7485]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7486]   COND FALSE  !(revert)
[L7489]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7289]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7272]               assume msgsender_MSG != null;
[L7273]               Balance[this] := 0;
[L7274]               owner_Ownable[this] := null;
[L7276]               owner_Ownable[this] := msgsender_MSG;
[L7289]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7290]   COND FALSE  !(revert)
[L7489]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7490]   COND FALSE  !(revert)
[L7493]   CALL        call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7437]               assume msgsender_MSG != null;
[L7438]               Balance[this] := 0;
[L7439]               mintingFinished_MintableToken[this] := false;
[L7493]   RET         call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7494]   COND FALSE  !(revert)
[L9117]   RET         call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9118]   COND FALSE  !(revert)
[L9121]   CALL        call FreezableMintableToken_FreezableMintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9050]               assume msgsender_MSG != null;
[L9051]               Balance[this] := 0;
[L9121]   RET         call FreezableMintableToken_FreezableMintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9122]   COND FALSE  !(revert)
[L9538]   RET         call FreezableMintableToken_FreezableMintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9539]   COND FALSE  !(revert)
[L9542]   CALL        call BurnableToken_BurnableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L8837]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L8837]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L8838]   COND FALSE  !(revert)
[L8841]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6866]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6866]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   COND FALSE  !(revert)
[L6870]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6844]               assume msgsender_MSG != null;
[L6845]               Balance[this] := 0;
[L6846]               balances_BasicToken[this] := zeroRefintArr();
[L6847]               sum_balances0[this] := 0;
[L6848]               totalSupply__BasicToken[this] := 0;
[L6870]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6871]   COND FALSE  !(revert)
[L8841]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L8842]   COND FALSE  !(revert)
[L8845]   CALL        call BurnableToken_BurnableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8814]               assume msgsender_MSG != null;
[L8815]               Balance[this] := 0;
[L8845]   RET         call BurnableToken_BurnableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8846]   COND FALSE  !(revert)
[L9542]   RET         call BurnableToken_BurnableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9543]   COND FALSE  !(revert)
[L9546]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L8963]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7289]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7272]               assume msgsender_MSG != null;
[L7273]               Balance[this] := 0;
[L7274]               owner_Ownable[this] := null;
[L7276]               owner_Ownable[this] := msgsender_MSG;
[L7289]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7290]   COND FALSE  !(revert)
[L8963]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L8964]   COND FALSE  !(revert)
[L8967]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8943]               assume msgsender_MSG != null;
[L8944]               Balance[this] := 0;
[L8945]               paused_Pausable[this] := false;
[L8967]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8968]   COND FALSE  !(revert)
[L9546]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L9547]   COND FALSE  !(revert)
[L9550]   CALL        call MainToken_MainToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9434]               assume msgsender_MSG != null;
[L9435]               Balance[this] := 0;
[L9436]               initialized_MainToken[this] := false;
[L9438]   CALL        call init_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9754]   COND TRUE   !!initialized_MainToken[this]
[L9755]               revert := true;
[L9438]   RET         call init_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9439]   COND TRUE   revert
[L9550]   RET         call MainToken_MainToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9551]   COND FALSE  !(revert)
[L4426]   RET         call MainToken_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4427]               assume !revert && gas >= 0;
[L14773]  RET         call MainToken_MainToken(this, msgsender_MSG, msgvalue_MSG);
[L14774]              assume !revert && gas >= 0;
[L14777]  CALL        call CorralChoice_MainToken(this);
[L14434]              havoc msgsender_MSG;
[L14435]              havoc msgvalue_MSG;
[L14436]              havoc choice;
[L14437]              havoc __ret_0_totalSupply;
[L14438]              havoc _owner_s729;
[L14439]              havoc balance_s729;
[L14440]              havoc _to_s1572;
[L14441]              havoc _value_s1572;
[L14442]              havoc _success_s1572;
[L14443]              havoc _owner_s395;
[L14444]              havoc _spender_s395;
[L14445]              havoc __ret_0_allowance;
[L14446]              havoc _from_s1551;
[L14447]              havoc _to_s1551;
[L14448]              havoc _value_s1551;
[L14449]              havoc _success_s1551;
[L14450]              havoc _spender_s379;
[L14451]              havoc _value_s379;
[L14452]              havoc __ret_0_approve;
[L14453]              havoc _spender_s437;
[L14454]              havoc _addedValue_s437;
[L14455]              havoc __ret_0_increaseApproval;
[L14456]              havoc _spender_s497;
[L14457]              havoc _subtractedValue_s497;
[L14458]              havoc __ret_0_decreaseApproval;
[L14459]              havoc __ret_0_owner;
[L14460]              havoc _newOwner_s558;
[L14461]              havoc __ret_0_mintingFinished;
[L14462]              havoc _to_s664;
[L14463]              havoc _amount_s664;
[L14464]              havoc __ret_0_mint;
[L14465]              havoc __ret_0_finishMinting;
[L14466]              havoc _owner_s742;
[L14467]              havoc balance_s742;
[L14468]              havoc _owner_s754;
[L14469]              havoc balance_s754;
[L14470]              havoc _addr_s792;
[L14471]              havoc count_s792;
[L14472]              havoc _addr_s849;
[L14473]              havoc _index_s849;
[L14474]              havoc _release_s849;
[L14475]              havoc _balance_s849;
[L14476]              havoc _to_s938;
[L14477]              havoc _amount_s938;
[L14478]              havoc _until_s938;
[L14479]              havoc tokens_s1107;
[L14480]              havoc _value_s1261;
[L14481]              havoc __ret_0_paused;
[L14482]              havoc _to_s1449;
[L14483]              havoc _amount_s1449;
[L14484]              havoc _until_s1449;
[L14485]              havoc __ret_0_mintAndFreeze;
[L14486]              havoc __ret_0_TOKEN_DECIMALS;
[L14487]              havoc __ret_0_TOKEN_DECIMALS_UINT8;
[L14488]              havoc __ret_0_TOKEN_DECIMAL_MULTIPLIER;
[L14489]              havoc __ret_0_TOKEN_NAME;
[L14490]              havoc __ret_0_TOKEN_SYMBOL;
[L14491]              havoc __ret_0_PAUSED;
[L14492]              havoc __ret_0_TARGET_USER;
[L14493]              havoc __ret_0_CONTINUE_MINTING;
[L14494]              havoc __ret_0_initialized;
[L14495]              havoc _name_s1511;
[L14496]              havoc _symbol_s1519;
[L14497]              havoc _decimals_s1527;
[L14498]              havoc tmpNow;
[L14499]              havoc gas;
[L14500]              assume gas > 4000000 && gas <= 8000000;
[L14501]              tmpNow := now;
[L14502]              havoc now;
[L14503]              assume now > tmpNow;
[L14504]              assume msgsender_MSG != null;
[L14505]              assume DType[msgsender_MSG] != ERC20Basic;
[L14506]              assume DType[msgsender_MSG] != SafeMath;
[L14507]              assume DType[msgsender_MSG] != BasicToken;
[L14508]              assume DType[msgsender_MSG] != ERC20;
[L14509]              assume DType[msgsender_MSG] != StandardToken;
[L14510]              assume DType[msgsender_MSG] != Ownable;
[L14511]              assume DType[msgsender_MSG] != MintableToken;
[L14512]              assume DType[msgsender_MSG] != FreezableToken;
[L14513]              assume DType[msgsender_MSG] != BurnableToken;
[L14514]              assume DType[msgsender_MSG] != Pausable;
[L14515]              assume DType[msgsender_MSG] != FreezableMintableToken;
[L14516]              assume DType[msgsender_MSG] != Consts;
[L14517]              assume DType[msgsender_MSG] != MainToken;
[L14518]              Alloc[msgsender_MSG] := true;
[L14519]  COND TRUE   choice == 38
[L14520]              gas := gas - 21000;
[L14521]  COND TRUE   gas >= 0
[L14522]              assume msgvalue_MSG == 0;
[L14523]  CALL        call __ret_0_totalSupply := totalSupply_BasicToken(this, msgsender_MSG, msgvalue_MSG);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume totalSupply__BasicToken[this] >= 0 && totalSupply__BasicToken[this] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_totalSupply_BasicToken0 := true;
[L2]                  call_totalSupply_BasicToken0 := false;
[L2]                  revert := revert_hold;
[L379]                havoc __exception;
[L380]                revert := false;
[L381]    COND FALSE  !(__exception)
[L420]    CALL        call __ret_0_ := totalSupply_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6884]               __ret_0_ := totalSupply__BasicToken[this];
[L420]    RET         call __ret_0_ := totalSupply_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L421]                assume !revert && gas >= 0;
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume !((((((((((__ret_0_ == totalSupply__BasicToken[this] && totalSupply__BasicToken[this] == old(totalSupply__BasicToken[this])) && balances_BasicToken[this] == old(balances_BasicToken[this])) && allowed_StandardToken[this] == old(allowed_StandardToken[this])) && initialized_MainToken[this] == old(initialized_MainToken[this])) && paused_Pausable[this] == old(paused_Pausable[this])) && mintingFinished_MintableToken[this] == old(mintingFinished_MintableToken[this])) && owner_Ownable[this] == old(owner_Ownable[this])) && chains_FreezableToken[this] == old(chains_FreezableToken[this])) && freezings_FreezableToken[this] == old(freezings_FreezableToken[this])) && freezingBalance_FreezableToken[this] == old(freezingBalance_FreezableToken[this]));
[L2]                  revert := revert_hold;
[L14523]  RET         call __ret_0_totalSupply := totalSupply_BasicToken(this, msgsender_MSG, msgvalue_MSG);
[L14777]  RET         call CorralChoice_MainToken(this);

Loop:
[L14777]  CALL        call CorralChoice_MainToken(this);
[L14434]              havoc msgsender_MSG;
[L14435]              havoc msgvalue_MSG;
[L14436]              havoc choice;
[L14437]              havoc __ret_0_totalSupply;
[L14438]              havoc _owner_s729;
[L14439]              havoc balance_s729;
[L14440]              havoc _to_s1572;
[L14441]              havoc _value_s1572;
[L14442]              havoc _success_s1572;
[L14443]              havoc _owner_s395;
[L14444]              havoc _spender_s395;
[L14445]              havoc __ret_0_allowance;
[L14446]              havoc _from_s1551;
[L14447]              havoc _to_s1551;
[L14448]              havoc _value_s1551;
[L14449]              havoc _success_s1551;
[L14450]              havoc _spender_s379;
[L14451]              havoc _value_s379;
[L14452]              havoc __ret_0_approve;
[L14453]              havoc _spender_s437;
[L14454]              havoc _addedValue_s437;
[L14455]              havoc __ret_0_increaseApproval;
[L14456]              havoc _spender_s497;
[L14457]              havoc _subtractedValue_s497;
[L14458]              havoc __ret_0_decreaseApproval;
[L14459]              havoc __ret_0_owner;
[L14460]              havoc _newOwner_s558;
[L14461]              havoc __ret_0_mintingFinished;
[L14462]              havoc _to_s664;
[L14463]              havoc _amount_s664;
[L14464]              havoc __ret_0_mint;
[L14465]              havoc __ret_0_finishMinting;
[L14466]              havoc _owner_s742;
[L14467]              havoc balance_s742;
[L14468]              havoc _owner_s754;
[L14469]              havoc balance_s754;
[L14470]              havoc _addr_s792;
[L14471]              havoc count_s792;
[L14472]              havoc _addr_s849;
[L14473]              havoc _index_s849;
[L14474]              havoc _release_s849;
[L14475]              havoc _balance_s849;
[L14476]              havoc _to_s938;
[L14477]              havoc _amount_s938;
[L14478]              havoc _until_s938;
[L14479]              havoc tokens_s1107;
[L14480]              havoc _value_s1261;
[L14481]              havoc __ret_0_paused;
[L14482]              havoc _to_s1449;
[L14483]              havoc _amount_s1449;
[L14484]              havoc _until_s1449;
[L14485]              havoc __ret_0_mintAndFreeze;
[L14486]              havoc __ret_0_TOKEN_DECIMALS;
[L14487]              havoc __ret_0_TOKEN_DECIMALS_UINT8;
[L14488]              havoc __ret_0_TOKEN_DECIMAL_MULTIPLIER;
[L14489]              havoc __ret_0_TOKEN_NAME;
[L14490]              havoc __ret_0_TOKEN_SYMBOL;
[L14491]              havoc __ret_0_PAUSED;
[L14492]              havoc __ret_0_TARGET_USER;
[L14493]              havoc __ret_0_CONTINUE_MINTING;
[L14494]              havoc __ret_0_initialized;
[L14495]              havoc _name_s1511;
[L14496]              havoc _symbol_s1519;
[L14497]              havoc _decimals_s1527;
[L14498]              havoc tmpNow;
[L14499]              havoc gas;
[L14500]              assume gas > 4000000 && gas <= 8000000;
[L14501]              tmpNow := now;
[L14502]              havoc now;
[L14503]              assume now > tmpNow;
[L14504]              assume msgsender_MSG != null;
[L14505]              assume DType[msgsender_MSG] != ERC20Basic;
[L14506]              assume DType[msgsender_MSG] != SafeMath;
[L14507]              assume DType[msgsender_MSG] != BasicToken;
[L14508]              assume DType[msgsender_MSG] != ERC20;
[L14509]              assume DType[msgsender_MSG] != StandardToken;
[L14510]              assume DType[msgsender_MSG] != Ownable;
[L14511]              assume DType[msgsender_MSG] != MintableToken;
[L14512]              assume DType[msgsender_MSG] != FreezableToken;
[L14513]              assume DType[msgsender_MSG] != BurnableToken;
[L14514]              assume DType[msgsender_MSG] != Pausable;
[L14515]              assume DType[msgsender_MSG] != FreezableMintableToken;
[L14516]              assume DType[msgsender_MSG] != Consts;
[L14517]              assume DType[msgsender_MSG] != MainToken;
[L14518]              Alloc[msgsender_MSG] := true;
[L14519]  COND TRUE   choice == 38
[L14520]              gas := gas - 21000;
[L14521]  COND TRUE   gas >= 0
[L14522]              assume msgvalue_MSG == 0;
[L14523]  CALL        call __ret_0_totalSupply := totalSupply_BasicToken(this, msgsender_MSG, msgvalue_MSG);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume totalSupply__BasicToken[this] >= 0 && totalSupply__BasicToken[this] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_totalSupply_BasicToken0 := true;
[L2]                  call_totalSupply_BasicToken0 := false;
[L2]                  revert := revert_hold;
[L379]                havoc __exception;
[L380]                revert := false;
[L381]    COND FALSE  !(__exception)
[L420]    CALL        call __ret_0_ := totalSupply_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6884]               __ret_0_ := totalSupply__BasicToken[this];
[L420]    RET         call __ret_0_ := totalSupply_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L421]                assume !revert && gas >= 0;
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume !((((((((((__ret_0_ == totalSupply__BasicToken[this] && totalSupply__BasicToken[this] == old(totalSupply__BasicToken[this])) && balances_BasicToken[this] == old(balances_BasicToken[this])) && allowed_StandardToken[this] == old(allowed_StandardToken[this])) && initialized_MainToken[this] == old(initialized_MainToken[this])) && paused_Pausable[this] == old(paused_Pausable[this])) && mintingFinished_MintableToken[this] == old(mintingFinished_MintableToken[this])) && owner_Ownable[this] == old(owner_Ownable[this])) && chains_FreezableToken[this] == old(chains_FreezableToken[this])) && freezings_FreezableToken[this] == old(freezings_FreezableToken[this])) && freezingBalance_FreezableToken[this] == old(freezingBalance_FreezableToken[this]));
[L2]                  revert := revert_hold;
[L14523]  RET         call __ret_0_totalSupply := totalSupply_BasicToken(this, msgsender_MSG, msgvalue_MSG);
[L14777]  RET         call CorralChoice_MainToken(this);

[2020-11-24 21:34:24,092 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-24 21:34:24,092 INFO  L82        PathProgramCache]: Analyzing trace with hash -1235133796, now seen corresponding path program 1 times
[2020-11-24 21:34:24,093 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-24 21:34:24,131 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-24 21:34:24,715 INFO  L134       CoverageAnalysis]: Checked inductivity of 9823 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 9823 trivial. 0 not checked.
[2020-11-24 21:34:24,715 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-24 21:34:24,715 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [3] imperfect sequences [] total 3
[2020-11-24 21:34:24,718 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-24 21:34:24,719 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-11-24 21:34:24,719 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-11-24 21:34:24,719 INFO  L87              Difference]: Start difference. First operand 8648 states and 9789 transitions. cyclomatic complexity: 1161 Second operand 3 states.
[2020-11-24 21:34:24,860 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-24 21:34:24,861 INFO  L93              Difference]: Finished difference Result 9730 states and 10973 transitions.
[2020-11-24 21:34:24,861 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-11-24 21:34:24,861 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 9730 states and 10973 transitions.
[2020-11-24 21:34:24,881 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-24 21:34:24,911 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 9730 states to 9382 states and 10565 transitions.
[2020-11-24 21:34:24,911 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 2152
[2020-11-24 21:34:24,912 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 2181
[2020-11-24 21:34:24,913 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 9382 states and 10565 transitions.
[2020-11-24 21:34:24,921 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-24 21:34:24,921 INFO  L728         BuchiCegarLoop]: Abstraction has 9382 states and 10565 transitions.
[2020-11-24 21:34:24,929 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 9382 states and 10565 transitions.
[2020-11-24 21:34:24,998 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 9382 to 8695.
[2020-11-24 21:34:24,998 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 8695 states.
[2020-11-24 21:34:25,007 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 8695 states to 8695 states and 9696 transitions.
[2020-11-24 21:34:25,007 INFO  L751         BuchiCegarLoop]: Abstraction has 8695 states and 9696 transitions.
[2020-11-24 21:34:25,007 INFO  L631         BuchiCegarLoop]: Abstraction has 8695 states and 9696 transitions.
[2020-11-24 21:34:25,007 INFO  L445         BuchiCegarLoop]: ======== Iteration 4============
[2020-11-24 21:34:25,008 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 8695 states and 9696 transitions.
[2020-11-24 21:34:25,017 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-24 21:34:25,017 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-24 21:34:25,017 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-24 21:34:25,021 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [38, 38, 38, 38, 38, 38, 38, 38, 38, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-24 21:34:25,021 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  success_totalSupply_BasicToken0 := false;
[L2]                  call_totalSupply_BasicToken0 := false;
[L2]      CALL        call main();
[L14767]              assume null == 0;
[L14768]  CALL        call this := FreshRefGenerator__success();
[L6697]               havoc newRef;
[L6698]               assume Alloc[newRef] == false;
[L6699]               Alloc[newRef] := true;
[L6700]               assume newRef != null;
[L14768]  RET         call this := FreshRefGenerator__success();
[L14769]              assume now >= 0;
[L14770]              assume DType[this] == MainToken;
[L14771]              assume msgvalue_MSG == 0;
[L14772]              gas := gas - 53000;
[L14773]  CALL        call MainToken_MainToken(this, msgsender_MSG, msgvalue_MSG);
[L4385]               havoc __exception;
[L4386]               revert := false;
[L4387]   COND FALSE  !(__exception)
[L4426]   CALL        call MainToken_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9506]   CALL        call Consts_Consts__success(this, msgsender_MSG, msgvalue_MSG);
[L9308]   CALL        call Consts_Consts_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9284]               assume msgsender_MSG != null;
[L9285]               Balance[this] := 0;
[L9286]               TOKEN_DECIMALS_Consts[this] := 18;
[L9287]               TOKEN_DECIMALS_UINT8_Consts[this] := 18;
[L9288]               TOKEN_DECIMAL_MULTIPLIER_Consts[this] := nonlinearPow(10, TOKEN_DECIMALS_Consts[this]) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9289]               TOKEN_NAME_Consts[this] := 1211920069;
[L9290]               TOKEN_SYMBOL_Consts[this] := 49428998;
[L9291]               PAUSED_Consts[this] := false;
[L9292]               __var_52 := ConstantToRef(207782497573736545615953600095632397981971535507);
[L9293]               TARGET_USER_Consts[this] := ConstantToRef(207782497573736545615953600095632397981971535507);
[L9294]               CONTINUE_MINTING_Consts[this] := true;
[L9308]   RET         call Consts_Consts_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9309]   COND FALSE  !(revert)
[L9506]   RET         call Consts_Consts__success(this, msgsender_MSG, msgvalue_MSG);
[L9507]   COND FALSE  !(revert)
[L9510]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L9510]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L9511]   COND FALSE  !(revert)
[L9514]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6995]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6995]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   COND FALSE  !(revert)
[L6999]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6976]               assume msgsender_MSG != null;
[L6977]               Balance[this] := 0;
[L6999]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]   COND FALSE  !(revert)
[L9514]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L9515]   COND FALSE  !(revert)
[L9518]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6866]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6866]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   COND FALSE  !(revert)
[L6870]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6844]               assume msgsender_MSG != null;
[L6845]               Balance[this] := 0;
[L6846]               balances_BasicToken[this] := zeroRefintArr();
[L6847]               sum_balances0[this] := 0;
[L6848]               totalSupply__BasicToken[this] := 0;
[L6870]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6871]   COND FALSE  !(revert)
[L9518]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9519]   COND FALSE  !(revert)
[L9522]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7047]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L7047]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7048]   COND FALSE  !(revert)
[L7051]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6995]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6995]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   COND FALSE  !(revert)
[L6999]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6976]               assume msgsender_MSG != null;
[L6977]               Balance[this] := 0;
[L6999]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]   COND FALSE  !(revert)
[L7051]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7052]   COND FALSE  !(revert)
[L7055]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6866]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6866]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   COND FALSE  !(revert)
[L6870]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6844]               assume msgsender_MSG != null;
[L6845]               Balance[this] := 0;
[L6846]               balances_BasicToken[this] := zeroRefintArr();
[L6847]               sum_balances0[this] := 0;
[L6848]               totalSupply__BasicToken[this] := 0;
[L6870]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6871]   COND FALSE  !(revert)
[L7055]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7056]   COND FALSE  !(revert)
[L7059]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7018]               assume msgsender_MSG != null;
[L7019]               Balance[this] := 0;
[L7020]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7021]               sum_allowed1[this] := 0;
[L7059]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7060]   COND FALSE  !(revert)
[L9522]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9523]   COND FALSE  !(revert)
[L9526]   CALL        call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7654]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L7654]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7655]   COND FALSE  !(revert)
[L7658]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6995]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6995]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   COND FALSE  !(revert)
[L6999]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6976]               assume msgsender_MSG != null;
[L6977]               Balance[this] := 0;
[L6999]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]   COND FALSE  !(revert)
[L7658]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7659]   COND FALSE  !(revert)
[L7662]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6866]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6866]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   COND FALSE  !(revert)
[L6870]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6844]               assume msgsender_MSG != null;
[L6845]               Balance[this] := 0;
[L6846]               balances_BasicToken[this] := zeroRefintArr();
[L6847]               sum_balances0[this] := 0;
[L6848]               totalSupply__BasicToken[this] := 0;
[L6870]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6871]   COND FALSE  !(revert)
[L7662]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7663]   COND FALSE  !(revert)
[L7666]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7047]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L7047]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7048]   COND FALSE  !(revert)
[L7051]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6995]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6995]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   COND FALSE  !(revert)
[L6999]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6976]               assume msgsender_MSG != null;
[L6977]               Balance[this] := 0;
[L6999]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]   COND FALSE  !(revert)
[L7051]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7052]   COND FALSE  !(revert)
[L7055]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6866]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6866]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   COND FALSE  !(revert)
[L6870]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6844]               assume msgsender_MSG != null;
[L6845]               Balance[this] := 0;
[L6846]               balances_BasicToken[this] := zeroRefintArr();
[L6847]               sum_balances0[this] := 0;
[L6848]               totalSupply__BasicToken[this] := 0;
[L6870]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6871]   COND FALSE  !(revert)
[L7055]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7056]   COND FALSE  !(revert)
[L7059]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7018]               assume msgsender_MSG != null;
[L7019]               Balance[this] := 0;
[L7020]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7021]               sum_allowed1[this] := 0;
[L7059]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7060]   COND FALSE  !(revert)
[L7666]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7667]   COND FALSE  !(revert)
[L7670]   CALL        call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7617]               assume msgsender_MSG != null;
[L7618]               Balance[this] := 0;
[L7619]               chains_FreezableToken[this] := zerointintArr();
[L7620]               sum_chains2[this] := 0;
[L7621]               freezings_FreezableToken[this] := zerointintArr();
[L7622]               sum_freezings3[this] := 0;
[L7623]               freezingBalance_FreezableToken[this] := zeroRefintArr();
[L7624]               sum_freezingBalance4[this] := 0;
[L7670]   RET         call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7671]   COND FALSE  !(revert)
[L9526]   RET         call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9527]   COND FALSE  !(revert)
[L9530]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7289]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7272]               assume msgsender_MSG != null;
[L7273]               Balance[this] := 0;
[L7274]               owner_Ownable[this] := null;
[L7276]               owner_Ownable[this] := msgsender_MSG;
[L7289]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7290]   COND FALSE  !(revert)
[L9530]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L9531]   COND FALSE  !(revert)
[L9534]   CALL        call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7473]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L7473]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7474]   COND FALSE  !(revert)
[L7477]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6995]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6995]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   COND FALSE  !(revert)
[L6999]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6976]               assume msgsender_MSG != null;
[L6977]               Balance[this] := 0;
[L6999]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]   COND FALSE  !(revert)
[L7477]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7478]   COND FALSE  !(revert)
[L7481]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6866]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6866]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   COND FALSE  !(revert)
[L6870]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6844]               assume msgsender_MSG != null;
[L6845]               Balance[this] := 0;
[L6846]               balances_BasicToken[this] := zeroRefintArr();
[L6847]               sum_balances0[this] := 0;
[L6848]               totalSupply__BasicToken[this] := 0;
[L6870]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6871]   COND FALSE  !(revert)
[L7481]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7482]   COND FALSE  !(revert)
[L7485]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7047]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L7047]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7048]   COND FALSE  !(revert)
[L7051]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6995]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6995]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   COND FALSE  !(revert)
[L6999]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6976]               assume msgsender_MSG != null;
[L6977]               Balance[this] := 0;
[L6999]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]   COND FALSE  !(revert)
[L7051]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7052]   COND FALSE  !(revert)
[L7055]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6866]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6866]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   COND FALSE  !(revert)
[L6870]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6844]               assume msgsender_MSG != null;
[L6845]               Balance[this] := 0;
[L6846]               balances_BasicToken[this] := zeroRefintArr();
[L6847]               sum_balances0[this] := 0;
[L6848]               totalSupply__BasicToken[this] := 0;
[L6870]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6871]   COND FALSE  !(revert)
[L7055]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7056]   COND FALSE  !(revert)
[L7059]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7018]               assume msgsender_MSG != null;
[L7019]               Balance[this] := 0;
[L7020]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7021]               sum_allowed1[this] := 0;
[L7059]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7060]   COND FALSE  !(revert)
[L7485]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7486]   COND FALSE  !(revert)
[L7489]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7289]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7272]               assume msgsender_MSG != null;
[L7273]               Balance[this] := 0;
[L7274]               owner_Ownable[this] := null;
[L7276]               owner_Ownable[this] := msgsender_MSG;
[L7289]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7290]   COND FALSE  !(revert)
[L7489]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7490]   COND FALSE  !(revert)
[L7493]   CALL        call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7437]               assume msgsender_MSG != null;
[L7438]               Balance[this] := 0;
[L7439]               mintingFinished_MintableToken[this] := false;
[L7493]   RET         call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7494]   COND FALSE  !(revert)
[L9534]   RET         call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9535]   COND FALSE  !(revert)
[L9538]   CALL        call FreezableMintableToken_FreezableMintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9093]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L9093]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L9094]   COND FALSE  !(revert)
[L9097]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6995]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6995]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   COND FALSE  !(revert)
[L6999]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6976]               assume msgsender_MSG != null;
[L6977]               Balance[this] := 0;
[L6999]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]   COND FALSE  !(revert)
[L9097]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L9098]   COND FALSE  !(revert)
[L9101]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6866]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6866]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   COND FALSE  !(revert)
[L6870]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6844]               assume msgsender_MSG != null;
[L6845]               Balance[this] := 0;
[L6846]               balances_BasicToken[this] := zeroRefintArr();
[L6847]               sum_balances0[this] := 0;
[L6848]               totalSupply__BasicToken[this] := 0;
[L6870]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6871]   COND FALSE  !(revert)
[L9101]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9102]   COND FALSE  !(revert)
[L9105]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7047]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L7047]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7048]   COND FALSE  !(revert)
[L7051]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6995]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6995]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   COND FALSE  !(revert)
[L6999]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6976]               assume msgsender_MSG != null;
[L6977]               Balance[this] := 0;
[L6999]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]   COND FALSE  !(revert)
[L7051]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7052]   COND FALSE  !(revert)
[L7055]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6866]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6866]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   COND FALSE  !(revert)
[L6870]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6844]               assume msgsender_MSG != null;
[L6845]               Balance[this] := 0;
[L6846]               balances_BasicToken[this] := zeroRefintArr();
[L6847]               sum_balances0[this] := 0;
[L6848]               totalSupply__BasicToken[this] := 0;
[L6870]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6871]   COND FALSE  !(revert)
[L7055]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7056]   COND FALSE  !(revert)
[L7059]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7018]               assume msgsender_MSG != null;
[L7019]               Balance[this] := 0;
[L7020]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7021]               sum_allowed1[this] := 0;
[L7059]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7060]   COND FALSE  !(revert)
[L9105]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9106]   COND FALSE  !(revert)
[L9109]   CALL        call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7654]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L7654]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7655]   COND FALSE  !(revert)
[L7658]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6995]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6995]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   COND FALSE  !(revert)
[L6999]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6976]               assume msgsender_MSG != null;
[L6977]               Balance[this] := 0;
[L6999]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]   COND FALSE  !(revert)
[L7658]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7659]   COND FALSE  !(revert)
[L7662]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6866]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6866]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   COND FALSE  !(revert)
[L6870]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6844]               assume msgsender_MSG != null;
[L6845]               Balance[this] := 0;
[L6846]               balances_BasicToken[this] := zeroRefintArr();
[L6847]               sum_balances0[this] := 0;
[L6848]               totalSupply__BasicToken[this] := 0;
[L6870]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6871]   COND FALSE  !(revert)
[L7662]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7663]   COND FALSE  !(revert)
[L7666]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7047]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L7047]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7048]   COND FALSE  !(revert)
[L7051]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6995]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6995]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   COND FALSE  !(revert)
[L6999]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6976]               assume msgsender_MSG != null;
[L6977]               Balance[this] := 0;
[L6999]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]   COND FALSE  !(revert)
[L7051]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7052]   COND FALSE  !(revert)
[L7055]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6866]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6866]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   COND FALSE  !(revert)
[L6870]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6844]               assume msgsender_MSG != null;
[L6845]               Balance[this] := 0;
[L6846]               balances_BasicToken[this] := zeroRefintArr();
[L6847]               sum_balances0[this] := 0;
[L6848]               totalSupply__BasicToken[this] := 0;
[L6870]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6871]   COND FALSE  !(revert)
[L7055]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7056]   COND FALSE  !(revert)
[L7059]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7018]               assume msgsender_MSG != null;
[L7019]               Balance[this] := 0;
[L7020]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7021]               sum_allowed1[this] := 0;
[L7059]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7060]   COND FALSE  !(revert)
[L7666]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7667]   COND FALSE  !(revert)
[L7670]   CALL        call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7617]               assume msgsender_MSG != null;
[L7618]               Balance[this] := 0;
[L7619]               chains_FreezableToken[this] := zerointintArr();
[L7620]               sum_chains2[this] := 0;
[L7621]               freezings_FreezableToken[this] := zerointintArr();
[L7622]               sum_freezings3[this] := 0;
[L7623]               freezingBalance_FreezableToken[this] := zeroRefintArr();
[L7624]               sum_freezingBalance4[this] := 0;
[L7670]   RET         call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7671]   COND FALSE  !(revert)
[L9109]   RET         call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9110]   COND FALSE  !(revert)
[L9113]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7289]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7272]               assume msgsender_MSG != null;
[L7273]               Balance[this] := 0;
[L7274]               owner_Ownable[this] := null;
[L7276]               owner_Ownable[this] := msgsender_MSG;
[L7289]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7290]   COND FALSE  !(revert)
[L9113]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L9114]   COND FALSE  !(revert)
[L9117]   CALL        call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7473]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L7473]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7474]   COND FALSE  !(revert)
[L7477]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6995]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6995]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   COND FALSE  !(revert)
[L6999]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6976]               assume msgsender_MSG != null;
[L6977]               Balance[this] := 0;
[L6999]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]   COND FALSE  !(revert)
[L7477]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7478]   COND FALSE  !(revert)
[L7481]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6866]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6866]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   COND FALSE  !(revert)
[L6870]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6844]               assume msgsender_MSG != null;
[L6845]               Balance[this] := 0;
[L6846]               balances_BasicToken[this] := zeroRefintArr();
[L6847]               sum_balances0[this] := 0;
[L6848]               totalSupply__BasicToken[this] := 0;
[L6870]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6871]   COND FALSE  !(revert)
[L7481]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7482]   COND FALSE  !(revert)
[L7485]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7047]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L7047]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7048]   COND FALSE  !(revert)
[L7051]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6995]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6995]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   COND FALSE  !(revert)
[L6999]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6976]               assume msgsender_MSG != null;
[L6977]               Balance[this] := 0;
[L6999]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]   COND FALSE  !(revert)
[L7051]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7052]   COND FALSE  !(revert)
[L7055]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6866]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6866]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   COND FALSE  !(revert)
[L6870]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6844]               assume msgsender_MSG != null;
[L6845]               Balance[this] := 0;
[L6846]               balances_BasicToken[this] := zeroRefintArr();
[L6847]               sum_balances0[this] := 0;
[L6848]               totalSupply__BasicToken[this] := 0;
[L6870]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6871]   COND FALSE  !(revert)
[L7055]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7056]   COND FALSE  !(revert)
[L7059]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7018]               assume msgsender_MSG != null;
[L7019]               Balance[this] := 0;
[L7020]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7021]               sum_allowed1[this] := 0;
[L7059]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7060]   COND FALSE  !(revert)
[L7485]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7486]   COND FALSE  !(revert)
[L7489]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7289]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7272]               assume msgsender_MSG != null;
[L7273]               Balance[this] := 0;
[L7274]               owner_Ownable[this] := null;
[L7276]               owner_Ownable[this] := msgsender_MSG;
[L7289]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7290]   COND FALSE  !(revert)
[L7489]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7490]   COND FALSE  !(revert)
[L7493]   CALL        call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7437]               assume msgsender_MSG != null;
[L7438]               Balance[this] := 0;
[L7439]               mintingFinished_MintableToken[this] := false;
[L7493]   RET         call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7494]   COND FALSE  !(revert)
[L9117]   RET         call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9118]   COND FALSE  !(revert)
[L9121]   CALL        call FreezableMintableToken_FreezableMintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9050]               assume msgsender_MSG != null;
[L9051]               Balance[this] := 0;
[L9121]   RET         call FreezableMintableToken_FreezableMintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9122]   COND FALSE  !(revert)
[L9538]   RET         call FreezableMintableToken_FreezableMintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9539]   COND FALSE  !(revert)
[L9542]   CALL        call BurnableToken_BurnableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L8837]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L8837]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L8838]   COND FALSE  !(revert)
[L8841]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6866]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6866]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   COND FALSE  !(revert)
[L6870]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6844]               assume msgsender_MSG != null;
[L6845]               Balance[this] := 0;
[L6846]               balances_BasicToken[this] := zeroRefintArr();
[L6847]               sum_balances0[this] := 0;
[L6848]               totalSupply__BasicToken[this] := 0;
[L6870]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6871]   COND FALSE  !(revert)
[L8841]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L8842]   COND FALSE  !(revert)
[L8845]   CALL        call BurnableToken_BurnableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8814]               assume msgsender_MSG != null;
[L8815]               Balance[this] := 0;
[L8845]   RET         call BurnableToken_BurnableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8846]   COND FALSE  !(revert)
[L9542]   RET         call BurnableToken_BurnableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9543]   COND FALSE  !(revert)
[L9546]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L8963]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7289]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7272]               assume msgsender_MSG != null;
[L7273]               Balance[this] := 0;
[L7274]               owner_Ownable[this] := null;
[L7276]               owner_Ownable[this] := msgsender_MSG;
[L7289]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7290]   COND FALSE  !(revert)
[L8963]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L8964]   COND FALSE  !(revert)
[L8967]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8943]               assume msgsender_MSG != null;
[L8944]               Balance[this] := 0;
[L8945]               paused_Pausable[this] := false;
[L8967]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8968]   COND FALSE  !(revert)
[L9546]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L9547]   COND FALSE  !(revert)
[L9550]   CALL        call MainToken_MainToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9434]               assume msgsender_MSG != null;
[L9435]               Balance[this] := 0;
[L9436]               initialized_MainToken[this] := false;
[L9438]   CALL        call init_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9754]   COND FALSE  !(!!initialized_MainToken[this])
[L9758]               initialized_MainToken[this] := true;
[L9759]   COND FALSE  !(PAUSED_Consts[this])
[L9769]               __var_57 := ConstantToRef(207782497573736545615953600095632397981971535507);
[L9770]               addresses_s1673 := ConstantToRef(207782497573736545615953600095632397981971535507);
[L9771]               __var_58 := 500000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9772]               amounts_s1673 := 500000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9773]               __var_59 := 0 % 18446744073709551616;
[L9774]               freezes_s1673 := 0 % 18446744073709551616;
[L9775]               i_s1673 := 0;
[L9776]   COND FALSE  !(i_s1673 < Length[addresses_s1673])
[L9800]   COND FALSE  !(!CONTINUE_MINTING_Consts[this])
[L9810]               assert { :EventEmitted "Initialized_MainToken" } true;
[L9438]   RET         call init_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9439]   COND FALSE  !(revert)
[L9442]   COND TRUE   DType[this] == MainToken
[L9443]   CALL        call transferOwnership~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, TARGET_USER_Consts[this]);
[L7356]   CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L12721]  COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L7356]   RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7357]   COND FALSE  !(revert)
[L7360]   COND TRUE   DType[this] == MainToken
[L7361]   CALL        call _transferOwnership~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, _newOwner_s558);
[L7404]               __var_11 := null;
[L7405]   COND FALSE  !(!(_newOwner_s581 != null))
[L7409]               assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L7410]               owner_Ownable[this] := _newOwner_s581;
[L7361]   RET         call _transferOwnership~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, _newOwner_s558);
[L7362]   COND FALSE  !(revert)
[L9443]   RET         call transferOwnership~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, TARGET_USER_Consts[this]);
[L9444]   COND FALSE  !(revert)
[L9550]   RET         call MainToken_MainToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9551]   COND FALSE  !(revert)
[L4426]   RET         call MainToken_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4427]               assume !revert && gas >= 0;
[L14773]  RET         call MainToken_MainToken(this, msgsender_MSG, msgvalue_MSG);
[L14774]              assume !revert && gas >= 0;
[L14777]  CALL        call CorralChoice_MainToken(this);
[L14434]              havoc msgsender_MSG;
[L14435]              havoc msgvalue_MSG;
[L14436]              havoc choice;
[L14437]              havoc __ret_0_totalSupply;
[L14438]              havoc _owner_s729;
[L14439]              havoc balance_s729;
[L14440]              havoc _to_s1572;
[L14441]              havoc _value_s1572;
[L14442]              havoc _success_s1572;
[L14443]              havoc _owner_s395;
[L14444]              havoc _spender_s395;
[L14445]              havoc __ret_0_allowance;
[L14446]              havoc _from_s1551;
[L14447]              havoc _to_s1551;
[L14448]              havoc _value_s1551;
[L14449]              havoc _success_s1551;
[L14450]              havoc _spender_s379;
[L14451]              havoc _value_s379;
[L14452]              havoc __ret_0_approve;
[L14453]              havoc _spender_s437;
[L14454]              havoc _addedValue_s437;
[L14455]              havoc __ret_0_increaseApproval;
[L14456]              havoc _spender_s497;
[L14457]              havoc _subtractedValue_s497;
[L14458]              havoc __ret_0_decreaseApproval;
[L14459]              havoc __ret_0_owner;
[L14460]              havoc _newOwner_s558;
[L14461]              havoc __ret_0_mintingFinished;
[L14462]              havoc _to_s664;
[L14463]              havoc _amount_s664;
[L14464]              havoc __ret_0_mint;
[L14465]              havoc __ret_0_finishMinting;
[L14466]              havoc _owner_s742;
[L14467]              havoc balance_s742;
[L14468]              havoc _owner_s754;
[L14469]              havoc balance_s754;
[L14470]              havoc _addr_s792;
[L14471]              havoc count_s792;
[L14472]              havoc _addr_s849;
[L14473]              havoc _index_s849;
[L14474]              havoc _release_s849;
[L14475]              havoc _balance_s849;
[L14476]              havoc _to_s938;
[L14477]              havoc _amount_s938;
[L14478]              havoc _until_s938;
[L14479]              havoc tokens_s1107;
[L14480]              havoc _value_s1261;
[L14481]              havoc __ret_0_paused;
[L14482]              havoc _to_s1449;
[L14483]              havoc _amount_s1449;
[L14484]              havoc _until_s1449;
[L14485]              havoc __ret_0_mintAndFreeze;
[L14486]              havoc __ret_0_TOKEN_DECIMALS;
[L14487]              havoc __ret_0_TOKEN_DECIMALS_UINT8;
[L14488]              havoc __ret_0_TOKEN_DECIMAL_MULTIPLIER;
[L14489]              havoc __ret_0_TOKEN_NAME;
[L14490]              havoc __ret_0_TOKEN_SYMBOL;
[L14491]              havoc __ret_0_PAUSED;
[L14492]              havoc __ret_0_TARGET_USER;
[L14493]              havoc __ret_0_CONTINUE_MINTING;
[L14494]              havoc __ret_0_initialized;
[L14495]              havoc _name_s1511;
[L14496]              havoc _symbol_s1519;
[L14497]              havoc _decimals_s1527;
[L14498]              havoc tmpNow;
[L14499]              havoc gas;
[L14500]              assume gas > 4000000 && gas <= 8000000;
[L14501]              tmpNow := now;
[L14502]              havoc now;
[L14503]              assume now > tmpNow;
[L14504]              assume msgsender_MSG != null;
[L14505]              assume DType[msgsender_MSG] != ERC20Basic;
[L14506]              assume DType[msgsender_MSG] != SafeMath;
[L14507]              assume DType[msgsender_MSG] != BasicToken;
[L14508]              assume DType[msgsender_MSG] != ERC20;
[L14509]              assume DType[msgsender_MSG] != StandardToken;
[L14510]              assume DType[msgsender_MSG] != Ownable;
[L14511]              assume DType[msgsender_MSG] != MintableToken;
[L14512]              assume DType[msgsender_MSG] != FreezableToken;
[L14513]              assume DType[msgsender_MSG] != BurnableToken;
[L14514]              assume DType[msgsender_MSG] != Pausable;
[L14515]              assume DType[msgsender_MSG] != FreezableMintableToken;
[L14516]              assume DType[msgsender_MSG] != Consts;
[L14517]              assume DType[msgsender_MSG] != MainToken;
[L14518]              Alloc[msgsender_MSG] := true;
[L14519]  COND TRUE   choice == 38
[L14520]              gas := gas - 21000;
[L14521]  COND TRUE   gas >= 0
[L14522]              assume msgvalue_MSG == 0;
[L14523]  CALL        call __ret_0_totalSupply := totalSupply_BasicToken(this, msgsender_MSG, msgvalue_MSG);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume totalSupply__BasicToken[this] >= 0 && totalSupply__BasicToken[this] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_totalSupply_BasicToken0 := true;
[L2]                  call_totalSupply_BasicToken0 := false;
[L2]                  revert := revert_hold;
[L379]                havoc __exception;
[L380]                revert := false;
[L381]    COND FALSE  !(__exception)
[L420]    CALL        call __ret_0_ := totalSupply_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6884]               __ret_0_ := totalSupply__BasicToken[this];
[L420]    RET         call __ret_0_ := totalSupply_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L421]                assume !revert && gas >= 0;
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume !((((((((((__ret_0_ == totalSupply__BasicToken[this] && totalSupply__BasicToken[this] == old(totalSupply__BasicToken[this])) && balances_BasicToken[this] == old(balances_BasicToken[this])) && allowed_StandardToken[this] == old(allowed_StandardToken[this])) && initialized_MainToken[this] == old(initialized_MainToken[this])) && paused_Pausable[this] == old(paused_Pausable[this])) && mintingFinished_MintableToken[this] == old(mintingFinished_MintableToken[this])) && owner_Ownable[this] == old(owner_Ownable[this])) && chains_FreezableToken[this] == old(chains_FreezableToken[this])) && freezings_FreezableToken[this] == old(freezings_FreezableToken[this])) && freezingBalance_FreezableToken[this] == old(freezingBalance_FreezableToken[this]));
[L2]                  revert := revert_hold;
[L14523]  RET         call __ret_0_totalSupply := totalSupply_BasicToken(this, msgsender_MSG, msgvalue_MSG);
[L14777]  RET         call CorralChoice_MainToken(this);

Loop:
[L14777]  CALL        call CorralChoice_MainToken(this);
[L14434]              havoc msgsender_MSG;
[L14435]              havoc msgvalue_MSG;
[L14436]              havoc choice;
[L14437]              havoc __ret_0_totalSupply;
[L14438]              havoc _owner_s729;
[L14439]              havoc balance_s729;
[L14440]              havoc _to_s1572;
[L14441]              havoc _value_s1572;
[L14442]              havoc _success_s1572;
[L14443]              havoc _owner_s395;
[L14444]              havoc _spender_s395;
[L14445]              havoc __ret_0_allowance;
[L14446]              havoc _from_s1551;
[L14447]              havoc _to_s1551;
[L14448]              havoc _value_s1551;
[L14449]              havoc _success_s1551;
[L14450]              havoc _spender_s379;
[L14451]              havoc _value_s379;
[L14452]              havoc __ret_0_approve;
[L14453]              havoc _spender_s437;
[L14454]              havoc _addedValue_s437;
[L14455]              havoc __ret_0_increaseApproval;
[L14456]              havoc _spender_s497;
[L14457]              havoc _subtractedValue_s497;
[L14458]              havoc __ret_0_decreaseApproval;
[L14459]              havoc __ret_0_owner;
[L14460]              havoc _newOwner_s558;
[L14461]              havoc __ret_0_mintingFinished;
[L14462]              havoc _to_s664;
[L14463]              havoc _amount_s664;
[L14464]              havoc __ret_0_mint;
[L14465]              havoc __ret_0_finishMinting;
[L14466]              havoc _owner_s742;
[L14467]              havoc balance_s742;
[L14468]              havoc _owner_s754;
[L14469]              havoc balance_s754;
[L14470]              havoc _addr_s792;
[L14471]              havoc count_s792;
[L14472]              havoc _addr_s849;
[L14473]              havoc _index_s849;
[L14474]              havoc _release_s849;
[L14475]              havoc _balance_s849;
[L14476]              havoc _to_s938;
[L14477]              havoc _amount_s938;
[L14478]              havoc _until_s938;
[L14479]              havoc tokens_s1107;
[L14480]              havoc _value_s1261;
[L14481]              havoc __ret_0_paused;
[L14482]              havoc _to_s1449;
[L14483]              havoc _amount_s1449;
[L14484]              havoc _until_s1449;
[L14485]              havoc __ret_0_mintAndFreeze;
[L14486]              havoc __ret_0_TOKEN_DECIMALS;
[L14487]              havoc __ret_0_TOKEN_DECIMALS_UINT8;
[L14488]              havoc __ret_0_TOKEN_DECIMAL_MULTIPLIER;
[L14489]              havoc __ret_0_TOKEN_NAME;
[L14490]              havoc __ret_0_TOKEN_SYMBOL;
[L14491]              havoc __ret_0_PAUSED;
[L14492]              havoc __ret_0_TARGET_USER;
[L14493]              havoc __ret_0_CONTINUE_MINTING;
[L14494]              havoc __ret_0_initialized;
[L14495]              havoc _name_s1511;
[L14496]              havoc _symbol_s1519;
[L14497]              havoc _decimals_s1527;
[L14498]              havoc tmpNow;
[L14499]              havoc gas;
[L14500]              assume gas > 4000000 && gas <= 8000000;
[L14501]              tmpNow := now;
[L14502]              havoc now;
[L14503]              assume now > tmpNow;
[L14504]              assume msgsender_MSG != null;
[L14505]              assume DType[msgsender_MSG] != ERC20Basic;
[L14506]              assume DType[msgsender_MSG] != SafeMath;
[L14507]              assume DType[msgsender_MSG] != BasicToken;
[L14508]              assume DType[msgsender_MSG] != ERC20;
[L14509]              assume DType[msgsender_MSG] != StandardToken;
[L14510]              assume DType[msgsender_MSG] != Ownable;
[L14511]              assume DType[msgsender_MSG] != MintableToken;
[L14512]              assume DType[msgsender_MSG] != FreezableToken;
[L14513]              assume DType[msgsender_MSG] != BurnableToken;
[L14514]              assume DType[msgsender_MSG] != Pausable;
[L14515]              assume DType[msgsender_MSG] != FreezableMintableToken;
[L14516]              assume DType[msgsender_MSG] != Consts;
[L14517]              assume DType[msgsender_MSG] != MainToken;
[L14518]              Alloc[msgsender_MSG] := true;
[L14519]  COND TRUE   choice == 38
[L14520]              gas := gas - 21000;
[L14521]  COND TRUE   gas >= 0
[L14522]              assume msgvalue_MSG == 0;
[L14523]  CALL        call __ret_0_totalSupply := totalSupply_BasicToken(this, msgsender_MSG, msgvalue_MSG);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume totalSupply__BasicToken[this] >= 0 && totalSupply__BasicToken[this] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_totalSupply_BasicToken0 := true;
[L2]                  call_totalSupply_BasicToken0 := false;
[L2]                  revert := revert_hold;
[L379]                havoc __exception;
[L380]                revert := false;
[L381]    COND FALSE  !(__exception)
[L420]    CALL        call __ret_0_ := totalSupply_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6884]               __ret_0_ := totalSupply__BasicToken[this];
[L420]    RET         call __ret_0_ := totalSupply_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L421]                assume !revert && gas >= 0;
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume !((((((((((__ret_0_ == totalSupply__BasicToken[this] && totalSupply__BasicToken[this] == old(totalSupply__BasicToken[this])) && balances_BasicToken[this] == old(balances_BasicToken[this])) && allowed_StandardToken[this] == old(allowed_StandardToken[this])) && initialized_MainToken[this] == old(initialized_MainToken[this])) && paused_Pausable[this] == old(paused_Pausable[this])) && mintingFinished_MintableToken[this] == old(mintingFinished_MintableToken[this])) && owner_Ownable[this] == old(owner_Ownable[this])) && chains_FreezableToken[this] == old(chains_FreezableToken[this])) && freezings_FreezableToken[this] == old(freezings_FreezableToken[this])) && freezingBalance_FreezableToken[this] == old(freezingBalance_FreezableToken[this]));
[L2]                  revert := revert_hold;
[L14523]  RET         call __ret_0_totalSupply := totalSupply_BasicToken(this, msgsender_MSG, msgvalue_MSG);
[L14777]  RET         call CorralChoice_MainToken(this);

[2020-11-24 21:34:25,031 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-24 21:34:25,031 INFO  L82        PathProgramCache]: Analyzing trace with hash -631935376, now seen corresponding path program 1 times
[2020-11-24 21:34:25,032 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-24 21:34:25,064 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-24 21:34:25,546 INFO  L134       CoverageAnalysis]: Checked inductivity of 9823 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 9823 trivial. 0 not checked.
[2020-11-24 21:34:25,546 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-24 21:34:25,546 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [4] imperfect sequences [] total 4
[2020-11-24 21:34:25,547 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-24 21:34:25,547 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-11-24 21:34:25,547 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=5, Invalid=7, Unknown=0, NotChecked=0, Total=12
[2020-11-24 21:34:25,548 INFO  L87              Difference]: Start difference. First operand 8695 states and 9696 transitions. cyclomatic complexity: 1021 Second operand 4 states.
[2020-11-24 21:34:25,669 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-24 21:34:25,669 INFO  L93              Difference]: Finished difference Result 8696 states and 9695 transitions.
[2020-11-24 21:34:25,669 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 4 states. 
[2020-11-24 21:34:25,670 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 8696 states and 9695 transitions.
[2020-11-24 21:34:25,690 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-24 21:34:25,716 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 8696 states to 8686 states and 9685 transitions.
[2020-11-24 21:34:25,716 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 2064
[2020-11-24 21:34:25,717 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 2064
[2020-11-24 21:34:25,717 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 8686 states and 9685 transitions.
[2020-11-24 21:34:25,723 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-24 21:34:25,723 INFO  L728         BuchiCegarLoop]: Abstraction has 8686 states and 9685 transitions.
[2020-11-24 21:34:25,731 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 8686 states and 9685 transitions.
[2020-11-24 21:34:25,790 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 8686 to 8684.
[2020-11-24 21:34:25,790 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 8684 states.
[2020-11-24 21:34:25,800 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 8684 states to 8684 states and 9683 transitions.
[2020-11-24 21:34:25,800 INFO  L751         BuchiCegarLoop]: Abstraction has 8684 states and 9683 transitions.
[2020-11-24 21:34:25,800 INFO  L631         BuchiCegarLoop]: Abstraction has 8684 states and 9683 transitions.
[2020-11-24 21:34:25,800 INFO  L445         BuchiCegarLoop]: ======== Iteration 5============
[2020-11-24 21:34:25,800 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 8684 states and 9683 transitions.
[2020-11-24 21:34:25,812 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-24 21:34:25,812 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-24 21:34:25,812 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-24 21:34:25,816 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [38, 38, 38, 38, 38, 38, 38, 38, 38, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-24 21:34:25,816 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  success_totalSupply_BasicToken0 := false;
[L2]                  call_totalSupply_BasicToken0 := false;
[L2]      CALL        call main();
[L14767]              assume null == 0;
[L14768]  CALL        call this := FreshRefGenerator__success();
[L6697]               havoc newRef;
[L6698]               assume Alloc[newRef] == false;
[L6699]               Alloc[newRef] := true;
[L6700]               assume newRef != null;
[L14768]  RET         call this := FreshRefGenerator__success();
[L14769]              assume now >= 0;
[L14770]              assume DType[this] == MainToken;
[L14771]              assume msgvalue_MSG == 0;
[L14772]              gas := gas - 53000;
[L14773]  CALL        call MainToken_MainToken(this, msgsender_MSG, msgvalue_MSG);
[L4385]               havoc __exception;
[L4386]               revert := false;
[L4387]   COND FALSE  !(__exception)
[L4426]   CALL        call MainToken_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9506]   CALL        call Consts_Consts__success(this, msgsender_MSG, msgvalue_MSG);
[L9308]   CALL        call Consts_Consts_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9284]               assume msgsender_MSG != null;
[L9285]               Balance[this] := 0;
[L9286]               TOKEN_DECIMALS_Consts[this] := 18;
[L9287]               TOKEN_DECIMALS_UINT8_Consts[this] := 18;
[L9288]               TOKEN_DECIMAL_MULTIPLIER_Consts[this] := nonlinearPow(10, TOKEN_DECIMALS_Consts[this]) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9289]               TOKEN_NAME_Consts[this] := 1211920069;
[L9290]               TOKEN_SYMBOL_Consts[this] := 49428998;
[L9291]               PAUSED_Consts[this] := false;
[L9292]               __var_52 := ConstantToRef(207782497573736545615953600095632397981971535507);
[L9293]               TARGET_USER_Consts[this] := ConstantToRef(207782497573736545615953600095632397981971535507);
[L9294]               CONTINUE_MINTING_Consts[this] := true;
[L9308]   RET         call Consts_Consts_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9309]   COND FALSE  !(revert)
[L9506]   RET         call Consts_Consts__success(this, msgsender_MSG, msgvalue_MSG);
[L9507]   COND FALSE  !(revert)
[L9510]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L9510]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L9511]   COND FALSE  !(revert)
[L9514]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6995]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6995]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   COND FALSE  !(revert)
[L6999]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6976]               assume msgsender_MSG != null;
[L6977]               Balance[this] := 0;
[L6999]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]   COND FALSE  !(revert)
[L9514]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L9515]   COND FALSE  !(revert)
[L9518]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6866]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6866]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   COND FALSE  !(revert)
[L6870]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6844]               assume msgsender_MSG != null;
[L6845]               Balance[this] := 0;
[L6846]               balances_BasicToken[this] := zeroRefintArr();
[L6847]               sum_balances0[this] := 0;
[L6848]               totalSupply__BasicToken[this] := 0;
[L6870]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6871]   COND FALSE  !(revert)
[L9518]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9519]   COND FALSE  !(revert)
[L9522]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7047]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L7047]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7048]   COND FALSE  !(revert)
[L7051]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6995]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6995]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   COND FALSE  !(revert)
[L6999]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6976]               assume msgsender_MSG != null;
[L6977]               Balance[this] := 0;
[L6999]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]   COND FALSE  !(revert)
[L7051]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7052]   COND FALSE  !(revert)
[L7055]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6866]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6866]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   COND FALSE  !(revert)
[L6870]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6844]               assume msgsender_MSG != null;
[L6845]               Balance[this] := 0;
[L6846]               balances_BasicToken[this] := zeroRefintArr();
[L6847]               sum_balances0[this] := 0;
[L6848]               totalSupply__BasicToken[this] := 0;
[L6870]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6871]   COND FALSE  !(revert)
[L7055]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7056]   COND FALSE  !(revert)
[L7059]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7018]               assume msgsender_MSG != null;
[L7019]               Balance[this] := 0;
[L7020]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7021]               sum_allowed1[this] := 0;
[L7059]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7060]   COND FALSE  !(revert)
[L9522]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9523]   COND FALSE  !(revert)
[L9526]   CALL        call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7654]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L7654]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7655]   COND FALSE  !(revert)
[L7658]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6995]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6995]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   COND FALSE  !(revert)
[L6999]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6976]               assume msgsender_MSG != null;
[L6977]               Balance[this] := 0;
[L6999]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]   COND FALSE  !(revert)
[L7658]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7659]   COND FALSE  !(revert)
[L7662]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6866]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6866]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   COND FALSE  !(revert)
[L6870]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6844]               assume msgsender_MSG != null;
[L6845]               Balance[this] := 0;
[L6846]               balances_BasicToken[this] := zeroRefintArr();
[L6847]               sum_balances0[this] := 0;
[L6848]               totalSupply__BasicToken[this] := 0;
[L6870]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6871]   COND FALSE  !(revert)
[L7662]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7663]   COND FALSE  !(revert)
[L7666]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7047]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L7047]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7048]   COND FALSE  !(revert)
[L7051]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6995]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6995]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   COND FALSE  !(revert)
[L6999]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6976]               assume msgsender_MSG != null;
[L6977]               Balance[this] := 0;
[L6999]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]   COND FALSE  !(revert)
[L7051]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7052]   COND FALSE  !(revert)
[L7055]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6866]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6866]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   COND FALSE  !(revert)
[L6870]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6844]               assume msgsender_MSG != null;
[L6845]               Balance[this] := 0;
[L6846]               balances_BasicToken[this] := zeroRefintArr();
[L6847]               sum_balances0[this] := 0;
[L6848]               totalSupply__BasicToken[this] := 0;
[L6870]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6871]   COND FALSE  !(revert)
[L7055]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7056]   COND FALSE  !(revert)
[L7059]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7018]               assume msgsender_MSG != null;
[L7019]               Balance[this] := 0;
[L7020]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7021]               sum_allowed1[this] := 0;
[L7059]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7060]   COND FALSE  !(revert)
[L7666]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7667]   COND FALSE  !(revert)
[L7670]   CALL        call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7617]               assume msgsender_MSG != null;
[L7618]               Balance[this] := 0;
[L7619]               chains_FreezableToken[this] := zerointintArr();
[L7620]               sum_chains2[this] := 0;
[L7621]               freezings_FreezableToken[this] := zerointintArr();
[L7622]               sum_freezings3[this] := 0;
[L7623]               freezingBalance_FreezableToken[this] := zeroRefintArr();
[L7624]               sum_freezingBalance4[this] := 0;
[L7670]   RET         call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7671]   COND FALSE  !(revert)
[L9526]   RET         call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9527]   COND FALSE  !(revert)
[L9530]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7289]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7272]               assume msgsender_MSG != null;
[L7273]               Balance[this] := 0;
[L7274]               owner_Ownable[this] := null;
[L7276]               owner_Ownable[this] := msgsender_MSG;
[L7289]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7290]   COND FALSE  !(revert)
[L9530]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L9531]   COND FALSE  !(revert)
[L9534]   CALL        call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7473]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L7473]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7474]   COND FALSE  !(revert)
[L7477]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6995]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6995]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   COND FALSE  !(revert)
[L6999]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6976]               assume msgsender_MSG != null;
[L6977]               Balance[this] := 0;
[L6999]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]   COND FALSE  !(revert)
[L7477]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7478]   COND FALSE  !(revert)
[L7481]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6866]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6866]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   COND FALSE  !(revert)
[L6870]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6844]               assume msgsender_MSG != null;
[L6845]               Balance[this] := 0;
[L6846]               balances_BasicToken[this] := zeroRefintArr();
[L6847]               sum_balances0[this] := 0;
[L6848]               totalSupply__BasicToken[this] := 0;
[L6870]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6871]   COND FALSE  !(revert)
[L7481]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7482]   COND FALSE  !(revert)
[L7485]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7047]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L7047]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7048]   COND FALSE  !(revert)
[L7051]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6995]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6995]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   COND FALSE  !(revert)
[L6999]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6976]               assume msgsender_MSG != null;
[L6977]               Balance[this] := 0;
[L6999]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]   COND FALSE  !(revert)
[L7051]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7052]   COND FALSE  !(revert)
[L7055]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6866]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6866]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   COND FALSE  !(revert)
[L6870]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6844]               assume msgsender_MSG != null;
[L6845]               Balance[this] := 0;
[L6846]               balances_BasicToken[this] := zeroRefintArr();
[L6847]               sum_balances0[this] := 0;
[L6848]               totalSupply__BasicToken[this] := 0;
[L6870]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6871]   COND FALSE  !(revert)
[L7055]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7056]   COND FALSE  !(revert)
[L7059]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7018]               assume msgsender_MSG != null;
[L7019]               Balance[this] := 0;
[L7020]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7021]               sum_allowed1[this] := 0;
[L7059]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7060]   COND FALSE  !(revert)
[L7485]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7486]   COND FALSE  !(revert)
[L7489]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7289]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7272]               assume msgsender_MSG != null;
[L7273]               Balance[this] := 0;
[L7274]               owner_Ownable[this] := null;
[L7276]               owner_Ownable[this] := msgsender_MSG;
[L7289]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7290]   COND FALSE  !(revert)
[L7489]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7490]   COND FALSE  !(revert)
[L7493]   CALL        call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7437]               assume msgsender_MSG != null;
[L7438]               Balance[this] := 0;
[L7439]               mintingFinished_MintableToken[this] := false;
[L7493]   RET         call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7494]   COND FALSE  !(revert)
[L9534]   RET         call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9535]   COND FALSE  !(revert)
[L9538]   CALL        call FreezableMintableToken_FreezableMintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9093]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L9093]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L9094]   COND FALSE  !(revert)
[L9097]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6995]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6995]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   COND FALSE  !(revert)
[L6999]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6976]               assume msgsender_MSG != null;
[L6977]               Balance[this] := 0;
[L6999]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]   COND FALSE  !(revert)
[L9097]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L9098]   COND FALSE  !(revert)
[L9101]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6866]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6866]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   COND FALSE  !(revert)
[L6870]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6844]               assume msgsender_MSG != null;
[L6845]               Balance[this] := 0;
[L6846]               balances_BasicToken[this] := zeroRefintArr();
[L6847]               sum_balances0[this] := 0;
[L6848]               totalSupply__BasicToken[this] := 0;
[L6870]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6871]   COND FALSE  !(revert)
[L9101]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9102]   COND FALSE  !(revert)
[L9105]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7047]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L7047]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7048]   COND FALSE  !(revert)
[L7051]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6995]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6995]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   COND FALSE  !(revert)
[L6999]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6976]               assume msgsender_MSG != null;
[L6977]               Balance[this] := 0;
[L6999]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]   COND FALSE  !(revert)
[L7051]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7052]   COND FALSE  !(revert)
[L7055]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6866]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6866]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   COND FALSE  !(revert)
[L6870]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6844]               assume msgsender_MSG != null;
[L6845]               Balance[this] := 0;
[L6846]               balances_BasicToken[this] := zeroRefintArr();
[L6847]               sum_balances0[this] := 0;
[L6848]               totalSupply__BasicToken[this] := 0;
[L6870]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6871]   COND FALSE  !(revert)
[L7055]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7056]   COND FALSE  !(revert)
[L7059]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7018]               assume msgsender_MSG != null;
[L7019]               Balance[this] := 0;
[L7020]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7021]               sum_allowed1[this] := 0;
[L7059]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7060]   COND FALSE  !(revert)
[L9105]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9106]   COND FALSE  !(revert)
[L9109]   CALL        call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7654]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L7654]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7655]   COND FALSE  !(revert)
[L7658]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6995]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6995]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   COND FALSE  !(revert)
[L6999]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6976]               assume msgsender_MSG != null;
[L6977]               Balance[this] := 0;
[L6999]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]   COND FALSE  !(revert)
[L7658]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7659]   COND FALSE  !(revert)
[L7662]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6866]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6866]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   COND FALSE  !(revert)
[L6870]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6844]               assume msgsender_MSG != null;
[L6845]               Balance[this] := 0;
[L6846]               balances_BasicToken[this] := zeroRefintArr();
[L6847]               sum_balances0[this] := 0;
[L6848]               totalSupply__BasicToken[this] := 0;
[L6870]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6871]   COND FALSE  !(revert)
[L7662]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7663]   COND FALSE  !(revert)
[L7666]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7047]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L7047]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7048]   COND FALSE  !(revert)
[L7051]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6995]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6995]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   COND FALSE  !(revert)
[L6999]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6976]               assume msgsender_MSG != null;
[L6977]               Balance[this] := 0;
[L6999]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]   COND FALSE  !(revert)
[L7051]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7052]   COND FALSE  !(revert)
[L7055]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6866]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6866]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   COND FALSE  !(revert)
[L6870]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6844]               assume msgsender_MSG != null;
[L6845]               Balance[this] := 0;
[L6846]               balances_BasicToken[this] := zeroRefintArr();
[L6847]               sum_balances0[this] := 0;
[L6848]               totalSupply__BasicToken[this] := 0;
[L6870]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6871]   COND FALSE  !(revert)
[L7055]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7056]   COND FALSE  !(revert)
[L7059]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7018]               assume msgsender_MSG != null;
[L7019]               Balance[this] := 0;
[L7020]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7021]               sum_allowed1[this] := 0;
[L7059]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7060]   COND FALSE  !(revert)
[L7666]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7667]   COND FALSE  !(revert)
[L7670]   CALL        call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7617]               assume msgsender_MSG != null;
[L7618]               Balance[this] := 0;
[L7619]               chains_FreezableToken[this] := zerointintArr();
[L7620]               sum_chains2[this] := 0;
[L7621]               freezings_FreezableToken[this] := zerointintArr();
[L7622]               sum_freezings3[this] := 0;
[L7623]               freezingBalance_FreezableToken[this] := zeroRefintArr();
[L7624]               sum_freezingBalance4[this] := 0;
[L7670]   RET         call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7671]   COND FALSE  !(revert)
[L9109]   RET         call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9110]   COND FALSE  !(revert)
[L9113]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7289]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7272]               assume msgsender_MSG != null;
[L7273]               Balance[this] := 0;
[L7274]               owner_Ownable[this] := null;
[L7276]               owner_Ownable[this] := msgsender_MSG;
[L7289]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7290]   COND FALSE  !(revert)
[L9113]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L9114]   COND FALSE  !(revert)
[L9117]   CALL        call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7473]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L7473]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7474]   COND FALSE  !(revert)
[L7477]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6995]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6995]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   COND FALSE  !(revert)
[L6999]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6976]               assume msgsender_MSG != null;
[L6977]               Balance[this] := 0;
[L6999]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]   COND FALSE  !(revert)
[L7477]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7478]   COND FALSE  !(revert)
[L7481]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6866]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6866]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   COND FALSE  !(revert)
[L6870]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6844]               assume msgsender_MSG != null;
[L6845]               Balance[this] := 0;
[L6846]               balances_BasicToken[this] := zeroRefintArr();
[L6847]               sum_balances0[this] := 0;
[L6848]               totalSupply__BasicToken[this] := 0;
[L6870]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6871]   COND FALSE  !(revert)
[L7481]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7482]   COND FALSE  !(revert)
[L7485]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7047]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L7047]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7048]   COND FALSE  !(revert)
[L7051]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6995]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6995]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   COND FALSE  !(revert)
[L6999]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6976]               assume msgsender_MSG != null;
[L6977]               Balance[this] := 0;
[L6999]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]   COND FALSE  !(revert)
[L7051]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7052]   COND FALSE  !(revert)
[L7055]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6866]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6866]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   COND FALSE  !(revert)
[L6870]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6844]               assume msgsender_MSG != null;
[L6845]               Balance[this] := 0;
[L6846]               balances_BasicToken[this] := zeroRefintArr();
[L6847]               sum_balances0[this] := 0;
[L6848]               totalSupply__BasicToken[this] := 0;
[L6870]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6871]   COND FALSE  !(revert)
[L7055]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7056]   COND FALSE  !(revert)
[L7059]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7018]               assume msgsender_MSG != null;
[L7019]               Balance[this] := 0;
[L7020]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7021]               sum_allowed1[this] := 0;
[L7059]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7060]   COND FALSE  !(revert)
[L7485]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7486]   COND FALSE  !(revert)
[L7489]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7289]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7272]               assume msgsender_MSG != null;
[L7273]               Balance[this] := 0;
[L7274]               owner_Ownable[this] := null;
[L7276]               owner_Ownable[this] := msgsender_MSG;
[L7289]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7290]   COND FALSE  !(revert)
[L7489]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7490]   COND FALSE  !(revert)
[L7493]   CALL        call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7437]               assume msgsender_MSG != null;
[L7438]               Balance[this] := 0;
[L7439]               mintingFinished_MintableToken[this] := false;
[L7493]   RET         call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7494]   COND FALSE  !(revert)
[L9117]   RET         call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9118]   COND FALSE  !(revert)
[L9121]   CALL        call FreezableMintableToken_FreezableMintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9050]               assume msgsender_MSG != null;
[L9051]               Balance[this] := 0;
[L9121]   RET         call FreezableMintableToken_FreezableMintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9122]   COND FALSE  !(revert)
[L9538]   RET         call FreezableMintableToken_FreezableMintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9539]   COND FALSE  !(revert)
[L9542]   CALL        call BurnableToken_BurnableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L8837]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L8837]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L8838]   COND FALSE  !(revert)
[L8841]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6866]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6866]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   COND FALSE  !(revert)
[L6870]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6844]               assume msgsender_MSG != null;
[L6845]               Balance[this] := 0;
[L6846]               balances_BasicToken[this] := zeroRefintArr();
[L6847]               sum_balances0[this] := 0;
[L6848]               totalSupply__BasicToken[this] := 0;
[L6870]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6871]   COND FALSE  !(revert)
[L8841]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L8842]   COND FALSE  !(revert)
[L8845]   CALL        call BurnableToken_BurnableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8814]               assume msgsender_MSG != null;
[L8815]               Balance[this] := 0;
[L8845]   RET         call BurnableToken_BurnableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8846]   COND FALSE  !(revert)
[L9542]   RET         call BurnableToken_BurnableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9543]   COND FALSE  !(revert)
[L9546]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L8963]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7289]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7272]               assume msgsender_MSG != null;
[L7273]               Balance[this] := 0;
[L7274]               owner_Ownable[this] := null;
[L7276]               owner_Ownable[this] := msgsender_MSG;
[L7289]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7290]   COND FALSE  !(revert)
[L8963]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L8964]   COND FALSE  !(revert)
[L8967]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8943]               assume msgsender_MSG != null;
[L8944]               Balance[this] := 0;
[L8945]               paused_Pausable[this] := false;
[L8967]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8968]   COND FALSE  !(revert)
[L9546]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L9547]   COND FALSE  !(revert)
[L9550]   CALL        call MainToken_MainToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9434]               assume msgsender_MSG != null;
[L9435]               Balance[this] := 0;
[L9436]               initialized_MainToken[this] := false;
[L9438]   CALL        call init_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9754]   COND FALSE  !(!!initialized_MainToken[this])
[L9758]               initialized_MainToken[this] := true;
[L9759]   COND FALSE  !(PAUSED_Consts[this])
[L9769]               __var_57 := ConstantToRef(207782497573736545615953600095632397981971535507);
[L9770]               addresses_s1673 := ConstantToRef(207782497573736545615953600095632397981971535507);
[L9771]               __var_58 := 500000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9772]               amounts_s1673 := 500000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9773]               __var_59 := 0 % 18446744073709551616;
[L9774]               freezes_s1673 := 0 % 18446744073709551616;
[L9775]               i_s1673 := 0;
[L9776]   COND FALSE  !(i_s1673 < Length[addresses_s1673])
[L9800]   COND FALSE  !(!CONTINUE_MINTING_Consts[this])
[L9810]               assert { :EventEmitted "Initialized_MainToken" } true;
[L9438]   RET         call init_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9439]   COND FALSE  !(revert)
[L9442]   COND TRUE   DType[this] == MainToken
[L9443]   CALL        call transferOwnership~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, TARGET_USER_Consts[this]);
[L7356]   CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L12721]  COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L7356]   RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7357]   COND FALSE  !(revert)
[L7360]   COND TRUE   DType[this] == MainToken
[L7361]   CALL        call _transferOwnership~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, _newOwner_s558);
[L7404]               __var_11 := null;
[L7405]   COND FALSE  !(!(_newOwner_s581 != null))
[L7409]               assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L7410]               owner_Ownable[this] := _newOwner_s581;
[L7361]   RET         call _transferOwnership~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, _newOwner_s558);
[L7362]   COND FALSE  !(revert)
[L9443]   RET         call transferOwnership~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, TARGET_USER_Consts[this]);
[L9444]   COND FALSE  !(revert)
[L9550]   RET         call MainToken_MainToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9551]   COND FALSE  !(revert)
[L4426]   RET         call MainToken_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4427]               assume !revert && gas >= 0;
[L14773]  RET         call MainToken_MainToken(this, msgsender_MSG, msgvalue_MSG);
[L14774]              assume !revert && gas >= 0;
[L14777]  CALL        call CorralChoice_MainToken(this);
[L14434]              havoc msgsender_MSG;
[L14435]              havoc msgvalue_MSG;
[L14436]              havoc choice;
[L14437]              havoc __ret_0_totalSupply;
[L14438]              havoc _owner_s729;
[L14439]              havoc balance_s729;
[L14440]              havoc _to_s1572;
[L14441]              havoc _value_s1572;
[L14442]              havoc _success_s1572;
[L14443]              havoc _owner_s395;
[L14444]              havoc _spender_s395;
[L14445]              havoc __ret_0_allowance;
[L14446]              havoc _from_s1551;
[L14447]              havoc _to_s1551;
[L14448]              havoc _value_s1551;
[L14449]              havoc _success_s1551;
[L14450]              havoc _spender_s379;
[L14451]              havoc _value_s379;
[L14452]              havoc __ret_0_approve;
[L14453]              havoc _spender_s437;
[L14454]              havoc _addedValue_s437;
[L14455]              havoc __ret_0_increaseApproval;
[L14456]              havoc _spender_s497;
[L14457]              havoc _subtractedValue_s497;
[L14458]              havoc __ret_0_decreaseApproval;
[L14459]              havoc __ret_0_owner;
[L14460]              havoc _newOwner_s558;
[L14461]              havoc __ret_0_mintingFinished;
[L14462]              havoc _to_s664;
[L14463]              havoc _amount_s664;
[L14464]              havoc __ret_0_mint;
[L14465]              havoc __ret_0_finishMinting;
[L14466]              havoc _owner_s742;
[L14467]              havoc balance_s742;
[L14468]              havoc _owner_s754;
[L14469]              havoc balance_s754;
[L14470]              havoc _addr_s792;
[L14471]              havoc count_s792;
[L14472]              havoc _addr_s849;
[L14473]              havoc _index_s849;
[L14474]              havoc _release_s849;
[L14475]              havoc _balance_s849;
[L14476]              havoc _to_s938;
[L14477]              havoc _amount_s938;
[L14478]              havoc _until_s938;
[L14479]              havoc tokens_s1107;
[L14480]              havoc _value_s1261;
[L14481]              havoc __ret_0_paused;
[L14482]              havoc _to_s1449;
[L14483]              havoc _amount_s1449;
[L14484]              havoc _until_s1449;
[L14485]              havoc __ret_0_mintAndFreeze;
[L14486]              havoc __ret_0_TOKEN_DECIMALS;
[L14487]              havoc __ret_0_TOKEN_DECIMALS_UINT8;
[L14488]              havoc __ret_0_TOKEN_DECIMAL_MULTIPLIER;
[L14489]              havoc __ret_0_TOKEN_NAME;
[L14490]              havoc __ret_0_TOKEN_SYMBOL;
[L14491]              havoc __ret_0_PAUSED;
[L14492]              havoc __ret_0_TARGET_USER;
[L14493]              havoc __ret_0_CONTINUE_MINTING;
[L14494]              havoc __ret_0_initialized;
[L14495]              havoc _name_s1511;
[L14496]              havoc _symbol_s1519;
[L14497]              havoc _decimals_s1527;
[L14498]              havoc tmpNow;
[L14499]              havoc gas;
[L14500]              assume gas > 4000000 && gas <= 8000000;
[L14501]              tmpNow := now;
[L14502]              havoc now;
[L14503]              assume now > tmpNow;
[L14504]              assume msgsender_MSG != null;
[L14505]              assume DType[msgsender_MSG] != ERC20Basic;
[L14506]              assume DType[msgsender_MSG] != SafeMath;
[L14507]              assume DType[msgsender_MSG] != BasicToken;
[L14508]              assume DType[msgsender_MSG] != ERC20;
[L14509]              assume DType[msgsender_MSG] != StandardToken;
[L14510]              assume DType[msgsender_MSG] != Ownable;
[L14511]              assume DType[msgsender_MSG] != MintableToken;
[L14512]              assume DType[msgsender_MSG] != FreezableToken;
[L14513]              assume DType[msgsender_MSG] != BurnableToken;
[L14514]              assume DType[msgsender_MSG] != Pausable;
[L14515]              assume DType[msgsender_MSG] != FreezableMintableToken;
[L14516]              assume DType[msgsender_MSG] != Consts;
[L14517]              assume DType[msgsender_MSG] != MainToken;
[L14518]              Alloc[msgsender_MSG] := true;
[L14519]  COND TRUE   choice == 38
[L14520]              gas := gas - 21000;
[L14521]  COND TRUE   gas >= 0
[L14522]              assume msgvalue_MSG == 0;
[L14523]  CALL        call __ret_0_totalSupply := totalSupply_BasicToken(this, msgsender_MSG, msgvalue_MSG);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume totalSupply__BasicToken[this] >= 0 && totalSupply__BasicToken[this] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_totalSupply_BasicToken0 := true;
[L2]                  call_totalSupply_BasicToken0 := false;
[L2]                  revert := revert_hold;
[L379]                havoc __exception;
[L380]                revert := false;
[L381]    COND TRUE   __exception
[L382]                __tmp__Balance := Balance;
[L383]                __tmp__DType := DType;
[L384]                __tmp__Alloc := Alloc;
[L385]                __tmp__balance_ADDR := balance_ADDR;
[L386]                __tmp__M_Ref_int := M_Ref_int;
[L387]                __tmp__sum_balances0 := sum_balances0;
[L388]                __tmp__alloc_allowed_StandardToken_lvl0 := alloc_allowed_StandardToken_lvl0;
[L389]                __tmp__M_Ref_Ref := M_Ref_Ref;
[L390]                __tmp__sum_allowed1 := sum_allowed1;
[L391]                __tmp__M_int_int := M_int_int;
[L392]                __tmp__sum_chains2 := sum_chains2;
[L393]                __tmp__sum_freezings3 := sum_freezings3;
[L394]                __tmp__sum_freezingBalance4 := sum_freezingBalance4;
[L395]                __tmp__M_int_Ref := M_int_Ref;
[L396]                __tmp__sum := sum;
[L397]                __tmp__Length := Length;
[L398]                __tmp__now := now;
[L399]                __tmp__balances_BasicToken := balances_BasicToken;
[L400]                __tmp__totalSupply__BasicToken := totalSupply__BasicToken;
[L401]                __tmp__allowed_StandardToken := allowed_StandardToken;
[L402]                __tmp__owner_Ownable := owner_Ownable;
[L403]                __tmp__mintingFinished_MintableToken := mintingFinished_MintableToken;
[L404]                __tmp__chains_FreezableToken := chains_FreezableToken;
[L405]                __tmp__freezings_FreezableToken := freezings_FreezableToken;
[L406]                __tmp__freezingBalance_FreezableToken := freezingBalance_FreezableToken;
[L407]                __tmp__paused_Pausable := paused_Pausable;
[L408]                __tmp__TOKEN_DECIMALS_Consts := TOKEN_DECIMALS_Consts;
[L409]                __tmp__TOKEN_DECIMALS_UINT8_Consts := TOKEN_DECIMALS_UINT8_Consts;
[L410]                __tmp__TOKEN_DECIMAL_MULTIPLIER_Consts := TOKEN_DECIMAL_MULTIPLIER_Consts;
[L411]                __tmp__TOKEN_NAME_Consts := TOKEN_NAME_Consts;
[L412]                __tmp__TOKEN_SYMBOL_Consts := TOKEN_SYMBOL_Consts;
[L413]                __tmp__PAUSED_Consts := PAUSED_Consts;
[L414]                __tmp__TARGET_USER_Consts := TARGET_USER_Consts;
[L415]                __tmp__CONTINUE_MINTING_Consts := CONTINUE_MINTING_Consts;
[L416]                __tmp__initialized_MainToken := initialized_MainToken;
[L417]    CALL        call __ret_0_ := totalSupply_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L6878]               __ret_0_ := __tmp__totalSupply__BasicToken[this];
[L417]    RET         call __ret_0_ := totalSupply_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L418]                assume revert || gas < 0;
[L14523]  RET         call __ret_0_totalSupply := totalSupply_BasicToken(this, msgsender_MSG, msgvalue_MSG);
[L14777]  RET         call CorralChoice_MainToken(this);

Loop:
[L14777]  CALL       call CorralChoice_MainToken(this);
[L14434]             havoc msgsender_MSG;
[L14435]             havoc msgvalue_MSG;
[L14436]             havoc choice;
[L14437]             havoc __ret_0_totalSupply;
[L14438]             havoc _owner_s729;
[L14439]             havoc balance_s729;
[L14440]             havoc _to_s1572;
[L14441]             havoc _value_s1572;
[L14442]             havoc _success_s1572;
[L14443]             havoc _owner_s395;
[L14444]             havoc _spender_s395;
[L14445]             havoc __ret_0_allowance;
[L14446]             havoc _from_s1551;
[L14447]             havoc _to_s1551;
[L14448]             havoc _value_s1551;
[L14449]             havoc _success_s1551;
[L14450]             havoc _spender_s379;
[L14451]             havoc _value_s379;
[L14452]             havoc __ret_0_approve;
[L14453]             havoc _spender_s437;
[L14454]             havoc _addedValue_s437;
[L14455]             havoc __ret_0_increaseApproval;
[L14456]             havoc _spender_s497;
[L14457]             havoc _subtractedValue_s497;
[L14458]             havoc __ret_0_decreaseApproval;
[L14459]             havoc __ret_0_owner;
[L14460]             havoc _newOwner_s558;
[L14461]             havoc __ret_0_mintingFinished;
[L14462]             havoc _to_s664;
[L14463]             havoc _amount_s664;
[L14464]             havoc __ret_0_mint;
[L14465]             havoc __ret_0_finishMinting;
[L14466]             havoc _owner_s742;
[L14467]             havoc balance_s742;
[L14468]             havoc _owner_s754;
[L14469]             havoc balance_s754;
[L14470]             havoc _addr_s792;
[L14471]             havoc count_s792;
[L14472]             havoc _addr_s849;
[L14473]             havoc _index_s849;
[L14474]             havoc _release_s849;
[L14475]             havoc _balance_s849;
[L14476]             havoc _to_s938;
[L14477]             havoc _amount_s938;
[L14478]             havoc _until_s938;
[L14479]             havoc tokens_s1107;
[L14480]             havoc _value_s1261;
[L14481]             havoc __ret_0_paused;
[L14482]             havoc _to_s1449;
[L14483]             havoc _amount_s1449;
[L14484]             havoc _until_s1449;
[L14485]             havoc __ret_0_mintAndFreeze;
[L14486]             havoc __ret_0_TOKEN_DECIMALS;
[L14487]             havoc __ret_0_TOKEN_DECIMALS_UINT8;
[L14488]             havoc __ret_0_TOKEN_DECIMAL_MULTIPLIER;
[L14489]             havoc __ret_0_TOKEN_NAME;
[L14490]             havoc __ret_0_TOKEN_SYMBOL;
[L14491]             havoc __ret_0_PAUSED;
[L14492]             havoc __ret_0_TARGET_USER;
[L14493]             havoc __ret_0_CONTINUE_MINTING;
[L14494]             havoc __ret_0_initialized;
[L14495]             havoc _name_s1511;
[L14496]             havoc _symbol_s1519;
[L14497]             havoc _decimals_s1527;
[L14498]             havoc tmpNow;
[L14499]             havoc gas;
[L14500]             assume gas > 4000000 && gas <= 8000000;
[L14501]             tmpNow := now;
[L14502]             havoc now;
[L14503]             assume now > tmpNow;
[L14504]             assume msgsender_MSG != null;
[L14505]             assume DType[msgsender_MSG] != ERC20Basic;
[L14506]             assume DType[msgsender_MSG] != SafeMath;
[L14507]             assume DType[msgsender_MSG] != BasicToken;
[L14508]             assume DType[msgsender_MSG] != ERC20;
[L14509]             assume DType[msgsender_MSG] != StandardToken;
[L14510]             assume DType[msgsender_MSG] != Ownable;
[L14511]             assume DType[msgsender_MSG] != MintableToken;
[L14512]             assume DType[msgsender_MSG] != FreezableToken;
[L14513]             assume DType[msgsender_MSG] != BurnableToken;
[L14514]             assume DType[msgsender_MSG] != Pausable;
[L14515]             assume DType[msgsender_MSG] != FreezableMintableToken;
[L14516]             assume DType[msgsender_MSG] != Consts;
[L14517]             assume DType[msgsender_MSG] != MainToken;
[L14518]             Alloc[msgsender_MSG] := true;
[L14519]  COND TRUE  choice == 38
[L14520]             gas := gas - 21000;
[L14521]  COND TRUE  gas >= 0
[L14522]             assume msgvalue_MSG == 0;
[L14523]  CALL       call __ret_0_totalSupply := totalSupply_BasicToken(this, msgsender_MSG, msgvalue_MSG);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume totalSupply__BasicToken[this] >= 0 && totalSupply__BasicToken[this] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_totalSupply_BasicToken0 := true;
[L2]                 call_totalSupply_BasicToken0 := false;
[L2]                 revert := revert_hold;
[L379]               havoc __exception;
[L380]               revert := false;
[L381]    COND TRUE  __exception
[L382]               __tmp__Balance := Balance;
[L383]               __tmp__DType := DType;
[L384]               __tmp__Alloc := Alloc;
[L385]               __tmp__balance_ADDR := balance_ADDR;
[L386]               __tmp__M_Ref_int := M_Ref_int;
[L387]               __tmp__sum_balances0 := sum_balances0;
[L388]               __tmp__alloc_allowed_StandardToken_lvl0 := alloc_allowed_StandardToken_lvl0;
[L389]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L390]               __tmp__sum_allowed1 := sum_allowed1;
[L391]               __tmp__M_int_int := M_int_int;
[L392]               __tmp__sum_chains2 := sum_chains2;
[L393]               __tmp__sum_freezings3 := sum_freezings3;
[L394]               __tmp__sum_freezingBalance4 := sum_freezingBalance4;
[L395]               __tmp__M_int_Ref := M_int_Ref;
[L396]               __tmp__sum := sum;
[L397]               __tmp__Length := Length;
[L398]               __tmp__now := now;
[L399]               __tmp__balances_BasicToken := balances_BasicToken;
[L400]               __tmp__totalSupply__BasicToken := totalSupply__BasicToken;
[L401]               __tmp__allowed_StandardToken := allowed_StandardToken;
[L402]               __tmp__owner_Ownable := owner_Ownable;
[L403]               __tmp__mintingFinished_MintableToken := mintingFinished_MintableToken;
[L404]               __tmp__chains_FreezableToken := chains_FreezableToken;
[L405]               __tmp__freezings_FreezableToken := freezings_FreezableToken;
[L406]               __tmp__freezingBalance_FreezableToken := freezingBalance_FreezableToken;
[L407]               __tmp__paused_Pausable := paused_Pausable;
[L408]               __tmp__TOKEN_DECIMALS_Consts := TOKEN_DECIMALS_Consts;
[L409]               __tmp__TOKEN_DECIMALS_UINT8_Consts := TOKEN_DECIMALS_UINT8_Consts;
[L410]               __tmp__TOKEN_DECIMAL_MULTIPLIER_Consts := TOKEN_DECIMAL_MULTIPLIER_Consts;
[L411]               __tmp__TOKEN_NAME_Consts := TOKEN_NAME_Consts;
[L412]               __tmp__TOKEN_SYMBOL_Consts := TOKEN_SYMBOL_Consts;
[L413]               __tmp__PAUSED_Consts := PAUSED_Consts;
[L414]               __tmp__TARGET_USER_Consts := TARGET_USER_Consts;
[L415]               __tmp__CONTINUE_MINTING_Consts := CONTINUE_MINTING_Consts;
[L416]               __tmp__initialized_MainToken := initialized_MainToken;
[L417]    CALL       call __ret_0_ := totalSupply_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L6878]              __ret_0_ := __tmp__totalSupply__BasicToken[this];
[L417]    RET        call __ret_0_ := totalSupply_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L418]               assume revert || gas < 0;
[L14523]  RET        call __ret_0_totalSupply := totalSupply_BasicToken(this, msgsender_MSG, msgvalue_MSG);
[L14777]  RET        call CorralChoice_MainToken(this);

[2020-11-24 21:34:25,825 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-24 21:34:25,825 INFO  L82        PathProgramCache]: Analyzing trace with hash -729652142, now seen corresponding path program 1 times
[2020-11-24 21:34:25,826 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-24 21:34:25,865 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-24 21:34:26,403 INFO  L134       CoverageAnalysis]: Checked inductivity of 9823 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 9823 trivial. 0 not checked.
[2020-11-24 21:34:26,403 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-24 21:34:26,404 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [5] imperfect sequences [] total 5
[2020-11-24 21:34:26,404 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-24 21:34:26,404 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 5 interpolants.
[2020-11-24 21:34:26,404 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=7, Invalid=13, Unknown=0, NotChecked=0, Total=20
[2020-11-24 21:34:26,404 INFO  L87              Difference]: Start difference. First operand 8684 states and 9683 transitions. cyclomatic complexity: 1019 Second operand 5 states.
[2020-11-24 21:34:27,033 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-24 21:34:27,033 INFO  L93              Difference]: Finished difference Result 6051 states and 6767 transitions.
[2020-11-24 21:34:27,033 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 7 states. 
[2020-11-24 21:34:27,033 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 6051 states and 6767 transitions.
[2020-11-24 21:34:27,044 INFO  L131   ngComponentsAnalysis]: Automaton has 0 accepting balls. 0
[2020-11-24 21:34:27,044 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 6051 states to 0 states and 0 transitions.
[2020-11-24 21:34:27,044 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 0
[2020-11-24 21:34:27,044 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 0
[2020-11-24 21:34:27,044 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 0 states and 0 transitions.
[2020-11-24 21:34:27,044 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-24 21:34:27,044 INFO  L728         BuchiCegarLoop]: Abstraction has 0 states and 0 transitions.
[2020-11-24 21:34:27,044 INFO  L751         BuchiCegarLoop]: Abstraction has 0 states and 0 transitions.
[2020-11-24 21:34:27,044 INFO  L631         BuchiCegarLoop]: Abstraction has 0 states and 0 transitions.
[2020-11-24 21:34:27,044 INFO  L445         BuchiCegarLoop]: ======== Iteration 6============
[2020-11-24 21:34:27,045 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 0 states and 0 transitions.
[2020-11-24 21:34:27,045 INFO  L131   ngComponentsAnalysis]: Automaton has 0 accepting balls. 0
[2020-11-24 21:34:27,045 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is true
[2020-11-24 21:34:27,048 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer CFG 24.11 09:34:27 BasicIcfg
[2020-11-24 21:34:27,048 INFO  L132        PluginConnector]: ------------------------ END BuchiAutomizer----------------------------
[2020-11-24 21:34:27,048 INFO  L168              Benchmark]: Toolchain (without parser) took 12331.49 ms. Allocated memory was 1.0 GB in the beginning and 3.5 GB in the end (delta: 2.5 GB). Free memory was 919.1 MB in the beginning and 2.6 GB in the end (delta: -1.7 GB). Peak memory consumption was 821.4 MB. Max. memory is 15.3 GB.
[2020-11-24 21:34:27,049 INFO  L168              Benchmark]: Boogie PL CUP Parser took 0.21 ms. Allocated memory is still 1.0 GB. Free memory is still 956.7 MB. There was no memory consumed. Max. memory is 15.3 GB.
[2020-11-24 21:34:27,049 INFO  L168              Benchmark]: Boogie Preprocessor took 208.93 ms. Allocated memory is still 1.0 GB. Free memory was 919.1 MB in the beginning and 886.9 MB in the end (delta: 32.2 MB). Peak memory consumption was 32.2 MB. Max. memory is 15.3 GB.
[2020-11-24 21:34:27,049 INFO  L168              Benchmark]: UtopiaSpecLang took 95.65 ms. Allocated memory is still 1.0 GB. Free memory was 886.9 MB in the beginning and 870.7 MB in the end (delta: 16.2 MB). Peak memory consumption was 16.2 MB. Max. memory is 15.3 GB.
[2020-11-24 21:34:27,050 INFO  L168              Benchmark]: Boogie Printer took 33.66 ms. Allocated memory is still 1.0 GB. Free memory was 870.7 MB in the beginning and 859.9 MB in the end (delta: 10.7 MB). Peak memory consumption was 10.7 MB. Max. memory is 15.3 GB.
[2020-11-24 21:34:27,051 INFO  L168              Benchmark]: RCFGBuilder took 1689.55 ms. Allocated memory was 1.0 GB in the beginning and 1.2 GB in the end (delta: 182.5 MB). Free memory was 859.9 MB in the beginning and 1.1 GB in the end (delta: -222.4 MB). Peak memory consumption was 246.7 MB. Max. memory is 15.3 GB.
[2020-11-24 21:34:27,052 INFO  L168              Benchmark]: UtopiaLTL2Aut took 36.30 ms. Allocated memory is still 1.2 GB. Free memory was 1.1 GB in the beginning and 1.1 GB in the end (delta: 16.3 MB). Peak memory consumption was 16.3 MB. Max. memory is 15.3 GB.
[2020-11-24 21:34:27,053 INFO  L168              Benchmark]: BÃ¼chi Program Product took 4159.83 ms. Allocated memory was 1.2 GB in the beginning and 1.6 GB in the end (delta: 344.5 MB). Free memory was 1.1 GB in the beginning and 784.7 MB in the end (delta: 281.3 MB). Peak memory consumption was 789.2 MB. Max. memory is 15.3 GB.
[2020-11-24 21:34:27,054 INFO  L168              Benchmark]: BlockEncodingV2 took 366.18 ms. Allocated memory was 1.6 GB in the beginning and 2.0 GB in the end (delta: 439.9 MB). Free memory was 784.7 MB in the beginning and 1.7 GB in the end (delta: -932.0 MB). Peak memory consumption was 228.7 MB. Max. memory is 15.3 GB.
[2020-11-24 21:34:27,055 INFO  L168              Benchmark]: BuchiAutomizer took 5738.30 ms. Allocated memory was 2.0 GB in the beginning and 3.5 GB in the end (delta: 1.5 GB). Free memory was 1.7 GB in the beginning and 2.6 GB in the end (delta: -883.9 MB). Peak memory consumption was 652.2 MB. Max. memory is 15.3 GB.
[2020-11-24 21:34:27,061 INFO  L337   ainManager$Toolchain]: #######################  End [Toolchain 1] #######################
 --- Results ---
 * Results from de.uni_freiburg.informatik.ultimate.plugins.blockencoding:
  - StatisticsResult: Initial Icfg
    13448 locations, 24717 edges
  - StatisticsResult: Encoded RCFG
    13238 locations, 24131 edges
 * Results from de.uni_freiburg.informatik.ultimate.core:
  - StatisticsResult: Toolchain Benchmarks
    Benchmark results are:
 * Boogie PL CUP Parser took 0.21 ms. Allocated memory is still 1.0 GB. Free memory is still 956.7 MB. There was no memory consumed. Max. memory is 15.3 GB.
 * Boogie Preprocessor took 208.93 ms. Allocated memory is still 1.0 GB. Free memory was 919.1 MB in the beginning and 886.9 MB in the end (delta: 32.2 MB). Peak memory consumption was 32.2 MB. Max. memory is 15.3 GB.
 * UtopiaSpecLang took 95.65 ms. Allocated memory is still 1.0 GB. Free memory was 886.9 MB in the beginning and 870.7 MB in the end (delta: 16.2 MB). Peak memory consumption was 16.2 MB. Max. memory is 15.3 GB.
 * Boogie Printer took 33.66 ms. Allocated memory is still 1.0 GB. Free memory was 870.7 MB in the beginning and 859.9 MB in the end (delta: 10.7 MB). Peak memory consumption was 10.7 MB. Max. memory is 15.3 GB.
 * RCFGBuilder took 1689.55 ms. Allocated memory was 1.0 GB in the beginning and 1.2 GB in the end (delta: 182.5 MB). Free memory was 859.9 MB in the beginning and 1.1 GB in the end (delta: -222.4 MB). Peak memory consumption was 246.7 MB. Max. memory is 15.3 GB.
 * UtopiaLTL2Aut took 36.30 ms. Allocated memory is still 1.2 GB. Free memory was 1.1 GB in the beginning and 1.1 GB in the end (delta: 16.3 MB). Peak memory consumption was 16.3 MB. Max. memory is 15.3 GB.
 * BÃ¼chi Program Product took 4159.83 ms. Allocated memory was 1.2 GB in the beginning and 1.6 GB in the end (delta: 344.5 MB). Free memory was 1.1 GB in the beginning and 784.7 MB in the end (delta: 281.3 MB). Peak memory consumption was 789.2 MB. Max. memory is 15.3 GB.
 * BlockEncodingV2 took 366.18 ms. Allocated memory was 1.6 GB in the beginning and 2.0 GB in the end (delta: 439.9 MB). Free memory was 784.7 MB in the beginning and 1.7 GB in the end (delta: -932.0 MB). Peak memory consumption was 228.7 MB. Max. memory is 15.3 GB.
 * BuchiAutomizer took 5738.30 ms. Allocated memory was 2.0 GB in the beginning and 3.5 GB in the end (delta: 1.5 GB). Free memory was 1.7 GB in the beginning and 2.6 GB in the end (delta: -883.9 MB). Peak memory consumption was 652.2 MB. Max. memory is 15.3 GB.
 * Results from de.uni_freiburg.informatik.ultimate.buchiprogramproduct:
  - StatisticsResult: Initial property automaton
    2 locations, 3 edges
  - StatisticsResult: Initial RCFG
    5384 locations, 7560 edges
  - StatisticsResult: BuchiProgram size
    13448 locations, 24717 edges
 * Results from de.uni_freiburg.informatik.ultimate.plugins.generator.traceabstraction:
  - StatisticsResult: Constructed decomposition of program
    Your program was decomposed into 5 terminating modules (5 trivial, 0 deterministic, 0 nondeterministic). 5 modules have a trivial ranking function, the largest among these consists of 5 locations.
  - StatisticsResult: Timing statistics
    BÃ¼chiAutomizer plugin needed 5.7s and 6 iterations.  TraceHistogramMax:38. Analysis of lassos took 2.2s. Construction of modules took 1.6s. BÃ¼chi inclusion checks took 0.7s. Highest rank in rank-based complementation 0. Minimization of det autom 5. Minimization of nondet autom 0. Automata minimization 0.4s AutomataMinimizationTime, 4 MinimizatonAttempts, 1777 StatesRemovedByMinimization, 3 NontrivialMinimizations. Non-live state removal took 0.2s Buchi closure took 0.0s. Biggest automaton had 8695 states and ocurred in iteration 3.	Nontrivial modules had stage [0, 0, 0, 0, 0].	InterpolantCoveringCapabilityFinite: 0/0	InterpolantCoveringCapabilityBuchi: 0/0	HoareTripleCheckerStatistics: 44546 SDtfs, 28974 SDslu, 42998 SDs, 0 SdLazy, 5828 SolverSat, 6634 SolverUnsat, 0 SolverUnknown, 0 SolverNotchecked, 1.6s Time	LassoAnalysisResults: nont0 unkn0 SFLI0 SFLT0 conc0 concLT0 SILN0 SILU5 SILI0 SILT0 lasso0 LassoPreprocessingBenchmarks: LassoTerminationAnalysisBenchmarks: not availableLassoTerminationAnalysisBenchmarks: LassoNonterminationAnalysisSatFixpoint: 0	LassoNonterminationAnalysisSatUnbounded: 0	LassoNonterminationAnalysisUnsat: 0	LassoNonterminationAnalysisUnknown: 0	LassoNonterminationAnalysisTime: 0.0s	
  - AllSpecificationsHoldResult: All specifications hold
    Buchi Automizer proved that the LTL property ! ( ( []( (call_totalSupply_(success_totalSupply_BasicToken0)asicToken0) ==> ( <>(success_totalSupply_BasicToken0) ) ) )) holds
RESULT: Ultimate proved your program to be correct!
Received shutdown request...
