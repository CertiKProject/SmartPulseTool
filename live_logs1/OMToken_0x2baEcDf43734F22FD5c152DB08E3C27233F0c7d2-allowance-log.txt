This is Ultimate 0.1.24-f1553f5-m
[2020-11-25 02:29:00,426 INFO  L170        SettingsManager]: Resetting all preferences to default values...
[2020-11-25 02:29:00,427 INFO  L174        SettingsManager]: Resetting UltimateCore preferences to default values
[2020-11-25 02:29:00,434 INFO  L177        SettingsManager]: Ultimate Commandline Interface provides no preferences, ignoring...
[2020-11-25 02:29:00,434 INFO  L174        SettingsManager]: Resetting Boogie Preprocessor preferences to default values
[2020-11-25 02:29:00,435 INFO  L174        SettingsManager]: Resetting Boogie Procedure Inliner preferences to default values
[2020-11-25 02:29:00,435 INFO  L174        SettingsManager]: Resetting Abstract Interpretation preferences to default values
[2020-11-25 02:29:00,436 INFO  L174        SettingsManager]: Resetting LassoRanker preferences to default values
[2020-11-25 02:29:00,437 INFO  L174        SettingsManager]: Resetting Reaching Definitions preferences to default values
[2020-11-25 02:29:00,438 INFO  L174        SettingsManager]: Resetting SyntaxChecker preferences to default values
[2020-11-25 02:29:00,438 INFO  L177        SettingsManager]: BÃ¼chi Program Product provides no preferences, ignoring...
[2020-11-25 02:29:00,438 INFO  L174        SettingsManager]: Resetting LTL2Aut preferences to default values
[2020-11-25 02:29:00,439 INFO  L174        SettingsManager]: Resetting PEA to Boogie preferences to default values
[2020-11-25 02:29:00,439 INFO  L174        SettingsManager]: Resetting BlockEncodingV2 preferences to default values
[2020-11-25 02:29:00,440 INFO  L174        SettingsManager]: Resetting ChcToBoogie preferences to default values
[2020-11-25 02:29:00,440 INFO  L174        SettingsManager]: Resetting AutomataScriptInterpreter preferences to default values
[2020-11-25 02:29:00,441 INFO  L174        SettingsManager]: Resetting BuchiAutomizer preferences to default values
[2020-11-25 02:29:00,441 INFO  L174        SettingsManager]: Resetting CACSL2BoogieTranslator preferences to default values
[2020-11-25 02:29:00,443 INFO  L174        SettingsManager]: Resetting CodeCheck preferences to default values
[2020-11-25 02:29:00,443 INFO  L174        SettingsManager]: Resetting InvariantSynthesis preferences to default values
[2020-11-25 02:29:00,444 INFO  L174        SettingsManager]: Resetting RCFGBuilder preferences to default values
[2020-11-25 02:29:00,444 INFO  L174        SettingsManager]: Resetting TraceAbstraction preferences to default values
[2020-11-25 02:29:00,446 INFO  L177        SettingsManager]: TraceAbstractionConcurrent provides no preferences, ignoring...
[2020-11-25 02:29:00,446 INFO  L177        SettingsManager]: TraceAbstractionWithAFAs provides no preferences, ignoring...
[2020-11-25 02:29:00,446 INFO  L174        SettingsManager]: Resetting TreeAutomizer preferences to default values
[2020-11-25 02:29:00,446 INFO  L174        SettingsManager]: Resetting IcfgToChc preferences to default values
[2020-11-25 02:29:00,446 INFO  L174        SettingsManager]: Resetting IcfgTransformer preferences to default values
[2020-11-25 02:29:00,447 INFO  L177        SettingsManager]: ReqToTest provides no preferences, ignoring...
[2020-11-25 02:29:00,447 INFO  L174        SettingsManager]: Resetting UtopiaLTL2Aut preferences to default values
[2020-11-25 02:29:00,447 INFO  L174        SettingsManager]: Resetting UtopiaSpecLang preferences to default values
[2020-11-25 02:29:00,447 INFO  L174        SettingsManager]: Resetting Boogie Printer preferences to default values
[2020-11-25 02:29:00,448 INFO  L174        SettingsManager]: Resetting ChcSmtPrinter preferences to default values
[2020-11-25 02:29:00,448 INFO  L174        SettingsManager]: Resetting ReqPrinter preferences to default values
[2020-11-25 02:29:00,448 INFO  L174        SettingsManager]: Resetting Witness Printer preferences to default values
[2020-11-25 02:29:00,449 INFO  L177        SettingsManager]: Boogie PL CUP Parser provides no preferences, ignoring...
[2020-11-25 02:29:00,449 INFO  L174        SettingsManager]: Resetting CDTParser preferences to default values
[2020-11-25 02:29:00,449 INFO  L177        SettingsManager]: AutomataScriptParser provides no preferences, ignoring...
[2020-11-25 02:29:00,450 INFO  L177        SettingsManager]: ReqParser provides no preferences, ignoring...
[2020-11-25 02:29:00,450 INFO  L174        SettingsManager]: Resetting SmtParser preferences to default values
[2020-11-25 02:29:00,450 INFO  L174        SettingsManager]: Resetting Witness Parser preferences to default values
[2020-11-25 02:29:00,450 INFO  L181        SettingsManager]: Finished resetting all preferences to default values...
[2020-11-25 02:29:00,451 INFO  L98         SettingsManager]: Beginning loading settings from /mnt/data0/jon/SmartPulseTool/SmartPulse/settings.epf
[2020-11-25 02:29:00,456 INFO  L110        SettingsManager]: Loading preferences was successful
[2020-11-25 02:29:00,456 INFO  L112        SettingsManager]: Preferences different from defaults after loading the file:
[2020-11-25 02:29:00,457 INFO  L131        SettingsManager]: Preferences of LTL2Aut differ from their defaults:
[2020-11-25 02:29:00,457 INFO  L133        SettingsManager]:  * Read property from file=true
[2020-11-25 02:29:00,457 INFO  L133        SettingsManager]:  * Path to LTL*BA executable (LTL2BA, LTL3BA)=/mnt/data0/jon/SmartPulseTool/ltl2ba
[2020-11-25 02:29:00,457 INFO  L131        SettingsManager]: Preferences of BlockEncodingV2 differ from their defaults:
[2020-11-25 02:29:00,457 INFO  L133        SettingsManager]:  * Maximize final states=false
[2020-11-25 02:29:00,457 INFO  L133        SettingsManager]:  * Minimize states even if more edges are added than removed.=true
[2020-11-25 02:29:00,457 INFO  L133        SettingsManager]:  * Minimize states using LBE with the strategy=NONE
[2020-11-25 02:29:00,457 INFO  L131        SettingsManager]: Preferences of BuchiAutomizer differ from their defaults:
[2020-11-25 02:29:00,458 INFO  L133        SettingsManager]:  * Compute Interpolants along a Counterexample=Craig_TreeInterpolation
[2020-11-25 02:29:00,458 INFO  L133        SettingsManager]:  * Use old map elimination=false
[2020-11-25 02:29:00,458 INFO  L133        SettingsManager]:  * Try twofold refinement=false
[2020-11-25 02:29:00,458 INFO  L131        SettingsManager]: Preferences of CACSL2BoogieTranslator differ from their defaults:
[2020-11-25 02:29:00,458 INFO  L133        SettingsManager]:  * Check unreachability of error function in SV-COMP mode=false
[2020-11-25 02:29:00,459 INFO  L133        SettingsManager]:  * Overapproximate operations on floating types=true
[2020-11-25 02:29:00,459 INFO  L133        SettingsManager]:  * Check division by zero=IGNORE
[2020-11-25 02:29:00,459 INFO  L133        SettingsManager]:  * Pointer to allocated memory at dereference=ASSUME
[2020-11-25 02:29:00,459 INFO  L133        SettingsManager]:  * If two pointers are subtracted or compared they have the same base address=ASSUME
[2020-11-25 02:29:00,459 INFO  L133        SettingsManager]:  * Check array bounds for arrays that are off heap=ASSUME
[2020-11-25 02:29:00,460 INFO  L133        SettingsManager]:  * Check if freed pointer was valid=false
[2020-11-25 02:29:00,460 INFO  L133        SettingsManager]:  * Use constant arrays=true
[2020-11-25 02:29:00,460 INFO  L133        SettingsManager]:  * Pointer base address is valid at dereference=ASSUME
[2020-11-25 02:29:00,460 INFO  L131        SettingsManager]: Preferences of RCFGBuilder differ from their defaults:
[2020-11-25 02:29:00,460 INFO  L133        SettingsManager]:  * Size of a code block=SingleStatement
[2020-11-25 02:29:00,460 INFO  L133        SettingsManager]:  * SMT solver=Internal_SMTInterpol
[2020-11-25 02:29:00,484 INFO  L81    nceAwareModelManager]: Repository-Root is: /tmp
[2020-11-25 02:29:00,494 INFO  L259   ainManager$Toolchain]: [Toolchain 1]: Applicable parser(s) successfully (re)initialized
[2020-11-25 02:29:00,497 INFO  L215   ainManager$Toolchain]: [Toolchain 1]: Toolchain selected.
[2020-11-25 02:29:00,498 INFO  L271        PluginConnector]: Initializing Boogie PL CUP Parser...
[2020-11-25 02:29:00,498 INFO  L276        PluginConnector]: Boogie PL CUP Parser initialized
[2020-11-25 02:29:00,499 INFO  L430   ainManager$Toolchain]: [Toolchain 1]: Parsing single file: /mnt/data0/jon/SmartPulseTool/OMToken_0x2baEcDf43734F22FD5c152DB08E3C27233F0c7d2_allowance.bpl
[2020-11-25 02:29:00,499 INFO  L111           BoogieParser]: Parsing: '/mnt/data0/jon/SmartPulseTool/OMToken_0x2baEcDf43734F22FD5c152DB08E3C27233F0c7d2_allowance.bpl'
[2020-11-25 02:29:00,628 INFO  L297   ainManager$Toolchain]: ####################### [Toolchain 1] #######################
[2020-11-25 02:29:00,629 INFO  L131        ToolchainWalker]: Walking toolchain with 8 elements.
[2020-11-25 02:29:00,629 INFO  L113        PluginConnector]: ------------------------Boogie Preprocessor----------------------------
[2020-11-25 02:29:00,629 INFO  L271        PluginConnector]: Initializing Boogie Preprocessor...
[2020-11-25 02:29:00,629 INFO  L276        PluginConnector]: Boogie Preprocessor initialized
[2020-11-25 02:29:00,646 INFO  L185        PluginConnector]: Executing the observer EnsureBoogieModelObserver from plugin Boogie Preprocessor for "OMToken_0x2baEcDf43734F22FD5c152DB08E3C27233F0c7d2_allowance.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 02:29:00" (1/1) ...
[2020-11-25 02:29:00,648 INFO  L185        PluginConnector]: Executing the observer TypeChecker from plugin Boogie Preprocessor for "OMToken_0x2baEcDf43734F22FD5c152DB08E3C27233F0c7d2_allowance.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 02:29:00" (1/1) ...
[2020-11-25 02:29:00,690 INFO  L185        PluginConnector]: Executing the observer ConstExpander from plugin Boogie Preprocessor for "OMToken_0x2baEcDf43734F22FD5c152DB08E3C27233F0c7d2_allowance.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 02:29:00" (1/1) ...
[2020-11-25 02:29:00,691 INFO  L185        PluginConnector]: Executing the observer StructExpander from plugin Boogie Preprocessor for "OMToken_0x2baEcDf43734F22FD5c152DB08E3C27233F0c7d2_allowance.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 02:29:00" (1/1) ...
[2020-11-25 02:29:00,725 INFO  L185        PluginConnector]: Executing the observer UnstructureCode from plugin Boogie Preprocessor for "OMToken_0x2baEcDf43734F22FD5c152DB08E3C27233F0c7d2_allowance.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 02:29:00" (1/1) ...
[2020-11-25 02:29:00,744 INFO  L185        PluginConnector]: Executing the observer FunctionInliner from plugin Boogie Preprocessor for "OMToken_0x2baEcDf43734F22FD5c152DB08E3C27233F0c7d2_allowance.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 02:29:00" (1/1) ...
[2020-11-25 02:29:00,760 INFO  L185        PluginConnector]: Executing the observer BoogieSymbolTableConstructor from plugin Boogie Preprocessor for "OMToken_0x2baEcDf43734F22FD5c152DB08E3C27233F0c7d2_allowance.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 02:29:00" (1/1) ...
[2020-11-25 02:29:00,779 INFO  L132        PluginConnector]: ------------------------ END Boogie Preprocessor----------------------------
[2020-11-25 02:29:00,780 INFO  L113        PluginConnector]: ------------------------UtopiaSpecLang----------------------------
[2020-11-25 02:29:00,780 INFO  L271        PluginConnector]: Initializing UtopiaSpecLang...
[2020-11-25 02:29:00,782 INFO  L276        PluginConnector]: UtopiaSpecLang initialized
[2020-11-25 02:29:00,786 INFO  L185        PluginConnector]: Executing the observer UtopiaSpecLangObserver from plugin UtopiaSpecLang for "OMToken_0x2baEcDf43734F22FD5c152DB08E3C27233F0c7d2_allowance.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 02:29:00" (1/1) ...
[2020-11-25 02:29:00,809 INFO  L1012  opiaSpecLangObserver]: Parsing LTLPlus Formula to AstNode: [](started(ERC20.allowance(owner, spender), _allowed_ERC20[this][owner][spender] >= 0 && _allowed_ERC20[this][owner][spender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(finished(ERC20.allowance(owner, spender), return == _allowed_ERC20[this][owner][spender] &&  _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this]) && _balances_ERC20[this] == old(_balances_ERC20[this]) && _allowed_ERC20[this] == old(_allowed_ERC20[this]) && _minters_MinterRole[this] == old(_minters_MinterRole[this]) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this]) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this]) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]) && _paused_Pausable[this] == old(_paused_Pausable[this]) && _pausers_PauserRole[this] == old(_pausers_PauserRole[this]))))
[2020-11-25 02:29:00,815 INFO  L1016  opiaSpecLangObserver]: Successfully lexed: [](started(ERC20.allowance(owner, spender), _allowed_ERC20[this][owner][spender] >= 0 && _allowed_ERC20[this][owner][spender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(finished(ERC20.allowance(owner, spender), return == _allowed_ERC20[this][owner][spender] &&  _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this]) && _balances_ERC20[this] == old(_balances_ERC20[this]) && _allowed_ERC20[this] == old(_allowed_ERC20[this]) && _minters_MinterRole[this] == old(_minters_MinterRole[this]) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this]) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this]) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]) && _paused_Pausable[this] == old(_paused_Pausable[this]) && _pausers_PauserRole[this] == old(_pausers_PauserRole[this]))))
[2020-11-25 02:29:00,822 INFO  L1018  opiaSpecLangObserver]: Successfully parsed: [](started(ERC20.allowance(owner, spender), _allowed_ERC20[this][owner][spender] >= 0 && _allowed_ERC20[this][owner][spender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(finished(ERC20.allowance(owner, spender), return == _allowed_ERC20[this][owner][spender] &&  _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this]) && _balances_ERC20[this] == old(_balances_ERC20[this]) && _allowed_ERC20[this] == old(_allowed_ERC20[this]) && _minters_MinterRole[this] == old(_minters_MinterRole[this]) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this]) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this]) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]) && _paused_Pausable[this] == old(_paused_Pausable[this]) && _pausers_PauserRole[this] == old(_pausers_PauserRole[this]))))
[2020-11-25 02:29:00,828 INFO  L636   opiaSpecLangObserver]: Parsed ( _allowed_ERC20[this][owner_s247][spender_s247]>=0 && _allowed_ERC20[this][owner_s247][spender_s247]<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) to BinaryExpression[LOGICAND,BinaryExpression[COMPGEQ,ArrayAccessExpression[ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_allowed_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,allowance~address~address_ERC20>]]],[IdentifierExpression[owner_s247,<IMPLEMENTATION_INPARAM,allowance~address~address_ERC20>]]],[IdentifierExpression[spender_s247,<IMPLEMENTATION_INPARAM,allowance~address~address_ERC20>]]],IntegerLiteral[0]],BinaryExpression[COMPLT,ArrayAccessExpression[ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_allowed_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,allowance~address~address_ERC20>]]],[IdentifierExpression[owner_s247,<IMPLEMENTATION_INPARAM,allowance~address~address_ERC20>]]],[IdentifierExpression[spender_s247,<IMPLEMENTATION_INPARAM,allowance~address~address_ERC20>]]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]]
[2020-11-25 02:29:00,832 INFO  L636   opiaSpecLangObserver]: Parsed ( ( ( ( ( ( ( ( ( __ret_0_==_allowed_ERC20[this][owner_s247][spender_s247] && _totalSupply_ERC20[this]==( old(_totalSupply_ERC20[this]) ) ) && _balances_ERC20[this]==( old(_balances_ERC20[this]) ) ) && _allowed_ERC20[this]==( old(_allowed_ERC20[this]) ) ) && _minters_MinterRole[this]==( old(_minters_MinterRole[this]) ) ) && _name_ERC20Detailed[this]==( old(_name_ERC20Detailed[this]) ) ) && _symbol_ERC20Detailed[this]==( old(_symbol_ERC20Detailed[this]) ) ) && _decimals_ERC20Detailed[this]==( old(_decimals_ERC20Detailed[this]) ) ) && _paused_Pausable[this]==( old(_paused_Pausable[this]) ) ) && _pausers_PauserRole[this]==( old(_pausers_PauserRole[this]) ) ) to BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[COMPEQ,IdentifierExpression[__ret_0_,<IMPLEMENTATION_OUTPARAM,allowance~address~address_ERC20>],ArrayAccessExpression[ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_allowed_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,allowance~address~address_ERC20>]]],[IdentifierExpression[owner_s247,<IMPLEMENTATION_INPARAM,allowance~address~address_ERC20>]]],[IdentifierExpression[spender_s247,<IMPLEMENTATION_INPARAM,allowance~address~address_ERC20>]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[_totalSupply_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,allowance~address~address_ERC20>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[_totalSupply_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,allowance~address~address_ERC20>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[_balances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,allowance~address~address_ERC20>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[_balances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,allowance~address~address_ERC20>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[_allowed_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,allowance~address~address_ERC20>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[_allowed_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,allowance~address~address_ERC20>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[_minters_MinterRole,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,allowance~address~address_ERC20>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[_minters_MinterRole,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,allowance~address~address_ERC20>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[_name_ERC20Detailed,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,allowance~address~address_ERC20>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[_name_ERC20Detailed,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,allowance~address~address_ERC20>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[_symbol_ERC20Detailed,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,allowance~address~address_ERC20>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[_symbol_ERC20Detailed,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,allowance~address~address_ERC20>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[_decimals_ERC20Detailed,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,allowance~address~address_ERC20>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[_decimals_ERC20Detailed,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,allowance~address~address_ERC20>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[_paused_Pausable,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,allowance~address~address_ERC20>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[_paused_Pausable,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,allowance~address~address_ERC20>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[_pausers_PauserRole,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,allowance~address~address_ERC20>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[_pausers_PauserRole,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,allowance~address~address_ERC20>]]]]]]
[2020-11-25 02:29:00,841 INFO  L1005  opiaSpecLangObserver]: Compiling: [](started(ERC20.allowance(owner, spender), _allowed_ERC20[this][owner][spender] >= 0 && _allowed_ERC20[this][owner][spender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(finished(ERC20.allowance(owner, spender), return == _allowed_ERC20[this][owner][spender] &&  _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this]) && _balances_ERC20[this] == old(_balances_ERC20[this]) && _allowed_ERC20[this] == old(_allowed_ERC20[this]) && _minters_MinterRole[this] == old(_minters_MinterRole[this]) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this]) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this]) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]) && _paused_Pausable[this] == old(_paused_Pausable[this]) && _pausers_PauserRole[this] == old(_pausers_PauserRole[this]))))
[2020-11-25 02:29:00,842 INFO  L1007  opiaSpecLangObserver]: Compiled to ( []( AP(call_allowance_ERC200) ==> ( <>AP(success_allowance_ERC200) ) ) )
Executed UtopiaSpecLang
[2020-11-25 02:29:00,860 INFO  L202        PluginConnector]: Adding new model Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 02:29:00 PropertyContainer
[2020-11-25 02:29:00,860 INFO  L132        PluginConnector]: ------------------------ END UtopiaSpecLang----------------------------
[2020-11-25 02:29:00,861 INFO  L113        PluginConnector]: ------------------------Boogie Printer----------------------------
[2020-11-25 02:29:00,861 INFO  L271        PluginConnector]: Initializing Boogie Printer...
[2020-11-25 02:29:00,861 INFO  L276        PluginConnector]: Boogie Printer initialized
[2020-11-25 02:29:00,862 INFO  L185        PluginConnector]: Executing the observer BoogiePrinterObserver from plugin Boogie Printer for "OMToken_0x2baEcDf43734F22FD5c152DB08E3C27233F0c7d2_allowance.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 02:29:00" (1/2) ...
[2020-11-25 02:29:00,862 INFO  L116   oogiePrinterObserver]: File already exists and will be overwritten: /tmp/boogiePrinter.bpl
[2020-11-25 02:29:00,863 INFO  L120   oogiePrinterObserver]: Writing to file /tmp/boogiePrinter.bpl
[2020-11-25 02:29:00,887 INFO  L185        PluginConnector]: Executing the observer BoogiePrinterObserver from plugin Boogie Printer for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 02:29:00" (2/2) ...
[2020-11-25 02:29:00,887 INFO  L132        PluginConnector]: ------------------------ END Boogie Printer----------------------------
[2020-11-25 02:29:00,888 INFO  L113        PluginConnector]: ------------------------RCFGBuilder----------------------------
[2020-11-25 02:29:00,888 INFO  L271        PluginConnector]: Initializing RCFGBuilder...
[2020-11-25 02:29:00,888 INFO  L276        PluginConnector]: RCFGBuilder initialized
[2020-11-25 02:29:00,889 INFO  L185        PluginConnector]: Executing the observer RCFGBuilderObserver from plugin RCFGBuilder for "OMToken_0x2baEcDf43734F22FD5c152DB08E3C27233F0c7d2_allowance.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 02:29:00" (1/2) ...
[2020-11-25 02:29:00,942 INFO  L130     BoogieDeclarations]: Found specification of procedure FreshRefGenerator__success
[2020-11-25 02:29:00,942 INFO  L130     BoogieDeclarations]: Found specification of procedure Roles.Role_ctor__success
[2020-11-25 02:29:00,942 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20_NoBaseCtor__success
[2020-11-25 02:29:00,942 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20
[2020-11-25 02:29:00,943 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20
[2020-11-25 02:29:00,943 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_IERC20
[2020-11-25 02:29:00,943 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_IERC20
[2020-11-25 02:29:00,943 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_IERC20
[2020-11-25 02:29:00,943 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_IERC20
[2020-11-25 02:29:00,943 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_IERC20
[2020-11-25 02:29:00,943 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_IERC20
[2020-11-25 02:29:00,943 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath_NoBaseCtor__success
[2020-11-25 02:29:00,943 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath
[2020-11-25 02:29:00,944 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath
[2020-11-25 02:29:00,944 INFO  L130     BoogieDeclarations]: Found specification of procedure mul~uint256~uint256_SafeMath__success
[2020-11-25 02:29:00,944 INFO  L130     BoogieDeclarations]: Found specification of procedure div~uint256~uint256_SafeMath__success
[2020-11-25 02:29:00,944 INFO  L130     BoogieDeclarations]: Found specification of procedure sub~uint256~uint256_SafeMath__success
[2020-11-25 02:29:00,944 INFO  L130     BoogieDeclarations]: Found specification of procedure add~uint256~uint256_SafeMath__success
[2020-11-25 02:29:00,944 INFO  L130     BoogieDeclarations]: Found specification of procedure mod~uint256~uint256_SafeMath__success
[2020-11-25 02:29:00,944 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20_NoBaseCtor__success
[2020-11-25 02:29:00,945 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20
[2020-11-25 02:29:00,945 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20
[2020-11-25 02:29:00,945 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_ERC20
[2020-11-25 02:29:00,945 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_ERC20
[2020-11-25 02:29:00,945 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_ERC20
[2020-11-25 02:29:00,945 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_ERC20
[2020-11-25 02:29:00,945 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_ERC20
[2020-11-25 02:29:00,945 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_ERC20
[2020-11-25 02:29:00,945 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_ERC20
[2020-11-25 02:29:00,945 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_ERC20
[2020-11-25 02:29:00,946 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_ERC20
[2020-11-25 02:29:00,946 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_ERC20
[2020-11-25 02:29:00,946 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_ERC20
[2020-11-25 02:29:00,946 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_ERC20
[2020-11-25 02:29:00,946 INFO  L130     BoogieDeclarations]: Found specification of procedure increaseAllowance~address~uint256_ERC20
[2020-11-25 02:29:00,946 INFO  L138     BoogieDeclarations]: Found implementation of procedure increaseAllowance~address~uint256_ERC20
[2020-11-25 02:29:00,946 INFO  L130     BoogieDeclarations]: Found specification of procedure decreaseAllowance~address~uint256_ERC20
[2020-11-25 02:29:00,946 INFO  L138     BoogieDeclarations]: Found implementation of procedure decreaseAllowance~address~uint256_ERC20
[2020-11-25 02:29:00,946 INFO  L130     BoogieDeclarations]: Found specification of procedure _transfer~address~address~uint256_ERC20__success
[2020-11-25 02:29:00,946 INFO  L130     BoogieDeclarations]: Found specification of procedure _mint~address~uint256_ERC20__success
[2020-11-25 02:29:00,947 INFO  L130     BoogieDeclarations]: Found specification of procedure _burn~address~uint256_ERC20__success
[2020-11-25 02:29:00,947 INFO  L130     BoogieDeclarations]: Found specification of procedure _burnFrom~address~uint256_ERC20__success
[2020-11-25 02:29:00,947 INFO  L130     BoogieDeclarations]: Found specification of procedure Roles_Roles_NoBaseCtor__success
[2020-11-25 02:29:00,947 INFO  L130     BoogieDeclarations]: Found specification of procedure Roles_Roles
[2020-11-25 02:29:00,947 INFO  L138     BoogieDeclarations]: Found implementation of procedure Roles_Roles
[2020-11-25 02:29:00,948 INFO  L130     BoogieDeclarations]: Found specification of procedure add~Role~address_Roles__success
[2020-11-25 02:29:00,948 INFO  L130     BoogieDeclarations]: Found specification of procedure remove~Role~address_Roles__success
[2020-11-25 02:29:00,948 INFO  L130     BoogieDeclarations]: Found specification of procedure has~Role~address_Roles__success
[2020-11-25 02:29:00,949 INFO  L130     BoogieDeclarations]: Found specification of procedure PauserRole_PauserRole_NoBaseCtor__success
[2020-11-25 02:29:00,949 INFO  L130     BoogieDeclarations]: Found specification of procedure PauserRole_PauserRole
[2020-11-25 02:29:00,949 INFO  L138     BoogieDeclarations]: Found implementation of procedure PauserRole_PauserRole
[2020-11-25 02:29:00,949 INFO  L130     BoogieDeclarations]: Found specification of procedure isPauser~address_PauserRole
[2020-11-25 02:29:00,949 INFO  L138     BoogieDeclarations]: Found implementation of procedure isPauser~address_PauserRole
[2020-11-25 02:29:00,950 INFO  L130     BoogieDeclarations]: Found specification of procedure addPauser~address_PauserRole
[2020-11-25 02:29:00,950 INFO  L138     BoogieDeclarations]: Found implementation of procedure addPauser~address_PauserRole
[2020-11-25 02:29:00,950 INFO  L130     BoogieDeclarations]: Found specification of procedure renouncePauser_PauserRole
[2020-11-25 02:29:00,950 INFO  L138     BoogieDeclarations]: Found implementation of procedure renouncePauser_PauserRole
[2020-11-25 02:29:00,951 INFO  L130     BoogieDeclarations]: Found specification of procedure _addPauser~address_PauserRole__success
[2020-11-25 02:29:00,951 INFO  L130     BoogieDeclarations]: Found specification of procedure _removePauser~address_PauserRole__success
[2020-11-25 02:29:00,951 INFO  L130     BoogieDeclarations]: Found specification of procedure Pausable_Pausable_NoBaseCtor__success
[2020-11-25 02:29:00,951 INFO  L130     BoogieDeclarations]: Found specification of procedure Pausable_Pausable
[2020-11-25 02:29:00,952 INFO  L138     BoogieDeclarations]: Found implementation of procedure Pausable_Pausable
[2020-11-25 02:29:00,952 INFO  L130     BoogieDeclarations]: Found specification of procedure paused_Pausable
[2020-11-25 02:29:00,952 INFO  L138     BoogieDeclarations]: Found implementation of procedure paused_Pausable
[2020-11-25 02:29:00,952 INFO  L130     BoogieDeclarations]: Found specification of procedure pause_Pausable
[2020-11-25 02:29:00,952 INFO  L138     BoogieDeclarations]: Found implementation of procedure pause_Pausable
[2020-11-25 02:29:00,953 INFO  L130     BoogieDeclarations]: Found specification of procedure unpause_Pausable
[2020-11-25 02:29:00,953 INFO  L138     BoogieDeclarations]: Found implementation of procedure unpause_Pausable
[2020-11-25 02:29:00,953 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Pausable_ERC20Pausable_NoBaseCtor__success
[2020-11-25 02:29:00,953 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Pausable_ERC20Pausable
[2020-11-25 02:29:00,954 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Pausable_ERC20Pausable
[2020-11-25 02:29:00,954 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_ERC20Pausable
[2020-11-25 02:29:00,954 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_ERC20Pausable
[2020-11-25 02:29:00,954 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_ERC20Pausable
[2020-11-25 02:29:00,955 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_ERC20Pausable
[2020-11-25 02:29:00,955 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_ERC20Pausable
[2020-11-25 02:29:00,955 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_ERC20Pausable
[2020-11-25 02:29:00,955 INFO  L130     BoogieDeclarations]: Found specification of procedure increaseAllowance~address~uint256_ERC20Pausable
[2020-11-25 02:29:00,956 INFO  L138     BoogieDeclarations]: Found implementation of procedure increaseAllowance~address~uint256_ERC20Pausable
[2020-11-25 02:29:00,956 INFO  L130     BoogieDeclarations]: Found specification of procedure decreaseAllowance~address~uint256_ERC20Pausable
[2020-11-25 02:29:00,956 INFO  L138     BoogieDeclarations]: Found implementation of procedure decreaseAllowance~address~uint256_ERC20Pausable
[2020-11-25 02:29:00,956 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Detailed_ERC20Detailed_NoBaseCtor__success
[2020-11-25 02:29:00,957 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Detailed_ERC20Detailed
[2020-11-25 02:29:00,957 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Detailed_ERC20Detailed
[2020-11-25 02:29:00,957 INFO  L130     BoogieDeclarations]: Found specification of procedure name_ERC20Detailed
[2020-11-25 02:29:00,957 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_ERC20Detailed
[2020-11-25 02:29:00,957 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_ERC20Detailed
[2020-11-25 02:29:00,958 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_ERC20Detailed
[2020-11-25 02:29:00,958 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_ERC20Detailed
[2020-11-25 02:29:00,958 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_ERC20Detailed
[2020-11-25 02:29:00,958 INFO  L130     BoogieDeclarations]: Found specification of procedure MinterRole_MinterRole_NoBaseCtor__success
[2020-11-25 02:29:00,958 INFO  L130     BoogieDeclarations]: Found specification of procedure MinterRole_MinterRole
[2020-11-25 02:29:00,959 INFO  L138     BoogieDeclarations]: Found implementation of procedure MinterRole_MinterRole
[2020-11-25 02:29:00,959 INFO  L130     BoogieDeclarations]: Found specification of procedure isMinter~address_MinterRole
[2020-11-25 02:29:00,959 INFO  L138     BoogieDeclarations]: Found implementation of procedure isMinter~address_MinterRole
[2020-11-25 02:29:00,959 INFO  L130     BoogieDeclarations]: Found specification of procedure addMinter~address_MinterRole
[2020-11-25 02:29:00,960 INFO  L138     BoogieDeclarations]: Found implementation of procedure addMinter~address_MinterRole
[2020-11-25 02:29:00,960 INFO  L130     BoogieDeclarations]: Found specification of procedure renounceMinter_MinterRole
[2020-11-25 02:29:00,960 INFO  L138     BoogieDeclarations]: Found implementation of procedure renounceMinter_MinterRole
[2020-11-25 02:29:00,960 INFO  L130     BoogieDeclarations]: Found specification of procedure _addMinter~address_MinterRole__success
[2020-11-25 02:29:00,960 INFO  L130     BoogieDeclarations]: Found specification of procedure _removeMinter~address_MinterRole__success
[2020-11-25 02:29:00,960 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Mintable_ERC20Mintable_NoBaseCtor__success
[2020-11-25 02:29:00,960 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Mintable_ERC20Mintable
[2020-11-25 02:29:00,960 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Mintable_ERC20Mintable
[2020-11-25 02:29:00,960 INFO  L130     BoogieDeclarations]: Found specification of procedure mint~address~uint256_ERC20Mintable
[2020-11-25 02:29:00,961 INFO  L138     BoogieDeclarations]: Found implementation of procedure mint~address~uint256_ERC20Mintable
[2020-11-25 02:29:00,961 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Burnable_ERC20Burnable_NoBaseCtor__success
[2020-11-25 02:29:00,961 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Burnable_ERC20Burnable
[2020-11-25 02:29:00,961 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Burnable_ERC20Burnable
[2020-11-25 02:29:00,961 INFO  L130     BoogieDeclarations]: Found specification of procedure burn~uint256_ERC20Burnable
[2020-11-25 02:29:00,961 INFO  L138     BoogieDeclarations]: Found implementation of procedure burn~uint256_ERC20Burnable
[2020-11-25 02:29:00,961 INFO  L130     BoogieDeclarations]: Found specification of procedure burnFrom~address~uint256_ERC20Burnable
[2020-11-25 02:29:00,961 INFO  L138     BoogieDeclarations]: Found implementation of procedure burnFrom~address~uint256_ERC20Burnable
[2020-11-25 02:29:00,961 INFO  L130     BoogieDeclarations]: Found specification of procedure OMToken_OMToken_NoBaseCtor__success
[2020-11-25 02:29:00,962 INFO  L130     BoogieDeclarations]: Found specification of procedure OMToken_OMToken
[2020-11-25 02:29:00,962 INFO  L138     BoogieDeclarations]: Found implementation of procedure OMToken_OMToken
[2020-11-25 02:29:00,962 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackDispatch__success
[2020-11-25 02:29:00,962 INFO  L130     BoogieDeclarations]: Found specification of procedure Fallback_UnknownType__success
[2020-11-25 02:29:00,962 INFO  L130     BoogieDeclarations]: Found specification of procedure send__success
[2020-11-25 02:29:00,962 INFO  L130     BoogieDeclarations]: Found specification of procedure onlyPauser_pre__success
[2020-11-25 02:29:00,962 INFO  L130     BoogieDeclarations]: Found specification of procedure whenNotPaused_pre__success
[2020-11-25 02:29:00,962 INFO  L130     BoogieDeclarations]: Found specification of procedure whenPaused_pre__success
[2020-11-25 02:29:00,962 INFO  L130     BoogieDeclarations]: Found specification of procedure onlyMinter_pre__success
[2020-11-25 02:29:00,962 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_IERC20
[2020-11-25 02:29:00,962 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_IERC20
[2020-11-25 02:29:00,963 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_SafeMath
[2020-11-25 02:29:00,963 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_SafeMath
[2020-11-25 02:29:00,963 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_ERC20
[2020-11-25 02:29:00,963 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_ERC20
[2020-11-25 02:29:00,963 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_Roles
[2020-11-25 02:29:00,963 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_Roles
[2020-11-25 02:29:00,963 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_PauserRole
[2020-11-25 02:29:00,963 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_PauserRole
[2020-11-25 02:29:00,963 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_Pausable
[2020-11-25 02:29:00,964 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_Pausable
[2020-11-25 02:29:00,964 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_ERC20Pausable
[2020-11-25 02:29:00,964 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_ERC20Pausable
[2020-11-25 02:29:00,964 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_ERC20Detailed
[2020-11-25 02:29:00,964 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_ERC20Detailed
[2020-11-25 02:29:00,964 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_MinterRole
[2020-11-25 02:29:00,964 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_MinterRole
[2020-11-25 02:29:00,964 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_ERC20Mintable
[2020-11-25 02:29:00,964 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_ERC20Mintable
[2020-11-25 02:29:00,964 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_ERC20Burnable
[2020-11-25 02:29:00,965 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_ERC20Burnable
[2020-11-25 02:29:00,965 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_OMToken
[2020-11-25 02:29:00,965 INFO  L130     BoogieDeclarations]: Found specification of procedure main
[2020-11-25 02:29:00,965 INFO  L130     BoogieDeclarations]: Found specification of procedure FreshRefGenerator__fail
[2020-11-25 02:29:00,965 INFO  L130     BoogieDeclarations]: Found specification of procedure Roles.Role_ctor__fail
[2020-11-25 02:29:00,965 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20_NoBaseCtor__fail
[2020-11-25 02:29:00,965 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20__success
[2020-11-25 02:29:00,965 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20__fail
[2020-11-25 02:29:00,965 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath_NoBaseCtor__fail
[2020-11-25 02:29:00,966 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath__success
[2020-11-25 02:29:00,966 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath__fail
[2020-11-25 02:29:00,966 INFO  L130     BoogieDeclarations]: Found specification of procedure mul~uint256~uint256_SafeMath__fail
[2020-11-25 02:29:00,966 INFO  L130     BoogieDeclarations]: Found specification of procedure div~uint256~uint256_SafeMath__fail
[2020-11-25 02:29:00,966 INFO  L130     BoogieDeclarations]: Found specification of procedure sub~uint256~uint256_SafeMath__fail
[2020-11-25 02:29:00,966 INFO  L130     BoogieDeclarations]: Found specification of procedure add~uint256~uint256_SafeMath__fail
[2020-11-25 02:29:00,966 INFO  L130     BoogieDeclarations]: Found specification of procedure mod~uint256~uint256_SafeMath__fail
[2020-11-25 02:29:00,966 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20_NoBaseCtor__fail
[2020-11-25 02:29:00,966 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20__success
[2020-11-25 02:29:00,966 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20__fail
[2020-11-25 02:29:00,966 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_ERC20__success
[2020-11-25 02:29:00,967 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_ERC20__fail
[2020-11-25 02:29:00,967 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_ERC20__success
[2020-11-25 02:29:00,967 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_ERC20__fail
[2020-11-25 02:29:00,967 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_ERC20__success
[2020-11-25 02:29:00,967 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_ERC20__fail
[2020-11-25 02:29:00,967 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_ERC20__success
[2020-11-25 02:29:00,967 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_ERC20__fail
[2020-11-25 02:29:00,967 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_ERC20__success
[2020-11-25 02:29:00,967 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_ERC20__fail
[2020-11-25 02:29:00,967 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_ERC20__success
[2020-11-25 02:29:00,967 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_ERC20__fail
[2020-11-25 02:29:00,968 INFO  L130     BoogieDeclarations]: Found specification of procedure increaseAllowance~address~uint256_ERC20__success
[2020-11-25 02:29:00,968 INFO  L130     BoogieDeclarations]: Found specification of procedure increaseAllowance~address~uint256_ERC20__fail
[2020-11-25 02:29:00,968 INFO  L130     BoogieDeclarations]: Found specification of procedure decreaseAllowance~address~uint256_ERC20__success
[2020-11-25 02:29:00,968 INFO  L130     BoogieDeclarations]: Found specification of procedure decreaseAllowance~address~uint256_ERC20__fail
[2020-11-25 02:29:00,968 INFO  L130     BoogieDeclarations]: Found specification of procedure _transfer~address~address~uint256_ERC20__fail
[2020-11-25 02:29:00,968 INFO  L130     BoogieDeclarations]: Found specification of procedure _mint~address~uint256_ERC20__fail
[2020-11-25 02:29:00,968 INFO  L130     BoogieDeclarations]: Found specification of procedure _burn~address~uint256_ERC20__fail
[2020-11-25 02:29:00,968 INFO  L130     BoogieDeclarations]: Found specification of procedure _burnFrom~address~uint256_ERC20__fail
[2020-11-25 02:29:00,968 INFO  L130     BoogieDeclarations]: Found specification of procedure Roles_Roles_NoBaseCtor__fail
[2020-11-25 02:29:00,968 INFO  L130     BoogieDeclarations]: Found specification of procedure Roles_Roles__success
[2020-11-25 02:29:00,968 INFO  L130     BoogieDeclarations]: Found specification of procedure Roles_Roles__fail
[2020-11-25 02:29:00,968 INFO  L130     BoogieDeclarations]: Found specification of procedure add~Role~address_Roles__fail
[2020-11-25 02:29:00,969 INFO  L130     BoogieDeclarations]: Found specification of procedure remove~Role~address_Roles__fail
[2020-11-25 02:29:00,969 INFO  L130     BoogieDeclarations]: Found specification of procedure has~Role~address_Roles__fail
[2020-11-25 02:29:00,969 INFO  L130     BoogieDeclarations]: Found specification of procedure PauserRole_PauserRole_NoBaseCtor__fail
[2020-11-25 02:29:00,969 INFO  L130     BoogieDeclarations]: Found specification of procedure PauserRole_PauserRole__success
[2020-11-25 02:29:00,969 INFO  L130     BoogieDeclarations]: Found specification of procedure PauserRole_PauserRole__fail
[2020-11-25 02:29:00,969 INFO  L130     BoogieDeclarations]: Found specification of procedure isPauser~address_PauserRole__success
[2020-11-25 02:29:00,969 INFO  L130     BoogieDeclarations]: Found specification of procedure isPauser~address_PauserRole__fail
[2020-11-25 02:29:00,969 INFO  L130     BoogieDeclarations]: Found specification of procedure addPauser~address_PauserRole__success
[2020-11-25 02:29:00,969 INFO  L130     BoogieDeclarations]: Found specification of procedure addPauser~address_PauserRole__fail
[2020-11-25 02:29:00,969 INFO  L130     BoogieDeclarations]: Found specification of procedure renouncePauser_PauserRole__success
[2020-11-25 02:29:00,969 INFO  L130     BoogieDeclarations]: Found specification of procedure renouncePauser_PauserRole__fail
[2020-11-25 02:29:00,969 INFO  L130     BoogieDeclarations]: Found specification of procedure _addPauser~address_PauserRole__fail
[2020-11-25 02:29:00,970 INFO  L130     BoogieDeclarations]: Found specification of procedure _removePauser~address_PauserRole__fail
[2020-11-25 02:29:00,970 INFO  L130     BoogieDeclarations]: Found specification of procedure Pausable_Pausable_NoBaseCtor__fail
[2020-11-25 02:29:00,970 INFO  L130     BoogieDeclarations]: Found specification of procedure Pausable_Pausable__success
[2020-11-25 02:29:00,970 INFO  L130     BoogieDeclarations]: Found specification of procedure Pausable_Pausable__fail
[2020-11-25 02:29:00,970 INFO  L130     BoogieDeclarations]: Found specification of procedure paused_Pausable__success
[2020-11-25 02:29:00,970 INFO  L130     BoogieDeclarations]: Found specification of procedure paused_Pausable__fail
[2020-11-25 02:29:00,970 INFO  L130     BoogieDeclarations]: Found specification of procedure pause_Pausable__success
[2020-11-25 02:29:00,970 INFO  L130     BoogieDeclarations]: Found specification of procedure pause_Pausable__fail
[2020-11-25 02:29:00,970 INFO  L130     BoogieDeclarations]: Found specification of procedure unpause_Pausable__success
[2020-11-25 02:29:00,970 INFO  L130     BoogieDeclarations]: Found specification of procedure unpause_Pausable__fail
[2020-11-25 02:29:00,970 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Pausable_ERC20Pausable_NoBaseCtor__fail
[2020-11-25 02:29:00,970 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Pausable_ERC20Pausable__success
[2020-11-25 02:29:00,971 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Pausable_ERC20Pausable__fail
[2020-11-25 02:29:00,971 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_ERC20Pausable__success
[2020-11-25 02:29:00,971 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_ERC20Pausable__fail
[2020-11-25 02:29:00,971 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_ERC20Pausable__success
[2020-11-25 02:29:00,971 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_ERC20Pausable__fail
[2020-11-25 02:29:00,971 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_ERC20Pausable__success
[2020-11-25 02:29:00,971 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_ERC20Pausable__fail
[2020-11-25 02:29:00,971 INFO  L130     BoogieDeclarations]: Found specification of procedure increaseAllowance~address~uint256_ERC20Pausable__success
[2020-11-25 02:29:00,971 INFO  L130     BoogieDeclarations]: Found specification of procedure increaseAllowance~address~uint256_ERC20Pausable__fail
[2020-11-25 02:29:00,971 INFO  L130     BoogieDeclarations]: Found specification of procedure decreaseAllowance~address~uint256_ERC20Pausable__success
[2020-11-25 02:29:00,971 INFO  L130     BoogieDeclarations]: Found specification of procedure decreaseAllowance~address~uint256_ERC20Pausable__fail
[2020-11-25 02:29:00,971 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Detailed_ERC20Detailed_NoBaseCtor__fail
[2020-11-25 02:29:00,972 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Detailed_ERC20Detailed__success
[2020-11-25 02:29:00,972 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Detailed_ERC20Detailed__fail
[2020-11-25 02:29:00,972 INFO  L130     BoogieDeclarations]: Found specification of procedure name_ERC20Detailed__success
[2020-11-25 02:29:00,972 INFO  L130     BoogieDeclarations]: Found specification of procedure name_ERC20Detailed__fail
[2020-11-25 02:29:00,972 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_ERC20Detailed__success
[2020-11-25 02:29:00,972 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_ERC20Detailed__fail
[2020-11-25 02:29:00,972 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_ERC20Detailed__success
[2020-11-25 02:29:00,972 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_ERC20Detailed__fail
[2020-11-25 02:29:00,972 INFO  L130     BoogieDeclarations]: Found specification of procedure MinterRole_MinterRole_NoBaseCtor__fail
[2020-11-25 02:29:00,972 INFO  L130     BoogieDeclarations]: Found specification of procedure MinterRole_MinterRole__success
[2020-11-25 02:29:00,972 INFO  L130     BoogieDeclarations]: Found specification of procedure MinterRole_MinterRole__fail
[2020-11-25 02:29:00,973 INFO  L130     BoogieDeclarations]: Found specification of procedure isMinter~address_MinterRole__success
[2020-11-25 02:29:00,973 INFO  L130     BoogieDeclarations]: Found specification of procedure isMinter~address_MinterRole__fail
[2020-11-25 02:29:00,973 INFO  L130     BoogieDeclarations]: Found specification of procedure addMinter~address_MinterRole__success
[2020-11-25 02:29:00,973 INFO  L130     BoogieDeclarations]: Found specification of procedure addMinter~address_MinterRole__fail
[2020-11-25 02:29:00,973 INFO  L130     BoogieDeclarations]: Found specification of procedure renounceMinter_MinterRole__success
[2020-11-25 02:29:00,973 INFO  L130     BoogieDeclarations]: Found specification of procedure renounceMinter_MinterRole__fail
[2020-11-25 02:29:00,973 INFO  L130     BoogieDeclarations]: Found specification of procedure _addMinter~address_MinterRole__fail
[2020-11-25 02:29:00,973 INFO  L130     BoogieDeclarations]: Found specification of procedure _removeMinter~address_MinterRole__fail
[2020-11-25 02:29:00,973 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Mintable_ERC20Mintable_NoBaseCtor__fail
[2020-11-25 02:29:00,973 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Mintable_ERC20Mintable__success
[2020-11-25 02:29:00,973 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Mintable_ERC20Mintable__fail
[2020-11-25 02:29:00,973 INFO  L130     BoogieDeclarations]: Found specification of procedure mint~address~uint256_ERC20Mintable__success
[2020-11-25 02:29:00,973 INFO  L130     BoogieDeclarations]: Found specification of procedure mint~address~uint256_ERC20Mintable__fail
[2020-11-25 02:29:00,974 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Burnable_ERC20Burnable_NoBaseCtor__fail
[2020-11-25 02:29:00,974 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Burnable_ERC20Burnable__success
[2020-11-25 02:29:00,974 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Burnable_ERC20Burnable__fail
[2020-11-25 02:29:00,974 INFO  L130     BoogieDeclarations]: Found specification of procedure burn~uint256_ERC20Burnable__success
[2020-11-25 02:29:00,974 INFO  L130     BoogieDeclarations]: Found specification of procedure burn~uint256_ERC20Burnable__fail
[2020-11-25 02:29:00,974 INFO  L130     BoogieDeclarations]: Found specification of procedure burnFrom~address~uint256_ERC20Burnable__success
[2020-11-25 02:29:00,974 INFO  L130     BoogieDeclarations]: Found specification of procedure burnFrom~address~uint256_ERC20Burnable__fail
[2020-11-25 02:29:00,974 INFO  L130     BoogieDeclarations]: Found specification of procedure OMToken_OMToken_NoBaseCtor__fail
[2020-11-25 02:29:00,974 INFO  L130     BoogieDeclarations]: Found specification of procedure OMToken_OMToken__success
[2020-11-25 02:29:00,974 INFO  L130     BoogieDeclarations]: Found specification of procedure OMToken_OMToken__fail
[2020-11-25 02:29:00,974 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackDispatch__fail
[2020-11-25 02:29:00,974 INFO  L130     BoogieDeclarations]: Found specification of procedure Fallback_UnknownType__fail
[2020-11-25 02:29:00,975 INFO  L130     BoogieDeclarations]: Found specification of procedure send__fail
[2020-11-25 02:29:00,975 INFO  L130     BoogieDeclarations]: Found specification of procedure onlyPauser_pre__fail
[2020-11-25 02:29:00,975 INFO  L130     BoogieDeclarations]: Found specification of procedure whenNotPaused_pre__fail
[2020-11-25 02:29:00,975 INFO  L130     BoogieDeclarations]: Found specification of procedure whenPaused_pre__fail
[2020-11-25 02:29:00,975 INFO  L130     BoogieDeclarations]: Found specification of procedure onlyMinter_pre__fail
[2020-11-25 02:29:00,975 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreshRefGenerator__fail
[2020-11-25 02:29:00,975 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreshRefGenerator__success
[2020-11-25 02:29:00,975 INFO  L138     BoogieDeclarations]: Found implementation of procedure Roles.Role_ctor__fail
[2020-11-25 02:29:00,975 INFO  L138     BoogieDeclarations]: Found implementation of procedure Roles.Role_ctor__success
[2020-11-25 02:29:00,975 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20_NoBaseCtor__fail
[2020-11-25 02:29:00,975 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20_NoBaseCtor__success
[2020-11-25 02:29:00,975 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20__fail
[2020-11-25 02:29:00,976 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20__success
[2020-11-25 02:29:00,976 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath_NoBaseCtor__fail
[2020-11-25 02:29:00,976 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath_NoBaseCtor__success
[2020-11-25 02:29:00,976 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath__fail
[2020-11-25 02:29:00,976 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath__success
[2020-11-25 02:29:00,976 INFO  L138     BoogieDeclarations]: Found implementation of procedure mul~uint256~uint256_SafeMath__fail
[2020-11-25 02:29:00,976 INFO  L138     BoogieDeclarations]: Found implementation of procedure mul~uint256~uint256_SafeMath__success
[2020-11-25 02:29:00,976 INFO  L138     BoogieDeclarations]: Found implementation of procedure div~uint256~uint256_SafeMath__fail
[2020-11-25 02:29:00,976 INFO  L138     BoogieDeclarations]: Found implementation of procedure div~uint256~uint256_SafeMath__success
[2020-11-25 02:29:00,976 INFO  L138     BoogieDeclarations]: Found implementation of procedure sub~uint256~uint256_SafeMath__fail
[2020-11-25 02:29:00,976 INFO  L138     BoogieDeclarations]: Found implementation of procedure sub~uint256~uint256_SafeMath__success
[2020-11-25 02:29:00,977 INFO  L138     BoogieDeclarations]: Found implementation of procedure add~uint256~uint256_SafeMath__fail
[2020-11-25 02:29:00,977 INFO  L138     BoogieDeclarations]: Found implementation of procedure add~uint256~uint256_SafeMath__success
[2020-11-25 02:29:00,977 INFO  L138     BoogieDeclarations]: Found implementation of procedure mod~uint256~uint256_SafeMath__fail
[2020-11-25 02:29:00,977 INFO  L138     BoogieDeclarations]: Found implementation of procedure mod~uint256~uint256_SafeMath__success
[2020-11-25 02:29:00,977 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20_NoBaseCtor__fail
[2020-11-25 02:29:00,977 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20_NoBaseCtor__success
[2020-11-25 02:29:00,977 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20__fail
[2020-11-25 02:29:00,977 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20__success
[2020-11-25 02:29:00,977 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_ERC20__fail
[2020-11-25 02:29:00,977 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_ERC20__success
[2020-11-25 02:29:00,977 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_ERC20__fail
[2020-11-25 02:29:00,977 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_ERC20__success
[2020-11-25 02:29:00,978 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_ERC20__fail
[2020-11-25 02:29:00,978 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_ERC20__success
[2020-11-25 02:29:00,978 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_ERC20__fail
[2020-11-25 02:29:00,978 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_ERC20__success
[2020-11-25 02:29:00,978 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_ERC20__fail
[2020-11-25 02:29:00,978 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_ERC20__success
[2020-11-25 02:29:00,978 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_ERC20__fail
[2020-11-25 02:29:00,978 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_ERC20__success
[2020-11-25 02:29:00,978 INFO  L138     BoogieDeclarations]: Found implementation of procedure increaseAllowance~address~uint256_ERC20__fail
[2020-11-25 02:29:00,978 INFO  L138     BoogieDeclarations]: Found implementation of procedure increaseAllowance~address~uint256_ERC20__success
[2020-11-25 02:29:00,978 INFO  L138     BoogieDeclarations]: Found implementation of procedure decreaseAllowance~address~uint256_ERC20__fail
[2020-11-25 02:29:00,979 INFO  L138     BoogieDeclarations]: Found implementation of procedure decreaseAllowance~address~uint256_ERC20__success
[2020-11-25 02:29:00,979 INFO  L138     BoogieDeclarations]: Found implementation of procedure _transfer~address~address~uint256_ERC20__fail
[2020-11-25 02:29:00,979 INFO  L138     BoogieDeclarations]: Found implementation of procedure _transfer~address~address~uint256_ERC20__success
[2020-11-25 02:29:00,979 INFO  L138     BoogieDeclarations]: Found implementation of procedure _mint~address~uint256_ERC20__fail
[2020-11-25 02:29:00,979 INFO  L138     BoogieDeclarations]: Found implementation of procedure _mint~address~uint256_ERC20__success
[2020-11-25 02:29:00,979 INFO  L138     BoogieDeclarations]: Found implementation of procedure _burn~address~uint256_ERC20__fail
[2020-11-25 02:29:00,979 INFO  L138     BoogieDeclarations]: Found implementation of procedure _burn~address~uint256_ERC20__success
[2020-11-25 02:29:00,979 INFO  L138     BoogieDeclarations]: Found implementation of procedure _burnFrom~address~uint256_ERC20__fail
[2020-11-25 02:29:00,979 INFO  L138     BoogieDeclarations]: Found implementation of procedure _burnFrom~address~uint256_ERC20__success
[2020-11-25 02:29:00,979 INFO  L138     BoogieDeclarations]: Found implementation of procedure Roles_Roles_NoBaseCtor__fail
[2020-11-25 02:29:00,979 INFO  L138     BoogieDeclarations]: Found implementation of procedure Roles_Roles_NoBaseCtor__success
[2020-11-25 02:29:00,979 INFO  L138     BoogieDeclarations]: Found implementation of procedure Roles_Roles__fail
[2020-11-25 02:29:00,980 INFO  L138     BoogieDeclarations]: Found implementation of procedure Roles_Roles__success
[2020-11-25 02:29:00,980 INFO  L138     BoogieDeclarations]: Found implementation of procedure add~Role~address_Roles__fail
[2020-11-25 02:29:00,980 INFO  L138     BoogieDeclarations]: Found implementation of procedure add~Role~address_Roles__success
[2020-11-25 02:29:00,980 INFO  L138     BoogieDeclarations]: Found implementation of procedure remove~Role~address_Roles__fail
[2020-11-25 02:29:00,980 INFO  L138     BoogieDeclarations]: Found implementation of procedure remove~Role~address_Roles__success
[2020-11-25 02:29:00,980 INFO  L138     BoogieDeclarations]: Found implementation of procedure has~Role~address_Roles__fail
[2020-11-25 02:29:00,980 INFO  L138     BoogieDeclarations]: Found implementation of procedure has~Role~address_Roles__success
[2020-11-25 02:29:00,980 INFO  L138     BoogieDeclarations]: Found implementation of procedure PauserRole_PauserRole_NoBaseCtor__fail
[2020-11-25 02:29:00,980 INFO  L138     BoogieDeclarations]: Found implementation of procedure PauserRole_PauserRole_NoBaseCtor__success
[2020-11-25 02:29:00,980 INFO  L138     BoogieDeclarations]: Found implementation of procedure PauserRole_PauserRole__fail
[2020-11-25 02:29:00,980 INFO  L138     BoogieDeclarations]: Found implementation of procedure PauserRole_PauserRole__success
[2020-11-25 02:29:00,980 INFO  L138     BoogieDeclarations]: Found implementation of procedure isPauser~address_PauserRole__fail
[2020-11-25 02:29:00,981 INFO  L138     BoogieDeclarations]: Found implementation of procedure isPauser~address_PauserRole__success
[2020-11-25 02:29:00,981 INFO  L138     BoogieDeclarations]: Found implementation of procedure addPauser~address_PauserRole__fail
[2020-11-25 02:29:00,981 INFO  L138     BoogieDeclarations]: Found implementation of procedure addPauser~address_PauserRole__success
[2020-11-25 02:29:00,981 INFO  L138     BoogieDeclarations]: Found implementation of procedure renouncePauser_PauserRole__fail
[2020-11-25 02:29:00,981 INFO  L138     BoogieDeclarations]: Found implementation of procedure renouncePauser_PauserRole__success
[2020-11-25 02:29:00,981 INFO  L138     BoogieDeclarations]: Found implementation of procedure _addPauser~address_PauserRole__fail
[2020-11-25 02:29:00,981 INFO  L138     BoogieDeclarations]: Found implementation of procedure _addPauser~address_PauserRole__success
[2020-11-25 02:29:00,981 INFO  L138     BoogieDeclarations]: Found implementation of procedure _removePauser~address_PauserRole__fail
[2020-11-25 02:29:00,981 INFO  L138     BoogieDeclarations]: Found implementation of procedure _removePauser~address_PauserRole__success
[2020-11-25 02:29:00,981 INFO  L138     BoogieDeclarations]: Found implementation of procedure Pausable_Pausable_NoBaseCtor__fail
[2020-11-25 02:29:00,981 INFO  L138     BoogieDeclarations]: Found implementation of procedure Pausable_Pausable_NoBaseCtor__success
[2020-11-25 02:29:00,981 INFO  L138     BoogieDeclarations]: Found implementation of procedure Pausable_Pausable__fail
[2020-11-25 02:29:00,981 INFO  L138     BoogieDeclarations]: Found implementation of procedure Pausable_Pausable__success
[2020-11-25 02:29:00,982 INFO  L138     BoogieDeclarations]: Found implementation of procedure paused_Pausable__fail
[2020-11-25 02:29:00,982 INFO  L138     BoogieDeclarations]: Found implementation of procedure paused_Pausable__success
[2020-11-25 02:29:00,982 INFO  L138     BoogieDeclarations]: Found implementation of procedure pause_Pausable__fail
[2020-11-25 02:29:00,982 INFO  L138     BoogieDeclarations]: Found implementation of procedure pause_Pausable__success
[2020-11-25 02:29:00,982 INFO  L138     BoogieDeclarations]: Found implementation of procedure unpause_Pausable__fail
[2020-11-25 02:29:00,982 INFO  L138     BoogieDeclarations]: Found implementation of procedure unpause_Pausable__success
[2020-11-25 02:29:00,982 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Pausable_ERC20Pausable_NoBaseCtor__fail
[2020-11-25 02:29:00,982 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Pausable_ERC20Pausable_NoBaseCtor__success
[2020-11-25 02:29:00,982 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Pausable_ERC20Pausable__fail
[2020-11-25 02:29:00,982 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Pausable_ERC20Pausable__success
[2020-11-25 02:29:00,982 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_ERC20Pausable__fail
[2020-11-25 02:29:00,982 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_ERC20Pausable__success
[2020-11-25 02:29:00,982 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_ERC20Pausable__fail
[2020-11-25 02:29:00,983 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_ERC20Pausable__success
[2020-11-25 02:29:00,983 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_ERC20Pausable__fail
[2020-11-25 02:29:00,983 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_ERC20Pausable__success
[2020-11-25 02:29:00,983 INFO  L138     BoogieDeclarations]: Found implementation of procedure increaseAllowance~address~uint256_ERC20Pausable__fail
[2020-11-25 02:29:00,983 INFO  L138     BoogieDeclarations]: Found implementation of procedure increaseAllowance~address~uint256_ERC20Pausable__success
[2020-11-25 02:29:00,983 INFO  L138     BoogieDeclarations]: Found implementation of procedure decreaseAllowance~address~uint256_ERC20Pausable__fail
[2020-11-25 02:29:00,983 INFO  L138     BoogieDeclarations]: Found implementation of procedure decreaseAllowance~address~uint256_ERC20Pausable__success
[2020-11-25 02:29:00,983 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Detailed_ERC20Detailed_NoBaseCtor__fail
[2020-11-25 02:29:00,983 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Detailed_ERC20Detailed_NoBaseCtor__success
[2020-11-25 02:29:00,983 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Detailed_ERC20Detailed__fail
[2020-11-25 02:29:00,983 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Detailed_ERC20Detailed__success
[2020-11-25 02:29:00,983 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_ERC20Detailed__fail
[2020-11-25 02:29:00,984 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_ERC20Detailed__success
[2020-11-25 02:29:00,984 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_ERC20Detailed__fail
[2020-11-25 02:29:00,984 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_ERC20Detailed__success
[2020-11-25 02:29:00,984 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_ERC20Detailed__fail
[2020-11-25 02:29:00,984 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_ERC20Detailed__success
[2020-11-25 02:29:00,984 INFO  L138     BoogieDeclarations]: Found implementation of procedure MinterRole_MinterRole_NoBaseCtor__fail
[2020-11-25 02:29:00,984 INFO  L138     BoogieDeclarations]: Found implementation of procedure MinterRole_MinterRole_NoBaseCtor__success
[2020-11-25 02:29:00,984 INFO  L138     BoogieDeclarations]: Found implementation of procedure MinterRole_MinterRole__fail
[2020-11-25 02:29:00,984 INFO  L138     BoogieDeclarations]: Found implementation of procedure MinterRole_MinterRole__success
[2020-11-25 02:29:00,984 INFO  L138     BoogieDeclarations]: Found implementation of procedure isMinter~address_MinterRole__fail
[2020-11-25 02:29:00,984 INFO  L138     BoogieDeclarations]: Found implementation of procedure isMinter~address_MinterRole__success
[2020-11-25 02:29:00,984 INFO  L138     BoogieDeclarations]: Found implementation of procedure addMinter~address_MinterRole__fail
[2020-11-25 02:29:00,984 INFO  L138     BoogieDeclarations]: Found implementation of procedure addMinter~address_MinterRole__success
[2020-11-25 02:29:00,985 INFO  L138     BoogieDeclarations]: Found implementation of procedure renounceMinter_MinterRole__fail
[2020-11-25 02:29:00,985 INFO  L138     BoogieDeclarations]: Found implementation of procedure renounceMinter_MinterRole__success
[2020-11-25 02:29:00,985 INFO  L138     BoogieDeclarations]: Found implementation of procedure _addMinter~address_MinterRole__fail
[2020-11-25 02:29:00,985 INFO  L138     BoogieDeclarations]: Found implementation of procedure _addMinter~address_MinterRole__success
[2020-11-25 02:29:00,985 INFO  L138     BoogieDeclarations]: Found implementation of procedure _removeMinter~address_MinterRole__fail
[2020-11-25 02:29:00,985 INFO  L138     BoogieDeclarations]: Found implementation of procedure _removeMinter~address_MinterRole__success
[2020-11-25 02:29:00,985 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Mintable_ERC20Mintable_NoBaseCtor__fail
[2020-11-25 02:29:00,985 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Mintable_ERC20Mintable_NoBaseCtor__success
[2020-11-25 02:29:00,985 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Mintable_ERC20Mintable__fail
[2020-11-25 02:29:00,985 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Mintable_ERC20Mintable__success
[2020-11-25 02:29:00,985 INFO  L138     BoogieDeclarations]: Found implementation of procedure mint~address~uint256_ERC20Mintable__fail
[2020-11-25 02:29:00,985 INFO  L138     BoogieDeclarations]: Found implementation of procedure mint~address~uint256_ERC20Mintable__success
[2020-11-25 02:29:00,985 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Burnable_ERC20Burnable_NoBaseCtor__fail
[2020-11-25 02:29:00,986 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Burnable_ERC20Burnable_NoBaseCtor__success
[2020-11-25 02:29:00,986 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Burnable_ERC20Burnable__fail
[2020-11-25 02:29:00,986 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Burnable_ERC20Burnable__success
[2020-11-25 02:29:00,986 INFO  L138     BoogieDeclarations]: Found implementation of procedure burn~uint256_ERC20Burnable__fail
[2020-11-25 02:29:00,986 INFO  L138     BoogieDeclarations]: Found implementation of procedure burn~uint256_ERC20Burnable__success
[2020-11-25 02:29:00,986 INFO  L138     BoogieDeclarations]: Found implementation of procedure burnFrom~address~uint256_ERC20Burnable__fail
[2020-11-25 02:29:00,986 INFO  L138     BoogieDeclarations]: Found implementation of procedure burnFrom~address~uint256_ERC20Burnable__success
[2020-11-25 02:29:00,986 INFO  L138     BoogieDeclarations]: Found implementation of procedure OMToken_OMToken_NoBaseCtor__fail
[2020-11-25 02:29:00,986 INFO  L138     BoogieDeclarations]: Found implementation of procedure OMToken_OMToken_NoBaseCtor__success
[2020-11-25 02:29:00,986 INFO  L138     BoogieDeclarations]: Found implementation of procedure OMToken_OMToken__fail
[2020-11-25 02:29:00,986 INFO  L138     BoogieDeclarations]: Found implementation of procedure OMToken_OMToken__success
[2020-11-25 02:29:00,986 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackDispatch__fail
[2020-11-25 02:29:00,986 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackDispatch__success
[2020-11-25 02:29:00,987 INFO  L138     BoogieDeclarations]: Found implementation of procedure Fallback_UnknownType__fail
[2020-11-25 02:29:00,987 INFO  L138     BoogieDeclarations]: Found implementation of procedure Fallback_UnknownType__success
[2020-11-25 02:29:00,987 INFO  L138     BoogieDeclarations]: Found implementation of procedure send__fail
[2020-11-25 02:29:00,987 INFO  L138     BoogieDeclarations]: Found implementation of procedure send__success
[2020-11-25 02:29:00,987 INFO  L138     BoogieDeclarations]: Found implementation of procedure onlyPauser_pre__fail
[2020-11-25 02:29:00,987 INFO  L138     BoogieDeclarations]: Found implementation of procedure onlyPauser_pre__success
[2020-11-25 02:29:00,987 INFO  L138     BoogieDeclarations]: Found implementation of procedure whenNotPaused_pre__fail
[2020-11-25 02:29:00,987 INFO  L138     BoogieDeclarations]: Found implementation of procedure whenNotPaused_pre__success
[2020-11-25 02:29:00,987 INFO  L138     BoogieDeclarations]: Found implementation of procedure whenPaused_pre__fail
[2020-11-25 02:29:00,987 INFO  L138     BoogieDeclarations]: Found implementation of procedure whenPaused_pre__success
[2020-11-25 02:29:00,987 INFO  L138     BoogieDeclarations]: Found implementation of procedure onlyMinter_pre__fail
[2020-11-25 02:29:00,987 INFO  L138     BoogieDeclarations]: Found implementation of procedure onlyMinter_pre__success
[2020-11-25 02:29:00,987 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_IERC20
[2020-11-25 02:29:00,988 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_IERC20
[2020-11-25 02:29:00,988 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_SafeMath
[2020-11-25 02:29:00,988 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_SafeMath
[2020-11-25 02:29:00,988 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_ERC20
[2020-11-25 02:29:00,988 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_ERC20
[2020-11-25 02:29:00,988 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_Roles
[2020-11-25 02:29:00,988 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_Roles
[2020-11-25 02:29:00,988 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_PauserRole
[2020-11-25 02:29:00,988 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_PauserRole
[2020-11-25 02:29:00,988 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_Pausable
[2020-11-25 02:29:00,988 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_Pausable
[2020-11-25 02:29:00,988 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_ERC20Pausable
[2020-11-25 02:29:00,988 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_ERC20Pausable
[2020-11-25 02:29:00,989 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_ERC20Detailed
[2020-11-25 02:29:00,989 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_ERC20Detailed
[2020-11-25 02:29:00,989 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_MinterRole
[2020-11-25 02:29:00,989 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_MinterRole
[2020-11-25 02:29:00,989 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_ERC20Mintable
[2020-11-25 02:29:00,989 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_ERC20Mintable
[2020-11-25 02:29:00,989 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_ERC20Burnable
[2020-11-25 02:29:00,989 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_ERC20Burnable
[2020-11-25 02:29:00,989 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_OMToken
[2020-11-25 02:29:00,989 INFO  L138     BoogieDeclarations]: Found implementation of procedure main
[2020-11-25 02:29:00,989 INFO  L130     BoogieDeclarations]: Found specification of procedure ULTIMATE.start
[2020-11-25 02:29:00,989 INFO  L138     BoogieDeclarations]: Found implementation of procedure ULTIMATE.start
[2020-11-25 02:29:02,000 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 02:29:02,001 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 02:29:02,001 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 02:29:02,260 INFO  L281             CfgBuilder]: Using the 1 location(s) as analysis (start of procedure ULTIMATE.start)
[2020-11-25 02:29:02,260 INFO  L286             CfgBuilder]: Removed 12 assue(true) statements.
[2020-11-25 02:29:02,262 INFO  L202        PluginConnector]: Adding new model OMToken_0x2baEcDf43734F22FD5c152DB08E3C27233F0c7d2_allowance.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 02:29:02 BoogieIcfgContainer
[2020-11-25 02:29:02,262 INFO  L185        PluginConnector]: Executing the observer RCFGBuilderObserver from plugin RCFGBuilder for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 02:29:00" (2/2) ...
[2020-11-25 02:29:02,262 INFO  L85     RCFGBuilderObserver]: No WrapperNode. Let Ultimate process with next node
[2020-11-25 02:29:02,262 INFO  L205        PluginConnector]: Invalid model from RCFGBuilder for observer de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder.RCFGBuilderObserver@9cd7ee and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 02:29:02, skipping insertion in model container
[2020-11-25 02:29:02,263 INFO  L132        PluginConnector]: ------------------------ END RCFGBuilder----------------------------
[2020-11-25 02:29:02,263 INFO  L113        PluginConnector]: ------------------------UtopiaLTL2Aut----------------------------
[2020-11-25 02:29:02,263 INFO  L271        PluginConnector]: Initializing UtopiaLTL2Aut...
[2020-11-25 02:29:02,264 INFO  L276        PluginConnector]: UtopiaLTL2Aut initialized
[2020-11-25 02:29:02,264 INFO  L185        PluginConnector]: Executing the observer UtopiaLTL2AutObserver from plugin UtopiaLTL2Aut for "OMToken_0x2baEcDf43734F22FD5c152DB08E3C27233F0c7d2_allowance.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 02:29:00" (1/3) ...
[2020-11-25 02:29:02,264 INFO  L205        PluginConnector]: Invalid model from UtopiaLTL2Aut for observer edu.utexas.cs.utopia.ltl2aut.UtopiaLTL2AutObserver@594ea49c and model type Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 02:29:02, skipping insertion in model container
[2020-11-25 02:29:02,264 INFO  L185        PluginConnector]: Executing the observer UtopiaLTL2AutObserver from plugin UtopiaLTL2Aut for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 02:29:00" (2/3) ...
No working directory specified, using /mnt/data0/jon/SmartPulseTool/ltl2ba
Starting monitored process 1 with /mnt/data0/jon/SmartPulseTool/ltl2ba -f ! ( ( [] ( a -> ( <>b ) ) ) )  (exit command is null, workingDir is null)
[2020-11-25 02:29:02,293 INFO  L202        PluginConnector]: Adding new model Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 02:29:02 NWAContainer
[2020-11-25 02:29:02,294 INFO  L132        PluginConnector]: ------------------------ END UtopiaLTL2Aut----------------------------
[2020-11-25 02:29:02,294 INFO  L113        PluginConnector]: ------------------------BÃ¼chi Program Product----------------------------
[2020-11-25 02:29:02,294 INFO  L271        PluginConnector]: Initializing BÃ¼chi Program Product...
[2020-11-25 02:29:02,295 INFO  L276        PluginConnector]: BÃ¼chi Program Product initialized
[2020-11-25 02:29:02,297 INFO  L185        PluginConnector]: Executing the observer BuchiProductObserver from plugin BÃ¼chi Program Product for "OMToken_0x2baEcDf43734F22FD5c152DB08E3C27233F0c7d2_allowance.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 02:29:02" (3/4) ...
[2020-11-25 02:29:02,298 INFO  L205        PluginConnector]: Invalid model from BÃ¼chi Program Product for observer de.uni_freiburg.informatik.ultimate.buchiprogramproduct.BuchiProductObserver@5a815058 and model type LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 02:29:02, skipping insertion in model container
[2020-11-25 02:29:02,298 INFO  L185        PluginConnector]: Executing the observer BuchiProductObserver from plugin BÃ¼chi Program Product for "Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 02:29:02" (4/4) ...
[2020-11-25 02:29:02,303 INFO  L104   BuchiProductObserver]: Initial property automaton 2 locations, 3 edges
[2020-11-25 02:29:02,316 INFO  L110   BuchiProductObserver]: Initial RCFG 3603 locations, 5216 edges
[2020-11-25 02:29:02,316 INFO  L93    BuchiProductObserver]: Beginning generation of product automaton
[2020-11-25 02:29:02,330 INFO  L136       ProductGenerator]: The program has no step specification, so we assume maximum atomicity
[2020-11-25 02:29:05,487 INFO  L97    BuchiProductObserver]: Finished generation of product automaton successfully
[2020-11-25 02:29:05,505 INFO  L110   BuchiProductObserver]: BuchiProgram size 9262 locations, 17155 edges
[2020-11-25 02:29:05,505 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 02:29:05 BoogieIcfgContainer
[2020-11-25 02:29:05,505 INFO  L132        PluginConnector]: ------------------------ END BÃ¼chi Program Product----------------------------
[2020-11-25 02:29:05,506 INFO  L113        PluginConnector]: ------------------------BlockEncodingV2----------------------------
[2020-11-25 02:29:05,506 INFO  L271        PluginConnector]: Initializing BlockEncodingV2...
[2020-11-25 02:29:05,507 INFO  L276        PluginConnector]: BlockEncodingV2 initialized
[2020-11-25 02:29:05,508 INFO  L185        PluginConnector]: Executing the observer BlockEncodingObserver from plugin BlockEncodingV2 for "LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 02:29:05" (1/1) ...
[2020-11-25 02:29:05,693 INFO  L313           BlockEncoder]: Initial Icfg 9262 locations, 17155 edges
[2020-11-25 02:29:05,694 INFO  L258           BlockEncoder]: Using Remove infeasible edges
[2020-11-25 02:29:05,694 INFO  L270           BlockEncoder]: Using Minimize states even if more edges are added than removed.=true
[2020-11-25 02:29:05,694 INFO  L296           BlockEncoder]: Using Remove sink states
[2020-11-25 02:29:05,695 INFO  L171           BlockEncoder]: Using Apply optimizations until nothing changes=true
[2020-11-25 02:29:05,713 INFO  L70    emoveInfeasibleEdges]: Removed 234 edges and 27 locations because of local infeasibility
[2020-11-25 02:29:05,732 INFO  L70        RemoveSinkStates]: Removed 116 edges and 77 locations by removing sink states
[2020-11-25 02:29:05,754 INFO  L70    emoveInfeasibleEdges]: Removed 0 edges and 0 locations because of local infeasibility
[2020-11-25 02:29:05,760 INFO  L70        RemoveSinkStates]: Removed 0 edges and 0 locations by removing sink states
[2020-11-25 02:29:05,765 INFO  L237           BlockEncoder]: Using Create parallel compositions if possible
[2020-11-25 02:29:05,765 INFO  L66        ParallelComposer]: Creating parallel compositions
[2020-11-25 02:29:05,770 INFO  L313           BlockEncoder]: Encoded RCFG 9106 locations, 16728 edges
[2020-11-25 02:29:05,771 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.blockencoding CFG 25.11 02:29:05 BasicIcfg
[2020-11-25 02:29:05,771 INFO  L132        PluginConnector]: ------------------------ END BlockEncodingV2----------------------------
[2020-11-25 02:29:05,771 INFO  L113        PluginConnector]: ------------------------BuchiAutomizer----------------------------
[2020-11-25 02:29:05,771 INFO  L271        PluginConnector]: Initializing BuchiAutomizer...
[2020-11-25 02:29:05,773 INFO  L276        PluginConnector]: BuchiAutomizer initialized
[2020-11-25 02:29:05,773 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 02:29:05,773 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "OMToken_0x2baEcDf43734F22FD5c152DB08E3C27233F0c7d2_allowance.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 02:29:00" (1/6) ...
[2020-11-25 02:29:05,774 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@66684253 and model type OMToken_0x2baEcDf43734F22FD5c152DB08E3C27233F0c7d2_allowance.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 02:29:05, skipping insertion in model container
[2020-11-25 02:29:05,775 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 02:29:05,775 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 02:29:00" (2/6) ...
[2020-11-25 02:29:05,775 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@66684253 and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 02:29:05, skipping insertion in model container
[2020-11-25 02:29:05,775 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 02:29:05,775 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "OMToken_0x2baEcDf43734F22FD5c152DB08E3C27233F0c7d2_allowance.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 02:29:02" (3/6) ...
[2020-11-25 02:29:05,775 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@66684253 and model type OMToken_0x2baEcDf43734F22FD5c152DB08E3C27233F0c7d2_allowance.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer CFG 25.11 02:29:05, skipping insertion in model container
[2020-11-25 02:29:05,775 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 02:29:05,775 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 02:29:02" (4/6) ...
[2020-11-25 02:29:05,775 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@66684253 and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 02:29:05, skipping insertion in model container
[2020-11-25 02:29:05,775 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 02:29:05,775 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 02:29:05" (5/6) ...
[2020-11-25 02:29:05,776 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@66684253 and model type LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer OTHER 25.11 02:29:05, skipping insertion in model container
[2020-11-25 02:29:05,776 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 02:29:05,776 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.blockencoding CFG 25.11 02:29:05" (6/6) ...
[2020-11-25 02:29:05,777 INFO  L404   chiAutomizerObserver]: Analyzing ICFG OMToken_0x2baEcDf43734F22FD5c152DB08E3C27233F0c7d2_allowance.bpl_BEv2
[2020-11-25 02:29:05,810 INFO  L133   ementStrategyFactory]: Using default assertion order modulation
[2020-11-25 02:29:05,811 INFO  L377         BuchiCegarLoop]: Interprodecural is true
[2020-11-25 02:29:05,811 INFO  L378         BuchiCegarLoop]: Hoare is false
[2020-11-25 02:29:05,811 INFO  L379         BuchiCegarLoop]: Compute interpolants for Craig_TreeInterpolation
[2020-11-25 02:29:05,811 INFO  L380         BuchiCegarLoop]: Backedges is STRAIGHT_LINE
[2020-11-25 02:29:05,811 INFO  L381         BuchiCegarLoop]: Determinization is PREDICATE_ABSTRACTION
[2020-11-25 02:29:05,811 INFO  L382         BuchiCegarLoop]: Difference is false
[2020-11-25 02:29:05,811 INFO  L383         BuchiCegarLoop]: Minimize is MINIMIZE_SEVPA
[2020-11-25 02:29:05,811 INFO  L386         BuchiCegarLoop]: ======== Iteration 0==of CEGAR loop == BuchiCegarLoop========
[2020-11-25 02:29:05,881 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 9106 states.
[2020-11-25 02:29:05,964 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 02:29:05,964 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 02:29:05,964 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 02:29:05,974 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 02:29:05,974 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 02:29:05,974 INFO  L445         BuchiCegarLoop]: ======== Iteration 1============
[2020-11-25 02:29:05,974 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 9106 states.
[2020-11-25 02:29:06,015 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 02:29:06,015 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 02:29:06,015 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 02:29:06,018 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 02:29:06,018 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_allowance_ERC200 := false;
[L2]                 call_allowance_ERC200 := false;
[L2]     CALL        call main();
[L9913]              assume null == 0;
[L9914]  CALL        call this := FreshRefGenerator__success();
[L3962]              havoc newRef;
[L3963]              assume Alloc[newRef] == false;
[L3964]              Alloc[newRef] := true;
[L3965]              assume newRef != null;
[L9914]  RET         call this := FreshRefGenerator__success();
[L9915]              assume now >= 0;
[L9916]              assume DType[this] == OMToken;
[L9917]              assume msgvalue_MSG == 0;
[L9918]              gas := gas - 53000;
[L9919]  CALL        call OMToken_OMToken(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L2714]              havoc __exception;
[L2715]              revert := false;
[L2716]  COND FALSE  !(__exception)
[L2743]  CALL        call OMToken_OMToken__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L6180]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4004]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3989]              assume msgsender_MSG != null;
[L3990]              Balance[this] := 0;
[L4004]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  COND FALSE  !(revert)
[L6180]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6181]  COND TRUE   revert
[L2743]  RET         call OMToken_OMToken__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L2744]              assume !revert && gas >= 0;
[L9919]  RET         call OMToken_OMToken(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L9920]              assume !revert && gas >= 0;

Loop:
[L9923]  CALL        call CorralChoice_OMToken(this);
[L9689]              havoc msgsender_MSG;
[L9690]              havoc msgvalue_MSG;
[L9691]              havoc choice;
[L9692]              havoc to_s916;
[L9693]              havoc value_s916;
[L9694]              havoc __ret_0_transfer;
[L9695]              havoc spender_s955;
[L9696]              havoc value_s955;
[L9697]              havoc __ret_0_approve;
[L9698]              havoc from_s937;
[L9699]              havoc to_s937;
[L9700]              havoc value_s937;
[L9701]              havoc __ret_0_transferFrom;
[L9702]              havoc __ret_0_totalSupply;
[L9703]              havoc owner_s231;
[L9704]              havoc __ret_0_balanceOf;
[L9705]              havoc owner_s247;
[L9706]              havoc spender_s247;
[L9707]              havoc __ret_0_allowance;
[L9708]              havoc spender_s973;
[L9709]              havoc addedValue_s973;
[L9710]              havoc success_s973;
[L9711]              havoc spender_s991;
[L9712]              havoc subtractedValue_s991;
[L9713]              havoc success_s991;
[L9714]              havoc account_s760;
[L9715]              havoc __ret_0_isPauser;
[L9716]              havoc account_s772;
[L9717]              havoc __ret_0_paused;
[L9718]              havoc name_s1022;
[L9719]              havoc symbol_s1022;
[L9720]              havoc decimals_s1022;
[L9721]              havoc __ret_0_name;
[L9722]              havoc __ret_0_symbol;
[L9723]              havoc __ret_0_decimals;
[L9724]              havoc account_s1093;
[L9725]              havoc __ret_0_isMinter;
[L9726]              havoc account_s1105;
[L9727]              havoc to_s1170;
[L9728]              havoc value_s1170;
[L9729]              havoc __ret_0_mint;
[L9730]              havoc value_s1185;
[L9731]              havoc from_s1198;
[L9732]              havoc value_s1198;
[L9733]              havoc name_s1230;
[L9734]              havoc symbol_s1230;
[L9735]              havoc decimals_s1230;
[L9736]              havoc tmpNow;
[L9737]              havoc gas;
[L9738]              assume gas > 4000000 && gas <= 8000000;
[L9739]              tmpNow := now;
[L9740]              havoc now;
[L9741]              assume now > tmpNow;
[L9742]              assume msgsender_MSG != null;
[L9743]              assume DType[msgsender_MSG] != IERC20;
[L9744]              assume DType[msgsender_MSG] != SafeMath;
[L9745]              assume DType[msgsender_MSG] != ERC20;
[L9746]              assume DType[msgsender_MSG] != Roles;
[L9747]              assume DType[msgsender_MSG] != PauserRole;
[L9748]              assume DType[msgsender_MSG] != Pausable;
[L9749]              assume DType[msgsender_MSG] != ERC20Pausable;
[L9750]              assume DType[msgsender_MSG] != ERC20Detailed;
[L9751]              assume DType[msgsender_MSG] != MinterRole;
[L9752]              assume DType[msgsender_MSG] != ERC20Mintable;
[L9753]              assume DType[msgsender_MSG] != ERC20Burnable;
[L9754]              assume DType[msgsender_MSG] != OMToken;
[L9755]              Alloc[msgsender_MSG] := true;
[L9756]  COND TRUE   choice == 23
[L9757]              gas := gas - 21000;
[L9758]  COND FALSE  !(gas >= 0)
[L9923]  RET         call CorralChoice_OMToken(this);

[2020-11-25 02:29:06,036 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 02:29:06,036 INFO  L82        PathProgramCache]: Analyzing trace with hash -1949974034, now seen corresponding path program 1 times
[2020-11-25 02:29:06,042 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 02:29:06,063 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 02:29:06,107 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 02:29:06,109 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 02:29:06,109 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [4] imperfect sequences [] total 4
[2020-11-25 02:29:06,475 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 02:29:06,486 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-11-25 02:29:06,487 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=5, Invalid=7, Unknown=0, NotChecked=0, Total=12
[2020-11-25 02:29:06,488 INFO  L87              Difference]: Start difference. First operand 9106 states. Second operand 4 states.
[2020-11-25 02:29:07,397 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 02:29:07,397 INFO  L93              Difference]: Finished difference Result 5019 states and 6071 transitions.
[2020-11-25 02:29:07,397 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 4 states. 
[2020-11-25 02:29:07,398 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 5019 states and 6071 transitions.
[2020-11-25 02:29:07,425 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 02:29:07,457 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 5019 states to 5019 states and 6071 transitions.
[2020-11-25 02:29:07,458 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 4
[2020-11-25 02:29:07,461 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 950
[2020-11-25 02:29:07,461 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 5019 states and 6071 transitions.
[2020-11-25 02:29:07,473 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 02:29:07,473 INFO  L728         BuchiCegarLoop]: Abstraction has 5019 states and 6071 transitions.
[2020-11-25 02:29:07,490 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 5019 states and 6071 transitions.
[2020-11-25 02:29:07,554 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 5019 to 5019.
[2020-11-25 02:29:07,555 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 5019 states.
[2020-11-25 02:29:07,562 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 5019 states to 5019 states and 6071 transitions.
[2020-11-25 02:29:07,563 INFO  L751         BuchiCegarLoop]: Abstraction has 5019 states and 6071 transitions.
[2020-11-25 02:29:07,563 INFO  L631         BuchiCegarLoop]: Abstraction has 5019 states and 6071 transitions.
[2020-11-25 02:29:07,563 INFO  L445         BuchiCegarLoop]: ======== Iteration 2============
[2020-11-25 02:29:07,563 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 5019 states and 6071 transitions.
[2020-11-25 02:29:07,574 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 02:29:07,574 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 02:29:07,574 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 02:29:07,576 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 02:29:07,576 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_allowance_ERC200 := false;
[L2]                 call_allowance_ERC200 := false;
[L2]     CALL        call main();
[L9913]              assume null == 0;
[L9914]  CALL        call this := FreshRefGenerator__success();
[L3962]              havoc newRef;
[L3963]              assume Alloc[newRef] == false;
[L3964]              Alloc[newRef] := true;
[L3965]              assume newRef != null;
[L9914]  RET         call this := FreshRefGenerator__success();
[L9915]              assume now >= 0;
[L9916]              assume DType[this] == OMToken;
[L9917]              assume msgvalue_MSG == 0;
[L9918]              gas := gas - 53000;
[L9919]  CALL        call OMToken_OMToken(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L2714]              havoc __exception;
[L2715]              revert := false;
[L2716]  COND FALSE  !(__exception)
[L2743]  CALL        call OMToken_OMToken__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L6180]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4004]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3989]              assume msgsender_MSG != null;
[L3990]              Balance[this] := 0;
[L4004]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  COND FALSE  !(revert)
[L6180]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6181]  COND TRUE   revert
[L2743]  RET         call OMToken_OMToken__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L2744]              assume !revert && gas >= 0;
[L9919]  RET         call OMToken_OMToken(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L9920]              assume !revert && gas >= 0;
[L9923]  CALL        call CorralChoice_OMToken(this);
[L9689]              havoc msgsender_MSG;
[L9690]              havoc msgvalue_MSG;
[L9691]              havoc choice;
[L9692]              havoc to_s916;
[L9693]              havoc value_s916;
[L9694]              havoc __ret_0_transfer;
[L9695]              havoc spender_s955;
[L9696]              havoc value_s955;
[L9697]              havoc __ret_0_approve;
[L9698]              havoc from_s937;
[L9699]              havoc to_s937;
[L9700]              havoc value_s937;
[L9701]              havoc __ret_0_transferFrom;
[L9702]              havoc __ret_0_totalSupply;
[L9703]              havoc owner_s231;
[L9704]              havoc __ret_0_balanceOf;
[L9705]              havoc owner_s247;
[L9706]              havoc spender_s247;
[L9707]              havoc __ret_0_allowance;
[L9708]              havoc spender_s973;
[L9709]              havoc addedValue_s973;
[L9710]              havoc success_s973;
[L9711]              havoc spender_s991;
[L9712]              havoc subtractedValue_s991;
[L9713]              havoc success_s991;
[L9714]              havoc account_s760;
[L9715]              havoc __ret_0_isPauser;
[L9716]              havoc account_s772;
[L9717]              havoc __ret_0_paused;
[L9718]              havoc name_s1022;
[L9719]              havoc symbol_s1022;
[L9720]              havoc decimals_s1022;
[L9721]              havoc __ret_0_name;
[L9722]              havoc __ret_0_symbol;
[L9723]              havoc __ret_0_decimals;
[L9724]              havoc account_s1093;
[L9725]              havoc __ret_0_isMinter;
[L9726]              havoc account_s1105;
[L9727]              havoc to_s1170;
[L9728]              havoc value_s1170;
[L9729]              havoc __ret_0_mint;
[L9730]              havoc value_s1185;
[L9731]              havoc from_s1198;
[L9732]              havoc value_s1198;
[L9733]              havoc name_s1230;
[L9734]              havoc symbol_s1230;
[L9735]              havoc decimals_s1230;
[L9736]              havoc tmpNow;
[L9737]              havoc gas;
[L9738]              assume gas > 4000000 && gas <= 8000000;
[L9739]              tmpNow := now;
[L9740]              havoc now;
[L9741]              assume now > tmpNow;
[L9742]              assume msgsender_MSG != null;
[L9743]              assume DType[msgsender_MSG] != IERC20;
[L9744]              assume DType[msgsender_MSG] != SafeMath;
[L9745]              assume DType[msgsender_MSG] != ERC20;
[L9746]              assume DType[msgsender_MSG] != Roles;
[L9747]              assume DType[msgsender_MSG] != PauserRole;
[L9748]              assume DType[msgsender_MSG] != Pausable;
[L9749]              assume DType[msgsender_MSG] != ERC20Pausable;
[L9750]              assume DType[msgsender_MSG] != ERC20Detailed;
[L9751]              assume DType[msgsender_MSG] != MinterRole;
[L9752]              assume DType[msgsender_MSG] != ERC20Mintable;
[L9753]              assume DType[msgsender_MSG] != ERC20Burnable;
[L9754]              assume DType[msgsender_MSG] != OMToken;
[L9755]              Alloc[msgsender_MSG] := true;
[L9756]  COND FALSE  !(choice == 23)
[L9763]  COND FALSE  !(choice == 22)
[L9770]  COND FALSE  !(choice == 21)
[L9777]  COND FALSE  !(choice == 20)
[L9783]  COND FALSE  !(choice == 19)
[L9789]  COND TRUE   choice == 18
[L9790]              gas := gas - 21000;
[L9791]  COND TRUE   gas >= 0
[L9792]              assume msgvalue_MSG == 0;
[L9793]  CALL        call __ret_0_allowance := allowance~address~address_ERC20(this, msgsender_MSG, msgvalue_MSG, owner_s247, spender_s247);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume _allowed_ERC20[this][owner_s247][spender_s247] >= 0 && _allowed_ERC20[this][owner_s247][spender_s247] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_allowance_ERC200 := true;
[L2]                 call_allowance_ERC200 := false;
[L2]                 revert := revert_hold;
[L430]               havoc __exception;
[L431]               revert := false;
[L432]   COND FALSE  !(__exception)
[L459]   CALL        call __ret_0_ := allowance~address~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, owner_s247, spender_s247);
[L4248]              __ret_0_ := _allowed_ERC20[this][owner_s247][spender_s247];
[L459]   RET         call __ret_0_ := allowance~address~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, owner_s247, spender_s247);
[L460]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((((__ret_0_ == _allowed_ERC20[this][owner_s247][spender_s247] && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowed_ERC20[this] == old(_allowed_ERC20[this])) && _minters_MinterRole[this] == old(_minters_MinterRole[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this])) && _paused_Pausable[this] == old(_paused_Pausable[this])) && _pausers_PauserRole[this] == old(_pausers_PauserRole[this]));
[L2]                 revert := revert_hold;
[L9793]  RET         call __ret_0_allowance := allowance~address~address_ERC20(this, msgsender_MSG, msgvalue_MSG, owner_s247, spender_s247);
[L9923]  RET         call CorralChoice_OMToken(this);

Loop:
[L9923]  CALL        call CorralChoice_OMToken(this);
[L9689]              havoc msgsender_MSG;
[L9690]              havoc msgvalue_MSG;
[L9691]              havoc choice;
[L9692]              havoc to_s916;
[L9693]              havoc value_s916;
[L9694]              havoc __ret_0_transfer;
[L9695]              havoc spender_s955;
[L9696]              havoc value_s955;
[L9697]              havoc __ret_0_approve;
[L9698]              havoc from_s937;
[L9699]              havoc to_s937;
[L9700]              havoc value_s937;
[L9701]              havoc __ret_0_transferFrom;
[L9702]              havoc __ret_0_totalSupply;
[L9703]              havoc owner_s231;
[L9704]              havoc __ret_0_balanceOf;
[L9705]              havoc owner_s247;
[L9706]              havoc spender_s247;
[L9707]              havoc __ret_0_allowance;
[L9708]              havoc spender_s973;
[L9709]              havoc addedValue_s973;
[L9710]              havoc success_s973;
[L9711]              havoc spender_s991;
[L9712]              havoc subtractedValue_s991;
[L9713]              havoc success_s991;
[L9714]              havoc account_s760;
[L9715]              havoc __ret_0_isPauser;
[L9716]              havoc account_s772;
[L9717]              havoc __ret_0_paused;
[L9718]              havoc name_s1022;
[L9719]              havoc symbol_s1022;
[L9720]              havoc decimals_s1022;
[L9721]              havoc __ret_0_name;
[L9722]              havoc __ret_0_symbol;
[L9723]              havoc __ret_0_decimals;
[L9724]              havoc account_s1093;
[L9725]              havoc __ret_0_isMinter;
[L9726]              havoc account_s1105;
[L9727]              havoc to_s1170;
[L9728]              havoc value_s1170;
[L9729]              havoc __ret_0_mint;
[L9730]              havoc value_s1185;
[L9731]              havoc from_s1198;
[L9732]              havoc value_s1198;
[L9733]              havoc name_s1230;
[L9734]              havoc symbol_s1230;
[L9735]              havoc decimals_s1230;
[L9736]              havoc tmpNow;
[L9737]              havoc gas;
[L9738]              assume gas > 4000000 && gas <= 8000000;
[L9739]              tmpNow := now;
[L9740]              havoc now;
[L9741]              assume now > tmpNow;
[L9742]              assume msgsender_MSG != null;
[L9743]              assume DType[msgsender_MSG] != IERC20;
[L9744]              assume DType[msgsender_MSG] != SafeMath;
[L9745]              assume DType[msgsender_MSG] != ERC20;
[L9746]              assume DType[msgsender_MSG] != Roles;
[L9747]              assume DType[msgsender_MSG] != PauserRole;
[L9748]              assume DType[msgsender_MSG] != Pausable;
[L9749]              assume DType[msgsender_MSG] != ERC20Pausable;
[L9750]              assume DType[msgsender_MSG] != ERC20Detailed;
[L9751]              assume DType[msgsender_MSG] != MinterRole;
[L9752]              assume DType[msgsender_MSG] != ERC20Mintable;
[L9753]              assume DType[msgsender_MSG] != ERC20Burnable;
[L9754]              assume DType[msgsender_MSG] != OMToken;
[L9755]              Alloc[msgsender_MSG] := true;
[L9756]  COND FALSE  !(choice == 23)
[L9763]  COND FALSE  !(choice == 22)
[L9770]  COND FALSE  !(choice == 21)
[L9777]  COND FALSE  !(choice == 20)
[L9783]  COND FALSE  !(choice == 19)
[L9789]  COND TRUE   choice == 18
[L9790]              gas := gas - 21000;
[L9791]  COND TRUE   gas >= 0
[L9792]              assume msgvalue_MSG == 0;
[L9793]  CALL        call __ret_0_allowance := allowance~address~address_ERC20(this, msgsender_MSG, msgvalue_MSG, owner_s247, spender_s247);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume _allowed_ERC20[this][owner_s247][spender_s247] >= 0 && _allowed_ERC20[this][owner_s247][spender_s247] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_allowance_ERC200 := true;
[L2]                 call_allowance_ERC200 := false;
[L2]                 revert := revert_hold;
[L430]               havoc __exception;
[L431]               revert := false;
[L432]   COND FALSE  !(__exception)
[L459]   CALL        call __ret_0_ := allowance~address~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, owner_s247, spender_s247);
[L4248]              __ret_0_ := _allowed_ERC20[this][owner_s247][spender_s247];
[L459]   RET         call __ret_0_ := allowance~address~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, owner_s247, spender_s247);
[L460]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((((__ret_0_ == _allowed_ERC20[this][owner_s247][spender_s247] && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowed_ERC20[this] == old(_allowed_ERC20[this])) && _minters_MinterRole[this] == old(_minters_MinterRole[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this])) && _paused_Pausable[this] == old(_paused_Pausable[this])) && _pausers_PauserRole[this] == old(_pausers_PauserRole[this]));
[L2]                 revert := revert_hold;
[L9793]  RET         call __ret_0_allowance := allowance~address~address_ERC20(this, msgsender_MSG, msgvalue_MSG, owner_s247, spender_s247);
[L9923]  RET         call CorralChoice_OMToken(this);

[2020-11-25 02:29:07,580 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 02:29:07,580 INFO  L82        PathProgramCache]: Analyzing trace with hash 1247452039, now seen corresponding path program 1 times
[2020-11-25 02:29:07,581 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 02:29:07,589 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 02:29:07,609 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 02:29:07,609 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 02:29:07,609 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [3] imperfect sequences [] total 3
[2020-11-25 02:29:07,610 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 02:29:07,611 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-11-25 02:29:07,611 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-11-25 02:29:07,611 INFO  L87              Difference]: Start difference. First operand 5019 states and 6071 transitions. cyclomatic complexity: 1054 Second operand 3 states.
[2020-11-25 02:29:07,793 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 02:29:07,793 INFO  L93              Difference]: Finished difference Result 6855 states and 8306 transitions.
[2020-11-25 02:29:07,793 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-11-25 02:29:07,794 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 6855 states and 8306 transitions.
[2020-11-25 02:29:07,814 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 02:29:07,844 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 6855 states to 6855 states and 8306 transitions.
[2020-11-25 02:29:07,844 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1478
[2020-11-25 02:29:07,845 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1478
[2020-11-25 02:29:07,845 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 6855 states and 8306 transitions.
[2020-11-25 02:29:07,853 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 02:29:07,853 INFO  L728         BuchiCegarLoop]: Abstraction has 6855 states and 8306 transitions.
[2020-11-25 02:29:07,860 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 6855 states and 8306 transitions.
[2020-11-25 02:29:07,925 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 6855 to 5973.
[2020-11-25 02:29:07,926 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 5973 states.
[2020-11-25 02:29:07,934 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 5973 states to 5973 states and 7242 transitions.
[2020-11-25 02:29:07,935 INFO  L751         BuchiCegarLoop]: Abstraction has 5973 states and 7242 transitions.
[2020-11-25 02:29:07,935 INFO  L631         BuchiCegarLoop]: Abstraction has 5973 states and 7242 transitions.
[2020-11-25 02:29:07,935 INFO  L445         BuchiCegarLoop]: ======== Iteration 3============
[2020-11-25 02:29:07,935 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 5973 states and 7242 transitions.
[2020-11-25 02:29:07,943 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 02:29:07,943 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 02:29:07,943 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 02:29:07,945 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 02:29:07,945 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_allowance_ERC200 := false;
[L2]                 call_allowance_ERC200 := false;
[L2]     CALL        call main();
[L9913]              assume null == 0;
[L9914]  CALL        call this := FreshRefGenerator__success();
[L3962]              havoc newRef;
[L3963]              assume Alloc[newRef] == false;
[L3964]              Alloc[newRef] := true;
[L3965]              assume newRef != null;
[L9914]  RET         call this := FreshRefGenerator__success();
[L9915]              assume now >= 0;
[L9916]              assume DType[this] == OMToken;
[L9917]              assume msgvalue_MSG == 0;
[L9918]              gas := gas - 53000;
[L9919]  CALL        call OMToken_OMToken(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L2714]              havoc __exception;
[L2715]              revert := false;
[L2716]  COND FALSE  !(__exception)
[L2743]  CALL        call OMToken_OMToken__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L6180]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4004]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3989]              assume msgsender_MSG != null;
[L3990]              Balance[this] := 0;
[L4004]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  COND FALSE  !(revert)
[L6180]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6181]  COND FALSE  !(revert)
[L6184]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4206]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4004]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3989]              assume msgsender_MSG != null;
[L3990]              Balance[this] := 0;
[L4004]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  COND FALSE  !(revert)
[L4206]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4207]  COND FALSE  !(revert)
[L4210]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4182]              assume msgsender_MSG != null;
[L4183]              Balance[this] := 0;
[L4184]              _balances_ERC20[this] := zeroRefintArr();
[L4185]              sum__balances0[this] := 0;
[L4186]              _allowed_ERC20[this] := zeroRefRefintArr();
[L4187]              sum__allowed1[this] := 0;
[L4188]              _totalSupply_ERC20[this] := 0;
[L4210]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4211]  COND FALSE  !(revert)
[L6184]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6185]  COND FALSE  !(revert)
[L6188]  CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4974]  CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4928]              assume msgsender_MSG != null;
[L4929]              Balance[this] := 0;
[L4931]  CALL        call __var_22 := FreshRefGenerator__success();
[L3962]              havoc newRef;
[L3963]              assume Alloc[newRef] == false;
[L3964]              Alloc[newRef] := true;
[L3965]              assume newRef != null;
[L4931]  RET         call __var_22 := FreshRefGenerator__success();
[L4932]  COND FALSE  !(revert)
[L4935]              _pausers_PauserRole[this] := __var_22;
[L4937]  COND FALSE  !(DType[this] == OMToken)
[L4942]  COND FALSE  !(DType[this] == ERC20Pausable)
[L4947]  COND TRUE   DType[this] == Pausable
[L4948]  CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5128]  CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L4806]              __var_17 := null;
[L4807]  COND TRUE   !(account_s659 != null)
[L4808]              revert := true;
[L5128]  RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L5129]  COND TRUE   revert
[L4948]  RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L4949]  COND TRUE   revert
[L4974]  RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4975]  COND TRUE   revert
[L6188]  RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6189]  COND TRUE   revert
[L2743]  RET         call OMToken_OMToken__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L2744]              assume !revert && gas >= 0;
[L9919]  RET         call OMToken_OMToken(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L9920]              assume !revert && gas >= 0;
[L9923]  CALL        call CorralChoice_OMToken(this);
[L9689]              havoc msgsender_MSG;
[L9690]              havoc msgvalue_MSG;
[L9691]              havoc choice;
[L9692]              havoc to_s916;
[L9693]              havoc value_s916;
[L9694]              havoc __ret_0_transfer;
[L9695]              havoc spender_s955;
[L9696]              havoc value_s955;
[L9697]              havoc __ret_0_approve;
[L9698]              havoc from_s937;
[L9699]              havoc to_s937;
[L9700]              havoc value_s937;
[L9701]              havoc __ret_0_transferFrom;
[L9702]              havoc __ret_0_totalSupply;
[L9703]              havoc owner_s231;
[L9704]              havoc __ret_0_balanceOf;
[L9705]              havoc owner_s247;
[L9706]              havoc spender_s247;
[L9707]              havoc __ret_0_allowance;
[L9708]              havoc spender_s973;
[L9709]              havoc addedValue_s973;
[L9710]              havoc success_s973;
[L9711]              havoc spender_s991;
[L9712]              havoc subtractedValue_s991;
[L9713]              havoc success_s991;
[L9714]              havoc account_s760;
[L9715]              havoc __ret_0_isPauser;
[L9716]              havoc account_s772;
[L9717]              havoc __ret_0_paused;
[L9718]              havoc name_s1022;
[L9719]              havoc symbol_s1022;
[L9720]              havoc decimals_s1022;
[L9721]              havoc __ret_0_name;
[L9722]              havoc __ret_0_symbol;
[L9723]              havoc __ret_0_decimals;
[L9724]              havoc account_s1093;
[L9725]              havoc __ret_0_isMinter;
[L9726]              havoc account_s1105;
[L9727]              havoc to_s1170;
[L9728]              havoc value_s1170;
[L9729]              havoc __ret_0_mint;
[L9730]              havoc value_s1185;
[L9731]              havoc from_s1198;
[L9732]              havoc value_s1198;
[L9733]              havoc name_s1230;
[L9734]              havoc symbol_s1230;
[L9735]              havoc decimals_s1230;
[L9736]              havoc tmpNow;
[L9737]              havoc gas;
[L9738]              assume gas > 4000000 && gas <= 8000000;
[L9739]              tmpNow := now;
[L9740]              havoc now;
[L9741]              assume now > tmpNow;
[L9742]              assume msgsender_MSG != null;
[L9743]              assume DType[msgsender_MSG] != IERC20;
[L9744]              assume DType[msgsender_MSG] != SafeMath;
[L9745]              assume DType[msgsender_MSG] != ERC20;
[L9746]              assume DType[msgsender_MSG] != Roles;
[L9747]              assume DType[msgsender_MSG] != PauserRole;
[L9748]              assume DType[msgsender_MSG] != Pausable;
[L9749]              assume DType[msgsender_MSG] != ERC20Pausable;
[L9750]              assume DType[msgsender_MSG] != ERC20Detailed;
[L9751]              assume DType[msgsender_MSG] != MinterRole;
[L9752]              assume DType[msgsender_MSG] != ERC20Mintable;
[L9753]              assume DType[msgsender_MSG] != ERC20Burnable;
[L9754]              assume DType[msgsender_MSG] != OMToken;
[L9755]              Alloc[msgsender_MSG] := true;
[L9756]  COND FALSE  !(choice == 23)
[L9763]  COND FALSE  !(choice == 22)
[L9770]  COND FALSE  !(choice == 21)
[L9777]  COND FALSE  !(choice == 20)
[L9783]  COND FALSE  !(choice == 19)
[L9789]  COND TRUE   choice == 18
[L9790]              gas := gas - 21000;
[L9791]  COND TRUE   gas >= 0
[L9792]              assume msgvalue_MSG == 0;
[L9793]  CALL        call __ret_0_allowance := allowance~address~address_ERC20(this, msgsender_MSG, msgvalue_MSG, owner_s247, spender_s247);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume _allowed_ERC20[this][owner_s247][spender_s247] >= 0 && _allowed_ERC20[this][owner_s247][spender_s247] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_allowance_ERC200 := true;
[L2]                 call_allowance_ERC200 := false;
[L2]                 revert := revert_hold;
[L430]               havoc __exception;
[L431]               revert := false;
[L432]   COND FALSE  !(__exception)
[L459]   CALL        call __ret_0_ := allowance~address~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, owner_s247, spender_s247);
[L4248]              __ret_0_ := _allowed_ERC20[this][owner_s247][spender_s247];
[L459]   RET         call __ret_0_ := allowance~address~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, owner_s247, spender_s247);
[L460]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((((__ret_0_ == _allowed_ERC20[this][owner_s247][spender_s247] && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowed_ERC20[this] == old(_allowed_ERC20[this])) && _minters_MinterRole[this] == old(_minters_MinterRole[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this])) && _paused_Pausable[this] == old(_paused_Pausable[this])) && _pausers_PauserRole[this] == old(_pausers_PauserRole[this]));
[L2]                 revert := revert_hold;
[L9793]  RET         call __ret_0_allowance := allowance~address~address_ERC20(this, msgsender_MSG, msgvalue_MSG, owner_s247, spender_s247);
[L9923]  RET         call CorralChoice_OMToken(this);

Loop:
[L9923]  CALL        call CorralChoice_OMToken(this);
[L9689]              havoc msgsender_MSG;
[L9690]              havoc msgvalue_MSG;
[L9691]              havoc choice;
[L9692]              havoc to_s916;
[L9693]              havoc value_s916;
[L9694]              havoc __ret_0_transfer;
[L9695]              havoc spender_s955;
[L9696]              havoc value_s955;
[L9697]              havoc __ret_0_approve;
[L9698]              havoc from_s937;
[L9699]              havoc to_s937;
[L9700]              havoc value_s937;
[L9701]              havoc __ret_0_transferFrom;
[L9702]              havoc __ret_0_totalSupply;
[L9703]              havoc owner_s231;
[L9704]              havoc __ret_0_balanceOf;
[L9705]              havoc owner_s247;
[L9706]              havoc spender_s247;
[L9707]              havoc __ret_0_allowance;
[L9708]              havoc spender_s973;
[L9709]              havoc addedValue_s973;
[L9710]              havoc success_s973;
[L9711]              havoc spender_s991;
[L9712]              havoc subtractedValue_s991;
[L9713]              havoc success_s991;
[L9714]              havoc account_s760;
[L9715]              havoc __ret_0_isPauser;
[L9716]              havoc account_s772;
[L9717]              havoc __ret_0_paused;
[L9718]              havoc name_s1022;
[L9719]              havoc symbol_s1022;
[L9720]              havoc decimals_s1022;
[L9721]              havoc __ret_0_name;
[L9722]              havoc __ret_0_symbol;
[L9723]              havoc __ret_0_decimals;
[L9724]              havoc account_s1093;
[L9725]              havoc __ret_0_isMinter;
[L9726]              havoc account_s1105;
[L9727]              havoc to_s1170;
[L9728]              havoc value_s1170;
[L9729]              havoc __ret_0_mint;
[L9730]              havoc value_s1185;
[L9731]              havoc from_s1198;
[L9732]              havoc value_s1198;
[L9733]              havoc name_s1230;
[L9734]              havoc symbol_s1230;
[L9735]              havoc decimals_s1230;
[L9736]              havoc tmpNow;
[L9737]              havoc gas;
[L9738]              assume gas > 4000000 && gas <= 8000000;
[L9739]              tmpNow := now;
[L9740]              havoc now;
[L9741]              assume now > tmpNow;
[L9742]              assume msgsender_MSG != null;
[L9743]              assume DType[msgsender_MSG] != IERC20;
[L9744]              assume DType[msgsender_MSG] != SafeMath;
[L9745]              assume DType[msgsender_MSG] != ERC20;
[L9746]              assume DType[msgsender_MSG] != Roles;
[L9747]              assume DType[msgsender_MSG] != PauserRole;
[L9748]              assume DType[msgsender_MSG] != Pausable;
[L9749]              assume DType[msgsender_MSG] != ERC20Pausable;
[L9750]              assume DType[msgsender_MSG] != ERC20Detailed;
[L9751]              assume DType[msgsender_MSG] != MinterRole;
[L9752]              assume DType[msgsender_MSG] != ERC20Mintable;
[L9753]              assume DType[msgsender_MSG] != ERC20Burnable;
[L9754]              assume DType[msgsender_MSG] != OMToken;
[L9755]              Alloc[msgsender_MSG] := true;
[L9756]  COND FALSE  !(choice == 23)
[L9763]  COND FALSE  !(choice == 22)
[L9770]  COND FALSE  !(choice == 21)
[L9777]  COND FALSE  !(choice == 20)
[L9783]  COND FALSE  !(choice == 19)
[L9789]  COND TRUE   choice == 18
[L9790]              gas := gas - 21000;
[L9791]  COND TRUE   gas >= 0
[L9792]              assume msgvalue_MSG == 0;
[L9793]  CALL        call __ret_0_allowance := allowance~address~address_ERC20(this, msgsender_MSG, msgvalue_MSG, owner_s247, spender_s247);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume _allowed_ERC20[this][owner_s247][spender_s247] >= 0 && _allowed_ERC20[this][owner_s247][spender_s247] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_allowance_ERC200 := true;
[L2]                 call_allowance_ERC200 := false;
[L2]                 revert := revert_hold;
[L430]               havoc __exception;
[L431]               revert := false;
[L432]   COND FALSE  !(__exception)
[L459]   CALL        call __ret_0_ := allowance~address~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, owner_s247, spender_s247);
[L4248]              __ret_0_ := _allowed_ERC20[this][owner_s247][spender_s247];
[L459]   RET         call __ret_0_ := allowance~address~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, owner_s247, spender_s247);
[L460]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((((__ret_0_ == _allowed_ERC20[this][owner_s247][spender_s247] && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowed_ERC20[this] == old(_allowed_ERC20[this])) && _minters_MinterRole[this] == old(_minters_MinterRole[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this])) && _paused_Pausable[this] == old(_paused_Pausable[this])) && _pausers_PauserRole[this] == old(_pausers_PauserRole[this]));
[L2]                 revert := revert_hold;
[L9793]  RET         call __ret_0_allowance := allowance~address~address_ERC20(this, msgsender_MSG, msgvalue_MSG, owner_s247, spender_s247);
[L9923]  RET         call CorralChoice_OMToken(this);

[2020-11-25 02:29:07,949 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 02:29:07,949 INFO  L82        PathProgramCache]: Analyzing trace with hash -1020259638, now seen corresponding path program 1 times
[2020-11-25 02:29:07,950 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 02:29:07,958 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 02:29:08,018 INFO  L134       CoverageAnalysis]: Checked inductivity of 16 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 16 trivial. 0 not checked.
[2020-11-25 02:29:08,019 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 02:29:08,019 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [7] imperfect sequences [] total 7
[2020-11-25 02:29:08,019 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 02:29:08,019 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 7 interpolants.
[2020-11-25 02:29:08,019 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=11, Invalid=31, Unknown=0, NotChecked=0, Total=42
[2020-11-25 02:29:08,020 INFO  L87              Difference]: Start difference. First operand 5973 states and 7242 transitions. cyclomatic complexity: 1271 Second operand 7 states.
[2020-11-25 02:29:08,357 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 02:29:08,358 INFO  L93              Difference]: Finished difference Result 6024 states and 7313 transitions.
[2020-11-25 02:29:08,358 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 7 states. 
[2020-11-25 02:29:08,358 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 6024 states and 7313 transitions.
[2020-11-25 02:29:08,376 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 02:29:08,401 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 6024 states to 5985 states and 7257 transitions.
[2020-11-25 02:29:08,401 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1254
[2020-11-25 02:29:08,402 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1254
[2020-11-25 02:29:08,402 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 5985 states and 7257 transitions.
[2020-11-25 02:29:08,408 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 02:29:08,408 INFO  L728         BuchiCegarLoop]: Abstraction has 5985 states and 7257 transitions.
[2020-11-25 02:29:08,413 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 5985 states and 7257 transitions.
[2020-11-25 02:29:08,479 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 5985 to 5985.
[2020-11-25 02:29:08,480 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 5985 states.
[2020-11-25 02:29:08,487 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 5985 states to 5985 states and 7257 transitions.
[2020-11-25 02:29:08,487 INFO  L751         BuchiCegarLoop]: Abstraction has 5985 states and 7257 transitions.
[2020-11-25 02:29:08,487 INFO  L631         BuchiCegarLoop]: Abstraction has 5985 states and 7257 transitions.
[2020-11-25 02:29:08,487 INFO  L445         BuchiCegarLoop]: ======== Iteration 4============
[2020-11-25 02:29:08,487 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 5985 states and 7257 transitions.
[2020-11-25 02:29:08,496 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 02:29:08,496 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 02:29:08,496 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 02:29:08,497 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 02:29:08,498 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_allowance_ERC200 := false;
[L2]                 call_allowance_ERC200 := false;
[L2]     CALL        call main();
[L9913]              assume null == 0;
[L9914]  CALL        call this := FreshRefGenerator__success();
[L3962]              havoc newRef;
[L3963]              assume Alloc[newRef] == false;
[L3964]              Alloc[newRef] := true;
[L3965]              assume newRef != null;
[L9914]  RET         call this := FreshRefGenerator__success();
[L9915]              assume now >= 0;
[L9916]              assume DType[this] == OMToken;
[L9917]              assume msgvalue_MSG == 0;
[L9918]              gas := gas - 53000;
[L9919]  CALL        call OMToken_OMToken(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L2714]              havoc __exception;
[L2715]              revert := false;
[L2716]  COND FALSE  !(__exception)
[L2743]  CALL        call OMToken_OMToken__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L6180]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4004]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3989]              assume msgsender_MSG != null;
[L3990]              Balance[this] := 0;
[L4004]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  COND FALSE  !(revert)
[L6180]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6181]  COND FALSE  !(revert)
[L6184]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4206]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4004]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3989]              assume msgsender_MSG != null;
[L3990]              Balance[this] := 0;
[L4004]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  COND FALSE  !(revert)
[L4206]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4207]  COND FALSE  !(revert)
[L4210]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4182]              assume msgsender_MSG != null;
[L4183]              Balance[this] := 0;
[L4184]              _balances_ERC20[this] := zeroRefintArr();
[L4185]              sum__balances0[this] := 0;
[L4186]              _allowed_ERC20[this] := zeroRefRefintArr();
[L4187]              sum__allowed1[this] := 0;
[L4188]              _totalSupply_ERC20[this] := 0;
[L4210]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4211]  COND FALSE  !(revert)
[L6184]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6185]  COND FALSE  !(revert)
[L6188]  CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4974]  CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4928]              assume msgsender_MSG != null;
[L4929]              Balance[this] := 0;
[L4931]  CALL        call __var_22 := FreshRefGenerator__success();
[L3962]              havoc newRef;
[L3963]              assume Alloc[newRef] == false;
[L3964]              Alloc[newRef] := true;
[L3965]              assume newRef != null;
[L4931]  RET         call __var_22 := FreshRefGenerator__success();
[L4932]  COND FALSE  !(revert)
[L4935]              _pausers_PauserRole[this] := __var_22;
[L4937]  COND TRUE   DType[this] == OMToken
[L4938]  CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5128]  CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L4806]              __var_17 := null;
[L4807]  COND TRUE   !(account_s659 != null)
[L4808]              revert := true;
[L5128]  RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L5129]  COND TRUE   revert
[L4938]  RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L4939]  COND TRUE   revert
[L4974]  RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4975]  COND TRUE   revert
[L6188]  RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6189]  COND TRUE   revert
[L2743]  RET         call OMToken_OMToken__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L2744]              assume !revert && gas >= 0;
[L9919]  RET         call OMToken_OMToken(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L9920]              assume !revert && gas >= 0;
[L9923]  CALL        call CorralChoice_OMToken(this);
[L9689]              havoc msgsender_MSG;
[L9690]              havoc msgvalue_MSG;
[L9691]              havoc choice;
[L9692]              havoc to_s916;
[L9693]              havoc value_s916;
[L9694]              havoc __ret_0_transfer;
[L9695]              havoc spender_s955;
[L9696]              havoc value_s955;
[L9697]              havoc __ret_0_approve;
[L9698]              havoc from_s937;
[L9699]              havoc to_s937;
[L9700]              havoc value_s937;
[L9701]              havoc __ret_0_transferFrom;
[L9702]              havoc __ret_0_totalSupply;
[L9703]              havoc owner_s231;
[L9704]              havoc __ret_0_balanceOf;
[L9705]              havoc owner_s247;
[L9706]              havoc spender_s247;
[L9707]              havoc __ret_0_allowance;
[L9708]              havoc spender_s973;
[L9709]              havoc addedValue_s973;
[L9710]              havoc success_s973;
[L9711]              havoc spender_s991;
[L9712]              havoc subtractedValue_s991;
[L9713]              havoc success_s991;
[L9714]              havoc account_s760;
[L9715]              havoc __ret_0_isPauser;
[L9716]              havoc account_s772;
[L9717]              havoc __ret_0_paused;
[L9718]              havoc name_s1022;
[L9719]              havoc symbol_s1022;
[L9720]              havoc decimals_s1022;
[L9721]              havoc __ret_0_name;
[L9722]              havoc __ret_0_symbol;
[L9723]              havoc __ret_0_decimals;
[L9724]              havoc account_s1093;
[L9725]              havoc __ret_0_isMinter;
[L9726]              havoc account_s1105;
[L9727]              havoc to_s1170;
[L9728]              havoc value_s1170;
[L9729]              havoc __ret_0_mint;
[L9730]              havoc value_s1185;
[L9731]              havoc from_s1198;
[L9732]              havoc value_s1198;
[L9733]              havoc name_s1230;
[L9734]              havoc symbol_s1230;
[L9735]              havoc decimals_s1230;
[L9736]              havoc tmpNow;
[L9737]              havoc gas;
[L9738]              assume gas > 4000000 && gas <= 8000000;
[L9739]              tmpNow := now;
[L9740]              havoc now;
[L9741]              assume now > tmpNow;
[L9742]              assume msgsender_MSG != null;
[L9743]              assume DType[msgsender_MSG] != IERC20;
[L9744]              assume DType[msgsender_MSG] != SafeMath;
[L9745]              assume DType[msgsender_MSG] != ERC20;
[L9746]              assume DType[msgsender_MSG] != Roles;
[L9747]              assume DType[msgsender_MSG] != PauserRole;
[L9748]              assume DType[msgsender_MSG] != Pausable;
[L9749]              assume DType[msgsender_MSG] != ERC20Pausable;
[L9750]              assume DType[msgsender_MSG] != ERC20Detailed;
[L9751]              assume DType[msgsender_MSG] != MinterRole;
[L9752]              assume DType[msgsender_MSG] != ERC20Mintable;
[L9753]              assume DType[msgsender_MSG] != ERC20Burnable;
[L9754]              assume DType[msgsender_MSG] != OMToken;
[L9755]              Alloc[msgsender_MSG] := true;
[L9756]  COND FALSE  !(choice == 23)
[L9763]  COND FALSE  !(choice == 22)
[L9770]  COND FALSE  !(choice == 21)
[L9777]  COND FALSE  !(choice == 20)
[L9783]  COND FALSE  !(choice == 19)
[L9789]  COND TRUE   choice == 18
[L9790]              gas := gas - 21000;
[L9791]  COND TRUE   gas >= 0
[L9792]              assume msgvalue_MSG == 0;
[L9793]  CALL        call __ret_0_allowance := allowance~address~address_ERC20(this, msgsender_MSG, msgvalue_MSG, owner_s247, spender_s247);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume _allowed_ERC20[this][owner_s247][spender_s247] >= 0 && _allowed_ERC20[this][owner_s247][spender_s247] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_allowance_ERC200 := true;
[L2]                 call_allowance_ERC200 := false;
[L2]                 revert := revert_hold;
[L430]               havoc __exception;
[L431]               revert := false;
[L432]   COND FALSE  !(__exception)
[L459]   CALL        call __ret_0_ := allowance~address~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, owner_s247, spender_s247);
[L4248]              __ret_0_ := _allowed_ERC20[this][owner_s247][spender_s247];
[L459]   RET         call __ret_0_ := allowance~address~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, owner_s247, spender_s247);
[L460]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((((__ret_0_ == _allowed_ERC20[this][owner_s247][spender_s247] && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowed_ERC20[this] == old(_allowed_ERC20[this])) && _minters_MinterRole[this] == old(_minters_MinterRole[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this])) && _paused_Pausable[this] == old(_paused_Pausable[this])) && _pausers_PauserRole[this] == old(_pausers_PauserRole[this]));
[L2]                 revert := revert_hold;
[L9793]  RET         call __ret_0_allowance := allowance~address~address_ERC20(this, msgsender_MSG, msgvalue_MSG, owner_s247, spender_s247);
[L9923]  RET         call CorralChoice_OMToken(this);

Loop:
[L9923]  CALL        call CorralChoice_OMToken(this);
[L9689]              havoc msgsender_MSG;
[L9690]              havoc msgvalue_MSG;
[L9691]              havoc choice;
[L9692]              havoc to_s916;
[L9693]              havoc value_s916;
[L9694]              havoc __ret_0_transfer;
[L9695]              havoc spender_s955;
[L9696]              havoc value_s955;
[L9697]              havoc __ret_0_approve;
[L9698]              havoc from_s937;
[L9699]              havoc to_s937;
[L9700]              havoc value_s937;
[L9701]              havoc __ret_0_transferFrom;
[L9702]              havoc __ret_0_totalSupply;
[L9703]              havoc owner_s231;
[L9704]              havoc __ret_0_balanceOf;
[L9705]              havoc owner_s247;
[L9706]              havoc spender_s247;
[L9707]              havoc __ret_0_allowance;
[L9708]              havoc spender_s973;
[L9709]              havoc addedValue_s973;
[L9710]              havoc success_s973;
[L9711]              havoc spender_s991;
[L9712]              havoc subtractedValue_s991;
[L9713]              havoc success_s991;
[L9714]              havoc account_s760;
[L9715]              havoc __ret_0_isPauser;
[L9716]              havoc account_s772;
[L9717]              havoc __ret_0_paused;
[L9718]              havoc name_s1022;
[L9719]              havoc symbol_s1022;
[L9720]              havoc decimals_s1022;
[L9721]              havoc __ret_0_name;
[L9722]              havoc __ret_0_symbol;
[L9723]              havoc __ret_0_decimals;
[L9724]              havoc account_s1093;
[L9725]              havoc __ret_0_isMinter;
[L9726]              havoc account_s1105;
[L9727]              havoc to_s1170;
[L9728]              havoc value_s1170;
[L9729]              havoc __ret_0_mint;
[L9730]              havoc value_s1185;
[L9731]              havoc from_s1198;
[L9732]              havoc value_s1198;
[L9733]              havoc name_s1230;
[L9734]              havoc symbol_s1230;
[L9735]              havoc decimals_s1230;
[L9736]              havoc tmpNow;
[L9737]              havoc gas;
[L9738]              assume gas > 4000000 && gas <= 8000000;
[L9739]              tmpNow := now;
[L9740]              havoc now;
[L9741]              assume now > tmpNow;
[L9742]              assume msgsender_MSG != null;
[L9743]              assume DType[msgsender_MSG] != IERC20;
[L9744]              assume DType[msgsender_MSG] != SafeMath;
[L9745]              assume DType[msgsender_MSG] != ERC20;
[L9746]              assume DType[msgsender_MSG] != Roles;
[L9747]              assume DType[msgsender_MSG] != PauserRole;
[L9748]              assume DType[msgsender_MSG] != Pausable;
[L9749]              assume DType[msgsender_MSG] != ERC20Pausable;
[L9750]              assume DType[msgsender_MSG] != ERC20Detailed;
[L9751]              assume DType[msgsender_MSG] != MinterRole;
[L9752]              assume DType[msgsender_MSG] != ERC20Mintable;
[L9753]              assume DType[msgsender_MSG] != ERC20Burnable;
[L9754]              assume DType[msgsender_MSG] != OMToken;
[L9755]              Alloc[msgsender_MSG] := true;
[L9756]  COND FALSE  !(choice == 23)
[L9763]  COND FALSE  !(choice == 22)
[L9770]  COND FALSE  !(choice == 21)
[L9777]  COND FALSE  !(choice == 20)
[L9783]  COND FALSE  !(choice == 19)
[L9789]  COND TRUE   choice == 18
[L9790]              gas := gas - 21000;
[L9791]  COND TRUE   gas >= 0
[L9792]              assume msgvalue_MSG == 0;
[L9793]  CALL        call __ret_0_allowance := allowance~address~address_ERC20(this, msgsender_MSG, msgvalue_MSG, owner_s247, spender_s247);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume _allowed_ERC20[this][owner_s247][spender_s247] >= 0 && _allowed_ERC20[this][owner_s247][spender_s247] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_allowance_ERC200 := true;
[L2]                 call_allowance_ERC200 := false;
[L2]                 revert := revert_hold;
[L430]               havoc __exception;
[L431]               revert := false;
[L432]   COND FALSE  !(__exception)
[L459]   CALL        call __ret_0_ := allowance~address~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, owner_s247, spender_s247);
[L4248]              __ret_0_ := _allowed_ERC20[this][owner_s247][spender_s247];
[L459]   RET         call __ret_0_ := allowance~address~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, owner_s247, spender_s247);
[L460]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((((__ret_0_ == _allowed_ERC20[this][owner_s247][spender_s247] && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowed_ERC20[this] == old(_allowed_ERC20[this])) && _minters_MinterRole[this] == old(_minters_MinterRole[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this])) && _paused_Pausable[this] == old(_paused_Pausable[this])) && _pausers_PauserRole[this] == old(_pausers_PauserRole[this]));
[L2]                 revert := revert_hold;
[L9793]  RET         call __ret_0_allowance := allowance~address~address_ERC20(this, msgsender_MSG, msgvalue_MSG, owner_s247, spender_s247);
[L9923]  RET         call CorralChoice_OMToken(this);

[2020-11-25 02:29:08,508 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 02:29:08,508 INFO  L82        PathProgramCache]: Analyzing trace with hash 246244352, now seen corresponding path program 1 times
[2020-11-25 02:29:08,509 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 02:29:08,515 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 02:29:08,546 INFO  L134       CoverageAnalysis]: Checked inductivity of 16 backedges. 0 proven. 7 refuted. 0 times theorem prover too weak. 9 trivial. 0 not checked.
[2020-11-25 02:29:08,546 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 02:29:08,546 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [9] total 9
[2020-11-25 02:29:08,547 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 02:29:08,547 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 9 interpolants.
[2020-11-25 02:29:08,547 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=15, Invalid=57, Unknown=0, NotChecked=0, Total=72
[2020-11-25 02:29:08,547 INFO  L87              Difference]: Start difference. First operand 5985 states and 7257 transitions. cyclomatic complexity: 1274 Second operand 9 states.
[2020-11-25 02:29:08,620 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 02:29:08,620 INFO  L93              Difference]: Finished difference Result 6043 states and 7349 transitions.
[2020-11-25 02:29:08,620 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 9 states. 
[2020-11-25 02:29:08,620 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 6043 states and 7349 transitions.
[2020-11-25 02:29:08,632 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 02:29:08,646 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 6043 states to 6043 states and 7349 transitions.
[2020-11-25 02:29:08,647 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1263
[2020-11-25 02:29:08,648 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1263
[2020-11-25 02:29:08,648 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 6043 states and 7349 transitions.
[2020-11-25 02:29:08,654 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 02:29:08,654 INFO  L728         BuchiCegarLoop]: Abstraction has 6043 states and 7349 transitions.
[2020-11-25 02:29:08,659 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 6043 states and 7349 transitions.
[2020-11-25 02:29:08,696 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 6043 to 5998.
[2020-11-25 02:29:08,696 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 5998 states.
[2020-11-25 02:29:08,703 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 5998 states to 5998 states and 7287 transitions.
[2020-11-25 02:29:08,703 INFO  L751         BuchiCegarLoop]: Abstraction has 5998 states and 7287 transitions.
[2020-11-25 02:29:08,703 INFO  L631         BuchiCegarLoop]: Abstraction has 5998 states and 7287 transitions.
[2020-11-25 02:29:08,703 INFO  L445         BuchiCegarLoop]: ======== Iteration 5============
[2020-11-25 02:29:08,703 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 5998 states and 7287 transitions.
[2020-11-25 02:29:08,710 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 02:29:08,710 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 02:29:08,710 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 02:29:08,711 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 02:29:08,711 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_allowance_ERC200 := false;
[L2]                 call_allowance_ERC200 := false;
[L2]     CALL        call main();
[L9913]              assume null == 0;
[L9914]  CALL        call this := FreshRefGenerator__success();
[L3962]              havoc newRef;
[L3963]              assume Alloc[newRef] == false;
[L3964]              Alloc[newRef] := true;
[L3965]              assume newRef != null;
[L9914]  RET         call this := FreshRefGenerator__success();
[L9915]              assume now >= 0;
[L9916]              assume DType[this] == OMToken;
[L9917]              assume msgvalue_MSG == 0;
[L9918]              gas := gas - 53000;
[L9919]  CALL        call OMToken_OMToken(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L2714]              havoc __exception;
[L2715]              revert := false;
[L2716]  COND FALSE  !(__exception)
[L2743]  CALL        call OMToken_OMToken__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L6180]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4004]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3989]              assume msgsender_MSG != null;
[L3990]              Balance[this] := 0;
[L4004]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  COND FALSE  !(revert)
[L6180]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6181]  COND FALSE  !(revert)
[L6184]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4206]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4004]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3989]              assume msgsender_MSG != null;
[L3990]              Balance[this] := 0;
[L4004]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  COND FALSE  !(revert)
[L4206]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4207]  COND FALSE  !(revert)
[L4210]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4182]              assume msgsender_MSG != null;
[L4183]              Balance[this] := 0;
[L4184]              _balances_ERC20[this] := zeroRefintArr();
[L4185]              sum__balances0[this] := 0;
[L4186]              _allowed_ERC20[this] := zeroRefRefintArr();
[L4187]              sum__allowed1[this] := 0;
[L4188]              _totalSupply_ERC20[this] := 0;
[L4210]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4211]  COND FALSE  !(revert)
[L6184]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6185]  COND FALSE  !(revert)
[L6188]  CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4974]  CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4928]              assume msgsender_MSG != null;
[L4929]              Balance[this] := 0;
[L4931]  CALL        call __var_22 := FreshRefGenerator__success();
[L3962]              havoc newRef;
[L3963]              assume Alloc[newRef] == false;
[L3964]              Alloc[newRef] := true;
[L3965]              assume newRef != null;
[L4931]  RET         call __var_22 := FreshRefGenerator__success();
[L4932]  COND FALSE  !(revert)
[L4935]              _pausers_PauserRole[this] := __var_22;
[L4937]  COND TRUE   DType[this] == OMToken
[L4938]  CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5128]  CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L4806]              __var_17 := null;
[L4807]  COND FALSE  !(!(account_s659 != null))
[L4811]  CALL        call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4877]              __var_21 := null;
[L4878]  COND TRUE   !(account_s713 != null)
[L4879]              revert := true;
[L4811]  RET         call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4812]  COND TRUE   revert
[L5128]  RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L5129]  COND TRUE   revert
[L4938]  RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L4939]  COND TRUE   revert
[L4974]  RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4975]  COND TRUE   revert
[L6188]  RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6189]  COND TRUE   revert
[L2743]  RET         call OMToken_OMToken__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L2744]              assume !revert && gas >= 0;
[L9919]  RET         call OMToken_OMToken(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L9920]              assume !revert && gas >= 0;
[L9923]  CALL        call CorralChoice_OMToken(this);
[L9689]              havoc msgsender_MSG;
[L9690]              havoc msgvalue_MSG;
[L9691]              havoc choice;
[L9692]              havoc to_s916;
[L9693]              havoc value_s916;
[L9694]              havoc __ret_0_transfer;
[L9695]              havoc spender_s955;
[L9696]              havoc value_s955;
[L9697]              havoc __ret_0_approve;
[L9698]              havoc from_s937;
[L9699]              havoc to_s937;
[L9700]              havoc value_s937;
[L9701]              havoc __ret_0_transferFrom;
[L9702]              havoc __ret_0_totalSupply;
[L9703]              havoc owner_s231;
[L9704]              havoc __ret_0_balanceOf;
[L9705]              havoc owner_s247;
[L9706]              havoc spender_s247;
[L9707]              havoc __ret_0_allowance;
[L9708]              havoc spender_s973;
[L9709]              havoc addedValue_s973;
[L9710]              havoc success_s973;
[L9711]              havoc spender_s991;
[L9712]              havoc subtractedValue_s991;
[L9713]              havoc success_s991;
[L9714]              havoc account_s760;
[L9715]              havoc __ret_0_isPauser;
[L9716]              havoc account_s772;
[L9717]              havoc __ret_0_paused;
[L9718]              havoc name_s1022;
[L9719]              havoc symbol_s1022;
[L9720]              havoc decimals_s1022;
[L9721]              havoc __ret_0_name;
[L9722]              havoc __ret_0_symbol;
[L9723]              havoc __ret_0_decimals;
[L9724]              havoc account_s1093;
[L9725]              havoc __ret_0_isMinter;
[L9726]              havoc account_s1105;
[L9727]              havoc to_s1170;
[L9728]              havoc value_s1170;
[L9729]              havoc __ret_0_mint;
[L9730]              havoc value_s1185;
[L9731]              havoc from_s1198;
[L9732]              havoc value_s1198;
[L9733]              havoc name_s1230;
[L9734]              havoc symbol_s1230;
[L9735]              havoc decimals_s1230;
[L9736]              havoc tmpNow;
[L9737]              havoc gas;
[L9738]              assume gas > 4000000 && gas <= 8000000;
[L9739]              tmpNow := now;
[L9740]              havoc now;
[L9741]              assume now > tmpNow;
[L9742]              assume msgsender_MSG != null;
[L9743]              assume DType[msgsender_MSG] != IERC20;
[L9744]              assume DType[msgsender_MSG] != SafeMath;
[L9745]              assume DType[msgsender_MSG] != ERC20;
[L9746]              assume DType[msgsender_MSG] != Roles;
[L9747]              assume DType[msgsender_MSG] != PauserRole;
[L9748]              assume DType[msgsender_MSG] != Pausable;
[L9749]              assume DType[msgsender_MSG] != ERC20Pausable;
[L9750]              assume DType[msgsender_MSG] != ERC20Detailed;
[L9751]              assume DType[msgsender_MSG] != MinterRole;
[L9752]              assume DType[msgsender_MSG] != ERC20Mintable;
[L9753]              assume DType[msgsender_MSG] != ERC20Burnable;
[L9754]              assume DType[msgsender_MSG] != OMToken;
[L9755]              Alloc[msgsender_MSG] := true;
[L9756]  COND FALSE  !(choice == 23)
[L9763]  COND FALSE  !(choice == 22)
[L9770]  COND FALSE  !(choice == 21)
[L9777]  COND FALSE  !(choice == 20)
[L9783]  COND FALSE  !(choice == 19)
[L9789]  COND TRUE   choice == 18
[L9790]              gas := gas - 21000;
[L9791]  COND TRUE   gas >= 0
[L9792]              assume msgvalue_MSG == 0;
[L9793]  CALL        call __ret_0_allowance := allowance~address~address_ERC20(this, msgsender_MSG, msgvalue_MSG, owner_s247, spender_s247);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume _allowed_ERC20[this][owner_s247][spender_s247] >= 0 && _allowed_ERC20[this][owner_s247][spender_s247] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_allowance_ERC200 := true;
[L2]                 call_allowance_ERC200 := false;
[L2]                 revert := revert_hold;
[L430]               havoc __exception;
[L431]               revert := false;
[L432]   COND FALSE  !(__exception)
[L459]   CALL        call __ret_0_ := allowance~address~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, owner_s247, spender_s247);
[L4248]              __ret_0_ := _allowed_ERC20[this][owner_s247][spender_s247];
[L459]   RET         call __ret_0_ := allowance~address~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, owner_s247, spender_s247);
[L460]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((((__ret_0_ == _allowed_ERC20[this][owner_s247][spender_s247] && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowed_ERC20[this] == old(_allowed_ERC20[this])) && _minters_MinterRole[this] == old(_minters_MinterRole[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this])) && _paused_Pausable[this] == old(_paused_Pausable[this])) && _pausers_PauserRole[this] == old(_pausers_PauserRole[this]));
[L2]                 revert := revert_hold;
[L9793]  RET         call __ret_0_allowance := allowance~address~address_ERC20(this, msgsender_MSG, msgvalue_MSG, owner_s247, spender_s247);
[L9923]  RET         call CorralChoice_OMToken(this);

Loop:
[L9923]  CALL        call CorralChoice_OMToken(this);
[L9689]              havoc msgsender_MSG;
[L9690]              havoc msgvalue_MSG;
[L9691]              havoc choice;
[L9692]              havoc to_s916;
[L9693]              havoc value_s916;
[L9694]              havoc __ret_0_transfer;
[L9695]              havoc spender_s955;
[L9696]              havoc value_s955;
[L9697]              havoc __ret_0_approve;
[L9698]              havoc from_s937;
[L9699]              havoc to_s937;
[L9700]              havoc value_s937;
[L9701]              havoc __ret_0_transferFrom;
[L9702]              havoc __ret_0_totalSupply;
[L9703]              havoc owner_s231;
[L9704]              havoc __ret_0_balanceOf;
[L9705]              havoc owner_s247;
[L9706]              havoc spender_s247;
[L9707]              havoc __ret_0_allowance;
[L9708]              havoc spender_s973;
[L9709]              havoc addedValue_s973;
[L9710]              havoc success_s973;
[L9711]              havoc spender_s991;
[L9712]              havoc subtractedValue_s991;
[L9713]              havoc success_s991;
[L9714]              havoc account_s760;
[L9715]              havoc __ret_0_isPauser;
[L9716]              havoc account_s772;
[L9717]              havoc __ret_0_paused;
[L9718]              havoc name_s1022;
[L9719]              havoc symbol_s1022;
[L9720]              havoc decimals_s1022;
[L9721]              havoc __ret_0_name;
[L9722]              havoc __ret_0_symbol;
[L9723]              havoc __ret_0_decimals;
[L9724]              havoc account_s1093;
[L9725]              havoc __ret_0_isMinter;
[L9726]              havoc account_s1105;
[L9727]              havoc to_s1170;
[L9728]              havoc value_s1170;
[L9729]              havoc __ret_0_mint;
[L9730]              havoc value_s1185;
[L9731]              havoc from_s1198;
[L9732]              havoc value_s1198;
[L9733]              havoc name_s1230;
[L9734]              havoc symbol_s1230;
[L9735]              havoc decimals_s1230;
[L9736]              havoc tmpNow;
[L9737]              havoc gas;
[L9738]              assume gas > 4000000 && gas <= 8000000;
[L9739]              tmpNow := now;
[L9740]              havoc now;
[L9741]              assume now > tmpNow;
[L9742]              assume msgsender_MSG != null;
[L9743]              assume DType[msgsender_MSG] != IERC20;
[L9744]              assume DType[msgsender_MSG] != SafeMath;
[L9745]              assume DType[msgsender_MSG] != ERC20;
[L9746]              assume DType[msgsender_MSG] != Roles;
[L9747]              assume DType[msgsender_MSG] != PauserRole;
[L9748]              assume DType[msgsender_MSG] != Pausable;
[L9749]              assume DType[msgsender_MSG] != ERC20Pausable;
[L9750]              assume DType[msgsender_MSG] != ERC20Detailed;
[L9751]              assume DType[msgsender_MSG] != MinterRole;
[L9752]              assume DType[msgsender_MSG] != ERC20Mintable;
[L9753]              assume DType[msgsender_MSG] != ERC20Burnable;
[L9754]              assume DType[msgsender_MSG] != OMToken;
[L9755]              Alloc[msgsender_MSG] := true;
[L9756]  COND FALSE  !(choice == 23)
[L9763]  COND FALSE  !(choice == 22)
[L9770]  COND FALSE  !(choice == 21)
[L9777]  COND FALSE  !(choice == 20)
[L9783]  COND FALSE  !(choice == 19)
[L9789]  COND TRUE   choice == 18
[L9790]              gas := gas - 21000;
[L9791]  COND TRUE   gas >= 0
[L9792]              assume msgvalue_MSG == 0;
[L9793]  CALL        call __ret_0_allowance := allowance~address~address_ERC20(this, msgsender_MSG, msgvalue_MSG, owner_s247, spender_s247);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume _allowed_ERC20[this][owner_s247][spender_s247] >= 0 && _allowed_ERC20[this][owner_s247][spender_s247] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_allowance_ERC200 := true;
[L2]                 call_allowance_ERC200 := false;
[L2]                 revert := revert_hold;
[L430]               havoc __exception;
[L431]               revert := false;
[L432]   COND FALSE  !(__exception)
[L459]   CALL        call __ret_0_ := allowance~address~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, owner_s247, spender_s247);
[L4248]              __ret_0_ := _allowed_ERC20[this][owner_s247][spender_s247];
[L459]   RET         call __ret_0_ := allowance~address~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, owner_s247, spender_s247);
[L460]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((((__ret_0_ == _allowed_ERC20[this][owner_s247][spender_s247] && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowed_ERC20[this] == old(_allowed_ERC20[this])) && _minters_MinterRole[this] == old(_minters_MinterRole[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this])) && _paused_Pausable[this] == old(_paused_Pausable[this])) && _pausers_PauserRole[this] == old(_pausers_PauserRole[this]));
[L2]                 revert := revert_hold;
[L9793]  RET         call __ret_0_allowance := allowance~address~address_ERC20(this, msgsender_MSG, msgvalue_MSG, owner_s247, spender_s247);
[L9923]  RET         call CorralChoice_OMToken(this);

[2020-11-25 02:29:08,714 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 02:29:08,715 INFO  L82        PathProgramCache]: Analyzing trace with hash 1047090301, now seen corresponding path program 1 times
[2020-11-25 02:29:08,715 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 02:29:08,723 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 02:29:08,756 INFO  L134       CoverageAnalysis]: Checked inductivity of 16 backedges. 0 proven. 7 refuted. 0 times theorem prover too weak. 9 trivial. 0 not checked.
[2020-11-25 02:29:08,756 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 02:29:08,756 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [10] total 10
[2020-11-25 02:29:08,756 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 02:29:08,756 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 10 interpolants.
[2020-11-25 02:29:08,756 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=17, Invalid=73, Unknown=0, NotChecked=0, Total=90
[2020-11-25 02:29:08,757 INFO  L87              Difference]: Start difference. First operand 5998 states and 7287 transitions. cyclomatic complexity: 1291 Second operand 10 states.
[2020-11-25 02:29:08,844 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 02:29:08,844 INFO  L93              Difference]: Finished difference Result 6070 states and 7397 transitions.
[2020-11-25 02:29:08,844 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 10 states. 
[2020-11-25 02:29:08,844 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 6070 states and 7397 transitions.
[2020-11-25 02:29:08,856 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 02:29:08,869 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 6070 states to 6070 states and 7397 transitions.
[2020-11-25 02:29:08,869 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1270
[2020-11-25 02:29:08,870 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1270
[2020-11-25 02:29:08,870 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 6070 states and 7397 transitions.
[2020-11-25 02:29:08,874 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 02:29:08,874 INFO  L728         BuchiCegarLoop]: Abstraction has 6070 states and 7397 transitions.
[2020-11-25 02:29:08,879 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 6070 states and 7397 transitions.
[2020-11-25 02:29:08,910 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 6070 to 6005.
[2020-11-25 02:29:08,910 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 6005 states.
[2020-11-25 02:29:08,916 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 6005 states to 6005 states and 7296 transitions.
[2020-11-25 02:29:08,916 INFO  L751         BuchiCegarLoop]: Abstraction has 6005 states and 7296 transitions.
[2020-11-25 02:29:08,916 INFO  L631         BuchiCegarLoop]: Abstraction has 6005 states and 7296 transitions.
[2020-11-25 02:29:08,916 INFO  L445         BuchiCegarLoop]: ======== Iteration 6============
[2020-11-25 02:29:08,916 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 6005 states and 7296 transitions.
[2020-11-25 02:29:08,922 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 02:29:08,922 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 02:29:08,922 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 02:29:08,923 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 02:29:08,923 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_allowance_ERC200 := false;
[L2]                 call_allowance_ERC200 := false;
[L2]     CALL        call main();
[L9913]              assume null == 0;
[L9914]  CALL        call this := FreshRefGenerator__success();
[L3962]              havoc newRef;
[L3963]              assume Alloc[newRef] == false;
[L3964]              Alloc[newRef] := true;
[L3965]              assume newRef != null;
[L9914]  RET         call this := FreshRefGenerator__success();
[L9915]              assume now >= 0;
[L9916]              assume DType[this] == OMToken;
[L9917]              assume msgvalue_MSG == 0;
[L9918]              gas := gas - 53000;
[L9919]  CALL        call OMToken_OMToken(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L2714]              havoc __exception;
[L2715]              revert := false;
[L2716]  COND FALSE  !(__exception)
[L2743]  CALL        call OMToken_OMToken__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L6180]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4004]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3989]              assume msgsender_MSG != null;
[L3990]              Balance[this] := 0;
[L4004]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  COND FALSE  !(revert)
[L6180]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6181]  COND FALSE  !(revert)
[L6184]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4206]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4004]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3989]              assume msgsender_MSG != null;
[L3990]              Balance[this] := 0;
[L4004]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  COND FALSE  !(revert)
[L4206]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4207]  COND FALSE  !(revert)
[L4210]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4182]              assume msgsender_MSG != null;
[L4183]              Balance[this] := 0;
[L4184]              _balances_ERC20[this] := zeroRefintArr();
[L4185]              sum__balances0[this] := 0;
[L4186]              _allowed_ERC20[this] := zeroRefRefintArr();
[L4187]              sum__allowed1[this] := 0;
[L4188]              _totalSupply_ERC20[this] := 0;
[L4210]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4211]  COND FALSE  !(revert)
[L6184]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6185]  COND FALSE  !(revert)
[L6188]  CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4974]  CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4928]              assume msgsender_MSG != null;
[L4929]              Balance[this] := 0;
[L4931]  CALL        call __var_22 := FreshRefGenerator__success();
[L3962]              havoc newRef;
[L3963]              assume Alloc[newRef] == false;
[L3964]              Alloc[newRef] := true;
[L3965]              assume newRef != null;
[L4931]  RET         call __var_22 := FreshRefGenerator__success();
[L4932]  COND FALSE  !(revert)
[L4935]              _pausers_PauserRole[this] := __var_22;
[L4937]  COND TRUE   DType[this] == OMToken
[L4938]  CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5128]  CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L4806]              __var_17 := null;
[L4807]  COND FALSE  !(!(account_s659 != null))
[L4811]  CALL        call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4877]              __var_21 := null;
[L4878]  COND FALSE  !(!(account_s713 != null))
[L4882]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s713]][account_s713];
[L4811]  RET         call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4812]  COND FALSE  !(revert)
[L4815]  COND TRUE   !!__var_18
[L4816]              revert := true;
[L5128]  RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L5129]  COND TRUE   revert
[L4938]  RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L4939]  COND TRUE   revert
[L4974]  RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4975]  COND TRUE   revert
[L6188]  RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6189]  COND TRUE   revert
[L2743]  RET         call OMToken_OMToken__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L2744]              assume !revert && gas >= 0;
[L9919]  RET         call OMToken_OMToken(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L9920]              assume !revert && gas >= 0;
[L9923]  CALL        call CorralChoice_OMToken(this);
[L9689]              havoc msgsender_MSG;
[L9690]              havoc msgvalue_MSG;
[L9691]              havoc choice;
[L9692]              havoc to_s916;
[L9693]              havoc value_s916;
[L9694]              havoc __ret_0_transfer;
[L9695]              havoc spender_s955;
[L9696]              havoc value_s955;
[L9697]              havoc __ret_0_approve;
[L9698]              havoc from_s937;
[L9699]              havoc to_s937;
[L9700]              havoc value_s937;
[L9701]              havoc __ret_0_transferFrom;
[L9702]              havoc __ret_0_totalSupply;
[L9703]              havoc owner_s231;
[L9704]              havoc __ret_0_balanceOf;
[L9705]              havoc owner_s247;
[L9706]              havoc spender_s247;
[L9707]              havoc __ret_0_allowance;
[L9708]              havoc spender_s973;
[L9709]              havoc addedValue_s973;
[L9710]              havoc success_s973;
[L9711]              havoc spender_s991;
[L9712]              havoc subtractedValue_s991;
[L9713]              havoc success_s991;
[L9714]              havoc account_s760;
[L9715]              havoc __ret_0_isPauser;
[L9716]              havoc account_s772;
[L9717]              havoc __ret_0_paused;
[L9718]              havoc name_s1022;
[L9719]              havoc symbol_s1022;
[L9720]              havoc decimals_s1022;
[L9721]              havoc __ret_0_name;
[L9722]              havoc __ret_0_symbol;
[L9723]              havoc __ret_0_decimals;
[L9724]              havoc account_s1093;
[L9725]              havoc __ret_0_isMinter;
[L9726]              havoc account_s1105;
[L9727]              havoc to_s1170;
[L9728]              havoc value_s1170;
[L9729]              havoc __ret_0_mint;
[L9730]              havoc value_s1185;
[L9731]              havoc from_s1198;
[L9732]              havoc value_s1198;
[L9733]              havoc name_s1230;
[L9734]              havoc symbol_s1230;
[L9735]              havoc decimals_s1230;
[L9736]              havoc tmpNow;
[L9737]              havoc gas;
[L9738]              assume gas > 4000000 && gas <= 8000000;
[L9739]              tmpNow := now;
[L9740]              havoc now;
[L9741]              assume now > tmpNow;
[L9742]              assume msgsender_MSG != null;
[L9743]              assume DType[msgsender_MSG] != IERC20;
[L9744]              assume DType[msgsender_MSG] != SafeMath;
[L9745]              assume DType[msgsender_MSG] != ERC20;
[L9746]              assume DType[msgsender_MSG] != Roles;
[L9747]              assume DType[msgsender_MSG] != PauserRole;
[L9748]              assume DType[msgsender_MSG] != Pausable;
[L9749]              assume DType[msgsender_MSG] != ERC20Pausable;
[L9750]              assume DType[msgsender_MSG] != ERC20Detailed;
[L9751]              assume DType[msgsender_MSG] != MinterRole;
[L9752]              assume DType[msgsender_MSG] != ERC20Mintable;
[L9753]              assume DType[msgsender_MSG] != ERC20Burnable;
[L9754]              assume DType[msgsender_MSG] != OMToken;
[L9755]              Alloc[msgsender_MSG] := true;
[L9756]  COND FALSE  !(choice == 23)
[L9763]  COND FALSE  !(choice == 22)
[L9770]  COND FALSE  !(choice == 21)
[L9777]  COND FALSE  !(choice == 20)
[L9783]  COND FALSE  !(choice == 19)
[L9789]  COND TRUE   choice == 18
[L9790]              gas := gas - 21000;
[L9791]  COND TRUE   gas >= 0
[L9792]              assume msgvalue_MSG == 0;
[L9793]  CALL        call __ret_0_allowance := allowance~address~address_ERC20(this, msgsender_MSG, msgvalue_MSG, owner_s247, spender_s247);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume _allowed_ERC20[this][owner_s247][spender_s247] >= 0 && _allowed_ERC20[this][owner_s247][spender_s247] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_allowance_ERC200 := true;
[L2]                 call_allowance_ERC200 := false;
[L2]                 revert := revert_hold;
[L430]               havoc __exception;
[L431]               revert := false;
[L432]   COND FALSE  !(__exception)
[L459]   CALL        call __ret_0_ := allowance~address~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, owner_s247, spender_s247);
[L4248]              __ret_0_ := _allowed_ERC20[this][owner_s247][spender_s247];
[L459]   RET         call __ret_0_ := allowance~address~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, owner_s247, spender_s247);
[L460]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((((__ret_0_ == _allowed_ERC20[this][owner_s247][spender_s247] && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowed_ERC20[this] == old(_allowed_ERC20[this])) && _minters_MinterRole[this] == old(_minters_MinterRole[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this])) && _paused_Pausable[this] == old(_paused_Pausable[this])) && _pausers_PauserRole[this] == old(_pausers_PauserRole[this]));
[L2]                 revert := revert_hold;
[L9793]  RET         call __ret_0_allowance := allowance~address~address_ERC20(this, msgsender_MSG, msgvalue_MSG, owner_s247, spender_s247);
[L9923]  RET         call CorralChoice_OMToken(this);

Loop:
[L9923]  CALL        call CorralChoice_OMToken(this);
[L9689]              havoc msgsender_MSG;
[L9690]              havoc msgvalue_MSG;
[L9691]              havoc choice;
[L9692]              havoc to_s916;
[L9693]              havoc value_s916;
[L9694]              havoc __ret_0_transfer;
[L9695]              havoc spender_s955;
[L9696]              havoc value_s955;
[L9697]              havoc __ret_0_approve;
[L9698]              havoc from_s937;
[L9699]              havoc to_s937;
[L9700]              havoc value_s937;
[L9701]              havoc __ret_0_transferFrom;
[L9702]              havoc __ret_0_totalSupply;
[L9703]              havoc owner_s231;
[L9704]              havoc __ret_0_balanceOf;
[L9705]              havoc owner_s247;
[L9706]              havoc spender_s247;
[L9707]              havoc __ret_0_allowance;
[L9708]              havoc spender_s973;
[L9709]              havoc addedValue_s973;
[L9710]              havoc success_s973;
[L9711]              havoc spender_s991;
[L9712]              havoc subtractedValue_s991;
[L9713]              havoc success_s991;
[L9714]              havoc account_s760;
[L9715]              havoc __ret_0_isPauser;
[L9716]              havoc account_s772;
[L9717]              havoc __ret_0_paused;
[L9718]              havoc name_s1022;
[L9719]              havoc symbol_s1022;
[L9720]              havoc decimals_s1022;
[L9721]              havoc __ret_0_name;
[L9722]              havoc __ret_0_symbol;
[L9723]              havoc __ret_0_decimals;
[L9724]              havoc account_s1093;
[L9725]              havoc __ret_0_isMinter;
[L9726]              havoc account_s1105;
[L9727]              havoc to_s1170;
[L9728]              havoc value_s1170;
[L9729]              havoc __ret_0_mint;
[L9730]              havoc value_s1185;
[L9731]              havoc from_s1198;
[L9732]              havoc value_s1198;
[L9733]              havoc name_s1230;
[L9734]              havoc symbol_s1230;
[L9735]              havoc decimals_s1230;
[L9736]              havoc tmpNow;
[L9737]              havoc gas;
[L9738]              assume gas > 4000000 && gas <= 8000000;
[L9739]              tmpNow := now;
[L9740]              havoc now;
[L9741]              assume now > tmpNow;
[L9742]              assume msgsender_MSG != null;
[L9743]              assume DType[msgsender_MSG] != IERC20;
[L9744]              assume DType[msgsender_MSG] != SafeMath;
[L9745]              assume DType[msgsender_MSG] != ERC20;
[L9746]              assume DType[msgsender_MSG] != Roles;
[L9747]              assume DType[msgsender_MSG] != PauserRole;
[L9748]              assume DType[msgsender_MSG] != Pausable;
[L9749]              assume DType[msgsender_MSG] != ERC20Pausable;
[L9750]              assume DType[msgsender_MSG] != ERC20Detailed;
[L9751]              assume DType[msgsender_MSG] != MinterRole;
[L9752]              assume DType[msgsender_MSG] != ERC20Mintable;
[L9753]              assume DType[msgsender_MSG] != ERC20Burnable;
[L9754]              assume DType[msgsender_MSG] != OMToken;
[L9755]              Alloc[msgsender_MSG] := true;
[L9756]  COND FALSE  !(choice == 23)
[L9763]  COND FALSE  !(choice == 22)
[L9770]  COND FALSE  !(choice == 21)
[L9777]  COND FALSE  !(choice == 20)
[L9783]  COND FALSE  !(choice == 19)
[L9789]  COND TRUE   choice == 18
[L9790]              gas := gas - 21000;
[L9791]  COND TRUE   gas >= 0
[L9792]              assume msgvalue_MSG == 0;
[L9793]  CALL        call __ret_0_allowance := allowance~address~address_ERC20(this, msgsender_MSG, msgvalue_MSG, owner_s247, spender_s247);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume _allowed_ERC20[this][owner_s247][spender_s247] >= 0 && _allowed_ERC20[this][owner_s247][spender_s247] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_allowance_ERC200 := true;
[L2]                 call_allowance_ERC200 := false;
[L2]                 revert := revert_hold;
[L430]               havoc __exception;
[L431]               revert := false;
[L432]   COND FALSE  !(__exception)
[L459]   CALL        call __ret_0_ := allowance~address~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, owner_s247, spender_s247);
[L4248]              __ret_0_ := _allowed_ERC20[this][owner_s247][spender_s247];
[L459]   RET         call __ret_0_ := allowance~address~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, owner_s247, spender_s247);
[L460]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((((__ret_0_ == _allowed_ERC20[this][owner_s247][spender_s247] && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowed_ERC20[this] == old(_allowed_ERC20[this])) && _minters_MinterRole[this] == old(_minters_MinterRole[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this])) && _paused_Pausable[this] == old(_paused_Pausable[this])) && _pausers_PauserRole[this] == old(_pausers_PauserRole[this]));
[L2]                 revert := revert_hold;
[L9793]  RET         call __ret_0_allowance := allowance~address~address_ERC20(this, msgsender_MSG, msgvalue_MSG, owner_s247, spender_s247);
[L9923]  RET         call CorralChoice_OMToken(this);

[2020-11-25 02:29:08,926 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 02:29:08,926 INFO  L82        PathProgramCache]: Analyzing trace with hash -1636103068, now seen corresponding path program 1 times
[2020-11-25 02:29:08,927 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 02:29:08,934 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 02:29:08,955 INFO  L134       CoverageAnalysis]: Checked inductivity of 16 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 16 trivial. 0 not checked.
[2020-11-25 02:29:08,956 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 02:29:08,956 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [3] imperfect sequences [] total 3
[2020-11-25 02:29:08,956 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 02:29:08,956 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-11-25 02:29:08,956 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-11-25 02:29:08,956 INFO  L87              Difference]: Start difference. First operand 6005 states and 7296 transitions. cyclomatic complexity: 1293 Second operand 3 states.
[2020-11-25 02:29:09,069 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 02:29:09,069 INFO  L93              Difference]: Finished difference Result 6869 states and 7926 transitions.
[2020-11-25 02:29:09,069 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-11-25 02:29:09,069 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 6869 states and 7926 transitions.
[2020-11-25 02:29:09,083 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 02:29:09,100 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 6869 states to 6165 states and 7071 transitions.
[2020-11-25 02:29:09,100 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1252
[2020-11-25 02:29:09,101 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1318
[2020-11-25 02:29:09,101 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 6165 states and 7071 transitions.
[2020-11-25 02:29:09,105 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 02:29:09,105 INFO  L728         BuchiCegarLoop]: Abstraction has 6165 states and 7071 transitions.
[2020-11-25 02:29:09,110 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 6165 states and 7071 transitions.
[2020-11-25 02:29:09,142 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 6165 to 5670.
[2020-11-25 02:29:09,142 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 5670 states.
[2020-11-25 02:29:09,148 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 5670 states to 5670 states and 6448 transitions.
[2020-11-25 02:29:09,148 INFO  L751         BuchiCegarLoop]: Abstraction has 5670 states and 6448 transitions.
[2020-11-25 02:29:09,148 INFO  L631         BuchiCegarLoop]: Abstraction has 5670 states and 6448 transitions.
[2020-11-25 02:29:09,148 INFO  L445         BuchiCegarLoop]: ======== Iteration 7============
[2020-11-25 02:29:09,148 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 5670 states and 6448 transitions.
[2020-11-25 02:29:09,154 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 02:29:09,155 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 02:29:09,155 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 02:29:09,157 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [9, 9, 9, 9, 9, 9, 9, 9, 9, 7, 7, 7, 7, 7, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 02:29:09,157 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_allowance_ERC200 := false;
[L2]                 call_allowance_ERC200 := false;
[L2]     CALL        call main();
[L9913]              assume null == 0;
[L9914]  CALL        call this := FreshRefGenerator__success();
[L3962]              havoc newRef;
[L3963]              assume Alloc[newRef] == false;
[L3964]              Alloc[newRef] := true;
[L3965]              assume newRef != null;
[L9914]  RET         call this := FreshRefGenerator__success();
[L9915]              assume now >= 0;
[L9916]              assume DType[this] == OMToken;
[L9917]              assume msgvalue_MSG == 0;
[L9918]              gas := gas - 53000;
[L9919]  CALL        call OMToken_OMToken(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L2714]              havoc __exception;
[L2715]              revert := false;
[L2716]  COND FALSE  !(__exception)
[L2743]  CALL        call OMToken_OMToken__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L6180]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4004]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3989]              assume msgsender_MSG != null;
[L3990]              Balance[this] := 0;
[L4004]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  COND FALSE  !(revert)
[L6180]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6181]  COND FALSE  !(revert)
[L6184]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4206]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4004]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3989]              assume msgsender_MSG != null;
[L3990]              Balance[this] := 0;
[L4004]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  COND FALSE  !(revert)
[L4206]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4207]  COND FALSE  !(revert)
[L4210]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4182]              assume msgsender_MSG != null;
[L4183]              Balance[this] := 0;
[L4184]              _balances_ERC20[this] := zeroRefintArr();
[L4185]              sum__balances0[this] := 0;
[L4186]              _allowed_ERC20[this] := zeroRefRefintArr();
[L4187]              sum__allowed1[this] := 0;
[L4188]              _totalSupply_ERC20[this] := 0;
[L4210]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4211]  COND FALSE  !(revert)
[L6184]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6185]  COND FALSE  !(revert)
[L6188]  CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4974]  CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4928]              assume msgsender_MSG != null;
[L4929]              Balance[this] := 0;
[L4931]  CALL        call __var_22 := FreshRefGenerator__success();
[L3962]              havoc newRef;
[L3963]              assume Alloc[newRef] == false;
[L3964]              Alloc[newRef] := true;
[L3965]              assume newRef != null;
[L4931]  RET         call __var_22 := FreshRefGenerator__success();
[L4932]  COND FALSE  !(revert)
[L4935]              _pausers_PauserRole[this] := __var_22;
[L4937]  COND TRUE   DType[this] == OMToken
[L4938]  CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5128]  CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L4806]              __var_17 := null;
[L4807]  COND FALSE  !(!(account_s659 != null))
[L4811]  CALL        call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4877]              __var_21 := null;
[L4878]  COND FALSE  !(!(account_s713 != null))
[L4882]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s713]][account_s713];
[L4811]  RET         call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4812]  COND FALSE  !(revert)
[L4815]  COND FALSE  !(!!__var_18)
[L4819]              M_Ref_bool[bearer_Roles.Role[role_s659]][account_s659] := true;
[L5128]  RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L5129]  COND FALSE  !(revert)
[L5132]              assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L4938]  RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L4939]  COND FALSE  !(revert)
[L4974]  RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4975]  COND FALSE  !(revert)
[L6188]  RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6189]  COND FALSE  !(revert)
[L6192]  CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L5186]  CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4974]  CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4928]              assume msgsender_MSG != null;
[L4929]              Balance[this] := 0;
[L4931]  CALL        call __var_22 := FreshRefGenerator__success();
[L3962]              havoc newRef;
[L3963]              assume Alloc[newRef] == false;
[L3964]              Alloc[newRef] := true;
[L3965]              assume newRef != null;
[L4931]  RET         call __var_22 := FreshRefGenerator__success();
[L4932]  COND FALSE  !(revert)
[L4935]              _pausers_PauserRole[this] := __var_22;
[L4937]  COND FALSE  !(DType[this] == OMToken)
[L4942]  COND FALSE  !(DType[this] == ERC20Pausable)
[L4947]  COND TRUE   DType[this] == Pausable
[L4948]  CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5128]  CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L4806]              __var_17 := null;
[L4807]  COND FALSE  !(!(account_s659 != null))
[L4811]  CALL        call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4877]              __var_21 := null;
[L4878]  COND FALSE  !(!(account_s713 != null))
[L4882]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s713]][account_s713];
[L4811]  RET         call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4812]  COND FALSE  !(revert)
[L4815]  COND FALSE  !(!!__var_18)
[L4819]              M_Ref_bool[bearer_Roles.Role[role_s659]][account_s659] := true;
[L5128]  RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L5129]  COND FALSE  !(revert)
[L5132]              assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L4948]  RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L4949]  COND FALSE  !(revert)
[L4974]  RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4975]  COND FALSE  !(revert)
[L5186]  RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5187]  COND FALSE  !(revert)
[L5190]  CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5165]              assume msgsender_MSG != null;
[L5166]              Balance[this] := 0;
[L5167]              _paused_Pausable[this] := false;
[L5169]              _paused_Pausable[this] := false;
[L5190]  RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5191]  COND FALSE  !(revert)
[L6192]  RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6193]  COND FALSE  !(revert)
[L6196]  CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L5304]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4004]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3989]              assume msgsender_MSG != null;
[L3990]              Balance[this] := 0;
[L4004]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  COND FALSE  !(revert)
[L5304]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5305]  COND FALSE  !(revert)
[L5308]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4206]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4004]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3989]              assume msgsender_MSG != null;
[L3990]              Balance[this] := 0;
[L4004]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  COND FALSE  !(revert)
[L4206]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4207]  COND FALSE  !(revert)
[L4210]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4182]              assume msgsender_MSG != null;
[L4183]              Balance[this] := 0;
[L4184]              _balances_ERC20[this] := zeroRefintArr();
[L4185]              sum__balances0[this] := 0;
[L4186]              _allowed_ERC20[this] := zeroRefRefintArr();
[L4187]              sum__allowed1[this] := 0;
[L4188]              _totalSupply_ERC20[this] := 0;
[L4210]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4211]  COND FALSE  !(revert)
[L5308]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5309]  COND FALSE  !(revert)
[L5312]  CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4974]  CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4928]              assume msgsender_MSG != null;
[L4929]              Balance[this] := 0;
[L4931]  CALL        call __var_22 := FreshRefGenerator__success();
[L3962]              havoc newRef;
[L3963]              assume Alloc[newRef] == false;
[L3964]              Alloc[newRef] := true;
[L3965]              assume newRef != null;
[L4931]  RET         call __var_22 := FreshRefGenerator__success();
[L4932]  COND FALSE  !(revert)
[L4935]              _pausers_PauserRole[this] := __var_22;
[L4937]  COND FALSE  !(DType[this] == OMToken)
[L4942]  COND FALSE  !(DType[this] == ERC20Pausable)
[L4947]  COND TRUE   DType[this] == Pausable
[L4948]  CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5128]  CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L4806]              __var_17 := null;
[L4807]  COND FALSE  !(!(account_s659 != null))
[L4811]  CALL        call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4877]              __var_21 := null;
[L4878]  COND FALSE  !(!(account_s713 != null))
[L4882]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s713]][account_s713];
[L4811]  RET         call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4812]  COND FALSE  !(revert)
[L4815]  COND FALSE  !(!!__var_18)
[L4819]              M_Ref_bool[bearer_Roles.Role[role_s659]][account_s659] := true;
[L5128]  RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L5129]  COND FALSE  !(revert)
[L5132]              assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L4948]  RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L4949]  COND FALSE  !(revert)
[L4974]  RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4975]  COND FALSE  !(revert)
[L5312]  RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5313]  COND FALSE  !(revert)
[L5316]  CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L5186]  CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4974]  CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4928]              assume msgsender_MSG != null;
[L4929]              Balance[this] := 0;
[L4931]  CALL        call __var_22 := FreshRefGenerator__success();
[L3962]              havoc newRef;
[L3963]              assume Alloc[newRef] == false;
[L3964]              Alloc[newRef] := true;
[L3965]              assume newRef != null;
[L4931]  RET         call __var_22 := FreshRefGenerator__success();
[L4932]  COND FALSE  !(revert)
[L4935]              _pausers_PauserRole[this] := __var_22;
[L4937]  COND FALSE  !(DType[this] == OMToken)
[L4942]  COND FALSE  !(DType[this] == ERC20Pausable)
[L4947]  COND TRUE   DType[this] == Pausable
[L4948]  CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5128]  CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L4806]              __var_17 := null;
[L4807]  COND FALSE  !(!(account_s659 != null))
[L4811]  CALL        call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4877]              __var_21 := null;
[L4878]  COND FALSE  !(!(account_s713 != null))
[L4882]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s713]][account_s713];
[L4811]  RET         call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4812]  COND FALSE  !(revert)
[L4815]  COND FALSE  !(!!__var_18)
[L4819]              M_Ref_bool[bearer_Roles.Role[role_s659]][account_s659] := true;
[L5128]  RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L5129]  COND FALSE  !(revert)
[L5132]              assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L4948]  RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L4949]  COND FALSE  !(revert)
[L4974]  RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4975]  COND FALSE  !(revert)
[L5186]  RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5187]  COND FALSE  !(revert)
[L5190]  CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5165]              assume msgsender_MSG != null;
[L5166]              Balance[this] := 0;
[L5167]              _paused_Pausable[this] := false;
[L5169]              _paused_Pausable[this] := false;
[L5190]  RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5191]  COND FALSE  !(revert)
[L5316]  RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L5317]  COND FALSE  !(revert)
[L5320]  CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5273]              assume msgsender_MSG != null;
[L5274]              Balance[this] := 0;
[L5320]  RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5321]  COND FALSE  !(revert)
[L6196]  RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6197]  COND FALSE  !(revert)
[L6200]  CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L5618]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4004]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3989]              assume msgsender_MSG != null;
[L3990]              Balance[this] := 0;
[L4004]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  COND FALSE  !(revert)
[L5618]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5619]  COND FALSE  !(revert)
[L5622]  CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1022, symbol_s1022, decimals_s1022);
[L5593]              assume msgsender_MSG != null;
[L5594]              Balance[this] := 0;
[L5595]              _name_ERC20Detailed[this] := -1676908070;
[L5596]              _symbol_ERC20Detailed[this] := -1676908070;
[L5597]              _decimals_ERC20Detailed[this] := 0;
[L5599]              _name_ERC20Detailed[this] := name_s1022;
[L5600]              _symbol_ERC20Detailed[this] := symbol_s1022;
[L5601]              _decimals_ERC20Detailed[this] := decimals_s1022;
[L5622]  RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1022, symbol_s1022, decimals_s1022);
[L5623]  COND FALSE  !(revert)
[L6200]  RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L6201]  COND FALSE  !(revert)
[L6204]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5742]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5701]              assume msgsender_MSG != null;
[L5702]              Balance[this] := 0;
[L5704]  CALL        call __var_35 := FreshRefGenerator__success();
[L3962]              havoc newRef;
[L3963]              assume Alloc[newRef] == false;
[L3964]              Alloc[newRef] := true;
[L3965]              assume newRef != null;
[L5704]  RET         call __var_35 := FreshRefGenerator__success();
[L5705]  COND FALSE  !(revert)
[L5708]              _minters_MinterRole[this] := __var_35;
[L5710]  COND FALSE  !(DType[this] == OMToken)
[L5715]  COND TRUE   DType[this] == ERC20Mintable
[L5716]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5876]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1130);
[L4806]              __var_17 := null;
[L4807]  COND FALSE  !(!(account_s659 != null))
[L4811]  CALL        call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4877]              __var_21 := null;
[L4878]  COND FALSE  !(!(account_s713 != null))
[L4882]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s713]][account_s713];
[L4811]  RET         call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4812]  COND FALSE  !(revert)
[L4815]  COND FALSE  !(!!__var_18)
[L4819]              M_Ref_bool[bearer_Roles.Role[role_s659]][account_s659] := true;
[L5876]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1130);
[L5877]  COND FALSE  !(revert)
[L5880]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L5716]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5717]  COND FALSE  !(revert)
[L5742]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5743]  COND FALSE  !(revert)
[L6204]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6205]  COND FALSE  !(revert)
[L6208]  CALL        call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L5938]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4004]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3989]              assume msgsender_MSG != null;
[L3990]              Balance[this] := 0;
[L4004]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  COND FALSE  !(revert)
[L5938]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5939]  COND FALSE  !(revert)
[L5942]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4206]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4004]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3989]              assume msgsender_MSG != null;
[L3990]              Balance[this] := 0;
[L4004]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  COND FALSE  !(revert)
[L4206]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4207]  COND FALSE  !(revert)
[L4210]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4182]              assume msgsender_MSG != null;
[L4183]              Balance[this] := 0;
[L4184]              _balances_ERC20[this] := zeroRefintArr();
[L4185]              sum__balances0[this] := 0;
[L4186]              _allowed_ERC20[this] := zeroRefRefintArr();
[L4187]              sum__allowed1[this] := 0;
[L4188]              _totalSupply_ERC20[this] := 0;
[L4210]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4211]  COND FALSE  !(revert)
[L5942]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5943]  COND FALSE  !(revert)
[L5946]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5742]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5701]              assume msgsender_MSG != null;
[L5702]              Balance[this] := 0;
[L5704]  CALL        call __var_35 := FreshRefGenerator__success();
[L3962]              havoc newRef;
[L3963]              assume Alloc[newRef] == false;
[L3964]              Alloc[newRef] := true;
[L3965]              assume newRef != null;
[L5704]  RET         call __var_35 := FreshRefGenerator__success();
[L5705]  COND FALSE  !(revert)
[L5708]              _minters_MinterRole[this] := __var_35;
[L5710]  COND FALSE  !(DType[this] == OMToken)
[L5715]  COND TRUE   DType[this] == ERC20Mintable
[L5716]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5876]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1130);
[L4806]              __var_17 := null;
[L4807]  COND FALSE  !(!(account_s659 != null))
[L4811]  CALL        call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4877]              __var_21 := null;
[L4878]  COND FALSE  !(!(account_s713 != null))
[L4882]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s713]][account_s713];
[L4811]  RET         call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4812]  COND FALSE  !(revert)
[L4815]  COND FALSE  !(!!__var_18)
[L4819]              M_Ref_bool[bearer_Roles.Role[role_s659]][account_s659] := true;
[L5876]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1130);
[L5877]  COND FALSE  !(revert)
[L5880]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L5716]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5717]  COND FALSE  !(revert)
[L5742]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5743]  COND FALSE  !(revert)
[L5946]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5947]  COND FALSE  !(revert)
[L5950]  CALL        call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5911]              assume msgsender_MSG != null;
[L5912]              Balance[this] := 0;
[L5950]  RET         call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5951]  COND FALSE  !(revert)
[L6208]  RET         call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L6209]  COND FALSE  !(revert)
[L6212]  CALL        call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6036]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4004]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3989]              assume msgsender_MSG != null;
[L3990]              Balance[this] := 0;
[L4004]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  COND FALSE  !(revert)
[L6036]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6037]  COND FALSE  !(revert)
[L6040]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4206]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4004]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3989]              assume msgsender_MSG != null;
[L3990]              Balance[this] := 0;
[L4004]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  COND FALSE  !(revert)
[L4206]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4207]  COND FALSE  !(revert)
[L4210]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4182]              assume msgsender_MSG != null;
[L4183]              Balance[this] := 0;
[L4184]              _balances_ERC20[this] := zeroRefintArr();
[L4185]              sum__balances0[this] := 0;
[L4186]              _allowed_ERC20[this] := zeroRefRefintArr();
[L4187]              sum__allowed1[this] := 0;
[L4188]              _totalSupply_ERC20[this] := 0;
[L4210]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4211]  COND FALSE  !(revert)
[L6040]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6041]  COND FALSE  !(revert)
[L6044]  CALL        call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6013]              assume msgsender_MSG != null;
[L6014]              Balance[this] := 0;
[L6044]  RET         call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6045]  COND FALSE  !(revert)
[L6212]  RET         call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6213]  COND FALSE  !(revert)
[L6216]  CALL        call OMToken_OMToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L6129]              assume msgsender_MSG != null;
[L6130]              Balance[this] := 0;
[L6216]  RET         call OMToken_OMToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L6217]  COND FALSE  !(revert)
[L2743]  RET         call OMToken_OMToken__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L2744]              assume !revert && gas >= 0;
[L9919]  RET         call OMToken_OMToken(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L9920]              assume !revert && gas >= 0;
[L9923]  CALL        call CorralChoice_OMToken(this);
[L9689]              havoc msgsender_MSG;
[L9690]              havoc msgvalue_MSG;
[L9691]              havoc choice;
[L9692]              havoc to_s916;
[L9693]              havoc value_s916;
[L9694]              havoc __ret_0_transfer;
[L9695]              havoc spender_s955;
[L9696]              havoc value_s955;
[L9697]              havoc __ret_0_approve;
[L9698]              havoc from_s937;
[L9699]              havoc to_s937;
[L9700]              havoc value_s937;
[L9701]              havoc __ret_0_transferFrom;
[L9702]              havoc __ret_0_totalSupply;
[L9703]              havoc owner_s231;
[L9704]              havoc __ret_0_balanceOf;
[L9705]              havoc owner_s247;
[L9706]              havoc spender_s247;
[L9707]              havoc __ret_0_allowance;
[L9708]              havoc spender_s973;
[L9709]              havoc addedValue_s973;
[L9710]              havoc success_s973;
[L9711]              havoc spender_s991;
[L9712]              havoc subtractedValue_s991;
[L9713]              havoc success_s991;
[L9714]              havoc account_s760;
[L9715]              havoc __ret_0_isPauser;
[L9716]              havoc account_s772;
[L9717]              havoc __ret_0_paused;
[L9718]              havoc name_s1022;
[L9719]              havoc symbol_s1022;
[L9720]              havoc decimals_s1022;
[L9721]              havoc __ret_0_name;
[L9722]              havoc __ret_0_symbol;
[L9723]              havoc __ret_0_decimals;
[L9724]              havoc account_s1093;
[L9725]              havoc __ret_0_isMinter;
[L9726]              havoc account_s1105;
[L9727]              havoc to_s1170;
[L9728]              havoc value_s1170;
[L9729]              havoc __ret_0_mint;
[L9730]              havoc value_s1185;
[L9731]              havoc from_s1198;
[L9732]              havoc value_s1198;
[L9733]              havoc name_s1230;
[L9734]              havoc symbol_s1230;
[L9735]              havoc decimals_s1230;
[L9736]              havoc tmpNow;
[L9737]              havoc gas;
[L9738]              assume gas > 4000000 && gas <= 8000000;
[L9739]              tmpNow := now;
[L9740]              havoc now;
[L9741]              assume now > tmpNow;
[L9742]              assume msgsender_MSG != null;
[L9743]              assume DType[msgsender_MSG] != IERC20;
[L9744]              assume DType[msgsender_MSG] != SafeMath;
[L9745]              assume DType[msgsender_MSG] != ERC20;
[L9746]              assume DType[msgsender_MSG] != Roles;
[L9747]              assume DType[msgsender_MSG] != PauserRole;
[L9748]              assume DType[msgsender_MSG] != Pausable;
[L9749]              assume DType[msgsender_MSG] != ERC20Pausable;
[L9750]              assume DType[msgsender_MSG] != ERC20Detailed;
[L9751]              assume DType[msgsender_MSG] != MinterRole;
[L9752]              assume DType[msgsender_MSG] != ERC20Mintable;
[L9753]              assume DType[msgsender_MSG] != ERC20Burnable;
[L9754]              assume DType[msgsender_MSG] != OMToken;
[L9755]              Alloc[msgsender_MSG] := true;
[L9756]  COND FALSE  !(choice == 23)
[L9763]  COND FALSE  !(choice == 22)
[L9770]  COND FALSE  !(choice == 21)
[L9777]  COND FALSE  !(choice == 20)
[L9783]  COND FALSE  !(choice == 19)
[L9789]  COND TRUE   choice == 18
[L9790]              gas := gas - 21000;
[L9791]  COND TRUE   gas >= 0
[L9792]              assume msgvalue_MSG == 0;
[L9793]  CALL        call __ret_0_allowance := allowance~address~address_ERC20(this, msgsender_MSG, msgvalue_MSG, owner_s247, spender_s247);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume _allowed_ERC20[this][owner_s247][spender_s247] >= 0 && _allowed_ERC20[this][owner_s247][spender_s247] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_allowance_ERC200 := true;
[L2]                 call_allowance_ERC200 := false;
[L2]                 revert := revert_hold;
[L430]               havoc __exception;
[L431]               revert := false;
[L432]   COND FALSE  !(__exception)
[L459]   CALL        call __ret_0_ := allowance~address~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, owner_s247, spender_s247);
[L4248]              __ret_0_ := _allowed_ERC20[this][owner_s247][spender_s247];
[L459]   RET         call __ret_0_ := allowance~address~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, owner_s247, spender_s247);
[L460]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((((__ret_0_ == _allowed_ERC20[this][owner_s247][spender_s247] && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowed_ERC20[this] == old(_allowed_ERC20[this])) && _minters_MinterRole[this] == old(_minters_MinterRole[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this])) && _paused_Pausable[this] == old(_paused_Pausable[this])) && _pausers_PauserRole[this] == old(_pausers_PauserRole[this]));
[L2]                 revert := revert_hold;
[L9793]  RET         call __ret_0_allowance := allowance~address~address_ERC20(this, msgsender_MSG, msgvalue_MSG, owner_s247, spender_s247);
[L9923]  RET         call CorralChoice_OMToken(this);

Loop:
[L9923]  CALL        call CorralChoice_OMToken(this);
[L9689]              havoc msgsender_MSG;
[L9690]              havoc msgvalue_MSG;
[L9691]              havoc choice;
[L9692]              havoc to_s916;
[L9693]              havoc value_s916;
[L9694]              havoc __ret_0_transfer;
[L9695]              havoc spender_s955;
[L9696]              havoc value_s955;
[L9697]              havoc __ret_0_approve;
[L9698]              havoc from_s937;
[L9699]              havoc to_s937;
[L9700]              havoc value_s937;
[L9701]              havoc __ret_0_transferFrom;
[L9702]              havoc __ret_0_totalSupply;
[L9703]              havoc owner_s231;
[L9704]              havoc __ret_0_balanceOf;
[L9705]              havoc owner_s247;
[L9706]              havoc spender_s247;
[L9707]              havoc __ret_0_allowance;
[L9708]              havoc spender_s973;
[L9709]              havoc addedValue_s973;
[L9710]              havoc success_s973;
[L9711]              havoc spender_s991;
[L9712]              havoc subtractedValue_s991;
[L9713]              havoc success_s991;
[L9714]              havoc account_s760;
[L9715]              havoc __ret_0_isPauser;
[L9716]              havoc account_s772;
[L9717]              havoc __ret_0_paused;
[L9718]              havoc name_s1022;
[L9719]              havoc symbol_s1022;
[L9720]              havoc decimals_s1022;
[L9721]              havoc __ret_0_name;
[L9722]              havoc __ret_0_symbol;
[L9723]              havoc __ret_0_decimals;
[L9724]              havoc account_s1093;
[L9725]              havoc __ret_0_isMinter;
[L9726]              havoc account_s1105;
[L9727]              havoc to_s1170;
[L9728]              havoc value_s1170;
[L9729]              havoc __ret_0_mint;
[L9730]              havoc value_s1185;
[L9731]              havoc from_s1198;
[L9732]              havoc value_s1198;
[L9733]              havoc name_s1230;
[L9734]              havoc symbol_s1230;
[L9735]              havoc decimals_s1230;
[L9736]              havoc tmpNow;
[L9737]              havoc gas;
[L9738]              assume gas > 4000000 && gas <= 8000000;
[L9739]              tmpNow := now;
[L9740]              havoc now;
[L9741]              assume now > tmpNow;
[L9742]              assume msgsender_MSG != null;
[L9743]              assume DType[msgsender_MSG] != IERC20;
[L9744]              assume DType[msgsender_MSG] != SafeMath;
[L9745]              assume DType[msgsender_MSG] != ERC20;
[L9746]              assume DType[msgsender_MSG] != Roles;
[L9747]              assume DType[msgsender_MSG] != PauserRole;
[L9748]              assume DType[msgsender_MSG] != Pausable;
[L9749]              assume DType[msgsender_MSG] != ERC20Pausable;
[L9750]              assume DType[msgsender_MSG] != ERC20Detailed;
[L9751]              assume DType[msgsender_MSG] != MinterRole;
[L9752]              assume DType[msgsender_MSG] != ERC20Mintable;
[L9753]              assume DType[msgsender_MSG] != ERC20Burnable;
[L9754]              assume DType[msgsender_MSG] != OMToken;
[L9755]              Alloc[msgsender_MSG] := true;
[L9756]  COND FALSE  !(choice == 23)
[L9763]  COND FALSE  !(choice == 22)
[L9770]  COND FALSE  !(choice == 21)
[L9777]  COND FALSE  !(choice == 20)
[L9783]  COND FALSE  !(choice == 19)
[L9789]  COND TRUE   choice == 18
[L9790]              gas := gas - 21000;
[L9791]  COND TRUE   gas >= 0
[L9792]              assume msgvalue_MSG == 0;
[L9793]  CALL        call __ret_0_allowance := allowance~address~address_ERC20(this, msgsender_MSG, msgvalue_MSG, owner_s247, spender_s247);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume _allowed_ERC20[this][owner_s247][spender_s247] >= 0 && _allowed_ERC20[this][owner_s247][spender_s247] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_allowance_ERC200 := true;
[L2]                 call_allowance_ERC200 := false;
[L2]                 revert := revert_hold;
[L430]               havoc __exception;
[L431]               revert := false;
[L432]   COND FALSE  !(__exception)
[L459]   CALL        call __ret_0_ := allowance~address~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, owner_s247, spender_s247);
[L4248]              __ret_0_ := _allowed_ERC20[this][owner_s247][spender_s247];
[L459]   RET         call __ret_0_ := allowance~address~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, owner_s247, spender_s247);
[L460]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((((__ret_0_ == _allowed_ERC20[this][owner_s247][spender_s247] && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowed_ERC20[this] == old(_allowed_ERC20[this])) && _minters_MinterRole[this] == old(_minters_MinterRole[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this])) && _paused_Pausable[this] == old(_paused_Pausable[this])) && _pausers_PauserRole[this] == old(_pausers_PauserRole[this]));
[L2]                 revert := revert_hold;
[L9793]  RET         call __ret_0_allowance := allowance~address~address_ERC20(this, msgsender_MSG, msgvalue_MSG, owner_s247, spender_s247);
[L9923]  RET         call CorralChoice_OMToken(this);

[2020-11-25 02:29:09,164 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 02:29:09,164 INFO  L82        PathProgramCache]: Analyzing trace with hash -1114046869, now seen corresponding path program 1 times
[2020-11-25 02:29:09,165 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 02:29:09,178 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 02:29:09,385 INFO  L134       CoverageAnalysis]: Checked inductivity of 1025 backedges. 6 proven. 29 refuted. 0 times theorem prover too weak. 990 trivial. 0 not checked.
[2020-11-25 02:29:09,386 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 02:29:09,386 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [8] total 8
[2020-11-25 02:29:09,386 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 02:29:09,387 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 8 interpolants.
[2020-11-25 02:29:09,387 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=13, Invalid=43, Unknown=0, NotChecked=0, Total=56
[2020-11-25 02:29:09,387 INFO  L87              Difference]: Start difference. First operand 5670 states and 6448 transitions. cyclomatic complexity: 780 Second operand 8 states.
[2020-11-25 02:29:09,522 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 02:29:09,522 INFO  L93              Difference]: Finished difference Result 5703 states and 6488 transitions.
[2020-11-25 02:29:09,522 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 8 states. 
[2020-11-25 02:29:09,522 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 5703 states and 6488 transitions.
[2020-11-25 02:29:09,531 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 02:29:09,541 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 5703 states to 5677 states and 6456 transitions.
[2020-11-25 02:29:09,541 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1283
[2020-11-25 02:29:09,542 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1283
[2020-11-25 02:29:09,542 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 5677 states and 6456 transitions.
[2020-11-25 02:29:09,546 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 02:29:09,546 INFO  L728         BuchiCegarLoop]: Abstraction has 5677 states and 6456 transitions.
[2020-11-25 02:29:09,550 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 5677 states and 6456 transitions.
[2020-11-25 02:29:09,579 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 5677 to 5677.
[2020-11-25 02:29:09,579 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 5677 states.
[2020-11-25 02:29:09,585 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 5677 states to 5677 states and 6456 transitions.
[2020-11-25 02:29:09,585 INFO  L751         BuchiCegarLoop]: Abstraction has 5677 states and 6456 transitions.
[2020-11-25 02:29:09,585 INFO  L631         BuchiCegarLoop]: Abstraction has 5677 states and 6456 transitions.
[2020-11-25 02:29:09,585 INFO  L445         BuchiCegarLoop]: ======== Iteration 8============
[2020-11-25 02:29:09,585 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 5677 states and 6456 transitions.
[2020-11-25 02:29:09,591 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 02:29:09,591 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 02:29:09,591 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 02:29:09,594 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [9, 9, 9, 9, 9, 9, 9, 9, 9, 7, 7, 7, 7, 7, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 02:29:09,594 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_allowance_ERC200 := false;
[L2]                 call_allowance_ERC200 := false;
[L2]     CALL        call main();
[L9913]              assume null == 0;
[L9914]  CALL        call this := FreshRefGenerator__success();
[L3962]              havoc newRef;
[L3963]              assume Alloc[newRef] == false;
[L3964]              Alloc[newRef] := true;
[L3965]              assume newRef != null;
[L9914]  RET         call this := FreshRefGenerator__success();
[L9915]              assume now >= 0;
[L9916]              assume DType[this] == OMToken;
[L9917]              assume msgvalue_MSG == 0;
[L9918]              gas := gas - 53000;
[L9919]  CALL        call OMToken_OMToken(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L2714]              havoc __exception;
[L2715]              revert := false;
[L2716]  COND FALSE  !(__exception)
[L2743]  CALL        call OMToken_OMToken__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L6180]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4004]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3989]              assume msgsender_MSG != null;
[L3990]              Balance[this] := 0;
[L4004]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  COND FALSE  !(revert)
[L6180]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6181]  COND FALSE  !(revert)
[L6184]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4206]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4004]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3989]              assume msgsender_MSG != null;
[L3990]              Balance[this] := 0;
[L4004]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  COND FALSE  !(revert)
[L4206]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4207]  COND FALSE  !(revert)
[L4210]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4182]              assume msgsender_MSG != null;
[L4183]              Balance[this] := 0;
[L4184]              _balances_ERC20[this] := zeroRefintArr();
[L4185]              sum__balances0[this] := 0;
[L4186]              _allowed_ERC20[this] := zeroRefRefintArr();
[L4187]              sum__allowed1[this] := 0;
[L4188]              _totalSupply_ERC20[this] := 0;
[L4210]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4211]  COND FALSE  !(revert)
[L6184]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6185]  COND FALSE  !(revert)
[L6188]  CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4974]  CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4928]              assume msgsender_MSG != null;
[L4929]              Balance[this] := 0;
[L4931]  CALL        call __var_22 := FreshRefGenerator__success();
[L3962]              havoc newRef;
[L3963]              assume Alloc[newRef] == false;
[L3964]              Alloc[newRef] := true;
[L3965]              assume newRef != null;
[L4931]  RET         call __var_22 := FreshRefGenerator__success();
[L4932]  COND FALSE  !(revert)
[L4935]              _pausers_PauserRole[this] := __var_22;
[L4937]  COND TRUE   DType[this] == OMToken
[L4938]  CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5128]  CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L4806]              __var_17 := null;
[L4807]  COND FALSE  !(!(account_s659 != null))
[L4811]  CALL        call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4877]              __var_21 := null;
[L4878]  COND FALSE  !(!(account_s713 != null))
[L4882]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s713]][account_s713];
[L4811]  RET         call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4812]  COND FALSE  !(revert)
[L4815]  COND FALSE  !(!!__var_18)
[L4819]              M_Ref_bool[bearer_Roles.Role[role_s659]][account_s659] := true;
[L5128]  RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L5129]  COND FALSE  !(revert)
[L5132]              assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L4938]  RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L4939]  COND FALSE  !(revert)
[L4974]  RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4975]  COND FALSE  !(revert)
[L6188]  RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6189]  COND FALSE  !(revert)
[L6192]  CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L5186]  CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4974]  CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4928]              assume msgsender_MSG != null;
[L4929]              Balance[this] := 0;
[L4931]  CALL        call __var_22 := FreshRefGenerator__success();
[L3962]              havoc newRef;
[L3963]              assume Alloc[newRef] == false;
[L3964]              Alloc[newRef] := true;
[L3965]              assume newRef != null;
[L4931]  RET         call __var_22 := FreshRefGenerator__success();
[L4932]  COND FALSE  !(revert)
[L4935]              _pausers_PauserRole[this] := __var_22;
[L4937]  COND TRUE   DType[this] == OMToken
[L4938]  CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5128]  CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L4806]              __var_17 := null;
[L4807]  COND FALSE  !(!(account_s659 != null))
[L4811]  CALL        call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4877]              __var_21 := null;
[L4878]  COND FALSE  !(!(account_s713 != null))
[L4882]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s713]][account_s713];
[L4811]  RET         call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4812]  COND FALSE  !(revert)
[L4815]  COND FALSE  !(!!__var_18)
[L4819]              M_Ref_bool[bearer_Roles.Role[role_s659]][account_s659] := true;
[L5128]  RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L5129]  COND FALSE  !(revert)
[L5132]              assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L4938]  RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L4939]  COND FALSE  !(revert)
[L4974]  RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4975]  COND FALSE  !(revert)
[L5186]  RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5187]  COND FALSE  !(revert)
[L5190]  CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5165]              assume msgsender_MSG != null;
[L5166]              Balance[this] := 0;
[L5167]              _paused_Pausable[this] := false;
[L5169]              _paused_Pausable[this] := false;
[L5190]  RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5191]  COND FALSE  !(revert)
[L6192]  RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6193]  COND FALSE  !(revert)
[L6196]  CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L5304]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4004]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3989]              assume msgsender_MSG != null;
[L3990]              Balance[this] := 0;
[L4004]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  COND FALSE  !(revert)
[L5304]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5305]  COND FALSE  !(revert)
[L5308]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4206]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4004]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3989]              assume msgsender_MSG != null;
[L3990]              Balance[this] := 0;
[L4004]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  COND FALSE  !(revert)
[L4206]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4207]  COND FALSE  !(revert)
[L4210]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4182]              assume msgsender_MSG != null;
[L4183]              Balance[this] := 0;
[L4184]              _balances_ERC20[this] := zeroRefintArr();
[L4185]              sum__balances0[this] := 0;
[L4186]              _allowed_ERC20[this] := zeroRefRefintArr();
[L4187]              sum__allowed1[this] := 0;
[L4188]              _totalSupply_ERC20[this] := 0;
[L4210]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4211]  COND FALSE  !(revert)
[L5308]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5309]  COND FALSE  !(revert)
[L5312]  CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4974]  CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4928]              assume msgsender_MSG != null;
[L4929]              Balance[this] := 0;
[L4931]  CALL        call __var_22 := FreshRefGenerator__success();
[L3962]              havoc newRef;
[L3963]              assume Alloc[newRef] == false;
[L3964]              Alloc[newRef] := true;
[L3965]              assume newRef != null;
[L4931]  RET         call __var_22 := FreshRefGenerator__success();
[L4932]  COND FALSE  !(revert)
[L4935]              _pausers_PauserRole[this] := __var_22;
[L4937]  COND FALSE  !(DType[this] == OMToken)
[L4942]  COND FALSE  !(DType[this] == ERC20Pausable)
[L4947]  COND TRUE   DType[this] == Pausable
[L4948]  CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5128]  CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L4806]              __var_17 := null;
[L4807]  COND FALSE  !(!(account_s659 != null))
[L4811]  CALL        call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4877]              __var_21 := null;
[L4878]  COND FALSE  !(!(account_s713 != null))
[L4882]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s713]][account_s713];
[L4811]  RET         call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4812]  COND FALSE  !(revert)
[L4815]  COND FALSE  !(!!__var_18)
[L4819]              M_Ref_bool[bearer_Roles.Role[role_s659]][account_s659] := true;
[L5128]  RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L5129]  COND FALSE  !(revert)
[L5132]              assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L4948]  RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L4949]  COND FALSE  !(revert)
[L4974]  RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4975]  COND FALSE  !(revert)
[L5312]  RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5313]  COND FALSE  !(revert)
[L5316]  CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L5186]  CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4974]  CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4928]              assume msgsender_MSG != null;
[L4929]              Balance[this] := 0;
[L4931]  CALL        call __var_22 := FreshRefGenerator__success();
[L3962]              havoc newRef;
[L3963]              assume Alloc[newRef] == false;
[L3964]              Alloc[newRef] := true;
[L3965]              assume newRef != null;
[L4931]  RET         call __var_22 := FreshRefGenerator__success();
[L4932]  COND FALSE  !(revert)
[L4935]              _pausers_PauserRole[this] := __var_22;
[L4937]  COND TRUE   DType[this] == OMToken
[L4938]  CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5128]  CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L4806]              __var_17 := null;
[L4807]  COND FALSE  !(!(account_s659 != null))
[L4811]  CALL        call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4877]              __var_21 := null;
[L4878]  COND FALSE  !(!(account_s713 != null))
[L4882]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s713]][account_s713];
[L4811]  RET         call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4812]  COND FALSE  !(revert)
[L4815]  COND FALSE  !(!!__var_18)
[L4819]              M_Ref_bool[bearer_Roles.Role[role_s659]][account_s659] := true;
[L5128]  RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L5129]  COND FALSE  !(revert)
[L5132]              assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L4938]  RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L4939]  COND FALSE  !(revert)
[L4974]  RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4975]  COND FALSE  !(revert)
[L5186]  RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5187]  COND FALSE  !(revert)
[L5190]  CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5165]              assume msgsender_MSG != null;
[L5166]              Balance[this] := 0;
[L5167]              _paused_Pausable[this] := false;
[L5169]              _paused_Pausable[this] := false;
[L5190]  RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5191]  COND FALSE  !(revert)
[L5316]  RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L5317]  COND FALSE  !(revert)
[L5320]  CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5273]              assume msgsender_MSG != null;
[L5274]              Balance[this] := 0;
[L5320]  RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5321]  COND FALSE  !(revert)
[L6196]  RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6197]  COND FALSE  !(revert)
[L6200]  CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L5618]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4004]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3989]              assume msgsender_MSG != null;
[L3990]              Balance[this] := 0;
[L4004]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  COND FALSE  !(revert)
[L5618]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5619]  COND FALSE  !(revert)
[L5622]  CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1022, symbol_s1022, decimals_s1022);
[L5593]              assume msgsender_MSG != null;
[L5594]              Balance[this] := 0;
[L5595]              _name_ERC20Detailed[this] := -1676908070;
[L5596]              _symbol_ERC20Detailed[this] := -1676908070;
[L5597]              _decimals_ERC20Detailed[this] := 0;
[L5599]              _name_ERC20Detailed[this] := name_s1022;
[L5600]              _symbol_ERC20Detailed[this] := symbol_s1022;
[L5601]              _decimals_ERC20Detailed[this] := decimals_s1022;
[L5622]  RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1022, symbol_s1022, decimals_s1022);
[L5623]  COND FALSE  !(revert)
[L6200]  RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L6201]  COND FALSE  !(revert)
[L6204]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5742]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5701]              assume msgsender_MSG != null;
[L5702]              Balance[this] := 0;
[L5704]  CALL        call __var_35 := FreshRefGenerator__success();
[L3962]              havoc newRef;
[L3963]              assume Alloc[newRef] == false;
[L3964]              Alloc[newRef] := true;
[L3965]              assume newRef != null;
[L5704]  RET         call __var_35 := FreshRefGenerator__success();
[L5705]  COND FALSE  !(revert)
[L5708]              _minters_MinterRole[this] := __var_35;
[L5710]  COND FALSE  !(DType[this] == OMToken)
[L5715]  COND TRUE   DType[this] == ERC20Mintable
[L5716]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5876]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1130);
[L4806]              __var_17 := null;
[L4807]  COND FALSE  !(!(account_s659 != null))
[L4811]  CALL        call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4877]              __var_21 := null;
[L4878]  COND FALSE  !(!(account_s713 != null))
[L4882]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s713]][account_s713];
[L4811]  RET         call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4812]  COND FALSE  !(revert)
[L4815]  COND FALSE  !(!!__var_18)
[L4819]              M_Ref_bool[bearer_Roles.Role[role_s659]][account_s659] := true;
[L5876]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1130);
[L5877]  COND FALSE  !(revert)
[L5880]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L5716]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5717]  COND FALSE  !(revert)
[L5742]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5743]  COND FALSE  !(revert)
[L6204]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6205]  COND FALSE  !(revert)
[L6208]  CALL        call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L5938]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4004]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3989]              assume msgsender_MSG != null;
[L3990]              Balance[this] := 0;
[L4004]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  COND FALSE  !(revert)
[L5938]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5939]  COND FALSE  !(revert)
[L5942]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4206]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4004]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3989]              assume msgsender_MSG != null;
[L3990]              Balance[this] := 0;
[L4004]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  COND FALSE  !(revert)
[L4206]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4207]  COND FALSE  !(revert)
[L4210]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4182]              assume msgsender_MSG != null;
[L4183]              Balance[this] := 0;
[L4184]              _balances_ERC20[this] := zeroRefintArr();
[L4185]              sum__balances0[this] := 0;
[L4186]              _allowed_ERC20[this] := zeroRefRefintArr();
[L4187]              sum__allowed1[this] := 0;
[L4188]              _totalSupply_ERC20[this] := 0;
[L4210]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4211]  COND FALSE  !(revert)
[L5942]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5943]  COND FALSE  !(revert)
[L5946]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5742]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5701]              assume msgsender_MSG != null;
[L5702]              Balance[this] := 0;
[L5704]  CALL        call __var_35 := FreshRefGenerator__success();
[L3962]              havoc newRef;
[L3963]              assume Alloc[newRef] == false;
[L3964]              Alloc[newRef] := true;
[L3965]              assume newRef != null;
[L5704]  RET         call __var_35 := FreshRefGenerator__success();
[L5705]  COND FALSE  !(revert)
[L5708]              _minters_MinterRole[this] := __var_35;
[L5710]  COND FALSE  !(DType[this] == OMToken)
[L5715]  COND TRUE   DType[this] == ERC20Mintable
[L5716]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5876]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1130);
[L4806]              __var_17 := null;
[L4807]  COND FALSE  !(!(account_s659 != null))
[L4811]  CALL        call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4877]              __var_21 := null;
[L4878]  COND FALSE  !(!(account_s713 != null))
[L4882]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s713]][account_s713];
[L4811]  RET         call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4812]  COND FALSE  !(revert)
[L4815]  COND FALSE  !(!!__var_18)
[L4819]              M_Ref_bool[bearer_Roles.Role[role_s659]][account_s659] := true;
[L5876]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1130);
[L5877]  COND FALSE  !(revert)
[L5880]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L5716]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5717]  COND FALSE  !(revert)
[L5742]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5743]  COND FALSE  !(revert)
[L5946]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5947]  COND FALSE  !(revert)
[L5950]  CALL        call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5911]              assume msgsender_MSG != null;
[L5912]              Balance[this] := 0;
[L5950]  RET         call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5951]  COND FALSE  !(revert)
[L6208]  RET         call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L6209]  COND FALSE  !(revert)
[L6212]  CALL        call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6036]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4004]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3989]              assume msgsender_MSG != null;
[L3990]              Balance[this] := 0;
[L4004]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  COND FALSE  !(revert)
[L6036]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6037]  COND FALSE  !(revert)
[L6040]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4206]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4004]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3989]              assume msgsender_MSG != null;
[L3990]              Balance[this] := 0;
[L4004]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  COND FALSE  !(revert)
[L4206]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4207]  COND FALSE  !(revert)
[L4210]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4182]              assume msgsender_MSG != null;
[L4183]              Balance[this] := 0;
[L4184]              _balances_ERC20[this] := zeroRefintArr();
[L4185]              sum__balances0[this] := 0;
[L4186]              _allowed_ERC20[this] := zeroRefRefintArr();
[L4187]              sum__allowed1[this] := 0;
[L4188]              _totalSupply_ERC20[this] := 0;
[L4210]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4211]  COND FALSE  !(revert)
[L6040]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6041]  COND FALSE  !(revert)
[L6044]  CALL        call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6013]              assume msgsender_MSG != null;
[L6014]              Balance[this] := 0;
[L6044]  RET         call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6045]  COND FALSE  !(revert)
[L6212]  RET         call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6213]  COND FALSE  !(revert)
[L6216]  CALL        call OMToken_OMToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L6129]              assume msgsender_MSG != null;
[L6130]              Balance[this] := 0;
[L6216]  RET         call OMToken_OMToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L6217]  COND FALSE  !(revert)
[L2743]  RET         call OMToken_OMToken__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L2744]              assume !revert && gas >= 0;
[L9919]  RET         call OMToken_OMToken(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L9920]              assume !revert && gas >= 0;
[L9923]  CALL        call CorralChoice_OMToken(this);
[L9689]              havoc msgsender_MSG;
[L9690]              havoc msgvalue_MSG;
[L9691]              havoc choice;
[L9692]              havoc to_s916;
[L9693]              havoc value_s916;
[L9694]              havoc __ret_0_transfer;
[L9695]              havoc spender_s955;
[L9696]              havoc value_s955;
[L9697]              havoc __ret_0_approve;
[L9698]              havoc from_s937;
[L9699]              havoc to_s937;
[L9700]              havoc value_s937;
[L9701]              havoc __ret_0_transferFrom;
[L9702]              havoc __ret_0_totalSupply;
[L9703]              havoc owner_s231;
[L9704]              havoc __ret_0_balanceOf;
[L9705]              havoc owner_s247;
[L9706]              havoc spender_s247;
[L9707]              havoc __ret_0_allowance;
[L9708]              havoc spender_s973;
[L9709]              havoc addedValue_s973;
[L9710]              havoc success_s973;
[L9711]              havoc spender_s991;
[L9712]              havoc subtractedValue_s991;
[L9713]              havoc success_s991;
[L9714]              havoc account_s760;
[L9715]              havoc __ret_0_isPauser;
[L9716]              havoc account_s772;
[L9717]              havoc __ret_0_paused;
[L9718]              havoc name_s1022;
[L9719]              havoc symbol_s1022;
[L9720]              havoc decimals_s1022;
[L9721]              havoc __ret_0_name;
[L9722]              havoc __ret_0_symbol;
[L9723]              havoc __ret_0_decimals;
[L9724]              havoc account_s1093;
[L9725]              havoc __ret_0_isMinter;
[L9726]              havoc account_s1105;
[L9727]              havoc to_s1170;
[L9728]              havoc value_s1170;
[L9729]              havoc __ret_0_mint;
[L9730]              havoc value_s1185;
[L9731]              havoc from_s1198;
[L9732]              havoc value_s1198;
[L9733]              havoc name_s1230;
[L9734]              havoc symbol_s1230;
[L9735]              havoc decimals_s1230;
[L9736]              havoc tmpNow;
[L9737]              havoc gas;
[L9738]              assume gas > 4000000 && gas <= 8000000;
[L9739]              tmpNow := now;
[L9740]              havoc now;
[L9741]              assume now > tmpNow;
[L9742]              assume msgsender_MSG != null;
[L9743]              assume DType[msgsender_MSG] != IERC20;
[L9744]              assume DType[msgsender_MSG] != SafeMath;
[L9745]              assume DType[msgsender_MSG] != ERC20;
[L9746]              assume DType[msgsender_MSG] != Roles;
[L9747]              assume DType[msgsender_MSG] != PauserRole;
[L9748]              assume DType[msgsender_MSG] != Pausable;
[L9749]              assume DType[msgsender_MSG] != ERC20Pausable;
[L9750]              assume DType[msgsender_MSG] != ERC20Detailed;
[L9751]              assume DType[msgsender_MSG] != MinterRole;
[L9752]              assume DType[msgsender_MSG] != ERC20Mintable;
[L9753]              assume DType[msgsender_MSG] != ERC20Burnable;
[L9754]              assume DType[msgsender_MSG] != OMToken;
[L9755]              Alloc[msgsender_MSG] := true;
[L9756]  COND FALSE  !(choice == 23)
[L9763]  COND FALSE  !(choice == 22)
[L9770]  COND FALSE  !(choice == 21)
[L9777]  COND FALSE  !(choice == 20)
[L9783]  COND FALSE  !(choice == 19)
[L9789]  COND TRUE   choice == 18
[L9790]              gas := gas - 21000;
[L9791]  COND TRUE   gas >= 0
[L9792]              assume msgvalue_MSG == 0;
[L9793]  CALL        call __ret_0_allowance := allowance~address~address_ERC20(this, msgsender_MSG, msgvalue_MSG, owner_s247, spender_s247);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume _allowed_ERC20[this][owner_s247][spender_s247] >= 0 && _allowed_ERC20[this][owner_s247][spender_s247] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_allowance_ERC200 := true;
[L2]                 call_allowance_ERC200 := false;
[L2]                 revert := revert_hold;
[L430]               havoc __exception;
[L431]               revert := false;
[L432]   COND FALSE  !(__exception)
[L459]   CALL        call __ret_0_ := allowance~address~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, owner_s247, spender_s247);
[L4248]              __ret_0_ := _allowed_ERC20[this][owner_s247][spender_s247];
[L459]   RET         call __ret_0_ := allowance~address~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, owner_s247, spender_s247);
[L460]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((((__ret_0_ == _allowed_ERC20[this][owner_s247][spender_s247] && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowed_ERC20[this] == old(_allowed_ERC20[this])) && _minters_MinterRole[this] == old(_minters_MinterRole[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this])) && _paused_Pausable[this] == old(_paused_Pausable[this])) && _pausers_PauserRole[this] == old(_pausers_PauserRole[this]));
[L2]                 revert := revert_hold;
[L9793]  RET         call __ret_0_allowance := allowance~address~address_ERC20(this, msgsender_MSG, msgvalue_MSG, owner_s247, spender_s247);
[L9923]  RET         call CorralChoice_OMToken(this);

Loop:
[L9923]  CALL        call CorralChoice_OMToken(this);
[L9689]              havoc msgsender_MSG;
[L9690]              havoc msgvalue_MSG;
[L9691]              havoc choice;
[L9692]              havoc to_s916;
[L9693]              havoc value_s916;
[L9694]              havoc __ret_0_transfer;
[L9695]              havoc spender_s955;
[L9696]              havoc value_s955;
[L9697]              havoc __ret_0_approve;
[L9698]              havoc from_s937;
[L9699]              havoc to_s937;
[L9700]              havoc value_s937;
[L9701]              havoc __ret_0_transferFrom;
[L9702]              havoc __ret_0_totalSupply;
[L9703]              havoc owner_s231;
[L9704]              havoc __ret_0_balanceOf;
[L9705]              havoc owner_s247;
[L9706]              havoc spender_s247;
[L9707]              havoc __ret_0_allowance;
[L9708]              havoc spender_s973;
[L9709]              havoc addedValue_s973;
[L9710]              havoc success_s973;
[L9711]              havoc spender_s991;
[L9712]              havoc subtractedValue_s991;
[L9713]              havoc success_s991;
[L9714]              havoc account_s760;
[L9715]              havoc __ret_0_isPauser;
[L9716]              havoc account_s772;
[L9717]              havoc __ret_0_paused;
[L9718]              havoc name_s1022;
[L9719]              havoc symbol_s1022;
[L9720]              havoc decimals_s1022;
[L9721]              havoc __ret_0_name;
[L9722]              havoc __ret_0_symbol;
[L9723]              havoc __ret_0_decimals;
[L9724]              havoc account_s1093;
[L9725]              havoc __ret_0_isMinter;
[L9726]              havoc account_s1105;
[L9727]              havoc to_s1170;
[L9728]              havoc value_s1170;
[L9729]              havoc __ret_0_mint;
[L9730]              havoc value_s1185;
[L9731]              havoc from_s1198;
[L9732]              havoc value_s1198;
[L9733]              havoc name_s1230;
[L9734]              havoc symbol_s1230;
[L9735]              havoc decimals_s1230;
[L9736]              havoc tmpNow;
[L9737]              havoc gas;
[L9738]              assume gas > 4000000 && gas <= 8000000;
[L9739]              tmpNow := now;
[L9740]              havoc now;
[L9741]              assume now > tmpNow;
[L9742]              assume msgsender_MSG != null;
[L9743]              assume DType[msgsender_MSG] != IERC20;
[L9744]              assume DType[msgsender_MSG] != SafeMath;
[L9745]              assume DType[msgsender_MSG] != ERC20;
[L9746]              assume DType[msgsender_MSG] != Roles;
[L9747]              assume DType[msgsender_MSG] != PauserRole;
[L9748]              assume DType[msgsender_MSG] != Pausable;
[L9749]              assume DType[msgsender_MSG] != ERC20Pausable;
[L9750]              assume DType[msgsender_MSG] != ERC20Detailed;
[L9751]              assume DType[msgsender_MSG] != MinterRole;
[L9752]              assume DType[msgsender_MSG] != ERC20Mintable;
[L9753]              assume DType[msgsender_MSG] != ERC20Burnable;
[L9754]              assume DType[msgsender_MSG] != OMToken;
[L9755]              Alloc[msgsender_MSG] := true;
[L9756]  COND FALSE  !(choice == 23)
[L9763]  COND FALSE  !(choice == 22)
[L9770]  COND FALSE  !(choice == 21)
[L9777]  COND FALSE  !(choice == 20)
[L9783]  COND FALSE  !(choice == 19)
[L9789]  COND TRUE   choice == 18
[L9790]              gas := gas - 21000;
[L9791]  COND TRUE   gas >= 0
[L9792]              assume msgvalue_MSG == 0;
[L9793]  CALL        call __ret_0_allowance := allowance~address~address_ERC20(this, msgsender_MSG, msgvalue_MSG, owner_s247, spender_s247);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume _allowed_ERC20[this][owner_s247][spender_s247] >= 0 && _allowed_ERC20[this][owner_s247][spender_s247] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_allowance_ERC200 := true;
[L2]                 call_allowance_ERC200 := false;
[L2]                 revert := revert_hold;
[L430]               havoc __exception;
[L431]               revert := false;
[L432]   COND FALSE  !(__exception)
[L459]   CALL        call __ret_0_ := allowance~address~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, owner_s247, spender_s247);
[L4248]              __ret_0_ := _allowed_ERC20[this][owner_s247][spender_s247];
[L459]   RET         call __ret_0_ := allowance~address~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, owner_s247, spender_s247);
[L460]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((((__ret_0_ == _allowed_ERC20[this][owner_s247][spender_s247] && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowed_ERC20[this] == old(_allowed_ERC20[this])) && _minters_MinterRole[this] == old(_minters_MinterRole[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this])) && _paused_Pausable[this] == old(_paused_Pausable[this])) && _pausers_PauserRole[this] == old(_pausers_PauserRole[this]));
[L2]                 revert := revert_hold;
[L9793]  RET         call __ret_0_allowance := allowance~address~address_ERC20(this, msgsender_MSG, msgvalue_MSG, owner_s247, spender_s247);
[L9923]  RET         call CorralChoice_OMToken(this);

[2020-11-25 02:29:09,599 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 02:29:09,599 INFO  L82        PathProgramCache]: Analyzing trace with hash 310112043, now seen corresponding path program 2 times
[2020-11-25 02:29:09,600 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 02:29:09,614 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 02:29:09,797 INFO  L134       CoverageAnalysis]: Checked inductivity of 1019 backedges. 12 proven. 6 refuted. 0 times theorem prover too weak. 1001 trivial. 0 not checked.
[2020-11-25 02:29:09,798 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 02:29:09,798 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [8] total 8
[2020-11-25 02:29:09,798 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 02:29:09,798 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 8 interpolants.
[2020-11-25 02:29:09,798 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=13, Invalid=43, Unknown=0, NotChecked=0, Total=56
[2020-11-25 02:29:09,798 INFO  L87              Difference]: Start difference. First operand 5677 states and 6456 transitions. cyclomatic complexity: 781 Second operand 8 states.
[2020-11-25 02:29:09,942 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 02:29:09,942 INFO  L93              Difference]: Finished difference Result 5710 states and 6496 transitions.
[2020-11-25 02:29:09,942 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 8 states. 
[2020-11-25 02:29:09,942 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 5710 states and 6496 transitions.
[2020-11-25 02:29:09,953 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 02:29:09,963 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 5710 states to 5677 states and 6455 transitions.
[2020-11-25 02:29:09,963 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1283
[2020-11-25 02:29:09,964 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1283
[2020-11-25 02:29:09,964 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 5677 states and 6455 transitions.
[2020-11-25 02:29:09,968 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 02:29:09,969 INFO  L728         BuchiCegarLoop]: Abstraction has 5677 states and 6455 transitions.
[2020-11-25 02:29:09,973 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 5677 states and 6455 transitions.
[2020-11-25 02:29:10,006 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 5677 to 5677.
[2020-11-25 02:29:10,006 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 5677 states.
[2020-11-25 02:29:10,012 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 5677 states to 5677 states and 6455 transitions.
[2020-11-25 02:29:10,012 INFO  L751         BuchiCegarLoop]: Abstraction has 5677 states and 6455 transitions.
[2020-11-25 02:29:10,012 INFO  L631         BuchiCegarLoop]: Abstraction has 5677 states and 6455 transitions.
[2020-11-25 02:29:10,012 INFO  L445         BuchiCegarLoop]: ======== Iteration 9============
[2020-11-25 02:29:10,012 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 5677 states and 6455 transitions.
[2020-11-25 02:29:10,018 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 02:29:10,019 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 02:29:10,019 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 02:29:10,021 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [9, 9, 9, 9, 9, 9, 9, 9, 9, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 02:29:10,021 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_allowance_ERC200 := false;
[L2]                 call_allowance_ERC200 := false;
[L2]     CALL        call main();
[L9913]              assume null == 0;
[L9914]  CALL        call this := FreshRefGenerator__success();
[L3962]              havoc newRef;
[L3963]              assume Alloc[newRef] == false;
[L3964]              Alloc[newRef] := true;
[L3965]              assume newRef != null;
[L9914]  RET         call this := FreshRefGenerator__success();
[L9915]              assume now >= 0;
[L9916]              assume DType[this] == OMToken;
[L9917]              assume msgvalue_MSG == 0;
[L9918]              gas := gas - 53000;
[L9919]  CALL        call OMToken_OMToken(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L2714]              havoc __exception;
[L2715]              revert := false;
[L2716]  COND TRUE   __exception
[L2717]              __tmp__Balance := Balance;
[L2718]              __tmp__DType := DType;
[L2719]              __tmp__Alloc := Alloc;
[L2720]              __tmp__balance_ADDR := balance_ADDR;
[L2721]              __tmp__M_Ref_int := M_Ref_int;
[L2722]              __tmp__sum__balances0 := sum__balances0;
[L2723]              __tmp__alloc__allowed_ERC20_lvl0 := alloc__allowed_ERC20_lvl0;
[L2724]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L2725]              __tmp__sum__allowed1 := sum__allowed1;
[L2726]              __tmp__M_Ref_bool := M_Ref_bool;
[L2727]              __tmp__sum := sum;
[L2728]              __tmp__Length := Length;
[L2729]              __tmp__now := now;
[L2730]              __tmp___balances_ERC20 := _balances_ERC20;
[L2731]              __tmp___allowed_ERC20 := _allowed_ERC20;
[L2732]              __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L2733]              __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L2734]              __tmp___pausers_PauserRole := _pausers_PauserRole;
[L2735]              __tmp___paused_Pausable := _paused_Pausable;
[L2736]              __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L2737]              __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L2738]              __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L2739]              __tmp___minters_MinterRole := _minters_MinterRole;
[L2740]  CALL        call OMToken_OMToken__fail(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L6136]  CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L3996]  CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3981]              assume msgsender_MSG != null;
[L3982]              __tmp__Balance[this] := 0;
[L3996]  RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3997]  COND FALSE  !(revert)
[L6136]  RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6137]  COND FALSE  !(revert)
[L6140]  CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4194]  CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L3996]  CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3981]              assume msgsender_MSG != null;
[L3982]              __tmp__Balance[this] := 0;
[L3996]  RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3997]  COND FALSE  !(revert)
[L4194]  RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4195]  COND FALSE  !(revert)
[L4198]  CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4169]              assume msgsender_MSG != null;
[L4170]              __tmp__Balance[this] := 0;
[L4171]              __tmp___balances_ERC20[this] := zeroRefintArr();
[L4172]              __tmp__sum__balances0[this] := 0;
[L4173]              __tmp___allowed_ERC20[this] := zeroRefRefintArr();
[L4174]              __tmp__sum__allowed1[this] := 0;
[L4175]              __tmp___totalSupply_ERC20[this] := 0;
[L4198]  RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4199]  COND FALSE  !(revert)
[L6140]  RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6141]  COND FALSE  !(revert)
[L6144]  CALL        call PauserRole_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L4965]  CALL        call PauserRole_PauserRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4890]              assume msgsender_MSG != null;
[L4891]              __tmp__Balance[this] := 0;
[L4893]  CALL        call __var_22 := FreshRefGenerator__fail();
[L3954]              havoc newRef;
[L3955]              assume __tmp__Alloc[newRef] == false;
[L3956]              __tmp__Alloc[newRef] := true;
[L3957]              assume newRef != null;
[L4893]  RET         call __var_22 := FreshRefGenerator__fail();
[L4894]  COND FALSE  !(revert)
[L4897]              __tmp___pausers_PauserRole[this] := __var_22;
[L4899]  COND FALSE  !(__tmp__DType[this] == OMToken)
[L4904]  COND FALSE  !(__tmp__DType[this] == ERC20Pausable)
[L4909]  COND FALSE  !(__tmp__DType[this] == Pausable)
[L4914]  COND TRUE   __tmp__DType[this] == PauserRole
[L4915]  CALL        call _addPauser~address_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5120]  CALL        call add~Role~address_Roles__fail(this, this, 0, __tmp___pausers_PauserRole[this], account_s797);
[L4786]              __var_17 := null;
[L4787]  COND FALSE  !(!(account_s659 != null))
[L4791]  CALL        call __var_18 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4865]              __var_21 := null;
[L4866]  COND FALSE  !(!(account_s713 != null))
[L4870]              __ret_0_ := __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s713]][account_s713];
[L4791]  RET         call __var_18 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4792]  COND FALSE  !(revert)
[L4795]  COND FALSE  !(!!__var_18)
[L4799]              __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s659]][account_s659] := true;
[L5120]  RET         call add~Role~address_Roles__fail(this, this, 0, __tmp___pausers_PauserRole[this], account_s797);
[L5121]  COND FALSE  !(revert)
[L4915]  RET         call _addPauser~address_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L4916]  COND FALSE  !(revert)
[L4965]  RET         call PauserRole_PauserRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4966]  COND FALSE  !(revert)
[L6144]  RET         call PauserRole_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L6145]  COND FALSE  !(revert)
[L6148]  CALL        call Pausable_Pausable__fail(this, msgsender_MSG, msgvalue_MSG);
[L5174]  CALL        call PauserRole_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L4965]  CALL        call PauserRole_PauserRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4890]              assume msgsender_MSG != null;
[L4891]              __tmp__Balance[this] := 0;
[L4893]  CALL        call __var_22 := FreshRefGenerator__fail();
[L3954]              havoc newRef;
[L3955]              assume __tmp__Alloc[newRef] == false;
[L3956]              __tmp__Alloc[newRef] := true;
[L3957]              assume newRef != null;
[L4893]  RET         call __var_22 := FreshRefGenerator__fail();
[L4894]  COND FALSE  !(revert)
[L4897]              __tmp___pausers_PauserRole[this] := __var_22;
[L4899]  COND FALSE  !(__tmp__DType[this] == OMToken)
[L4904]  COND FALSE  !(__tmp__DType[this] == ERC20Pausable)
[L4909]  COND FALSE  !(__tmp__DType[this] == Pausable)
[L4914]  COND TRUE   __tmp__DType[this] == PauserRole
[L4915]  CALL        call _addPauser~address_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5120]  CALL        call add~Role~address_Roles__fail(this, this, 0, __tmp___pausers_PauserRole[this], account_s797);
[L4786]              __var_17 := null;
[L4787]  COND FALSE  !(!(account_s659 != null))
[L4791]  CALL        call __var_18 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4865]              __var_21 := null;
[L4866]  COND FALSE  !(!(account_s713 != null))
[L4870]              __ret_0_ := __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s713]][account_s713];
[L4791]  RET         call __var_18 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4792]  COND FALSE  !(revert)
[L4795]  COND FALSE  !(!!__var_18)
[L4799]              __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s659]][account_s659] := true;
[L5120]  RET         call add~Role~address_Roles__fail(this, this, 0, __tmp___pausers_PauserRole[this], account_s797);
[L5121]  COND FALSE  !(revert)
[L4915]  RET         call _addPauser~address_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L4916]  COND FALSE  !(revert)
[L4965]  RET         call PauserRole_PauserRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4966]  COND FALSE  !(revert)
[L5174]  RET         call PauserRole_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L5175]  COND FALSE  !(revert)
[L5178]  CALL        call Pausable_Pausable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5155]              assume msgsender_MSG != null;
[L5156]              __tmp__Balance[this] := 0;
[L5157]              __tmp___paused_Pausable[this] := false;
[L5159]              __tmp___paused_Pausable[this] := false;
[L5178]  RET         call Pausable_Pausable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5179]  COND FALSE  !(revert)
[L6148]  RET         call Pausable_Pausable__fail(this, msgsender_MSG, msgvalue_MSG);
[L6149]  COND FALSE  !(revert)
[L6152]  CALL        call ERC20Pausable_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG);
[L5280]  CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L3996]  CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3981]              assume msgsender_MSG != null;
[L3982]              __tmp__Balance[this] := 0;
[L3996]  RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3997]  COND FALSE  !(revert)
[L5280]  RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L5281]  COND FALSE  !(revert)
[L5284]  CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4194]  CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L3996]  CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3981]              assume msgsender_MSG != null;
[L3982]              __tmp__Balance[this] := 0;
[L3996]  RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3997]  COND FALSE  !(revert)
[L4194]  RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4195]  COND FALSE  !(revert)
[L4198]  CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4169]              assume msgsender_MSG != null;
[L4170]              __tmp__Balance[this] := 0;
[L4171]              __tmp___balances_ERC20[this] := zeroRefintArr();
[L4172]              __tmp__sum__balances0[this] := 0;
[L4173]              __tmp___allowed_ERC20[this] := zeroRefRefintArr();
[L4174]              __tmp__sum__allowed1[this] := 0;
[L4175]              __tmp___totalSupply_ERC20[this] := 0;
[L4198]  RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4199]  COND FALSE  !(revert)
[L5284]  RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L5285]  COND FALSE  !(revert)
[L5288]  CALL        call PauserRole_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L4965]  CALL        call PauserRole_PauserRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4890]              assume msgsender_MSG != null;
[L4891]              __tmp__Balance[this] := 0;
[L4893]  CALL        call __var_22 := FreshRefGenerator__fail();
[L3954]              havoc newRef;
[L3955]              assume __tmp__Alloc[newRef] == false;
[L3956]              __tmp__Alloc[newRef] := true;
[L3957]              assume newRef != null;
[L4893]  RET         call __var_22 := FreshRefGenerator__fail();
[L4894]  COND FALSE  !(revert)
[L4897]              __tmp___pausers_PauserRole[this] := __var_22;
[L4899]  COND FALSE  !(__tmp__DType[this] == OMToken)
[L4904]  COND FALSE  !(__tmp__DType[this] == ERC20Pausable)
[L4909]  COND FALSE  !(__tmp__DType[this] == Pausable)
[L4914]  COND TRUE   __tmp__DType[this] == PauserRole
[L4915]  CALL        call _addPauser~address_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5120]  CALL        call add~Role~address_Roles__fail(this, this, 0, __tmp___pausers_PauserRole[this], account_s797);
[L4786]              __var_17 := null;
[L4787]  COND FALSE  !(!(account_s659 != null))
[L4791]  CALL        call __var_18 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4865]              __var_21 := null;
[L4866]  COND FALSE  !(!(account_s713 != null))
[L4870]              __ret_0_ := __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s713]][account_s713];
[L4791]  RET         call __var_18 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4792]  COND FALSE  !(revert)
[L4795]  COND FALSE  !(!!__var_18)
[L4799]              __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s659]][account_s659] := true;
[L5120]  RET         call add~Role~address_Roles__fail(this, this, 0, __tmp___pausers_PauserRole[this], account_s797);
[L5121]  COND FALSE  !(revert)
[L4915]  RET         call _addPauser~address_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L4916]  COND FALSE  !(revert)
[L4965]  RET         call PauserRole_PauserRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4966]  COND FALSE  !(revert)
[L5288]  RET         call PauserRole_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L5289]  COND FALSE  !(revert)
[L5292]  CALL        call Pausable_Pausable__fail(this, msgsender_MSG, msgvalue_MSG);
[L5174]  CALL        call PauserRole_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L4965]  CALL        call PauserRole_PauserRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4890]              assume msgsender_MSG != null;
[L4891]              __tmp__Balance[this] := 0;
[L4893]  CALL        call __var_22 := FreshRefGenerator__fail();
[L3954]              havoc newRef;
[L3955]              assume __tmp__Alloc[newRef] == false;
[L3956]              __tmp__Alloc[newRef] := true;
[L3957]              assume newRef != null;
[L4893]  RET         call __var_22 := FreshRefGenerator__fail();
[L4894]  COND FALSE  !(revert)
[L4897]              __tmp___pausers_PauserRole[this] := __var_22;
[L4899]  COND FALSE  !(__tmp__DType[this] == OMToken)
[L4904]  COND FALSE  !(__tmp__DType[this] == ERC20Pausable)
[L4909]  COND FALSE  !(__tmp__DType[this] == Pausable)
[L4914]  COND TRUE   __tmp__DType[this] == PauserRole
[L4915]  CALL        call _addPauser~address_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5120]  CALL        call add~Role~address_Roles__fail(this, this, 0, __tmp___pausers_PauserRole[this], account_s797);
[L4786]              __var_17 := null;
[L4787]  COND FALSE  !(!(account_s659 != null))
[L4791]  CALL        call __var_18 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4865]              __var_21 := null;
[L4866]  COND FALSE  !(!(account_s713 != null))
[L4870]              __ret_0_ := __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s713]][account_s713];
[L4791]  RET         call __var_18 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4792]  COND FALSE  !(revert)
[L4795]  COND FALSE  !(!!__var_18)
[L4799]              __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s659]][account_s659] := true;
[L5120]  RET         call add~Role~address_Roles__fail(this, this, 0, __tmp___pausers_PauserRole[this], account_s797);
[L5121]  COND FALSE  !(revert)
[L4915]  RET         call _addPauser~address_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L4916]  COND FALSE  !(revert)
[L4965]  RET         call PauserRole_PauserRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4966]  COND FALSE  !(revert)
[L5174]  RET         call PauserRole_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L5175]  COND FALSE  !(revert)
[L5178]  CALL        call Pausable_Pausable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5155]              assume msgsender_MSG != null;
[L5156]              __tmp__Balance[this] := 0;
[L5157]              __tmp___paused_Pausable[this] := false;
[L5159]              __tmp___paused_Pausable[this] := false;
[L5178]  RET         call Pausable_Pausable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5179]  COND FALSE  !(revert)
[L5292]  RET         call Pausable_Pausable__fail(this, msgsender_MSG, msgvalue_MSG);
[L5293]  COND FALSE  !(revert)
[L5296]  CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5265]              assume msgsender_MSG != null;
[L5266]              __tmp__Balance[this] := 0;
[L5296]  RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5297]  COND FALSE  !(revert)
[L6152]  RET         call ERC20Pausable_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG);
[L6153]  COND FALSE  !(revert)
[L6156]  CALL        call ERC20Detailed_ERC20Detailed__fail(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L5606]  CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L3996]  CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3981]              assume msgsender_MSG != null;
[L3982]              __tmp__Balance[this] := 0;
[L3996]  RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3997]  COND FALSE  !(revert)
[L5606]  RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L5607]  COND FALSE  !(revert)
[L5610]  CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, name_s1022, symbol_s1022, decimals_s1022);
[L5579]              assume msgsender_MSG != null;
[L5580]              __tmp__Balance[this] := 0;
[L5581]              __tmp___name_ERC20Detailed[this] := -1676908070;
[L5582]              __tmp___symbol_ERC20Detailed[this] := -1676908070;
[L5583]              __tmp___decimals_ERC20Detailed[this] := 0;
[L5585]              __tmp___name_ERC20Detailed[this] := name_s1022;
[L5586]              __tmp___symbol_ERC20Detailed[this] := symbol_s1022;
[L5587]              __tmp___decimals_ERC20Detailed[this] := decimals_s1022;
[L5610]  RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, name_s1022, symbol_s1022, decimals_s1022);
[L5611]  COND FALSE  !(revert)
[L6156]  RET         call ERC20Detailed_ERC20Detailed__fail(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L6157]  COND FALSE  !(revert)
[L6160]  CALL        call MinterRole_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L5733]  CALL        call MinterRole_MinterRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5668]              assume msgsender_MSG != null;
[L5669]              __tmp__Balance[this] := 0;
[L5671]  CALL        call __var_35 := FreshRefGenerator__fail();
[L3954]              havoc newRef;
[L3955]              assume __tmp__Alloc[newRef] == false;
[L3956]              __tmp__Alloc[newRef] := true;
[L3957]              assume newRef != null;
[L5671]  RET         call __var_35 := FreshRefGenerator__fail();
[L5672]  COND FALSE  !(revert)
[L5675]              __tmp___minters_MinterRole[this] := __var_35;
[L5677]  COND TRUE   __tmp__DType[this] == OMToken
[L5678]  CALL        call _addMinter~address_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5868]  CALL        call add~Role~address_Roles__fail(this, this, 0, __tmp___minters_MinterRole[this], account_s1130);
[L4786]              __var_17 := null;
[L4787]  COND FALSE  !(!(account_s659 != null))
[L4791]  CALL        call __var_18 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4865]              __var_21 := null;
[L4866]  COND FALSE  !(!(account_s713 != null))
[L4870]              __ret_0_ := __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s713]][account_s713];
[L4791]  RET         call __var_18 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4792]  COND FALSE  !(revert)
[L4795]  COND FALSE  !(!!__var_18)
[L4799]              __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s659]][account_s659] := true;
[L5868]  RET         call add~Role~address_Roles__fail(this, this, 0, __tmp___minters_MinterRole[this], account_s1130);
[L5869]  COND FALSE  !(revert)
[L5678]  RET         call _addMinter~address_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5679]  COND FALSE  !(revert)
[L5733]  RET         call MinterRole_MinterRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5734]  COND FALSE  !(revert)
[L6160]  RET         call MinterRole_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L6161]  COND FALSE  !(revert)
[L6164]  CALL        call ERC20Mintable_ERC20Mintable__fail(this, msgsender_MSG, msgvalue_MSG);
[L5918]  CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L3996]  CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3981]              assume msgsender_MSG != null;
[L3982]              __tmp__Balance[this] := 0;
[L3996]  RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3997]  COND FALSE  !(revert)
[L5918]  RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L5919]  COND FALSE  !(revert)
[L5922]  CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4194]  CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L3996]  CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3981]              assume msgsender_MSG != null;
[L3982]              __tmp__Balance[this] := 0;
[L3996]  RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3997]  COND FALSE  !(revert)
[L4194]  RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4195]  COND FALSE  !(revert)
[L4198]  CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4169]              assume msgsender_MSG != null;
[L4170]              __tmp__Balance[this] := 0;
[L4171]              __tmp___balances_ERC20[this] := zeroRefintArr();
[L4172]              __tmp__sum__balances0[this] := 0;
[L4173]              __tmp___allowed_ERC20[this] := zeroRefRefintArr();
[L4174]              __tmp__sum__allowed1[this] := 0;
[L4175]              __tmp___totalSupply_ERC20[this] := 0;
[L4198]  RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4199]  COND FALSE  !(revert)
[L5922]  RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L5923]  COND FALSE  !(revert)
[L5926]  CALL        call MinterRole_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L5733]  CALL        call MinterRole_MinterRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5668]              assume msgsender_MSG != null;
[L5669]              __tmp__Balance[this] := 0;
[L5671]  CALL        call __var_35 := FreshRefGenerator__fail();
[L3954]              havoc newRef;
[L3955]              assume __tmp__Alloc[newRef] == false;
[L3956]              __tmp__Alloc[newRef] := true;
[L3957]              assume newRef != null;
[L5671]  RET         call __var_35 := FreshRefGenerator__fail();
[L5672]  COND FALSE  !(revert)
[L5675]              __tmp___minters_MinterRole[this] := __var_35;
[L5677]  COND TRUE   __tmp__DType[this] == OMToken
[L5678]  CALL        call _addMinter~address_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5868]  CALL        call add~Role~address_Roles__fail(this, this, 0, __tmp___minters_MinterRole[this], account_s1130);
[L4786]              __var_17 := null;
[L4787]  COND FALSE  !(!(account_s659 != null))
[L4791]  CALL        call __var_18 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4865]              __var_21 := null;
[L4866]  COND FALSE  !(!(account_s713 != null))
[L4870]              __ret_0_ := __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s713]][account_s713];
[L4791]  RET         call __var_18 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4792]  COND FALSE  !(revert)
[L4795]  COND FALSE  !(!!__var_18)
[L4799]              __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s659]][account_s659] := true;
[L5868]  RET         call add~Role~address_Roles__fail(this, this, 0, __tmp___minters_MinterRole[this], account_s1130);
[L5869]  COND FALSE  !(revert)
[L5678]  RET         call _addMinter~address_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5679]  COND FALSE  !(revert)
[L5733]  RET         call MinterRole_MinterRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5734]  COND FALSE  !(revert)
[L5926]  RET         call MinterRole_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L5927]  COND FALSE  !(revert)
[L5930]  CALL        call ERC20Mintable_ERC20Mintable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5903]              assume msgsender_MSG != null;
[L5904]              __tmp__Balance[this] := 0;
[L5930]  RET         call ERC20Mintable_ERC20Mintable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5931]  COND FALSE  !(revert)
[L6164]  RET         call ERC20Mintable_ERC20Mintable__fail(this, msgsender_MSG, msgvalue_MSG);
[L6165]  COND FALSE  !(revert)
[L6168]  CALL        call ERC20Burnable_ERC20Burnable__fail(this, msgsender_MSG, msgvalue_MSG);
[L6020]  CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L3996]  CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3981]              assume msgsender_MSG != null;
[L3982]              __tmp__Balance[this] := 0;
[L3996]  RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3997]  COND FALSE  !(revert)
[L6020]  RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6021]  COND FALSE  !(revert)
[L6024]  CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4194]  CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L3996]  CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3981]              assume msgsender_MSG != null;
[L3982]              __tmp__Balance[this] := 0;
[L3996]  RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3997]  COND FALSE  !(revert)
[L4194]  RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4195]  COND FALSE  !(revert)
[L4198]  CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4169]              assume msgsender_MSG != null;
[L4170]              __tmp__Balance[this] := 0;
[L4171]              __tmp___balances_ERC20[this] := zeroRefintArr();
[L4172]              __tmp__sum__balances0[this] := 0;
[L4173]              __tmp___allowed_ERC20[this] := zeroRefRefintArr();
[L4174]              __tmp__sum__allowed1[this] := 0;
[L4175]              __tmp___totalSupply_ERC20[this] := 0;
[L4198]  RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4199]  COND FALSE  !(revert)
[L6024]  RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6025]  COND FALSE  !(revert)
[L6028]  CALL        call ERC20Burnable_ERC20Burnable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6005]              assume msgsender_MSG != null;
[L6006]              __tmp__Balance[this] := 0;
[L6028]  RET         call ERC20Burnable_ERC20Burnable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6029]  COND FALSE  !(revert)
[L6168]  RET         call ERC20Burnable_ERC20Burnable__fail(this, msgsender_MSG, msgvalue_MSG);
[L6169]  COND FALSE  !(revert)
[L6172]  CALL        call OMToken_OMToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L6121]              assume msgsender_MSG != null;
[L6122]              __tmp__Balance[this] := 0;
[L6172]  RET         call OMToken_OMToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L6173]  COND FALSE  !(revert)
[L2740]  RET         call OMToken_OMToken__fail(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L2741]              assume revert || gas < 0;
[L9919]  RET         call OMToken_OMToken(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L9920]              assume !revert && gas >= 0;
[L9923]  CALL        call CorralChoice_OMToken(this);
[L9689]              havoc msgsender_MSG;
[L9690]              havoc msgvalue_MSG;
[L9691]              havoc choice;
[L9692]              havoc to_s916;
[L9693]              havoc value_s916;
[L9694]              havoc __ret_0_transfer;
[L9695]              havoc spender_s955;
[L9696]              havoc value_s955;
[L9697]              havoc __ret_0_approve;
[L9698]              havoc from_s937;
[L9699]              havoc to_s937;
[L9700]              havoc value_s937;
[L9701]              havoc __ret_0_transferFrom;
[L9702]              havoc __ret_0_totalSupply;
[L9703]              havoc owner_s231;
[L9704]              havoc __ret_0_balanceOf;
[L9705]              havoc owner_s247;
[L9706]              havoc spender_s247;
[L9707]              havoc __ret_0_allowance;
[L9708]              havoc spender_s973;
[L9709]              havoc addedValue_s973;
[L9710]              havoc success_s973;
[L9711]              havoc spender_s991;
[L9712]              havoc subtractedValue_s991;
[L9713]              havoc success_s991;
[L9714]              havoc account_s760;
[L9715]              havoc __ret_0_isPauser;
[L9716]              havoc account_s772;
[L9717]              havoc __ret_0_paused;
[L9718]              havoc name_s1022;
[L9719]              havoc symbol_s1022;
[L9720]              havoc decimals_s1022;
[L9721]              havoc __ret_0_name;
[L9722]              havoc __ret_0_symbol;
[L9723]              havoc __ret_0_decimals;
[L9724]              havoc account_s1093;
[L9725]              havoc __ret_0_isMinter;
[L9726]              havoc account_s1105;
[L9727]              havoc to_s1170;
[L9728]              havoc value_s1170;
[L9729]              havoc __ret_0_mint;
[L9730]              havoc value_s1185;
[L9731]              havoc from_s1198;
[L9732]              havoc value_s1198;
[L9733]              havoc name_s1230;
[L9734]              havoc symbol_s1230;
[L9735]              havoc decimals_s1230;
[L9736]              havoc tmpNow;
[L9737]              havoc gas;
[L9738]              assume gas > 4000000 && gas <= 8000000;
[L9739]              tmpNow := now;
[L9740]              havoc now;
[L9741]              assume now > tmpNow;
[L9742]              assume msgsender_MSG != null;
[L9743]              assume DType[msgsender_MSG] != IERC20;
[L9744]              assume DType[msgsender_MSG] != SafeMath;
[L9745]              assume DType[msgsender_MSG] != ERC20;
[L9746]              assume DType[msgsender_MSG] != Roles;
[L9747]              assume DType[msgsender_MSG] != PauserRole;
[L9748]              assume DType[msgsender_MSG] != Pausable;
[L9749]              assume DType[msgsender_MSG] != ERC20Pausable;
[L9750]              assume DType[msgsender_MSG] != ERC20Detailed;
[L9751]              assume DType[msgsender_MSG] != MinterRole;
[L9752]              assume DType[msgsender_MSG] != ERC20Mintable;
[L9753]              assume DType[msgsender_MSG] != ERC20Burnable;
[L9754]              assume DType[msgsender_MSG] != OMToken;
[L9755]              Alloc[msgsender_MSG] := true;
[L9756]  COND FALSE  !(choice == 23)
[L9763]  COND FALSE  !(choice == 22)
[L9770]  COND FALSE  !(choice == 21)
[L9777]  COND FALSE  !(choice == 20)
[L9783]  COND FALSE  !(choice == 19)
[L9789]  COND TRUE   choice == 18
[L9790]              gas := gas - 21000;
[L9791]  COND TRUE   gas >= 0
[L9792]              assume msgvalue_MSG == 0;
[L9793]  CALL        call __ret_0_allowance := allowance~address~address_ERC20(this, msgsender_MSG, msgvalue_MSG, owner_s247, spender_s247);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume _allowed_ERC20[this][owner_s247][spender_s247] >= 0 && _allowed_ERC20[this][owner_s247][spender_s247] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_allowance_ERC200 := true;
[L2]                 call_allowance_ERC200 := false;
[L2]                 revert := revert_hold;
[L430]               havoc __exception;
[L431]               revert := false;
[L432]   COND FALSE  !(__exception)
[L459]   CALL        call __ret_0_ := allowance~address~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, owner_s247, spender_s247);
[L4248]              __ret_0_ := _allowed_ERC20[this][owner_s247][spender_s247];
[L459]   RET         call __ret_0_ := allowance~address~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, owner_s247, spender_s247);
[L460]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((((__ret_0_ == _allowed_ERC20[this][owner_s247][spender_s247] && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowed_ERC20[this] == old(_allowed_ERC20[this])) && _minters_MinterRole[this] == old(_minters_MinterRole[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this])) && _paused_Pausable[this] == old(_paused_Pausable[this])) && _pausers_PauserRole[this] == old(_pausers_PauserRole[this]));
[L2]                 revert := revert_hold;
[L9793]  RET         call __ret_0_allowance := allowance~address~address_ERC20(this, msgsender_MSG, msgvalue_MSG, owner_s247, spender_s247);
[L9923]  RET         call CorralChoice_OMToken(this);

Loop:
[L9923]  CALL        call CorralChoice_OMToken(this);
[L9689]              havoc msgsender_MSG;
[L9690]              havoc msgvalue_MSG;
[L9691]              havoc choice;
[L9692]              havoc to_s916;
[L9693]              havoc value_s916;
[L9694]              havoc __ret_0_transfer;
[L9695]              havoc spender_s955;
[L9696]              havoc value_s955;
[L9697]              havoc __ret_0_approve;
[L9698]              havoc from_s937;
[L9699]              havoc to_s937;
[L9700]              havoc value_s937;
[L9701]              havoc __ret_0_transferFrom;
[L9702]              havoc __ret_0_totalSupply;
[L9703]              havoc owner_s231;
[L9704]              havoc __ret_0_balanceOf;
[L9705]              havoc owner_s247;
[L9706]              havoc spender_s247;
[L9707]              havoc __ret_0_allowance;
[L9708]              havoc spender_s973;
[L9709]              havoc addedValue_s973;
[L9710]              havoc success_s973;
[L9711]              havoc spender_s991;
[L9712]              havoc subtractedValue_s991;
[L9713]              havoc success_s991;
[L9714]              havoc account_s760;
[L9715]              havoc __ret_0_isPauser;
[L9716]              havoc account_s772;
[L9717]              havoc __ret_0_paused;
[L9718]              havoc name_s1022;
[L9719]              havoc symbol_s1022;
[L9720]              havoc decimals_s1022;
[L9721]              havoc __ret_0_name;
[L9722]              havoc __ret_0_symbol;
[L9723]              havoc __ret_0_decimals;
[L9724]              havoc account_s1093;
[L9725]              havoc __ret_0_isMinter;
[L9726]              havoc account_s1105;
[L9727]              havoc to_s1170;
[L9728]              havoc value_s1170;
[L9729]              havoc __ret_0_mint;
[L9730]              havoc value_s1185;
[L9731]              havoc from_s1198;
[L9732]              havoc value_s1198;
[L9733]              havoc name_s1230;
[L9734]              havoc symbol_s1230;
[L9735]              havoc decimals_s1230;
[L9736]              havoc tmpNow;
[L9737]              havoc gas;
[L9738]              assume gas > 4000000 && gas <= 8000000;
[L9739]              tmpNow := now;
[L9740]              havoc now;
[L9741]              assume now > tmpNow;
[L9742]              assume msgsender_MSG != null;
[L9743]              assume DType[msgsender_MSG] != IERC20;
[L9744]              assume DType[msgsender_MSG] != SafeMath;
[L9745]              assume DType[msgsender_MSG] != ERC20;
[L9746]              assume DType[msgsender_MSG] != Roles;
[L9747]              assume DType[msgsender_MSG] != PauserRole;
[L9748]              assume DType[msgsender_MSG] != Pausable;
[L9749]              assume DType[msgsender_MSG] != ERC20Pausable;
[L9750]              assume DType[msgsender_MSG] != ERC20Detailed;
[L9751]              assume DType[msgsender_MSG] != MinterRole;
[L9752]              assume DType[msgsender_MSG] != ERC20Mintable;
[L9753]              assume DType[msgsender_MSG] != ERC20Burnable;
[L9754]              assume DType[msgsender_MSG] != OMToken;
[L9755]              Alloc[msgsender_MSG] := true;
[L9756]  COND FALSE  !(choice == 23)
[L9763]  COND FALSE  !(choice == 22)
[L9770]  COND FALSE  !(choice == 21)
[L9777]  COND FALSE  !(choice == 20)
[L9783]  COND FALSE  !(choice == 19)
[L9789]  COND TRUE   choice == 18
[L9790]              gas := gas - 21000;
[L9791]  COND TRUE   gas >= 0
[L9792]              assume msgvalue_MSG == 0;
[L9793]  CALL        call __ret_0_allowance := allowance~address~address_ERC20(this, msgsender_MSG, msgvalue_MSG, owner_s247, spender_s247);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume _allowed_ERC20[this][owner_s247][spender_s247] >= 0 && _allowed_ERC20[this][owner_s247][spender_s247] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_allowance_ERC200 := true;
[L2]                 call_allowance_ERC200 := false;
[L2]                 revert := revert_hold;
[L430]               havoc __exception;
[L431]               revert := false;
[L432]   COND FALSE  !(__exception)
[L459]   CALL        call __ret_0_ := allowance~address~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, owner_s247, spender_s247);
[L4248]              __ret_0_ := _allowed_ERC20[this][owner_s247][spender_s247];
[L459]   RET         call __ret_0_ := allowance~address~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, owner_s247, spender_s247);
[L460]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((((__ret_0_ == _allowed_ERC20[this][owner_s247][spender_s247] && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowed_ERC20[this] == old(_allowed_ERC20[this])) && _minters_MinterRole[this] == old(_minters_MinterRole[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this])) && _paused_Pausable[this] == old(_paused_Pausable[this])) && _pausers_PauserRole[this] == old(_pausers_PauserRole[this]));
[L2]                 revert := revert_hold;
[L9793]  RET         call __ret_0_allowance := allowance~address~address_ERC20(this, msgsender_MSG, msgvalue_MSG, owner_s247, spender_s247);
[L9923]  RET         call CorralChoice_OMToken(this);

[2020-11-25 02:29:10,026 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 02:29:10,026 INFO  L82        PathProgramCache]: Analyzing trace with hash 1490757858, now seen corresponding path program 1 times
[2020-11-25 02:29:10,027 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 02:29:10,039 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 02:29:10,224 INFO  L134       CoverageAnalysis]: Checked inductivity of 1005 backedges. 9 proven. 34 refuted. 0 times theorem prover too weak. 962 trivial. 0 not checked.
[2020-11-25 02:29:10,224 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 02:29:10,224 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [10] total 10
[2020-11-25 02:29:10,225 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 02:29:10,225 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 10 interpolants.
[2020-11-25 02:29:10,225 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=18, Invalid=72, Unknown=0, NotChecked=0, Total=90
[2020-11-25 02:29:10,225 INFO  L87              Difference]: Start difference. First operand 5677 states and 6455 transitions. cyclomatic complexity: 780 Second operand 10 states.
[2020-11-25 02:29:11,614 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 02:29:11,614 INFO  L93              Difference]: Finished difference Result 7871 states and 9061 transitions.
[2020-11-25 02:29:11,615 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 11 states. 
[2020-11-25 02:29:11,615 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 7871 states and 9061 transitions.
[2020-11-25 02:29:11,631 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 6
[2020-11-25 02:29:11,646 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 7871 states to 7842 states and 9023 transitions.
[2020-11-25 02:29:11,646 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1757
[2020-11-25 02:29:11,647 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1757
[2020-11-25 02:29:11,647 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 7842 states and 9023 transitions.
[2020-11-25 02:29:11,651 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 02:29:11,651 INFO  L728         BuchiCegarLoop]: Abstraction has 7842 states and 9023 transitions.
[2020-11-25 02:29:11,655 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 7842 states and 9023 transitions.
[2020-11-25 02:29:11,689 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 7842 to 7748.
[2020-11-25 02:29:11,689 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 7748 states.
[2020-11-25 02:29:11,697 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 7748 states to 7748 states and 8929 transitions.
[2020-11-25 02:29:11,697 INFO  L751         BuchiCegarLoop]: Abstraction has 7748 states and 8929 transitions.
[2020-11-25 02:29:11,697 INFO  L631         BuchiCegarLoop]: Abstraction has 7748 states and 8929 transitions.
[2020-11-25 02:29:11,697 INFO  L445         BuchiCegarLoop]: ======== Iteration 10============
[2020-11-25 02:29:11,697 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 7748 states and 8929 transitions.
[2020-11-25 02:29:11,704 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 6
[2020-11-25 02:29:11,704 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 02:29:11,704 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 02:29:11,706 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [9, 9, 9, 9, 9, 9, 9, 9, 9, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 02:29:11,706 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_allowance_ERC200 := false;
[L2]                 call_allowance_ERC200 := false;
[L2]     CALL        call main();
[L9913]              assume null == 0;
[L9914]  CALL        call this := FreshRefGenerator__success();
[L3962]              havoc newRef;
[L3963]              assume Alloc[newRef] == false;
[L3964]              Alloc[newRef] := true;
[L3965]              assume newRef != null;
[L9914]  RET         call this := FreshRefGenerator__success();
[L9915]              assume now >= 0;
[L9916]              assume DType[this] == OMToken;
[L9917]              assume msgvalue_MSG == 0;
[L9918]              gas := gas - 53000;
[L9919]  CALL        call OMToken_OMToken(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L2714]              havoc __exception;
[L2715]              revert := false;
[L2716]  COND TRUE   __exception
[L2717]              __tmp__Balance := Balance;
[L2718]              __tmp__DType := DType;
[L2719]              __tmp__Alloc := Alloc;
[L2720]              __tmp__balance_ADDR := balance_ADDR;
[L2721]              __tmp__M_Ref_int := M_Ref_int;
[L2722]              __tmp__sum__balances0 := sum__balances0;
[L2723]              __tmp__alloc__allowed_ERC20_lvl0 := alloc__allowed_ERC20_lvl0;
[L2724]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L2725]              __tmp__sum__allowed1 := sum__allowed1;
[L2726]              __tmp__M_Ref_bool := M_Ref_bool;
[L2727]              __tmp__sum := sum;
[L2728]              __tmp__Length := Length;
[L2729]              __tmp__now := now;
[L2730]              __tmp___balances_ERC20 := _balances_ERC20;
[L2731]              __tmp___allowed_ERC20 := _allowed_ERC20;
[L2732]              __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L2733]              __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L2734]              __tmp___pausers_PauserRole := _pausers_PauserRole;
[L2735]              __tmp___paused_Pausable := _paused_Pausable;
[L2736]              __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L2737]              __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L2738]              __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L2739]              __tmp___minters_MinterRole := _minters_MinterRole;
[L2740]  CALL        call OMToken_OMToken__fail(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L6136]  CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L3996]  CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3981]              assume msgsender_MSG != null;
[L3982]              __tmp__Balance[this] := 0;
[L3996]  RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3997]  COND FALSE  !(revert)
[L6136]  RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6137]  COND FALSE  !(revert)
[L6140]  CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4194]  CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L3996]  CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3981]              assume msgsender_MSG != null;
[L3982]              __tmp__Balance[this] := 0;
[L3996]  RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3997]  COND FALSE  !(revert)
[L4194]  RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4195]  COND FALSE  !(revert)
[L4198]  CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4169]              assume msgsender_MSG != null;
[L4170]              __tmp__Balance[this] := 0;
[L4171]              __tmp___balances_ERC20[this] := zeroRefintArr();
[L4172]              __tmp__sum__balances0[this] := 0;
[L4173]              __tmp___allowed_ERC20[this] := zeroRefRefintArr();
[L4174]              __tmp__sum__allowed1[this] := 0;
[L4175]              __tmp___totalSupply_ERC20[this] := 0;
[L4198]  RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4199]  COND FALSE  !(revert)
[L6140]  RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6141]  COND FALSE  !(revert)
[L6144]  CALL        call PauserRole_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L4965]  CALL        call PauserRole_PauserRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4890]              assume msgsender_MSG != null;
[L4891]              __tmp__Balance[this] := 0;
[L4893]  CALL        call __var_22 := FreshRefGenerator__fail();
[L3954]              havoc newRef;
[L3955]              assume __tmp__Alloc[newRef] == false;
[L3956]              __tmp__Alloc[newRef] := true;
[L3957]              assume newRef != null;
[L4893]  RET         call __var_22 := FreshRefGenerator__fail();
[L4894]  COND FALSE  !(revert)
[L4897]              __tmp___pausers_PauserRole[this] := __var_22;
[L4899]  COND FALSE  !(__tmp__DType[this] == OMToken)
[L4904]  COND TRUE   __tmp__DType[this] == ERC20Pausable
[L4905]  CALL        call _addPauser~address_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5120]  CALL        call add~Role~address_Roles__fail(this, this, 0, __tmp___pausers_PauserRole[this], account_s797);
[L4786]              __var_17 := null;
[L4787]  COND FALSE  !(!(account_s659 != null))
[L4791]  CALL        call __var_18 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4865]              __var_21 := null;
[L4866]  COND FALSE  !(!(account_s713 != null))
[L4870]              __ret_0_ := __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s713]][account_s713];
[L4791]  RET         call __var_18 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4792]  COND FALSE  !(revert)
[L4795]  COND FALSE  !(!!__var_18)
[L4799]              __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s659]][account_s659] := true;
[L5120]  RET         call add~Role~address_Roles__fail(this, this, 0, __tmp___pausers_PauserRole[this], account_s797);
[L5121]  COND FALSE  !(revert)
[L4905]  RET         call _addPauser~address_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L4906]  COND FALSE  !(revert)
[L4965]  RET         call PauserRole_PauserRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4966]  COND FALSE  !(revert)
[L6144]  RET         call PauserRole_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L6145]  COND FALSE  !(revert)
[L6148]  CALL        call Pausable_Pausable__fail(this, msgsender_MSG, msgvalue_MSG);
[L5174]  CALL        call PauserRole_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L4965]  CALL        call PauserRole_PauserRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4890]              assume msgsender_MSG != null;
[L4891]              __tmp__Balance[this] := 0;
[L4893]  CALL        call __var_22 := FreshRefGenerator__fail();
[L3954]              havoc newRef;
[L3955]              assume __tmp__Alloc[newRef] == false;
[L3956]              __tmp__Alloc[newRef] := true;
[L3957]              assume newRef != null;
[L4893]  RET         call __var_22 := FreshRefGenerator__fail();
[L4894]  COND FALSE  !(revert)
[L4897]              __tmp___pausers_PauserRole[this] := __var_22;
[L4899]  COND FALSE  !(__tmp__DType[this] == OMToken)
[L4904]  COND TRUE   __tmp__DType[this] == ERC20Pausable
[L4905]  CALL        call _addPauser~address_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5120]  CALL        call add~Role~address_Roles__fail(this, this, 0, __tmp___pausers_PauserRole[this], account_s797);
[L4786]              __var_17 := null;
[L4787]  COND FALSE  !(!(account_s659 != null))
[L4791]  CALL        call __var_18 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4865]              __var_21 := null;
[L4866]  COND FALSE  !(!(account_s713 != null))
[L4870]              __ret_0_ := __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s713]][account_s713];
[L4791]  RET         call __var_18 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4792]  COND FALSE  !(revert)
[L4795]  COND FALSE  !(!!__var_18)
[L4799]              __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s659]][account_s659] := true;
[L5120]  RET         call add~Role~address_Roles__fail(this, this, 0, __tmp___pausers_PauserRole[this], account_s797);
[L5121]  COND FALSE  !(revert)
[L4905]  RET         call _addPauser~address_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L4906]  COND FALSE  !(revert)
[L4965]  RET         call PauserRole_PauserRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4966]  COND FALSE  !(revert)
[L5174]  RET         call PauserRole_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L5175]  COND FALSE  !(revert)
[L5178]  CALL        call Pausable_Pausable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5155]              assume msgsender_MSG != null;
[L5156]              __tmp__Balance[this] := 0;
[L5157]              __tmp___paused_Pausable[this] := false;
[L5159]              __tmp___paused_Pausable[this] := false;
[L5178]  RET         call Pausable_Pausable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5179]  COND FALSE  !(revert)
[L6148]  RET         call Pausable_Pausable__fail(this, msgsender_MSG, msgvalue_MSG);
[L6149]  COND FALSE  !(revert)
[L6152]  CALL        call ERC20Pausable_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG);
[L5280]  CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L3996]  CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3981]              assume msgsender_MSG != null;
[L3982]              __tmp__Balance[this] := 0;
[L3996]  RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3997]  COND FALSE  !(revert)
[L5280]  RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L5281]  COND FALSE  !(revert)
[L5284]  CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4194]  CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L3996]  CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3981]              assume msgsender_MSG != null;
[L3982]              __tmp__Balance[this] := 0;
[L3996]  RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3997]  COND FALSE  !(revert)
[L4194]  RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4195]  COND FALSE  !(revert)
[L4198]  CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4169]              assume msgsender_MSG != null;
[L4170]              __tmp__Balance[this] := 0;
[L4171]              __tmp___balances_ERC20[this] := zeroRefintArr();
[L4172]              __tmp__sum__balances0[this] := 0;
[L4173]              __tmp___allowed_ERC20[this] := zeroRefRefintArr();
[L4174]              __tmp__sum__allowed1[this] := 0;
[L4175]              __tmp___totalSupply_ERC20[this] := 0;
[L4198]  RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4199]  COND FALSE  !(revert)
[L5284]  RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L5285]  COND FALSE  !(revert)
[L5288]  CALL        call PauserRole_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L4965]  CALL        call PauserRole_PauserRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4890]              assume msgsender_MSG != null;
[L4891]              __tmp__Balance[this] := 0;
[L4893]  CALL        call __var_22 := FreshRefGenerator__fail();
[L3954]              havoc newRef;
[L3955]              assume __tmp__Alloc[newRef] == false;
[L3956]              __tmp__Alloc[newRef] := true;
[L3957]              assume newRef != null;
[L4893]  RET         call __var_22 := FreshRefGenerator__fail();
[L4894]  COND FALSE  !(revert)
[L4897]              __tmp___pausers_PauserRole[this] := __var_22;
[L4899]  COND FALSE  !(__tmp__DType[this] == OMToken)
[L4904]  COND TRUE   __tmp__DType[this] == ERC20Pausable
[L4905]  CALL        call _addPauser~address_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5120]  CALL        call add~Role~address_Roles__fail(this, this, 0, __tmp___pausers_PauserRole[this], account_s797);
[L4786]              __var_17 := null;
[L4787]  COND FALSE  !(!(account_s659 != null))
[L4791]  CALL        call __var_18 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4865]              __var_21 := null;
[L4866]  COND FALSE  !(!(account_s713 != null))
[L4870]              __ret_0_ := __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s713]][account_s713];
[L4791]  RET         call __var_18 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4792]  COND FALSE  !(revert)
[L4795]  COND FALSE  !(!!__var_18)
[L4799]              __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s659]][account_s659] := true;
[L5120]  RET         call add~Role~address_Roles__fail(this, this, 0, __tmp___pausers_PauserRole[this], account_s797);
[L5121]  COND FALSE  !(revert)
[L4905]  RET         call _addPauser~address_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L4906]  COND FALSE  !(revert)
[L4965]  RET         call PauserRole_PauserRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4966]  COND FALSE  !(revert)
[L5288]  RET         call PauserRole_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L5289]  COND FALSE  !(revert)
[L5292]  CALL        call Pausable_Pausable__fail(this, msgsender_MSG, msgvalue_MSG);
[L5174]  CALL        call PauserRole_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L4965]  CALL        call PauserRole_PauserRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4890]              assume msgsender_MSG != null;
[L4891]              __tmp__Balance[this] := 0;
[L4893]  CALL        call __var_22 := FreshRefGenerator__fail();
[L3954]              havoc newRef;
[L3955]              assume __tmp__Alloc[newRef] == false;
[L3956]              __tmp__Alloc[newRef] := true;
[L3957]              assume newRef != null;
[L4893]  RET         call __var_22 := FreshRefGenerator__fail();
[L4894]  COND FALSE  !(revert)
[L4897]              __tmp___pausers_PauserRole[this] := __var_22;
[L4899]  COND FALSE  !(__tmp__DType[this] == OMToken)
[L4904]  COND TRUE   __tmp__DType[this] == ERC20Pausable
[L4905]  CALL        call _addPauser~address_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5120]  CALL        call add~Role~address_Roles__fail(this, this, 0, __tmp___pausers_PauserRole[this], account_s797);
[L4786]              __var_17 := null;
[L4787]  COND FALSE  !(!(account_s659 != null))
[L4791]  CALL        call __var_18 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4865]              __var_21 := null;
[L4866]  COND FALSE  !(!(account_s713 != null))
[L4870]              __ret_0_ := __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s713]][account_s713];
[L4791]  RET         call __var_18 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4792]  COND FALSE  !(revert)
[L4795]  COND FALSE  !(!!__var_18)
[L4799]              __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s659]][account_s659] := true;
[L5120]  RET         call add~Role~address_Roles__fail(this, this, 0, __tmp___pausers_PauserRole[this], account_s797);
[L5121]  COND FALSE  !(revert)
[L4905]  RET         call _addPauser~address_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L4906]  COND FALSE  !(revert)
[L4965]  RET         call PauserRole_PauserRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4966]  COND FALSE  !(revert)
[L5174]  RET         call PauserRole_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L5175]  COND FALSE  !(revert)
[L5178]  CALL        call Pausable_Pausable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5155]              assume msgsender_MSG != null;
[L5156]              __tmp__Balance[this] := 0;
[L5157]              __tmp___paused_Pausable[this] := false;
[L5159]              __tmp___paused_Pausable[this] := false;
[L5178]  RET         call Pausable_Pausable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5179]  COND FALSE  !(revert)
[L5292]  RET         call Pausable_Pausable__fail(this, msgsender_MSG, msgvalue_MSG);
[L5293]  COND FALSE  !(revert)
[L5296]  CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5265]              assume msgsender_MSG != null;
[L5266]              __tmp__Balance[this] := 0;
[L5296]  RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5297]  COND FALSE  !(revert)
[L6152]  RET         call ERC20Pausable_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG);
[L6153]  COND FALSE  !(revert)
[L6156]  CALL        call ERC20Detailed_ERC20Detailed__fail(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L5606]  CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L3996]  CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3981]              assume msgsender_MSG != null;
[L3982]              __tmp__Balance[this] := 0;
[L3996]  RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3997]  COND FALSE  !(revert)
[L5606]  RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L5607]  COND FALSE  !(revert)
[L5610]  CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, name_s1022, symbol_s1022, decimals_s1022);
[L5579]              assume msgsender_MSG != null;
[L5580]              __tmp__Balance[this] := 0;
[L5581]              __tmp___name_ERC20Detailed[this] := -1676908070;
[L5582]              __tmp___symbol_ERC20Detailed[this] := -1676908070;
[L5583]              __tmp___decimals_ERC20Detailed[this] := 0;
[L5585]              __tmp___name_ERC20Detailed[this] := name_s1022;
[L5586]              __tmp___symbol_ERC20Detailed[this] := symbol_s1022;
[L5587]              __tmp___decimals_ERC20Detailed[this] := decimals_s1022;
[L5610]  RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, name_s1022, symbol_s1022, decimals_s1022);
[L5611]  COND FALSE  !(revert)
[L6156]  RET         call ERC20Detailed_ERC20Detailed__fail(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L6157]  COND FALSE  !(revert)
[L6160]  CALL        call MinterRole_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L5733]  CALL        call MinterRole_MinterRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5668]              assume msgsender_MSG != null;
[L5669]              __tmp__Balance[this] := 0;
[L5671]  CALL        call __var_35 := FreshRefGenerator__fail();
[L3954]              havoc newRef;
[L3955]              assume __tmp__Alloc[newRef] == false;
[L3956]              __tmp__Alloc[newRef] := true;
[L3957]              assume newRef != null;
[L5671]  RET         call __var_35 := FreshRefGenerator__fail();
[L5672]  COND FALSE  !(revert)
[L5675]              __tmp___minters_MinterRole[this] := __var_35;
[L5677]  COND FALSE  !(__tmp__DType[this] == OMToken)
[L5682]  COND TRUE   __tmp__DType[this] == ERC20Mintable
[L5683]  CALL        call _addMinter~address_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5868]  CALL        call add~Role~address_Roles__fail(this, this, 0, __tmp___minters_MinterRole[this], account_s1130);
[L4786]              __var_17 := null;
[L4787]  COND FALSE  !(!(account_s659 != null))
[L4791]  CALL        call __var_18 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4865]              __var_21 := null;
[L4866]  COND FALSE  !(!(account_s713 != null))
[L4870]              __ret_0_ := __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s713]][account_s713];
[L4791]  RET         call __var_18 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4792]  COND FALSE  !(revert)
[L4795]  COND FALSE  !(!!__var_18)
[L4799]              __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s659]][account_s659] := true;
[L5868]  RET         call add~Role~address_Roles__fail(this, this, 0, __tmp___minters_MinterRole[this], account_s1130);
[L5869]  COND FALSE  !(revert)
[L5683]  RET         call _addMinter~address_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5684]  COND FALSE  !(revert)
[L5733]  RET         call MinterRole_MinterRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5734]  COND FALSE  !(revert)
[L6160]  RET         call MinterRole_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L6161]  COND FALSE  !(revert)
[L6164]  CALL        call ERC20Mintable_ERC20Mintable__fail(this, msgsender_MSG, msgvalue_MSG);
[L5918]  CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L3996]  CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3981]              assume msgsender_MSG != null;
[L3982]              __tmp__Balance[this] := 0;
[L3996]  RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3997]  COND FALSE  !(revert)
[L5918]  RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L5919]  COND FALSE  !(revert)
[L5922]  CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4194]  CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L3996]  CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3981]              assume msgsender_MSG != null;
[L3982]              __tmp__Balance[this] := 0;
[L3996]  RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3997]  COND FALSE  !(revert)
[L4194]  RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4195]  COND FALSE  !(revert)
[L4198]  CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4169]              assume msgsender_MSG != null;
[L4170]              __tmp__Balance[this] := 0;
[L4171]              __tmp___balances_ERC20[this] := zeroRefintArr();
[L4172]              __tmp__sum__balances0[this] := 0;
[L4173]              __tmp___allowed_ERC20[this] := zeroRefRefintArr();
[L4174]              __tmp__sum__allowed1[this] := 0;
[L4175]              __tmp___totalSupply_ERC20[this] := 0;
[L4198]  RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4199]  COND FALSE  !(revert)
[L5922]  RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L5923]  COND FALSE  !(revert)
[L5926]  CALL        call MinterRole_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L5733]  CALL        call MinterRole_MinterRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5668]              assume msgsender_MSG != null;
[L5669]              __tmp__Balance[this] := 0;
[L5671]  CALL        call __var_35 := FreshRefGenerator__fail();
[L3954]              havoc newRef;
[L3955]              assume __tmp__Alloc[newRef] == false;
[L3956]              __tmp__Alloc[newRef] := true;
[L3957]              assume newRef != null;
[L5671]  RET         call __var_35 := FreshRefGenerator__fail();
[L5672]  COND FALSE  !(revert)
[L5675]              __tmp___minters_MinterRole[this] := __var_35;
[L5677]  COND FALSE  !(__tmp__DType[this] == OMToken)
[L5682]  COND TRUE   __tmp__DType[this] == ERC20Mintable
[L5683]  CALL        call _addMinter~address_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5868]  CALL        call add~Role~address_Roles__fail(this, this, 0, __tmp___minters_MinterRole[this], account_s1130);
[L4786]              __var_17 := null;
[L4787]  COND FALSE  !(!(account_s659 != null))
[L4791]  CALL        call __var_18 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4865]              __var_21 := null;
[L4866]  COND FALSE  !(!(account_s713 != null))
[L4870]              __ret_0_ := __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s713]][account_s713];
[L4791]  RET         call __var_18 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4792]  COND FALSE  !(revert)
[L4795]  COND FALSE  !(!!__var_18)
[L4799]              __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s659]][account_s659] := true;
[L5868]  RET         call add~Role~address_Roles__fail(this, this, 0, __tmp___minters_MinterRole[this], account_s1130);
[L5869]  COND FALSE  !(revert)
[L5683]  RET         call _addMinter~address_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5684]  COND FALSE  !(revert)
[L5733]  RET         call MinterRole_MinterRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5734]  COND FALSE  !(revert)
[L5926]  RET         call MinterRole_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L5927]  COND FALSE  !(revert)
[L5930]  CALL        call ERC20Mintable_ERC20Mintable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5903]              assume msgsender_MSG != null;
[L5904]              __tmp__Balance[this] := 0;
[L5930]  RET         call ERC20Mintable_ERC20Mintable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5931]  COND FALSE  !(revert)
[L6164]  RET         call ERC20Mintable_ERC20Mintable__fail(this, msgsender_MSG, msgvalue_MSG);
[L6165]  COND FALSE  !(revert)
[L6168]  CALL        call ERC20Burnable_ERC20Burnable__fail(this, msgsender_MSG, msgvalue_MSG);
[L6020]  CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L3996]  CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3981]              assume msgsender_MSG != null;
[L3982]              __tmp__Balance[this] := 0;
[L3996]  RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3997]  COND FALSE  !(revert)
[L6020]  RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6021]  COND FALSE  !(revert)
[L6024]  CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4194]  CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L3996]  CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3981]              assume msgsender_MSG != null;
[L3982]              __tmp__Balance[this] := 0;
[L3996]  RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3997]  COND FALSE  !(revert)
[L4194]  RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4195]  COND FALSE  !(revert)
[L4198]  CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4169]              assume msgsender_MSG != null;
[L4170]              __tmp__Balance[this] := 0;
[L4171]              __tmp___balances_ERC20[this] := zeroRefintArr();
[L4172]              __tmp__sum__balances0[this] := 0;
[L4173]              __tmp___allowed_ERC20[this] := zeroRefRefintArr();
[L4174]              __tmp__sum__allowed1[this] := 0;
[L4175]              __tmp___totalSupply_ERC20[this] := 0;
[L4198]  RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4199]  COND FALSE  !(revert)
[L6024]  RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6025]  COND FALSE  !(revert)
[L6028]  CALL        call ERC20Burnable_ERC20Burnable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6005]              assume msgsender_MSG != null;
[L6006]              __tmp__Balance[this] := 0;
[L6028]  RET         call ERC20Burnable_ERC20Burnable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6029]  COND FALSE  !(revert)
[L6168]  RET         call ERC20Burnable_ERC20Burnable__fail(this, msgsender_MSG, msgvalue_MSG);
[L6169]  COND FALSE  !(revert)
[L6172]  CALL        call OMToken_OMToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L6121]              assume msgsender_MSG != null;
[L6122]              __tmp__Balance[this] := 0;
[L6172]  RET         call OMToken_OMToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L6173]  COND FALSE  !(revert)
[L2740]  RET         call OMToken_OMToken__fail(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L2741]              assume revert || gas < 0;
[L9919]  RET         call OMToken_OMToken(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L9920]              assume !revert && gas >= 0;
[L9923]  CALL        call CorralChoice_OMToken(this);
[L9689]              havoc msgsender_MSG;
[L9690]              havoc msgvalue_MSG;
[L9691]              havoc choice;
[L9692]              havoc to_s916;
[L9693]              havoc value_s916;
[L9694]              havoc __ret_0_transfer;
[L9695]              havoc spender_s955;
[L9696]              havoc value_s955;
[L9697]              havoc __ret_0_approve;
[L9698]              havoc from_s937;
[L9699]              havoc to_s937;
[L9700]              havoc value_s937;
[L9701]              havoc __ret_0_transferFrom;
[L9702]              havoc __ret_0_totalSupply;
[L9703]              havoc owner_s231;
[L9704]              havoc __ret_0_balanceOf;
[L9705]              havoc owner_s247;
[L9706]              havoc spender_s247;
[L9707]              havoc __ret_0_allowance;
[L9708]              havoc spender_s973;
[L9709]              havoc addedValue_s973;
[L9710]              havoc success_s973;
[L9711]              havoc spender_s991;
[L9712]              havoc subtractedValue_s991;
[L9713]              havoc success_s991;
[L9714]              havoc account_s760;
[L9715]              havoc __ret_0_isPauser;
[L9716]              havoc account_s772;
[L9717]              havoc __ret_0_paused;
[L9718]              havoc name_s1022;
[L9719]              havoc symbol_s1022;
[L9720]              havoc decimals_s1022;
[L9721]              havoc __ret_0_name;
[L9722]              havoc __ret_0_symbol;
[L9723]              havoc __ret_0_decimals;
[L9724]              havoc account_s1093;
[L9725]              havoc __ret_0_isMinter;
[L9726]              havoc account_s1105;
[L9727]              havoc to_s1170;
[L9728]              havoc value_s1170;
[L9729]              havoc __ret_0_mint;
[L9730]              havoc value_s1185;
[L9731]              havoc from_s1198;
[L9732]              havoc value_s1198;
[L9733]              havoc name_s1230;
[L9734]              havoc symbol_s1230;
[L9735]              havoc decimals_s1230;
[L9736]              havoc tmpNow;
[L9737]              havoc gas;
[L9738]              assume gas > 4000000 && gas <= 8000000;
[L9739]              tmpNow := now;
[L9740]              havoc now;
[L9741]              assume now > tmpNow;
[L9742]              assume msgsender_MSG != null;
[L9743]              assume DType[msgsender_MSG] != IERC20;
[L9744]              assume DType[msgsender_MSG] != SafeMath;
[L9745]              assume DType[msgsender_MSG] != ERC20;
[L9746]              assume DType[msgsender_MSG] != Roles;
[L9747]              assume DType[msgsender_MSG] != PauserRole;
[L9748]              assume DType[msgsender_MSG] != Pausable;
[L9749]              assume DType[msgsender_MSG] != ERC20Pausable;
[L9750]              assume DType[msgsender_MSG] != ERC20Detailed;
[L9751]              assume DType[msgsender_MSG] != MinterRole;
[L9752]              assume DType[msgsender_MSG] != ERC20Mintable;
[L9753]              assume DType[msgsender_MSG] != ERC20Burnable;
[L9754]              assume DType[msgsender_MSG] != OMToken;
[L9755]              Alloc[msgsender_MSG] := true;
[L9756]  COND FALSE  !(choice == 23)
[L9763]  COND FALSE  !(choice == 22)
[L9770]  COND FALSE  !(choice == 21)
[L9777]  COND FALSE  !(choice == 20)
[L9783]  COND FALSE  !(choice == 19)
[L9789]  COND TRUE   choice == 18
[L9790]              gas := gas - 21000;
[L9791]  COND TRUE   gas >= 0
[L9792]              assume msgvalue_MSG == 0;
[L9793]  CALL        call __ret_0_allowance := allowance~address~address_ERC20(this, msgsender_MSG, msgvalue_MSG, owner_s247, spender_s247);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume _allowed_ERC20[this][owner_s247][spender_s247] >= 0 && _allowed_ERC20[this][owner_s247][spender_s247] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_allowance_ERC200 := true;
[L2]                 call_allowance_ERC200 := false;
[L2]                 revert := revert_hold;
[L430]               havoc __exception;
[L431]               revert := false;
[L432]   COND FALSE  !(__exception)
[L459]   CALL        call __ret_0_ := allowance~address~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, owner_s247, spender_s247);
[L4248]              __ret_0_ := _allowed_ERC20[this][owner_s247][spender_s247];
[L459]   RET         call __ret_0_ := allowance~address~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, owner_s247, spender_s247);
[L460]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((((__ret_0_ == _allowed_ERC20[this][owner_s247][spender_s247] && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowed_ERC20[this] == old(_allowed_ERC20[this])) && _minters_MinterRole[this] == old(_minters_MinterRole[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this])) && _paused_Pausable[this] == old(_paused_Pausable[this])) && _pausers_PauserRole[this] == old(_pausers_PauserRole[this]));
[L2]                 revert := revert_hold;
[L9793]  RET         call __ret_0_allowance := allowance~address~address_ERC20(this, msgsender_MSG, msgvalue_MSG, owner_s247, spender_s247);
[L9923]  RET         call CorralChoice_OMToken(this);

Loop:
[L9923]  CALL        call CorralChoice_OMToken(this);
[L9689]              havoc msgsender_MSG;
[L9690]              havoc msgvalue_MSG;
[L9691]              havoc choice;
[L9692]              havoc to_s916;
[L9693]              havoc value_s916;
[L9694]              havoc __ret_0_transfer;
[L9695]              havoc spender_s955;
[L9696]              havoc value_s955;
[L9697]              havoc __ret_0_approve;
[L9698]              havoc from_s937;
[L9699]              havoc to_s937;
[L9700]              havoc value_s937;
[L9701]              havoc __ret_0_transferFrom;
[L9702]              havoc __ret_0_totalSupply;
[L9703]              havoc owner_s231;
[L9704]              havoc __ret_0_balanceOf;
[L9705]              havoc owner_s247;
[L9706]              havoc spender_s247;
[L9707]              havoc __ret_0_allowance;
[L9708]              havoc spender_s973;
[L9709]              havoc addedValue_s973;
[L9710]              havoc success_s973;
[L9711]              havoc spender_s991;
[L9712]              havoc subtractedValue_s991;
[L9713]              havoc success_s991;
[L9714]              havoc account_s760;
[L9715]              havoc __ret_0_isPauser;
[L9716]              havoc account_s772;
[L9717]              havoc __ret_0_paused;
[L9718]              havoc name_s1022;
[L9719]              havoc symbol_s1022;
[L9720]              havoc decimals_s1022;
[L9721]              havoc __ret_0_name;
[L9722]              havoc __ret_0_symbol;
[L9723]              havoc __ret_0_decimals;
[L9724]              havoc account_s1093;
[L9725]              havoc __ret_0_isMinter;
[L9726]              havoc account_s1105;
[L9727]              havoc to_s1170;
[L9728]              havoc value_s1170;
[L9729]              havoc __ret_0_mint;
[L9730]              havoc value_s1185;
[L9731]              havoc from_s1198;
[L9732]              havoc value_s1198;
[L9733]              havoc name_s1230;
[L9734]              havoc symbol_s1230;
[L9735]              havoc decimals_s1230;
[L9736]              havoc tmpNow;
[L9737]              havoc gas;
[L9738]              assume gas > 4000000 && gas <= 8000000;
[L9739]              tmpNow := now;
[L9740]              havoc now;
[L9741]              assume now > tmpNow;
[L9742]              assume msgsender_MSG != null;
[L9743]              assume DType[msgsender_MSG] != IERC20;
[L9744]              assume DType[msgsender_MSG] != SafeMath;
[L9745]              assume DType[msgsender_MSG] != ERC20;
[L9746]              assume DType[msgsender_MSG] != Roles;
[L9747]              assume DType[msgsender_MSG] != PauserRole;
[L9748]              assume DType[msgsender_MSG] != Pausable;
[L9749]              assume DType[msgsender_MSG] != ERC20Pausable;
[L9750]              assume DType[msgsender_MSG] != ERC20Detailed;
[L9751]              assume DType[msgsender_MSG] != MinterRole;
[L9752]              assume DType[msgsender_MSG] != ERC20Mintable;
[L9753]              assume DType[msgsender_MSG] != ERC20Burnable;
[L9754]              assume DType[msgsender_MSG] != OMToken;
[L9755]              Alloc[msgsender_MSG] := true;
[L9756]  COND FALSE  !(choice == 23)
[L9763]  COND FALSE  !(choice == 22)
[L9770]  COND FALSE  !(choice == 21)
[L9777]  COND FALSE  !(choice == 20)
[L9783]  COND FALSE  !(choice == 19)
[L9789]  COND TRUE   choice == 18
[L9790]              gas := gas - 21000;
[L9791]  COND TRUE   gas >= 0
[L9792]              assume msgvalue_MSG == 0;
[L9793]  CALL        call __ret_0_allowance := allowance~address~address_ERC20(this, msgsender_MSG, msgvalue_MSG, owner_s247, spender_s247);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume _allowed_ERC20[this][owner_s247][spender_s247] >= 0 && _allowed_ERC20[this][owner_s247][spender_s247] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_allowance_ERC200 := true;
[L2]                 call_allowance_ERC200 := false;
[L2]                 revert := revert_hold;
[L430]               havoc __exception;
[L431]               revert := false;
[L432]   COND FALSE  !(__exception)
[L459]   CALL        call __ret_0_ := allowance~address~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, owner_s247, spender_s247);
[L4248]              __ret_0_ := _allowed_ERC20[this][owner_s247][spender_s247];
[L459]   RET         call __ret_0_ := allowance~address~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, owner_s247, spender_s247);
[L460]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((((__ret_0_ == _allowed_ERC20[this][owner_s247][spender_s247] && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowed_ERC20[this] == old(_allowed_ERC20[this])) && _minters_MinterRole[this] == old(_minters_MinterRole[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this])) && _paused_Pausable[this] == old(_paused_Pausable[this])) && _pausers_PauserRole[this] == old(_pausers_PauserRole[this]));
[L2]                 revert := revert_hold;
[L9793]  RET         call __ret_0_allowance := allowance~address~address_ERC20(this, msgsender_MSG, msgvalue_MSG, owner_s247, spender_s247);
[L9923]  RET         call CorralChoice_OMToken(this);

[2020-11-25 02:29:11,710 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 02:29:11,710 INFO  L82        PathProgramCache]: Analyzing trace with hash 1360325538, now seen corresponding path program 1 times
[2020-11-25 02:29:11,711 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 02:29:11,722 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 02:29:11,914 INFO  L134       CoverageAnalysis]: Checked inductivity of 994 backedges. 9 proven. 25 refuted. 0 times theorem prover too weak. 960 trivial. 0 not checked.
[2020-11-25 02:29:11,914 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 02:29:11,915 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [9] total 9
[2020-11-25 02:29:11,915 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 02:29:11,915 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 9 interpolants.
[2020-11-25 02:29:11,915 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=15, Invalid=57, Unknown=0, NotChecked=0, Total=72
[2020-11-25 02:29:11,915 INFO  L87              Difference]: Start difference. First operand 7748 states and 8929 transitions. cyclomatic complexity: 1185 Second operand 9 states.
[2020-11-25 02:29:13,203 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 02:29:13,203 INFO  L93              Difference]: Finished difference Result 7895 states and 9089 transitions.
[2020-11-25 02:29:13,203 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 10 states. 
[2020-11-25 02:29:13,203 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 7895 states and 9089 transitions.
[2020-11-25 02:29:13,219 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 6
[2020-11-25 02:29:13,234 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 7895 states to 7853 states and 9036 transitions.
[2020-11-25 02:29:13,234 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1757
[2020-11-25 02:29:13,235 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1757
[2020-11-25 02:29:13,235 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 7853 states and 9036 transitions.
[2020-11-25 02:29:13,239 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 02:29:13,239 INFO  L728         BuchiCegarLoop]: Abstraction has 7853 states and 9036 transitions.
[2020-11-25 02:29:13,243 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 7853 states and 9036 transitions.
[2020-11-25 02:29:13,278 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 7853 to 7748.
[2020-11-25 02:29:13,278 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 7748 states.
[2020-11-25 02:29:13,286 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 7748 states to 7748 states and 8929 transitions.
[2020-11-25 02:29:13,286 INFO  L751         BuchiCegarLoop]: Abstraction has 7748 states and 8929 transitions.
[2020-11-25 02:29:13,286 INFO  L631         BuchiCegarLoop]: Abstraction has 7748 states and 8929 transitions.
[2020-11-25 02:29:13,286 INFO  L445         BuchiCegarLoop]: ======== Iteration 11============
[2020-11-25 02:29:13,286 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 7748 states and 8929 transitions.
[2020-11-25 02:29:13,294 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 6
[2020-11-25 02:29:13,294 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 02:29:13,294 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 02:29:13,296 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [9, 9, 9, 9, 9, 9, 9, 9, 9, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 02:29:13,296 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_allowance_ERC200 := false;
[L2]                 call_allowance_ERC200 := false;
[L2]     CALL        call main();
[L9913]              assume null == 0;
[L9914]  CALL        call this := FreshRefGenerator__success();
[L3962]              havoc newRef;
[L3963]              assume Alloc[newRef] == false;
[L3964]              Alloc[newRef] := true;
[L3965]              assume newRef != null;
[L9914]  RET         call this := FreshRefGenerator__success();
[L9915]              assume now >= 0;
[L9916]              assume DType[this] == OMToken;
[L9917]              assume msgvalue_MSG == 0;
[L9918]              gas := gas - 53000;
[L9919]  CALL        call OMToken_OMToken(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L2714]              havoc __exception;
[L2715]              revert := false;
[L2716]  COND TRUE   __exception
[L2717]              __tmp__Balance := Balance;
[L2718]              __tmp__DType := DType;
[L2719]              __tmp__Alloc := Alloc;
[L2720]              __tmp__balance_ADDR := balance_ADDR;
[L2721]              __tmp__M_Ref_int := M_Ref_int;
[L2722]              __tmp__sum__balances0 := sum__balances0;
[L2723]              __tmp__alloc__allowed_ERC20_lvl0 := alloc__allowed_ERC20_lvl0;
[L2724]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L2725]              __tmp__sum__allowed1 := sum__allowed1;
[L2726]              __tmp__M_Ref_bool := M_Ref_bool;
[L2727]              __tmp__sum := sum;
[L2728]              __tmp__Length := Length;
[L2729]              __tmp__now := now;
[L2730]              __tmp___balances_ERC20 := _balances_ERC20;
[L2731]              __tmp___allowed_ERC20 := _allowed_ERC20;
[L2732]              __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L2733]              __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L2734]              __tmp___pausers_PauserRole := _pausers_PauserRole;
[L2735]              __tmp___paused_Pausable := _paused_Pausable;
[L2736]              __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L2737]              __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L2738]              __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L2739]              __tmp___minters_MinterRole := _minters_MinterRole;
[L2740]  CALL        call OMToken_OMToken__fail(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L6136]  CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L3996]  CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3981]              assume msgsender_MSG != null;
[L3982]              __tmp__Balance[this] := 0;
[L3996]  RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3997]  COND FALSE  !(revert)
[L6136]  RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6137]  COND FALSE  !(revert)
[L6140]  CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4194]  CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L3996]  CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3981]              assume msgsender_MSG != null;
[L3982]              __tmp__Balance[this] := 0;
[L3996]  RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3997]  COND FALSE  !(revert)
[L4194]  RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4195]  COND FALSE  !(revert)
[L4198]  CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4169]              assume msgsender_MSG != null;
[L4170]              __tmp__Balance[this] := 0;
[L4171]              __tmp___balances_ERC20[this] := zeroRefintArr();
[L4172]              __tmp__sum__balances0[this] := 0;
[L4173]              __tmp___allowed_ERC20[this] := zeroRefRefintArr();
[L4174]              __tmp__sum__allowed1[this] := 0;
[L4175]              __tmp___totalSupply_ERC20[this] := 0;
[L4198]  RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4199]  COND FALSE  !(revert)
[L6140]  RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6141]  COND FALSE  !(revert)
[L6144]  CALL        call PauserRole_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L4965]  CALL        call PauserRole_PauserRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4890]              assume msgsender_MSG != null;
[L4891]              __tmp__Balance[this] := 0;
[L4893]  CALL        call __var_22 := FreshRefGenerator__fail();
[L3954]              havoc newRef;
[L3955]              assume __tmp__Alloc[newRef] == false;
[L3956]              __tmp__Alloc[newRef] := true;
[L3957]              assume newRef != null;
[L4893]  RET         call __var_22 := FreshRefGenerator__fail();
[L4894]  COND FALSE  !(revert)
[L4897]              __tmp___pausers_PauserRole[this] := __var_22;
[L4899]  COND FALSE  !(__tmp__DType[this] == OMToken)
[L4904]  COND FALSE  !(__tmp__DType[this] == ERC20Pausable)
[L4909]  COND TRUE   __tmp__DType[this] == Pausable
[L4910]  CALL        call _addPauser~address_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5120]  CALL        call add~Role~address_Roles__fail(this, this, 0, __tmp___pausers_PauserRole[this], account_s797);
[L4786]              __var_17 := null;
[L4787]  COND FALSE  !(!(account_s659 != null))
[L4791]  CALL        call __var_18 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4865]              __var_21 := null;
[L4866]  COND FALSE  !(!(account_s713 != null))
[L4870]              __ret_0_ := __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s713]][account_s713];
[L4791]  RET         call __var_18 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4792]  COND FALSE  !(revert)
[L4795]  COND FALSE  !(!!__var_18)
[L4799]              __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s659]][account_s659] := true;
[L5120]  RET         call add~Role~address_Roles__fail(this, this, 0, __tmp___pausers_PauserRole[this], account_s797);
[L5121]  COND FALSE  !(revert)
[L4910]  RET         call _addPauser~address_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L4911]  COND FALSE  !(revert)
[L4965]  RET         call PauserRole_PauserRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4966]  COND FALSE  !(revert)
[L6144]  RET         call PauserRole_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L6145]  COND FALSE  !(revert)
[L6148]  CALL        call Pausable_Pausable__fail(this, msgsender_MSG, msgvalue_MSG);
[L5174]  CALL        call PauserRole_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L4965]  CALL        call PauserRole_PauserRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4890]              assume msgsender_MSG != null;
[L4891]              __tmp__Balance[this] := 0;
[L4893]  CALL        call __var_22 := FreshRefGenerator__fail();
[L3954]              havoc newRef;
[L3955]              assume __tmp__Alloc[newRef] == false;
[L3956]              __tmp__Alloc[newRef] := true;
[L3957]              assume newRef != null;
[L4893]  RET         call __var_22 := FreshRefGenerator__fail();
[L4894]  COND FALSE  !(revert)
[L4897]              __tmp___pausers_PauserRole[this] := __var_22;
[L4899]  COND FALSE  !(__tmp__DType[this] == OMToken)
[L4904]  COND FALSE  !(__tmp__DType[this] == ERC20Pausable)
[L4909]  COND TRUE   __tmp__DType[this] == Pausable
[L4910]  CALL        call _addPauser~address_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5120]  CALL        call add~Role~address_Roles__fail(this, this, 0, __tmp___pausers_PauserRole[this], account_s797);
[L4786]              __var_17 := null;
[L4787]  COND FALSE  !(!(account_s659 != null))
[L4791]  CALL        call __var_18 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4865]              __var_21 := null;
[L4866]  COND FALSE  !(!(account_s713 != null))
[L4870]              __ret_0_ := __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s713]][account_s713];
[L4791]  RET         call __var_18 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4792]  COND FALSE  !(revert)
[L4795]  COND FALSE  !(!!__var_18)
[L4799]              __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s659]][account_s659] := true;
[L5120]  RET         call add~Role~address_Roles__fail(this, this, 0, __tmp___pausers_PauserRole[this], account_s797);
[L5121]  COND FALSE  !(revert)
[L4910]  RET         call _addPauser~address_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L4911]  COND FALSE  !(revert)
[L4965]  RET         call PauserRole_PauserRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4966]  COND FALSE  !(revert)
[L5174]  RET         call PauserRole_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L5175]  COND FALSE  !(revert)
[L5178]  CALL        call Pausable_Pausable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5155]              assume msgsender_MSG != null;
[L5156]              __tmp__Balance[this] := 0;
[L5157]              __tmp___paused_Pausable[this] := false;
[L5159]              __tmp___paused_Pausable[this] := false;
[L5178]  RET         call Pausable_Pausable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5179]  COND FALSE  !(revert)
[L6148]  RET         call Pausable_Pausable__fail(this, msgsender_MSG, msgvalue_MSG);
[L6149]  COND FALSE  !(revert)
[L6152]  CALL        call ERC20Pausable_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG);
[L5280]  CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L3996]  CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3981]              assume msgsender_MSG != null;
[L3982]              __tmp__Balance[this] := 0;
[L3996]  RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3997]  COND FALSE  !(revert)
[L5280]  RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L5281]  COND FALSE  !(revert)
[L5284]  CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4194]  CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L3996]  CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3981]              assume msgsender_MSG != null;
[L3982]              __tmp__Balance[this] := 0;
[L3996]  RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3997]  COND FALSE  !(revert)
[L4194]  RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4195]  COND FALSE  !(revert)
[L4198]  CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4169]              assume msgsender_MSG != null;
[L4170]              __tmp__Balance[this] := 0;
[L4171]              __tmp___balances_ERC20[this] := zeroRefintArr();
[L4172]              __tmp__sum__balances0[this] := 0;
[L4173]              __tmp___allowed_ERC20[this] := zeroRefRefintArr();
[L4174]              __tmp__sum__allowed1[this] := 0;
[L4175]              __tmp___totalSupply_ERC20[this] := 0;
[L4198]  RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4199]  COND FALSE  !(revert)
[L5284]  RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L5285]  COND FALSE  !(revert)
[L5288]  CALL        call PauserRole_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L4965]  CALL        call PauserRole_PauserRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4890]              assume msgsender_MSG != null;
[L4891]              __tmp__Balance[this] := 0;
[L4893]  CALL        call __var_22 := FreshRefGenerator__fail();
[L3954]              havoc newRef;
[L3955]              assume __tmp__Alloc[newRef] == false;
[L3956]              __tmp__Alloc[newRef] := true;
[L3957]              assume newRef != null;
[L4893]  RET         call __var_22 := FreshRefGenerator__fail();
[L4894]  COND FALSE  !(revert)
[L4897]              __tmp___pausers_PauserRole[this] := __var_22;
[L4899]  COND FALSE  !(__tmp__DType[this] == OMToken)
[L4904]  COND FALSE  !(__tmp__DType[this] == ERC20Pausable)
[L4909]  COND TRUE   __tmp__DType[this] == Pausable
[L4910]  CALL        call _addPauser~address_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5120]  CALL        call add~Role~address_Roles__fail(this, this, 0, __tmp___pausers_PauserRole[this], account_s797);
[L4786]              __var_17 := null;
[L4787]  COND FALSE  !(!(account_s659 != null))
[L4791]  CALL        call __var_18 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4865]              __var_21 := null;
[L4866]  COND FALSE  !(!(account_s713 != null))
[L4870]              __ret_0_ := __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s713]][account_s713];
[L4791]  RET         call __var_18 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4792]  COND FALSE  !(revert)
[L4795]  COND FALSE  !(!!__var_18)
[L4799]              __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s659]][account_s659] := true;
[L5120]  RET         call add~Role~address_Roles__fail(this, this, 0, __tmp___pausers_PauserRole[this], account_s797);
[L5121]  COND FALSE  !(revert)
[L4910]  RET         call _addPauser~address_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L4911]  COND FALSE  !(revert)
[L4965]  RET         call PauserRole_PauserRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4966]  COND FALSE  !(revert)
[L5288]  RET         call PauserRole_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L5289]  COND FALSE  !(revert)
[L5292]  CALL        call Pausable_Pausable__fail(this, msgsender_MSG, msgvalue_MSG);
[L5174]  CALL        call PauserRole_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L4965]  CALL        call PauserRole_PauserRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4890]              assume msgsender_MSG != null;
[L4891]              __tmp__Balance[this] := 0;
[L4893]  CALL        call __var_22 := FreshRefGenerator__fail();
[L3954]              havoc newRef;
[L3955]              assume __tmp__Alloc[newRef] == false;
[L3956]              __tmp__Alloc[newRef] := true;
[L3957]              assume newRef != null;
[L4893]  RET         call __var_22 := FreshRefGenerator__fail();
[L4894]  COND FALSE  !(revert)
[L4897]              __tmp___pausers_PauserRole[this] := __var_22;
[L4899]  COND FALSE  !(__tmp__DType[this] == OMToken)
[L4904]  COND FALSE  !(__tmp__DType[this] == ERC20Pausable)
[L4909]  COND TRUE   __tmp__DType[this] == Pausable
[L4910]  CALL        call _addPauser~address_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5120]  CALL        call add~Role~address_Roles__fail(this, this, 0, __tmp___pausers_PauserRole[this], account_s797);
[L4786]              __var_17 := null;
[L4787]  COND FALSE  !(!(account_s659 != null))
[L4791]  CALL        call __var_18 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4865]              __var_21 := null;
[L4866]  COND FALSE  !(!(account_s713 != null))
[L4870]              __ret_0_ := __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s713]][account_s713];
[L4791]  RET         call __var_18 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4792]  COND FALSE  !(revert)
[L4795]  COND FALSE  !(!!__var_18)
[L4799]              __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s659]][account_s659] := true;
[L5120]  RET         call add~Role~address_Roles__fail(this, this, 0, __tmp___pausers_PauserRole[this], account_s797);
[L5121]  COND FALSE  !(revert)
[L4910]  RET         call _addPauser~address_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L4911]  COND FALSE  !(revert)
[L4965]  RET         call PauserRole_PauserRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4966]  COND FALSE  !(revert)
[L5174]  RET         call PauserRole_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L5175]  COND FALSE  !(revert)
[L5178]  CALL        call Pausable_Pausable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5155]              assume msgsender_MSG != null;
[L5156]              __tmp__Balance[this] := 0;
[L5157]              __tmp___paused_Pausable[this] := false;
[L5159]              __tmp___paused_Pausable[this] := false;
[L5178]  RET         call Pausable_Pausable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5179]  COND FALSE  !(revert)
[L5292]  RET         call Pausable_Pausable__fail(this, msgsender_MSG, msgvalue_MSG);
[L5293]  COND FALSE  !(revert)
[L5296]  CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5265]              assume msgsender_MSG != null;
[L5266]              __tmp__Balance[this] := 0;
[L5296]  RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5297]  COND FALSE  !(revert)
[L6152]  RET         call ERC20Pausable_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG);
[L6153]  COND FALSE  !(revert)
[L6156]  CALL        call ERC20Detailed_ERC20Detailed__fail(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L5606]  CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L3996]  CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3981]              assume msgsender_MSG != null;
[L3982]              __tmp__Balance[this] := 0;
[L3996]  RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3997]  COND FALSE  !(revert)
[L5606]  RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L5607]  COND FALSE  !(revert)
[L5610]  CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, name_s1022, symbol_s1022, decimals_s1022);
[L5579]              assume msgsender_MSG != null;
[L5580]              __tmp__Balance[this] := 0;
[L5581]              __tmp___name_ERC20Detailed[this] := -1676908070;
[L5582]              __tmp___symbol_ERC20Detailed[this] := -1676908070;
[L5583]              __tmp___decimals_ERC20Detailed[this] := 0;
[L5585]              __tmp___name_ERC20Detailed[this] := name_s1022;
[L5586]              __tmp___symbol_ERC20Detailed[this] := symbol_s1022;
[L5587]              __tmp___decimals_ERC20Detailed[this] := decimals_s1022;
[L5610]  RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, name_s1022, symbol_s1022, decimals_s1022);
[L5611]  COND FALSE  !(revert)
[L6156]  RET         call ERC20Detailed_ERC20Detailed__fail(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L6157]  COND FALSE  !(revert)
[L6160]  CALL        call MinterRole_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L5733]  CALL        call MinterRole_MinterRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5668]              assume msgsender_MSG != null;
[L5669]              __tmp__Balance[this] := 0;
[L5671]  CALL        call __var_35 := FreshRefGenerator__fail();
[L3954]              havoc newRef;
[L3955]              assume __tmp__Alloc[newRef] == false;
[L3956]              __tmp__Alloc[newRef] := true;
[L3957]              assume newRef != null;
[L5671]  RET         call __var_35 := FreshRefGenerator__fail();
[L5672]  COND FALSE  !(revert)
[L5675]              __tmp___minters_MinterRole[this] := __var_35;
[L5677]  COND TRUE   __tmp__DType[this] == OMToken
[L5678]  CALL        call _addMinter~address_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5868]  CALL        call add~Role~address_Roles__fail(this, this, 0, __tmp___minters_MinterRole[this], account_s1130);
[L4786]              __var_17 := null;
[L4787]  COND FALSE  !(!(account_s659 != null))
[L4791]  CALL        call __var_18 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4865]              __var_21 := null;
[L4866]  COND FALSE  !(!(account_s713 != null))
[L4870]              __ret_0_ := __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s713]][account_s713];
[L4791]  RET         call __var_18 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4792]  COND FALSE  !(revert)
[L4795]  COND FALSE  !(!!__var_18)
[L4799]              __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s659]][account_s659] := true;
[L5868]  RET         call add~Role~address_Roles__fail(this, this, 0, __tmp___minters_MinterRole[this], account_s1130);
[L5869]  COND FALSE  !(revert)
[L5678]  RET         call _addMinter~address_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5679]  COND FALSE  !(revert)
[L5733]  RET         call MinterRole_MinterRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5734]  COND FALSE  !(revert)
[L6160]  RET         call MinterRole_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L6161]  COND FALSE  !(revert)
[L6164]  CALL        call ERC20Mintable_ERC20Mintable__fail(this, msgsender_MSG, msgvalue_MSG);
[L5918]  CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L3996]  CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3981]              assume msgsender_MSG != null;
[L3982]              __tmp__Balance[this] := 0;
[L3996]  RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3997]  COND FALSE  !(revert)
[L5918]  RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L5919]  COND FALSE  !(revert)
[L5922]  CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4194]  CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L3996]  CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3981]              assume msgsender_MSG != null;
[L3982]              __tmp__Balance[this] := 0;
[L3996]  RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3997]  COND FALSE  !(revert)
[L4194]  RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4195]  COND FALSE  !(revert)
[L4198]  CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4169]              assume msgsender_MSG != null;
[L4170]              __tmp__Balance[this] := 0;
[L4171]              __tmp___balances_ERC20[this] := zeroRefintArr();
[L4172]              __tmp__sum__balances0[this] := 0;
[L4173]              __tmp___allowed_ERC20[this] := zeroRefRefintArr();
[L4174]              __tmp__sum__allowed1[this] := 0;
[L4175]              __tmp___totalSupply_ERC20[this] := 0;
[L4198]  RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4199]  COND FALSE  !(revert)
[L5922]  RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L5923]  COND FALSE  !(revert)
[L5926]  CALL        call MinterRole_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L5733]  CALL        call MinterRole_MinterRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5668]              assume msgsender_MSG != null;
[L5669]              __tmp__Balance[this] := 0;
[L5671]  CALL        call __var_35 := FreshRefGenerator__fail();
[L3954]              havoc newRef;
[L3955]              assume __tmp__Alloc[newRef] == false;
[L3956]              __tmp__Alloc[newRef] := true;
[L3957]              assume newRef != null;
[L5671]  RET         call __var_35 := FreshRefGenerator__fail();
[L5672]  COND FALSE  !(revert)
[L5675]              __tmp___minters_MinterRole[this] := __var_35;
[L5677]  COND TRUE   __tmp__DType[this] == OMToken
[L5678]  CALL        call _addMinter~address_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5868]  CALL        call add~Role~address_Roles__fail(this, this, 0, __tmp___minters_MinterRole[this], account_s1130);
[L4786]              __var_17 := null;
[L4787]  COND FALSE  !(!(account_s659 != null))
[L4791]  CALL        call __var_18 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4865]              __var_21 := null;
[L4866]  COND FALSE  !(!(account_s713 != null))
[L4870]              __ret_0_ := __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s713]][account_s713];
[L4791]  RET         call __var_18 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4792]  COND FALSE  !(revert)
[L4795]  COND FALSE  !(!!__var_18)
[L4799]              __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s659]][account_s659] := true;
[L5868]  RET         call add~Role~address_Roles__fail(this, this, 0, __tmp___minters_MinterRole[this], account_s1130);
[L5869]  COND FALSE  !(revert)
[L5678]  RET         call _addMinter~address_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5679]  COND FALSE  !(revert)
[L5733]  RET         call MinterRole_MinterRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5734]  COND FALSE  !(revert)
[L5926]  RET         call MinterRole_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L5927]  COND FALSE  !(revert)
[L5930]  CALL        call ERC20Mintable_ERC20Mintable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5903]              assume msgsender_MSG != null;
[L5904]              __tmp__Balance[this] := 0;
[L5930]  RET         call ERC20Mintable_ERC20Mintable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5931]  COND FALSE  !(revert)
[L6164]  RET         call ERC20Mintable_ERC20Mintable__fail(this, msgsender_MSG, msgvalue_MSG);
[L6165]  COND FALSE  !(revert)
[L6168]  CALL        call ERC20Burnable_ERC20Burnable__fail(this, msgsender_MSG, msgvalue_MSG);
[L6020]  CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L3996]  CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3981]              assume msgsender_MSG != null;
[L3982]              __tmp__Balance[this] := 0;
[L3996]  RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3997]  COND FALSE  !(revert)
[L6020]  RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6021]  COND FALSE  !(revert)
[L6024]  CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4194]  CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L3996]  CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3981]              assume msgsender_MSG != null;
[L3982]              __tmp__Balance[this] := 0;
[L3996]  RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3997]  COND FALSE  !(revert)
[L4194]  RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4195]  COND FALSE  !(revert)
[L4198]  CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4169]              assume msgsender_MSG != null;
[L4170]              __tmp__Balance[this] := 0;
[L4171]              __tmp___balances_ERC20[this] := zeroRefintArr();
[L4172]              __tmp__sum__balances0[this] := 0;
[L4173]              __tmp___allowed_ERC20[this] := zeroRefRefintArr();
[L4174]              __tmp__sum__allowed1[this] := 0;
[L4175]              __tmp___totalSupply_ERC20[this] := 0;
[L4198]  RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4199]  COND FALSE  !(revert)
[L6024]  RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6025]  COND FALSE  !(revert)
[L6028]  CALL        call ERC20Burnable_ERC20Burnable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6005]              assume msgsender_MSG != null;
[L6006]              __tmp__Balance[this] := 0;
[L6028]  RET         call ERC20Burnable_ERC20Burnable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6029]  COND FALSE  !(revert)
[L6168]  RET         call ERC20Burnable_ERC20Burnable__fail(this, msgsender_MSG, msgvalue_MSG);
[L6169]  COND FALSE  !(revert)
[L6172]  CALL        call OMToken_OMToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L6121]              assume msgsender_MSG != null;
[L6122]              __tmp__Balance[this] := 0;
[L6172]  RET         call OMToken_OMToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L6173]  COND FALSE  !(revert)
[L2740]  RET         call OMToken_OMToken__fail(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L2741]              assume revert || gas < 0;
[L9919]  RET         call OMToken_OMToken(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L9920]              assume !revert && gas >= 0;
[L9923]  CALL        call CorralChoice_OMToken(this);
[L9689]              havoc msgsender_MSG;
[L9690]              havoc msgvalue_MSG;
[L9691]              havoc choice;
[L9692]              havoc to_s916;
[L9693]              havoc value_s916;
[L9694]              havoc __ret_0_transfer;
[L9695]              havoc spender_s955;
[L9696]              havoc value_s955;
[L9697]              havoc __ret_0_approve;
[L9698]              havoc from_s937;
[L9699]              havoc to_s937;
[L9700]              havoc value_s937;
[L9701]              havoc __ret_0_transferFrom;
[L9702]              havoc __ret_0_totalSupply;
[L9703]              havoc owner_s231;
[L9704]              havoc __ret_0_balanceOf;
[L9705]              havoc owner_s247;
[L9706]              havoc spender_s247;
[L9707]              havoc __ret_0_allowance;
[L9708]              havoc spender_s973;
[L9709]              havoc addedValue_s973;
[L9710]              havoc success_s973;
[L9711]              havoc spender_s991;
[L9712]              havoc subtractedValue_s991;
[L9713]              havoc success_s991;
[L9714]              havoc account_s760;
[L9715]              havoc __ret_0_isPauser;
[L9716]              havoc account_s772;
[L9717]              havoc __ret_0_paused;
[L9718]              havoc name_s1022;
[L9719]              havoc symbol_s1022;
[L9720]              havoc decimals_s1022;
[L9721]              havoc __ret_0_name;
[L9722]              havoc __ret_0_symbol;
[L9723]              havoc __ret_0_decimals;
[L9724]              havoc account_s1093;
[L9725]              havoc __ret_0_isMinter;
[L9726]              havoc account_s1105;
[L9727]              havoc to_s1170;
[L9728]              havoc value_s1170;
[L9729]              havoc __ret_0_mint;
[L9730]              havoc value_s1185;
[L9731]              havoc from_s1198;
[L9732]              havoc value_s1198;
[L9733]              havoc name_s1230;
[L9734]              havoc symbol_s1230;
[L9735]              havoc decimals_s1230;
[L9736]              havoc tmpNow;
[L9737]              havoc gas;
[L9738]              assume gas > 4000000 && gas <= 8000000;
[L9739]              tmpNow := now;
[L9740]              havoc now;
[L9741]              assume now > tmpNow;
[L9742]              assume msgsender_MSG != null;
[L9743]              assume DType[msgsender_MSG] != IERC20;
[L9744]              assume DType[msgsender_MSG] != SafeMath;
[L9745]              assume DType[msgsender_MSG] != ERC20;
[L9746]              assume DType[msgsender_MSG] != Roles;
[L9747]              assume DType[msgsender_MSG] != PauserRole;
[L9748]              assume DType[msgsender_MSG] != Pausable;
[L9749]              assume DType[msgsender_MSG] != ERC20Pausable;
[L9750]              assume DType[msgsender_MSG] != ERC20Detailed;
[L9751]              assume DType[msgsender_MSG] != MinterRole;
[L9752]              assume DType[msgsender_MSG] != ERC20Mintable;
[L9753]              assume DType[msgsender_MSG] != ERC20Burnable;
[L9754]              assume DType[msgsender_MSG] != OMToken;
[L9755]              Alloc[msgsender_MSG] := true;
[L9756]  COND FALSE  !(choice == 23)
[L9763]  COND FALSE  !(choice == 22)
[L9770]  COND FALSE  !(choice == 21)
[L9777]  COND FALSE  !(choice == 20)
[L9783]  COND FALSE  !(choice == 19)
[L9789]  COND TRUE   choice == 18
[L9790]              gas := gas - 21000;
[L9791]  COND TRUE   gas >= 0
[L9792]              assume msgvalue_MSG == 0;
[L9793]  CALL        call __ret_0_allowance := allowance~address~address_ERC20(this, msgsender_MSG, msgvalue_MSG, owner_s247, spender_s247);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume _allowed_ERC20[this][owner_s247][spender_s247] >= 0 && _allowed_ERC20[this][owner_s247][spender_s247] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_allowance_ERC200 := true;
[L2]                 call_allowance_ERC200 := false;
[L2]                 revert := revert_hold;
[L430]               havoc __exception;
[L431]               revert := false;
[L432]   COND FALSE  !(__exception)
[L459]   CALL        call __ret_0_ := allowance~address~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, owner_s247, spender_s247);
[L4248]              __ret_0_ := _allowed_ERC20[this][owner_s247][spender_s247];
[L459]   RET         call __ret_0_ := allowance~address~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, owner_s247, spender_s247);
[L460]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((((__ret_0_ == _allowed_ERC20[this][owner_s247][spender_s247] && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowed_ERC20[this] == old(_allowed_ERC20[this])) && _minters_MinterRole[this] == old(_minters_MinterRole[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this])) && _paused_Pausable[this] == old(_paused_Pausable[this])) && _pausers_PauserRole[this] == old(_pausers_PauserRole[this]));
[L2]                 revert := revert_hold;
[L9793]  RET         call __ret_0_allowance := allowance~address~address_ERC20(this, msgsender_MSG, msgvalue_MSG, owner_s247, spender_s247);
[L9923]  RET         call CorralChoice_OMToken(this);

Loop:
[L9923]  CALL        call CorralChoice_OMToken(this);
[L9689]              havoc msgsender_MSG;
[L9690]              havoc msgvalue_MSG;
[L9691]              havoc choice;
[L9692]              havoc to_s916;
[L9693]              havoc value_s916;
[L9694]              havoc __ret_0_transfer;
[L9695]              havoc spender_s955;
[L9696]              havoc value_s955;
[L9697]              havoc __ret_0_approve;
[L9698]              havoc from_s937;
[L9699]              havoc to_s937;
[L9700]              havoc value_s937;
[L9701]              havoc __ret_0_transferFrom;
[L9702]              havoc __ret_0_totalSupply;
[L9703]              havoc owner_s231;
[L9704]              havoc __ret_0_balanceOf;
[L9705]              havoc owner_s247;
[L9706]              havoc spender_s247;
[L9707]              havoc __ret_0_allowance;
[L9708]              havoc spender_s973;
[L9709]              havoc addedValue_s973;
[L9710]              havoc success_s973;
[L9711]              havoc spender_s991;
[L9712]              havoc subtractedValue_s991;
[L9713]              havoc success_s991;
[L9714]              havoc account_s760;
[L9715]              havoc __ret_0_isPauser;
[L9716]              havoc account_s772;
[L9717]              havoc __ret_0_paused;
[L9718]              havoc name_s1022;
[L9719]              havoc symbol_s1022;
[L9720]              havoc decimals_s1022;
[L9721]              havoc __ret_0_name;
[L9722]              havoc __ret_0_symbol;
[L9723]              havoc __ret_0_decimals;
[L9724]              havoc account_s1093;
[L9725]              havoc __ret_0_isMinter;
[L9726]              havoc account_s1105;
[L9727]              havoc to_s1170;
[L9728]              havoc value_s1170;
[L9729]              havoc __ret_0_mint;
[L9730]              havoc value_s1185;
[L9731]              havoc from_s1198;
[L9732]              havoc value_s1198;
[L9733]              havoc name_s1230;
[L9734]              havoc symbol_s1230;
[L9735]              havoc decimals_s1230;
[L9736]              havoc tmpNow;
[L9737]              havoc gas;
[L9738]              assume gas > 4000000 && gas <= 8000000;
[L9739]              tmpNow := now;
[L9740]              havoc now;
[L9741]              assume now > tmpNow;
[L9742]              assume msgsender_MSG != null;
[L9743]              assume DType[msgsender_MSG] != IERC20;
[L9744]              assume DType[msgsender_MSG] != SafeMath;
[L9745]              assume DType[msgsender_MSG] != ERC20;
[L9746]              assume DType[msgsender_MSG] != Roles;
[L9747]              assume DType[msgsender_MSG] != PauserRole;
[L9748]              assume DType[msgsender_MSG] != Pausable;
[L9749]              assume DType[msgsender_MSG] != ERC20Pausable;
[L9750]              assume DType[msgsender_MSG] != ERC20Detailed;
[L9751]              assume DType[msgsender_MSG] != MinterRole;
[L9752]              assume DType[msgsender_MSG] != ERC20Mintable;
[L9753]              assume DType[msgsender_MSG] != ERC20Burnable;
[L9754]              assume DType[msgsender_MSG] != OMToken;
[L9755]              Alloc[msgsender_MSG] := true;
[L9756]  COND FALSE  !(choice == 23)
[L9763]  COND FALSE  !(choice == 22)
[L9770]  COND FALSE  !(choice == 21)
[L9777]  COND FALSE  !(choice == 20)
[L9783]  COND FALSE  !(choice == 19)
[L9789]  COND TRUE   choice == 18
[L9790]              gas := gas - 21000;
[L9791]  COND TRUE   gas >= 0
[L9792]              assume msgvalue_MSG == 0;
[L9793]  CALL        call __ret_0_allowance := allowance~address~address_ERC20(this, msgsender_MSG, msgvalue_MSG, owner_s247, spender_s247);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume _allowed_ERC20[this][owner_s247][spender_s247] >= 0 && _allowed_ERC20[this][owner_s247][spender_s247] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_allowance_ERC200 := true;
[L2]                 call_allowance_ERC200 := false;
[L2]                 revert := revert_hold;
[L430]               havoc __exception;
[L431]               revert := false;
[L432]   COND FALSE  !(__exception)
[L459]   CALL        call __ret_0_ := allowance~address~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, owner_s247, spender_s247);
[L4248]              __ret_0_ := _allowed_ERC20[this][owner_s247][spender_s247];
[L459]   RET         call __ret_0_ := allowance~address~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, owner_s247, spender_s247);
[L460]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((((__ret_0_ == _allowed_ERC20[this][owner_s247][spender_s247] && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowed_ERC20[this] == old(_allowed_ERC20[this])) && _minters_MinterRole[this] == old(_minters_MinterRole[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this])) && _paused_Pausable[this] == old(_paused_Pausable[this])) && _pausers_PauserRole[this] == old(_pausers_PauserRole[this]));
[L2]                 revert := revert_hold;
[L9793]  RET         call __ret_0_allowance := allowance~address~address_ERC20(this, msgsender_MSG, msgvalue_MSG, owner_s247, spender_s247);
[L9923]  RET         call CorralChoice_OMToken(this);

[2020-11-25 02:29:13,300 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 02:29:13,301 INFO  L82        PathProgramCache]: Analyzing trace with hash 840294900, now seen corresponding path program 1 times
[2020-11-25 02:29:13,302 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 02:29:13,312 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 02:29:13,501 INFO  L134       CoverageAnalysis]: Checked inductivity of 999 backedges. 9 proven. 25 refuted. 0 times theorem prover too weak. 965 trivial. 0 not checked.
[2020-11-25 02:29:13,502 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 02:29:13,502 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [9] total 9
[2020-11-25 02:29:13,502 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 02:29:13,502 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 9 interpolants.
[2020-11-25 02:29:13,502 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=15, Invalid=57, Unknown=0, NotChecked=0, Total=72
[2020-11-25 02:29:13,503 INFO  L87              Difference]: Start difference. First operand 7748 states and 8929 transitions. cyclomatic complexity: 1185 Second operand 9 states.
[2020-11-25 02:29:14,863 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 02:29:14,864 INFO  L93              Difference]: Finished difference Result 7896 states and 9090 transitions.
[2020-11-25 02:29:14,864 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 10 states. 
[2020-11-25 02:29:14,864 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 7896 states and 9090 transitions.
[2020-11-25 02:29:14,879 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 6
[2020-11-25 02:29:14,894 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 7896 states to 7853 states and 9036 transitions.
[2020-11-25 02:29:14,895 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1757
[2020-11-25 02:29:14,895 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1757
[2020-11-25 02:29:14,895 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 7853 states and 9036 transitions.
[2020-11-25 02:29:14,899 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 02:29:14,900 INFO  L728         BuchiCegarLoop]: Abstraction has 7853 states and 9036 transitions.
[2020-11-25 02:29:14,904 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 7853 states and 9036 transitions.
[2020-11-25 02:29:14,937 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 7853 to 7748.
[2020-11-25 02:29:14,937 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 7748 states.
[2020-11-25 02:29:14,945 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 7748 states to 7748 states and 8929 transitions.
[2020-11-25 02:29:14,945 INFO  L751         BuchiCegarLoop]: Abstraction has 7748 states and 8929 transitions.
[2020-11-25 02:29:14,945 INFO  L631         BuchiCegarLoop]: Abstraction has 7748 states and 8929 transitions.
[2020-11-25 02:29:14,945 INFO  L445         BuchiCegarLoop]: ======== Iteration 12============
[2020-11-25 02:29:14,945 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 7748 states and 8929 transitions.
[2020-11-25 02:29:14,953 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 6
[2020-11-25 02:29:14,953 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 02:29:14,953 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 02:29:14,955 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [9, 9, 9, 9, 9, 9, 9, 9, 9, 7, 7, 7, 7, 7, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 02:29:14,955 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_allowance_ERC200 := false;
[L2]                 call_allowance_ERC200 := false;
[L2]     CALL        call main();
[L9913]              assume null == 0;
[L9914]  CALL        call this := FreshRefGenerator__success();
[L3962]              havoc newRef;
[L3963]              assume Alloc[newRef] == false;
[L3964]              Alloc[newRef] := true;
[L3965]              assume newRef != null;
[L9914]  RET         call this := FreshRefGenerator__success();
[L9915]              assume now >= 0;
[L9916]              assume DType[this] == OMToken;
[L9917]              assume msgvalue_MSG == 0;
[L9918]              gas := gas - 53000;
[L9919]  CALL        call OMToken_OMToken(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L2714]              havoc __exception;
[L2715]              revert := false;
[L2716]  COND FALSE  !(__exception)
[L2743]  CALL        call OMToken_OMToken__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L6180]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4004]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3989]              assume msgsender_MSG != null;
[L3990]              Balance[this] := 0;
[L4004]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  COND FALSE  !(revert)
[L6180]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6181]  COND FALSE  !(revert)
[L6184]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4206]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4004]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3989]              assume msgsender_MSG != null;
[L3990]              Balance[this] := 0;
[L4004]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  COND FALSE  !(revert)
[L4206]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4207]  COND FALSE  !(revert)
[L4210]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4182]              assume msgsender_MSG != null;
[L4183]              Balance[this] := 0;
[L4184]              _balances_ERC20[this] := zeroRefintArr();
[L4185]              sum__balances0[this] := 0;
[L4186]              _allowed_ERC20[this] := zeroRefRefintArr();
[L4187]              sum__allowed1[this] := 0;
[L4188]              _totalSupply_ERC20[this] := 0;
[L4210]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4211]  COND FALSE  !(revert)
[L6184]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6185]  COND FALSE  !(revert)
[L6188]  CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4974]  CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4928]              assume msgsender_MSG != null;
[L4929]              Balance[this] := 0;
[L4931]  CALL        call __var_22 := FreshRefGenerator__success();
[L3962]              havoc newRef;
[L3963]              assume Alloc[newRef] == false;
[L3964]              Alloc[newRef] := true;
[L3965]              assume newRef != null;
[L4931]  RET         call __var_22 := FreshRefGenerator__success();
[L4932]  COND FALSE  !(revert)
[L4935]              _pausers_PauserRole[this] := __var_22;
[L4937]  COND TRUE   DType[this] == OMToken
[L4938]  CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5128]  CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L4806]              __var_17 := null;
[L4807]  COND FALSE  !(!(account_s659 != null))
[L4811]  CALL        call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4877]              __var_21 := null;
[L4878]  COND FALSE  !(!(account_s713 != null))
[L4882]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s713]][account_s713];
[L4811]  RET         call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4812]  COND FALSE  !(revert)
[L4815]  COND FALSE  !(!!__var_18)
[L4819]              M_Ref_bool[bearer_Roles.Role[role_s659]][account_s659] := true;
[L5128]  RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L5129]  COND FALSE  !(revert)
[L5132]              assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L4938]  RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L4939]  COND FALSE  !(revert)
[L4974]  RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4975]  COND FALSE  !(revert)
[L6188]  RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6189]  COND FALSE  !(revert)
[L6192]  CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L5186]  CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4974]  CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4928]              assume msgsender_MSG != null;
[L4929]              Balance[this] := 0;
[L4931]  CALL        call __var_22 := FreshRefGenerator__success();
[L3962]              havoc newRef;
[L3963]              assume Alloc[newRef] == false;
[L3964]              Alloc[newRef] := true;
[L3965]              assume newRef != null;
[L4931]  RET         call __var_22 := FreshRefGenerator__success();
[L4932]  COND FALSE  !(revert)
[L4935]              _pausers_PauserRole[this] := __var_22;
[L4937]  COND TRUE   DType[this] == OMToken
[L4938]  CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5128]  CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L4806]              __var_17 := null;
[L4807]  COND FALSE  !(!(account_s659 != null))
[L4811]  CALL        call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4877]              __var_21 := null;
[L4878]  COND FALSE  !(!(account_s713 != null))
[L4882]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s713]][account_s713];
[L4811]  RET         call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4812]  COND FALSE  !(revert)
[L4815]  COND FALSE  !(!!__var_18)
[L4819]              M_Ref_bool[bearer_Roles.Role[role_s659]][account_s659] := true;
[L5128]  RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L5129]  COND FALSE  !(revert)
[L5132]              assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L4938]  RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L4939]  COND FALSE  !(revert)
[L4974]  RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4975]  COND FALSE  !(revert)
[L5186]  RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5187]  COND FALSE  !(revert)
[L5190]  CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5165]              assume msgsender_MSG != null;
[L5166]              Balance[this] := 0;
[L5167]              _paused_Pausable[this] := false;
[L5169]              _paused_Pausable[this] := false;
[L5190]  RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5191]  COND FALSE  !(revert)
[L6192]  RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6193]  COND FALSE  !(revert)
[L6196]  CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L5304]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4004]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3989]              assume msgsender_MSG != null;
[L3990]              Balance[this] := 0;
[L4004]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  COND FALSE  !(revert)
[L5304]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5305]  COND FALSE  !(revert)
[L5308]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4206]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4004]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3989]              assume msgsender_MSG != null;
[L3990]              Balance[this] := 0;
[L4004]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  COND FALSE  !(revert)
[L4206]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4207]  COND FALSE  !(revert)
[L4210]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4182]              assume msgsender_MSG != null;
[L4183]              Balance[this] := 0;
[L4184]              _balances_ERC20[this] := zeroRefintArr();
[L4185]              sum__balances0[this] := 0;
[L4186]              _allowed_ERC20[this] := zeroRefRefintArr();
[L4187]              sum__allowed1[this] := 0;
[L4188]              _totalSupply_ERC20[this] := 0;
[L4210]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4211]  COND FALSE  !(revert)
[L5308]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5309]  COND FALSE  !(revert)
[L5312]  CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4974]  CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4928]              assume msgsender_MSG != null;
[L4929]              Balance[this] := 0;
[L4931]  CALL        call __var_22 := FreshRefGenerator__success();
[L3962]              havoc newRef;
[L3963]              assume Alloc[newRef] == false;
[L3964]              Alloc[newRef] := true;
[L3965]              assume newRef != null;
[L4931]  RET         call __var_22 := FreshRefGenerator__success();
[L4932]  COND FALSE  !(revert)
[L4935]              _pausers_PauserRole[this] := __var_22;
[L4937]  COND TRUE   DType[this] == OMToken
[L4938]  CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5128]  CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L4806]              __var_17 := null;
[L4807]  COND FALSE  !(!(account_s659 != null))
[L4811]  CALL        call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4877]              __var_21 := null;
[L4878]  COND FALSE  !(!(account_s713 != null))
[L4882]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s713]][account_s713];
[L4811]  RET         call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4812]  COND FALSE  !(revert)
[L4815]  COND FALSE  !(!!__var_18)
[L4819]              M_Ref_bool[bearer_Roles.Role[role_s659]][account_s659] := true;
[L5128]  RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L5129]  COND FALSE  !(revert)
[L5132]              assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L4938]  RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L4939]  COND FALSE  !(revert)
[L4974]  RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4975]  COND FALSE  !(revert)
[L5312]  RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5313]  COND FALSE  !(revert)
[L5316]  CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L5186]  CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4974]  CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4928]              assume msgsender_MSG != null;
[L4929]              Balance[this] := 0;
[L4931]  CALL        call __var_22 := FreshRefGenerator__success();
[L3962]              havoc newRef;
[L3963]              assume Alloc[newRef] == false;
[L3964]              Alloc[newRef] := true;
[L3965]              assume newRef != null;
[L4931]  RET         call __var_22 := FreshRefGenerator__success();
[L4932]  COND FALSE  !(revert)
[L4935]              _pausers_PauserRole[this] := __var_22;
[L4937]  COND FALSE  !(DType[this] == OMToken)
[L4942]  COND TRUE   DType[this] == ERC20Pausable
[L4943]  CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5128]  CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L4806]              __var_17 := null;
[L4807]  COND FALSE  !(!(account_s659 != null))
[L4811]  CALL        call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4877]              __var_21 := null;
[L4878]  COND FALSE  !(!(account_s713 != null))
[L4882]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s713]][account_s713];
[L4811]  RET         call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4812]  COND FALSE  !(revert)
[L4815]  COND FALSE  !(!!__var_18)
[L4819]              M_Ref_bool[bearer_Roles.Role[role_s659]][account_s659] := true;
[L5128]  RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L5129]  COND FALSE  !(revert)
[L5132]              assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L4943]  RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L4944]  COND FALSE  !(revert)
[L4974]  RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4975]  COND FALSE  !(revert)
[L5186]  RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5187]  COND FALSE  !(revert)
[L5190]  CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5165]              assume msgsender_MSG != null;
[L5166]              Balance[this] := 0;
[L5167]              _paused_Pausable[this] := false;
[L5169]              _paused_Pausable[this] := false;
[L5190]  RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5191]  COND FALSE  !(revert)
[L5316]  RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L5317]  COND FALSE  !(revert)
[L5320]  CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5273]              assume msgsender_MSG != null;
[L5274]              Balance[this] := 0;
[L5320]  RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5321]  COND FALSE  !(revert)
[L6196]  RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6197]  COND FALSE  !(revert)
[L6200]  CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L5618]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4004]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3989]              assume msgsender_MSG != null;
[L3990]              Balance[this] := 0;
[L4004]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  COND FALSE  !(revert)
[L5618]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5619]  COND FALSE  !(revert)
[L5622]  CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1022, symbol_s1022, decimals_s1022);
[L5593]              assume msgsender_MSG != null;
[L5594]              Balance[this] := 0;
[L5595]              _name_ERC20Detailed[this] := -1676908070;
[L5596]              _symbol_ERC20Detailed[this] := -1676908070;
[L5597]              _decimals_ERC20Detailed[this] := 0;
[L5599]              _name_ERC20Detailed[this] := name_s1022;
[L5600]              _symbol_ERC20Detailed[this] := symbol_s1022;
[L5601]              _decimals_ERC20Detailed[this] := decimals_s1022;
[L5622]  RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1022, symbol_s1022, decimals_s1022);
[L5623]  COND FALSE  !(revert)
[L6200]  RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L6201]  COND FALSE  !(revert)
[L6204]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5742]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5701]              assume msgsender_MSG != null;
[L5702]              Balance[this] := 0;
[L5704]  CALL        call __var_35 := FreshRefGenerator__success();
[L3962]              havoc newRef;
[L3963]              assume Alloc[newRef] == false;
[L3964]              Alloc[newRef] := true;
[L3965]              assume newRef != null;
[L5704]  RET         call __var_35 := FreshRefGenerator__success();
[L5705]  COND FALSE  !(revert)
[L5708]              _minters_MinterRole[this] := __var_35;
[L5710]  COND TRUE   DType[this] == OMToken
[L5711]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5876]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1130);
[L4806]              __var_17 := null;
[L4807]  COND FALSE  !(!(account_s659 != null))
[L4811]  CALL        call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4877]              __var_21 := null;
[L4878]  COND FALSE  !(!(account_s713 != null))
[L4882]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s713]][account_s713];
[L4811]  RET         call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4812]  COND FALSE  !(revert)
[L4815]  COND FALSE  !(!!__var_18)
[L4819]              M_Ref_bool[bearer_Roles.Role[role_s659]][account_s659] := true;
[L5876]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1130);
[L5877]  COND FALSE  !(revert)
[L5880]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L5711]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5712]  COND FALSE  !(revert)
[L5742]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5743]  COND FALSE  !(revert)
[L6204]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6205]  COND FALSE  !(revert)
[L6208]  CALL        call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L5938]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4004]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3989]              assume msgsender_MSG != null;
[L3990]              Balance[this] := 0;
[L4004]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  COND FALSE  !(revert)
[L5938]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5939]  COND FALSE  !(revert)
[L5942]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4206]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4004]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3989]              assume msgsender_MSG != null;
[L3990]              Balance[this] := 0;
[L4004]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  COND FALSE  !(revert)
[L4206]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4207]  COND FALSE  !(revert)
[L4210]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4182]              assume msgsender_MSG != null;
[L4183]              Balance[this] := 0;
[L4184]              _balances_ERC20[this] := zeroRefintArr();
[L4185]              sum__balances0[this] := 0;
[L4186]              _allowed_ERC20[this] := zeroRefRefintArr();
[L4187]              sum__allowed1[this] := 0;
[L4188]              _totalSupply_ERC20[this] := 0;
[L4210]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4211]  COND FALSE  !(revert)
[L5942]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5943]  COND FALSE  !(revert)
[L5946]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5742]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5701]              assume msgsender_MSG != null;
[L5702]              Balance[this] := 0;
[L5704]  CALL        call __var_35 := FreshRefGenerator__success();
[L3962]              havoc newRef;
[L3963]              assume Alloc[newRef] == false;
[L3964]              Alloc[newRef] := true;
[L3965]              assume newRef != null;
[L5704]  RET         call __var_35 := FreshRefGenerator__success();
[L5705]  COND FALSE  !(revert)
[L5708]              _minters_MinterRole[this] := __var_35;
[L5710]  COND TRUE   DType[this] == OMToken
[L5711]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5876]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1130);
[L4806]              __var_17 := null;
[L4807]  COND FALSE  !(!(account_s659 != null))
[L4811]  CALL        call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4877]              __var_21 := null;
[L4878]  COND FALSE  !(!(account_s713 != null))
[L4882]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s713]][account_s713];
[L4811]  RET         call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4812]  COND FALSE  !(revert)
[L4815]  COND FALSE  !(!!__var_18)
[L4819]              M_Ref_bool[bearer_Roles.Role[role_s659]][account_s659] := true;
[L5876]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1130);
[L5877]  COND FALSE  !(revert)
[L5880]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L5711]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5712]  COND FALSE  !(revert)
[L5742]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5743]  COND FALSE  !(revert)
[L5946]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5947]  COND FALSE  !(revert)
[L5950]  CALL        call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5911]              assume msgsender_MSG != null;
[L5912]              Balance[this] := 0;
[L5950]  RET         call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5951]  COND FALSE  !(revert)
[L6208]  RET         call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L6209]  COND FALSE  !(revert)
[L6212]  CALL        call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6036]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4004]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3989]              assume msgsender_MSG != null;
[L3990]              Balance[this] := 0;
[L4004]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  COND FALSE  !(revert)
[L6036]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6037]  COND FALSE  !(revert)
[L6040]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4206]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4004]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3989]              assume msgsender_MSG != null;
[L3990]              Balance[this] := 0;
[L4004]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  COND FALSE  !(revert)
[L4206]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4207]  COND FALSE  !(revert)
[L4210]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4182]              assume msgsender_MSG != null;
[L4183]              Balance[this] := 0;
[L4184]              _balances_ERC20[this] := zeroRefintArr();
[L4185]              sum__balances0[this] := 0;
[L4186]              _allowed_ERC20[this] := zeroRefRefintArr();
[L4187]              sum__allowed1[this] := 0;
[L4188]              _totalSupply_ERC20[this] := 0;
[L4210]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4211]  COND FALSE  !(revert)
[L6040]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6041]  COND FALSE  !(revert)
[L6044]  CALL        call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6013]              assume msgsender_MSG != null;
[L6014]              Balance[this] := 0;
[L6044]  RET         call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6045]  COND FALSE  !(revert)
[L6212]  RET         call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6213]  COND FALSE  !(revert)
[L6216]  CALL        call OMToken_OMToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L6129]              assume msgsender_MSG != null;
[L6130]              Balance[this] := 0;
[L6216]  RET         call OMToken_OMToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L6217]  COND FALSE  !(revert)
[L2743]  RET         call OMToken_OMToken__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L2744]              assume !revert && gas >= 0;
[L9919]  RET         call OMToken_OMToken(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L9920]              assume !revert && gas >= 0;
[L9923]  CALL        call CorralChoice_OMToken(this);
[L9689]              havoc msgsender_MSG;
[L9690]              havoc msgvalue_MSG;
[L9691]              havoc choice;
[L9692]              havoc to_s916;
[L9693]              havoc value_s916;
[L9694]              havoc __ret_0_transfer;
[L9695]              havoc spender_s955;
[L9696]              havoc value_s955;
[L9697]              havoc __ret_0_approve;
[L9698]              havoc from_s937;
[L9699]              havoc to_s937;
[L9700]              havoc value_s937;
[L9701]              havoc __ret_0_transferFrom;
[L9702]              havoc __ret_0_totalSupply;
[L9703]              havoc owner_s231;
[L9704]              havoc __ret_0_balanceOf;
[L9705]              havoc owner_s247;
[L9706]              havoc spender_s247;
[L9707]              havoc __ret_0_allowance;
[L9708]              havoc spender_s973;
[L9709]              havoc addedValue_s973;
[L9710]              havoc success_s973;
[L9711]              havoc spender_s991;
[L9712]              havoc subtractedValue_s991;
[L9713]              havoc success_s991;
[L9714]              havoc account_s760;
[L9715]              havoc __ret_0_isPauser;
[L9716]              havoc account_s772;
[L9717]              havoc __ret_0_paused;
[L9718]              havoc name_s1022;
[L9719]              havoc symbol_s1022;
[L9720]              havoc decimals_s1022;
[L9721]              havoc __ret_0_name;
[L9722]              havoc __ret_0_symbol;
[L9723]              havoc __ret_0_decimals;
[L9724]              havoc account_s1093;
[L9725]              havoc __ret_0_isMinter;
[L9726]              havoc account_s1105;
[L9727]              havoc to_s1170;
[L9728]              havoc value_s1170;
[L9729]              havoc __ret_0_mint;
[L9730]              havoc value_s1185;
[L9731]              havoc from_s1198;
[L9732]              havoc value_s1198;
[L9733]              havoc name_s1230;
[L9734]              havoc symbol_s1230;
[L9735]              havoc decimals_s1230;
[L9736]              havoc tmpNow;
[L9737]              havoc gas;
[L9738]              assume gas > 4000000 && gas <= 8000000;
[L9739]              tmpNow := now;
[L9740]              havoc now;
[L9741]              assume now > tmpNow;
[L9742]              assume msgsender_MSG != null;
[L9743]              assume DType[msgsender_MSG] != IERC20;
[L9744]              assume DType[msgsender_MSG] != SafeMath;
[L9745]              assume DType[msgsender_MSG] != ERC20;
[L9746]              assume DType[msgsender_MSG] != Roles;
[L9747]              assume DType[msgsender_MSG] != PauserRole;
[L9748]              assume DType[msgsender_MSG] != Pausable;
[L9749]              assume DType[msgsender_MSG] != ERC20Pausable;
[L9750]              assume DType[msgsender_MSG] != ERC20Detailed;
[L9751]              assume DType[msgsender_MSG] != MinterRole;
[L9752]              assume DType[msgsender_MSG] != ERC20Mintable;
[L9753]              assume DType[msgsender_MSG] != ERC20Burnable;
[L9754]              assume DType[msgsender_MSG] != OMToken;
[L9755]              Alloc[msgsender_MSG] := true;
[L9756]  COND FALSE  !(choice == 23)
[L9763]  COND FALSE  !(choice == 22)
[L9770]  COND FALSE  !(choice == 21)
[L9777]  COND FALSE  !(choice == 20)
[L9783]  COND FALSE  !(choice == 19)
[L9789]  COND TRUE   choice == 18
[L9790]              gas := gas - 21000;
[L9791]  COND TRUE   gas >= 0
[L9792]              assume msgvalue_MSG == 0;
[L9793]  CALL        call __ret_0_allowance := allowance~address~address_ERC20(this, msgsender_MSG, msgvalue_MSG, owner_s247, spender_s247);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume _allowed_ERC20[this][owner_s247][spender_s247] >= 0 && _allowed_ERC20[this][owner_s247][spender_s247] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_allowance_ERC200 := true;
[L2]                 call_allowance_ERC200 := false;
[L2]                 revert := revert_hold;
[L430]               havoc __exception;
[L431]               revert := false;
[L432]   COND FALSE  !(__exception)
[L459]   CALL        call __ret_0_ := allowance~address~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, owner_s247, spender_s247);
[L4248]              __ret_0_ := _allowed_ERC20[this][owner_s247][spender_s247];
[L459]   RET         call __ret_0_ := allowance~address~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, owner_s247, spender_s247);
[L460]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((((__ret_0_ == _allowed_ERC20[this][owner_s247][spender_s247] && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowed_ERC20[this] == old(_allowed_ERC20[this])) && _minters_MinterRole[this] == old(_minters_MinterRole[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this])) && _paused_Pausable[this] == old(_paused_Pausable[this])) && _pausers_PauserRole[this] == old(_pausers_PauserRole[this]));
[L2]                 revert := revert_hold;
[L9793]  RET         call __ret_0_allowance := allowance~address~address_ERC20(this, msgsender_MSG, msgvalue_MSG, owner_s247, spender_s247);
[L9923]  RET         call CorralChoice_OMToken(this);

Loop:
[L9923]  CALL        call CorralChoice_OMToken(this);
[L9689]              havoc msgsender_MSG;
[L9690]              havoc msgvalue_MSG;
[L9691]              havoc choice;
[L9692]              havoc to_s916;
[L9693]              havoc value_s916;
[L9694]              havoc __ret_0_transfer;
[L9695]              havoc spender_s955;
[L9696]              havoc value_s955;
[L9697]              havoc __ret_0_approve;
[L9698]              havoc from_s937;
[L9699]              havoc to_s937;
[L9700]              havoc value_s937;
[L9701]              havoc __ret_0_transferFrom;
[L9702]              havoc __ret_0_totalSupply;
[L9703]              havoc owner_s231;
[L9704]              havoc __ret_0_balanceOf;
[L9705]              havoc owner_s247;
[L9706]              havoc spender_s247;
[L9707]              havoc __ret_0_allowance;
[L9708]              havoc spender_s973;
[L9709]              havoc addedValue_s973;
[L9710]              havoc success_s973;
[L9711]              havoc spender_s991;
[L9712]              havoc subtractedValue_s991;
[L9713]              havoc success_s991;
[L9714]              havoc account_s760;
[L9715]              havoc __ret_0_isPauser;
[L9716]              havoc account_s772;
[L9717]              havoc __ret_0_paused;
[L9718]              havoc name_s1022;
[L9719]              havoc symbol_s1022;
[L9720]              havoc decimals_s1022;
[L9721]              havoc __ret_0_name;
[L9722]              havoc __ret_0_symbol;
[L9723]              havoc __ret_0_decimals;
[L9724]              havoc account_s1093;
[L9725]              havoc __ret_0_isMinter;
[L9726]              havoc account_s1105;
[L9727]              havoc to_s1170;
[L9728]              havoc value_s1170;
[L9729]              havoc __ret_0_mint;
[L9730]              havoc value_s1185;
[L9731]              havoc from_s1198;
[L9732]              havoc value_s1198;
[L9733]              havoc name_s1230;
[L9734]              havoc symbol_s1230;
[L9735]              havoc decimals_s1230;
[L9736]              havoc tmpNow;
[L9737]              havoc gas;
[L9738]              assume gas > 4000000 && gas <= 8000000;
[L9739]              tmpNow := now;
[L9740]              havoc now;
[L9741]              assume now > tmpNow;
[L9742]              assume msgsender_MSG != null;
[L9743]              assume DType[msgsender_MSG] != IERC20;
[L9744]              assume DType[msgsender_MSG] != SafeMath;
[L9745]              assume DType[msgsender_MSG] != ERC20;
[L9746]              assume DType[msgsender_MSG] != Roles;
[L9747]              assume DType[msgsender_MSG] != PauserRole;
[L9748]              assume DType[msgsender_MSG] != Pausable;
[L9749]              assume DType[msgsender_MSG] != ERC20Pausable;
[L9750]              assume DType[msgsender_MSG] != ERC20Detailed;
[L9751]              assume DType[msgsender_MSG] != MinterRole;
[L9752]              assume DType[msgsender_MSG] != ERC20Mintable;
[L9753]              assume DType[msgsender_MSG] != ERC20Burnable;
[L9754]              assume DType[msgsender_MSG] != OMToken;
[L9755]              Alloc[msgsender_MSG] := true;
[L9756]  COND FALSE  !(choice == 23)
[L9763]  COND FALSE  !(choice == 22)
[L9770]  COND FALSE  !(choice == 21)
[L9777]  COND FALSE  !(choice == 20)
[L9783]  COND FALSE  !(choice == 19)
[L9789]  COND TRUE   choice == 18
[L9790]              gas := gas - 21000;
[L9791]  COND TRUE   gas >= 0
[L9792]              assume msgvalue_MSG == 0;
[L9793]  CALL        call __ret_0_allowance := allowance~address~address_ERC20(this, msgsender_MSG, msgvalue_MSG, owner_s247, spender_s247);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume _allowed_ERC20[this][owner_s247][spender_s247] >= 0 && _allowed_ERC20[this][owner_s247][spender_s247] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_allowance_ERC200 := true;
[L2]                 call_allowance_ERC200 := false;
[L2]                 revert := revert_hold;
[L430]               havoc __exception;
[L431]               revert := false;
[L432]   COND FALSE  !(__exception)
[L459]   CALL        call __ret_0_ := allowance~address~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, owner_s247, spender_s247);
[L4248]              __ret_0_ := _allowed_ERC20[this][owner_s247][spender_s247];
[L459]   RET         call __ret_0_ := allowance~address~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, owner_s247, spender_s247);
[L460]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((((__ret_0_ == _allowed_ERC20[this][owner_s247][spender_s247] && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowed_ERC20[this] == old(_allowed_ERC20[this])) && _minters_MinterRole[this] == old(_minters_MinterRole[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this])) && _paused_Pausable[this] == old(_paused_Pausable[this])) && _pausers_PauserRole[this] == old(_pausers_PauserRole[this]));
[L2]                 revert := revert_hold;
[L9793]  RET         call __ret_0_allowance := allowance~address~address_ERC20(this, msgsender_MSG, msgvalue_MSG, owner_s247, spender_s247);
[L9923]  RET         call CorralChoice_OMToken(this);

[2020-11-25 02:29:14,960 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 02:29:14,960 INFO  L82        PathProgramCache]: Analyzing trace with hash -1532437344, now seen corresponding path program 1 times
[2020-11-25 02:29:14,961 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 02:29:14,973 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 02:29:15,120 INFO  L134       CoverageAnalysis]: Checked inductivity of 1018 backedges. 25 proven. 0 refuted. 0 times theorem prover too weak. 993 trivial. 0 not checked.
[2020-11-25 02:29:15,120 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 02:29:15,121 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [9] imperfect sequences [] total 9
[2020-11-25 02:29:15,121 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 02:29:15,121 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 9 interpolants.
[2020-11-25 02:29:15,121 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=15, Invalid=57, Unknown=0, NotChecked=0, Total=72
[2020-11-25 02:29:15,121 INFO  L87              Difference]: Start difference. First operand 7748 states and 8929 transitions. cyclomatic complexity: 1185 Second operand 9 states.
[2020-11-25 02:29:15,298 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 02:29:15,298 INFO  L93              Difference]: Finished difference Result 7791 states and 8978 transitions.
[2020-11-25 02:29:15,298 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 9 states. 
[2020-11-25 02:29:15,298 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 7791 states and 8978 transitions.
[2020-11-25 02:29:15,312 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 6
[2020-11-25 02:29:15,325 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 7791 states to 7744 states and 8923 transitions.
[2020-11-25 02:29:15,325 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1743
[2020-11-25 02:29:15,326 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1743
[2020-11-25 02:29:15,326 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 7744 states and 8923 transitions.
[2020-11-25 02:29:15,329 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 02:29:15,329 INFO  L728         BuchiCegarLoop]: Abstraction has 7744 states and 8923 transitions.
[2020-11-25 02:29:15,333 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 7744 states and 8923 transitions.
[2020-11-25 02:29:15,364 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 7744 to 7744.
[2020-11-25 02:29:15,364 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 7744 states.
[2020-11-25 02:29:15,371 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 7744 states to 7744 states and 8923 transitions.
[2020-11-25 02:29:15,371 INFO  L751         BuchiCegarLoop]: Abstraction has 7744 states and 8923 transitions.
[2020-11-25 02:29:15,371 INFO  L631         BuchiCegarLoop]: Abstraction has 7744 states and 8923 transitions.
[2020-11-25 02:29:15,371 INFO  L445         BuchiCegarLoop]: ======== Iteration 13============
[2020-11-25 02:29:15,371 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 7744 states and 8923 transitions.
[2020-11-25 02:29:15,403 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 6
[2020-11-25 02:29:15,403 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 02:29:15,403 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 02:29:15,406 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [9, 9, 9, 9, 9, 9, 9, 9, 9, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 02:29:15,406 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_allowance_ERC200 := false;
[L2]                 call_allowance_ERC200 := false;
[L2]     CALL        call main();
[L9913]              assume null == 0;
[L9914]  CALL        call this := FreshRefGenerator__success();
[L3962]              havoc newRef;
[L3963]              assume Alloc[newRef] == false;
[L3964]              Alloc[newRef] := true;
[L3965]              assume newRef != null;
[L9914]  RET         call this := FreshRefGenerator__success();
[L9915]              assume now >= 0;
[L9916]              assume DType[this] == OMToken;
[L9917]              assume msgvalue_MSG == 0;
[L9918]              gas := gas - 53000;
[L9919]  CALL        call OMToken_OMToken(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L2714]              havoc __exception;
[L2715]              revert := false;
[L2716]  COND TRUE   __exception
[L2717]              __tmp__Balance := Balance;
[L2718]              __tmp__DType := DType;
[L2719]              __tmp__Alloc := Alloc;
[L2720]              __tmp__balance_ADDR := balance_ADDR;
[L2721]              __tmp__M_Ref_int := M_Ref_int;
[L2722]              __tmp__sum__balances0 := sum__balances0;
[L2723]              __tmp__alloc__allowed_ERC20_lvl0 := alloc__allowed_ERC20_lvl0;
[L2724]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L2725]              __tmp__sum__allowed1 := sum__allowed1;
[L2726]              __tmp__M_Ref_bool := M_Ref_bool;
[L2727]              __tmp__sum := sum;
[L2728]              __tmp__Length := Length;
[L2729]              __tmp__now := now;
[L2730]              __tmp___balances_ERC20 := _balances_ERC20;
[L2731]              __tmp___allowed_ERC20 := _allowed_ERC20;
[L2732]              __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L2733]              __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L2734]              __tmp___pausers_PauserRole := _pausers_PauserRole;
[L2735]              __tmp___paused_Pausable := _paused_Pausable;
[L2736]              __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L2737]              __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L2738]              __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L2739]              __tmp___minters_MinterRole := _minters_MinterRole;
[L2740]  CALL        call OMToken_OMToken__fail(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L6136]  CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L3996]  CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3981]              assume msgsender_MSG != null;
[L3982]              __tmp__Balance[this] := 0;
[L3996]  RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3997]  COND FALSE  !(revert)
[L6136]  RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6137]  COND FALSE  !(revert)
[L6140]  CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4194]  CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L3996]  CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3981]              assume msgsender_MSG != null;
[L3982]              __tmp__Balance[this] := 0;
[L3996]  RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3997]  COND FALSE  !(revert)
[L4194]  RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4195]  COND FALSE  !(revert)
[L4198]  CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4169]              assume msgsender_MSG != null;
[L4170]              __tmp__Balance[this] := 0;
[L4171]              __tmp___balances_ERC20[this] := zeroRefintArr();
[L4172]              __tmp__sum__balances0[this] := 0;
[L4173]              __tmp___allowed_ERC20[this] := zeroRefRefintArr();
[L4174]              __tmp__sum__allowed1[this] := 0;
[L4175]              __tmp___totalSupply_ERC20[this] := 0;
[L4198]  RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4199]  COND FALSE  !(revert)
[L6140]  RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6141]  COND FALSE  !(revert)
[L6144]  CALL        call PauserRole_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L4965]  CALL        call PauserRole_PauserRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4890]              assume msgsender_MSG != null;
[L4891]              __tmp__Balance[this] := 0;
[L4893]  CALL        call __var_22 := FreshRefGenerator__fail();
[L3954]              havoc newRef;
[L3955]              assume __tmp__Alloc[newRef] == false;
[L3956]              __tmp__Alloc[newRef] := true;
[L3957]              assume newRef != null;
[L4893]  RET         call __var_22 := FreshRefGenerator__fail();
[L4894]  COND FALSE  !(revert)
[L4897]              __tmp___pausers_PauserRole[this] := __var_22;
[L4899]  COND TRUE   __tmp__DType[this] == OMToken
[L4900]  CALL        call _addPauser~address_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5120]  CALL        call add~Role~address_Roles__fail(this, this, 0, __tmp___pausers_PauserRole[this], account_s797);
[L4786]              __var_17 := null;
[L4787]  COND FALSE  !(!(account_s659 != null))
[L4791]  CALL        call __var_18 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4865]              __var_21 := null;
[L4866]  COND FALSE  !(!(account_s713 != null))
[L4870]              __ret_0_ := __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s713]][account_s713];
[L4791]  RET         call __var_18 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4792]  COND FALSE  !(revert)
[L4795]  COND FALSE  !(!!__var_18)
[L4799]              __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s659]][account_s659] := true;
[L5120]  RET         call add~Role~address_Roles__fail(this, this, 0, __tmp___pausers_PauserRole[this], account_s797);
[L5121]  COND FALSE  !(revert)
[L4900]  RET         call _addPauser~address_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L4901]  COND FALSE  !(revert)
[L4965]  RET         call PauserRole_PauserRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4966]  COND FALSE  !(revert)
[L6144]  RET         call PauserRole_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L6145]  COND FALSE  !(revert)
[L6148]  CALL        call Pausable_Pausable__fail(this, msgsender_MSG, msgvalue_MSG);
[L5174]  CALL        call PauserRole_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L4965]  CALL        call PauserRole_PauserRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4890]              assume msgsender_MSG != null;
[L4891]              __tmp__Balance[this] := 0;
[L4893]  CALL        call __var_22 := FreshRefGenerator__fail();
[L3954]              havoc newRef;
[L3955]              assume __tmp__Alloc[newRef] == false;
[L3956]              __tmp__Alloc[newRef] := true;
[L3957]              assume newRef != null;
[L4893]  RET         call __var_22 := FreshRefGenerator__fail();
[L4894]  COND FALSE  !(revert)
[L4897]              __tmp___pausers_PauserRole[this] := __var_22;
[L4899]  COND TRUE   __tmp__DType[this] == OMToken
[L4900]  CALL        call _addPauser~address_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5120]  CALL        call add~Role~address_Roles__fail(this, this, 0, __tmp___pausers_PauserRole[this], account_s797);
[L4786]              __var_17 := null;
[L4787]  COND FALSE  !(!(account_s659 != null))
[L4791]  CALL        call __var_18 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4865]              __var_21 := null;
[L4866]  COND FALSE  !(!(account_s713 != null))
[L4870]              __ret_0_ := __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s713]][account_s713];
[L4791]  RET         call __var_18 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4792]  COND FALSE  !(revert)
[L4795]  COND FALSE  !(!!__var_18)
[L4799]              __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s659]][account_s659] := true;
[L5120]  RET         call add~Role~address_Roles__fail(this, this, 0, __tmp___pausers_PauserRole[this], account_s797);
[L5121]  COND FALSE  !(revert)
[L4900]  RET         call _addPauser~address_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L4901]  COND FALSE  !(revert)
[L4965]  RET         call PauserRole_PauserRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4966]  COND FALSE  !(revert)
[L5174]  RET         call PauserRole_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L5175]  COND FALSE  !(revert)
[L5178]  CALL        call Pausable_Pausable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5155]              assume msgsender_MSG != null;
[L5156]              __tmp__Balance[this] := 0;
[L5157]              __tmp___paused_Pausable[this] := false;
[L5159]              __tmp___paused_Pausable[this] := false;
[L5178]  RET         call Pausable_Pausable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5179]  COND FALSE  !(revert)
[L6148]  RET         call Pausable_Pausable__fail(this, msgsender_MSG, msgvalue_MSG);
[L6149]  COND FALSE  !(revert)
[L6152]  CALL        call ERC20Pausable_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG);
[L5280]  CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L3996]  CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3981]              assume msgsender_MSG != null;
[L3982]              __tmp__Balance[this] := 0;
[L3996]  RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3997]  COND FALSE  !(revert)
[L5280]  RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L5281]  COND FALSE  !(revert)
[L5284]  CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4194]  CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L3996]  CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3981]              assume msgsender_MSG != null;
[L3982]              __tmp__Balance[this] := 0;
[L3996]  RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3997]  COND FALSE  !(revert)
[L4194]  RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4195]  COND FALSE  !(revert)
[L4198]  CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4169]              assume msgsender_MSG != null;
[L4170]              __tmp__Balance[this] := 0;
[L4171]              __tmp___balances_ERC20[this] := zeroRefintArr();
[L4172]              __tmp__sum__balances0[this] := 0;
[L4173]              __tmp___allowed_ERC20[this] := zeroRefRefintArr();
[L4174]              __tmp__sum__allowed1[this] := 0;
[L4175]              __tmp___totalSupply_ERC20[this] := 0;
[L4198]  RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4199]  COND FALSE  !(revert)
[L5284]  RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L5285]  COND FALSE  !(revert)
[L5288]  CALL        call PauserRole_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L4965]  CALL        call PauserRole_PauserRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4890]              assume msgsender_MSG != null;
[L4891]              __tmp__Balance[this] := 0;
[L4893]  CALL        call __var_22 := FreshRefGenerator__fail();
[L3954]              havoc newRef;
[L3955]              assume __tmp__Alloc[newRef] == false;
[L3956]              __tmp__Alloc[newRef] := true;
[L3957]              assume newRef != null;
[L4893]  RET         call __var_22 := FreshRefGenerator__fail();
[L4894]  COND FALSE  !(revert)
[L4897]              __tmp___pausers_PauserRole[this] := __var_22;
[L4899]  COND FALSE  !(__tmp__DType[this] == OMToken)
[L4904]  COND FALSE  !(__tmp__DType[this] == ERC20Pausable)
[L4909]  COND FALSE  !(__tmp__DType[this] == Pausable)
[L4914]  COND TRUE   __tmp__DType[this] == PauserRole
[L4915]  CALL        call _addPauser~address_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5120]  CALL        call add~Role~address_Roles__fail(this, this, 0, __tmp___pausers_PauserRole[this], account_s797);
[L4786]              __var_17 := null;
[L4787]  COND FALSE  !(!(account_s659 != null))
[L4791]  CALL        call __var_18 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4865]              __var_21 := null;
[L4866]  COND FALSE  !(!(account_s713 != null))
[L4870]              __ret_0_ := __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s713]][account_s713];
[L4791]  RET         call __var_18 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4792]  COND FALSE  !(revert)
[L4795]  COND FALSE  !(!!__var_18)
[L4799]              __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s659]][account_s659] := true;
[L5120]  RET         call add~Role~address_Roles__fail(this, this, 0, __tmp___pausers_PauserRole[this], account_s797);
[L5121]  COND FALSE  !(revert)
[L4915]  RET         call _addPauser~address_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L4916]  COND FALSE  !(revert)
[L4965]  RET         call PauserRole_PauserRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4966]  COND FALSE  !(revert)
[L5288]  RET         call PauserRole_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L5289]  COND FALSE  !(revert)
[L5292]  CALL        call Pausable_Pausable__fail(this, msgsender_MSG, msgvalue_MSG);
[L5174]  CALL        call PauserRole_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L4965]  CALL        call PauserRole_PauserRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4890]              assume msgsender_MSG != null;
[L4891]              __tmp__Balance[this] := 0;
[L4893]  CALL        call __var_22 := FreshRefGenerator__fail();
[L3954]              havoc newRef;
[L3955]              assume __tmp__Alloc[newRef] == false;
[L3956]              __tmp__Alloc[newRef] := true;
[L3957]              assume newRef != null;
[L4893]  RET         call __var_22 := FreshRefGenerator__fail();
[L4894]  COND FALSE  !(revert)
[L4897]              __tmp___pausers_PauserRole[this] := __var_22;
[L4899]  COND TRUE   __tmp__DType[this] == OMToken
[L4900]  CALL        call _addPauser~address_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5120]  CALL        call add~Role~address_Roles__fail(this, this, 0, __tmp___pausers_PauserRole[this], account_s797);
[L4786]              __var_17 := null;
[L4787]  COND FALSE  !(!(account_s659 != null))
[L4791]  CALL        call __var_18 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4865]              __var_21 := null;
[L4866]  COND FALSE  !(!(account_s713 != null))
[L4870]              __ret_0_ := __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s713]][account_s713];
[L4791]  RET         call __var_18 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4792]  COND FALSE  !(revert)
[L4795]  COND FALSE  !(!!__var_18)
[L4799]              __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s659]][account_s659] := true;
[L5120]  RET         call add~Role~address_Roles__fail(this, this, 0, __tmp___pausers_PauserRole[this], account_s797);
[L5121]  COND FALSE  !(revert)
[L4900]  RET         call _addPauser~address_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L4901]  COND FALSE  !(revert)
[L4965]  RET         call PauserRole_PauserRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4966]  COND FALSE  !(revert)
[L5174]  RET         call PauserRole_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L5175]  COND FALSE  !(revert)
[L5178]  CALL        call Pausable_Pausable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5155]              assume msgsender_MSG != null;
[L5156]              __tmp__Balance[this] := 0;
[L5157]              __tmp___paused_Pausable[this] := false;
[L5159]              __tmp___paused_Pausable[this] := false;
[L5178]  RET         call Pausable_Pausable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5179]  COND FALSE  !(revert)
[L5292]  RET         call Pausable_Pausable__fail(this, msgsender_MSG, msgvalue_MSG);
[L5293]  COND FALSE  !(revert)
[L5296]  CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5265]              assume msgsender_MSG != null;
[L5266]              __tmp__Balance[this] := 0;
[L5296]  RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5297]  COND FALSE  !(revert)
[L6152]  RET         call ERC20Pausable_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG);
[L6153]  COND FALSE  !(revert)
[L6156]  CALL        call ERC20Detailed_ERC20Detailed__fail(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L5606]  CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L3996]  CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3981]              assume msgsender_MSG != null;
[L3982]              __tmp__Balance[this] := 0;
[L3996]  RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3997]  COND FALSE  !(revert)
[L5606]  RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L5607]  COND FALSE  !(revert)
[L5610]  CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, name_s1022, symbol_s1022, decimals_s1022);
[L5579]              assume msgsender_MSG != null;
[L5580]              __tmp__Balance[this] := 0;
[L5581]              __tmp___name_ERC20Detailed[this] := -1676908070;
[L5582]              __tmp___symbol_ERC20Detailed[this] := -1676908070;
[L5583]              __tmp___decimals_ERC20Detailed[this] := 0;
[L5585]              __tmp___name_ERC20Detailed[this] := name_s1022;
[L5586]              __tmp___symbol_ERC20Detailed[this] := symbol_s1022;
[L5587]              __tmp___decimals_ERC20Detailed[this] := decimals_s1022;
[L5610]  RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, name_s1022, symbol_s1022, decimals_s1022);
[L5611]  COND FALSE  !(revert)
[L6156]  RET         call ERC20Detailed_ERC20Detailed__fail(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L6157]  COND FALSE  !(revert)
[L6160]  CALL        call MinterRole_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L5733]  CALL        call MinterRole_MinterRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5668]              assume msgsender_MSG != null;
[L5669]              __tmp__Balance[this] := 0;
[L5671]  CALL        call __var_35 := FreshRefGenerator__fail();
[L3954]              havoc newRef;
[L3955]              assume __tmp__Alloc[newRef] == false;
[L3956]              __tmp__Alloc[newRef] := true;
[L3957]              assume newRef != null;
[L5671]  RET         call __var_35 := FreshRefGenerator__fail();
[L5672]  COND FALSE  !(revert)
[L5675]              __tmp___minters_MinterRole[this] := __var_35;
[L5677]  COND TRUE   __tmp__DType[this] == OMToken
[L5678]  CALL        call _addMinter~address_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5868]  CALL        call add~Role~address_Roles__fail(this, this, 0, __tmp___minters_MinterRole[this], account_s1130);
[L4786]              __var_17 := null;
[L4787]  COND FALSE  !(!(account_s659 != null))
[L4791]  CALL        call __var_18 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4865]              __var_21 := null;
[L4866]  COND FALSE  !(!(account_s713 != null))
[L4870]              __ret_0_ := __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s713]][account_s713];
[L4791]  RET         call __var_18 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4792]  COND FALSE  !(revert)
[L4795]  COND FALSE  !(!!__var_18)
[L4799]              __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s659]][account_s659] := true;
[L5868]  RET         call add~Role~address_Roles__fail(this, this, 0, __tmp___minters_MinterRole[this], account_s1130);
[L5869]  COND FALSE  !(revert)
[L5678]  RET         call _addMinter~address_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5679]  COND FALSE  !(revert)
[L5733]  RET         call MinterRole_MinterRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5734]  COND FALSE  !(revert)
[L6160]  RET         call MinterRole_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L6161]  COND FALSE  !(revert)
[L6164]  CALL        call ERC20Mintable_ERC20Mintable__fail(this, msgsender_MSG, msgvalue_MSG);
[L5918]  CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L3996]  CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3981]              assume msgsender_MSG != null;
[L3982]              __tmp__Balance[this] := 0;
[L3996]  RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3997]  COND FALSE  !(revert)
[L5918]  RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L5919]  COND FALSE  !(revert)
[L5922]  CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4194]  CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L3996]  CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3981]              assume msgsender_MSG != null;
[L3982]              __tmp__Balance[this] := 0;
[L3996]  RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3997]  COND FALSE  !(revert)
[L4194]  RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4195]  COND FALSE  !(revert)
[L4198]  CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4169]              assume msgsender_MSG != null;
[L4170]              __tmp__Balance[this] := 0;
[L4171]              __tmp___balances_ERC20[this] := zeroRefintArr();
[L4172]              __tmp__sum__balances0[this] := 0;
[L4173]              __tmp___allowed_ERC20[this] := zeroRefRefintArr();
[L4174]              __tmp__sum__allowed1[this] := 0;
[L4175]              __tmp___totalSupply_ERC20[this] := 0;
[L4198]  RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4199]  COND FALSE  !(revert)
[L5922]  RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L5923]  COND FALSE  !(revert)
[L5926]  CALL        call MinterRole_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L5733]  CALL        call MinterRole_MinterRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5668]              assume msgsender_MSG != null;
[L5669]              __tmp__Balance[this] := 0;
[L5671]  CALL        call __var_35 := FreshRefGenerator__fail();
[L3954]              havoc newRef;
[L3955]              assume __tmp__Alloc[newRef] == false;
[L3956]              __tmp__Alloc[newRef] := true;
[L3957]              assume newRef != null;
[L5671]  RET         call __var_35 := FreshRefGenerator__fail();
[L5672]  COND FALSE  !(revert)
[L5675]              __tmp___minters_MinterRole[this] := __var_35;
[L5677]  COND TRUE   __tmp__DType[this] == OMToken
[L5678]  CALL        call _addMinter~address_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5868]  CALL        call add~Role~address_Roles__fail(this, this, 0, __tmp___minters_MinterRole[this], account_s1130);
[L4786]              __var_17 := null;
[L4787]  COND FALSE  !(!(account_s659 != null))
[L4791]  CALL        call __var_18 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4865]              __var_21 := null;
[L4866]  COND FALSE  !(!(account_s713 != null))
[L4870]              __ret_0_ := __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s713]][account_s713];
[L4791]  RET         call __var_18 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4792]  COND FALSE  !(revert)
[L4795]  COND FALSE  !(!!__var_18)
[L4799]              __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s659]][account_s659] := true;
[L5868]  RET         call add~Role~address_Roles__fail(this, this, 0, __tmp___minters_MinterRole[this], account_s1130);
[L5869]  COND FALSE  !(revert)
[L5678]  RET         call _addMinter~address_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5679]  COND FALSE  !(revert)
[L5733]  RET         call MinterRole_MinterRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5734]  COND FALSE  !(revert)
[L5926]  RET         call MinterRole_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L5927]  COND FALSE  !(revert)
[L5930]  CALL        call ERC20Mintable_ERC20Mintable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5903]              assume msgsender_MSG != null;
[L5904]              __tmp__Balance[this] := 0;
[L5930]  RET         call ERC20Mintable_ERC20Mintable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5931]  COND FALSE  !(revert)
[L6164]  RET         call ERC20Mintable_ERC20Mintable__fail(this, msgsender_MSG, msgvalue_MSG);
[L6165]  COND FALSE  !(revert)
[L6168]  CALL        call ERC20Burnable_ERC20Burnable__fail(this, msgsender_MSG, msgvalue_MSG);
[L6020]  CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L3996]  CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3981]              assume msgsender_MSG != null;
[L3982]              __tmp__Balance[this] := 0;
[L3996]  RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3997]  COND FALSE  !(revert)
[L6020]  RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6021]  COND FALSE  !(revert)
[L6024]  CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4194]  CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L3996]  CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3981]              assume msgsender_MSG != null;
[L3982]              __tmp__Balance[this] := 0;
[L3996]  RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3997]  COND FALSE  !(revert)
[L4194]  RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4195]  COND FALSE  !(revert)
[L4198]  CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4169]              assume msgsender_MSG != null;
[L4170]              __tmp__Balance[this] := 0;
[L4171]              __tmp___balances_ERC20[this] := zeroRefintArr();
[L4172]              __tmp__sum__balances0[this] := 0;
[L4173]              __tmp___allowed_ERC20[this] := zeroRefRefintArr();
[L4174]              __tmp__sum__allowed1[this] := 0;
[L4175]              __tmp___totalSupply_ERC20[this] := 0;
[L4198]  RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4199]  COND FALSE  !(revert)
[L6024]  RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6025]  COND FALSE  !(revert)
[L6028]  CALL        call ERC20Burnable_ERC20Burnable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6005]              assume msgsender_MSG != null;
[L6006]              __tmp__Balance[this] := 0;
[L6028]  RET         call ERC20Burnable_ERC20Burnable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6029]  COND FALSE  !(revert)
[L6168]  RET         call ERC20Burnable_ERC20Burnable__fail(this, msgsender_MSG, msgvalue_MSG);
[L6169]  COND FALSE  !(revert)
[L6172]  CALL        call OMToken_OMToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L6121]              assume msgsender_MSG != null;
[L6122]              __tmp__Balance[this] := 0;
[L6172]  RET         call OMToken_OMToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L6173]  COND FALSE  !(revert)
[L2740]  RET         call OMToken_OMToken__fail(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L2741]              assume revert || gas < 0;
[L9919]  RET         call OMToken_OMToken(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L9920]              assume !revert && gas >= 0;
[L9923]  CALL        call CorralChoice_OMToken(this);
[L9689]              havoc msgsender_MSG;
[L9690]              havoc msgvalue_MSG;
[L9691]              havoc choice;
[L9692]              havoc to_s916;
[L9693]              havoc value_s916;
[L9694]              havoc __ret_0_transfer;
[L9695]              havoc spender_s955;
[L9696]              havoc value_s955;
[L9697]              havoc __ret_0_approve;
[L9698]              havoc from_s937;
[L9699]              havoc to_s937;
[L9700]              havoc value_s937;
[L9701]              havoc __ret_0_transferFrom;
[L9702]              havoc __ret_0_totalSupply;
[L9703]              havoc owner_s231;
[L9704]              havoc __ret_0_balanceOf;
[L9705]              havoc owner_s247;
[L9706]              havoc spender_s247;
[L9707]              havoc __ret_0_allowance;
[L9708]              havoc spender_s973;
[L9709]              havoc addedValue_s973;
[L9710]              havoc success_s973;
[L9711]              havoc spender_s991;
[L9712]              havoc subtractedValue_s991;
[L9713]              havoc success_s991;
[L9714]              havoc account_s760;
[L9715]              havoc __ret_0_isPauser;
[L9716]              havoc account_s772;
[L9717]              havoc __ret_0_paused;
[L9718]              havoc name_s1022;
[L9719]              havoc symbol_s1022;
[L9720]              havoc decimals_s1022;
[L9721]              havoc __ret_0_name;
[L9722]              havoc __ret_0_symbol;
[L9723]              havoc __ret_0_decimals;
[L9724]              havoc account_s1093;
[L9725]              havoc __ret_0_isMinter;
[L9726]              havoc account_s1105;
[L9727]              havoc to_s1170;
[L9728]              havoc value_s1170;
[L9729]              havoc __ret_0_mint;
[L9730]              havoc value_s1185;
[L9731]              havoc from_s1198;
[L9732]              havoc value_s1198;
[L9733]              havoc name_s1230;
[L9734]              havoc symbol_s1230;
[L9735]              havoc decimals_s1230;
[L9736]              havoc tmpNow;
[L9737]              havoc gas;
[L9738]              assume gas > 4000000 && gas <= 8000000;
[L9739]              tmpNow := now;
[L9740]              havoc now;
[L9741]              assume now > tmpNow;
[L9742]              assume msgsender_MSG != null;
[L9743]              assume DType[msgsender_MSG] != IERC20;
[L9744]              assume DType[msgsender_MSG] != SafeMath;
[L9745]              assume DType[msgsender_MSG] != ERC20;
[L9746]              assume DType[msgsender_MSG] != Roles;
[L9747]              assume DType[msgsender_MSG] != PauserRole;
[L9748]              assume DType[msgsender_MSG] != Pausable;
[L9749]              assume DType[msgsender_MSG] != ERC20Pausable;
[L9750]              assume DType[msgsender_MSG] != ERC20Detailed;
[L9751]              assume DType[msgsender_MSG] != MinterRole;
[L9752]              assume DType[msgsender_MSG] != ERC20Mintable;
[L9753]              assume DType[msgsender_MSG] != ERC20Burnable;
[L9754]              assume DType[msgsender_MSG] != OMToken;
[L9755]              Alloc[msgsender_MSG] := true;
[L9756]  COND FALSE  !(choice == 23)
[L9763]  COND FALSE  !(choice == 22)
[L9770]  COND FALSE  !(choice == 21)
[L9777]  COND FALSE  !(choice == 20)
[L9783]  COND FALSE  !(choice == 19)
[L9789]  COND TRUE   choice == 18
[L9790]              gas := gas - 21000;
[L9791]  COND TRUE   gas >= 0
[L9792]              assume msgvalue_MSG == 0;
[L9793]  CALL        call __ret_0_allowance := allowance~address~address_ERC20(this, msgsender_MSG, msgvalue_MSG, owner_s247, spender_s247);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume _allowed_ERC20[this][owner_s247][spender_s247] >= 0 && _allowed_ERC20[this][owner_s247][spender_s247] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_allowance_ERC200 := true;
[L2]                 call_allowance_ERC200 := false;
[L2]                 revert := revert_hold;
[L430]               havoc __exception;
[L431]               revert := false;
[L432]   COND FALSE  !(__exception)
[L459]   CALL        call __ret_0_ := allowance~address~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, owner_s247, spender_s247);
[L4248]              __ret_0_ := _allowed_ERC20[this][owner_s247][spender_s247];
[L459]   RET         call __ret_0_ := allowance~address~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, owner_s247, spender_s247);
[L460]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((((__ret_0_ == _allowed_ERC20[this][owner_s247][spender_s247] && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowed_ERC20[this] == old(_allowed_ERC20[this])) && _minters_MinterRole[this] == old(_minters_MinterRole[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this])) && _paused_Pausable[this] == old(_paused_Pausable[this])) && _pausers_PauserRole[this] == old(_pausers_PauserRole[this]));
[L2]                 revert := revert_hold;
[L9793]  RET         call __ret_0_allowance := allowance~address~address_ERC20(this, msgsender_MSG, msgvalue_MSG, owner_s247, spender_s247);
[L9923]  RET         call CorralChoice_OMToken(this);

Loop:
[L9923]  CALL        call CorralChoice_OMToken(this);
[L9689]              havoc msgsender_MSG;
[L9690]              havoc msgvalue_MSG;
[L9691]              havoc choice;
[L9692]              havoc to_s916;
[L9693]              havoc value_s916;
[L9694]              havoc __ret_0_transfer;
[L9695]              havoc spender_s955;
[L9696]              havoc value_s955;
[L9697]              havoc __ret_0_approve;
[L9698]              havoc from_s937;
[L9699]              havoc to_s937;
[L9700]              havoc value_s937;
[L9701]              havoc __ret_0_transferFrom;
[L9702]              havoc __ret_0_totalSupply;
[L9703]              havoc owner_s231;
[L9704]              havoc __ret_0_balanceOf;
[L9705]              havoc owner_s247;
[L9706]              havoc spender_s247;
[L9707]              havoc __ret_0_allowance;
[L9708]              havoc spender_s973;
[L9709]              havoc addedValue_s973;
[L9710]              havoc success_s973;
[L9711]              havoc spender_s991;
[L9712]              havoc subtractedValue_s991;
[L9713]              havoc success_s991;
[L9714]              havoc account_s760;
[L9715]              havoc __ret_0_isPauser;
[L9716]              havoc account_s772;
[L9717]              havoc __ret_0_paused;
[L9718]              havoc name_s1022;
[L9719]              havoc symbol_s1022;
[L9720]              havoc decimals_s1022;
[L9721]              havoc __ret_0_name;
[L9722]              havoc __ret_0_symbol;
[L9723]              havoc __ret_0_decimals;
[L9724]              havoc account_s1093;
[L9725]              havoc __ret_0_isMinter;
[L9726]              havoc account_s1105;
[L9727]              havoc to_s1170;
[L9728]              havoc value_s1170;
[L9729]              havoc __ret_0_mint;
[L9730]              havoc value_s1185;
[L9731]              havoc from_s1198;
[L9732]              havoc value_s1198;
[L9733]              havoc name_s1230;
[L9734]              havoc symbol_s1230;
[L9735]              havoc decimals_s1230;
[L9736]              havoc tmpNow;
[L9737]              havoc gas;
[L9738]              assume gas > 4000000 && gas <= 8000000;
[L9739]              tmpNow := now;
[L9740]              havoc now;
[L9741]              assume now > tmpNow;
[L9742]              assume msgsender_MSG != null;
[L9743]              assume DType[msgsender_MSG] != IERC20;
[L9744]              assume DType[msgsender_MSG] != SafeMath;
[L9745]              assume DType[msgsender_MSG] != ERC20;
[L9746]              assume DType[msgsender_MSG] != Roles;
[L9747]              assume DType[msgsender_MSG] != PauserRole;
[L9748]              assume DType[msgsender_MSG] != Pausable;
[L9749]              assume DType[msgsender_MSG] != ERC20Pausable;
[L9750]              assume DType[msgsender_MSG] != ERC20Detailed;
[L9751]              assume DType[msgsender_MSG] != MinterRole;
[L9752]              assume DType[msgsender_MSG] != ERC20Mintable;
[L9753]              assume DType[msgsender_MSG] != ERC20Burnable;
[L9754]              assume DType[msgsender_MSG] != OMToken;
[L9755]              Alloc[msgsender_MSG] := true;
[L9756]  COND FALSE  !(choice == 23)
[L9763]  COND FALSE  !(choice == 22)
[L9770]  COND FALSE  !(choice == 21)
[L9777]  COND FALSE  !(choice == 20)
[L9783]  COND FALSE  !(choice == 19)
[L9789]  COND TRUE   choice == 18
[L9790]              gas := gas - 21000;
[L9791]  COND TRUE   gas >= 0
[L9792]              assume msgvalue_MSG == 0;
[L9793]  CALL        call __ret_0_allowance := allowance~address~address_ERC20(this, msgsender_MSG, msgvalue_MSG, owner_s247, spender_s247);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume _allowed_ERC20[this][owner_s247][spender_s247] >= 0 && _allowed_ERC20[this][owner_s247][spender_s247] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_allowance_ERC200 := true;
[L2]                 call_allowance_ERC200 := false;
[L2]                 revert := revert_hold;
[L430]               havoc __exception;
[L431]               revert := false;
[L432]   COND FALSE  !(__exception)
[L459]   CALL        call __ret_0_ := allowance~address~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, owner_s247, spender_s247);
[L4248]              __ret_0_ := _allowed_ERC20[this][owner_s247][spender_s247];
[L459]   RET         call __ret_0_ := allowance~address~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, owner_s247, spender_s247);
[L460]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((((__ret_0_ == _allowed_ERC20[this][owner_s247][spender_s247] && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowed_ERC20[this] == old(_allowed_ERC20[this])) && _minters_MinterRole[this] == old(_minters_MinterRole[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this])) && _paused_Pausable[this] == old(_paused_Pausable[this])) && _pausers_PauserRole[this] == old(_pausers_PauserRole[this]));
[L2]                 revert := revert_hold;
[L9793]  RET         call __ret_0_allowance := allowance~address~address_ERC20(this, msgsender_MSG, msgvalue_MSG, owner_s247, spender_s247);
[L9923]  RET         call CorralChoice_OMToken(this);

[2020-11-25 02:29:15,422 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 02:29:15,422 INFO  L82        PathProgramCache]: Analyzing trace with hash -1468243577, now seen corresponding path program 1 times
[2020-11-25 02:29:15,423 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 02:29:15,435 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 02:29:15,587 INFO  L134       CoverageAnalysis]: Checked inductivity of 975 backedges. 12 proven. 6 refuted. 0 times theorem prover too weak. 957 trivial. 0 not checked.
[2020-11-25 02:29:15,588 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 02:29:15,588 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [9] total 9
[2020-11-25 02:29:15,588 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 02:29:15,588 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 9 interpolants.
[2020-11-25 02:29:15,588 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=15, Invalid=57, Unknown=0, NotChecked=0, Total=72
[2020-11-25 02:29:15,589 INFO  L87              Difference]: Start difference. First operand 7744 states and 8923 transitions. cyclomatic complexity: 1183 Second operand 9 states.
[2020-11-25 02:29:16,860 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 02:29:16,860 INFO  L93              Difference]: Finished difference Result 7869 states and 9055 transitions.
[2020-11-25 02:29:16,860 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 10 states. 
[2020-11-25 02:29:16,861 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 7869 states and 9055 transitions.
[2020-11-25 02:29:16,892 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 6
[2020-11-25 02:29:16,913 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 7869 states to 7836 states and 9014 transitions.
[2020-11-25 02:29:16,913 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1757
[2020-11-25 02:29:16,915 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1757
[2020-11-25 02:29:16,915 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 7836 states and 9014 transitions.
[2020-11-25 02:29:16,920 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 02:29:16,920 INFO  L728         BuchiCegarLoop]: Abstraction has 7836 states and 9014 transitions.
[2020-11-25 02:29:16,926 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 7836 states and 9014 transitions.
[2020-11-25 02:29:16,972 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 7836 to 7744.
[2020-11-25 02:29:16,972 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 7744 states.
[2020-11-25 02:29:16,984 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 7744 states to 7744 states and 8922 transitions.
[2020-11-25 02:29:16,984 INFO  L751         BuchiCegarLoop]: Abstraction has 7744 states and 8922 transitions.
[2020-11-25 02:29:16,984 INFO  L631         BuchiCegarLoop]: Abstraction has 7744 states and 8922 transitions.
[2020-11-25 02:29:16,984 INFO  L445         BuchiCegarLoop]: ======== Iteration 14============
[2020-11-25 02:29:16,984 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 7744 states and 8922 transitions.
[2020-11-25 02:29:16,995 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 6
[2020-11-25 02:29:16,995 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 02:29:16,995 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 02:29:16,997 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [9, 9, 9, 9, 9, 9, 9, 9, 9, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 02:29:16,997 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_allowance_ERC200 := false;
[L2]                 call_allowance_ERC200 := false;
[L2]     CALL        call main();
[L9913]              assume null == 0;
[L9914]  CALL        call this := FreshRefGenerator__success();
[L3962]              havoc newRef;
[L3963]              assume Alloc[newRef] == false;
[L3964]              Alloc[newRef] := true;
[L3965]              assume newRef != null;
[L9914]  RET         call this := FreshRefGenerator__success();
[L9915]              assume now >= 0;
[L9916]              assume DType[this] == OMToken;
[L9917]              assume msgvalue_MSG == 0;
[L9918]              gas := gas - 53000;
[L9919]  CALL        call OMToken_OMToken(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L2714]              havoc __exception;
[L2715]              revert := false;
[L2716]  COND TRUE   __exception
[L2717]              __tmp__Balance := Balance;
[L2718]              __tmp__DType := DType;
[L2719]              __tmp__Alloc := Alloc;
[L2720]              __tmp__balance_ADDR := balance_ADDR;
[L2721]              __tmp__M_Ref_int := M_Ref_int;
[L2722]              __tmp__sum__balances0 := sum__balances0;
[L2723]              __tmp__alloc__allowed_ERC20_lvl0 := alloc__allowed_ERC20_lvl0;
[L2724]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L2725]              __tmp__sum__allowed1 := sum__allowed1;
[L2726]              __tmp__M_Ref_bool := M_Ref_bool;
[L2727]              __tmp__sum := sum;
[L2728]              __tmp__Length := Length;
[L2729]              __tmp__now := now;
[L2730]              __tmp___balances_ERC20 := _balances_ERC20;
[L2731]              __tmp___allowed_ERC20 := _allowed_ERC20;
[L2732]              __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L2733]              __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L2734]              __tmp___pausers_PauserRole := _pausers_PauserRole;
[L2735]              __tmp___paused_Pausable := _paused_Pausable;
[L2736]              __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L2737]              __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L2738]              __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L2739]              __tmp___minters_MinterRole := _minters_MinterRole;
[L2740]  CALL        call OMToken_OMToken__fail(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L6136]  CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L3996]  CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3981]              assume msgsender_MSG != null;
[L3982]              __tmp__Balance[this] := 0;
[L3996]  RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3997]  COND FALSE  !(revert)
[L6136]  RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6137]  COND FALSE  !(revert)
[L6140]  CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4194]  CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L3996]  CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3981]              assume msgsender_MSG != null;
[L3982]              __tmp__Balance[this] := 0;
[L3996]  RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3997]  COND FALSE  !(revert)
[L4194]  RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4195]  COND FALSE  !(revert)
[L4198]  CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4169]              assume msgsender_MSG != null;
[L4170]              __tmp__Balance[this] := 0;
[L4171]              __tmp___balances_ERC20[this] := zeroRefintArr();
[L4172]              __tmp__sum__balances0[this] := 0;
[L4173]              __tmp___allowed_ERC20[this] := zeroRefRefintArr();
[L4174]              __tmp__sum__allowed1[this] := 0;
[L4175]              __tmp___totalSupply_ERC20[this] := 0;
[L4198]  RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4199]  COND FALSE  !(revert)
[L6140]  RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6141]  COND FALSE  !(revert)
[L6144]  CALL        call PauserRole_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L4965]  CALL        call PauserRole_PauserRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4890]              assume msgsender_MSG != null;
[L4891]              __tmp__Balance[this] := 0;
[L4893]  CALL        call __var_22 := FreshRefGenerator__fail();
[L3954]              havoc newRef;
[L3955]              assume __tmp__Alloc[newRef] == false;
[L3956]              __tmp__Alloc[newRef] := true;
[L3957]              assume newRef != null;
[L4893]  RET         call __var_22 := FreshRefGenerator__fail();
[L4894]  COND FALSE  !(revert)
[L4897]              __tmp___pausers_PauserRole[this] := __var_22;
[L4899]  COND TRUE   __tmp__DType[this] == OMToken
[L4900]  CALL        call _addPauser~address_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5120]  CALL        call add~Role~address_Roles__fail(this, this, 0, __tmp___pausers_PauserRole[this], account_s797);
[L4786]              __var_17 := null;
[L4787]  COND FALSE  !(!(account_s659 != null))
[L4791]  CALL        call __var_18 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4865]              __var_21 := null;
[L4866]  COND FALSE  !(!(account_s713 != null))
[L4870]              __ret_0_ := __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s713]][account_s713];
[L4791]  RET         call __var_18 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4792]  COND FALSE  !(revert)
[L4795]  COND FALSE  !(!!__var_18)
[L4799]              __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s659]][account_s659] := true;
[L5120]  RET         call add~Role~address_Roles__fail(this, this, 0, __tmp___pausers_PauserRole[this], account_s797);
[L5121]  COND FALSE  !(revert)
[L4900]  RET         call _addPauser~address_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L4901]  COND FALSE  !(revert)
[L4965]  RET         call PauserRole_PauserRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4966]  COND FALSE  !(revert)
[L6144]  RET         call PauserRole_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L6145]  COND FALSE  !(revert)
[L6148]  CALL        call Pausable_Pausable__fail(this, msgsender_MSG, msgvalue_MSG);
[L5174]  CALL        call PauserRole_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L4965]  CALL        call PauserRole_PauserRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4890]              assume msgsender_MSG != null;
[L4891]              __tmp__Balance[this] := 0;
[L4893]  CALL        call __var_22 := FreshRefGenerator__fail();
[L3954]              havoc newRef;
[L3955]              assume __tmp__Alloc[newRef] == false;
[L3956]              __tmp__Alloc[newRef] := true;
[L3957]              assume newRef != null;
[L4893]  RET         call __var_22 := FreshRefGenerator__fail();
[L4894]  COND FALSE  !(revert)
[L4897]              __tmp___pausers_PauserRole[this] := __var_22;
[L4899]  COND TRUE   __tmp__DType[this] == OMToken
[L4900]  CALL        call _addPauser~address_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5120]  CALL        call add~Role~address_Roles__fail(this, this, 0, __tmp___pausers_PauserRole[this], account_s797);
[L4786]              __var_17 := null;
[L4787]  COND FALSE  !(!(account_s659 != null))
[L4791]  CALL        call __var_18 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4865]              __var_21 := null;
[L4866]  COND FALSE  !(!(account_s713 != null))
[L4870]              __ret_0_ := __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s713]][account_s713];
[L4791]  RET         call __var_18 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4792]  COND FALSE  !(revert)
[L4795]  COND FALSE  !(!!__var_18)
[L4799]              __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s659]][account_s659] := true;
[L5120]  RET         call add~Role~address_Roles__fail(this, this, 0, __tmp___pausers_PauserRole[this], account_s797);
[L5121]  COND FALSE  !(revert)
[L4900]  RET         call _addPauser~address_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L4901]  COND FALSE  !(revert)
[L4965]  RET         call PauserRole_PauserRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4966]  COND FALSE  !(revert)
[L5174]  RET         call PauserRole_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L5175]  COND FALSE  !(revert)
[L5178]  CALL        call Pausable_Pausable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5155]              assume msgsender_MSG != null;
[L5156]              __tmp__Balance[this] := 0;
[L5157]              __tmp___paused_Pausable[this] := false;
[L5159]              __tmp___paused_Pausable[this] := false;
[L5178]  RET         call Pausable_Pausable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5179]  COND FALSE  !(revert)
[L6148]  RET         call Pausable_Pausable__fail(this, msgsender_MSG, msgvalue_MSG);
[L6149]  COND FALSE  !(revert)
[L6152]  CALL        call ERC20Pausable_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG);
[L5280]  CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L3996]  CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3981]              assume msgsender_MSG != null;
[L3982]              __tmp__Balance[this] := 0;
[L3996]  RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3997]  COND FALSE  !(revert)
[L5280]  RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L5281]  COND FALSE  !(revert)
[L5284]  CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4194]  CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L3996]  CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3981]              assume msgsender_MSG != null;
[L3982]              __tmp__Balance[this] := 0;
[L3996]  RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3997]  COND FALSE  !(revert)
[L4194]  RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4195]  COND FALSE  !(revert)
[L4198]  CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4169]              assume msgsender_MSG != null;
[L4170]              __tmp__Balance[this] := 0;
[L4171]              __tmp___balances_ERC20[this] := zeroRefintArr();
[L4172]              __tmp__sum__balances0[this] := 0;
[L4173]              __tmp___allowed_ERC20[this] := zeroRefRefintArr();
[L4174]              __tmp__sum__allowed1[this] := 0;
[L4175]              __tmp___totalSupply_ERC20[this] := 0;
[L4198]  RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4199]  COND FALSE  !(revert)
[L5284]  RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L5285]  COND FALSE  !(revert)
[L5288]  CALL        call PauserRole_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L4965]  CALL        call PauserRole_PauserRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4890]              assume msgsender_MSG != null;
[L4891]              __tmp__Balance[this] := 0;
[L4893]  CALL        call __var_22 := FreshRefGenerator__fail();
[L3954]              havoc newRef;
[L3955]              assume __tmp__Alloc[newRef] == false;
[L3956]              __tmp__Alloc[newRef] := true;
[L3957]              assume newRef != null;
[L4893]  RET         call __var_22 := FreshRefGenerator__fail();
[L4894]  COND FALSE  !(revert)
[L4897]              __tmp___pausers_PauserRole[this] := __var_22;
[L4899]  COND TRUE   __tmp__DType[this] == OMToken
[L4900]  CALL        call _addPauser~address_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5120]  CALL        call add~Role~address_Roles__fail(this, this, 0, __tmp___pausers_PauserRole[this], account_s797);
[L4786]              __var_17 := null;
[L4787]  COND FALSE  !(!(account_s659 != null))
[L4791]  CALL        call __var_18 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4865]              __var_21 := null;
[L4866]  COND FALSE  !(!(account_s713 != null))
[L4870]              __ret_0_ := __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s713]][account_s713];
[L4791]  RET         call __var_18 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4792]  COND FALSE  !(revert)
[L4795]  COND FALSE  !(!!__var_18)
[L4799]              __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s659]][account_s659] := true;
[L5120]  RET         call add~Role~address_Roles__fail(this, this, 0, __tmp___pausers_PauserRole[this], account_s797);
[L5121]  COND FALSE  !(revert)
[L4900]  RET         call _addPauser~address_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L4901]  COND FALSE  !(revert)
[L4965]  RET         call PauserRole_PauserRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4966]  COND FALSE  !(revert)
[L5288]  RET         call PauserRole_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L5289]  COND FALSE  !(revert)
[L5292]  CALL        call Pausable_Pausable__fail(this, msgsender_MSG, msgvalue_MSG);
[L5174]  CALL        call PauserRole_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L4965]  CALL        call PauserRole_PauserRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4890]              assume msgsender_MSG != null;
[L4891]              __tmp__Balance[this] := 0;
[L4893]  CALL        call __var_22 := FreshRefGenerator__fail();
[L3954]              havoc newRef;
[L3955]              assume __tmp__Alloc[newRef] == false;
[L3956]              __tmp__Alloc[newRef] := true;
[L3957]              assume newRef != null;
[L4893]  RET         call __var_22 := FreshRefGenerator__fail();
[L4894]  COND FALSE  !(revert)
[L4897]              __tmp___pausers_PauserRole[this] := __var_22;
[L4899]  COND TRUE   __tmp__DType[this] == OMToken
[L4900]  CALL        call _addPauser~address_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5120]  CALL        call add~Role~address_Roles__fail(this, this, 0, __tmp___pausers_PauserRole[this], account_s797);
[L4786]              __var_17 := null;
[L4787]  COND FALSE  !(!(account_s659 != null))
[L4791]  CALL        call __var_18 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4865]              __var_21 := null;
[L4866]  COND FALSE  !(!(account_s713 != null))
[L4870]              __ret_0_ := __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s713]][account_s713];
[L4791]  RET         call __var_18 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4792]  COND FALSE  !(revert)
[L4795]  COND FALSE  !(!!__var_18)
[L4799]              __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s659]][account_s659] := true;
[L5120]  RET         call add~Role~address_Roles__fail(this, this, 0, __tmp___pausers_PauserRole[this], account_s797);
[L5121]  COND FALSE  !(revert)
[L4900]  RET         call _addPauser~address_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L4901]  COND FALSE  !(revert)
[L4965]  RET         call PauserRole_PauserRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4966]  COND FALSE  !(revert)
[L5174]  RET         call PauserRole_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L5175]  COND FALSE  !(revert)
[L5178]  CALL        call Pausable_Pausable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5155]              assume msgsender_MSG != null;
[L5156]              __tmp__Balance[this] := 0;
[L5157]              __tmp___paused_Pausable[this] := false;
[L5159]              __tmp___paused_Pausable[this] := false;
[L5178]  RET         call Pausable_Pausable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5179]  COND FALSE  !(revert)
[L5292]  RET         call Pausable_Pausable__fail(this, msgsender_MSG, msgvalue_MSG);
[L5293]  COND FALSE  !(revert)
[L5296]  CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5265]              assume msgsender_MSG != null;
[L5266]              __tmp__Balance[this] := 0;
[L5296]  RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5297]  COND FALSE  !(revert)
[L6152]  RET         call ERC20Pausable_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG);
[L6153]  COND FALSE  !(revert)
[L6156]  CALL        call ERC20Detailed_ERC20Detailed__fail(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L5606]  CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L3996]  CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3981]              assume msgsender_MSG != null;
[L3982]              __tmp__Balance[this] := 0;
[L3996]  RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3997]  COND FALSE  !(revert)
[L5606]  RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L5607]  COND FALSE  !(revert)
[L5610]  CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, name_s1022, symbol_s1022, decimals_s1022);
[L5579]              assume msgsender_MSG != null;
[L5580]              __tmp__Balance[this] := 0;
[L5581]              __tmp___name_ERC20Detailed[this] := -1676908070;
[L5582]              __tmp___symbol_ERC20Detailed[this] := -1676908070;
[L5583]              __tmp___decimals_ERC20Detailed[this] := 0;
[L5585]              __tmp___name_ERC20Detailed[this] := name_s1022;
[L5586]              __tmp___symbol_ERC20Detailed[this] := symbol_s1022;
[L5587]              __tmp___decimals_ERC20Detailed[this] := decimals_s1022;
[L5610]  RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, name_s1022, symbol_s1022, decimals_s1022);
[L5611]  COND FALSE  !(revert)
[L6156]  RET         call ERC20Detailed_ERC20Detailed__fail(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L6157]  COND FALSE  !(revert)
[L6160]  CALL        call MinterRole_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L5733]  CALL        call MinterRole_MinterRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5668]              assume msgsender_MSG != null;
[L5669]              __tmp__Balance[this] := 0;
[L5671]  CALL        call __var_35 := FreshRefGenerator__fail();
[L3954]              havoc newRef;
[L3955]              assume __tmp__Alloc[newRef] == false;
[L3956]              __tmp__Alloc[newRef] := true;
[L3957]              assume newRef != null;
[L5671]  RET         call __var_35 := FreshRefGenerator__fail();
[L5672]  COND FALSE  !(revert)
[L5675]              __tmp___minters_MinterRole[this] := __var_35;
[L5677]  COND TRUE   __tmp__DType[this] == OMToken
[L5678]  CALL        call _addMinter~address_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5868]  CALL        call add~Role~address_Roles__fail(this, this, 0, __tmp___minters_MinterRole[this], account_s1130);
[L4786]              __var_17 := null;
[L4787]  COND FALSE  !(!(account_s659 != null))
[L4791]  CALL        call __var_18 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4865]              __var_21 := null;
[L4866]  COND FALSE  !(!(account_s713 != null))
[L4870]              __ret_0_ := __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s713]][account_s713];
[L4791]  RET         call __var_18 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4792]  COND FALSE  !(revert)
[L4795]  COND FALSE  !(!!__var_18)
[L4799]              __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s659]][account_s659] := true;
[L5868]  RET         call add~Role~address_Roles__fail(this, this, 0, __tmp___minters_MinterRole[this], account_s1130);
[L5869]  COND FALSE  !(revert)
[L5678]  RET         call _addMinter~address_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5679]  COND FALSE  !(revert)
[L5733]  RET         call MinterRole_MinterRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5734]  COND FALSE  !(revert)
[L6160]  RET         call MinterRole_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L6161]  COND FALSE  !(revert)
[L6164]  CALL        call ERC20Mintable_ERC20Mintable__fail(this, msgsender_MSG, msgvalue_MSG);
[L5918]  CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L3996]  CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3981]              assume msgsender_MSG != null;
[L3982]              __tmp__Balance[this] := 0;
[L3996]  RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3997]  COND FALSE  !(revert)
[L5918]  RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L5919]  COND FALSE  !(revert)
[L5922]  CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4194]  CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L3996]  CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3981]              assume msgsender_MSG != null;
[L3982]              __tmp__Balance[this] := 0;
[L3996]  RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3997]  COND FALSE  !(revert)
[L4194]  RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4195]  COND FALSE  !(revert)
[L4198]  CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4169]              assume msgsender_MSG != null;
[L4170]              __tmp__Balance[this] := 0;
[L4171]              __tmp___balances_ERC20[this] := zeroRefintArr();
[L4172]              __tmp__sum__balances0[this] := 0;
[L4173]              __tmp___allowed_ERC20[this] := zeroRefRefintArr();
[L4174]              __tmp__sum__allowed1[this] := 0;
[L4175]              __tmp___totalSupply_ERC20[this] := 0;
[L4198]  RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4199]  COND FALSE  !(revert)
[L5922]  RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L5923]  COND FALSE  !(revert)
[L5926]  CALL        call MinterRole_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L5733]  CALL        call MinterRole_MinterRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5668]              assume msgsender_MSG != null;
[L5669]              __tmp__Balance[this] := 0;
[L5671]  CALL        call __var_35 := FreshRefGenerator__fail();
[L3954]              havoc newRef;
[L3955]              assume __tmp__Alloc[newRef] == false;
[L3956]              __tmp__Alloc[newRef] := true;
[L3957]              assume newRef != null;
[L5671]  RET         call __var_35 := FreshRefGenerator__fail();
[L5672]  COND FALSE  !(revert)
[L5675]              __tmp___minters_MinterRole[this] := __var_35;
[L5677]  COND TRUE   __tmp__DType[this] == OMToken
[L5678]  CALL        call _addMinter~address_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5868]  CALL        call add~Role~address_Roles__fail(this, this, 0, __tmp___minters_MinterRole[this], account_s1130);
[L4786]              __var_17 := null;
[L4787]  COND FALSE  !(!(account_s659 != null))
[L4791]  CALL        call __var_18 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4865]              __var_21 := null;
[L4866]  COND FALSE  !(!(account_s713 != null))
[L4870]              __ret_0_ := __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s713]][account_s713];
[L4791]  RET         call __var_18 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4792]  COND FALSE  !(revert)
[L4795]  COND FALSE  !(!!__var_18)
[L4799]              __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s659]][account_s659] := true;
[L5868]  RET         call add~Role~address_Roles__fail(this, this, 0, __tmp___minters_MinterRole[this], account_s1130);
[L5869]  COND FALSE  !(revert)
[L5678]  RET         call _addMinter~address_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5679]  COND FALSE  !(revert)
[L5733]  RET         call MinterRole_MinterRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5734]  COND FALSE  !(revert)
[L5926]  RET         call MinterRole_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L5927]  COND FALSE  !(revert)
[L5930]  CALL        call ERC20Mintable_ERC20Mintable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5903]              assume msgsender_MSG != null;
[L5904]              __tmp__Balance[this] := 0;
[L5930]  RET         call ERC20Mintable_ERC20Mintable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5931]  COND FALSE  !(revert)
[L6164]  RET         call ERC20Mintable_ERC20Mintable__fail(this, msgsender_MSG, msgvalue_MSG);
[L6165]  COND FALSE  !(revert)
[L6168]  CALL        call ERC20Burnable_ERC20Burnable__fail(this, msgsender_MSG, msgvalue_MSG);
[L6020]  CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L3996]  CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3981]              assume msgsender_MSG != null;
[L3982]              __tmp__Balance[this] := 0;
[L3996]  RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3997]  COND FALSE  !(revert)
[L6020]  RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6021]  COND FALSE  !(revert)
[L6024]  CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4194]  CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L3996]  CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3981]              assume msgsender_MSG != null;
[L3982]              __tmp__Balance[this] := 0;
[L3996]  RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3997]  COND FALSE  !(revert)
[L4194]  RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4195]  COND FALSE  !(revert)
[L4198]  CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4169]              assume msgsender_MSG != null;
[L4170]              __tmp__Balance[this] := 0;
[L4171]              __tmp___balances_ERC20[this] := zeroRefintArr();
[L4172]              __tmp__sum__balances0[this] := 0;
[L4173]              __tmp___allowed_ERC20[this] := zeroRefRefintArr();
[L4174]              __tmp__sum__allowed1[this] := 0;
[L4175]              __tmp___totalSupply_ERC20[this] := 0;
[L4198]  RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4199]  COND FALSE  !(revert)
[L6024]  RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6025]  COND FALSE  !(revert)
[L6028]  CALL        call ERC20Burnable_ERC20Burnable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6005]              assume msgsender_MSG != null;
[L6006]              __tmp__Balance[this] := 0;
[L6028]  RET         call ERC20Burnable_ERC20Burnable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6029]  COND FALSE  !(revert)
[L6168]  RET         call ERC20Burnable_ERC20Burnable__fail(this, msgsender_MSG, msgvalue_MSG);
[L6169]  COND FALSE  !(revert)
[L6172]  CALL        call OMToken_OMToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L6121]              assume msgsender_MSG != null;
[L6122]              __tmp__Balance[this] := 0;
[L6172]  RET         call OMToken_OMToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L6173]  COND FALSE  !(revert)
[L2740]  RET         call OMToken_OMToken__fail(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L2741]              assume revert || gas < 0;
[L9919]  RET         call OMToken_OMToken(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L9920]              assume !revert && gas >= 0;
[L9923]  CALL        call CorralChoice_OMToken(this);
[L9689]              havoc msgsender_MSG;
[L9690]              havoc msgvalue_MSG;
[L9691]              havoc choice;
[L9692]              havoc to_s916;
[L9693]              havoc value_s916;
[L9694]              havoc __ret_0_transfer;
[L9695]              havoc spender_s955;
[L9696]              havoc value_s955;
[L9697]              havoc __ret_0_approve;
[L9698]              havoc from_s937;
[L9699]              havoc to_s937;
[L9700]              havoc value_s937;
[L9701]              havoc __ret_0_transferFrom;
[L9702]              havoc __ret_0_totalSupply;
[L9703]              havoc owner_s231;
[L9704]              havoc __ret_0_balanceOf;
[L9705]              havoc owner_s247;
[L9706]              havoc spender_s247;
[L9707]              havoc __ret_0_allowance;
[L9708]              havoc spender_s973;
[L9709]              havoc addedValue_s973;
[L9710]              havoc success_s973;
[L9711]              havoc spender_s991;
[L9712]              havoc subtractedValue_s991;
[L9713]              havoc success_s991;
[L9714]              havoc account_s760;
[L9715]              havoc __ret_0_isPauser;
[L9716]              havoc account_s772;
[L9717]              havoc __ret_0_paused;
[L9718]              havoc name_s1022;
[L9719]              havoc symbol_s1022;
[L9720]              havoc decimals_s1022;
[L9721]              havoc __ret_0_name;
[L9722]              havoc __ret_0_symbol;
[L9723]              havoc __ret_0_decimals;
[L9724]              havoc account_s1093;
[L9725]              havoc __ret_0_isMinter;
[L9726]              havoc account_s1105;
[L9727]              havoc to_s1170;
[L9728]              havoc value_s1170;
[L9729]              havoc __ret_0_mint;
[L9730]              havoc value_s1185;
[L9731]              havoc from_s1198;
[L9732]              havoc value_s1198;
[L9733]              havoc name_s1230;
[L9734]              havoc symbol_s1230;
[L9735]              havoc decimals_s1230;
[L9736]              havoc tmpNow;
[L9737]              havoc gas;
[L9738]              assume gas > 4000000 && gas <= 8000000;
[L9739]              tmpNow := now;
[L9740]              havoc now;
[L9741]              assume now > tmpNow;
[L9742]              assume msgsender_MSG != null;
[L9743]              assume DType[msgsender_MSG] != IERC20;
[L9744]              assume DType[msgsender_MSG] != SafeMath;
[L9745]              assume DType[msgsender_MSG] != ERC20;
[L9746]              assume DType[msgsender_MSG] != Roles;
[L9747]              assume DType[msgsender_MSG] != PauserRole;
[L9748]              assume DType[msgsender_MSG] != Pausable;
[L9749]              assume DType[msgsender_MSG] != ERC20Pausable;
[L9750]              assume DType[msgsender_MSG] != ERC20Detailed;
[L9751]              assume DType[msgsender_MSG] != MinterRole;
[L9752]              assume DType[msgsender_MSG] != ERC20Mintable;
[L9753]              assume DType[msgsender_MSG] != ERC20Burnable;
[L9754]              assume DType[msgsender_MSG] != OMToken;
[L9755]              Alloc[msgsender_MSG] := true;
[L9756]  COND FALSE  !(choice == 23)
[L9763]  COND FALSE  !(choice == 22)
[L9770]  COND FALSE  !(choice == 21)
[L9777]  COND FALSE  !(choice == 20)
[L9783]  COND FALSE  !(choice == 19)
[L9789]  COND TRUE   choice == 18
[L9790]              gas := gas - 21000;
[L9791]  COND TRUE   gas >= 0
[L9792]              assume msgvalue_MSG == 0;
[L9793]  CALL        call __ret_0_allowance := allowance~address~address_ERC20(this, msgsender_MSG, msgvalue_MSG, owner_s247, spender_s247);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume _allowed_ERC20[this][owner_s247][spender_s247] >= 0 && _allowed_ERC20[this][owner_s247][spender_s247] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_allowance_ERC200 := true;
[L2]                 call_allowance_ERC200 := false;
[L2]                 revert := revert_hold;
[L430]               havoc __exception;
[L431]               revert := false;
[L432]   COND FALSE  !(__exception)
[L459]   CALL        call __ret_0_ := allowance~address~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, owner_s247, spender_s247);
[L4248]              __ret_0_ := _allowed_ERC20[this][owner_s247][spender_s247];
[L459]   RET         call __ret_0_ := allowance~address~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, owner_s247, spender_s247);
[L460]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((((__ret_0_ == _allowed_ERC20[this][owner_s247][spender_s247] && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowed_ERC20[this] == old(_allowed_ERC20[this])) && _minters_MinterRole[this] == old(_minters_MinterRole[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this])) && _paused_Pausable[this] == old(_paused_Pausable[this])) && _pausers_PauserRole[this] == old(_pausers_PauserRole[this]));
[L2]                 revert := revert_hold;
[L9793]  RET         call __ret_0_allowance := allowance~address~address_ERC20(this, msgsender_MSG, msgvalue_MSG, owner_s247, spender_s247);
[L9923]  RET         call CorralChoice_OMToken(this);

Loop:
[L9923]  CALL        call CorralChoice_OMToken(this);
[L9689]              havoc msgsender_MSG;
[L9690]              havoc msgvalue_MSG;
[L9691]              havoc choice;
[L9692]              havoc to_s916;
[L9693]              havoc value_s916;
[L9694]              havoc __ret_0_transfer;
[L9695]              havoc spender_s955;
[L9696]              havoc value_s955;
[L9697]              havoc __ret_0_approve;
[L9698]              havoc from_s937;
[L9699]              havoc to_s937;
[L9700]              havoc value_s937;
[L9701]              havoc __ret_0_transferFrom;
[L9702]              havoc __ret_0_totalSupply;
[L9703]              havoc owner_s231;
[L9704]              havoc __ret_0_balanceOf;
[L9705]              havoc owner_s247;
[L9706]              havoc spender_s247;
[L9707]              havoc __ret_0_allowance;
[L9708]              havoc spender_s973;
[L9709]              havoc addedValue_s973;
[L9710]              havoc success_s973;
[L9711]              havoc spender_s991;
[L9712]              havoc subtractedValue_s991;
[L9713]              havoc success_s991;
[L9714]              havoc account_s760;
[L9715]              havoc __ret_0_isPauser;
[L9716]              havoc account_s772;
[L9717]              havoc __ret_0_paused;
[L9718]              havoc name_s1022;
[L9719]              havoc symbol_s1022;
[L9720]              havoc decimals_s1022;
[L9721]              havoc __ret_0_name;
[L9722]              havoc __ret_0_symbol;
[L9723]              havoc __ret_0_decimals;
[L9724]              havoc account_s1093;
[L9725]              havoc __ret_0_isMinter;
[L9726]              havoc account_s1105;
[L9727]              havoc to_s1170;
[L9728]              havoc value_s1170;
[L9729]              havoc __ret_0_mint;
[L9730]              havoc value_s1185;
[L9731]              havoc from_s1198;
[L9732]              havoc value_s1198;
[L9733]              havoc name_s1230;
[L9734]              havoc symbol_s1230;
[L9735]              havoc decimals_s1230;
[L9736]              havoc tmpNow;
[L9737]              havoc gas;
[L9738]              assume gas > 4000000 && gas <= 8000000;
[L9739]              tmpNow := now;
[L9740]              havoc now;
[L9741]              assume now > tmpNow;
[L9742]              assume msgsender_MSG != null;
[L9743]              assume DType[msgsender_MSG] != IERC20;
[L9744]              assume DType[msgsender_MSG] != SafeMath;
[L9745]              assume DType[msgsender_MSG] != ERC20;
[L9746]              assume DType[msgsender_MSG] != Roles;
[L9747]              assume DType[msgsender_MSG] != PauserRole;
[L9748]              assume DType[msgsender_MSG] != Pausable;
[L9749]              assume DType[msgsender_MSG] != ERC20Pausable;
[L9750]              assume DType[msgsender_MSG] != ERC20Detailed;
[L9751]              assume DType[msgsender_MSG] != MinterRole;
[L9752]              assume DType[msgsender_MSG] != ERC20Mintable;
[L9753]              assume DType[msgsender_MSG] != ERC20Burnable;
[L9754]              assume DType[msgsender_MSG] != OMToken;
[L9755]              Alloc[msgsender_MSG] := true;
[L9756]  COND FALSE  !(choice == 23)
[L9763]  COND FALSE  !(choice == 22)
[L9770]  COND FALSE  !(choice == 21)
[L9777]  COND FALSE  !(choice == 20)
[L9783]  COND FALSE  !(choice == 19)
[L9789]  COND TRUE   choice == 18
[L9790]              gas := gas - 21000;
[L9791]  COND TRUE   gas >= 0
[L9792]              assume msgvalue_MSG == 0;
[L9793]  CALL        call __ret_0_allowance := allowance~address~address_ERC20(this, msgsender_MSG, msgvalue_MSG, owner_s247, spender_s247);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume _allowed_ERC20[this][owner_s247][spender_s247] >= 0 && _allowed_ERC20[this][owner_s247][spender_s247] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_allowance_ERC200 := true;
[L2]                 call_allowance_ERC200 := false;
[L2]                 revert := revert_hold;
[L430]               havoc __exception;
[L431]               revert := false;
[L432]   COND FALSE  !(__exception)
[L459]   CALL        call __ret_0_ := allowance~address~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, owner_s247, spender_s247);
[L4248]              __ret_0_ := _allowed_ERC20[this][owner_s247][spender_s247];
[L459]   RET         call __ret_0_ := allowance~address~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, owner_s247, spender_s247);
[L460]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((((__ret_0_ == _allowed_ERC20[this][owner_s247][spender_s247] && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowed_ERC20[this] == old(_allowed_ERC20[this])) && _minters_MinterRole[this] == old(_minters_MinterRole[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this])) && _paused_Pausable[this] == old(_paused_Pausable[this])) && _pausers_PauserRole[this] == old(_pausers_PauserRole[this]));
[L2]                 revert := revert_hold;
[L9793]  RET         call __ret_0_allowance := allowance~address~address_ERC20(this, msgsender_MSG, msgvalue_MSG, owner_s247, spender_s247);
[L9923]  RET         call CorralChoice_OMToken(this);

[2020-11-25 02:29:17,001 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 02:29:17,001 INFO  L82        PathProgramCache]: Analyzing trace with hash -532822732, now seen corresponding path program 1 times
[2020-11-25 02:29:17,002 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 02:29:17,018 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 02:29:17,225 INFO  L134       CoverageAnalysis]: Checked inductivity of 987 backedges. 32 proven. 0 refuted. 0 times theorem prover too weak. 955 trivial. 0 not checked.
[2020-11-25 02:29:17,225 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 02:29:17,225 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [4] imperfect sequences [] total 4
[2020-11-25 02:29:17,226 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 02:29:17,226 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-11-25 02:29:17,226 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=5, Invalid=7, Unknown=0, NotChecked=0, Total=12
[2020-11-25 02:29:17,226 INFO  L87              Difference]: Start difference. First operand 7744 states and 8922 transitions. cyclomatic complexity: 1182 Second operand 4 states.
[2020-11-25 02:29:17,444 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 02:29:17,444 INFO  L93              Difference]: Finished difference Result 9532 states and 11234 transitions.
[2020-11-25 02:29:17,444 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 5 states. 
[2020-11-25 02:29:17,444 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 9532 states and 11234 transitions.
[2020-11-25 02:29:17,463 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 20
[2020-11-25 02:29:17,481 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 9532 states to 9240 states and 10916 transitions.
[2020-11-25 02:29:17,482 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1938
[2020-11-25 02:29:17,482 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1938
[2020-11-25 02:29:17,483 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 9240 states and 10916 transitions.
[2020-11-25 02:29:17,488 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 02:29:17,488 INFO  L728         BuchiCegarLoop]: Abstraction has 9240 states and 10916 transitions.
[2020-11-25 02:29:17,492 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 9240 states and 10916 transitions.
[2020-11-25 02:29:17,532 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 9240 to 8135.
[2020-11-25 02:29:17,532 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 8135 states.
[2020-11-25 02:29:17,540 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 8135 states to 8135 states and 9458 transitions.
[2020-11-25 02:29:17,540 INFO  L751         BuchiCegarLoop]: Abstraction has 8135 states and 9458 transitions.
[2020-11-25 02:29:17,540 INFO  L631         BuchiCegarLoop]: Abstraction has 8135 states and 9458 transitions.
[2020-11-25 02:29:17,540 INFO  L445         BuchiCegarLoop]: ======== Iteration 15============
[2020-11-25 02:29:17,540 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 8135 states and 9458 transitions.
[2020-11-25 02:29:17,548 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 10
[2020-11-25 02:29:17,548 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 02:29:17,548 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 02:29:17,549 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [9, 9, 9, 9, 9, 9, 9, 9, 9, 7, 7, 7, 7, 7, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 02:29:17,549 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_allowance_ERC200 := false;
[L2]                 call_allowance_ERC200 := false;
[L2]     CALL        call main();
[L9913]              assume null == 0;
[L9914]  CALL        call this := FreshRefGenerator__success();
[L3962]              havoc newRef;
[L3963]              assume Alloc[newRef] == false;
[L3964]              Alloc[newRef] := true;
[L3965]              assume newRef != null;
[L9914]  RET         call this := FreshRefGenerator__success();
[L9915]              assume now >= 0;
[L9916]              assume DType[this] == OMToken;
[L9917]              assume msgvalue_MSG == 0;
[L9918]              gas := gas - 53000;
[L9919]  CALL        call OMToken_OMToken(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L2714]              havoc __exception;
[L2715]              revert := false;
[L2716]  COND FALSE  !(__exception)
[L2743]  CALL        call OMToken_OMToken__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L6180]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4004]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3989]              assume msgsender_MSG != null;
[L3990]              Balance[this] := 0;
[L4004]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  COND FALSE  !(revert)
[L6180]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6181]  COND FALSE  !(revert)
[L6184]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4206]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4004]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3989]              assume msgsender_MSG != null;
[L3990]              Balance[this] := 0;
[L4004]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  COND FALSE  !(revert)
[L4206]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4207]  COND FALSE  !(revert)
[L4210]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4182]              assume msgsender_MSG != null;
[L4183]              Balance[this] := 0;
[L4184]              _balances_ERC20[this] := zeroRefintArr();
[L4185]              sum__balances0[this] := 0;
[L4186]              _allowed_ERC20[this] := zeroRefRefintArr();
[L4187]              sum__allowed1[this] := 0;
[L4188]              _totalSupply_ERC20[this] := 0;
[L4210]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4211]  COND FALSE  !(revert)
[L6184]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6185]  COND FALSE  !(revert)
[L6188]  CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4974]  CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4928]              assume msgsender_MSG != null;
[L4929]              Balance[this] := 0;
[L4931]  CALL        call __var_22 := FreshRefGenerator__success();
[L3962]              havoc newRef;
[L3963]              assume Alloc[newRef] == false;
[L3964]              Alloc[newRef] := true;
[L3965]              assume newRef != null;
[L4931]  RET         call __var_22 := FreshRefGenerator__success();
[L4932]  COND FALSE  !(revert)
[L4935]              _pausers_PauserRole[this] := __var_22;
[L4937]  COND TRUE   DType[this] == OMToken
[L4938]  CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5128]  CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L4806]              __var_17 := null;
[L4807]  COND FALSE  !(!(account_s659 != null))
[L4811]  CALL        call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4877]              __var_21 := null;
[L4878]  COND FALSE  !(!(account_s713 != null))
[L4882]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s713]][account_s713];
[L4811]  RET         call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4812]  COND FALSE  !(revert)
[L4815]  COND FALSE  !(!!__var_18)
[L4819]              M_Ref_bool[bearer_Roles.Role[role_s659]][account_s659] := true;
[L5128]  RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L5129]  COND FALSE  !(revert)
[L5132]              assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L4938]  RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L4939]  COND FALSE  !(revert)
[L4974]  RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4975]  COND FALSE  !(revert)
[L6188]  RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6189]  COND FALSE  !(revert)
[L6192]  CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L5186]  CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4974]  CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4928]              assume msgsender_MSG != null;
[L4929]              Balance[this] := 0;
[L4931]  CALL        call __var_22 := FreshRefGenerator__success();
[L3962]              havoc newRef;
[L3963]              assume Alloc[newRef] == false;
[L3964]              Alloc[newRef] := true;
[L3965]              assume newRef != null;
[L4931]  RET         call __var_22 := FreshRefGenerator__success();
[L4932]  COND FALSE  !(revert)
[L4935]              _pausers_PauserRole[this] := __var_22;
[L4937]  COND TRUE   DType[this] == OMToken
[L4938]  CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5128]  CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L4806]              __var_17 := null;
[L4807]  COND FALSE  !(!(account_s659 != null))
[L4811]  CALL        call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4877]              __var_21 := null;
[L4878]  COND FALSE  !(!(account_s713 != null))
[L4882]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s713]][account_s713];
[L4811]  RET         call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4812]  COND FALSE  !(revert)
[L4815]  COND FALSE  !(!!__var_18)
[L4819]              M_Ref_bool[bearer_Roles.Role[role_s659]][account_s659] := true;
[L5128]  RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L5129]  COND FALSE  !(revert)
[L5132]              assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L4938]  RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L4939]  COND FALSE  !(revert)
[L4974]  RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4975]  COND FALSE  !(revert)
[L5186]  RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5187]  COND FALSE  !(revert)
[L5190]  CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5165]              assume msgsender_MSG != null;
[L5166]              Balance[this] := 0;
[L5167]              _paused_Pausable[this] := false;
[L5169]              _paused_Pausable[this] := false;
[L5190]  RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5191]  COND FALSE  !(revert)
[L6192]  RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6193]  COND FALSE  !(revert)
[L6196]  CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L5304]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4004]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3989]              assume msgsender_MSG != null;
[L3990]              Balance[this] := 0;
[L4004]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  COND FALSE  !(revert)
[L5304]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5305]  COND FALSE  !(revert)
[L5308]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4206]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4004]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3989]              assume msgsender_MSG != null;
[L3990]              Balance[this] := 0;
[L4004]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  COND FALSE  !(revert)
[L4206]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4207]  COND FALSE  !(revert)
[L4210]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4182]              assume msgsender_MSG != null;
[L4183]              Balance[this] := 0;
[L4184]              _balances_ERC20[this] := zeroRefintArr();
[L4185]              sum__balances0[this] := 0;
[L4186]              _allowed_ERC20[this] := zeroRefRefintArr();
[L4187]              sum__allowed1[this] := 0;
[L4188]              _totalSupply_ERC20[this] := 0;
[L4210]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4211]  COND FALSE  !(revert)
[L5308]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5309]  COND FALSE  !(revert)
[L5312]  CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4974]  CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4928]              assume msgsender_MSG != null;
[L4929]              Balance[this] := 0;
[L4931]  CALL        call __var_22 := FreshRefGenerator__success();
[L3962]              havoc newRef;
[L3963]              assume Alloc[newRef] == false;
[L3964]              Alloc[newRef] := true;
[L3965]              assume newRef != null;
[L4931]  RET         call __var_22 := FreshRefGenerator__success();
[L4932]  COND FALSE  !(revert)
[L4935]              _pausers_PauserRole[this] := __var_22;
[L4937]  COND TRUE   DType[this] == OMToken
[L4938]  CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5128]  CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L4806]              __var_17 := null;
[L4807]  COND FALSE  !(!(account_s659 != null))
[L4811]  CALL        call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4877]              __var_21 := null;
[L4878]  COND FALSE  !(!(account_s713 != null))
[L4882]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s713]][account_s713];
[L4811]  RET         call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4812]  COND FALSE  !(revert)
[L4815]  COND FALSE  !(!!__var_18)
[L4819]              M_Ref_bool[bearer_Roles.Role[role_s659]][account_s659] := true;
[L5128]  RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L5129]  COND FALSE  !(revert)
[L5132]              assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L4938]  RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L4939]  COND FALSE  !(revert)
[L4974]  RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4975]  COND FALSE  !(revert)
[L5312]  RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5313]  COND FALSE  !(revert)
[L5316]  CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L5186]  CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4974]  CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4928]              assume msgsender_MSG != null;
[L4929]              Balance[this] := 0;
[L4931]  CALL        call __var_22 := FreshRefGenerator__success();
[L3962]              havoc newRef;
[L3963]              assume Alloc[newRef] == false;
[L3964]              Alloc[newRef] := true;
[L3965]              assume newRef != null;
[L4931]  RET         call __var_22 := FreshRefGenerator__success();
[L4932]  COND FALSE  !(revert)
[L4935]              _pausers_PauserRole[this] := __var_22;
[L4937]  COND TRUE   DType[this] == OMToken
[L4938]  CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5128]  CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L4806]              __var_17 := null;
[L4807]  COND FALSE  !(!(account_s659 != null))
[L4811]  CALL        call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4877]              __var_21 := null;
[L4878]  COND FALSE  !(!(account_s713 != null))
[L4882]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s713]][account_s713];
[L4811]  RET         call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4812]  COND FALSE  !(revert)
[L4815]  COND FALSE  !(!!__var_18)
[L4819]              M_Ref_bool[bearer_Roles.Role[role_s659]][account_s659] := true;
[L5128]  RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L5129]  COND FALSE  !(revert)
[L5132]              assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L4938]  RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L4939]  COND FALSE  !(revert)
[L4974]  RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4975]  COND FALSE  !(revert)
[L5186]  RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5187]  COND FALSE  !(revert)
[L5190]  CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5165]              assume msgsender_MSG != null;
[L5166]              Balance[this] := 0;
[L5167]              _paused_Pausable[this] := false;
[L5169]              _paused_Pausable[this] := false;
[L5190]  RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5191]  COND FALSE  !(revert)
[L5316]  RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L5317]  COND FALSE  !(revert)
[L5320]  CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5273]              assume msgsender_MSG != null;
[L5274]              Balance[this] := 0;
[L5320]  RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5321]  COND FALSE  !(revert)
[L6196]  RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6197]  COND FALSE  !(revert)
[L6200]  CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L5618]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4004]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3989]              assume msgsender_MSG != null;
[L3990]              Balance[this] := 0;
[L4004]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  COND FALSE  !(revert)
[L5618]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5619]  COND FALSE  !(revert)
[L5622]  CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1022, symbol_s1022, decimals_s1022);
[L5593]              assume msgsender_MSG != null;
[L5594]              Balance[this] := 0;
[L5595]              _name_ERC20Detailed[this] := -1676908070;
[L5596]              _symbol_ERC20Detailed[this] := -1676908070;
[L5597]              _decimals_ERC20Detailed[this] := 0;
[L5599]              _name_ERC20Detailed[this] := name_s1022;
[L5600]              _symbol_ERC20Detailed[this] := symbol_s1022;
[L5601]              _decimals_ERC20Detailed[this] := decimals_s1022;
[L5622]  RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1022, symbol_s1022, decimals_s1022);
[L5623]  COND FALSE  !(revert)
[L6200]  RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L6201]  COND FALSE  !(revert)
[L6204]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5742]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5701]              assume msgsender_MSG != null;
[L5702]              Balance[this] := 0;
[L5704]  CALL        call __var_35 := FreshRefGenerator__success();
[L3962]              havoc newRef;
[L3963]              assume Alloc[newRef] == false;
[L3964]              Alloc[newRef] := true;
[L3965]              assume newRef != null;
[L5704]  RET         call __var_35 := FreshRefGenerator__success();
[L5705]  COND FALSE  !(revert)
[L5708]              _minters_MinterRole[this] := __var_35;
[L5710]  COND FALSE  !(DType[this] == OMToken)
[L5715]  COND TRUE   DType[this] == ERC20Mintable
[L5716]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5876]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1130);
[L4806]              __var_17 := null;
[L4807]  COND FALSE  !(!(account_s659 != null))
[L4811]  CALL        call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4877]              __var_21 := null;
[L4878]  COND FALSE  !(!(account_s713 != null))
[L4882]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s713]][account_s713];
[L4811]  RET         call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4812]  COND FALSE  !(revert)
[L4815]  COND FALSE  !(!!__var_18)
[L4819]              M_Ref_bool[bearer_Roles.Role[role_s659]][account_s659] := true;
[L5876]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1130);
[L5877]  COND FALSE  !(revert)
[L5880]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L5716]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5717]  COND FALSE  !(revert)
[L5742]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5743]  COND FALSE  !(revert)
[L6204]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6205]  COND FALSE  !(revert)
[L6208]  CALL        call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L5938]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4004]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3989]              assume msgsender_MSG != null;
[L3990]              Balance[this] := 0;
[L4004]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  COND FALSE  !(revert)
[L5938]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5939]  COND FALSE  !(revert)
[L5942]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4206]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4004]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3989]              assume msgsender_MSG != null;
[L3990]              Balance[this] := 0;
[L4004]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  COND FALSE  !(revert)
[L4206]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4207]  COND FALSE  !(revert)
[L4210]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4182]              assume msgsender_MSG != null;
[L4183]              Balance[this] := 0;
[L4184]              _balances_ERC20[this] := zeroRefintArr();
[L4185]              sum__balances0[this] := 0;
[L4186]              _allowed_ERC20[this] := zeroRefRefintArr();
[L4187]              sum__allowed1[this] := 0;
[L4188]              _totalSupply_ERC20[this] := 0;
[L4210]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4211]  COND FALSE  !(revert)
[L5942]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5943]  COND FALSE  !(revert)
[L5946]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5742]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5701]              assume msgsender_MSG != null;
[L5702]              Balance[this] := 0;
[L5704]  CALL        call __var_35 := FreshRefGenerator__success();
[L3962]              havoc newRef;
[L3963]              assume Alloc[newRef] == false;
[L3964]              Alloc[newRef] := true;
[L3965]              assume newRef != null;
[L5704]  RET         call __var_35 := FreshRefGenerator__success();
[L5705]  COND FALSE  !(revert)
[L5708]              _minters_MinterRole[this] := __var_35;
[L5710]  COND FALSE  !(DType[this] == OMToken)
[L5715]  COND TRUE   DType[this] == ERC20Mintable
[L5716]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5876]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1130);
[L4806]              __var_17 := null;
[L4807]  COND FALSE  !(!(account_s659 != null))
[L4811]  CALL        call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4877]              __var_21 := null;
[L4878]  COND FALSE  !(!(account_s713 != null))
[L4882]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s713]][account_s713];
[L4811]  RET         call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4812]  COND FALSE  !(revert)
[L4815]  COND FALSE  !(!!__var_18)
[L4819]              M_Ref_bool[bearer_Roles.Role[role_s659]][account_s659] := true;
[L5876]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1130);
[L5877]  COND FALSE  !(revert)
[L5880]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L5716]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5717]  COND FALSE  !(revert)
[L5742]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5743]  COND FALSE  !(revert)
[L5946]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5947]  COND FALSE  !(revert)
[L5950]  CALL        call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5911]              assume msgsender_MSG != null;
[L5912]              Balance[this] := 0;
[L5950]  RET         call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5951]  COND FALSE  !(revert)
[L6208]  RET         call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L6209]  COND FALSE  !(revert)
[L6212]  CALL        call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6036]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4004]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3989]              assume msgsender_MSG != null;
[L3990]              Balance[this] := 0;
[L4004]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  COND FALSE  !(revert)
[L6036]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6037]  COND FALSE  !(revert)
[L6040]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4206]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4004]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3989]              assume msgsender_MSG != null;
[L3990]              Balance[this] := 0;
[L4004]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  COND FALSE  !(revert)
[L4206]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4207]  COND FALSE  !(revert)
[L4210]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4182]              assume msgsender_MSG != null;
[L4183]              Balance[this] := 0;
[L4184]              _balances_ERC20[this] := zeroRefintArr();
[L4185]              sum__balances0[this] := 0;
[L4186]              _allowed_ERC20[this] := zeroRefRefintArr();
[L4187]              sum__allowed1[this] := 0;
[L4188]              _totalSupply_ERC20[this] := 0;
[L4210]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4211]  COND FALSE  !(revert)
[L6040]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6041]  COND FALSE  !(revert)
[L6044]  CALL        call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6013]              assume msgsender_MSG != null;
[L6014]              Balance[this] := 0;
[L6044]  RET         call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6045]  COND FALSE  !(revert)
[L6212]  RET         call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6213]  COND FALSE  !(revert)
[L6216]  CALL        call OMToken_OMToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L6129]              assume msgsender_MSG != null;
[L6130]              Balance[this] := 0;
[L6216]  RET         call OMToken_OMToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L6217]  COND FALSE  !(revert)
[L2743]  RET         call OMToken_OMToken__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L2744]              assume !revert && gas >= 0;
[L9919]  RET         call OMToken_OMToken(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L9920]              assume !revert && gas >= 0;
[L9923]  CALL        call CorralChoice_OMToken(this);
[L9689]              havoc msgsender_MSG;
[L9690]              havoc msgvalue_MSG;
[L9691]              havoc choice;
[L9692]              havoc to_s916;
[L9693]              havoc value_s916;
[L9694]              havoc __ret_0_transfer;
[L9695]              havoc spender_s955;
[L9696]              havoc value_s955;
[L9697]              havoc __ret_0_approve;
[L9698]              havoc from_s937;
[L9699]              havoc to_s937;
[L9700]              havoc value_s937;
[L9701]              havoc __ret_0_transferFrom;
[L9702]              havoc __ret_0_totalSupply;
[L9703]              havoc owner_s231;
[L9704]              havoc __ret_0_balanceOf;
[L9705]              havoc owner_s247;
[L9706]              havoc spender_s247;
[L9707]              havoc __ret_0_allowance;
[L9708]              havoc spender_s973;
[L9709]              havoc addedValue_s973;
[L9710]              havoc success_s973;
[L9711]              havoc spender_s991;
[L9712]              havoc subtractedValue_s991;
[L9713]              havoc success_s991;
[L9714]              havoc account_s760;
[L9715]              havoc __ret_0_isPauser;
[L9716]              havoc account_s772;
[L9717]              havoc __ret_0_paused;
[L9718]              havoc name_s1022;
[L9719]              havoc symbol_s1022;
[L9720]              havoc decimals_s1022;
[L9721]              havoc __ret_0_name;
[L9722]              havoc __ret_0_symbol;
[L9723]              havoc __ret_0_decimals;
[L9724]              havoc account_s1093;
[L9725]              havoc __ret_0_isMinter;
[L9726]              havoc account_s1105;
[L9727]              havoc to_s1170;
[L9728]              havoc value_s1170;
[L9729]              havoc __ret_0_mint;
[L9730]              havoc value_s1185;
[L9731]              havoc from_s1198;
[L9732]              havoc value_s1198;
[L9733]              havoc name_s1230;
[L9734]              havoc symbol_s1230;
[L9735]              havoc decimals_s1230;
[L9736]              havoc tmpNow;
[L9737]              havoc gas;
[L9738]              assume gas > 4000000 && gas <= 8000000;
[L9739]              tmpNow := now;
[L9740]              havoc now;
[L9741]              assume now > tmpNow;
[L9742]              assume msgsender_MSG != null;
[L9743]              assume DType[msgsender_MSG] != IERC20;
[L9744]              assume DType[msgsender_MSG] != SafeMath;
[L9745]              assume DType[msgsender_MSG] != ERC20;
[L9746]              assume DType[msgsender_MSG] != Roles;
[L9747]              assume DType[msgsender_MSG] != PauserRole;
[L9748]              assume DType[msgsender_MSG] != Pausable;
[L9749]              assume DType[msgsender_MSG] != ERC20Pausable;
[L9750]              assume DType[msgsender_MSG] != ERC20Detailed;
[L9751]              assume DType[msgsender_MSG] != MinterRole;
[L9752]              assume DType[msgsender_MSG] != ERC20Mintable;
[L9753]              assume DType[msgsender_MSG] != ERC20Burnable;
[L9754]              assume DType[msgsender_MSG] != OMToken;
[L9755]              Alloc[msgsender_MSG] := true;
[L9756]  COND FALSE  !(choice == 23)
[L9763]  COND FALSE  !(choice == 22)
[L9770]  COND FALSE  !(choice == 21)
[L9777]  COND FALSE  !(choice == 20)
[L9783]  COND FALSE  !(choice == 19)
[L9789]  COND TRUE   choice == 18
[L9790]              gas := gas - 21000;
[L9791]  COND TRUE   gas >= 0
[L9792]              assume msgvalue_MSG == 0;
[L9793]  CALL        call __ret_0_allowance := allowance~address~address_ERC20(this, msgsender_MSG, msgvalue_MSG, owner_s247, spender_s247);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume _allowed_ERC20[this][owner_s247][spender_s247] >= 0 && _allowed_ERC20[this][owner_s247][spender_s247] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_allowance_ERC200 := true;
[L2]                 call_allowance_ERC200 := false;
[L2]                 revert := revert_hold;
[L430]               havoc __exception;
[L431]               revert := false;
[L432]   COND FALSE  !(__exception)
[L459]   CALL        call __ret_0_ := allowance~address~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, owner_s247, spender_s247);
[L4248]              __ret_0_ := _allowed_ERC20[this][owner_s247][spender_s247];
[L459]   RET         call __ret_0_ := allowance~address~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, owner_s247, spender_s247);
[L460]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((((__ret_0_ == _allowed_ERC20[this][owner_s247][spender_s247] && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowed_ERC20[this] == old(_allowed_ERC20[this])) && _minters_MinterRole[this] == old(_minters_MinterRole[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this])) && _paused_Pausable[this] == old(_paused_Pausable[this])) && _pausers_PauserRole[this] == old(_pausers_PauserRole[this]));
[L2]                 revert := revert_hold;
[L9793]  RET         call __ret_0_allowance := allowance~address~address_ERC20(this, msgsender_MSG, msgvalue_MSG, owner_s247, spender_s247);
[L9923]  RET         call CorralChoice_OMToken(this);

Loop:
[L9923]  CALL        call CorralChoice_OMToken(this);
[L9689]              havoc msgsender_MSG;
[L9690]              havoc msgvalue_MSG;
[L9691]              havoc choice;
[L9692]              havoc to_s916;
[L9693]              havoc value_s916;
[L9694]              havoc __ret_0_transfer;
[L9695]              havoc spender_s955;
[L9696]              havoc value_s955;
[L9697]              havoc __ret_0_approve;
[L9698]              havoc from_s937;
[L9699]              havoc to_s937;
[L9700]              havoc value_s937;
[L9701]              havoc __ret_0_transferFrom;
[L9702]              havoc __ret_0_totalSupply;
[L9703]              havoc owner_s231;
[L9704]              havoc __ret_0_balanceOf;
[L9705]              havoc owner_s247;
[L9706]              havoc spender_s247;
[L9707]              havoc __ret_0_allowance;
[L9708]              havoc spender_s973;
[L9709]              havoc addedValue_s973;
[L9710]              havoc success_s973;
[L9711]              havoc spender_s991;
[L9712]              havoc subtractedValue_s991;
[L9713]              havoc success_s991;
[L9714]              havoc account_s760;
[L9715]              havoc __ret_0_isPauser;
[L9716]              havoc account_s772;
[L9717]              havoc __ret_0_paused;
[L9718]              havoc name_s1022;
[L9719]              havoc symbol_s1022;
[L9720]              havoc decimals_s1022;
[L9721]              havoc __ret_0_name;
[L9722]              havoc __ret_0_symbol;
[L9723]              havoc __ret_0_decimals;
[L9724]              havoc account_s1093;
[L9725]              havoc __ret_0_isMinter;
[L9726]              havoc account_s1105;
[L9727]              havoc to_s1170;
[L9728]              havoc value_s1170;
[L9729]              havoc __ret_0_mint;
[L9730]              havoc value_s1185;
[L9731]              havoc from_s1198;
[L9732]              havoc value_s1198;
[L9733]              havoc name_s1230;
[L9734]              havoc symbol_s1230;
[L9735]              havoc decimals_s1230;
[L9736]              havoc tmpNow;
[L9737]              havoc gas;
[L9738]              assume gas > 4000000 && gas <= 8000000;
[L9739]              tmpNow := now;
[L9740]              havoc now;
[L9741]              assume now > tmpNow;
[L9742]              assume msgsender_MSG != null;
[L9743]              assume DType[msgsender_MSG] != IERC20;
[L9744]              assume DType[msgsender_MSG] != SafeMath;
[L9745]              assume DType[msgsender_MSG] != ERC20;
[L9746]              assume DType[msgsender_MSG] != Roles;
[L9747]              assume DType[msgsender_MSG] != PauserRole;
[L9748]              assume DType[msgsender_MSG] != Pausable;
[L9749]              assume DType[msgsender_MSG] != ERC20Pausable;
[L9750]              assume DType[msgsender_MSG] != ERC20Detailed;
[L9751]              assume DType[msgsender_MSG] != MinterRole;
[L9752]              assume DType[msgsender_MSG] != ERC20Mintable;
[L9753]              assume DType[msgsender_MSG] != ERC20Burnable;
[L9754]              assume DType[msgsender_MSG] != OMToken;
[L9755]              Alloc[msgsender_MSG] := true;
[L9756]  COND TRUE   choice == 23
[L9757]              gas := gas - 21000;
[L9758]  COND FALSE  !(gas >= 0)
[L9923]  RET         call CorralChoice_OMToken(this);

[2020-11-25 02:29:17,553 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 02:29:17,553 INFO  L82        PathProgramCache]: Analyzing trace with hash -368183733, now seen corresponding path program 1 times
[2020-11-25 02:29:17,554 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 02:29:17,570 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 02:29:17,707 INFO  L134       CoverageAnalysis]: Checked inductivity of 1031 backedges. 0 proven. 10 refuted. 0 times theorem prover too weak. 1021 trivial. 0 not checked.
[2020-11-25 02:29:17,707 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 02:29:17,708 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [7] total 7
[2020-11-25 02:29:17,708 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 02:29:17,708 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 7 interpolants.
[2020-11-25 02:29:17,708 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=11, Invalid=31, Unknown=0, NotChecked=0, Total=42
[2020-11-25 02:29:17,708 INFO  L87              Difference]: Start difference. First operand 8135 states and 9458 transitions. cyclomatic complexity: 1327 Second operand 7 states.
[2020-11-25 02:29:17,827 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 02:29:17,827 INFO  L93              Difference]: Finished difference Result 8158 states and 9484 transitions.
[2020-11-25 02:29:17,827 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 7 states. 
[2020-11-25 02:29:17,827 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 8158 states and 9484 transitions.
[2020-11-25 02:29:17,841 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 10
[2020-11-25 02:29:17,856 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 8158 states to 8141 states and 9464 transitions.
[2020-11-25 02:29:17,856 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1858
[2020-11-25 02:29:17,856 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1858
[2020-11-25 02:29:17,857 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 8141 states and 9464 transitions.
[2020-11-25 02:29:17,860 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 02:29:17,861 INFO  L728         BuchiCegarLoop]: Abstraction has 8141 states and 9464 transitions.
[2020-11-25 02:29:17,864 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 8141 states and 9464 transitions.
[2020-11-25 02:29:17,900 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 8141 to 8141.
[2020-11-25 02:29:17,901 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 8141 states.
[2020-11-25 02:29:17,909 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 8141 states to 8141 states and 9464 transitions.
[2020-11-25 02:29:17,909 INFO  L751         BuchiCegarLoop]: Abstraction has 8141 states and 9464 transitions.
[2020-11-25 02:29:17,909 INFO  L631         BuchiCegarLoop]: Abstraction has 8141 states and 9464 transitions.
[2020-11-25 02:29:17,910 INFO  L445         BuchiCegarLoop]: ======== Iteration 16============
[2020-11-25 02:29:17,910 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 8141 states and 9464 transitions.
[2020-11-25 02:29:17,918 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 10
[2020-11-25 02:29:17,918 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 02:29:17,918 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 02:29:17,919 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [9, 9, 9, 9, 9, 9, 9, 9, 9, 7, 7, 7, 7, 7, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 02:29:17,919 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_allowance_ERC200 := false;
[L2]                 call_allowance_ERC200 := false;
[L2]     CALL        call main();
[L9913]              assume null == 0;
[L9914]  CALL        call this := FreshRefGenerator__success();
[L3962]              havoc newRef;
[L3963]              assume Alloc[newRef] == false;
[L3964]              Alloc[newRef] := true;
[L3965]              assume newRef != null;
[L9914]  RET         call this := FreshRefGenerator__success();
[L9915]              assume now >= 0;
[L9916]              assume DType[this] == OMToken;
[L9917]              assume msgvalue_MSG == 0;
[L9918]              gas := gas - 53000;
[L9919]  CALL        call OMToken_OMToken(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L2714]              havoc __exception;
[L2715]              revert := false;
[L2716]  COND FALSE  !(__exception)
[L2743]  CALL        call OMToken_OMToken__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L6180]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4004]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3989]              assume msgsender_MSG != null;
[L3990]              Balance[this] := 0;
[L4004]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  COND FALSE  !(revert)
[L6180]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6181]  COND FALSE  !(revert)
[L6184]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4206]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4004]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3989]              assume msgsender_MSG != null;
[L3990]              Balance[this] := 0;
[L4004]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  COND FALSE  !(revert)
[L4206]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4207]  COND FALSE  !(revert)
[L4210]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4182]              assume msgsender_MSG != null;
[L4183]              Balance[this] := 0;
[L4184]              _balances_ERC20[this] := zeroRefintArr();
[L4185]              sum__balances0[this] := 0;
[L4186]              _allowed_ERC20[this] := zeroRefRefintArr();
[L4187]              sum__allowed1[this] := 0;
[L4188]              _totalSupply_ERC20[this] := 0;
[L4210]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4211]  COND FALSE  !(revert)
[L6184]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6185]  COND FALSE  !(revert)
[L6188]  CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4974]  CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4928]              assume msgsender_MSG != null;
[L4929]              Balance[this] := 0;
[L4931]  CALL        call __var_22 := FreshRefGenerator__success();
[L3962]              havoc newRef;
[L3963]              assume Alloc[newRef] == false;
[L3964]              Alloc[newRef] := true;
[L3965]              assume newRef != null;
[L4931]  RET         call __var_22 := FreshRefGenerator__success();
[L4932]  COND FALSE  !(revert)
[L4935]              _pausers_PauserRole[this] := __var_22;
[L4937]  COND TRUE   DType[this] == OMToken
[L4938]  CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5128]  CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L4806]              __var_17 := null;
[L4807]  COND FALSE  !(!(account_s659 != null))
[L4811]  CALL        call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4877]              __var_21 := null;
[L4878]  COND FALSE  !(!(account_s713 != null))
[L4882]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s713]][account_s713];
[L4811]  RET         call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4812]  COND FALSE  !(revert)
[L4815]  COND FALSE  !(!!__var_18)
[L4819]              M_Ref_bool[bearer_Roles.Role[role_s659]][account_s659] := true;
[L5128]  RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L5129]  COND FALSE  !(revert)
[L5132]              assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L4938]  RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L4939]  COND FALSE  !(revert)
[L4974]  RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4975]  COND FALSE  !(revert)
[L6188]  RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6189]  COND FALSE  !(revert)
[L6192]  CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L5186]  CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4974]  CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4928]              assume msgsender_MSG != null;
[L4929]              Balance[this] := 0;
[L4931]  CALL        call __var_22 := FreshRefGenerator__success();
[L3962]              havoc newRef;
[L3963]              assume Alloc[newRef] == false;
[L3964]              Alloc[newRef] := true;
[L3965]              assume newRef != null;
[L4931]  RET         call __var_22 := FreshRefGenerator__success();
[L4932]  COND FALSE  !(revert)
[L4935]              _pausers_PauserRole[this] := __var_22;
[L4937]  COND TRUE   DType[this] == OMToken
[L4938]  CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5128]  CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L4806]              __var_17 := null;
[L4807]  COND FALSE  !(!(account_s659 != null))
[L4811]  CALL        call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4877]              __var_21 := null;
[L4878]  COND FALSE  !(!(account_s713 != null))
[L4882]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s713]][account_s713];
[L4811]  RET         call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4812]  COND FALSE  !(revert)
[L4815]  COND FALSE  !(!!__var_18)
[L4819]              M_Ref_bool[bearer_Roles.Role[role_s659]][account_s659] := true;
[L5128]  RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L5129]  COND FALSE  !(revert)
[L5132]              assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L4938]  RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L4939]  COND FALSE  !(revert)
[L4974]  RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4975]  COND FALSE  !(revert)
[L5186]  RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5187]  COND FALSE  !(revert)
[L5190]  CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5165]              assume msgsender_MSG != null;
[L5166]              Balance[this] := 0;
[L5167]              _paused_Pausable[this] := false;
[L5169]              _paused_Pausable[this] := false;
[L5190]  RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5191]  COND FALSE  !(revert)
[L6192]  RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6193]  COND FALSE  !(revert)
[L6196]  CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L5304]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4004]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3989]              assume msgsender_MSG != null;
[L3990]              Balance[this] := 0;
[L4004]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  COND FALSE  !(revert)
[L5304]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5305]  COND FALSE  !(revert)
[L5308]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4206]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4004]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3989]              assume msgsender_MSG != null;
[L3990]              Balance[this] := 0;
[L4004]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  COND FALSE  !(revert)
[L4206]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4207]  COND FALSE  !(revert)
[L4210]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4182]              assume msgsender_MSG != null;
[L4183]              Balance[this] := 0;
[L4184]              _balances_ERC20[this] := zeroRefintArr();
[L4185]              sum__balances0[this] := 0;
[L4186]              _allowed_ERC20[this] := zeroRefRefintArr();
[L4187]              sum__allowed1[this] := 0;
[L4188]              _totalSupply_ERC20[this] := 0;
[L4210]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4211]  COND FALSE  !(revert)
[L5308]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5309]  COND FALSE  !(revert)
[L5312]  CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4974]  CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4928]              assume msgsender_MSG != null;
[L4929]              Balance[this] := 0;
[L4931]  CALL        call __var_22 := FreshRefGenerator__success();
[L3962]              havoc newRef;
[L3963]              assume Alloc[newRef] == false;
[L3964]              Alloc[newRef] := true;
[L3965]              assume newRef != null;
[L4931]  RET         call __var_22 := FreshRefGenerator__success();
[L4932]  COND FALSE  !(revert)
[L4935]              _pausers_PauserRole[this] := __var_22;
[L4937]  COND TRUE   DType[this] == OMToken
[L4938]  CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5128]  CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L4806]              __var_17 := null;
[L4807]  COND FALSE  !(!(account_s659 != null))
[L4811]  CALL        call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4877]              __var_21 := null;
[L4878]  COND FALSE  !(!(account_s713 != null))
[L4882]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s713]][account_s713];
[L4811]  RET         call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4812]  COND FALSE  !(revert)
[L4815]  COND FALSE  !(!!__var_18)
[L4819]              M_Ref_bool[bearer_Roles.Role[role_s659]][account_s659] := true;
[L5128]  RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L5129]  COND FALSE  !(revert)
[L5132]              assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L4938]  RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L4939]  COND FALSE  !(revert)
[L4974]  RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4975]  COND FALSE  !(revert)
[L5312]  RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5313]  COND FALSE  !(revert)
[L5316]  CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L5186]  CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4974]  CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4928]              assume msgsender_MSG != null;
[L4929]              Balance[this] := 0;
[L4931]  CALL        call __var_22 := FreshRefGenerator__success();
[L3962]              havoc newRef;
[L3963]              assume Alloc[newRef] == false;
[L3964]              Alloc[newRef] := true;
[L3965]              assume newRef != null;
[L4931]  RET         call __var_22 := FreshRefGenerator__success();
[L4932]  COND FALSE  !(revert)
[L4935]              _pausers_PauserRole[this] := __var_22;
[L4937]  COND FALSE  !(DType[this] == OMToken)
[L4942]  COND FALSE  !(DType[this] == ERC20Pausable)
[L4947]  COND TRUE   DType[this] == Pausable
[L4948]  CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5128]  CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L4806]              __var_17 := null;
[L4807]  COND FALSE  !(!(account_s659 != null))
[L4811]  CALL        call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4877]              __var_21 := null;
[L4878]  COND FALSE  !(!(account_s713 != null))
[L4882]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s713]][account_s713];
[L4811]  RET         call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4812]  COND FALSE  !(revert)
[L4815]  COND FALSE  !(!!__var_18)
[L4819]              M_Ref_bool[bearer_Roles.Role[role_s659]][account_s659] := true;
[L5128]  RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L5129]  COND FALSE  !(revert)
[L5132]              assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L4948]  RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L4949]  COND FALSE  !(revert)
[L4974]  RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4975]  COND FALSE  !(revert)
[L5186]  RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5187]  COND FALSE  !(revert)
[L5190]  CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5165]              assume msgsender_MSG != null;
[L5166]              Balance[this] := 0;
[L5167]              _paused_Pausable[this] := false;
[L5169]              _paused_Pausable[this] := false;
[L5190]  RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5191]  COND FALSE  !(revert)
[L5316]  RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L5317]  COND FALSE  !(revert)
[L5320]  CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5273]              assume msgsender_MSG != null;
[L5274]              Balance[this] := 0;
[L5320]  RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5321]  COND FALSE  !(revert)
[L6196]  RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6197]  COND FALSE  !(revert)
[L6200]  CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L5618]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4004]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3989]              assume msgsender_MSG != null;
[L3990]              Balance[this] := 0;
[L4004]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  COND FALSE  !(revert)
[L5618]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5619]  COND FALSE  !(revert)
[L5622]  CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1022, symbol_s1022, decimals_s1022);
[L5593]              assume msgsender_MSG != null;
[L5594]              Balance[this] := 0;
[L5595]              _name_ERC20Detailed[this] := -1676908070;
[L5596]              _symbol_ERC20Detailed[this] := -1676908070;
[L5597]              _decimals_ERC20Detailed[this] := 0;
[L5599]              _name_ERC20Detailed[this] := name_s1022;
[L5600]              _symbol_ERC20Detailed[this] := symbol_s1022;
[L5601]              _decimals_ERC20Detailed[this] := decimals_s1022;
[L5622]  RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1022, symbol_s1022, decimals_s1022);
[L5623]  COND FALSE  !(revert)
[L6200]  RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L6201]  COND FALSE  !(revert)
[L6204]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5742]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5701]              assume msgsender_MSG != null;
[L5702]              Balance[this] := 0;
[L5704]  CALL        call __var_35 := FreshRefGenerator__success();
[L3962]              havoc newRef;
[L3963]              assume Alloc[newRef] == false;
[L3964]              Alloc[newRef] := true;
[L3965]              assume newRef != null;
[L5704]  RET         call __var_35 := FreshRefGenerator__success();
[L5705]  COND FALSE  !(revert)
[L5708]              _minters_MinterRole[this] := __var_35;
[L5710]  COND TRUE   DType[this] == OMToken
[L5711]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5876]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1130);
[L4806]              __var_17 := null;
[L4807]  COND FALSE  !(!(account_s659 != null))
[L4811]  CALL        call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4877]              __var_21 := null;
[L4878]  COND FALSE  !(!(account_s713 != null))
[L4882]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s713]][account_s713];
[L4811]  RET         call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4812]  COND FALSE  !(revert)
[L4815]  COND FALSE  !(!!__var_18)
[L4819]              M_Ref_bool[bearer_Roles.Role[role_s659]][account_s659] := true;
[L5876]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1130);
[L5877]  COND FALSE  !(revert)
[L5880]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L5711]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5712]  COND FALSE  !(revert)
[L5742]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5743]  COND FALSE  !(revert)
[L6204]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6205]  COND FALSE  !(revert)
[L6208]  CALL        call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L5938]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4004]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3989]              assume msgsender_MSG != null;
[L3990]              Balance[this] := 0;
[L4004]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  COND FALSE  !(revert)
[L5938]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5939]  COND FALSE  !(revert)
[L5942]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4206]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4004]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3989]              assume msgsender_MSG != null;
[L3990]              Balance[this] := 0;
[L4004]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  COND FALSE  !(revert)
[L4206]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4207]  COND FALSE  !(revert)
[L4210]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4182]              assume msgsender_MSG != null;
[L4183]              Balance[this] := 0;
[L4184]              _balances_ERC20[this] := zeroRefintArr();
[L4185]              sum__balances0[this] := 0;
[L4186]              _allowed_ERC20[this] := zeroRefRefintArr();
[L4187]              sum__allowed1[this] := 0;
[L4188]              _totalSupply_ERC20[this] := 0;
[L4210]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4211]  COND FALSE  !(revert)
[L5942]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5943]  COND FALSE  !(revert)
[L5946]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5742]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5701]              assume msgsender_MSG != null;
[L5702]              Balance[this] := 0;
[L5704]  CALL        call __var_35 := FreshRefGenerator__success();
[L3962]              havoc newRef;
[L3963]              assume Alloc[newRef] == false;
[L3964]              Alloc[newRef] := true;
[L3965]              assume newRef != null;
[L5704]  RET         call __var_35 := FreshRefGenerator__success();
[L5705]  COND FALSE  !(revert)
[L5708]              _minters_MinterRole[this] := __var_35;
[L5710]  COND FALSE  !(DType[this] == OMToken)
[L5715]  COND TRUE   DType[this] == ERC20Mintable
[L5716]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5876]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1130);
[L4806]              __var_17 := null;
[L4807]  COND FALSE  !(!(account_s659 != null))
[L4811]  CALL        call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4877]              __var_21 := null;
[L4878]  COND FALSE  !(!(account_s713 != null))
[L4882]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s713]][account_s713];
[L4811]  RET         call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4812]  COND FALSE  !(revert)
[L4815]  COND FALSE  !(!!__var_18)
[L4819]              M_Ref_bool[bearer_Roles.Role[role_s659]][account_s659] := true;
[L5876]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1130);
[L5877]  COND FALSE  !(revert)
[L5880]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L5716]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5717]  COND FALSE  !(revert)
[L5742]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5743]  COND FALSE  !(revert)
[L5946]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5947]  COND FALSE  !(revert)
[L5950]  CALL        call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5911]              assume msgsender_MSG != null;
[L5912]              Balance[this] := 0;
[L5950]  RET         call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5951]  COND FALSE  !(revert)
[L6208]  RET         call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L6209]  COND FALSE  !(revert)
[L6212]  CALL        call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6036]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4004]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3989]              assume msgsender_MSG != null;
[L3990]              Balance[this] := 0;
[L4004]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  COND FALSE  !(revert)
[L6036]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6037]  COND FALSE  !(revert)
[L6040]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4206]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4004]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3989]              assume msgsender_MSG != null;
[L3990]              Balance[this] := 0;
[L4004]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  COND FALSE  !(revert)
[L4206]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4207]  COND FALSE  !(revert)
[L4210]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4182]              assume msgsender_MSG != null;
[L4183]              Balance[this] := 0;
[L4184]              _balances_ERC20[this] := zeroRefintArr();
[L4185]              sum__balances0[this] := 0;
[L4186]              _allowed_ERC20[this] := zeroRefRefintArr();
[L4187]              sum__allowed1[this] := 0;
[L4188]              _totalSupply_ERC20[this] := 0;
[L4210]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4211]  COND FALSE  !(revert)
[L6040]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6041]  COND FALSE  !(revert)
[L6044]  CALL        call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6013]              assume msgsender_MSG != null;
[L6014]              Balance[this] := 0;
[L6044]  RET         call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6045]  COND FALSE  !(revert)
[L6212]  RET         call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6213]  COND FALSE  !(revert)
[L6216]  CALL        call OMToken_OMToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L6129]              assume msgsender_MSG != null;
[L6130]              Balance[this] := 0;
[L6216]  RET         call OMToken_OMToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L6217]  COND FALSE  !(revert)
[L2743]  RET         call OMToken_OMToken__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L2744]              assume !revert && gas >= 0;
[L9919]  RET         call OMToken_OMToken(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L9920]              assume !revert && gas >= 0;
[L9923]  CALL        call CorralChoice_OMToken(this);
[L9689]              havoc msgsender_MSG;
[L9690]              havoc msgvalue_MSG;
[L9691]              havoc choice;
[L9692]              havoc to_s916;
[L9693]              havoc value_s916;
[L9694]              havoc __ret_0_transfer;
[L9695]              havoc spender_s955;
[L9696]              havoc value_s955;
[L9697]              havoc __ret_0_approve;
[L9698]              havoc from_s937;
[L9699]              havoc to_s937;
[L9700]              havoc value_s937;
[L9701]              havoc __ret_0_transferFrom;
[L9702]              havoc __ret_0_totalSupply;
[L9703]              havoc owner_s231;
[L9704]              havoc __ret_0_balanceOf;
[L9705]              havoc owner_s247;
[L9706]              havoc spender_s247;
[L9707]              havoc __ret_0_allowance;
[L9708]              havoc spender_s973;
[L9709]              havoc addedValue_s973;
[L9710]              havoc success_s973;
[L9711]              havoc spender_s991;
[L9712]              havoc subtractedValue_s991;
[L9713]              havoc success_s991;
[L9714]              havoc account_s760;
[L9715]              havoc __ret_0_isPauser;
[L9716]              havoc account_s772;
[L9717]              havoc __ret_0_paused;
[L9718]              havoc name_s1022;
[L9719]              havoc symbol_s1022;
[L9720]              havoc decimals_s1022;
[L9721]              havoc __ret_0_name;
[L9722]              havoc __ret_0_symbol;
[L9723]              havoc __ret_0_decimals;
[L9724]              havoc account_s1093;
[L9725]              havoc __ret_0_isMinter;
[L9726]              havoc account_s1105;
[L9727]              havoc to_s1170;
[L9728]              havoc value_s1170;
[L9729]              havoc __ret_0_mint;
[L9730]              havoc value_s1185;
[L9731]              havoc from_s1198;
[L9732]              havoc value_s1198;
[L9733]              havoc name_s1230;
[L9734]              havoc symbol_s1230;
[L9735]              havoc decimals_s1230;
[L9736]              havoc tmpNow;
[L9737]              havoc gas;
[L9738]              assume gas > 4000000 && gas <= 8000000;
[L9739]              tmpNow := now;
[L9740]              havoc now;
[L9741]              assume now > tmpNow;
[L9742]              assume msgsender_MSG != null;
[L9743]              assume DType[msgsender_MSG] != IERC20;
[L9744]              assume DType[msgsender_MSG] != SafeMath;
[L9745]              assume DType[msgsender_MSG] != ERC20;
[L9746]              assume DType[msgsender_MSG] != Roles;
[L9747]              assume DType[msgsender_MSG] != PauserRole;
[L9748]              assume DType[msgsender_MSG] != Pausable;
[L9749]              assume DType[msgsender_MSG] != ERC20Pausable;
[L9750]              assume DType[msgsender_MSG] != ERC20Detailed;
[L9751]              assume DType[msgsender_MSG] != MinterRole;
[L9752]              assume DType[msgsender_MSG] != ERC20Mintable;
[L9753]              assume DType[msgsender_MSG] != ERC20Burnable;
[L9754]              assume DType[msgsender_MSG] != OMToken;
[L9755]              Alloc[msgsender_MSG] := true;
[L9756]  COND FALSE  !(choice == 23)
[L9763]  COND FALSE  !(choice == 22)
[L9770]  COND FALSE  !(choice == 21)
[L9777]  COND FALSE  !(choice == 20)
[L9783]  COND FALSE  !(choice == 19)
[L9789]  COND TRUE   choice == 18
[L9790]              gas := gas - 21000;
[L9791]  COND TRUE   gas >= 0
[L9792]              assume msgvalue_MSG == 0;
[L9793]  CALL        call __ret_0_allowance := allowance~address~address_ERC20(this, msgsender_MSG, msgvalue_MSG, owner_s247, spender_s247);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume _allowed_ERC20[this][owner_s247][spender_s247] >= 0 && _allowed_ERC20[this][owner_s247][spender_s247] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_allowance_ERC200 := true;
[L2]                 call_allowance_ERC200 := false;
[L2]                 revert := revert_hold;
[L430]               havoc __exception;
[L431]               revert := false;
[L432]   COND FALSE  !(__exception)
[L459]   CALL        call __ret_0_ := allowance~address~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, owner_s247, spender_s247);
[L4248]              __ret_0_ := _allowed_ERC20[this][owner_s247][spender_s247];
[L459]   RET         call __ret_0_ := allowance~address~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, owner_s247, spender_s247);
[L460]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((((__ret_0_ == _allowed_ERC20[this][owner_s247][spender_s247] && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowed_ERC20[this] == old(_allowed_ERC20[this])) && _minters_MinterRole[this] == old(_minters_MinterRole[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this])) && _paused_Pausable[this] == old(_paused_Pausable[this])) && _pausers_PauserRole[this] == old(_pausers_PauserRole[this]));
[L2]                 revert := revert_hold;
[L9793]  RET         call __ret_0_allowance := allowance~address~address_ERC20(this, msgsender_MSG, msgvalue_MSG, owner_s247, spender_s247);
[L9923]  RET         call CorralChoice_OMToken(this);

Loop:
[L9923]  CALL        call CorralChoice_OMToken(this);
[L9689]              havoc msgsender_MSG;
[L9690]              havoc msgvalue_MSG;
[L9691]              havoc choice;
[L9692]              havoc to_s916;
[L9693]              havoc value_s916;
[L9694]              havoc __ret_0_transfer;
[L9695]              havoc spender_s955;
[L9696]              havoc value_s955;
[L9697]              havoc __ret_0_approve;
[L9698]              havoc from_s937;
[L9699]              havoc to_s937;
[L9700]              havoc value_s937;
[L9701]              havoc __ret_0_transferFrom;
[L9702]              havoc __ret_0_totalSupply;
[L9703]              havoc owner_s231;
[L9704]              havoc __ret_0_balanceOf;
[L9705]              havoc owner_s247;
[L9706]              havoc spender_s247;
[L9707]              havoc __ret_0_allowance;
[L9708]              havoc spender_s973;
[L9709]              havoc addedValue_s973;
[L9710]              havoc success_s973;
[L9711]              havoc spender_s991;
[L9712]              havoc subtractedValue_s991;
[L9713]              havoc success_s991;
[L9714]              havoc account_s760;
[L9715]              havoc __ret_0_isPauser;
[L9716]              havoc account_s772;
[L9717]              havoc __ret_0_paused;
[L9718]              havoc name_s1022;
[L9719]              havoc symbol_s1022;
[L9720]              havoc decimals_s1022;
[L9721]              havoc __ret_0_name;
[L9722]              havoc __ret_0_symbol;
[L9723]              havoc __ret_0_decimals;
[L9724]              havoc account_s1093;
[L9725]              havoc __ret_0_isMinter;
[L9726]              havoc account_s1105;
[L9727]              havoc to_s1170;
[L9728]              havoc value_s1170;
[L9729]              havoc __ret_0_mint;
[L9730]              havoc value_s1185;
[L9731]              havoc from_s1198;
[L9732]              havoc value_s1198;
[L9733]              havoc name_s1230;
[L9734]              havoc symbol_s1230;
[L9735]              havoc decimals_s1230;
[L9736]              havoc tmpNow;
[L9737]              havoc gas;
[L9738]              assume gas > 4000000 && gas <= 8000000;
[L9739]              tmpNow := now;
[L9740]              havoc now;
[L9741]              assume now > tmpNow;
[L9742]              assume msgsender_MSG != null;
[L9743]              assume DType[msgsender_MSG] != IERC20;
[L9744]              assume DType[msgsender_MSG] != SafeMath;
[L9745]              assume DType[msgsender_MSG] != ERC20;
[L9746]              assume DType[msgsender_MSG] != Roles;
[L9747]              assume DType[msgsender_MSG] != PauserRole;
[L9748]              assume DType[msgsender_MSG] != Pausable;
[L9749]              assume DType[msgsender_MSG] != ERC20Pausable;
[L9750]              assume DType[msgsender_MSG] != ERC20Detailed;
[L9751]              assume DType[msgsender_MSG] != MinterRole;
[L9752]              assume DType[msgsender_MSG] != ERC20Mintable;
[L9753]              assume DType[msgsender_MSG] != ERC20Burnable;
[L9754]              assume DType[msgsender_MSG] != OMToken;
[L9755]              Alloc[msgsender_MSG] := true;
[L9756]  COND TRUE   choice == 23
[L9757]              gas := gas - 21000;
[L9758]  COND FALSE  !(gas >= 0)
[L9923]  RET         call CorralChoice_OMToken(this);

[2020-11-25 02:29:17,923 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 02:29:17,923 INFO  L82        PathProgramCache]: Analyzing trace with hash -1680354039, now seen corresponding path program 1 times
[2020-11-25 02:29:17,924 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 02:29:17,936 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 02:29:18,100 INFO  L134       CoverageAnalysis]: Checked inductivity of 1014 backedges. 25 proven. 0 refuted. 0 times theorem prover too weak. 989 trivial. 0 not checked.
[2020-11-25 02:29:18,100 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 02:29:18,100 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [9] imperfect sequences [] total 9
[2020-11-25 02:29:18,100 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 02:29:18,100 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 9 interpolants.
[2020-11-25 02:29:18,100 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=15, Invalid=57, Unknown=0, NotChecked=0, Total=72
[2020-11-25 02:29:18,101 INFO  L87              Difference]: Start difference. First operand 8141 states and 9464 transitions. cyclomatic complexity: 1327 Second operand 9 states.
[2020-11-25 02:29:18,252 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 02:29:18,252 INFO  L93              Difference]: Finished difference Result 8171 states and 9499 transitions.
[2020-11-25 02:29:18,252 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 9 states. 
[2020-11-25 02:29:18,252 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 8171 states and 9499 transitions.
[2020-11-25 02:29:18,266 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 10
[2020-11-25 02:29:18,280 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 8171 states to 8117 states and 9435 transitions.
[2020-11-25 02:29:18,280 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1858
[2020-11-25 02:29:18,280 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1858
[2020-11-25 02:29:18,281 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 8117 states and 9435 transitions.
[2020-11-25 02:29:18,285 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 02:29:18,285 INFO  L728         BuchiCegarLoop]: Abstraction has 8117 states and 9435 transitions.
[2020-11-25 02:29:18,288 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 8117 states and 9435 transitions.
[2020-11-25 02:29:18,321 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 8117 to 8117.
[2020-11-25 02:29:18,321 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 8117 states.
[2020-11-25 02:29:18,329 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 8117 states to 8117 states and 9435 transitions.
[2020-11-25 02:29:18,330 INFO  L751         BuchiCegarLoop]: Abstraction has 8117 states and 9435 transitions.
[2020-11-25 02:29:18,330 INFO  L631         BuchiCegarLoop]: Abstraction has 8117 states and 9435 transitions.
[2020-11-25 02:29:18,330 INFO  L445         BuchiCegarLoop]: ======== Iteration 17============
[2020-11-25 02:29:18,330 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 8117 states and 9435 transitions.
[2020-11-25 02:29:18,337 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 10
[2020-11-25 02:29:18,337 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 02:29:18,338 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 02:29:18,339 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [9, 9, 9, 9, 9, 9, 9, 9, 9, 7, 7, 7, 7, 7, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 02:29:18,339 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_allowance_ERC200 := false;
[L2]                 call_allowance_ERC200 := false;
[L2]     CALL        call main();
[L9913]              assume null == 0;
[L9914]  CALL        call this := FreshRefGenerator__success();
[L3962]              havoc newRef;
[L3963]              assume Alloc[newRef] == false;
[L3964]              Alloc[newRef] := true;
[L3965]              assume newRef != null;
[L9914]  RET         call this := FreshRefGenerator__success();
[L9915]              assume now >= 0;
[L9916]              assume DType[this] == OMToken;
[L9917]              assume msgvalue_MSG == 0;
[L9918]              gas := gas - 53000;
[L9919]  CALL        call OMToken_OMToken(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L2714]              havoc __exception;
[L2715]              revert := false;
[L2716]  COND FALSE  !(__exception)
[L2743]  CALL        call OMToken_OMToken__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L6180]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4004]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3989]              assume msgsender_MSG != null;
[L3990]              Balance[this] := 0;
[L4004]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  COND FALSE  !(revert)
[L6180]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6181]  COND FALSE  !(revert)
[L6184]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4206]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4004]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3989]              assume msgsender_MSG != null;
[L3990]              Balance[this] := 0;
[L4004]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  COND FALSE  !(revert)
[L4206]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4207]  COND FALSE  !(revert)
[L4210]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4182]              assume msgsender_MSG != null;
[L4183]              Balance[this] := 0;
[L4184]              _balances_ERC20[this] := zeroRefintArr();
[L4185]              sum__balances0[this] := 0;
[L4186]              _allowed_ERC20[this] := zeroRefRefintArr();
[L4187]              sum__allowed1[this] := 0;
[L4188]              _totalSupply_ERC20[this] := 0;
[L4210]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4211]  COND FALSE  !(revert)
[L6184]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6185]  COND FALSE  !(revert)
[L6188]  CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4974]  CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4928]              assume msgsender_MSG != null;
[L4929]              Balance[this] := 0;
[L4931]  CALL        call __var_22 := FreshRefGenerator__success();
[L3962]              havoc newRef;
[L3963]              assume Alloc[newRef] == false;
[L3964]              Alloc[newRef] := true;
[L3965]              assume newRef != null;
[L4931]  RET         call __var_22 := FreshRefGenerator__success();
[L4932]  COND FALSE  !(revert)
[L4935]              _pausers_PauserRole[this] := __var_22;
[L4937]  COND TRUE   DType[this] == OMToken
[L4938]  CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5128]  CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L4806]              __var_17 := null;
[L4807]  COND FALSE  !(!(account_s659 != null))
[L4811]  CALL        call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4877]              __var_21 := null;
[L4878]  COND FALSE  !(!(account_s713 != null))
[L4882]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s713]][account_s713];
[L4811]  RET         call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4812]  COND FALSE  !(revert)
[L4815]  COND FALSE  !(!!__var_18)
[L4819]              M_Ref_bool[bearer_Roles.Role[role_s659]][account_s659] := true;
[L5128]  RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L5129]  COND FALSE  !(revert)
[L5132]              assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L4938]  RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L4939]  COND FALSE  !(revert)
[L4974]  RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4975]  COND FALSE  !(revert)
[L6188]  RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6189]  COND FALSE  !(revert)
[L6192]  CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L5186]  CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4974]  CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4928]              assume msgsender_MSG != null;
[L4929]              Balance[this] := 0;
[L4931]  CALL        call __var_22 := FreshRefGenerator__success();
[L3962]              havoc newRef;
[L3963]              assume Alloc[newRef] == false;
[L3964]              Alloc[newRef] := true;
[L3965]              assume newRef != null;
[L4931]  RET         call __var_22 := FreshRefGenerator__success();
[L4932]  COND FALSE  !(revert)
[L4935]              _pausers_PauserRole[this] := __var_22;
[L4937]  COND TRUE   DType[this] == OMToken
[L4938]  CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5128]  CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L4806]              __var_17 := null;
[L4807]  COND FALSE  !(!(account_s659 != null))
[L4811]  CALL        call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4877]              __var_21 := null;
[L4878]  COND FALSE  !(!(account_s713 != null))
[L4882]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s713]][account_s713];
[L4811]  RET         call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4812]  COND FALSE  !(revert)
[L4815]  COND FALSE  !(!!__var_18)
[L4819]              M_Ref_bool[bearer_Roles.Role[role_s659]][account_s659] := true;
[L5128]  RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L5129]  COND FALSE  !(revert)
[L5132]              assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L4938]  RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L4939]  COND FALSE  !(revert)
[L4974]  RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4975]  COND FALSE  !(revert)
[L5186]  RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5187]  COND FALSE  !(revert)
[L5190]  CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5165]              assume msgsender_MSG != null;
[L5166]              Balance[this] := 0;
[L5167]              _paused_Pausable[this] := false;
[L5169]              _paused_Pausable[this] := false;
[L5190]  RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5191]  COND FALSE  !(revert)
[L6192]  RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6193]  COND FALSE  !(revert)
[L6196]  CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L5304]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4004]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3989]              assume msgsender_MSG != null;
[L3990]              Balance[this] := 0;
[L4004]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  COND FALSE  !(revert)
[L5304]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5305]  COND FALSE  !(revert)
[L5308]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4206]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4004]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3989]              assume msgsender_MSG != null;
[L3990]              Balance[this] := 0;
[L4004]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  COND FALSE  !(revert)
[L4206]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4207]  COND FALSE  !(revert)
[L4210]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4182]              assume msgsender_MSG != null;
[L4183]              Balance[this] := 0;
[L4184]              _balances_ERC20[this] := zeroRefintArr();
[L4185]              sum__balances0[this] := 0;
[L4186]              _allowed_ERC20[this] := zeroRefRefintArr();
[L4187]              sum__allowed1[this] := 0;
[L4188]              _totalSupply_ERC20[this] := 0;
[L4210]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4211]  COND FALSE  !(revert)
[L5308]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5309]  COND FALSE  !(revert)
[L5312]  CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4974]  CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4928]              assume msgsender_MSG != null;
[L4929]              Balance[this] := 0;
[L4931]  CALL        call __var_22 := FreshRefGenerator__success();
[L3962]              havoc newRef;
[L3963]              assume Alloc[newRef] == false;
[L3964]              Alloc[newRef] := true;
[L3965]              assume newRef != null;
[L4931]  RET         call __var_22 := FreshRefGenerator__success();
[L4932]  COND FALSE  !(revert)
[L4935]              _pausers_PauserRole[this] := __var_22;
[L4937]  COND TRUE   DType[this] == OMToken
[L4938]  CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5128]  CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L4806]              __var_17 := null;
[L4807]  COND FALSE  !(!(account_s659 != null))
[L4811]  CALL        call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4877]              __var_21 := null;
[L4878]  COND FALSE  !(!(account_s713 != null))
[L4882]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s713]][account_s713];
[L4811]  RET         call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4812]  COND FALSE  !(revert)
[L4815]  COND FALSE  !(!!__var_18)
[L4819]              M_Ref_bool[bearer_Roles.Role[role_s659]][account_s659] := true;
[L5128]  RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L5129]  COND FALSE  !(revert)
[L5132]              assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L4938]  RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L4939]  COND FALSE  !(revert)
[L4974]  RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4975]  COND FALSE  !(revert)
[L5312]  RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5313]  COND FALSE  !(revert)
[L5316]  CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L5186]  CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4974]  CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4928]              assume msgsender_MSG != null;
[L4929]              Balance[this] := 0;
[L4931]  CALL        call __var_22 := FreshRefGenerator__success();
[L3962]              havoc newRef;
[L3963]              assume Alloc[newRef] == false;
[L3964]              Alloc[newRef] := true;
[L3965]              assume newRef != null;
[L4931]  RET         call __var_22 := FreshRefGenerator__success();
[L4932]  COND FALSE  !(revert)
[L4935]              _pausers_PauserRole[this] := __var_22;
[L4937]  COND TRUE   DType[this] == OMToken
[L4938]  CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5128]  CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L4806]              __var_17 := null;
[L4807]  COND FALSE  !(!(account_s659 != null))
[L4811]  CALL        call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4877]              __var_21 := null;
[L4878]  COND FALSE  !(!(account_s713 != null))
[L4882]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s713]][account_s713];
[L4811]  RET         call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4812]  COND FALSE  !(revert)
[L4815]  COND FALSE  !(!!__var_18)
[L4819]              M_Ref_bool[bearer_Roles.Role[role_s659]][account_s659] := true;
[L5128]  RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L5129]  COND FALSE  !(revert)
[L5132]              assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L4938]  RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L4939]  COND FALSE  !(revert)
[L4974]  RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4975]  COND FALSE  !(revert)
[L5186]  RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5187]  COND FALSE  !(revert)
[L5190]  CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5165]              assume msgsender_MSG != null;
[L5166]              Balance[this] := 0;
[L5167]              _paused_Pausable[this] := false;
[L5169]              _paused_Pausable[this] := false;
[L5190]  RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5191]  COND FALSE  !(revert)
[L5316]  RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L5317]  COND FALSE  !(revert)
[L5320]  CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5273]              assume msgsender_MSG != null;
[L5274]              Balance[this] := 0;
[L5320]  RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5321]  COND FALSE  !(revert)
[L6196]  RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6197]  COND FALSE  !(revert)
[L6200]  CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L5618]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4004]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3989]              assume msgsender_MSG != null;
[L3990]              Balance[this] := 0;
[L4004]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  COND FALSE  !(revert)
[L5618]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5619]  COND FALSE  !(revert)
[L5622]  CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1022, symbol_s1022, decimals_s1022);
[L5593]              assume msgsender_MSG != null;
[L5594]              Balance[this] := 0;
[L5595]              _name_ERC20Detailed[this] := -1676908070;
[L5596]              _symbol_ERC20Detailed[this] := -1676908070;
[L5597]              _decimals_ERC20Detailed[this] := 0;
[L5599]              _name_ERC20Detailed[this] := name_s1022;
[L5600]              _symbol_ERC20Detailed[this] := symbol_s1022;
[L5601]              _decimals_ERC20Detailed[this] := decimals_s1022;
[L5622]  RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1022, symbol_s1022, decimals_s1022);
[L5623]  COND FALSE  !(revert)
[L6200]  RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L6201]  COND FALSE  !(revert)
[L6204]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5742]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5701]              assume msgsender_MSG != null;
[L5702]              Balance[this] := 0;
[L5704]  CALL        call __var_35 := FreshRefGenerator__success();
[L3962]              havoc newRef;
[L3963]              assume Alloc[newRef] == false;
[L3964]              Alloc[newRef] := true;
[L3965]              assume newRef != null;
[L5704]  RET         call __var_35 := FreshRefGenerator__success();
[L5705]  COND FALSE  !(revert)
[L5708]              _minters_MinterRole[this] := __var_35;
[L5710]  COND TRUE   DType[this] == OMToken
[L5711]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5876]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1130);
[L4806]              __var_17 := null;
[L4807]  COND FALSE  !(!(account_s659 != null))
[L4811]  CALL        call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4877]              __var_21 := null;
[L4878]  COND FALSE  !(!(account_s713 != null))
[L4882]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s713]][account_s713];
[L4811]  RET         call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4812]  COND FALSE  !(revert)
[L4815]  COND FALSE  !(!!__var_18)
[L4819]              M_Ref_bool[bearer_Roles.Role[role_s659]][account_s659] := true;
[L5876]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1130);
[L5877]  COND FALSE  !(revert)
[L5880]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L5711]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5712]  COND FALSE  !(revert)
[L5742]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5743]  COND FALSE  !(revert)
[L6204]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6205]  COND FALSE  !(revert)
[L6208]  CALL        call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L5938]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4004]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3989]              assume msgsender_MSG != null;
[L3990]              Balance[this] := 0;
[L4004]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  COND FALSE  !(revert)
[L5938]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5939]  COND FALSE  !(revert)
[L5942]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4206]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4004]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3989]              assume msgsender_MSG != null;
[L3990]              Balance[this] := 0;
[L4004]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  COND FALSE  !(revert)
[L4206]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4207]  COND FALSE  !(revert)
[L4210]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4182]              assume msgsender_MSG != null;
[L4183]              Balance[this] := 0;
[L4184]              _balances_ERC20[this] := zeroRefintArr();
[L4185]              sum__balances0[this] := 0;
[L4186]              _allowed_ERC20[this] := zeroRefRefintArr();
[L4187]              sum__allowed1[this] := 0;
[L4188]              _totalSupply_ERC20[this] := 0;
[L4210]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4211]  COND FALSE  !(revert)
[L5942]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5943]  COND FALSE  !(revert)
[L5946]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5742]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5701]              assume msgsender_MSG != null;
[L5702]              Balance[this] := 0;
[L5704]  CALL        call __var_35 := FreshRefGenerator__success();
[L3962]              havoc newRef;
[L3963]              assume Alloc[newRef] == false;
[L3964]              Alloc[newRef] := true;
[L3965]              assume newRef != null;
[L5704]  RET         call __var_35 := FreshRefGenerator__success();
[L5705]  COND FALSE  !(revert)
[L5708]              _minters_MinterRole[this] := __var_35;
[L5710]  COND FALSE  !(DType[this] == OMToken)
[L5715]  COND TRUE   DType[this] == ERC20Mintable
[L5716]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5876]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1130);
[L4806]              __var_17 := null;
[L4807]  COND FALSE  !(!(account_s659 != null))
[L4811]  CALL        call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4877]              __var_21 := null;
[L4878]  COND FALSE  !(!(account_s713 != null))
[L4882]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s713]][account_s713];
[L4811]  RET         call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4812]  COND FALSE  !(revert)
[L4815]  COND FALSE  !(!!__var_18)
[L4819]              M_Ref_bool[bearer_Roles.Role[role_s659]][account_s659] := true;
[L5876]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1130);
[L5877]  COND FALSE  !(revert)
[L5880]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L5716]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5717]  COND FALSE  !(revert)
[L5742]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5743]  COND FALSE  !(revert)
[L5946]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5947]  COND FALSE  !(revert)
[L5950]  CALL        call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5911]              assume msgsender_MSG != null;
[L5912]              Balance[this] := 0;
[L5950]  RET         call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5951]  COND FALSE  !(revert)
[L6208]  RET         call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L6209]  COND FALSE  !(revert)
[L6212]  CALL        call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6036]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4004]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3989]              assume msgsender_MSG != null;
[L3990]              Balance[this] := 0;
[L4004]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  COND FALSE  !(revert)
[L6036]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6037]  COND FALSE  !(revert)
[L6040]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4206]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4004]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3989]              assume msgsender_MSG != null;
[L3990]              Balance[this] := 0;
[L4004]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  COND FALSE  !(revert)
[L4206]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4207]  COND FALSE  !(revert)
[L4210]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4182]              assume msgsender_MSG != null;
[L4183]              Balance[this] := 0;
[L4184]              _balances_ERC20[this] := zeroRefintArr();
[L4185]              sum__balances0[this] := 0;
[L4186]              _allowed_ERC20[this] := zeroRefRefintArr();
[L4187]              sum__allowed1[this] := 0;
[L4188]              _totalSupply_ERC20[this] := 0;
[L4210]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4211]  COND FALSE  !(revert)
[L6040]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6041]  COND FALSE  !(revert)
[L6044]  CALL        call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6013]              assume msgsender_MSG != null;
[L6014]              Balance[this] := 0;
[L6044]  RET         call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6045]  COND FALSE  !(revert)
[L6212]  RET         call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6213]  COND FALSE  !(revert)
[L6216]  CALL        call OMToken_OMToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L6129]              assume msgsender_MSG != null;
[L6130]              Balance[this] := 0;
[L6216]  RET         call OMToken_OMToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L6217]  COND FALSE  !(revert)
[L2743]  RET         call OMToken_OMToken__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L2744]              assume !revert && gas >= 0;
[L9919]  RET         call OMToken_OMToken(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L9920]              assume !revert && gas >= 0;
[L9923]  CALL        call CorralChoice_OMToken(this);
[L9689]              havoc msgsender_MSG;
[L9690]              havoc msgvalue_MSG;
[L9691]              havoc choice;
[L9692]              havoc to_s916;
[L9693]              havoc value_s916;
[L9694]              havoc __ret_0_transfer;
[L9695]              havoc spender_s955;
[L9696]              havoc value_s955;
[L9697]              havoc __ret_0_approve;
[L9698]              havoc from_s937;
[L9699]              havoc to_s937;
[L9700]              havoc value_s937;
[L9701]              havoc __ret_0_transferFrom;
[L9702]              havoc __ret_0_totalSupply;
[L9703]              havoc owner_s231;
[L9704]              havoc __ret_0_balanceOf;
[L9705]              havoc owner_s247;
[L9706]              havoc spender_s247;
[L9707]              havoc __ret_0_allowance;
[L9708]              havoc spender_s973;
[L9709]              havoc addedValue_s973;
[L9710]              havoc success_s973;
[L9711]              havoc spender_s991;
[L9712]              havoc subtractedValue_s991;
[L9713]              havoc success_s991;
[L9714]              havoc account_s760;
[L9715]              havoc __ret_0_isPauser;
[L9716]              havoc account_s772;
[L9717]              havoc __ret_0_paused;
[L9718]              havoc name_s1022;
[L9719]              havoc symbol_s1022;
[L9720]              havoc decimals_s1022;
[L9721]              havoc __ret_0_name;
[L9722]              havoc __ret_0_symbol;
[L9723]              havoc __ret_0_decimals;
[L9724]              havoc account_s1093;
[L9725]              havoc __ret_0_isMinter;
[L9726]              havoc account_s1105;
[L9727]              havoc to_s1170;
[L9728]              havoc value_s1170;
[L9729]              havoc __ret_0_mint;
[L9730]              havoc value_s1185;
[L9731]              havoc from_s1198;
[L9732]              havoc value_s1198;
[L9733]              havoc name_s1230;
[L9734]              havoc symbol_s1230;
[L9735]              havoc decimals_s1230;
[L9736]              havoc tmpNow;
[L9737]              havoc gas;
[L9738]              assume gas > 4000000 && gas <= 8000000;
[L9739]              tmpNow := now;
[L9740]              havoc now;
[L9741]              assume now > tmpNow;
[L9742]              assume msgsender_MSG != null;
[L9743]              assume DType[msgsender_MSG] != IERC20;
[L9744]              assume DType[msgsender_MSG] != SafeMath;
[L9745]              assume DType[msgsender_MSG] != ERC20;
[L9746]              assume DType[msgsender_MSG] != Roles;
[L9747]              assume DType[msgsender_MSG] != PauserRole;
[L9748]              assume DType[msgsender_MSG] != Pausable;
[L9749]              assume DType[msgsender_MSG] != ERC20Pausable;
[L9750]              assume DType[msgsender_MSG] != ERC20Detailed;
[L9751]              assume DType[msgsender_MSG] != MinterRole;
[L9752]              assume DType[msgsender_MSG] != ERC20Mintable;
[L9753]              assume DType[msgsender_MSG] != ERC20Burnable;
[L9754]              assume DType[msgsender_MSG] != OMToken;
[L9755]              Alloc[msgsender_MSG] := true;
[L9756]  COND FALSE  !(choice == 23)
[L9763]  COND FALSE  !(choice == 22)
[L9770]  COND FALSE  !(choice == 21)
[L9777]  COND FALSE  !(choice == 20)
[L9783]  COND FALSE  !(choice == 19)
[L9789]  COND TRUE   choice == 18
[L9790]              gas := gas - 21000;
[L9791]  COND TRUE   gas >= 0
[L9792]              assume msgvalue_MSG == 0;
[L9793]  CALL        call __ret_0_allowance := allowance~address~address_ERC20(this, msgsender_MSG, msgvalue_MSG, owner_s247, spender_s247);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume _allowed_ERC20[this][owner_s247][spender_s247] >= 0 && _allowed_ERC20[this][owner_s247][spender_s247] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_allowance_ERC200 := true;
[L2]                 call_allowance_ERC200 := false;
[L2]                 revert := revert_hold;
[L430]               havoc __exception;
[L431]               revert := false;
[L432]   COND FALSE  !(__exception)
[L459]   CALL        call __ret_0_ := allowance~address~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, owner_s247, spender_s247);
[L4248]              __ret_0_ := _allowed_ERC20[this][owner_s247][spender_s247];
[L459]   RET         call __ret_0_ := allowance~address~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, owner_s247, spender_s247);
[L460]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((((__ret_0_ == _allowed_ERC20[this][owner_s247][spender_s247] && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowed_ERC20[this] == old(_allowed_ERC20[this])) && _minters_MinterRole[this] == old(_minters_MinterRole[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this])) && _paused_Pausable[this] == old(_paused_Pausable[this])) && _pausers_PauserRole[this] == old(_pausers_PauserRole[this]));
[L2]                 revert := revert_hold;
[L9793]  RET         call __ret_0_allowance := allowance~address~address_ERC20(this, msgsender_MSG, msgvalue_MSG, owner_s247, spender_s247);
[L9923]  RET         call CorralChoice_OMToken(this);

Loop:
[L9923]  CALL        call CorralChoice_OMToken(this);
[L9689]              havoc msgsender_MSG;
[L9690]              havoc msgvalue_MSG;
[L9691]              havoc choice;
[L9692]              havoc to_s916;
[L9693]              havoc value_s916;
[L9694]              havoc __ret_0_transfer;
[L9695]              havoc spender_s955;
[L9696]              havoc value_s955;
[L9697]              havoc __ret_0_approve;
[L9698]              havoc from_s937;
[L9699]              havoc to_s937;
[L9700]              havoc value_s937;
[L9701]              havoc __ret_0_transferFrom;
[L9702]              havoc __ret_0_totalSupply;
[L9703]              havoc owner_s231;
[L9704]              havoc __ret_0_balanceOf;
[L9705]              havoc owner_s247;
[L9706]              havoc spender_s247;
[L9707]              havoc __ret_0_allowance;
[L9708]              havoc spender_s973;
[L9709]              havoc addedValue_s973;
[L9710]              havoc success_s973;
[L9711]              havoc spender_s991;
[L9712]              havoc subtractedValue_s991;
[L9713]              havoc success_s991;
[L9714]              havoc account_s760;
[L9715]              havoc __ret_0_isPauser;
[L9716]              havoc account_s772;
[L9717]              havoc __ret_0_paused;
[L9718]              havoc name_s1022;
[L9719]              havoc symbol_s1022;
[L9720]              havoc decimals_s1022;
[L9721]              havoc __ret_0_name;
[L9722]              havoc __ret_0_symbol;
[L9723]              havoc __ret_0_decimals;
[L9724]              havoc account_s1093;
[L9725]              havoc __ret_0_isMinter;
[L9726]              havoc account_s1105;
[L9727]              havoc to_s1170;
[L9728]              havoc value_s1170;
[L9729]              havoc __ret_0_mint;
[L9730]              havoc value_s1185;
[L9731]              havoc from_s1198;
[L9732]              havoc value_s1198;
[L9733]              havoc name_s1230;
[L9734]              havoc symbol_s1230;
[L9735]              havoc decimals_s1230;
[L9736]              havoc tmpNow;
[L9737]              havoc gas;
[L9738]              assume gas > 4000000 && gas <= 8000000;
[L9739]              tmpNow := now;
[L9740]              havoc now;
[L9741]              assume now > tmpNow;
[L9742]              assume msgsender_MSG != null;
[L9743]              assume DType[msgsender_MSG] != IERC20;
[L9744]              assume DType[msgsender_MSG] != SafeMath;
[L9745]              assume DType[msgsender_MSG] != ERC20;
[L9746]              assume DType[msgsender_MSG] != Roles;
[L9747]              assume DType[msgsender_MSG] != PauserRole;
[L9748]              assume DType[msgsender_MSG] != Pausable;
[L9749]              assume DType[msgsender_MSG] != ERC20Pausable;
[L9750]              assume DType[msgsender_MSG] != ERC20Detailed;
[L9751]              assume DType[msgsender_MSG] != MinterRole;
[L9752]              assume DType[msgsender_MSG] != ERC20Mintable;
[L9753]              assume DType[msgsender_MSG] != ERC20Burnable;
[L9754]              assume DType[msgsender_MSG] != OMToken;
[L9755]              Alloc[msgsender_MSG] := true;
[L9756]  COND TRUE   choice == 23
[L9757]              gas := gas - 21000;
[L9758]  COND FALSE  !(gas >= 0)
[L9923]  RET         call CorralChoice_OMToken(this);

[2020-11-25 02:29:18,342 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 02:29:18,343 INFO  L82        PathProgramCache]: Analyzing trace with hash -2047712087, now seen corresponding path program 1 times
[2020-11-25 02:29:18,343 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 02:29:18,359 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 02:29:18,500 INFO  L134       CoverageAnalysis]: Checked inductivity of 1026 backedges. 6 proven. 0 refuted. 0 times theorem prover too weak. 1020 trivial. 0 not checked.
[2020-11-25 02:29:18,500 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 02:29:18,500 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [8] imperfect sequences [] total 8
[2020-11-25 02:29:18,500 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 02:29:18,500 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 8 interpolants.
[2020-11-25 02:29:18,500 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=13, Invalid=43, Unknown=0, NotChecked=0, Total=56
[2020-11-25 02:29:18,501 INFO  L87              Difference]: Start difference. First operand 8117 states and 9435 transitions. cyclomatic complexity: 1322 Second operand 8 states.
[2020-11-25 02:29:18,628 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 02:29:18,628 INFO  L93              Difference]: Finished difference Result 8138 states and 9458 transitions.
[2020-11-25 02:29:18,628 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 8 states. 
[2020-11-25 02:29:18,628 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 8138 states and 9458 transitions.
[2020-11-25 02:29:18,642 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 10
[2020-11-25 02:29:18,656 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 8138 states to 8101 states and 9415 transitions.
[2020-11-25 02:29:18,656 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1858
[2020-11-25 02:29:18,657 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1858
[2020-11-25 02:29:18,657 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 8101 states and 9415 transitions.
[2020-11-25 02:29:18,661 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 02:29:18,661 INFO  L728         BuchiCegarLoop]: Abstraction has 8101 states and 9415 transitions.
[2020-11-25 02:29:18,665 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 8101 states and 9415 transitions.
[2020-11-25 02:29:18,698 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 8101 to 8101.
[2020-11-25 02:29:18,698 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 8101 states.
[2020-11-25 02:29:18,706 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 8101 states to 8101 states and 9415 transitions.
[2020-11-25 02:29:18,706 INFO  L751         BuchiCegarLoop]: Abstraction has 8101 states and 9415 transitions.
[2020-11-25 02:29:18,706 INFO  L631         BuchiCegarLoop]: Abstraction has 8101 states and 9415 transitions.
[2020-11-25 02:29:18,706 INFO  L445         BuchiCegarLoop]: ======== Iteration 18============
[2020-11-25 02:29:18,706 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 8101 states and 9415 transitions.
[2020-11-25 02:29:18,714 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 10
[2020-11-25 02:29:18,714 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 02:29:18,714 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 02:29:18,715 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [9, 9, 9, 9, 9, 9, 9, 9, 9, 7, 7, 7, 7, 7, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 02:29:18,715 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_allowance_ERC200 := false;
[L2]                 call_allowance_ERC200 := false;
[L2]     CALL        call main();
[L9913]              assume null == 0;
[L9914]  CALL        call this := FreshRefGenerator__success();
[L3962]              havoc newRef;
[L3963]              assume Alloc[newRef] == false;
[L3964]              Alloc[newRef] := true;
[L3965]              assume newRef != null;
[L9914]  RET         call this := FreshRefGenerator__success();
[L9915]              assume now >= 0;
[L9916]              assume DType[this] == OMToken;
[L9917]              assume msgvalue_MSG == 0;
[L9918]              gas := gas - 53000;
[L9919]  CALL        call OMToken_OMToken(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L2714]              havoc __exception;
[L2715]              revert := false;
[L2716]  COND FALSE  !(__exception)
[L2743]  CALL        call OMToken_OMToken__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L6180]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4004]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3989]              assume msgsender_MSG != null;
[L3990]              Balance[this] := 0;
[L4004]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  COND FALSE  !(revert)
[L6180]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6181]  COND FALSE  !(revert)
[L6184]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4206]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4004]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3989]              assume msgsender_MSG != null;
[L3990]              Balance[this] := 0;
[L4004]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  COND FALSE  !(revert)
[L4206]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4207]  COND FALSE  !(revert)
[L4210]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4182]              assume msgsender_MSG != null;
[L4183]              Balance[this] := 0;
[L4184]              _balances_ERC20[this] := zeroRefintArr();
[L4185]              sum__balances0[this] := 0;
[L4186]              _allowed_ERC20[this] := zeroRefRefintArr();
[L4187]              sum__allowed1[this] := 0;
[L4188]              _totalSupply_ERC20[this] := 0;
[L4210]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4211]  COND FALSE  !(revert)
[L6184]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6185]  COND FALSE  !(revert)
[L6188]  CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4974]  CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4928]              assume msgsender_MSG != null;
[L4929]              Balance[this] := 0;
[L4931]  CALL        call __var_22 := FreshRefGenerator__success();
[L3962]              havoc newRef;
[L3963]              assume Alloc[newRef] == false;
[L3964]              Alloc[newRef] := true;
[L3965]              assume newRef != null;
[L4931]  RET         call __var_22 := FreshRefGenerator__success();
[L4932]  COND FALSE  !(revert)
[L4935]              _pausers_PauserRole[this] := __var_22;
[L4937]  COND TRUE   DType[this] == OMToken
[L4938]  CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5128]  CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L4806]              __var_17 := null;
[L4807]  COND FALSE  !(!(account_s659 != null))
[L4811]  CALL        call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4877]              __var_21 := null;
[L4878]  COND FALSE  !(!(account_s713 != null))
[L4882]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s713]][account_s713];
[L4811]  RET         call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4812]  COND FALSE  !(revert)
[L4815]  COND FALSE  !(!!__var_18)
[L4819]              M_Ref_bool[bearer_Roles.Role[role_s659]][account_s659] := true;
[L5128]  RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L5129]  COND FALSE  !(revert)
[L5132]              assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L4938]  RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L4939]  COND FALSE  !(revert)
[L4974]  RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4975]  COND FALSE  !(revert)
[L6188]  RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6189]  COND FALSE  !(revert)
[L6192]  CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L5186]  CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4974]  CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4928]              assume msgsender_MSG != null;
[L4929]              Balance[this] := 0;
[L4931]  CALL        call __var_22 := FreshRefGenerator__success();
[L3962]              havoc newRef;
[L3963]              assume Alloc[newRef] == false;
[L3964]              Alloc[newRef] := true;
[L3965]              assume newRef != null;
[L4931]  RET         call __var_22 := FreshRefGenerator__success();
[L4932]  COND FALSE  !(revert)
[L4935]              _pausers_PauserRole[this] := __var_22;
[L4937]  COND TRUE   DType[this] == OMToken
[L4938]  CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5128]  CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L4806]              __var_17 := null;
[L4807]  COND FALSE  !(!(account_s659 != null))
[L4811]  CALL        call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4877]              __var_21 := null;
[L4878]  COND FALSE  !(!(account_s713 != null))
[L4882]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s713]][account_s713];
[L4811]  RET         call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4812]  COND FALSE  !(revert)
[L4815]  COND FALSE  !(!!__var_18)
[L4819]              M_Ref_bool[bearer_Roles.Role[role_s659]][account_s659] := true;
[L5128]  RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L5129]  COND FALSE  !(revert)
[L5132]              assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L4938]  RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L4939]  COND FALSE  !(revert)
[L4974]  RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4975]  COND FALSE  !(revert)
[L5186]  RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5187]  COND FALSE  !(revert)
[L5190]  CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5165]              assume msgsender_MSG != null;
[L5166]              Balance[this] := 0;
[L5167]              _paused_Pausable[this] := false;
[L5169]              _paused_Pausable[this] := false;
[L5190]  RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5191]  COND FALSE  !(revert)
[L6192]  RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6193]  COND FALSE  !(revert)
[L6196]  CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L5304]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4004]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3989]              assume msgsender_MSG != null;
[L3990]              Balance[this] := 0;
[L4004]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  COND FALSE  !(revert)
[L5304]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5305]  COND FALSE  !(revert)
[L5308]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4206]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4004]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3989]              assume msgsender_MSG != null;
[L3990]              Balance[this] := 0;
[L4004]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  COND FALSE  !(revert)
[L4206]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4207]  COND FALSE  !(revert)
[L4210]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4182]              assume msgsender_MSG != null;
[L4183]              Balance[this] := 0;
[L4184]              _balances_ERC20[this] := zeroRefintArr();
[L4185]              sum__balances0[this] := 0;
[L4186]              _allowed_ERC20[this] := zeroRefRefintArr();
[L4187]              sum__allowed1[this] := 0;
[L4188]              _totalSupply_ERC20[this] := 0;
[L4210]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4211]  COND FALSE  !(revert)
[L5308]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5309]  COND FALSE  !(revert)
[L5312]  CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4974]  CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4928]              assume msgsender_MSG != null;
[L4929]              Balance[this] := 0;
[L4931]  CALL        call __var_22 := FreshRefGenerator__success();
[L3962]              havoc newRef;
[L3963]              assume Alloc[newRef] == false;
[L3964]              Alloc[newRef] := true;
[L3965]              assume newRef != null;
[L4931]  RET         call __var_22 := FreshRefGenerator__success();
[L4932]  COND FALSE  !(revert)
[L4935]              _pausers_PauserRole[this] := __var_22;
[L4937]  COND TRUE   DType[this] == OMToken
[L4938]  CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5128]  CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L4806]              __var_17 := null;
[L4807]  COND FALSE  !(!(account_s659 != null))
[L4811]  CALL        call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4877]              __var_21 := null;
[L4878]  COND FALSE  !(!(account_s713 != null))
[L4882]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s713]][account_s713];
[L4811]  RET         call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4812]  COND FALSE  !(revert)
[L4815]  COND FALSE  !(!!__var_18)
[L4819]              M_Ref_bool[bearer_Roles.Role[role_s659]][account_s659] := true;
[L5128]  RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L5129]  COND FALSE  !(revert)
[L5132]              assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L4938]  RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L4939]  COND FALSE  !(revert)
[L4974]  RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4975]  COND FALSE  !(revert)
[L5312]  RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5313]  COND FALSE  !(revert)
[L5316]  CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L5186]  CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4974]  CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4928]              assume msgsender_MSG != null;
[L4929]              Balance[this] := 0;
[L4931]  CALL        call __var_22 := FreshRefGenerator__success();
[L3962]              havoc newRef;
[L3963]              assume Alloc[newRef] == false;
[L3964]              Alloc[newRef] := true;
[L3965]              assume newRef != null;
[L4931]  RET         call __var_22 := FreshRefGenerator__success();
[L4932]  COND FALSE  !(revert)
[L4935]              _pausers_PauserRole[this] := __var_22;
[L4937]  COND TRUE   DType[this] == OMToken
[L4938]  CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5128]  CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L4806]              __var_17 := null;
[L4807]  COND FALSE  !(!(account_s659 != null))
[L4811]  CALL        call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4877]              __var_21 := null;
[L4878]  COND FALSE  !(!(account_s713 != null))
[L4882]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s713]][account_s713];
[L4811]  RET         call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4812]  COND FALSE  !(revert)
[L4815]  COND FALSE  !(!!__var_18)
[L4819]              M_Ref_bool[bearer_Roles.Role[role_s659]][account_s659] := true;
[L5128]  RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L5129]  COND FALSE  !(revert)
[L5132]              assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L4938]  RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L4939]  COND FALSE  !(revert)
[L4974]  RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4975]  COND FALSE  !(revert)
[L5186]  RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5187]  COND FALSE  !(revert)
[L5190]  CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5165]              assume msgsender_MSG != null;
[L5166]              Balance[this] := 0;
[L5167]              _paused_Pausable[this] := false;
[L5169]              _paused_Pausable[this] := false;
[L5190]  RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5191]  COND FALSE  !(revert)
[L5316]  RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L5317]  COND FALSE  !(revert)
[L5320]  CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5273]              assume msgsender_MSG != null;
[L5274]              Balance[this] := 0;
[L5320]  RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5321]  COND FALSE  !(revert)
[L6196]  RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6197]  COND FALSE  !(revert)
[L6200]  CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L5618]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4004]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3989]              assume msgsender_MSG != null;
[L3990]              Balance[this] := 0;
[L4004]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  COND FALSE  !(revert)
[L5618]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5619]  COND FALSE  !(revert)
[L5622]  CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1022, symbol_s1022, decimals_s1022);
[L5593]              assume msgsender_MSG != null;
[L5594]              Balance[this] := 0;
[L5595]              _name_ERC20Detailed[this] := -1676908070;
[L5596]              _symbol_ERC20Detailed[this] := -1676908070;
[L5597]              _decimals_ERC20Detailed[this] := 0;
[L5599]              _name_ERC20Detailed[this] := name_s1022;
[L5600]              _symbol_ERC20Detailed[this] := symbol_s1022;
[L5601]              _decimals_ERC20Detailed[this] := decimals_s1022;
[L5622]  RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1022, symbol_s1022, decimals_s1022);
[L5623]  COND FALSE  !(revert)
[L6200]  RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L6201]  COND FALSE  !(revert)
[L6204]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5742]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5701]              assume msgsender_MSG != null;
[L5702]              Balance[this] := 0;
[L5704]  CALL        call __var_35 := FreshRefGenerator__success();
[L3962]              havoc newRef;
[L3963]              assume Alloc[newRef] == false;
[L3964]              Alloc[newRef] := true;
[L3965]              assume newRef != null;
[L5704]  RET         call __var_35 := FreshRefGenerator__success();
[L5705]  COND FALSE  !(revert)
[L5708]              _minters_MinterRole[this] := __var_35;
[L5710]  COND TRUE   DType[this] == OMToken
[L5711]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5876]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1130);
[L4806]              __var_17 := null;
[L4807]  COND FALSE  !(!(account_s659 != null))
[L4811]  CALL        call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4877]              __var_21 := null;
[L4878]  COND FALSE  !(!(account_s713 != null))
[L4882]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s713]][account_s713];
[L4811]  RET         call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4812]  COND FALSE  !(revert)
[L4815]  COND FALSE  !(!!__var_18)
[L4819]              M_Ref_bool[bearer_Roles.Role[role_s659]][account_s659] := true;
[L5876]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1130);
[L5877]  COND FALSE  !(revert)
[L5880]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L5711]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5712]  COND FALSE  !(revert)
[L5742]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5743]  COND FALSE  !(revert)
[L6204]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6205]  COND FALSE  !(revert)
[L6208]  CALL        call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L5938]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4004]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3989]              assume msgsender_MSG != null;
[L3990]              Balance[this] := 0;
[L4004]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  COND FALSE  !(revert)
[L5938]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5939]  COND FALSE  !(revert)
[L5942]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4206]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4004]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3989]              assume msgsender_MSG != null;
[L3990]              Balance[this] := 0;
[L4004]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  COND FALSE  !(revert)
[L4206]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4207]  COND FALSE  !(revert)
[L4210]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4182]              assume msgsender_MSG != null;
[L4183]              Balance[this] := 0;
[L4184]              _balances_ERC20[this] := zeroRefintArr();
[L4185]              sum__balances0[this] := 0;
[L4186]              _allowed_ERC20[this] := zeroRefRefintArr();
[L4187]              sum__allowed1[this] := 0;
[L4188]              _totalSupply_ERC20[this] := 0;
[L4210]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4211]  COND FALSE  !(revert)
[L5942]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5943]  COND FALSE  !(revert)
[L5946]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5742]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5701]              assume msgsender_MSG != null;
[L5702]              Balance[this] := 0;
[L5704]  CALL        call __var_35 := FreshRefGenerator__success();
[L3962]              havoc newRef;
[L3963]              assume Alloc[newRef] == false;
[L3964]              Alloc[newRef] := true;
[L3965]              assume newRef != null;
[L5704]  RET         call __var_35 := FreshRefGenerator__success();
[L5705]  COND FALSE  !(revert)
[L5708]              _minters_MinterRole[this] := __var_35;
[L5710]  COND TRUE   DType[this] == OMToken
[L5711]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5876]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1130);
[L4806]              __var_17 := null;
[L4807]  COND FALSE  !(!(account_s659 != null))
[L4811]  CALL        call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4877]              __var_21 := null;
[L4878]  COND FALSE  !(!(account_s713 != null))
[L4882]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s713]][account_s713];
[L4811]  RET         call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4812]  COND FALSE  !(revert)
[L4815]  COND FALSE  !(!!__var_18)
[L4819]              M_Ref_bool[bearer_Roles.Role[role_s659]][account_s659] := true;
[L5876]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1130);
[L5877]  COND FALSE  !(revert)
[L5880]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L5711]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5712]  COND FALSE  !(revert)
[L5742]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5743]  COND FALSE  !(revert)
[L5946]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5947]  COND FALSE  !(revert)
[L5950]  CALL        call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5911]              assume msgsender_MSG != null;
[L5912]              Balance[this] := 0;
[L5950]  RET         call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5951]  COND FALSE  !(revert)
[L6208]  RET         call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L6209]  COND FALSE  !(revert)
[L6212]  CALL        call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6036]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4004]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3989]              assume msgsender_MSG != null;
[L3990]              Balance[this] := 0;
[L4004]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  COND FALSE  !(revert)
[L6036]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6037]  COND FALSE  !(revert)
[L6040]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4206]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4004]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3989]              assume msgsender_MSG != null;
[L3990]              Balance[this] := 0;
[L4004]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  COND FALSE  !(revert)
[L4206]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4207]  COND FALSE  !(revert)
[L4210]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4182]              assume msgsender_MSG != null;
[L4183]              Balance[this] := 0;
[L4184]              _balances_ERC20[this] := zeroRefintArr();
[L4185]              sum__balances0[this] := 0;
[L4186]              _allowed_ERC20[this] := zeroRefRefintArr();
[L4187]              sum__allowed1[this] := 0;
[L4188]              _totalSupply_ERC20[this] := 0;
[L4210]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4211]  COND FALSE  !(revert)
[L6040]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6041]  COND FALSE  !(revert)
[L6044]  CALL        call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6013]              assume msgsender_MSG != null;
[L6014]              Balance[this] := 0;
[L6044]  RET         call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6045]  COND FALSE  !(revert)
[L6212]  RET         call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6213]  COND FALSE  !(revert)
[L6216]  CALL        call OMToken_OMToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L6129]              assume msgsender_MSG != null;
[L6130]              Balance[this] := 0;
[L6216]  RET         call OMToken_OMToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L6217]  COND FALSE  !(revert)
[L2743]  RET         call OMToken_OMToken__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L2744]              assume !revert && gas >= 0;
[L9919]  RET         call OMToken_OMToken(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L9920]              assume !revert && gas >= 0;
[L9923]  CALL        call CorralChoice_OMToken(this);
[L9689]              havoc msgsender_MSG;
[L9690]              havoc msgvalue_MSG;
[L9691]              havoc choice;
[L9692]              havoc to_s916;
[L9693]              havoc value_s916;
[L9694]              havoc __ret_0_transfer;
[L9695]              havoc spender_s955;
[L9696]              havoc value_s955;
[L9697]              havoc __ret_0_approve;
[L9698]              havoc from_s937;
[L9699]              havoc to_s937;
[L9700]              havoc value_s937;
[L9701]              havoc __ret_0_transferFrom;
[L9702]              havoc __ret_0_totalSupply;
[L9703]              havoc owner_s231;
[L9704]              havoc __ret_0_balanceOf;
[L9705]              havoc owner_s247;
[L9706]              havoc spender_s247;
[L9707]              havoc __ret_0_allowance;
[L9708]              havoc spender_s973;
[L9709]              havoc addedValue_s973;
[L9710]              havoc success_s973;
[L9711]              havoc spender_s991;
[L9712]              havoc subtractedValue_s991;
[L9713]              havoc success_s991;
[L9714]              havoc account_s760;
[L9715]              havoc __ret_0_isPauser;
[L9716]              havoc account_s772;
[L9717]              havoc __ret_0_paused;
[L9718]              havoc name_s1022;
[L9719]              havoc symbol_s1022;
[L9720]              havoc decimals_s1022;
[L9721]              havoc __ret_0_name;
[L9722]              havoc __ret_0_symbol;
[L9723]              havoc __ret_0_decimals;
[L9724]              havoc account_s1093;
[L9725]              havoc __ret_0_isMinter;
[L9726]              havoc account_s1105;
[L9727]              havoc to_s1170;
[L9728]              havoc value_s1170;
[L9729]              havoc __ret_0_mint;
[L9730]              havoc value_s1185;
[L9731]              havoc from_s1198;
[L9732]              havoc value_s1198;
[L9733]              havoc name_s1230;
[L9734]              havoc symbol_s1230;
[L9735]              havoc decimals_s1230;
[L9736]              havoc tmpNow;
[L9737]              havoc gas;
[L9738]              assume gas > 4000000 && gas <= 8000000;
[L9739]              tmpNow := now;
[L9740]              havoc now;
[L9741]              assume now > tmpNow;
[L9742]              assume msgsender_MSG != null;
[L9743]              assume DType[msgsender_MSG] != IERC20;
[L9744]              assume DType[msgsender_MSG] != SafeMath;
[L9745]              assume DType[msgsender_MSG] != ERC20;
[L9746]              assume DType[msgsender_MSG] != Roles;
[L9747]              assume DType[msgsender_MSG] != PauserRole;
[L9748]              assume DType[msgsender_MSG] != Pausable;
[L9749]              assume DType[msgsender_MSG] != ERC20Pausable;
[L9750]              assume DType[msgsender_MSG] != ERC20Detailed;
[L9751]              assume DType[msgsender_MSG] != MinterRole;
[L9752]              assume DType[msgsender_MSG] != ERC20Mintable;
[L9753]              assume DType[msgsender_MSG] != ERC20Burnable;
[L9754]              assume DType[msgsender_MSG] != OMToken;
[L9755]              Alloc[msgsender_MSG] := true;
[L9756]  COND FALSE  !(choice == 23)
[L9763]  COND FALSE  !(choice == 22)
[L9770]  COND FALSE  !(choice == 21)
[L9777]  COND FALSE  !(choice == 20)
[L9783]  COND FALSE  !(choice == 19)
[L9789]  COND TRUE   choice == 18
[L9790]              gas := gas - 21000;
[L9791]  COND TRUE   gas >= 0
[L9792]              assume msgvalue_MSG == 0;
[L9793]  CALL        call __ret_0_allowance := allowance~address~address_ERC20(this, msgsender_MSG, msgvalue_MSG, owner_s247, spender_s247);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume _allowed_ERC20[this][owner_s247][spender_s247] >= 0 && _allowed_ERC20[this][owner_s247][spender_s247] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_allowance_ERC200 := true;
[L2]                 call_allowance_ERC200 := false;
[L2]                 revert := revert_hold;
[L430]               havoc __exception;
[L431]               revert := false;
[L432]   COND FALSE  !(__exception)
[L459]   CALL        call __ret_0_ := allowance~address~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, owner_s247, spender_s247);
[L4248]              __ret_0_ := _allowed_ERC20[this][owner_s247][spender_s247];
[L459]   RET         call __ret_0_ := allowance~address~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, owner_s247, spender_s247);
[L460]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((((__ret_0_ == _allowed_ERC20[this][owner_s247][spender_s247] && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowed_ERC20[this] == old(_allowed_ERC20[this])) && _minters_MinterRole[this] == old(_minters_MinterRole[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this])) && _paused_Pausable[this] == old(_paused_Pausable[this])) && _pausers_PauserRole[this] == old(_pausers_PauserRole[this]));
[L2]                 revert := revert_hold;
[L9793]  RET         call __ret_0_allowance := allowance~address~address_ERC20(this, msgsender_MSG, msgvalue_MSG, owner_s247, spender_s247);
[L9923]  RET         call CorralChoice_OMToken(this);

Loop:
[L9923]  CALL        call CorralChoice_OMToken(this);
[L9689]              havoc msgsender_MSG;
[L9690]              havoc msgvalue_MSG;
[L9691]              havoc choice;
[L9692]              havoc to_s916;
[L9693]              havoc value_s916;
[L9694]              havoc __ret_0_transfer;
[L9695]              havoc spender_s955;
[L9696]              havoc value_s955;
[L9697]              havoc __ret_0_approve;
[L9698]              havoc from_s937;
[L9699]              havoc to_s937;
[L9700]              havoc value_s937;
[L9701]              havoc __ret_0_transferFrom;
[L9702]              havoc __ret_0_totalSupply;
[L9703]              havoc owner_s231;
[L9704]              havoc __ret_0_balanceOf;
[L9705]              havoc owner_s247;
[L9706]              havoc spender_s247;
[L9707]              havoc __ret_0_allowance;
[L9708]              havoc spender_s973;
[L9709]              havoc addedValue_s973;
[L9710]              havoc success_s973;
[L9711]              havoc spender_s991;
[L9712]              havoc subtractedValue_s991;
[L9713]              havoc success_s991;
[L9714]              havoc account_s760;
[L9715]              havoc __ret_0_isPauser;
[L9716]              havoc account_s772;
[L9717]              havoc __ret_0_paused;
[L9718]              havoc name_s1022;
[L9719]              havoc symbol_s1022;
[L9720]              havoc decimals_s1022;
[L9721]              havoc __ret_0_name;
[L9722]              havoc __ret_0_symbol;
[L9723]              havoc __ret_0_decimals;
[L9724]              havoc account_s1093;
[L9725]              havoc __ret_0_isMinter;
[L9726]              havoc account_s1105;
[L9727]              havoc to_s1170;
[L9728]              havoc value_s1170;
[L9729]              havoc __ret_0_mint;
[L9730]              havoc value_s1185;
[L9731]              havoc from_s1198;
[L9732]              havoc value_s1198;
[L9733]              havoc name_s1230;
[L9734]              havoc symbol_s1230;
[L9735]              havoc decimals_s1230;
[L9736]              havoc tmpNow;
[L9737]              havoc gas;
[L9738]              assume gas > 4000000 && gas <= 8000000;
[L9739]              tmpNow := now;
[L9740]              havoc now;
[L9741]              assume now > tmpNow;
[L9742]              assume msgsender_MSG != null;
[L9743]              assume DType[msgsender_MSG] != IERC20;
[L9744]              assume DType[msgsender_MSG] != SafeMath;
[L9745]              assume DType[msgsender_MSG] != ERC20;
[L9746]              assume DType[msgsender_MSG] != Roles;
[L9747]              assume DType[msgsender_MSG] != PauserRole;
[L9748]              assume DType[msgsender_MSG] != Pausable;
[L9749]              assume DType[msgsender_MSG] != ERC20Pausable;
[L9750]              assume DType[msgsender_MSG] != ERC20Detailed;
[L9751]              assume DType[msgsender_MSG] != MinterRole;
[L9752]              assume DType[msgsender_MSG] != ERC20Mintable;
[L9753]              assume DType[msgsender_MSG] != ERC20Burnable;
[L9754]              assume DType[msgsender_MSG] != OMToken;
[L9755]              Alloc[msgsender_MSG] := true;
[L9756]  COND TRUE   choice == 23
[L9757]              gas := gas - 21000;
[L9758]  COND FALSE  !(gas >= 0)
[L9923]  RET         call CorralChoice_OMToken(this);

[2020-11-25 02:29:18,718 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 02:29:18,719 INFO  L82        PathProgramCache]: Analyzing trace with hash -1347900683, now seen corresponding path program 1 times
[2020-11-25 02:29:18,719 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 02:29:18,734 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 02:29:18,927 INFO  L134       CoverageAnalysis]: Checked inductivity of 1030 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 1030 trivial. 0 not checked.
[2020-11-25 02:29:18,927 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 02:29:18,927 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [4] imperfect sequences [] total 4
[2020-11-25 02:29:18,927 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 02:29:18,927 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-11-25 02:29:18,928 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=5, Invalid=7, Unknown=0, NotChecked=0, Total=12
[2020-11-25 02:29:18,928 INFO  L87              Difference]: Start difference. First operand 8101 states and 9415 transitions. cyclomatic complexity: 1318 Second operand 4 states.
[2020-11-25 02:29:18,969 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 02:29:18,969 INFO  L93              Difference]: Finished difference Result 6798 states and 7797 transitions.
[2020-11-25 02:29:18,969 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 4 states. 
[2020-11-25 02:29:18,969 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 6798 states and 7797 transitions.
[2020-11-25 02:29:18,979 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 02:29:18,989 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 6798 states to 6778 states and 7777 transitions.
[2020-11-25 02:29:18,989 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1347
[2020-11-25 02:29:18,990 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1347
[2020-11-25 02:29:18,990 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 6778 states and 7777 transitions.
[2020-11-25 02:29:18,993 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 02:29:18,993 INFO  L728         BuchiCegarLoop]: Abstraction has 6778 states and 7777 transitions.
[2020-11-25 02:29:18,997 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 6778 states and 7777 transitions.
[2020-11-25 02:29:19,020 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 6778 to 6773.
[2020-11-25 02:29:19,020 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 6773 states.
[2020-11-25 02:29:19,027 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 6773 states to 6773 states and 7772 transitions.
[2020-11-25 02:29:19,027 INFO  L751         BuchiCegarLoop]: Abstraction has 6773 states and 7772 transitions.
[2020-11-25 02:29:19,027 INFO  L631         BuchiCegarLoop]: Abstraction has 6773 states and 7772 transitions.
[2020-11-25 02:29:19,027 INFO  L445         BuchiCegarLoop]: ======== Iteration 19============
[2020-11-25 02:29:19,027 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 6773 states and 7772 transitions.
[2020-11-25 02:29:19,033 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 02:29:19,033 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 02:29:19,033 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 02:29:19,034 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [9, 9, 9, 9, 9, 9, 9, 9, 9, 7, 7, 7, 7, 7, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 02:29:19,034 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_allowance_ERC200 := false;
[L2]                 call_allowance_ERC200 := false;
[L2]     CALL        call main();
[L9913]              assume null == 0;
[L9914]  CALL        call this := FreshRefGenerator__success();
[L3962]              havoc newRef;
[L3963]              assume Alloc[newRef] == false;
[L3964]              Alloc[newRef] := true;
[L3965]              assume newRef != null;
[L9914]  RET         call this := FreshRefGenerator__success();
[L9915]              assume now >= 0;
[L9916]              assume DType[this] == OMToken;
[L9917]              assume msgvalue_MSG == 0;
[L9918]              gas := gas - 53000;
[L9919]  CALL        call OMToken_OMToken(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L2714]              havoc __exception;
[L2715]              revert := false;
[L2716]  COND FALSE  !(__exception)
[L2743]  CALL        call OMToken_OMToken__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L6180]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4004]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3989]              assume msgsender_MSG != null;
[L3990]              Balance[this] := 0;
[L4004]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  COND FALSE  !(revert)
[L6180]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6181]  COND FALSE  !(revert)
[L6184]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4206]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4004]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3989]              assume msgsender_MSG != null;
[L3990]              Balance[this] := 0;
[L4004]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  COND FALSE  !(revert)
[L4206]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4207]  COND FALSE  !(revert)
[L4210]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4182]              assume msgsender_MSG != null;
[L4183]              Balance[this] := 0;
[L4184]              _balances_ERC20[this] := zeroRefintArr();
[L4185]              sum__balances0[this] := 0;
[L4186]              _allowed_ERC20[this] := zeroRefRefintArr();
[L4187]              sum__allowed1[this] := 0;
[L4188]              _totalSupply_ERC20[this] := 0;
[L4210]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4211]  COND FALSE  !(revert)
[L6184]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6185]  COND FALSE  !(revert)
[L6188]  CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4974]  CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4928]              assume msgsender_MSG != null;
[L4929]              Balance[this] := 0;
[L4931]  CALL        call __var_22 := FreshRefGenerator__success();
[L3962]              havoc newRef;
[L3963]              assume Alloc[newRef] == false;
[L3964]              Alloc[newRef] := true;
[L3965]              assume newRef != null;
[L4931]  RET         call __var_22 := FreshRefGenerator__success();
[L4932]  COND FALSE  !(revert)
[L4935]              _pausers_PauserRole[this] := __var_22;
[L4937]  COND TRUE   DType[this] == OMToken
[L4938]  CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5128]  CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L4806]              __var_17 := null;
[L4807]  COND FALSE  !(!(account_s659 != null))
[L4811]  CALL        call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4877]              __var_21 := null;
[L4878]  COND FALSE  !(!(account_s713 != null))
[L4882]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s713]][account_s713];
[L4811]  RET         call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4812]  COND FALSE  !(revert)
[L4815]  COND FALSE  !(!!__var_18)
[L4819]              M_Ref_bool[bearer_Roles.Role[role_s659]][account_s659] := true;
[L5128]  RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L5129]  COND FALSE  !(revert)
[L5132]              assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L4938]  RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L4939]  COND FALSE  !(revert)
[L4974]  RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4975]  COND FALSE  !(revert)
[L6188]  RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6189]  COND FALSE  !(revert)
[L6192]  CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L5186]  CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4974]  CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4928]              assume msgsender_MSG != null;
[L4929]              Balance[this] := 0;
[L4931]  CALL        call __var_22 := FreshRefGenerator__success();
[L3962]              havoc newRef;
[L3963]              assume Alloc[newRef] == false;
[L3964]              Alloc[newRef] := true;
[L3965]              assume newRef != null;
[L4931]  RET         call __var_22 := FreshRefGenerator__success();
[L4932]  COND FALSE  !(revert)
[L4935]              _pausers_PauserRole[this] := __var_22;
[L4937]  COND TRUE   DType[this] == OMToken
[L4938]  CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5128]  CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L4806]              __var_17 := null;
[L4807]  COND FALSE  !(!(account_s659 != null))
[L4811]  CALL        call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4877]              __var_21 := null;
[L4878]  COND FALSE  !(!(account_s713 != null))
[L4882]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s713]][account_s713];
[L4811]  RET         call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4812]  COND FALSE  !(revert)
[L4815]  COND FALSE  !(!!__var_18)
[L4819]              M_Ref_bool[bearer_Roles.Role[role_s659]][account_s659] := true;
[L5128]  RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L5129]  COND FALSE  !(revert)
[L5132]              assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L4938]  RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L4939]  COND FALSE  !(revert)
[L4974]  RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4975]  COND FALSE  !(revert)
[L5186]  RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5187]  COND FALSE  !(revert)
[L5190]  CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5165]              assume msgsender_MSG != null;
[L5166]              Balance[this] := 0;
[L5167]              _paused_Pausable[this] := false;
[L5169]              _paused_Pausable[this] := false;
[L5190]  RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5191]  COND FALSE  !(revert)
[L6192]  RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6193]  COND FALSE  !(revert)
[L6196]  CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L5304]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4004]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3989]              assume msgsender_MSG != null;
[L3990]              Balance[this] := 0;
[L4004]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  COND FALSE  !(revert)
[L5304]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5305]  COND FALSE  !(revert)
[L5308]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4206]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4004]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3989]              assume msgsender_MSG != null;
[L3990]              Balance[this] := 0;
[L4004]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  COND FALSE  !(revert)
[L4206]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4207]  COND FALSE  !(revert)
[L4210]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4182]              assume msgsender_MSG != null;
[L4183]              Balance[this] := 0;
[L4184]              _balances_ERC20[this] := zeroRefintArr();
[L4185]              sum__balances0[this] := 0;
[L4186]              _allowed_ERC20[this] := zeroRefRefintArr();
[L4187]              sum__allowed1[this] := 0;
[L4188]              _totalSupply_ERC20[this] := 0;
[L4210]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4211]  COND FALSE  !(revert)
[L5308]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5309]  COND FALSE  !(revert)
[L5312]  CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4974]  CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4928]              assume msgsender_MSG != null;
[L4929]              Balance[this] := 0;
[L4931]  CALL        call __var_22 := FreshRefGenerator__success();
[L3962]              havoc newRef;
[L3963]              assume Alloc[newRef] == false;
[L3964]              Alloc[newRef] := true;
[L3965]              assume newRef != null;
[L4931]  RET         call __var_22 := FreshRefGenerator__success();
[L4932]  COND FALSE  !(revert)
[L4935]              _pausers_PauserRole[this] := __var_22;
[L4937]  COND TRUE   DType[this] == OMToken
[L4938]  CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5128]  CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L4806]              __var_17 := null;
[L4807]  COND FALSE  !(!(account_s659 != null))
[L4811]  CALL        call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4877]              __var_21 := null;
[L4878]  COND FALSE  !(!(account_s713 != null))
[L4882]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s713]][account_s713];
[L4811]  RET         call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4812]  COND FALSE  !(revert)
[L4815]  COND FALSE  !(!!__var_18)
[L4819]              M_Ref_bool[bearer_Roles.Role[role_s659]][account_s659] := true;
[L5128]  RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L5129]  COND FALSE  !(revert)
[L5132]              assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L4938]  RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L4939]  COND FALSE  !(revert)
[L4974]  RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4975]  COND FALSE  !(revert)
[L5312]  RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5313]  COND FALSE  !(revert)
[L5316]  CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L5186]  CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L4974]  CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4928]              assume msgsender_MSG != null;
[L4929]              Balance[this] := 0;
[L4931]  CALL        call __var_22 := FreshRefGenerator__success();
[L3962]              havoc newRef;
[L3963]              assume Alloc[newRef] == false;
[L3964]              Alloc[newRef] := true;
[L3965]              assume newRef != null;
[L4931]  RET         call __var_22 := FreshRefGenerator__success();
[L4932]  COND FALSE  !(revert)
[L4935]              _pausers_PauserRole[this] := __var_22;
[L4937]  COND TRUE   DType[this] == OMToken
[L4938]  CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5128]  CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L4806]              __var_17 := null;
[L4807]  COND FALSE  !(!(account_s659 != null))
[L4811]  CALL        call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4877]              __var_21 := null;
[L4878]  COND FALSE  !(!(account_s713 != null))
[L4882]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s713]][account_s713];
[L4811]  RET         call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4812]  COND FALSE  !(revert)
[L4815]  COND FALSE  !(!!__var_18)
[L4819]              M_Ref_bool[bearer_Roles.Role[role_s659]][account_s659] := true;
[L5128]  RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s797);
[L5129]  COND FALSE  !(revert)
[L5132]              assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L4938]  RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L4939]  COND FALSE  !(revert)
[L4974]  RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4975]  COND FALSE  !(revert)
[L5186]  RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5187]  COND FALSE  !(revert)
[L5190]  CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5165]              assume msgsender_MSG != null;
[L5166]              Balance[this] := 0;
[L5167]              _paused_Pausable[this] := false;
[L5169]              _paused_Pausable[this] := false;
[L5190]  RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5191]  COND FALSE  !(revert)
[L5316]  RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L5317]  COND FALSE  !(revert)
[L5320]  CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5273]              assume msgsender_MSG != null;
[L5274]              Balance[this] := 0;
[L5320]  RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5321]  COND FALSE  !(revert)
[L6196]  RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6197]  COND FALSE  !(revert)
[L6200]  CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L5618]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4004]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3989]              assume msgsender_MSG != null;
[L3990]              Balance[this] := 0;
[L4004]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  COND FALSE  !(revert)
[L5618]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5619]  COND FALSE  !(revert)
[L5622]  CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1022, symbol_s1022, decimals_s1022);
[L5593]              assume msgsender_MSG != null;
[L5594]              Balance[this] := 0;
[L5595]              _name_ERC20Detailed[this] := -1676908070;
[L5596]              _symbol_ERC20Detailed[this] := -1676908070;
[L5597]              _decimals_ERC20Detailed[this] := 0;
[L5599]              _name_ERC20Detailed[this] := name_s1022;
[L5600]              _symbol_ERC20Detailed[this] := symbol_s1022;
[L5601]              _decimals_ERC20Detailed[this] := decimals_s1022;
[L5622]  RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1022, symbol_s1022, decimals_s1022);
[L5623]  COND FALSE  !(revert)
[L6200]  RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L6201]  COND FALSE  !(revert)
[L6204]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5742]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5701]              assume msgsender_MSG != null;
[L5702]              Balance[this] := 0;
[L5704]  CALL        call __var_35 := FreshRefGenerator__success();
[L3962]              havoc newRef;
[L3963]              assume Alloc[newRef] == false;
[L3964]              Alloc[newRef] := true;
[L3965]              assume newRef != null;
[L5704]  RET         call __var_35 := FreshRefGenerator__success();
[L5705]  COND FALSE  !(revert)
[L5708]              _minters_MinterRole[this] := __var_35;
[L5710]  COND TRUE   DType[this] == OMToken
[L5711]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5876]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1130);
[L4806]              __var_17 := null;
[L4807]  COND FALSE  !(!(account_s659 != null))
[L4811]  CALL        call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4877]              __var_21 := null;
[L4878]  COND FALSE  !(!(account_s713 != null))
[L4882]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s713]][account_s713];
[L4811]  RET         call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4812]  COND FALSE  !(revert)
[L4815]  COND FALSE  !(!!__var_18)
[L4819]              M_Ref_bool[bearer_Roles.Role[role_s659]][account_s659] := true;
[L5876]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1130);
[L5877]  COND FALSE  !(revert)
[L5880]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L5711]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5712]  COND FALSE  !(revert)
[L5742]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5743]  COND FALSE  !(revert)
[L6204]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6205]  COND FALSE  !(revert)
[L6208]  CALL        call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L5938]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4004]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3989]              assume msgsender_MSG != null;
[L3990]              Balance[this] := 0;
[L4004]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  COND FALSE  !(revert)
[L5938]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5939]  COND FALSE  !(revert)
[L5942]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4206]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4004]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3989]              assume msgsender_MSG != null;
[L3990]              Balance[this] := 0;
[L4004]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  COND FALSE  !(revert)
[L4206]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4207]  COND FALSE  !(revert)
[L4210]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4182]              assume msgsender_MSG != null;
[L4183]              Balance[this] := 0;
[L4184]              _balances_ERC20[this] := zeroRefintArr();
[L4185]              sum__balances0[this] := 0;
[L4186]              _allowed_ERC20[this] := zeroRefRefintArr();
[L4187]              sum__allowed1[this] := 0;
[L4188]              _totalSupply_ERC20[this] := 0;
[L4210]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4211]  COND FALSE  !(revert)
[L5942]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5943]  COND FALSE  !(revert)
[L5946]  CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5742]  CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5701]              assume msgsender_MSG != null;
[L5702]              Balance[this] := 0;
[L5704]  CALL        call __var_35 := FreshRefGenerator__success();
[L3962]              havoc newRef;
[L3963]              assume Alloc[newRef] == false;
[L3964]              Alloc[newRef] := true;
[L3965]              assume newRef != null;
[L5704]  RET         call __var_35 := FreshRefGenerator__success();
[L5705]  COND FALSE  !(revert)
[L5708]              _minters_MinterRole[this] := __var_35;
[L5710]  COND TRUE   DType[this] == OMToken
[L5711]  CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5876]  CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1130);
[L4806]              __var_17 := null;
[L4807]  COND FALSE  !(!(account_s659 != null))
[L4811]  CALL        call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4877]              __var_21 := null;
[L4878]  COND FALSE  !(!(account_s713 != null))
[L4882]              __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s713]][account_s713];
[L4811]  RET         call __var_18 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s659, account_s659);
[L4812]  COND FALSE  !(revert)
[L4815]  COND FALSE  !(!!__var_18)
[L4819]              M_Ref_bool[bearer_Roles.Role[role_s659]][account_s659] := true;
[L5876]  RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1130);
[L5877]  COND FALSE  !(revert)
[L5880]              assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L5711]  RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5712]  COND FALSE  !(revert)
[L5742]  RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5743]  COND FALSE  !(revert)
[L5946]  RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L5947]  COND FALSE  !(revert)
[L5950]  CALL        call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5911]              assume msgsender_MSG != null;
[L5912]              Balance[this] := 0;
[L5950]  RET         call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5951]  COND FALSE  !(revert)
[L6208]  RET         call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L6209]  COND FALSE  !(revert)
[L6212]  CALL        call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6036]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4004]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3989]              assume msgsender_MSG != null;
[L3990]              Balance[this] := 0;
[L4004]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  COND FALSE  !(revert)
[L6036]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6037]  COND FALSE  !(revert)
[L6040]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4206]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4004]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3989]              assume msgsender_MSG != null;
[L3990]              Balance[this] := 0;
[L4004]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4005]  COND FALSE  !(revert)
[L4206]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4207]  COND FALSE  !(revert)
[L4210]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4182]              assume msgsender_MSG != null;
[L4183]              Balance[this] := 0;
[L4184]              _balances_ERC20[this] := zeroRefintArr();
[L4185]              sum__balances0[this] := 0;
[L4186]              _allowed_ERC20[this] := zeroRefRefintArr();
[L4187]              sum__allowed1[this] := 0;
[L4188]              _totalSupply_ERC20[this] := 0;
[L4210]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4211]  COND FALSE  !(revert)
[L6040]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6041]  COND FALSE  !(revert)
[L6044]  CALL        call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6013]              assume msgsender_MSG != null;
[L6014]              Balance[this] := 0;
[L6044]  RET         call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6045]  COND FALSE  !(revert)
[L6212]  RET         call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6213]  COND FALSE  !(revert)
[L6216]  CALL        call OMToken_OMToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L6129]              assume msgsender_MSG != null;
[L6130]              Balance[this] := 0;
[L6216]  RET         call OMToken_OMToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L6217]  COND FALSE  !(revert)
[L2743]  RET         call OMToken_OMToken__success(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L2744]              assume !revert && gas >= 0;
[L9919]  RET         call OMToken_OMToken(this, msgsender_MSG, msgvalue_MSG, name_s1230, symbol_s1230, decimals_s1230);
[L9920]              assume !revert && gas >= 0;
[L9923]  CALL        call CorralChoice_OMToken(this);
[L9689]              havoc msgsender_MSG;
[L9690]              havoc msgvalue_MSG;
[L9691]              havoc choice;
[L9692]              havoc to_s916;
[L9693]              havoc value_s916;
[L9694]              havoc __ret_0_transfer;
[L9695]              havoc spender_s955;
[L9696]              havoc value_s955;
[L9697]              havoc __ret_0_approve;
[L9698]              havoc from_s937;
[L9699]              havoc to_s937;
[L9700]              havoc value_s937;
[L9701]              havoc __ret_0_transferFrom;
[L9702]              havoc __ret_0_totalSupply;
[L9703]              havoc owner_s231;
[L9704]              havoc __ret_0_balanceOf;
[L9705]              havoc owner_s247;
[L9706]              havoc spender_s247;
[L9707]              havoc __ret_0_allowance;
[L9708]              havoc spender_s973;
[L9709]              havoc addedValue_s973;
[L9710]              havoc success_s973;
[L9711]              havoc spender_s991;
[L9712]              havoc subtractedValue_s991;
[L9713]              havoc success_s991;
[L9714]              havoc account_s760;
[L9715]              havoc __ret_0_isPauser;
[L9716]              havoc account_s772;
[L9717]              havoc __ret_0_paused;
[L9718]              havoc name_s1022;
[L9719]              havoc symbol_s1022;
[L9720]              havoc decimals_s1022;
[L9721]              havoc __ret_0_name;
[L9722]              havoc __ret_0_symbol;
[L9723]              havoc __ret_0_decimals;
[L9724]              havoc account_s1093;
[L9725]              havoc __ret_0_isMinter;
[L9726]              havoc account_s1105;
[L9727]              havoc to_s1170;
[L9728]              havoc value_s1170;
[L9729]              havoc __ret_0_mint;
[L9730]              havoc value_s1185;
[L9731]              havoc from_s1198;
[L9732]              havoc value_s1198;
[L9733]              havoc name_s1230;
[L9734]              havoc symbol_s1230;
[L9735]              havoc decimals_s1230;
[L9736]              havoc tmpNow;
[L9737]              havoc gas;
[L9738]              assume gas > 4000000 && gas <= 8000000;
[L9739]              tmpNow := now;
[L9740]              havoc now;
[L9741]              assume now > tmpNow;
[L9742]              assume msgsender_MSG != null;
[L9743]              assume DType[msgsender_MSG] != IERC20;
[L9744]              assume DType[msgsender_MSG] != SafeMath;
[L9745]              assume DType[msgsender_MSG] != ERC20;
[L9746]              assume DType[msgsender_MSG] != Roles;
[L9747]              assume DType[msgsender_MSG] != PauserRole;
[L9748]              assume DType[msgsender_MSG] != Pausable;
[L9749]              assume DType[msgsender_MSG] != ERC20Pausable;
[L9750]              assume DType[msgsender_MSG] != ERC20Detailed;
[L9751]              assume DType[msgsender_MSG] != MinterRole;
[L9752]              assume DType[msgsender_MSG] != ERC20Mintable;
[L9753]              assume DType[msgsender_MSG] != ERC20Burnable;
[L9754]              assume DType[msgsender_MSG] != OMToken;
[L9755]              Alloc[msgsender_MSG] := true;
[L9756]  COND FALSE  !(choice == 23)
[L9763]  COND FALSE  !(choice == 22)
[L9770]  COND FALSE  !(choice == 21)
[L9777]  COND FALSE  !(choice == 20)
[L9783]  COND FALSE  !(choice == 19)
[L9789]  COND TRUE   choice == 18
[L9790]              gas := gas - 21000;
[L9791]  COND TRUE   gas >= 0
[L9792]              assume msgvalue_MSG == 0;
[L9793]  CALL        call __ret_0_allowance := allowance~address~address_ERC20(this, msgsender_MSG, msgvalue_MSG, owner_s247, spender_s247);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume _allowed_ERC20[this][owner_s247][spender_s247] >= 0 && _allowed_ERC20[this][owner_s247][spender_s247] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_allowance_ERC200 := true;
[L2]                 call_allowance_ERC200 := false;
[L2]                 revert := revert_hold;
[L430]               havoc __exception;
[L431]               revert := false;
[L432]   COND TRUE   __exception
[L433]               __tmp__Balance := Balance;
[L434]               __tmp__DType := DType;
[L435]               __tmp__Alloc := Alloc;
[L436]               __tmp__balance_ADDR := balance_ADDR;
[L437]               __tmp__M_Ref_int := M_Ref_int;
[L438]               __tmp__sum__balances0 := sum__balances0;
[L439]               __tmp__alloc__allowed_ERC20_lvl0 := alloc__allowed_ERC20_lvl0;
[L440]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L441]               __tmp__sum__allowed1 := sum__allowed1;
[L442]               __tmp__M_Ref_bool := M_Ref_bool;
[L443]               __tmp__sum := sum;
[L444]               __tmp__Length := Length;
[L445]               __tmp__now := now;
[L446]               __tmp___balances_ERC20 := _balances_ERC20;
[L447]               __tmp___allowed_ERC20 := _allowed_ERC20;
[L448]               __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L449]               __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L450]               __tmp___pausers_PauserRole := _pausers_PauserRole;
[L451]               __tmp___paused_Pausable := _paused_Pausable;
[L452]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L453]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L454]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L455]               __tmp___minters_MinterRole := _minters_MinterRole;
[L456]   CALL        call __ret_0_ := allowance~address~address_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, owner_s247, spender_s247);
[L4242]              __ret_0_ := __tmp___allowed_ERC20[this][owner_s247][spender_s247];
[L456]   RET         call __ret_0_ := allowance~address~address_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, owner_s247, spender_s247);
[L457]               assume revert || gas < 0;
[L9793]  RET         call __ret_0_allowance := allowance~address~address_ERC20(this, msgsender_MSG, msgvalue_MSG, owner_s247, spender_s247);
[L9923]  RET         call CorralChoice_OMToken(this);

Loop:
[L9923]  CALL        call CorralChoice_OMToken(this);
[L9689]              havoc msgsender_MSG;
[L9690]              havoc msgvalue_MSG;
[L9691]              havoc choice;
[L9692]              havoc to_s916;
[L9693]              havoc value_s916;
[L9694]              havoc __ret_0_transfer;
[L9695]              havoc spender_s955;
[L9696]              havoc value_s955;
[L9697]              havoc __ret_0_approve;
[L9698]              havoc from_s937;
[L9699]              havoc to_s937;
[L9700]              havoc value_s937;
[L9701]              havoc __ret_0_transferFrom;
[L9702]              havoc __ret_0_totalSupply;
[L9703]              havoc owner_s231;
[L9704]              havoc __ret_0_balanceOf;
[L9705]              havoc owner_s247;
[L9706]              havoc spender_s247;
[L9707]              havoc __ret_0_allowance;
[L9708]              havoc spender_s973;
[L9709]              havoc addedValue_s973;
[L9710]              havoc success_s973;
[L9711]              havoc spender_s991;
[L9712]              havoc subtractedValue_s991;
[L9713]              havoc success_s991;
[L9714]              havoc account_s760;
[L9715]              havoc __ret_0_isPauser;
[L9716]              havoc account_s772;
[L9717]              havoc __ret_0_paused;
[L9718]              havoc name_s1022;
[L9719]              havoc symbol_s1022;
[L9720]              havoc decimals_s1022;
[L9721]              havoc __ret_0_name;
[L9722]              havoc __ret_0_symbol;
[L9723]              havoc __ret_0_decimals;
[L9724]              havoc account_s1093;
[L9725]              havoc __ret_0_isMinter;
[L9726]              havoc account_s1105;
[L9727]              havoc to_s1170;
[L9728]              havoc value_s1170;
[L9729]              havoc __ret_0_mint;
[L9730]              havoc value_s1185;
[L9731]              havoc from_s1198;
[L9732]              havoc value_s1198;
[L9733]              havoc name_s1230;
[L9734]              havoc symbol_s1230;
[L9735]              havoc decimals_s1230;
[L9736]              havoc tmpNow;
[L9737]              havoc gas;
[L9738]              assume gas > 4000000 && gas <= 8000000;
[L9739]              tmpNow := now;
[L9740]              havoc now;
[L9741]              assume now > tmpNow;
[L9742]              assume msgsender_MSG != null;
[L9743]              assume DType[msgsender_MSG] != IERC20;
[L9744]              assume DType[msgsender_MSG] != SafeMath;
[L9745]              assume DType[msgsender_MSG] != ERC20;
[L9746]              assume DType[msgsender_MSG] != Roles;
[L9747]              assume DType[msgsender_MSG] != PauserRole;
[L9748]              assume DType[msgsender_MSG] != Pausable;
[L9749]              assume DType[msgsender_MSG] != ERC20Pausable;
[L9750]              assume DType[msgsender_MSG] != ERC20Detailed;
[L9751]              assume DType[msgsender_MSG] != MinterRole;
[L9752]              assume DType[msgsender_MSG] != ERC20Mintable;
[L9753]              assume DType[msgsender_MSG] != ERC20Burnable;
[L9754]              assume DType[msgsender_MSG] != OMToken;
[L9755]              Alloc[msgsender_MSG] := true;
[L9756]  COND FALSE  !(choice == 23)
[L9763]  COND FALSE  !(choice == 22)
[L9770]  COND FALSE  !(choice == 21)
[L9777]  COND FALSE  !(choice == 20)
[L9783]  COND FALSE  !(choice == 19)
[L9789]  COND TRUE   choice == 18
[L9790]              gas := gas - 21000;
[L9791]  COND TRUE   gas >= 0
[L9792]              assume msgvalue_MSG == 0;
[L9793]  CALL        call __ret_0_allowance := allowance~address~address_ERC20(this, msgsender_MSG, msgvalue_MSG, owner_s247, spender_s247);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume _allowed_ERC20[this][owner_s247][spender_s247] >= 0 && _allowed_ERC20[this][owner_s247][spender_s247] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_allowance_ERC200 := true;
[L2]                 call_allowance_ERC200 := false;
[L2]                 revert := revert_hold;
[L430]               havoc __exception;
[L431]               revert := false;
[L432]   COND TRUE   __exception
[L433]               __tmp__Balance := Balance;
[L434]               __tmp__DType := DType;
[L435]               __tmp__Alloc := Alloc;
[L436]               __tmp__balance_ADDR := balance_ADDR;
[L437]               __tmp__M_Ref_int := M_Ref_int;
[L438]               __tmp__sum__balances0 := sum__balances0;
[L439]               __tmp__alloc__allowed_ERC20_lvl0 := alloc__allowed_ERC20_lvl0;
[L440]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L441]               __tmp__sum__allowed1 := sum__allowed1;
[L442]               __tmp__M_Ref_bool := M_Ref_bool;
[L443]               __tmp__sum := sum;
[L444]               __tmp__Length := Length;
[L445]               __tmp__now := now;
[L446]               __tmp___balances_ERC20 := _balances_ERC20;
[L447]               __tmp___allowed_ERC20 := _allowed_ERC20;
[L448]               __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L449]               __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L450]               __tmp___pausers_PauserRole := _pausers_PauserRole;
[L451]               __tmp___paused_Pausable := _paused_Pausable;
[L452]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L453]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L454]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L455]               __tmp___minters_MinterRole := _minters_MinterRole;
[L456]   CALL        call __ret_0_ := allowance~address~address_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, owner_s247, spender_s247);
[L4242]              __ret_0_ := __tmp___allowed_ERC20[this][owner_s247][spender_s247];
[L456]   RET         call __ret_0_ := allowance~address~address_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, owner_s247, spender_s247);
[L457]               assume revert || gas < 0;
[L9793]  RET         call __ret_0_allowance := allowance~address~address_ERC20(this, msgsender_MSG, msgvalue_MSG, owner_s247, spender_s247);
[L9923]  RET         call CorralChoice_OMToken(this);

[2020-11-25 02:29:19,038 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 02:29:19,038 INFO  L82        PathProgramCache]: Analyzing trace with hash 1435660710, now seen corresponding path program 1 times
[2020-11-25 02:29:19,039 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 02:29:19,054 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 02:29:19,187 INFO  L134       CoverageAnalysis]: Checked inductivity of 1030 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 1030 trivial. 0 not checked.
[2020-11-25 02:29:19,187 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 02:29:19,187 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [5] imperfect sequences [] total 5
[2020-11-25 02:29:19,188 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 02:29:19,188 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 5 interpolants.
[2020-11-25 02:29:19,188 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=7, Invalid=13, Unknown=0, NotChecked=0, Total=20
[2020-11-25 02:29:19,188 INFO  L87              Difference]: Start difference. First operand 6773 states and 7772 transitions. cyclomatic complexity: 1002 Second operand 5 states.
[2020-11-25 02:29:19,592 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 02:29:19,592 INFO  L93              Difference]: Finished difference Result 4629 states and 5329 transitions.
[2020-11-25 02:29:19,592 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 7 states. 
[2020-11-25 02:29:19,592 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 4629 states and 5329 transitions.
[2020-11-25 02:29:19,600 INFO  L131   ngComponentsAnalysis]: Automaton has 0 accepting balls. 0
[2020-11-25 02:29:19,600 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 4629 states to 0 states and 0 transitions.
[2020-11-25 02:29:19,600 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 0
[2020-11-25 02:29:19,600 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 0
[2020-11-25 02:29:19,600 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 0 states and 0 transitions.
[2020-11-25 02:29:19,600 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 02:29:19,600 INFO  L728         BuchiCegarLoop]: Abstraction has 0 states and 0 transitions.
[2020-11-25 02:29:19,600 INFO  L751         BuchiCegarLoop]: Abstraction has 0 states and 0 transitions.
[2020-11-25 02:29:19,600 INFO  L631         BuchiCegarLoop]: Abstraction has 0 states and 0 transitions.
[2020-11-25 02:29:19,600 INFO  L445         BuchiCegarLoop]: ======== Iteration 20============
[2020-11-25 02:29:19,600 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 0 states and 0 transitions.
[2020-11-25 02:29:19,601 INFO  L131   ngComponentsAnalysis]: Automaton has 0 accepting balls. 0
[2020-11-25 02:29:19,601 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is true
[2020-11-25 02:29:19,604 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer CFG 25.11 02:29:19 BasicIcfg
[2020-11-25 02:29:19,604 INFO  L132        PluginConnector]: ------------------------ END BuchiAutomizer----------------------------
[2020-11-25 02:29:19,604 INFO  L168              Benchmark]: Toolchain (without parser) took 18975.83 ms. Allocated memory was 1.0 GB in the beginning and 3.1 GB in the end (delta: 2.0 GB). Free memory was 924.5 MB in the beginning and 1.6 GB in the end (delta: -647.6 MB). Peak memory consumption was 1.4 GB. Max. memory is 15.3 GB.
[2020-11-25 02:29:19,605 INFO  L168              Benchmark]: Boogie PL CUP Parser took 0.15 ms. Allocated memory is still 1.0 GB. Free memory is still 951.3 MB. There was no memory consumed. Max. memory is 15.3 GB.
[2020-11-25 02:29:19,605 INFO  L168              Benchmark]: Boogie Preprocessor took 150.44 ms. Allocated memory is still 1.0 GB. Free memory was 924.5 MB in the beginning and 903.0 MB in the end (delta: 21.5 MB). Peak memory consumption was 21.5 MB. Max. memory is 15.3 GB.
[2020-11-25 02:29:19,605 INFO  L168              Benchmark]: UtopiaSpecLang took 80.57 ms. Allocated memory is still 1.0 GB. Free memory was 903.0 MB in the beginning and 892.2 MB in the end (delta: 10.7 MB). Peak memory consumption was 10.7 MB. Max. memory is 15.3 GB.
[2020-11-25 02:29:19,605 INFO  L168              Benchmark]: Boogie Printer took 26.54 ms. Allocated memory is still 1.0 GB. Free memory was 892.2 MB in the beginning and 886.9 MB in the end (delta: 5.4 MB). Peak memory consumption was 5.4 MB. Max. memory is 15.3 GB.
[2020-11-25 02:29:19,605 INFO  L168              Benchmark]: RCFGBuilder took 1374.89 ms. Allocated memory was 1.0 GB in the beginning and 1.1 GB in the end (delta: 57.1 MB). Free memory was 886.9 MB in the beginning and 821.3 MB in the end (delta: 65.5 MB). Peak memory consumption was 175.9 MB. Max. memory is 15.3 GB.
[2020-11-25 02:29:19,606 INFO  L168              Benchmark]: UtopiaLTL2Aut took 30.93 ms. Allocated memory is still 1.1 GB. Free memory was 821.3 MB in the beginning and 817.9 MB in the end (delta: 3.4 MB). Peak memory consumption was 3.4 MB. Max. memory is 15.3 GB.
[2020-11-25 02:29:19,606 INFO  L168              Benchmark]: BÃ¼chi Program Product took 3211.51 ms. Allocated memory was 1.1 GB in the beginning and 1.6 GB in the end (delta: 468.7 MB). Free memory was 817.9 MB in the beginning and 1.3 GB in the end (delta: -450.3 MB). Peak memory consumption was 404.9 MB. Max. memory is 15.3 GB.
[2020-11-25 02:29:19,606 INFO  L168              Benchmark]: BlockEncodingV2 took 265.33 ms. Allocated memory is still 1.6 GB. Free memory was 1.3 GB in the beginning and 1.1 GB in the end (delta: 128.9 MB). Peak memory consumption was 128.9 MB. Max. memory is 15.3 GB.
[2020-11-25 02:29:19,607 INFO  L168              Benchmark]: BuchiAutomizer took 13832.47 ms. Allocated memory was 1.6 GB in the beginning and 3.1 GB in the end (delta: 1.5 GB). Free memory was 1.1 GB in the beginning and 1.6 GB in the end (delta: -432.7 MB). Peak memory consumption was 1.1 GB. Max. memory is 15.3 GB.
[2020-11-25 02:29:19,609 INFO  L337   ainManager$Toolchain]: #######################  End [Toolchain 1] #######################
 --- Results ---
 * Results from de.uni_freiburg.informatik.ultimate.plugins.blockencoding:
  - StatisticsResult: Initial Icfg
    9262 locations, 17155 edges
  - StatisticsResult: Encoded RCFG
    9106 locations, 16728 edges
 * Results from de.uni_freiburg.informatik.ultimate.core:
  - StatisticsResult: Toolchain Benchmarks
    Benchmark results are:
 * Boogie PL CUP Parser took 0.15 ms. Allocated memory is still 1.0 GB. Free memory is still 951.3 MB. There was no memory consumed. Max. memory is 15.3 GB.
 * Boogie Preprocessor took 150.44 ms. Allocated memory is still 1.0 GB. Free memory was 924.5 MB in the beginning and 903.0 MB in the end (delta: 21.5 MB). Peak memory consumption was 21.5 MB. Max. memory is 15.3 GB.
 * UtopiaSpecLang took 80.57 ms. Allocated memory is still 1.0 GB. Free memory was 903.0 MB in the beginning and 892.2 MB in the end (delta: 10.7 MB). Peak memory consumption was 10.7 MB. Max. memory is 15.3 GB.
 * Boogie Printer took 26.54 ms. Allocated memory is still 1.0 GB. Free memory was 892.2 MB in the beginning and 886.9 MB in the end (delta: 5.4 MB). Peak memory consumption was 5.4 MB. Max. memory is 15.3 GB.
 * RCFGBuilder took 1374.89 ms. Allocated memory was 1.0 GB in the beginning and 1.1 GB in the end (delta: 57.1 MB). Free memory was 886.9 MB in the beginning and 821.3 MB in the end (delta: 65.5 MB). Peak memory consumption was 175.9 MB. Max. memory is 15.3 GB.
 * UtopiaLTL2Aut took 30.93 ms. Allocated memory is still 1.1 GB. Free memory was 821.3 MB in the beginning and 817.9 MB in the end (delta: 3.4 MB). Peak memory consumption was 3.4 MB. Max. memory is 15.3 GB.
 * BÃ¼chi Program Product took 3211.51 ms. Allocated memory was 1.1 GB in the beginning and 1.6 GB in the end (delta: 468.7 MB). Free memory was 817.9 MB in the beginning and 1.3 GB in the end (delta: -450.3 MB). Peak memory consumption was 404.9 MB. Max. memory is 15.3 GB.
 * BlockEncodingV2 took 265.33 ms. Allocated memory is still 1.6 GB. Free memory was 1.3 GB in the beginning and 1.1 GB in the end (delta: 128.9 MB). Peak memory consumption was 128.9 MB. Max. memory is 15.3 GB.
 * BuchiAutomizer took 13832.47 ms. Allocated memory was 1.6 GB in the beginning and 3.1 GB in the end (delta: 1.5 GB). Free memory was 1.1 GB in the beginning and 1.6 GB in the end (delta: -432.7 MB). Peak memory consumption was 1.1 GB. Max. memory is 15.3 GB.
 * Results from de.uni_freiburg.informatik.ultimate.buchiprogramproduct:
  - StatisticsResult: Initial property automaton
    2 locations, 3 edges
  - StatisticsResult: Initial RCFG
    3603 locations, 5216 edges
  - StatisticsResult: BuchiProgram size
    9262 locations, 17155 edges
 * Results from de.uni_freiburg.informatik.ultimate.plugins.generator.traceabstraction:
  - StatisticsResult: Constructed decomposition of program
    Your program was decomposed into 19 terminating modules (19 trivial, 0 deterministic, 0 nondeterministic). 19 modules have a trivial ranking function, the largest among these consists of 10 locations.
  - StatisticsResult: Timing statistics
    BÃ¼chiAutomizer plugin needed 13.8s and 20 iterations.  TraceHistogramMax:9. Analysis of lassos took 3.1s. Construction of modules took 5.9s. BÃ¼chi inclusion checks took 2.6s. Highest rank in rank-based complementation 0. Minimization of det autom 19. Minimization of nondet autom 0. Automata minimization 0.9s AutomataMinimizationTime, 18 MinimizatonAttempts, 2993 StatesRemovedByMinimization, 10 NontrivialMinimizations. Non-live state removal took 0.5s Buchi closure took 0.0s. Biggest automaton had 8141 states and ocurred in iteration 15.	Nontrivial modules had stage [0, 0, 0, 0, 0].	InterpolantCoveringCapabilityFinite: 0/0	InterpolantCoveringCapabilityBuchi: 0/0	HoareTripleCheckerStatistics: 117139 SDtfs, 46188 SDslu, 523519 SDs, 0 SdLazy, 62259 SolverSat, 5409 SolverUnsat, 0 SolverUnknown, 0 SolverNotchecked, 5.9s Time	LassoAnalysisResults: nont0 unkn0 SFLI0 SFLT0 conc0 concLT0 SILN0 SILU19 SILI0 SILT0 lasso0 LassoPreprocessingBenchmarks: LassoTerminationAnalysisBenchmarks: not availableLassoTerminationAnalysisBenchmarks: LassoNonterminationAnalysisSatFixpoint: 0	LassoNonterminationAnalysisSatUnbounded: 0	LassoNonterminationAnalysisUnsat: 0	LassoNonterminationAnalysisUnknown: 0	LassoNonterminationAnalysisTime: 0.0s	
  - AllSpecificationsHoldResult: All specifications hold
    Buchi Automizer proved that the LTL property ! ( ( []( (call_allowance_ERC200) ==> ( <>(success_allowance_ERC200) ) ) )) holds
RESULT: Ultimate proved your program to be correct!
Received shutdown request...
